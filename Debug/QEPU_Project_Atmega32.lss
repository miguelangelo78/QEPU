
QEPU_Project_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c9a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  00006c9a  00006d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800128  00800128  00006e16  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00006e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00006e18  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00006e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e2a2  00000000  00000000  000071dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001475  00000000  00000000  0001547e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001346  00000000  00000000  000168f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013b8  00000000  00000000  00017c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f6d  00000000  00000000  00018ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006612  00000000  00000000  00019f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  00020573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ca 00 	jmp	0x194	; 0x194 <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      2c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      54:	ab 20       	and	r10, r11
      56:	ca 20       	and	r12, r10
      58:	d7 20       	and	r13, r7
      5a:	e3 20       	and	r14, r3
      5c:	f1 20       	and	r15, r1
      5e:	f8 20       	and	r15, r8
      60:	ff 20       	and	r15, r15
      62:	09 21       	and	r16, r9
      64:	1a 21       	and	r17, r10
      66:	23 21       	and	r18, r3
      68:	72 26       	eor	r7, r18
      6a:	72 26       	eor	r7, r18
      6c:	72 26       	eor	r7, r18
      6e:	2c 21       	and	r18, r12
      70:	33 21       	and	r19, r3
      72:	72 26       	eor	r7, r18
      74:	39 21       	and	r19, r9
      76:	3f 21       	and	r19, r15
      78:	68 21       	and	r22, r8
      7a:	91 21       	and	r25, r1
      7c:	ba 21       	and	r27, r10
      7e:	e3 21       	and	r30, r3
      80:	0c 22       	and	r0, r28
      82:	35 22       	and	r3, r21
      84:	60 22       	and	r6, r16
      86:	8b 22       	and	r8, r27
      88:	b6 22       	and	r11, r22
      8a:	08 23       	and	r16, r24
      8c:	5a 23       	and	r21, r26
      8e:	ac 23       	and	r26, r28
      90:	fe 23       	and	r31, r30
      92:	50 24       	eor	r5, r0
      94:	a2 24       	eor	r10, r2
      96:	f4 24       	eor	r15, r4
      98:	70 25       	eor	r23, r0
      9a:	ec 25       	eor	r30, r12
      9c:	08 4a       	sbci	r16, 0xA8	; 168
      9e:	d7 3b       	cpi	r29, 0xB7	; 183
      a0:	3b ce       	rjmp	.-906    	; 0xfffffd18 <__eeprom_end+0xff7efd16>
      a2:	01 6e       	ori	r16, 0xE1	; 225
      a4:	84 bc       	out	0x24, r8	; 36
      a6:	bf fd       	.word	0xfdbf	; ????
      a8:	c1 2f       	mov	r28, r17
      aa:	3d 6c       	ori	r19, 0xCD	; 205
      ac:	74 31       	cpi	r23, 0x14	; 20
      ae:	9a bd       	out	0x2a, r25	; 42
      b0:	56 83       	std	Z+6, r21	; 0x06
      b2:	3d da       	rcall	.-2950   	; 0xfffff52e <__eeprom_end+0xff7ef52c>
      b4:	3d 00       	.word	0x003d	; ????
      b6:	c7 7f       	andi	r28, 0xF7	; 247
      b8:	11 be       	out	0x31, r1	; 49
      ba:	d9 e4       	ldi	r29, 0x49	; 73
      bc:	bb 4c       	sbci	r27, 0xCB	; 203
      be:	3e 91       	ld	r19, -X
      c0:	6b aa       	std	Y+51, r6	; 0x33
      c2:	aa be       	out	0x3a, r10	; 58
      c4:	00 00       	nop
      c6:	00 80       	ld	r0, Z
      c8:	3f 07       	cpc	r19, r31
      ca:	63 42       	sbci	r22, 0x23	; 35
      cc:	36 b7       	in	r19, 0x36	; 54
      ce:	9b d8       	rcall	.-3786   	; 0xfffff206 <__eeprom_end+0xff7ef204>
      d0:	a7 1a       	sub	r10, r23
      d2:	39 68       	ori	r19, 0x89	; 137
      d4:	56 18       	sub	r5, r6
      d6:	ae ba       	out	0x1e, r10	; 30
      d8:	ab 55       	subi	r26, 0x5B	; 91
      da:	8c 1d       	adc	r24, r12
      dc:	3c b7       	in	r19, 0x3c	; 60
      de:	cc 57       	subi	r28, 0x7C	; 124
      e0:	63 bd       	out	0x23, r22	; 35
      e2:	6d ed       	ldi	r22, 0xDD	; 221
      e4:	fd 75       	andi	r31, 0x5D	; 93
      e6:	3e f6       	brtc	.-114    	; 0x76 <__SREG__+0x37>
      e8:	17 72       	andi	r17, 0x27	; 39
      ea:	31 bf       	out	0x31, r19	; 49
      ec:	00 00       	nop
      ee:	00 80       	ld	r0, Z
      f0:	3f 07       	cpc	r19, r31
      f2:	2c 7a       	andi	r18, 0xAC	; 172
      f4:	a5 ba       	out	0x15, r10	; 21
      f6:	6c c5       	rjmp	.+2776   	; 0xbd0 <_ZN5Gates8ampl2vecEiPiS0_+0x13a>
      f8:	90 da       	rcall	.-2784   	; 0xfffff61a <__eeprom_end+0xff7ef618>
      fa:	3b 93       	.word	0x933b	; ????
      fc:	65 fc       	sbrc	r6, 5
      fe:	8b bc       	out	0x2b, r8	; 43
     100:	53 f8       	bld	r5, 3
     102:	10 fd       	sbrc	r17, 0
     104:	3c 56       	subi	r19, 0x6C	; 108
     106:	92 83       	std	Z+2, r25	; 0x02
     108:	4d bd       	out	0x2d, r20	; 45
     10a:	87 9d       	mul	r24, r7
     10c:	3a b6       	in	r3, 0x3a	; 58
     10e:	3d cb       	rjmp	.-2438   	; 0xfffff78a <__eeprom_end+0xff7ef788>
     110:	c9 bf       	out	0x39, r28	; 57
     112:	5b be       	out	0x3b, r5	; 59
     114:	73 da       	rcall	.-2842   	; 0xfffff5fc <__eeprom_end+0xff7ef5fa>
     116:	0f c9       	rjmp	.-3554   	; 0xfffff336 <__eeprom_end+0xff7ef334>
     118:	3f 05       	cpc	r19, r15
     11a:	a8 4c       	sbci	r26, 0xC8	; 200
     11c:	cd b2       	in	r12, 0x1d	; 29
     11e:	d4 4e       	sbci	r29, 0xE4	; 228
     120:	b9 38       	cpi	r27, 0x89	; 137
     122:	36 a9       	ldd	r19, Z+54	; 0x36
     124:	02 0c       	add	r0, r2
     126:	50 b9       	out	0x00, r21	; 0
     128:	91 86       	std	Z+9, r9	; 0x09
     12a:	88 08       	sbc	r8, r8
     12c:	3c a6       	std	Y+44, r3	; 0x2c
     12e:	aa aa       	std	Y+50, r10	; 0x32
     130:	2a be       	out	0x3a, r2	; 58
     132:	00 00       	nop
     134:	00 80       	ld	r0, Z
     136:	3f 08       	sbc	r3, r15
     138:	00 00       	nop
     13a:	00 be       	out	0x30, r0	; 48
     13c:	92 24       	eor	r9, r2
     13e:	49 12       	cpse	r4, r25
     140:	3e ab       	std	Y+54, r19	; 0x36
     142:	aa aa       	std	Y+50, r10	; 0x32
     144:	2a be       	out	0x3a, r2	; 58
     146:	cd cc       	rjmp	.-1638   	; 0xfffffae2 <__eeprom_end+0xff7efae0>
     148:	cc 4c       	sbci	r28, 0xCC	; 204
     14a:	3e 00       	.word	0x003e	; ????
     14c:	00 00       	nop
     14e:	80 be       	out	0x30, r8	; 48
     150:	ab aa       	std	Y+51, r10	; 0x33
     152:	aa aa       	std	Y+50, r10	; 0x32
     154:	3e 00       	.word	0x003e	; ????
     156:	00 00       	nop
     158:	00 bf       	out	0x30, r16	; 48
     15a:	00 00       	nop
     15c:	00 80       	ld	r0, Z
     15e:	3f 00       	.word	0x003f	; ????
     160:	00 00       	nop
     162:	00 00       	nop
     164:	08 41       	sbci	r16, 0x18	; 24
     166:	78 d3       	rcall	.+1776   	; 0x858 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b2>
     168:	bb 43       	sbci	r27, 0x3B	; 59
     16a:	87 d1       	rcall	.+782    	; 0x47a <_ZN6EEProm4readEj+0x4a>
     16c:	13 3d       	cpi	r17, 0xD3	; 211
     16e:	19 0e       	add	r1, r25
     170:	3c c3       	rjmp	.+1656   	; 0x7ea <_ZN5Gates17reverse_kroneckerEP7Complexi+0x144>
     172:	bd 42       	sbci	r27, 0x2D	; 45
     174:	82 ad       	ldd	r24, Z+58	; 0x3a
     176:	2b 3e       	cpi	r18, 0xEB	; 235
     178:	68 ec       	ldi	r22, 0xC8	; 200
     17a:	82 76       	andi	r24, 0x62	; 98
     17c:	be d9       	rcall	.-3204   	; 0xfffff4fa <__eeprom_end+0xff7ef4f8>
     17e:	8f e1       	ldi	r24, 0x1F	; 31
     180:	a9 3e       	cpi	r26, 0xE9	; 233
     182:	4c 80       	ldd	r4, Y+4	; 0x04
     184:	ef ff       	.word	0xffef	; ????
     186:	be 01       	movw	r22, r28
     188:	c4 ff       	sbrs	r28, 4
     18a:	7f 3f       	cpi	r23, 0xFF	; 255
     18c:	00 00       	nop
     18e:	00 00       	nop
	...

00000192 <__ctors_start>:
     192:	9f 1d       	adc	r25, r15

00000194 <__ctors_end>:
     194:	11 24       	eor	r1, r1
     196:	1f be       	out	0x3f, r1	; 63
     198:	cf e5       	ldi	r28, 0x5F	; 95
     19a:	d8 e0       	ldi	r29, 0x08	; 8
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
     1a0:	11 e0       	ldi	r17, 0x01	; 1
     1a2:	a0 e6       	ldi	r26, 0x60	; 96
     1a4:	b0 e0       	ldi	r27, 0x00	; 0
     1a6:	ea e9       	ldi	r30, 0x9A	; 154
     1a8:	fc e6       	ldi	r31, 0x6C	; 108
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x10>
     1ac:	05 90       	lpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	a8 32       	cpi	r26, 0x28	; 40
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0xc>

000001b6 <__do_clear_bss>:
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	a8 e2       	ldi	r26, 0x28	; 40
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	af 32       	cpi	r26, 0x2F	; 47
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>

000001c6 <__do_global_ctors>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	c4 e9       	ldi	r28, 0x94	; 148
     1ca:	d1 e0       	ldi	r29, 0x01	; 1
     1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <__do_global_ctors+0x10>
     1ce:	22 97       	sbiw	r28, 0x02	; 2
     1d0:	fe 01       	movw	r30, r28
     1d2:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__tablejump__>
     1d6:	c2 39       	cpi	r28, 0x92	; 146
     1d8:	d1 07       	cpc	r29, r17
     1da:	c9 f7       	brne	.-14     	; 0x1ce <__do_global_ctors+0x8>
     1dc:	0e 94 9c 28 	call	0x5138	; 0x5138 <main>
     1e0:	0c 94 4b 36 	jmp	0x6c96	; 0x6c96 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <_ZN7ComplexC1Eff>:
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	fc 01       	movw	r30, r24
     1ee:	40 83       	st	Z, r20
     1f0:	51 83       	std	Z+1, r21	; 0x01
     1f2:	62 83       	std	Z+2, r22	; 0x02
     1f4:	73 83       	std	Z+3, r23	; 0x03
     1f6:	04 83       	std	Z+4, r16	; 0x04
     1f8:	15 83       	std	Z+5, r17	; 0x05
     1fa:	26 83       	std	Z+6, r18	; 0x06
     1fc:	37 83       	std	Z+7, r19	; 0x07
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	08 95       	ret

00000204 <_ZN7ComplexC1Ev>:
     204:	fc 01       	movw	r30, r24
     206:	10 82       	st	Z, r1
     208:	11 82       	std	Z+1, r1	; 0x01
     20a:	12 82       	std	Z+2, r1	; 0x02
     20c:	13 82       	std	Z+3, r1	; 0x03
     20e:	14 82       	std	Z+4, r1	; 0x04
     210:	15 82       	std	Z+5, r1	; 0x05
     212:	16 82       	std	Z+6, r1	; 0x06
     214:	17 82       	std	Z+7, r1	; 0x07
     216:	08 95       	ret

00000218 <_ZN7Complex3addES_>:
     218:	af 92       	push	r10
     21a:	bf 92       	push	r11
     21c:	cf 92       	push	r12
     21e:	df 92       	push	r13
     220:	ef 92       	push	r14
     222:	ff 92       	push	r15
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	68 97       	sbiw	r28, 0x18	; 24
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	5c 01       	movw	r10, r24
     23e:	09 8b       	std	Y+17, r16	; 0x11
     240:	1a 8b       	std	Y+18, r17	; 0x12
     242:	2b 8b       	std	Y+19, r18	; 0x13
     244:	3c 8b       	std	Y+20, r19	; 0x14
     246:	4d 8b       	std	Y+21, r20	; 0x15
     248:	5e 8b       	std	Y+22, r21	; 0x16
     24a:	6f 8b       	std	Y+23, r22	; 0x17
     24c:	78 8f       	std	Y+24, r23	; 0x18
     24e:	2d 89       	ldd	r18, Y+21	; 0x15
     250:	3e 89       	ldd	r19, Y+22	; 0x16
     252:	4f 89       	ldd	r20, Y+23	; 0x17
     254:	58 8d       	ldd	r21, Y+24	; 0x18
     256:	fc 01       	movw	r30, r24
     258:	64 81       	ldd	r22, Z+4	; 0x04
     25a:	75 81       	ldd	r23, Z+5	; 0x05
     25c:	86 81       	ldd	r24, Z+6	; 0x06
     25e:	97 81       	ldd	r25, Z+7	; 0x07
     260:	0e 94 c8 2b 	call	0x5790	; 0x5790 <__addsf3>
     264:	6b 01       	movw	r12, r22
     266:	7c 01       	movw	r14, r24
     268:	29 89       	ldd	r18, Y+17	; 0x11
     26a:	3a 89       	ldd	r19, Y+18	; 0x12
     26c:	4b 89       	ldd	r20, Y+19	; 0x13
     26e:	5c 89       	ldd	r21, Y+20	; 0x14
     270:	f5 01       	movw	r30, r10
     272:	60 81       	ld	r22, Z
     274:	71 81       	ldd	r23, Z+1	; 0x01
     276:	82 81       	ldd	r24, Z+2	; 0x02
     278:	93 81       	ldd	r25, Z+3	; 0x03
     27a:	0e 94 c8 2b 	call	0x5790	; 0x5790 <__addsf3>
     27e:	ab 01       	movw	r20, r22
     280:	bc 01       	movw	r22, r24
     282:	97 01       	movw	r18, r14
     284:	86 01       	movw	r16, r12
     286:	ce 01       	movw	r24, r28
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
     28e:	88 e0       	ldi	r24, 0x08	; 8
     290:	fe 01       	movw	r30, r28
     292:	31 96       	adiw	r30, 0x01	; 1
     294:	de 01       	movw	r26, r28
     296:	19 96       	adiw	r26, 0x09	; 9
     298:	01 90       	ld	r0, Z+
     29a:	0d 92       	st	X+, r0
     29c:	8a 95       	dec	r24
     29e:	e1 f7       	brne	.-8      	; 0x298 <_ZN7Complex3addES_+0x80>
     2a0:	29 85       	ldd	r18, Y+9	; 0x09
     2a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     2a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     2a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     2a8:	6d 85       	ldd	r22, Y+13	; 0x0d
     2aa:	7e 85       	ldd	r23, Y+14	; 0x0e
     2ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     2ae:	98 89       	ldd	r25, Y+16	; 0x10
     2b0:	68 96       	adiw	r28, 0x18	; 24
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	df 90       	pop	r13
     2ca:	cf 90       	pop	r12
     2cc:	bf 90       	pop	r11
     2ce:	af 90       	pop	r10
     2d0:	08 95       	ret

000002d2 <_ZN7Complex3mulES_>:
     2d2:	4f 92       	push	r4
     2d4:	5f 92       	push	r5
     2d6:	6f 92       	push	r6
     2d8:	7f 92       	push	r7
     2da:	8f 92       	push	r8
     2dc:	9f 92       	push	r9
     2de:	af 92       	push	r10
     2e0:	bf 92       	push	r11
     2e2:	cf 92       	push	r12
     2e4:	df 92       	push	r13
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	a0 97       	sbiw	r28, 0x20	; 32
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	cd bf       	out	0x3d, r28	; 61
     302:	09 8b       	std	Y+17, r16	; 0x11
     304:	1a 8b       	std	Y+18, r17	; 0x12
     306:	2b 8b       	std	Y+19, r18	; 0x13
     308:	3c 8b       	std	Y+20, r19	; 0x14
     30a:	4d 8b       	std	Y+21, r20	; 0x15
     30c:	5e 8b       	std	Y+22, r21	; 0x16
     30e:	6f 8b       	std	Y+23, r22	; 0x17
     310:	78 8f       	std	Y+24, r23	; 0x18
     312:	89 88       	ldd	r8, Y+17	; 0x11
     314:	9a 88       	ldd	r9, Y+18	; 0x12
     316:	ab 88       	ldd	r10, Y+19	; 0x13
     318:	bc 88       	ldd	r11, Y+20	; 0x14
     31a:	2d 89       	ldd	r18, Y+21	; 0x15
     31c:	3e 89       	ldd	r19, Y+22	; 0x16
     31e:	4f 89       	ldd	r20, Y+23	; 0x17
     320:	58 8d       	ldd	r21, Y+24	; 0x18
     322:	2d 8f       	std	Y+29, r18	; 0x1d
     324:	3e 8f       	std	Y+30, r19	; 0x1e
     326:	4f 8f       	std	Y+31, r20	; 0x1f
     328:	58 a3       	std	Y+32, r21	; 0x20
     32a:	fc 01       	movw	r30, r24
     32c:	c0 80       	ld	r12, Z
     32e:	d1 80       	ldd	r13, Z+1	; 0x01
     330:	e2 80       	ldd	r14, Z+2	; 0x02
     332:	f3 80       	ldd	r15, Z+3	; 0x03
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	29 8f       	std	Y+25, r18	; 0x19
     33e:	3a 8f       	std	Y+26, r19	; 0x1a
     340:	4b 8f       	std	Y+27, r20	; 0x1b
     342:	5c 8f       	std	Y+28, r21	; 0x1c
     344:	2d 8d       	ldd	r18, Y+29	; 0x1d
     346:	3e 8d       	ldd	r19, Y+30	; 0x1e
     348:	4f 8d       	ldd	r20, Y+31	; 0x1f
     34a:	58 a1       	ldd	r21, Y+32	; 0x20
     34c:	c7 01       	movw	r24, r14
     34e:	b6 01       	movw	r22, r12
     350:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     354:	2b 01       	movw	r4, r22
     356:	3c 01       	movw	r6, r24
     358:	a5 01       	movw	r20, r10
     35a:	94 01       	movw	r18, r8
     35c:	69 8d       	ldd	r22, Y+25	; 0x19
     35e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     360:	8b 8d       	ldd	r24, Y+27	; 0x1b
     362:	9c 8d       	ldd	r25, Y+28	; 0x1c
     364:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     368:	9b 01       	movw	r18, r22
     36a:	ac 01       	movw	r20, r24
     36c:	c3 01       	movw	r24, r6
     36e:	b2 01       	movw	r22, r4
     370:	0e 94 c8 2b 	call	0x5790	; 0x5790 <__addsf3>
     374:	2b 01       	movw	r4, r22
     376:	3c 01       	movw	r6, r24
     378:	a5 01       	movw	r20, r10
     37a:	94 01       	movw	r18, r8
     37c:	c7 01       	movw	r24, r14
     37e:	b6 01       	movw	r22, r12
     380:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     384:	6b 01       	movw	r12, r22
     386:	7c 01       	movw	r14, r24
     388:	2d 8d       	ldd	r18, Y+29	; 0x1d
     38a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     38c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     38e:	58 a1       	ldd	r21, Y+32	; 0x20
     390:	69 8d       	ldd	r22, Y+25	; 0x19
     392:	7a 8d       	ldd	r23, Y+26	; 0x1a
     394:	8b 8d       	ldd	r24, Y+27	; 0x1b
     396:	9c 8d       	ldd	r25, Y+28	; 0x1c
     398:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     39c:	9b 01       	movw	r18, r22
     39e:	ac 01       	movw	r20, r24
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	0e 94 c7 2b 	call	0x578e	; 0x578e <__subsf3>
     3a8:	ab 01       	movw	r20, r22
     3aa:	bc 01       	movw	r22, r24
     3ac:	93 01       	movw	r18, r6
     3ae:	82 01       	movw	r16, r4
     3b0:	ce 01       	movw	r24, r28
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
     3b8:	88 e0       	ldi	r24, 0x08	; 8
     3ba:	fe 01       	movw	r30, r28
     3bc:	31 96       	adiw	r30, 0x01	; 1
     3be:	de 01       	movw	r26, r28
     3c0:	19 96       	adiw	r26, 0x09	; 9
     3c2:	01 90       	ld	r0, Z+
     3c4:	0d 92       	st	X+, r0
     3c6:	8a 95       	dec	r24
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <_ZN7Complex3mulES_+0xf0>
     3ca:	29 85       	ldd	r18, Y+9	; 0x09
     3cc:	3a 85       	ldd	r19, Y+10	; 0x0a
     3ce:	4b 85       	ldd	r20, Y+11	; 0x0b
     3d0:	5c 85       	ldd	r21, Y+12	; 0x0c
     3d2:	6d 85       	ldd	r22, Y+13	; 0x0d
     3d4:	7e 85       	ldd	r23, Y+14	; 0x0e
     3d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d8:	98 89       	ldd	r25, Y+16	; 0x10
     3da:	a0 96       	adiw	r28, 0x20	; 32
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	df 90       	pop	r13
     3f4:	cf 90       	pop	r12
     3f6:	bf 90       	pop	r11
     3f8:	af 90       	pop	r10
     3fa:	9f 90       	pop	r9
     3fc:	8f 90       	pop	r8
     3fe:	7f 90       	pop	r7
     400:	6f 90       	pop	r6
     402:	5f 90       	pop	r5
     404:	4f 90       	pop	r4
     406:	08 95       	ret

00000408 <_ZN7Complex3argEv>:
     408:	fc 01       	movw	r30, r24
     40a:	20 81       	ld	r18, Z
     40c:	31 81       	ldd	r19, Z+1	; 0x01
     40e:	42 81       	ldd	r20, Z+2	; 0x02
     410:	53 81       	ldd	r21, Z+3	; 0x03
     412:	64 81       	ldd	r22, Z+4	; 0x04
     414:	75 81       	ldd	r23, Z+5	; 0x05
     416:	86 81       	ldd	r24, Z+6	; 0x06
     418:	97 81       	ldd	r25, Z+7	; 0x07
     41a:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
     41e:	0e 94 2c 2c 	call	0x5858	; 0x5858 <atan>
     422:	08 95       	ret

00000424 <_ZN6EEPromC1Ev>:
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     424:	85 e0       	ldi	r24, 0x05	; 5
     426:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     428:	81 b1       	in	r24, 0x01	; 1
     42a:	8c 7f       	andi	r24, 0xFC	; 252
     42c:	81 b9       	out	0x01, r24	; 1
     42e:	08 95       	ret

00000430 <_ZN6EEProm4readEj>:
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     430:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     432:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     434:	24 e8       	ldi	r18, 0x84	; 132
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     436:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     438:	06 b6       	in	r0, 0x36	; 54
     43a:	07 fe       	sbrs	r0, 7
     43c:	fd cf       	rjmp	.-6      	; 0x438 <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     43e:	81 b1       	in	r24, 0x01	; 1
     440:	88 7f       	andi	r24, 0xF8	; 248
     442:	88 30       	cpi	r24, 0x08	; 8
     444:	09 f0       	breq	.+2      	; 0x448 <_ZN6EEProm4readEj+0x18>
     446:	41 c0       	rjmp	.+130    	; 0x4ca <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     448:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     44a:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     44c:	06 b6       	in	r0, 0x36	; 54
     44e:	07 fe       	sbrs	r0, 7
     450:	fd cf       	rjmp	.-6      	; 0x44c <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     452:	81 b1       	in	r24, 0x01	; 1
     454:	88 7f       	andi	r24, 0xF8	; 248
}

uint8_t EEProm::read(uint16_t address){
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
     456:	88 31       	cpi	r24, 0x18	; 24
     458:	71 f7       	brne	.-36     	; 0x436 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     45a:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     45c:	84 e8       	ldi	r24, 0x84	; 132
     45e:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     460:	06 b6       	in	r0, 0x36	; 54
     462:	07 fe       	sbrs	r0, 7
     464:	fd cf       	rjmp	.-6      	; 0x460 <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     466:	81 b1       	in	r24, 0x01	; 1
     468:	88 7f       	andi	r24, 0xF8	; 248
     46a:	88 32       	cpi	r24, 0x28	; 40
     46c:	81 f5       	brne	.+96     	; 0x4ce <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     46e:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     470:	84 e8       	ldi	r24, 0x84	; 132
     472:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     474:	06 b6       	in	r0, 0x36	; 54
     476:	07 fe       	sbrs	r0, 7
     478:	fd cf       	rjmp	.-6      	; 0x474 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     47a:	81 b1       	in	r24, 0x01	; 1
     47c:	88 7f       	andi	r24, 0xF8	; 248
     47e:	88 32       	cpi	r24, 0x28	; 40
     480:	41 f5       	brne	.+80     	; 0x4d2 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     482:	84 ea       	ldi	r24, 0xA4	; 164
     484:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     486:	06 b6       	in	r0, 0x36	; 54
     488:	07 fe       	sbrs	r0, 7
     48a:	fd cf       	rjmp	.-6      	; 0x486 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     48c:	81 b1       	in	r24, 0x01	; 1
     48e:	88 7f       	andi	r24, 0xF8	; 248
     490:	80 31       	cpi	r24, 0x10	; 16
     492:	09 f5       	brne	.+66     	; 0x4d6 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     494:	81 ea       	ldi	r24, 0xA1	; 161
     496:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     498:	84 e8       	ldi	r24, 0x84	; 132
     49a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     49c:	06 b6       	in	r0, 0x36	; 54
     49e:	07 fe       	sbrs	r0, 7
     4a0:	fd cf       	rjmp	.-6      	; 0x49c <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     4a2:	81 b1       	in	r24, 0x01	; 1
     4a4:	88 7f       	andi	r24, 0xF8	; 248
     4a6:	80 34       	cpi	r24, 0x40	; 64
     4a8:	c1 f4       	brne	.+48     	; 0x4da <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     4aa:	84 e8       	ldi	r24, 0x84	; 132
     4ac:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     4ae:	06 b6       	in	r0, 0x36	; 54
     4b0:	07 fe       	sbrs	r0, 7
     4b2:	fd cf       	rjmp	.-6      	; 0x4ae <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     4b4:	81 b1       	in	r24, 0x01	; 1
     4b6:	88 7f       	andi	r24, 0xF8	; 248
     4b8:	88 35       	cpi	r24, 0x58	; 88
     4ba:	89 f4       	brne	.+34     	; 0x4de <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     4bc:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     4be:	94 e9       	ldi	r25, 0x94	; 148
     4c0:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     4c2:	06 b6       	in	r0, 0x36	; 54
     4c4:	04 fc       	sbrc	r0, 4
     4c6:	fd cf       	rjmp	.-6      	; 0x4c2 <_ZN6EEProm4readEj+0x92>
     4c8:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     4de:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     4e0:	08 95       	ret

000004e2 <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	c4 56       	subi	r28, 0x64	; 100
     4f8:	d1 09       	sbc	r29, r1
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	6c 01       	movw	r12, r24
     506:	ce 01       	movw	r24, r28
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	
	for(int i=0;MAX_MEM_SIZE;i++) {
     50c:	00 e0       	ldi	r16, 0x00	; 0
     50e:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i);
     510:	b8 01       	movw	r22, r16
     512:	c6 01       	movw	r24, r12
     514:	0e 94 18 02 	call	0x430	; 0x430 <_ZN6EEProm4readEj>
     518:	f7 01       	movw	r30, r14
     51a:	81 93       	st	Z+, r24
     51c:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     51e:	8f 3f       	cpi	r24, 0xFF	; 255
     520:	81 f4       	brne	.+32     	; 0x542 <_ZN6EEProm7readallEv+0x60>
     522:	32 97       	sbiw	r30, 0x02	; 2
     524:	20 81       	ld	r18, Z
     526:	2f 3f       	cpi	r18, 0xFF	; 255
     528:	61 f4       	brne	.+24     	; 0x542 <_ZN6EEProm7readallEv+0x60>
     52a:	31 97       	sbiw	r30, 0x01	; 1
     52c:	20 81       	ld	r18, Z
     52e:	2f 3f       	cpi	r18, 0xFF	; 255
     530:	41 f4       	brne	.+16     	; 0x542 <_ZN6EEProm7readallEv+0x60>
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	20 81       	ld	r18, Z
     536:	2f 3f       	cpi	r18, 0xFF	; 255
     538:	21 f4       	brne	.+8      	; 0x542 <_ZN6EEProm7readallEv+0x60>
     53a:	31 97       	sbiw	r30, 0x01	; 1
     53c:	80 81       	ld	r24, Z
     53e:	8f 3f       	cpi	r24, 0xFF	; 255
     540:	19 f0       	breq	.+6      	; 0x548 <_ZN6EEProm7readallEv+0x66>
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	
	for(int i=0;MAX_MEM_SIZE;i++) {
     542:	0f 5f       	subi	r16, 0xFF	; 255
     544:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i);
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     546:	e4 cf       	rjmp	.-56     	; 0x510 <_ZN6EEProm7readallEv+0x2e>
	return eeprom_mem;
     548:	ce 01       	movw	r24, r28
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	cc 59       	subi	r28, 0x9C	; 156
     54e:	df 4f       	sbci	r29, 0xFF	; 255
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	ef 90       	pop	r14
     566:	df 90       	pop	r13
     568:	cf 90       	pop	r12
     56a:	08 95       	ret

0000056c <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){}
     56c:	08 95       	ret

0000056e <_Z12print_statesiP7ComplexPc>:

Serial s;

void print_states(int qb_count,Complex * vec,char* message){
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	1f 92       	push	r1
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	6c 01       	movw	r12, r24
     586:	e6 2e       	mov	r14, r22
     588:	f7 2e       	mov	r15, r23
	Utils utils;
	s.writestrln(message);
     58a:	ba 01       	movw	r22, r20
     58c:	88 e2       	ldi	r24, 0x28	; 40
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     594:	1c 14       	cp	r1, r12
     596:	1d 04       	cpc	r1, r13
     598:	0c f0       	brlt	.+2      	; 0x59c <_Z12print_statesiP7ComplexPc+0x2e>
     59a:	4b c0       	rjmp	.+150    	; 0x632 <_Z12print_statesiP7ComplexPc+0xc4>
     59c:	0e 2d       	mov	r16, r14
     59e:	1f 2d       	mov	r17, r15
     5a0:	e1 2c       	mov	r14, r1
     5a2:	f1 2c       	mov	r15, r1
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
     5a4:	6a e6       	ldi	r22, 0x6A	; 106
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	88 e2       	ldi	r24, 0x28	; 40
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	4a e7       	ldi	r20, 0x7A	; 122
     5b6:	54 e4       	ldi	r21, 0x44	; 68
     5b8:	f8 01       	movw	r30, r16
     5ba:	60 81       	ld	r22, Z
     5bc:	71 81       	ldd	r23, Z+1	; 0x01
     5be:	82 81       	ldd	r24, Z+2	; 0x02
     5c0:	93 81       	ldd	r25, Z+3	; 0x03
     5c2:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     5c6:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fixsfsi>
     5ca:	ce 01       	movw	r24, r28
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	0e 94 29 2b 	call	0x5652	; 0x5652 <_ZN5Utils7int2strEi>
     5d2:	bc 01       	movw	r22, r24
     5d4:	88 e2       	ldi	r24, 0x28	; 40
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
     5dc:	6e e6       	ldi	r22, 0x6E	; 110
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	88 e2       	ldi	r24, 0x28	; 40
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	4a e7       	ldi	r20, 0x7A	; 122
     5ee:	54 e4       	ldi	r21, 0x44	; 68
     5f0:	f8 01       	movw	r30, r16
     5f2:	64 81       	ldd	r22, Z+4	; 0x04
     5f4:	75 81       	ldd	r23, Z+5	; 0x05
     5f6:	86 81       	ldd	r24, Z+6	; 0x06
     5f8:	97 81       	ldd	r25, Z+7	; 0x07
     5fa:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     5fe:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fixsfsi>
     602:	ce 01       	movw	r24, r28
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	0e 94 29 2b 	call	0x5652	; 0x5652 <_ZN5Utils7int2strEi>
     60a:	bc 01       	movw	r22, r24
     60c:	88 e2       	ldi	r24, 0x28	; 40
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     614:	65 ec       	ldi	r22, 0xC5	; 197
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	88 e2       	ldi	r24, 0x28	; 40
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6Serial10writestrlnEPc>
Serial s;

void print_states(int qb_count,Complex * vec,char* message){
	Utils utils;
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     620:	ff ef       	ldi	r31, 0xFF	; 255
     622:	ef 1a       	sub	r14, r31
     624:	ff 0a       	sbc	r15, r31
     626:	08 5f       	subi	r16, 0xF8	; 248
     628:	1f 4f       	sbci	r17, 0xFF	; 255
     62a:	ec 14       	cp	r14, r12
     62c:	fd 04       	cpc	r15, r13
     62e:	09 f0       	breq	.+2      	; 0x632 <_Z12print_statesiP7ComplexPc+0xc4>
     630:	b9 cf       	rjmp	.-142    	; 0x5a4 <_Z12print_statesiP7ComplexPc+0x36>
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     632:	0f 90       	pop	r0
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	08 95       	ret

00000646 <_ZN5Gates5touchEd>:

int Gates::touch(double probability){
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	6a 01       	movw	r12, r20
     654:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     656:	0e 94 80 31 	call	0x6300	; 0x6300 <rand>
     65a:	ec 01       	movw	r28, r24
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	3e ef       	ldi	r19, 0xFE	; 254
     660:	4f ef       	ldi	r20, 0xFF	; 255
     662:	56 e4       	ldi	r21, 0x46	; 70
     664:	c7 01       	movw	r24, r14
     666:	b6 01       	movw	r22, r12
     668:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     66c:	6b 01       	movw	r12, r22
     66e:	7c 01       	movw	r14, r24
     670:	be 01       	movw	r22, r28
     672:	88 27       	eor	r24, r24
     674:	77 fd       	sbrc	r23, 7
     676:	80 95       	com	r24
     678:	98 2f       	mov	r25, r24
     67a:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	c1 e0       	ldi	r28, 0x01	; 1
     684:	d0 e0       	ldi	r29, 0x00	; 0
     686:	c7 01       	movw	r24, r14
     688:	b6 01       	movw	r22, r12
     68a:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <__gesf2>
     68e:	88 23       	and	r24, r24
     690:	14 f4       	brge	.+4      	; 0x696 <_ZN5Gates5touchEd+0x50>
     692:	c0 e0       	ldi	r28, 0x00	; 0
     694:	d0 e0       	ldi	r29, 0x00	; 0
}
     696:	ce 01       	movw	r24, r28
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	08 95       	ret

000006a6 <_ZN5Gates17reverse_kroneckerEP7Complexi>:

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     6a6:	2f 92       	push	r2
     6a8:	3f 92       	push	r3
     6aa:	4f 92       	push	r4
     6ac:	5f 92       	push	r5
     6ae:	6f 92       	push	r6
     6b0:	7f 92       	push	r7
     6b2:	8f 92       	push	r8
     6b4:	9f 92       	push	r9
     6b6:	af 92       	push	r10
     6b8:	bf 92       	push	r11
     6ba:	cf 92       	push	r12
     6bc:	df 92       	push	r13
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	a4 97       	sbiw	r28, 0x24	; 36
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	8c 01       	movw	r16, r24
     6dc:	6b 01       	movw	r12, r22
     6de:	5a 01       	movw	r10, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     6e0:	ba 01       	movw	r22, r20
     6e2:	88 27       	eor	r24, r24
     6e4:	77 fd       	sbrc	r23, 7
     6e6:	80 95       	com	r24
     6e8:	98 2f       	mov	r25, r24
     6ea:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
     6ee:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <log>
     6f2:	28 e1       	ldi	r18, 0x18	; 24
     6f4:	32 e7       	ldi	r19, 0x72	; 114
     6f6:	41 e3       	ldi	r20, 0x31	; 49
     6f8:	5f e3       	ldi	r21, 0x3F	; 63
     6fa:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
     6fe:	2b 01       	movw	r4, r22
     700:	3c 01       	movw	r6, r24
     702:	9b 01       	movw	r18, r22
     704:	ac 01       	movw	r20, r24
     706:	0e 94 c8 2b 	call	0x5790	; 0x5790 <__addsf3>
     70a:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fixsfsi>
     70e:	69 a3       	std	Y+33, r22	; 0x21
     710:	7a a3       	std	Y+34, r23	; 0x22
     712:	8b a3       	std	Y+35, r24	; 0x23
     714:	9c a3       	std	Y+36, r25	; 0x24
     716:	29 a0       	ldd	r2, Y+33	; 0x21
     718:	3a a0       	ldd	r3, Y+34	; 0x22
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
     71a:	c1 01       	movw	r24, r2
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
     72c:	4c 01       	movw	r8, r24
		
	for(int i=0;i<kron_size;i++)
     72e:	1a 14       	cp	r1, r10
     730:	1b 04       	cpc	r1, r11
     732:	0c f0       	brlt	.+2      	; 0x736 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x90>
     734:	9d c0       	rjmp	.+314    	; 0x870 <__stack+0x11>
		if(kron[i].re==1){
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e8       	ldi	r20, 0x80	; 128
     73c:	5f e3       	ldi	r21, 0x3F	; 63
     73e:	f6 01       	movw	r30, r12
     740:	60 81       	ld	r22, Z
     742:	71 81       	ldd	r23, Z+1	; 0x01
     744:	82 81       	ldd	r24, Z+2	; 0x02
     746:	93 81       	ldd	r25, Z+3	; 0x03
     748:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <__cmpsf2>
     74c:	81 11       	cpse	r24, r1
     74e:	87 c0       	rjmp	.+270    	; 0x85e <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b8>
     750:	11 c0       	rjmp	.+34     	; 0x774 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xce>
     752:	f8 e0       	ldi	r31, 0x08	; 8
     754:	cf 0e       	add	r12, r31
     756:	d1 1c       	adc	r13, r1
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 e8       	ldi	r20, 0x80	; 128
     75e:	5f e3       	ldi	r21, 0x3F	; 63
     760:	f6 01       	movw	r30, r12
     762:	60 81       	ld	r22, Z
     764:	71 81       	ldd	r23, Z+1	; 0x01
     766:	82 81       	ldd	r24, Z+2	; 0x02
     768:	93 81       	ldd	r25, Z+3	; 0x03
     76a:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <__cmpsf2>
     76e:	81 11       	cpse	r24, r1
     770:	78 c0       	rjmp	.+240    	; 0x862 <__stack+0x3>
     772:	02 c0       	rjmp	.+4      	; 0x778 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xd2>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     774:	e1 2c       	mov	r14, r1
     776:	f1 2c       	mov	r15, r1
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
     778:	c3 01       	movw	r24, r6
     77a:	b2 01       	movw	r22, r4
     77c:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fixsfsi>
     780:	ab 01       	movw	r20, r22
     782:	b7 01       	movw	r22, r14
     784:	c8 01       	movw	r24, r16
     786:	0e 94 a1 2a 	call	0x5542	; 0x5542 <_ZN5Utils10int2binstrEii>
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     78a:	12 14       	cp	r1, r2
     78c:	13 04       	cpc	r1, r3
     78e:	0c f0       	brlt	.+2      	; 0x792 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xec>
     790:	6f c0       	rjmp	.+222    	; 0x870 <__stack+0x11>
     792:	7c 01       	movw	r14, r24
     794:	54 01       	movw	r10, r8
     796:	64 01       	movw	r12, r8
     798:	f8 e0       	ldi	r31, 0x08	; 8
     79a:	cf 0e       	add	r12, r31
     79c:	d1 1c       	adc	r13, r1
     79e:	49 a0       	ldd	r4, Y+33	; 0x21
     7a0:	5a a0       	ldd	r5, Y+34	; 0x22
     7a2:	48 0e       	add	r4, r24
     7a4:	59 1e       	adc	r5, r25
				if(toBin[j]=='1'){
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     7a6:	68 94       	set
     7a8:	77 24       	eor	r7, r7
     7aa:	73 f8       	bld	r7, 3
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
				if(toBin[j]=='1'){
     7ac:	f7 01       	movw	r30, r14
     7ae:	81 91       	ld	r24, Z+
     7b0:	7f 01       	movw	r14, r30
     7b2:	81 33       	cpi	r24, 0x31	; 49
     7b4:	29 f5       	brne	.+74     	; 0x800 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x15a>
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
     7b6:	00 e0       	ldi	r16, 0x00	; 0
     7b8:	10 e0       	ldi	r17, 0x00	; 0
     7ba:	98 01       	movw	r18, r16
     7bc:	b9 01       	movw	r22, r18
     7be:	a8 01       	movw	r20, r16
     7c0:	ce 01       	movw	r24, r28
     7c2:	49 96       	adiw	r24, 0x19	; 25
     7c4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
     7c8:	fe 01       	movw	r30, r28
     7ca:	79 96       	adiw	r30, 0x19	; 25
     7cc:	d5 01       	movw	r26, r10
     7ce:	87 2d       	mov	r24, r7
     7d0:	01 90       	ld	r0, Z+
     7d2:	0d 92       	st	X+, r0
     7d4:	8a 95       	dec	r24
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x12a>
     7d8:	00 e0       	ldi	r16, 0x00	; 0
     7da:	10 e0       	ldi	r17, 0x00	; 0
     7dc:	98 01       	movw	r18, r16
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	60 e8       	ldi	r22, 0x80	; 128
     7e4:	7f e3       	ldi	r23, 0x3F	; 63
     7e6:	ce 01       	movw	r24, r28
     7e8:	41 96       	adiw	r24, 0x11	; 17
     7ea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
     7ee:	fe 01       	movw	r30, r28
     7f0:	71 96       	adiw	r30, 0x11	; 17
     7f2:	d6 01       	movw	r26, r12
     7f4:	87 2d       	mov	r24, r7
     7f6:	01 90       	ld	r0, Z+
     7f8:	0d 92       	st	X+, r0
     7fa:	8a 95       	dec	r24
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x150>
     7fe:	24 c0       	rjmp	.+72     	; 0x848 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a2>
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     800:	00 e0       	ldi	r16, 0x00	; 0
     802:	10 e0       	ldi	r17, 0x00	; 0
     804:	98 01       	movw	r18, r16
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	60 e8       	ldi	r22, 0x80	; 128
     80c:	7f e3       	ldi	r23, 0x3F	; 63
     80e:	ce 01       	movw	r24, r28
     810:	09 96       	adiw	r24, 0x09	; 9
     812:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
     816:	fe 01       	movw	r30, r28
     818:	39 96       	adiw	r30, 0x09	; 9
     81a:	d5 01       	movw	r26, r10
     81c:	87 2d       	mov	r24, r7
     81e:	01 90       	ld	r0, Z+
     820:	0d 92       	st	X+, r0
     822:	8a 95       	dec	r24
     824:	e1 f7       	brne	.-8      	; 0x81e <_ZN5Gates17reverse_kroneckerEP7Complexi+0x178>
     826:	00 e0       	ldi	r16, 0x00	; 0
     828:	10 e0       	ldi	r17, 0x00	; 0
     82a:	98 01       	movw	r18, r16
     82c:	b9 01       	movw	r22, r18
     82e:	a8 01       	movw	r20, r16
     830:	ce 01       	movw	r24, r28
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
     838:	fe 01       	movw	r30, r28
     83a:	31 96       	adiw	r30, 0x01	; 1
     83c:	d6 01       	movw	r26, r12
     83e:	87 2d       	mov	r24, r7
     840:	01 90       	ld	r0, Z+
     842:	0d 92       	st	X+, r0
     844:	8a 95       	dec	r24
     846:	e1 f7       	brne	.-8      	; 0x840 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x19a>
     848:	f0 e1       	ldi	r31, 0x10	; 16
     84a:	af 0e       	add	r10, r31
     84c:	b1 1c       	adc	r11, r1
     84e:	20 e1       	ldi	r18, 0x10	; 16
     850:	c2 0e       	add	r12, r18
     852:	d1 1c       	adc	r13, r1
		
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     854:	e4 14       	cp	r14, r4
     856:	f5 04       	cpc	r15, r5
     858:	09 f0       	breq	.+2      	; 0x85c <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b6>
     85a:	a8 cf       	rjmp	.-176    	; 0x7ac <_ZN5Gates17reverse_kroneckerEP7Complexi+0x106>
     85c:	09 c0       	rjmp	.+18     	; 0x870 <__stack+0x11>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     85e:	e1 2c       	mov	r14, r1
     860:	f1 2c       	mov	r15, r1
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	e8 1a       	sub	r14, r24
     866:	f8 0a       	sbc	r15, r24
     868:	ea 14       	cp	r14, r10
     86a:	fb 04       	cpc	r15, r11
     86c:	09 f0       	breq	.+2      	; 0x870 <__stack+0x11>
     86e:	71 cf       	rjmp	.-286    	; 0x752 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xac>
				index_rev_kro+=2;
			}
			break;
		}
	return reversed_kronecker;
}
     870:	c4 01       	movw	r24, r8
     872:	a4 96       	adiw	r28, 0x24	; 36
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	bf 90       	pop	r11
     890:	af 90       	pop	r10
     892:	9f 90       	pop	r9
     894:	8f 90       	pop	r8
     896:	7f 90       	pop	r7
     898:	6f 90       	pop	r6
     89a:	5f 90       	pop	r5
     89c:	4f 90       	pop	r4
     89e:	3f 90       	pop	r3
     8a0:	2f 90       	pop	r2
     8a2:	08 95       	ret

000008a4 <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     8a4:	2f 92       	push	r2
     8a6:	3f 92       	push	r3
     8a8:	4f 92       	push	r4
     8aa:	5f 92       	push	r5
     8ac:	6f 92       	push	r6
     8ae:	7f 92       	push	r7
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	28 97       	sbiw	r28, 0x08	; 8
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	7c 01       	movw	r14, r24
     8da:	5b 01       	movw	r10, r22
     8dc:	8a 01       	movw	r16, r20
     8de:	3e 83       	std	Y+6, r19	; 0x06
     8e0:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     8e2:	41 30       	cpi	r20, 0x01	; 1
     8e4:	51 05       	cpc	r21, r1
     8e6:	09 f4       	brne	.+2      	; 0x8ea <_ZN5Gates9kroneckerEP7Complexii+0x46>
     8e8:	bb c0       	rjmp	.+374    	; 0xa60 <_ZN5Gates9kroneckerEP7Complexii+0x1bc>
	int kron_size=utils.custom_pow(2,qb_count);
     8ea:	9a 01       	movw	r18, r20
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e4       	ldi	r23, 0x40	; 64
     8f4:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <_ZN5Utils10custom_powEfi>
     8f8:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fixsfsi>
     8fc:	78 87       	std	Y+8, r23	; 0x08
     8fe:	6f 83       	std	Y+7, r22	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     900:	9b 01       	movw	r18, r22
     902:	22 0f       	add	r18, r18
     904:	33 1f       	adc	r19, r19
     906:	22 0f       	add	r18, r18
     908:	33 1f       	adc	r19, r19
     90a:	22 0f       	add	r18, r18
     90c:	33 1f       	adc	r19, r19
     90e:	3c 83       	std	Y+4, r19	; 0x04
     910:	2b 83       	std	Y+3, r18	; 0x03
     912:	c9 01       	movw	r24, r18
     914:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	9a 83       	std	Y+2, r25	; 0x02
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     91c:	8f 81       	ldd	r24, Y+7	; 0x07
     91e:	98 85       	ldd	r25, Y+8	; 0x08
     920:	18 16       	cp	r1, r24
     922:	19 06       	cpc	r1, r25
     924:	0c f0       	brlt	.+2      	; 0x928 <_ZN5Gates9kroneckerEP7Complexii+0x84>
     926:	53 c0       	rjmp	.+166    	; 0x9ce <_ZN5Gates9kroneckerEP7Complexii+0x12a>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     928:	18 01       	movw	r2, r16
     92a:	22 0c       	add	r2, r2
     92c:	33 1c       	adc	r3, r3
     92e:	c9 80       	ldd	r12, Y+1	; 0x01
     930:	da 80       	ldd	r13, Y+2	; 0x02
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     932:	61 2c       	mov	r6, r1
     934:	71 2c       	mov	r7, r1
	int kron_size=utils.custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
     936:	e2 e0       	ldi	r30, 0x02	; 2
     938:	f0 e0       	ldi	r31, 0x00	; 0
Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=utils.custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
     93a:	41 2c       	mov	r4, r1
     93c:	51 2c       	mov	r5, r1
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     93e:	c6 01       	movw	r24, r12
     940:	cf 80       	ldd	r12, Y+7	; 0x07
     942:	d8 84       	ldd	r13, Y+8	; 0x08
     944:	47 01       	movw	r8, r14
     946:	98 87       	std	Y+8, r25	; 0x08
     948:	8f 83       	std	Y+7, r24	; 0x07
     94a:	2e 16       	cp	r2, r30
     94c:	3f 06       	cpc	r3, r31
     94e:	29 f4       	brne	.+10     	; 0x95a <_ZN5Gates9kroneckerEP7Complexii+0xb6>
     950:	9f ef       	ldi	r25, 0xFF	; 255
     952:	49 1a       	sub	r4, r25
     954:	59 0a       	sbc	r5, r25
     956:	e2 e0       	ldi	r30, 0x02	; 2
     958:	f0 e0       	ldi	r31, 0x00	; 0
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     95a:	7f 01       	movw	r14, r30
     95c:	2f ef       	ldi	r18, 0xFF	; 255
     95e:	e2 1a       	sub	r14, r18
     960:	f2 0a       	sbc	r15, r18
     962:	ee 0f       	add	r30, r30
     964:	ff 1f       	adc	r31, r31
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	ea 0d       	add	r30, r10
     970:	fb 1d       	adc	r31, r11
     972:	00 81       	ld	r16, Z
     974:	11 81       	ldd	r17, Z+1	; 0x01
     976:	22 81       	ldd	r18, Z+2	; 0x02
     978:	33 81       	ldd	r19, Z+3	; 0x03
     97a:	44 81       	ldd	r20, Z+4	; 0x04
     97c:	55 81       	ldd	r21, Z+5	; 0x05
     97e:	66 81       	ldd	r22, Z+6	; 0x06
     980:	77 81       	ldd	r23, Z+7	; 0x07
     982:	c2 01       	movw	r24, r4
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	8a 0d       	add	r24, r10
     992:	9b 1d       	adc	r25, r11
     994:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN7Complex3mulES_>
     998:	ef 81       	ldd	r30, Y+7	; 0x07
     99a:	f8 85       	ldd	r31, Y+8	; 0x08
     99c:	20 83       	st	Z, r18
     99e:	31 83       	std	Z+1, r19	; 0x01
     9a0:	42 83       	std	Z+2, r20	; 0x02
     9a2:	53 83       	std	Z+3, r21	; 0x03
     9a4:	64 83       	std	Z+4, r22	; 0x04
     9a6:	75 83       	std	Z+5, r23	; 0x05
     9a8:	86 83       	std	Z+6, r24	; 0x06
     9aa:	97 83       	std	Z+7, r25	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     9ac:	ff ef       	ldi	r31, 0xFF	; 255
     9ae:	6f 1a       	sub	r6, r31
     9b0:	7f 0a       	sbc	r7, r31
     9b2:	2f 81       	ldd	r18, Y+7	; 0x07
     9b4:	38 85       	ldd	r19, Y+8	; 0x08
     9b6:	28 5f       	subi	r18, 0xF8	; 248
     9b8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ba:	38 87       	std	Y+8, r19	; 0x08
     9bc:	2f 83       	std	Y+7, r18	; 0x07
     9be:	6c 14       	cp	r6, r12
     9c0:	7d 04       	cpc	r7, r13
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <_ZN5Gates9kroneckerEP7Complexii+0x124>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     9c4:	f7 01       	movw	r30, r14
     9c6:	c1 cf       	rjmp	.-126    	; 0x94a <_ZN5Gates9kroneckerEP7Complexii+0xa6>
     9c8:	d8 86       	std	Y+8, r13	; 0x08
     9ca:	cf 82       	std	Y+7, r12	; 0x07
     9cc:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     9ce:	8d 81       	ldd	r24, Y+5	; 0x05
     9d0:	9e 81       	ldd	r25, Y+6	; 0x06
     9d2:	89 2b       	or	r24, r25
     9d4:	a9 f5       	brne	.+106    	; 0xa40 <_ZN5Gates9kroneckerEP7Complexii+0x19c>
				binary_touch=0;
				break;
			}
	}
	//print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	9a 81       	ldd	r25, Y+2	; 0x02
     9da:	44 c0       	rjmp	.+136    	; 0xa64 <_ZN5Gates9kroneckerEP7Complexii+0x1c0>
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     9dc:	51 01       	movw	r10, r2
     9de:	f1 01       	movw	r30, r2
     9e0:	40 81       	ld	r20, Z
     9e2:	51 81       	ldd	r21, Z+1	; 0x01
     9e4:	62 81       	ldd	r22, Z+2	; 0x02
     9e6:	73 81       	ldd	r23, Z+3	; 0x03
     9e8:	c7 01       	movw	r24, r14
     9ea:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Gates5touchEd>
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	e9 f4       	brne	.+58     	; 0xa2c <_ZN5Gates9kroneckerEP7Complexii+0x188>
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	9c 81       	ldd	r25, Y+4	; 0x04
     9f6:	86 0d       	add	r24, r6
     9f8:	97 1d       	adc	r25, r7
     9fa:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     9fc:	10 82       	st	Z, r1
     9fe:	11 82       	std	Z+1, r1	; 0x01
     a00:	12 82       	std	Z+2, r1	; 0x02
     a02:	13 82       	std	Z+3, r1	; 0x03
     a04:	14 82       	std	Z+4, r1	; 0x04
     a06:	15 82       	std	Z+5, r1	; 0x05
     a08:	16 82       	std	Z+6, r1	; 0x06
     a0a:	17 82       	std	Z+7, r1	; 0x07
     a0c:	38 96       	adiw	r30, 0x08	; 8
     a0e:	e8 17       	cp	r30, r24
     a10:	f9 07       	cpc	r31, r25
     a12:	a1 f7       	brne	.-24     	; 0x9fc <_ZN5Gates9kroneckerEP7Complexii+0x158>
				kronvec[i].re=binary_touch;
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e8       	ldi	r26, 0x80	; 128
     a1a:	bf e3       	ldi	r27, 0x3F	; 63
     a1c:	f5 01       	movw	r30, r10
     a1e:	80 83       	st	Z, r24
     a20:	91 83       	std	Z+1, r25	; 0x01
     a22:	a2 83       	std	Z+2, r26	; 0x02
     a24:	b3 83       	std	Z+3, r27	; 0x03
				binary_touch=0;
				break;
			}
	}
	//print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
     a2a:	1c c0       	rjmp	.+56     	; 0xa64 <_ZN5Gates9kroneckerEP7Complexii+0x1c0>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     a2c:	ff ef       	ldi	r31, 0xFF	; 255
     a2e:	cf 1a       	sub	r12, r31
     a30:	df 0a       	sbc	r13, r31
     a32:	28 e0       	ldi	r18, 0x08	; 8
     a34:	22 0e       	add	r2, r18
     a36:	31 1c       	adc	r3, r1
     a38:	c8 14       	cp	r12, r8
     a3a:	d9 04       	cpc	r13, r9
     a3c:	79 f6       	brne	.-98     	; 0x9dc <_ZN5Gates9kroneckerEP7Complexii+0x138>
     a3e:	06 c0       	rjmp	.+12     	; 0xa4c <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
     a40:	49 80       	ldd	r4, Y+1	; 0x01
     a42:	5a 80       	ldd	r5, Y+2	; 0x02
     a44:	00 e0       	ldi	r16, 0x00	; 0
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	8f 80       	ldd	r8, Y+7	; 0x07
     a4a:	98 84       	ldd	r9, Y+8	; 0x08
     a4c:	18 14       	cp	r1, r8
     a4e:	19 04       	cpc	r1, r9
     a50:	ec f7       	brge	.-6      	; 0xa4c <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
     a52:	64 2c       	mov	r6, r4
     a54:	75 2c       	mov	r7, r5
     a56:	24 2c       	mov	r2, r4
     a58:	35 2c       	mov	r3, r5
     a5a:	c0 2e       	mov	r12, r16
     a5c:	d1 2e       	mov	r13, r17
     a5e:	be cf       	rjmp	.-132    	; 0x9dc <_ZN5Gates9kroneckerEP7Complexii+0x138>
		}
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     a60:	86 2f       	mov	r24, r22
     a62:	9b 2d       	mov	r25, r11
				break;
			}
	}
	//print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
}
     a64:	28 96       	adiw	r28, 0x08	; 8
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	af 90       	pop	r10
     a84:	9f 90       	pop	r9
     a86:	8f 90       	pop	r8
     a88:	7f 90       	pop	r7
     a8a:	6f 90       	pop	r6
     a8c:	5f 90       	pop	r5
     a8e:	4f 90       	pop	r4
     a90:	3f 90       	pop	r3
     a92:	2f 90       	pop	r2
     a94:	08 95       	ret

00000a96 <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     a96:	2f 92       	push	r2
     a98:	3f 92       	push	r3
     a9a:	4f 92       	push	r4
     a9c:	5f 92       	push	r5
     a9e:	6f 92       	push	r6
     aa0:	7f 92       	push	r7
     aa2:	8f 92       	push	r8
     aa4:	9f 92       	push	r9
     aa6:	af 92       	push	r10
     aa8:	bf 92       	push	r11
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	28 97       	sbiw	r28, 0x08	; 8
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	9e 83       	std	Y+6, r25	; 0x06
     acc:	8d 83       	std	Y+5, r24	; 0x05
     ace:	7a 83       	std	Y+2, r23	; 0x02
     ad0:	69 83       	std	Y+1, r22	; 0x01
     ad2:	04 2f       	mov	r16, r20
     ad4:	15 2f       	mov	r17, r21
     ad6:	c2 2e       	mov	r12, r18
     ad8:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     ada:	cb 01       	movw	r24, r22
     adc:	82 95       	swap	r24
     ade:	92 95       	swap	r25
     ae0:	90 7f       	andi	r25, 0xF0	; 240
     ae2:	98 27       	eor	r25, r24
     ae4:	80 7f       	andi	r24, 0xF0	; 240
     ae6:	98 27       	eor	r25, r24
     ae8:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
     aec:	8b 83       	std	Y+3, r24	; 0x03
     aee:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     af0:	29 80       	ldd	r2, Y+1	; 0x01
     af2:	3a 80       	ldd	r3, Y+2	; 0x02
     af4:	22 0c       	add	r2, r2
     af6:	33 1c       	adc	r3, r3
     af8:	12 14       	cp	r1, r2
     afa:	13 04       	cpc	r1, r3
     afc:	0c f0       	brlt	.+2      	; 0xb00 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     afe:	ac c0       	rjmp	.+344    	; 0xc58 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     b00:	a8 2e       	mov	r10, r24
     b02:	b9 2e       	mov	r11, r25
     b04:	e0 2e       	mov	r14, r16
     b06:	f1 2e       	mov	r15, r17
     b08:	0c 2d       	mov	r16, r12
     b0a:	1d 2d       	mov	r17, r13
     b0c:	81 2c       	mov	r8, r1
     b0e:	91 2c       	mov	r9, r1
     b10:	b8 86       	std	Y+8, r11	; 0x08
     b12:	af 82       	std	Y+7, r10	; 0x07
     b14:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     b16:	f7 01       	movw	r30, r14
     b18:	41 90       	ld	r4, Z+
     b1a:	51 90       	ld	r5, Z+
     b1c:	7f 01       	movw	r14, r30
     b1e:	66 24       	eor	r6, r6
     b20:	57 fc       	sbrc	r5, 7
     b22:	60 94       	com	r6
     b24:	76 2c       	mov	r7, r6
     b26:	c3 01       	movw	r24, r6
     b28:	b2 01       	movw	r22, r4
     b2a:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
     b2e:	2b ed       	ldi	r18, 0xDB	; 219
     b30:	3f e0       	ldi	r19, 0x0F	; 15
     b32:	49 e4       	ldi	r20, 0x49	; 73
     b34:	50 e4       	ldi	r21, 0x40	; 64
     b36:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	44 eb       	ldi	r20, 0xB4	; 180
     b40:	53 e4       	ldi	r21, 0x43	; 67
     b42:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
     b46:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <cos>
     b4a:	ef 81       	ldd	r30, Y+7	; 0x07
     b4c:	f8 85       	ldd	r31, Y+8	; 0x08
     b4e:	60 83       	st	Z, r22
     b50:	71 83       	std	Z+1, r23	; 0x01
     b52:	82 83       	std	Z+2, r24	; 0x02
     b54:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     b56:	c3 01       	movw	r24, r6
     b58:	b2 01       	movw	r22, r4
     b5a:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
     b5e:	2b ed       	ldi	r18, 0xDB	; 219
     b60:	3f e0       	ldi	r19, 0x0F	; 15
     b62:	49 e4       	ldi	r20, 0x49	; 73
     b64:	50 e4       	ldi	r21, 0x40	; 64
     b66:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	44 eb       	ldi	r20, 0xB4	; 180
     b70:	53 e4       	ldi	r21, 0x43	; 67
     b72:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
     b76:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <sin>
     b7a:	2b 01       	movw	r4, r22
     b7c:	3c 01       	movw	r6, r24
     b7e:	58 01       	movw	r10, r16
     b80:	f8 01       	movw	r30, r16
     b82:	61 91       	ld	r22, Z+
     b84:	71 91       	ld	r23, Z+
     b86:	8f 01       	movw	r16, r30
     b88:	88 27       	eor	r24, r24
     b8a:	77 fd       	sbrc	r23, 7
     b8c:	80 95       	com	r24
     b8e:	98 2f       	mov	r25, r24
     b90:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
     b94:	2b ed       	ldi	r18, 0xDB	; 219
     b96:	3f e0       	ldi	r19, 0x0F	; 15
     b98:	49 e4       	ldi	r20, 0x49	; 73
     b9a:	50 e4       	ldi	r21, 0x40	; 64
     b9c:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	44 e3       	ldi	r20, 0x34	; 52
     ba6:	53 e4       	ldi	r21, 0x43	; 67
     ba8:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
     bac:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <cos>
     bb0:	9b 01       	movw	r18, r22
     bb2:	ac 01       	movw	r20, r24
     bb4:	c3 01       	movw	r24, r6
     bb6:	b2 01       	movw	r22, r4
     bb8:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     bbc:	ef 81       	ldd	r30, Y+7	; 0x07
     bbe:	f8 85       	ldd	r31, Y+8	; 0x08
     bc0:	60 87       	std	Z+8, r22	; 0x08
     bc2:	71 87       	std	Z+9, r23	; 0x09
     bc4:	82 87       	std	Z+10, r24	; 0x0a
     bc6:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index]*M_PI)/180);  // BETA IM
     bc8:	f6 01       	movw	r30, r12
     bca:	60 81       	ld	r22, Z
     bcc:	71 81       	ldd	r23, Z+1	; 0x01
     bce:	88 27       	eor	r24, r24
     bd0:	77 fd       	sbrc	r23, 7
     bd2:	80 95       	com	r24
     bd4:	98 2f       	mov	r25, r24
     bd6:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
     bda:	2b ed       	ldi	r18, 0xDB	; 219
     bdc:	3f e0       	ldi	r19, 0x0F	; 15
     bde:	49 e4       	ldi	r20, 0x49	; 73
     be0:	50 e4       	ldi	r21, 0x40	; 64
     be2:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	44 eb       	ldi	r20, 0xB4	; 180
     bec:	53 e4       	ldi	r21, 0x43	; 67
     bee:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
     bf2:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <sin>
     bf6:	2b 01       	movw	r4, r22
     bf8:	3c 01       	movw	r6, r24
     bfa:	f5 01       	movw	r30, r10
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	88 27       	eor	r24, r24
     c02:	77 fd       	sbrc	r23, 7
     c04:	80 95       	com	r24
     c06:	98 2f       	mov	r25, r24
     c08:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
     c0c:	2b ed       	ldi	r18, 0xDB	; 219
     c0e:	3f e0       	ldi	r19, 0x0F	; 15
     c10:	49 e4       	ldi	r20, 0x49	; 73
     c12:	50 e4       	ldi	r21, 0x40	; 64
     c14:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	44 e3       	ldi	r20, 0x34	; 52
     c1e:	53 e4       	ldi	r21, 0x43	; 67
     c20:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
     c24:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <sin>
     c28:	9b 01       	movw	r18, r22
     c2a:	ac 01       	movw	r20, r24
     c2c:	c3 01       	movw	r24, r6
     c2e:	b2 01       	movw	r22, r4
     c30:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     c34:	ef 81       	ldd	r30, Y+7	; 0x07
     c36:	f8 85       	ldd	r31, Y+8	; 0x08
     c38:	64 87       	std	Z+12, r22	; 0x0c
     c3a:	75 87       	std	Z+13, r23	; 0x0d
     c3c:	86 87       	std	Z+14, r24	; 0x0e
     c3e:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     c40:	f2 e0       	ldi	r31, 0x02	; 2
     c42:	8f 0e       	add	r8, r31
     c44:	91 1c       	adc	r9, r1
     c46:	8f 81       	ldd	r24, Y+7	; 0x07
     c48:	98 85       	ldd	r25, Y+8	; 0x08
     c4a:	40 96       	adiw	r24, 0x10	; 16
     c4c:	98 87       	std	Y+8, r25	; 0x08
     c4e:	8f 83       	std	Y+7, r24	; 0x07
     c50:	82 14       	cp	r8, r2
     c52:	93 04       	cpc	r9, r3
     c54:	0c f4       	brge	.+2      	; 0xc58 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     c56:	5e cf       	rjmp	.-324    	; 0xb14 <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index]*M_PI)/180);  // BETA IM
		thephi_index++;
	}
	print_states(qb_count*2,vec,"Before: ");
     c58:	45 e7       	ldi	r20, 0x75	; 117
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	6b 81       	ldd	r22, Y+3	; 0x03
     c5e:	7c 81       	ldd	r23, Y+4	; 0x04
     c60:	c1 01       	movw	r24, r2
     c62:	0e 94 b7 02 	call	0x56e	; 0x56e <_Z12print_statesiP7ComplexPc>
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	49 81       	ldd	r20, Y+1	; 0x01
     c6c:	5a 81       	ldd	r21, Y+2	; 0x02
     c6e:	6b 81       	ldd	r22, Y+3	; 0x03
     c70:	7c 81       	ldd	r23, Y+4	; 0x04
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN5Gates9kroneckerEP7Complexii>
}
     c7a:	28 96       	adiw	r28, 0x08	; 8
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	cf 90       	pop	r12
     c96:	bf 90       	pop	r11
     c98:	af 90       	pop	r10
     c9a:	9f 90       	pop	r9
     c9c:	8f 90       	pop	r8
     c9e:	7f 90       	pop	r7
     ca0:	6f 90       	pop	r6
     ca2:	5f 90       	pop	r5
     ca4:	4f 90       	pop	r4
     ca6:	3f 90       	pop	r3
     ca8:	2f 90       	pop	r2
     caa:	08 95       	ret

00000cac <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     cac:	4f 92       	push	r4
     cae:	5f 92       	push	r5
     cb0:	6f 92       	push	r6
     cb2:	7f 92       	push	r7
     cb4:	8f 92       	push	r8
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ec 01       	movw	r28, r24
     cce:	66 2e       	mov	r6, r22
     cd0:	77 2e       	mov	r7, r23
     cd2:	6a 01       	movw	r12, r20
	int kron_size=utils.custom_pow(2,qb_count);
     cd4:	9a 01       	movw	r18, r20
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e4       	ldi	r23, 0x40	; 64
     cde:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <_ZN5Utils10custom_powEfi>
     ce2:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fixsfsi>
     ce6:	4b 01       	movw	r8, r22
     ce8:	5c 01       	movw	r10, r24
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	c8 16       	cp	r12, r24
     cee:	d1 04       	cpc	r13, r1
     cf0:	44 f0       	brlt	.+16     	; 0xd02 <_ZN5Gates8vec2amplEP7Complexi+0x56>
     cf2:	a4 01       	movw	r20, r8
     cf4:	66 2d       	mov	r22, r6
     cf6:	77 2d       	mov	r23, r7
     cf8:	ce 01       	movw	r24, r28
     cfa:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_ZN5Gates17reverse_kroneckerEP7Complexi>
     cfe:	68 2e       	mov	r6, r24
     d00:	79 2e       	mov	r7, r25
	
	int* newthephi=(int*)malloc(sizeof(int)*(qb_count*2));
     d02:	c6 01       	movw	r24, r12
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
     d10:	48 2e       	mov	r4, r24
     d12:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_count*2;i++) if(i%2==0) newthephi[i]=(360*acos(vec[i].re))/M_PI; else newthephi[i]=(180*vec[i].arg())/M_PI;
     d14:	cc 0c       	add	r12, r12
     d16:	dd 1c       	adc	r13, r13
     d18:	1c 14       	cp	r1, r12
     d1a:	1d 04       	cpc	r1, r13
     d1c:	f4 f5       	brge	.+124    	; 0xd9a <_ZN5Gates8vec2amplEP7Complexi+0xee>
     d1e:	e6 2c       	mov	r14, r6
     d20:	f7 2c       	mov	r15, r7
     d22:	08 2f       	mov	r16, r24
     d24:	19 2f       	mov	r17, r25
     d26:	c0 e0       	ldi	r28, 0x00	; 0
     d28:	d0 e0       	ldi	r29, 0x00	; 0
     d2a:	c0 fd       	sbrc	r28, 0
     d2c:	19 c0       	rjmp	.+50     	; 0xd60 <_ZN5Gates8vec2amplEP7Complexi+0xb4>
     d2e:	f7 01       	movw	r30, r14
     d30:	60 81       	ld	r22, Z
     d32:	71 81       	ldd	r23, Z+1	; 0x01
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	0e 94 b9 2b 	call	0x5772	; 0x5772 <acos>
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	44 eb       	ldi	r20, 0xB4	; 180
     d42:	53 e4       	ldi	r21, 0x43	; 67
     d44:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     d48:	2b ed       	ldi	r18, 0xDB	; 219
     d4a:	3f e0       	ldi	r19, 0x0F	; 15
     d4c:	49 e4       	ldi	r20, 0x49	; 73
     d4e:	50 e4       	ldi	r21, 0x40	; 64
     d50:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
     d54:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fixsfsi>
     d58:	f8 01       	movw	r30, r16
     d5a:	71 83       	std	Z+1, r23	; 0x01
     d5c:	60 83       	st	Z, r22
     d5e:	14 c0       	rjmp	.+40     	; 0xd88 <_ZN5Gates8vec2amplEP7Complexi+0xdc>
     d60:	c7 01       	movw	r24, r14
     d62:	0e 94 04 02 	call	0x408	; 0x408 <_ZN7Complex3argEv>
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	44 e3       	ldi	r20, 0x34	; 52
     d6c:	53 e4       	ldi	r21, 0x43	; 67
     d6e:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
     d72:	2b ed       	ldi	r18, 0xDB	; 219
     d74:	3f e0       	ldi	r19, 0x0F	; 15
     d76:	49 e4       	ldi	r20, 0x49	; 73
     d78:	50 e4       	ldi	r21, 0x40	; 64
     d7a:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
     d7e:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fixsfsi>
     d82:	f8 01       	movw	r30, r16
     d84:	71 83       	std	Z+1, r23	; 0x01
     d86:	60 83       	st	Z, r22
     d88:	21 96       	adiw	r28, 0x01	; 1
     d8a:	f8 e0       	ldi	r31, 0x08	; 8
     d8c:	ef 0e       	add	r14, r31
     d8e:	f1 1c       	adc	r15, r1
     d90:	0e 5f       	subi	r16, 0xFE	; 254
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	cc 15       	cp	r28, r12
     d96:	dd 05       	cpc	r29, r13
     d98:	41 f6       	brne	.-112    	; 0xd2a <_ZN5Gates8vec2amplEP7Complexi+0x7e>
	
	print_states(kron_size,vec,"After: ");
     d9a:	4e e7       	ldi	r20, 0x7E	; 126
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	66 2d       	mov	r22, r6
     da0:	77 2d       	mov	r23, r7
     da2:	c4 01       	movw	r24, r8
     da4:	0e 94 b7 02 	call	0x56e	; 0x56e <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     da8:	84 2d       	mov	r24, r4
     daa:	95 2d       	mov	r25, r5
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	9f 90       	pop	r9
     dc2:	8f 90       	pop	r8
     dc4:	7f 90       	pop	r7
     dc6:	6f 90       	pop	r6
     dc8:	5f 90       	pop	r5
     dca:	4f 90       	pop	r4
     dcc:	08 95       	ret

00000dce <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     dce:	2f 92       	push	r2
     dd0:	3f 92       	push	r3
     dd2:	4f 92       	push	r4
     dd4:	5f 92       	push	r5
     dd6:	6f 92       	push	r6
     dd8:	7f 92       	push	r7
     dda:	8f 92       	push	r8
     ddc:	9f 92       	push	r9
     dde:	af 92       	push	r10
     de0:	bf 92       	push	r11
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	60 97       	sbiw	r28, 0x10	; 16
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	4b 01       	movw	r8, r22
     e04:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     e06:	80 e1       	ldi	r24, 0x10	; 16
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
     e0e:	38 2e       	mov	r3, r24
     e10:	29 2e       	mov	r2, r25
     e12:	c8 2e       	mov	r12, r24
     e14:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     e16:	a1 2c       	mov	r10, r1
     e18:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e1a:	24 01       	movw	r4, r8
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	48 0e       	add	r4, r24
     e20:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     e22:	ce 01       	movw	r24, r28
     e24:	09 96       	adiw	r24, 0x09	; 9
     e26:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e2a:	75 01       	movw	r14, r10
     e2c:	ee 0c       	add	r14, r14
     e2e:	ff 1c       	adc	r15, r15
     e30:	ee 0c       	add	r14, r14
     e32:	ff 1c       	adc	r15, r15
     e34:	ee 0c       	add	r14, r14
     e36:	ff 1c       	adc	r15, r15
     e38:	e6 0c       	add	r14, r6
     e3a:	f7 1c       	adc	r15, r7
     e3c:	d7 01       	movw	r26, r14
     e3e:	0c 91       	ld	r16, X
     e40:	11 96       	adiw	r26, 0x01	; 1
     e42:	1c 91       	ld	r17, X
     e44:	11 97       	sbiw	r26, 0x01	; 1
     e46:	12 96       	adiw	r26, 0x02	; 2
     e48:	2c 91       	ld	r18, X
     e4a:	12 97       	sbiw	r26, 0x02	; 2
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 91       	ld	r19, X
     e50:	13 97       	sbiw	r26, 0x03	; 3
     e52:	14 96       	adiw	r26, 0x04	; 4
     e54:	4c 91       	ld	r20, X
     e56:	14 97       	sbiw	r26, 0x04	; 4
     e58:	15 96       	adiw	r26, 0x05	; 5
     e5a:	5c 91       	ld	r21, X
     e5c:	15 97       	sbiw	r26, 0x05	; 5
     e5e:	16 96       	adiw	r26, 0x06	; 6
     e60:	6c 91       	ld	r22, X
     e62:	16 97       	sbiw	r26, 0x06	; 6
     e64:	17 96       	adiw	r26, 0x07	; 7
     e66:	7c 91       	ld	r23, X
     e68:	c4 01       	movw	r24, r8
     e6a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN7Complex3mulES_>
     e6e:	02 2f       	mov	r16, r18
     e70:	13 2f       	mov	r17, r19
     e72:	24 2f       	mov	r18, r20
     e74:	35 2f       	mov	r19, r21
     e76:	46 2f       	mov	r20, r22
     e78:	57 2f       	mov	r21, r23
     e7a:	68 2f       	mov	r22, r24
     e7c:	79 2f       	mov	r23, r25
     e7e:	ce 01       	movw	r24, r28
     e80:	09 96       	adiw	r24, 0x09	; 9
     e82:	0e 94 0c 01 	call	0x218	; 0x218 <_ZN7Complex3addES_>
     e86:	29 87       	std	Y+9, r18	; 0x09
     e88:	3a 87       	std	Y+10, r19	; 0x0a
     e8a:	4b 87       	std	Y+11, r20	; 0x0b
     e8c:	5c 87       	std	Y+12, r21	; 0x0c
     e8e:	6d 87       	std	Y+13, r22	; 0x0d
     e90:	7e 87       	std	Y+14, r23	; 0x0e
     e92:	8f 87       	std	Y+15, r24	; 0x0f
     e94:	98 8b       	std	Y+16, r25	; 0x10
     e96:	f7 01       	movw	r30, r14
     e98:	70 96       	adiw	r30, 0x10	; 16
     e9a:	d7 01       	movw	r26, r14
     e9c:	50 96       	adiw	r26, 0x10	; 16
     e9e:	0c 91       	ld	r16, X
     ea0:	11 81       	ldd	r17, Z+1	; 0x01
     ea2:	22 81       	ldd	r18, Z+2	; 0x02
     ea4:	33 81       	ldd	r19, Z+3	; 0x03
     ea6:	44 81       	ldd	r20, Z+4	; 0x04
     ea8:	55 81       	ldd	r21, Z+5	; 0x05
     eaa:	66 81       	ldd	r22, Z+6	; 0x06
     eac:	77 81       	ldd	r23, Z+7	; 0x07
     eae:	c2 01       	movw	r24, r4
     eb0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN7Complex3mulES_>
     eb4:	02 2f       	mov	r16, r18
     eb6:	13 2f       	mov	r17, r19
     eb8:	24 2f       	mov	r18, r20
     eba:	35 2f       	mov	r19, r21
     ebc:	46 2f       	mov	r20, r22
     ebe:	57 2f       	mov	r21, r23
     ec0:	68 2f       	mov	r22, r24
     ec2:	79 2f       	mov	r23, r25
     ec4:	ce 01       	movw	r24, r28
     ec6:	09 96       	adiw	r24, 0x09	; 9
     ec8:	0e 94 0c 01 	call	0x218	; 0x218 <_ZN7Complex3addES_>
     ecc:	29 87       	std	Y+9, r18	; 0x09
     ece:	3a 87       	std	Y+10, r19	; 0x0a
     ed0:	4b 87       	std	Y+11, r20	; 0x0b
     ed2:	5c 87       	std	Y+12, r21	; 0x0c
     ed4:	6d 87       	std	Y+13, r22	; 0x0d
     ed6:	7e 87       	std	Y+14, r23	; 0x0e
     ed8:	8f 87       	std	Y+15, r24	; 0x0f
     eda:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     edc:	89 85       	ldd	r24, Y+9	; 0x09
     ede:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee0:	ab 85       	ldd	r26, Y+11	; 0x0b
     ee2:	bc 85       	ldd	r27, Y+12	; 0x0c
     ee4:	f6 01       	movw	r30, r12
     ee6:	80 83       	st	Z, r24
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	a2 83       	std	Z+2, r26	; 0x02
     eec:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     eee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef2:	af 85       	ldd	r26, Y+15	; 0x0f
     ef4:	b8 89       	ldd	r27, Y+16	; 0x10
     ef6:	84 83       	std	Z+4, r24	; 0x04
     ef8:	95 83       	std	Z+5, r25	; 0x05
     efa:	a6 83       	std	Z+6, r26	; 0x06
     efc:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     efe:	ff ef       	ldi	r31, 0xFF	; 255
     f00:	af 1a       	sub	r10, r31
     f02:	bf 0a       	sbc	r11, r31
     f04:	88 e0       	ldi	r24, 0x08	; 8
     f06:	c8 0e       	add	r12, r24
     f08:	d1 1c       	adc	r13, r1
     f0a:	a2 e0       	ldi	r26, 0x02	; 2
     f0c:	aa 16       	cp	r10, r26
     f0e:	b1 04       	cpc	r11, r1
     f10:	09 f0       	breq	.+2      	; 0xf14 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     f12:	87 cf       	rjmp	.-242    	; 0xe22 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     f14:	83 2d       	mov	r24, r3
     f16:	92 2d       	mov	r25, r2
     f18:	60 96       	adiw	r28, 0x10	; 16
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	9f 90       	pop	r9
     f3a:	8f 90       	pop	r8
     f3c:	7f 90       	pop	r7
     f3e:	6f 90       	pop	r6
     f40:	5f 90       	pop	r5
     f42:	4f 90       	pop	r4
     f44:	3f 90       	pop	r3
     f46:	2f 90       	pop	r2
     f48:	08 95       	ret

00000f4a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     f4a:	2f 92       	push	r2
     f4c:	3f 92       	push	r3
     f4e:	4f 92       	push	r4
     f50:	5f 92       	push	r5
     f52:	6f 92       	push	r6
     f54:	7f 92       	push	r7
     f56:	8f 92       	push	r8
     f58:	9f 92       	push	r9
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	64 97       	sbiw	r28, 0x14	; 20
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	3b 01       	movw	r6, r22
     f80:	e4 2e       	mov	r14, r20
     f82:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     f84:	80 e2       	ldi	r24, 0x20	; 32
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
     f8c:	8b 8b       	std	Y+19, r24	; 0x13
     f8e:	9c 8b       	std	Y+20, r25	; 0x14
     f90:	48 2e       	mov	r4, r24
     f92:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     f94:	81 2c       	mov	r8, r1
     f96:	91 2c       	mov	r9, r1
     f98:	e9 8a       	std	Y+17, r14	; 0x11
     f9a:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     f9c:	21 2c       	mov	r2, r1
     f9e:	31 2c       	mov	r3, r1
     fa0:	ce 01       	movw	r24, r28
     fa2:	09 96       	adiw	r24, 0x09	; 9
     fa4:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7ComplexC1Ev>
     fa8:	c9 88       	ldd	r12, Y+17	; 0x11
     faa:	da 88       	ldd	r13, Y+18	; 0x12
     fac:	e2 2c       	mov	r14, r2
     fae:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     fb0:	54 01       	movw	r10, r8
     fb2:	aa 0c       	add	r10, r10
     fb4:	bb 1c       	adc	r11, r11
     fb6:	aa 0c       	add	r10, r10
     fb8:	bb 1c       	adc	r11, r11
     fba:	aa 0c       	add	r10, r10
     fbc:	bb 1c       	adc	r11, r11
     fbe:	f5 01       	movw	r30, r10
     fc0:	ec 0d       	add	r30, r12
     fc2:	fd 1d       	adc	r31, r13
     fc4:	00 81       	ld	r16, Z
     fc6:	11 81       	ldd	r17, Z+1	; 0x01
     fc8:	22 81       	ldd	r18, Z+2	; 0x02
     fca:	33 81       	ldd	r19, Z+3	; 0x03
     fcc:	44 81       	ldd	r20, Z+4	; 0x04
     fce:	55 81       	ldd	r21, Z+5	; 0x05
     fd0:	66 81       	ldd	r22, Z+6	; 0x06
     fd2:	77 81       	ldd	r23, Z+7	; 0x07
     fd4:	c3 01       	movw	r24, r6
     fd6:	8e 0d       	add	r24, r14
     fd8:	9f 1d       	adc	r25, r15
     fda:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN7Complex3mulES_>
     fde:	29 83       	std	Y+1, r18	; 0x01
     fe0:	3a 83       	std	Y+2, r19	; 0x02
     fe2:	4b 83       	std	Y+3, r20	; 0x03
     fe4:	5c 83       	std	Y+4, r21	; 0x04
     fe6:	6d 83       	std	Y+5, r22	; 0x05
     fe8:	7e 83       	std	Y+6, r23	; 0x06
     fea:	8f 83       	std	Y+7, r24	; 0x07
     fec:	98 87       	std	Y+8, r25	; 0x08
     fee:	02 2f       	mov	r16, r18
     ff0:	13 2f       	mov	r17, r19
     ff2:	24 2f       	mov	r18, r20
     ff4:	35 2f       	mov	r19, r21
     ff6:	46 2f       	mov	r20, r22
     ff8:	57 2f       	mov	r21, r23
     ffa:	68 2f       	mov	r22, r24
     ffc:	79 2f       	mov	r23, r25
     ffe:	ce 01       	movw	r24, r28
    1000:	09 96       	adiw	r24, 0x09	; 9
    1002:	0e 94 0c 01 	call	0x218	; 0x218 <_ZN7Complex3addES_>
    1006:	29 87       	std	Y+9, r18	; 0x09
    1008:	3a 87       	std	Y+10, r19	; 0x0a
    100a:	4b 87       	std	Y+11, r20	; 0x0b
    100c:	5c 87       	std	Y+12, r21	; 0x0c
    100e:	6d 87       	std	Y+13, r22	; 0x0d
    1010:	7e 87       	std	Y+14, r23	; 0x0e
    1012:	8f 87       	std	Y+15, r24	; 0x0f
    1014:	98 8b       	std	Y+16, r25	; 0x10
    1016:	88 e0       	ldi	r24, 0x08	; 8
    1018:	e8 0e       	add	r14, r24
    101a:	f1 1c       	adc	r15, r1
    101c:	e0 e2       	ldi	r30, 0x20	; 32
    101e:	ce 0e       	add	r12, r30
    1020:	d1 1c       	adc	r13, r1
    1022:	f0 e2       	ldi	r31, 0x20	; 32
    1024:	ef 16       	cp	r14, r31
    1026:	f1 04       	cpc	r15, r1
    1028:	51 f6       	brne	.-108    	; 0xfbe <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
    102a:	89 85       	ldd	r24, Y+9	; 0x09
    102c:	9a 85       	ldd	r25, Y+10	; 0x0a
    102e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1030:	bc 85       	ldd	r27, Y+12	; 0x0c
    1032:	f2 01       	movw	r30, r4
    1034:	80 83       	st	Z, r24
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	a2 83       	std	Z+2, r26	; 0x02
    103a:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    103c:	8d 85       	ldd	r24, Y+13	; 0x0d
    103e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1040:	af 85       	ldd	r26, Y+15	; 0x0f
    1042:	b8 89       	ldd	r27, Y+16	; 0x10
    1044:	84 83       	std	Z+4, r24	; 0x04
    1046:	95 83       	std	Z+5, r25	; 0x05
    1048:	a6 83       	std	Z+6, r26	; 0x06
    104a:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    104c:	ff ef       	ldi	r31, 0xFF	; 255
    104e:	8f 1a       	sub	r8, r31
    1050:	9f 0a       	sbc	r9, r31
    1052:	88 e0       	ldi	r24, 0x08	; 8
    1054:	48 0e       	add	r4, r24
    1056:	51 1c       	adc	r5, r1
    1058:	e4 e0       	ldi	r30, 0x04	; 4
    105a:	8e 16       	cp	r8, r30
    105c:	91 04       	cpc	r9, r1
    105e:	09 f0       	breq	.+2      	; 0x1062 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
    1060:	9f cf       	rjmp	.-194    	; 0xfa0 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    1062:	8b 89       	ldd	r24, Y+19	; 0x13
    1064:	9c 89       	ldd	r25, Y+20	; 0x14
    1066:	64 96       	adiw	r28, 0x14	; 20
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
    1082:	bf 90       	pop	r11
    1084:	af 90       	pop	r10
    1086:	9f 90       	pop	r9
    1088:	8f 90       	pop	r8
    108a:	7f 90       	pop	r7
    108c:	6f 90       	pop	r6
    108e:	5f 90       	pop	r5
    1090:	4f 90       	pop	r4
    1092:	3f 90       	pop	r3
    1094:	2f 90       	pop	r2
    1096:	08 95       	ret

00001098 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>:
Complex * Gates::multiply8x8(Complex *q,Complex matrix[8][8]){
    1098:	2f 92       	push	r2
    109a:	3f 92       	push	r3
    109c:	4f 92       	push	r4
    109e:	5f 92       	push	r5
    10a0:	6f 92       	push	r6
    10a2:	7f 92       	push	r7
    10a4:	8f 92       	push	r8
    10a6:	9f 92       	push	r9
    10a8:	af 92       	push	r10
    10aa:	bf 92       	push	r11
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	62 97       	sbiw	r28, 0x12	; 18
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	4b 01       	movw	r8, r22
    10ce:	34 2e       	mov	r3, r20
    10d0:	25 2e       	mov	r2, r21
	int qb_size=8;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
    10d2:	80 e4       	ldi	r24, 0x40	; 64
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
    10da:	89 8b       	std	Y+17, r24	; 0x11
    10dc:	9a 8b       	std	Y+18, r25	; 0x12
    10de:	48 2e       	mov	r4, r24
    10e0:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
    10e2:	61 2c       	mov	r6, r1
    10e4:	71 2c       	mov	r7, r1
		Complex tmp;
    10e6:	ce 01       	movw	r24, r28
    10e8:	09 96       	adiw	r24, 0x09	; 9
    10ea:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7ComplexC1Ev>
    10ee:	c3 2c       	mov	r12, r3
    10f0:	d2 2c       	mov	r13, r2
    10f2:	e1 2c       	mov	r14, r1
    10f4:	f1 2c       	mov	r15, r1
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
    10f6:	53 01       	movw	r10, r6
    10f8:	aa 0c       	add	r10, r10
    10fa:	bb 1c       	adc	r11, r11
    10fc:	aa 0c       	add	r10, r10
    10fe:	bb 1c       	adc	r11, r11
    1100:	aa 0c       	add	r10, r10
    1102:	bb 1c       	adc	r11, r11
    1104:	f5 01       	movw	r30, r10
    1106:	ec 0d       	add	r30, r12
    1108:	fd 1d       	adc	r31, r13
    110a:	00 81       	ld	r16, Z
    110c:	11 81       	ldd	r17, Z+1	; 0x01
    110e:	22 81       	ldd	r18, Z+2	; 0x02
    1110:	33 81       	ldd	r19, Z+3	; 0x03
    1112:	44 81       	ldd	r20, Z+4	; 0x04
    1114:	55 81       	ldd	r21, Z+5	; 0x05
    1116:	66 81       	ldd	r22, Z+6	; 0x06
    1118:	77 81       	ldd	r23, Z+7	; 0x07
    111a:	c4 01       	movw	r24, r8
    111c:	8e 0d       	add	r24, r14
    111e:	9f 1d       	adc	r25, r15
    1120:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN7Complex3mulES_>
    1124:	29 83       	std	Y+1, r18	; 0x01
    1126:	3a 83       	std	Y+2, r19	; 0x02
    1128:	4b 83       	std	Y+3, r20	; 0x03
    112a:	5c 83       	std	Y+4, r21	; 0x04
    112c:	6d 83       	std	Y+5, r22	; 0x05
    112e:	7e 83       	std	Y+6, r23	; 0x06
    1130:	8f 83       	std	Y+7, r24	; 0x07
    1132:	98 87       	std	Y+8, r25	; 0x08
    1134:	02 2f       	mov	r16, r18
    1136:	13 2f       	mov	r17, r19
    1138:	24 2f       	mov	r18, r20
    113a:	35 2f       	mov	r19, r21
    113c:	46 2f       	mov	r20, r22
    113e:	57 2f       	mov	r21, r23
    1140:	68 2f       	mov	r22, r24
    1142:	79 2f       	mov	r23, r25
    1144:	ce 01       	movw	r24, r28
    1146:	09 96       	adiw	r24, 0x09	; 9
    1148:	0e 94 0c 01 	call	0x218	; 0x218 <_ZN7Complex3addES_>
    114c:	29 87       	std	Y+9, r18	; 0x09
    114e:	3a 87       	std	Y+10, r19	; 0x0a
    1150:	4b 87       	std	Y+11, r20	; 0x0b
    1152:	5c 87       	std	Y+12, r21	; 0x0c
    1154:	6d 87       	std	Y+13, r22	; 0x0d
    1156:	7e 87       	std	Y+14, r23	; 0x0e
    1158:	8f 87       	std	Y+15, r24	; 0x0f
    115a:	98 8b       	std	Y+16, r25	; 0x10
    115c:	88 e0       	ldi	r24, 0x08	; 8
    115e:	e8 0e       	add	r14, r24
    1160:	f1 1c       	adc	r15, r1
    1162:	e0 e4       	ldi	r30, 0x40	; 64
    1164:	ce 0e       	add	r12, r30
    1166:	d1 1c       	adc	r13, r1
    1168:	f0 e4       	ldi	r31, 0x40	; 64
    116a:	ef 16       	cp	r14, r31
    116c:	f1 04       	cpc	r15, r1
    116e:	51 f6       	brne	.-108    	; 0x1104 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x6c>
		result[i].re=tmp.re;
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	9a 85       	ldd	r25, Y+10	; 0x0a
    1174:	ab 85       	ldd	r26, Y+11	; 0x0b
    1176:	bc 85       	ldd	r27, Y+12	; 0x0c
    1178:	f2 01       	movw	r30, r4
    117a:	80 83       	st	Z, r24
    117c:	91 83       	std	Z+1, r25	; 0x01
    117e:	a2 83       	std	Z+2, r26	; 0x02
    1180:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    1182:	8d 85       	ldd	r24, Y+13	; 0x0d
    1184:	9e 85       	ldd	r25, Y+14	; 0x0e
    1186:	af 85       	ldd	r26, Y+15	; 0x0f
    1188:	b8 89       	ldd	r27, Y+16	; 0x10
    118a:	84 83       	std	Z+4, r24	; 0x04
    118c:	95 83       	std	Z+5, r25	; 0x05
    118e:	a6 83       	std	Z+6, r26	; 0x06
    1190:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply8x8(Complex *q,Complex matrix[8][8]){
	int qb_size=8;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    1192:	ff ef       	ldi	r31, 0xFF	; 255
    1194:	6f 1a       	sub	r6, r31
    1196:	7f 0a       	sbc	r7, r31
    1198:	88 e0       	ldi	r24, 0x08	; 8
    119a:	48 0e       	add	r4, r24
    119c:	51 1c       	adc	r5, r1
    119e:	e8 e0       	ldi	r30, 0x08	; 8
    11a0:	6e 16       	cp	r6, r30
    11a2:	71 04       	cpc	r7, r1
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x110>
    11a6:	9f cf       	rjmp	.-194    	; 0x10e6 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x4e>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    11a8:	89 89       	ldd	r24, Y+17	; 0x11
    11aa:	9a 89       	ldd	r25, Y+18	; 0x12
    11ac:	62 96       	adiw	r28, 0x12	; 18
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	af 90       	pop	r10
    11cc:	9f 90       	pop	r9
    11ce:	8f 90       	pop	r8
    11d0:	7f 90       	pop	r7
    11d2:	6f 90       	pop	r6
    11d4:	5f 90       	pop	r5
    11d6:	4f 90       	pop	r4
    11d8:	3f 90       	pop	r3
    11da:	2f 90       	pop	r2
    11dc:	08 95       	ret

000011de <_ZN5Gates1XEii>:

int * Gates::X(int theta,int phi){
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	a4 97       	sbiw	r28, 0x24	; 36
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	7c 01       	movw	r14, r24
    1204:	5b 01       	movw	r10, r22
    1206:	6a 01       	movw	r12, r20
	Complex x_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,0),Complex(1,0)},
													   {Complex(1,0),Complex(0,0)}};
    1208:	00 e0       	ldi	r16, 0x00	; 0
    120a:	10 e0       	ldi	r17, 0x00	; 0
    120c:	98 01       	movw	r18, r16
    120e:	b9 01       	movw	r22, r18
    1210:	a8 01       	movw	r20, r16
    1212:	ce 01       	movw	r24, r28
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    121a:	00 e0       	ldi	r16, 0x00	; 0
    121c:	10 e0       	ldi	r17, 0x00	; 0
    121e:	98 01       	movw	r18, r16
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	60 e8       	ldi	r22, 0x80	; 128
    1226:	7f e3       	ldi	r23, 0x3F	; 63
    1228:	ce 01       	movw	r24, r28
    122a:	09 96       	adiw	r24, 0x09	; 9
    122c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1230:	00 e0       	ldi	r16, 0x00	; 0
    1232:	10 e0       	ldi	r17, 0x00	; 0
    1234:	98 01       	movw	r18, r16
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	60 e8       	ldi	r22, 0x80	; 128
    123c:	7f e3       	ldi	r23, 0x3F	; 63
    123e:	ce 01       	movw	r24, r28
    1240:	41 96       	adiw	r24, 0x11	; 17
    1242:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1246:	00 e0       	ldi	r16, 0x00	; 0
    1248:	10 e0       	ldi	r17, 0x00	; 0
    124a:	98 01       	movw	r18, r16
    124c:	b9 01       	movw	r22, r18
    124e:	a8 01       	movw	r20, r16
    1250:	ce 01       	movw	r24, r28
    1252:	49 96       	adiw	r24, 0x19	; 25
    1254:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[1]={phi};
    1258:	bc a2       	std	Y+36, r11	; 0x24
    125a:	ab a2       	std	Y+35, r10	; 0x23
    125c:	da a2       	std	Y+34, r13	; 0x22
    125e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),x_matrix),QB_SIZE1);
    1260:	9e 01       	movw	r18, r28
    1262:	2f 5d       	subi	r18, 0xDF	; 223
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	ae 01       	movw	r20, r28
    1268:	4d 5d       	subi	r20, 0xDD	; 221
    126a:	5f 4f       	sbci	r21, 0xFF	; 255
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	c7 01       	movw	r24, r14
    1272:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    1276:	ae 01       	movw	r20, r28
    1278:	4f 5f       	subi	r20, 0xFF	; 255
    127a:	5f 4f       	sbci	r21, 0xFF	; 255
    127c:	bc 01       	movw	r22, r24
    127e:	c7 01       	movw	r24, r14
    1280:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1284:	41 e0       	ldi	r20, 0x01	; 1
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	bc 01       	movw	r22, r24
    128a:	c7 01       	movw	r24, r14
    128c:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    1290:	a4 96       	adiw	r28, 0x24	; 36
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	08 95       	ret

000012b2 <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    12b2:	af 92       	push	r10
    12b4:	bf 92       	push	r11
    12b6:	cf 92       	push	r12
    12b8:	df 92       	push	r13
    12ba:	ef 92       	push	r14
    12bc:	ff 92       	push	r15
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	a4 97       	sbiw	r28, 0x24	; 36
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	7c 01       	movw	r14, r24
    12d8:	5b 01       	movw	r10, r22
    12da:	6a 01       	movw	r12, r20
	Complex y_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,0),Complex(0,-1)},
													   {Complex(0,1),Complex(0,0)}};
    12dc:	00 e0       	ldi	r16, 0x00	; 0
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	98 01       	movw	r18, r16
    12e2:	b9 01       	movw	r22, r18
    12e4:	a8 01       	movw	r20, r16
    12e6:	ce 01       	movw	r24, r28
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	20 e8       	ldi	r18, 0x80	; 128
    12f4:	3f eb       	ldi	r19, 0xBF	; 191
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	ba 01       	movw	r22, r20
    12fc:	ce 01       	movw	r24, r28
    12fe:	09 96       	adiw	r24, 0x09	; 9
    1300:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	20 e8       	ldi	r18, 0x80	; 128
    130a:	3f e3       	ldi	r19, 0x3F	; 63
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	ba 01       	movw	r22, r20
    1312:	ce 01       	movw	r24, r28
    1314:	41 96       	adiw	r24, 0x11	; 17
    1316:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    131a:	00 e0       	ldi	r16, 0x00	; 0
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	98 01       	movw	r18, r16
    1320:	b9 01       	movw	r22, r18
    1322:	a8 01       	movw	r20, r16
    1324:	ce 01       	movw	r24, r28
    1326:	49 96       	adiw	r24, 0x19	; 25
    1328:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    132c:	bc a2       	std	Y+36, r11	; 0x24
    132e:	ab a2       	std	Y+35, r10	; 0x23
    1330:	da a2       	std	Y+34, r13	; 0x22
    1332:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),y_matrix),QB_SIZE1);
    1334:	9e 01       	movw	r18, r28
    1336:	2f 5d       	subi	r18, 0xDF	; 223
    1338:	3f 4f       	sbci	r19, 0xFF	; 255
    133a:	ae 01       	movw	r20, r28
    133c:	4d 5d       	subi	r20, 0xDD	; 221
    133e:	5f 4f       	sbci	r21, 0xFF	; 255
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	c7 01       	movw	r24, r14
    1346:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    134a:	ae 01       	movw	r20, r28
    134c:	4f 5f       	subi	r20, 0xFF	; 255
    134e:	5f 4f       	sbci	r21, 0xFF	; 255
    1350:	bc 01       	movw	r22, r24
    1352:	c7 01       	movw	r24, r14
    1354:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1358:	41 e0       	ldi	r20, 0x01	; 1
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	bc 01       	movw	r22, r24
    135e:	c7 01       	movw	r24, r14
    1360:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    1364:	a4 96       	adiw	r28, 0x24	; 36
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	bf 90       	pop	r11
    1382:	af 90       	pop	r10
    1384:	08 95       	ret

00001386 <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    1386:	af 92       	push	r10
    1388:	bf 92       	push	r11
    138a:	cf 92       	push	r12
    138c:	df 92       	push	r13
    138e:	ef 92       	push	r14
    1390:	ff 92       	push	r15
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	a4 97       	sbiw	r28, 0x24	; 36
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	7c 01       	movw	r14, r24
    13ac:	5b 01       	movw	r10, r22
    13ae:	6a 01       	movw	r12, r20
	Complex z_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(-1,0)}};
    13b0:	00 e0       	ldi	r16, 0x00	; 0
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	98 01       	movw	r18, r16
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	60 e8       	ldi	r22, 0x80	; 128
    13bc:	7f e3       	ldi	r23, 0x3F	; 63
    13be:	ce 01       	movw	r24, r28
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    13c6:	00 e0       	ldi	r16, 0x00	; 0
    13c8:	10 e0       	ldi	r17, 0x00	; 0
    13ca:	98 01       	movw	r18, r16
    13cc:	b9 01       	movw	r22, r18
    13ce:	a8 01       	movw	r20, r16
    13d0:	ce 01       	movw	r24, r28
    13d2:	09 96       	adiw	r24, 0x09	; 9
    13d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    13d8:	00 e0       	ldi	r16, 0x00	; 0
    13da:	10 e0       	ldi	r17, 0x00	; 0
    13dc:	98 01       	movw	r18, r16
    13de:	b9 01       	movw	r22, r18
    13e0:	a8 01       	movw	r20, r16
    13e2:	ce 01       	movw	r24, r28
    13e4:	41 96       	adiw	r24, 0x11	; 17
    13e6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    13ea:	00 e0       	ldi	r16, 0x00	; 0
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	98 01       	movw	r18, r16
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	60 e8       	ldi	r22, 0x80	; 128
    13f6:	7f eb       	ldi	r23, 0xBF	; 191
    13f8:	ce 01       	movw	r24, r28
    13fa:	49 96       	adiw	r24, 0x19	; 25
    13fc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1400:	bc a2       	std	Y+36, r11	; 0x24
    1402:	ab a2       	std	Y+35, r10	; 0x23
    1404:	da a2       	std	Y+34, r13	; 0x22
    1406:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),z_matrix),QB_SIZE1);
    1408:	9e 01       	movw	r18, r28
    140a:	2f 5d       	subi	r18, 0xDF	; 223
    140c:	3f 4f       	sbci	r19, 0xFF	; 255
    140e:	ae 01       	movw	r20, r28
    1410:	4d 5d       	subi	r20, 0xDD	; 221
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	c7 01       	movw	r24, r14
    141a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    141e:	ae 01       	movw	r20, r28
    1420:	4f 5f       	subi	r20, 0xFF	; 255
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	bc 01       	movw	r22, r24
    1426:	c7 01       	movw	r24, r14
    1428:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	bc 01       	movw	r22, r24
    1432:	c7 01       	movw	r24, r14
    1434:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    1438:	a4 96       	adiw	r28, 0x24	; 36
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	bf 90       	pop	r11
    1456:	af 90       	pop	r10
    1458:	08 95       	ret

0000145a <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    145a:	af 92       	push	r10
    145c:	bf 92       	push	r11
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	a4 97       	sbiw	r28, 0x24	; 36
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	7c 01       	movw	r14, r24
    1480:	5b 01       	movw	r10, r22
    1482:	6a 01       	movw	r12, r20
	Complex h_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
													   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    1484:	00 e0       	ldi	r16, 0x00	; 0
    1486:	10 e0       	ldi	r17, 0x00	; 0
    1488:	98 01       	movw	r18, r16
    148a:	43 ef       	ldi	r20, 0xF3	; 243
    148c:	54 e0       	ldi	r21, 0x04	; 4
    148e:	65 e3       	ldi	r22, 0x35	; 53
    1490:	7f e3       	ldi	r23, 0x3F	; 63
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    149a:	00 e0       	ldi	r16, 0x00	; 0
    149c:	10 e0       	ldi	r17, 0x00	; 0
    149e:	98 01       	movw	r18, r16
    14a0:	43 ef       	ldi	r20, 0xF3	; 243
    14a2:	54 e0       	ldi	r21, 0x04	; 4
    14a4:	65 e3       	ldi	r22, 0x35	; 53
    14a6:	7f e3       	ldi	r23, 0x3F	; 63
    14a8:	ce 01       	movw	r24, r28
    14aa:	09 96       	adiw	r24, 0x09	; 9
    14ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    14b0:	00 e0       	ldi	r16, 0x00	; 0
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	98 01       	movw	r18, r16
    14b6:	43 ef       	ldi	r20, 0xF3	; 243
    14b8:	54 e0       	ldi	r21, 0x04	; 4
    14ba:	65 e3       	ldi	r22, 0x35	; 53
    14bc:	7f e3       	ldi	r23, 0x3F	; 63
    14be:	ce 01       	movw	r24, r28
    14c0:	41 96       	adiw	r24, 0x11	; 17
    14c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    14c6:	00 e0       	ldi	r16, 0x00	; 0
    14c8:	10 e0       	ldi	r17, 0x00	; 0
    14ca:	98 01       	movw	r18, r16
    14cc:	43 ef       	ldi	r20, 0xF3	; 243
    14ce:	54 e0       	ldi	r21, 0x04	; 4
    14d0:	65 e3       	ldi	r22, 0x35	; 53
    14d2:	7f eb       	ldi	r23, 0xBF	; 191
    14d4:	ce 01       	movw	r24, r28
    14d6:	49 96       	adiw	r24, 0x19	; 25
    14d8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    14dc:	bc a2       	std	Y+36, r11	; 0x24
    14de:	ab a2       	std	Y+35, r10	; 0x23
    14e0:	da a2       	std	Y+34, r13	; 0x22
    14e2:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),h_matrix),QB_SIZE1);
    14e4:	9e 01       	movw	r18, r28
    14e6:	2f 5d       	subi	r18, 0xDF	; 223
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	ae 01       	movw	r20, r28
    14ec:	4d 5d       	subi	r20, 0xDD	; 221
    14ee:	5f 4f       	sbci	r21, 0xFF	; 255
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	c7 01       	movw	r24, r14
    14f6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    14fa:	ae 01       	movw	r20, r28
    14fc:	4f 5f       	subi	r20, 0xFF	; 255
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1500:	bc 01       	movw	r22, r24
    1502:	c7 01       	movw	r24, r14
    1504:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	bc 01       	movw	r22, r24
    150e:	c7 01       	movw	r24, r14
    1510:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    1514:	a4 96       	adiw	r28, 0x24	; 36
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	bf 90       	pop	r11
    1532:	af 90       	pop	r10
    1534:	08 95       	ret

00001536 <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    1536:	af 92       	push	r10
    1538:	bf 92       	push	r11
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	a4 97       	sbiw	r28, 0x24	; 36
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	7c 01       	movw	r14, r24
    155c:	5b 01       	movw	r10, r22
    155e:	6a 01       	movw	r12, r20
	Complex s_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(0,1)}};
    1560:	00 e0       	ldi	r16, 0x00	; 0
    1562:	10 e0       	ldi	r17, 0x00	; 0
    1564:	98 01       	movw	r18, r16
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	60 e8       	ldi	r22, 0x80	; 128
    156c:	7f e3       	ldi	r23, 0x3F	; 63
    156e:	ce 01       	movw	r24, r28
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1576:	00 e0       	ldi	r16, 0x00	; 0
    1578:	10 e0       	ldi	r17, 0x00	; 0
    157a:	98 01       	movw	r18, r16
    157c:	b9 01       	movw	r22, r18
    157e:	a8 01       	movw	r20, r16
    1580:	ce 01       	movw	r24, r28
    1582:	09 96       	adiw	r24, 0x09	; 9
    1584:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1588:	00 e0       	ldi	r16, 0x00	; 0
    158a:	10 e0       	ldi	r17, 0x00	; 0
    158c:	98 01       	movw	r18, r16
    158e:	b9 01       	movw	r22, r18
    1590:	a8 01       	movw	r20, r16
    1592:	ce 01       	movw	r24, r28
    1594:	41 96       	adiw	r24, 0x11	; 17
    1596:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    159a:	00 e0       	ldi	r16, 0x00	; 0
    159c:	10 e0       	ldi	r17, 0x00	; 0
    159e:	20 e8       	ldi	r18, 0x80	; 128
    15a0:	3f e3       	ldi	r19, 0x3F	; 63
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	ba 01       	movw	r22, r20
    15a8:	ce 01       	movw	r24, r28
    15aa:	49 96       	adiw	r24, 0x19	; 25
    15ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    15b0:	bc a2       	std	Y+36, r11	; 0x24
    15b2:	ab a2       	std	Y+35, r10	; 0x23
    15b4:	da a2       	std	Y+34, r13	; 0x22
    15b6:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),s_matrix),QB_SIZE1);
    15b8:	9e 01       	movw	r18, r28
    15ba:	2f 5d       	subi	r18, 0xDF	; 223
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	ae 01       	movw	r20, r28
    15c0:	4d 5d       	subi	r20, 0xDD	; 221
    15c2:	5f 4f       	sbci	r21, 0xFF	; 255
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	c7 01       	movw	r24, r14
    15ca:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    15ce:	ae 01       	movw	r20, r28
    15d0:	4f 5f       	subi	r20, 0xFF	; 255
    15d2:	5f 4f       	sbci	r21, 0xFF	; 255
    15d4:	bc 01       	movw	r22, r24
    15d6:	c7 01       	movw	r24, r14
    15d8:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	bc 01       	movw	r22, r24
    15e2:	c7 01       	movw	r24, r14
    15e4:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    15e8:	a4 96       	adiw	r28, 0x24	; 36
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	df 90       	pop	r13
    1602:	cf 90       	pop	r12
    1604:	bf 90       	pop	r11
    1606:	af 90       	pop	r10
    1608:	08 95       	ret

0000160a <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    160a:	af 92       	push	r10
    160c:	bf 92       	push	r11
    160e:	cf 92       	push	r12
    1610:	df 92       	push	r13
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	a4 97       	sbiw	r28, 0x24	; 36
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	7c 01       	movw	r14, r24
    1630:	5b 01       	movw	r10, r22
    1632:	6a 01       	movw	r12, r20
	Complex t_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    1634:	00 e0       	ldi	r16, 0x00	; 0
    1636:	10 e0       	ldi	r17, 0x00	; 0
    1638:	98 01       	movw	r18, r16
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	60 e8       	ldi	r22, 0x80	; 128
    1640:	7f e3       	ldi	r23, 0x3F	; 63
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    164a:	00 e0       	ldi	r16, 0x00	; 0
    164c:	10 e0       	ldi	r17, 0x00	; 0
    164e:	98 01       	movw	r18, r16
    1650:	b9 01       	movw	r22, r18
    1652:	a8 01       	movw	r20, r16
    1654:	ce 01       	movw	r24, r28
    1656:	09 96       	adiw	r24, 0x09	; 9
    1658:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    165c:	00 e0       	ldi	r16, 0x00	; 0
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	98 01       	movw	r18, r16
    1662:	b9 01       	movw	r22, r18
    1664:	a8 01       	movw	r20, r16
    1666:	ce 01       	movw	r24, r28
    1668:	41 96       	adiw	r24, 0x11	; 17
    166a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    166e:	03 ef       	ldi	r16, 0xF3	; 243
    1670:	14 e0       	ldi	r17, 0x04	; 4
    1672:	25 e3       	ldi	r18, 0x35	; 53
    1674:	3f e3       	ldi	r19, 0x3F	; 63
    1676:	b9 01       	movw	r22, r18
    1678:	a8 01       	movw	r20, r16
    167a:	ce 01       	movw	r24, r28
    167c:	49 96       	adiw	r24, 0x19	; 25
    167e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1682:	bc a2       	std	Y+36, r11	; 0x24
    1684:	ab a2       	std	Y+35, r10	; 0x23
    1686:	da a2       	std	Y+34, r13	; 0x22
    1688:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),t_matrix),QB_SIZE1);
    168a:	9e 01       	movw	r18, r28
    168c:	2f 5d       	subi	r18, 0xDF	; 223
    168e:	3f 4f       	sbci	r19, 0xFF	; 255
    1690:	ae 01       	movw	r20, r28
    1692:	4d 5d       	subi	r20, 0xDD	; 221
    1694:	5f 4f       	sbci	r21, 0xFF	; 255
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	c7 01       	movw	r24, r14
    169c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    16a0:	ae 01       	movw	r20, r28
    16a2:	4f 5f       	subi	r20, 0xFF	; 255
    16a4:	5f 4f       	sbci	r21, 0xFF	; 255
    16a6:	bc 01       	movw	r22, r24
    16a8:	c7 01       	movw	r24, r14
    16aa:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	bc 01       	movw	r22, r24
    16b4:	c7 01       	movw	r24, r14
    16b6:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    16ba:	a4 96       	adiw	r28, 0x24	; 36
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	df 90       	pop	r13
    16d4:	cf 90       	pop	r12
    16d6:	bf 90       	pop	r11
    16d8:	af 90       	pop	r10
    16da:	08 95       	ret

000016dc <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    16dc:	6f 92       	push	r6
    16de:	7f 92       	push	r7
    16e0:	8f 92       	push	r8
    16e2:	9f 92       	push	r9
    16e4:	af 92       	push	r10
    16e6:	bf 92       	push	r11
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	c8 58       	subi	r28, 0x88	; 136
    16fe:	d1 09       	sbc	r29, r1
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	7c 01       	movw	r14, r24
    170c:	3b 01       	movw	r6, r22
    170e:	5a 01       	movw	r10, r20
    1710:	49 01       	movw	r8, r18
    1712:	68 01       	movw	r12, r16
	Complex cno_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1714:	00 e0       	ldi	r16, 0x00	; 0
    1716:	10 e0       	ldi	r17, 0x00	; 0
    1718:	98 01       	movw	r18, r16
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	60 e8       	ldi	r22, 0x80	; 128
    1720:	7f e3       	ldi	r23, 0x3F	; 63
    1722:	ce 01       	movw	r24, r28
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    172a:	00 e0       	ldi	r16, 0x00	; 0
    172c:	10 e0       	ldi	r17, 0x00	; 0
    172e:	98 01       	movw	r18, r16
    1730:	b9 01       	movw	r22, r18
    1732:	a8 01       	movw	r20, r16
    1734:	ce 01       	movw	r24, r28
    1736:	09 96       	adiw	r24, 0x09	; 9
    1738:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    173c:	00 e0       	ldi	r16, 0x00	; 0
    173e:	10 e0       	ldi	r17, 0x00	; 0
    1740:	98 01       	movw	r18, r16
    1742:	b9 01       	movw	r22, r18
    1744:	a8 01       	movw	r20, r16
    1746:	ce 01       	movw	r24, r28
    1748:	41 96       	adiw	r24, 0x11	; 17
    174a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    174e:	00 e0       	ldi	r16, 0x00	; 0
    1750:	10 e0       	ldi	r17, 0x00	; 0
    1752:	98 01       	movw	r18, r16
    1754:	b9 01       	movw	r22, r18
    1756:	a8 01       	movw	r20, r16
    1758:	ce 01       	movw	r24, r28
    175a:	49 96       	adiw	r24, 0x19	; 25
    175c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1760:	00 e0       	ldi	r16, 0x00	; 0
    1762:	10 e0       	ldi	r17, 0x00	; 0
    1764:	98 01       	movw	r18, r16
    1766:	b9 01       	movw	r22, r18
    1768:	a8 01       	movw	r20, r16
    176a:	ce 01       	movw	r24, r28
    176c:	81 96       	adiw	r24, 0x21	; 33
    176e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1772:	00 e0       	ldi	r16, 0x00	; 0
    1774:	10 e0       	ldi	r17, 0x00	; 0
    1776:	98 01       	movw	r18, r16
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	60 e8       	ldi	r22, 0x80	; 128
    177e:	7f e3       	ldi	r23, 0x3F	; 63
    1780:	ce 01       	movw	r24, r28
    1782:	89 96       	adiw	r24, 0x29	; 41
    1784:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1788:	00 e0       	ldi	r16, 0x00	; 0
    178a:	10 e0       	ldi	r17, 0x00	; 0
    178c:	98 01       	movw	r18, r16
    178e:	b9 01       	movw	r22, r18
    1790:	a8 01       	movw	r20, r16
    1792:	ce 01       	movw	r24, r28
    1794:	c1 96       	adiw	r24, 0x31	; 49
    1796:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    179a:	00 e0       	ldi	r16, 0x00	; 0
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	98 01       	movw	r18, r16
    17a0:	b9 01       	movw	r22, r18
    17a2:	a8 01       	movw	r20, r16
    17a4:	ce 01       	movw	r24, r28
    17a6:	c9 96       	adiw	r24, 0x39	; 57
    17a8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    17ac:	00 e0       	ldi	r16, 0x00	; 0
    17ae:	10 e0       	ldi	r17, 0x00	; 0
    17b0:	98 01       	movw	r18, r16
    17b2:	b9 01       	movw	r22, r18
    17b4:	a8 01       	movw	r20, r16
    17b6:	ce 01       	movw	r24, r28
    17b8:	8f 5b       	subi	r24, 0xBF	; 191
    17ba:	9f 4f       	sbci	r25, 0xFF	; 255
    17bc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    17c0:	00 e0       	ldi	r16, 0x00	; 0
    17c2:	10 e0       	ldi	r17, 0x00	; 0
    17c4:	98 01       	movw	r18, r16
    17c6:	b9 01       	movw	r22, r18
    17c8:	a8 01       	movw	r20, r16
    17ca:	ce 01       	movw	r24, r28
    17cc:	87 5b       	subi	r24, 0xB7	; 183
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    17d4:	00 e0       	ldi	r16, 0x00	; 0
    17d6:	10 e0       	ldi	r17, 0x00	; 0
    17d8:	98 01       	movw	r18, r16
    17da:	b9 01       	movw	r22, r18
    17dc:	a8 01       	movw	r20, r16
    17de:	ce 01       	movw	r24, r28
    17e0:	8f 5a       	subi	r24, 0xAF	; 175
    17e2:	9f 4f       	sbci	r25, 0xFF	; 255
    17e4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    17e8:	00 e0       	ldi	r16, 0x00	; 0
    17ea:	10 e0       	ldi	r17, 0x00	; 0
    17ec:	98 01       	movw	r18, r16
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	60 e8       	ldi	r22, 0x80	; 128
    17f4:	7f e3       	ldi	r23, 0x3F	; 63
    17f6:	ce 01       	movw	r24, r28
    17f8:	87 5a       	subi	r24, 0xA7	; 167
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1800:	00 e0       	ldi	r16, 0x00	; 0
    1802:	10 e0       	ldi	r17, 0x00	; 0
    1804:	98 01       	movw	r18, r16
    1806:	b9 01       	movw	r22, r18
    1808:	a8 01       	movw	r20, r16
    180a:	ce 01       	movw	r24, r28
    180c:	8f 59       	subi	r24, 0x9F	; 159
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1814:	00 e0       	ldi	r16, 0x00	; 0
    1816:	10 e0       	ldi	r17, 0x00	; 0
    1818:	98 01       	movw	r18, r16
    181a:	b9 01       	movw	r22, r18
    181c:	a8 01       	movw	r20, r16
    181e:	ce 01       	movw	r24, r28
    1820:	87 59       	subi	r24, 0x97	; 151
    1822:	9f 4f       	sbci	r25, 0xFF	; 255
    1824:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1828:	00 e0       	ldi	r16, 0x00	; 0
    182a:	10 e0       	ldi	r17, 0x00	; 0
    182c:	98 01       	movw	r18, r16
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	60 e8       	ldi	r22, 0x80	; 128
    1834:	7f e3       	ldi	r23, 0x3F	; 63
    1836:	ce 01       	movw	r24, r28
    1838:	8f 58       	subi	r24, 0x8F	; 143
    183a:	9f 4f       	sbci	r25, 0xFF	; 255
    183c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1840:	00 e0       	ldi	r16, 0x00	; 0
    1842:	10 e0       	ldi	r17, 0x00	; 0
    1844:	98 01       	movw	r18, r16
    1846:	b9 01       	movw	r22, r18
    1848:	a8 01       	movw	r20, r16
    184a:	ce 01       	movw	r24, r28
    184c:	87 58       	subi	r24, 0x87	; 135
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};						
    1854:	cb 57       	subi	r28, 0x7B	; 123
    1856:	df 4f       	sbci	r29, 0xFF	; 255
    1858:	79 82       	std	Y+1, r7	; 0x01
    185a:	68 82       	st	Y, r6
    185c:	c5 58       	subi	r28, 0x85	; 133
    185e:	d0 40       	sbci	r29, 0x00	; 0
    1860:	c9 57       	subi	r28, 0x79	; 121
    1862:	df 4f       	sbci	r29, 0xFF	; 255
    1864:	99 82       	std	Y+1, r9	; 0x01
    1866:	88 82       	st	Y, r8
    1868:	c7 58       	subi	r28, 0x87	; 135
    186a:	d0 40       	sbci	r29, 0x00	; 0
    186c:	cf 57       	subi	r28, 0x7F	; 127
    186e:	df 4f       	sbci	r29, 0xFF	; 255
    1870:	b9 82       	std	Y+1, r11	; 0x01
    1872:	a8 82       	st	Y, r10
    1874:	c1 58       	subi	r28, 0x81	; 129
    1876:	d0 40       	sbci	r29, 0x00	; 0
    1878:	cd 57       	subi	r28, 0x7D	; 125
    187a:	df 4f       	sbci	r29, 0xFF	; 255
    187c:	d9 82       	std	Y+1, r13	; 0x01
    187e:	c8 82       	st	Y, r12
    1880:	c3 58       	subi	r28, 0x83	; 131
    1882:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),cno_matrix),QB_SIZE2);
    1884:	9e 01       	movw	r18, r28
    1886:	2f 57       	subi	r18, 0x7F	; 127
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
    188a:	ae 01       	movw	r20, r28
    188c:	4b 57       	subi	r20, 0x7B	; 123
    188e:	5f 4f       	sbci	r21, 0xFF	; 255
    1890:	62 e0       	ldi	r22, 0x02	; 2
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	c7 01       	movw	r24, r14
    1896:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    189a:	ae 01       	movw	r20, r28
    189c:	4f 5f       	subi	r20, 0xFF	; 255
    189e:	5f 4f       	sbci	r21, 0xFF	; 255
    18a0:	bc 01       	movw	r22, r24
    18a2:	c7 01       	movw	r24, r14
    18a4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    18a8:	42 e0       	ldi	r20, 0x02	; 2
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	bc 01       	movw	r22, r24
    18ae:	c7 01       	movw	r24, r14
    18b0:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    18b4:	c8 57       	subi	r28, 0x78	; 120
    18b6:	df 4f       	sbci	r29, 0xFF	; 255
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	ff 90       	pop	r15
    18cc:	ef 90       	pop	r14
    18ce:	df 90       	pop	r13
    18d0:	cf 90       	pop	r12
    18d2:	bf 90       	pop	r11
    18d4:	af 90       	pop	r10
    18d6:	9f 90       	pop	r9
    18d8:	8f 90       	pop	r8
    18da:	7f 90       	pop	r7
    18dc:	6f 90       	pop	r6
    18de:	08 95       	ret

000018e0 <_ZN5Gates3CSIEiiii>:
int * Gates::CSI(int theta1, int phi1, int theta2,int phi2){
    18e0:	6f 92       	push	r6
    18e2:	7f 92       	push	r7
    18e4:	8f 92       	push	r8
    18e6:	9f 92       	push	r9
    18e8:	af 92       	push	r10
    18ea:	bf 92       	push	r11
    18ec:	cf 92       	push	r12
    18ee:	df 92       	push	r13
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	c8 58       	subi	r28, 0x88	; 136
    1902:	d1 09       	sbc	r29, r1
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	7c 01       	movw	r14, r24
    1910:	3b 01       	movw	r6, r22
    1912:	5a 01       	movw	r10, r20
    1914:	49 01       	movw	r8, r18
    1916:	68 01       	movw	r12, r16
	Complex csi_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(-1,0)}};
    1918:	00 e0       	ldi	r16, 0x00	; 0
    191a:	10 e0       	ldi	r17, 0x00	; 0
    191c:	98 01       	movw	r18, r16
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	60 e8       	ldi	r22, 0x80	; 128
    1924:	7f e3       	ldi	r23, 0x3F	; 63
    1926:	ce 01       	movw	r24, r28
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    192e:	00 e0       	ldi	r16, 0x00	; 0
    1930:	10 e0       	ldi	r17, 0x00	; 0
    1932:	98 01       	movw	r18, r16
    1934:	b9 01       	movw	r22, r18
    1936:	a8 01       	movw	r20, r16
    1938:	ce 01       	movw	r24, r28
    193a:	09 96       	adiw	r24, 0x09	; 9
    193c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1940:	00 e0       	ldi	r16, 0x00	; 0
    1942:	10 e0       	ldi	r17, 0x00	; 0
    1944:	98 01       	movw	r18, r16
    1946:	b9 01       	movw	r22, r18
    1948:	a8 01       	movw	r20, r16
    194a:	ce 01       	movw	r24, r28
    194c:	41 96       	adiw	r24, 0x11	; 17
    194e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1952:	00 e0       	ldi	r16, 0x00	; 0
    1954:	10 e0       	ldi	r17, 0x00	; 0
    1956:	98 01       	movw	r18, r16
    1958:	b9 01       	movw	r22, r18
    195a:	a8 01       	movw	r20, r16
    195c:	ce 01       	movw	r24, r28
    195e:	49 96       	adiw	r24, 0x19	; 25
    1960:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1964:	00 e0       	ldi	r16, 0x00	; 0
    1966:	10 e0       	ldi	r17, 0x00	; 0
    1968:	98 01       	movw	r18, r16
    196a:	b9 01       	movw	r22, r18
    196c:	a8 01       	movw	r20, r16
    196e:	ce 01       	movw	r24, r28
    1970:	81 96       	adiw	r24, 0x21	; 33
    1972:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1976:	00 e0       	ldi	r16, 0x00	; 0
    1978:	10 e0       	ldi	r17, 0x00	; 0
    197a:	98 01       	movw	r18, r16
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	60 e8       	ldi	r22, 0x80	; 128
    1982:	7f e3       	ldi	r23, 0x3F	; 63
    1984:	ce 01       	movw	r24, r28
    1986:	89 96       	adiw	r24, 0x29	; 41
    1988:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    198c:	00 e0       	ldi	r16, 0x00	; 0
    198e:	10 e0       	ldi	r17, 0x00	; 0
    1990:	98 01       	movw	r18, r16
    1992:	b9 01       	movw	r22, r18
    1994:	a8 01       	movw	r20, r16
    1996:	ce 01       	movw	r24, r28
    1998:	c1 96       	adiw	r24, 0x31	; 49
    199a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    199e:	00 e0       	ldi	r16, 0x00	; 0
    19a0:	10 e0       	ldi	r17, 0x00	; 0
    19a2:	98 01       	movw	r18, r16
    19a4:	b9 01       	movw	r22, r18
    19a6:	a8 01       	movw	r20, r16
    19a8:	ce 01       	movw	r24, r28
    19aa:	c9 96       	adiw	r24, 0x39	; 57
    19ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    19b0:	00 e0       	ldi	r16, 0x00	; 0
    19b2:	10 e0       	ldi	r17, 0x00	; 0
    19b4:	98 01       	movw	r18, r16
    19b6:	b9 01       	movw	r22, r18
    19b8:	a8 01       	movw	r20, r16
    19ba:	ce 01       	movw	r24, r28
    19bc:	8f 5b       	subi	r24, 0xBF	; 191
    19be:	9f 4f       	sbci	r25, 0xFF	; 255
    19c0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    19c4:	00 e0       	ldi	r16, 0x00	; 0
    19c6:	10 e0       	ldi	r17, 0x00	; 0
    19c8:	98 01       	movw	r18, r16
    19ca:	b9 01       	movw	r22, r18
    19cc:	a8 01       	movw	r20, r16
    19ce:	ce 01       	movw	r24, r28
    19d0:	87 5b       	subi	r24, 0xB7	; 183
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    19d8:	00 e0       	ldi	r16, 0x00	; 0
    19da:	10 e0       	ldi	r17, 0x00	; 0
    19dc:	98 01       	movw	r18, r16
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	60 e8       	ldi	r22, 0x80	; 128
    19e4:	7f e3       	ldi	r23, 0x3F	; 63
    19e6:	ce 01       	movw	r24, r28
    19e8:	8f 5a       	subi	r24, 0xAF	; 175
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    19f0:	00 e0       	ldi	r16, 0x00	; 0
    19f2:	10 e0       	ldi	r17, 0x00	; 0
    19f4:	98 01       	movw	r18, r16
    19f6:	b9 01       	movw	r22, r18
    19f8:	a8 01       	movw	r20, r16
    19fa:	ce 01       	movw	r24, r28
    19fc:	87 5a       	subi	r24, 0xA7	; 167
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1a04:	00 e0       	ldi	r16, 0x00	; 0
    1a06:	10 e0       	ldi	r17, 0x00	; 0
    1a08:	98 01       	movw	r18, r16
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	a8 01       	movw	r20, r16
    1a0e:	ce 01       	movw	r24, r28
    1a10:	8f 59       	subi	r24, 0x9F	; 159
    1a12:	9f 4f       	sbci	r25, 0xFF	; 255
    1a14:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1a18:	00 e0       	ldi	r16, 0x00	; 0
    1a1a:	10 e0       	ldi	r17, 0x00	; 0
    1a1c:	98 01       	movw	r18, r16
    1a1e:	b9 01       	movw	r22, r18
    1a20:	a8 01       	movw	r20, r16
    1a22:	ce 01       	movw	r24, r28
    1a24:	87 59       	subi	r24, 0x97	; 151
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1a2c:	00 e0       	ldi	r16, 0x00	; 0
    1a2e:	10 e0       	ldi	r17, 0x00	; 0
    1a30:	98 01       	movw	r18, r16
    1a32:	b9 01       	movw	r22, r18
    1a34:	a8 01       	movw	r20, r16
    1a36:	ce 01       	movw	r24, r28
    1a38:	8f 58       	subi	r24, 0x8F	; 143
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	10 e0       	ldi	r17, 0x00	; 0
    1a44:	98 01       	movw	r18, r16
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	60 e8       	ldi	r22, 0x80	; 128
    1a4c:	7f eb       	ldi	r23, 0xBF	; 191
    1a4e:	ce 01       	movw	r24, r28
    1a50:	87 58       	subi	r24, 0x87	; 135
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1a58:	cb 57       	subi	r28, 0x7B	; 123
    1a5a:	df 4f       	sbci	r29, 0xFF	; 255
    1a5c:	79 82       	std	Y+1, r7	; 0x01
    1a5e:	68 82       	st	Y, r6
    1a60:	c5 58       	subi	r28, 0x85	; 133
    1a62:	d0 40       	sbci	r29, 0x00	; 0
    1a64:	c9 57       	subi	r28, 0x79	; 121
    1a66:	df 4f       	sbci	r29, 0xFF	; 255
    1a68:	99 82       	std	Y+1, r9	; 0x01
    1a6a:	88 82       	st	Y, r8
    1a6c:	c7 58       	subi	r28, 0x87	; 135
    1a6e:	d0 40       	sbci	r29, 0x00	; 0
    1a70:	cf 57       	subi	r28, 0x7F	; 127
    1a72:	df 4f       	sbci	r29, 0xFF	; 255
    1a74:	b9 82       	std	Y+1, r11	; 0x01
    1a76:	a8 82       	st	Y, r10
    1a78:	c1 58       	subi	r28, 0x81	; 129
    1a7a:	d0 40       	sbci	r29, 0x00	; 0
    1a7c:	cd 57       	subi	r28, 0x7D	; 125
    1a7e:	df 4f       	sbci	r29, 0xFF	; 255
    1a80:	d9 82       	std	Y+1, r13	; 0x01
    1a82:	c8 82       	st	Y, r12
    1a84:	c3 58       	subi	r28, 0x83	; 131
    1a86:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),csi_matrix),QB_SIZE2);
    1a88:	9e 01       	movw	r18, r28
    1a8a:	2f 57       	subi	r18, 0x7F	; 127
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	ae 01       	movw	r20, r28
    1a90:	4b 57       	subi	r20, 0x7B	; 123
    1a92:	5f 4f       	sbci	r21, 0xFF	; 255
    1a94:	62 e0       	ldi	r22, 0x02	; 2
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	c7 01       	movw	r24, r14
    1a9a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    1a9e:	ae 01       	movw	r20, r28
    1aa0:	4f 5f       	subi	r20, 0xFF	; 255
    1aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	c7 01       	movw	r24, r14
    1aa8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1aac:	42 e0       	ldi	r20, 0x02	; 2
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	c7 01       	movw	r24, r14
    1ab4:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    1ab8:	c8 57       	subi	r28, 0x78	; 120
    1aba:	df 4f       	sbci	r29, 0xFF	; 255
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	bf 90       	pop	r11
    1ad8:	af 90       	pop	r10
    1ada:	9f 90       	pop	r9
    1adc:	8f 90       	pop	r8
    1ade:	7f 90       	pop	r7
    1ae0:	6f 90       	pop	r6
    1ae2:	08 95       	ret

00001ae4 <_ZN5Gates3SWAEiiii>:
int * Gates::SWA(int theta1, int phi1, int theta2,int phi2){
    1ae4:	6f 92       	push	r6
    1ae6:	7f 92       	push	r7
    1ae8:	8f 92       	push	r8
    1aea:	9f 92       	push	r9
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	c8 58       	subi	r28, 0x88	; 136
    1b06:	d1 09       	sbc	r29, r1
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	7c 01       	movw	r14, r24
    1b14:	3b 01       	movw	r6, r22
    1b16:	5a 01       	movw	r10, r20
    1b18:	49 01       	movw	r8, r18
    1b1a:	68 01       	movw	r12, r16
	Complex swa_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    1b1c:	00 e0       	ldi	r16, 0x00	; 0
    1b1e:	10 e0       	ldi	r17, 0x00	; 0
    1b20:	98 01       	movw	r18, r16
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	60 e8       	ldi	r22, 0x80	; 128
    1b28:	7f e3       	ldi	r23, 0x3F	; 63
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1b32:	00 e0       	ldi	r16, 0x00	; 0
    1b34:	10 e0       	ldi	r17, 0x00	; 0
    1b36:	98 01       	movw	r18, r16
    1b38:	b9 01       	movw	r22, r18
    1b3a:	a8 01       	movw	r20, r16
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	09 96       	adiw	r24, 0x09	; 9
    1b40:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1b44:	00 e0       	ldi	r16, 0x00	; 0
    1b46:	10 e0       	ldi	r17, 0x00	; 0
    1b48:	98 01       	movw	r18, r16
    1b4a:	b9 01       	movw	r22, r18
    1b4c:	a8 01       	movw	r20, r16
    1b4e:	ce 01       	movw	r24, r28
    1b50:	41 96       	adiw	r24, 0x11	; 17
    1b52:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1b56:	00 e0       	ldi	r16, 0x00	; 0
    1b58:	10 e0       	ldi	r17, 0x00	; 0
    1b5a:	98 01       	movw	r18, r16
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	a8 01       	movw	r20, r16
    1b60:	ce 01       	movw	r24, r28
    1b62:	49 96       	adiw	r24, 0x19	; 25
    1b64:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1b68:	00 e0       	ldi	r16, 0x00	; 0
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	98 01       	movw	r18, r16
    1b6e:	b9 01       	movw	r22, r18
    1b70:	a8 01       	movw	r20, r16
    1b72:	ce 01       	movw	r24, r28
    1b74:	81 96       	adiw	r24, 0x21	; 33
    1b76:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1b7a:	00 e0       	ldi	r16, 0x00	; 0
    1b7c:	10 e0       	ldi	r17, 0x00	; 0
    1b7e:	98 01       	movw	r18, r16
    1b80:	b9 01       	movw	r22, r18
    1b82:	a8 01       	movw	r20, r16
    1b84:	ce 01       	movw	r24, r28
    1b86:	89 96       	adiw	r24, 0x29	; 41
    1b88:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1b8c:	00 e0       	ldi	r16, 0x00	; 0
    1b8e:	10 e0       	ldi	r17, 0x00	; 0
    1b90:	98 01       	movw	r18, r16
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	60 e8       	ldi	r22, 0x80	; 128
    1b98:	7f e3       	ldi	r23, 0x3F	; 63
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	c1 96       	adiw	r24, 0x31	; 49
    1b9e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1ba2:	00 e0       	ldi	r16, 0x00	; 0
    1ba4:	10 e0       	ldi	r17, 0x00	; 0
    1ba6:	98 01       	movw	r18, r16
    1ba8:	b9 01       	movw	r22, r18
    1baa:	a8 01       	movw	r20, r16
    1bac:	ce 01       	movw	r24, r28
    1bae:	c9 96       	adiw	r24, 0x39	; 57
    1bb0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1bb4:	00 e0       	ldi	r16, 0x00	; 0
    1bb6:	10 e0       	ldi	r17, 0x00	; 0
    1bb8:	98 01       	movw	r18, r16
    1bba:	b9 01       	movw	r22, r18
    1bbc:	a8 01       	movw	r20, r16
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	8f 5b       	subi	r24, 0xBF	; 191
    1bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1bc8:	00 e0       	ldi	r16, 0x00	; 0
    1bca:	10 e0       	ldi	r17, 0x00	; 0
    1bcc:	98 01       	movw	r18, r16
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	60 e8       	ldi	r22, 0x80	; 128
    1bd4:	7f e3       	ldi	r23, 0x3F	; 63
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	87 5b       	subi	r24, 0xB7	; 183
    1bda:	9f 4f       	sbci	r25, 0xFF	; 255
    1bdc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1be0:	00 e0       	ldi	r16, 0x00	; 0
    1be2:	10 e0       	ldi	r17, 0x00	; 0
    1be4:	98 01       	movw	r18, r16
    1be6:	b9 01       	movw	r22, r18
    1be8:	a8 01       	movw	r20, r16
    1bea:	ce 01       	movw	r24, r28
    1bec:	8f 5a       	subi	r24, 0xAF	; 175
    1bee:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1bf4:	00 e0       	ldi	r16, 0x00	; 0
    1bf6:	10 e0       	ldi	r17, 0x00	; 0
    1bf8:	98 01       	movw	r18, r16
    1bfa:	b9 01       	movw	r22, r18
    1bfc:	a8 01       	movw	r20, r16
    1bfe:	ce 01       	movw	r24, r28
    1c00:	87 5a       	subi	r24, 0xA7	; 167
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1c08:	00 e0       	ldi	r16, 0x00	; 0
    1c0a:	10 e0       	ldi	r17, 0x00	; 0
    1c0c:	98 01       	movw	r18, r16
    1c0e:	b9 01       	movw	r22, r18
    1c10:	a8 01       	movw	r20, r16
    1c12:	ce 01       	movw	r24, r28
    1c14:	8f 59       	subi	r24, 0x9F	; 159
    1c16:	9f 4f       	sbci	r25, 0xFF	; 255
    1c18:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1c1c:	00 e0       	ldi	r16, 0x00	; 0
    1c1e:	10 e0       	ldi	r17, 0x00	; 0
    1c20:	98 01       	movw	r18, r16
    1c22:	b9 01       	movw	r22, r18
    1c24:	a8 01       	movw	r20, r16
    1c26:	ce 01       	movw	r24, r28
    1c28:	87 59       	subi	r24, 0x97	; 151
    1c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1c30:	00 e0       	ldi	r16, 0x00	; 0
    1c32:	10 e0       	ldi	r17, 0x00	; 0
    1c34:	98 01       	movw	r18, r16
    1c36:	b9 01       	movw	r22, r18
    1c38:	a8 01       	movw	r20, r16
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	8f 58       	subi	r24, 0x8F	; 143
    1c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c40:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1c44:	00 e0       	ldi	r16, 0x00	; 0
    1c46:	10 e0       	ldi	r17, 0x00	; 0
    1c48:	98 01       	movw	r18, r16
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	60 e8       	ldi	r22, 0x80	; 128
    1c50:	7f e3       	ldi	r23, 0x3F	; 63
    1c52:	ce 01       	movw	r24, r28
    1c54:	87 58       	subi	r24, 0x87	; 135
    1c56:	9f 4f       	sbci	r25, 0xFF	; 255
    1c58:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1c5c:	cb 57       	subi	r28, 0x7B	; 123
    1c5e:	df 4f       	sbci	r29, 0xFF	; 255
    1c60:	79 82       	std	Y+1, r7	; 0x01
    1c62:	68 82       	st	Y, r6
    1c64:	c5 58       	subi	r28, 0x85	; 133
    1c66:	d0 40       	sbci	r29, 0x00	; 0
    1c68:	c9 57       	subi	r28, 0x79	; 121
    1c6a:	df 4f       	sbci	r29, 0xFF	; 255
    1c6c:	99 82       	std	Y+1, r9	; 0x01
    1c6e:	88 82       	st	Y, r8
    1c70:	c7 58       	subi	r28, 0x87	; 135
    1c72:	d0 40       	sbci	r29, 0x00	; 0
    1c74:	cf 57       	subi	r28, 0x7F	; 127
    1c76:	df 4f       	sbci	r29, 0xFF	; 255
    1c78:	b9 82       	std	Y+1, r11	; 0x01
    1c7a:	a8 82       	st	Y, r10
    1c7c:	c1 58       	subi	r28, 0x81	; 129
    1c7e:	d0 40       	sbci	r29, 0x00	; 0
    1c80:	cd 57       	subi	r28, 0x7D	; 125
    1c82:	df 4f       	sbci	r29, 0xFF	; 255
    1c84:	d9 82       	std	Y+1, r13	; 0x01
    1c86:	c8 82       	st	Y, r12
    1c88:	c3 58       	subi	r28, 0x83	; 131
    1c8a:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swa_matrix),QB_SIZE2);	
    1c8c:	9e 01       	movw	r18, r28
    1c8e:	2f 57       	subi	r18, 0x7F	; 127
    1c90:	3f 4f       	sbci	r19, 0xFF	; 255
    1c92:	ae 01       	movw	r20, r28
    1c94:	4b 57       	subi	r20, 0x7B	; 123
    1c96:	5f 4f       	sbci	r21, 0xFF	; 255
    1c98:	62 e0       	ldi	r22, 0x02	; 2
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	c7 01       	movw	r24, r14
    1c9e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    1ca2:	ae 01       	movw	r20, r28
    1ca4:	4f 5f       	subi	r20, 0xFF	; 255
    1ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca8:	bc 01       	movw	r22, r24
    1caa:	c7 01       	movw	r24, r14
    1cac:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1cb0:	42 e0       	ldi	r20, 0x02	; 2
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    1cbc:	c8 57       	subi	r28, 0x78	; 120
    1cbe:	df 4f       	sbci	r29, 0xFF	; 255
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	cf 90       	pop	r12
    1cda:	bf 90       	pop	r11
    1cdc:	af 90       	pop	r10
    1cde:	9f 90       	pop	r9
    1ce0:	8f 90       	pop	r8
    1ce2:	7f 90       	pop	r7
    1ce4:	6f 90       	pop	r6
    1ce6:	08 95       	ret

00001ce8 <_ZN5Gates3INCEiiii>:
int * Gates::INC(int theta1, int phi1, int theta2,int phi2){
    1ce8:	6f 92       	push	r6
    1cea:	7f 92       	push	r7
    1cec:	8f 92       	push	r8
    1cee:	9f 92       	push	r9
    1cf0:	af 92       	push	r10
    1cf2:	bf 92       	push	r11
    1cf4:	cf 92       	push	r12
    1cf6:	df 92       	push	r13
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	c8 58       	subi	r28, 0x88	; 136
    1d0a:	d1 09       	sbc	r29, r1
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	7c 01       	movw	r14, r24
    1d18:	3b 01       	movw	r6, r22
    1d1a:	5a 01       	movw	r10, r20
    1d1c:	49 01       	movw	r8, r18
    1d1e:	68 01       	movw	r12, r16
	Complex inc_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)}};
    1d20:	00 e0       	ldi	r16, 0x00	; 0
    1d22:	10 e0       	ldi	r17, 0x00	; 0
    1d24:	98 01       	movw	r18, r16
    1d26:	b9 01       	movw	r22, r18
    1d28:	a8 01       	movw	r20, r16
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1d32:	00 e0       	ldi	r16, 0x00	; 0
    1d34:	10 e0       	ldi	r17, 0x00	; 0
    1d36:	98 01       	movw	r18, r16
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	60 e8       	ldi	r22, 0x80	; 128
    1d3e:	7f e3       	ldi	r23, 0x3F	; 63
    1d40:	ce 01       	movw	r24, r28
    1d42:	09 96       	adiw	r24, 0x09	; 9
    1d44:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1d48:	00 e0       	ldi	r16, 0x00	; 0
    1d4a:	10 e0       	ldi	r17, 0x00	; 0
    1d4c:	98 01       	movw	r18, r16
    1d4e:	b9 01       	movw	r22, r18
    1d50:	a8 01       	movw	r20, r16
    1d52:	ce 01       	movw	r24, r28
    1d54:	41 96       	adiw	r24, 0x11	; 17
    1d56:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1d5a:	00 e0       	ldi	r16, 0x00	; 0
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
    1d5e:	98 01       	movw	r18, r16
    1d60:	b9 01       	movw	r22, r18
    1d62:	a8 01       	movw	r20, r16
    1d64:	ce 01       	movw	r24, r28
    1d66:	49 96       	adiw	r24, 0x19	; 25
    1d68:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1d6c:	00 e0       	ldi	r16, 0x00	; 0
    1d6e:	10 e0       	ldi	r17, 0x00	; 0
    1d70:	98 01       	movw	r18, r16
    1d72:	b9 01       	movw	r22, r18
    1d74:	a8 01       	movw	r20, r16
    1d76:	ce 01       	movw	r24, r28
    1d78:	81 96       	adiw	r24, 0x21	; 33
    1d7a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1d7e:	00 e0       	ldi	r16, 0x00	; 0
    1d80:	10 e0       	ldi	r17, 0x00	; 0
    1d82:	98 01       	movw	r18, r16
    1d84:	b9 01       	movw	r22, r18
    1d86:	a8 01       	movw	r20, r16
    1d88:	ce 01       	movw	r24, r28
    1d8a:	89 96       	adiw	r24, 0x29	; 41
    1d8c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1d90:	00 e0       	ldi	r16, 0x00	; 0
    1d92:	10 e0       	ldi	r17, 0x00	; 0
    1d94:	98 01       	movw	r18, r16
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	60 e8       	ldi	r22, 0x80	; 128
    1d9c:	7f e3       	ldi	r23, 0x3F	; 63
    1d9e:	ce 01       	movw	r24, r28
    1da0:	c1 96       	adiw	r24, 0x31	; 49
    1da2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1da6:	00 e0       	ldi	r16, 0x00	; 0
    1da8:	10 e0       	ldi	r17, 0x00	; 0
    1daa:	98 01       	movw	r18, r16
    1dac:	b9 01       	movw	r22, r18
    1dae:	a8 01       	movw	r20, r16
    1db0:	ce 01       	movw	r24, r28
    1db2:	c9 96       	adiw	r24, 0x39	; 57
    1db4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1db8:	00 e0       	ldi	r16, 0x00	; 0
    1dba:	10 e0       	ldi	r17, 0x00	; 0
    1dbc:	98 01       	movw	r18, r16
    1dbe:	b9 01       	movw	r22, r18
    1dc0:	a8 01       	movw	r20, r16
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	8f 5b       	subi	r24, 0xBF	; 191
    1dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1dcc:	00 e0       	ldi	r16, 0x00	; 0
    1dce:	10 e0       	ldi	r17, 0x00	; 0
    1dd0:	98 01       	movw	r18, r16
    1dd2:	b9 01       	movw	r22, r18
    1dd4:	a8 01       	movw	r20, r16
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	87 5b       	subi	r24, 0xB7	; 183
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1de0:	00 e0       	ldi	r16, 0x00	; 0
    1de2:	10 e0       	ldi	r17, 0x00	; 0
    1de4:	98 01       	movw	r18, r16
    1de6:	b9 01       	movw	r22, r18
    1de8:	a8 01       	movw	r20, r16
    1dea:	ce 01       	movw	r24, r28
    1dec:	8f 5a       	subi	r24, 0xAF	; 175
    1dee:	9f 4f       	sbci	r25, 0xFF	; 255
    1df0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1df4:	00 e0       	ldi	r16, 0x00	; 0
    1df6:	10 e0       	ldi	r17, 0x00	; 0
    1df8:	98 01       	movw	r18, r16
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	60 e8       	ldi	r22, 0x80	; 128
    1e00:	7f e3       	ldi	r23, 0x3F	; 63
    1e02:	ce 01       	movw	r24, r28
    1e04:	87 5a       	subi	r24, 0xA7	; 167
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1e0c:	00 e0       	ldi	r16, 0x00	; 0
    1e0e:	10 e0       	ldi	r17, 0x00	; 0
    1e10:	98 01       	movw	r18, r16
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	60 e8       	ldi	r22, 0x80	; 128
    1e18:	7f e3       	ldi	r23, 0x3F	; 63
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	8f 59       	subi	r24, 0x9F	; 159
    1e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e20:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1e24:	00 e0       	ldi	r16, 0x00	; 0
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	98 01       	movw	r18, r16
    1e2a:	b9 01       	movw	r22, r18
    1e2c:	a8 01       	movw	r20, r16
    1e2e:	ce 01       	movw	r24, r28
    1e30:	87 59       	subi	r24, 0x97	; 151
    1e32:	9f 4f       	sbci	r25, 0xFF	; 255
    1e34:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1e38:	00 e0       	ldi	r16, 0x00	; 0
    1e3a:	10 e0       	ldi	r17, 0x00	; 0
    1e3c:	98 01       	movw	r18, r16
    1e3e:	b9 01       	movw	r22, r18
    1e40:	a8 01       	movw	r20, r16
    1e42:	ce 01       	movw	r24, r28
    1e44:	8f 58       	subi	r24, 0x8F	; 143
    1e46:	9f 4f       	sbci	r25, 0xFF	; 255
    1e48:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1e4c:	00 e0       	ldi	r16, 0x00	; 0
    1e4e:	10 e0       	ldi	r17, 0x00	; 0
    1e50:	98 01       	movw	r18, r16
    1e52:	b9 01       	movw	r22, r18
    1e54:	a8 01       	movw	r20, r16
    1e56:	ce 01       	movw	r24, r28
    1e58:	87 58       	subi	r24, 0x87	; 135
    1e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1e60:	cb 57       	subi	r28, 0x7B	; 123
    1e62:	df 4f       	sbci	r29, 0xFF	; 255
    1e64:	79 82       	std	Y+1, r7	; 0x01
    1e66:	68 82       	st	Y, r6
    1e68:	c5 58       	subi	r28, 0x85	; 133
    1e6a:	d0 40       	sbci	r29, 0x00	; 0
    1e6c:	c9 57       	subi	r28, 0x79	; 121
    1e6e:	df 4f       	sbci	r29, 0xFF	; 255
    1e70:	99 82       	std	Y+1, r9	; 0x01
    1e72:	88 82       	st	Y, r8
    1e74:	c7 58       	subi	r28, 0x87	; 135
    1e76:	d0 40       	sbci	r29, 0x00	; 0
    1e78:	cf 57       	subi	r28, 0x7F	; 127
    1e7a:	df 4f       	sbci	r29, 0xFF	; 255
    1e7c:	b9 82       	std	Y+1, r11	; 0x01
    1e7e:	a8 82       	st	Y, r10
    1e80:	c1 58       	subi	r28, 0x81	; 129
    1e82:	d0 40       	sbci	r29, 0x00	; 0
    1e84:	cd 57       	subi	r28, 0x7D	; 125
    1e86:	df 4f       	sbci	r29, 0xFF	; 255
    1e88:	d9 82       	std	Y+1, r13	; 0x01
    1e8a:	c8 82       	st	Y, r12
    1e8c:	c3 58       	subi	r28, 0x83	; 131
    1e8e:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),inc_matrix),QB_SIZE2);
    1e90:	9e 01       	movw	r18, r28
    1e92:	2f 57       	subi	r18, 0x7F	; 127
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	ae 01       	movw	r20, r28
    1e98:	4b 57       	subi	r20, 0x7B	; 123
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	62 e0       	ldi	r22, 0x02	; 2
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	c7 01       	movw	r24, r14
    1ea2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    1ea6:	ae 01       	movw	r20, r28
    1ea8:	4f 5f       	subi	r20, 0xFF	; 255
    1eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    1eac:	bc 01       	movw	r22, r24
    1eae:	c7 01       	movw	r24, r14
    1eb0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1eb4:	42 e0       	ldi	r20, 0x02	; 2
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	bc 01       	movw	r22, r24
    1eba:	c7 01       	movw	r24, r14
    1ebc:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    1ec0:	c8 57       	subi	r28, 0x78	; 120
    1ec2:	df 4f       	sbci	r29, 0xFF	; 255
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	ff 90       	pop	r15
    1ed8:	ef 90       	pop	r14
    1eda:	df 90       	pop	r13
    1edc:	cf 90       	pop	r12
    1ede:	bf 90       	pop	r11
    1ee0:	af 90       	pop	r10
    1ee2:	9f 90       	pop	r9
    1ee4:	8f 90       	pop	r8
    1ee6:	7f 90       	pop	r7
    1ee8:	6f 90       	pop	r6
    1eea:	08 95       	ret

00001eec <_ZN5Gates3DECEiiii>:
int * Gates::DEC(int theta1, int phi1, int theta2,int phi2){
    1eec:	6f 92       	push	r6
    1eee:	7f 92       	push	r7
    1ef0:	8f 92       	push	r8
    1ef2:	9f 92       	push	r9
    1ef4:	af 92       	push	r10
    1ef6:	bf 92       	push	r11
    1ef8:	cf 92       	push	r12
    1efa:	df 92       	push	r13
    1efc:	ef 92       	push	r14
    1efe:	ff 92       	push	r15
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	c8 58       	subi	r28, 0x88	; 136
    1f0e:	d1 09       	sbc	r29, r1
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	7c 01       	movw	r14, r24
    1f1c:	3b 01       	movw	r6, r22
    1f1e:	5a 01       	movw	r10, r20
    1f20:	49 01       	movw	r8, r18
    1f22:	68 01       	movw	r12, r16
	Complex dec_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1f24:	00 e0       	ldi	r16, 0x00	; 0
    1f26:	10 e0       	ldi	r17, 0x00	; 0
    1f28:	98 01       	movw	r18, r16
    1f2a:	b9 01       	movw	r22, r18
    1f2c:	a8 01       	movw	r20, r16
    1f2e:	ce 01       	movw	r24, r28
    1f30:	01 96       	adiw	r24, 0x01	; 1
    1f32:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1f36:	00 e0       	ldi	r16, 0x00	; 0
    1f38:	10 e0       	ldi	r17, 0x00	; 0
    1f3a:	98 01       	movw	r18, r16
    1f3c:	b9 01       	movw	r22, r18
    1f3e:	a8 01       	movw	r20, r16
    1f40:	ce 01       	movw	r24, r28
    1f42:	09 96       	adiw	r24, 0x09	; 9
    1f44:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	10 e0       	ldi	r17, 0x00	; 0
    1f4c:	98 01       	movw	r18, r16
    1f4e:	b9 01       	movw	r22, r18
    1f50:	a8 01       	movw	r20, r16
    1f52:	ce 01       	movw	r24, r28
    1f54:	41 96       	adiw	r24, 0x11	; 17
    1f56:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1f5a:	00 e0       	ldi	r16, 0x00	; 0
    1f5c:	10 e0       	ldi	r17, 0x00	; 0
    1f5e:	98 01       	movw	r18, r16
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	50 e0       	ldi	r21, 0x00	; 0
    1f64:	60 e8       	ldi	r22, 0x80	; 128
    1f66:	7f e3       	ldi	r23, 0x3F	; 63
    1f68:	ce 01       	movw	r24, r28
    1f6a:	49 96       	adiw	r24, 0x19	; 25
    1f6c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1f70:	00 e0       	ldi	r16, 0x00	; 0
    1f72:	10 e0       	ldi	r17, 0x00	; 0
    1f74:	98 01       	movw	r18, r16
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	50 e0       	ldi	r21, 0x00	; 0
    1f7a:	60 e8       	ldi	r22, 0x80	; 128
    1f7c:	7f e3       	ldi	r23, 0x3F	; 63
    1f7e:	ce 01       	movw	r24, r28
    1f80:	81 96       	adiw	r24, 0x21	; 33
    1f82:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1f86:	00 e0       	ldi	r16, 0x00	; 0
    1f88:	10 e0       	ldi	r17, 0x00	; 0
    1f8a:	98 01       	movw	r18, r16
    1f8c:	b9 01       	movw	r22, r18
    1f8e:	a8 01       	movw	r20, r16
    1f90:	ce 01       	movw	r24, r28
    1f92:	89 96       	adiw	r24, 0x29	; 41
    1f94:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1f98:	00 e0       	ldi	r16, 0x00	; 0
    1f9a:	10 e0       	ldi	r17, 0x00	; 0
    1f9c:	98 01       	movw	r18, r16
    1f9e:	b9 01       	movw	r22, r18
    1fa0:	a8 01       	movw	r20, r16
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	c1 96       	adiw	r24, 0x31	; 49
    1fa6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1faa:	00 e0       	ldi	r16, 0x00	; 0
    1fac:	10 e0       	ldi	r17, 0x00	; 0
    1fae:	98 01       	movw	r18, r16
    1fb0:	b9 01       	movw	r22, r18
    1fb2:	a8 01       	movw	r20, r16
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	c9 96       	adiw	r24, 0x39	; 57
    1fb8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1fbc:	00 e0       	ldi	r16, 0x00	; 0
    1fbe:	10 e0       	ldi	r17, 0x00	; 0
    1fc0:	98 01       	movw	r18, r16
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	a8 01       	movw	r20, r16
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	8f 5b       	subi	r24, 0xBF	; 191
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1fd0:	00 e0       	ldi	r16, 0x00	; 0
    1fd2:	10 e0       	ldi	r17, 0x00	; 0
    1fd4:	98 01       	movw	r18, r16
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	60 e8       	ldi	r22, 0x80	; 128
    1fdc:	7f e3       	ldi	r23, 0x3F	; 63
    1fde:	ce 01       	movw	r24, r28
    1fe0:	87 5b       	subi	r24, 0xB7	; 183
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1fe8:	00 e0       	ldi	r16, 0x00	; 0
    1fea:	10 e0       	ldi	r17, 0x00	; 0
    1fec:	98 01       	movw	r18, r16
    1fee:	b9 01       	movw	r22, r18
    1ff0:	a8 01       	movw	r20, r16
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	8f 5a       	subi	r24, 0xAF	; 175
    1ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    1ffc:	00 e0       	ldi	r16, 0x00	; 0
    1ffe:	10 e0       	ldi	r17, 0x00	; 0
    2000:	98 01       	movw	r18, r16
    2002:	b9 01       	movw	r22, r18
    2004:	a8 01       	movw	r20, r16
    2006:	ce 01       	movw	r24, r28
    2008:	87 5a       	subi	r24, 0xA7	; 167
    200a:	9f 4f       	sbci	r25, 0xFF	; 255
    200c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2010:	00 e0       	ldi	r16, 0x00	; 0
    2012:	10 e0       	ldi	r17, 0x00	; 0
    2014:	98 01       	movw	r18, r16
    2016:	b9 01       	movw	r22, r18
    2018:	a8 01       	movw	r20, r16
    201a:	ce 01       	movw	r24, r28
    201c:	8f 59       	subi	r24, 0x9F	; 159
    201e:	9f 4f       	sbci	r25, 0xFF	; 255
    2020:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2024:	00 e0       	ldi	r16, 0x00	; 0
    2026:	10 e0       	ldi	r17, 0x00	; 0
    2028:	98 01       	movw	r18, r16
    202a:	b9 01       	movw	r22, r18
    202c:	a8 01       	movw	r20, r16
    202e:	ce 01       	movw	r24, r28
    2030:	87 59       	subi	r24, 0x97	; 151
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2038:	00 e0       	ldi	r16, 0x00	; 0
    203a:	10 e0       	ldi	r17, 0x00	; 0
    203c:	98 01       	movw	r18, r16
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	60 e8       	ldi	r22, 0x80	; 128
    2044:	7f e3       	ldi	r23, 0x3F	; 63
    2046:	ce 01       	movw	r24, r28
    2048:	8f 58       	subi	r24, 0x8F	; 143
    204a:	9f 4f       	sbci	r25, 0xFF	; 255
    204c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2050:	00 e0       	ldi	r16, 0x00	; 0
    2052:	10 e0       	ldi	r17, 0x00	; 0
    2054:	98 01       	movw	r18, r16
    2056:	b9 01       	movw	r22, r18
    2058:	a8 01       	movw	r20, r16
    205a:	ce 01       	movw	r24, r28
    205c:	87 58       	subi	r24, 0x87	; 135
    205e:	9f 4f       	sbci	r25, 0xFF	; 255
    2060:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2064:	cb 57       	subi	r28, 0x7B	; 123
    2066:	df 4f       	sbci	r29, 0xFF	; 255
    2068:	79 82       	std	Y+1, r7	; 0x01
    206a:	68 82       	st	Y, r6
    206c:	c5 58       	subi	r28, 0x85	; 133
    206e:	d0 40       	sbci	r29, 0x00	; 0
    2070:	c9 57       	subi	r28, 0x79	; 121
    2072:	df 4f       	sbci	r29, 0xFF	; 255
    2074:	99 82       	std	Y+1, r9	; 0x01
    2076:	88 82       	st	Y, r8
    2078:	c7 58       	subi	r28, 0x87	; 135
    207a:	d0 40       	sbci	r29, 0x00	; 0
    207c:	cf 57       	subi	r28, 0x7F	; 127
    207e:	df 4f       	sbci	r29, 0xFF	; 255
    2080:	b9 82       	std	Y+1, r11	; 0x01
    2082:	a8 82       	st	Y, r10
    2084:	c1 58       	subi	r28, 0x81	; 129
    2086:	d0 40       	sbci	r29, 0x00	; 0
    2088:	cd 57       	subi	r28, 0x7D	; 125
    208a:	df 4f       	sbci	r29, 0xFF	; 255
    208c:	d9 82       	std	Y+1, r13	; 0x01
    208e:	c8 82       	st	Y, r12
    2090:	c3 58       	subi	r28, 0x83	; 131
    2092:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    2094:	9e 01       	movw	r18, r28
    2096:	2f 57       	subi	r18, 0x7F	; 127
    2098:	3f 4f       	sbci	r19, 0xFF	; 255
    209a:	ae 01       	movw	r20, r28
    209c:	4b 57       	subi	r20, 0x7B	; 123
    209e:	5f 4f       	sbci	r21, 0xFF	; 255
    20a0:	62 e0       	ldi	r22, 0x02	; 2
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	c7 01       	movw	r24, r14
    20a6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    20aa:	ae 01       	movw	r20, r28
    20ac:	4f 5f       	subi	r20, 0xFF	; 255
    20ae:	5f 4f       	sbci	r21, 0xFF	; 255
    20b0:	bc 01       	movw	r22, r24
    20b2:	c7 01       	movw	r24, r14
    20b4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    20b8:	42 e0       	ldi	r20, 0x02	; 2
    20ba:	50 e0       	ldi	r21, 0x00	; 0
    20bc:	bc 01       	movw	r22, r24
    20be:	c7 01       	movw	r24, r14
    20c0:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    20c4:	c8 57       	subi	r28, 0x78	; 120
    20c6:	df 4f       	sbci	r29, 0xFF	; 255
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	1f 91       	pop	r17
    20d8:	0f 91       	pop	r16
    20da:	ff 90       	pop	r15
    20dc:	ef 90       	pop	r14
    20de:	df 90       	pop	r13
    20e0:	cf 90       	pop	r12
    20e2:	bf 90       	pop	r11
    20e4:	af 90       	pop	r10
    20e6:	9f 90       	pop	r9
    20e8:	8f 90       	pop	r8
    20ea:	7f 90       	pop	r7
    20ec:	6f 90       	pop	r6
    20ee:	08 95       	ret

000020f0 <_ZN5Gates3SWQEiiii>:
int * Gates::SWQ(int theta1, int phi1, int theta2,int phi2){
    20f0:	6f 92       	push	r6
    20f2:	7f 92       	push	r7
    20f4:	8f 92       	push	r8
    20f6:	9f 92       	push	r9
    20f8:	af 92       	push	r10
    20fa:	bf 92       	push	r11
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	c8 58       	subi	r28, 0x88	; 136
    2112:	d1 09       	sbc	r29, r1
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	7c 01       	movw	r14, r24
    2120:	3b 01       	movw	r6, r22
    2122:	5a 01       	movw	r10, r20
    2124:	49 01       	movw	r8, r18
    2126:	68 01       	movw	r12, r16
	Complex swq_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),   Complex(0,0),   Complex(0,0)},
	 												     {Complex(0,0),Complex(.5,.5), Complex(.5,-.5),Complex(0,0)},
													     {Complex(0,0),Complex(.5,-.5),Complex(.5,.5), Complex(0,0)},
													     {Complex(0,0),Complex(0,0),   Complex(0,0),   Complex(1,0)}};
    2128:	00 e0       	ldi	r16, 0x00	; 0
    212a:	10 e0       	ldi	r17, 0x00	; 0
    212c:	98 01       	movw	r18, r16
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	60 e8       	ldi	r22, 0x80	; 128
    2134:	7f e3       	ldi	r23, 0x3F	; 63
    2136:	ce 01       	movw	r24, r28
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    213e:	00 e0       	ldi	r16, 0x00	; 0
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	98 01       	movw	r18, r16
    2144:	b9 01       	movw	r22, r18
    2146:	a8 01       	movw	r20, r16
    2148:	ce 01       	movw	r24, r28
    214a:	09 96       	adiw	r24, 0x09	; 9
    214c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2150:	00 e0       	ldi	r16, 0x00	; 0
    2152:	10 e0       	ldi	r17, 0x00	; 0
    2154:	98 01       	movw	r18, r16
    2156:	b9 01       	movw	r22, r18
    2158:	a8 01       	movw	r20, r16
    215a:	ce 01       	movw	r24, r28
    215c:	41 96       	adiw	r24, 0x11	; 17
    215e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2162:	00 e0       	ldi	r16, 0x00	; 0
    2164:	10 e0       	ldi	r17, 0x00	; 0
    2166:	98 01       	movw	r18, r16
    2168:	b9 01       	movw	r22, r18
    216a:	a8 01       	movw	r20, r16
    216c:	ce 01       	movw	r24, r28
    216e:	49 96       	adiw	r24, 0x19	; 25
    2170:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2174:	00 e0       	ldi	r16, 0x00	; 0
    2176:	10 e0       	ldi	r17, 0x00	; 0
    2178:	98 01       	movw	r18, r16
    217a:	b9 01       	movw	r22, r18
    217c:	a8 01       	movw	r20, r16
    217e:	ce 01       	movw	r24, r28
    2180:	81 96       	adiw	r24, 0x21	; 33
    2182:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2186:	00 e0       	ldi	r16, 0x00	; 0
    2188:	10 e0       	ldi	r17, 0x00	; 0
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	3f e3       	ldi	r19, 0x3F	; 63
    218e:	b9 01       	movw	r22, r18
    2190:	a8 01       	movw	r20, r16
    2192:	ce 01       	movw	r24, r28
    2194:	89 96       	adiw	r24, 0x29	; 41
    2196:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    219a:	00 e0       	ldi	r16, 0x00	; 0
    219c:	10 e0       	ldi	r17, 0x00	; 0
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f eb       	ldi	r19, 0xBF	; 191
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	60 e0       	ldi	r22, 0x00	; 0
    21a8:	7f e3       	ldi	r23, 0x3F	; 63
    21aa:	ce 01       	movw	r24, r28
    21ac:	c1 96       	adiw	r24, 0x31	; 49
    21ae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    21b2:	00 e0       	ldi	r16, 0x00	; 0
    21b4:	10 e0       	ldi	r17, 0x00	; 0
    21b6:	98 01       	movw	r18, r16
    21b8:	b9 01       	movw	r22, r18
    21ba:	a8 01       	movw	r20, r16
    21bc:	ce 01       	movw	r24, r28
    21be:	c9 96       	adiw	r24, 0x39	; 57
    21c0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    21c4:	00 e0       	ldi	r16, 0x00	; 0
    21c6:	10 e0       	ldi	r17, 0x00	; 0
    21c8:	98 01       	movw	r18, r16
    21ca:	b9 01       	movw	r22, r18
    21cc:	a8 01       	movw	r20, r16
    21ce:	ce 01       	movw	r24, r28
    21d0:	8f 5b       	subi	r24, 0xBF	; 191
    21d2:	9f 4f       	sbci	r25, 0xFF	; 255
    21d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    21d8:	00 e0       	ldi	r16, 0x00	; 0
    21da:	10 e0       	ldi	r17, 0x00	; 0
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f eb       	ldi	r19, 0xBF	; 191
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	7f e3       	ldi	r23, 0x3F	; 63
    21e8:	ce 01       	movw	r24, r28
    21ea:	87 5b       	subi	r24, 0xB7	; 183
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    21f2:	00 e0       	ldi	r16, 0x00	; 0
    21f4:	10 e0       	ldi	r17, 0x00	; 0
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f e3       	ldi	r19, 0x3F	; 63
    21fa:	b9 01       	movw	r22, r18
    21fc:	a8 01       	movw	r20, r16
    21fe:	ce 01       	movw	r24, r28
    2200:	8f 5a       	subi	r24, 0xAF	; 175
    2202:	9f 4f       	sbci	r25, 0xFF	; 255
    2204:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2208:	00 e0       	ldi	r16, 0x00	; 0
    220a:	10 e0       	ldi	r17, 0x00	; 0
    220c:	98 01       	movw	r18, r16
    220e:	b9 01       	movw	r22, r18
    2210:	a8 01       	movw	r20, r16
    2212:	ce 01       	movw	r24, r28
    2214:	87 5a       	subi	r24, 0xA7	; 167
    2216:	9f 4f       	sbci	r25, 0xFF	; 255
    2218:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    221c:	00 e0       	ldi	r16, 0x00	; 0
    221e:	10 e0       	ldi	r17, 0x00	; 0
    2220:	98 01       	movw	r18, r16
    2222:	b9 01       	movw	r22, r18
    2224:	a8 01       	movw	r20, r16
    2226:	ce 01       	movw	r24, r28
    2228:	8f 59       	subi	r24, 0x9F	; 159
    222a:	9f 4f       	sbci	r25, 0xFF	; 255
    222c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2230:	00 e0       	ldi	r16, 0x00	; 0
    2232:	10 e0       	ldi	r17, 0x00	; 0
    2234:	98 01       	movw	r18, r16
    2236:	b9 01       	movw	r22, r18
    2238:	a8 01       	movw	r20, r16
    223a:	ce 01       	movw	r24, r28
    223c:	87 59       	subi	r24, 0x97	; 151
    223e:	9f 4f       	sbci	r25, 0xFF	; 255
    2240:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2244:	00 e0       	ldi	r16, 0x00	; 0
    2246:	10 e0       	ldi	r17, 0x00	; 0
    2248:	98 01       	movw	r18, r16
    224a:	b9 01       	movw	r22, r18
    224c:	a8 01       	movw	r20, r16
    224e:	ce 01       	movw	r24, r28
    2250:	8f 58       	subi	r24, 0x8F	; 143
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2258:	00 e0       	ldi	r16, 0x00	; 0
    225a:	10 e0       	ldi	r17, 0x00	; 0
    225c:	98 01       	movw	r18, r16
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	60 e8       	ldi	r22, 0x80	; 128
    2264:	7f e3       	ldi	r23, 0x3F	; 63
    2266:	ce 01       	movw	r24, r28
    2268:	87 58       	subi	r24, 0x87	; 135
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2270:	cb 57       	subi	r28, 0x7B	; 123
    2272:	df 4f       	sbci	r29, 0xFF	; 255
    2274:	79 82       	std	Y+1, r7	; 0x01
    2276:	68 82       	st	Y, r6
    2278:	c5 58       	subi	r28, 0x85	; 133
    227a:	d0 40       	sbci	r29, 0x00	; 0
    227c:	c9 57       	subi	r28, 0x79	; 121
    227e:	df 4f       	sbci	r29, 0xFF	; 255
    2280:	99 82       	std	Y+1, r9	; 0x01
    2282:	88 82       	st	Y, r8
    2284:	c7 58       	subi	r28, 0x87	; 135
    2286:	d0 40       	sbci	r29, 0x00	; 0
    2288:	cf 57       	subi	r28, 0x7F	; 127
    228a:	df 4f       	sbci	r29, 0xFF	; 255
    228c:	b9 82       	std	Y+1, r11	; 0x01
    228e:	a8 82       	st	Y, r10
    2290:	c1 58       	subi	r28, 0x81	; 129
    2292:	d0 40       	sbci	r29, 0x00	; 0
    2294:	cd 57       	subi	r28, 0x7D	; 125
    2296:	df 4f       	sbci	r29, 0xFF	; 255
    2298:	d9 82       	std	Y+1, r13	; 0x01
    229a:	c8 82       	st	Y, r12
    229c:	c3 58       	subi	r28, 0x83	; 131
    229e:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swq_matrix),QB_SIZE2);
    22a0:	9e 01       	movw	r18, r28
    22a2:	2f 57       	subi	r18, 0x7F	; 127
    22a4:	3f 4f       	sbci	r19, 0xFF	; 255
    22a6:	ae 01       	movw	r20, r28
    22a8:	4b 57       	subi	r20, 0x7B	; 123
    22aa:	5f 4f       	sbci	r21, 0xFF	; 255
    22ac:	62 e0       	ldi	r22, 0x02	; 2
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	c7 01       	movw	r24, r14
    22b2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    22b6:	ae 01       	movw	r20, r28
    22b8:	4f 5f       	subi	r20, 0xFF	; 255
    22ba:	5f 4f       	sbci	r21, 0xFF	; 255
    22bc:	bc 01       	movw	r22, r24
    22be:	c7 01       	movw	r24, r14
    22c0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    22c4:	42 e0       	ldi	r20, 0x02	; 2
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	bc 01       	movw	r22, r24
    22ca:	c7 01       	movw	r24, r14
    22cc:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    22d0:	c8 57       	subi	r28, 0x78	; 120
    22d2:	df 4f       	sbci	r29, 0xFF	; 255
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	ff 90       	pop	r15
    22e8:	ef 90       	pop	r14
    22ea:	df 90       	pop	r13
    22ec:	cf 90       	pop	r12
    22ee:	bf 90       	pop	r11
    22f0:	af 90       	pop	r10
    22f2:	9f 90       	pop	r9
    22f4:	8f 90       	pop	r8
    22f6:	7f 90       	pop	r7
    22f8:	6f 90       	pop	r6
    22fa:	08 95       	ret

000022fc <_ZN5Gates3SWIEiiii>:
int * Gates::SWI(int theta1, int phi1, int theta2,int phi2){
    22fc:	6f 92       	push	r6
    22fe:	7f 92       	push	r7
    2300:	8f 92       	push	r8
    2302:	9f 92       	push	r9
    2304:	af 92       	push	r10
    2306:	bf 92       	push	r11
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	c8 58       	subi	r28, 0x88	; 136
    231e:	d1 09       	sbc	r29, r1
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	7c 01       	movw	r14, r24
    232c:	3b 01       	movw	r6, r22
    232e:	5a 01       	movw	r10, r20
    2330:	49 01       	movw	r8, r18
    2332:	68 01       	movw	r12, r16
	Complex dec_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,1),Complex(0,0)},
 													     {Complex(0,0),Complex(0,1),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    2334:	00 e0       	ldi	r16, 0x00	; 0
    2336:	10 e0       	ldi	r17, 0x00	; 0
    2338:	98 01       	movw	r18, r16
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	60 e8       	ldi	r22, 0x80	; 128
    2340:	7f e3       	ldi	r23, 0x3F	; 63
    2342:	ce 01       	movw	r24, r28
    2344:	01 96       	adiw	r24, 0x01	; 1
    2346:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    234a:	00 e0       	ldi	r16, 0x00	; 0
    234c:	10 e0       	ldi	r17, 0x00	; 0
    234e:	98 01       	movw	r18, r16
    2350:	b9 01       	movw	r22, r18
    2352:	a8 01       	movw	r20, r16
    2354:	ce 01       	movw	r24, r28
    2356:	09 96       	adiw	r24, 0x09	; 9
    2358:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    235c:	00 e0       	ldi	r16, 0x00	; 0
    235e:	10 e0       	ldi	r17, 0x00	; 0
    2360:	98 01       	movw	r18, r16
    2362:	b9 01       	movw	r22, r18
    2364:	a8 01       	movw	r20, r16
    2366:	ce 01       	movw	r24, r28
    2368:	41 96       	adiw	r24, 0x11	; 17
    236a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    236e:	00 e0       	ldi	r16, 0x00	; 0
    2370:	10 e0       	ldi	r17, 0x00	; 0
    2372:	98 01       	movw	r18, r16
    2374:	b9 01       	movw	r22, r18
    2376:	a8 01       	movw	r20, r16
    2378:	ce 01       	movw	r24, r28
    237a:	49 96       	adiw	r24, 0x19	; 25
    237c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2380:	00 e0       	ldi	r16, 0x00	; 0
    2382:	10 e0       	ldi	r17, 0x00	; 0
    2384:	98 01       	movw	r18, r16
    2386:	b9 01       	movw	r22, r18
    2388:	a8 01       	movw	r20, r16
    238a:	ce 01       	movw	r24, r28
    238c:	81 96       	adiw	r24, 0x21	; 33
    238e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2392:	00 e0       	ldi	r16, 0x00	; 0
    2394:	10 e0       	ldi	r17, 0x00	; 0
    2396:	98 01       	movw	r18, r16
    2398:	b9 01       	movw	r22, r18
    239a:	a8 01       	movw	r20, r16
    239c:	ce 01       	movw	r24, r28
    239e:	89 96       	adiw	r24, 0x29	; 41
    23a0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    23a4:	00 e0       	ldi	r16, 0x00	; 0
    23a6:	10 e0       	ldi	r17, 0x00	; 0
    23a8:	20 e8       	ldi	r18, 0x80	; 128
    23aa:	3f e3       	ldi	r19, 0x3F	; 63
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	50 e0       	ldi	r21, 0x00	; 0
    23b0:	ba 01       	movw	r22, r20
    23b2:	ce 01       	movw	r24, r28
    23b4:	c1 96       	adiw	r24, 0x31	; 49
    23b6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    23ba:	00 e0       	ldi	r16, 0x00	; 0
    23bc:	10 e0       	ldi	r17, 0x00	; 0
    23be:	98 01       	movw	r18, r16
    23c0:	b9 01       	movw	r22, r18
    23c2:	a8 01       	movw	r20, r16
    23c4:	ce 01       	movw	r24, r28
    23c6:	c9 96       	adiw	r24, 0x39	; 57
    23c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    23cc:	00 e0       	ldi	r16, 0x00	; 0
    23ce:	10 e0       	ldi	r17, 0x00	; 0
    23d0:	98 01       	movw	r18, r16
    23d2:	b9 01       	movw	r22, r18
    23d4:	a8 01       	movw	r20, r16
    23d6:	ce 01       	movw	r24, r28
    23d8:	8f 5b       	subi	r24, 0xBF	; 191
    23da:	9f 4f       	sbci	r25, 0xFF	; 255
    23dc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    23e0:	00 e0       	ldi	r16, 0x00	; 0
    23e2:	10 e0       	ldi	r17, 0x00	; 0
    23e4:	20 e8       	ldi	r18, 0x80	; 128
    23e6:	3f e3       	ldi	r19, 0x3F	; 63
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	ba 01       	movw	r22, r20
    23ee:	ce 01       	movw	r24, r28
    23f0:	87 5b       	subi	r24, 0xB7	; 183
    23f2:	9f 4f       	sbci	r25, 0xFF	; 255
    23f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    23f8:	00 e0       	ldi	r16, 0x00	; 0
    23fa:	10 e0       	ldi	r17, 0x00	; 0
    23fc:	98 01       	movw	r18, r16
    23fe:	b9 01       	movw	r22, r18
    2400:	a8 01       	movw	r20, r16
    2402:	ce 01       	movw	r24, r28
    2404:	8f 5a       	subi	r24, 0xAF	; 175
    2406:	9f 4f       	sbci	r25, 0xFF	; 255
    2408:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    240c:	00 e0       	ldi	r16, 0x00	; 0
    240e:	10 e0       	ldi	r17, 0x00	; 0
    2410:	98 01       	movw	r18, r16
    2412:	b9 01       	movw	r22, r18
    2414:	a8 01       	movw	r20, r16
    2416:	ce 01       	movw	r24, r28
    2418:	87 5a       	subi	r24, 0xA7	; 167
    241a:	9f 4f       	sbci	r25, 0xFF	; 255
    241c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2420:	00 e0       	ldi	r16, 0x00	; 0
    2422:	10 e0       	ldi	r17, 0x00	; 0
    2424:	98 01       	movw	r18, r16
    2426:	b9 01       	movw	r22, r18
    2428:	a8 01       	movw	r20, r16
    242a:	ce 01       	movw	r24, r28
    242c:	8f 59       	subi	r24, 0x9F	; 159
    242e:	9f 4f       	sbci	r25, 0xFF	; 255
    2430:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2434:	00 e0       	ldi	r16, 0x00	; 0
    2436:	10 e0       	ldi	r17, 0x00	; 0
    2438:	98 01       	movw	r18, r16
    243a:	b9 01       	movw	r22, r18
    243c:	a8 01       	movw	r20, r16
    243e:	ce 01       	movw	r24, r28
    2440:	87 59       	subi	r24, 0x97	; 151
    2442:	9f 4f       	sbci	r25, 0xFF	; 255
    2444:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2448:	00 e0       	ldi	r16, 0x00	; 0
    244a:	10 e0       	ldi	r17, 0x00	; 0
    244c:	98 01       	movw	r18, r16
    244e:	b9 01       	movw	r22, r18
    2450:	a8 01       	movw	r20, r16
    2452:	ce 01       	movw	r24, r28
    2454:	8f 58       	subi	r24, 0x8F	; 143
    2456:	9f 4f       	sbci	r25, 0xFF	; 255
    2458:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    245c:	00 e0       	ldi	r16, 0x00	; 0
    245e:	10 e0       	ldi	r17, 0x00	; 0
    2460:	98 01       	movw	r18, r16
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	60 e8       	ldi	r22, 0x80	; 128
    2468:	7f e3       	ldi	r23, 0x3F	; 63
    246a:	ce 01       	movw	r24, r28
    246c:	87 58       	subi	r24, 0x87	; 135
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2474:	cb 57       	subi	r28, 0x7B	; 123
    2476:	df 4f       	sbci	r29, 0xFF	; 255
    2478:	79 82       	std	Y+1, r7	; 0x01
    247a:	68 82       	st	Y, r6
    247c:	c5 58       	subi	r28, 0x85	; 133
    247e:	d0 40       	sbci	r29, 0x00	; 0
    2480:	c9 57       	subi	r28, 0x79	; 121
    2482:	df 4f       	sbci	r29, 0xFF	; 255
    2484:	99 82       	std	Y+1, r9	; 0x01
    2486:	88 82       	st	Y, r8
    2488:	c7 58       	subi	r28, 0x87	; 135
    248a:	d0 40       	sbci	r29, 0x00	; 0
    248c:	cf 57       	subi	r28, 0x7F	; 127
    248e:	df 4f       	sbci	r29, 0xFF	; 255
    2490:	b9 82       	std	Y+1, r11	; 0x01
    2492:	a8 82       	st	Y, r10
    2494:	c1 58       	subi	r28, 0x81	; 129
    2496:	d0 40       	sbci	r29, 0x00	; 0
    2498:	cd 57       	subi	r28, 0x7D	; 125
    249a:	df 4f       	sbci	r29, 0xFF	; 255
    249c:	d9 82       	std	Y+1, r13	; 0x01
    249e:	c8 82       	st	Y, r12
    24a0:	c3 58       	subi	r28, 0x83	; 131
    24a2:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    24a4:	9e 01       	movw	r18, r28
    24a6:	2f 57       	subi	r18, 0x7F	; 127
    24a8:	3f 4f       	sbci	r19, 0xFF	; 255
    24aa:	ae 01       	movw	r20, r28
    24ac:	4b 57       	subi	r20, 0x7B	; 123
    24ae:	5f 4f       	sbci	r21, 0xFF	; 255
    24b0:	62 e0       	ldi	r22, 0x02	; 2
    24b2:	70 e0       	ldi	r23, 0x00	; 0
    24b4:	c7 01       	movw	r24, r14
    24b6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    24ba:	ae 01       	movw	r20, r28
    24bc:	4f 5f       	subi	r20, 0xFF	; 255
    24be:	5f 4f       	sbci	r21, 0xFF	; 255
    24c0:	bc 01       	movw	r22, r24
    24c2:	c7 01       	movw	r24, r14
    24c4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    24c8:	42 e0       	ldi	r20, 0x02	; 2
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	bc 01       	movw	r22, r24
    24ce:	c7 01       	movw	r24, r14
    24d0:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    24d4:	c8 57       	subi	r28, 0x78	; 120
    24d6:	df 4f       	sbci	r29, 0xFF	; 255
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	df 90       	pop	r13
    24f0:	cf 90       	pop	r12
    24f2:	bf 90       	pop	r11
    24f4:	af 90       	pop	r10
    24f6:	9f 90       	pop	r9
    24f8:	8f 90       	pop	r8
    24fa:	7f 90       	pop	r7
    24fc:	6f 90       	pop	r6
    24fe:	08 95       	ret

00002500 <_ZN5Gates3ROXEiii>:
int * Gates::ROX(int theta,int phi,int delta){
    2500:	2f 92       	push	r2
    2502:	3f 92       	push	r3
    2504:	4f 92       	push	r4
    2506:	5f 92       	push	r5
    2508:	6f 92       	push	r6
    250a:	7f 92       	push	r7
    250c:	8f 92       	push	r8
    250e:	9f 92       	push	r9
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	a4 97       	sbiw	r28, 0x24	; 36
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	7c 01       	movw	r14, r24
    2536:	1b 01       	movw	r2, r22
    2538:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    253a:	b9 01       	movw	r22, r18
    253c:	88 27       	eor	r24, r24
    253e:	77 fd       	sbrc	r23, 7
    2540:	80 95       	com	r24
    2542:	98 2f       	mov	r25, r24
    2544:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
    2548:	2b ed       	ldi	r18, 0xDB	; 219
    254a:	3f e0       	ldi	r19, 0x0F	; 15
    254c:	49 e4       	ldi	r20, 0x49	; 73
    254e:	50 e4       	ldi	r21, 0x40	; 64
    2550:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	44 e3       	ldi	r20, 0x34	; 52
    255a:	53 e4       	ldi	r21, 0x43	; 67
    255c:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
	Complex rox_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0), Complex(0,-sin(delta_float/2))},
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
    256c:	4b 01       	movw	r8, r22
    256e:	5c 01       	movw	r10, r24
    2570:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <cos>
    2574:	2b 01       	movw	r4, r22
    2576:	3c 01       	movw	r6, r24
														 {Complex(0,-sin(delta_float/2)),Complex(cos(delta_float/2),0)}};
    2578:	00 e0       	ldi	r16, 0x00	; 0
    257a:	10 e0       	ldi	r17, 0x00	; 0
    257c:	98 01       	movw	r18, r16
    257e:	ab 01       	movw	r20, r22
    2580:	bc 01       	movw	r22, r24
    2582:	ce 01       	movw	r24, r28
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
}
int * Gates::ROX(int theta,int phi,int delta){
	float delta_float=(delta*M_PI)/180;
	Complex rox_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0), Complex(0,-sin(delta_float/2))},
    258a:	c5 01       	movw	r24, r10
    258c:	b4 01       	movw	r22, r8
    258e:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <sin>
														 {Complex(0,-sin(delta_float/2)),Complex(cos(delta_float/2),0)}};
    2592:	4b 01       	movw	r8, r22
    2594:	5c 01       	movw	r10, r24
    2596:	b7 fa       	bst	r11, 7
    2598:	b0 94       	com	r11
    259a:	b7 f8       	bld	r11, 7
    259c:	b0 94       	com	r11
    259e:	95 01       	movw	r18, r10
    25a0:	84 01       	movw	r16, r8
    25a2:	40 e0       	ldi	r20, 0x00	; 0
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	ba 01       	movw	r22, r20
    25a8:	ce 01       	movw	r24, r28
    25aa:	09 96       	adiw	r24, 0x09	; 9
    25ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    25b0:	95 01       	movw	r18, r10
    25b2:	84 01       	movw	r16, r8
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	ba 01       	movw	r22, r20
    25ba:	ce 01       	movw	r24, r28
    25bc:	41 96       	adiw	r24, 0x11	; 17
    25be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    25c2:	00 e0       	ldi	r16, 0x00	; 0
    25c4:	10 e0       	ldi	r17, 0x00	; 0
    25c6:	98 01       	movw	r18, r16
    25c8:	b3 01       	movw	r22, r6
    25ca:	a2 01       	movw	r20, r4
    25cc:	ce 01       	movw	r24, r28
    25ce:	49 96       	adiw	r24, 0x19	; 25
    25d0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    25d4:	3c a2       	std	Y+36, r3	; 0x24
    25d6:	2b a2       	std	Y+35, r2	; 0x23
    25d8:	da a2       	std	Y+34, r13	; 0x22
    25da:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
    25dc:	9e 01       	movw	r18, r28
    25de:	2f 5d       	subi	r18, 0xDF	; 223
    25e0:	3f 4f       	sbci	r19, 0xFF	; 255
    25e2:	ae 01       	movw	r20, r28
    25e4:	4d 5d       	subi	r20, 0xDD	; 221
    25e6:	5f 4f       	sbci	r21, 0xFF	; 255
    25e8:	61 e0       	ldi	r22, 0x01	; 1
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	c7 01       	movw	r24, r14
    25ee:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    25f2:	ae 01       	movw	r20, r28
    25f4:	4f 5f       	subi	r20, 0xFF	; 255
    25f6:	5f 4f       	sbci	r21, 0xFF	; 255
    25f8:	bc 01       	movw	r22, r24
    25fa:	c7 01       	movw	r24, r14
    25fc:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	bc 01       	movw	r22, r24
    2606:	c7 01       	movw	r24, r14
    2608:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    260c:	a4 96       	adiw	r28, 0x24	; 36
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	df 90       	pop	r13
    2626:	cf 90       	pop	r12
    2628:	bf 90       	pop	r11
    262a:	af 90       	pop	r10
    262c:	9f 90       	pop	r9
    262e:	8f 90       	pop	r8
    2630:	7f 90       	pop	r7
    2632:	6f 90       	pop	r6
    2634:	5f 90       	pop	r5
    2636:	4f 90       	pop	r4
    2638:	3f 90       	pop	r3
    263a:	2f 90       	pop	r2
    263c:	08 95       	ret

0000263e <_ZN5Gates3ROYEiii>:
int * Gates::ROY(int theta,int phi,int delta){
    263e:	2f 92       	push	r2
    2640:	3f 92       	push	r3
    2642:	4f 92       	push	r4
    2644:	5f 92       	push	r5
    2646:	6f 92       	push	r6
    2648:	7f 92       	push	r7
    264a:	8f 92       	push	r8
    264c:	9f 92       	push	r9
    264e:	af 92       	push	r10
    2650:	bf 92       	push	r11
    2652:	cf 92       	push	r12
    2654:	df 92       	push	r13
    2656:	ef 92       	push	r14
    2658:	ff 92       	push	r15
    265a:	0f 93       	push	r16
    265c:	1f 93       	push	r17
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	a4 97       	sbiw	r28, 0x24	; 36
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	7c 01       	movw	r14, r24
    2674:	1b 01       	movw	r2, r22
    2676:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    2678:	b9 01       	movw	r22, r18
    267a:	88 27       	eor	r24, r24
    267c:	77 fd       	sbrc	r23, 7
    267e:	80 95       	com	r24
    2680:	98 2f       	mov	r25, r24
    2682:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
    2686:	2b ed       	ldi	r18, 0xDB	; 219
    2688:	3f e0       	ldi	r19, 0x0F	; 15
    268a:	49 e4       	ldi	r20, 0x49	; 73
    268c:	50 e4       	ldi	r21, 0x40	; 64
    268e:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	44 e3       	ldi	r20, 0x34	; 52
    2698:	53 e4       	ldi	r21, 0x43	; 67
    269a:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0),Complex(-sin(delta_float/2),0)},
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	5f e3       	ldi	r21, 0x3F	; 63
    26a6:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
    26aa:	4b 01       	movw	r8, r22
    26ac:	5c 01       	movw	r10, r24
    26ae:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <cos>
    26b2:	2b 01       	movw	r4, r22
    26b4:	3c 01       	movw	r6, r24
														 {Complex(sin(delta_float/2),0),Complex(cos(delta_float/2),0)}};
    26b6:	00 e0       	ldi	r16, 0x00	; 0
    26b8:	10 e0       	ldi	r17, 0x00	; 0
    26ba:	98 01       	movw	r18, r16
    26bc:	ab 01       	movw	r20, r22
    26be:	bc 01       	movw	r22, r24
    26c0:	ce 01       	movw	r24, r28
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
}
int * Gates::ROY(int theta,int phi,int delta){
	float delta_float=(delta*M_PI)/180;
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0),Complex(-sin(delta_float/2),0)},
    26c8:	c5 01       	movw	r24, r10
    26ca:	b4 01       	movw	r22, r8
    26cc:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <sin>
    26d0:	4b 01       	movw	r8, r22
    26d2:	5c 01       	movw	r10, r24
														 {Complex(sin(delta_float/2),0),Complex(cos(delta_float/2),0)}};
    26d4:	ab 01       	movw	r20, r22
    26d6:	bc 01       	movw	r22, r24
    26d8:	70 58       	subi	r23, 0x80	; 128
    26da:	00 e0       	ldi	r16, 0x00	; 0
    26dc:	10 e0       	ldi	r17, 0x00	; 0
    26de:	98 01       	movw	r18, r16
    26e0:	ce 01       	movw	r24, r28
    26e2:	09 96       	adiw	r24, 0x09	; 9
    26e4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    26e8:	00 e0       	ldi	r16, 0x00	; 0
    26ea:	10 e0       	ldi	r17, 0x00	; 0
    26ec:	98 01       	movw	r18, r16
    26ee:	b5 01       	movw	r22, r10
    26f0:	a4 01       	movw	r20, r8
    26f2:	ce 01       	movw	r24, r28
    26f4:	41 96       	adiw	r24, 0x11	; 17
    26f6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    26fa:	00 e0       	ldi	r16, 0x00	; 0
    26fc:	10 e0       	ldi	r17, 0x00	; 0
    26fe:	98 01       	movw	r18, r16
    2700:	b3 01       	movw	r22, r6
    2702:	a2 01       	movw	r20, r4
    2704:	ce 01       	movw	r24, r28
    2706:	49 96       	adiw	r24, 0x19	; 25
    2708:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    270c:	3c a2       	std	Y+36, r3	; 0x24
    270e:	2b a2       	std	Y+35, r2	; 0x23
    2710:	da a2       	std	Y+34, r13	; 0x22
    2712:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    2714:	9e 01       	movw	r18, r28
    2716:	2f 5d       	subi	r18, 0xDF	; 223
    2718:	3f 4f       	sbci	r19, 0xFF	; 255
    271a:	ae 01       	movw	r20, r28
    271c:	4d 5d       	subi	r20, 0xDD	; 221
    271e:	5f 4f       	sbci	r21, 0xFF	; 255
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	c7 01       	movw	r24, r14
    2726:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    272a:	ae 01       	movw	r20, r28
    272c:	4f 5f       	subi	r20, 0xFF	; 255
    272e:	5f 4f       	sbci	r21, 0xFF	; 255
    2730:	bc 01       	movw	r22, r24
    2732:	c7 01       	movw	r24, r14
    2734:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	bc 01       	movw	r22, r24
    273e:	c7 01       	movw	r24, r14
    2740:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    2744:	a4 96       	adiw	r28, 0x24	; 36
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	ff 90       	pop	r15
    275a:	ef 90       	pop	r14
    275c:	df 90       	pop	r13
    275e:	cf 90       	pop	r12
    2760:	bf 90       	pop	r11
    2762:	af 90       	pop	r10
    2764:	9f 90       	pop	r9
    2766:	8f 90       	pop	r8
    2768:	7f 90       	pop	r7
    276a:	6f 90       	pop	r6
    276c:	5f 90       	pop	r5
    276e:	4f 90       	pop	r4
    2770:	3f 90       	pop	r3
    2772:	2f 90       	pop	r2
    2774:	08 95       	ret

00002776 <_ZN5Gates3ROZEiii>:
int * Gates::ROZ(int theta,int phi,int delta){
    2776:	4f 92       	push	r4
    2778:	5f 92       	push	r5
    277a:	6f 92       	push	r6
    277c:	7f 92       	push	r7
    277e:	af 92       	push	r10
    2780:	bf 92       	push	r11
    2782:	cf 92       	push	r12
    2784:	df 92       	push	r13
    2786:	ef 92       	push	r14
    2788:	ff 92       	push	r15
    278a:	0f 93       	push	r16
    278c:	1f 93       	push	r17
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	a4 97       	sbiw	r28, 0x24	; 36
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	7c 01       	movw	r14, r24
    27a4:	5b 01       	movw	r10, r22
    27a6:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    27a8:	b9 01       	movw	r22, r18
    27aa:	88 27       	eor	r24, r24
    27ac:	77 fd       	sbrc	r23, 7
    27ae:	80 95       	com	r24
    27b0:	98 2f       	mov	r25, r24
    27b2:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
    27b6:	2b ed       	ldi	r18, 0xDB	; 219
    27b8:	3f e0       	ldi	r19, 0x0F	; 15
    27ba:	49 e4       	ldi	r20, 0x49	; 73
    27bc:	50 e4       	ldi	r21, 0x40	; 64
    27be:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	44 e3       	ldi	r20, 0x34	; 52
    27c8:	53 e4       	ldi	r21, 0x43	; 67
    27ca:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
    27ce:	2b 01       	movw	r4, r22
    27d0:	3c 01       	movw	r6, r24
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,exp(-delta_float/2)),Complex(0,0)},
    27d2:	90 58       	subi	r25, 0x80	; 128
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	5f e3       	ldi	r21, 0x3F	; 63
    27dc:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
    27e0:	0e 94 c8 2c 	call	0x5990	; 0x5990 <exp>
    27e4:	8b 01       	movw	r16, r22
    27e6:	9c 01       	movw	r18, r24
														 {Complex(0,0),		  		     Complex(0,exp(delta_float/2))}};
    27e8:	40 e0       	ldi	r20, 0x00	; 0
    27ea:	50 e0       	ldi	r21, 0x00	; 0
    27ec:	ba 01       	movw	r22, r20
    27ee:	ce 01       	movw	r24, r28
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    27f6:	00 e0       	ldi	r16, 0x00	; 0
    27f8:	10 e0       	ldi	r17, 0x00	; 0
    27fa:	98 01       	movw	r18, r16
    27fc:	b9 01       	movw	r22, r18
    27fe:	a8 01       	movw	r20, r16
    2800:	ce 01       	movw	r24, r28
    2802:	09 96       	adiw	r24, 0x09	; 9
    2804:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2808:	00 e0       	ldi	r16, 0x00	; 0
    280a:	10 e0       	ldi	r17, 0x00	; 0
    280c:	98 01       	movw	r18, r16
    280e:	b9 01       	movw	r22, r18
    2810:	a8 01       	movw	r20, r16
    2812:	ce 01       	movw	r24, r28
    2814:	41 96       	adiw	r24, 0x11	; 17
    2816:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	5f e3       	ldi	r21, 0x3F	; 63
    2822:	c3 01       	movw	r24, r6
    2824:	b2 01       	movw	r22, r4
    2826:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
    282a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <exp>
    282e:	8b 01       	movw	r16, r22
    2830:	9c 01       	movw	r18, r24
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	ba 01       	movw	r22, r20
    2838:	ce 01       	movw	r24, r28
    283a:	49 96       	adiw	r24, 0x19	; 25
    283c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    2840:	bc a2       	std	Y+36, r11	; 0x24
    2842:	ab a2       	std	Y+35, r10	; 0x23
    2844:	da a2       	std	Y+34, r13	; 0x22
    2846:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    2848:	9e 01       	movw	r18, r28
    284a:	2f 5d       	subi	r18, 0xDF	; 223
    284c:	3f 4f       	sbci	r19, 0xFF	; 255
    284e:	ae 01       	movw	r20, r28
    2850:	4d 5d       	subi	r20, 0xDD	; 221
    2852:	5f 4f       	sbci	r21, 0xFF	; 255
    2854:	61 e0       	ldi	r22, 0x01	; 1
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	c7 01       	movw	r24, r14
    285a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    285e:	ae 01       	movw	r20, r28
    2860:	4f 5f       	subi	r20, 0xFF	; 255
    2862:	5f 4f       	sbci	r21, 0xFF	; 255
    2864:	bc 01       	movw	r22, r24
    2866:	c7 01       	movw	r24, r14
    2868:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    286c:	41 e0       	ldi	r20, 0x01	; 1
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	bc 01       	movw	r22, r24
    2872:	c7 01       	movw	r24, r14
    2874:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    2878:	a4 96       	adiw	r28, 0x24	; 36
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	ff 90       	pop	r15
    288e:	ef 90       	pop	r14
    2890:	df 90       	pop	r13
    2892:	cf 90       	pop	r12
    2894:	bf 90       	pop	r11
    2896:	af 90       	pop	r10
    2898:	7f 90       	pop	r7
    289a:	6f 90       	pop	r6
    289c:	5f 90       	pop	r5
    289e:	4f 90       	pop	r4
    28a0:	08 95       	ret

000028a2 <_ZN5Gates3CSWEiiiiii>:
int * Gates::CSW(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3){
    28a2:	2f 92       	push	r2
    28a4:	3f 92       	push	r3
    28a6:	4f 92       	push	r4
    28a8:	5f 92       	push	r5
    28aa:	6f 92       	push	r6
    28ac:	7f 92       	push	r7
    28ae:	8f 92       	push	r8
    28b0:	9f 92       	push	r9
    28b2:	af 92       	push	r10
    28b4:	bf 92       	push	r11
    28b6:	cf 92       	push	r12
    28b8:	df 92       	push	r13
    28ba:	ef 92       	push	r14
    28bc:	ff 92       	push	r15
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	cc 50       	subi	r28, 0x0C	; 12
    28cc:	d2 40       	sbci	r29, 0x02	; 2
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	5c 01       	movw	r10, r24
    28da:	3b 01       	movw	r6, r22
    28dc:	2a 01       	movw	r4, r20
    28de:	49 01       	movw	r8, r18
    28e0:	18 01       	movw	r2, r16
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    28e2:	00 e0       	ldi	r16, 0x00	; 0
    28e4:	10 e0       	ldi	r17, 0x00	; 0
    28e6:	98 01       	movw	r18, r16
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	50 e0       	ldi	r21, 0x00	; 0
    28ec:	60 e8       	ldi	r22, 0x80	; 128
    28ee:	7f e3       	ldi	r23, 0x3F	; 63
    28f0:	ce 01       	movw	r24, r28
    28f2:	01 96       	adiw	r24, 0x01	; 1
    28f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    28f8:	00 e0       	ldi	r16, 0x00	; 0
    28fa:	10 e0       	ldi	r17, 0x00	; 0
    28fc:	98 01       	movw	r18, r16
    28fe:	b9 01       	movw	r22, r18
    2900:	a8 01       	movw	r20, r16
    2902:	ce 01       	movw	r24, r28
    2904:	09 96       	adiw	r24, 0x09	; 9
    2906:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    290a:	00 e0       	ldi	r16, 0x00	; 0
    290c:	10 e0       	ldi	r17, 0x00	; 0
    290e:	98 01       	movw	r18, r16
    2910:	b9 01       	movw	r22, r18
    2912:	a8 01       	movw	r20, r16
    2914:	ce 01       	movw	r24, r28
    2916:	41 96       	adiw	r24, 0x11	; 17
    2918:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    291c:	00 e0       	ldi	r16, 0x00	; 0
    291e:	10 e0       	ldi	r17, 0x00	; 0
    2920:	98 01       	movw	r18, r16
    2922:	b9 01       	movw	r22, r18
    2924:	a8 01       	movw	r20, r16
    2926:	ce 01       	movw	r24, r28
    2928:	49 96       	adiw	r24, 0x19	; 25
    292a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    292e:	00 e0       	ldi	r16, 0x00	; 0
    2930:	10 e0       	ldi	r17, 0x00	; 0
    2932:	98 01       	movw	r18, r16
    2934:	b9 01       	movw	r22, r18
    2936:	a8 01       	movw	r20, r16
    2938:	ce 01       	movw	r24, r28
    293a:	81 96       	adiw	r24, 0x21	; 33
    293c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2940:	00 e0       	ldi	r16, 0x00	; 0
    2942:	10 e0       	ldi	r17, 0x00	; 0
    2944:	98 01       	movw	r18, r16
    2946:	b9 01       	movw	r22, r18
    2948:	a8 01       	movw	r20, r16
    294a:	ce 01       	movw	r24, r28
    294c:	89 96       	adiw	r24, 0x29	; 41
    294e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2952:	00 e0       	ldi	r16, 0x00	; 0
    2954:	10 e0       	ldi	r17, 0x00	; 0
    2956:	98 01       	movw	r18, r16
    2958:	b9 01       	movw	r22, r18
    295a:	a8 01       	movw	r20, r16
    295c:	ce 01       	movw	r24, r28
    295e:	c1 96       	adiw	r24, 0x31	; 49
    2960:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2964:	00 e0       	ldi	r16, 0x00	; 0
    2966:	10 e0       	ldi	r17, 0x00	; 0
    2968:	98 01       	movw	r18, r16
    296a:	b9 01       	movw	r22, r18
    296c:	a8 01       	movw	r20, r16
    296e:	ce 01       	movw	r24, r28
    2970:	c9 96       	adiw	r24, 0x39	; 57
    2972:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2976:	00 e0       	ldi	r16, 0x00	; 0
    2978:	10 e0       	ldi	r17, 0x00	; 0
    297a:	98 01       	movw	r18, r16
    297c:	b9 01       	movw	r22, r18
    297e:	a8 01       	movw	r20, r16
    2980:	ce 01       	movw	r24, r28
    2982:	8f 5b       	subi	r24, 0xBF	; 191
    2984:	9f 4f       	sbci	r25, 0xFF	; 255
    2986:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    298a:	00 e0       	ldi	r16, 0x00	; 0
    298c:	10 e0       	ldi	r17, 0x00	; 0
    298e:	98 01       	movw	r18, r16
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	60 e8       	ldi	r22, 0x80	; 128
    2996:	7f e3       	ldi	r23, 0x3F	; 63
    2998:	ce 01       	movw	r24, r28
    299a:	87 5b       	subi	r24, 0xB7	; 183
    299c:	9f 4f       	sbci	r25, 0xFF	; 255
    299e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    29a2:	00 e0       	ldi	r16, 0x00	; 0
    29a4:	10 e0       	ldi	r17, 0x00	; 0
    29a6:	98 01       	movw	r18, r16
    29a8:	b9 01       	movw	r22, r18
    29aa:	a8 01       	movw	r20, r16
    29ac:	ce 01       	movw	r24, r28
    29ae:	8f 5a       	subi	r24, 0xAF	; 175
    29b0:	9f 4f       	sbci	r25, 0xFF	; 255
    29b2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    29b6:	00 e0       	ldi	r16, 0x00	; 0
    29b8:	10 e0       	ldi	r17, 0x00	; 0
    29ba:	98 01       	movw	r18, r16
    29bc:	b9 01       	movw	r22, r18
    29be:	a8 01       	movw	r20, r16
    29c0:	ce 01       	movw	r24, r28
    29c2:	87 5a       	subi	r24, 0xA7	; 167
    29c4:	9f 4f       	sbci	r25, 0xFF	; 255
    29c6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    29ca:	00 e0       	ldi	r16, 0x00	; 0
    29cc:	10 e0       	ldi	r17, 0x00	; 0
    29ce:	98 01       	movw	r18, r16
    29d0:	b9 01       	movw	r22, r18
    29d2:	a8 01       	movw	r20, r16
    29d4:	ce 01       	movw	r24, r28
    29d6:	8f 59       	subi	r24, 0x9F	; 159
    29d8:	9f 4f       	sbci	r25, 0xFF	; 255
    29da:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    29de:	00 e0       	ldi	r16, 0x00	; 0
    29e0:	10 e0       	ldi	r17, 0x00	; 0
    29e2:	98 01       	movw	r18, r16
    29e4:	b9 01       	movw	r22, r18
    29e6:	a8 01       	movw	r20, r16
    29e8:	ce 01       	movw	r24, r28
    29ea:	87 59       	subi	r24, 0x97	; 151
    29ec:	9f 4f       	sbci	r25, 0xFF	; 255
    29ee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    29f2:	00 e0       	ldi	r16, 0x00	; 0
    29f4:	10 e0       	ldi	r17, 0x00	; 0
    29f6:	98 01       	movw	r18, r16
    29f8:	b9 01       	movw	r22, r18
    29fa:	a8 01       	movw	r20, r16
    29fc:	ce 01       	movw	r24, r28
    29fe:	8f 58       	subi	r24, 0x8F	; 143
    2a00:	9f 4f       	sbci	r25, 0xFF	; 255
    2a02:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2a06:	00 e0       	ldi	r16, 0x00	; 0
    2a08:	10 e0       	ldi	r17, 0x00	; 0
    2a0a:	98 01       	movw	r18, r16
    2a0c:	b9 01       	movw	r22, r18
    2a0e:	a8 01       	movw	r20, r16
    2a10:	ce 01       	movw	r24, r28
    2a12:	87 58       	subi	r24, 0x87	; 135
    2a14:	9f 4f       	sbci	r25, 0xFF	; 255
    2a16:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2a1a:	00 e0       	ldi	r16, 0x00	; 0
    2a1c:	10 e0       	ldi	r17, 0x00	; 0
    2a1e:	98 01       	movw	r18, r16
    2a20:	b9 01       	movw	r22, r18
    2a22:	a8 01       	movw	r20, r16
    2a24:	ce 01       	movw	r24, r28
    2a26:	8f 57       	subi	r24, 0x7F	; 127
    2a28:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2a2e:	00 e0       	ldi	r16, 0x00	; 0
    2a30:	10 e0       	ldi	r17, 0x00	; 0
    2a32:	98 01       	movw	r18, r16
    2a34:	b9 01       	movw	r22, r18
    2a36:	a8 01       	movw	r20, r16
    2a38:	ce 01       	movw	r24, r28
    2a3a:	87 57       	subi	r24, 0x77	; 119
    2a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2a42:	00 e0       	ldi	r16, 0x00	; 0
    2a44:	10 e0       	ldi	r17, 0x00	; 0
    2a46:	98 01       	movw	r18, r16
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	60 e8       	ldi	r22, 0x80	; 128
    2a4e:	7f e3       	ldi	r23, 0x3F	; 63
    2a50:	ce 01       	movw	r24, r28
    2a52:	8f 56       	subi	r24, 0x6F	; 111
    2a54:	9f 4f       	sbci	r25, 0xFF	; 255
    2a56:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2a5a:	00 e0       	ldi	r16, 0x00	; 0
    2a5c:	10 e0       	ldi	r17, 0x00	; 0
    2a5e:	98 01       	movw	r18, r16
    2a60:	b9 01       	movw	r22, r18
    2a62:	a8 01       	movw	r20, r16
    2a64:	ce 01       	movw	r24, r28
    2a66:	87 56       	subi	r24, 0x67	; 103
    2a68:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2a6e:	00 e0       	ldi	r16, 0x00	; 0
    2a70:	10 e0       	ldi	r17, 0x00	; 0
    2a72:	98 01       	movw	r18, r16
    2a74:	b9 01       	movw	r22, r18
    2a76:	a8 01       	movw	r20, r16
    2a78:	ce 01       	movw	r24, r28
    2a7a:	8f 55       	subi	r24, 0x5F	; 95
    2a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2a82:	00 e0       	ldi	r16, 0x00	; 0
    2a84:	10 e0       	ldi	r17, 0x00	; 0
    2a86:	98 01       	movw	r18, r16
    2a88:	b9 01       	movw	r22, r18
    2a8a:	a8 01       	movw	r20, r16
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	87 55       	subi	r24, 0x57	; 87
    2a90:	9f 4f       	sbci	r25, 0xFF	; 255
    2a92:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2a96:	00 e0       	ldi	r16, 0x00	; 0
    2a98:	10 e0       	ldi	r17, 0x00	; 0
    2a9a:	98 01       	movw	r18, r16
    2a9c:	b9 01       	movw	r22, r18
    2a9e:	a8 01       	movw	r20, r16
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	8f 54       	subi	r24, 0x4F	; 79
    2aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2aaa:	00 e0       	ldi	r16, 0x00	; 0
    2aac:	10 e0       	ldi	r17, 0x00	; 0
    2aae:	98 01       	movw	r18, r16
    2ab0:	b9 01       	movw	r22, r18
    2ab2:	a8 01       	movw	r20, r16
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	87 54       	subi	r24, 0x47	; 71
    2ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2abe:	00 e0       	ldi	r16, 0x00	; 0
    2ac0:	10 e0       	ldi	r17, 0x00	; 0
    2ac2:	98 01       	movw	r18, r16
    2ac4:	b9 01       	movw	r22, r18
    2ac6:	a8 01       	movw	r20, r16
    2ac8:	ce 01       	movw	r24, r28
    2aca:	8f 53       	subi	r24, 0x3F	; 63
    2acc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ace:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2ad2:	00 e0       	ldi	r16, 0x00	; 0
    2ad4:	10 e0       	ldi	r17, 0x00	; 0
    2ad6:	98 01       	movw	r18, r16
    2ad8:	b9 01       	movw	r22, r18
    2ada:	a8 01       	movw	r20, r16
    2adc:	ce 01       	movw	r24, r28
    2ade:	87 53       	subi	r24, 0x37	; 55
    2ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2ae6:	00 e0       	ldi	r16, 0x00	; 0
    2ae8:	10 e0       	ldi	r17, 0x00	; 0
    2aea:	98 01       	movw	r18, r16
    2aec:	b9 01       	movw	r22, r18
    2aee:	a8 01       	movw	r20, r16
    2af0:	ce 01       	movw	r24, r28
    2af2:	8f 52       	subi	r24, 0x2F	; 47
    2af4:	9f 4f       	sbci	r25, 0xFF	; 255
    2af6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2afa:	00 e0       	ldi	r16, 0x00	; 0
    2afc:	10 e0       	ldi	r17, 0x00	; 0
    2afe:	98 01       	movw	r18, r16
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	60 e8       	ldi	r22, 0x80	; 128
    2b06:	7f e3       	ldi	r23, 0x3F	; 63
    2b08:	ce 01       	movw	r24, r28
    2b0a:	87 52       	subi	r24, 0x27	; 39
    2b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2b12:	00 e0       	ldi	r16, 0x00	; 0
    2b14:	10 e0       	ldi	r17, 0x00	; 0
    2b16:	98 01       	movw	r18, r16
    2b18:	b9 01       	movw	r22, r18
    2b1a:	a8 01       	movw	r20, r16
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	8f 51       	subi	r24, 0x1F	; 31
    2b20:	9f 4f       	sbci	r25, 0xFF	; 255
    2b22:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2b26:	00 e0       	ldi	r16, 0x00	; 0
    2b28:	10 e0       	ldi	r17, 0x00	; 0
    2b2a:	98 01       	movw	r18, r16
    2b2c:	b9 01       	movw	r22, r18
    2b2e:	a8 01       	movw	r20, r16
    2b30:	ce 01       	movw	r24, r28
    2b32:	87 51       	subi	r24, 0x17	; 23
    2b34:	9f 4f       	sbci	r25, 0xFF	; 255
    2b36:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2b3a:	00 e0       	ldi	r16, 0x00	; 0
    2b3c:	10 e0       	ldi	r17, 0x00	; 0
    2b3e:	98 01       	movw	r18, r16
    2b40:	b9 01       	movw	r22, r18
    2b42:	a8 01       	movw	r20, r16
    2b44:	ce 01       	movw	r24, r28
    2b46:	8f 50       	subi	r24, 0x0F	; 15
    2b48:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2b4e:	00 e0       	ldi	r16, 0x00	; 0
    2b50:	10 e0       	ldi	r17, 0x00	; 0
    2b52:	98 01       	movw	r18, r16
    2b54:	b9 01       	movw	r22, r18
    2b56:	a8 01       	movw	r20, r16
    2b58:	ce 01       	movw	r24, r28
    2b5a:	87 50       	subi	r24, 0x07	; 7
    2b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2b62:	00 e0       	ldi	r16, 0x00	; 0
    2b64:	10 e0       	ldi	r17, 0x00	; 0
    2b66:	98 01       	movw	r18, r16
    2b68:	b9 01       	movw	r22, r18
    2b6a:	a8 01       	movw	r20, r16
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	8f 5f       	subi	r24, 0xFF	; 255
    2b70:	9e 4f       	sbci	r25, 0xFE	; 254
    2b72:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2b76:	00 e0       	ldi	r16, 0x00	; 0
    2b78:	10 e0       	ldi	r17, 0x00	; 0
    2b7a:	98 01       	movw	r18, r16
    2b7c:	b9 01       	movw	r22, r18
    2b7e:	a8 01       	movw	r20, r16
    2b80:	ce 01       	movw	r24, r28
    2b82:	87 5f       	subi	r24, 0xF7	; 247
    2b84:	9e 4f       	sbci	r25, 0xFE	; 254
    2b86:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2b8a:	00 e0       	ldi	r16, 0x00	; 0
    2b8c:	10 e0       	ldi	r17, 0x00	; 0
    2b8e:	98 01       	movw	r18, r16
    2b90:	b9 01       	movw	r22, r18
    2b92:	a8 01       	movw	r20, r16
    2b94:	ce 01       	movw	r24, r28
    2b96:	8f 5e       	subi	r24, 0xEF	; 239
    2b98:	9e 4f       	sbci	r25, 0xFE	; 254
    2b9a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2b9e:	00 e0       	ldi	r16, 0x00	; 0
    2ba0:	10 e0       	ldi	r17, 0x00	; 0
    2ba2:	98 01       	movw	r18, r16
    2ba4:	b9 01       	movw	r22, r18
    2ba6:	a8 01       	movw	r20, r16
    2ba8:	ce 01       	movw	r24, r28
    2baa:	87 5e       	subi	r24, 0xE7	; 231
    2bac:	9e 4f       	sbci	r25, 0xFE	; 254
    2bae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2bb2:	00 e0       	ldi	r16, 0x00	; 0
    2bb4:	10 e0       	ldi	r17, 0x00	; 0
    2bb6:	98 01       	movw	r18, r16
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	50 e0       	ldi	r21, 0x00	; 0
    2bbc:	60 e8       	ldi	r22, 0x80	; 128
    2bbe:	7f e3       	ldi	r23, 0x3F	; 63
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	8f 5d       	subi	r24, 0xDF	; 223
    2bc4:	9e 4f       	sbci	r25, 0xFE	; 254
    2bc6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2bca:	00 e0       	ldi	r16, 0x00	; 0
    2bcc:	10 e0       	ldi	r17, 0x00	; 0
    2bce:	98 01       	movw	r18, r16
    2bd0:	b9 01       	movw	r22, r18
    2bd2:	a8 01       	movw	r20, r16
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	87 5d       	subi	r24, 0xD7	; 215
    2bd8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bda:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2bde:	00 e0       	ldi	r16, 0x00	; 0
    2be0:	10 e0       	ldi	r17, 0x00	; 0
    2be2:	98 01       	movw	r18, r16
    2be4:	b9 01       	movw	r22, r18
    2be6:	a8 01       	movw	r20, r16
    2be8:	ce 01       	movw	r24, r28
    2bea:	8f 5c       	subi	r24, 0xCF	; 207
    2bec:	9e 4f       	sbci	r25, 0xFE	; 254
    2bee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2bf2:	00 e0       	ldi	r16, 0x00	; 0
    2bf4:	10 e0       	ldi	r17, 0x00	; 0
    2bf6:	98 01       	movw	r18, r16
    2bf8:	b9 01       	movw	r22, r18
    2bfa:	a8 01       	movw	r20, r16
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	87 5c       	subi	r24, 0xC7	; 199
    2c00:	9e 4f       	sbci	r25, 0xFE	; 254
    2c02:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2c06:	00 e0       	ldi	r16, 0x00	; 0
    2c08:	10 e0       	ldi	r17, 0x00	; 0
    2c0a:	98 01       	movw	r18, r16
    2c0c:	b9 01       	movw	r22, r18
    2c0e:	a8 01       	movw	r20, r16
    2c10:	ce 01       	movw	r24, r28
    2c12:	8f 5b       	subi	r24, 0xBF	; 191
    2c14:	9e 4f       	sbci	r25, 0xFE	; 254
    2c16:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2c1a:	00 e0       	ldi	r16, 0x00	; 0
    2c1c:	10 e0       	ldi	r17, 0x00	; 0
    2c1e:	98 01       	movw	r18, r16
    2c20:	b9 01       	movw	r22, r18
    2c22:	a8 01       	movw	r20, r16
    2c24:	ce 01       	movw	r24, r28
    2c26:	87 5b       	subi	r24, 0xB7	; 183
    2c28:	9e 4f       	sbci	r25, 0xFE	; 254
    2c2a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2c2e:	00 e0       	ldi	r16, 0x00	; 0
    2c30:	10 e0       	ldi	r17, 0x00	; 0
    2c32:	98 01       	movw	r18, r16
    2c34:	b9 01       	movw	r22, r18
    2c36:	a8 01       	movw	r20, r16
    2c38:	ce 01       	movw	r24, r28
    2c3a:	8f 5a       	subi	r24, 0xAF	; 175
    2c3c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c3e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2c42:	00 e0       	ldi	r16, 0x00	; 0
    2c44:	10 e0       	ldi	r17, 0x00	; 0
    2c46:	98 01       	movw	r18, r16
    2c48:	b9 01       	movw	r22, r18
    2c4a:	a8 01       	movw	r20, r16
    2c4c:	ce 01       	movw	r24, r28
    2c4e:	87 5a       	subi	r24, 0xA7	; 167
    2c50:	9e 4f       	sbci	r25, 0xFE	; 254
    2c52:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2c56:	00 e0       	ldi	r16, 0x00	; 0
    2c58:	10 e0       	ldi	r17, 0x00	; 0
    2c5a:	98 01       	movw	r18, r16
    2c5c:	b9 01       	movw	r22, r18
    2c5e:	a8 01       	movw	r20, r16
    2c60:	ce 01       	movw	r24, r28
    2c62:	8f 59       	subi	r24, 0x9F	; 159
    2c64:	9e 4f       	sbci	r25, 0xFE	; 254
    2c66:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2c6a:	00 e0       	ldi	r16, 0x00	; 0
    2c6c:	10 e0       	ldi	r17, 0x00	; 0
    2c6e:	98 01       	movw	r18, r16
    2c70:	b9 01       	movw	r22, r18
    2c72:	a8 01       	movw	r20, r16
    2c74:	ce 01       	movw	r24, r28
    2c76:	87 59       	subi	r24, 0x97	; 151
    2c78:	9e 4f       	sbci	r25, 0xFE	; 254
    2c7a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2c7e:	00 e0       	ldi	r16, 0x00	; 0
    2c80:	10 e0       	ldi	r17, 0x00	; 0
    2c82:	98 01       	movw	r18, r16
    2c84:	40 e0       	ldi	r20, 0x00	; 0
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	60 e8       	ldi	r22, 0x80	; 128
    2c8a:	7f e3       	ldi	r23, 0x3F	; 63
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	8f 58       	subi	r24, 0x8F	; 143
    2c90:	9e 4f       	sbci	r25, 0xFE	; 254
    2c92:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2c96:	00 e0       	ldi	r16, 0x00	; 0
    2c98:	10 e0       	ldi	r17, 0x00	; 0
    2c9a:	98 01       	movw	r18, r16
    2c9c:	b9 01       	movw	r22, r18
    2c9e:	a8 01       	movw	r20, r16
    2ca0:	ce 01       	movw	r24, r28
    2ca2:	87 58       	subi	r24, 0x87	; 135
    2ca4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ca6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2caa:	00 e0       	ldi	r16, 0x00	; 0
    2cac:	10 e0       	ldi	r17, 0x00	; 0
    2cae:	98 01       	movw	r18, r16
    2cb0:	b9 01       	movw	r22, r18
    2cb2:	a8 01       	movw	r20, r16
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	8f 57       	subi	r24, 0x7F	; 127
    2cb8:	9e 4f       	sbci	r25, 0xFE	; 254
    2cba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2cbe:	00 e0       	ldi	r16, 0x00	; 0
    2cc0:	10 e0       	ldi	r17, 0x00	; 0
    2cc2:	98 01       	movw	r18, r16
    2cc4:	b9 01       	movw	r22, r18
    2cc6:	a8 01       	movw	r20, r16
    2cc8:	ce 01       	movw	r24, r28
    2cca:	87 57       	subi	r24, 0x77	; 119
    2ccc:	9e 4f       	sbci	r25, 0xFE	; 254
    2cce:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2cd2:	00 e0       	ldi	r16, 0x00	; 0
    2cd4:	10 e0       	ldi	r17, 0x00	; 0
    2cd6:	98 01       	movw	r18, r16
    2cd8:	b9 01       	movw	r22, r18
    2cda:	a8 01       	movw	r20, r16
    2cdc:	ce 01       	movw	r24, r28
    2cde:	8f 56       	subi	r24, 0x6F	; 111
    2ce0:	9e 4f       	sbci	r25, 0xFE	; 254
    2ce2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2ce6:	00 e0       	ldi	r16, 0x00	; 0
    2ce8:	10 e0       	ldi	r17, 0x00	; 0
    2cea:	98 01       	movw	r18, r16
    2cec:	b9 01       	movw	r22, r18
    2cee:	a8 01       	movw	r20, r16
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	87 56       	subi	r24, 0x67	; 103
    2cf4:	9e 4f       	sbci	r25, 0xFE	; 254
    2cf6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2cfa:	00 e0       	ldi	r16, 0x00	; 0
    2cfc:	10 e0       	ldi	r17, 0x00	; 0
    2cfe:	98 01       	movw	r18, r16
    2d00:	b9 01       	movw	r22, r18
    2d02:	a8 01       	movw	r20, r16
    2d04:	ce 01       	movw	r24, r28
    2d06:	8f 55       	subi	r24, 0x5F	; 95
    2d08:	9e 4f       	sbci	r25, 0xFE	; 254
    2d0a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2d0e:	00 e0       	ldi	r16, 0x00	; 0
    2d10:	10 e0       	ldi	r17, 0x00	; 0
    2d12:	98 01       	movw	r18, r16
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	50 e0       	ldi	r21, 0x00	; 0
    2d18:	60 e8       	ldi	r22, 0x80	; 128
    2d1a:	7f e3       	ldi	r23, 0x3F	; 63
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	87 55       	subi	r24, 0x57	; 87
    2d20:	9e 4f       	sbci	r25, 0xFE	; 254
    2d22:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2d26:	00 e0       	ldi	r16, 0x00	; 0
    2d28:	10 e0       	ldi	r17, 0x00	; 0
    2d2a:	98 01       	movw	r18, r16
    2d2c:	b9 01       	movw	r22, r18
    2d2e:	a8 01       	movw	r20, r16
    2d30:	ce 01       	movw	r24, r28
    2d32:	8f 54       	subi	r24, 0x4F	; 79
    2d34:	9e 4f       	sbci	r25, 0xFE	; 254
    2d36:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2d3a:	00 e0       	ldi	r16, 0x00	; 0
    2d3c:	10 e0       	ldi	r17, 0x00	; 0
    2d3e:	98 01       	movw	r18, r16
    2d40:	b9 01       	movw	r22, r18
    2d42:	a8 01       	movw	r20, r16
    2d44:	ce 01       	movw	r24, r28
    2d46:	87 54       	subi	r24, 0x47	; 71
    2d48:	9e 4f       	sbci	r25, 0xFE	; 254
    2d4a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2d4e:	00 e0       	ldi	r16, 0x00	; 0
    2d50:	10 e0       	ldi	r17, 0x00	; 0
    2d52:	98 01       	movw	r18, r16
    2d54:	b9 01       	movw	r22, r18
    2d56:	a8 01       	movw	r20, r16
    2d58:	ce 01       	movw	r24, r28
    2d5a:	8f 53       	subi	r24, 0x3F	; 63
    2d5c:	9e 4f       	sbci	r25, 0xFE	; 254
    2d5e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2d62:	00 e0       	ldi	r16, 0x00	; 0
    2d64:	10 e0       	ldi	r17, 0x00	; 0
    2d66:	98 01       	movw	r18, r16
    2d68:	b9 01       	movw	r22, r18
    2d6a:	a8 01       	movw	r20, r16
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	87 53       	subi	r24, 0x37	; 55
    2d70:	9e 4f       	sbci	r25, 0xFE	; 254
    2d72:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2d76:	00 e0       	ldi	r16, 0x00	; 0
    2d78:	10 e0       	ldi	r17, 0x00	; 0
    2d7a:	98 01       	movw	r18, r16
    2d7c:	b9 01       	movw	r22, r18
    2d7e:	a8 01       	movw	r20, r16
    2d80:	ce 01       	movw	r24, r28
    2d82:	8f 52       	subi	r24, 0x2F	; 47
    2d84:	9e 4f       	sbci	r25, 0xFE	; 254
    2d86:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2d8a:	00 e0       	ldi	r16, 0x00	; 0
    2d8c:	10 e0       	ldi	r17, 0x00	; 0
    2d8e:	98 01       	movw	r18, r16
    2d90:	b9 01       	movw	r22, r18
    2d92:	a8 01       	movw	r20, r16
    2d94:	ce 01       	movw	r24, r28
    2d96:	87 52       	subi	r24, 0x27	; 39
    2d98:	9e 4f       	sbci	r25, 0xFE	; 254
    2d9a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2d9e:	00 e0       	ldi	r16, 0x00	; 0
    2da0:	10 e0       	ldi	r17, 0x00	; 0
    2da2:	98 01       	movw	r18, r16
    2da4:	b9 01       	movw	r22, r18
    2da6:	a8 01       	movw	r20, r16
    2da8:	ce 01       	movw	r24, r28
    2daa:	8f 51       	subi	r24, 0x1F	; 31
    2dac:	9e 4f       	sbci	r25, 0xFE	; 254
    2dae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2db2:	00 e0       	ldi	r16, 0x00	; 0
    2db4:	10 e0       	ldi	r17, 0x00	; 0
    2db6:	98 01       	movw	r18, r16
    2db8:	b9 01       	movw	r22, r18
    2dba:	a8 01       	movw	r20, r16
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	87 51       	subi	r24, 0x17	; 23
    2dc0:	9e 4f       	sbci	r25, 0xFE	; 254
    2dc2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2dc6:	00 e0       	ldi	r16, 0x00	; 0
    2dc8:	10 e0       	ldi	r17, 0x00	; 0
    2dca:	98 01       	movw	r18, r16
    2dcc:	b9 01       	movw	r22, r18
    2dce:	a8 01       	movw	r20, r16
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	8f 50       	subi	r24, 0x0F	; 15
    2dd4:	9e 4f       	sbci	r25, 0xFE	; 254
    2dd6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2dda:	00 e0       	ldi	r16, 0x00	; 0
    2ddc:	10 e0       	ldi	r17, 0x00	; 0
    2dde:	98 01       	movw	r18, r16
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	60 e8       	ldi	r22, 0x80	; 128
    2de6:	7f e3       	ldi	r23, 0x3F	; 63
    2de8:	ce 01       	movw	r24, r28
    2dea:	87 50       	subi	r24, 0x07	; 7
    2dec:	9e 4f       	sbci	r25, 0xFE	; 254
    2dee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    2df2:	c9 5f       	subi	r28, 0xF9	; 249
    2df4:	dd 4f       	sbci	r29, 0xFD	; 253
    2df6:	79 82       	std	Y+1, r7	; 0x01
    2df8:	68 82       	st	Y, r6
    2dfa:	c7 50       	subi	r28, 0x07	; 7
    2dfc:	d2 40       	sbci	r29, 0x02	; 2
    2dfe:	c7 5f       	subi	r28, 0xF7	; 247
    2e00:	dd 4f       	sbci	r29, 0xFD	; 253
    2e02:	99 82       	std	Y+1, r9	; 0x01
    2e04:	88 82       	st	Y, r8
    2e06:	c9 50       	subi	r28, 0x09	; 9
    2e08:	d2 40       	sbci	r29, 0x02	; 2
    2e0a:	c5 5f       	subi	r28, 0xF5	; 245
    2e0c:	dd 4f       	sbci	r29, 0xFD	; 253
    2e0e:	f9 82       	std	Y+1, r15	; 0x01
    2e10:	e8 82       	st	Y, r14
    2e12:	cb 50       	subi	r28, 0x0B	; 11
    2e14:	d2 40       	sbci	r29, 0x02	; 2
    2e16:	cf 5f       	subi	r28, 0xFF	; 255
    2e18:	dd 4f       	sbci	r29, 0xFD	; 253
    2e1a:	59 82       	std	Y+1, r5	; 0x01
    2e1c:	48 82       	st	Y, r4
    2e1e:	c1 50       	subi	r28, 0x01	; 1
    2e20:	d2 40       	sbci	r29, 0x02	; 2
    2e22:	cd 5f       	subi	r28, 0xFD	; 253
    2e24:	dd 4f       	sbci	r29, 0xFD	; 253
    2e26:	39 82       	std	Y+1, r3	; 0x01
    2e28:	28 82       	st	Y, r2
    2e2a:	c3 50       	subi	r28, 0x03	; 3
    2e2c:	d2 40       	sbci	r29, 0x02	; 2
    2e2e:	cb 5f       	subi	r28, 0xFB	; 251
    2e30:	dd 4f       	sbci	r29, 0xFD	; 253
    2e32:	d9 82       	std	Y+1, r13	; 0x01
    2e34:	c8 82       	st	Y, r12
    2e36:	c5 50       	subi	r28, 0x05	; 5
    2e38:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),csw_matrix),QB_SIZE3);
    2e3a:	9e 01       	movw	r18, r28
    2e3c:	2f 5f       	subi	r18, 0xFF	; 255
    2e3e:	3d 4f       	sbci	r19, 0xFD	; 253
    2e40:	ae 01       	movw	r20, r28
    2e42:	49 5f       	subi	r20, 0xF9	; 249
    2e44:	5d 4f       	sbci	r21, 0xFD	; 253
    2e46:	63 e0       	ldi	r22, 0x03	; 3
    2e48:	70 e0       	ldi	r23, 0x00	; 0
    2e4a:	c5 01       	movw	r24, r10
    2e4c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    2e50:	ae 01       	movw	r20, r28
    2e52:	4f 5f       	subi	r20, 0xFF	; 255
    2e54:	5f 4f       	sbci	r21, 0xFF	; 255
    2e56:	bc 01       	movw	r22, r24
    2e58:	c5 01       	movw	r24, r10
    2e5a:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    2e5e:	43 e0       	ldi	r20, 0x03	; 3
    2e60:	50 e0       	ldi	r21, 0x00	; 0
    2e62:	bc 01       	movw	r22, r24
    2e64:	c5 01       	movw	r24, r10
    2e66:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    2e6a:	c4 5f       	subi	r28, 0xF4	; 244
    2e6c:	dd 4f       	sbci	r29, 0xFD	; 253
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	1f 91       	pop	r17
    2e7e:	0f 91       	pop	r16
    2e80:	ff 90       	pop	r15
    2e82:	ef 90       	pop	r14
    2e84:	df 90       	pop	r13
    2e86:	cf 90       	pop	r12
    2e88:	bf 90       	pop	r11
    2e8a:	af 90       	pop	r10
    2e8c:	9f 90       	pop	r9
    2e8e:	8f 90       	pop	r8
    2e90:	7f 90       	pop	r7
    2e92:	6f 90       	pop	r6
    2e94:	5f 90       	pop	r5
    2e96:	4f 90       	pop	r4
    2e98:	3f 90       	pop	r3
    2e9a:	2f 90       	pop	r2
    2e9c:	08 95       	ret

00002e9e <_ZN5Gates3TOFEiiiiii>:
int * Gates::TOF(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3){
    2e9e:	2f 92       	push	r2
    2ea0:	3f 92       	push	r3
    2ea2:	4f 92       	push	r4
    2ea4:	5f 92       	push	r5
    2ea6:	6f 92       	push	r6
    2ea8:	7f 92       	push	r7
    2eaa:	8f 92       	push	r8
    2eac:	9f 92       	push	r9
    2eae:	af 92       	push	r10
    2eb0:	bf 92       	push	r11
    2eb2:	cf 92       	push	r12
    2eb4:	df 92       	push	r13
    2eb6:	ef 92       	push	r14
    2eb8:	ff 92       	push	r15
    2eba:	0f 93       	push	r16
    2ebc:	1f 93       	push	r17
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	cc 50       	subi	r28, 0x0C	; 12
    2ec8:	d2 40       	sbci	r29, 0x02	; 2
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
    2ed4:	5c 01       	movw	r10, r24
    2ed6:	3b 01       	movw	r6, r22
    2ed8:	2a 01       	movw	r4, r20
    2eda:	49 01       	movw	r8, r18
    2edc:	18 01       	movw	r2, r16
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    2ede:	00 e0       	ldi	r16, 0x00	; 0
    2ee0:	10 e0       	ldi	r17, 0x00	; 0
    2ee2:	98 01       	movw	r18, r16
    2ee4:	40 e0       	ldi	r20, 0x00	; 0
    2ee6:	50 e0       	ldi	r21, 0x00	; 0
    2ee8:	60 e8       	ldi	r22, 0x80	; 128
    2eea:	7f e3       	ldi	r23, 0x3F	; 63
    2eec:	ce 01       	movw	r24, r28
    2eee:	01 96       	adiw	r24, 0x01	; 1
    2ef0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2ef4:	00 e0       	ldi	r16, 0x00	; 0
    2ef6:	10 e0       	ldi	r17, 0x00	; 0
    2ef8:	98 01       	movw	r18, r16
    2efa:	b9 01       	movw	r22, r18
    2efc:	a8 01       	movw	r20, r16
    2efe:	ce 01       	movw	r24, r28
    2f00:	09 96       	adiw	r24, 0x09	; 9
    2f02:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2f06:	00 e0       	ldi	r16, 0x00	; 0
    2f08:	10 e0       	ldi	r17, 0x00	; 0
    2f0a:	98 01       	movw	r18, r16
    2f0c:	b9 01       	movw	r22, r18
    2f0e:	a8 01       	movw	r20, r16
    2f10:	ce 01       	movw	r24, r28
    2f12:	41 96       	adiw	r24, 0x11	; 17
    2f14:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2f18:	00 e0       	ldi	r16, 0x00	; 0
    2f1a:	10 e0       	ldi	r17, 0x00	; 0
    2f1c:	98 01       	movw	r18, r16
    2f1e:	b9 01       	movw	r22, r18
    2f20:	a8 01       	movw	r20, r16
    2f22:	ce 01       	movw	r24, r28
    2f24:	49 96       	adiw	r24, 0x19	; 25
    2f26:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2f2a:	00 e0       	ldi	r16, 0x00	; 0
    2f2c:	10 e0       	ldi	r17, 0x00	; 0
    2f2e:	98 01       	movw	r18, r16
    2f30:	b9 01       	movw	r22, r18
    2f32:	a8 01       	movw	r20, r16
    2f34:	ce 01       	movw	r24, r28
    2f36:	81 96       	adiw	r24, 0x21	; 33
    2f38:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2f3c:	00 e0       	ldi	r16, 0x00	; 0
    2f3e:	10 e0       	ldi	r17, 0x00	; 0
    2f40:	98 01       	movw	r18, r16
    2f42:	b9 01       	movw	r22, r18
    2f44:	a8 01       	movw	r20, r16
    2f46:	ce 01       	movw	r24, r28
    2f48:	89 96       	adiw	r24, 0x29	; 41
    2f4a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2f4e:	00 e0       	ldi	r16, 0x00	; 0
    2f50:	10 e0       	ldi	r17, 0x00	; 0
    2f52:	98 01       	movw	r18, r16
    2f54:	b9 01       	movw	r22, r18
    2f56:	a8 01       	movw	r20, r16
    2f58:	ce 01       	movw	r24, r28
    2f5a:	c1 96       	adiw	r24, 0x31	; 49
    2f5c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2f60:	00 e0       	ldi	r16, 0x00	; 0
    2f62:	10 e0       	ldi	r17, 0x00	; 0
    2f64:	98 01       	movw	r18, r16
    2f66:	b9 01       	movw	r22, r18
    2f68:	a8 01       	movw	r20, r16
    2f6a:	ce 01       	movw	r24, r28
    2f6c:	c9 96       	adiw	r24, 0x39	; 57
    2f6e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2f72:	00 e0       	ldi	r16, 0x00	; 0
    2f74:	10 e0       	ldi	r17, 0x00	; 0
    2f76:	98 01       	movw	r18, r16
    2f78:	b9 01       	movw	r22, r18
    2f7a:	a8 01       	movw	r20, r16
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	8f 5b       	subi	r24, 0xBF	; 191
    2f80:	9f 4f       	sbci	r25, 0xFF	; 255
    2f82:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2f86:	00 e0       	ldi	r16, 0x00	; 0
    2f88:	10 e0       	ldi	r17, 0x00	; 0
    2f8a:	98 01       	movw	r18, r16
    2f8c:	40 e0       	ldi	r20, 0x00	; 0
    2f8e:	50 e0       	ldi	r21, 0x00	; 0
    2f90:	60 e8       	ldi	r22, 0x80	; 128
    2f92:	7f e3       	ldi	r23, 0x3F	; 63
    2f94:	ce 01       	movw	r24, r28
    2f96:	87 5b       	subi	r24, 0xB7	; 183
    2f98:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2f9e:	00 e0       	ldi	r16, 0x00	; 0
    2fa0:	10 e0       	ldi	r17, 0x00	; 0
    2fa2:	98 01       	movw	r18, r16
    2fa4:	b9 01       	movw	r22, r18
    2fa6:	a8 01       	movw	r20, r16
    2fa8:	ce 01       	movw	r24, r28
    2faa:	8f 5a       	subi	r24, 0xAF	; 175
    2fac:	9f 4f       	sbci	r25, 0xFF	; 255
    2fae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2fb2:	00 e0       	ldi	r16, 0x00	; 0
    2fb4:	10 e0       	ldi	r17, 0x00	; 0
    2fb6:	98 01       	movw	r18, r16
    2fb8:	b9 01       	movw	r22, r18
    2fba:	a8 01       	movw	r20, r16
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	87 5a       	subi	r24, 0xA7	; 167
    2fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2fc6:	00 e0       	ldi	r16, 0x00	; 0
    2fc8:	10 e0       	ldi	r17, 0x00	; 0
    2fca:	98 01       	movw	r18, r16
    2fcc:	b9 01       	movw	r22, r18
    2fce:	a8 01       	movw	r20, r16
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	8f 59       	subi	r24, 0x9F	; 159
    2fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2fda:	00 e0       	ldi	r16, 0x00	; 0
    2fdc:	10 e0       	ldi	r17, 0x00	; 0
    2fde:	98 01       	movw	r18, r16
    2fe0:	b9 01       	movw	r22, r18
    2fe2:	a8 01       	movw	r20, r16
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	87 59       	subi	r24, 0x97	; 151
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    2fee:	00 e0       	ldi	r16, 0x00	; 0
    2ff0:	10 e0       	ldi	r17, 0x00	; 0
    2ff2:	98 01       	movw	r18, r16
    2ff4:	b9 01       	movw	r22, r18
    2ff6:	a8 01       	movw	r20, r16
    2ff8:	ce 01       	movw	r24, r28
    2ffa:	8f 58       	subi	r24, 0x8F	; 143
    2ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffe:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3002:	00 e0       	ldi	r16, 0x00	; 0
    3004:	10 e0       	ldi	r17, 0x00	; 0
    3006:	98 01       	movw	r18, r16
    3008:	b9 01       	movw	r22, r18
    300a:	a8 01       	movw	r20, r16
    300c:	ce 01       	movw	r24, r28
    300e:	87 58       	subi	r24, 0x87	; 135
    3010:	9f 4f       	sbci	r25, 0xFF	; 255
    3012:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3016:	00 e0       	ldi	r16, 0x00	; 0
    3018:	10 e0       	ldi	r17, 0x00	; 0
    301a:	98 01       	movw	r18, r16
    301c:	b9 01       	movw	r22, r18
    301e:	a8 01       	movw	r20, r16
    3020:	ce 01       	movw	r24, r28
    3022:	8f 57       	subi	r24, 0x7F	; 127
    3024:	9f 4f       	sbci	r25, 0xFF	; 255
    3026:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    302a:	00 e0       	ldi	r16, 0x00	; 0
    302c:	10 e0       	ldi	r17, 0x00	; 0
    302e:	98 01       	movw	r18, r16
    3030:	b9 01       	movw	r22, r18
    3032:	a8 01       	movw	r20, r16
    3034:	ce 01       	movw	r24, r28
    3036:	87 57       	subi	r24, 0x77	; 119
    3038:	9f 4f       	sbci	r25, 0xFF	; 255
    303a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    303e:	00 e0       	ldi	r16, 0x00	; 0
    3040:	10 e0       	ldi	r17, 0x00	; 0
    3042:	98 01       	movw	r18, r16
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	50 e0       	ldi	r21, 0x00	; 0
    3048:	60 e8       	ldi	r22, 0x80	; 128
    304a:	7f e3       	ldi	r23, 0x3F	; 63
    304c:	ce 01       	movw	r24, r28
    304e:	8f 56       	subi	r24, 0x6F	; 111
    3050:	9f 4f       	sbci	r25, 0xFF	; 255
    3052:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3056:	00 e0       	ldi	r16, 0x00	; 0
    3058:	10 e0       	ldi	r17, 0x00	; 0
    305a:	98 01       	movw	r18, r16
    305c:	b9 01       	movw	r22, r18
    305e:	a8 01       	movw	r20, r16
    3060:	ce 01       	movw	r24, r28
    3062:	87 56       	subi	r24, 0x67	; 103
    3064:	9f 4f       	sbci	r25, 0xFF	; 255
    3066:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    306a:	00 e0       	ldi	r16, 0x00	; 0
    306c:	10 e0       	ldi	r17, 0x00	; 0
    306e:	98 01       	movw	r18, r16
    3070:	b9 01       	movw	r22, r18
    3072:	a8 01       	movw	r20, r16
    3074:	ce 01       	movw	r24, r28
    3076:	8f 55       	subi	r24, 0x5F	; 95
    3078:	9f 4f       	sbci	r25, 0xFF	; 255
    307a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    307e:	00 e0       	ldi	r16, 0x00	; 0
    3080:	10 e0       	ldi	r17, 0x00	; 0
    3082:	98 01       	movw	r18, r16
    3084:	b9 01       	movw	r22, r18
    3086:	a8 01       	movw	r20, r16
    3088:	ce 01       	movw	r24, r28
    308a:	87 55       	subi	r24, 0x57	; 87
    308c:	9f 4f       	sbci	r25, 0xFF	; 255
    308e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3092:	00 e0       	ldi	r16, 0x00	; 0
    3094:	10 e0       	ldi	r17, 0x00	; 0
    3096:	98 01       	movw	r18, r16
    3098:	b9 01       	movw	r22, r18
    309a:	a8 01       	movw	r20, r16
    309c:	ce 01       	movw	r24, r28
    309e:	8f 54       	subi	r24, 0x4F	; 79
    30a0:	9f 4f       	sbci	r25, 0xFF	; 255
    30a2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    30a6:	00 e0       	ldi	r16, 0x00	; 0
    30a8:	10 e0       	ldi	r17, 0x00	; 0
    30aa:	98 01       	movw	r18, r16
    30ac:	b9 01       	movw	r22, r18
    30ae:	a8 01       	movw	r20, r16
    30b0:	ce 01       	movw	r24, r28
    30b2:	87 54       	subi	r24, 0x47	; 71
    30b4:	9f 4f       	sbci	r25, 0xFF	; 255
    30b6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    30ba:	00 e0       	ldi	r16, 0x00	; 0
    30bc:	10 e0       	ldi	r17, 0x00	; 0
    30be:	98 01       	movw	r18, r16
    30c0:	b9 01       	movw	r22, r18
    30c2:	a8 01       	movw	r20, r16
    30c4:	ce 01       	movw	r24, r28
    30c6:	8f 53       	subi	r24, 0x3F	; 63
    30c8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ca:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    30ce:	00 e0       	ldi	r16, 0x00	; 0
    30d0:	10 e0       	ldi	r17, 0x00	; 0
    30d2:	98 01       	movw	r18, r16
    30d4:	b9 01       	movw	r22, r18
    30d6:	a8 01       	movw	r20, r16
    30d8:	ce 01       	movw	r24, r28
    30da:	87 53       	subi	r24, 0x37	; 55
    30dc:	9f 4f       	sbci	r25, 0xFF	; 255
    30de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    30e2:	00 e0       	ldi	r16, 0x00	; 0
    30e4:	10 e0       	ldi	r17, 0x00	; 0
    30e6:	98 01       	movw	r18, r16
    30e8:	b9 01       	movw	r22, r18
    30ea:	a8 01       	movw	r20, r16
    30ec:	ce 01       	movw	r24, r28
    30ee:	8f 52       	subi	r24, 0x2F	; 47
    30f0:	9f 4f       	sbci	r25, 0xFF	; 255
    30f2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    30f6:	00 e0       	ldi	r16, 0x00	; 0
    30f8:	10 e0       	ldi	r17, 0x00	; 0
    30fa:	98 01       	movw	r18, r16
    30fc:	40 e0       	ldi	r20, 0x00	; 0
    30fe:	50 e0       	ldi	r21, 0x00	; 0
    3100:	60 e8       	ldi	r22, 0x80	; 128
    3102:	7f e3       	ldi	r23, 0x3F	; 63
    3104:	ce 01       	movw	r24, r28
    3106:	87 52       	subi	r24, 0x27	; 39
    3108:	9f 4f       	sbci	r25, 0xFF	; 255
    310a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    310e:	00 e0       	ldi	r16, 0x00	; 0
    3110:	10 e0       	ldi	r17, 0x00	; 0
    3112:	98 01       	movw	r18, r16
    3114:	b9 01       	movw	r22, r18
    3116:	a8 01       	movw	r20, r16
    3118:	ce 01       	movw	r24, r28
    311a:	8f 51       	subi	r24, 0x1F	; 31
    311c:	9f 4f       	sbci	r25, 0xFF	; 255
    311e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3122:	00 e0       	ldi	r16, 0x00	; 0
    3124:	10 e0       	ldi	r17, 0x00	; 0
    3126:	98 01       	movw	r18, r16
    3128:	b9 01       	movw	r22, r18
    312a:	a8 01       	movw	r20, r16
    312c:	ce 01       	movw	r24, r28
    312e:	87 51       	subi	r24, 0x17	; 23
    3130:	9f 4f       	sbci	r25, 0xFF	; 255
    3132:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3136:	00 e0       	ldi	r16, 0x00	; 0
    3138:	10 e0       	ldi	r17, 0x00	; 0
    313a:	98 01       	movw	r18, r16
    313c:	b9 01       	movw	r22, r18
    313e:	a8 01       	movw	r20, r16
    3140:	ce 01       	movw	r24, r28
    3142:	8f 50       	subi	r24, 0x0F	; 15
    3144:	9f 4f       	sbci	r25, 0xFF	; 255
    3146:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    314a:	00 e0       	ldi	r16, 0x00	; 0
    314c:	10 e0       	ldi	r17, 0x00	; 0
    314e:	98 01       	movw	r18, r16
    3150:	b9 01       	movw	r22, r18
    3152:	a8 01       	movw	r20, r16
    3154:	ce 01       	movw	r24, r28
    3156:	87 50       	subi	r24, 0x07	; 7
    3158:	9f 4f       	sbci	r25, 0xFF	; 255
    315a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    315e:	00 e0       	ldi	r16, 0x00	; 0
    3160:	10 e0       	ldi	r17, 0x00	; 0
    3162:	98 01       	movw	r18, r16
    3164:	b9 01       	movw	r22, r18
    3166:	a8 01       	movw	r20, r16
    3168:	ce 01       	movw	r24, r28
    316a:	8f 5f       	subi	r24, 0xFF	; 255
    316c:	9e 4f       	sbci	r25, 0xFE	; 254
    316e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3172:	00 e0       	ldi	r16, 0x00	; 0
    3174:	10 e0       	ldi	r17, 0x00	; 0
    3176:	98 01       	movw	r18, r16
    3178:	b9 01       	movw	r22, r18
    317a:	a8 01       	movw	r20, r16
    317c:	ce 01       	movw	r24, r28
    317e:	87 5f       	subi	r24, 0xF7	; 247
    3180:	9e 4f       	sbci	r25, 0xFE	; 254
    3182:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3186:	00 e0       	ldi	r16, 0x00	; 0
    3188:	10 e0       	ldi	r17, 0x00	; 0
    318a:	98 01       	movw	r18, r16
    318c:	b9 01       	movw	r22, r18
    318e:	a8 01       	movw	r20, r16
    3190:	ce 01       	movw	r24, r28
    3192:	8f 5e       	subi	r24, 0xEF	; 239
    3194:	9e 4f       	sbci	r25, 0xFE	; 254
    3196:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    319a:	00 e0       	ldi	r16, 0x00	; 0
    319c:	10 e0       	ldi	r17, 0x00	; 0
    319e:	98 01       	movw	r18, r16
    31a0:	b9 01       	movw	r22, r18
    31a2:	a8 01       	movw	r20, r16
    31a4:	ce 01       	movw	r24, r28
    31a6:	87 5e       	subi	r24, 0xE7	; 231
    31a8:	9e 4f       	sbci	r25, 0xFE	; 254
    31aa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    31ae:	00 e0       	ldi	r16, 0x00	; 0
    31b0:	10 e0       	ldi	r17, 0x00	; 0
    31b2:	98 01       	movw	r18, r16
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	50 e0       	ldi	r21, 0x00	; 0
    31b8:	60 e8       	ldi	r22, 0x80	; 128
    31ba:	7f e3       	ldi	r23, 0x3F	; 63
    31bc:	ce 01       	movw	r24, r28
    31be:	8f 5d       	subi	r24, 0xDF	; 223
    31c0:	9e 4f       	sbci	r25, 0xFE	; 254
    31c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    31c6:	00 e0       	ldi	r16, 0x00	; 0
    31c8:	10 e0       	ldi	r17, 0x00	; 0
    31ca:	98 01       	movw	r18, r16
    31cc:	b9 01       	movw	r22, r18
    31ce:	a8 01       	movw	r20, r16
    31d0:	ce 01       	movw	r24, r28
    31d2:	87 5d       	subi	r24, 0xD7	; 215
    31d4:	9e 4f       	sbci	r25, 0xFE	; 254
    31d6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    31da:	00 e0       	ldi	r16, 0x00	; 0
    31dc:	10 e0       	ldi	r17, 0x00	; 0
    31de:	98 01       	movw	r18, r16
    31e0:	b9 01       	movw	r22, r18
    31e2:	a8 01       	movw	r20, r16
    31e4:	ce 01       	movw	r24, r28
    31e6:	8f 5c       	subi	r24, 0xCF	; 207
    31e8:	9e 4f       	sbci	r25, 0xFE	; 254
    31ea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    31ee:	00 e0       	ldi	r16, 0x00	; 0
    31f0:	10 e0       	ldi	r17, 0x00	; 0
    31f2:	98 01       	movw	r18, r16
    31f4:	b9 01       	movw	r22, r18
    31f6:	a8 01       	movw	r20, r16
    31f8:	ce 01       	movw	r24, r28
    31fa:	87 5c       	subi	r24, 0xC7	; 199
    31fc:	9e 4f       	sbci	r25, 0xFE	; 254
    31fe:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3202:	00 e0       	ldi	r16, 0x00	; 0
    3204:	10 e0       	ldi	r17, 0x00	; 0
    3206:	98 01       	movw	r18, r16
    3208:	b9 01       	movw	r22, r18
    320a:	a8 01       	movw	r20, r16
    320c:	ce 01       	movw	r24, r28
    320e:	8f 5b       	subi	r24, 0xBF	; 191
    3210:	9e 4f       	sbci	r25, 0xFE	; 254
    3212:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3216:	00 e0       	ldi	r16, 0x00	; 0
    3218:	10 e0       	ldi	r17, 0x00	; 0
    321a:	98 01       	movw	r18, r16
    321c:	b9 01       	movw	r22, r18
    321e:	a8 01       	movw	r20, r16
    3220:	ce 01       	movw	r24, r28
    3222:	87 5b       	subi	r24, 0xB7	; 183
    3224:	9e 4f       	sbci	r25, 0xFE	; 254
    3226:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    322a:	00 e0       	ldi	r16, 0x00	; 0
    322c:	10 e0       	ldi	r17, 0x00	; 0
    322e:	98 01       	movw	r18, r16
    3230:	b9 01       	movw	r22, r18
    3232:	a8 01       	movw	r20, r16
    3234:	ce 01       	movw	r24, r28
    3236:	8f 5a       	subi	r24, 0xAF	; 175
    3238:	9e 4f       	sbci	r25, 0xFE	; 254
    323a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    323e:	00 e0       	ldi	r16, 0x00	; 0
    3240:	10 e0       	ldi	r17, 0x00	; 0
    3242:	98 01       	movw	r18, r16
    3244:	b9 01       	movw	r22, r18
    3246:	a8 01       	movw	r20, r16
    3248:	ce 01       	movw	r24, r28
    324a:	87 5a       	subi	r24, 0xA7	; 167
    324c:	9e 4f       	sbci	r25, 0xFE	; 254
    324e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3252:	00 e0       	ldi	r16, 0x00	; 0
    3254:	10 e0       	ldi	r17, 0x00	; 0
    3256:	98 01       	movw	r18, r16
    3258:	b9 01       	movw	r22, r18
    325a:	a8 01       	movw	r20, r16
    325c:	ce 01       	movw	r24, r28
    325e:	8f 59       	subi	r24, 0x9F	; 159
    3260:	9e 4f       	sbci	r25, 0xFE	; 254
    3262:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3266:	00 e0       	ldi	r16, 0x00	; 0
    3268:	10 e0       	ldi	r17, 0x00	; 0
    326a:	98 01       	movw	r18, r16
    326c:	40 e0       	ldi	r20, 0x00	; 0
    326e:	50 e0       	ldi	r21, 0x00	; 0
    3270:	60 e8       	ldi	r22, 0x80	; 128
    3272:	7f e3       	ldi	r23, 0x3F	; 63
    3274:	ce 01       	movw	r24, r28
    3276:	87 59       	subi	r24, 0x97	; 151
    3278:	9e 4f       	sbci	r25, 0xFE	; 254
    327a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    327e:	00 e0       	ldi	r16, 0x00	; 0
    3280:	10 e0       	ldi	r17, 0x00	; 0
    3282:	98 01       	movw	r18, r16
    3284:	b9 01       	movw	r22, r18
    3286:	a8 01       	movw	r20, r16
    3288:	ce 01       	movw	r24, r28
    328a:	8f 58       	subi	r24, 0x8F	; 143
    328c:	9e 4f       	sbci	r25, 0xFE	; 254
    328e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3292:	00 e0       	ldi	r16, 0x00	; 0
    3294:	10 e0       	ldi	r17, 0x00	; 0
    3296:	98 01       	movw	r18, r16
    3298:	b9 01       	movw	r22, r18
    329a:	a8 01       	movw	r20, r16
    329c:	ce 01       	movw	r24, r28
    329e:	87 58       	subi	r24, 0x87	; 135
    32a0:	9e 4f       	sbci	r25, 0xFE	; 254
    32a2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    32a6:	00 e0       	ldi	r16, 0x00	; 0
    32a8:	10 e0       	ldi	r17, 0x00	; 0
    32aa:	98 01       	movw	r18, r16
    32ac:	b9 01       	movw	r22, r18
    32ae:	a8 01       	movw	r20, r16
    32b0:	ce 01       	movw	r24, r28
    32b2:	8f 57       	subi	r24, 0x7F	; 127
    32b4:	9e 4f       	sbci	r25, 0xFE	; 254
    32b6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    32ba:	00 e0       	ldi	r16, 0x00	; 0
    32bc:	10 e0       	ldi	r17, 0x00	; 0
    32be:	98 01       	movw	r18, r16
    32c0:	b9 01       	movw	r22, r18
    32c2:	a8 01       	movw	r20, r16
    32c4:	ce 01       	movw	r24, r28
    32c6:	87 57       	subi	r24, 0x77	; 119
    32c8:	9e 4f       	sbci	r25, 0xFE	; 254
    32ca:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    32ce:	00 e0       	ldi	r16, 0x00	; 0
    32d0:	10 e0       	ldi	r17, 0x00	; 0
    32d2:	98 01       	movw	r18, r16
    32d4:	b9 01       	movw	r22, r18
    32d6:	a8 01       	movw	r20, r16
    32d8:	ce 01       	movw	r24, r28
    32da:	8f 56       	subi	r24, 0x6F	; 111
    32dc:	9e 4f       	sbci	r25, 0xFE	; 254
    32de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    32e2:	00 e0       	ldi	r16, 0x00	; 0
    32e4:	10 e0       	ldi	r17, 0x00	; 0
    32e6:	98 01       	movw	r18, r16
    32e8:	b9 01       	movw	r22, r18
    32ea:	a8 01       	movw	r20, r16
    32ec:	ce 01       	movw	r24, r28
    32ee:	87 56       	subi	r24, 0x67	; 103
    32f0:	9e 4f       	sbci	r25, 0xFE	; 254
    32f2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    32f6:	00 e0       	ldi	r16, 0x00	; 0
    32f8:	10 e0       	ldi	r17, 0x00	; 0
    32fa:	98 01       	movw	r18, r16
    32fc:	b9 01       	movw	r22, r18
    32fe:	a8 01       	movw	r20, r16
    3300:	ce 01       	movw	r24, r28
    3302:	8f 55       	subi	r24, 0x5F	; 95
    3304:	9e 4f       	sbci	r25, 0xFE	; 254
    3306:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    330a:	00 e0       	ldi	r16, 0x00	; 0
    330c:	10 e0       	ldi	r17, 0x00	; 0
    330e:	98 01       	movw	r18, r16
    3310:	b9 01       	movw	r22, r18
    3312:	a8 01       	movw	r20, r16
    3314:	ce 01       	movw	r24, r28
    3316:	87 55       	subi	r24, 0x57	; 87
    3318:	9e 4f       	sbci	r25, 0xFE	; 254
    331a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    331e:	00 e0       	ldi	r16, 0x00	; 0
    3320:	10 e0       	ldi	r17, 0x00	; 0
    3322:	98 01       	movw	r18, r16
    3324:	b9 01       	movw	r22, r18
    3326:	a8 01       	movw	r20, r16
    3328:	ce 01       	movw	r24, r28
    332a:	8f 54       	subi	r24, 0x4F	; 79
    332c:	9e 4f       	sbci	r25, 0xFE	; 254
    332e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3332:	00 e0       	ldi	r16, 0x00	; 0
    3334:	10 e0       	ldi	r17, 0x00	; 0
    3336:	98 01       	movw	r18, r16
    3338:	40 e0       	ldi	r20, 0x00	; 0
    333a:	50 e0       	ldi	r21, 0x00	; 0
    333c:	60 e8       	ldi	r22, 0x80	; 128
    333e:	7f e3       	ldi	r23, 0x3F	; 63
    3340:	ce 01       	movw	r24, r28
    3342:	87 54       	subi	r24, 0x47	; 71
    3344:	9e 4f       	sbci	r25, 0xFE	; 254
    3346:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    334a:	00 e0       	ldi	r16, 0x00	; 0
    334c:	10 e0       	ldi	r17, 0x00	; 0
    334e:	98 01       	movw	r18, r16
    3350:	b9 01       	movw	r22, r18
    3352:	a8 01       	movw	r20, r16
    3354:	ce 01       	movw	r24, r28
    3356:	8f 53       	subi	r24, 0x3F	; 63
    3358:	9e 4f       	sbci	r25, 0xFE	; 254
    335a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    335e:	00 e0       	ldi	r16, 0x00	; 0
    3360:	10 e0       	ldi	r17, 0x00	; 0
    3362:	98 01       	movw	r18, r16
    3364:	b9 01       	movw	r22, r18
    3366:	a8 01       	movw	r20, r16
    3368:	ce 01       	movw	r24, r28
    336a:	87 53       	subi	r24, 0x37	; 55
    336c:	9e 4f       	sbci	r25, 0xFE	; 254
    336e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3372:	00 e0       	ldi	r16, 0x00	; 0
    3374:	10 e0       	ldi	r17, 0x00	; 0
    3376:	98 01       	movw	r18, r16
    3378:	b9 01       	movw	r22, r18
    337a:	a8 01       	movw	r20, r16
    337c:	ce 01       	movw	r24, r28
    337e:	8f 52       	subi	r24, 0x2F	; 47
    3380:	9e 4f       	sbci	r25, 0xFE	; 254
    3382:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3386:	00 e0       	ldi	r16, 0x00	; 0
    3388:	10 e0       	ldi	r17, 0x00	; 0
    338a:	98 01       	movw	r18, r16
    338c:	b9 01       	movw	r22, r18
    338e:	a8 01       	movw	r20, r16
    3390:	ce 01       	movw	r24, r28
    3392:	87 52       	subi	r24, 0x27	; 39
    3394:	9e 4f       	sbci	r25, 0xFE	; 254
    3396:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    339a:	00 e0       	ldi	r16, 0x00	; 0
    339c:	10 e0       	ldi	r17, 0x00	; 0
    339e:	98 01       	movw	r18, r16
    33a0:	b9 01       	movw	r22, r18
    33a2:	a8 01       	movw	r20, r16
    33a4:	ce 01       	movw	r24, r28
    33a6:	8f 51       	subi	r24, 0x1F	; 31
    33a8:	9e 4f       	sbci	r25, 0xFE	; 254
    33aa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    33ae:	00 e0       	ldi	r16, 0x00	; 0
    33b0:	10 e0       	ldi	r17, 0x00	; 0
    33b2:	98 01       	movw	r18, r16
    33b4:	b9 01       	movw	r22, r18
    33b6:	a8 01       	movw	r20, r16
    33b8:	ce 01       	movw	r24, r28
    33ba:	87 51       	subi	r24, 0x17	; 23
    33bc:	9e 4f       	sbci	r25, 0xFE	; 254
    33be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    33c2:	00 e0       	ldi	r16, 0x00	; 0
    33c4:	10 e0       	ldi	r17, 0x00	; 0
    33c6:	98 01       	movw	r18, r16
    33c8:	40 e0       	ldi	r20, 0x00	; 0
    33ca:	50 e0       	ldi	r21, 0x00	; 0
    33cc:	60 e8       	ldi	r22, 0x80	; 128
    33ce:	7f e3       	ldi	r23, 0x3F	; 63
    33d0:	ce 01       	movw	r24, r28
    33d2:	8f 50       	subi	r24, 0x0F	; 15
    33d4:	9e 4f       	sbci	r25, 0xFE	; 254
    33d6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    33da:	00 e0       	ldi	r16, 0x00	; 0
    33dc:	10 e0       	ldi	r17, 0x00	; 0
    33de:	98 01       	movw	r18, r16
    33e0:	b9 01       	movw	r22, r18
    33e2:	a8 01       	movw	r20, r16
    33e4:	ce 01       	movw	r24, r28
    33e6:	87 50       	subi	r24, 0x07	; 7
    33e8:	9e 4f       	sbci	r25, 0xFE	; 254
    33ea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    33ee:	c9 5f       	subi	r28, 0xF9	; 249
    33f0:	dd 4f       	sbci	r29, 0xFD	; 253
    33f2:	79 82       	std	Y+1, r7	; 0x01
    33f4:	68 82       	st	Y, r6
    33f6:	c7 50       	subi	r28, 0x07	; 7
    33f8:	d2 40       	sbci	r29, 0x02	; 2
    33fa:	c7 5f       	subi	r28, 0xF7	; 247
    33fc:	dd 4f       	sbci	r29, 0xFD	; 253
    33fe:	99 82       	std	Y+1, r9	; 0x01
    3400:	88 82       	st	Y, r8
    3402:	c9 50       	subi	r28, 0x09	; 9
    3404:	d2 40       	sbci	r29, 0x02	; 2
    3406:	c5 5f       	subi	r28, 0xF5	; 245
    3408:	dd 4f       	sbci	r29, 0xFD	; 253
    340a:	f9 82       	std	Y+1, r15	; 0x01
    340c:	e8 82       	st	Y, r14
    340e:	cb 50       	subi	r28, 0x0B	; 11
    3410:	d2 40       	sbci	r29, 0x02	; 2
    3412:	cf 5f       	subi	r28, 0xFF	; 255
    3414:	dd 4f       	sbci	r29, 0xFD	; 253
    3416:	59 82       	std	Y+1, r5	; 0x01
    3418:	48 82       	st	Y, r4
    341a:	c1 50       	subi	r28, 0x01	; 1
    341c:	d2 40       	sbci	r29, 0x02	; 2
    341e:	cd 5f       	subi	r28, 0xFD	; 253
    3420:	dd 4f       	sbci	r29, 0xFD	; 253
    3422:	39 82       	std	Y+1, r3	; 0x01
    3424:	28 82       	st	Y, r2
    3426:	c3 50       	subi	r28, 0x03	; 3
    3428:	d2 40       	sbci	r29, 0x02	; 2
    342a:	cb 5f       	subi	r28, 0xFB	; 251
    342c:	dd 4f       	sbci	r29, 0xFD	; 253
    342e:	d9 82       	std	Y+1, r13	; 0x01
    3430:	c8 82       	st	Y, r12
    3432:	c5 50       	subi	r28, 0x05	; 5
    3434:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),tof_matrix),QB_SIZE3);
    3436:	9e 01       	movw	r18, r28
    3438:	2f 5f       	subi	r18, 0xFF	; 255
    343a:	3d 4f       	sbci	r19, 0xFD	; 253
    343c:	ae 01       	movw	r20, r28
    343e:	49 5f       	subi	r20, 0xF9	; 249
    3440:	5d 4f       	sbci	r21, 0xFD	; 253
    3442:	63 e0       	ldi	r22, 0x03	; 3
    3444:	70 e0       	ldi	r23, 0x00	; 0
    3446:	c5 01       	movw	r24, r10
    3448:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    344c:	ae 01       	movw	r20, r28
    344e:	4f 5f       	subi	r20, 0xFF	; 255
    3450:	5f 4f       	sbci	r21, 0xFF	; 255
    3452:	bc 01       	movw	r22, r24
    3454:	c5 01       	movw	r24, r10
    3456:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    345a:	43 e0       	ldi	r20, 0x03	; 3
    345c:	50 e0       	ldi	r21, 0x00	; 0
    345e:	bc 01       	movw	r22, r24
    3460:	c5 01       	movw	r24, r10
    3462:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
}
    3466:	c4 5f       	subi	r28, 0xF4	; 244
    3468:	dd 4f       	sbci	r29, 0xFD	; 253
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	ff 90       	pop	r15
    347e:	ef 90       	pop	r14
    3480:	df 90       	pop	r13
    3482:	cf 90       	pop	r12
    3484:	bf 90       	pop	r11
    3486:	af 90       	pop	r10
    3488:	9f 90       	pop	r9
    348a:	8f 90       	pop	r8
    348c:	7f 90       	pop	r7
    348e:	6f 90       	pop	r6
    3490:	5f 90       	pop	r5
    3492:	4f 90       	pop	r4
    3494:	3f 90       	pop	r3
    3496:	2f 90       	pop	r2
    3498:	08 95       	ret

0000349a <_ZN5Gates3DEUEiiiiiii>:
int * Gates::DEU(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3,int delta){
    349a:	2f 92       	push	r2
    349c:	3f 92       	push	r3
    349e:	4f 92       	push	r4
    34a0:	5f 92       	push	r5
    34a2:	6f 92       	push	r6
    34a4:	7f 92       	push	r7
    34a6:	8f 92       	push	r8
    34a8:	9f 92       	push	r9
    34aa:	af 92       	push	r10
    34ac:	bf 92       	push	r11
    34ae:	cf 92       	push	r12
    34b0:	df 92       	push	r13
    34b2:	ef 92       	push	r14
    34b4:	ff 92       	push	r15
    34b6:	0f 93       	push	r16
    34b8:	1f 93       	push	r17
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	c4 51       	subi	r28, 0x14	; 20
    34c4:	d2 40       	sbci	r29, 0x02	; 2
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	c3 5f       	subi	r28, 0xF3	; 243
    34d2:	dd 4f       	sbci	r29, 0xFD	; 253
    34d4:	99 83       	std	Y+1, r25	; 0x01
    34d6:	88 83       	st	Y, r24
    34d8:	cd 50       	subi	r28, 0x0D	; 13
    34da:	d2 40       	sbci	r29, 0x02	; 2
    34dc:	2b 01       	movw	r4, r22
    34de:	c1 5f       	subi	r28, 0xF1	; 241
    34e0:	dd 4f       	sbci	r29, 0xFD	; 253
    34e2:	59 83       	std	Y+1, r21	; 0x01
    34e4:	48 83       	st	Y, r20
    34e6:	cf 50       	subi	r28, 0x0F	; 15
    34e8:	d2 40       	sbci	r29, 0x02	; 2
    34ea:	39 01       	movw	r6, r18
    34ec:	cf 5e       	subi	r28, 0xEF	; 239
    34ee:	dd 4f       	sbci	r29, 0xFD	; 253
    34f0:	19 83       	std	Y+1, r17	; 0x01
    34f2:	08 83       	st	Y, r16
    34f4:	c1 51       	subi	r28, 0x11	; 17
    34f6:	d2 40       	sbci	r29, 0x02	; 2
    34f8:	17 01       	movw	r2, r14
    34fa:	cd 5e       	subi	r28, 0xED	; 237
    34fc:	dd 4f       	sbci	r29, 0xFD	; 253
    34fe:	d9 82       	std	Y+1, r13	; 0x01
    3500:	c8 82       	st	Y, r12
    3502:	c3 51       	subi	r28, 0x13	; 19
    3504:	d2 40       	sbci	r29, 0x02	; 2
	float delta_float=(delta*M_PI)/180;
    3506:	b5 01       	movw	r22, r10
    3508:	88 27       	eor	r24, r24
    350a:	77 fd       	sbrc	r23, 7
    350c:	80 95       	com	r24
    350e:	98 2f       	mov	r25, r24
    3510:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
    3514:	2b ed       	ldi	r18, 0xDB	; 219
    3516:	3f e0       	ldi	r19, 0x0F	; 15
    3518:	49 e4       	ldi	r20, 0x49	; 73
    351a:	50 e4       	ldi	r21, 0x40	; 64
    351c:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	44 e3       	ldi	r20, 0x34	; 52
    3526:	53 e4       	ldi	r21, 0x43	; 67
    3528:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
    352c:	4b 01       	movw	r8, r22
    352e:	5c 01       	movw	r10, r24
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    3530:	00 e0       	ldi	r16, 0x00	; 0
    3532:	10 e0       	ldi	r17, 0x00	; 0
    3534:	98 01       	movw	r18, r16
    3536:	40 e0       	ldi	r20, 0x00	; 0
    3538:	50 e0       	ldi	r21, 0x00	; 0
    353a:	60 e8       	ldi	r22, 0x80	; 128
    353c:	7f e3       	ldi	r23, 0x3F	; 63
    353e:	ce 01       	movw	r24, r28
    3540:	01 96       	adiw	r24, 0x01	; 1
    3542:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3546:	00 e0       	ldi	r16, 0x00	; 0
    3548:	10 e0       	ldi	r17, 0x00	; 0
    354a:	98 01       	movw	r18, r16
    354c:	b9 01       	movw	r22, r18
    354e:	a8 01       	movw	r20, r16
    3550:	ce 01       	movw	r24, r28
    3552:	09 96       	adiw	r24, 0x09	; 9
    3554:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3558:	00 e0       	ldi	r16, 0x00	; 0
    355a:	10 e0       	ldi	r17, 0x00	; 0
    355c:	98 01       	movw	r18, r16
    355e:	b9 01       	movw	r22, r18
    3560:	a8 01       	movw	r20, r16
    3562:	ce 01       	movw	r24, r28
    3564:	41 96       	adiw	r24, 0x11	; 17
    3566:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    356a:	00 e0       	ldi	r16, 0x00	; 0
    356c:	10 e0       	ldi	r17, 0x00	; 0
    356e:	98 01       	movw	r18, r16
    3570:	b9 01       	movw	r22, r18
    3572:	a8 01       	movw	r20, r16
    3574:	ce 01       	movw	r24, r28
    3576:	49 96       	adiw	r24, 0x19	; 25
    3578:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    357c:	00 e0       	ldi	r16, 0x00	; 0
    357e:	10 e0       	ldi	r17, 0x00	; 0
    3580:	98 01       	movw	r18, r16
    3582:	b9 01       	movw	r22, r18
    3584:	a8 01       	movw	r20, r16
    3586:	ce 01       	movw	r24, r28
    3588:	81 96       	adiw	r24, 0x21	; 33
    358a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    358e:	00 e0       	ldi	r16, 0x00	; 0
    3590:	10 e0       	ldi	r17, 0x00	; 0
    3592:	98 01       	movw	r18, r16
    3594:	b9 01       	movw	r22, r18
    3596:	a8 01       	movw	r20, r16
    3598:	ce 01       	movw	r24, r28
    359a:	89 96       	adiw	r24, 0x29	; 41
    359c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    35a0:	00 e0       	ldi	r16, 0x00	; 0
    35a2:	10 e0       	ldi	r17, 0x00	; 0
    35a4:	98 01       	movw	r18, r16
    35a6:	b9 01       	movw	r22, r18
    35a8:	a8 01       	movw	r20, r16
    35aa:	ce 01       	movw	r24, r28
    35ac:	c1 96       	adiw	r24, 0x31	; 49
    35ae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    35b2:	00 e0       	ldi	r16, 0x00	; 0
    35b4:	10 e0       	ldi	r17, 0x00	; 0
    35b6:	98 01       	movw	r18, r16
    35b8:	b9 01       	movw	r22, r18
    35ba:	a8 01       	movw	r20, r16
    35bc:	ce 01       	movw	r24, r28
    35be:	c9 96       	adiw	r24, 0x39	; 57
    35c0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    35c4:	00 e0       	ldi	r16, 0x00	; 0
    35c6:	10 e0       	ldi	r17, 0x00	; 0
    35c8:	98 01       	movw	r18, r16
    35ca:	b9 01       	movw	r22, r18
    35cc:	a8 01       	movw	r20, r16
    35ce:	ce 01       	movw	r24, r28
    35d0:	8f 5b       	subi	r24, 0xBF	; 191
    35d2:	9f 4f       	sbci	r25, 0xFF	; 255
    35d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    35d8:	00 e0       	ldi	r16, 0x00	; 0
    35da:	10 e0       	ldi	r17, 0x00	; 0
    35dc:	98 01       	movw	r18, r16
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	60 e8       	ldi	r22, 0x80	; 128
    35e4:	7f e3       	ldi	r23, 0x3F	; 63
    35e6:	ce 01       	movw	r24, r28
    35e8:	87 5b       	subi	r24, 0xB7	; 183
    35ea:	9f 4f       	sbci	r25, 0xFF	; 255
    35ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    35f0:	00 e0       	ldi	r16, 0x00	; 0
    35f2:	10 e0       	ldi	r17, 0x00	; 0
    35f4:	98 01       	movw	r18, r16
    35f6:	b9 01       	movw	r22, r18
    35f8:	a8 01       	movw	r20, r16
    35fa:	ce 01       	movw	r24, r28
    35fc:	8f 5a       	subi	r24, 0xAF	; 175
    35fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3600:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3604:	00 e0       	ldi	r16, 0x00	; 0
    3606:	10 e0       	ldi	r17, 0x00	; 0
    3608:	98 01       	movw	r18, r16
    360a:	b9 01       	movw	r22, r18
    360c:	a8 01       	movw	r20, r16
    360e:	ce 01       	movw	r24, r28
    3610:	87 5a       	subi	r24, 0xA7	; 167
    3612:	9f 4f       	sbci	r25, 0xFF	; 255
    3614:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3618:	00 e0       	ldi	r16, 0x00	; 0
    361a:	10 e0       	ldi	r17, 0x00	; 0
    361c:	98 01       	movw	r18, r16
    361e:	b9 01       	movw	r22, r18
    3620:	a8 01       	movw	r20, r16
    3622:	ce 01       	movw	r24, r28
    3624:	8f 59       	subi	r24, 0x9F	; 159
    3626:	9f 4f       	sbci	r25, 0xFF	; 255
    3628:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    362c:	00 e0       	ldi	r16, 0x00	; 0
    362e:	10 e0       	ldi	r17, 0x00	; 0
    3630:	98 01       	movw	r18, r16
    3632:	b9 01       	movw	r22, r18
    3634:	a8 01       	movw	r20, r16
    3636:	ce 01       	movw	r24, r28
    3638:	87 59       	subi	r24, 0x97	; 151
    363a:	9f 4f       	sbci	r25, 0xFF	; 255
    363c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3640:	00 e0       	ldi	r16, 0x00	; 0
    3642:	10 e0       	ldi	r17, 0x00	; 0
    3644:	98 01       	movw	r18, r16
    3646:	b9 01       	movw	r22, r18
    3648:	a8 01       	movw	r20, r16
    364a:	ce 01       	movw	r24, r28
    364c:	8f 58       	subi	r24, 0x8F	; 143
    364e:	9f 4f       	sbci	r25, 0xFF	; 255
    3650:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3654:	00 e0       	ldi	r16, 0x00	; 0
    3656:	10 e0       	ldi	r17, 0x00	; 0
    3658:	98 01       	movw	r18, r16
    365a:	b9 01       	movw	r22, r18
    365c:	a8 01       	movw	r20, r16
    365e:	ce 01       	movw	r24, r28
    3660:	87 58       	subi	r24, 0x87	; 135
    3662:	9f 4f       	sbci	r25, 0xFF	; 255
    3664:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3668:	00 e0       	ldi	r16, 0x00	; 0
    366a:	10 e0       	ldi	r17, 0x00	; 0
    366c:	98 01       	movw	r18, r16
    366e:	b9 01       	movw	r22, r18
    3670:	a8 01       	movw	r20, r16
    3672:	ce 01       	movw	r24, r28
    3674:	8f 57       	subi	r24, 0x7F	; 127
    3676:	9f 4f       	sbci	r25, 0xFF	; 255
    3678:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    367c:	00 e0       	ldi	r16, 0x00	; 0
    367e:	10 e0       	ldi	r17, 0x00	; 0
    3680:	98 01       	movw	r18, r16
    3682:	b9 01       	movw	r22, r18
    3684:	a8 01       	movw	r20, r16
    3686:	ce 01       	movw	r24, r28
    3688:	87 57       	subi	r24, 0x77	; 119
    368a:	9f 4f       	sbci	r25, 0xFF	; 255
    368c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3690:	00 e0       	ldi	r16, 0x00	; 0
    3692:	10 e0       	ldi	r17, 0x00	; 0
    3694:	98 01       	movw	r18, r16
    3696:	40 e0       	ldi	r20, 0x00	; 0
    3698:	50 e0       	ldi	r21, 0x00	; 0
    369a:	60 e8       	ldi	r22, 0x80	; 128
    369c:	7f e3       	ldi	r23, 0x3F	; 63
    369e:	ce 01       	movw	r24, r28
    36a0:	8f 56       	subi	r24, 0x6F	; 111
    36a2:	9f 4f       	sbci	r25, 0xFF	; 255
    36a4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    36a8:	00 e0       	ldi	r16, 0x00	; 0
    36aa:	10 e0       	ldi	r17, 0x00	; 0
    36ac:	98 01       	movw	r18, r16
    36ae:	b9 01       	movw	r22, r18
    36b0:	a8 01       	movw	r20, r16
    36b2:	ce 01       	movw	r24, r28
    36b4:	87 56       	subi	r24, 0x67	; 103
    36b6:	9f 4f       	sbci	r25, 0xFF	; 255
    36b8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    36bc:	00 e0       	ldi	r16, 0x00	; 0
    36be:	10 e0       	ldi	r17, 0x00	; 0
    36c0:	98 01       	movw	r18, r16
    36c2:	b9 01       	movw	r22, r18
    36c4:	a8 01       	movw	r20, r16
    36c6:	ce 01       	movw	r24, r28
    36c8:	8f 55       	subi	r24, 0x5F	; 95
    36ca:	9f 4f       	sbci	r25, 0xFF	; 255
    36cc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    36d0:	00 e0       	ldi	r16, 0x00	; 0
    36d2:	10 e0       	ldi	r17, 0x00	; 0
    36d4:	98 01       	movw	r18, r16
    36d6:	b9 01       	movw	r22, r18
    36d8:	a8 01       	movw	r20, r16
    36da:	ce 01       	movw	r24, r28
    36dc:	87 55       	subi	r24, 0x57	; 87
    36de:	9f 4f       	sbci	r25, 0xFF	; 255
    36e0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    36e4:	00 e0       	ldi	r16, 0x00	; 0
    36e6:	10 e0       	ldi	r17, 0x00	; 0
    36e8:	98 01       	movw	r18, r16
    36ea:	b9 01       	movw	r22, r18
    36ec:	a8 01       	movw	r20, r16
    36ee:	ce 01       	movw	r24, r28
    36f0:	8f 54       	subi	r24, 0x4F	; 79
    36f2:	9f 4f       	sbci	r25, 0xFF	; 255
    36f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    36f8:	00 e0       	ldi	r16, 0x00	; 0
    36fa:	10 e0       	ldi	r17, 0x00	; 0
    36fc:	98 01       	movw	r18, r16
    36fe:	b9 01       	movw	r22, r18
    3700:	a8 01       	movw	r20, r16
    3702:	ce 01       	movw	r24, r28
    3704:	87 54       	subi	r24, 0x47	; 71
    3706:	9f 4f       	sbci	r25, 0xFF	; 255
    3708:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    370c:	00 e0       	ldi	r16, 0x00	; 0
    370e:	10 e0       	ldi	r17, 0x00	; 0
    3710:	98 01       	movw	r18, r16
    3712:	b9 01       	movw	r22, r18
    3714:	a8 01       	movw	r20, r16
    3716:	ce 01       	movw	r24, r28
    3718:	8f 53       	subi	r24, 0x3F	; 63
    371a:	9f 4f       	sbci	r25, 0xFF	; 255
    371c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3720:	00 e0       	ldi	r16, 0x00	; 0
    3722:	10 e0       	ldi	r17, 0x00	; 0
    3724:	98 01       	movw	r18, r16
    3726:	b9 01       	movw	r22, r18
    3728:	a8 01       	movw	r20, r16
    372a:	ce 01       	movw	r24, r28
    372c:	87 53       	subi	r24, 0x37	; 55
    372e:	9f 4f       	sbci	r25, 0xFF	; 255
    3730:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3734:	00 e0       	ldi	r16, 0x00	; 0
    3736:	10 e0       	ldi	r17, 0x00	; 0
    3738:	98 01       	movw	r18, r16
    373a:	b9 01       	movw	r22, r18
    373c:	a8 01       	movw	r20, r16
    373e:	ce 01       	movw	r24, r28
    3740:	8f 52       	subi	r24, 0x2F	; 47
    3742:	9f 4f       	sbci	r25, 0xFF	; 255
    3744:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3748:	00 e0       	ldi	r16, 0x00	; 0
    374a:	10 e0       	ldi	r17, 0x00	; 0
    374c:	98 01       	movw	r18, r16
    374e:	40 e0       	ldi	r20, 0x00	; 0
    3750:	50 e0       	ldi	r21, 0x00	; 0
    3752:	60 e8       	ldi	r22, 0x80	; 128
    3754:	7f e3       	ldi	r23, 0x3F	; 63
    3756:	ce 01       	movw	r24, r28
    3758:	87 52       	subi	r24, 0x27	; 39
    375a:	9f 4f       	sbci	r25, 0xFF	; 255
    375c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3760:	00 e0       	ldi	r16, 0x00	; 0
    3762:	10 e0       	ldi	r17, 0x00	; 0
    3764:	98 01       	movw	r18, r16
    3766:	b9 01       	movw	r22, r18
    3768:	a8 01       	movw	r20, r16
    376a:	ce 01       	movw	r24, r28
    376c:	8f 51       	subi	r24, 0x1F	; 31
    376e:	9f 4f       	sbci	r25, 0xFF	; 255
    3770:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3774:	00 e0       	ldi	r16, 0x00	; 0
    3776:	10 e0       	ldi	r17, 0x00	; 0
    3778:	98 01       	movw	r18, r16
    377a:	b9 01       	movw	r22, r18
    377c:	a8 01       	movw	r20, r16
    377e:	ce 01       	movw	r24, r28
    3780:	87 51       	subi	r24, 0x17	; 23
    3782:	9f 4f       	sbci	r25, 0xFF	; 255
    3784:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3788:	00 e0       	ldi	r16, 0x00	; 0
    378a:	10 e0       	ldi	r17, 0x00	; 0
    378c:	98 01       	movw	r18, r16
    378e:	b9 01       	movw	r22, r18
    3790:	a8 01       	movw	r20, r16
    3792:	ce 01       	movw	r24, r28
    3794:	8f 50       	subi	r24, 0x0F	; 15
    3796:	9f 4f       	sbci	r25, 0xFF	; 255
    3798:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    379c:	00 e0       	ldi	r16, 0x00	; 0
    379e:	10 e0       	ldi	r17, 0x00	; 0
    37a0:	98 01       	movw	r18, r16
    37a2:	b9 01       	movw	r22, r18
    37a4:	a8 01       	movw	r20, r16
    37a6:	ce 01       	movw	r24, r28
    37a8:	87 50       	subi	r24, 0x07	; 7
    37aa:	9f 4f       	sbci	r25, 0xFF	; 255
    37ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    37b0:	00 e0       	ldi	r16, 0x00	; 0
    37b2:	10 e0       	ldi	r17, 0x00	; 0
    37b4:	98 01       	movw	r18, r16
    37b6:	b9 01       	movw	r22, r18
    37b8:	a8 01       	movw	r20, r16
    37ba:	ce 01       	movw	r24, r28
    37bc:	8f 5f       	subi	r24, 0xFF	; 255
    37be:	9e 4f       	sbci	r25, 0xFE	; 254
    37c0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    37c4:	00 e0       	ldi	r16, 0x00	; 0
    37c6:	10 e0       	ldi	r17, 0x00	; 0
    37c8:	98 01       	movw	r18, r16
    37ca:	b9 01       	movw	r22, r18
    37cc:	a8 01       	movw	r20, r16
    37ce:	ce 01       	movw	r24, r28
    37d0:	87 5f       	subi	r24, 0xF7	; 247
    37d2:	9e 4f       	sbci	r25, 0xFE	; 254
    37d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    37d8:	00 e0       	ldi	r16, 0x00	; 0
    37da:	10 e0       	ldi	r17, 0x00	; 0
    37dc:	98 01       	movw	r18, r16
    37de:	b9 01       	movw	r22, r18
    37e0:	a8 01       	movw	r20, r16
    37e2:	ce 01       	movw	r24, r28
    37e4:	8f 5e       	subi	r24, 0xEF	; 239
    37e6:	9e 4f       	sbci	r25, 0xFE	; 254
    37e8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    37ec:	00 e0       	ldi	r16, 0x00	; 0
    37ee:	10 e0       	ldi	r17, 0x00	; 0
    37f0:	98 01       	movw	r18, r16
    37f2:	b9 01       	movw	r22, r18
    37f4:	a8 01       	movw	r20, r16
    37f6:	ce 01       	movw	r24, r28
    37f8:	87 5e       	subi	r24, 0xE7	; 231
    37fa:	9e 4f       	sbci	r25, 0xFE	; 254
    37fc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3800:	00 e0       	ldi	r16, 0x00	; 0
    3802:	10 e0       	ldi	r17, 0x00	; 0
    3804:	98 01       	movw	r18, r16
    3806:	40 e0       	ldi	r20, 0x00	; 0
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	60 e8       	ldi	r22, 0x80	; 128
    380c:	7f e3       	ldi	r23, 0x3F	; 63
    380e:	ce 01       	movw	r24, r28
    3810:	8f 5d       	subi	r24, 0xDF	; 223
    3812:	9e 4f       	sbci	r25, 0xFE	; 254
    3814:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3818:	00 e0       	ldi	r16, 0x00	; 0
    381a:	10 e0       	ldi	r17, 0x00	; 0
    381c:	98 01       	movw	r18, r16
    381e:	b9 01       	movw	r22, r18
    3820:	a8 01       	movw	r20, r16
    3822:	ce 01       	movw	r24, r28
    3824:	87 5d       	subi	r24, 0xD7	; 215
    3826:	9e 4f       	sbci	r25, 0xFE	; 254
    3828:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    382c:	00 e0       	ldi	r16, 0x00	; 0
    382e:	10 e0       	ldi	r17, 0x00	; 0
    3830:	98 01       	movw	r18, r16
    3832:	b9 01       	movw	r22, r18
    3834:	a8 01       	movw	r20, r16
    3836:	ce 01       	movw	r24, r28
    3838:	8f 5c       	subi	r24, 0xCF	; 207
    383a:	9e 4f       	sbci	r25, 0xFE	; 254
    383c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3840:	00 e0       	ldi	r16, 0x00	; 0
    3842:	10 e0       	ldi	r17, 0x00	; 0
    3844:	98 01       	movw	r18, r16
    3846:	b9 01       	movw	r22, r18
    3848:	a8 01       	movw	r20, r16
    384a:	ce 01       	movw	r24, r28
    384c:	87 5c       	subi	r24, 0xC7	; 199
    384e:	9e 4f       	sbci	r25, 0xFE	; 254
    3850:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3854:	00 e0       	ldi	r16, 0x00	; 0
    3856:	10 e0       	ldi	r17, 0x00	; 0
    3858:	98 01       	movw	r18, r16
    385a:	b9 01       	movw	r22, r18
    385c:	a8 01       	movw	r20, r16
    385e:	ce 01       	movw	r24, r28
    3860:	8f 5b       	subi	r24, 0xBF	; 191
    3862:	9e 4f       	sbci	r25, 0xFE	; 254
    3864:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3868:	00 e0       	ldi	r16, 0x00	; 0
    386a:	10 e0       	ldi	r17, 0x00	; 0
    386c:	98 01       	movw	r18, r16
    386e:	b9 01       	movw	r22, r18
    3870:	a8 01       	movw	r20, r16
    3872:	ce 01       	movw	r24, r28
    3874:	87 5b       	subi	r24, 0xB7	; 183
    3876:	9e 4f       	sbci	r25, 0xFE	; 254
    3878:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    387c:	00 e0       	ldi	r16, 0x00	; 0
    387e:	10 e0       	ldi	r17, 0x00	; 0
    3880:	98 01       	movw	r18, r16
    3882:	b9 01       	movw	r22, r18
    3884:	a8 01       	movw	r20, r16
    3886:	ce 01       	movw	r24, r28
    3888:	8f 5a       	subi	r24, 0xAF	; 175
    388a:	9e 4f       	sbci	r25, 0xFE	; 254
    388c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3890:	00 e0       	ldi	r16, 0x00	; 0
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	98 01       	movw	r18, r16
    3896:	b9 01       	movw	r22, r18
    3898:	a8 01       	movw	r20, r16
    389a:	ce 01       	movw	r24, r28
    389c:	87 5a       	subi	r24, 0xA7	; 167
    389e:	9e 4f       	sbci	r25, 0xFE	; 254
    38a0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    38a4:	00 e0       	ldi	r16, 0x00	; 0
    38a6:	10 e0       	ldi	r17, 0x00	; 0
    38a8:	98 01       	movw	r18, r16
    38aa:	b9 01       	movw	r22, r18
    38ac:	a8 01       	movw	r20, r16
    38ae:	ce 01       	movw	r24, r28
    38b0:	8f 59       	subi	r24, 0x9F	; 159
    38b2:	9e 4f       	sbci	r25, 0xFE	; 254
    38b4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    38b8:	00 e0       	ldi	r16, 0x00	; 0
    38ba:	10 e0       	ldi	r17, 0x00	; 0
    38bc:	98 01       	movw	r18, r16
    38be:	40 e0       	ldi	r20, 0x00	; 0
    38c0:	50 e0       	ldi	r21, 0x00	; 0
    38c2:	60 e8       	ldi	r22, 0x80	; 128
    38c4:	7f e3       	ldi	r23, 0x3F	; 63
    38c6:	ce 01       	movw	r24, r28
    38c8:	87 59       	subi	r24, 0x97	; 151
    38ca:	9e 4f       	sbci	r25, 0xFE	; 254
    38cc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    38d0:	00 e0       	ldi	r16, 0x00	; 0
    38d2:	10 e0       	ldi	r17, 0x00	; 0
    38d4:	98 01       	movw	r18, r16
    38d6:	b9 01       	movw	r22, r18
    38d8:	a8 01       	movw	r20, r16
    38da:	ce 01       	movw	r24, r28
    38dc:	8f 58       	subi	r24, 0x8F	; 143
    38de:	9e 4f       	sbci	r25, 0xFE	; 254
    38e0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    38e4:	00 e0       	ldi	r16, 0x00	; 0
    38e6:	10 e0       	ldi	r17, 0x00	; 0
    38e8:	98 01       	movw	r18, r16
    38ea:	b9 01       	movw	r22, r18
    38ec:	a8 01       	movw	r20, r16
    38ee:	ce 01       	movw	r24, r28
    38f0:	87 58       	subi	r24, 0x87	; 135
    38f2:	9e 4f       	sbci	r25, 0xFE	; 254
    38f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    38f8:	00 e0       	ldi	r16, 0x00	; 0
    38fa:	10 e0       	ldi	r17, 0x00	; 0
    38fc:	98 01       	movw	r18, r16
    38fe:	b9 01       	movw	r22, r18
    3900:	a8 01       	movw	r20, r16
    3902:	ce 01       	movw	r24, r28
    3904:	8f 57       	subi	r24, 0x7F	; 127
    3906:	9e 4f       	sbci	r25, 0xFE	; 254
    3908:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    390c:	00 e0       	ldi	r16, 0x00	; 0
    390e:	10 e0       	ldi	r17, 0x00	; 0
    3910:	98 01       	movw	r18, r16
    3912:	b9 01       	movw	r22, r18
    3914:	a8 01       	movw	r20, r16
    3916:	ce 01       	movw	r24, r28
    3918:	87 57       	subi	r24, 0x77	; 119
    391a:	9e 4f       	sbci	r25, 0xFE	; 254
    391c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3920:	00 e0       	ldi	r16, 0x00	; 0
    3922:	10 e0       	ldi	r17, 0x00	; 0
    3924:	98 01       	movw	r18, r16
    3926:	b9 01       	movw	r22, r18
    3928:	a8 01       	movw	r20, r16
    392a:	ce 01       	movw	r24, r28
    392c:	8f 56       	subi	r24, 0x6F	; 111
    392e:	9e 4f       	sbci	r25, 0xFE	; 254
    3930:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3934:	00 e0       	ldi	r16, 0x00	; 0
    3936:	10 e0       	ldi	r17, 0x00	; 0
    3938:	98 01       	movw	r18, r16
    393a:	b9 01       	movw	r22, r18
    393c:	a8 01       	movw	r20, r16
    393e:	ce 01       	movw	r24, r28
    3940:	87 56       	subi	r24, 0x67	; 103
    3942:	9e 4f       	sbci	r25, 0xFE	; 254
    3944:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3948:	00 e0       	ldi	r16, 0x00	; 0
    394a:	10 e0       	ldi	r17, 0x00	; 0
    394c:	98 01       	movw	r18, r16
    394e:	b9 01       	movw	r22, r18
    3950:	a8 01       	movw	r20, r16
    3952:	ce 01       	movw	r24, r28
    3954:	8f 55       	subi	r24, 0x5F	; 95
    3956:	9e 4f       	sbci	r25, 0xFE	; 254
    3958:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    395c:	00 e0       	ldi	r16, 0x00	; 0
    395e:	10 e0       	ldi	r17, 0x00	; 0
    3960:	98 01       	movw	r18, r16
    3962:	b9 01       	movw	r22, r18
    3964:	a8 01       	movw	r20, r16
    3966:	ce 01       	movw	r24, r28
    3968:	87 55       	subi	r24, 0x57	; 87
    396a:	9e 4f       	sbci	r25, 0xFE	; 254
    396c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
														  {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),               Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
    3970:	c5 01       	movw	r24, r10
    3972:	b4 01       	movw	r22, r8
    3974:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <cos>
    3978:	6b 01       	movw	r12, r22
    397a:	7c 01       	movw	r14, r24
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    397c:	8b 01       	movw	r16, r22
    397e:	9c 01       	movw	r18, r24
    3980:	40 e0       	ldi	r20, 0x00	; 0
    3982:	50 e0       	ldi	r21, 0x00	; 0
    3984:	ba 01       	movw	r22, r20
    3986:	ce 01       	movw	r24, r28
    3988:	8f 54       	subi	r24, 0x4F	; 79
    398a:	9e 4f       	sbci	r25, 0xFE	; 254
    398c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
														  {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),               Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
    3990:	c5 01       	movw	r24, r10
    3992:	b4 01       	movw	r22, r8
    3994:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <sin>
    3998:	4b 01       	movw	r8, r22
    399a:	5c 01       	movw	r10, r24
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    399c:	00 e0       	ldi	r16, 0x00	; 0
    399e:	10 e0       	ldi	r17, 0x00	; 0
    39a0:	98 01       	movw	r18, r16
    39a2:	ab 01       	movw	r20, r22
    39a4:	bc 01       	movw	r22, r24
    39a6:	ce 01       	movw	r24, r28
    39a8:	87 54       	subi	r24, 0x47	; 71
    39aa:	9e 4f       	sbci	r25, 0xFE	; 254
    39ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    39b0:	00 e0       	ldi	r16, 0x00	; 0
    39b2:	10 e0       	ldi	r17, 0x00	; 0
    39b4:	98 01       	movw	r18, r16
    39b6:	b9 01       	movw	r22, r18
    39b8:	a8 01       	movw	r20, r16
    39ba:	ce 01       	movw	r24, r28
    39bc:	8f 53       	subi	r24, 0x3F	; 63
    39be:	9e 4f       	sbci	r25, 0xFE	; 254
    39c0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    39c4:	00 e0       	ldi	r16, 0x00	; 0
    39c6:	10 e0       	ldi	r17, 0x00	; 0
    39c8:	98 01       	movw	r18, r16
    39ca:	b9 01       	movw	r22, r18
    39cc:	a8 01       	movw	r20, r16
    39ce:	ce 01       	movw	r24, r28
    39d0:	87 53       	subi	r24, 0x37	; 55
    39d2:	9e 4f       	sbci	r25, 0xFE	; 254
    39d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    39d8:	00 e0       	ldi	r16, 0x00	; 0
    39da:	10 e0       	ldi	r17, 0x00	; 0
    39dc:	98 01       	movw	r18, r16
    39de:	b9 01       	movw	r22, r18
    39e0:	a8 01       	movw	r20, r16
    39e2:	ce 01       	movw	r24, r28
    39e4:	8f 52       	subi	r24, 0x2F	; 47
    39e6:	9e 4f       	sbci	r25, 0xFE	; 254
    39e8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    39ec:	00 e0       	ldi	r16, 0x00	; 0
    39ee:	10 e0       	ldi	r17, 0x00	; 0
    39f0:	98 01       	movw	r18, r16
    39f2:	b9 01       	movw	r22, r18
    39f4:	a8 01       	movw	r20, r16
    39f6:	ce 01       	movw	r24, r28
    39f8:	87 52       	subi	r24, 0x27	; 39
    39fa:	9e 4f       	sbci	r25, 0xFE	; 254
    39fc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3a00:	00 e0       	ldi	r16, 0x00	; 0
    3a02:	10 e0       	ldi	r17, 0x00	; 0
    3a04:	98 01       	movw	r18, r16
    3a06:	b9 01       	movw	r22, r18
    3a08:	a8 01       	movw	r20, r16
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	8f 51       	subi	r24, 0x1F	; 31
    3a0e:	9e 4f       	sbci	r25, 0xFE	; 254
    3a10:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3a14:	00 e0       	ldi	r16, 0x00	; 0
    3a16:	10 e0       	ldi	r17, 0x00	; 0
    3a18:	98 01       	movw	r18, r16
    3a1a:	b9 01       	movw	r22, r18
    3a1c:	a8 01       	movw	r20, r16
    3a1e:	ce 01       	movw	r24, r28
    3a20:	87 51       	subi	r24, 0x17	; 23
    3a22:	9e 4f       	sbci	r25, 0xFE	; 254
    3a24:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3a28:	00 e0       	ldi	r16, 0x00	; 0
    3a2a:	10 e0       	ldi	r17, 0x00	; 0
    3a2c:	98 01       	movw	r18, r16
    3a2e:	b5 01       	movw	r22, r10
    3a30:	a4 01       	movw	r20, r8
    3a32:	ce 01       	movw	r24, r28
    3a34:	8f 50       	subi	r24, 0x0F	; 15
    3a36:	9e 4f       	sbci	r25, 0xFE	; 254
    3a38:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
    3a3c:	97 01       	movw	r18, r14
    3a3e:	86 01       	movw	r16, r12
    3a40:	40 e0       	ldi	r20, 0x00	; 0
    3a42:	50 e0       	ldi	r21, 0x00	; 0
    3a44:	ba 01       	movw	r22, r20
    3a46:	ce 01       	movw	r24, r28
    3a48:	87 50       	subi	r24, 0x07	; 7
    3a4a:	9e 4f       	sbci	r25, 0xFE	; 254
    3a4c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    3a50:	c9 5f       	subi	r28, 0xF9	; 249
    3a52:	dd 4f       	sbci	r29, 0xFD	; 253
    3a54:	59 82       	std	Y+1, r5	; 0x01
    3a56:	48 82       	st	Y, r4
    3a58:	c7 50       	subi	r28, 0x07	; 7
    3a5a:	d2 40       	sbci	r29, 0x02	; 2
    3a5c:	c7 5f       	subi	r28, 0xF7	; 247
    3a5e:	dd 4f       	sbci	r29, 0xFD	; 253
    3a60:	79 82       	std	Y+1, r7	; 0x01
    3a62:	68 82       	st	Y, r6
    3a64:	c9 50       	subi	r28, 0x09	; 9
    3a66:	d2 40       	sbci	r29, 0x02	; 2
    3a68:	c5 5f       	subi	r28, 0xF5	; 245
    3a6a:	dd 4f       	sbci	r29, 0xFD	; 253
    3a6c:	39 82       	std	Y+1, r3	; 0x01
    3a6e:	28 82       	st	Y, r2
    3a70:	cb 50       	subi	r28, 0x0B	; 11
    3a72:	d2 40       	sbci	r29, 0x02	; 2
    3a74:	c1 5f       	subi	r28, 0xF1	; 241
    3a76:	dd 4f       	sbci	r29, 0xFD	; 253
    3a78:	88 81       	ld	r24, Y
    3a7a:	99 81       	ldd	r25, Y+1	; 0x01
    3a7c:	cf 50       	subi	r28, 0x0F	; 15
    3a7e:	d2 40       	sbci	r29, 0x02	; 2
    3a80:	cf 5f       	subi	r28, 0xFF	; 255
    3a82:	dd 4f       	sbci	r29, 0xFD	; 253
    3a84:	99 83       	std	Y+1, r25	; 0x01
    3a86:	88 83       	st	Y, r24
    3a88:	c1 50       	subi	r28, 0x01	; 1
    3a8a:	d2 40       	sbci	r29, 0x02	; 2
    3a8c:	cf 5e       	subi	r28, 0xEF	; 239
    3a8e:	dd 4f       	sbci	r29, 0xFD	; 253
    3a90:	88 81       	ld	r24, Y
    3a92:	99 81       	ldd	r25, Y+1	; 0x01
    3a94:	c1 51       	subi	r28, 0x11	; 17
    3a96:	d2 40       	sbci	r29, 0x02	; 2
    3a98:	cd 5f       	subi	r28, 0xFD	; 253
    3a9a:	dd 4f       	sbci	r29, 0xFD	; 253
    3a9c:	99 83       	std	Y+1, r25	; 0x01
    3a9e:	88 83       	st	Y, r24
    3aa0:	c3 50       	subi	r28, 0x03	; 3
    3aa2:	d2 40       	sbci	r29, 0x02	; 2
    3aa4:	cd 5e       	subi	r28, 0xED	; 237
    3aa6:	dd 4f       	sbci	r29, 0xFD	; 253
    3aa8:	88 81       	ld	r24, Y
    3aaa:	99 81       	ldd	r25, Y+1	; 0x01
    3aac:	c3 51       	subi	r28, 0x13	; 19
    3aae:	d2 40       	sbci	r29, 0x02	; 2
    3ab0:	cb 5f       	subi	r28, 0xFB	; 251
    3ab2:	dd 4f       	sbci	r29, 0xFD	; 253
    3ab4:	99 83       	std	Y+1, r25	; 0x01
    3ab6:	88 83       	st	Y, r24
    3ab8:	c5 50       	subi	r28, 0x05	; 5
    3aba:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),deu_matrix),QB_SIZE3);	
    3abc:	9e 01       	movw	r18, r28
    3abe:	2f 5f       	subi	r18, 0xFF	; 255
    3ac0:	3d 4f       	sbci	r19, 0xFD	; 253
    3ac2:	ae 01       	movw	r20, r28
    3ac4:	49 5f       	subi	r20, 0xF9	; 249
    3ac6:	5d 4f       	sbci	r21, 0xFD	; 253
    3ac8:	63 e0       	ldi	r22, 0x03	; 3
    3aca:	70 e0       	ldi	r23, 0x00	; 0
    3acc:	c3 5f       	subi	r28, 0xF3	; 243
    3ace:	dd 4f       	sbci	r29, 0xFD	; 253
    3ad0:	88 81       	ld	r24, Y
    3ad2:	99 81       	ldd	r25, Y+1	; 0x01
    3ad4:	cd 50       	subi	r28, 0x0D	; 13
    3ad6:	d2 40       	sbci	r29, 0x02	; 2
    3ad8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN5Gates8ampl2vecEiPiS0_>
    3adc:	ae 01       	movw	r20, r28
    3ade:	4f 5f       	subi	r20, 0xFF	; 255
    3ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae2:	bc 01       	movw	r22, r24
    3ae4:	c3 5f       	subi	r28, 0xF3	; 243
    3ae6:	dd 4f       	sbci	r29, 0xFD	; 253
    3ae8:	88 81       	ld	r24, Y
    3aea:	99 81       	ldd	r25, Y+1	; 0x01
    3aec:	cd 50       	subi	r28, 0x0D	; 13
    3aee:	d2 40       	sbci	r29, 0x02	; 2
    3af0:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    3af4:	43 e0       	ldi	r20, 0x03	; 3
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	bc 01       	movw	r22, r24
    3afa:	c3 5f       	subi	r28, 0xF3	; 243
    3afc:	dd 4f       	sbci	r29, 0xFD	; 253
    3afe:	88 81       	ld	r24, Y
    3b00:	99 81       	ldd	r25, Y+1	; 0x01
    3b02:	cd 50       	subi	r28, 0x0D	; 13
    3b04:	d2 40       	sbci	r29, 0x02	; 2
    3b06:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN5Gates8vec2amplEP7Complexi>
    3b0a:	cc 5e       	subi	r28, 0xEC	; 236
    3b0c:	dd 4f       	sbci	r29, 0xFD	; 253
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	df 91       	pop	r29
    3b1a:	cf 91       	pop	r28
    3b1c:	1f 91       	pop	r17
    3b1e:	0f 91       	pop	r16
    3b20:	ff 90       	pop	r15
    3b22:	ef 90       	pop	r14
    3b24:	df 90       	pop	r13
    3b26:	cf 90       	pop	r12
    3b28:	bf 90       	pop	r11
    3b2a:	af 90       	pop	r10
    3b2c:	9f 90       	pop	r9
    3b2e:	8f 90       	pop	r8
    3b30:	7f 90       	pop	r7
    3b32:	6f 90       	pop	r6
    3b34:	5f 90       	pop	r5
    3b36:	4f 90       	pop	r4
    3b38:	3f 90       	pop	r3
    3b3a:	2f 90       	pop	r2
    3b3c:	08 95       	ret

00003b3e <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){}

Serial s;
    3b3e:	88 e2       	ldi	r24, 0x28	; 40
    3b40:	91 e0       	ldi	r25, 0x01	; 1
    3b42:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <_ZN6SerialC1Ev>
    3b46:	08 95       	ret

00003b48 <_ZN4QEPU10setup_seedEv>:

//SETUP SEED FOR RAND():
uint16_t EEMEM randinit;

void QEPU::setup_seed(){
	srand(eeprom_read_word(&randinit));
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <__eerd_word_m32>
    3b50:	0e 94 85 31 	call	0x630a	; 0x630a <srand>
	eeprom_write_word(&randinit,rand()%10000);
    3b54:	0e 94 80 31 	call	0x6300	; 0x6300 <rand>
    3b58:	60 e1       	ldi	r22, 0x10	; 16
    3b5a:	77 e2       	ldi	r23, 0x27	; 39
    3b5c:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__divmodhi4>
    3b60:	bc 01       	movw	r22, r24
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	0e 94 d6 34 	call	0x69ac	; 0x69ac <__eewr_word_m32>
    3b6a:	08 95       	ret

00003b6c <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){serial.writestr("INITIALIZING . . . ");setup_seed();CTRL_QB_DIR=OUTPUT;program_counter=0;program_counter_maximum=0;}
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	ec 01       	movw	r28, r24
    3b72:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <_ZN6SerialC1Ev>
    3b76:	ce 01       	movw	r24, r28
    3b78:	01 96       	adiw	r24, 0x01	; 1
    3b7a:	0e 94 12 02 	call	0x424	; 0x424 <_ZN6EEPromC1Ev>
    3b7e:	ce 01       	movw	r24, r28
    3b80:	02 96       	adiw	r24, 0x02	; 2
    3b82:	0e 94 af 28 	call	0x515e	; 0x515e <_ZN4SRAMC1Ev>
    3b86:	ce 01       	movw	r24, r28
    3b88:	08 96       	adiw	r24, 0x08	; 8
    3b8a:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN5GatesC1Ev>
    3b8e:	66 e8       	ldi	r22, 0x86	; 134
    3b90:	70 e0       	ldi	r23, 0x00	; 0
    3b92:	ce 01       	movw	r24, r28
    3b94:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
    3b98:	ce 01       	movw	r24, r28
    3b9a:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <_ZN4QEPU10setup_seedEv>
    3b9e:	8f ef       	ldi	r24, 0xFF	; 255
    3ba0:	8a bb       	out	0x1a, r24	; 26
    3ba2:	1b 86       	std	Y+11, r1	; 0x0b
    3ba4:	1a 86       	std	Y+10, r1	; 0x0a
    3ba6:	1d 86       	std	Y+13, r1	; 0x0d
    3ba8:	1c 86       	std	Y+12, r1	; 0x0c
    3baa:	df 91       	pop	r29
    3bac:	cf 91       	pop	r28
    3bae:	08 95       	ret

00003bb0 <_ZN4QEPU14setbuffctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	BUS_OUT&=~(1<<pin); // CLEAR PIN
	BUS_OUT|=(state<<pin); // SET PIN
}
void QEPU::setbuffctrlpin(int pin,int state){
	CTRL_BUFF&=~(1<<pin); // CLEAR PIN
    3bb0:	75 b3       	in	r23, 0x15	; 21
    3bb2:	21 e0       	ldi	r18, 0x01	; 1
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	c9 01       	movw	r24, r18
    3bb8:	06 2e       	mov	r0, r22
    3bba:	02 c0       	rjmp	.+4      	; 0x3bc0 <_ZN4QEPU14setbuffctrlpinEii+0x10>
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	0a 94       	dec	r0
    3bc2:	e2 f7       	brpl	.-8      	; 0x3bbc <_ZN4QEPU14setbuffctrlpinEii+0xc>
    3bc4:	80 95       	com	r24
    3bc6:	87 23       	and	r24, r23
    3bc8:	85 bb       	out	0x15, r24	; 21
	CTRL_BUFF|=(state<<pin); // SET PIN
    3bca:	85 b3       	in	r24, 0x15	; 21
    3bcc:	02 c0       	rjmp	.+4      	; 0x3bd2 <_ZN4QEPU14setbuffctrlpinEii+0x22>
    3bce:	44 0f       	add	r20, r20
    3bd0:	55 1f       	adc	r21, r21
    3bd2:	6a 95       	dec	r22
    3bd4:	e2 f7       	brpl	.-8      	; 0x3bce <_ZN4QEPU14setbuffctrlpinEii+0x1e>
    3bd6:	48 2b       	or	r20, r24
    3bd8:	45 bb       	out	0x15, r20	; 21
    3bda:	08 95       	ret

00003bdc <_ZN4QEPU14deselect_qubitEv>:
		deselect_qubit();
	}
	return deg_read;
}
void QEPU::deselect_qubit(){
	CTRL_BUFF_DIR=OUTPUT;
    3bdc:	2f ef       	ldi	r18, 0xFF	; 255
    3bde:	24 bb       	out	0x14, r18	; 20
	setbuffctrlpin(EO_AB,LOW);
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	64 e0       	ldi	r22, 0x04	; 4
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN4QEPU14setbuffctrlpinEii>
    3bec:	08 95       	ret

00003bee <_ZN4QEPU12select_qubitEi>:
}
void QEPU::select_qubit(int index){
    3bee:	af 92       	push	r10
    3bf0:	bf 92       	push	r11
    3bf2:	cf 92       	push	r12
    3bf4:	df 92       	push	r13
    3bf6:	ef 92       	push	r14
    3bf8:	ff 92       	push	r15
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	00 d0       	rcall	.+0      	; 0x3c04 <_ZN4QEPU12select_qubitEi+0x16>
    3c04:	00 d0       	rcall	.+0      	; 0x3c06 <_ZN4QEPU12select_qubitEi+0x18>
    3c06:	00 d0       	rcall	.+0      	; 0x3c08 <_ZN4QEPU12select_qubitEi+0x1a>
    3c08:	cd b7       	in	r28, 0x3d	; 61
    3c0a:	de b7       	in	r29, 0x3e	; 62
    3c0c:	8c 01       	movw	r16, r24
	int address_buffer[ADDRESS_BUFFER_SIZE];
	int mask_bit_addressbuff=0b1111;
	for(int i=0;i<ADDRESS_BUFFER_SIZE;i++){
		address_buffer[i]=(index&mask_bit_addressbuff)>>(4*i);
    3c0e:	cb 01       	movw	r24, r22
    3c10:	8f 70       	andi	r24, 0x0F	; 15
    3c12:	99 27       	eor	r25, r25
    3c14:	9a 83       	std	Y+2, r25	; 0x02
    3c16:	89 83       	std	Y+1, r24	; 0x01
    3c18:	cb 01       	movw	r24, r22
    3c1a:	80 7f       	andi	r24, 0xF0	; 240
    3c1c:	99 27       	eor	r25, r25
    3c1e:	95 95       	asr	r25
    3c20:	87 95       	ror	r24
    3c22:	95 95       	asr	r25
    3c24:	87 95       	ror	r24
    3c26:	95 95       	asr	r25
    3c28:	87 95       	ror	r24
    3c2a:	95 95       	asr	r25
    3c2c:	87 95       	ror	r24
    3c2e:	9c 83       	std	Y+4, r25	; 0x04
    3c30:	8b 83       	std	Y+3, r24	; 0x03
    3c32:	66 27       	eor	r22, r22
    3c34:	7f 70       	andi	r23, 0x0F	; 15
    3c36:	87 2f       	mov	r24, r23
    3c38:	88 0f       	add	r24, r24
    3c3a:	88 0b       	sbc	r24, r24
    3c3c:	7d 83       	std	Y+5, r23	; 0x05
    3c3e:	8e 83       	std	Y+6, r24	; 0x06
		mask_bit_addressbuff<<=4;
	}
	CTRL_QB_DIR=OUTPUT;
    3c40:	8f ef       	ldi	r24, 0xFF	; 255
    3c42:	8a bb       	out	0x1a, r24	; 26
	CTRL_BUFF_DIR=OUTPUT;
    3c44:	84 bb       	out	0x14, r24	; 20
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	8b bb       	out	0x1b, r24	; 27
	}
	CTRL_QB_DIR=OUTPUT;
	CTRL_BUFF_DIR=OUTPUT;
	
	setctrl(address_buffer[0]);
	setbuffctrlpin(IN_ABBUFFER_START,HIGH);
    3c4a:	41 e0       	ldi	r20, 0x01	; 1
    3c4c:	50 e0       	ldi	r21, 0x00	; 0
    3c4e:	62 e0       	ldi	r22, 0x02	; 2
    3c50:	70 e0       	ldi	r23, 0x00	; 0
    3c52:	c8 01       	movw	r24, r16
    3c54:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    3c58:	41 e0       	ldi	r20, 0x01	; 1
    3c5a:	50 e0       	ldi	r21, 0x00	; 0
    3c5c:	63 e0       	ldi	r22, 0x03	; 3
    3c5e:	70 e0       	ldi	r23, 0x00	; 0
    3c60:	c8 01       	movw	r24, r16
    3c62:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    3c66:	40 e0       	ldi	r20, 0x00	; 0
    3c68:	50 e0       	ldi	r21, 0x00	; 0
    3c6a:	63 e0       	ldi	r22, 0x03	; 3
    3c6c:	70 e0       	ldi	r23, 0x00	; 0
    3c6e:	c8 01       	movw	r24, r16
    3c70:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_START,LOW);
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	50 e0       	ldi	r21, 0x00	; 0
    3c78:	62 e0       	ldi	r22, 0x02	; 2
    3c7a:	70 e0       	ldi	r23, 0x00	; 0
    3c7c:	c8 01       	movw	r24, r16
    3c7e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN4QEPU14setbuffctrlpinEii>
	utils.delay(ADDRESS_WRITE_DELAY);
    3c82:	68 01       	movw	r12, r16
    3c84:	89 e0       	ldi	r24, 0x09	; 9
    3c86:	c8 0e       	add	r12, r24
    3c88:	d1 1c       	adc	r13, r1
    3c8a:	6a e0       	ldi	r22, 0x0A	; 10
    3c8c:	70 e0       	ldi	r23, 0x00	; 0
    3c8e:	c6 01       	movw	r24, r12
    3c90:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <_ZN5Utils5delayEi>
    3c94:	7e 01       	movw	r14, r28
    3c96:	93 e0       	ldi	r25, 0x03	; 3
    3c98:	e9 0e       	add	r14, r25
    3c9a:	f1 1c       	adc	r15, r1
    3c9c:	5e 01       	movw	r10, r28
    3c9e:	e7 e0       	ldi	r30, 0x07	; 7
    3ca0:	ae 0e       	add	r10, r30
    3ca2:	b1 1c       	adc	r11, r1
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    3ca4:	41 e0       	ldi	r20, 0x01	; 1
    3ca6:	50 e0       	ldi	r21, 0x00	; 0
    3ca8:	63 e0       	ldi	r22, 0x03	; 3
    3caa:	70 e0       	ldi	r23, 0x00	; 0
    3cac:	c8 01       	movw	r24, r16
    3cae:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN4QEPU14setbuffctrlpinEii>
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	50 e0       	ldi	r21, 0x00	; 0
    3cb6:	63 e0       	ldi	r22, 0x03	; 3
    3cb8:	70 e0       	ldi	r23, 0x00	; 0
    3cba:	c8 01       	movw	r24, r16
    3cbc:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN4QEPU14setbuffctrlpinEii>
		setctrl(address_buffer[i]);
    3cc0:	f7 01       	movw	r30, r14
    3cc2:	80 81       	ld	r24, Z
    3cc4:	f2 e0       	ldi	r31, 0x02	; 2
    3cc6:	ef 0e       	add	r14, r31
    3cc8:	f1 1c       	adc	r15, r1
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    3cca:	8b bb       	out	0x1b, r24	; 27
	utils.delay(ADDRESS_WRITE_DELAY);
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
		setctrl(address_buffer[i]);
		utils.delay(ADDRESS_WRITE_DELAY);
    3ccc:	6a e0       	ldi	r22, 0x0A	; 10
    3cce:	70 e0       	ldi	r23, 0x00	; 0
    3cd0:	c6 01       	movw	r24, r12
    3cd2:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <_ZN5Utils5delayEi>
	setbuffctrlpin(IN_ABBUFFER_START,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(IN_ABBUFFER_START,LOW);
	utils.delay(ADDRESS_WRITE_DELAY);
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
    3cd6:	ea 14       	cp	r14, r10
    3cd8:	fb 04       	cpc	r15, r11
    3cda:	21 f7       	brne	.-56     	; 0x3ca4 <_ZN4QEPU12select_qubitEi+0xb6>
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
		setctrl(address_buffer[i]);
		utils.delay(ADDRESS_WRITE_DELAY);
	}
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    3cdc:	41 e0       	ldi	r20, 0x01	; 1
    3cde:	50 e0       	ldi	r21, 0x00	; 0
    3ce0:	63 e0       	ldi	r22, 0x03	; 3
    3ce2:	70 e0       	ldi	r23, 0x00	; 0
    3ce4:	c8 01       	movw	r24, r16
    3ce6:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    3cea:	40 e0       	ldi	r20, 0x00	; 0
    3cec:	50 e0       	ldi	r21, 0x00	; 0
    3cee:	63 e0       	ldi	r22, 0x03	; 3
    3cf0:	70 e0       	ldi	r23, 0x00	; 0
    3cf2:	c8 01       	movw	r24, r16
    3cf4:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(EO_AB,HIGH);
    3cf8:	41 e0       	ldi	r20, 0x01	; 1
    3cfa:	50 e0       	ldi	r21, 0x00	; 0
    3cfc:	64 e0       	ldi	r22, 0x04	; 4
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	c8 01       	movw	r24, r16
    3d02:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN4QEPU14setbuffctrlpinEii>
}
    3d06:	26 96       	adiw	r28, 0x06	; 6
    3d08:	0f b6       	in	r0, 0x3f	; 63
    3d0a:	f8 94       	cli
    3d0c:	de bf       	out	0x3e, r29	; 62
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	cd bf       	out	0x3d, r28	; 61
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	1f 91       	pop	r17
    3d18:	0f 91       	pop	r16
    3d1a:	ff 90       	pop	r15
    3d1c:	ef 90       	pop	r14
    3d1e:	df 90       	pop	r13
    3d20:	cf 90       	pop	r12
    3d22:	bf 90       	pop	r11
    3d24:	af 90       	pop	r10
    3d26:	08 95       	ret

00003d28 <_ZN4QEPU10setctrlpinEii>:
void QEPU::setbuffctrlpin(int pin,int state){
	CTRL_BUFF&=~(1<<pin); // CLEAR PIN
	CTRL_BUFF|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	CTRL_QB&=~(1<<pin); // CLEAR PIN
    3d28:	7b b3       	in	r23, 0x1b	; 27
    3d2a:	21 e0       	ldi	r18, 0x01	; 1
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	c9 01       	movw	r24, r18
    3d30:	06 2e       	mov	r0, r22
    3d32:	02 c0       	rjmp	.+4      	; 0x3d38 <_ZN4QEPU10setctrlpinEii+0x10>
    3d34:	88 0f       	add	r24, r24
    3d36:	99 1f       	adc	r25, r25
    3d38:	0a 94       	dec	r0
    3d3a:	e2 f7       	brpl	.-8      	; 0x3d34 <_ZN4QEPU10setctrlpinEii+0xc>
    3d3c:	80 95       	com	r24
    3d3e:	87 23       	and	r24, r23
    3d40:	8b bb       	out	0x1b, r24	; 27
	CTRL_QB|=(state<<pin); // SET PIN
    3d42:	8b b3       	in	r24, 0x1b	; 27
    3d44:	02 c0       	rjmp	.+4      	; 0x3d4a <_ZN4QEPU10setctrlpinEii+0x22>
    3d46:	44 0f       	add	r20, r20
    3d48:	55 1f       	adc	r21, r21
    3d4a:	6a 95       	dec	r22
    3d4c:	e2 f7       	brpl	.-8      	; 0x3d46 <_ZN4QEPU10setctrlpinEii+0x1e>
    3d4e:	48 2b       	or	r20, r24
    3d50:	4b bb       	out	0x1b, r20	; 27
    3d52:	08 95       	ret

00003d54 <_ZN4QEPU5writeEiii>:
void QEPU::close_bus(){
	setctrl(0); // CLOSE ALL CONTROLS
	deselect_qubit(); // DESELECT ALL QUBITS
	bus_write(LOW);
}
void QEPU::write(int index,int dim,int deg){
    3d54:	ff 92       	push	r15
    3d56:	0f 93       	push	r16
    3d58:	1f 93       	push	r17
    3d5a:	cf 93       	push	r28
    3d5c:	df 93       	push	r29
    3d5e:	ec 01       	movw	r28, r24
    3d60:	8a 01       	movw	r16, r20
	BUS_DIR=OUTPUT;
    3d62:	ff 24       	eor	r15, r15
    3d64:	fa 94       	dec	r15
    3d66:	f7 ba       	out	0x17, r15	; 23
	eeprom_write_word(&randinit,rand()%10000);
}

//QUBIT MEMORY HANDLING:
void QEPU::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    3d68:	f7 ba       	out	0x17, r15	; 23
	BUS_OUT=data;
    3d6a:	28 bb       	out	0x18, r18	; 24
}
void QEPU::write(int index,int dim,int deg){
	BUS_DIR=OUTPUT;
	
	bus_write(deg);
	select_qubit(index);
    3d6c:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <_ZN4QEPU12select_qubitEi>
	setctrlpin(DIM_SEL,dim);
    3d70:	a8 01       	movw	r20, r16
    3d72:	64 e0       	ldi	r22, 0x04	; 4
    3d74:	70 e0       	ldi	r23, 0x00	; 0
    3d76:	ce 01       	movw	r24, r28
    3d78:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(WRITE_QB,HIGH); // CLOCK UP LOAD
    3d7c:	41 e0       	ldi	r20, 0x01	; 1
    3d7e:	50 e0       	ldi	r21, 0x00	; 0
    3d80:	66 e0       	ldi	r22, 0x06	; 6
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	ce 01       	movw	r24, r28
    3d86:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(WRITE_QB,LOW); // CLOCK DOWN LOAD
    3d8a:	40 e0       	ldi	r20, 0x00	; 0
    3d8c:	50 e0       	ldi	r21, 0x00	; 0
    3d8e:	66 e0       	ldi	r22, 0x06	; 6
    3d90:	70 e0       	ldi	r23, 0x00	; 0
    3d92:	ce 01       	movw	r24, r28
    3d94:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <_ZN4QEPU10setctrlpinEii>
	eeprom_write_word(&randinit,rand()%10000);
}

//QUBIT MEMORY HANDLING:
void QEPU::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    3d98:	f7 ba       	out	0x17, r15	; 23
	BUS_OUT=data;
    3d9a:	18 ba       	out	0x18, r1	; 24
	select_qubit(index);
	setctrlpin(DIM_SEL,dim);
	setctrlpin(WRITE_QB,HIGH); // CLOCK UP LOAD
	setctrlpin(WRITE_QB,LOW); // CLOCK DOWN LOAD
	bus_write(LOW);
	deselect_qubit();
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN4QEPU14deselect_qubitEv>
}
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	ff 90       	pop	r15
    3dac:	08 95       	ret

00003dae <_ZN4QEPU4readEiib>:
int QEPU::read(int index,int dim,bool freeze_bus){
    3dae:	ff 92       	push	r15
    3db0:	0f 93       	push	r16
    3db2:	1f 93       	push	r17
    3db4:	cf 93       	push	r28
    3db6:	df 93       	push	r29
    3db8:	ec 01       	movw	r28, r24
    3dba:	8a 01       	movw	r16, r20
    3dbc:	f2 2e       	mov	r15, r18
	BUS_DIR=INPUT;
    3dbe:	17 ba       	out	0x17, r1	; 23
	
	select_qubit(index);
    3dc0:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <_ZN4QEPU12select_qubitEi>
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    3dc4:	41 e0       	ldi	r20, 0x01	; 1
    3dc6:	50 e0       	ldi	r21, 0x00	; 0
    3dc8:	65 e0       	ldi	r22, 0x05	; 5
    3dca:	70 e0       	ldi	r23, 0x00	; 0
    3dcc:	ce 01       	movw	r24, r28
    3dce:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    3dd2:	a8 01       	movw	r20, r16
    3dd4:	64 e0       	ldi	r22, 0x04	; 4
    3dd6:	70 e0       	ldi	r23, 0x00	; 0
    3dd8:	ce 01       	movw	r24, r28
    3dda:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <_ZN4QEPU10setctrlpinEii>
	int deg_read=BUS_IN; // READ INPUT
    3dde:	06 b3       	in	r16, 0x16	; 22
    3de0:	10 e0       	ldi	r17, 0x00	; 0
	//CLOSE ALL AND GATES
	BUS_DIR=OUTPUT;
    3de2:	8f ef       	ldi	r24, 0xFF	; 255
    3de4:	87 bb       	out	0x17, r24	; 23
	if(!freeze_bus){
    3de6:	f1 10       	cpse	r15, r1
    3de8:	04 c0       	rjmp	.+8      	; 0x3df2 <_ZN4QEPU4readEiib+0x44>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    3dea:	1b ba       	out	0x1b, r1	; 27
	int deg_read=BUS_IN; // READ INPUT
	//CLOSE ALL AND GATES
	BUS_DIR=OUTPUT;
	if(!freeze_bus){
		setctrl(0); // CLOSE ALL CONTROLS
		deselect_qubit();
    3dec:	ce 01       	movw	r24, r28
    3dee:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <_ZN4QEPU14deselect_qubitEv>
	}
	return deg_read;
}
    3df2:	c8 01       	movw	r24, r16
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	ff 90       	pop	r15
    3dfe:	08 95       	ret

00003e00 <_ZN4QEPU7measureEi>:
}
void QEPU::setctrlpin(int pin,int state){
	CTRL_QB&=~(1<<pin); // CLEAR PIN
	CTRL_QB|=(state<<pin); // SET PIN
}
int QEPU::measure(int amplitude){
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	ec 01       	movw	r28, r24
	return gates.touch(utils.custom_pow(sin(amplitude*M_PI/360),2));
    3e06:	88 27       	eor	r24, r24
    3e08:	77 fd       	sbrc	r23, 7
    3e0a:	80 95       	com	r24
    3e0c:	98 2f       	mov	r25, r24
    3e0e:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <__floatsisf>
    3e12:	2b ed       	ldi	r18, 0xDB	; 219
    3e14:	3f e0       	ldi	r19, 0x0F	; 15
    3e16:	49 e4       	ldi	r20, 0x49	; 73
    3e18:	50 e4       	ldi	r21, 0x40	; 64
    3e1a:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	44 eb       	ldi	r20, 0xB4	; 180
    3e24:	53 e4       	ldi	r21, 0x43	; 67
    3e26:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__divsf3>
    3e2a:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <sin>
    3e2e:	ab 01       	movw	r20, r22
    3e30:	bc 01       	movw	r22, r24
    3e32:	22 e0       	ldi	r18, 0x02	; 2
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	ce 01       	movw	r24, r28
    3e38:	09 96       	adiw	r24, 0x09	; 9
    3e3a:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <_ZN5Utils10custom_powEfi>
    3e3e:	ab 01       	movw	r20, r22
    3e40:	bc 01       	movw	r22, r24
    3e42:	ce 01       	movw	r24, r28
    3e44:	08 96       	adiw	r24, 0x08	; 8
    3e46:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Gates5touchEd>
}
    3e4a:	df 91       	pop	r29
    3e4c:	cf 91       	pop	r28
    3e4e:	08 95       	ret

00003e50 <_ZN4QEPU14fetch_registerEi>:

int QEPU::fetch_register(int address){
    3e50:	8f 92       	push	r8
    3e52:	9f 92       	push	r9
    3e54:	af 92       	push	r10
    3e56:	bf 92       	push	r11
    3e58:	cf 92       	push	r12
    3e5a:	df 92       	push	r13
    3e5c:	ef 92       	push	r14
    3e5e:	ff 92       	push	r15
    3e60:	0f 93       	push	r16
    3e62:	1f 93       	push	r17
    3e64:	cf 93       	push	r28
    3e66:	df 93       	push	r29
    3e68:	cd b7       	in	r28, 0x3d	; 61
    3e6a:	de b7       	in	r29, 0x3e	; 62
    3e6c:	29 97       	sbiw	r28, 0x09	; 9
    3e6e:	0f b6       	in	r0, 0x3f	; 63
    3e70:	f8 94       	cli
    3e72:	de bf       	out	0x3e, r29	; 62
    3e74:	0f be       	out	0x3f, r0	; 63
    3e76:	cd bf       	out	0x3d, r28	; 61
    3e78:	5c 01       	movw	r10, r24
	char data_fetched[BUS_WIDTH+1]="";
    3e7a:	19 82       	std	Y+1, r1	; 0x01
    3e7c:	1a 82       	std	Y+2, r1	; 0x02
    3e7e:	1b 82       	std	Y+3, r1	; 0x03
    3e80:	1c 82       	std	Y+4, r1	; 0x04
    3e82:	fe 01       	movw	r30, r28
    3e84:	35 96       	adiw	r30, 0x05	; 5
    3e86:	85 e0       	ldi	r24, 0x05	; 5
    3e88:	df 01       	movw	r26, r30
    3e8a:	1d 92       	st	X+, r1
    3e8c:	8a 95       	dec	r24
    3e8e:	e9 f7       	brne	.-6      	; 0x3e8a <_ZN4QEPU14fetch_registerEi+0x3a>
	int address_offset=address*BUS_WIDTH;
    3e90:	4b 01       	movw	r8, r22
    3e92:	88 0c       	add	r8, r8
    3e94:	99 1c       	adc	r9, r9
    3e96:	88 0c       	add	r8, r8
    3e98:	99 1c       	adc	r9, r9
    3e9a:	88 0c       	add	r8, r8
    3e9c:	99 1c       	adc	r9, r9
	for(int i=0;i<BUS_WIDTH;i++)
    3e9e:	e1 2c       	mov	r14, r1
    3ea0:	f1 2c       	mov	r15, r1
		sprintf(data_fetched,"%s%d",data_fetched,measure(read(address_offset+i,THE,false)));
    3ea2:	8e 01       	movw	r16, r28
    3ea4:	0f 5f       	subi	r16, 0xFF	; 255
    3ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea8:	0f 2e       	mov	r0, r31
    3eaa:	fa e9       	ldi	r31, 0x9A	; 154
    3eac:	cf 2e       	mov	r12, r31
    3eae:	f0 e0       	ldi	r31, 0x00	; 0
    3eb0:	df 2e       	mov	r13, r31
    3eb2:	f0 2d       	mov	r31, r0
    3eb4:	b7 01       	movw	r22, r14
    3eb6:	68 0d       	add	r22, r8
    3eb8:	79 1d       	adc	r23, r9
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	40 e0       	ldi	r20, 0x00	; 0
    3ebe:	50 e0       	ldi	r21, 0x00	; 0
    3ec0:	c5 01       	movw	r24, r10
    3ec2:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    3ec6:	bc 01       	movw	r22, r24
    3ec8:	c5 01       	movw	r24, r10
    3eca:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN4QEPU7measureEi>
    3ece:	9f 93       	push	r25
    3ed0:	8f 93       	push	r24
    3ed2:	1f 93       	push	r17
    3ed4:	0f 93       	push	r16
    3ed6:	df 92       	push	r13
    3ed8:	cf 92       	push	r12
    3eda:	1f 93       	push	r17
    3edc:	0f 93       	push	r16
    3ede:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <sprintf>
}

int QEPU::fetch_register(int address){
	char data_fetched[BUS_WIDTH+1]="";
	int address_offset=address*BUS_WIDTH;
	for(int i=0;i<BUS_WIDTH;i++)
    3ee2:	bf ef       	ldi	r27, 0xFF	; 255
    3ee4:	eb 1a       	sub	r14, r27
    3ee6:	fb 0a       	sbc	r15, r27
    3ee8:	0f b6       	in	r0, 0x3f	; 63
    3eea:	f8 94       	cli
    3eec:	de bf       	out	0x3e, r29	; 62
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	cd bf       	out	0x3d, r28	; 61
    3ef2:	98 e0       	ldi	r25, 0x08	; 8
    3ef4:	e9 16       	cp	r14, r25
    3ef6:	f1 04       	cpc	r15, r1
    3ef8:	e9 f6       	brne	.-70     	; 0x3eb4 <_ZN4QEPU14fetch_registerEi+0x64>
		sprintf(data_fetched,"%s%d",data_fetched,measure(read(address_offset+i,THE,false)));
	strrev(data_fetched);
    3efa:	ce 01       	movw	r24, r28
    3efc:	01 96       	adiw	r24, 0x01	; 1
    3efe:	0e 94 cc 32 	call	0x6598	; 0x6598 <strrev>
	return strtol(data_fetched,NULL,10);
    3f02:	4a e0       	ldi	r20, 0x0A	; 10
    3f04:	50 e0       	ldi	r21, 0x00	; 0
    3f06:	60 e0       	ldi	r22, 0x00	; 0
    3f08:	70 e0       	ldi	r23, 0x00	; 0
    3f0a:	ce 01       	movw	r24, r28
    3f0c:	01 96       	adiw	r24, 0x01	; 1
    3f0e:	0e 94 90 31 	call	0x6320	; 0x6320 <strtol>
}
    3f12:	cb 01       	movw	r24, r22
    3f14:	29 96       	adiw	r28, 0x09	; 9
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	f8 94       	cli
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	df 91       	pop	r29
    3f22:	cf 91       	pop	r28
    3f24:	1f 91       	pop	r17
    3f26:	0f 91       	pop	r16
    3f28:	ff 90       	pop	r15
    3f2a:	ef 90       	pop	r14
    3f2c:	df 90       	pop	r13
    3f2e:	cf 90       	pop	r12
    3f30:	bf 90       	pop	r11
    3f32:	af 90       	pop	r10
    3f34:	9f 90       	pop	r9
    3f36:	8f 90       	pop	r8
    3f38:	08 95       	ret

00003f3a <_ZN4QEPU12set_registerEii>:

void QEPU::set_register(int address,int data){
    3f3a:	cf 92       	push	r12
    3f3c:	df 92       	push	r13
    3f3e:	ef 92       	push	r14
    3f40:	ff 92       	push	r15
    3f42:	0f 93       	push	r16
    3f44:	1f 93       	push	r17
    3f46:	cf 93       	push	r28
    3f48:	df 93       	push	r29
    3f4a:	6c 01       	movw	r12, r24
    3f4c:	8b 01       	movw	r16, r22
    3f4e:	ba 01       	movw	r22, r20
	char* data_str=utils.int2binstr(data,BUS_WIDTH);
    3f50:	48 e0       	ldi	r20, 0x08	; 8
    3f52:	50 e0       	ldi	r21, 0x00	; 0
    3f54:	09 96       	adiw	r24, 0x09	; 9
    3f56:	0e 94 a1 2a 	call	0x5542	; 0x5542 <_ZN5Utils10int2binstrEii>
    3f5a:	d8 2f       	mov	r29, r24
    3f5c:	c9 2f       	mov	r28, r25
	strrev(data_str);
    3f5e:	0e 94 cc 32 	call	0x6598	; 0x6598 <strrev>
    3f62:	ed 2e       	mov	r14, r29
    3f64:	fc 2e       	mov	r15, r28
	int address_offset=address*BUS_WIDTH;
    3f66:	00 0f       	add	r16, r16
    3f68:	11 1f       	adc	r17, r17
    3f6a:	00 0f       	add	r16, r16
    3f6c:	11 1f       	adc	r17, r17
    3f6e:	00 0f       	add	r16, r16
    3f70:	11 1f       	adc	r17, r17
	
	for(int i=0;i<BUS_WIDTH;i++)
    3f72:	c0 e0       	ldi	r28, 0x00	; 0
    3f74:	d0 e0       	ldi	r29, 0x00	; 0
		if(data_str[i]=='1') write(address_offset+i,THE,180);
    3f76:	f7 01       	movw	r30, r14
    3f78:	81 91       	ld	r24, Z+
    3f7a:	7f 01       	movw	r14, r30
    3f7c:	81 33       	cpi	r24, 0x31	; 49
    3f7e:	49 f4       	brne	.+18     	; 0x3f92 <_ZN4QEPU12set_registerEii+0x58>
    3f80:	24 eb       	ldi	r18, 0xB4	; 180
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	40 e0       	ldi	r20, 0x00	; 0
    3f86:	50 e0       	ldi	r21, 0x00	; 0
    3f88:	b8 01       	movw	r22, r16
    3f8a:	c6 01       	movw	r24, r12
    3f8c:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    3f90:	08 c0       	rjmp	.+16     	; 0x3fa2 <_ZN4QEPU12set_registerEii+0x68>
		else write(address_offset+i,THE,0);
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 e0       	ldi	r20, 0x00	; 0
    3f98:	50 e0       	ldi	r21, 0x00	; 0
    3f9a:	b8 01       	movw	r22, r16
    3f9c:	c6 01       	movw	r24, r12
    3f9e:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
void QEPU::set_register(int address,int data){
	char* data_str=utils.int2binstr(data,BUS_WIDTH);
	strrev(data_str);
	int address_offset=address*BUS_WIDTH;
	
	for(int i=0;i<BUS_WIDTH;i++)
    3fa2:	21 96       	adiw	r28, 0x01	; 1
    3fa4:	0f 5f       	subi	r16, 0xFF	; 255
    3fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa8:	c8 30       	cpi	r28, 0x08	; 8
    3faa:	d1 05       	cpc	r29, r1
    3fac:	21 f7       	brne	.-56     	; 0x3f76 <_ZN4QEPU12set_registerEii+0x3c>
		if(data_str[i]=='1') write(address_offset+i,THE,180);
		else write(address_offset+i,THE,0);
}
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	1f 91       	pop	r17
    3fb4:	0f 91       	pop	r16
    3fb6:	ff 90       	pop	r15
    3fb8:	ef 90       	pop	r14
    3fba:	df 90       	pop	r13
    3fbc:	cf 90       	pop	r12
    3fbe:	08 95       	ret

00003fc0 <_ZN4QEPU7dumpmemEv>:

void QEPU::dumpmem(){
    3fc0:	6f 92       	push	r6
    3fc2:	7f 92       	push	r7
    3fc4:	8f 92       	push	r8
    3fc6:	9f 92       	push	r9
    3fc8:	af 92       	push	r10
    3fca:	bf 92       	push	r11
    3fcc:	cf 92       	push	r12
    3fce:	df 92       	push	r13
    3fd0:	ef 92       	push	r14
    3fd2:	ff 92       	push	r15
    3fd4:	0f 93       	push	r16
    3fd6:	1f 93       	push	r17
    3fd8:	cf 93       	push	r28
    3fda:	df 93       	push	r29
    3fdc:	68 2e       	mov	r6, r24
    3fde:	79 2e       	mov	r7, r25
	serial.writestrln("");
    3fe0:	e8 2e       	mov	r14, r24
    3fe2:	f9 2e       	mov	r15, r25
    3fe4:	65 ec       	ldi	r22, 0xC5	; 197
    3fe6:	70 e0       	ldi	r23, 0x00	; 0
    3fe8:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    3fec:	6f e9       	ldi	r22, 0x9F	; 159
    3fee:	70 e0       	ldi	r23, 0x00	; 0
    3ff0:	86 2d       	mov	r24, r6
    3ff2:	97 2d       	mov	r25, r7
    3ff4:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    3ff8:	c0 e0       	ldi	r28, 0x00	; 0
    3ffa:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE,false));
    3ffc:	05 e2       	ldi	r16, 0x25	; 37
    3ffe:	11 e0       	ldi	r17, 0x01	; 1
    4000:	83 e0       	ldi	r24, 0x03	; 3
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
    4008:	a8 2e       	mov	r10, r24
    400a:	b9 2e       	mov	r11, r25
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	40 e0       	ldi	r20, 0x00	; 0
    4010:	50 e0       	ldi	r21, 0x00	; 0
    4012:	be 01       	movw	r22, r28
    4014:	86 2d       	mov	r24, r6
    4016:	97 2d       	mov	r25, r7
    4018:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    401c:	9f 93       	push	r25
    401e:	8f 93       	push	r24
    4020:	1f 93       	push	r17
    4022:	0f 93       	push	r16
    4024:	bf 92       	push	r11
    4026:	af 92       	push	r10
    4028:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI,false));
    402c:	83 e0       	ldi	r24, 0x03	; 3
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
    4034:	c8 2e       	mov	r12, r24
    4036:	d9 2e       	mov	r13, r25
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	41 e0       	ldi	r20, 0x01	; 1
    403c:	50 e0       	ldi	r21, 0x00	; 0
    403e:	be 01       	movw	r22, r28
    4040:	86 2d       	mov	r24, r6
    4042:	97 2d       	mov	r25, r7
    4044:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4048:	9f 93       	push	r25
    404a:	8f 93       	push	r24
    404c:	1f 93       	push	r17
    404e:	0f 93       	push	r16
    4050:	df 92       	push	r13
    4052:	cf 92       	push	r12
    4054:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
    4060:	88 2e       	mov	r8, r24
    4062:	99 2e       	mov	r9, r25
    4064:	df 93       	push	r29
    4066:	cf 93       	push	r28
    4068:	1f 93       	push	r17
    406a:	0f 93       	push	r16
    406c:	9f 92       	push	r9
    406e:	8f 92       	push	r8
    4070:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    4074:	69 eb       	ldi	r22, 0xB9	; 185
    4076:	70 e0       	ldi	r23, 0x00	; 0
    4078:	8e 2d       	mov	r24, r14
    407a:	9f 2d       	mov	r25, r15
    407c:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
    4080:	68 2d       	mov	r22, r8
    4082:	79 2d       	mov	r23, r9
    4084:	8e 2d       	mov	r24, r14
    4086:	9f 2d       	mov	r25, r15
    4088:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
    408c:	6b eb       	ldi	r22, 0xBB	; 187
    408e:	70 e0       	ldi	r23, 0x00	; 0
    4090:	8e 2d       	mov	r24, r14
    4092:	9f 2d       	mov	r25, r15
    4094:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    4098:	6a 2d       	mov	r22, r10
    409a:	7b 2d       	mov	r23, r11
    409c:	8e 2d       	mov	r24, r14
    409e:	9f 2d       	mov	r25, r15
    40a0:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    40a4:	66 ec       	ldi	r22, 0xC6	; 198
    40a6:	70 e0       	ldi	r23, 0x00	; 0
    40a8:	8e 2d       	mov	r24, r14
    40aa:	9f 2d       	mov	r25, r15
    40ac:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    40b0:	6c 2d       	mov	r22, r12
    40b2:	7d 2d       	mov	r23, r13
    40b4:	8e 2d       	mov	r24, r14
    40b6:	9f 2d       	mov	r25, r15
    40b8:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6Serial10writestrlnEPc>
}

void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    40bc:	21 96       	adiw	r28, 0x01	; 1
    40be:	8d b7       	in	r24, 0x3d	; 61
    40c0:	9e b7       	in	r25, 0x3e	; 62
    40c2:	42 96       	adiw	r24, 0x12	; 18
    40c4:	0f b6       	in	r0, 0x3f	; 63
    40c6:	f8 94       	cli
    40c8:	9e bf       	out	0x3e, r25	; 62
    40ca:	0f be       	out	0x3f, r0	; 63
    40cc:	8d bf       	out	0x3d, r24	; 61
    40ce:	c8 30       	cpi	r28, 0x08	; 8
    40d0:	d1 05       	cpc	r29, r1
    40d2:	09 f0       	breq	.+2      	; 0x40d6 <_ZN4QEPU7dumpmemEv+0x116>
    40d4:	95 cf       	rjmp	.-214    	; 0x4000 <_ZN4QEPU7dumpmemEv+0x40>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    40d6:	df 91       	pop	r29
    40d8:	cf 91       	pop	r28
    40da:	1f 91       	pop	r17
    40dc:	0f 91       	pop	r16
    40de:	ff 90       	pop	r15
    40e0:	ef 90       	pop	r14
    40e2:	df 90       	pop	r13
    40e4:	cf 90       	pop	r12
    40e6:	bf 90       	pop	r11
    40e8:	af 90       	pop	r10
    40ea:	9f 90       	pop	r9
    40ec:	8f 90       	pop	r8
    40ee:	7f 90       	pop	r7
    40f0:	6f 90       	pop	r6
    40f2:	08 95       	ret

000040f4 <_ZN4QEPU7executeEilll>:
	dumpmem();
	serial.writestr("The execution of the program has finished");
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2,int32_t op3){
    40f4:	2f 92       	push	r2
    40f6:	3f 92       	push	r3
    40f8:	4f 92       	push	r4
    40fa:	5f 92       	push	r5
    40fc:	6f 92       	push	r6
    40fe:	7f 92       	push	r7
    4100:	8f 92       	push	r8
    4102:	9f 92       	push	r9
    4104:	af 92       	push	r10
    4106:	bf 92       	push	r11
    4108:	cf 92       	push	r12
    410a:	df 92       	push	r13
    410c:	ef 92       	push	r14
    410e:	ff 92       	push	r15
    4110:	0f 93       	push	r16
    4112:	1f 93       	push	r17
    4114:	cf 93       	push	r28
    4116:	df 93       	push	r29
    4118:	cd b7       	in	r28, 0x3d	; 61
    411a:	de b7       	in	r29, 0x3e	; 62
    411c:	2a 97       	sbiw	r28, 0x0a	; 10
    411e:	0f b6       	in	r0, 0x3f	; 63
    4120:	f8 94       	cli
    4122:	de bf       	out	0x3e, r29	; 62
    4124:	0f be       	out	0x3f, r0	; 63
    4126:	cd bf       	out	0x3d, r28	; 61
    4128:	4c 01       	movw	r8, r24
    412a:	1b 01       	movw	r2, r22
    412c:	29 01       	movw	r4, r18
    412e:	3a 01       	movw	r6, r20
    4130:	a9 82       	std	Y+1, r10	; 0x01
    4132:	ba 82       	std	Y+2, r11	; 0x02
    4134:	cb 82       	std	Y+3, r12	; 0x03
    4136:	dc 82       	std	Y+4, r13	; 0x04
	int * newthephi=(int*)malloc(sizeof(int)*MAX_NEWTHEPHI);
    4138:	8c e0       	ldi	r24, 0x0C	; 12
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
    4140:	8c 01       	movw	r16, r24
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    4142:	f1 01       	movw	r30, r2
    4144:	31 97       	sbiw	r30, 0x01	; 1
    4146:	e4 32       	cpi	r30, 0x24	; 36
    4148:	f1 05       	cpc	r31, r1
    414a:	08 f0       	brcs	.+2      	; 0x414e <_ZN4QEPU7executeEilll+0x5a>
    414c:	cb c5       	rjmp	.+2966   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
    414e:	e6 5d       	subi	r30, 0xD6	; 214
    4150:	ff 4f       	sbci	r31, 0xFF	; 255
    4152:	0c 94 f1 2f 	jmp	0x5fe2	; 0x5fe2 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOR (move register) */
			write(op1,THE,read(op2,THE,false));
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	40 e0       	ldi	r20, 0x00	; 0
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	6e 2d       	mov	r22, r14
    415e:	7f 2d       	mov	r23, r15
    4160:	c4 01       	movw	r24, r8
    4162:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4166:	9c 01       	movw	r18, r24
    4168:	40 e0       	ldi	r20, 0x00	; 0
    416a:	50 e0       	ldi	r21, 0x00	; 0
    416c:	b2 01       	movw	r22, r4
    416e:	c4 01       	movw	r24, r8
    4170:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI,false));
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	41 e0       	ldi	r20, 0x01	; 1
    4178:	50 e0       	ldi	r21, 0x00	; 0
    417a:	6e 2d       	mov	r22, r14
    417c:	7f 2d       	mov	r23, r15
    417e:	c4 01       	movw	r24, r8
    4180:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4184:	9c 01       	movw	r18, r24
    4186:	41 e0       	ldi	r20, 0x01	; 1
    4188:	50 e0       	ldi	r21, 0x00	; 0
    418a:	b2 01       	movw	r22, r4
    418c:	c4 01       	movw	r24, r8
    418e:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4192:	a8 c5       	rjmp	.+2896   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x02: /*MOM (move memory)*/
			sram.write(op1,sram.read(op2));
    4194:	22 e0       	ldi	r18, 0x02	; 2
    4196:	82 0e       	add	r8, r18
    4198:	91 1c       	adc	r9, r1
    419a:	6e 2d       	mov	r22, r14
    419c:	c4 01       	movw	r24, r8
    419e:	0e 94 01 29 	call	0x5202	; 0x5202 <_ZN4SRAM4readEa>
    41a2:	48 2f       	mov	r20, r24
    41a4:	64 2d       	mov	r22, r4
    41a6:	c4 01       	movw	r24, r8
    41a8:	0e 94 6d 29 	call	0x52da	; 0x52da <_ZN4SRAM5writeEaa>
			break;
    41ac:	9b c5       	rjmp	.+2870   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x03: /*STR (store)*/
			sram.write(op1,fetch_register(op2));
    41ae:	6e 2d       	mov	r22, r14
    41b0:	7f 2d       	mov	r23, r15
    41b2:	c4 01       	movw	r24, r8
    41b4:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN4QEPU14fetch_registerEi>
    41b8:	48 2f       	mov	r20, r24
    41ba:	64 2d       	mov	r22, r4
    41bc:	c4 01       	movw	r24, r8
    41be:	02 96       	adiw	r24, 0x02	; 2
    41c0:	0e 94 6d 29 	call	0x52da	; 0x52da <_ZN4SRAM5writeEaa>
			break;
    41c4:	8f c5       	rjmp	.+2846   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x04: /*LOD (load)*/
			set_register(op1,sram.read(op2));
    41c6:	6e 2d       	mov	r22, r14
    41c8:	c4 01       	movw	r24, r8
    41ca:	02 96       	adiw	r24, 0x02	; 2
    41cc:	0e 94 01 29 	call	0x5202	; 0x5202 <_ZN4SRAM4readEa>
    41d0:	48 2f       	mov	r20, r24
    41d2:	55 27       	eor	r21, r21
    41d4:	47 fd       	sbrc	r20, 7
    41d6:	50 95       	com	r21
    41d8:	b2 01       	movw	r22, r4
    41da:	c4 01       	movw	r24, r8
    41dc:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <_ZN4QEPU12set_registerEii>
			break;
    41e0:	81 c5       	rjmp	.+2818   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x05: /*CRW (Constant Ram Write)*/
			sram.write(op1,op2);
    41e2:	4e 2d       	mov	r20, r14
    41e4:	64 2d       	mov	r22, r4
    41e6:	c4 01       	movw	r24, r8
    41e8:	02 96       	adiw	r24, 0x02	; 2
    41ea:	0e 94 6d 29 	call	0x52da	; 0x52da <_ZN4SRAM5writeEaa>
			break;
    41ee:	7a c5       	rjmp	.+2804   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x06: /*CQW* (Constant Qubit Write)*/
			set_register(op1,op2);
    41f0:	4e 2d       	mov	r20, r14
    41f2:	5f 2d       	mov	r21, r15
    41f4:	b2 01       	movw	r22, r4
    41f6:	c4 01       	movw	r24, r8
    41f8:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <_ZN4QEPU12set_registerEii>
			break;
    41fc:	73 c5       	rjmp	.+2790   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x07: /*POP (pop)*/
			set_register(op1,sram.pop());
    41fe:	c4 01       	movw	r24, r8
    4200:	02 96       	adiw	r24, 0x02	; 2
    4202:	0e 94 96 29 	call	0x532c	; 0x532c <_ZN4SRAM3popEv>
    4206:	ac 01       	movw	r20, r24
    4208:	b2 01       	movw	r22, r4
    420a:	c4 01       	movw	r24, r8
    420c:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <_ZN4QEPU12set_registerEii>
			break;
    4210:	69 c5       	rjmp	.+2770   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x08: /*PSH (push)*/
			sram.push(fetch_register(op1));
    4212:	b2 01       	movw	r22, r4
    4214:	c4 01       	movw	r24, r8
    4216:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN4QEPU14fetch_registerEi>
    421a:	e2 e0       	ldi	r30, 0x02	; 2
    421c:	8e 0e       	add	r8, r30
    421e:	91 1c       	adc	r9, r1
    4220:	bc 01       	movw	r22, r24
    4222:	c4 01       	movw	r24, r8
    4224:	0e 94 b2 29 	call	0x5364	; 0x5364 <_ZN4SRAM4pushEi>
			sram.dumpmem(5);
    4228:	65 e0       	ldi	r22, 0x05	; 5
    422a:	70 e0       	ldi	r23, 0x00	; 0
    422c:	c4 01       	movw	r24, r8
    422e:	0e 94 00 2a 	call	0x5400	; 0x5400 <_ZN4SRAM7dumpmemEi>
			break;
    4232:	58 c5       	rjmp	.+2736   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x09: /*CMT (constantmovtheta)*/
			write(op1,THE,op2);
    4234:	2e 2d       	mov	r18, r14
    4236:	3f 2d       	mov	r19, r15
    4238:	40 e0       	ldi	r20, 0x00	; 0
    423a:	50 e0       	ldi	r21, 0x00	; 0
    423c:	b2 01       	movw	r22, r4
    423e:	c4 01       	movw	r24, r8
    4240:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4244:	4f c5       	rjmp	.+2718   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x0A: /*CMP (constantmovphi)*/
			write(op1,PHI,op2);
    4246:	2e 2d       	mov	r18, r14
    4248:	3f 2d       	mov	r19, r15
    424a:	41 e0       	ldi	r20, 0x01	; 1
    424c:	50 e0       	ldi	r21, 0x00	; 0
    424e:	b2 01       	movw	r22, r4
    4250:	c4 01       	movw	r24, r8
    4252:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4256:	46 c5       	rjmp	.+2700   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
			break;
		case 0x0D: /*INT (interrupt)*/
			//NEEDS TABLE SYSTEM
			break;
		case 0x0E: /*JMP (jump)*/ 
			program_counter=op1-1; 
    4258:	f1 e0       	ldi	r31, 0x01	; 1
    425a:	4f 1a       	sub	r4, r31
    425c:	51 08       	sbc	r5, r1
    425e:	f4 01       	movw	r30, r8
    4260:	53 86       	std	Z+11, r5	; 0x0b
    4262:	42 86       	std	Z+10, r4	; 0x0a
			break;
    4264:	3f c5       	rjmp	.+2686   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x0F: /*DLY (delay)*/
			utils.delay(op1);
    4266:	b2 01       	movw	r22, r4
    4268:	c4 01       	movw	r24, r8
    426a:	09 96       	adiw	r24, 0x09	; 9
    426c:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <_ZN5Utils5delayEi>
			break;
    4270:	39 c5       	rjmp	.+2674   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x10: /*NOP (nop) - DOES NOTHING*/ 
			break;
		case 0x11: /*HLT (halt)*/ 
			program_counter=program_counter_maximum;
    4272:	f4 01       	movw	r30, r8
    4274:	84 85       	ldd	r24, Z+12	; 0x0c
    4276:	95 85       	ldd	r25, Z+13	; 0x0d
    4278:	93 87       	std	Z+11, r25	; 0x0b
    427a:	82 87       	std	Z+10, r24	; 0x0a
			break;
    427c:	33 c5       	rjmp	.+2662   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x12: // X GATE
			newthephi=gates.X(read(op1,THE,false),read(op1,PHI,false));
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	41 e0       	ldi	r20, 0x01	; 1
    4282:	50 e0       	ldi	r21, 0x00	; 0
    4284:	b2 01       	movw	r22, r4
    4286:	c4 01       	movw	r24, r8
    4288:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    428c:	8c 01       	movw	r16, r24
    428e:	20 e0       	ldi	r18, 0x00	; 0
    4290:	40 e0       	ldi	r20, 0x00	; 0
    4292:	50 e0       	ldi	r21, 0x00	; 0
    4294:	b2 01       	movw	r22, r4
    4296:	c4 01       	movw	r24, r8
    4298:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    429c:	a8 01       	movw	r20, r16
    429e:	bc 01       	movw	r22, r24
    42a0:	c4 01       	movw	r24, r8
    42a2:	08 96       	adiw	r24, 0x08	; 8
    42a4:	0e 94 ef 08 	call	0x11de	; 0x11de <_ZN5Gates1XEii>
    42a8:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    42aa:	fc 01       	movw	r30, r24
    42ac:	20 81       	ld	r18, Z
    42ae:	31 81       	ldd	r19, Z+1	; 0x01
    42b0:	40 e0       	ldi	r20, 0x00	; 0
    42b2:	50 e0       	ldi	r21, 0x00	; 0
    42b4:	b2 01       	movw	r22, r4
    42b6:	c4 01       	movw	r24, r8
    42b8:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    42bc:	f8 01       	movw	r30, r16
    42be:	22 81       	ldd	r18, Z+2	; 0x02
    42c0:	33 81       	ldd	r19, Z+3	; 0x03
    42c2:	41 e0       	ldi	r20, 0x01	; 1
    42c4:	50 e0       	ldi	r21, 0x00	; 0
    42c6:	b2 01       	movw	r22, r4
    42c8:	c4 01       	movw	r24, r8
    42ca:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    42ce:	0a c5       	rjmp	.+2580   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x13: // Y GATE
			newthephi=gates.Y(read(op1,THE,false),read(op1,PHI,false));
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	41 e0       	ldi	r20, 0x01	; 1
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	b2 01       	movw	r22, r4
    42d8:	c4 01       	movw	r24, r8
    42da:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    42de:	8c 01       	movw	r16, r24
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	40 e0       	ldi	r20, 0x00	; 0
    42e4:	50 e0       	ldi	r21, 0x00	; 0
    42e6:	b2 01       	movw	r22, r4
    42e8:	c4 01       	movw	r24, r8
    42ea:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    42ee:	a8 01       	movw	r20, r16
    42f0:	bc 01       	movw	r22, r24
    42f2:	c4 01       	movw	r24, r8
    42f4:	08 96       	adiw	r24, 0x08	; 8
    42f6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN5Gates1YEii>
    42fa:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    42fc:	fc 01       	movw	r30, r24
    42fe:	20 81       	ld	r18, Z
    4300:	31 81       	ldd	r19, Z+1	; 0x01
    4302:	40 e0       	ldi	r20, 0x00	; 0
    4304:	50 e0       	ldi	r21, 0x00	; 0
    4306:	b2 01       	movw	r22, r4
    4308:	c4 01       	movw	r24, r8
    430a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    430e:	f8 01       	movw	r30, r16
    4310:	22 81       	ldd	r18, Z+2	; 0x02
    4312:	33 81       	ldd	r19, Z+3	; 0x03
    4314:	41 e0       	ldi	r20, 0x01	; 1
    4316:	50 e0       	ldi	r21, 0x00	; 0
    4318:	b2 01       	movw	r22, r4
    431a:	c4 01       	movw	r24, r8
    431c:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4320:	e1 c4       	rjmp	.+2498   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x14: // Z GATE
			newthephi=gates.Z(read(op1,THE,false),read(op1,PHI,false));
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	41 e0       	ldi	r20, 0x01	; 1
    4326:	50 e0       	ldi	r21, 0x00	; 0
    4328:	b2 01       	movw	r22, r4
    432a:	c4 01       	movw	r24, r8
    432c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4330:	8c 01       	movw	r16, r24
    4332:	20 e0       	ldi	r18, 0x00	; 0
    4334:	40 e0       	ldi	r20, 0x00	; 0
    4336:	50 e0       	ldi	r21, 0x00	; 0
    4338:	b2 01       	movw	r22, r4
    433a:	c4 01       	movw	r24, r8
    433c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4340:	a8 01       	movw	r20, r16
    4342:	bc 01       	movw	r22, r24
    4344:	c4 01       	movw	r24, r8
    4346:	08 96       	adiw	r24, 0x08	; 8
    4348:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN5Gates1ZEii>
    434c:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    434e:	fc 01       	movw	r30, r24
    4350:	20 81       	ld	r18, Z
    4352:	31 81       	ldd	r19, Z+1	; 0x01
    4354:	40 e0       	ldi	r20, 0x00	; 0
    4356:	50 e0       	ldi	r21, 0x00	; 0
    4358:	b2 01       	movw	r22, r4
    435a:	c4 01       	movw	r24, r8
    435c:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4360:	f8 01       	movw	r30, r16
    4362:	22 81       	ldd	r18, Z+2	; 0x02
    4364:	33 81       	ldd	r19, Z+3	; 0x03
    4366:	41 e0       	ldi	r20, 0x01	; 1
    4368:	50 e0       	ldi	r21, 0x00	; 0
    436a:	b2 01       	movw	r22, r4
    436c:	c4 01       	movw	r24, r8
    436e:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4372:	b8 c4       	rjmp	.+2416   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x15: // H GATE
			newthephi=gates.H(read(op1,THE,false),read(op1,PHI,false));
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	41 e0       	ldi	r20, 0x01	; 1
    4378:	50 e0       	ldi	r21, 0x00	; 0
    437a:	b2 01       	movw	r22, r4
    437c:	c4 01       	movw	r24, r8
    437e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4382:	8c 01       	movw	r16, r24
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	40 e0       	ldi	r20, 0x00	; 0
    4388:	50 e0       	ldi	r21, 0x00	; 0
    438a:	b2 01       	movw	r22, r4
    438c:	c4 01       	movw	r24, r8
    438e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4392:	a8 01       	movw	r20, r16
    4394:	bc 01       	movw	r22, r24
    4396:	c4 01       	movw	r24, r8
    4398:	08 96       	adiw	r24, 0x08	; 8
    439a:	0e 94 2d 0a 	call	0x145a	; 0x145a <_ZN5Gates1HEii>
    439e:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    43a0:	fc 01       	movw	r30, r24
    43a2:	20 81       	ld	r18, Z
    43a4:	31 81       	ldd	r19, Z+1	; 0x01
    43a6:	40 e0       	ldi	r20, 0x00	; 0
    43a8:	50 e0       	ldi	r21, 0x00	; 0
    43aa:	b2 01       	movw	r22, r4
    43ac:	c4 01       	movw	r24, r8
    43ae:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    43b2:	f8 01       	movw	r30, r16
    43b4:	22 81       	ldd	r18, Z+2	; 0x02
    43b6:	33 81       	ldd	r19, Z+3	; 0x03
    43b8:	41 e0       	ldi	r20, 0x01	; 1
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	b2 01       	movw	r22, r4
    43be:	c4 01       	movw	r24, r8
    43c0:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    43c4:	8f c4       	rjmp	.+2334   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x16: // S GATE
			newthephi=gates.S(read(op1,THE,false),read(op1,PHI,false));
    43c6:	20 e0       	ldi	r18, 0x00	; 0
    43c8:	41 e0       	ldi	r20, 0x01	; 1
    43ca:	50 e0       	ldi	r21, 0x00	; 0
    43cc:	b2 01       	movw	r22, r4
    43ce:	c4 01       	movw	r24, r8
    43d0:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    43d4:	8c 01       	movw	r16, r24
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	40 e0       	ldi	r20, 0x00	; 0
    43da:	50 e0       	ldi	r21, 0x00	; 0
    43dc:	b2 01       	movw	r22, r4
    43de:	c4 01       	movw	r24, r8
    43e0:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    43e4:	a8 01       	movw	r20, r16
    43e6:	bc 01       	movw	r22, r24
    43e8:	c4 01       	movw	r24, r8
    43ea:	08 96       	adiw	r24, 0x08	; 8
    43ec:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN5Gates1SEii>
    43f0:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    43f2:	fc 01       	movw	r30, r24
    43f4:	20 81       	ld	r18, Z
    43f6:	31 81       	ldd	r19, Z+1	; 0x01
    43f8:	40 e0       	ldi	r20, 0x00	; 0
    43fa:	50 e0       	ldi	r21, 0x00	; 0
    43fc:	b2 01       	movw	r22, r4
    43fe:	c4 01       	movw	r24, r8
    4400:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4404:	f8 01       	movw	r30, r16
    4406:	22 81       	ldd	r18, Z+2	; 0x02
    4408:	33 81       	ldd	r19, Z+3	; 0x03
    440a:	41 e0       	ldi	r20, 0x01	; 1
    440c:	50 e0       	ldi	r21, 0x00	; 0
    440e:	b2 01       	movw	r22, r4
    4410:	c4 01       	movw	r24, r8
    4412:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4416:	66 c4       	rjmp	.+2252   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x17: // T GATE
			newthephi=gates.T(read(op1,THE,false),read(op1,PHI,false));
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	41 e0       	ldi	r20, 0x01	; 1
    441c:	50 e0       	ldi	r21, 0x00	; 0
    441e:	b2 01       	movw	r22, r4
    4420:	c4 01       	movw	r24, r8
    4422:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4426:	8c 01       	movw	r16, r24
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	40 e0       	ldi	r20, 0x00	; 0
    442c:	50 e0       	ldi	r21, 0x00	; 0
    442e:	b2 01       	movw	r22, r4
    4430:	c4 01       	movw	r24, r8
    4432:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4436:	a8 01       	movw	r20, r16
    4438:	bc 01       	movw	r22, r24
    443a:	c4 01       	movw	r24, r8
    443c:	08 96       	adiw	r24, 0x08	; 8
    443e:	0e 94 05 0b 	call	0x160a	; 0x160a <_ZN5Gates1TEii>
    4442:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4444:	fc 01       	movw	r30, r24
    4446:	20 81       	ld	r18, Z
    4448:	31 81       	ldd	r19, Z+1	; 0x01
    444a:	40 e0       	ldi	r20, 0x00	; 0
    444c:	50 e0       	ldi	r21, 0x00	; 0
    444e:	b2 01       	movw	r22, r4
    4450:	c4 01       	movw	r24, r8
    4452:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4456:	f8 01       	movw	r30, r16
    4458:	22 81       	ldd	r18, Z+2	; 0x02
    445a:	33 81       	ldd	r19, Z+3	; 0x03
    445c:	41 e0       	ldi	r20, 0x01	; 1
    445e:	50 e0       	ldi	r21, 0x00	; 0
    4460:	b2 01       	movw	r22, r4
    4462:	c4 01       	movw	r24, r8
    4464:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4468:	3d c4       	rjmp	.+2170   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x18: // ROTATE X GATE
			newthephi=gates.ROX(read(op1,THE,false),read(op1,PHI,false),op2);
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	41 e0       	ldi	r20, 0x01	; 1
    446e:	50 e0       	ldi	r21, 0x00	; 0
    4470:	b2 01       	movw	r22, r4
    4472:	c4 01       	movw	r24, r8
    4474:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4478:	8c 01       	movw	r16, r24
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	40 e0       	ldi	r20, 0x00	; 0
    447e:	50 e0       	ldi	r21, 0x00	; 0
    4480:	b2 01       	movw	r22, r4
    4482:	c4 01       	movw	r24, r8
    4484:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4488:	2e 2d       	mov	r18, r14
    448a:	3f 2d       	mov	r19, r15
    448c:	a8 01       	movw	r20, r16
    448e:	bc 01       	movw	r22, r24
    4490:	c4 01       	movw	r24, r8
    4492:	08 96       	adiw	r24, 0x08	; 8
    4494:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN5Gates3ROXEiii>
    4498:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    449a:	fc 01       	movw	r30, r24
    449c:	20 81       	ld	r18, Z
    449e:	31 81       	ldd	r19, Z+1	; 0x01
    44a0:	40 e0       	ldi	r20, 0x00	; 0
    44a2:	50 e0       	ldi	r21, 0x00	; 0
    44a4:	b2 01       	movw	r22, r4
    44a6:	c4 01       	movw	r24, r8
    44a8:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    44ac:	f8 01       	movw	r30, r16
    44ae:	22 81       	ldd	r18, Z+2	; 0x02
    44b0:	33 81       	ldd	r19, Z+3	; 0x03
    44b2:	41 e0       	ldi	r20, 0x01	; 1
    44b4:	50 e0       	ldi	r21, 0x00	; 0
    44b6:	b2 01       	movw	r22, r4
    44b8:	c4 01       	movw	r24, r8
    44ba:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    44be:	12 c4       	rjmp	.+2084   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x19: // ROTATE Y GATE
			newthephi=gates.ROY(read(op1,THE,false),read(op1,PHI,false),op2);
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	41 e0       	ldi	r20, 0x01	; 1
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	b2 01       	movw	r22, r4
    44c8:	c4 01       	movw	r24, r8
    44ca:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    44ce:	8c 01       	movw	r16, r24
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	40 e0       	ldi	r20, 0x00	; 0
    44d4:	50 e0       	ldi	r21, 0x00	; 0
    44d6:	b2 01       	movw	r22, r4
    44d8:	c4 01       	movw	r24, r8
    44da:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    44de:	2e 2d       	mov	r18, r14
    44e0:	3f 2d       	mov	r19, r15
    44e2:	a8 01       	movw	r20, r16
    44e4:	bc 01       	movw	r22, r24
    44e6:	c4 01       	movw	r24, r8
    44e8:	08 96       	adiw	r24, 0x08	; 8
    44ea:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN5Gates3ROYEiii>
    44ee:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    44f0:	fc 01       	movw	r30, r24
    44f2:	20 81       	ld	r18, Z
    44f4:	31 81       	ldd	r19, Z+1	; 0x01
    44f6:	40 e0       	ldi	r20, 0x00	; 0
    44f8:	50 e0       	ldi	r21, 0x00	; 0
    44fa:	b2 01       	movw	r22, r4
    44fc:	c4 01       	movw	r24, r8
    44fe:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4502:	f8 01       	movw	r30, r16
    4504:	22 81       	ldd	r18, Z+2	; 0x02
    4506:	33 81       	ldd	r19, Z+3	; 0x03
    4508:	41 e0       	ldi	r20, 0x01	; 1
    450a:	50 e0       	ldi	r21, 0x00	; 0
    450c:	b2 01       	movw	r22, r4
    450e:	c4 01       	movw	r24, r8
    4510:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4514:	e7 c3       	rjmp	.+1998   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x1A: // ROTATE Z GATE
			newthephi=gates.ROZ(read(op1,THE,false),read(op1,PHI,false),op2);
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	41 e0       	ldi	r20, 0x01	; 1
    451a:	50 e0       	ldi	r21, 0x00	; 0
    451c:	b2 01       	movw	r22, r4
    451e:	c4 01       	movw	r24, r8
    4520:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4524:	8c 01       	movw	r16, r24
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	40 e0       	ldi	r20, 0x00	; 0
    452a:	50 e0       	ldi	r21, 0x00	; 0
    452c:	b2 01       	movw	r22, r4
    452e:	c4 01       	movw	r24, r8
    4530:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4534:	2e 2d       	mov	r18, r14
    4536:	3f 2d       	mov	r19, r15
    4538:	a8 01       	movw	r20, r16
    453a:	bc 01       	movw	r22, r24
    453c:	c4 01       	movw	r24, r8
    453e:	08 96       	adiw	r24, 0x08	; 8
    4540:	0e 94 bb 13 	call	0x2776	; 0x2776 <_ZN5Gates3ROZEiii>
    4544:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4546:	fc 01       	movw	r30, r24
    4548:	20 81       	ld	r18, Z
    454a:	31 81       	ldd	r19, Z+1	; 0x01
    454c:	40 e0       	ldi	r20, 0x00	; 0
    454e:	50 e0       	ldi	r21, 0x00	; 0
    4550:	b2 01       	movw	r22, r4
    4552:	c4 01       	movw	r24, r8
    4554:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4558:	f8 01       	movw	r30, r16
    455a:	22 81       	ldd	r18, Z+2	; 0x02
    455c:	33 81       	ldd	r19, Z+3	; 0x03
    455e:	41 e0       	ldi	r20, 0x01	; 1
    4560:	50 e0       	ldi	r21, 0x00	; 0
    4562:	b2 01       	movw	r22, r4
    4564:	c4 01       	movw	r24, r8
    4566:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    456a:	bc c3       	rjmp	.+1912   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		//2 QUBIT GATES -
		case 0x1B: // CNOT GATE
			newthephi=gates.CNO(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    456c:	ce 2c       	mov	r12, r14
    456e:	df 2c       	mov	r13, r15
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	41 e0       	ldi	r20, 0x01	; 1
    4574:	50 e0       	ldi	r21, 0x00	; 0
    4576:	6e 2d       	mov	r22, r14
    4578:	7f 2d       	mov	r23, r15
    457a:	c4 01       	movw	r24, r8
    457c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4580:	8c 01       	movw	r16, r24
    4582:	20 e0       	ldi	r18, 0x00	; 0
    4584:	40 e0       	ldi	r20, 0x00	; 0
    4586:	50 e0       	ldi	r21, 0x00	; 0
    4588:	6e 2d       	mov	r22, r14
    458a:	7f 2d       	mov	r23, r15
    458c:	c4 01       	movw	r24, r8
    458e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4592:	5c 01       	movw	r10, r24
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	41 e0       	ldi	r20, 0x01	; 1
    4598:	50 e0       	ldi	r21, 0x00	; 0
    459a:	b2 01       	movw	r22, r4
    459c:	c4 01       	movw	r24, r8
    459e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    45a2:	7c 01       	movw	r14, r24
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	40 e0       	ldi	r20, 0x00	; 0
    45a8:	50 e0       	ldi	r21, 0x00	; 0
    45aa:	b2 01       	movw	r22, r4
    45ac:	c4 01       	movw	r24, r8
    45ae:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    45b2:	95 01       	movw	r18, r10
    45b4:	a7 01       	movw	r20, r14
    45b6:	bc 01       	movw	r22, r24
    45b8:	c4 01       	movw	r24, r8
    45ba:	08 96       	adiw	r24, 0x08	; 8
    45bc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN5Gates3CNOEiiii>
    45c0:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    45c2:	fc 01       	movw	r30, r24
    45c4:	20 81       	ld	r18, Z
    45c6:	31 81       	ldd	r19, Z+1	; 0x01
    45c8:	40 e0       	ldi	r20, 0x00	; 0
    45ca:	50 e0       	ldi	r21, 0x00	; 0
    45cc:	b2 01       	movw	r22, r4
    45ce:	c4 01       	movw	r24, r8
    45d0:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    45d4:	f8 01       	movw	r30, r16
    45d6:	22 81       	ldd	r18, Z+2	; 0x02
    45d8:	33 81       	ldd	r19, Z+3	; 0x03
    45da:	41 e0       	ldi	r20, 0x01	; 1
    45dc:	50 e0       	ldi	r21, 0x00	; 0
    45de:	b2 01       	movw	r22, r4
    45e0:	c4 01       	movw	r24, r8
    45e2:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    45e6:	f8 01       	movw	r30, r16
    45e8:	24 81       	ldd	r18, Z+4	; 0x04
    45ea:	35 81       	ldd	r19, Z+5	; 0x05
    45ec:	40 e0       	ldi	r20, 0x00	; 0
    45ee:	50 e0       	ldi	r21, 0x00	; 0
    45f0:	6c 2d       	mov	r22, r12
    45f2:	7d 2d       	mov	r23, r13
    45f4:	c4 01       	movw	r24, r8
    45f6:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    45fa:	f8 01       	movw	r30, r16
    45fc:	26 81       	ldd	r18, Z+6	; 0x06
    45fe:	37 81       	ldd	r19, Z+7	; 0x07
    4600:	41 e0       	ldi	r20, 0x01	; 1
    4602:	50 e0       	ldi	r21, 0x00	; 0
    4604:	6c 2d       	mov	r22, r12
    4606:	7d 2d       	mov	r23, r13
    4608:	c4 01       	movw	r24, r8
    460a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    460e:	6a c3       	rjmp	.+1748   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x1C: // CSIGN GATE
			newthephi=gates.CSI(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4610:	ce 2c       	mov	r12, r14
    4612:	df 2c       	mov	r13, r15
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	41 e0       	ldi	r20, 0x01	; 1
    4618:	50 e0       	ldi	r21, 0x00	; 0
    461a:	6e 2d       	mov	r22, r14
    461c:	7f 2d       	mov	r23, r15
    461e:	c4 01       	movw	r24, r8
    4620:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4624:	8c 01       	movw	r16, r24
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	40 e0       	ldi	r20, 0x00	; 0
    462a:	50 e0       	ldi	r21, 0x00	; 0
    462c:	6e 2d       	mov	r22, r14
    462e:	7f 2d       	mov	r23, r15
    4630:	c4 01       	movw	r24, r8
    4632:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4636:	5c 01       	movw	r10, r24
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	41 e0       	ldi	r20, 0x01	; 1
    463c:	50 e0       	ldi	r21, 0x00	; 0
    463e:	b2 01       	movw	r22, r4
    4640:	c4 01       	movw	r24, r8
    4642:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4646:	7c 01       	movw	r14, r24
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	40 e0       	ldi	r20, 0x00	; 0
    464c:	50 e0       	ldi	r21, 0x00	; 0
    464e:	b2 01       	movw	r22, r4
    4650:	c4 01       	movw	r24, r8
    4652:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4656:	95 01       	movw	r18, r10
    4658:	a7 01       	movw	r20, r14
    465a:	bc 01       	movw	r22, r24
    465c:	c4 01       	movw	r24, r8
    465e:	08 96       	adiw	r24, 0x08	; 8
    4660:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5Gates3CSIEiiii>
    4664:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4666:	fc 01       	movw	r30, r24
    4668:	20 81       	ld	r18, Z
    466a:	31 81       	ldd	r19, Z+1	; 0x01
    466c:	40 e0       	ldi	r20, 0x00	; 0
    466e:	50 e0       	ldi	r21, 0x00	; 0
    4670:	b2 01       	movw	r22, r4
    4672:	c4 01       	movw	r24, r8
    4674:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4678:	f8 01       	movw	r30, r16
    467a:	22 81       	ldd	r18, Z+2	; 0x02
    467c:	33 81       	ldd	r19, Z+3	; 0x03
    467e:	41 e0       	ldi	r20, 0x01	; 1
    4680:	50 e0       	ldi	r21, 0x00	; 0
    4682:	b2 01       	movw	r22, r4
    4684:	c4 01       	movw	r24, r8
    4686:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    468a:	f8 01       	movw	r30, r16
    468c:	24 81       	ldd	r18, Z+4	; 0x04
    468e:	35 81       	ldd	r19, Z+5	; 0x05
    4690:	40 e0       	ldi	r20, 0x00	; 0
    4692:	50 e0       	ldi	r21, 0x00	; 0
    4694:	6c 2d       	mov	r22, r12
    4696:	7d 2d       	mov	r23, r13
    4698:	c4 01       	movw	r24, r8
    469a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    469e:	f8 01       	movw	r30, r16
    46a0:	26 81       	ldd	r18, Z+6	; 0x06
    46a2:	37 81       	ldd	r19, Z+7	; 0x07
    46a4:	41 e0       	ldi	r20, 0x01	; 1
    46a6:	50 e0       	ldi	r21, 0x00	; 0
    46a8:	6c 2d       	mov	r22, r12
    46aa:	7d 2d       	mov	r23, r13
    46ac:	c4 01       	movw	r24, r8
    46ae:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    46b2:	18 c3       	rjmp	.+1584   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x1D: // SWAP GATE
			newthephi=gates.SWA(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    46b4:	ce 2c       	mov	r12, r14
    46b6:	df 2c       	mov	r13, r15
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	41 e0       	ldi	r20, 0x01	; 1
    46bc:	50 e0       	ldi	r21, 0x00	; 0
    46be:	6e 2d       	mov	r22, r14
    46c0:	7f 2d       	mov	r23, r15
    46c2:	c4 01       	movw	r24, r8
    46c4:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    46c8:	8c 01       	movw	r16, r24
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	40 e0       	ldi	r20, 0x00	; 0
    46ce:	50 e0       	ldi	r21, 0x00	; 0
    46d0:	6e 2d       	mov	r22, r14
    46d2:	7f 2d       	mov	r23, r15
    46d4:	c4 01       	movw	r24, r8
    46d6:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    46da:	5c 01       	movw	r10, r24
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	41 e0       	ldi	r20, 0x01	; 1
    46e0:	50 e0       	ldi	r21, 0x00	; 0
    46e2:	b2 01       	movw	r22, r4
    46e4:	c4 01       	movw	r24, r8
    46e6:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    46ea:	7c 01       	movw	r14, r24
    46ec:	20 e0       	ldi	r18, 0x00	; 0
    46ee:	40 e0       	ldi	r20, 0x00	; 0
    46f0:	50 e0       	ldi	r21, 0x00	; 0
    46f2:	b2 01       	movw	r22, r4
    46f4:	c4 01       	movw	r24, r8
    46f6:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    46fa:	95 01       	movw	r18, r10
    46fc:	a7 01       	movw	r20, r14
    46fe:	bc 01       	movw	r22, r24
    4700:	c4 01       	movw	r24, r8
    4702:	08 96       	adiw	r24, 0x08	; 8
    4704:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN5Gates3SWAEiiii>
    4708:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    470a:	fc 01       	movw	r30, r24
    470c:	20 81       	ld	r18, Z
    470e:	31 81       	ldd	r19, Z+1	; 0x01
    4710:	40 e0       	ldi	r20, 0x00	; 0
    4712:	50 e0       	ldi	r21, 0x00	; 0
    4714:	b2 01       	movw	r22, r4
    4716:	c4 01       	movw	r24, r8
    4718:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    471c:	f8 01       	movw	r30, r16
    471e:	22 81       	ldd	r18, Z+2	; 0x02
    4720:	33 81       	ldd	r19, Z+3	; 0x03
    4722:	41 e0       	ldi	r20, 0x01	; 1
    4724:	50 e0       	ldi	r21, 0x00	; 0
    4726:	b2 01       	movw	r22, r4
    4728:	c4 01       	movw	r24, r8
    472a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    472e:	f8 01       	movw	r30, r16
    4730:	24 81       	ldd	r18, Z+4	; 0x04
    4732:	35 81       	ldd	r19, Z+5	; 0x05
    4734:	40 e0       	ldi	r20, 0x00	; 0
    4736:	50 e0       	ldi	r21, 0x00	; 0
    4738:	6c 2d       	mov	r22, r12
    473a:	7d 2d       	mov	r23, r13
    473c:	c4 01       	movw	r24, r8
    473e:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4742:	f8 01       	movw	r30, r16
    4744:	26 81       	ldd	r18, Z+6	; 0x06
    4746:	37 81       	ldd	r19, Z+7	; 0x07
    4748:	41 e0       	ldi	r20, 0x01	; 1
    474a:	50 e0       	ldi	r21, 0x00	; 0
    474c:	6c 2d       	mov	r22, r12
    474e:	7d 2d       	mov	r23, r13
    4750:	c4 01       	movw	r24, r8
    4752:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4756:	c6 c2       	rjmp	.+1420   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x1E: // INCREMENT GATE
			newthephi=gates.INC(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4758:	ce 2c       	mov	r12, r14
    475a:	df 2c       	mov	r13, r15
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	41 e0       	ldi	r20, 0x01	; 1
    4760:	50 e0       	ldi	r21, 0x00	; 0
    4762:	6e 2d       	mov	r22, r14
    4764:	7f 2d       	mov	r23, r15
    4766:	c4 01       	movw	r24, r8
    4768:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    476c:	8c 01       	movw	r16, r24
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	40 e0       	ldi	r20, 0x00	; 0
    4772:	50 e0       	ldi	r21, 0x00	; 0
    4774:	6e 2d       	mov	r22, r14
    4776:	7f 2d       	mov	r23, r15
    4778:	c4 01       	movw	r24, r8
    477a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    477e:	5c 01       	movw	r10, r24
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	41 e0       	ldi	r20, 0x01	; 1
    4784:	50 e0       	ldi	r21, 0x00	; 0
    4786:	b2 01       	movw	r22, r4
    4788:	c4 01       	movw	r24, r8
    478a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    478e:	7c 01       	movw	r14, r24
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	40 e0       	ldi	r20, 0x00	; 0
    4794:	50 e0       	ldi	r21, 0x00	; 0
    4796:	b2 01       	movw	r22, r4
    4798:	c4 01       	movw	r24, r8
    479a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    479e:	95 01       	movw	r18, r10
    47a0:	a7 01       	movw	r20, r14
    47a2:	bc 01       	movw	r22, r24
    47a4:	c4 01       	movw	r24, r8
    47a6:	08 96       	adiw	r24, 0x08	; 8
    47a8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN5Gates3INCEiiii>
    47ac:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    47ae:	fc 01       	movw	r30, r24
    47b0:	20 81       	ld	r18, Z
    47b2:	31 81       	ldd	r19, Z+1	; 0x01
    47b4:	40 e0       	ldi	r20, 0x00	; 0
    47b6:	50 e0       	ldi	r21, 0x00	; 0
    47b8:	b2 01       	movw	r22, r4
    47ba:	c4 01       	movw	r24, r8
    47bc:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    47c0:	f8 01       	movw	r30, r16
    47c2:	22 81       	ldd	r18, Z+2	; 0x02
    47c4:	33 81       	ldd	r19, Z+3	; 0x03
    47c6:	41 e0       	ldi	r20, 0x01	; 1
    47c8:	50 e0       	ldi	r21, 0x00	; 0
    47ca:	b2 01       	movw	r22, r4
    47cc:	c4 01       	movw	r24, r8
    47ce:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    47d2:	f8 01       	movw	r30, r16
    47d4:	24 81       	ldd	r18, Z+4	; 0x04
    47d6:	35 81       	ldd	r19, Z+5	; 0x05
    47d8:	40 e0       	ldi	r20, 0x00	; 0
    47da:	50 e0       	ldi	r21, 0x00	; 0
    47dc:	6c 2d       	mov	r22, r12
    47de:	7d 2d       	mov	r23, r13
    47e0:	c4 01       	movw	r24, r8
    47e2:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    47e6:	f8 01       	movw	r30, r16
    47e8:	26 81       	ldd	r18, Z+6	; 0x06
    47ea:	37 81       	ldd	r19, Z+7	; 0x07
    47ec:	41 e0       	ldi	r20, 0x01	; 1
    47ee:	50 e0       	ldi	r21, 0x00	; 0
    47f0:	6c 2d       	mov	r22, r12
    47f2:	7d 2d       	mov	r23, r13
    47f4:	c4 01       	movw	r24, r8
    47f6:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    47fa:	74 c2       	rjmp	.+1256   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x1F: // DECREMENT GATE
			newthephi=gates.DEC(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    47fc:	ce 2c       	mov	r12, r14
    47fe:	df 2c       	mov	r13, r15
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	41 e0       	ldi	r20, 0x01	; 1
    4804:	50 e0       	ldi	r21, 0x00	; 0
    4806:	6e 2d       	mov	r22, r14
    4808:	7f 2d       	mov	r23, r15
    480a:	c4 01       	movw	r24, r8
    480c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4810:	8c 01       	movw	r16, r24
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	40 e0       	ldi	r20, 0x00	; 0
    4816:	50 e0       	ldi	r21, 0x00	; 0
    4818:	6e 2d       	mov	r22, r14
    481a:	7f 2d       	mov	r23, r15
    481c:	c4 01       	movw	r24, r8
    481e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4822:	5c 01       	movw	r10, r24
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	41 e0       	ldi	r20, 0x01	; 1
    4828:	50 e0       	ldi	r21, 0x00	; 0
    482a:	b2 01       	movw	r22, r4
    482c:	c4 01       	movw	r24, r8
    482e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4832:	7c 01       	movw	r14, r24
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	40 e0       	ldi	r20, 0x00	; 0
    4838:	50 e0       	ldi	r21, 0x00	; 0
    483a:	b2 01       	movw	r22, r4
    483c:	c4 01       	movw	r24, r8
    483e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4842:	95 01       	movw	r18, r10
    4844:	a7 01       	movw	r20, r14
    4846:	bc 01       	movw	r22, r24
    4848:	c4 01       	movw	r24, r8
    484a:	08 96       	adiw	r24, 0x08	; 8
    484c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN5Gates3DECEiiii>
    4850:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4852:	fc 01       	movw	r30, r24
    4854:	20 81       	ld	r18, Z
    4856:	31 81       	ldd	r19, Z+1	; 0x01
    4858:	40 e0       	ldi	r20, 0x00	; 0
    485a:	50 e0       	ldi	r21, 0x00	; 0
    485c:	b2 01       	movw	r22, r4
    485e:	c4 01       	movw	r24, r8
    4860:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4864:	f8 01       	movw	r30, r16
    4866:	22 81       	ldd	r18, Z+2	; 0x02
    4868:	33 81       	ldd	r19, Z+3	; 0x03
    486a:	41 e0       	ldi	r20, 0x01	; 1
    486c:	50 e0       	ldi	r21, 0x00	; 0
    486e:	b2 01       	movw	r22, r4
    4870:	c4 01       	movw	r24, r8
    4872:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    4876:	f8 01       	movw	r30, r16
    4878:	24 81       	ldd	r18, Z+4	; 0x04
    487a:	35 81       	ldd	r19, Z+5	; 0x05
    487c:	40 e0       	ldi	r20, 0x00	; 0
    487e:	50 e0       	ldi	r21, 0x00	; 0
    4880:	6c 2d       	mov	r22, r12
    4882:	7d 2d       	mov	r23, r13
    4884:	c4 01       	movw	r24, r8
    4886:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    488a:	f8 01       	movw	r30, r16
    488c:	26 81       	ldd	r18, Z+6	; 0x06
    488e:	37 81       	ldd	r19, Z+7	; 0x07
    4890:	41 e0       	ldi	r20, 0x01	; 1
    4892:	50 e0       	ldi	r21, 0x00	; 0
    4894:	6c 2d       	mov	r22, r12
    4896:	7d 2d       	mov	r23, r13
    4898:	c4 01       	movw	r24, r8
    489a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    489e:	22 c2       	rjmp	.+1092   	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x20: // SWAGSQ GATE
			newthephi=gates.SWQ(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    48a0:	ce 2c       	mov	r12, r14
    48a2:	df 2c       	mov	r13, r15
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	41 e0       	ldi	r20, 0x01	; 1
    48a8:	50 e0       	ldi	r21, 0x00	; 0
    48aa:	6e 2d       	mov	r22, r14
    48ac:	7f 2d       	mov	r23, r15
    48ae:	c4 01       	movw	r24, r8
    48b0:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    48b4:	8c 01       	movw	r16, r24
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	40 e0       	ldi	r20, 0x00	; 0
    48ba:	50 e0       	ldi	r21, 0x00	; 0
    48bc:	6e 2d       	mov	r22, r14
    48be:	7f 2d       	mov	r23, r15
    48c0:	c4 01       	movw	r24, r8
    48c2:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    48c6:	5c 01       	movw	r10, r24
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	41 e0       	ldi	r20, 0x01	; 1
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	b2 01       	movw	r22, r4
    48d0:	c4 01       	movw	r24, r8
    48d2:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    48d6:	7c 01       	movw	r14, r24
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	40 e0       	ldi	r20, 0x00	; 0
    48dc:	50 e0       	ldi	r21, 0x00	; 0
    48de:	b2 01       	movw	r22, r4
    48e0:	c4 01       	movw	r24, r8
    48e2:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    48e6:	95 01       	movw	r18, r10
    48e8:	a7 01       	movw	r20, r14
    48ea:	bc 01       	movw	r22, r24
    48ec:	c4 01       	movw	r24, r8
    48ee:	08 96       	adiw	r24, 0x08	; 8
    48f0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN5Gates3SWQEiiii>
    48f4:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    48f6:	fc 01       	movw	r30, r24
    48f8:	20 81       	ld	r18, Z
    48fa:	31 81       	ldd	r19, Z+1	; 0x01
    48fc:	40 e0       	ldi	r20, 0x00	; 0
    48fe:	50 e0       	ldi	r21, 0x00	; 0
    4900:	b2 01       	movw	r22, r4
    4902:	c4 01       	movw	r24, r8
    4904:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4908:	f8 01       	movw	r30, r16
    490a:	22 81       	ldd	r18, Z+2	; 0x02
    490c:	33 81       	ldd	r19, Z+3	; 0x03
    490e:	41 e0       	ldi	r20, 0x01	; 1
    4910:	50 e0       	ldi	r21, 0x00	; 0
    4912:	b2 01       	movw	r22, r4
    4914:	c4 01       	movw	r24, r8
    4916:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    491a:	f8 01       	movw	r30, r16
    491c:	24 81       	ldd	r18, Z+4	; 0x04
    491e:	35 81       	ldd	r19, Z+5	; 0x05
    4920:	40 e0       	ldi	r20, 0x00	; 0
    4922:	50 e0       	ldi	r21, 0x00	; 0
    4924:	6c 2d       	mov	r22, r12
    4926:	7d 2d       	mov	r23, r13
    4928:	c4 01       	movw	r24, r8
    492a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    492e:	f8 01       	movw	r30, r16
    4930:	26 81       	ldd	r18, Z+6	; 0x06
    4932:	37 81       	ldd	r19, Z+7	; 0x07
    4934:	41 e0       	ldi	r20, 0x01	; 1
    4936:	50 e0       	ldi	r21, 0x00	; 0
    4938:	6c 2d       	mov	r22, r12
    493a:	7d 2d       	mov	r23, r13
    493c:	c4 01       	movw	r24, r8
    493e:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4942:	d0 c1       	rjmp	.+928    	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x21: // SWAPI GATE
			newthephi=gates.SWI(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4944:	ce 2c       	mov	r12, r14
    4946:	df 2c       	mov	r13, r15
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	41 e0       	ldi	r20, 0x01	; 1
    494c:	50 e0       	ldi	r21, 0x00	; 0
    494e:	6e 2d       	mov	r22, r14
    4950:	7f 2d       	mov	r23, r15
    4952:	c4 01       	movw	r24, r8
    4954:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4958:	8c 01       	movw	r16, r24
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	50 e0       	ldi	r21, 0x00	; 0
    4960:	6e 2d       	mov	r22, r14
    4962:	7f 2d       	mov	r23, r15
    4964:	c4 01       	movw	r24, r8
    4966:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    496a:	5c 01       	movw	r10, r24
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	41 e0       	ldi	r20, 0x01	; 1
    4970:	50 e0       	ldi	r21, 0x00	; 0
    4972:	b2 01       	movw	r22, r4
    4974:	c4 01       	movw	r24, r8
    4976:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    497a:	7c 01       	movw	r14, r24
    497c:	20 e0       	ldi	r18, 0x00	; 0
    497e:	40 e0       	ldi	r20, 0x00	; 0
    4980:	50 e0       	ldi	r21, 0x00	; 0
    4982:	b2 01       	movw	r22, r4
    4984:	c4 01       	movw	r24, r8
    4986:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    498a:	95 01       	movw	r18, r10
    498c:	a7 01       	movw	r20, r14
    498e:	bc 01       	movw	r22, r24
    4990:	c4 01       	movw	r24, r8
    4992:	08 96       	adiw	r24, 0x08	; 8
    4994:	0e 94 7e 11 	call	0x22fc	; 0x22fc <_ZN5Gates3SWIEiiii>
    4998:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    499a:	fc 01       	movw	r30, r24
    499c:	20 81       	ld	r18, Z
    499e:	31 81       	ldd	r19, Z+1	; 0x01
    49a0:	40 e0       	ldi	r20, 0x00	; 0
    49a2:	50 e0       	ldi	r21, 0x00	; 0
    49a4:	b2 01       	movw	r22, r4
    49a6:	c4 01       	movw	r24, r8
    49a8:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    49ac:	f8 01       	movw	r30, r16
    49ae:	22 81       	ldd	r18, Z+2	; 0x02
    49b0:	33 81       	ldd	r19, Z+3	; 0x03
    49b2:	41 e0       	ldi	r20, 0x01	; 1
    49b4:	50 e0       	ldi	r21, 0x00	; 0
    49b6:	b2 01       	movw	r22, r4
    49b8:	c4 01       	movw	r24, r8
    49ba:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    49be:	f8 01       	movw	r30, r16
    49c0:	24 81       	ldd	r18, Z+4	; 0x04
    49c2:	35 81       	ldd	r19, Z+5	; 0x05
    49c4:	40 e0       	ldi	r20, 0x00	; 0
    49c6:	50 e0       	ldi	r21, 0x00	; 0
    49c8:	6c 2d       	mov	r22, r12
    49ca:	7d 2d       	mov	r23, r13
    49cc:	c4 01       	movw	r24, r8
    49ce:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    49d2:	f8 01       	movw	r30, r16
    49d4:	26 81       	ldd	r18, Z+6	; 0x06
    49d6:	37 81       	ldd	r19, Z+7	; 0x07
    49d8:	41 e0       	ldi	r20, 0x01	; 1
    49da:	50 e0       	ldi	r21, 0x00	; 0
    49dc:	6c 2d       	mov	r22, r12
    49de:	7d 2d       	mov	r23, r13
    49e0:	c4 01       	movw	r24, r8
    49e2:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    49e6:	7e c1       	rjmp	.+764    	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		//3 QUBIT GATES -
		case 0x22: // CONTROL SWAP GATE
			newthephi=gates.CSW(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false));
    49e8:	20 e0       	ldi	r18, 0x00	; 0
    49ea:	41 e0       	ldi	r20, 0x01	; 1
    49ec:	50 e0       	ldi	r21, 0x00	; 0
    49ee:	69 81       	ldd	r22, Y+1	; 0x01
    49f0:	7a 81       	ldd	r23, Y+2	; 0x02
    49f2:	c4 01       	movw	r24, r8
    49f4:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    49f8:	6c 01       	movw	r12, r24
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	40 e0       	ldi	r20, 0x00	; 0
    49fe:	50 e0       	ldi	r21, 0x00	; 0
    4a00:	69 81       	ldd	r22, Y+1	; 0x01
    4a02:	7a 81       	ldd	r23, Y+2	; 0x02
    4a04:	c4 01       	movw	r24, r8
    4a06:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4a0a:	8c 01       	movw	r16, r24
    4a0c:	ef 82       	std	Y+7, r14	; 0x07
    4a0e:	f9 86       	std	Y+9, r15	; 0x09
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	41 e0       	ldi	r20, 0x01	; 1
    4a14:	50 e0       	ldi	r21, 0x00	; 0
    4a16:	6e 2d       	mov	r22, r14
    4a18:	7f 2d       	mov	r23, r15
    4a1a:	c4 01       	movw	r24, r8
    4a1c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4a20:	5c 01       	movw	r10, r24
    4a22:	20 e0       	ldi	r18, 0x00	; 0
    4a24:	40 e0       	ldi	r20, 0x00	; 0
    4a26:	50 e0       	ldi	r21, 0x00	; 0
    4a28:	6f 81       	ldd	r22, Y+7	; 0x07
    4a2a:	79 85       	ldd	r23, Y+9	; 0x09
    4a2c:	c4 01       	movw	r24, r8
    4a2e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4a32:	1c 01       	movw	r2, r24
    4a34:	20 e0       	ldi	r18, 0x00	; 0
    4a36:	41 e0       	ldi	r20, 0x01	; 1
    4a38:	50 e0       	ldi	r21, 0x00	; 0
    4a3a:	b2 01       	movw	r22, r4
    4a3c:	c4 01       	movw	r24, r8
    4a3e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4a42:	9e 83       	std	Y+6, r25	; 0x06
    4a44:	8d 83       	std	Y+5, r24	; 0x05
    4a46:	20 e0       	ldi	r18, 0x00	; 0
    4a48:	40 e0       	ldi	r20, 0x00	; 0
    4a4a:	50 e0       	ldi	r21, 0x00	; 0
    4a4c:	b2 01       	movw	r22, r4
    4a4e:	c4 01       	movw	r24, r8
    4a50:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4a54:	78 01       	movw	r14, r16
    4a56:	85 01       	movw	r16, r10
    4a58:	91 01       	movw	r18, r2
    4a5a:	4d 81       	ldd	r20, Y+5	; 0x05
    4a5c:	5e 81       	ldd	r21, Y+6	; 0x06
    4a5e:	bc 01       	movw	r22, r24
    4a60:	c4 01       	movw	r24, r8
    4a62:	08 96       	adiw	r24, 0x08	; 8
    4a64:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN5Gates3CSWEiiiiii>
    4a68:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	20 81       	ld	r18, Z
    4a6e:	31 81       	ldd	r19, Z+1	; 0x01
    4a70:	40 e0       	ldi	r20, 0x00	; 0
    4a72:	50 e0       	ldi	r21, 0x00	; 0
    4a74:	b2 01       	movw	r22, r4
    4a76:	c4 01       	movw	r24, r8
    4a78:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4a7c:	f8 01       	movw	r30, r16
    4a7e:	22 81       	ldd	r18, Z+2	; 0x02
    4a80:	33 81       	ldd	r19, Z+3	; 0x03
    4a82:	41 e0       	ldi	r20, 0x01	; 1
    4a84:	50 e0       	ldi	r21, 0x00	; 0
    4a86:	b2 01       	movw	r22, r4
    4a88:	c4 01       	movw	r24, r8
    4a8a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    4a8e:	f8 01       	movw	r30, r16
    4a90:	24 81       	ldd	r18, Z+4	; 0x04
    4a92:	35 81       	ldd	r19, Z+5	; 0x05
    4a94:	40 e0       	ldi	r20, 0x00	; 0
    4a96:	50 e0       	ldi	r21, 0x00	; 0
    4a98:	6f 81       	ldd	r22, Y+7	; 0x07
    4a9a:	79 85       	ldd	r23, Y+9	; 0x09
    4a9c:	c4 01       	movw	r24, r8
    4a9e:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4aa2:	f8 01       	movw	r30, r16
    4aa4:	26 81       	ldd	r18, Z+6	; 0x06
    4aa6:	37 81       	ldd	r19, Z+7	; 0x07
    4aa8:	41 e0       	ldi	r20, 0x01	; 1
    4aaa:	50 e0       	ldi	r21, 0x00	; 0
    4aac:	6f 81       	ldd	r22, Y+7	; 0x07
    4aae:	79 85       	ldd	r23, Y+9	; 0x09
    4ab0:	c4 01       	movw	r24, r8
    4ab2:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    4ab6:	f8 01       	movw	r30, r16
    4ab8:	20 85       	ldd	r18, Z+8	; 0x08
    4aba:	31 85       	ldd	r19, Z+9	; 0x09
    4abc:	40 e0       	ldi	r20, 0x00	; 0
    4abe:	50 e0       	ldi	r21, 0x00	; 0
    4ac0:	69 81       	ldd	r22, Y+1	; 0x01
    4ac2:	7a 81       	ldd	r23, Y+2	; 0x02
    4ac4:	c4 01       	movw	r24, r8
    4ac6:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4aca:	f8 01       	movw	r30, r16
    4acc:	22 85       	ldd	r18, Z+10	; 0x0a
    4ace:	33 85       	ldd	r19, Z+11	; 0x0b
    4ad0:	41 e0       	ldi	r20, 0x01	; 1
    4ad2:	50 e0       	ldi	r21, 0x00	; 0
    4ad4:	69 81       	ldd	r22, Y+1	; 0x01
    4ad6:	7a 81       	ldd	r23, Y+2	; 0x02
    4ad8:	c4 01       	movw	r24, r8
    4ada:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4ade:	02 c1       	rjmp	.+516    	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x23: // TOFFOLI GATE
			newthephi=gates.TOF(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false));
    4ae0:	20 e0       	ldi	r18, 0x00	; 0
    4ae2:	41 e0       	ldi	r20, 0x01	; 1
    4ae4:	50 e0       	ldi	r21, 0x00	; 0
    4ae6:	69 81       	ldd	r22, Y+1	; 0x01
    4ae8:	7a 81       	ldd	r23, Y+2	; 0x02
    4aea:	c4 01       	movw	r24, r8
    4aec:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4af0:	6c 01       	movw	r12, r24
    4af2:	20 e0       	ldi	r18, 0x00	; 0
    4af4:	40 e0       	ldi	r20, 0x00	; 0
    4af6:	50 e0       	ldi	r21, 0x00	; 0
    4af8:	69 81       	ldd	r22, Y+1	; 0x01
    4afa:	7a 81       	ldd	r23, Y+2	; 0x02
    4afc:	c4 01       	movw	r24, r8
    4afe:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4b02:	8c 01       	movw	r16, r24
    4b04:	ef 82       	std	Y+7, r14	; 0x07
    4b06:	f9 86       	std	Y+9, r15	; 0x09
    4b08:	20 e0       	ldi	r18, 0x00	; 0
    4b0a:	41 e0       	ldi	r20, 0x01	; 1
    4b0c:	50 e0       	ldi	r21, 0x00	; 0
    4b0e:	6e 2d       	mov	r22, r14
    4b10:	7f 2d       	mov	r23, r15
    4b12:	c4 01       	movw	r24, r8
    4b14:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4b18:	5c 01       	movw	r10, r24
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	40 e0       	ldi	r20, 0x00	; 0
    4b1e:	50 e0       	ldi	r21, 0x00	; 0
    4b20:	6f 81       	ldd	r22, Y+7	; 0x07
    4b22:	79 85       	ldd	r23, Y+9	; 0x09
    4b24:	c4 01       	movw	r24, r8
    4b26:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4b2a:	1c 01       	movw	r2, r24
    4b2c:	20 e0       	ldi	r18, 0x00	; 0
    4b2e:	41 e0       	ldi	r20, 0x01	; 1
    4b30:	50 e0       	ldi	r21, 0x00	; 0
    4b32:	b2 01       	movw	r22, r4
    4b34:	c4 01       	movw	r24, r8
    4b36:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4b3a:	9e 83       	std	Y+6, r25	; 0x06
    4b3c:	8d 83       	std	Y+5, r24	; 0x05
    4b3e:	20 e0       	ldi	r18, 0x00	; 0
    4b40:	40 e0       	ldi	r20, 0x00	; 0
    4b42:	50 e0       	ldi	r21, 0x00	; 0
    4b44:	b2 01       	movw	r22, r4
    4b46:	c4 01       	movw	r24, r8
    4b48:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4b4c:	78 01       	movw	r14, r16
    4b4e:	85 01       	movw	r16, r10
    4b50:	91 01       	movw	r18, r2
    4b52:	4d 81       	ldd	r20, Y+5	; 0x05
    4b54:	5e 81       	ldd	r21, Y+6	; 0x06
    4b56:	bc 01       	movw	r22, r24
    4b58:	c4 01       	movw	r24, r8
    4b5a:	08 96       	adiw	r24, 0x08	; 8
    4b5c:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <_ZN5Gates3TOFEiiiiii>
    4b60:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4b62:	fc 01       	movw	r30, r24
    4b64:	20 81       	ld	r18, Z
    4b66:	31 81       	ldd	r19, Z+1	; 0x01
    4b68:	40 e0       	ldi	r20, 0x00	; 0
    4b6a:	50 e0       	ldi	r21, 0x00	; 0
    4b6c:	b2 01       	movw	r22, r4
    4b6e:	c4 01       	movw	r24, r8
    4b70:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4b74:	f8 01       	movw	r30, r16
    4b76:	22 81       	ldd	r18, Z+2	; 0x02
    4b78:	33 81       	ldd	r19, Z+3	; 0x03
    4b7a:	41 e0       	ldi	r20, 0x01	; 1
    4b7c:	50 e0       	ldi	r21, 0x00	; 0
    4b7e:	b2 01       	movw	r22, r4
    4b80:	c4 01       	movw	r24, r8
    4b82:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    4b86:	f8 01       	movw	r30, r16
    4b88:	24 81       	ldd	r18, Z+4	; 0x04
    4b8a:	35 81       	ldd	r19, Z+5	; 0x05
    4b8c:	40 e0       	ldi	r20, 0x00	; 0
    4b8e:	50 e0       	ldi	r21, 0x00	; 0
    4b90:	6f 81       	ldd	r22, Y+7	; 0x07
    4b92:	79 85       	ldd	r23, Y+9	; 0x09
    4b94:	c4 01       	movw	r24, r8
    4b96:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4b9a:	f8 01       	movw	r30, r16
    4b9c:	26 81       	ldd	r18, Z+6	; 0x06
    4b9e:	37 81       	ldd	r19, Z+7	; 0x07
    4ba0:	41 e0       	ldi	r20, 0x01	; 1
    4ba2:	50 e0       	ldi	r21, 0x00	; 0
    4ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ba6:	79 85       	ldd	r23, Y+9	; 0x09
    4ba8:	c4 01       	movw	r24, r8
    4baa:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    4bae:	f8 01       	movw	r30, r16
    4bb0:	20 85       	ldd	r18, Z+8	; 0x08
    4bb2:	31 85       	ldd	r19, Z+9	; 0x09
    4bb4:	40 e0       	ldi	r20, 0x00	; 0
    4bb6:	50 e0       	ldi	r21, 0x00	; 0
    4bb8:	69 81       	ldd	r22, Y+1	; 0x01
    4bba:	7a 81       	ldd	r23, Y+2	; 0x02
    4bbc:	c4 01       	movw	r24, r8
    4bbe:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4bc2:	f8 01       	movw	r30, r16
    4bc4:	22 85       	ldd	r18, Z+10	; 0x0a
    4bc6:	33 85       	ldd	r19, Z+11	; 0x0b
    4bc8:	41 e0       	ldi	r20, 0x01	; 1
    4bca:	50 e0       	ldi	r21, 0x00	; 0
    4bcc:	69 81       	ldd	r22, Y+1	; 0x01
    4bce:	7a 81       	ldd	r23, Y+2	; 0x02
    4bd0:	c4 01       	movw	r24, r8
    4bd2:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			break;
    4bd6:	86 c0       	rjmp	.+268    	; 0x4ce4 <_ZN4QEPU7executeEilll+0xbf0>
		case 0x24: // DEUTSCH GATE
			newthephi=gates.DEU(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false),read(0,THE,false));
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	40 e0       	ldi	r20, 0x00	; 0
    4bdc:	50 e0       	ldi	r21, 0x00	; 0
    4bde:	60 e0       	ldi	r22, 0x00	; 0
    4be0:	70 e0       	ldi	r23, 0x00	; 0
    4be2:	c4 01       	movw	r24, r8
    4be4:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4be8:	5c 01       	movw	r10, r24
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	41 e0       	ldi	r20, 0x01	; 1
    4bee:	50 e0       	ldi	r21, 0x00	; 0
    4bf0:	69 81       	ldd	r22, Y+1	; 0x01
    4bf2:	7a 81       	ldd	r23, Y+2	; 0x02
    4bf4:	c4 01       	movw	r24, r8
    4bf6:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4bfa:	6c 01       	movw	r12, r24
    4bfc:	20 e0       	ldi	r18, 0x00	; 0
    4bfe:	40 e0       	ldi	r20, 0x00	; 0
    4c00:	50 e0       	ldi	r21, 0x00	; 0
    4c02:	69 81       	ldd	r22, Y+1	; 0x01
    4c04:	7a 81       	ldd	r23, Y+2	; 0x02
    4c06:	c4 01       	movw	r24, r8
    4c08:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4c0c:	8c 01       	movw	r16, r24
    4c0e:	e9 86       	std	Y+9, r14	; 0x09
    4c10:	fa 86       	std	Y+10, r15	; 0x0a
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	41 e0       	ldi	r20, 0x01	; 1
    4c16:	50 e0       	ldi	r21, 0x00	; 0
    4c18:	6e 2d       	mov	r22, r14
    4c1a:	7f 2d       	mov	r23, r15
    4c1c:	c4 01       	movw	r24, r8
    4c1e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4c22:	1c 01       	movw	r2, r24
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	40 e0       	ldi	r20, 0x00	; 0
    4c28:	50 e0       	ldi	r21, 0x00	; 0
    4c2a:	69 85       	ldd	r22, Y+9	; 0x09
    4c2c:	7a 85       	ldd	r23, Y+10	; 0x0a
    4c2e:	c4 01       	movw	r24, r8
    4c30:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4c34:	9e 83       	std	Y+6, r25	; 0x06
    4c36:	8d 83       	std	Y+5, r24	; 0x05
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	41 e0       	ldi	r20, 0x01	; 1
    4c3c:	50 e0       	ldi	r21, 0x00	; 0
    4c3e:	b2 01       	movw	r22, r4
    4c40:	c4 01       	movw	r24, r8
    4c42:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4c46:	98 87       	std	Y+8, r25	; 0x08
    4c48:	8f 83       	std	Y+7, r24	; 0x07
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	40 e0       	ldi	r20, 0x00	; 0
    4c4e:	50 e0       	ldi	r21, 0x00	; 0
    4c50:	b2 01       	movw	r22, r4
    4c52:	c4 01       	movw	r24, r8
    4c54:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN4QEPU4readEiib>
    4c58:	78 01       	movw	r14, r16
    4c5a:	81 01       	movw	r16, r2
    4c5c:	2d 81       	ldd	r18, Y+5	; 0x05
    4c5e:	3e 81       	ldd	r19, Y+6	; 0x06
    4c60:	4f 81       	ldd	r20, Y+7	; 0x07
    4c62:	58 85       	ldd	r21, Y+8	; 0x08
    4c64:	bc 01       	movw	r22, r24
    4c66:	c4 01       	movw	r24, r8
    4c68:	08 96       	adiw	r24, 0x08	; 8
    4c6a:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN5Gates3DEUEiiiiiii>
    4c6e:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4c70:	fc 01       	movw	r30, r24
    4c72:	20 81       	ld	r18, Z
    4c74:	31 81       	ldd	r19, Z+1	; 0x01
    4c76:	40 e0       	ldi	r20, 0x00	; 0
    4c78:	50 e0       	ldi	r21, 0x00	; 0
    4c7a:	b2 01       	movw	r22, r4
    4c7c:	c4 01       	movw	r24, r8
    4c7e:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4c82:	f8 01       	movw	r30, r16
    4c84:	22 81       	ldd	r18, Z+2	; 0x02
    4c86:	33 81       	ldd	r19, Z+3	; 0x03
    4c88:	41 e0       	ldi	r20, 0x01	; 1
    4c8a:	50 e0       	ldi	r21, 0x00	; 0
    4c8c:	b2 01       	movw	r22, r4
    4c8e:	c4 01       	movw	r24, r8
    4c90:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    4c94:	f8 01       	movw	r30, r16
    4c96:	24 81       	ldd	r18, Z+4	; 0x04
    4c98:	35 81       	ldd	r19, Z+5	; 0x05
    4c9a:	40 e0       	ldi	r20, 0x00	; 0
    4c9c:	50 e0       	ldi	r21, 0x00	; 0
    4c9e:	69 85       	ldd	r22, Y+9	; 0x09
    4ca0:	7a 85       	ldd	r23, Y+10	; 0x0a
    4ca2:	c4 01       	movw	r24, r8
    4ca4:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4ca8:	f8 01       	movw	r30, r16
    4caa:	26 81       	ldd	r18, Z+6	; 0x06
    4cac:	37 81       	ldd	r19, Z+7	; 0x07
    4cae:	41 e0       	ldi	r20, 0x01	; 1
    4cb0:	50 e0       	ldi	r21, 0x00	; 0
    4cb2:	69 85       	ldd	r22, Y+9	; 0x09
    4cb4:	7a 85       	ldd	r23, Y+10	; 0x0a
    4cb6:	c4 01       	movw	r24, r8
    4cb8:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    4cbc:	f8 01       	movw	r30, r16
    4cbe:	20 85       	ldd	r18, Z+8	; 0x08
    4cc0:	31 85       	ldd	r19, Z+9	; 0x09
    4cc2:	40 e0       	ldi	r20, 0x00	; 0
    4cc4:	50 e0       	ldi	r21, 0x00	; 0
    4cc6:	69 81       	ldd	r22, Y+1	; 0x01
    4cc8:	7a 81       	ldd	r23, Y+2	; 0x02
    4cca:	c4 01       	movw	r24, r8
    4ccc:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
    4cd0:	f8 01       	movw	r30, r16
    4cd2:	22 85       	ldd	r18, Z+10	; 0x0a
    4cd4:	33 85       	ldd	r19, Z+11	; 0x0b
    4cd6:	41 e0       	ldi	r20, 0x01	; 1
    4cd8:	50 e0       	ldi	r21, 0x00	; 0
    4cda:	69 81       	ldd	r22, Y+1	; 0x01
    4cdc:	7a 81       	ldd	r23, Y+2	; 0x02
    4cde:	c4 01       	movw	r24, r8
    4ce0:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN4QEPU5writeEiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    4ce4:	c8 01       	movw	r24, r16
    4ce6:	0e 94 a3 30 	call	0x6146	; 0x6146 <free>
    4cea:	2a 96       	adiw	r28, 0x0a	; 10
    4cec:	0f b6       	in	r0, 0x3f	; 63
    4cee:	f8 94       	cli
    4cf0:	de bf       	out	0x3e, r29	; 62
    4cf2:	0f be       	out	0x3f, r0	; 63
    4cf4:	cd bf       	out	0x3d, r28	; 61
    4cf6:	df 91       	pop	r29
    4cf8:	cf 91       	pop	r28
    4cfa:	1f 91       	pop	r17
    4cfc:	0f 91       	pop	r16
    4cfe:	ff 90       	pop	r15
    4d00:	ef 90       	pop	r14
    4d02:	df 90       	pop	r13
    4d04:	cf 90       	pop	r12
    4d06:	bf 90       	pop	r11
    4d08:	af 90       	pop	r10
    4d0a:	9f 90       	pop	r9
    4d0c:	8f 90       	pop	r8
    4d0e:	7f 90       	pop	r7
    4d10:	6f 90       	pop	r6
    4d12:	5f 90       	pop	r5
    4d14:	4f 90       	pop	r4
    4d16:	3f 90       	pop	r3
    4d18:	2f 90       	pop	r2
    4d1a:	08 95       	ret

00004d1c <_ZN4QEPU3runEv>:
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}

void QEPU::run(){
    4d1c:	2f 92       	push	r2
    4d1e:	3f 92       	push	r3
    4d20:	4f 92       	push	r4
    4d22:	5f 92       	push	r5
    4d24:	6f 92       	push	r6
    4d26:	7f 92       	push	r7
    4d28:	8f 92       	push	r8
    4d2a:	9f 92       	push	r9
    4d2c:	af 92       	push	r10
    4d2e:	bf 92       	push	r11
    4d30:	cf 92       	push	r12
    4d32:	df 92       	push	r13
    4d34:	ef 92       	push	r14
    4d36:	ff 92       	push	r15
    4d38:	0f 93       	push	r16
    4d3a:	1f 93       	push	r17
    4d3c:	cf 93       	push	r28
    4d3e:	df 93       	push	r29
    4d40:	cd b7       	in	r28, 0x3d	; 61
    4d42:	de b7       	in	r29, 0x3e	; 62
    4d44:	cb 52       	subi	r28, 0x2B	; 43
    4d46:	d2 40       	sbci	r29, 0x02	; 2
    4d48:	0f b6       	in	r0, 0x3f	; 63
    4d4a:	f8 94       	cli
    4d4c:	de bf       	out	0x3e, r29	; 62
    4d4e:	0f be       	out	0x3f, r0	; 63
    4d50:	cd bf       	out	0x3d, r28	; 61
    4d52:	1c 01       	movw	r2, r24
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
    4d54:	60 ed       	ldi	r22, 0xD0	; 208
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6Serial10writestrlnEPc>
    4d5c:	65 ec       	ldi	r22, 0xC5	; 197
    4d5e:	70 e0       	ldi	r23, 0x00	; 0
    4d60:	c1 01       	movw	r24, r2
    4d62:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6Serial10writestrlnEPc>
	
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    4d66:	c1 01       	movw	r24, r2
    4d68:	01 96       	adiw	r24, 0x01	; 1
    4d6a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_ZN6EEProm7readallEv>
    4d6e:	bc 01       	movw	r22, r24
    4d70:	c1 01       	movw	r24, r2
    4d72:	09 96       	adiw	r24, 0x09	; 9
    4d74:	0e 94 cc 2a 	call	0x5598	; 0x5598 <_ZN5Utils10str2intarrEPc>
    4d78:	fc 01       	movw	r30, r24
    4d7a:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    4d7c:	20 e0       	ldi	r18, 0x00	; 0
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    4d80:	40 85       	ldd	r20, Z+8	; 0x08
    4d82:	51 85       	ldd	r21, Z+9	; 0x09
    4d84:	4f 3f       	cpi	r20, 0xFF	; 255
    4d86:	51 05       	cpc	r21, r1
    4d88:	a1 f4       	brne	.+40     	; 0x4db2 <_ZN4QEPU3runEv+0x96>
    4d8a:	46 81       	ldd	r20, Z+6	; 0x06
    4d8c:	57 81       	ldd	r21, Z+7	; 0x07
    4d8e:	4f 3f       	cpi	r20, 0xFF	; 255
    4d90:	51 05       	cpc	r21, r1
    4d92:	79 f4       	brne	.+30     	; 0x4db2 <_ZN4QEPU3runEv+0x96>
    4d94:	44 81       	ldd	r20, Z+4	; 0x04
    4d96:	55 81       	ldd	r21, Z+5	; 0x05
    4d98:	4f 3f       	cpi	r20, 0xFF	; 255
    4d9a:	51 05       	cpc	r21, r1
    4d9c:	51 f4       	brne	.+20     	; 0x4db2 <_ZN4QEPU3runEv+0x96>
    4d9e:	42 81       	ldd	r20, Z+2	; 0x02
    4da0:	53 81       	ldd	r21, Z+3	; 0x03
    4da2:	4f 3f       	cpi	r20, 0xFF	; 255
    4da4:	51 05       	cpc	r21, r1
    4da6:	29 f4       	brne	.+10     	; 0x4db2 <_ZN4QEPU3runEv+0x96>
    4da8:	40 81       	ld	r20, Z
    4daa:	51 81       	ldd	r21, Z+1	; 0x01
    4dac:	4f 3f       	cpi	r20, 0xFF	; 255
    4dae:	51 05       	cpc	r21, r1
    4db0:	21 f0       	breq	.+8      	; 0x4dba <_ZN4QEPU3runEv+0x9e>
    4db2:	2f 5f       	subi	r18, 0xFF	; 255
    4db4:	3f 4f       	sbci	r19, 0xFF	; 255
    4db6:	32 96       	adiw	r30, 0x02	; 2
    4db8:	e3 cf       	rjmp	.-58     	; 0x4d80 <_ZN4QEPU3runEv+0x64>
    4dba:	a9 01       	movw	r20, r18
    4dbc:	44 50       	subi	r20, 0x04	; 4
    4dbe:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    4dc0:	14 16       	cp	r1, r20
    4dc2:	15 06       	cpc	r1, r21
    4dc4:	b4 f5       	brge	.+108    	; 0x4e32 <_ZN4QEPU3runEv+0x116>
    4dc6:	dc 01       	movw	r26, r24
    4dc8:	25 50       	subi	r18, 0x05	; 5
    4dca:	31 09       	sbc	r19, r1
    4dcc:	40 e0       	ldi	r20, 0x00	; 0
    4dce:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	60 e0       	ldi	r22, 0x00	; 0
    4dd6:	70 e0       	ldi	r23, 0x00	; 0
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    4dd8:	1d e0       	ldi	r17, 0x0D	; 13
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    4dda:	71 2c       	mov	r7, r1
    4ddc:	81 2c       	mov	r8, r1
    4dde:	2d 01       	movw	r4, r26
    4de0:	0b c0       	rjmp	.+22     	; 0x4df8 <_ZN4QEPU3runEv+0xdc>
    4de2:	ed 30       	cpi	r30, 0x0D	; 13
    4de4:	f1 05       	cpc	r31, r1
    4de6:	2c f0       	brlt	.+10     	; 0x4df2 <_ZN4QEPU3runEv+0xd6>
    4de8:	6f 5f       	subi	r22, 0xFF	; 255
    4dea:	7f 4f       	sbci	r23, 0xFF	; 255
    4dec:	87 2d       	mov	r24, r7
    4dee:	98 2d       	mov	r25, r8
    4df0:	01 c0       	rjmp	.+2      	; 0x4df4 <_ZN4QEPU3runEv+0xd8>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    4df2:	cf 01       	movw	r24, r30
    4df4:	4f 5f       	subi	r20, 0xFF	; 255
    4df6:	5f 4f       	sbci	r21, 0xFF	; 255
    4df8:	fc 01       	movw	r30, r24
    4dfa:	31 96       	adiw	r30, 0x01	; 1
    4dfc:	d2 01       	movw	r26, r4
    4dfe:	cd 90       	ld	r12, X+
    4e00:	dd 90       	ld	r13, X+
    4e02:	2d 01       	movw	r4, r26
    4e04:	16 9f       	mul	r17, r22
    4e06:	50 01       	movw	r10, r0
    4e08:	17 9f       	mul	r17, r23
    4e0a:	b0 0c       	add	r11, r0
    4e0c:	11 24       	eor	r1, r1
    4e0e:	8a 0d       	add	r24, r10
    4e10:	9b 1d       	adc	r25, r11
    4e12:	88 0f       	add	r24, r24
    4e14:	99 1f       	adc	r25, r25
    4e16:	ee 24       	eor	r14, r14
    4e18:	e3 94       	inc	r14
    4e1a:	f1 2c       	mov	r15, r1
    4e1c:	ec 0e       	add	r14, r28
    4e1e:	fd 1e       	adc	r15, r29
    4e20:	8e 0d       	add	r24, r14
    4e22:	9f 1d       	adc	r25, r15
    4e24:	dc 01       	movw	r26, r24
    4e26:	cd 92       	st	X+, r12
    4e28:	dc 92       	st	X, r13
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    4e2a:	42 17       	cp	r20, r18
    4e2c:	53 07       	cpc	r21, r19
    4e2e:	c9 f6       	brne	.-78     	; 0x4de2 <_ZN4QEPU3runEv+0xc6>
    4e30:	02 c0       	rjmp	.+4      	; 0x4e36 <_ZN4QEPU3runEv+0x11a>
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    4e32:	60 e0       	ldi	r22, 0x00	; 0
    4e34:	70 e0       	ldi	r23, 0x00	; 0
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	program_counter_maximum=line;
    4e36:	f1 01       	movw	r30, r2
    4e38:	75 87       	std	Z+13, r23	; 0x0d
    4e3a:	64 87       	std	Z+12, r22	; 0x0c
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    4e3c:	13 86       	std	Z+11, r1	; 0x0b
    4e3e:	12 86       	std	Z+10, r1	; 0x0a
    4e40:	16 16       	cp	r1, r22
    4e42:	17 06       	cpc	r1, r23
    4e44:	0c f0       	brlt	.+2      	; 0x4e48 <_ZN4QEPU3runEv+0x12c>
    4e46:	56 c1       	rjmp	.+684    	; 0x50f4 <_ZN4QEPU3runEv+0x3d8>
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";	
    4e4c:	9e 01       	movw	r18, r28
    4e4e:	29 5e       	subi	r18, 0xE9	; 233
    4e50:	3d 4f       	sbci	r19, 0xFD	; 253
    4e52:	c2 5e       	subi	r28, 0xE2	; 226
    4e54:	dd 4f       	sbci	r29, 0xFD	; 253
    4e56:	39 83       	std	Y+1, r19	; 0x01
    4e58:	28 83       	st	Y, r18
    4e5a:	ce 51       	subi	r28, 0x1E	; 30
    4e5c:	d2 40       	sbci	r29, 0x02	; 2
    4e5e:	2e 01       	movw	r4, r28
    4e60:	30 ef       	ldi	r19, 0xF0	; 240
    4e62:	43 1a       	sub	r4, r19
    4e64:	3d ef       	ldi	r19, 0xFD	; 253
    4e66:	53 0a       	sbc	r5, r19
    4e68:	3e 01       	movw	r6, r28
    4e6a:	a7 ef       	ldi	r26, 0xF7	; 247
    4e6c:	6a 1a       	sub	r6, r26
    4e6e:	ad ef       	ldi	r26, 0xFD	; 253
    4e70:	7a 0a       	sbc	r7, r26
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    4e72:	0f 2e       	mov	r0, r31
    4e74:	fa ed       	ldi	r31, 0xDA	; 218
    4e76:	8f 2e       	mov	r8, r31
    4e78:	f0 e0       	ldi	r31, 0x00	; 0
    4e7a:	9f 2e       	mov	r9, r31
    4e7c:	f0 2d       	mov	r31, r0
    4e7e:	c2 5e       	subi	r28, 0xE2	; 226
    4e80:	dd 4f       	sbci	r29, 0xFD	; 253
    4e82:	b8 81       	ld	r27, Y
    4e84:	ce 51       	subi	r28, 0x1E	; 30
    4e86:	d2 40       	sbci	r29, 0x02	; 2
    4e88:	ca 5d       	subi	r28, 0xDA	; 218
    4e8a:	dd 4f       	sbci	r29, 0xFD	; 253
    4e8c:	b8 83       	st	Y, r27
    4e8e:	c6 52       	subi	r28, 0x26	; 38
    4e90:	d2 40       	sbci	r29, 0x02	; 2
    4e92:	c1 5e       	subi	r28, 0xE1	; 225
    4e94:	dd 4f       	sbci	r29, 0xFD	; 253
    4e96:	e8 81       	ld	r30, Y
    4e98:	cf 51       	subi	r28, 0x1F	; 31
    4e9a:	d2 40       	sbci	r29, 0x02	; 2
    4e9c:	c9 5d       	subi	r28, 0xD9	; 217
    4e9e:	dd 4f       	sbci	r29, 0xFD	; 253
    4ea0:	e8 83       	st	Y, r30
    4ea2:	c7 52       	subi	r28, 0x27	; 39
    4ea4:	d2 40       	sbci	r29, 0x02	; 2
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    4ea6:	c8 5d       	subi	r28, 0xD8	; 216
    4ea8:	dd 4f       	sbci	r29, 0xFD	; 253
    4eaa:	48 82       	st	Y, r4
    4eac:	c8 52       	subi	r28, 0x28	; 40
    4eae:	d2 40       	sbci	r29, 0x02	; 2
    4eb0:	c7 5d       	subi	r28, 0xD7	; 215
    4eb2:	dd 4f       	sbci	r29, 0xFD	; 253
    4eb4:	58 82       	st	Y, r5
    4eb6:	c9 52       	subi	r28, 0x29	; 41
    4eb8:	d2 40       	sbci	r29, 0x02	; 2
			sprintf(op3s,"%s%x",op3s,eeprom_splitted[program_counter][k+FIXED_OP3_OFFSET]); // HEX CONCAT TO STRING (OP3 FETCH)
    4eba:	c6 5d       	subi	r28, 0xD6	; 214
    4ebc:	dd 4f       	sbci	r29, 0xFD	; 253
    4ebe:	68 82       	st	Y, r6
    4ec0:	ca 52       	subi	r28, 0x2A	; 42
    4ec2:	d2 40       	sbci	r29, 0x02	; 2
    4ec4:	c5 5d       	subi	r28, 0xD5	; 213
    4ec6:	dd 4f       	sbci	r29, 0xFD	; 253
    4ec8:	78 82       	st	Y, r7
    4eca:	cb 52       	subi	r28, 0x2B	; 43
    4ecc:	d2 40       	sbci	r29, 0x02	; 2
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	program_counter_maximum=line;
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";	
    4ece:	c9 5e       	subi	r28, 0xE9	; 233
    4ed0:	dd 4f       	sbci	r29, 0xFD	; 253
    4ed2:	18 82       	st	Y, r1
    4ed4:	19 82       	std	Y+1, r1	; 0x01
    4ed6:	1a 82       	std	Y+2, r1	; 0x02
    4ed8:	1b 82       	std	Y+3, r1	; 0x03
    4eda:	c7 51       	subi	r28, 0x17	; 23
    4edc:	d2 40       	sbci	r29, 0x02	; 2
    4ede:	c5 5e       	subi	r28, 0xE5	; 229
    4ee0:	dd 4f       	sbci	r29, 0xFD	; 253
    4ee2:	18 82       	st	Y, r1
    4ee4:	19 82       	std	Y+1, r1	; 0x01
    4ee6:	1a 82       	std	Y+2, r1	; 0x02
    4ee8:	cb 51       	subi	r28, 0x1B	; 27
    4eea:	d2 40       	sbci	r29, 0x02	; 2
    4eec:	d2 01       	movw	r26, r4
    4eee:	1d 92       	st	X+, r1
    4ef0:	1d 92       	st	X+, r1
    4ef2:	1d 92       	st	X+, r1
    4ef4:	1c 92       	st	X, r1
    4ef6:	13 97       	sbiw	r26, 0x03	; 3
    4ef8:	f2 01       	movw	r30, r4
    4efa:	14 82       	std	Z+4, r1	; 0x04
    4efc:	15 82       	std	Z+5, r1	; 0x05
    4efe:	16 82       	std	Z+6, r1	; 0x06
    4f00:	d3 01       	movw	r26, r6
    4f02:	1d 92       	st	X+, r1
    4f04:	1d 92       	st	X+, r1
    4f06:	1d 92       	st	X+, r1
    4f08:	1c 92       	st	X, r1
    4f0a:	13 97       	sbiw	r26, 0x03	; 3
    4f0c:	f3 01       	movw	r30, r6
    4f0e:	14 82       	std	Z+4, r1	; 0x04
    4f10:	15 82       	std	Z+5, r1	; 0x05
    4f12:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    4f14:	2a e1       	ldi	r18, 0x1A	; 26
    4f16:	28 9f       	mul	r18, r24
    4f18:	f0 01       	movw	r30, r0
    4f1a:	29 9f       	mul	r18, r25
    4f1c:	f0 0d       	add	r31, r0
    4f1e:	11 24       	eor	r1, r1
    4f20:	ee 24       	eor	r14, r14
    4f22:	e3 94       	inc	r14
    4f24:	f1 2c       	mov	r15, r1
    4f26:	ec 0e       	add	r14, r28
    4f28:	fd 1e       	adc	r15, r29
    4f2a:	ee 0d       	add	r30, r14
    4f2c:	ff 1d       	adc	r31, r15
    4f2e:	20 81       	ld	r18, Z
    4f30:	31 81       	ldd	r19, Z+1	; 0x01
    4f32:	c0 5e       	subi	r28, 0xE0	; 224
    4f34:	dd 4f       	sbci	r29, 0xFD	; 253
    4f36:	39 83       	std	Y+1, r19	; 0x01
    4f38:	28 83       	st	Y, r18
    4f3a:	c0 52       	subi	r28, 0x20	; 32
    4f3c:	d2 40       	sbci	r29, 0x02	; 2
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    4f3e:	c1 2c       	mov	r12, r1
    4f40:	d1 2c       	mov	r13, r1
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    4f42:	3f ef       	ldi	r19, 0xFF	; 255
    4f44:	c3 1a       	sub	r12, r19
    4f46:	d3 0a       	sbc	r13, r19
    4f48:	d1 01       	movw	r26, r2
    4f4a:	1a 96       	adiw	r26, 0x0a	; 10
    4f4c:	8d 91       	ld	r24, X+
    4f4e:	9c 91       	ld	r25, X
    4f50:	1b 97       	sbiw	r26, 0x0b	; 11
    4f52:	bd e0       	ldi	r27, 0x0D	; 13
    4f54:	b8 9f       	mul	r27, r24
    4f56:	f0 01       	movw	r30, r0
    4f58:	b9 9f       	mul	r27, r25
    4f5a:	f0 0d       	add	r31, r0
    4f5c:	11 24       	eor	r1, r1
    4f5e:	ec 0d       	add	r30, r12
    4f60:	fd 1d       	adc	r31, r13
    4f62:	ee 0f       	add	r30, r30
    4f64:	ff 1f       	adc	r31, r31
    4f66:	ee 24       	eor	r14, r14
    4f68:	e3 94       	inc	r14
    4f6a:	f1 2c       	mov	r15, r1
    4f6c:	ec 0e       	add	r14, r28
    4f6e:	fd 1e       	adc	r15, r29
    4f70:	ee 0d       	add	r30, r14
    4f72:	ff 1d       	adc	r31, r15
    4f74:	81 81       	ldd	r24, Z+1	; 0x01
    4f76:	8f 93       	push	r24
    4f78:	80 81       	ld	r24, Z
    4f7a:	8f 93       	push	r24
    4f7c:	c1 5e       	subi	r28, 0xE1	; 225
    4f7e:	dd 4f       	sbci	r29, 0xFD	; 253
    4f80:	f8 80       	ld	r15, Y
    4f82:	cf 51       	subi	r28, 0x1F	; 31
    4f84:	d2 40       	sbci	r29, 0x02	; 2
    4f86:	ff 92       	push	r15
    4f88:	c2 5e       	subi	r28, 0xE2	; 226
    4f8a:	dd 4f       	sbci	r29, 0xFD	; 253
    4f8c:	28 81       	ld	r18, Y
    4f8e:	ce 51       	subi	r28, 0x1E	; 30
    4f90:	d2 40       	sbci	r29, 0x02	; 2
    4f92:	2f 93       	push	r18
    4f94:	9f 92       	push	r9
    4f96:	8f 92       	push	r8
    4f98:	ff 92       	push	r15
    4f9a:	2f 93       	push	r18
    4f9c:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    4fa0:	d1 01       	movw	r26, r2
    4fa2:	1a 96       	adiw	r26, 0x0a	; 10
    4fa4:	8d 91       	ld	r24, X+
    4fa6:	9c 91       	ld	r25, X
    4fa8:	1b 97       	sbiw	r26, 0x0b	; 11
    4faa:	bd e0       	ldi	r27, 0x0D	; 13
    4fac:	b8 9f       	mul	r27, r24
    4fae:	f0 01       	movw	r30, r0
    4fb0:	b9 9f       	mul	r27, r25
    4fb2:	f0 0d       	add	r31, r0
    4fb4:	11 24       	eor	r1, r1
    4fb6:	ec 0d       	add	r30, r12
    4fb8:	fd 1d       	adc	r31, r13
    4fba:	34 96       	adiw	r30, 0x04	; 4
    4fbc:	ee 0f       	add	r30, r30
    4fbe:	ff 1f       	adc	r31, r31
    4fc0:	ee 24       	eor	r14, r14
    4fc2:	e3 94       	inc	r14
    4fc4:	f1 2c       	mov	r15, r1
    4fc6:	ec 0e       	add	r14, r28
    4fc8:	fd 1e       	adc	r15, r29
    4fca:	ee 0d       	add	r30, r14
    4fcc:	ff 1d       	adc	r31, r15
    4fce:	81 81       	ldd	r24, Z+1	; 0x01
    4fd0:	8f 93       	push	r24
    4fd2:	80 81       	ld	r24, Z
    4fd4:	8f 93       	push	r24
    4fd6:	5f 92       	push	r5
    4fd8:	4f 92       	push	r4
    4fda:	9f 92       	push	r9
    4fdc:	8f 92       	push	r8
    4fde:	5f 92       	push	r5
    4fe0:	4f 92       	push	r4
    4fe2:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <sprintf>
			sprintf(op3s,"%s%x",op3s,eeprom_splitted[program_counter][k+FIXED_OP3_OFFSET]); // HEX CONCAT TO STRING (OP3 FETCH)
    4fe6:	d1 01       	movw	r26, r2
    4fe8:	1a 96       	adiw	r26, 0x0a	; 10
    4fea:	8d 91       	ld	r24, X+
    4fec:	9c 91       	ld	r25, X
    4fee:	1b 97       	sbiw	r26, 0x0b	; 11
    4ff0:	bd e0       	ldi	r27, 0x0D	; 13
    4ff2:	b8 9f       	mul	r27, r24
    4ff4:	f0 01       	movw	r30, r0
    4ff6:	b9 9f       	mul	r27, r25
    4ff8:	f0 0d       	add	r31, r0
    4ffa:	11 24       	eor	r1, r1
    4ffc:	ec 0d       	add	r30, r12
    4ffe:	fd 1d       	adc	r31, r13
    5000:	38 96       	adiw	r30, 0x08	; 8
    5002:	ee 0f       	add	r30, r30
    5004:	ff 1f       	adc	r31, r31
    5006:	ee 0d       	add	r30, r14
    5008:	ff 1d       	adc	r31, r15
    500a:	81 81       	ldd	r24, Z+1	; 0x01
    500c:	8f 93       	push	r24
    500e:	80 81       	ld	r24, Z
    5010:	8f 93       	push	r24
    5012:	7f 92       	push	r7
    5014:	6f 92       	push	r6
    5016:	9f 92       	push	r9
    5018:	8f 92       	push	r8
    501a:	7f 92       	push	r7
    501c:	6f 92       	push	r6
    501e:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <sprintf>
	program_counter_maximum=line;
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";	
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    5022:	0f b6       	in	r0, 0x3f	; 63
    5024:	f8 94       	cli
    5026:	de bf       	out	0x3e, r29	; 62
    5028:	0f be       	out	0x3f, r0	; 63
    502a:	cd bf       	out	0x3d, r28	; 61
    502c:	f4 e0       	ldi	r31, 0x04	; 4
    502e:	cf 16       	cp	r12, r31
    5030:	d1 04       	cpc	r13, r1
    5032:	09 f0       	breq	.+2      	; 0x5036 <_ZN4QEPU3runEv+0x31a>
    5034:	86 cf       	rjmp	.-244    	; 0x4f42 <_ZN4QEPU3runEv+0x226>
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
			sprintf(op3s,"%s%x",op3s,eeprom_splitted[program_counter][k+FIXED_OP3_OFFSET]); // HEX CONCAT TO STRING (OP3 FETCH)
		}
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16),strtol(op3s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    5036:	40 e1       	ldi	r20, 0x10	; 16
    5038:	50 e0       	ldi	r21, 0x00	; 0
    503a:	60 e0       	ldi	r22, 0x00	; 0
    503c:	70 e0       	ldi	r23, 0x00	; 0
    503e:	c6 5d       	subi	r28, 0xD6	; 214
    5040:	dd 4f       	sbci	r29, 0xFD	; 253
    5042:	88 81       	ld	r24, Y
    5044:	ca 52       	subi	r28, 0x2A	; 42
    5046:	d2 40       	sbci	r29, 0x02	; 2
    5048:	c5 5d       	subi	r28, 0xD5	; 213
    504a:	dd 4f       	sbci	r29, 0xFD	; 253
    504c:	98 81       	ld	r25, Y
    504e:	cb 52       	subi	r28, 0x2B	; 43
    5050:	d2 40       	sbci	r29, 0x02	; 2
    5052:	0e 94 90 31 	call	0x6320	; 0x6320 <strtol>
    5056:	5b 01       	movw	r10, r22
    5058:	6c 01       	movw	r12, r24
    505a:	40 e1       	ldi	r20, 0x10	; 16
    505c:	50 e0       	ldi	r21, 0x00	; 0
    505e:	60 e0       	ldi	r22, 0x00	; 0
    5060:	70 e0       	ldi	r23, 0x00	; 0
    5062:	c8 5d       	subi	r28, 0xD8	; 216
    5064:	dd 4f       	sbci	r29, 0xFD	; 253
    5066:	88 81       	ld	r24, Y
    5068:	c8 52       	subi	r28, 0x28	; 40
    506a:	d2 40       	sbci	r29, 0x02	; 2
    506c:	c7 5d       	subi	r28, 0xD7	; 215
    506e:	dd 4f       	sbci	r29, 0xFD	; 253
    5070:	98 81       	ld	r25, Y
    5072:	c9 52       	subi	r28, 0x29	; 41
    5074:	d2 40       	sbci	r29, 0x02	; 2
    5076:	0e 94 90 31 	call	0x6320	; 0x6320 <strtol>
    507a:	ce 5d       	subi	r28, 0xDE	; 222
    507c:	dd 4f       	sbci	r29, 0xFD	; 253
    507e:	68 83       	st	Y, r22
    5080:	79 83       	std	Y+1, r23	; 0x01
    5082:	8a 83       	std	Y+2, r24	; 0x02
    5084:	9b 83       	std	Y+3, r25	; 0x03
    5086:	c2 52       	subi	r28, 0x22	; 34
    5088:	d2 40       	sbci	r29, 0x02	; 2
    508a:	40 e1       	ldi	r20, 0x10	; 16
    508c:	50 e0       	ldi	r21, 0x00	; 0
    508e:	60 e0       	ldi	r22, 0x00	; 0
    5090:	70 e0       	ldi	r23, 0x00	; 0
    5092:	ca 5d       	subi	r28, 0xDA	; 218
    5094:	dd 4f       	sbci	r29, 0xFD	; 253
    5096:	88 81       	ld	r24, Y
    5098:	c6 52       	subi	r28, 0x26	; 38
    509a:	d2 40       	sbci	r29, 0x02	; 2
    509c:	c9 5d       	subi	r28, 0xD9	; 217
    509e:	dd 4f       	sbci	r29, 0xFD	; 253
    50a0:	98 81       	ld	r25, Y
    50a2:	c7 52       	subi	r28, 0x27	; 39
    50a4:	d2 40       	sbci	r29, 0x02	; 2
    50a6:	0e 94 90 31 	call	0x6320	; 0x6320 <strtol>
    50aa:	9b 01       	movw	r18, r22
    50ac:	ac 01       	movw	r20, r24
    50ae:	ce 5d       	subi	r28, 0xDE	; 222
    50b0:	dd 4f       	sbci	r29, 0xFD	; 253
    50b2:	e8 80       	ld	r14, Y
    50b4:	f9 80       	ldd	r15, Y+1	; 0x01
    50b6:	0a 81       	ldd	r16, Y+2	; 0x02
    50b8:	1b 81       	ldd	r17, Y+3	; 0x03
    50ba:	c2 52       	subi	r28, 0x22	; 34
    50bc:	d2 40       	sbci	r29, 0x02	; 2
    50be:	c0 5e       	subi	r28, 0xE0	; 224
    50c0:	dd 4f       	sbci	r29, 0xFD	; 253
    50c2:	68 81       	ld	r22, Y
    50c4:	79 81       	ldd	r23, Y+1	; 0x01
    50c6:	c0 52       	subi	r28, 0x20	; 32
    50c8:	d2 40       	sbci	r29, 0x02	; 2
    50ca:	c1 01       	movw	r24, r2
    50cc:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN4QEPU7executeEilll>
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	program_counter_maximum=line;
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    50d0:	d1 01       	movw	r26, r2
    50d2:	1a 96       	adiw	r26, 0x0a	; 10
    50d4:	8d 91       	ld	r24, X+
    50d6:	9c 91       	ld	r25, X
    50d8:	1b 97       	sbiw	r26, 0x0b	; 11
    50da:	01 96       	adiw	r24, 0x01	; 1
    50dc:	1b 96       	adiw	r26, 0x0b	; 11
    50de:	9c 93       	st	X, r25
    50e0:	8e 93       	st	-X, r24
    50e2:	1a 97       	sbiw	r26, 0x0a	; 10
    50e4:	1c 96       	adiw	r26, 0x0c	; 12
    50e6:	2d 91       	ld	r18, X+
    50e8:	3c 91       	ld	r19, X
    50ea:	1d 97       	sbiw	r26, 0x0d	; 13
    50ec:	82 17       	cp	r24, r18
    50ee:	93 07       	cpc	r25, r19
    50f0:	0c f4       	brge	.+2      	; 0x50f4 <_ZN4QEPU3runEv+0x3d8>
    50f2:	ed ce       	rjmp	.-550    	; 0x4ece <_ZN4QEPU3runEv+0x1b2>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
			sprintf(op3s,"%s%x",op3s,eeprom_splitted[program_counter][k+FIXED_OP3_OFFSET]); // HEX CONCAT TO STRING (OP3 FETCH)
		}
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16),strtol(op3s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    50f4:	c1 01       	movw	r24, r2
    50f6:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <_ZN4QEPU7dumpmemEv>
	serial.writestr("The execution of the program has finished");
    50fa:	6f ed       	ldi	r22, 0xDF	; 223
    50fc:	70 e0       	ldi	r23, 0x00	; 0
    50fe:	c1 01       	movw	r24, r2
    5100:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
	#pragma endregion
}
    5104:	c5 5d       	subi	r28, 0xD5	; 213
    5106:	dd 4f       	sbci	r29, 0xFD	; 253
    5108:	0f b6       	in	r0, 0x3f	; 63
    510a:	f8 94       	cli
    510c:	de bf       	out	0x3e, r29	; 62
    510e:	0f be       	out	0x3f, r0	; 63
    5110:	cd bf       	out	0x3d, r28	; 61
    5112:	df 91       	pop	r29
    5114:	cf 91       	pop	r28
    5116:	1f 91       	pop	r17
    5118:	0f 91       	pop	r16
    511a:	ff 90       	pop	r15
    511c:	ef 90       	pop	r14
    511e:	df 90       	pop	r13
    5120:	cf 90       	pop	r12
    5122:	bf 90       	pop	r11
    5124:	af 90       	pop	r10
    5126:	9f 90       	pop	r9
    5128:	8f 90       	pop	r8
    512a:	7f 90       	pop	r7
    512c:	6f 90       	pop	r6
    512e:	5f 90       	pop	r5
    5130:	4f 90       	pop	r4
    5132:	3f 90       	pop	r3
    5134:	2f 90       	pop	r2
    5136:	08 95       	ret

00005138 <main>:
#include "qepu.h"
int main(void){
    5138:	cf 93       	push	r28
    513a:	df 93       	push	r29
    513c:	cd b7       	in	r28, 0x3d	; 61
    513e:	de b7       	in	r29, 0x3e	; 62
    5140:	2e 97       	sbiw	r28, 0x0e	; 14
    5142:	0f b6       	in	r0, 0x3f	; 63
    5144:	f8 94       	cli
    5146:	de bf       	out	0x3e, r29	; 62
    5148:	0f be       	out	0x3f, r0	; 63
    514a:	cd bf       	out	0x3d, r28	; 61
	s.writestrln("");
	
	sram.push(3);
	sram.dumpmem(5);
	*/
	QEPU qepu;
    514c:	ce 01       	movw	r24, r28
    514e:	01 96       	adiw	r24, 0x01	; 1
    5150:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <_ZN4QEPUC1Ev>
	qepu.run();
    5154:	ce 01       	movw	r24, r28
    5156:	01 96       	adiw	r24, 0x01	; 1
    5158:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <_ZN4QEPU3runEv>
    515c:	ff cf       	rjmp	.-2      	; 0x515c <main+0x24>

0000515e <_ZN4SRAMC1Ev>:
#include "sram.h"

SRAM::SRAM(){
    515e:	cf 93       	push	r28
    5160:	df 93       	push	r29
    5162:	ec 01       	movw	r28, r24
    5164:	03 96       	adiw	r24, 0x03	; 3
    5166:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <_ZN6SerialC1Ev>
	CTRLMEM_DIR=OUTPUT;
    516a:	8f ef       	ldi	r24, 0xFF	; 255
    516c:	84 bb       	out	0x14, r24	; 20
	stack_head_offset=MEMORY_HEAD_PERMISSION_OFFSET+HEAD_PROGRAMMER_OFFSET;
    516e:	84 e1       	ldi	r24, 0x14	; 20
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	99 83       	std	Y+1, r25	; 0x01
    5174:	88 83       	st	Y, r24
	stack_tail_offset=ADDRESS_MAX-MEMORY_TAIL_PERMISSION_OFFSET-TAIL_PROGRAMMER_OFFSET;
    5176:	88 e3       	ldi	r24, 0x38	; 56
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	9d 83       	std	Y+5, r25	; 0x05
    517c:	8c 83       	std	Y+4, r24	; 0x04
}
    517e:	df 91       	pop	r29
    5180:	cf 91       	pop	r28
    5182:	08 95       	ret

00005184 <_ZN4SRAM11set_addressEi>:

void SRAM::set_address(int address){
	MEM_ADDRESS_DIR=OUTPUT;
    5184:	2f ef       	ldi	r18, 0xFF	; 255
    5186:	2a bb       	out	0x1a, r18	; 26
	if(address+stack_head_offset>stack_tail_offset) MEM_ADDRESS=stack_tail_offset;
    5188:	fc 01       	movw	r30, r24
    518a:	20 81       	ld	r18, Z
    518c:	31 81       	ldd	r19, Z+1	; 0x01
    518e:	84 81       	ldd	r24, Z+4	; 0x04
    5190:	95 81       	ldd	r25, Z+5	; 0x05
    5192:	a9 01       	movw	r20, r18
    5194:	46 0f       	add	r20, r22
    5196:	57 1f       	adc	r21, r23
    5198:	84 17       	cp	r24, r20
    519a:	95 07       	cpc	r25, r21
    519c:	14 f4       	brge	.+4      	; 0x51a2 <_ZN4SRAM11set_addressEi+0x1e>
    519e:	8b bb       	out	0x1b, r24	; 27
    51a0:	08 95       	ret
	else MEM_ADDRESS=address+stack_head_offset;
    51a2:	26 0f       	add	r18, r22
    51a4:	2b bb       	out	0x1b, r18	; 27
    51a6:	08 95       	ret

000051a8 <_ZN4SRAM10setctrlpinEii>:
void SRAM::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
	BUS_OUT=data;
}
void SRAM::setctrlpin(int pin,int state){
	CTRLMEM&=~(1<<pin); // CLEAR PIN
    51a8:	75 b3       	in	r23, 0x15	; 21
    51aa:	21 e0       	ldi	r18, 0x01	; 1
    51ac:	30 e0       	ldi	r19, 0x00	; 0
    51ae:	c9 01       	movw	r24, r18
    51b0:	06 2e       	mov	r0, r22
    51b2:	02 c0       	rjmp	.+4      	; 0x51b8 <_ZN4SRAM10setctrlpinEii+0x10>
    51b4:	88 0f       	add	r24, r24
    51b6:	99 1f       	adc	r25, r25
    51b8:	0a 94       	dec	r0
    51ba:	e2 f7       	brpl	.-8      	; 0x51b4 <_ZN4SRAM10setctrlpinEii+0xc>
    51bc:	80 95       	com	r24
    51be:	87 23       	and	r24, r23
    51c0:	85 bb       	out	0x15, r24	; 21
	CTRLMEM|=(state<<pin); // SET PIN
    51c2:	85 b3       	in	r24, 0x15	; 21
    51c4:	02 c0       	rjmp	.+4      	; 0x51ca <_ZN4SRAM10setctrlpinEii+0x22>
    51c6:	44 0f       	add	r20, r20
    51c8:	55 1f       	adc	r21, r21
    51ca:	6a 95       	dec	r22
    51cc:	e2 f7       	brpl	.-8      	; 0x51c6 <_ZN4SRAM10setctrlpinEii+0x1e>
    51ce:	48 2b       	or	r20, r24
    51d0:	45 bb       	out	0x15, r20	; 21
    51d2:	08 95       	ret

000051d4 <_ZN4SRAM17memory_managementEv>:
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
		serial.writestrln(mem_debug_str);
	}
}

void SRAM::memory_management(){
    51d4:	fc 01       	movw	r30, r24
	if(stack_head_offset>stack_tail_offset || stack_head_offset<0 || stack_head_offset>ADDRESS_MAX || stack_tail_offset<0 || stack_tail_offset>ADDRESS_MAX){
    51d6:	80 81       	ld	r24, Z
    51d8:	91 81       	ldd	r25, Z+1	; 0x01
    51da:	24 81       	ldd	r18, Z+4	; 0x04
    51dc:	35 81       	ldd	r19, Z+5	; 0x05
    51de:	28 17       	cp	r18, r24
    51e0:	39 07       	cpc	r19, r25
    51e2:	34 f0       	brlt	.+12     	; 0x51f0 <_ZN4SRAM17memory_managementEv+0x1c>
    51e4:	81 30       	cpi	r24, 0x01	; 1
    51e6:	91 40       	sbci	r25, 0x01	; 1
    51e8:	18 f4       	brcc	.+6      	; 0x51f0 <_ZN4SRAM17memory_managementEv+0x1c>
    51ea:	21 30       	cpi	r18, 0x01	; 1
    51ec:	31 40       	sbci	r19, 0x01	; 1
    51ee:	40 f0       	brcs	.+16     	; 0x5200 <_ZN4SRAM17memory_managementEv+0x2c>
		//RESTORE STACK POINTERS TO DEFAULT
		stack_head_offset=MEMORY_HEAD_PERMISSION_OFFSET+HEAD_PROGRAMMER_OFFSET;
    51f0:	84 e1       	ldi	r24, 0x14	; 20
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	91 83       	std	Z+1, r25	; 0x01
    51f6:	80 83       	st	Z, r24
		stack_tail_offset=ADDRESS_MAX-MEMORY_TAIL_PERMISSION_OFFSET-TAIL_PROGRAMMER_OFFSET;
    51f8:	88 e3       	ldi	r24, 0x38	; 56
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	95 83       	std	Z+5, r25	; 0x05
    51fe:	84 83       	std	Z+4, r24	; 0x04
    5200:	08 95       	ret

00005202 <_ZN4SRAM4readEa>:
	MEM_ADDRESS_DIR=OUTPUT;
	if(address+stack_head_offset>stack_tail_offset) MEM_ADDRESS=stack_tail_offset;
	else MEM_ADDRESS=address+stack_head_offset;
}

int8_t SRAM::read(int8_t address){
    5202:	1f 93       	push	r17
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	ec 01       	movw	r28, r24
    520a:	16 2f       	mov	r17, r22
	memory_management();
    520c:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <_ZN4SRAM17memory_managementEv>
	set_address(address);
    5210:	61 2f       	mov	r22, r17
    5212:	77 27       	eor	r23, r23
    5214:	67 fd       	sbrc	r22, 7
    5216:	70 95       	com	r23
    5218:	ce 01       	movw	r24, r28
    521a:	0e 94 c2 28 	call	0x5184	; 0x5184 <_ZN4SRAM11set_addressEi>
	BUS_DIR=INPUT;
    521e:	17 ba       	out	0x17, r1	; 23
	setctrlpin(MRE,HIGH);
    5220:	41 e0       	ldi	r20, 0x01	; 1
    5222:	50 e0       	ldi	r21, 0x00	; 0
    5224:	66 e0       	ldi	r22, 0x06	; 6
    5226:	70 e0       	ldi	r23, 0x00	; 0
    5228:	ce 01       	movw	r24, r28
    522a:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4SRAM10setctrlpinEii>
	int bus_data=BUS_IN;
    522e:	16 b3       	in	r17, 0x16	; 22
	setctrlpin(MRE,LOW);
    5230:	40 e0       	ldi	r20, 0x00	; 0
    5232:	50 e0       	ldi	r21, 0x00	; 0
    5234:	66 e0       	ldi	r22, 0x06	; 6
    5236:	70 e0       	ldi	r23, 0x00	; 0
    5238:	ce 01       	movw	r24, r28
    523a:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4SRAM10setctrlpinEii>
	BUS_DIR=OUTPUT;
    523e:	8f ef       	ldi	r24, 0xFF	; 255
    5240:	87 bb       	out	0x17, r24	; 23
	MEM_ADDRESS=LOW;
    5242:	1b ba       	out	0x1b, r1	; 27
	return bus_data;
}
    5244:	81 2f       	mov	r24, r17
    5246:	df 91       	pop	r29
    5248:	cf 91       	pop	r28
    524a:	1f 91       	pop	r17
    524c:	08 95       	ret

0000524e <_ZN4SRAM9read_sramEv>:
	}else{
		stack_head_offset--;
		write(0,register_data);
	}
}
int* SRAM::read_sram(){
    524e:	cf 92       	push	r12
    5250:	df 92       	push	r13
    5252:	ef 92       	push	r14
    5254:	ff 92       	push	r15
    5256:	0f 93       	push	r16
    5258:	1f 93       	push	r17
    525a:	cf 93       	push	r28
    525c:	df 93       	push	r29
    525e:	cd b7       	in	r28, 0x3d	; 61
    5260:	de b7       	in	r29, 0x3e	; 62
    5262:	d2 50       	subi	r29, 0x02	; 2
    5264:	0f b6       	in	r0, 0x3f	; 63
    5266:	f8 94       	cli
    5268:	de bf       	out	0x3e, r29	; 62
    526a:	0f be       	out	0x3f, r0	; 63
    526c:	cd bf       	out	0x3d, r28	; 61
    526e:	7c 01       	movw	r14, r24
	int ram_memory[ADDRESS_MAX];
	for(int i=stack_head_offset;i<stack_tail_offset;i++) ram_memory[i]=read(i);
    5270:	fc 01       	movw	r30, r24
    5272:	00 81       	ld	r16, Z
    5274:	11 81       	ldd	r17, Z+1	; 0x01
    5276:	84 81       	ldd	r24, Z+4	; 0x04
    5278:	95 81       	ldd	r25, Z+5	; 0x05
    527a:	08 17       	cp	r16, r24
    527c:	19 07       	cpc	r17, r25
    527e:	e4 f4       	brge	.+56     	; 0x52b8 <_ZN4SRAM9read_sramEv+0x6a>
    5280:	68 01       	movw	r12, r16
    5282:	cc 0c       	add	r12, r12
    5284:	dd 1c       	adc	r13, r13
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	8c 0f       	add	r24, r28
    528c:	9d 1f       	adc	r25, r29
    528e:	c8 0e       	add	r12, r24
    5290:	d9 1e       	adc	r13, r25
    5292:	60 2f       	mov	r22, r16
    5294:	c7 01       	movw	r24, r14
    5296:	0e 94 01 29 	call	0x5202	; 0x5202 <_ZN4SRAM4readEa>
    529a:	99 27       	eor	r25, r25
    529c:	87 fd       	sbrc	r24, 7
    529e:	90 95       	com	r25
    52a0:	f6 01       	movw	r30, r12
    52a2:	81 93       	st	Z+, r24
    52a4:	91 93       	st	Z+, r25
    52a6:	6f 01       	movw	r12, r30
    52a8:	0f 5f       	subi	r16, 0xFF	; 255
    52aa:	1f 4f       	sbci	r17, 0xFF	; 255
    52ac:	f7 01       	movw	r30, r14
    52ae:	84 81       	ldd	r24, Z+4	; 0x04
    52b0:	95 81       	ldd	r25, Z+5	; 0x05
    52b2:	08 17       	cp	r16, r24
    52b4:	19 07       	cpc	r17, r25
    52b6:	6c f3       	brlt	.-38     	; 0x5292 <_ZN4SRAM9read_sramEv+0x44>
	return ram_memory;
}
    52b8:	ce 01       	movw	r24, r28
    52ba:	01 96       	adiw	r24, 0x01	; 1
    52bc:	de 5f       	subi	r29, 0xFE	; 254
    52be:	0f b6       	in	r0, 0x3f	; 63
    52c0:	f8 94       	cli
    52c2:	de bf       	out	0x3e, r29	; 62
    52c4:	0f be       	out	0x3f, r0	; 63
    52c6:	cd bf       	out	0x3d, r28	; 61
    52c8:	df 91       	pop	r29
    52ca:	cf 91       	pop	r28
    52cc:	1f 91       	pop	r17
    52ce:	0f 91       	pop	r16
    52d0:	ff 90       	pop	r15
    52d2:	ef 90       	pop	r14
    52d4:	df 90       	pop	r13
    52d6:	cf 90       	pop	r12
    52d8:	08 95       	ret

000052da <_ZN4SRAM5writeEaa>:
	setctrlpin(MRE,LOW);
	BUS_DIR=OUTPUT;
	MEM_ADDRESS=LOW;
	return bus_data;
}
void SRAM::write(int8_t address,int8_t data){
    52da:	0f 93       	push	r16
    52dc:	1f 93       	push	r17
    52de:	cf 93       	push	r28
    52e0:	df 93       	push	r29
    52e2:	ec 01       	movw	r28, r24
    52e4:	16 2f       	mov	r17, r22
    52e6:	04 2f       	mov	r16, r20
	memory_management();
    52e8:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <_ZN4SRAM17memory_managementEv>
	set_address(address);
    52ec:	61 2f       	mov	r22, r17
    52ee:	77 27       	eor	r23, r23
    52f0:	67 fd       	sbrc	r22, 7
    52f2:	70 95       	com	r23
    52f4:	ce 01       	movw	r24, r28
    52f6:	0e 94 c2 28 	call	0x5184	; 0x5184 <_ZN4SRAM11set_addressEi>
	setctrlpin(MWR,LOW);
	MEM_ADDRESS=LOW;
	bus_write(LOW);
}
void SRAM::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    52fa:	1f ef       	ldi	r17, 0xFF	; 255
    52fc:	17 bb       	out	0x17, r17	; 23
	BUS_OUT=data;
    52fe:	08 bb       	out	0x18, r16	; 24
}
void SRAM::write(int8_t address,int8_t data){
	memory_management();
	set_address(address);
	bus_write(data);
	setctrlpin(MWR,HIGH);
    5300:	41 e0       	ldi	r20, 0x01	; 1
    5302:	50 e0       	ldi	r21, 0x00	; 0
    5304:	65 e0       	ldi	r22, 0x05	; 5
    5306:	70 e0       	ldi	r23, 0x00	; 0
    5308:	ce 01       	movw	r24, r28
    530a:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4SRAM10setctrlpinEii>
	setctrlpin(MWR,LOW);
    530e:	40 e0       	ldi	r20, 0x00	; 0
    5310:	50 e0       	ldi	r21, 0x00	; 0
    5312:	65 e0       	ldi	r22, 0x05	; 5
    5314:	70 e0       	ldi	r23, 0x00	; 0
    5316:	ce 01       	movw	r24, r28
    5318:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4SRAM10setctrlpinEii>
	MEM_ADDRESS=LOW;
    531c:	1b ba       	out	0x1b, r1	; 27
	bus_write(LOW);
}
void SRAM::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    531e:	17 bb       	out	0x17, r17	; 23
	BUS_OUT=data;
    5320:	18 ba       	out	0x18, r1	; 24
	bus_write(data);
	setctrlpin(MWR,HIGH);
	setctrlpin(MWR,LOW);
	MEM_ADDRESS=LOW;
	bus_write(LOW);
}
    5322:	df 91       	pop	r29
    5324:	cf 91       	pop	r28
    5326:	1f 91       	pop	r17
    5328:	0f 91       	pop	r16
    532a:	08 95       	ret

0000532c <_ZN4SRAM3popEv>:
}
void SRAM::setctrlpin(int pin,int state){
	CTRLMEM&=~(1<<pin); // CLEAR PIN
	CTRLMEM|=(state<<pin); // SET PIN
}
int SRAM::pop(){
    532c:	cf 93       	push	r28
    532e:	df 93       	push	r29
    5330:	ec 01       	movw	r28, r24
	memory_management();
    5332:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <_ZN4SRAM17memory_managementEv>
	int popped_number=read(0);
    5336:	60 e0       	ldi	r22, 0x00	; 0
    5338:	ce 01       	movw	r24, r28
    533a:	0e 94 01 29 	call	0x5202	; 0x5202 <_ZN4SRAM4readEa>
    533e:	99 27       	eor	r25, r25
    5340:	87 fd       	sbrc	r24, 7
    5342:	90 95       	com	r25
	stack_head_offset++;
    5344:	28 81       	ld	r18, Y
    5346:	39 81       	ldd	r19, Y+1	; 0x01
    5348:	2f 5f       	subi	r18, 0xFF	; 255
    534a:	3f 4f       	sbci	r19, 0xFF	; 255
    534c:	39 83       	std	Y+1, r19	; 0x01
    534e:	28 83       	st	Y, r18
	if(stack_head_offset>stack_tail_offset) stack_head_offset=stack_tail_offset;
    5350:	4c 81       	ldd	r20, Y+4	; 0x04
    5352:	5d 81       	ldd	r21, Y+5	; 0x05
    5354:	42 17       	cp	r20, r18
    5356:	53 07       	cpc	r21, r19
    5358:	14 f4       	brge	.+4      	; 0x535e <_ZN4SRAM3popEv+0x32>
    535a:	59 83       	std	Y+1, r21	; 0x01
    535c:	48 83       	st	Y, r20
	return popped_number;
}
    535e:	df 91       	pop	r29
    5360:	cf 91       	pop	r28
    5362:	08 95       	ret

00005364 <_ZN4SRAM4pushEi>:
void SRAM::push(int register_data){
    5364:	ef 92       	push	r14
    5366:	ff 92       	push	r15
    5368:	0f 93       	push	r16
    536a:	1f 93       	push	r17
    536c:	cf 93       	push	r28
    536e:	df 93       	push	r29
    5370:	8c 01       	movw	r16, r24
    5372:	f6 2e       	mov	r15, r22
    5374:	e7 2e       	mov	r14, r23
	memory_management();
    5376:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <_ZN4SRAM17memory_managementEv>
	if(stack_head_offset<=MEMORY_HEAD_PERMISSION_OFFSET){ //PUSH EVERY OTHER ELEMENT FORWARD ****
    537a:	f8 01       	movw	r30, r16
    537c:	80 81       	ld	r24, Z
    537e:	91 81       	ldd	r25, Z+1	; 0x01
    5380:	18 16       	cp	r1, r24
    5382:	19 06       	cpc	r1, r25
    5384:	6c f1       	brlt	.+90     	; 0x53e0 <_ZN4SRAM4pushEi+0x7c>
		int *ram_memory=utils.arrint_shiftright(read_sram(),register_data,stack_tail_offset-stack_head_offset);
    5386:	c4 81       	ldd	r28, Z+4	; 0x04
    5388:	d5 81       	ldd	r29, Z+5	; 0x05
    538a:	c8 1b       	sub	r28, r24
    538c:	d9 0b       	sbc	r29, r25
    538e:	c8 01       	movw	r24, r16
    5390:	0e 94 27 29 	call	0x524e	; 0x524e <_ZN4SRAM9read_sramEv>
    5394:	9e 01       	movw	r18, r28
    5396:	4f 2d       	mov	r20, r15
    5398:	5e 2d       	mov	r21, r14
    539a:	bc 01       	movw	r22, r24
    539c:	c8 01       	movw	r24, r16
    539e:	02 96       	adiw	r24, 0x02	; 2
    53a0:	0e 94 8c 2b 	call	0x5718	; 0x5718 <_ZN5Utils17arrint_shiftrightEPiii>
		for(int i=stack_head_offset;i<stack_tail_offset;i++) write(i,ram_memory[i]);
    53a4:	f8 01       	movw	r30, r16
    53a6:	c0 81       	ld	r28, Z
    53a8:	d1 81       	ldd	r29, Z+1	; 0x01
    53aa:	24 81       	ldd	r18, Z+4	; 0x04
    53ac:	35 81       	ldd	r19, Z+5	; 0x05
    53ae:	c2 17       	cp	r28, r18
    53b0:	d3 07       	cpc	r29, r19
    53b2:	fc f4       	brge	.+62     	; 0x53f2 <_ZN4SRAM4pushEi+0x8e>
    53b4:	7e 01       	movw	r14, r28
    53b6:	ee 0c       	add	r14, r14
    53b8:	ff 1c       	adc	r15, r15
    53ba:	e8 0e       	add	r14, r24
    53bc:	f9 1e       	adc	r15, r25
    53be:	f7 01       	movw	r30, r14
    53c0:	40 81       	ld	r20, Z
    53c2:	f2 e0       	ldi	r31, 0x02	; 2
    53c4:	ef 0e       	add	r14, r31
    53c6:	f1 1c       	adc	r15, r1
    53c8:	6c 2f       	mov	r22, r28
    53ca:	c8 01       	movw	r24, r16
    53cc:	0e 94 6d 29 	call	0x52da	; 0x52da <_ZN4SRAM5writeEaa>
    53d0:	21 96       	adiw	r28, 0x01	; 1
    53d2:	f8 01       	movw	r30, r16
    53d4:	84 81       	ldd	r24, Z+4	; 0x04
    53d6:	95 81       	ldd	r25, Z+5	; 0x05
    53d8:	c8 17       	cp	r28, r24
    53da:	d9 07       	cpc	r29, r25
    53dc:	84 f3       	brlt	.-32     	; 0x53be <_ZN4SRAM4pushEi+0x5a>
    53de:	09 c0       	rjmp	.+18     	; 0x53f2 <_ZN4SRAM4pushEi+0x8e>
	}else{
		stack_head_offset--;
    53e0:	01 97       	sbiw	r24, 0x01	; 1
    53e2:	f8 01       	movw	r30, r16
    53e4:	91 83       	std	Z+1, r25	; 0x01
    53e6:	80 83       	st	Z, r24
		write(0,register_data);
    53e8:	4f 2d       	mov	r20, r15
    53ea:	60 e0       	ldi	r22, 0x00	; 0
    53ec:	c8 01       	movw	r24, r16
    53ee:	0e 94 6d 29 	call	0x52da	; 0x52da <_ZN4SRAM5writeEaa>
	}
}
    53f2:	df 91       	pop	r29
    53f4:	cf 91       	pop	r28
    53f6:	1f 91       	pop	r17
    53f8:	0f 91       	pop	r16
    53fa:	ff 90       	pop	r15
    53fc:	ef 90       	pop	r14
    53fe:	08 95       	ret

00005400 <_ZN4SRAM7dumpmemEi>:
int* SRAM::read_sram(){
	int ram_memory[ADDRESS_MAX];
	for(int i=stack_head_offset;i<stack_tail_offset;i++) ram_memory[i]=read(i);
	return ram_memory;
}
void SRAM::dumpmem(int length){
    5400:	6f 92       	push	r6
    5402:	7f 92       	push	r7
    5404:	8f 92       	push	r8
    5406:	9f 92       	push	r9
    5408:	af 92       	push	r10
    540a:	bf 92       	push	r11
    540c:	cf 92       	push	r12
    540e:	df 92       	push	r13
    5410:	ef 92       	push	r14
    5412:	ff 92       	push	r15
    5414:	0f 93       	push	r16
    5416:	1f 93       	push	r17
    5418:	cf 93       	push	r28
    541a:	df 93       	push	r29
    541c:	cd b7       	in	r28, 0x3d	; 61
    541e:	de b7       	in	r29, 0x3e	; 62
    5420:	6e 97       	sbiw	r28, 0x1e	; 30
    5422:	0f b6       	in	r0, 0x3f	; 63
    5424:	f8 94       	cli
    5426:	de bf       	out	0x3e, r29	; 62
    5428:	0f be       	out	0x3f, r0	; 63
    542a:	cd bf       	out	0x3d, r28	; 61
    542c:	6c 01       	movw	r12, r24
    542e:	5b 01       	movw	r10, r22
	memory_management();
    5430:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <_ZN4SRAM17memory_managementEv>
	int head=0,tail=length;
	if(length<=0){head=stack_head_offset; tail=stack_tail_offset;}
    5434:	1a 14       	cp	r1, r10
    5436:	1b 04       	cpc	r1, r11
    5438:	84 f4       	brge	.+32     	; 0x545a <_ZN4SRAM7dumpmemEi+0x5a>
	for(int i=0;i<tail+head;i++){
    543a:	00 e0       	ldi	r16, 0x00	; 0
    543c:	10 e0       	ldi	r17, 0x00	; 0
		char mem_debug_str[30];
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
    543e:	0f 2e       	mov	r0, r31
    5440:	f9 e0       	ldi	r31, 0x09	; 9
    5442:	6f 2e       	mov	r6, r31
    5444:	f1 e0       	ldi	r31, 0x01	; 1
    5446:	7f 2e       	mov	r7, r31
    5448:	f0 2d       	mov	r31, r0
    544a:	ce 01       	movw	r24, r28
    544c:	01 96       	adiw	r24, 0x01	; 1
    544e:	7c 01       	movw	r14, r24
		serial.writestrln(mem_debug_str);
    5450:	46 01       	movw	r8, r12
    5452:	93 e0       	ldi	r25, 0x03	; 3
    5454:	89 0e       	add	r8, r25
    5456:	91 1c       	adc	r9, r1
    5458:	0b c0       	rjmp	.+22     	; 0x5470 <_ZN4SRAM7dumpmemEi+0x70>
}
void SRAM::dumpmem(int length){
	memory_management();
	int head=0,tail=length;
	if(length<=0){head=stack_head_offset; tail=stack_tail_offset;}
	for(int i=0;i<tail+head;i++){
    545a:	f6 01       	movw	r30, r12
    545c:	a0 80       	ld	r10, Z
    545e:	b1 80       	ldd	r11, Z+1	; 0x01
    5460:	84 81       	ldd	r24, Z+4	; 0x04
    5462:	95 81       	ldd	r25, Z+5	; 0x05
    5464:	a8 0e       	add	r10, r24
    5466:	b9 1e       	adc	r11, r25
    5468:	1a 14       	cp	r1, r10
    546a:	1b 04       	cpc	r1, r11
    546c:	34 f3       	brlt	.-52     	; 0x543a <_ZN4SRAM7dumpmemEi+0x3a>
    546e:	27 c0       	rjmp	.+78     	; 0x54be <_ZN4SRAM7dumpmemEi+0xbe>
		char mem_debug_str[30];
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
    5470:	60 2f       	mov	r22, r16
    5472:	c6 01       	movw	r24, r12
    5474:	0e 94 01 29 	call	0x5202	; 0x5202 <_ZN4SRAM4readEa>
    5478:	28 2f       	mov	r18, r24
    547a:	33 27       	eor	r19, r19
    547c:	27 fd       	sbrc	r18, 7
    547e:	30 95       	com	r19
    5480:	3f 93       	push	r19
    5482:	8f 93       	push	r24
    5484:	f6 01       	movw	r30, r12
    5486:	80 81       	ld	r24, Z
    5488:	91 81       	ldd	r25, Z+1	; 0x01
    548a:	80 0f       	add	r24, r16
    548c:	91 1f       	adc	r25, r17
    548e:	9f 93       	push	r25
    5490:	8f 93       	push	r24
    5492:	1f 93       	push	r17
    5494:	0f 93       	push	r16
    5496:	7f 92       	push	r7
    5498:	6f 92       	push	r6
    549a:	ff 92       	push	r15
    549c:	ef 92       	push	r14
    549e:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <sprintf>
		serial.writestrln(mem_debug_str);
    54a2:	b7 01       	movw	r22, r14
    54a4:	c4 01       	movw	r24, r8
    54a6:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6Serial10writestrlnEPc>
}
void SRAM::dumpmem(int length){
	memory_management();
	int head=0,tail=length;
	if(length<=0){head=stack_head_offset; tail=stack_tail_offset;}
	for(int i=0;i<tail+head;i++){
    54aa:	0f 5f       	subi	r16, 0xFF	; 255
    54ac:	1f 4f       	sbci	r17, 0xFF	; 255
    54ae:	0f b6       	in	r0, 0x3f	; 63
    54b0:	f8 94       	cli
    54b2:	de bf       	out	0x3e, r29	; 62
    54b4:	0f be       	out	0x3f, r0	; 63
    54b6:	cd bf       	out	0x3d, r28	; 61
    54b8:	0a 15       	cp	r16, r10
    54ba:	1b 05       	cpc	r17, r11
    54bc:	cc f2       	brlt	.-78     	; 0x5470 <_ZN4SRAM7dumpmemEi+0x70>
		char mem_debug_str[30];
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
		serial.writestrln(mem_debug_str);
	}
}
    54be:	6e 96       	adiw	r28, 0x1e	; 30
    54c0:	0f b6       	in	r0, 0x3f	; 63
    54c2:	f8 94       	cli
    54c4:	de bf       	out	0x3e, r29	; 62
    54c6:	0f be       	out	0x3f, r0	; 63
    54c8:	cd bf       	out	0x3d, r28	; 61
    54ca:	df 91       	pop	r29
    54cc:	cf 91       	pop	r28
    54ce:	1f 91       	pop	r17
    54d0:	0f 91       	pop	r16
    54d2:	ff 90       	pop	r15
    54d4:	ef 90       	pop	r14
    54d6:	df 90       	pop	r13
    54d8:	cf 90       	pop	r12
    54da:	bf 90       	pop	r11
    54dc:	af 90       	pop	r10
    54de:	9f 90       	pop	r9
    54e0:	8f 90       	pop	r8
    54e2:	7f 90       	pop	r7
    54e4:	6f 90       	pop	r6
    54e6:	08 95       	ret

000054e8 <_ZN6SerialC1Ev>:
    54e8:	83 e3       	ldi	r24, 0x33	; 51
    54ea:	89 b9       	out	0x09, r24	; 9
    54ec:	10 bc       	out	0x20, r1	; 32
    54ee:	86 e8       	ldi	r24, 0x86	; 134
    54f0:	80 bd       	out	0x20, r24	; 32
    54f2:	88 e1       	ldi	r24, 0x18	; 24
    54f4:	8a b9       	out	0x0a, r24	; 10
    54f6:	08 95       	ret

000054f8 <_ZN6Serial5writeEc>:
    54f8:	5d 9b       	sbis	0x0b, 5	; 11
    54fa:	fe cf       	rjmp	.-4      	; 0x54f8 <_ZN6Serial5writeEc>
    54fc:	6c b9       	out	0x0c, r22	; 12
    54fe:	08 95       	ret

00005500 <_ZN6Serial8writestrEPc>:
    5500:	0f 93       	push	r16
    5502:	1f 93       	push	r17
    5504:	cf 93       	push	r28
    5506:	df 93       	push	r29
    5508:	8c 01       	movw	r16, r24
    550a:	eb 01       	movw	r28, r22
    550c:	68 81       	ld	r22, Y
    550e:	66 23       	and	r22, r22
    5510:	39 f0       	breq	.+14     	; 0x5520 <_ZN6Serial8writestrEPc+0x20>
    5512:	21 96       	adiw	r28, 0x01	; 1
    5514:	c8 01       	movw	r24, r16
    5516:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <_ZN6Serial5writeEc>
    551a:	69 91       	ld	r22, Y+
    551c:	61 11       	cpse	r22, r1
    551e:	fa cf       	rjmp	.-12     	; 0x5514 <_ZN6Serial8writestrEPc+0x14>
    5520:	df 91       	pop	r29
    5522:	cf 91       	pop	r28
    5524:	1f 91       	pop	r17
    5526:	0f 91       	pop	r16
    5528:	08 95       	ret

0000552a <_ZN6Serial10writestrlnEPc>:
    552a:	cf 93       	push	r28
    552c:	df 93       	push	r29
    552e:	ec 01       	movw	r28, r24
    5530:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN6Serial8writestrEPc>
    5534:	6d e0       	ldi	r22, 0x0D	; 13
    5536:	ce 01       	movw	r24, r28
    5538:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <_ZN6Serial5writeEc>
    553c:	df 91       	pop	r29
    553e:	cf 91       	pop	r28
    5540:	08 95       	ret

00005542 <_ZN5Utils10int2binstrEii>:
#include "utils.h"

char * Utils::int2binstr(int num,int strlength){
    5542:	0f 93       	push	r16
    5544:	1f 93       	push	r17
    5546:	cf 93       	push	r28
    5548:	df 93       	push	r29
    554a:	06 2f       	mov	r16, r22
    554c:	17 2f       	mov	r17, r23
    554e:	ea 01       	movw	r28, r20
	char * str = (char*)malloc(strlength + 1);
    5550:	ca 01       	movw	r24, r20
    5552:	01 96       	adiw	r24, 0x01	; 1
    5554:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
	if(!str) return NULL;
    5558:	00 97       	sbiw	r24, 0x00	; 0
    555a:	b9 f0       	breq	.+46     	; 0x558a <_ZN5Utils10int2binstrEii+0x48>
	str[strlength] = 0;
    555c:	fc 01       	movw	r30, r24
    555e:	ec 0f       	add	r30, r28
    5560:	fd 1f       	adc	r31, r29
    5562:	10 82       	st	Z, r1

	// type punning because signed shift is implementation-defined
	unsigned u = *(unsigned *)&num;
    5564:	20 2f       	mov	r18, r16
    5566:	31 2f       	mov	r19, r17
	for(; strlength--; u >>= 1)
    5568:	be 01       	movw	r22, r28
    556a:	61 50       	subi	r22, 0x01	; 1
    556c:	71 09       	sbc	r23, r1
    556e:	cd 2b       	or	r28, r29
    5570:	71 f0       	breq	.+28     	; 0x558e <_ZN5Utils10int2binstrEii+0x4c>
	str[strlength] = u & 1 ? '1' : '0';
    5572:	20 ff       	sbrs	r18, 0
    5574:	02 c0       	rjmp	.+4      	; 0x557a <_ZN5Utils10int2binstrEii+0x38>
    5576:	41 e3       	ldi	r20, 0x31	; 49
    5578:	01 c0       	rjmp	.+2      	; 0x557c <_ZN5Utils10int2binstrEii+0x3a>
    557a:	40 e3       	ldi	r20, 0x30	; 48
    557c:	42 93       	st	-Z, r20
	if(!str) return NULL;
	str[strlength] = 0;

	// type punning because signed shift is implementation-defined
	unsigned u = *(unsigned *)&num;
	for(; strlength--; u >>= 1)
    557e:	36 95       	lsr	r19
    5580:	27 95       	ror	r18
    5582:	61 50       	subi	r22, 0x01	; 1
    5584:	71 09       	sbc	r23, r1
    5586:	a8 f7       	brcc	.-22     	; 0x5572 <_ZN5Utils10int2binstrEii+0x30>
    5588:	02 c0       	rjmp	.+4      	; 0x558e <_ZN5Utils10int2binstrEii+0x4c>
#include "utils.h"

char * Utils::int2binstr(int num,int strlength){
	char * str = (char*)malloc(strlength + 1);
	if(!str) return NULL;
    558a:	80 e0       	ldi	r24, 0x00	; 0
    558c:	90 e0       	ldi	r25, 0x00	; 0
	unsigned u = *(unsigned *)&num;
	for(; strlength--; u >>= 1)
	str[strlength] = u & 1 ? '1' : '0';

	return str;
}
    558e:	df 91       	pop	r29
    5590:	cf 91       	pop	r28
    5592:	1f 91       	pop	r17
    5594:	0f 91       	pop	r16
    5596:	08 95       	ret

00005598 <_ZN5Utils10str2intarrEPc>:
char* Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  Utils::str2intarr(char* c){
    5598:	cf 92       	push	r12
    559a:	df 92       	push	r13
    559c:	ef 92       	push	r14
    559e:	ff 92       	push	r15
    55a0:	0f 93       	push	r16
    55a2:	1f 93       	push	r17
    55a4:	cf 93       	push	r28
    55a6:	df 93       	push	r29
    55a8:	d6 2f       	mov	r29, r22
    55aa:	c7 2f       	mov	r28, r23
    55ac:	e6 2f       	mov	r30, r22
    55ae:	f7 2f       	mov	r31, r23
	int c_length=0;
    55b0:	80 e0       	ldi	r24, 0x00	; 0
    55b2:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    55b4:	21 91       	ld	r18, Z+
    55b6:	2f 3f       	cpi	r18, 0xFF	; 255
    55b8:	89 f4       	brne	.+34     	; 0x55dc <_ZN5Utils10str2intarrEPc+0x44>
    55ba:	df 01       	movw	r26, r30
    55bc:	12 97       	sbiw	r26, 0x02	; 2
    55be:	4c 91       	ld	r20, X
    55c0:	4f 3f       	cpi	r20, 0xFF	; 255
    55c2:	61 f4       	brne	.+24     	; 0x55dc <_ZN5Utils10str2intarrEPc+0x44>
    55c4:	11 97       	sbiw	r26, 0x01	; 1
    55c6:	4c 91       	ld	r20, X
    55c8:	4f 3f       	cpi	r20, 0xFF	; 255
    55ca:	41 f4       	brne	.+16     	; 0x55dc <_ZN5Utils10str2intarrEPc+0x44>
    55cc:	11 97       	sbiw	r26, 0x01	; 1
    55ce:	4c 91       	ld	r20, X
    55d0:	4f 3f       	cpi	r20, 0xFF	; 255
    55d2:	21 f4       	brne	.+8      	; 0x55dc <_ZN5Utils10str2intarrEPc+0x44>
    55d4:	11 97       	sbiw	r26, 0x01	; 1
    55d6:	2c 91       	ld	r18, X
    55d8:	2f 3f       	cpi	r18, 0xFF	; 255
    55da:	11 f0       	breq	.+4      	; 0x55e0 <_ZN5Utils10str2intarrEPc+0x48>
    55dc:	01 96       	adiw	r24, 0x01	; 1
    55de:	ea cf       	rjmp	.-44     	; 0x55b4 <_ZN5Utils10str2intarrEPc+0x1c>
    55e0:	8c 01       	movw	r16, r24
    55e2:	04 50       	subi	r16, 0x04	; 4
    55e4:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    55e6:	6c 01       	movw	r12, r24
    55e8:	2f ef       	ldi	r18, 0xFF	; 255
    55ea:	c2 1a       	sub	r12, r18
    55ec:	d2 0a       	sbc	r13, r18
    55ee:	76 01       	movw	r14, r12
    55f0:	ee 0c       	add	r14, r14
    55f2:	ff 1c       	adc	r15, r15
    55f4:	c7 01       	movw	r24, r14
    55f6:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    55fa:	10 16       	cp	r1, r16
    55fc:	11 06       	cpc	r1, r17
    55fe:	74 f4       	brge	.+28     	; 0x561c <_ZN5Utils10str2intarrEPc+0x84>
    5600:	dc 01       	movw	r26, r24
    5602:	ed 2f       	mov	r30, r29
    5604:	fc 2f       	mov	r31, r28
    5606:	20 e0       	ldi	r18, 0x00	; 0
    5608:	30 e0       	ldi	r19, 0x00	; 0
    560a:	41 91       	ld	r20, Z+
    560c:	50 e0       	ldi	r21, 0x00	; 0
    560e:	4d 93       	st	X+, r20
    5610:	5d 93       	st	X+, r21
    5612:	2f 5f       	subi	r18, 0xFF	; 255
    5614:	3f 4f       	sbci	r19, 0xFF	; 255
    5616:	20 17       	cp	r18, r16
    5618:	31 07       	cpc	r19, r17
    561a:	bc f3       	brlt	.-18     	; 0x560a <_ZN5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    561c:	0c 15       	cp	r16, r12
    561e:	1d 05       	cpc	r17, r13
    5620:	7c f4       	brge	.+30     	; 0x5640 <_ZN5Utils10str2intarrEPc+0xa8>
    5622:	f7 01       	movw	r30, r14
    5624:	3a 97       	sbiw	r30, 0x0a	; 10
    5626:	e8 0f       	add	r30, r24
    5628:	f9 1f       	adc	r31, r25
    562a:	25 e0       	ldi	r18, 0x05	; 5
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	4f ef       	ldi	r20, 0xFF	; 255
    5630:	50 e0       	ldi	r21, 0x00	; 0
    5632:	41 93       	st	Z+, r20
    5634:	51 93       	st	Z+, r21
    5636:	21 50       	subi	r18, 0x01	; 1
    5638:	31 09       	sbc	r19, r1
    563a:	21 15       	cp	r18, r1
    563c:	31 05       	cpc	r19, r1
    563e:	c9 f7       	brne	.-14     	; 0x5632 <_ZN5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    5640:	df 91       	pop	r29
    5642:	cf 91       	pop	r28
    5644:	1f 91       	pop	r17
    5646:	0f 91       	pop	r16
    5648:	ff 90       	pop	r15
    564a:	ef 90       	pop	r14
    564c:	df 90       	pop	r13
    564e:	cf 90       	pop	r12
    5650:	08 95       	ret

00005652 <_ZN5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* Utils::int2str(int dec){
    5652:	0f 93       	push	r16
    5654:	1f 93       	push	r17
    5656:	cf 93       	push	r28
    5658:	df 93       	push	r29
    565a:	cd b7       	in	r28, 0x3d	; 61
    565c:	de b7       	in	r29, 0x3e	; 62
    565e:	2a 97       	sbiw	r28, 0x0a	; 10
    5660:	0f b6       	in	r0, 0x3f	; 63
    5662:	f8 94       	cli
    5664:	de bf       	out	0x3e, r29	; 62
    5666:	0f be       	out	0x3f, r0	; 63
    5668:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	sprintf(str,"%d",dec);
    566a:	7f 93       	push	r23
    566c:	6f 93       	push	r22
    566e:	85 e2       	ldi	r24, 0x25	; 37
    5670:	91 e0       	ldi	r25, 0x01	; 1
    5672:	9f 93       	push	r25
    5674:	8f 93       	push	r24
    5676:	8e 01       	movw	r16, r28
    5678:	0f 5f       	subi	r16, 0xFF	; 255
    567a:	1f 4f       	sbci	r17, 0xFF	; 255
    567c:	1f 93       	push	r17
    567e:	0f 93       	push	r16
    5680:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <sprintf>
	return str;
    5684:	0f 90       	pop	r0
    5686:	0f 90       	pop	r0
    5688:	0f 90       	pop	r0
    568a:	0f 90       	pop	r0
    568c:	0f 90       	pop	r0
    568e:	0f 90       	pop	r0
}
    5690:	c8 01       	movw	r24, r16
    5692:	2a 96       	adiw	r28, 0x0a	; 10
    5694:	0f b6       	in	r0, 0x3f	; 63
    5696:	f8 94       	cli
    5698:	de bf       	out	0x3e, r29	; 62
    569a:	0f be       	out	0x3f, r0	; 63
    569c:	cd bf       	out	0x3d, r28	; 61
    569e:	df 91       	pop	r29
    56a0:	cf 91       	pop	r28
    56a2:	1f 91       	pop	r17
    56a4:	0f 91       	pop	r16
    56a6:	08 95       	ret

000056a8 <_ZN5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    56a8:	61 15       	cp	r22, r1
    56aa:	71 05       	cpc	r23, r1
    56ac:	51 f0       	breq	.+20     	; 0x56c2 <_ZN5Utils5delayEi+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    56ae:	86 e6       	ldi	r24, 0x66	; 102
    56b0:	9e e0       	ldi	r25, 0x0E	; 14
    56b2:	01 97       	sbiw	r24, 0x01	; 1
    56b4:	f1 f7       	brne	.-4      	; 0x56b2 <_ZN5Utils5delayEi+0xa>
    56b6:	00 00       	nop
    56b8:	61 50       	subi	r22, 0x01	; 1
    56ba:	71 09       	sbc	r23, r1
    56bc:	61 15       	cp	r22, r1
    56be:	71 05       	cpc	r23, r1
    56c0:	b1 f7       	brne	.-20     	; 0x56ae <_ZN5Utils5delayEi+0x6>
}
    56c2:	08 95       	ret

000056c4 <_ZN5Utils10custom_powEfi>:
float Utils::custom_pow(float base,int exp){
    56c4:	cf 92       	push	r12
    56c6:	df 92       	push	r13
    56c8:	ef 92       	push	r14
    56ca:	ff 92       	push	r15
    56cc:	0f 93       	push	r16
    56ce:	1f 93       	push	r17
    56d0:	cf 93       	push	r28
    56d2:	df 93       	push	r29
    56d4:	6a 01       	movw	r12, r20
    56d6:	7b 01       	movw	r14, r22
    56d8:	89 01       	movw	r16, r18
	float result=1; for(int i=0;i<exp;i++) result*=base;
    56da:	12 16       	cp	r1, r18
    56dc:	13 06       	cpc	r1, r19
    56de:	7c f4       	brge	.+30     	; 0x56fe <_ZN5Utils10custom_powEfi+0x3a>
    56e0:	c0 e0       	ldi	r28, 0x00	; 0
    56e2:	d0 e0       	ldi	r29, 0x00	; 0
    56e4:	60 e0       	ldi	r22, 0x00	; 0
    56e6:	70 e0       	ldi	r23, 0x00	; 0
    56e8:	80 e8       	ldi	r24, 0x80	; 128
    56ea:	9f e3       	ldi	r25, 0x3F	; 63
    56ec:	a7 01       	movw	r20, r14
    56ee:	96 01       	movw	r18, r12
    56f0:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsf3>
    56f4:	21 96       	adiw	r28, 0x01	; 1
    56f6:	c0 17       	cp	r28, r16
    56f8:	d1 07       	cpc	r29, r17
    56fa:	c1 f7       	brne	.-16     	; 0x56ec <_ZN5Utils10custom_powEfi+0x28>
    56fc:	04 c0       	rjmp	.+8      	; 0x5706 <_ZN5Utils10custom_powEfi+0x42>
    56fe:	60 e0       	ldi	r22, 0x00	; 0
    5700:	70 e0       	ldi	r23, 0x00	; 0
    5702:	80 e8       	ldi	r24, 0x80	; 128
    5704:	9f e3       	ldi	r25, 0x3F	; 63
	return result;
}
    5706:	df 91       	pop	r29
    5708:	cf 91       	pop	r28
    570a:	1f 91       	pop	r17
    570c:	0f 91       	pop	r16
    570e:	ff 90       	pop	r15
    5710:	ef 90       	pop	r14
    5712:	df 90       	pop	r13
    5714:	cf 90       	pop	r12
    5716:	08 95       	ret

00005718 <_ZN5Utils17arrint_shiftrightEPiii>:
int * Utils::arrint_shiftright(int * arr,int newelem,int array_length){
    5718:	cf 92       	push	r12
    571a:	df 92       	push	r13
    571c:	ef 92       	push	r14
    571e:	ff 92       	push	r15
    5720:	0f 93       	push	r16
    5722:	1f 93       	push	r17
    5724:	cf 93       	push	r28
    5726:	df 93       	push	r29
    5728:	7b 01       	movw	r14, r22
    572a:	6a 01       	movw	r12, r20
    572c:	e9 01       	movw	r28, r18
	int * new_array=(int*)malloc(sizeof(int)*array_length);
    572e:	89 01       	movw	r16, r18
    5730:	00 0f       	add	r16, r16
    5732:	11 1f       	adc	r17, r17
    5734:	c8 01       	movw	r24, r16
    5736:	0e 94 0b 30 	call	0x6016	; 0x6016 <malloc>
	int new_array_index=0;
	new_array[0]=newelem;
    573a:	fc 01       	movw	r30, r24
    573c:	d1 82       	std	Z+1, r13	; 0x01
    573e:	c0 82       	st	Z, r12
	for(int i=0;i<array_length;i++) new_array[++new_array_index]=arr[i];
    5740:	1c 16       	cp	r1, r28
    5742:	1d 06       	cpc	r1, r29
    5744:	6c f4       	brge	.+26     	; 0x5760 <_ZN5Utils17arrint_shiftrightEPiii+0x48>
    5746:	f7 01       	movw	r30, r14
    5748:	dc 01       	movw	r26, r24
    574a:	12 96       	adiw	r26, 0x02	; 2
    574c:	b7 01       	movw	r22, r14
    574e:	60 0f       	add	r22, r16
    5750:	71 1f       	adc	r23, r17
    5752:	21 91       	ld	r18, Z+
    5754:	31 91       	ld	r19, Z+
    5756:	2d 93       	st	X+, r18
    5758:	3d 93       	st	X+, r19
    575a:	e6 17       	cp	r30, r22
    575c:	f7 07       	cpc	r31, r23
    575e:	c9 f7       	brne	.-14     	; 0x5752 <_ZN5Utils17arrint_shiftrightEPiii+0x3a>
	return new_array;
    5760:	df 91       	pop	r29
    5762:	cf 91       	pop	r28
    5764:	1f 91       	pop	r17
    5766:	0f 91       	pop	r16
    5768:	ff 90       	pop	r15
    576a:	ef 90       	pop	r14
    576c:	df 90       	pop	r13
    576e:	cf 90       	pop	r12
    5770:	08 95       	ret

00005772 <acos>:
    5772:	9f 93       	push	r25
    5774:	9f 77       	andi	r25, 0x7F	; 127
    5776:	a6 d1       	rcall	.+844    	; 0x5ac4 <__fp_arccos>
    5778:	0f 90       	pop	r0
    577a:	00 20       	and	r0, r0
    577c:	3a f4       	brpl	.+14     	; 0x578c <acos+0x1a>
    577e:	90 58       	subi	r25, 0x80	; 128
    5780:	a2 ea       	ldi	r26, 0xA2	; 162
    5782:	2a ed       	ldi	r18, 0xDA	; 218
    5784:	3f e0       	ldi	r19, 0x0F	; 15
    5786:	49 e4       	ldi	r20, 0x49	; 73
    5788:	50 e4       	ldi	r21, 0x40	; 64
    578a:	13 d0       	rcall	.+38     	; 0x57b2 <__addsf3x>
    578c:	3e c2       	rjmp	.+1148   	; 0x5c0a <__fp_round>

0000578e <__subsf3>:
    578e:	50 58       	subi	r21, 0x80	; 128

00005790 <__addsf3>:
    5790:	bb 27       	eor	r27, r27
    5792:	aa 27       	eor	r26, r26
    5794:	0e d0       	rcall	.+28     	; 0x57b2 <__addsf3x>
    5796:	39 c2       	rjmp	.+1138   	; 0x5c0a <__fp_round>
    5798:	02 d2       	rcall	.+1028   	; 0x5b9e <__fp_pscA>
    579a:	30 f0       	brcs	.+12     	; 0x57a8 <__addsf3+0x18>
    579c:	07 d2       	rcall	.+1038   	; 0x5bac <__fp_pscB>
    579e:	20 f0       	brcs	.+8      	; 0x57a8 <__addsf3+0x18>
    57a0:	31 f4       	brne	.+12     	; 0x57ae <__addsf3+0x1e>
    57a2:	9f 3f       	cpi	r25, 0xFF	; 255
    57a4:	11 f4       	brne	.+4      	; 0x57aa <__addsf3+0x1a>
    57a6:	1e f4       	brtc	.+6      	; 0x57ae <__addsf3+0x1e>
    57a8:	d2 c1       	rjmp	.+932    	; 0x5b4e <__fp_nan>
    57aa:	0e f4       	brtc	.+2      	; 0x57ae <__addsf3+0x1e>
    57ac:	e0 95       	com	r30
    57ae:	e7 fb       	bst	r30, 7
    57b0:	c8 c1       	rjmp	.+912    	; 0x5b42 <__fp_inf>

000057b2 <__addsf3x>:
    57b2:	e9 2f       	mov	r30, r25
    57b4:	4c d2       	rcall	.+1176   	; 0x5c4e <__fp_split3>
    57b6:	80 f3       	brcs	.-32     	; 0x5798 <__addsf3+0x8>
    57b8:	ba 17       	cp	r27, r26
    57ba:	62 07       	cpc	r22, r18
    57bc:	73 07       	cpc	r23, r19
    57be:	84 07       	cpc	r24, r20
    57c0:	95 07       	cpc	r25, r21
    57c2:	18 f0       	brcs	.+6      	; 0x57ca <__addsf3x+0x18>
    57c4:	71 f4       	brne	.+28     	; 0x57e2 <__addsf3x+0x30>
    57c6:	9e f5       	brtc	.+102    	; 0x582e <__addsf3x+0x7c>
    57c8:	64 c2       	rjmp	.+1224   	; 0x5c92 <__fp_zero>
    57ca:	0e f4       	brtc	.+2      	; 0x57ce <__addsf3x+0x1c>
    57cc:	e0 95       	com	r30
    57ce:	0b 2e       	mov	r0, r27
    57d0:	ba 2f       	mov	r27, r26
    57d2:	a0 2d       	mov	r26, r0
    57d4:	0b 01       	movw	r0, r22
    57d6:	b9 01       	movw	r22, r18
    57d8:	90 01       	movw	r18, r0
    57da:	0c 01       	movw	r0, r24
    57dc:	ca 01       	movw	r24, r20
    57de:	a0 01       	movw	r20, r0
    57e0:	11 24       	eor	r1, r1
    57e2:	ff 27       	eor	r31, r31
    57e4:	59 1b       	sub	r21, r25
    57e6:	99 f0       	breq	.+38     	; 0x580e <__addsf3x+0x5c>
    57e8:	59 3f       	cpi	r21, 0xF9	; 249
    57ea:	50 f4       	brcc	.+20     	; 0x5800 <__addsf3x+0x4e>
    57ec:	50 3e       	cpi	r21, 0xE0	; 224
    57ee:	68 f1       	brcs	.+90     	; 0x584a <__addsf3x+0x98>
    57f0:	1a 16       	cp	r1, r26
    57f2:	f0 40       	sbci	r31, 0x00	; 0
    57f4:	a2 2f       	mov	r26, r18
    57f6:	23 2f       	mov	r18, r19
    57f8:	34 2f       	mov	r19, r20
    57fa:	44 27       	eor	r20, r20
    57fc:	58 5f       	subi	r21, 0xF8	; 248
    57fe:	f3 cf       	rjmp	.-26     	; 0x57e6 <__addsf3x+0x34>
    5800:	46 95       	lsr	r20
    5802:	37 95       	ror	r19
    5804:	27 95       	ror	r18
    5806:	a7 95       	ror	r26
    5808:	f0 40       	sbci	r31, 0x00	; 0
    580a:	53 95       	inc	r21
    580c:	c9 f7       	brne	.-14     	; 0x5800 <__addsf3x+0x4e>
    580e:	7e f4       	brtc	.+30     	; 0x582e <__addsf3x+0x7c>
    5810:	1f 16       	cp	r1, r31
    5812:	ba 0b       	sbc	r27, r26
    5814:	62 0b       	sbc	r22, r18
    5816:	73 0b       	sbc	r23, r19
    5818:	84 0b       	sbc	r24, r20
    581a:	ba f0       	brmi	.+46     	; 0x584a <__addsf3x+0x98>
    581c:	91 50       	subi	r25, 0x01	; 1
    581e:	a1 f0       	breq	.+40     	; 0x5848 <__addsf3x+0x96>
    5820:	ff 0f       	add	r31, r31
    5822:	bb 1f       	adc	r27, r27
    5824:	66 1f       	adc	r22, r22
    5826:	77 1f       	adc	r23, r23
    5828:	88 1f       	adc	r24, r24
    582a:	c2 f7       	brpl	.-16     	; 0x581c <__addsf3x+0x6a>
    582c:	0e c0       	rjmp	.+28     	; 0x584a <__addsf3x+0x98>
    582e:	ba 0f       	add	r27, r26
    5830:	62 1f       	adc	r22, r18
    5832:	73 1f       	adc	r23, r19
    5834:	84 1f       	adc	r24, r20
    5836:	48 f4       	brcc	.+18     	; 0x584a <__addsf3x+0x98>
    5838:	87 95       	ror	r24
    583a:	77 95       	ror	r23
    583c:	67 95       	ror	r22
    583e:	b7 95       	ror	r27
    5840:	f7 95       	ror	r31
    5842:	9e 3f       	cpi	r25, 0xFE	; 254
    5844:	08 f0       	brcs	.+2      	; 0x5848 <__addsf3x+0x96>
    5846:	b3 cf       	rjmp	.-154    	; 0x57ae <__addsf3+0x1e>
    5848:	93 95       	inc	r25
    584a:	88 0f       	add	r24, r24
    584c:	08 f0       	brcs	.+2      	; 0x5850 <__addsf3x+0x9e>
    584e:	99 27       	eor	r25, r25
    5850:	ee 0f       	add	r30, r30
    5852:	97 95       	ror	r25
    5854:	87 95       	ror	r24
    5856:	08 95       	ret

00005858 <atan>:
    5858:	df 93       	push	r29
    585a:	dd 27       	eor	r29, r29
    585c:	b9 2f       	mov	r27, r25
    585e:	bf 77       	andi	r27, 0x7F	; 127
    5860:	40 e8       	ldi	r20, 0x80	; 128
    5862:	5f e3       	ldi	r21, 0x3F	; 63
    5864:	16 16       	cp	r1, r22
    5866:	17 06       	cpc	r1, r23
    5868:	48 07       	cpc	r20, r24
    586a:	5b 07       	cpc	r21, r27
    586c:	10 f4       	brcc	.+4      	; 0x5872 <atan+0x1a>
    586e:	d9 2f       	mov	r29, r25
    5870:	1b d2       	rcall	.+1078   	; 0x5ca8 <inverse>
    5872:	9f 93       	push	r25
    5874:	8f 93       	push	r24
    5876:	7f 93       	push	r23
    5878:	6f 93       	push	r22
    587a:	76 d3       	rcall	.+1772   	; 0x5f68 <square>
    587c:	ec e9       	ldi	r30, 0x9C	; 156
    587e:	f0 e0       	ldi	r31, 0x00	; 0
    5880:	69 d1       	rcall	.+722    	; 0x5b54 <__fp_powser>
    5882:	c3 d1       	rcall	.+902    	; 0x5c0a <__fp_round>
    5884:	2f 91       	pop	r18
    5886:	3f 91       	pop	r19
    5888:	4f 91       	pop	r20
    588a:	5f 91       	pop	r21
    588c:	ce d2       	rcall	.+1436   	; 0x5e2a <__mulsf3x>
    588e:	dd 23       	and	r29, r29
    5890:	49 f0       	breq	.+18     	; 0x58a4 <atan+0x4c>
    5892:	90 58       	subi	r25, 0x80	; 128
    5894:	a2 ea       	ldi	r26, 0xA2	; 162
    5896:	2a ed       	ldi	r18, 0xDA	; 218
    5898:	3f e0       	ldi	r19, 0x0F	; 15
    589a:	49 ec       	ldi	r20, 0xC9	; 201
    589c:	5f e3       	ldi	r21, 0x3F	; 63
    589e:	d0 78       	andi	r29, 0x80	; 128
    58a0:	5d 27       	eor	r21, r29
    58a2:	87 df       	rcall	.-242    	; 0x57b2 <__addsf3x>
    58a4:	df 91       	pop	r29
    58a6:	b1 c1       	rjmp	.+866    	; 0x5c0a <__fp_round>

000058a8 <__cmpsf2>:
    58a8:	28 d1       	rcall	.+592    	; 0x5afa <__fp_cmp>
    58aa:	08 f4       	brcc	.+2      	; 0x58ae <__cmpsf2+0x6>
    58ac:	81 e0       	ldi	r24, 0x01	; 1
    58ae:	08 95       	ret

000058b0 <cos>:
    58b0:	85 d1       	rcall	.+778    	; 0x5bbc <__fp_rempio2>
    58b2:	e3 95       	inc	r30
    58b4:	bb c1       	rjmp	.+886    	; 0x5c2c <__fp_sinus>

000058b6 <__divsf3>:
    58b6:	0c d0       	rcall	.+24     	; 0x58d0 <__divsf3x>
    58b8:	a8 c1       	rjmp	.+848    	; 0x5c0a <__fp_round>
    58ba:	78 d1       	rcall	.+752    	; 0x5bac <__fp_pscB>
    58bc:	40 f0       	brcs	.+16     	; 0x58ce <__divsf3+0x18>
    58be:	6f d1       	rcall	.+734    	; 0x5b9e <__fp_pscA>
    58c0:	30 f0       	brcs	.+12     	; 0x58ce <__divsf3+0x18>
    58c2:	21 f4       	brne	.+8      	; 0x58cc <__divsf3+0x16>
    58c4:	5f 3f       	cpi	r21, 0xFF	; 255
    58c6:	19 f0       	breq	.+6      	; 0x58ce <__divsf3+0x18>
    58c8:	3c c1       	rjmp	.+632    	; 0x5b42 <__fp_inf>
    58ca:	51 11       	cpse	r21, r1
    58cc:	e3 c1       	rjmp	.+966    	; 0x5c94 <__fp_szero>
    58ce:	3f c1       	rjmp	.+638    	; 0x5b4e <__fp_nan>

000058d0 <__divsf3x>:
    58d0:	be d1       	rcall	.+892    	; 0x5c4e <__fp_split3>
    58d2:	98 f3       	brcs	.-26     	; 0x58ba <__divsf3+0x4>

000058d4 <__divsf3_pse>:
    58d4:	99 23       	and	r25, r25
    58d6:	c9 f3       	breq	.-14     	; 0x58ca <__divsf3+0x14>
    58d8:	55 23       	and	r21, r21
    58da:	b1 f3       	breq	.-20     	; 0x58c8 <__divsf3+0x12>
    58dc:	95 1b       	sub	r25, r21
    58de:	55 0b       	sbc	r21, r21
    58e0:	bb 27       	eor	r27, r27
    58e2:	aa 27       	eor	r26, r26
    58e4:	62 17       	cp	r22, r18
    58e6:	73 07       	cpc	r23, r19
    58e8:	84 07       	cpc	r24, r20
    58ea:	38 f0       	brcs	.+14     	; 0x58fa <__divsf3_pse+0x26>
    58ec:	9f 5f       	subi	r25, 0xFF	; 255
    58ee:	5f 4f       	sbci	r21, 0xFF	; 255
    58f0:	22 0f       	add	r18, r18
    58f2:	33 1f       	adc	r19, r19
    58f4:	44 1f       	adc	r20, r20
    58f6:	aa 1f       	adc	r26, r26
    58f8:	a9 f3       	breq	.-22     	; 0x58e4 <__divsf3_pse+0x10>
    58fa:	33 d0       	rcall	.+102    	; 0x5962 <__divsf3_pse+0x8e>
    58fc:	0e 2e       	mov	r0, r30
    58fe:	3a f0       	brmi	.+14     	; 0x590e <__divsf3_pse+0x3a>
    5900:	e0 e8       	ldi	r30, 0x80	; 128
    5902:	30 d0       	rcall	.+96     	; 0x5964 <__divsf3_pse+0x90>
    5904:	91 50       	subi	r25, 0x01	; 1
    5906:	50 40       	sbci	r21, 0x00	; 0
    5908:	e6 95       	lsr	r30
    590a:	00 1c       	adc	r0, r0
    590c:	ca f7       	brpl	.-14     	; 0x5900 <__divsf3_pse+0x2c>
    590e:	29 d0       	rcall	.+82     	; 0x5962 <__divsf3_pse+0x8e>
    5910:	fe 2f       	mov	r31, r30
    5912:	27 d0       	rcall	.+78     	; 0x5962 <__divsf3_pse+0x8e>
    5914:	66 0f       	add	r22, r22
    5916:	77 1f       	adc	r23, r23
    5918:	88 1f       	adc	r24, r24
    591a:	bb 1f       	adc	r27, r27
    591c:	26 17       	cp	r18, r22
    591e:	37 07       	cpc	r19, r23
    5920:	48 07       	cpc	r20, r24
    5922:	ab 07       	cpc	r26, r27
    5924:	b0 e8       	ldi	r27, 0x80	; 128
    5926:	09 f0       	breq	.+2      	; 0x592a <__divsf3_pse+0x56>
    5928:	bb 0b       	sbc	r27, r27
    592a:	80 2d       	mov	r24, r0
    592c:	bf 01       	movw	r22, r30
    592e:	ff 27       	eor	r31, r31
    5930:	93 58       	subi	r25, 0x83	; 131
    5932:	5f 4f       	sbci	r21, 0xFF	; 255
    5934:	2a f0       	brmi	.+10     	; 0x5940 <__divsf3_pse+0x6c>
    5936:	9e 3f       	cpi	r25, 0xFE	; 254
    5938:	51 05       	cpc	r21, r1
    593a:	68 f0       	brcs	.+26     	; 0x5956 <__divsf3_pse+0x82>
    593c:	02 c1       	rjmp	.+516    	; 0x5b42 <__fp_inf>
    593e:	aa c1       	rjmp	.+852    	; 0x5c94 <__fp_szero>
    5940:	5f 3f       	cpi	r21, 0xFF	; 255
    5942:	ec f3       	brlt	.-6      	; 0x593e <__divsf3_pse+0x6a>
    5944:	98 3e       	cpi	r25, 0xE8	; 232
    5946:	dc f3       	brlt	.-10     	; 0x593e <__divsf3_pse+0x6a>
    5948:	86 95       	lsr	r24
    594a:	77 95       	ror	r23
    594c:	67 95       	ror	r22
    594e:	b7 95       	ror	r27
    5950:	f7 95       	ror	r31
    5952:	9f 5f       	subi	r25, 0xFF	; 255
    5954:	c9 f7       	brne	.-14     	; 0x5948 <__divsf3_pse+0x74>
    5956:	88 0f       	add	r24, r24
    5958:	91 1d       	adc	r25, r1
    595a:	96 95       	lsr	r25
    595c:	87 95       	ror	r24
    595e:	97 f9       	bld	r25, 7
    5960:	08 95       	ret
    5962:	e1 e0       	ldi	r30, 0x01	; 1
    5964:	66 0f       	add	r22, r22
    5966:	77 1f       	adc	r23, r23
    5968:	88 1f       	adc	r24, r24
    596a:	bb 1f       	adc	r27, r27
    596c:	62 17       	cp	r22, r18
    596e:	73 07       	cpc	r23, r19
    5970:	84 07       	cpc	r24, r20
    5972:	ba 07       	cpc	r27, r26
    5974:	20 f0       	brcs	.+8      	; 0x597e <__divsf3_pse+0xaa>
    5976:	62 1b       	sub	r22, r18
    5978:	73 0b       	sbc	r23, r19
    597a:	84 0b       	sbc	r24, r20
    597c:	ba 0b       	sbc	r27, r26
    597e:	ee 1f       	adc	r30, r30
    5980:	88 f7       	brcc	.-30     	; 0x5964 <__divsf3_pse+0x90>
    5982:	e0 95       	com	r30
    5984:	08 95       	ret
    5986:	19 f4       	brne	.+6      	; 0x598e <__divsf3_pse+0xba>
    5988:	0e f0       	brts	.+2      	; 0x598c <__divsf3_pse+0xb8>
    598a:	db c0       	rjmp	.+438    	; 0x5b42 <__fp_inf>
    598c:	82 c1       	rjmp	.+772    	; 0x5c92 <__fp_zero>
    598e:	df c0       	rjmp	.+446    	; 0x5b4e <__fp_nan>

00005990 <exp>:
    5990:	66 d1       	rcall	.+716    	; 0x5c5e <__fp_splitA>
    5992:	c8 f3       	brcs	.-14     	; 0x5986 <__divsf3_pse+0xb2>
    5994:	96 38       	cpi	r25, 0x86	; 134
    5996:	c0 f7       	brcc	.-16     	; 0x5988 <__divsf3_pse+0xb4>
    5998:	07 f8       	bld	r0, 7
    599a:	0f 92       	push	r0
    599c:	e8 94       	clt
    599e:	2b e3       	ldi	r18, 0x3B	; 59
    59a0:	3a ea       	ldi	r19, 0xAA	; 170
    59a2:	48 eb       	ldi	r20, 0xB8	; 184
    59a4:	5f e7       	ldi	r21, 0x7F	; 127
    59a6:	43 d2       	rcall	.+1158   	; 0x5e2e <__mulsf3_pse>
    59a8:	0f 92       	push	r0
    59aa:	0f 92       	push	r0
    59ac:	0f 92       	push	r0
    59ae:	4d b7       	in	r20, 0x3d	; 61
    59b0:	5e b7       	in	r21, 0x3e	; 62
    59b2:	0f 92       	push	r0
    59b4:	fb d1       	rcall	.+1014   	; 0x5dac <modf>
    59b6:	e9 ec       	ldi	r30, 0xC9	; 201
    59b8:	f0 e0       	ldi	r31, 0x00	; 0
    59ba:	cc d0       	rcall	.+408    	; 0x5b54 <__fp_powser>
    59bc:	4f 91       	pop	r20
    59be:	5f 91       	pop	r21
    59c0:	ef 91       	pop	r30
    59c2:	ff 91       	pop	r31
    59c4:	e5 95       	asr	r30
    59c6:	ee 1f       	adc	r30, r30
    59c8:	ff 1f       	adc	r31, r31
    59ca:	49 f0       	breq	.+18     	; 0x59de <exp+0x4e>
    59cc:	fe 57       	subi	r31, 0x7E	; 126
    59ce:	e0 68       	ori	r30, 0x80	; 128
    59d0:	44 27       	eor	r20, r20
    59d2:	ee 0f       	add	r30, r30
    59d4:	44 1f       	adc	r20, r20
    59d6:	fa 95       	dec	r31
    59d8:	e1 f7       	brne	.-8      	; 0x59d2 <exp+0x42>
    59da:	41 95       	neg	r20
    59dc:	55 0b       	sbc	r21, r21
    59de:	6d d1       	rcall	.+730    	; 0x5cba <ldexp>
    59e0:	0f 90       	pop	r0
    59e2:	07 fe       	sbrs	r0, 7
    59e4:	61 c1       	rjmp	.+706    	; 0x5ca8 <inverse>
    59e6:	08 95       	ret

000059e8 <__fixsfsi>:
    59e8:	04 d0       	rcall	.+8      	; 0x59f2 <__fixunssfsi>
    59ea:	68 94       	set
    59ec:	b1 11       	cpse	r27, r1
    59ee:	52 c1       	rjmp	.+676    	; 0x5c94 <__fp_szero>
    59f0:	08 95       	ret

000059f2 <__fixunssfsi>:
    59f2:	35 d1       	rcall	.+618    	; 0x5c5e <__fp_splitA>
    59f4:	88 f0       	brcs	.+34     	; 0x5a18 <__fixunssfsi+0x26>
    59f6:	9f 57       	subi	r25, 0x7F	; 127
    59f8:	90 f0       	brcs	.+36     	; 0x5a1e <__fixunssfsi+0x2c>
    59fa:	b9 2f       	mov	r27, r25
    59fc:	99 27       	eor	r25, r25
    59fe:	b7 51       	subi	r27, 0x17	; 23
    5a00:	a0 f0       	brcs	.+40     	; 0x5a2a <__fixunssfsi+0x38>
    5a02:	d1 f0       	breq	.+52     	; 0x5a38 <__fixunssfsi+0x46>
    5a04:	66 0f       	add	r22, r22
    5a06:	77 1f       	adc	r23, r23
    5a08:	88 1f       	adc	r24, r24
    5a0a:	99 1f       	adc	r25, r25
    5a0c:	1a f0       	brmi	.+6      	; 0x5a14 <__fixunssfsi+0x22>
    5a0e:	ba 95       	dec	r27
    5a10:	c9 f7       	brne	.-14     	; 0x5a04 <__fixunssfsi+0x12>
    5a12:	12 c0       	rjmp	.+36     	; 0x5a38 <__fixunssfsi+0x46>
    5a14:	b1 30       	cpi	r27, 0x01	; 1
    5a16:	81 f0       	breq	.+32     	; 0x5a38 <__fixunssfsi+0x46>
    5a18:	3c d1       	rcall	.+632    	; 0x5c92 <__fp_zero>
    5a1a:	b1 e0       	ldi	r27, 0x01	; 1
    5a1c:	08 95       	ret
    5a1e:	39 c1       	rjmp	.+626    	; 0x5c92 <__fp_zero>
    5a20:	67 2f       	mov	r22, r23
    5a22:	78 2f       	mov	r23, r24
    5a24:	88 27       	eor	r24, r24
    5a26:	b8 5f       	subi	r27, 0xF8	; 248
    5a28:	39 f0       	breq	.+14     	; 0x5a38 <__fixunssfsi+0x46>
    5a2a:	b9 3f       	cpi	r27, 0xF9	; 249
    5a2c:	cc f3       	brlt	.-14     	; 0x5a20 <__fixunssfsi+0x2e>
    5a2e:	86 95       	lsr	r24
    5a30:	77 95       	ror	r23
    5a32:	67 95       	ror	r22
    5a34:	b3 95       	inc	r27
    5a36:	d9 f7       	brne	.-10     	; 0x5a2e <__fixunssfsi+0x3c>
    5a38:	3e f4       	brtc	.+14     	; 0x5a48 <__fixunssfsi+0x56>
    5a3a:	90 95       	com	r25
    5a3c:	80 95       	com	r24
    5a3e:	70 95       	com	r23
    5a40:	61 95       	neg	r22
    5a42:	7f 4f       	sbci	r23, 0xFF	; 255
    5a44:	8f 4f       	sbci	r24, 0xFF	; 255
    5a46:	9f 4f       	sbci	r25, 0xFF	; 255
    5a48:	08 95       	ret

00005a4a <__floatunsisf>:
    5a4a:	e8 94       	clt
    5a4c:	09 c0       	rjmp	.+18     	; 0x5a60 <__floatsisf+0x12>

00005a4e <__floatsisf>:
    5a4e:	97 fb       	bst	r25, 7
    5a50:	3e f4       	brtc	.+14     	; 0x5a60 <__floatsisf+0x12>
    5a52:	90 95       	com	r25
    5a54:	80 95       	com	r24
    5a56:	70 95       	com	r23
    5a58:	61 95       	neg	r22
    5a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a60:	99 23       	and	r25, r25
    5a62:	a9 f0       	breq	.+42     	; 0x5a8e <__floatsisf+0x40>
    5a64:	f9 2f       	mov	r31, r25
    5a66:	96 e9       	ldi	r25, 0x96	; 150
    5a68:	bb 27       	eor	r27, r27
    5a6a:	93 95       	inc	r25
    5a6c:	f6 95       	lsr	r31
    5a6e:	87 95       	ror	r24
    5a70:	77 95       	ror	r23
    5a72:	67 95       	ror	r22
    5a74:	b7 95       	ror	r27
    5a76:	f1 11       	cpse	r31, r1
    5a78:	f8 cf       	rjmp	.-16     	; 0x5a6a <__floatsisf+0x1c>
    5a7a:	fa f4       	brpl	.+62     	; 0x5aba <__floatsisf+0x6c>
    5a7c:	bb 0f       	add	r27, r27
    5a7e:	11 f4       	brne	.+4      	; 0x5a84 <__floatsisf+0x36>
    5a80:	60 ff       	sbrs	r22, 0
    5a82:	1b c0       	rjmp	.+54     	; 0x5aba <__floatsisf+0x6c>
    5a84:	6f 5f       	subi	r22, 0xFF	; 255
    5a86:	7f 4f       	sbci	r23, 0xFF	; 255
    5a88:	8f 4f       	sbci	r24, 0xFF	; 255
    5a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a8c:	16 c0       	rjmp	.+44     	; 0x5aba <__floatsisf+0x6c>
    5a8e:	88 23       	and	r24, r24
    5a90:	11 f0       	breq	.+4      	; 0x5a96 <__floatsisf+0x48>
    5a92:	96 e9       	ldi	r25, 0x96	; 150
    5a94:	11 c0       	rjmp	.+34     	; 0x5ab8 <__floatsisf+0x6a>
    5a96:	77 23       	and	r23, r23
    5a98:	21 f0       	breq	.+8      	; 0x5aa2 <__floatsisf+0x54>
    5a9a:	9e e8       	ldi	r25, 0x8E	; 142
    5a9c:	87 2f       	mov	r24, r23
    5a9e:	76 2f       	mov	r23, r22
    5aa0:	05 c0       	rjmp	.+10     	; 0x5aac <__floatsisf+0x5e>
    5aa2:	66 23       	and	r22, r22
    5aa4:	71 f0       	breq	.+28     	; 0x5ac2 <__floatsisf+0x74>
    5aa6:	96 e8       	ldi	r25, 0x86	; 134
    5aa8:	86 2f       	mov	r24, r22
    5aaa:	70 e0       	ldi	r23, 0x00	; 0
    5aac:	60 e0       	ldi	r22, 0x00	; 0
    5aae:	2a f0       	brmi	.+10     	; 0x5aba <__floatsisf+0x6c>
    5ab0:	9a 95       	dec	r25
    5ab2:	66 0f       	add	r22, r22
    5ab4:	77 1f       	adc	r23, r23
    5ab6:	88 1f       	adc	r24, r24
    5ab8:	da f7       	brpl	.-10     	; 0x5ab0 <__floatsisf+0x62>
    5aba:	88 0f       	add	r24, r24
    5abc:	96 95       	lsr	r25
    5abe:	87 95       	ror	r24
    5ac0:	97 f9       	bld	r25, 7
    5ac2:	08 95       	ret

00005ac4 <__fp_arccos>:
    5ac4:	df 93       	push	r29
    5ac6:	cf 93       	push	r28
    5ac8:	1f 93       	push	r17
    5aca:	0f 93       	push	r16
    5acc:	8b 01       	movw	r16, r22
    5ace:	ec 01       	movw	r28, r24
    5ad0:	e1 ef       	ldi	r30, 0xF1	; 241
    5ad2:	f0 e0       	ldi	r31, 0x00	; 0
    5ad4:	3f d0       	rcall	.+126    	; 0x5b54 <__fp_powser>
    5ad6:	99 d0       	rcall	.+306    	; 0x5c0a <__fp_round>
    5ad8:	98 01       	movw	r18, r16
    5ada:	ae 01       	movw	r20, r28
    5adc:	8b 01       	movw	r16, r22
    5ade:	ec 01       	movw	r28, r24
    5ae0:	60 e0       	ldi	r22, 0x00	; 0
    5ae2:	70 e0       	ldi	r23, 0x00	; 0
    5ae4:	80 e8       	ldi	r24, 0x80	; 128
    5ae6:	9f e3       	ldi	r25, 0x3F	; 63
    5ae8:	52 de       	rcall	.-860    	; 0x578e <__subsf3>
    5aea:	00 d2       	rcall	.+1024   	; 0x5eec <sqrt>
    5aec:	98 01       	movw	r18, r16
    5aee:	ae 01       	movw	r20, r28
    5af0:	0f 91       	pop	r16
    5af2:	1f 91       	pop	r17
    5af4:	cf 91       	pop	r28
    5af6:	df 91       	pop	r29
    5af8:	98 c1       	rjmp	.+816    	; 0x5e2a <__mulsf3x>

00005afa <__fp_cmp>:
    5afa:	99 0f       	add	r25, r25
    5afc:	00 08       	sbc	r0, r0
    5afe:	55 0f       	add	r21, r21
    5b00:	aa 0b       	sbc	r26, r26
    5b02:	e0 e8       	ldi	r30, 0x80	; 128
    5b04:	fe ef       	ldi	r31, 0xFE	; 254
    5b06:	16 16       	cp	r1, r22
    5b08:	17 06       	cpc	r1, r23
    5b0a:	e8 07       	cpc	r30, r24
    5b0c:	f9 07       	cpc	r31, r25
    5b0e:	c0 f0       	brcs	.+48     	; 0x5b40 <__fp_cmp+0x46>
    5b10:	12 16       	cp	r1, r18
    5b12:	13 06       	cpc	r1, r19
    5b14:	e4 07       	cpc	r30, r20
    5b16:	f5 07       	cpc	r31, r21
    5b18:	98 f0       	brcs	.+38     	; 0x5b40 <__fp_cmp+0x46>
    5b1a:	62 1b       	sub	r22, r18
    5b1c:	73 0b       	sbc	r23, r19
    5b1e:	84 0b       	sbc	r24, r20
    5b20:	95 0b       	sbc	r25, r21
    5b22:	39 f4       	brne	.+14     	; 0x5b32 <__fp_cmp+0x38>
    5b24:	0a 26       	eor	r0, r26
    5b26:	61 f0       	breq	.+24     	; 0x5b40 <__fp_cmp+0x46>
    5b28:	23 2b       	or	r18, r19
    5b2a:	24 2b       	or	r18, r20
    5b2c:	25 2b       	or	r18, r21
    5b2e:	21 f4       	brne	.+8      	; 0x5b38 <__fp_cmp+0x3e>
    5b30:	08 95       	ret
    5b32:	0a 26       	eor	r0, r26
    5b34:	09 f4       	brne	.+2      	; 0x5b38 <__fp_cmp+0x3e>
    5b36:	a1 40       	sbci	r26, 0x01	; 1
    5b38:	a6 95       	lsr	r26
    5b3a:	8f ef       	ldi	r24, 0xFF	; 255
    5b3c:	81 1d       	adc	r24, r1
    5b3e:	81 1d       	adc	r24, r1
    5b40:	08 95       	ret

00005b42 <__fp_inf>:
    5b42:	97 f9       	bld	r25, 7
    5b44:	9f 67       	ori	r25, 0x7F	; 127
    5b46:	80 e8       	ldi	r24, 0x80	; 128
    5b48:	70 e0       	ldi	r23, 0x00	; 0
    5b4a:	60 e0       	ldi	r22, 0x00	; 0
    5b4c:	08 95       	ret

00005b4e <__fp_nan>:
    5b4e:	9f ef       	ldi	r25, 0xFF	; 255
    5b50:	80 ec       	ldi	r24, 0xC0	; 192
    5b52:	08 95       	ret

00005b54 <__fp_powser>:
    5b54:	df 93       	push	r29
    5b56:	cf 93       	push	r28
    5b58:	1f 93       	push	r17
    5b5a:	0f 93       	push	r16
    5b5c:	ff 92       	push	r15
    5b5e:	ef 92       	push	r14
    5b60:	df 92       	push	r13
    5b62:	7b 01       	movw	r14, r22
    5b64:	8c 01       	movw	r16, r24
    5b66:	68 94       	set
    5b68:	05 c0       	rjmp	.+10     	; 0x5b74 <__fp_powser+0x20>
    5b6a:	da 2e       	mov	r13, r26
    5b6c:	ef 01       	movw	r28, r30
    5b6e:	5d d1       	rcall	.+698    	; 0x5e2a <__mulsf3x>
    5b70:	fe 01       	movw	r30, r28
    5b72:	e8 94       	clt
    5b74:	a5 91       	lpm	r26, Z+
    5b76:	25 91       	lpm	r18, Z+
    5b78:	35 91       	lpm	r19, Z+
    5b7a:	45 91       	lpm	r20, Z+
    5b7c:	55 91       	lpm	r21, Z+
    5b7e:	ae f3       	brts	.-22     	; 0x5b6a <__fp_powser+0x16>
    5b80:	ef 01       	movw	r28, r30
    5b82:	17 de       	rcall	.-978    	; 0x57b2 <__addsf3x>
    5b84:	fe 01       	movw	r30, r28
    5b86:	97 01       	movw	r18, r14
    5b88:	a8 01       	movw	r20, r16
    5b8a:	da 94       	dec	r13
    5b8c:	79 f7       	brne	.-34     	; 0x5b6c <__fp_powser+0x18>
    5b8e:	df 90       	pop	r13
    5b90:	ef 90       	pop	r14
    5b92:	ff 90       	pop	r15
    5b94:	0f 91       	pop	r16
    5b96:	1f 91       	pop	r17
    5b98:	cf 91       	pop	r28
    5b9a:	df 91       	pop	r29
    5b9c:	08 95       	ret

00005b9e <__fp_pscA>:
    5b9e:	00 24       	eor	r0, r0
    5ba0:	0a 94       	dec	r0
    5ba2:	16 16       	cp	r1, r22
    5ba4:	17 06       	cpc	r1, r23
    5ba6:	18 06       	cpc	r1, r24
    5ba8:	09 06       	cpc	r0, r25
    5baa:	08 95       	ret

00005bac <__fp_pscB>:
    5bac:	00 24       	eor	r0, r0
    5bae:	0a 94       	dec	r0
    5bb0:	12 16       	cp	r1, r18
    5bb2:	13 06       	cpc	r1, r19
    5bb4:	14 06       	cpc	r1, r20
    5bb6:	05 06       	cpc	r0, r21
    5bb8:	08 95       	ret
    5bba:	c9 cf       	rjmp	.-110    	; 0x5b4e <__fp_nan>

00005bbc <__fp_rempio2>:
    5bbc:	50 d0       	rcall	.+160    	; 0x5c5e <__fp_splitA>
    5bbe:	e8 f3       	brcs	.-6      	; 0x5bba <__fp_pscB+0xe>
    5bc0:	e8 94       	clt
    5bc2:	e0 e0       	ldi	r30, 0x00	; 0
    5bc4:	bb 27       	eor	r27, r27
    5bc6:	9f 57       	subi	r25, 0x7F	; 127
    5bc8:	f0 f0       	brcs	.+60     	; 0x5c06 <__fp_rempio2+0x4a>
    5bca:	2a ed       	ldi	r18, 0xDA	; 218
    5bcc:	3f e0       	ldi	r19, 0x0F	; 15
    5bce:	49 ec       	ldi	r20, 0xC9	; 201
    5bd0:	06 c0       	rjmp	.+12     	; 0x5bde <__fp_rempio2+0x22>
    5bd2:	ee 0f       	add	r30, r30
    5bd4:	bb 0f       	add	r27, r27
    5bd6:	66 1f       	adc	r22, r22
    5bd8:	77 1f       	adc	r23, r23
    5bda:	88 1f       	adc	r24, r24
    5bdc:	28 f0       	brcs	.+10     	; 0x5be8 <__fp_rempio2+0x2c>
    5bde:	b2 3a       	cpi	r27, 0xA2	; 162
    5be0:	62 07       	cpc	r22, r18
    5be2:	73 07       	cpc	r23, r19
    5be4:	84 07       	cpc	r24, r20
    5be6:	28 f0       	brcs	.+10     	; 0x5bf2 <__fp_rempio2+0x36>
    5be8:	b2 5a       	subi	r27, 0xA2	; 162
    5bea:	62 0b       	sbc	r22, r18
    5bec:	73 0b       	sbc	r23, r19
    5bee:	84 0b       	sbc	r24, r20
    5bf0:	e3 95       	inc	r30
    5bf2:	9a 95       	dec	r25
    5bf4:	72 f7       	brpl	.-36     	; 0x5bd2 <__fp_rempio2+0x16>
    5bf6:	80 38       	cpi	r24, 0x80	; 128
    5bf8:	30 f4       	brcc	.+12     	; 0x5c06 <__fp_rempio2+0x4a>
    5bfa:	9a 95       	dec	r25
    5bfc:	bb 0f       	add	r27, r27
    5bfe:	66 1f       	adc	r22, r22
    5c00:	77 1f       	adc	r23, r23
    5c02:	88 1f       	adc	r24, r24
    5c04:	d2 f7       	brpl	.-12     	; 0x5bfa <__fp_rempio2+0x3e>
    5c06:	90 48       	sbci	r25, 0x80	; 128
    5c08:	b4 c1       	rjmp	.+872    	; 0x5f72 <__fp_mpack_finite>

00005c0a <__fp_round>:
    5c0a:	09 2e       	mov	r0, r25
    5c0c:	03 94       	inc	r0
    5c0e:	00 0c       	add	r0, r0
    5c10:	11 f4       	brne	.+4      	; 0x5c16 <__fp_round+0xc>
    5c12:	88 23       	and	r24, r24
    5c14:	52 f0       	brmi	.+20     	; 0x5c2a <__fp_round+0x20>
    5c16:	bb 0f       	add	r27, r27
    5c18:	40 f4       	brcc	.+16     	; 0x5c2a <__fp_round+0x20>
    5c1a:	bf 2b       	or	r27, r31
    5c1c:	11 f4       	brne	.+4      	; 0x5c22 <__fp_round+0x18>
    5c1e:	60 ff       	sbrs	r22, 0
    5c20:	04 c0       	rjmp	.+8      	; 0x5c2a <__fp_round+0x20>
    5c22:	6f 5f       	subi	r22, 0xFF	; 255
    5c24:	7f 4f       	sbci	r23, 0xFF	; 255
    5c26:	8f 4f       	sbci	r24, 0xFF	; 255
    5c28:	9f 4f       	sbci	r25, 0xFF	; 255
    5c2a:	08 95       	ret

00005c2c <__fp_sinus>:
    5c2c:	ef 93       	push	r30
    5c2e:	e0 ff       	sbrs	r30, 0
    5c30:	06 c0       	rjmp	.+12     	; 0x5c3e <__fp_sinus+0x12>
    5c32:	a2 ea       	ldi	r26, 0xA2	; 162
    5c34:	2a ed       	ldi	r18, 0xDA	; 218
    5c36:	3f e0       	ldi	r19, 0x0F	; 15
    5c38:	49 ec       	ldi	r20, 0xC9	; 201
    5c3a:	5f eb       	ldi	r21, 0xBF	; 191
    5c3c:	ba dd       	rcall	.-1164   	; 0x57b2 <__addsf3x>
    5c3e:	e5 df       	rcall	.-54     	; 0x5c0a <__fp_round>
    5c40:	0f 90       	pop	r0
    5c42:	03 94       	inc	r0
    5c44:	01 fc       	sbrc	r0, 1
    5c46:	90 58       	subi	r25, 0x80	; 128
    5c48:	e9 e1       	ldi	r30, 0x19	; 25
    5c4a:	f1 e0       	ldi	r31, 0x01	; 1
    5c4c:	a5 c1       	rjmp	.+842    	; 0x5f98 <__fp_powsodd>

00005c4e <__fp_split3>:
    5c4e:	57 fd       	sbrc	r21, 7
    5c50:	90 58       	subi	r25, 0x80	; 128
    5c52:	44 0f       	add	r20, r20
    5c54:	55 1f       	adc	r21, r21
    5c56:	59 f0       	breq	.+22     	; 0x5c6e <__fp_splitA+0x10>
    5c58:	5f 3f       	cpi	r21, 0xFF	; 255
    5c5a:	71 f0       	breq	.+28     	; 0x5c78 <__fp_splitA+0x1a>
    5c5c:	47 95       	ror	r20

00005c5e <__fp_splitA>:
    5c5e:	88 0f       	add	r24, r24
    5c60:	97 fb       	bst	r25, 7
    5c62:	99 1f       	adc	r25, r25
    5c64:	61 f0       	breq	.+24     	; 0x5c7e <__fp_splitA+0x20>
    5c66:	9f 3f       	cpi	r25, 0xFF	; 255
    5c68:	79 f0       	breq	.+30     	; 0x5c88 <__fp_splitA+0x2a>
    5c6a:	87 95       	ror	r24
    5c6c:	08 95       	ret
    5c6e:	12 16       	cp	r1, r18
    5c70:	13 06       	cpc	r1, r19
    5c72:	14 06       	cpc	r1, r20
    5c74:	55 1f       	adc	r21, r21
    5c76:	f2 cf       	rjmp	.-28     	; 0x5c5c <__fp_split3+0xe>
    5c78:	46 95       	lsr	r20
    5c7a:	f1 df       	rcall	.-30     	; 0x5c5e <__fp_splitA>
    5c7c:	08 c0       	rjmp	.+16     	; 0x5c8e <__fp_splitA+0x30>
    5c7e:	16 16       	cp	r1, r22
    5c80:	17 06       	cpc	r1, r23
    5c82:	18 06       	cpc	r1, r24
    5c84:	99 1f       	adc	r25, r25
    5c86:	f1 cf       	rjmp	.-30     	; 0x5c6a <__fp_splitA+0xc>
    5c88:	86 95       	lsr	r24
    5c8a:	71 05       	cpc	r23, r1
    5c8c:	61 05       	cpc	r22, r1
    5c8e:	08 94       	sec
    5c90:	08 95       	ret

00005c92 <__fp_zero>:
    5c92:	e8 94       	clt

00005c94 <__fp_szero>:
    5c94:	bb 27       	eor	r27, r27
    5c96:	66 27       	eor	r22, r22
    5c98:	77 27       	eor	r23, r23
    5c9a:	cb 01       	movw	r24, r22
    5c9c:	97 f9       	bld	r25, 7
    5c9e:	08 95       	ret

00005ca0 <__gesf2>:
    5ca0:	2c df       	rcall	.-424    	; 0x5afa <__fp_cmp>
    5ca2:	08 f4       	brcc	.+2      	; 0x5ca6 <__gesf2+0x6>
    5ca4:	8f ef       	ldi	r24, 0xFF	; 255
    5ca6:	08 95       	ret

00005ca8 <inverse>:
    5ca8:	9b 01       	movw	r18, r22
    5caa:	ac 01       	movw	r20, r24
    5cac:	60 e0       	ldi	r22, 0x00	; 0
    5cae:	70 e0       	ldi	r23, 0x00	; 0
    5cb0:	80 e8       	ldi	r24, 0x80	; 128
    5cb2:	9f e3       	ldi	r25, 0x3F	; 63
    5cb4:	00 ce       	rjmp	.-1024   	; 0x58b6 <__divsf3>
    5cb6:	45 cf       	rjmp	.-374    	; 0x5b42 <__fp_inf>
    5cb8:	5a c1       	rjmp	.+692    	; 0x5f6e <__fp_mpack>

00005cba <ldexp>:
    5cba:	d1 df       	rcall	.-94     	; 0x5c5e <__fp_splitA>
    5cbc:	e8 f3       	brcs	.-6      	; 0x5cb8 <inverse+0x10>
    5cbe:	99 23       	and	r25, r25
    5cc0:	d9 f3       	breq	.-10     	; 0x5cb8 <inverse+0x10>
    5cc2:	94 0f       	add	r25, r20
    5cc4:	51 1d       	adc	r21, r1
    5cc6:	bb f3       	brvs	.-18     	; 0x5cb6 <inverse+0xe>
    5cc8:	91 50       	subi	r25, 0x01	; 1
    5cca:	50 40       	sbci	r21, 0x00	; 0
    5ccc:	94 f0       	brlt	.+36     	; 0x5cf2 <ldexp+0x38>
    5cce:	59 f0       	breq	.+22     	; 0x5ce6 <ldexp+0x2c>
    5cd0:	88 23       	and	r24, r24
    5cd2:	32 f0       	brmi	.+12     	; 0x5ce0 <ldexp+0x26>
    5cd4:	66 0f       	add	r22, r22
    5cd6:	77 1f       	adc	r23, r23
    5cd8:	88 1f       	adc	r24, r24
    5cda:	91 50       	subi	r25, 0x01	; 1
    5cdc:	50 40       	sbci	r21, 0x00	; 0
    5cde:	c1 f7       	brne	.-16     	; 0x5cd0 <ldexp+0x16>
    5ce0:	9e 3f       	cpi	r25, 0xFE	; 254
    5ce2:	51 05       	cpc	r21, r1
    5ce4:	44 f7       	brge	.-48     	; 0x5cb6 <inverse+0xe>
    5ce6:	88 0f       	add	r24, r24
    5ce8:	91 1d       	adc	r25, r1
    5cea:	96 95       	lsr	r25
    5cec:	87 95       	ror	r24
    5cee:	97 f9       	bld	r25, 7
    5cf0:	08 95       	ret
    5cf2:	5f 3f       	cpi	r21, 0xFF	; 255
    5cf4:	ac f0       	brlt	.+42     	; 0x5d20 <ldexp+0x66>
    5cf6:	98 3e       	cpi	r25, 0xE8	; 232
    5cf8:	9c f0       	brlt	.+38     	; 0x5d20 <ldexp+0x66>
    5cfa:	bb 27       	eor	r27, r27
    5cfc:	86 95       	lsr	r24
    5cfe:	77 95       	ror	r23
    5d00:	67 95       	ror	r22
    5d02:	b7 95       	ror	r27
    5d04:	08 f4       	brcc	.+2      	; 0x5d08 <ldexp+0x4e>
    5d06:	b1 60       	ori	r27, 0x01	; 1
    5d08:	93 95       	inc	r25
    5d0a:	c1 f7       	brne	.-16     	; 0x5cfc <ldexp+0x42>
    5d0c:	bb 0f       	add	r27, r27
    5d0e:	58 f7       	brcc	.-42     	; 0x5ce6 <ldexp+0x2c>
    5d10:	11 f4       	brne	.+4      	; 0x5d16 <ldexp+0x5c>
    5d12:	60 ff       	sbrs	r22, 0
    5d14:	e8 cf       	rjmp	.-48     	; 0x5ce6 <ldexp+0x2c>
    5d16:	6f 5f       	subi	r22, 0xFF	; 255
    5d18:	7f 4f       	sbci	r23, 0xFF	; 255
    5d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1e:	e3 cf       	rjmp	.-58     	; 0x5ce6 <ldexp+0x2c>
    5d20:	b9 cf       	rjmp	.-142    	; 0x5c94 <__fp_szero>
    5d22:	0e f0       	brts	.+2      	; 0x5d26 <ldexp+0x6c>
    5d24:	24 c1       	rjmp	.+584    	; 0x5f6e <__fp_mpack>
    5d26:	13 cf       	rjmp	.-474    	; 0x5b4e <__fp_nan>
    5d28:	68 94       	set
    5d2a:	0b cf       	rjmp	.-490    	; 0x5b42 <__fp_inf>

00005d2c <log>:
    5d2c:	98 df       	rcall	.-208    	; 0x5c5e <__fp_splitA>
    5d2e:	c8 f3       	brcs	.-14     	; 0x5d22 <ldexp+0x68>
    5d30:	99 23       	and	r25, r25
    5d32:	d1 f3       	breq	.-12     	; 0x5d28 <ldexp+0x6e>
    5d34:	c6 f3       	brts	.-16     	; 0x5d26 <ldexp+0x6c>
    5d36:	df 93       	push	r29
    5d38:	cf 93       	push	r28
    5d3a:	1f 93       	push	r17
    5d3c:	0f 93       	push	r16
    5d3e:	ff 92       	push	r15
    5d40:	c9 2f       	mov	r28, r25
    5d42:	dd 27       	eor	r29, r29
    5d44:	88 23       	and	r24, r24
    5d46:	2a f0       	brmi	.+10     	; 0x5d52 <log+0x26>
    5d48:	21 97       	sbiw	r28, 0x01	; 1
    5d4a:	66 0f       	add	r22, r22
    5d4c:	77 1f       	adc	r23, r23
    5d4e:	88 1f       	adc	r24, r24
    5d50:	da f7       	brpl	.-10     	; 0x5d48 <log+0x1c>
    5d52:	20 e0       	ldi	r18, 0x00	; 0
    5d54:	30 e0       	ldi	r19, 0x00	; 0
    5d56:	40 e8       	ldi	r20, 0x80	; 128
    5d58:	5f eb       	ldi	r21, 0xBF	; 191
    5d5a:	9f e3       	ldi	r25, 0x3F	; 63
    5d5c:	88 39       	cpi	r24, 0x98	; 152
    5d5e:	20 f0       	brcs	.+8      	; 0x5d68 <log+0x3c>
    5d60:	80 3e       	cpi	r24, 0xE0	; 224
    5d62:	30 f0       	brcs	.+12     	; 0x5d70 <log+0x44>
    5d64:	21 96       	adiw	r28, 0x01	; 1
    5d66:	8f 77       	andi	r24, 0x7F	; 127
    5d68:	13 dd       	rcall	.-1498   	; 0x5790 <__addsf3>
    5d6a:	e7 e3       	ldi	r30, 0x37	; 55
    5d6c:	f1 e0       	ldi	r31, 0x01	; 1
    5d6e:	03 c0       	rjmp	.+6      	; 0x5d76 <log+0x4a>
    5d70:	0f dd       	rcall	.-1506   	; 0x5790 <__addsf3>
    5d72:	e4 e6       	ldi	r30, 0x64	; 100
    5d74:	f1 e0       	ldi	r31, 0x01	; 1
    5d76:	ee de       	rcall	.-548    	; 0x5b54 <__fp_powser>
    5d78:	8b 01       	movw	r16, r22
    5d7a:	be 01       	movw	r22, r28
    5d7c:	ec 01       	movw	r28, r24
    5d7e:	fb 2e       	mov	r15, r27
    5d80:	6f 57       	subi	r22, 0x7F	; 127
    5d82:	71 09       	sbc	r23, r1
    5d84:	75 95       	asr	r23
    5d86:	77 1f       	adc	r23, r23
    5d88:	88 0b       	sbc	r24, r24
    5d8a:	99 0b       	sbc	r25, r25
    5d8c:	60 de       	rcall	.-832    	; 0x5a4e <__floatsisf>
    5d8e:	28 e1       	ldi	r18, 0x18	; 24
    5d90:	32 e7       	ldi	r19, 0x72	; 114
    5d92:	41 e3       	ldi	r20, 0x31	; 49
    5d94:	5f e3       	ldi	r21, 0x3F	; 63
    5d96:	49 d0       	rcall	.+146    	; 0x5e2a <__mulsf3x>
    5d98:	af 2d       	mov	r26, r15
    5d9a:	98 01       	movw	r18, r16
    5d9c:	ae 01       	movw	r20, r28
    5d9e:	ff 90       	pop	r15
    5da0:	0f 91       	pop	r16
    5da2:	1f 91       	pop	r17
    5da4:	cf 91       	pop	r28
    5da6:	df 91       	pop	r29
    5da8:	04 dd       	rcall	.-1528   	; 0x57b2 <__addsf3x>
    5daa:	2f cf       	rjmp	.-418    	; 0x5c0a <__fp_round>

00005dac <modf>:
    5dac:	fa 01       	movw	r30, r20
    5dae:	dc 01       	movw	r26, r24
    5db0:	aa 0f       	add	r26, r26
    5db2:	bb 1f       	adc	r27, r27
    5db4:	9b 01       	movw	r18, r22
    5db6:	ac 01       	movw	r20, r24
    5db8:	bf 57       	subi	r27, 0x7F	; 127
    5dba:	28 f4       	brcc	.+10     	; 0x5dc6 <modf+0x1a>
    5dbc:	22 27       	eor	r18, r18
    5dbe:	33 27       	eor	r19, r19
    5dc0:	44 27       	eor	r20, r20
    5dc2:	50 78       	andi	r21, 0x80	; 128
    5dc4:	1f c0       	rjmp	.+62     	; 0x5e04 <modf+0x58>
    5dc6:	b7 51       	subi	r27, 0x17	; 23
    5dc8:	88 f4       	brcc	.+34     	; 0x5dec <modf+0x40>
    5dca:	ab 2f       	mov	r26, r27
    5dcc:	00 24       	eor	r0, r0
    5dce:	46 95       	lsr	r20
    5dd0:	37 95       	ror	r19
    5dd2:	27 95       	ror	r18
    5dd4:	01 1c       	adc	r0, r1
    5dd6:	a3 95       	inc	r26
    5dd8:	d2 f3       	brmi	.-12     	; 0x5dce <modf+0x22>
    5dda:	00 20       	and	r0, r0
    5ddc:	69 f0       	breq	.+26     	; 0x5df8 <modf+0x4c>
    5dde:	22 0f       	add	r18, r18
    5de0:	33 1f       	adc	r19, r19
    5de2:	44 1f       	adc	r20, r20
    5de4:	b3 95       	inc	r27
    5de6:	da f3       	brmi	.-10     	; 0x5dde <modf+0x32>
    5de8:	0d d0       	rcall	.+26     	; 0x5e04 <modf+0x58>
    5dea:	d1 cc       	rjmp	.-1630   	; 0x578e <__subsf3>
    5dec:	61 30       	cpi	r22, 0x01	; 1
    5dee:	71 05       	cpc	r23, r1
    5df0:	a0 e8       	ldi	r26, 0x80	; 128
    5df2:	8a 07       	cpc	r24, r26
    5df4:	b9 46       	sbci	r27, 0x69	; 105
    5df6:	30 f4       	brcc	.+12     	; 0x5e04 <modf+0x58>
    5df8:	9b 01       	movw	r18, r22
    5dfa:	ac 01       	movw	r20, r24
    5dfc:	66 27       	eor	r22, r22
    5dfe:	77 27       	eor	r23, r23
    5e00:	88 27       	eor	r24, r24
    5e02:	90 78       	andi	r25, 0x80	; 128
    5e04:	30 96       	adiw	r30, 0x00	; 0
    5e06:	21 f0       	breq	.+8      	; 0x5e10 <modf+0x64>
    5e08:	20 83       	st	Z, r18
    5e0a:	31 83       	std	Z+1, r19	; 0x01
    5e0c:	42 83       	std	Z+2, r20	; 0x02
    5e0e:	53 83       	std	Z+3, r21	; 0x03
    5e10:	08 95       	ret

00005e12 <__mulsf3>:
    5e12:	0b d0       	rcall	.+22     	; 0x5e2a <__mulsf3x>
    5e14:	fa ce       	rjmp	.-524    	; 0x5c0a <__fp_round>
    5e16:	c3 de       	rcall	.-634    	; 0x5b9e <__fp_pscA>
    5e18:	28 f0       	brcs	.+10     	; 0x5e24 <__mulsf3+0x12>
    5e1a:	c8 de       	rcall	.-624    	; 0x5bac <__fp_pscB>
    5e1c:	18 f0       	brcs	.+6      	; 0x5e24 <__mulsf3+0x12>
    5e1e:	95 23       	and	r25, r21
    5e20:	09 f0       	breq	.+2      	; 0x5e24 <__mulsf3+0x12>
    5e22:	8f ce       	rjmp	.-738    	; 0x5b42 <__fp_inf>
    5e24:	94 ce       	rjmp	.-728    	; 0x5b4e <__fp_nan>
    5e26:	11 24       	eor	r1, r1
    5e28:	35 cf       	rjmp	.-406    	; 0x5c94 <__fp_szero>

00005e2a <__mulsf3x>:
    5e2a:	11 df       	rcall	.-478    	; 0x5c4e <__fp_split3>
    5e2c:	a0 f3       	brcs	.-24     	; 0x5e16 <__mulsf3+0x4>

00005e2e <__mulsf3_pse>:
    5e2e:	95 9f       	mul	r25, r21
    5e30:	d1 f3       	breq	.-12     	; 0x5e26 <__mulsf3+0x14>
    5e32:	95 0f       	add	r25, r21
    5e34:	50 e0       	ldi	r21, 0x00	; 0
    5e36:	55 1f       	adc	r21, r21
    5e38:	62 9f       	mul	r22, r18
    5e3a:	f0 01       	movw	r30, r0
    5e3c:	72 9f       	mul	r23, r18
    5e3e:	bb 27       	eor	r27, r27
    5e40:	f0 0d       	add	r31, r0
    5e42:	b1 1d       	adc	r27, r1
    5e44:	63 9f       	mul	r22, r19
    5e46:	aa 27       	eor	r26, r26
    5e48:	f0 0d       	add	r31, r0
    5e4a:	b1 1d       	adc	r27, r1
    5e4c:	aa 1f       	adc	r26, r26
    5e4e:	64 9f       	mul	r22, r20
    5e50:	66 27       	eor	r22, r22
    5e52:	b0 0d       	add	r27, r0
    5e54:	a1 1d       	adc	r26, r1
    5e56:	66 1f       	adc	r22, r22
    5e58:	82 9f       	mul	r24, r18
    5e5a:	22 27       	eor	r18, r18
    5e5c:	b0 0d       	add	r27, r0
    5e5e:	a1 1d       	adc	r26, r1
    5e60:	62 1f       	adc	r22, r18
    5e62:	73 9f       	mul	r23, r19
    5e64:	b0 0d       	add	r27, r0
    5e66:	a1 1d       	adc	r26, r1
    5e68:	62 1f       	adc	r22, r18
    5e6a:	83 9f       	mul	r24, r19
    5e6c:	a0 0d       	add	r26, r0
    5e6e:	61 1d       	adc	r22, r1
    5e70:	22 1f       	adc	r18, r18
    5e72:	74 9f       	mul	r23, r20
    5e74:	33 27       	eor	r19, r19
    5e76:	a0 0d       	add	r26, r0
    5e78:	61 1d       	adc	r22, r1
    5e7a:	23 1f       	adc	r18, r19
    5e7c:	84 9f       	mul	r24, r20
    5e7e:	60 0d       	add	r22, r0
    5e80:	21 1d       	adc	r18, r1
    5e82:	82 2f       	mov	r24, r18
    5e84:	76 2f       	mov	r23, r22
    5e86:	6a 2f       	mov	r22, r26
    5e88:	11 24       	eor	r1, r1
    5e8a:	9f 57       	subi	r25, 0x7F	; 127
    5e8c:	50 40       	sbci	r21, 0x00	; 0
    5e8e:	8a f0       	brmi	.+34     	; 0x5eb2 <__mulsf3_pse+0x84>
    5e90:	e1 f0       	breq	.+56     	; 0x5eca <__mulsf3_pse+0x9c>
    5e92:	88 23       	and	r24, r24
    5e94:	4a f0       	brmi	.+18     	; 0x5ea8 <__mulsf3_pse+0x7a>
    5e96:	ee 0f       	add	r30, r30
    5e98:	ff 1f       	adc	r31, r31
    5e9a:	bb 1f       	adc	r27, r27
    5e9c:	66 1f       	adc	r22, r22
    5e9e:	77 1f       	adc	r23, r23
    5ea0:	88 1f       	adc	r24, r24
    5ea2:	91 50       	subi	r25, 0x01	; 1
    5ea4:	50 40       	sbci	r21, 0x00	; 0
    5ea6:	a9 f7       	brne	.-22     	; 0x5e92 <__mulsf3_pse+0x64>
    5ea8:	9e 3f       	cpi	r25, 0xFE	; 254
    5eaa:	51 05       	cpc	r21, r1
    5eac:	70 f0       	brcs	.+28     	; 0x5eca <__mulsf3_pse+0x9c>
    5eae:	49 ce       	rjmp	.-878    	; 0x5b42 <__fp_inf>
    5eb0:	f1 ce       	rjmp	.-542    	; 0x5c94 <__fp_szero>
    5eb2:	5f 3f       	cpi	r21, 0xFF	; 255
    5eb4:	ec f3       	brlt	.-6      	; 0x5eb0 <__mulsf3_pse+0x82>
    5eb6:	98 3e       	cpi	r25, 0xE8	; 232
    5eb8:	dc f3       	brlt	.-10     	; 0x5eb0 <__mulsf3_pse+0x82>
    5eba:	86 95       	lsr	r24
    5ebc:	77 95       	ror	r23
    5ebe:	67 95       	ror	r22
    5ec0:	b7 95       	ror	r27
    5ec2:	f7 95       	ror	r31
    5ec4:	e7 95       	ror	r30
    5ec6:	9f 5f       	subi	r25, 0xFF	; 255
    5ec8:	c1 f7       	brne	.-16     	; 0x5eba <__mulsf3_pse+0x8c>
    5eca:	fe 2b       	or	r31, r30
    5ecc:	88 0f       	add	r24, r24
    5ece:	91 1d       	adc	r25, r1
    5ed0:	96 95       	lsr	r25
    5ed2:	87 95       	ror	r24
    5ed4:	97 f9       	bld	r25, 7
    5ed6:	08 95       	ret

00005ed8 <sin>:
    5ed8:	9f 93       	push	r25
    5eda:	70 de       	rcall	.-800    	; 0x5bbc <__fp_rempio2>
    5edc:	0f 90       	pop	r0
    5ede:	07 fc       	sbrc	r0, 7
    5ee0:	ee 5f       	subi	r30, 0xFE	; 254
    5ee2:	a4 ce       	rjmp	.-696    	; 0x5c2c <__fp_sinus>
    5ee4:	11 f4       	brne	.+4      	; 0x5eea <sin+0x12>
    5ee6:	0e f4       	brtc	.+2      	; 0x5eea <sin+0x12>
    5ee8:	32 ce       	rjmp	.-924    	; 0x5b4e <__fp_nan>
    5eea:	41 c0       	rjmp	.+130    	; 0x5f6e <__fp_mpack>

00005eec <sqrt>:
    5eec:	b8 de       	rcall	.-656    	; 0x5c5e <__fp_splitA>
    5eee:	d0 f3       	brcs	.-12     	; 0x5ee4 <sin+0xc>
    5ef0:	99 23       	and	r25, r25
    5ef2:	d9 f3       	breq	.-10     	; 0x5eea <sin+0x12>
    5ef4:	ce f3       	brts	.-14     	; 0x5ee8 <sin+0x10>
    5ef6:	9f 57       	subi	r25, 0x7F	; 127
    5ef8:	55 0b       	sbc	r21, r21
    5efa:	87 ff       	sbrs	r24, 7
    5efc:	46 d0       	rcall	.+140    	; 0x5f8a <__fp_norm2>
    5efe:	00 24       	eor	r0, r0
    5f00:	a0 e6       	ldi	r26, 0x60	; 96
    5f02:	40 ea       	ldi	r20, 0xA0	; 160
    5f04:	90 01       	movw	r18, r0
    5f06:	80 58       	subi	r24, 0x80	; 128
    5f08:	56 95       	lsr	r21
    5f0a:	97 95       	ror	r25
    5f0c:	28 f4       	brcc	.+10     	; 0x5f18 <sqrt+0x2c>
    5f0e:	80 5c       	subi	r24, 0xC0	; 192
    5f10:	66 0f       	add	r22, r22
    5f12:	77 1f       	adc	r23, r23
    5f14:	88 1f       	adc	r24, r24
    5f16:	20 f0       	brcs	.+8      	; 0x5f20 <sqrt+0x34>
    5f18:	26 17       	cp	r18, r22
    5f1a:	37 07       	cpc	r19, r23
    5f1c:	48 07       	cpc	r20, r24
    5f1e:	30 f4       	brcc	.+12     	; 0x5f2c <sqrt+0x40>
    5f20:	62 1b       	sub	r22, r18
    5f22:	73 0b       	sbc	r23, r19
    5f24:	84 0b       	sbc	r24, r20
    5f26:	20 29       	or	r18, r0
    5f28:	31 29       	or	r19, r1
    5f2a:	4a 2b       	or	r20, r26
    5f2c:	a6 95       	lsr	r26
    5f2e:	17 94       	ror	r1
    5f30:	07 94       	ror	r0
    5f32:	20 25       	eor	r18, r0
    5f34:	31 25       	eor	r19, r1
    5f36:	4a 27       	eor	r20, r26
    5f38:	58 f7       	brcc	.-42     	; 0x5f10 <sqrt+0x24>
    5f3a:	66 0f       	add	r22, r22
    5f3c:	77 1f       	adc	r23, r23
    5f3e:	88 1f       	adc	r24, r24
    5f40:	20 f0       	brcs	.+8      	; 0x5f4a <sqrt+0x5e>
    5f42:	26 17       	cp	r18, r22
    5f44:	37 07       	cpc	r19, r23
    5f46:	48 07       	cpc	r20, r24
    5f48:	30 f4       	brcc	.+12     	; 0x5f56 <sqrt+0x6a>
    5f4a:	62 0b       	sbc	r22, r18
    5f4c:	73 0b       	sbc	r23, r19
    5f4e:	84 0b       	sbc	r24, r20
    5f50:	20 0d       	add	r18, r0
    5f52:	31 1d       	adc	r19, r1
    5f54:	41 1d       	adc	r20, r1
    5f56:	a0 95       	com	r26
    5f58:	81 f7       	brne	.-32     	; 0x5f3a <sqrt+0x4e>
    5f5a:	b9 01       	movw	r22, r18
    5f5c:	84 2f       	mov	r24, r20
    5f5e:	91 58       	subi	r25, 0x81	; 129
    5f60:	88 0f       	add	r24, r24
    5f62:	96 95       	lsr	r25
    5f64:	87 95       	ror	r24
    5f66:	08 95       	ret

00005f68 <square>:
    5f68:	9b 01       	movw	r18, r22
    5f6a:	ac 01       	movw	r20, r24
    5f6c:	52 cf       	rjmp	.-348    	; 0x5e12 <__mulsf3>

00005f6e <__fp_mpack>:
    5f6e:	9f 3f       	cpi	r25, 0xFF	; 255
    5f70:	31 f0       	breq	.+12     	; 0x5f7e <__fp_mpack_finite+0xc>

00005f72 <__fp_mpack_finite>:
    5f72:	91 50       	subi	r25, 0x01	; 1
    5f74:	20 f4       	brcc	.+8      	; 0x5f7e <__fp_mpack_finite+0xc>
    5f76:	87 95       	ror	r24
    5f78:	77 95       	ror	r23
    5f7a:	67 95       	ror	r22
    5f7c:	b7 95       	ror	r27
    5f7e:	88 0f       	add	r24, r24
    5f80:	91 1d       	adc	r25, r1
    5f82:	96 95       	lsr	r25
    5f84:	87 95       	ror	r24
    5f86:	97 f9       	bld	r25, 7
    5f88:	08 95       	ret

00005f8a <__fp_norm2>:
    5f8a:	91 50       	subi	r25, 0x01	; 1
    5f8c:	50 40       	sbci	r21, 0x00	; 0
    5f8e:	66 0f       	add	r22, r22
    5f90:	77 1f       	adc	r23, r23
    5f92:	88 1f       	adc	r24, r24
    5f94:	d2 f7       	brpl	.-12     	; 0x5f8a <__fp_norm2>
    5f96:	08 95       	ret

00005f98 <__fp_powsodd>:
    5f98:	9f 93       	push	r25
    5f9a:	8f 93       	push	r24
    5f9c:	7f 93       	push	r23
    5f9e:	6f 93       	push	r22
    5fa0:	ff 93       	push	r31
    5fa2:	ef 93       	push	r30
    5fa4:	9b 01       	movw	r18, r22
    5fa6:	ac 01       	movw	r20, r24
    5fa8:	34 df       	rcall	.-408    	; 0x5e12 <__mulsf3>
    5faa:	ef 91       	pop	r30
    5fac:	ff 91       	pop	r31
    5fae:	d2 dd       	rcall	.-1116   	; 0x5b54 <__fp_powser>
    5fb0:	2f 91       	pop	r18
    5fb2:	3f 91       	pop	r19
    5fb4:	4f 91       	pop	r20
    5fb6:	5f 91       	pop	r21
    5fb8:	2c cf       	rjmp	.-424    	; 0x5e12 <__mulsf3>

00005fba <__divmodhi4>:
    5fba:	97 fb       	bst	r25, 7
    5fbc:	07 2e       	mov	r0, r23
    5fbe:	16 f4       	brtc	.+4      	; 0x5fc4 <__divmodhi4+0xa>
    5fc0:	00 94       	com	r0
    5fc2:	07 d0       	rcall	.+14     	; 0x5fd2 <__divmodhi4_neg1>
    5fc4:	77 fd       	sbrc	r23, 7
    5fc6:	09 d0       	rcall	.+18     	; 0x5fda <__divmodhi4_neg2>
    5fc8:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <__udivmodhi4>
    5fcc:	07 fc       	sbrc	r0, 7
    5fce:	05 d0       	rcall	.+10     	; 0x5fda <__divmodhi4_neg2>
    5fd0:	3e f4       	brtc	.+14     	; 0x5fe0 <__divmodhi4_exit>

00005fd2 <__divmodhi4_neg1>:
    5fd2:	90 95       	com	r25
    5fd4:	81 95       	neg	r24
    5fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd8:	08 95       	ret

00005fda <__divmodhi4_neg2>:
    5fda:	70 95       	com	r23
    5fdc:	61 95       	neg	r22
    5fde:	7f 4f       	sbci	r23, 0xFF	; 255

00005fe0 <__divmodhi4_exit>:
    5fe0:	08 95       	ret

00005fe2 <__tablejump2__>:
    5fe2:	ee 0f       	add	r30, r30
    5fe4:	ff 1f       	adc	r31, r31

00005fe6 <__tablejump__>:
    5fe6:	05 90       	lpm	r0, Z+
    5fe8:	f4 91       	lpm	r31, Z
    5fea:	e0 2d       	mov	r30, r0
    5fec:	09 94       	ijmp

00005fee <__udivmodhi4>:
    5fee:	aa 1b       	sub	r26, r26
    5ff0:	bb 1b       	sub	r27, r27
    5ff2:	51 e1       	ldi	r21, 0x11	; 17
    5ff4:	07 c0       	rjmp	.+14     	; 0x6004 <__udivmodhi4_ep>

00005ff6 <__udivmodhi4_loop>:
    5ff6:	aa 1f       	adc	r26, r26
    5ff8:	bb 1f       	adc	r27, r27
    5ffa:	a6 17       	cp	r26, r22
    5ffc:	b7 07       	cpc	r27, r23
    5ffe:	10 f0       	brcs	.+4      	; 0x6004 <__udivmodhi4_ep>
    6000:	a6 1b       	sub	r26, r22
    6002:	b7 0b       	sbc	r27, r23

00006004 <__udivmodhi4_ep>:
    6004:	88 1f       	adc	r24, r24
    6006:	99 1f       	adc	r25, r25
    6008:	5a 95       	dec	r21
    600a:	a9 f7       	brne	.-22     	; 0x5ff6 <__udivmodhi4_loop>
    600c:	80 95       	com	r24
    600e:	90 95       	com	r25
    6010:	bc 01       	movw	r22, r24
    6012:	cd 01       	movw	r24, r26
    6014:	08 95       	ret

00006016 <malloc>:
    6016:	cf 93       	push	r28
    6018:	df 93       	push	r29
    601a:	82 30       	cpi	r24, 0x02	; 2
    601c:	91 05       	cpc	r25, r1
    601e:	10 f4       	brcc	.+4      	; 0x6024 <malloc+0xe>
    6020:	82 e0       	ldi	r24, 0x02	; 2
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	e0 91 2b 01 	lds	r30, 0x012B
    6028:	f0 91 2c 01 	lds	r31, 0x012C
    602c:	20 e0       	ldi	r18, 0x00	; 0
    602e:	30 e0       	ldi	r19, 0x00	; 0
    6030:	a0 e0       	ldi	r26, 0x00	; 0
    6032:	b0 e0       	ldi	r27, 0x00	; 0
    6034:	30 97       	sbiw	r30, 0x00	; 0
    6036:	39 f1       	breq	.+78     	; 0x6086 <malloc+0x70>
    6038:	40 81       	ld	r20, Z
    603a:	51 81       	ldd	r21, Z+1	; 0x01
    603c:	48 17       	cp	r20, r24
    603e:	59 07       	cpc	r21, r25
    6040:	b8 f0       	brcs	.+46     	; 0x6070 <malloc+0x5a>
    6042:	48 17       	cp	r20, r24
    6044:	59 07       	cpc	r21, r25
    6046:	71 f4       	brne	.+28     	; 0x6064 <malloc+0x4e>
    6048:	82 81       	ldd	r24, Z+2	; 0x02
    604a:	93 81       	ldd	r25, Z+3	; 0x03
    604c:	10 97       	sbiw	r26, 0x00	; 0
    604e:	29 f0       	breq	.+10     	; 0x605a <malloc+0x44>
    6050:	13 96       	adiw	r26, 0x03	; 3
    6052:	9c 93       	st	X, r25
    6054:	8e 93       	st	-X, r24
    6056:	12 97       	sbiw	r26, 0x02	; 2
    6058:	2c c0       	rjmp	.+88     	; 0x60b2 <malloc+0x9c>
    605a:	90 93 2c 01 	sts	0x012C, r25
    605e:	80 93 2b 01 	sts	0x012B, r24
    6062:	27 c0       	rjmp	.+78     	; 0x60b2 <malloc+0x9c>
    6064:	21 15       	cp	r18, r1
    6066:	31 05       	cpc	r19, r1
    6068:	31 f0       	breq	.+12     	; 0x6076 <malloc+0x60>
    606a:	42 17       	cp	r20, r18
    606c:	53 07       	cpc	r21, r19
    606e:	18 f0       	brcs	.+6      	; 0x6076 <malloc+0x60>
    6070:	a9 01       	movw	r20, r18
    6072:	db 01       	movw	r26, r22
    6074:	01 c0       	rjmp	.+2      	; 0x6078 <malloc+0x62>
    6076:	ef 01       	movw	r28, r30
    6078:	9a 01       	movw	r18, r20
    607a:	bd 01       	movw	r22, r26
    607c:	df 01       	movw	r26, r30
    607e:	02 80       	ldd	r0, Z+2	; 0x02
    6080:	f3 81       	ldd	r31, Z+3	; 0x03
    6082:	e0 2d       	mov	r30, r0
    6084:	d7 cf       	rjmp	.-82     	; 0x6034 <malloc+0x1e>
    6086:	21 15       	cp	r18, r1
    6088:	31 05       	cpc	r19, r1
    608a:	f9 f0       	breq	.+62     	; 0x60ca <malloc+0xb4>
    608c:	28 1b       	sub	r18, r24
    608e:	39 0b       	sbc	r19, r25
    6090:	24 30       	cpi	r18, 0x04	; 4
    6092:	31 05       	cpc	r19, r1
    6094:	80 f4       	brcc	.+32     	; 0x60b6 <malloc+0xa0>
    6096:	8a 81       	ldd	r24, Y+2	; 0x02
    6098:	9b 81       	ldd	r25, Y+3	; 0x03
    609a:	61 15       	cp	r22, r1
    609c:	71 05       	cpc	r23, r1
    609e:	21 f0       	breq	.+8      	; 0x60a8 <malloc+0x92>
    60a0:	fb 01       	movw	r30, r22
    60a2:	93 83       	std	Z+3, r25	; 0x03
    60a4:	82 83       	std	Z+2, r24	; 0x02
    60a6:	04 c0       	rjmp	.+8      	; 0x60b0 <malloc+0x9a>
    60a8:	90 93 2c 01 	sts	0x012C, r25
    60ac:	80 93 2b 01 	sts	0x012B, r24
    60b0:	fe 01       	movw	r30, r28
    60b2:	32 96       	adiw	r30, 0x02	; 2
    60b4:	44 c0       	rjmp	.+136    	; 0x613e <malloc+0x128>
    60b6:	fe 01       	movw	r30, r28
    60b8:	e2 0f       	add	r30, r18
    60ba:	f3 1f       	adc	r31, r19
    60bc:	81 93       	st	Z+, r24
    60be:	91 93       	st	Z+, r25
    60c0:	22 50       	subi	r18, 0x02	; 2
    60c2:	31 09       	sbc	r19, r1
    60c4:	39 83       	std	Y+1, r19	; 0x01
    60c6:	28 83       	st	Y, r18
    60c8:	3a c0       	rjmp	.+116    	; 0x613e <malloc+0x128>
    60ca:	20 91 29 01 	lds	r18, 0x0129
    60ce:	30 91 2a 01 	lds	r19, 0x012A
    60d2:	23 2b       	or	r18, r19
    60d4:	41 f4       	brne	.+16     	; 0x60e6 <malloc+0xd0>
    60d6:	20 91 62 00 	lds	r18, 0x0062
    60da:	30 91 63 00 	lds	r19, 0x0063
    60de:	30 93 2a 01 	sts	0x012A, r19
    60e2:	20 93 29 01 	sts	0x0129, r18
    60e6:	20 91 60 00 	lds	r18, 0x0060
    60ea:	30 91 61 00 	lds	r19, 0x0061
    60ee:	21 15       	cp	r18, r1
    60f0:	31 05       	cpc	r19, r1
    60f2:	41 f4       	brne	.+16     	; 0x6104 <malloc+0xee>
    60f4:	2d b7       	in	r18, 0x3d	; 61
    60f6:	3e b7       	in	r19, 0x3e	; 62
    60f8:	40 91 64 00 	lds	r20, 0x0064
    60fc:	50 91 65 00 	lds	r21, 0x0065
    6100:	24 1b       	sub	r18, r20
    6102:	35 0b       	sbc	r19, r21
    6104:	e0 91 29 01 	lds	r30, 0x0129
    6108:	f0 91 2a 01 	lds	r31, 0x012A
    610c:	e2 17       	cp	r30, r18
    610e:	f3 07       	cpc	r31, r19
    6110:	a0 f4       	brcc	.+40     	; 0x613a <malloc+0x124>
    6112:	2e 1b       	sub	r18, r30
    6114:	3f 0b       	sbc	r19, r31
    6116:	28 17       	cp	r18, r24
    6118:	39 07       	cpc	r19, r25
    611a:	78 f0       	brcs	.+30     	; 0x613a <malloc+0x124>
    611c:	ac 01       	movw	r20, r24
    611e:	4e 5f       	subi	r20, 0xFE	; 254
    6120:	5f 4f       	sbci	r21, 0xFF	; 255
    6122:	24 17       	cp	r18, r20
    6124:	35 07       	cpc	r19, r21
    6126:	48 f0       	brcs	.+18     	; 0x613a <malloc+0x124>
    6128:	4e 0f       	add	r20, r30
    612a:	5f 1f       	adc	r21, r31
    612c:	50 93 2a 01 	sts	0x012A, r21
    6130:	40 93 29 01 	sts	0x0129, r20
    6134:	81 93       	st	Z+, r24
    6136:	91 93       	st	Z+, r25
    6138:	02 c0       	rjmp	.+4      	; 0x613e <malloc+0x128>
    613a:	e0 e0       	ldi	r30, 0x00	; 0
    613c:	f0 e0       	ldi	r31, 0x00	; 0
    613e:	cf 01       	movw	r24, r30
    6140:	df 91       	pop	r29
    6142:	cf 91       	pop	r28
    6144:	08 95       	ret

00006146 <free>:
    6146:	cf 93       	push	r28
    6148:	df 93       	push	r29
    614a:	00 97       	sbiw	r24, 0x00	; 0
    614c:	09 f4       	brne	.+2      	; 0x6150 <free+0xa>
    614e:	87 c0       	rjmp	.+270    	; 0x625e <free+0x118>
    6150:	fc 01       	movw	r30, r24
    6152:	32 97       	sbiw	r30, 0x02	; 2
    6154:	13 82       	std	Z+3, r1	; 0x03
    6156:	12 82       	std	Z+2, r1	; 0x02
    6158:	c0 91 2b 01 	lds	r28, 0x012B
    615c:	d0 91 2c 01 	lds	r29, 0x012C
    6160:	20 97       	sbiw	r28, 0x00	; 0
    6162:	81 f4       	brne	.+32     	; 0x6184 <free+0x3e>
    6164:	20 81       	ld	r18, Z
    6166:	31 81       	ldd	r19, Z+1	; 0x01
    6168:	28 0f       	add	r18, r24
    616a:	39 1f       	adc	r19, r25
    616c:	80 91 29 01 	lds	r24, 0x0129
    6170:	90 91 2a 01 	lds	r25, 0x012A
    6174:	82 17       	cp	r24, r18
    6176:	93 07       	cpc	r25, r19
    6178:	79 f5       	brne	.+94     	; 0x61d8 <free+0x92>
    617a:	f0 93 2a 01 	sts	0x012A, r31
    617e:	e0 93 29 01 	sts	0x0129, r30
    6182:	6d c0       	rjmp	.+218    	; 0x625e <free+0x118>
    6184:	de 01       	movw	r26, r28
    6186:	20 e0       	ldi	r18, 0x00	; 0
    6188:	30 e0       	ldi	r19, 0x00	; 0
    618a:	ae 17       	cp	r26, r30
    618c:	bf 07       	cpc	r27, r31
    618e:	50 f4       	brcc	.+20     	; 0x61a4 <free+0x5e>
    6190:	12 96       	adiw	r26, 0x02	; 2
    6192:	4d 91       	ld	r20, X+
    6194:	5c 91       	ld	r21, X
    6196:	13 97       	sbiw	r26, 0x03	; 3
    6198:	9d 01       	movw	r18, r26
    619a:	41 15       	cp	r20, r1
    619c:	51 05       	cpc	r21, r1
    619e:	09 f1       	breq	.+66     	; 0x61e2 <free+0x9c>
    61a0:	da 01       	movw	r26, r20
    61a2:	f3 cf       	rjmp	.-26     	; 0x618a <free+0x44>
    61a4:	b3 83       	std	Z+3, r27	; 0x03
    61a6:	a2 83       	std	Z+2, r26	; 0x02
    61a8:	40 81       	ld	r20, Z
    61aa:	51 81       	ldd	r21, Z+1	; 0x01
    61ac:	84 0f       	add	r24, r20
    61ae:	95 1f       	adc	r25, r21
    61b0:	8a 17       	cp	r24, r26
    61b2:	9b 07       	cpc	r25, r27
    61b4:	71 f4       	brne	.+28     	; 0x61d2 <free+0x8c>
    61b6:	8d 91       	ld	r24, X+
    61b8:	9c 91       	ld	r25, X
    61ba:	11 97       	sbiw	r26, 0x01	; 1
    61bc:	84 0f       	add	r24, r20
    61be:	95 1f       	adc	r25, r21
    61c0:	02 96       	adiw	r24, 0x02	; 2
    61c2:	91 83       	std	Z+1, r25	; 0x01
    61c4:	80 83       	st	Z, r24
    61c6:	12 96       	adiw	r26, 0x02	; 2
    61c8:	8d 91       	ld	r24, X+
    61ca:	9c 91       	ld	r25, X
    61cc:	13 97       	sbiw	r26, 0x03	; 3
    61ce:	93 83       	std	Z+3, r25	; 0x03
    61d0:	82 83       	std	Z+2, r24	; 0x02
    61d2:	21 15       	cp	r18, r1
    61d4:	31 05       	cpc	r19, r1
    61d6:	29 f4       	brne	.+10     	; 0x61e2 <free+0x9c>
    61d8:	f0 93 2c 01 	sts	0x012C, r31
    61dc:	e0 93 2b 01 	sts	0x012B, r30
    61e0:	3e c0       	rjmp	.+124    	; 0x625e <free+0x118>
    61e2:	d9 01       	movw	r26, r18
    61e4:	13 96       	adiw	r26, 0x03	; 3
    61e6:	fc 93       	st	X, r31
    61e8:	ee 93       	st	-X, r30
    61ea:	12 97       	sbiw	r26, 0x02	; 2
    61ec:	4d 91       	ld	r20, X+
    61ee:	5d 91       	ld	r21, X+
    61f0:	a4 0f       	add	r26, r20
    61f2:	b5 1f       	adc	r27, r21
    61f4:	ea 17       	cp	r30, r26
    61f6:	fb 07       	cpc	r31, r27
    61f8:	79 f4       	brne	.+30     	; 0x6218 <free+0xd2>
    61fa:	80 81       	ld	r24, Z
    61fc:	91 81       	ldd	r25, Z+1	; 0x01
    61fe:	84 0f       	add	r24, r20
    6200:	95 1f       	adc	r25, r21
    6202:	02 96       	adiw	r24, 0x02	; 2
    6204:	d9 01       	movw	r26, r18
    6206:	11 96       	adiw	r26, 0x01	; 1
    6208:	9c 93       	st	X, r25
    620a:	8e 93       	st	-X, r24
    620c:	82 81       	ldd	r24, Z+2	; 0x02
    620e:	93 81       	ldd	r25, Z+3	; 0x03
    6210:	13 96       	adiw	r26, 0x03	; 3
    6212:	9c 93       	st	X, r25
    6214:	8e 93       	st	-X, r24
    6216:	12 97       	sbiw	r26, 0x02	; 2
    6218:	e0 e0       	ldi	r30, 0x00	; 0
    621a:	f0 e0       	ldi	r31, 0x00	; 0
    621c:	8a 81       	ldd	r24, Y+2	; 0x02
    621e:	9b 81       	ldd	r25, Y+3	; 0x03
    6220:	00 97       	sbiw	r24, 0x00	; 0
    6222:	19 f0       	breq	.+6      	; 0x622a <free+0xe4>
    6224:	fe 01       	movw	r30, r28
    6226:	ec 01       	movw	r28, r24
    6228:	f9 cf       	rjmp	.-14     	; 0x621c <free+0xd6>
    622a:	ce 01       	movw	r24, r28
    622c:	02 96       	adiw	r24, 0x02	; 2
    622e:	28 81       	ld	r18, Y
    6230:	39 81       	ldd	r19, Y+1	; 0x01
    6232:	82 0f       	add	r24, r18
    6234:	93 1f       	adc	r25, r19
    6236:	20 91 29 01 	lds	r18, 0x0129
    623a:	30 91 2a 01 	lds	r19, 0x012A
    623e:	28 17       	cp	r18, r24
    6240:	39 07       	cpc	r19, r25
    6242:	69 f4       	brne	.+26     	; 0x625e <free+0x118>
    6244:	30 97       	sbiw	r30, 0x00	; 0
    6246:	29 f4       	brne	.+10     	; 0x6252 <free+0x10c>
    6248:	10 92 2c 01 	sts	0x012C, r1
    624c:	10 92 2b 01 	sts	0x012B, r1
    6250:	02 c0       	rjmp	.+4      	; 0x6256 <free+0x110>
    6252:	13 82       	std	Z+3, r1	; 0x03
    6254:	12 82       	std	Z+2, r1	; 0x02
    6256:	d0 93 2a 01 	sts	0x012A, r29
    625a:	c0 93 29 01 	sts	0x0129, r28
    625e:	df 91       	pop	r29
    6260:	cf 91       	pop	r28
    6262:	08 95       	ret

00006264 <do_rand>:
    6264:	8f 92       	push	r8
    6266:	9f 92       	push	r9
    6268:	af 92       	push	r10
    626a:	bf 92       	push	r11
    626c:	cf 92       	push	r12
    626e:	df 92       	push	r13
    6270:	ef 92       	push	r14
    6272:	ff 92       	push	r15
    6274:	cf 93       	push	r28
    6276:	df 93       	push	r29
    6278:	ec 01       	movw	r28, r24
    627a:	68 81       	ld	r22, Y
    627c:	79 81       	ldd	r23, Y+1	; 0x01
    627e:	8a 81       	ldd	r24, Y+2	; 0x02
    6280:	9b 81       	ldd	r25, Y+3	; 0x03
    6282:	61 15       	cp	r22, r1
    6284:	71 05       	cpc	r23, r1
    6286:	81 05       	cpc	r24, r1
    6288:	91 05       	cpc	r25, r1
    628a:	21 f4       	brne	.+8      	; 0x6294 <do_rand+0x30>
    628c:	64 e2       	ldi	r22, 0x24	; 36
    628e:	79 ed       	ldi	r23, 0xD9	; 217
    6290:	8b e5       	ldi	r24, 0x5B	; 91
    6292:	97 e0       	ldi	r25, 0x07	; 7
    6294:	2d e1       	ldi	r18, 0x1D	; 29
    6296:	33 ef       	ldi	r19, 0xF3	; 243
    6298:	41 e0       	ldi	r20, 0x01	; 1
    629a:	50 e0       	ldi	r21, 0x00	; 0
    629c:	0e 94 d3 35 	call	0x6ba6	; 0x6ba6 <__divmodsi4>
    62a0:	49 01       	movw	r8, r18
    62a2:	5a 01       	movw	r10, r20
    62a4:	9b 01       	movw	r18, r22
    62a6:	ac 01       	movw	r20, r24
    62a8:	a7 ea       	ldi	r26, 0xA7	; 167
    62aa:	b1 e4       	ldi	r27, 0x41	; 65
    62ac:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <__muluhisi3>
    62b0:	6b 01       	movw	r12, r22
    62b2:	7c 01       	movw	r14, r24
    62b4:	ac ee       	ldi	r26, 0xEC	; 236
    62b6:	b4 ef       	ldi	r27, 0xF4	; 244
    62b8:	a5 01       	movw	r20, r10
    62ba:	94 01       	movw	r18, r8
    62bc:	0e 94 00 36 	call	0x6c00	; 0x6c00 <__mulohisi3>
    62c0:	c6 0e       	add	r12, r22
    62c2:	d7 1e       	adc	r13, r23
    62c4:	e8 1e       	adc	r14, r24
    62c6:	f9 1e       	adc	r15, r25
    62c8:	f7 fe       	sbrs	r15, 7
    62ca:	06 c0       	rjmp	.+12     	; 0x62d8 <do_rand+0x74>
    62cc:	81 e0       	ldi	r24, 0x01	; 1
    62ce:	c8 1a       	sub	r12, r24
    62d0:	d1 08       	sbc	r13, r1
    62d2:	e1 08       	sbc	r14, r1
    62d4:	80 e8       	ldi	r24, 0x80	; 128
    62d6:	f8 0a       	sbc	r15, r24
    62d8:	c8 82       	st	Y, r12
    62da:	d9 82       	std	Y+1, r13	; 0x01
    62dc:	ea 82       	std	Y+2, r14	; 0x02
    62de:	fb 82       	std	Y+3, r15	; 0x03
    62e0:	c6 01       	movw	r24, r12
    62e2:	9f 77       	andi	r25, 0x7F	; 127
    62e4:	df 91       	pop	r29
    62e6:	cf 91       	pop	r28
    62e8:	ff 90       	pop	r15
    62ea:	ef 90       	pop	r14
    62ec:	df 90       	pop	r13
    62ee:	cf 90       	pop	r12
    62f0:	bf 90       	pop	r11
    62f2:	af 90       	pop	r10
    62f4:	9f 90       	pop	r9
    62f6:	8f 90       	pop	r8
    62f8:	08 95       	ret

000062fa <rand_r>:
    62fa:	0e 94 32 31 	call	0x6264	; 0x6264 <do_rand>
    62fe:	08 95       	ret

00006300 <rand>:
    6300:	86 e6       	ldi	r24, 0x66	; 102
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	0e 94 32 31 	call	0x6264	; 0x6264 <do_rand>
    6308:	08 95       	ret

0000630a <srand>:
    630a:	a0 e0       	ldi	r26, 0x00	; 0
    630c:	b0 e0       	ldi	r27, 0x00	; 0
    630e:	80 93 66 00 	sts	0x0066, r24
    6312:	90 93 67 00 	sts	0x0067, r25
    6316:	a0 93 68 00 	sts	0x0068, r26
    631a:	b0 93 69 00 	sts	0x0069, r27
    631e:	08 95       	ret

00006320 <strtol>:
    6320:	2f 92       	push	r2
    6322:	3f 92       	push	r3
    6324:	5f 92       	push	r5
    6326:	6f 92       	push	r6
    6328:	7f 92       	push	r7
    632a:	8f 92       	push	r8
    632c:	9f 92       	push	r9
    632e:	af 92       	push	r10
    6330:	bf 92       	push	r11
    6332:	cf 92       	push	r12
    6334:	df 92       	push	r13
    6336:	ef 92       	push	r14
    6338:	ff 92       	push	r15
    633a:	0f 93       	push	r16
    633c:	1f 93       	push	r17
    633e:	cf 93       	push	r28
    6340:	df 93       	push	r29
    6342:	8b 01       	movw	r16, r22
    6344:	ea 01       	movw	r28, r20
    6346:	61 15       	cp	r22, r1
    6348:	71 05       	cpc	r23, r1
    634a:	21 f0       	breq	.+8      	; 0x6354 <strtol+0x34>
    634c:	db 01       	movw	r26, r22
    634e:	8c 93       	st	X, r24
    6350:	11 96       	adiw	r26, 0x01	; 1
    6352:	9c 93       	st	X, r25
    6354:	20 97       	sbiw	r28, 0x00	; 0
    6356:	39 f0       	breq	.+14     	; 0x6366 <strtol+0x46>
    6358:	9e 01       	movw	r18, r28
    635a:	22 50       	subi	r18, 0x02	; 2
    635c:	31 09       	sbc	r19, r1
    635e:	23 32       	cpi	r18, 0x23	; 35
    6360:	31 05       	cpc	r19, r1
    6362:	08 f0       	brcs	.+2      	; 0x6366 <strtol+0x46>
    6364:	fb c0       	rjmp	.+502    	; 0x655c <strtol+0x23c>
    6366:	7c 01       	movw	r14, r24
    6368:	67 01       	movw	r12, r14
    636a:	bf ef       	ldi	r27, 0xFF	; 255
    636c:	cb 1a       	sub	r12, r27
    636e:	db 0a       	sbc	r13, r27
    6370:	56 01       	movw	r10, r12
    6372:	f7 01       	movw	r30, r14
    6374:	60 80       	ld	r6, Z
    6376:	86 2d       	mov	r24, r6
    6378:	90 e0       	ldi	r25, 0x00	; 0
    637a:	0e 94 c4 32 	call	0x6588	; 0x6588 <isspace>
    637e:	89 2b       	or	r24, r25
    6380:	11 f0       	breq	.+4      	; 0x6386 <strtol+0x66>
    6382:	76 01       	movw	r14, r12
    6384:	f1 cf       	rjmp	.-30     	; 0x6368 <strtol+0x48>
    6386:	fd e2       	ldi	r31, 0x2D	; 45
    6388:	6f 12       	cpse	r6, r31
    638a:	0a c0       	rjmp	.+20     	; 0x63a0 <strtol+0x80>
    638c:	57 01       	movw	r10, r14
    638e:	82 e0       	ldi	r24, 0x02	; 2
    6390:	a8 0e       	add	r10, r24
    6392:	b1 1c       	adc	r11, r1
    6394:	d7 01       	movw	r26, r14
    6396:	11 96       	adiw	r26, 0x01	; 1
    6398:	6c 90       	ld	r6, X
    639a:	77 24       	eor	r7, r7
    639c:	73 94       	inc	r7
    639e:	0b c0       	rjmp	.+22     	; 0x63b6 <strtol+0x96>
    63a0:	bb e2       	ldi	r27, 0x2B	; 43
    63a2:	6b 12       	cpse	r6, r27
    63a4:	07 c0       	rjmp	.+14     	; 0x63b4 <strtol+0x94>
    63a6:	57 01       	movw	r10, r14
    63a8:	e2 e0       	ldi	r30, 0x02	; 2
    63aa:	ae 0e       	add	r10, r30
    63ac:	b1 1c       	adc	r11, r1
    63ae:	d7 01       	movw	r26, r14
    63b0:	11 96       	adiw	r26, 0x01	; 1
    63b2:	6c 90       	ld	r6, X
    63b4:	71 2c       	mov	r7, r1
    63b6:	ce 01       	movw	r24, r28
    63b8:	8f 7e       	andi	r24, 0xEF	; 239
    63ba:	89 2b       	or	r24, r25
    63bc:	89 f4       	brne	.+34     	; 0x63e0 <strtol+0xc0>
    63be:	b0 e3       	ldi	r27, 0x30	; 48
    63c0:	6b 12       	cpse	r6, r27
    63c2:	22 c0       	rjmp	.+68     	; 0x6408 <strtol+0xe8>
    63c4:	f5 01       	movw	r30, r10
    63c6:	80 81       	ld	r24, Z
    63c8:	8f 7d       	andi	r24, 0xDF	; 223
    63ca:	88 35       	cpi	r24, 0x58	; 88
    63cc:	41 f5       	brne	.+80     	; 0x641e <strtol+0xfe>
    63ce:	61 80       	ldd	r6, Z+1	; 0x01
    63d0:	f2 e0       	ldi	r31, 0x02	; 2
    63d2:	af 0e       	add	r10, r31
    63d4:	b1 1c       	adc	r11, r1
    63d6:	87 2d       	mov	r24, r7
    63d8:	82 60       	ori	r24, 0x02	; 2
    63da:	78 2e       	mov	r7, r24
    63dc:	c0 e1       	ldi	r28, 0x10	; 16
    63de:	d0 e0       	ldi	r29, 0x00	; 0
    63e0:	c8 30       	cpi	r28, 0x08	; 8
    63e2:	d1 05       	cpc	r29, r1
    63e4:	f1 f0       	breq	.+60     	; 0x6422 <strtol+0x102>
    63e6:	4c f4       	brge	.+18     	; 0x63fa <strtol+0xda>
    63e8:	c2 30       	cpi	r28, 0x02	; 2
    63ea:	d1 05       	cpc	r29, r1
    63ec:	11 f5       	brne	.+68     	; 0x6432 <strtol+0x112>
    63ee:	c1 2c       	mov	r12, r1
    63f0:	d1 2c       	mov	r13, r1
    63f2:	e1 2c       	mov	r14, r1
    63f4:	b0 e4       	ldi	r27, 0x40	; 64
    63f6:	fb 2e       	mov	r15, r27
    63f8:	2f c0       	rjmp	.+94     	; 0x6458 <strtol+0x138>
    63fa:	ca 30       	cpi	r28, 0x0A	; 10
    63fc:	d1 05       	cpc	r29, r1
    63fe:	31 f0       	breq	.+12     	; 0x640c <strtol+0xec>
    6400:	c0 31       	cpi	r28, 0x10	; 16
    6402:	d1 05       	cpc	r29, r1
    6404:	21 f1       	breq	.+72     	; 0x644e <strtol+0x12e>
    6406:	15 c0       	rjmp	.+42     	; 0x6432 <strtol+0x112>
    6408:	20 97       	sbiw	r28, 0x00	; 0
    640a:	51 f7       	brne	.-44     	; 0x63e0 <strtol+0xc0>
    640c:	ca e0       	ldi	r28, 0x0A	; 10
    640e:	d0 e0       	ldi	r29, 0x00	; 0
    6410:	ac ec       	ldi	r26, 0xCC	; 204
    6412:	ca 2e       	mov	r12, r26
    6414:	dc 2c       	mov	r13, r12
    6416:	ec 2c       	mov	r14, r12
    6418:	ac e0       	ldi	r26, 0x0C	; 12
    641a:	fa 2e       	mov	r15, r26
    641c:	1d c0       	rjmp	.+58     	; 0x6458 <strtol+0x138>
    641e:	20 97       	sbiw	r28, 0x00	; 0
    6420:	f9 f6       	brne	.-66     	; 0x63e0 <strtol+0xc0>
    6422:	c8 e0       	ldi	r28, 0x08	; 8
    6424:	d0 e0       	ldi	r29, 0x00	; 0
    6426:	c1 2c       	mov	r12, r1
    6428:	d1 2c       	mov	r13, r1
    642a:	e1 2c       	mov	r14, r1
    642c:	f0 e1       	ldi	r31, 0x10	; 16
    642e:	ff 2e       	mov	r15, r31
    6430:	13 c0       	rjmp	.+38     	; 0x6458 <strtol+0x138>
    6432:	60 e0       	ldi	r22, 0x00	; 0
    6434:	70 e0       	ldi	r23, 0x00	; 0
    6436:	80 e0       	ldi	r24, 0x00	; 0
    6438:	90 e8       	ldi	r25, 0x80	; 128
    643a:	9e 01       	movw	r18, r28
    643c:	44 27       	eor	r20, r20
    643e:	37 fd       	sbrc	r19, 7
    6440:	40 95       	com	r20
    6442:	54 2f       	mov	r21, r20
    6444:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__udivmodsi4>
    6448:	69 01       	movw	r12, r18
    644a:	7a 01       	movw	r14, r20
    644c:	05 c0       	rjmp	.+10     	; 0x6458 <strtol+0x138>
    644e:	c1 2c       	mov	r12, r1
    6450:	d1 2c       	mov	r13, r1
    6452:	e1 2c       	mov	r14, r1
    6454:	e8 e0       	ldi	r30, 0x08	; 8
    6456:	fe 2e       	mov	r15, r30
    6458:	f5 01       	movw	r30, r10
    645a:	60 e0       	ldi	r22, 0x00	; 0
    645c:	20 e0       	ldi	r18, 0x00	; 0
    645e:	30 e0       	ldi	r19, 0x00	; 0
    6460:	a9 01       	movw	r20, r18
    6462:	4e 01       	movw	r8, r28
    6464:	aa 24       	eor	r10, r10
    6466:	97 fc       	sbrc	r9, 7
    6468:	a0 94       	com	r10
    646a:	ba 2c       	mov	r11, r10
    646c:	1f 01       	movw	r2, r30
    646e:	70 ed       	ldi	r23, 0xD0	; 208
    6470:	57 2e       	mov	r5, r23
    6472:	56 0c       	add	r5, r6
    6474:	a9 e0       	ldi	r26, 0x09	; 9
    6476:	a5 15       	cp	r26, r5
    6478:	70 f4       	brcc	.+28     	; 0x6496 <strtol+0x176>
    647a:	8f eb       	ldi	r24, 0xBF	; 191
    647c:	86 0d       	add	r24, r6
    647e:	8a 31       	cpi	r24, 0x1A	; 26
    6480:	18 f4       	brcc	.+6      	; 0x6488 <strtol+0x168>
    6482:	99 ec       	ldi	r25, 0xC9	; 201
    6484:	59 2e       	mov	r5, r25
    6486:	06 c0       	rjmp	.+12     	; 0x6494 <strtol+0x174>
    6488:	8f e9       	ldi	r24, 0x9F	; 159
    648a:	86 0d       	add	r24, r6
    648c:	8a 31       	cpi	r24, 0x1A	; 26
    648e:	30 f5       	brcc	.+76     	; 0x64dc <strtol+0x1bc>
    6490:	89 ea       	ldi	r24, 0xA9	; 169
    6492:	58 2e       	mov	r5, r24
    6494:	56 0c       	add	r5, r6
    6496:	85 2d       	mov	r24, r5
    6498:	90 e0       	ldi	r25, 0x00	; 0
    649a:	8c 17       	cp	r24, r28
    649c:	9d 07       	cpc	r25, r29
    649e:	f4 f4       	brge	.+60     	; 0x64dc <strtol+0x1bc>
    64a0:	67 fd       	sbrc	r22, 7
    64a2:	18 c0       	rjmp	.+48     	; 0x64d4 <strtol+0x1b4>
    64a4:	c2 16       	cp	r12, r18
    64a6:	d3 06       	cpc	r13, r19
    64a8:	e4 06       	cpc	r14, r20
    64aa:	f5 06       	cpc	r15, r21
    64ac:	80 f0       	brcs	.+32     	; 0x64ce <strtol+0x1ae>
    64ae:	c5 01       	movw	r24, r10
    64b0:	b4 01       	movw	r22, r8
    64b2:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <__mulsi3>
    64b6:	9b 01       	movw	r18, r22
    64b8:	ac 01       	movw	r20, r24
    64ba:	25 0d       	add	r18, r5
    64bc:	31 1d       	adc	r19, r1
    64be:	41 1d       	adc	r20, r1
    64c0:	51 1d       	adc	r21, r1
    64c2:	21 30       	cpi	r18, 0x01	; 1
    64c4:	31 05       	cpc	r19, r1
    64c6:	41 05       	cpc	r20, r1
    64c8:	b0 e8       	ldi	r27, 0x80	; 128
    64ca:	5b 07       	cpc	r21, r27
    64cc:	10 f0       	brcs	.+4      	; 0x64d2 <strtol+0x1b2>
    64ce:	6f ef       	ldi	r22, 0xFF	; 255
    64d0:	01 c0       	rjmp	.+2      	; 0x64d4 <strtol+0x1b4>
    64d2:	61 e0       	ldi	r22, 0x01	; 1
    64d4:	31 96       	adiw	r30, 0x01	; 1
    64d6:	d1 01       	movw	r26, r2
    64d8:	6c 90       	ld	r6, X
    64da:	c8 cf       	rjmp	.-112    	; 0x646c <strtol+0x14c>
    64dc:	87 2d       	mov	r24, r7
    64de:	81 70       	andi	r24, 0x01	; 1
    64e0:	01 15       	cp	r16, r1
    64e2:	11 05       	cpc	r17, r1
    64e4:	71 f0       	breq	.+28     	; 0x6502 <strtol+0x1e2>
    64e6:	66 23       	and	r22, r22
    64e8:	29 f0       	breq	.+10     	; 0x64f4 <strtol+0x1d4>
    64ea:	31 97       	sbiw	r30, 0x01	; 1
    64ec:	d8 01       	movw	r26, r16
    64ee:	ed 93       	st	X+, r30
    64f0:	fc 93       	st	X, r31
    64f2:	07 c0       	rjmp	.+14     	; 0x6502 <strtol+0x1e2>
    64f4:	71 fe       	sbrs	r7, 1
    64f6:	19 c0       	rjmp	.+50     	; 0x652a <strtol+0x20a>
    64f8:	32 97       	sbiw	r30, 0x02	; 2
    64fa:	d8 01       	movw	r26, r16
    64fc:	ed 93       	st	X+, r30
    64fe:	fc 93       	st	X, r31
    6500:	14 c0       	rjmp	.+40     	; 0x652a <strtol+0x20a>
    6502:	67 ff       	sbrs	r22, 7
    6504:	12 c0       	rjmp	.+36     	; 0x652a <strtol+0x20a>
    6506:	88 23       	and	r24, r24
    6508:	29 f0       	breq	.+10     	; 0x6514 <strtol+0x1f4>
    650a:	20 e0       	ldi	r18, 0x00	; 0
    650c:	30 e0       	ldi	r19, 0x00	; 0
    650e:	40 e0       	ldi	r20, 0x00	; 0
    6510:	50 e8       	ldi	r21, 0x80	; 128
    6512:	04 c0       	rjmp	.+8      	; 0x651c <strtol+0x1fc>
    6514:	2f ef       	ldi	r18, 0xFF	; 255
    6516:	3f ef       	ldi	r19, 0xFF	; 255
    6518:	4f ef       	ldi	r20, 0xFF	; 255
    651a:	5f e7       	ldi	r21, 0x7F	; 127
    651c:	82 e2       	ldi	r24, 0x22	; 34
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	90 93 2e 01 	sts	0x012E, r25
    6524:	80 93 2d 01 	sts	0x012D, r24
    6528:	16 c0       	rjmp	.+44     	; 0x6556 <strtol+0x236>
    652a:	88 23       	and	r24, r24
    652c:	41 f0       	breq	.+16     	; 0x653e <strtol+0x21e>
    652e:	50 95       	com	r21
    6530:	40 95       	com	r20
    6532:	30 95       	com	r19
    6534:	21 95       	neg	r18
    6536:	3f 4f       	sbci	r19, 0xFF	; 255
    6538:	4f 4f       	sbci	r20, 0xFF	; 255
    653a:	5f 4f       	sbci	r21, 0xFF	; 255
    653c:	0c c0       	rjmp	.+24     	; 0x6556 <strtol+0x236>
    653e:	57 ff       	sbrs	r21, 7
    6540:	0a c0       	rjmp	.+20     	; 0x6556 <strtol+0x236>
    6542:	82 e2       	ldi	r24, 0x22	; 34
    6544:	90 e0       	ldi	r25, 0x00	; 0
    6546:	90 93 2e 01 	sts	0x012E, r25
    654a:	80 93 2d 01 	sts	0x012D, r24
    654e:	2f ef       	ldi	r18, 0xFF	; 255
    6550:	3f ef       	ldi	r19, 0xFF	; 255
    6552:	4f ef       	ldi	r20, 0xFF	; 255
    6554:	5f e7       	ldi	r21, 0x7F	; 127
    6556:	b9 01       	movw	r22, r18
    6558:	ca 01       	movw	r24, r20
    655a:	04 c0       	rjmp	.+8      	; 0x6564 <strtol+0x244>
    655c:	60 e0       	ldi	r22, 0x00	; 0
    655e:	70 e0       	ldi	r23, 0x00	; 0
    6560:	80 e0       	ldi	r24, 0x00	; 0
    6562:	90 e0       	ldi	r25, 0x00	; 0
    6564:	df 91       	pop	r29
    6566:	cf 91       	pop	r28
    6568:	1f 91       	pop	r17
    656a:	0f 91       	pop	r16
    656c:	ff 90       	pop	r15
    656e:	ef 90       	pop	r14
    6570:	df 90       	pop	r13
    6572:	cf 90       	pop	r12
    6574:	bf 90       	pop	r11
    6576:	af 90       	pop	r10
    6578:	9f 90       	pop	r9
    657a:	8f 90       	pop	r8
    657c:	7f 90       	pop	r7
    657e:	6f 90       	pop	r6
    6580:	5f 90       	pop	r5
    6582:	3f 90       	pop	r3
    6584:	2f 90       	pop	r2
    6586:	08 95       	ret

00006588 <isspace>:
    6588:	91 11       	cpse	r25, r1
    658a:	15 c2       	rjmp	.+1066   	; 0x69b6 <__ctype_isfalse>
    658c:	80 32       	cpi	r24, 0x20	; 32
    658e:	19 f0       	breq	.+6      	; 0x6596 <isspace+0xe>
    6590:	89 50       	subi	r24, 0x09	; 9
    6592:	85 50       	subi	r24, 0x05	; 5
    6594:	d0 f7       	brcc	.-12     	; 0x658a <isspace+0x2>
    6596:	08 95       	ret

00006598 <strrev>:
    6598:	dc 01       	movw	r26, r24
    659a:	fc 01       	movw	r30, r24
    659c:	67 2f       	mov	r22, r23
    659e:	71 91       	ld	r23, Z+
    65a0:	77 23       	and	r23, r23
    65a2:	e1 f7       	brne	.-8      	; 0x659c <strrev+0x4>
    65a4:	32 97       	sbiw	r30, 0x02	; 2
    65a6:	04 c0       	rjmp	.+8      	; 0x65b0 <strrev+0x18>
    65a8:	7c 91       	ld	r23, X
    65aa:	6d 93       	st	X+, r22
    65ac:	70 83       	st	Z, r23
    65ae:	62 91       	ld	r22, -Z
    65b0:	ae 17       	cp	r26, r30
    65b2:	bf 07       	cpc	r27, r31
    65b4:	c8 f3       	brcs	.-14     	; 0x65a8 <strrev+0x10>
    65b6:	08 95       	ret

000065b8 <sprintf>:
    65b8:	ae e0       	ldi	r26, 0x0E	; 14
    65ba:	b0 e0       	ldi	r27, 0x00	; 0
    65bc:	e2 ee       	ldi	r30, 0xE2	; 226
    65be:	f2 e3       	ldi	r31, 0x32	; 50
    65c0:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__prologue_saves__+0x1c>
    65c4:	0d 89       	ldd	r16, Y+21	; 0x15
    65c6:	1e 89       	ldd	r17, Y+22	; 0x16
    65c8:	86 e0       	ldi	r24, 0x06	; 6
    65ca:	8c 83       	std	Y+4, r24	; 0x04
    65cc:	1a 83       	std	Y+2, r17	; 0x02
    65ce:	09 83       	std	Y+1, r16	; 0x01
    65d0:	8f ef       	ldi	r24, 0xFF	; 255
    65d2:	9f e7       	ldi	r25, 0x7F	; 127
    65d4:	9e 83       	std	Y+6, r25	; 0x06
    65d6:	8d 83       	std	Y+5, r24	; 0x05
    65d8:	ae 01       	movw	r20, r28
    65da:	47 5e       	subi	r20, 0xE7	; 231
    65dc:	5f 4f       	sbci	r21, 0xFF	; 255
    65de:	6f 89       	ldd	r22, Y+23	; 0x17
    65e0:	78 8d       	ldd	r23, Y+24	; 0x18
    65e2:	ce 01       	movw	r24, r28
    65e4:	01 96       	adiw	r24, 0x01	; 1
    65e6:	0e 94 fe 32 	call	0x65fc	; 0x65fc <vfprintf>
    65ea:	ef 81       	ldd	r30, Y+7	; 0x07
    65ec:	f8 85       	ldd	r31, Y+8	; 0x08
    65ee:	e0 0f       	add	r30, r16
    65f0:	f1 1f       	adc	r31, r17
    65f2:	10 82       	st	Z, r1
    65f4:	2e 96       	adiw	r28, 0x0e	; 14
    65f6:	e4 e0       	ldi	r30, 0x04	; 4
    65f8:	0c 94 2f 36 	jmp	0x6c5e	; 0x6c5e <__epilogue_restores__+0x1c>

000065fc <vfprintf>:
    65fc:	ac e0       	ldi	r26, 0x0C	; 12
    65fe:	b0 e0       	ldi	r27, 0x00	; 0
    6600:	e4 e0       	ldi	r30, 0x04	; 4
    6602:	f3 e3       	ldi	r31, 0x33	; 51
    6604:	0c 94 05 36 	jmp	0x6c0a	; 0x6c0a <__prologue_saves__>
    6608:	7c 01       	movw	r14, r24
    660a:	6b 01       	movw	r12, r22
    660c:	8a 01       	movw	r16, r20
    660e:	fc 01       	movw	r30, r24
    6610:	17 82       	std	Z+7, r1	; 0x07
    6612:	16 82       	std	Z+6, r1	; 0x06
    6614:	83 81       	ldd	r24, Z+3	; 0x03
    6616:	81 ff       	sbrs	r24, 1
    6618:	bd c1       	rjmp	.+890    	; 0x6994 <vfprintf+0x398>
    661a:	ce 01       	movw	r24, r28
    661c:	01 96       	adiw	r24, 0x01	; 1
    661e:	4c 01       	movw	r8, r24
    6620:	f7 01       	movw	r30, r14
    6622:	93 81       	ldd	r25, Z+3	; 0x03
    6624:	f6 01       	movw	r30, r12
    6626:	93 fd       	sbrc	r25, 3
    6628:	85 91       	lpm	r24, Z+
    662a:	93 ff       	sbrs	r25, 3
    662c:	81 91       	ld	r24, Z+
    662e:	6f 01       	movw	r12, r30
    6630:	88 23       	and	r24, r24
    6632:	09 f4       	brne	.+2      	; 0x6636 <vfprintf+0x3a>
    6634:	ab c1       	rjmp	.+854    	; 0x698c <vfprintf+0x390>
    6636:	85 32       	cpi	r24, 0x25	; 37
    6638:	39 f4       	brne	.+14     	; 0x6648 <vfprintf+0x4c>
    663a:	93 fd       	sbrc	r25, 3
    663c:	85 91       	lpm	r24, Z+
    663e:	93 ff       	sbrs	r25, 3
    6640:	81 91       	ld	r24, Z+
    6642:	6f 01       	movw	r12, r30
    6644:	85 32       	cpi	r24, 0x25	; 37
    6646:	29 f4       	brne	.+10     	; 0x6652 <vfprintf+0x56>
    6648:	b7 01       	movw	r22, r14
    664a:	90 e0       	ldi	r25, 0x00	; 0
    664c:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <fputc>
    6650:	e7 cf       	rjmp	.-50     	; 0x6620 <vfprintf+0x24>
    6652:	51 2c       	mov	r5, r1
    6654:	31 2c       	mov	r3, r1
    6656:	20 e0       	ldi	r18, 0x00	; 0
    6658:	20 32       	cpi	r18, 0x20	; 32
    665a:	a0 f4       	brcc	.+40     	; 0x6684 <vfprintf+0x88>
    665c:	8b 32       	cpi	r24, 0x2B	; 43
    665e:	69 f0       	breq	.+26     	; 0x667a <vfprintf+0x7e>
    6660:	30 f4       	brcc	.+12     	; 0x666e <vfprintf+0x72>
    6662:	80 32       	cpi	r24, 0x20	; 32
    6664:	59 f0       	breq	.+22     	; 0x667c <vfprintf+0x80>
    6666:	83 32       	cpi	r24, 0x23	; 35
    6668:	69 f4       	brne	.+26     	; 0x6684 <vfprintf+0x88>
    666a:	20 61       	ori	r18, 0x10	; 16
    666c:	2c c0       	rjmp	.+88     	; 0x66c6 <vfprintf+0xca>
    666e:	8d 32       	cpi	r24, 0x2D	; 45
    6670:	39 f0       	breq	.+14     	; 0x6680 <vfprintf+0x84>
    6672:	80 33       	cpi	r24, 0x30	; 48
    6674:	39 f4       	brne	.+14     	; 0x6684 <vfprintf+0x88>
    6676:	21 60       	ori	r18, 0x01	; 1
    6678:	26 c0       	rjmp	.+76     	; 0x66c6 <vfprintf+0xca>
    667a:	22 60       	ori	r18, 0x02	; 2
    667c:	24 60       	ori	r18, 0x04	; 4
    667e:	23 c0       	rjmp	.+70     	; 0x66c6 <vfprintf+0xca>
    6680:	28 60       	ori	r18, 0x08	; 8
    6682:	21 c0       	rjmp	.+66     	; 0x66c6 <vfprintf+0xca>
    6684:	27 fd       	sbrc	r18, 7
    6686:	27 c0       	rjmp	.+78     	; 0x66d6 <vfprintf+0xda>
    6688:	30 ed       	ldi	r19, 0xD0	; 208
    668a:	38 0f       	add	r19, r24
    668c:	3a 30       	cpi	r19, 0x0A	; 10
    668e:	78 f4       	brcc	.+30     	; 0x66ae <vfprintf+0xb2>
    6690:	26 ff       	sbrs	r18, 6
    6692:	06 c0       	rjmp	.+12     	; 0x66a0 <vfprintf+0xa4>
    6694:	fa e0       	ldi	r31, 0x0A	; 10
    6696:	5f 9e       	mul	r5, r31
    6698:	30 0d       	add	r19, r0
    669a:	11 24       	eor	r1, r1
    669c:	53 2e       	mov	r5, r19
    669e:	13 c0       	rjmp	.+38     	; 0x66c6 <vfprintf+0xca>
    66a0:	8a e0       	ldi	r24, 0x0A	; 10
    66a2:	38 9e       	mul	r3, r24
    66a4:	30 0d       	add	r19, r0
    66a6:	11 24       	eor	r1, r1
    66a8:	33 2e       	mov	r3, r19
    66aa:	20 62       	ori	r18, 0x20	; 32
    66ac:	0c c0       	rjmp	.+24     	; 0x66c6 <vfprintf+0xca>
    66ae:	8e 32       	cpi	r24, 0x2E	; 46
    66b0:	21 f4       	brne	.+8      	; 0x66ba <vfprintf+0xbe>
    66b2:	26 fd       	sbrc	r18, 6
    66b4:	6b c1       	rjmp	.+726    	; 0x698c <vfprintf+0x390>
    66b6:	20 64       	ori	r18, 0x40	; 64
    66b8:	06 c0       	rjmp	.+12     	; 0x66c6 <vfprintf+0xca>
    66ba:	8c 36       	cpi	r24, 0x6C	; 108
    66bc:	11 f4       	brne	.+4      	; 0x66c2 <vfprintf+0xc6>
    66be:	20 68       	ori	r18, 0x80	; 128
    66c0:	02 c0       	rjmp	.+4      	; 0x66c6 <vfprintf+0xca>
    66c2:	88 36       	cpi	r24, 0x68	; 104
    66c4:	41 f4       	brne	.+16     	; 0x66d6 <vfprintf+0xda>
    66c6:	f6 01       	movw	r30, r12
    66c8:	93 fd       	sbrc	r25, 3
    66ca:	85 91       	lpm	r24, Z+
    66cc:	93 ff       	sbrs	r25, 3
    66ce:	81 91       	ld	r24, Z+
    66d0:	6f 01       	movw	r12, r30
    66d2:	81 11       	cpse	r24, r1
    66d4:	c1 cf       	rjmp	.-126    	; 0x6658 <vfprintf+0x5c>
    66d6:	98 2f       	mov	r25, r24
    66d8:	9f 7d       	andi	r25, 0xDF	; 223
    66da:	95 54       	subi	r25, 0x45	; 69
    66dc:	93 30       	cpi	r25, 0x03	; 3
    66de:	28 f4       	brcc	.+10     	; 0x66ea <vfprintf+0xee>
    66e0:	0c 5f       	subi	r16, 0xFC	; 252
    66e2:	1f 4f       	sbci	r17, 0xFF	; 255
    66e4:	ff e3       	ldi	r31, 0x3F	; 63
    66e6:	f9 83       	std	Y+1, r31	; 0x01
    66e8:	0d c0       	rjmp	.+26     	; 0x6704 <vfprintf+0x108>
    66ea:	83 36       	cpi	r24, 0x63	; 99
    66ec:	31 f0       	breq	.+12     	; 0x66fa <vfprintf+0xfe>
    66ee:	83 37       	cpi	r24, 0x73	; 115
    66f0:	71 f0       	breq	.+28     	; 0x670e <vfprintf+0x112>
    66f2:	83 35       	cpi	r24, 0x53	; 83
    66f4:	09 f0       	breq	.+2      	; 0x66f8 <vfprintf+0xfc>
    66f6:	5b c0       	rjmp	.+182    	; 0x67ae <vfprintf+0x1b2>
    66f8:	22 c0       	rjmp	.+68     	; 0x673e <vfprintf+0x142>
    66fa:	f8 01       	movw	r30, r16
    66fc:	80 81       	ld	r24, Z
    66fe:	89 83       	std	Y+1, r24	; 0x01
    6700:	0e 5f       	subi	r16, 0xFE	; 254
    6702:	1f 4f       	sbci	r17, 0xFF	; 255
    6704:	44 24       	eor	r4, r4
    6706:	43 94       	inc	r4
    6708:	51 2c       	mov	r5, r1
    670a:	54 01       	movw	r10, r8
    670c:	15 c0       	rjmp	.+42     	; 0x6738 <vfprintf+0x13c>
    670e:	38 01       	movw	r6, r16
    6710:	f2 e0       	ldi	r31, 0x02	; 2
    6712:	6f 0e       	add	r6, r31
    6714:	71 1c       	adc	r7, r1
    6716:	f8 01       	movw	r30, r16
    6718:	a0 80       	ld	r10, Z
    671a:	b1 80       	ldd	r11, Z+1	; 0x01
    671c:	26 ff       	sbrs	r18, 6
    671e:	03 c0       	rjmp	.+6      	; 0x6726 <vfprintf+0x12a>
    6720:	65 2d       	mov	r22, r5
    6722:	70 e0       	ldi	r23, 0x00	; 0
    6724:	02 c0       	rjmp	.+4      	; 0x672a <vfprintf+0x12e>
    6726:	6f ef       	ldi	r22, 0xFF	; 255
    6728:	7f ef       	ldi	r23, 0xFF	; 255
    672a:	c5 01       	movw	r24, r10
    672c:	2c 87       	std	Y+12, r18	; 0x0c
    672e:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <strnlen>
    6732:	2c 01       	movw	r4, r24
    6734:	83 01       	movw	r16, r6
    6736:	2c 85       	ldd	r18, Y+12	; 0x0c
    6738:	2f 77       	andi	r18, 0x7F	; 127
    673a:	22 2e       	mov	r2, r18
    673c:	17 c0       	rjmp	.+46     	; 0x676c <vfprintf+0x170>
    673e:	38 01       	movw	r6, r16
    6740:	f2 e0       	ldi	r31, 0x02	; 2
    6742:	6f 0e       	add	r6, r31
    6744:	71 1c       	adc	r7, r1
    6746:	f8 01       	movw	r30, r16
    6748:	a0 80       	ld	r10, Z
    674a:	b1 80       	ldd	r11, Z+1	; 0x01
    674c:	26 ff       	sbrs	r18, 6
    674e:	03 c0       	rjmp	.+6      	; 0x6756 <vfprintf+0x15a>
    6750:	65 2d       	mov	r22, r5
    6752:	70 e0       	ldi	r23, 0x00	; 0
    6754:	02 c0       	rjmp	.+4      	; 0x675a <vfprintf+0x15e>
    6756:	6f ef       	ldi	r22, 0xFF	; 255
    6758:	7f ef       	ldi	r23, 0xFF	; 255
    675a:	c5 01       	movw	r24, r10
    675c:	2c 87       	std	Y+12, r18	; 0x0c
    675e:	0e 94 de 34 	call	0x69bc	; 0x69bc <strnlen_P>
    6762:	2c 01       	movw	r4, r24
    6764:	2c 85       	ldd	r18, Y+12	; 0x0c
    6766:	20 68       	ori	r18, 0x80	; 128
    6768:	22 2e       	mov	r2, r18
    676a:	83 01       	movw	r16, r6
    676c:	23 fc       	sbrc	r2, 3
    676e:	1b c0       	rjmp	.+54     	; 0x67a6 <vfprintf+0x1aa>
    6770:	83 2d       	mov	r24, r3
    6772:	90 e0       	ldi	r25, 0x00	; 0
    6774:	48 16       	cp	r4, r24
    6776:	59 06       	cpc	r5, r25
    6778:	b0 f4       	brcc	.+44     	; 0x67a6 <vfprintf+0x1aa>
    677a:	b7 01       	movw	r22, r14
    677c:	80 e2       	ldi	r24, 0x20	; 32
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <fputc>
    6784:	3a 94       	dec	r3
    6786:	f4 cf       	rjmp	.-24     	; 0x6770 <vfprintf+0x174>
    6788:	f5 01       	movw	r30, r10
    678a:	27 fc       	sbrc	r2, 7
    678c:	85 91       	lpm	r24, Z+
    678e:	27 fe       	sbrs	r2, 7
    6790:	81 91       	ld	r24, Z+
    6792:	5f 01       	movw	r10, r30
    6794:	b7 01       	movw	r22, r14
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <fputc>
    679c:	31 10       	cpse	r3, r1
    679e:	3a 94       	dec	r3
    67a0:	f1 e0       	ldi	r31, 0x01	; 1
    67a2:	4f 1a       	sub	r4, r31
    67a4:	51 08       	sbc	r5, r1
    67a6:	41 14       	cp	r4, r1
    67a8:	51 04       	cpc	r5, r1
    67aa:	71 f7       	brne	.-36     	; 0x6788 <vfprintf+0x18c>
    67ac:	e5 c0       	rjmp	.+458    	; 0x6978 <vfprintf+0x37c>
    67ae:	84 36       	cpi	r24, 0x64	; 100
    67b0:	11 f0       	breq	.+4      	; 0x67b6 <vfprintf+0x1ba>
    67b2:	89 36       	cpi	r24, 0x69	; 105
    67b4:	39 f5       	brne	.+78     	; 0x6804 <vfprintf+0x208>
    67b6:	f8 01       	movw	r30, r16
    67b8:	27 ff       	sbrs	r18, 7
    67ba:	07 c0       	rjmp	.+14     	; 0x67ca <vfprintf+0x1ce>
    67bc:	60 81       	ld	r22, Z
    67be:	71 81       	ldd	r23, Z+1	; 0x01
    67c0:	82 81       	ldd	r24, Z+2	; 0x02
    67c2:	93 81       	ldd	r25, Z+3	; 0x03
    67c4:	0c 5f       	subi	r16, 0xFC	; 252
    67c6:	1f 4f       	sbci	r17, 0xFF	; 255
    67c8:	08 c0       	rjmp	.+16     	; 0x67da <vfprintf+0x1de>
    67ca:	60 81       	ld	r22, Z
    67cc:	71 81       	ldd	r23, Z+1	; 0x01
    67ce:	88 27       	eor	r24, r24
    67d0:	77 fd       	sbrc	r23, 7
    67d2:	80 95       	com	r24
    67d4:	98 2f       	mov	r25, r24
    67d6:	0e 5f       	subi	r16, 0xFE	; 254
    67d8:	1f 4f       	sbci	r17, 0xFF	; 255
    67da:	2f 76       	andi	r18, 0x6F	; 111
    67dc:	b2 2e       	mov	r11, r18
    67de:	97 ff       	sbrs	r25, 7
    67e0:	09 c0       	rjmp	.+18     	; 0x67f4 <vfprintf+0x1f8>
    67e2:	90 95       	com	r25
    67e4:	80 95       	com	r24
    67e6:	70 95       	com	r23
    67e8:	61 95       	neg	r22
    67ea:	7f 4f       	sbci	r23, 0xFF	; 255
    67ec:	8f 4f       	sbci	r24, 0xFF	; 255
    67ee:	9f 4f       	sbci	r25, 0xFF	; 255
    67f0:	20 68       	ori	r18, 0x80	; 128
    67f2:	b2 2e       	mov	r11, r18
    67f4:	2a e0       	ldi	r18, 0x0A	; 10
    67f6:	30 e0       	ldi	r19, 0x00	; 0
    67f8:	a4 01       	movw	r20, r8
    67fa:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <__ultoa_invert>
    67fe:	a8 2e       	mov	r10, r24
    6800:	a8 18       	sub	r10, r8
    6802:	44 c0       	rjmp	.+136    	; 0x688c <vfprintf+0x290>
    6804:	85 37       	cpi	r24, 0x75	; 117
    6806:	29 f4       	brne	.+10     	; 0x6812 <vfprintf+0x216>
    6808:	2f 7e       	andi	r18, 0xEF	; 239
    680a:	b2 2e       	mov	r11, r18
    680c:	2a e0       	ldi	r18, 0x0A	; 10
    680e:	30 e0       	ldi	r19, 0x00	; 0
    6810:	25 c0       	rjmp	.+74     	; 0x685c <vfprintf+0x260>
    6812:	f2 2f       	mov	r31, r18
    6814:	f9 7f       	andi	r31, 0xF9	; 249
    6816:	bf 2e       	mov	r11, r31
    6818:	8f 36       	cpi	r24, 0x6F	; 111
    681a:	c1 f0       	breq	.+48     	; 0x684c <vfprintf+0x250>
    681c:	18 f4       	brcc	.+6      	; 0x6824 <vfprintf+0x228>
    681e:	88 35       	cpi	r24, 0x58	; 88
    6820:	79 f0       	breq	.+30     	; 0x6840 <vfprintf+0x244>
    6822:	b4 c0       	rjmp	.+360    	; 0x698c <vfprintf+0x390>
    6824:	80 37       	cpi	r24, 0x70	; 112
    6826:	19 f0       	breq	.+6      	; 0x682e <vfprintf+0x232>
    6828:	88 37       	cpi	r24, 0x78	; 120
    682a:	21 f0       	breq	.+8      	; 0x6834 <vfprintf+0x238>
    682c:	af c0       	rjmp	.+350    	; 0x698c <vfprintf+0x390>
    682e:	2f 2f       	mov	r18, r31
    6830:	20 61       	ori	r18, 0x10	; 16
    6832:	b2 2e       	mov	r11, r18
    6834:	b4 fe       	sbrs	r11, 4
    6836:	0d c0       	rjmp	.+26     	; 0x6852 <vfprintf+0x256>
    6838:	8b 2d       	mov	r24, r11
    683a:	84 60       	ori	r24, 0x04	; 4
    683c:	b8 2e       	mov	r11, r24
    683e:	09 c0       	rjmp	.+18     	; 0x6852 <vfprintf+0x256>
    6840:	24 ff       	sbrs	r18, 4
    6842:	0a c0       	rjmp	.+20     	; 0x6858 <vfprintf+0x25c>
    6844:	9f 2f       	mov	r25, r31
    6846:	96 60       	ori	r25, 0x06	; 6
    6848:	b9 2e       	mov	r11, r25
    684a:	06 c0       	rjmp	.+12     	; 0x6858 <vfprintf+0x25c>
    684c:	28 e0       	ldi	r18, 0x08	; 8
    684e:	30 e0       	ldi	r19, 0x00	; 0
    6850:	05 c0       	rjmp	.+10     	; 0x685c <vfprintf+0x260>
    6852:	20 e1       	ldi	r18, 0x10	; 16
    6854:	30 e0       	ldi	r19, 0x00	; 0
    6856:	02 c0       	rjmp	.+4      	; 0x685c <vfprintf+0x260>
    6858:	20 e1       	ldi	r18, 0x10	; 16
    685a:	32 e0       	ldi	r19, 0x02	; 2
    685c:	f8 01       	movw	r30, r16
    685e:	b7 fe       	sbrs	r11, 7
    6860:	07 c0       	rjmp	.+14     	; 0x6870 <vfprintf+0x274>
    6862:	60 81       	ld	r22, Z
    6864:	71 81       	ldd	r23, Z+1	; 0x01
    6866:	82 81       	ldd	r24, Z+2	; 0x02
    6868:	93 81       	ldd	r25, Z+3	; 0x03
    686a:	0c 5f       	subi	r16, 0xFC	; 252
    686c:	1f 4f       	sbci	r17, 0xFF	; 255
    686e:	06 c0       	rjmp	.+12     	; 0x687c <vfprintf+0x280>
    6870:	60 81       	ld	r22, Z
    6872:	71 81       	ldd	r23, Z+1	; 0x01
    6874:	80 e0       	ldi	r24, 0x00	; 0
    6876:	90 e0       	ldi	r25, 0x00	; 0
    6878:	0e 5f       	subi	r16, 0xFE	; 254
    687a:	1f 4f       	sbci	r17, 0xFF	; 255
    687c:	a4 01       	movw	r20, r8
    687e:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <__ultoa_invert>
    6882:	a8 2e       	mov	r10, r24
    6884:	a8 18       	sub	r10, r8
    6886:	fb 2d       	mov	r31, r11
    6888:	ff 77       	andi	r31, 0x7F	; 127
    688a:	bf 2e       	mov	r11, r31
    688c:	b6 fe       	sbrs	r11, 6
    688e:	0b c0       	rjmp	.+22     	; 0x68a6 <vfprintf+0x2aa>
    6890:	2b 2d       	mov	r18, r11
    6892:	2e 7f       	andi	r18, 0xFE	; 254
    6894:	a5 14       	cp	r10, r5
    6896:	50 f4       	brcc	.+20     	; 0x68ac <vfprintf+0x2b0>
    6898:	b4 fe       	sbrs	r11, 4
    689a:	0a c0       	rjmp	.+20     	; 0x68b0 <vfprintf+0x2b4>
    689c:	b2 fc       	sbrc	r11, 2
    689e:	08 c0       	rjmp	.+16     	; 0x68b0 <vfprintf+0x2b4>
    68a0:	2b 2d       	mov	r18, r11
    68a2:	2e 7e       	andi	r18, 0xEE	; 238
    68a4:	05 c0       	rjmp	.+10     	; 0x68b0 <vfprintf+0x2b4>
    68a6:	7a 2c       	mov	r7, r10
    68a8:	2b 2d       	mov	r18, r11
    68aa:	03 c0       	rjmp	.+6      	; 0x68b2 <vfprintf+0x2b6>
    68ac:	7a 2c       	mov	r7, r10
    68ae:	01 c0       	rjmp	.+2      	; 0x68b2 <vfprintf+0x2b6>
    68b0:	75 2c       	mov	r7, r5
    68b2:	24 ff       	sbrs	r18, 4
    68b4:	0d c0       	rjmp	.+26     	; 0x68d0 <vfprintf+0x2d4>
    68b6:	fe 01       	movw	r30, r28
    68b8:	ea 0d       	add	r30, r10
    68ba:	f1 1d       	adc	r31, r1
    68bc:	80 81       	ld	r24, Z
    68be:	80 33       	cpi	r24, 0x30	; 48
    68c0:	11 f4       	brne	.+4      	; 0x68c6 <vfprintf+0x2ca>
    68c2:	29 7e       	andi	r18, 0xE9	; 233
    68c4:	09 c0       	rjmp	.+18     	; 0x68d8 <vfprintf+0x2dc>
    68c6:	22 ff       	sbrs	r18, 2
    68c8:	06 c0       	rjmp	.+12     	; 0x68d6 <vfprintf+0x2da>
    68ca:	73 94       	inc	r7
    68cc:	73 94       	inc	r7
    68ce:	04 c0       	rjmp	.+8      	; 0x68d8 <vfprintf+0x2dc>
    68d0:	82 2f       	mov	r24, r18
    68d2:	86 78       	andi	r24, 0x86	; 134
    68d4:	09 f0       	breq	.+2      	; 0x68d8 <vfprintf+0x2dc>
    68d6:	73 94       	inc	r7
    68d8:	23 fd       	sbrc	r18, 3
    68da:	13 c0       	rjmp	.+38     	; 0x6902 <vfprintf+0x306>
    68dc:	20 ff       	sbrs	r18, 0
    68de:	06 c0       	rjmp	.+12     	; 0x68ec <vfprintf+0x2f0>
    68e0:	5a 2c       	mov	r5, r10
    68e2:	73 14       	cp	r7, r3
    68e4:	18 f4       	brcc	.+6      	; 0x68ec <vfprintf+0x2f0>
    68e6:	53 0c       	add	r5, r3
    68e8:	57 18       	sub	r5, r7
    68ea:	73 2c       	mov	r7, r3
    68ec:	73 14       	cp	r7, r3
    68ee:	68 f4       	brcc	.+26     	; 0x690a <vfprintf+0x30e>
    68f0:	b7 01       	movw	r22, r14
    68f2:	80 e2       	ldi	r24, 0x20	; 32
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	2c 87       	std	Y+12, r18	; 0x0c
    68f8:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <fputc>
    68fc:	73 94       	inc	r7
    68fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    6900:	f5 cf       	rjmp	.-22     	; 0x68ec <vfprintf+0x2f0>
    6902:	73 14       	cp	r7, r3
    6904:	10 f4       	brcc	.+4      	; 0x690a <vfprintf+0x30e>
    6906:	37 18       	sub	r3, r7
    6908:	01 c0       	rjmp	.+2      	; 0x690c <vfprintf+0x310>
    690a:	31 2c       	mov	r3, r1
    690c:	24 ff       	sbrs	r18, 4
    690e:	12 c0       	rjmp	.+36     	; 0x6934 <vfprintf+0x338>
    6910:	b7 01       	movw	r22, r14
    6912:	80 e3       	ldi	r24, 0x30	; 48
    6914:	90 e0       	ldi	r25, 0x00	; 0
    6916:	2c 87       	std	Y+12, r18	; 0x0c
    6918:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <fputc>
    691c:	2c 85       	ldd	r18, Y+12	; 0x0c
    691e:	22 ff       	sbrs	r18, 2
    6920:	17 c0       	rjmp	.+46     	; 0x6950 <vfprintf+0x354>
    6922:	21 ff       	sbrs	r18, 1
    6924:	03 c0       	rjmp	.+6      	; 0x692c <vfprintf+0x330>
    6926:	88 e5       	ldi	r24, 0x58	; 88
    6928:	90 e0       	ldi	r25, 0x00	; 0
    692a:	02 c0       	rjmp	.+4      	; 0x6930 <vfprintf+0x334>
    692c:	88 e7       	ldi	r24, 0x78	; 120
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	b7 01       	movw	r22, r14
    6932:	0c c0       	rjmp	.+24     	; 0x694c <vfprintf+0x350>
    6934:	82 2f       	mov	r24, r18
    6936:	86 78       	andi	r24, 0x86	; 134
    6938:	59 f0       	breq	.+22     	; 0x6950 <vfprintf+0x354>
    693a:	21 fd       	sbrc	r18, 1
    693c:	02 c0       	rjmp	.+4      	; 0x6942 <vfprintf+0x346>
    693e:	80 e2       	ldi	r24, 0x20	; 32
    6940:	01 c0       	rjmp	.+2      	; 0x6944 <vfprintf+0x348>
    6942:	8b e2       	ldi	r24, 0x2B	; 43
    6944:	27 fd       	sbrc	r18, 7
    6946:	8d e2       	ldi	r24, 0x2D	; 45
    6948:	b7 01       	movw	r22, r14
    694a:	90 e0       	ldi	r25, 0x00	; 0
    694c:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <fputc>
    6950:	a5 14       	cp	r10, r5
    6952:	38 f4       	brcc	.+14     	; 0x6962 <vfprintf+0x366>
    6954:	b7 01       	movw	r22, r14
    6956:	80 e3       	ldi	r24, 0x30	; 48
    6958:	90 e0       	ldi	r25, 0x00	; 0
    695a:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <fputc>
    695e:	5a 94       	dec	r5
    6960:	f7 cf       	rjmp	.-18     	; 0x6950 <vfprintf+0x354>
    6962:	aa 94       	dec	r10
    6964:	f4 01       	movw	r30, r8
    6966:	ea 0d       	add	r30, r10
    6968:	f1 1d       	adc	r31, r1
    696a:	80 81       	ld	r24, Z
    696c:	b7 01       	movw	r22, r14
    696e:	90 e0       	ldi	r25, 0x00	; 0
    6970:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <fputc>
    6974:	a1 10       	cpse	r10, r1
    6976:	f5 cf       	rjmp	.-22     	; 0x6962 <vfprintf+0x366>
    6978:	33 20       	and	r3, r3
    697a:	09 f4       	brne	.+2      	; 0x697e <vfprintf+0x382>
    697c:	51 ce       	rjmp	.-862    	; 0x6620 <vfprintf+0x24>
    697e:	b7 01       	movw	r22, r14
    6980:	80 e2       	ldi	r24, 0x20	; 32
    6982:	90 e0       	ldi	r25, 0x00	; 0
    6984:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <fputc>
    6988:	3a 94       	dec	r3
    698a:	f6 cf       	rjmp	.-20     	; 0x6978 <vfprintf+0x37c>
    698c:	f7 01       	movw	r30, r14
    698e:	86 81       	ldd	r24, Z+6	; 0x06
    6990:	97 81       	ldd	r25, Z+7	; 0x07
    6992:	02 c0       	rjmp	.+4      	; 0x6998 <vfprintf+0x39c>
    6994:	8f ef       	ldi	r24, 0xFF	; 255
    6996:	9f ef       	ldi	r25, 0xFF	; 255
    6998:	2c 96       	adiw	r28, 0x0c	; 12
    699a:	e2 e1       	ldi	r30, 0x12	; 18
    699c:	0c 94 21 36 	jmp	0x6c42	; 0x6c42 <__epilogue_restores__>

000069a0 <__eerd_word_m32>:
    69a0:	a8 e1       	ldi	r26, 0x18	; 24
    69a2:	b0 e0       	ldi	r27, 0x00	; 0
    69a4:	42 e0       	ldi	r20, 0x02	; 2
    69a6:	50 e0       	ldi	r21, 0x00	; 0
    69a8:	0c 94 86 35 	jmp	0x6b0c	; 0x6b0c <__eerd_blraw_m32>

000069ac <__eewr_word_m32>:
    69ac:	0e 94 94 35 	call	0x6b28	; 0x6b28 <__eewr_byte_m32>
    69b0:	27 2f       	mov	r18, r23
    69b2:	0c 94 95 35 	jmp	0x6b2a	; 0x6b2a <__eewr_r18_m32>

000069b6 <__ctype_isfalse>:
    69b6:	99 27       	eor	r25, r25
    69b8:	88 27       	eor	r24, r24

000069ba <__ctype_istrue>:
    69ba:	08 95       	ret

000069bc <strnlen_P>:
    69bc:	fc 01       	movw	r30, r24
    69be:	05 90       	lpm	r0, Z+
    69c0:	61 50       	subi	r22, 0x01	; 1
    69c2:	70 40       	sbci	r23, 0x00	; 0
    69c4:	01 10       	cpse	r0, r1
    69c6:	d8 f7       	brcc	.-10     	; 0x69be <strnlen_P+0x2>
    69c8:	80 95       	com	r24
    69ca:	90 95       	com	r25
    69cc:	8e 0f       	add	r24, r30
    69ce:	9f 1f       	adc	r25, r31
    69d0:	08 95       	ret

000069d2 <strnlen>:
    69d2:	fc 01       	movw	r30, r24
    69d4:	61 50       	subi	r22, 0x01	; 1
    69d6:	70 40       	sbci	r23, 0x00	; 0
    69d8:	01 90       	ld	r0, Z+
    69da:	01 10       	cpse	r0, r1
    69dc:	d8 f7       	brcc	.-10     	; 0x69d4 <strnlen+0x2>
    69de:	80 95       	com	r24
    69e0:	90 95       	com	r25
    69e2:	8e 0f       	add	r24, r30
    69e4:	9f 1f       	adc	r25, r31
    69e6:	08 95       	ret

000069e8 <fputc>:
    69e8:	0f 93       	push	r16
    69ea:	1f 93       	push	r17
    69ec:	cf 93       	push	r28
    69ee:	df 93       	push	r29
    69f0:	18 2f       	mov	r17, r24
    69f2:	09 2f       	mov	r16, r25
    69f4:	eb 01       	movw	r28, r22
    69f6:	8b 81       	ldd	r24, Y+3	; 0x03
    69f8:	81 fd       	sbrc	r24, 1
    69fa:	03 c0       	rjmp	.+6      	; 0x6a02 <fputc+0x1a>
    69fc:	8f ef       	ldi	r24, 0xFF	; 255
    69fe:	9f ef       	ldi	r25, 0xFF	; 255
    6a00:	20 c0       	rjmp	.+64     	; 0x6a42 <fputc+0x5a>
    6a02:	82 ff       	sbrs	r24, 2
    6a04:	10 c0       	rjmp	.+32     	; 0x6a26 <fputc+0x3e>
    6a06:	4e 81       	ldd	r20, Y+6	; 0x06
    6a08:	5f 81       	ldd	r21, Y+7	; 0x07
    6a0a:	2c 81       	ldd	r18, Y+4	; 0x04
    6a0c:	3d 81       	ldd	r19, Y+5	; 0x05
    6a0e:	42 17       	cp	r20, r18
    6a10:	53 07       	cpc	r21, r19
    6a12:	7c f4       	brge	.+30     	; 0x6a32 <fputc+0x4a>
    6a14:	e8 81       	ld	r30, Y
    6a16:	f9 81       	ldd	r31, Y+1	; 0x01
    6a18:	9f 01       	movw	r18, r30
    6a1a:	2f 5f       	subi	r18, 0xFF	; 255
    6a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a1e:	39 83       	std	Y+1, r19	; 0x01
    6a20:	28 83       	st	Y, r18
    6a22:	10 83       	st	Z, r17
    6a24:	06 c0       	rjmp	.+12     	; 0x6a32 <fputc+0x4a>
    6a26:	e8 85       	ldd	r30, Y+8	; 0x08
    6a28:	f9 85       	ldd	r31, Y+9	; 0x09
    6a2a:	81 2f       	mov	r24, r17
    6a2c:	09 95       	icall
    6a2e:	89 2b       	or	r24, r25
    6a30:	29 f7       	brne	.-54     	; 0x69fc <fputc+0x14>
    6a32:	2e 81       	ldd	r18, Y+6	; 0x06
    6a34:	3f 81       	ldd	r19, Y+7	; 0x07
    6a36:	2f 5f       	subi	r18, 0xFF	; 255
    6a38:	3f 4f       	sbci	r19, 0xFF	; 255
    6a3a:	3f 83       	std	Y+7, r19	; 0x07
    6a3c:	2e 83       	std	Y+6, r18	; 0x06
    6a3e:	81 2f       	mov	r24, r17
    6a40:	90 2f       	mov	r25, r16
    6a42:	df 91       	pop	r29
    6a44:	cf 91       	pop	r28
    6a46:	1f 91       	pop	r17
    6a48:	0f 91       	pop	r16
    6a4a:	08 95       	ret

00006a4c <__ultoa_invert>:
    6a4c:	fa 01       	movw	r30, r20
    6a4e:	aa 27       	eor	r26, r26
    6a50:	28 30       	cpi	r18, 0x08	; 8
    6a52:	51 f1       	breq	.+84     	; 0x6aa8 <__ultoa_invert+0x5c>
    6a54:	20 31       	cpi	r18, 0x10	; 16
    6a56:	81 f1       	breq	.+96     	; 0x6ab8 <__ultoa_invert+0x6c>
    6a58:	e8 94       	clt
    6a5a:	6f 93       	push	r22
    6a5c:	6e 7f       	andi	r22, 0xFE	; 254
    6a5e:	6e 5f       	subi	r22, 0xFE	; 254
    6a60:	7f 4f       	sbci	r23, 0xFF	; 255
    6a62:	8f 4f       	sbci	r24, 0xFF	; 255
    6a64:	9f 4f       	sbci	r25, 0xFF	; 255
    6a66:	af 4f       	sbci	r26, 0xFF	; 255
    6a68:	b1 e0       	ldi	r27, 0x01	; 1
    6a6a:	3e d0       	rcall	.+124    	; 0x6ae8 <__ultoa_invert+0x9c>
    6a6c:	b4 e0       	ldi	r27, 0x04	; 4
    6a6e:	3c d0       	rcall	.+120    	; 0x6ae8 <__ultoa_invert+0x9c>
    6a70:	67 0f       	add	r22, r23
    6a72:	78 1f       	adc	r23, r24
    6a74:	89 1f       	adc	r24, r25
    6a76:	9a 1f       	adc	r25, r26
    6a78:	a1 1d       	adc	r26, r1
    6a7a:	68 0f       	add	r22, r24
    6a7c:	79 1f       	adc	r23, r25
    6a7e:	8a 1f       	adc	r24, r26
    6a80:	91 1d       	adc	r25, r1
    6a82:	a1 1d       	adc	r26, r1
    6a84:	6a 0f       	add	r22, r26
    6a86:	71 1d       	adc	r23, r1
    6a88:	81 1d       	adc	r24, r1
    6a8a:	91 1d       	adc	r25, r1
    6a8c:	a1 1d       	adc	r26, r1
    6a8e:	20 d0       	rcall	.+64     	; 0x6ad0 <__ultoa_invert+0x84>
    6a90:	09 f4       	brne	.+2      	; 0x6a94 <__ultoa_invert+0x48>
    6a92:	68 94       	set
    6a94:	3f 91       	pop	r19
    6a96:	2a e0       	ldi	r18, 0x0A	; 10
    6a98:	26 9f       	mul	r18, r22
    6a9a:	11 24       	eor	r1, r1
    6a9c:	30 19       	sub	r19, r0
    6a9e:	30 5d       	subi	r19, 0xD0	; 208
    6aa0:	31 93       	st	Z+, r19
    6aa2:	de f6       	brtc	.-74     	; 0x6a5a <__ultoa_invert+0xe>
    6aa4:	cf 01       	movw	r24, r30
    6aa6:	08 95       	ret
    6aa8:	46 2f       	mov	r20, r22
    6aaa:	47 70       	andi	r20, 0x07	; 7
    6aac:	40 5d       	subi	r20, 0xD0	; 208
    6aae:	41 93       	st	Z+, r20
    6ab0:	b3 e0       	ldi	r27, 0x03	; 3
    6ab2:	0f d0       	rcall	.+30     	; 0x6ad2 <__ultoa_invert+0x86>
    6ab4:	c9 f7       	brne	.-14     	; 0x6aa8 <__ultoa_invert+0x5c>
    6ab6:	f6 cf       	rjmp	.-20     	; 0x6aa4 <__ultoa_invert+0x58>
    6ab8:	46 2f       	mov	r20, r22
    6aba:	4f 70       	andi	r20, 0x0F	; 15
    6abc:	40 5d       	subi	r20, 0xD0	; 208
    6abe:	4a 33       	cpi	r20, 0x3A	; 58
    6ac0:	18 f0       	brcs	.+6      	; 0x6ac8 <__ultoa_invert+0x7c>
    6ac2:	49 5d       	subi	r20, 0xD9	; 217
    6ac4:	31 fd       	sbrc	r19, 1
    6ac6:	40 52       	subi	r20, 0x20	; 32
    6ac8:	41 93       	st	Z+, r20
    6aca:	02 d0       	rcall	.+4      	; 0x6ad0 <__ultoa_invert+0x84>
    6acc:	a9 f7       	brne	.-22     	; 0x6ab8 <__ultoa_invert+0x6c>
    6ace:	ea cf       	rjmp	.-44     	; 0x6aa4 <__ultoa_invert+0x58>
    6ad0:	b4 e0       	ldi	r27, 0x04	; 4
    6ad2:	a6 95       	lsr	r26
    6ad4:	97 95       	ror	r25
    6ad6:	87 95       	ror	r24
    6ad8:	77 95       	ror	r23
    6ada:	67 95       	ror	r22
    6adc:	ba 95       	dec	r27
    6ade:	c9 f7       	brne	.-14     	; 0x6ad2 <__ultoa_invert+0x86>
    6ae0:	00 97       	sbiw	r24, 0x00	; 0
    6ae2:	61 05       	cpc	r22, r1
    6ae4:	71 05       	cpc	r23, r1
    6ae6:	08 95       	ret
    6ae8:	9b 01       	movw	r18, r22
    6aea:	ac 01       	movw	r20, r24
    6aec:	0a 2e       	mov	r0, r26
    6aee:	06 94       	lsr	r0
    6af0:	57 95       	ror	r21
    6af2:	47 95       	ror	r20
    6af4:	37 95       	ror	r19
    6af6:	27 95       	ror	r18
    6af8:	ba 95       	dec	r27
    6afa:	c9 f7       	brne	.-14     	; 0x6aee <__ultoa_invert+0xa2>
    6afc:	62 0f       	add	r22, r18
    6afe:	73 1f       	adc	r23, r19
    6b00:	84 1f       	adc	r24, r20
    6b02:	95 1f       	adc	r25, r21
    6b04:	a0 1d       	adc	r26, r0
    6b06:	08 95       	ret

00006b08 <__eerd_block_m32>:
    6b08:	dc 01       	movw	r26, r24
    6b0a:	cb 01       	movw	r24, r22

00006b0c <__eerd_blraw_m32>:
    6b0c:	fc 01       	movw	r30, r24
    6b0e:	e1 99       	sbic	0x1c, 1	; 28
    6b10:	fe cf       	rjmp	.-4      	; 0x6b0e <__eerd_blraw_m32+0x2>
    6b12:	06 c0       	rjmp	.+12     	; 0x6b20 <__eerd_blraw_m32+0x14>
    6b14:	ff bb       	out	0x1f, r31	; 31
    6b16:	ee bb       	out	0x1e, r30	; 30
    6b18:	e0 9a       	sbi	0x1c, 0	; 28
    6b1a:	31 96       	adiw	r30, 0x01	; 1
    6b1c:	0d b2       	in	r0, 0x1d	; 29
    6b1e:	0d 92       	st	X+, r0
    6b20:	41 50       	subi	r20, 0x01	; 1
    6b22:	50 40       	sbci	r21, 0x00	; 0
    6b24:	b8 f7       	brcc	.-18     	; 0x6b14 <__eerd_blraw_m32+0x8>
    6b26:	08 95       	ret

00006b28 <__eewr_byte_m32>:
    6b28:	26 2f       	mov	r18, r22

00006b2a <__eewr_r18_m32>:
    6b2a:	e1 99       	sbic	0x1c, 1	; 28
    6b2c:	fe cf       	rjmp	.-4      	; 0x6b2a <__eewr_r18_m32>
    6b2e:	9f bb       	out	0x1f, r25	; 31
    6b30:	8e bb       	out	0x1e, r24	; 30
    6b32:	2d bb       	out	0x1d, r18	; 29
    6b34:	0f b6       	in	r0, 0x3f	; 63
    6b36:	f8 94       	cli
    6b38:	e2 9a       	sbi	0x1c, 2	; 28
    6b3a:	e1 9a       	sbi	0x1c, 1	; 28
    6b3c:	0f be       	out	0x3f, r0	; 63
    6b3e:	01 96       	adiw	r24, 0x01	; 1
    6b40:	08 95       	ret

00006b42 <__mulsi3>:
    6b42:	db 01       	movw	r26, r22
    6b44:	8f 93       	push	r24
    6b46:	9f 93       	push	r25
    6b48:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <__muluhisi3>
    6b4c:	bf 91       	pop	r27
    6b4e:	af 91       	pop	r26
    6b50:	a2 9f       	mul	r26, r18
    6b52:	80 0d       	add	r24, r0
    6b54:	91 1d       	adc	r25, r1
    6b56:	a3 9f       	mul	r26, r19
    6b58:	90 0d       	add	r25, r0
    6b5a:	b2 9f       	mul	r27, r18
    6b5c:	90 0d       	add	r25, r0
    6b5e:	11 24       	eor	r1, r1
    6b60:	08 95       	ret

00006b62 <__udivmodsi4>:
    6b62:	a1 e2       	ldi	r26, 0x21	; 33
    6b64:	1a 2e       	mov	r1, r26
    6b66:	aa 1b       	sub	r26, r26
    6b68:	bb 1b       	sub	r27, r27
    6b6a:	fd 01       	movw	r30, r26
    6b6c:	0d c0       	rjmp	.+26     	; 0x6b88 <__udivmodsi4_ep>

00006b6e <__udivmodsi4_loop>:
    6b6e:	aa 1f       	adc	r26, r26
    6b70:	bb 1f       	adc	r27, r27
    6b72:	ee 1f       	adc	r30, r30
    6b74:	ff 1f       	adc	r31, r31
    6b76:	a2 17       	cp	r26, r18
    6b78:	b3 07       	cpc	r27, r19
    6b7a:	e4 07       	cpc	r30, r20
    6b7c:	f5 07       	cpc	r31, r21
    6b7e:	20 f0       	brcs	.+8      	; 0x6b88 <__udivmodsi4_ep>
    6b80:	a2 1b       	sub	r26, r18
    6b82:	b3 0b       	sbc	r27, r19
    6b84:	e4 0b       	sbc	r30, r20
    6b86:	f5 0b       	sbc	r31, r21

00006b88 <__udivmodsi4_ep>:
    6b88:	66 1f       	adc	r22, r22
    6b8a:	77 1f       	adc	r23, r23
    6b8c:	88 1f       	adc	r24, r24
    6b8e:	99 1f       	adc	r25, r25
    6b90:	1a 94       	dec	r1
    6b92:	69 f7       	brne	.-38     	; 0x6b6e <__udivmodsi4_loop>
    6b94:	60 95       	com	r22
    6b96:	70 95       	com	r23
    6b98:	80 95       	com	r24
    6b9a:	90 95       	com	r25
    6b9c:	9b 01       	movw	r18, r22
    6b9e:	ac 01       	movw	r20, r24
    6ba0:	bd 01       	movw	r22, r26
    6ba2:	cf 01       	movw	r24, r30
    6ba4:	08 95       	ret

00006ba6 <__divmodsi4>:
    6ba6:	05 2e       	mov	r0, r21
    6ba8:	97 fb       	bst	r25, 7
    6baa:	1e f4       	brtc	.+6      	; 0x6bb2 <__divmodsi4+0xc>
    6bac:	00 94       	com	r0
    6bae:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <__negsi2>
    6bb2:	57 fd       	sbrc	r21, 7
    6bb4:	07 d0       	rcall	.+14     	; 0x6bc4 <__divmodsi4_neg2>
    6bb6:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__udivmodsi4>
    6bba:	07 fc       	sbrc	r0, 7
    6bbc:	03 d0       	rcall	.+6      	; 0x6bc4 <__divmodsi4_neg2>
    6bbe:	4e f4       	brtc	.+18     	; 0x6bd2 <__divmodsi4_exit>
    6bc0:	0c 94 ea 35 	jmp	0x6bd4	; 0x6bd4 <__negsi2>

00006bc4 <__divmodsi4_neg2>:
    6bc4:	50 95       	com	r21
    6bc6:	40 95       	com	r20
    6bc8:	30 95       	com	r19
    6bca:	21 95       	neg	r18
    6bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    6bce:	4f 4f       	sbci	r20, 0xFF	; 255
    6bd0:	5f 4f       	sbci	r21, 0xFF	; 255

00006bd2 <__divmodsi4_exit>:
    6bd2:	08 95       	ret

00006bd4 <__negsi2>:
    6bd4:	90 95       	com	r25
    6bd6:	80 95       	com	r24
    6bd8:	70 95       	com	r23
    6bda:	61 95       	neg	r22
    6bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    6bde:	8f 4f       	sbci	r24, 0xFF	; 255
    6be0:	9f 4f       	sbci	r25, 0xFF	; 255
    6be2:	08 95       	ret

00006be4 <__muluhisi3>:
    6be4:	0e 94 3c 36 	call	0x6c78	; 0x6c78 <__umulhisi3>
    6be8:	a5 9f       	mul	r26, r21
    6bea:	90 0d       	add	r25, r0
    6bec:	b4 9f       	mul	r27, r20
    6bee:	90 0d       	add	r25, r0
    6bf0:	a4 9f       	mul	r26, r20
    6bf2:	80 0d       	add	r24, r0
    6bf4:	91 1d       	adc	r25, r1
    6bf6:	11 24       	eor	r1, r1
    6bf8:	08 95       	ret

00006bfa <__mulshisi3>:
    6bfa:	b7 ff       	sbrs	r27, 7
    6bfc:	0c 94 f2 35 	jmp	0x6be4	; 0x6be4 <__muluhisi3>

00006c00 <__mulohisi3>:
    6c00:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <__muluhisi3>
    6c04:	82 1b       	sub	r24, r18
    6c06:	93 0b       	sbc	r25, r19
    6c08:	08 95       	ret

00006c0a <__prologue_saves__>:
    6c0a:	2f 92       	push	r2
    6c0c:	3f 92       	push	r3
    6c0e:	4f 92       	push	r4
    6c10:	5f 92       	push	r5
    6c12:	6f 92       	push	r6
    6c14:	7f 92       	push	r7
    6c16:	8f 92       	push	r8
    6c18:	9f 92       	push	r9
    6c1a:	af 92       	push	r10
    6c1c:	bf 92       	push	r11
    6c1e:	cf 92       	push	r12
    6c20:	df 92       	push	r13
    6c22:	ef 92       	push	r14
    6c24:	ff 92       	push	r15
    6c26:	0f 93       	push	r16
    6c28:	1f 93       	push	r17
    6c2a:	cf 93       	push	r28
    6c2c:	df 93       	push	r29
    6c2e:	cd b7       	in	r28, 0x3d	; 61
    6c30:	de b7       	in	r29, 0x3e	; 62
    6c32:	ca 1b       	sub	r28, r26
    6c34:	db 0b       	sbc	r29, r27
    6c36:	0f b6       	in	r0, 0x3f	; 63
    6c38:	f8 94       	cli
    6c3a:	de bf       	out	0x3e, r29	; 62
    6c3c:	0f be       	out	0x3f, r0	; 63
    6c3e:	cd bf       	out	0x3d, r28	; 61
    6c40:	09 94       	ijmp

00006c42 <__epilogue_restores__>:
    6c42:	2a 88       	ldd	r2, Y+18	; 0x12
    6c44:	39 88       	ldd	r3, Y+17	; 0x11
    6c46:	48 88       	ldd	r4, Y+16	; 0x10
    6c48:	5f 84       	ldd	r5, Y+15	; 0x0f
    6c4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    6c4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    6c4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6c50:	9b 84       	ldd	r9, Y+11	; 0x0b
    6c52:	aa 84       	ldd	r10, Y+10	; 0x0a
    6c54:	b9 84       	ldd	r11, Y+9	; 0x09
    6c56:	c8 84       	ldd	r12, Y+8	; 0x08
    6c58:	df 80       	ldd	r13, Y+7	; 0x07
    6c5a:	ee 80       	ldd	r14, Y+6	; 0x06
    6c5c:	fd 80       	ldd	r15, Y+5	; 0x05
    6c5e:	0c 81       	ldd	r16, Y+4	; 0x04
    6c60:	1b 81       	ldd	r17, Y+3	; 0x03
    6c62:	aa 81       	ldd	r26, Y+2	; 0x02
    6c64:	b9 81       	ldd	r27, Y+1	; 0x01
    6c66:	ce 0f       	add	r28, r30
    6c68:	d1 1d       	adc	r29, r1
    6c6a:	0f b6       	in	r0, 0x3f	; 63
    6c6c:	f8 94       	cli
    6c6e:	de bf       	out	0x3e, r29	; 62
    6c70:	0f be       	out	0x3f, r0	; 63
    6c72:	cd bf       	out	0x3d, r28	; 61
    6c74:	ed 01       	movw	r28, r26
    6c76:	08 95       	ret

00006c78 <__umulhisi3>:
    6c78:	a2 9f       	mul	r26, r18
    6c7a:	b0 01       	movw	r22, r0
    6c7c:	b3 9f       	mul	r27, r19
    6c7e:	c0 01       	movw	r24, r0
    6c80:	a3 9f       	mul	r26, r19
    6c82:	70 0d       	add	r23, r0
    6c84:	81 1d       	adc	r24, r1
    6c86:	11 24       	eor	r1, r1
    6c88:	91 1d       	adc	r25, r1
    6c8a:	b2 9f       	mul	r27, r18
    6c8c:	70 0d       	add	r23, r0
    6c8e:	81 1d       	adc	r24, r1
    6c90:	11 24       	eor	r1, r1
    6c92:	91 1d       	adc	r25, r1
    6c94:	08 95       	ret

00006c96 <_exit>:
    6c96:	f8 94       	cli

00006c98 <__stop_program>:
    6c98:	ff cf       	rjmp	.-2      	; 0x6c98 <__stop_program>
