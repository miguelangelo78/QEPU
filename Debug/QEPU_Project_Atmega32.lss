
QEPU_Project_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000753e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00800060  0000753e  000075f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080014c  0080014c  000076de  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000076de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000076e0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  0000773c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000126e3  00000000  00000000  00007b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c2a  00000000  00000000  0001a20f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000175b  00000000  00000000  0001be39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014d0  00000000  00000000  0001d594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001141  00000000  00000000  0001ea64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000680f  00000000  00000000  0001fba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  000263b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__ctors_end>
       4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      10:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      14:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      18:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      1c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      20:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      24:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      28:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      2c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      30:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      34:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      38:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      3c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      40:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      44:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      4c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      50:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      54:	4e 21       	and	r20, r14
      56:	72 21       	and	r23, r2
      58:	8b 21       	and	r24, r11
      5a:	9a 21       	and	r25, r10
      5c:	a9 21       	and	r26, r9
      5e:	ba 21       	and	r27, r10
      60:	c3 21       	and	r28, r3
      62:	cc 21       	and	r28, r12
      64:	d9 21       	and	r29, r9
      66:	e6 21       	and	r30, r6
      68:	f1 21       	and	r31, r1
      6a:	fc 21       	and	r31, r12
      6c:	0d 22       	and	r0, r29
      6e:	14 22       	and	r1, r20
      70:	21 22       	and	r2, r17
      72:	25 22       	and	r2, r21
      74:	3f 22       	and	r3, r31
      76:	5e 22       	and	r5, r30
      78:	7d 22       	and	r7, r29
      7a:	9c 22       	and	r9, r28
      7c:	bb 22       	and	r11, r27
      7e:	da 22       	and	r13, r26
      80:	f9 22       	and	r15, r25
      82:	18 23       	and	r17, r24
      84:	2c 23       	and	r18, r28
      86:	39 23       	and	r19, r25
      88:	42 23       	and	r20, r18
      8a:	56 23       	and	r21, r22
      8c:	6a 23       	and	r22, r26
      8e:	7f 23       	and	r23, r31
      90:	9c 23       	and	r25, r28
      92:	b0 23       	and	r27, r16
      94:	c4 23       	and	r28, r20
      96:	d9 23       	and	r29, r25
      98:	ed 23       	and	r30, r29
      9a:	02 24       	eor	r0, r2
      9c:	11 24       	eor	r1, r1
      9e:	27 24       	eor	r2, r7
      a0:	3d 24       	eor	r3, r13
      a2:	43 24       	eor	r4, r3
      a4:	28 2a       	or	r2, r24
      a6:	4b 24       	eor	r4, r11
      a8:	58 24       	eor	r5, r8
      aa:	86 24       	eor	r8, r6
      ac:	b4 24       	eor	r11, r4
      ae:	e2 24       	eor	r14, r2
      b0:	10 25       	eor	r17, r0
      b2:	3e 25       	eor	r19, r14
      b4:	6c 25       	eor	r22, r12
      b6:	9c 25       	eor	r25, r12
      b8:	cc 25       	eor	r28, r12
      ba:	fc 25       	eor	r31, r12
      bc:	57 26       	eor	r5, r23
      be:	b2 26       	eor	r11, r18
      c0:	0d 27       	eor	r16, r29
      c2:	68 27       	eor	r22, r24
      c4:	c3 27       	eor	r28, r19
      c6:	1e 28       	or	r1, r14
      c8:	79 28       	or	r7, r9
      ca:	04 29       	or	r16, r4
      cc:	8f 29       	or	r24, r15
      ce:	08 4a       	sbci	r16, 0xA8	; 168
      d0:	d7 3b       	cpi	r29, 0xB7	; 183
      d2:	3b ce       	rjmp	.-906    	; 0xfffffd4a <__eeprom_end+0xff7efd48>
      d4:	01 6e       	ori	r16, 0xE1	; 225
      d6:	84 bc       	out	0x24, r8	; 36
      d8:	bf fd       	.word	0xfdbf	; ????
      da:	c1 2f       	mov	r28, r17
      dc:	3d 6c       	ori	r19, 0xCD	; 205
      de:	74 31       	cpi	r23, 0x14	; 20
      e0:	9a bd       	out	0x2a, r25	; 42
      e2:	56 83       	std	Z+6, r21	; 0x06
      e4:	3d da       	rcall	.-2950   	; 0xfffff560 <__eeprom_end+0xff7ef55e>
      e6:	3d 00       	.word	0x003d	; ????
      e8:	c7 7f       	andi	r28, 0xF7	; 247
      ea:	11 be       	out	0x31, r1	; 49
      ec:	d9 e4       	ldi	r29, 0x49	; 73
      ee:	bb 4c       	sbci	r27, 0xCB	; 203
      f0:	3e 91       	ld	r19, -X
      f2:	6b aa       	std	Y+51, r6	; 0x33
      f4:	aa be       	out	0x3a, r10	; 58
      f6:	00 00       	nop
      f8:	00 80       	ld	r0, Z
      fa:	3f 07       	cpc	r19, r31
      fc:	63 42       	sbci	r22, 0x23	; 35
      fe:	36 b7       	in	r19, 0x36	; 54
     100:	9b d8       	rcall	.-3786   	; 0xfffff238 <__eeprom_end+0xff7ef236>
     102:	a7 1a       	sub	r10, r23
     104:	39 68       	ori	r19, 0x89	; 137
     106:	56 18       	sub	r5, r6
     108:	ae ba       	out	0x1e, r10	; 30
     10a:	ab 55       	subi	r26, 0x5B	; 91
     10c:	8c 1d       	adc	r24, r12
     10e:	3c b7       	in	r19, 0x3c	; 60
     110:	cc 57       	subi	r28, 0x7C	; 124
     112:	63 bd       	out	0x23, r22	; 35
     114:	6d ed       	ldi	r22, 0xDD	; 221
     116:	fd 75       	andi	r31, 0x5D	; 93
     118:	3e f6       	brtc	.-114    	; 0xa8 <__SREG__+0x69>
     11a:	17 72       	andi	r17, 0x27	; 39
     11c:	31 bf       	out	0x31, r19	; 49
     11e:	00 00       	nop
     120:	00 80       	ld	r0, Z
     122:	3f 07       	cpc	r19, r31
     124:	2c 7a       	andi	r18, 0xAC	; 172
     126:	a5 ba       	out	0x15, r10	; 21
     128:	6c c5       	rjmp	.+2776   	; 0xc02 <_ZN5Gates8ampl2vecEiPiS0_+0xc4>
     12a:	90 da       	rcall	.-2784   	; 0xfffff64c <__eeprom_end+0xff7ef64a>
     12c:	3b 93       	.word	0x933b	; ????
     12e:	65 fc       	sbrc	r6, 5
     130:	8b bc       	out	0x2b, r8	; 43
     132:	53 f8       	bld	r5, 3
     134:	10 fd       	sbrc	r17, 0
     136:	3c 56       	subi	r19, 0x6C	; 108
     138:	92 83       	std	Z+2, r25	; 0x02
     13a:	4d bd       	out	0x2d, r20	; 45
     13c:	87 9d       	mul	r24, r7
     13e:	3a b6       	in	r3, 0x3a	; 58
     140:	3d cb       	rjmp	.-2438   	; 0xfffff7bc <__eeprom_end+0xff7ef7ba>
     142:	c9 bf       	out	0x39, r28	; 57
     144:	5b be       	out	0x3b, r5	; 59
     146:	73 da       	rcall	.-2842   	; 0xfffff62e <__eeprom_end+0xff7ef62c>
     148:	0f c9       	rjmp	.-3554   	; 0xfffff368 <__eeprom_end+0xff7ef366>
     14a:	3f 05       	cpc	r19, r15
     14c:	a8 4c       	sbci	r26, 0xC8	; 200
     14e:	cd b2       	in	r12, 0x1d	; 29
     150:	d4 4e       	sbci	r29, 0xE4	; 228
     152:	b9 38       	cpi	r27, 0x89	; 137
     154:	36 a9       	ldd	r19, Z+54	; 0x36
     156:	02 0c       	add	r0, r2
     158:	50 b9       	out	0x00, r21	; 0
     15a:	91 86       	std	Z+9, r9	; 0x09
     15c:	88 08       	sbc	r8, r8
     15e:	3c a6       	std	Y+44, r3	; 0x2c
     160:	aa aa       	std	Y+50, r10	; 0x32
     162:	2a be       	out	0x3a, r2	; 58
     164:	00 00       	nop
     166:	00 80       	ld	r0, Z
     168:	3f 08       	sbc	r3, r15
     16a:	00 00       	nop
     16c:	00 be       	out	0x30, r0	; 48
     16e:	92 24       	eor	r9, r2
     170:	49 12       	cpse	r4, r25
     172:	3e ab       	std	Y+54, r19	; 0x36
     174:	aa aa       	std	Y+50, r10	; 0x32
     176:	2a be       	out	0x3a, r2	; 58
     178:	cd cc       	rjmp	.-1638   	; 0xfffffb14 <__eeprom_end+0xff7efb12>
     17a:	cc 4c       	sbci	r28, 0xCC	; 204
     17c:	3e 00       	.word	0x003e	; ????
     17e:	00 00       	nop
     180:	80 be       	out	0x30, r8	; 48
     182:	ab aa       	std	Y+51, r10	; 0x33
     184:	aa aa       	std	Y+50, r10	; 0x32
     186:	3e 00       	.word	0x003e	; ????
     188:	00 00       	nop
     18a:	00 bf       	out	0x30, r16	; 48
     18c:	00 00       	nop
     18e:	00 80       	ld	r0, Z
     190:	3f 00       	.word	0x003f	; ????
     192:	00 00       	nop
     194:	00 00       	nop
     196:	08 41       	sbci	r16, 0x18	; 24
     198:	78 d3       	rcall	.+1776   	; 0x88a <__stack+0x2b>
     19a:	bb 43       	sbci	r27, 0x3B	; 59
     19c:	87 d1       	rcall	.+782    	; 0x4ac <_ZN6EEProm4readEj+0x4a>
     19e:	13 3d       	cpi	r17, 0xD3	; 211
     1a0:	19 0e       	add	r1, r25
     1a2:	3c c3       	rjmp	.+1656   	; 0x81c <_ZN5Gates17reverse_kroneckerEP7Complexi+0xce>
     1a4:	bd 42       	sbci	r27, 0x2D	; 45
     1a6:	82 ad       	ldd	r24, Z+58	; 0x3a
     1a8:	2b 3e       	cpi	r18, 0xEB	; 235
     1aa:	68 ec       	ldi	r22, 0xC8	; 200
     1ac:	82 76       	andi	r24, 0x62	; 98
     1ae:	be d9       	rcall	.-3204   	; 0xfffff52c <__eeprom_end+0xff7ef52a>
     1b0:	8f e1       	ldi	r24, 0x1F	; 31
     1b2:	a9 3e       	cpi	r26, 0xE9	; 233
     1b4:	4c 80       	ldd	r4, Y+4	; 0x04
     1b6:	ef ff       	.word	0xffef	; ????
     1b8:	be 01       	movw	r22, r28
     1ba:	c4 ff       	sbrs	r28, 4
     1bc:	7f 3f       	cpi	r23, 0xFF	; 255
     1be:	00 00       	nop
     1c0:	00 00       	nop
	...

000001c4 <__ctors_start>:
     1c4:	f3 1d       	adc	r31, r3

000001c6 <__ctors_end>:
     1c6:	11 24       	eor	r1, r1
     1c8:	1f be       	out	0x3f, r1	; 63
     1ca:	cf e5       	ldi	r28, 0x5F	; 95
     1cc:	d8 e0       	ldi	r29, 0x08	; 8
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	cd bf       	out	0x3d, r28	; 61

000001d2 <__do_copy_data>:
     1d2:	11 e0       	ldi	r17, 0x01	; 1
     1d4:	a0 e6       	ldi	r26, 0x60	; 96
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	ee e3       	ldi	r30, 0x3E	; 62
     1da:	f5 e7       	ldi	r31, 0x75	; 117
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__do_copy_data+0x10>
     1de:	05 90       	lpm	r0, Z+
     1e0:	0d 92       	st	X+, r0
     1e2:	ac 34       	cpi	r26, 0x4C	; 76
     1e4:	b1 07       	cpc	r27, r17
     1e6:	d9 f7       	brne	.-10     	; 0x1de <__do_copy_data+0xc>

000001e8 <__do_clear_bss>:
     1e8:	21 e0       	ldi	r18, 0x01	; 1
     1ea:	ac e4       	ldi	r26, 0x4C	; 76
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
     1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
     1f2:	ac 35       	cpi	r26, 0x5C	; 92
     1f4:	b2 07       	cpc	r27, r18
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>

000001f8 <__do_global_ctors>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	c6 ec       	ldi	r28, 0xC6	; 198
     1fc:	d1 e0       	ldi	r29, 0x01	; 1
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <__do_global_ctors+0x10>
     200:	22 97       	sbiw	r28, 0x02	; 2
     202:	fe 01       	movw	r30, r28
     204:	0e 94 45 34 	call	0x688a	; 0x688a <__tablejump__>
     208:	c4 3c       	cpi	r28, 0xC4	; 196
     20a:	d1 07       	cpc	r29, r17
     20c:	c9 f7       	brne	.-14     	; 0x200 <__do_global_ctors+0x8>
     20e:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <main>
     212:	0c 94 9d 3a 	jmp	0x753a	; 0x753a <_exit>

00000216 <__bad_interrupt>:
     216:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021a <_ZN7ComplexC1Eff>:
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	fc 01       	movw	r30, r24
     220:	40 83       	st	Z, r20
     222:	51 83       	std	Z+1, r21	; 0x01
     224:	62 83       	std	Z+2, r22	; 0x02
     226:	73 83       	std	Z+3, r23	; 0x03
     228:	04 83       	std	Z+4, r16	; 0x04
     22a:	15 83       	std	Z+5, r17	; 0x05
     22c:	26 83       	std	Z+6, r18	; 0x06
     22e:	37 83       	std	Z+7, r19	; 0x07
     230:	1f 91       	pop	r17
     232:	0f 91       	pop	r16
     234:	08 95       	ret

00000236 <_ZN7ComplexC1Ev>:
     236:	fc 01       	movw	r30, r24
     238:	10 82       	st	Z, r1
     23a:	11 82       	std	Z+1, r1	; 0x01
     23c:	12 82       	std	Z+2, r1	; 0x02
     23e:	13 82       	std	Z+3, r1	; 0x03
     240:	14 82       	std	Z+4, r1	; 0x04
     242:	15 82       	std	Z+5, r1	; 0x05
     244:	16 82       	std	Z+6, r1	; 0x06
     246:	17 82       	std	Z+7, r1	; 0x07
     248:	08 95       	ret

0000024a <_ZN7Complex3addES_>:
     24a:	af 92       	push	r10
     24c:	bf 92       	push	r11
     24e:	cf 92       	push	r12
     250:	df 92       	push	r13
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	68 97       	sbiw	r28, 0x18	; 24
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	5c 01       	movw	r10, r24
     270:	09 8b       	std	Y+17, r16	; 0x11
     272:	1a 8b       	std	Y+18, r17	; 0x12
     274:	2b 8b       	std	Y+19, r18	; 0x13
     276:	3c 8b       	std	Y+20, r19	; 0x14
     278:	4d 8b       	std	Y+21, r20	; 0x15
     27a:	5e 8b       	std	Y+22, r21	; 0x16
     27c:	6f 8b       	std	Y+23, r22	; 0x17
     27e:	78 8f       	std	Y+24, r23	; 0x18
     280:	2d 89       	ldd	r18, Y+21	; 0x15
     282:	3e 89       	ldd	r19, Y+22	; 0x16
     284:	4f 89       	ldd	r20, Y+23	; 0x17
     286:	58 8d       	ldd	r21, Y+24	; 0x18
     288:	fc 01       	movw	r30, r24
     28a:	64 81       	ldd	r22, Z+4	; 0x04
     28c:	75 81       	ldd	r23, Z+5	; 0x05
     28e:	86 81       	ldd	r24, Z+6	; 0x06
     290:	97 81       	ldd	r25, Z+7	; 0x07
     292:	0e 94 1a 30 	call	0x6034	; 0x6034 <__addsf3>
     296:	6b 01       	movw	r12, r22
     298:	7c 01       	movw	r14, r24
     29a:	29 89       	ldd	r18, Y+17	; 0x11
     29c:	3a 89       	ldd	r19, Y+18	; 0x12
     29e:	4b 89       	ldd	r20, Y+19	; 0x13
     2a0:	5c 89       	ldd	r21, Y+20	; 0x14
     2a2:	f5 01       	movw	r30, r10
     2a4:	60 81       	ld	r22, Z
     2a6:	71 81       	ldd	r23, Z+1	; 0x01
     2a8:	82 81       	ldd	r24, Z+2	; 0x02
     2aa:	93 81       	ldd	r25, Z+3	; 0x03
     2ac:	0e 94 1a 30 	call	0x6034	; 0x6034 <__addsf3>
     2b0:	ab 01       	movw	r20, r22
     2b2:	bc 01       	movw	r22, r24
     2b4:	97 01       	movw	r18, r14
     2b6:	86 01       	movw	r16, r12
     2b8:	ce 01       	movw	r24, r28
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     2c0:	88 e0       	ldi	r24, 0x08	; 8
     2c2:	fe 01       	movw	r30, r28
     2c4:	31 96       	adiw	r30, 0x01	; 1
     2c6:	de 01       	movw	r26, r28
     2c8:	19 96       	adiw	r26, 0x09	; 9
     2ca:	01 90       	ld	r0, Z+
     2cc:	0d 92       	st	X+, r0
     2ce:	8a 95       	dec	r24
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <_ZN7Complex3addES_+0x80>
     2d2:	29 85       	ldd	r18, Y+9	; 0x09
     2d4:	3a 85       	ldd	r19, Y+10	; 0x0a
     2d6:	4b 85       	ldd	r20, Y+11	; 0x0b
     2d8:	5c 85       	ldd	r21, Y+12	; 0x0c
     2da:	6d 85       	ldd	r22, Y+13	; 0x0d
     2dc:	7e 85       	ldd	r23, Y+14	; 0x0e
     2de:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e0:	98 89       	ldd	r25, Y+16	; 0x10
     2e2:	68 96       	adiw	r28, 0x18	; 24
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	bf 90       	pop	r11
     300:	af 90       	pop	r10
     302:	08 95       	ret

00000304 <_ZN7Complex3mulES_>:
     304:	4f 92       	push	r4
     306:	5f 92       	push	r5
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	8f 92       	push	r8
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	a0 97       	sbiw	r28, 0x20	; 32
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	09 8b       	std	Y+17, r16	; 0x11
     336:	1a 8b       	std	Y+18, r17	; 0x12
     338:	2b 8b       	std	Y+19, r18	; 0x13
     33a:	3c 8b       	std	Y+20, r19	; 0x14
     33c:	4d 8b       	std	Y+21, r20	; 0x15
     33e:	5e 8b       	std	Y+22, r21	; 0x16
     340:	6f 8b       	std	Y+23, r22	; 0x17
     342:	78 8f       	std	Y+24, r23	; 0x18
     344:	89 88       	ldd	r8, Y+17	; 0x11
     346:	9a 88       	ldd	r9, Y+18	; 0x12
     348:	ab 88       	ldd	r10, Y+19	; 0x13
     34a:	bc 88       	ldd	r11, Y+20	; 0x14
     34c:	2d 89       	ldd	r18, Y+21	; 0x15
     34e:	3e 89       	ldd	r19, Y+22	; 0x16
     350:	4f 89       	ldd	r20, Y+23	; 0x17
     352:	58 8d       	ldd	r21, Y+24	; 0x18
     354:	2d 8f       	std	Y+29, r18	; 0x1d
     356:	3e 8f       	std	Y+30, r19	; 0x1e
     358:	4f 8f       	std	Y+31, r20	; 0x1f
     35a:	58 a3       	std	Y+32, r21	; 0x20
     35c:	fc 01       	movw	r30, r24
     35e:	c0 80       	ld	r12, Z
     360:	d1 80       	ldd	r13, Z+1	; 0x01
     362:	e2 80       	ldd	r14, Z+2	; 0x02
     364:	f3 80       	ldd	r15, Z+3	; 0x03
     366:	24 81       	ldd	r18, Z+4	; 0x04
     368:	35 81       	ldd	r19, Z+5	; 0x05
     36a:	46 81       	ldd	r20, Z+6	; 0x06
     36c:	57 81       	ldd	r21, Z+7	; 0x07
     36e:	29 8f       	std	Y+25, r18	; 0x19
     370:	3a 8f       	std	Y+26, r19	; 0x1a
     372:	4b 8f       	std	Y+27, r20	; 0x1b
     374:	5c 8f       	std	Y+28, r21	; 0x1c
     376:	2d 8d       	ldd	r18, Y+29	; 0x1d
     378:	3e 8d       	ldd	r19, Y+30	; 0x1e
     37a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     37c:	58 a1       	ldd	r21, Y+32	; 0x20
     37e:	c7 01       	movw	r24, r14
     380:	b6 01       	movw	r22, r12
     382:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     386:	2b 01       	movw	r4, r22
     388:	3c 01       	movw	r6, r24
     38a:	a5 01       	movw	r20, r10
     38c:	94 01       	movw	r18, r8
     38e:	69 8d       	ldd	r22, Y+25	; 0x19
     390:	7a 8d       	ldd	r23, Y+26	; 0x1a
     392:	8b 8d       	ldd	r24, Y+27	; 0x1b
     394:	9c 8d       	ldd	r25, Y+28	; 0x1c
     396:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	c3 01       	movw	r24, r6
     3a0:	b2 01       	movw	r22, r4
     3a2:	0e 94 1a 30 	call	0x6034	; 0x6034 <__addsf3>
     3a6:	2b 01       	movw	r4, r22
     3a8:	3c 01       	movw	r6, r24
     3aa:	a5 01       	movw	r20, r10
     3ac:	94 01       	movw	r18, r8
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24
     3ba:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3bc:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3be:	4f 8d       	ldd	r20, Y+31	; 0x1f
     3c0:	58 a1       	ldd	r21, Y+32	; 0x20
     3c2:	69 8d       	ldd	r22, Y+25	; 0x19
     3c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3ca:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     3ce:	9b 01       	movw	r18, r22
     3d0:	ac 01       	movw	r20, r24
     3d2:	c7 01       	movw	r24, r14
     3d4:	b6 01       	movw	r22, r12
     3d6:	0e 94 19 30 	call	0x6032	; 0x6032 <__subsf3>
     3da:	ab 01       	movw	r20, r22
     3dc:	bc 01       	movw	r22, r24
     3de:	93 01       	movw	r18, r6
     3e0:	82 01       	movw	r16, r4
     3e2:	ce 01       	movw	r24, r28
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     3ea:	88 e0       	ldi	r24, 0x08	; 8
     3ec:	fe 01       	movw	r30, r28
     3ee:	31 96       	adiw	r30, 0x01	; 1
     3f0:	de 01       	movw	r26, r28
     3f2:	19 96       	adiw	r26, 0x09	; 9
     3f4:	01 90       	ld	r0, Z+
     3f6:	0d 92       	st	X+, r0
     3f8:	8a 95       	dec	r24
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <_ZN7Complex3mulES_+0xf0>
     3fc:	29 85       	ldd	r18, Y+9	; 0x09
     3fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     400:	4b 85       	ldd	r20, Y+11	; 0x0b
     402:	5c 85       	ldd	r21, Y+12	; 0x0c
     404:	6d 85       	ldd	r22, Y+13	; 0x0d
     406:	7e 85       	ldd	r23, Y+14	; 0x0e
     408:	8f 85       	ldd	r24, Y+15	; 0x0f
     40a:	98 89       	ldd	r25, Y+16	; 0x10
     40c:	a0 96       	adiw	r28, 0x20	; 32
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	bf 90       	pop	r11
     42a:	af 90       	pop	r10
     42c:	9f 90       	pop	r9
     42e:	8f 90       	pop	r8
     430:	7f 90       	pop	r7
     432:	6f 90       	pop	r6
     434:	5f 90       	pop	r5
     436:	4f 90       	pop	r4
     438:	08 95       	ret

0000043a <_ZN7Complex3argEv>:
     43a:	fc 01       	movw	r30, r24
     43c:	20 81       	ld	r18, Z
     43e:	31 81       	ldd	r19, Z+1	; 0x01
     440:	42 81       	ldd	r20, Z+2	; 0x02
     442:	53 81       	ldd	r21, Z+3	; 0x03
     444:	64 81       	ldd	r22, Z+4	; 0x04
     446:	75 81       	ldd	r23, Z+5	; 0x05
     448:	86 81       	ldd	r24, Z+6	; 0x06
     44a:	97 81       	ldd	r25, Z+7	; 0x07
     44c:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
     450:	0e 94 7e 30 	call	0x60fc	; 0x60fc <atan>
     454:	08 95       	ret

00000456 <_ZN6EEPromC1Ev>:
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     456:	85 e0       	ldi	r24, 0x05	; 5
     458:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     45a:	81 b1       	in	r24, 0x01	; 1
     45c:	8c 7f       	andi	r24, 0xFC	; 252
     45e:	81 b9       	out	0x01, r24	; 1
     460:	08 95       	ret

00000462 <_ZN6EEProm4readEj>:
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     462:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     464:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     466:	24 e8       	ldi	r18, 0x84	; 132
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     468:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     46a:	06 b6       	in	r0, 0x36	; 54
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     470:	81 b1       	in	r24, 0x01	; 1
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	88 30       	cpi	r24, 0x08	; 8
     476:	09 f0       	breq	.+2      	; 0x47a <_ZN6EEProm4readEj+0x18>
     478:	41 c0       	rjmp	.+130    	; 0x4fc <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     47a:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     47c:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     47e:	06 b6       	in	r0, 0x36	; 54
     480:	07 fe       	sbrs	r0, 7
     482:	fd cf       	rjmp	.-6      	; 0x47e <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     484:	81 b1       	in	r24, 0x01	; 1
     486:	88 7f       	andi	r24, 0xF8	; 248
}

uint8_t EEProm::read(uint16_t address){
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
     488:	88 31       	cpi	r24, 0x18	; 24
     48a:	71 f7       	brne	.-36     	; 0x468 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     48c:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     48e:	84 e8       	ldi	r24, 0x84	; 132
     490:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     492:	06 b6       	in	r0, 0x36	; 54
     494:	07 fe       	sbrs	r0, 7
     496:	fd cf       	rjmp	.-6      	; 0x492 <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     498:	81 b1       	in	r24, 0x01	; 1
     49a:	88 7f       	andi	r24, 0xF8	; 248
     49c:	88 32       	cpi	r24, 0x28	; 40
     49e:	81 f5       	brne	.+96     	; 0x500 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     4a0:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     4a2:	84 e8       	ldi	r24, 0x84	; 132
     4a4:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4a6:	06 b6       	in	r0, 0x36	; 54
     4a8:	07 fe       	sbrs	r0, 7
     4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     4ac:	81 b1       	in	r24, 0x01	; 1
     4ae:	88 7f       	andi	r24, 0xF8	; 248
     4b0:	88 32       	cpi	r24, 0x28	; 40
     4b2:	41 f5       	brne	.+80     	; 0x504 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     4b4:	84 ea       	ldi	r24, 0xA4	; 164
     4b6:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4b8:	06 b6       	in	r0, 0x36	; 54
     4ba:	07 fe       	sbrs	r0, 7
     4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     4be:	81 b1       	in	r24, 0x01	; 1
     4c0:	88 7f       	andi	r24, 0xF8	; 248
     4c2:	80 31       	cpi	r24, 0x10	; 16
     4c4:	09 f5       	brne	.+66     	; 0x508 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     4c6:	81 ea       	ldi	r24, 0xA1	; 161
     4c8:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     4ca:	84 e8       	ldi	r24, 0x84	; 132
     4cc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4ce:	06 b6       	in	r0, 0x36	; 54
     4d0:	07 fe       	sbrs	r0, 7
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     4d4:	81 b1       	in	r24, 0x01	; 1
     4d6:	88 7f       	andi	r24, 0xF8	; 248
     4d8:	80 34       	cpi	r24, 0x40	; 64
     4da:	c1 f4       	brne	.+48     	; 0x50c <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     4dc:	84 e8       	ldi	r24, 0x84	; 132
     4de:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     4e0:	06 b6       	in	r0, 0x36	; 54
     4e2:	07 fe       	sbrs	r0, 7
     4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     4e6:	81 b1       	in	r24, 0x01	; 1
     4e8:	88 7f       	andi	r24, 0xF8	; 248
     4ea:	88 35       	cpi	r24, 0x58	; 88
     4ec:	89 f4       	brne	.+34     	; 0x510 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     4ee:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     4f0:	94 e9       	ldi	r25, 0x94	; 148
     4f2:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     4f4:	06 b6       	in	r0, 0x36	; 54
     4f6:	04 fc       	sbrc	r0, 4
     4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <_ZN6EEProm4readEj+0x92>
     4fa:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     510:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     512:	08 95       	ret

00000514 <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	c4 56       	subi	r28, 0x64	; 100
     52a:	d1 09       	sbc	r29, r1
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	6c 01       	movw	r12, r24
     538:	ce 01       	movw	r24, r28
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	
	for(int i=0;MAX_MEM_SIZE;i++) {
     53e:	00 e0       	ldi	r16, 0x00	; 0
     540:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i);
     542:	b8 01       	movw	r22, r16
     544:	c6 01       	movw	r24, r12
     546:	0e 94 31 02 	call	0x462	; 0x462 <_ZN6EEProm4readEj>
     54a:	f7 01       	movw	r30, r14
     54c:	81 93       	st	Z+, r24
     54e:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     550:	8f 3f       	cpi	r24, 0xFF	; 255
     552:	81 f4       	brne	.+32     	; 0x574 <_ZN6EEProm7readallEv+0x60>
     554:	32 97       	sbiw	r30, 0x02	; 2
     556:	20 81       	ld	r18, Z
     558:	2f 3f       	cpi	r18, 0xFF	; 255
     55a:	61 f4       	brne	.+24     	; 0x574 <_ZN6EEProm7readallEv+0x60>
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	20 81       	ld	r18, Z
     560:	2f 3f       	cpi	r18, 0xFF	; 255
     562:	41 f4       	brne	.+16     	; 0x574 <_ZN6EEProm7readallEv+0x60>
     564:	31 97       	sbiw	r30, 0x01	; 1
     566:	20 81       	ld	r18, Z
     568:	2f 3f       	cpi	r18, 0xFF	; 255
     56a:	21 f4       	brne	.+8      	; 0x574 <_ZN6EEProm7readallEv+0x60>
     56c:	31 97       	sbiw	r30, 0x01	; 1
     56e:	80 81       	ld	r24, Z
     570:	8f 3f       	cpi	r24, 0xFF	; 255
     572:	19 f0       	breq	.+6      	; 0x57a <_ZN6EEProm7readallEv+0x66>
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	
	for(int i=0;MAX_MEM_SIZE;i++) {
     574:	0f 5f       	subi	r16, 0xFF	; 255
     576:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i);
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     578:	e4 cf       	rjmp	.-56     	; 0x542 <_ZN6EEProm7readallEv+0x2e>
	return eeprom_mem;
     57a:	ce 01       	movw	r24, r28
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	cc 59       	subi	r28, 0x9C	; 156
     580:	df 4f       	sbci	r29, 0xFF	; 255
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	ff 90       	pop	r15
     596:	ef 90       	pop	r14
     598:	df 90       	pop	r13
     59a:	cf 90       	pop	r12
     59c:	08 95       	ret

0000059e <_ZN4QEPU4FlagC1Ev>:
#include "qepu.h"

int8_t QEPU::Flag::flaglist[FLAG_COUNT];

QEPU::Flag::Flag(){
	flaglist[ALLOW_BRANCH_STACK]=HIGH;	
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 54 01 	sts	0x0154, r24
     5a4:	08 95       	ret

000005a6 <_ZN4QEPU4Flag7compareEii>:
}

void QEPU::Flag::compare(int data1,int data2){
	flaglist[CND_LWER]=(data1<data2)?HIGH:LOW;
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	86 17       	cp	r24, r22
     5aa:	97 07       	cpc	r25, r23
     5ac:	0c f0       	brlt	.+2      	; 0x5b0 <_ZN4QEPU4Flag7compareEii+0xa>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	20 93 4c 01 	sts	0x014C, r18
	flaglist[CND_LWER_EQUAL]=(data1<=data2)?HIGH:LOW;
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	68 17       	cp	r22, r24
     5b8:	79 07       	cpc	r23, r25
     5ba:	0c f4       	brge	.+2      	; 0x5be <_ZN4QEPU4Flag7compareEii+0x18>
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	20 93 4d 01 	sts	0x014D, r18
	flaglist[CND_EQUAL]=(data1==data2)?HIGH:LOW;
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	86 17       	cp	r24, r22
     5c6:	97 07       	cpc	r25, r23
     5c8:	09 f0       	breq	.+2      	; 0x5cc <_ZN4QEPU4Flag7compareEii+0x26>
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	20 93 4e 01 	sts	0x014E, r18
	flaglist[CND_GRTER_EQUAL]=(data1>=data2)?HIGH:LOW;
     5d0:	21 e0       	ldi	r18, 0x01	; 1
     5d2:	86 17       	cp	r24, r22
     5d4:	97 07       	cpc	r25, r23
     5d6:	0c f4       	brge	.+2      	; 0x5da <_ZN4QEPU4Flag7compareEii+0x34>
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	20 93 4f 01 	sts	0x014F, r18
	flaglist[CND_GRTER]=(data1>data2)?HIGH:LOW;
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	68 17       	cp	r22, r24
     5e2:	79 07       	cpc	r23, r25
     5e4:	0c f0       	brlt	.+2      	; 0x5e8 <_ZN4QEPU4Flag7compareEii+0x42>
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	20 93 50 01 	sts	0x0150, r18
	flaglist[CND_DIFF]=(data1!=data2)?HIGH:LOW;
     5ec:	21 e0       	ldi	r18, 0x01	; 1
     5ee:	86 17       	cp	r24, r22
     5f0:	97 07       	cpc	r25, r23
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <_ZN4QEPU4Flag7compareEii+0x50>
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	20 93 51 01 	sts	0x0151, r18
	flaglist[CND_ZERO]=(data1==LOW)?HIGH:LOW;
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	00 97       	sbiw	r24, 0x00	; 0
     5fe:	09 f0       	breq	.+2      	; 0x602 <_ZN4QEPU4Flag7compareEii+0x5c>
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	20 93 52 01 	sts	0x0152, r18
	flaglist[CND_NOT_ZERO]=(data1!=LOW)?HIGH:LOW;
     606:	21 e0       	ldi	r18, 0x01	; 1
     608:	89 2b       	or	r24, r25
     60a:	09 f4       	brne	.+2      	; 0x60e <_ZN4QEPU4Flag7compareEii+0x68>
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	20 93 53 01 	sts	0x0153, r18
     612:	08 95       	ret

00000614 <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){}
     614:	08 95       	ret

00000616 <_Z12print_statesiP7ComplexPc>:

Serial s;

void print_states(int qb_count,Complex * vec,char* message){
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	1f 92       	push	r1
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	6c 01       	movw	r12, r24
     62e:	e6 2e       	mov	r14, r22
     630:	f7 2e       	mov	r15, r23
	Utils utils;
	s.writestrln(message);
     632:	ba 01       	movw	r22, r20
     634:	85 e5       	ldi	r24, 0x55	; 85
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     63c:	1c 14       	cp	r1, r12
     63e:	1d 04       	cpc	r1, r13
     640:	0c f0       	brlt	.+2      	; 0x644 <_Z12print_statesiP7ComplexPc+0x2e>
     642:	4b c0       	rjmp	.+150    	; 0x6da <_Z12print_statesiP7ComplexPc+0xc4>
     644:	0e 2d       	mov	r16, r14
     646:	1f 2d       	mov	r17, r15
     648:	e1 2c       	mov	r14, r1
     64a:	f1 2c       	mov	r15, r1
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
     64c:	6a e6       	ldi	r22, 0x6A	; 106
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	85 e5       	ldi	r24, 0x55	; 85
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	4a e7       	ldi	r20, 0x7A	; 122
     65e:	54 e4       	ldi	r21, 0x44	; 68
     660:	f8 01       	movw	r30, r16
     662:	60 81       	ld	r22, Z
     664:	71 81       	ldd	r23, Z+1	; 0x01
     666:	82 81       	ldd	r24, Z+2	; 0x02
     668:	93 81       	ldd	r25, Z+3	; 0x03
     66a:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     66e:	0e 94 46 31 	call	0x628c	; 0x628c <__fixsfsi>
     672:	ce 01       	movw	r24, r28
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <_ZN5Utils7int2strEi>
     67a:	bc 01       	movw	r22, r24
     67c:	85 e5       	ldi	r24, 0x55	; 85
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
     684:	6e e6       	ldi	r22, 0x6E	; 110
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	85 e5       	ldi	r24, 0x55	; 85
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	4a e7       	ldi	r20, 0x7A	; 122
     696:	54 e4       	ldi	r21, 0x44	; 68
     698:	f8 01       	movw	r30, r16
     69a:	64 81       	ldd	r22, Z+4	; 0x04
     69c:	75 81       	ldd	r23, Z+5	; 0x05
     69e:	86 81       	ldd	r24, Z+6	; 0x06
     6a0:	97 81       	ldd	r25, Z+7	; 0x07
     6a2:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     6a6:	0e 94 46 31 	call	0x628c	; 0x628c <__fixsfsi>
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <_ZN5Utils7int2strEi>
     6b2:	bc 01       	movw	r22, r24
     6b4:	85 e5       	ldi	r24, 0x55	; 85
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     6bc:	65 ec       	ldi	r22, 0xC5	; 197
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	85 e5       	ldi	r24, 0x55	; 85
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
Serial s;

void print_states(int qb_count,Complex * vec,char* message){
	Utils utils;
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     6c8:	ff ef       	ldi	r31, 0xFF	; 255
     6ca:	ef 1a       	sub	r14, r31
     6cc:	ff 0a       	sbc	r15, r31
     6ce:	08 5f       	subi	r16, 0xF8	; 248
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
     6d2:	ec 14       	cp	r14, r12
     6d4:	fd 04       	cpc	r15, r13
     6d6:	09 f0       	breq	.+2      	; 0x6da <_Z12print_statesiP7ComplexPc+0xc4>
     6d8:	b9 cf       	rjmp	.-142    	; 0x64c <_Z12print_statesiP7ComplexPc+0x36>
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret

000006ee <_ZN5Gates5touchEd>:

int Gates::touch(double probability){
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	6a 01       	movw	r12, r20
     6fc:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     6fe:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <rand>
     702:	ec 01       	movw	r28, r24
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	3e ef       	ldi	r19, 0xFE	; 254
     708:	4f ef       	ldi	r20, 0xFF	; 255
     70a:	56 e4       	ldi	r21, 0x46	; 70
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     714:	6b 01       	movw	r12, r22
     716:	7c 01       	movw	r14, r24
     718:	be 01       	movw	r22, r28
     71a:	88 27       	eor	r24, r24
     71c:	77 fd       	sbrc	r23, 7
     71e:	80 95       	com	r24
     720:	98 2f       	mov	r25, r24
     722:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
     726:	9b 01       	movw	r18, r22
     728:	ac 01       	movw	r20, r24
     72a:	c1 e0       	ldi	r28, 0x01	; 1
     72c:	d0 e0       	ldi	r29, 0x00	; 0
     72e:	c7 01       	movw	r24, r14
     730:	b6 01       	movw	r22, r12
     732:	0e 94 a2 32 	call	0x6544	; 0x6544 <__gesf2>
     736:	88 23       	and	r24, r24
     738:	14 f4       	brge	.+4      	; 0x73e <_ZN5Gates5touchEd+0x50>
     73a:	c0 e0       	ldi	r28, 0x00	; 0
     73c:	d0 e0       	ldi	r29, 0x00	; 0
}
     73e:	ce 01       	movw	r24, r28
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	08 95       	ret

0000074e <_ZN5Gates17reverse_kroneckerEP7Complexi>:

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     74e:	2f 92       	push	r2
     750:	3f 92       	push	r3
     752:	4f 92       	push	r4
     754:	5f 92       	push	r5
     756:	6f 92       	push	r6
     758:	7f 92       	push	r7
     75a:	8f 92       	push	r8
     75c:	9f 92       	push	r9
     75e:	af 92       	push	r10
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	a4 97       	sbiw	r28, 0x24	; 36
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	8c 01       	movw	r16, r24
     784:	6b 01       	movw	r12, r22
     786:	5a 01       	movw	r10, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     788:	ba 01       	movw	r22, r20
     78a:	88 27       	eor	r24, r24
     78c:	77 fd       	sbrc	r23, 7
     78e:	80 95       	com	r24
     790:	98 2f       	mov	r25, r24
     792:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
     796:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <log>
     79a:	28 e1       	ldi	r18, 0x18	; 24
     79c:	32 e7       	ldi	r19, 0x72	; 114
     79e:	41 e3       	ldi	r20, 0x31	; 49
     7a0:	5f e3       	ldi	r21, 0x3F	; 63
     7a2:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
     7a6:	2b 01       	movw	r4, r22
     7a8:	3c 01       	movw	r6, r24
     7aa:	9b 01       	movw	r18, r22
     7ac:	ac 01       	movw	r20, r24
     7ae:	0e 94 1a 30 	call	0x6034	; 0x6034 <__addsf3>
     7b2:	0e 94 46 31 	call	0x628c	; 0x628c <__fixsfsi>
     7b6:	69 a3       	std	Y+33, r22	; 0x21
     7b8:	7a a3       	std	Y+34, r23	; 0x22
     7ba:	8b a3       	std	Y+35, r24	; 0x23
     7bc:	9c a3       	std	Y+36, r25	; 0x24
     7be:	29 a0       	ldd	r2, Y+33	; 0x21
     7c0:	3a a0       	ldd	r3, Y+34	; 0x22
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
     7c2:	c1 01       	movw	r24, r2
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
     7d4:	4c 01       	movw	r8, r24
		
	for(int i=0;i<kron_size;i++)
     7d6:	1a 14       	cp	r1, r10
     7d8:	1b 04       	cpc	r1, r11
     7da:	0c f0       	brlt	.+2      	; 0x7de <_ZN5Gates17reverse_kroneckerEP7Complexi+0x90>
     7dc:	9d c0       	rjmp	.+314    	; 0x918 <__stack+0xb9>
		if(kron[i].re==1){
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e8       	ldi	r20, 0x80	; 128
     7e4:	5f e3       	ldi	r21, 0x3F	; 63
     7e6:	f6 01       	movw	r30, r12
     7e8:	60 81       	ld	r22, Z
     7ea:	71 81       	ldd	r23, Z+1	; 0x01
     7ec:	82 81       	ldd	r24, Z+2	; 0x02
     7ee:	93 81       	ldd	r25, Z+3	; 0x03
     7f0:	0e 94 a6 30 	call	0x614c	; 0x614c <__cmpsf2>
     7f4:	81 11       	cpse	r24, r1
     7f6:	87 c0       	rjmp	.+270    	; 0x906 <__stack+0xa7>
     7f8:	11 c0       	rjmp	.+34     	; 0x81c <_ZN5Gates17reverse_kroneckerEP7Complexi+0xce>
     7fa:	f8 e0       	ldi	r31, 0x08	; 8
     7fc:	cf 0e       	add	r12, r31
     7fe:	d1 1c       	adc	r13, r1
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e8       	ldi	r20, 0x80	; 128
     806:	5f e3       	ldi	r21, 0x3F	; 63
     808:	f6 01       	movw	r30, r12
     80a:	60 81       	ld	r22, Z
     80c:	71 81       	ldd	r23, Z+1	; 0x01
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	93 81       	ldd	r25, Z+3	; 0x03
     812:	0e 94 a6 30 	call	0x614c	; 0x614c <__cmpsf2>
     816:	81 11       	cpse	r24, r1
     818:	78 c0       	rjmp	.+240    	; 0x90a <__stack+0xab>
     81a:	02 c0       	rjmp	.+4      	; 0x820 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xd2>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     81c:	e1 2c       	mov	r14, r1
     81e:	f1 2c       	mov	r15, r1
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
     820:	c3 01       	movw	r24, r6
     822:	b2 01       	movw	r22, r4
     824:	0e 94 46 31 	call	0x628c	; 0x628c <__fixsfsi>
     828:	ab 01       	movw	r20, r22
     82a:	b7 01       	movw	r22, r14
     82c:	c8 01       	movw	r24, r16
     82e:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <_ZN5Utils10int2binstrEii>
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     832:	12 14       	cp	r1, r2
     834:	13 04       	cpc	r1, r3
     836:	0c f0       	brlt	.+2      	; 0x83a <_ZN5Gates17reverse_kroneckerEP7Complexi+0xec>
     838:	6f c0       	rjmp	.+222    	; 0x918 <__stack+0xb9>
     83a:	7c 01       	movw	r14, r24
     83c:	54 01       	movw	r10, r8
     83e:	64 01       	movw	r12, r8
     840:	f8 e0       	ldi	r31, 0x08	; 8
     842:	cf 0e       	add	r12, r31
     844:	d1 1c       	adc	r13, r1
     846:	49 a0       	ldd	r4, Y+33	; 0x21
     848:	5a a0       	ldd	r5, Y+34	; 0x22
     84a:	48 0e       	add	r4, r24
     84c:	59 1e       	adc	r5, r25
				if(toBin[j]=='1'){
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     84e:	68 94       	set
     850:	77 24       	eor	r7, r7
     852:	73 f8       	bld	r7, 3
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
				if(toBin[j]=='1'){
     854:	f7 01       	movw	r30, r14
     856:	81 91       	ld	r24, Z+
     858:	7f 01       	movw	r14, r30
     85a:	81 33       	cpi	r24, 0x31	; 49
     85c:	29 f5       	brne	.+74     	; 0x8a8 <__stack+0x49>
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
     85e:	00 e0       	ldi	r16, 0x00	; 0
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	98 01       	movw	r18, r16
     864:	b9 01       	movw	r22, r18
     866:	a8 01       	movw	r20, r16
     868:	ce 01       	movw	r24, r28
     86a:	49 96       	adiw	r24, 0x19	; 25
     86c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     870:	fe 01       	movw	r30, r28
     872:	79 96       	adiw	r30, 0x19	; 25
     874:	d5 01       	movw	r26, r10
     876:	87 2d       	mov	r24, r7
     878:	01 90       	ld	r0, Z+
     87a:	0d 92       	st	X+, r0
     87c:	8a 95       	dec	r24
     87e:	e1 f7       	brne	.-8      	; 0x878 <__stack+0x19>
     880:	00 e0       	ldi	r16, 0x00	; 0
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	98 01       	movw	r18, r16
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	60 e8       	ldi	r22, 0x80	; 128
     88c:	7f e3       	ldi	r23, 0x3F	; 63
     88e:	ce 01       	movw	r24, r28
     890:	41 96       	adiw	r24, 0x11	; 17
     892:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     896:	fe 01       	movw	r30, r28
     898:	71 96       	adiw	r30, 0x11	; 17
     89a:	d6 01       	movw	r26, r12
     89c:	87 2d       	mov	r24, r7
     89e:	01 90       	ld	r0, Z+
     8a0:	0d 92       	st	X+, r0
     8a2:	8a 95       	dec	r24
     8a4:	e1 f7       	brne	.-8      	; 0x89e <__stack+0x3f>
     8a6:	24 c0       	rjmp	.+72     	; 0x8f0 <__stack+0x91>
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     8a8:	00 e0       	ldi	r16, 0x00	; 0
     8aa:	10 e0       	ldi	r17, 0x00	; 0
     8ac:	98 01       	movw	r18, r16
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	60 e8       	ldi	r22, 0x80	; 128
     8b4:	7f e3       	ldi	r23, 0x3F	; 63
     8b6:	ce 01       	movw	r24, r28
     8b8:	09 96       	adiw	r24, 0x09	; 9
     8ba:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     8be:	fe 01       	movw	r30, r28
     8c0:	39 96       	adiw	r30, 0x09	; 9
     8c2:	d5 01       	movw	r26, r10
     8c4:	87 2d       	mov	r24, r7
     8c6:	01 90       	ld	r0, Z+
     8c8:	0d 92       	st	X+, r0
     8ca:	8a 95       	dec	r24
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <__stack+0x67>
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	98 01       	movw	r18, r16
     8d4:	b9 01       	movw	r22, r18
     8d6:	a8 01       	movw	r20, r16
     8d8:	ce 01       	movw	r24, r28
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     8e0:	fe 01       	movw	r30, r28
     8e2:	31 96       	adiw	r30, 0x01	; 1
     8e4:	d6 01       	movw	r26, r12
     8e6:	87 2d       	mov	r24, r7
     8e8:	01 90       	ld	r0, Z+
     8ea:	0d 92       	st	X+, r0
     8ec:	8a 95       	dec	r24
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <__stack+0x89>
     8f0:	f0 e1       	ldi	r31, 0x10	; 16
     8f2:	af 0e       	add	r10, r31
     8f4:	b1 1c       	adc	r11, r1
     8f6:	20 e1       	ldi	r18, 0x10	; 16
     8f8:	c2 0e       	add	r12, r18
     8fa:	d1 1c       	adc	r13, r1
		
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     8fc:	e4 14       	cp	r14, r4
     8fe:	f5 04       	cpc	r15, r5
     900:	09 f0       	breq	.+2      	; 0x904 <__stack+0xa5>
     902:	a8 cf       	rjmp	.-176    	; 0x854 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x106>
     904:	09 c0       	rjmp	.+18     	; 0x918 <__stack+0xb9>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     906:	e1 2c       	mov	r14, r1
     908:	f1 2c       	mov	r15, r1
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 1a       	sub	r14, r24
     90e:	f8 0a       	sbc	r15, r24
     910:	ea 14       	cp	r14, r10
     912:	fb 04       	cpc	r15, r11
     914:	09 f0       	breq	.+2      	; 0x918 <__stack+0xb9>
     916:	71 cf       	rjmp	.-286    	; 0x7fa <_ZN5Gates17reverse_kroneckerEP7Complexi+0xac>
				index_rev_kro+=2;
			}
			break;
		}
	return reversed_kronecker;
}
     918:	c4 01       	movw	r24, r8
     91a:	a4 96       	adiw	r28, 0x24	; 36
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	bf 90       	pop	r11
     938:	af 90       	pop	r10
     93a:	9f 90       	pop	r9
     93c:	8f 90       	pop	r8
     93e:	7f 90       	pop	r7
     940:	6f 90       	pop	r6
     942:	5f 90       	pop	r5
     944:	4f 90       	pop	r4
     946:	3f 90       	pop	r3
     948:	2f 90       	pop	r2
     94a:	08 95       	ret

0000094c <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     94c:	2f 92       	push	r2
     94e:	3f 92       	push	r3
     950:	4f 92       	push	r4
     952:	5f 92       	push	r5
     954:	6f 92       	push	r6
     956:	7f 92       	push	r7
     958:	8f 92       	push	r8
     95a:	9f 92       	push	r9
     95c:	af 92       	push	r10
     95e:	bf 92       	push	r11
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	28 97       	sbiw	r28, 0x08	; 8
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
     980:	7c 01       	movw	r14, r24
     982:	5b 01       	movw	r10, r22
     984:	8a 01       	movw	r16, r20
     986:	3e 83       	std	Y+6, r19	; 0x06
     988:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     98a:	41 30       	cpi	r20, 0x01	; 1
     98c:	51 05       	cpc	r21, r1
     98e:	09 f4       	brne	.+2      	; 0x992 <_ZN5Gates9kroneckerEP7Complexii+0x46>
     990:	bb c0       	rjmp	.+374    	; 0xb08 <_ZN5Gates9kroneckerEP7Complexii+0x1bc>
	int kron_size=utils.custom_pow(2,qb_count);
     992:	9a 01       	movw	r18, r20
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e4       	ldi	r23, 0x40	; 64
     99c:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <_ZN5Utils10custom_powEfi>
     9a0:	0e 94 46 31 	call	0x628c	; 0x628c <__fixsfsi>
     9a4:	78 87       	std	Y+8, r23	; 0x08
     9a6:	6f 83       	std	Y+7, r22	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     9a8:	9b 01       	movw	r18, r22
     9aa:	22 0f       	add	r18, r18
     9ac:	33 1f       	adc	r19, r19
     9ae:	22 0f       	add	r18, r18
     9b0:	33 1f       	adc	r19, r19
     9b2:	22 0f       	add	r18, r18
     9b4:	33 1f       	adc	r19, r19
     9b6:	3c 83       	std	Y+4, r19	; 0x04
     9b8:	2b 83       	std	Y+3, r18	; 0x03
     9ba:	c9 01       	movw	r24, r18
     9bc:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	9a 83       	std	Y+2, r25	; 0x02
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     9c4:	8f 81       	ldd	r24, Y+7	; 0x07
     9c6:	98 85       	ldd	r25, Y+8	; 0x08
     9c8:	18 16       	cp	r1, r24
     9ca:	19 06       	cpc	r1, r25
     9cc:	0c f0       	brlt	.+2      	; 0x9d0 <_ZN5Gates9kroneckerEP7Complexii+0x84>
     9ce:	53 c0       	rjmp	.+166    	; 0xa76 <_ZN5Gates9kroneckerEP7Complexii+0x12a>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     9d0:	18 01       	movw	r2, r16
     9d2:	22 0c       	add	r2, r2
     9d4:	33 1c       	adc	r3, r3
     9d6:	c9 80       	ldd	r12, Y+1	; 0x01
     9d8:	da 80       	ldd	r13, Y+2	; 0x02
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     9da:	61 2c       	mov	r6, r1
     9dc:	71 2c       	mov	r7, r1
	int kron_size=utils.custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
     9de:	e2 e0       	ldi	r30, 0x02	; 2
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=utils.custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
     9e2:	41 2c       	mov	r4, r1
     9e4:	51 2c       	mov	r5, r1
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     9e6:	c6 01       	movw	r24, r12
     9e8:	cf 80       	ldd	r12, Y+7	; 0x07
     9ea:	d8 84       	ldd	r13, Y+8	; 0x08
     9ec:	47 01       	movw	r8, r14
     9ee:	98 87       	std	Y+8, r25	; 0x08
     9f0:	8f 83       	std	Y+7, r24	; 0x07
     9f2:	2e 16       	cp	r2, r30
     9f4:	3f 06       	cpc	r3, r31
     9f6:	29 f4       	brne	.+10     	; 0xa02 <_ZN5Gates9kroneckerEP7Complexii+0xb6>
     9f8:	9f ef       	ldi	r25, 0xFF	; 255
     9fa:	49 1a       	sub	r4, r25
     9fc:	59 0a       	sbc	r5, r25
     9fe:	e2 e0       	ldi	r30, 0x02	; 2
     a00:	f0 e0       	ldi	r31, 0x00	; 0
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     a02:	7f 01       	movw	r14, r30
     a04:	2f ef       	ldi	r18, 0xFF	; 255
     a06:	e2 1a       	sub	r14, r18
     a08:	f2 0a       	sbc	r15, r18
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	ea 0d       	add	r30, r10
     a18:	fb 1d       	adc	r31, r11
     a1a:	00 81       	ld	r16, Z
     a1c:	11 81       	ldd	r17, Z+1	; 0x01
     a1e:	22 81       	ldd	r18, Z+2	; 0x02
     a20:	33 81       	ldd	r19, Z+3	; 0x03
     a22:	44 81       	ldd	r20, Z+4	; 0x04
     a24:	55 81       	ldd	r21, Z+5	; 0x05
     a26:	66 81       	ldd	r22, Z+6	; 0x06
     a28:	77 81       	ldd	r23, Z+7	; 0x07
     a2a:	c2 01       	movw	r24, r4
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	8a 0d       	add	r24, r10
     a3a:	9b 1d       	adc	r25, r11
     a3c:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7Complex3mulES_>
     a40:	ef 81       	ldd	r30, Y+7	; 0x07
     a42:	f8 85       	ldd	r31, Y+8	; 0x08
     a44:	20 83       	st	Z, r18
     a46:	31 83       	std	Z+1, r19	; 0x01
     a48:	42 83       	std	Z+2, r20	; 0x02
     a4a:	53 83       	std	Z+3, r21	; 0x03
     a4c:	64 83       	std	Z+4, r22	; 0x04
     a4e:	75 83       	std	Z+5, r23	; 0x05
     a50:	86 83       	std	Z+6, r24	; 0x06
     a52:	97 83       	std	Z+7, r25	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     a54:	ff ef       	ldi	r31, 0xFF	; 255
     a56:	6f 1a       	sub	r6, r31
     a58:	7f 0a       	sbc	r7, r31
     a5a:	2f 81       	ldd	r18, Y+7	; 0x07
     a5c:	38 85       	ldd	r19, Y+8	; 0x08
     a5e:	28 5f       	subi	r18, 0xF8	; 248
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	38 87       	std	Y+8, r19	; 0x08
     a64:	2f 83       	std	Y+7, r18	; 0x07
     a66:	6c 14       	cp	r6, r12
     a68:	7d 04       	cpc	r7, r13
     a6a:	11 f0       	breq	.+4      	; 0xa70 <_ZN5Gates9kroneckerEP7Complexii+0x124>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     a6c:	f7 01       	movw	r30, r14
     a6e:	c1 cf       	rjmp	.-126    	; 0x9f2 <_ZN5Gates9kroneckerEP7Complexii+0xa6>
     a70:	d8 86       	std	Y+8, r13	; 0x08
     a72:	cf 82       	std	Y+7, r12	; 0x07
     a74:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     a76:	8d 81       	ldd	r24, Y+5	; 0x05
     a78:	9e 81       	ldd	r25, Y+6	; 0x06
     a7a:	89 2b       	or	r24, r25
     a7c:	a9 f5       	brne	.+106    	; 0xae8 <_ZN5Gates9kroneckerEP7Complexii+0x19c>
				binary_touch=0;
				break;
			}
	}
	//print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	9a 81       	ldd	r25, Y+2	; 0x02
     a82:	44 c0       	rjmp	.+136    	; 0xb0c <_ZN5Gates9kroneckerEP7Complexii+0x1c0>
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     a84:	51 01       	movw	r10, r2
     a86:	f1 01       	movw	r30, r2
     a88:	40 81       	ld	r20, Z
     a8a:	51 81       	ldd	r21, Z+1	; 0x01
     a8c:	62 81       	ldd	r22, Z+2	; 0x02
     a8e:	73 81       	ldd	r23, Z+3	; 0x03
     a90:	c7 01       	movw	r24, r14
     a92:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN5Gates5touchEd>
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	e9 f4       	brne	.+58     	; 0xad4 <_ZN5Gates9kroneckerEP7Complexii+0x188>
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	9c 81       	ldd	r25, Y+4	; 0x04
     a9e:	86 0d       	add	r24, r6
     aa0:	97 1d       	adc	r25, r7
     aa2:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     aa4:	10 82       	st	Z, r1
     aa6:	11 82       	std	Z+1, r1	; 0x01
     aa8:	12 82       	std	Z+2, r1	; 0x02
     aaa:	13 82       	std	Z+3, r1	; 0x03
     aac:	14 82       	std	Z+4, r1	; 0x04
     aae:	15 82       	std	Z+5, r1	; 0x05
     ab0:	16 82       	std	Z+6, r1	; 0x06
     ab2:	17 82       	std	Z+7, r1	; 0x07
     ab4:	38 96       	adiw	r30, 0x08	; 8
     ab6:	e8 17       	cp	r30, r24
     ab8:	f9 07       	cpc	r31, r25
     aba:	a1 f7       	brne	.-24     	; 0xaa4 <_ZN5Gates9kroneckerEP7Complexii+0x158>
				kronvec[i].re=binary_touch;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a0 e8       	ldi	r26, 0x80	; 128
     ac2:	bf e3       	ldi	r27, 0x3F	; 63
     ac4:	f5 01       	movw	r30, r10
     ac6:	80 83       	st	Z, r24
     ac8:	91 83       	std	Z+1, r25	; 0x01
     aca:	a2 83       	std	Z+2, r26	; 0x02
     acc:	b3 83       	std	Z+3, r27	; 0x03
				binary_touch=0;
				break;
			}
	}
	//print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	9a 81       	ldd	r25, Y+2	; 0x02
     ad2:	1c c0       	rjmp	.+56     	; 0xb0c <_ZN5Gates9kroneckerEP7Complexii+0x1c0>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     ad4:	ff ef       	ldi	r31, 0xFF	; 255
     ad6:	cf 1a       	sub	r12, r31
     ad8:	df 0a       	sbc	r13, r31
     ada:	28 e0       	ldi	r18, 0x08	; 8
     adc:	22 0e       	add	r2, r18
     ade:	31 1c       	adc	r3, r1
     ae0:	c8 14       	cp	r12, r8
     ae2:	d9 04       	cpc	r13, r9
     ae4:	79 f6       	brne	.-98     	; 0xa84 <_ZN5Gates9kroneckerEP7Complexii+0x138>
     ae6:	06 c0       	rjmp	.+12     	; 0xaf4 <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
     ae8:	49 80       	ldd	r4, Y+1	; 0x01
     aea:	5a 80       	ldd	r5, Y+2	; 0x02
     aec:	00 e0       	ldi	r16, 0x00	; 0
     aee:	10 e0       	ldi	r17, 0x00	; 0
     af0:	8f 80       	ldd	r8, Y+7	; 0x07
     af2:	98 84       	ldd	r9, Y+8	; 0x08
     af4:	18 14       	cp	r1, r8
     af6:	19 04       	cpc	r1, r9
     af8:	ec f7       	brge	.-6      	; 0xaf4 <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
     afa:	64 2c       	mov	r6, r4
     afc:	75 2c       	mov	r7, r5
     afe:	24 2c       	mov	r2, r4
     b00:	35 2c       	mov	r3, r5
     b02:	c0 2e       	mov	r12, r16
     b04:	d1 2e       	mov	r13, r17
     b06:	be cf       	rjmp	.-132    	; 0xa84 <_ZN5Gates9kroneckerEP7Complexii+0x138>
		}
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     b08:	86 2f       	mov	r24, r22
     b0a:	9b 2d       	mov	r25, r11
				break;
			}
	}
	//print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
}
     b0c:	28 96       	adiw	r28, 0x08	; 8
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	df 90       	pop	r13
     b26:	cf 90       	pop	r12
     b28:	bf 90       	pop	r11
     b2a:	af 90       	pop	r10
     b2c:	9f 90       	pop	r9
     b2e:	8f 90       	pop	r8
     b30:	7f 90       	pop	r7
     b32:	6f 90       	pop	r6
     b34:	5f 90       	pop	r5
     b36:	4f 90       	pop	r4
     b38:	3f 90       	pop	r3
     b3a:	2f 90       	pop	r2
     b3c:	08 95       	ret

00000b3e <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     b3e:	2f 92       	push	r2
     b40:	3f 92       	push	r3
     b42:	4f 92       	push	r4
     b44:	5f 92       	push	r5
     b46:	6f 92       	push	r6
     b48:	7f 92       	push	r7
     b4a:	8f 92       	push	r8
     b4c:	9f 92       	push	r9
     b4e:	af 92       	push	r10
     b50:	bf 92       	push	r11
     b52:	cf 92       	push	r12
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	28 97       	sbiw	r28, 0x08	; 8
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	9e 83       	std	Y+6, r25	; 0x06
     b74:	8d 83       	std	Y+5, r24	; 0x05
     b76:	7a 83       	std	Y+2, r23	; 0x02
     b78:	69 83       	std	Y+1, r22	; 0x01
     b7a:	04 2f       	mov	r16, r20
     b7c:	15 2f       	mov	r17, r21
     b7e:	c2 2e       	mov	r12, r18
     b80:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     b82:	cb 01       	movw	r24, r22
     b84:	82 95       	swap	r24
     b86:	92 95       	swap	r25
     b88:	90 7f       	andi	r25, 0xF0	; 240
     b8a:	98 27       	eor	r25, r24
     b8c:	80 7f       	andi	r24, 0xF0	; 240
     b8e:	98 27       	eor	r25, r24
     b90:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
     b94:	8b 83       	std	Y+3, r24	; 0x03
     b96:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     b98:	29 80       	ldd	r2, Y+1	; 0x01
     b9a:	3a 80       	ldd	r3, Y+2	; 0x02
     b9c:	22 0c       	add	r2, r2
     b9e:	33 1c       	adc	r3, r3
     ba0:	12 14       	cp	r1, r2
     ba2:	13 04       	cpc	r1, r3
     ba4:	0c f0       	brlt	.+2      	; 0xba8 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     ba6:	ac c0       	rjmp	.+344    	; 0xd00 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     ba8:	a8 2e       	mov	r10, r24
     baa:	b9 2e       	mov	r11, r25
     bac:	e0 2e       	mov	r14, r16
     bae:	f1 2e       	mov	r15, r17
     bb0:	0c 2d       	mov	r16, r12
     bb2:	1d 2d       	mov	r17, r13
     bb4:	81 2c       	mov	r8, r1
     bb6:	91 2c       	mov	r9, r1
     bb8:	b8 86       	std	Y+8, r11	; 0x08
     bba:	af 82       	std	Y+7, r10	; 0x07
     bbc:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     bbe:	f7 01       	movw	r30, r14
     bc0:	41 90       	ld	r4, Z+
     bc2:	51 90       	ld	r5, Z+
     bc4:	7f 01       	movw	r14, r30
     bc6:	66 24       	eor	r6, r6
     bc8:	57 fc       	sbrc	r5, 7
     bca:	60 94       	com	r6
     bcc:	76 2c       	mov	r7, r6
     bce:	c3 01       	movw	r24, r6
     bd0:	b2 01       	movw	r22, r4
     bd2:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
     bd6:	2b ed       	ldi	r18, 0xDB	; 219
     bd8:	3f e0       	ldi	r19, 0x0F	; 15
     bda:	49 e4       	ldi	r20, 0x49	; 73
     bdc:	50 e4       	ldi	r21, 0x40	; 64
     bde:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	44 eb       	ldi	r20, 0xB4	; 180
     be8:	53 e4       	ldi	r21, 0x43	; 67
     bea:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
     bee:	0e 94 aa 30 	call	0x6154	; 0x6154 <cos>
     bf2:	ef 81       	ldd	r30, Y+7	; 0x07
     bf4:	f8 85       	ldd	r31, Y+8	; 0x08
     bf6:	60 83       	st	Z, r22
     bf8:	71 83       	std	Z+1, r23	; 0x01
     bfa:	82 83       	std	Z+2, r24	; 0x02
     bfc:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     bfe:	c3 01       	movw	r24, r6
     c00:	b2 01       	movw	r22, r4
     c02:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
     c06:	2b ed       	ldi	r18, 0xDB	; 219
     c08:	3f e0       	ldi	r19, 0x0F	; 15
     c0a:	49 e4       	ldi	r20, 0x49	; 73
     c0c:	50 e4       	ldi	r21, 0x40	; 64
     c0e:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	44 eb       	ldi	r20, 0xB4	; 180
     c18:	53 e4       	ldi	r21, 0x43	; 67
     c1a:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
     c1e:	0e 94 be 33 	call	0x677c	; 0x677c <sin>
     c22:	2b 01       	movw	r4, r22
     c24:	3c 01       	movw	r6, r24
     c26:	58 01       	movw	r10, r16
     c28:	f8 01       	movw	r30, r16
     c2a:	61 91       	ld	r22, Z+
     c2c:	71 91       	ld	r23, Z+
     c2e:	8f 01       	movw	r16, r30
     c30:	88 27       	eor	r24, r24
     c32:	77 fd       	sbrc	r23, 7
     c34:	80 95       	com	r24
     c36:	98 2f       	mov	r25, r24
     c38:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
     c3c:	2b ed       	ldi	r18, 0xDB	; 219
     c3e:	3f e0       	ldi	r19, 0x0F	; 15
     c40:	49 e4       	ldi	r20, 0x49	; 73
     c42:	50 e4       	ldi	r21, 0x40	; 64
     c44:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	44 e3       	ldi	r20, 0x34	; 52
     c4e:	53 e4       	ldi	r21, 0x43	; 67
     c50:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
     c54:	0e 94 aa 30 	call	0x6154	; 0x6154 <cos>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	c3 01       	movw	r24, r6
     c5e:	b2 01       	movw	r22, r4
     c60:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     c64:	ef 81       	ldd	r30, Y+7	; 0x07
     c66:	f8 85       	ldd	r31, Y+8	; 0x08
     c68:	60 87       	std	Z+8, r22	; 0x08
     c6a:	71 87       	std	Z+9, r23	; 0x09
     c6c:	82 87       	std	Z+10, r24	; 0x0a
     c6e:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index]*M_PI)/180);  // BETA IM
     c70:	f6 01       	movw	r30, r12
     c72:	60 81       	ld	r22, Z
     c74:	71 81       	ldd	r23, Z+1	; 0x01
     c76:	88 27       	eor	r24, r24
     c78:	77 fd       	sbrc	r23, 7
     c7a:	80 95       	com	r24
     c7c:	98 2f       	mov	r25, r24
     c7e:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
     c82:	2b ed       	ldi	r18, 0xDB	; 219
     c84:	3f e0       	ldi	r19, 0x0F	; 15
     c86:	49 e4       	ldi	r20, 0x49	; 73
     c88:	50 e4       	ldi	r21, 0x40	; 64
     c8a:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	44 eb       	ldi	r20, 0xB4	; 180
     c94:	53 e4       	ldi	r21, 0x43	; 67
     c96:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
     c9a:	0e 94 be 33 	call	0x677c	; 0x677c <sin>
     c9e:	2b 01       	movw	r4, r22
     ca0:	3c 01       	movw	r6, r24
     ca2:	f5 01       	movw	r30, r10
     ca4:	60 81       	ld	r22, Z
     ca6:	71 81       	ldd	r23, Z+1	; 0x01
     ca8:	88 27       	eor	r24, r24
     caa:	77 fd       	sbrc	r23, 7
     cac:	80 95       	com	r24
     cae:	98 2f       	mov	r25, r24
     cb0:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
     cb4:	2b ed       	ldi	r18, 0xDB	; 219
     cb6:	3f e0       	ldi	r19, 0x0F	; 15
     cb8:	49 e4       	ldi	r20, 0x49	; 73
     cba:	50 e4       	ldi	r21, 0x40	; 64
     cbc:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	44 e3       	ldi	r20, 0x34	; 52
     cc6:	53 e4       	ldi	r21, 0x43	; 67
     cc8:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
     ccc:	0e 94 be 33 	call	0x677c	; 0x677c <sin>
     cd0:	9b 01       	movw	r18, r22
     cd2:	ac 01       	movw	r20, r24
     cd4:	c3 01       	movw	r24, r6
     cd6:	b2 01       	movw	r22, r4
     cd8:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     cdc:	ef 81       	ldd	r30, Y+7	; 0x07
     cde:	f8 85       	ldd	r31, Y+8	; 0x08
     ce0:	64 87       	std	Z+12, r22	; 0x0c
     ce2:	75 87       	std	Z+13, r23	; 0x0d
     ce4:	86 87       	std	Z+14, r24	; 0x0e
     ce6:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     ce8:	f2 e0       	ldi	r31, 0x02	; 2
     cea:	8f 0e       	add	r8, r31
     cec:	91 1c       	adc	r9, r1
     cee:	8f 81       	ldd	r24, Y+7	; 0x07
     cf0:	98 85       	ldd	r25, Y+8	; 0x08
     cf2:	40 96       	adiw	r24, 0x10	; 16
     cf4:	98 87       	std	Y+8, r25	; 0x08
     cf6:	8f 83       	std	Y+7, r24	; 0x07
     cf8:	82 14       	cp	r8, r2
     cfa:	93 04       	cpc	r9, r3
     cfc:	0c f4       	brge	.+2      	; 0xd00 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     cfe:	5e cf       	rjmp	.-324    	; 0xbbc <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index]*M_PI)/180);  // BETA IM
		thephi_index++;
	}
	print_states(qb_count*2,vec,"Before: ");
     d00:	45 e7       	ldi	r20, 0x75	; 117
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	6b 81       	ldd	r22, Y+3	; 0x03
     d06:	7c 81       	ldd	r23, Y+4	; 0x04
     d08:	c1 01       	movw	r24, r2
     d0a:	0e 94 0b 03 	call	0x616	; 0x616 <_Z12print_statesiP7ComplexPc>
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	49 81       	ldd	r20, Y+1	; 0x01
     d14:	5a 81       	ldd	r21, Y+2	; 0x02
     d16:	6b 81       	ldd	r22, Y+3	; 0x03
     d18:	7c 81       	ldd	r23, Y+4	; 0x04
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN5Gates9kroneckerEP7Complexii>
}
     d22:	28 96       	adiw	r28, 0x08	; 8
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	9f 90       	pop	r9
     d44:	8f 90       	pop	r8
     d46:	7f 90       	pop	r7
     d48:	6f 90       	pop	r6
     d4a:	5f 90       	pop	r5
     d4c:	4f 90       	pop	r4
     d4e:	3f 90       	pop	r3
     d50:	2f 90       	pop	r2
     d52:	08 95       	ret

00000d54 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     d54:	4f 92       	push	r4
     d56:	5f 92       	push	r5
     d58:	6f 92       	push	r6
     d5a:	7f 92       	push	r7
     d5c:	8f 92       	push	r8
     d5e:	9f 92       	push	r9
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	cf 92       	push	r12
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
     d76:	66 2e       	mov	r6, r22
     d78:	77 2e       	mov	r7, r23
     d7a:	6a 01       	movw	r12, r20
	int kron_size=utils.custom_pow(2,qb_count);
     d7c:	9a 01       	movw	r18, r20
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	70 e4       	ldi	r23, 0x40	; 64
     d86:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <_ZN5Utils10custom_powEfi>
     d8a:	0e 94 46 31 	call	0x628c	; 0x628c <__fixsfsi>
     d8e:	4b 01       	movw	r8, r22
     d90:	5c 01       	movw	r10, r24
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	c8 16       	cp	r12, r24
     d96:	d1 04       	cpc	r13, r1
     d98:	44 f0       	brlt	.+16     	; 0xdaa <_ZN5Gates8vec2amplEP7Complexi+0x56>
     d9a:	a4 01       	movw	r20, r8
     d9c:	66 2d       	mov	r22, r6
     d9e:	77 2d       	mov	r23, r7
     da0:	ce 01       	movw	r24, r28
     da2:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN5Gates17reverse_kroneckerEP7Complexi>
     da6:	68 2e       	mov	r6, r24
     da8:	79 2e       	mov	r7, r25
	
	int* newthephi=(int*)malloc(sizeof(int)*(qb_count*2));
     daa:	c6 01       	movw	r24, r12
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
     db8:	48 2e       	mov	r4, r24
     dba:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_count*2;i++) if(i%2==0) newthephi[i]=(360*acos(vec[i].re))/M_PI; else newthephi[i]=(180*vec[i].arg())/M_PI;
     dbc:	cc 0c       	add	r12, r12
     dbe:	dd 1c       	adc	r13, r13
     dc0:	1c 14       	cp	r1, r12
     dc2:	1d 04       	cpc	r1, r13
     dc4:	f4 f5       	brge	.+124    	; 0xe42 <_ZN5Gates8vec2amplEP7Complexi+0xee>
     dc6:	e6 2c       	mov	r14, r6
     dc8:	f7 2c       	mov	r15, r7
     dca:	08 2f       	mov	r16, r24
     dcc:	19 2f       	mov	r17, r25
     dce:	c0 e0       	ldi	r28, 0x00	; 0
     dd0:	d0 e0       	ldi	r29, 0x00	; 0
     dd2:	c0 fd       	sbrc	r28, 0
     dd4:	19 c0       	rjmp	.+50     	; 0xe08 <_ZN5Gates8vec2amplEP7Complexi+0xb4>
     dd6:	f7 01       	movw	r30, r14
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	0e 94 0b 30 	call	0x6016	; 0x6016 <acos>
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	44 eb       	ldi	r20, 0xB4	; 180
     dea:	53 e4       	ldi	r21, 0x43	; 67
     dec:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     df0:	2b ed       	ldi	r18, 0xDB	; 219
     df2:	3f e0       	ldi	r19, 0x0F	; 15
     df4:	49 e4       	ldi	r20, 0x49	; 73
     df6:	50 e4       	ldi	r21, 0x40	; 64
     df8:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
     dfc:	0e 94 46 31 	call	0x628c	; 0x628c <__fixsfsi>
     e00:	f8 01       	movw	r30, r16
     e02:	71 83       	std	Z+1, r23	; 0x01
     e04:	60 83       	st	Z, r22
     e06:	14 c0       	rjmp	.+40     	; 0xe30 <_ZN5Gates8vec2amplEP7Complexi+0xdc>
     e08:	c7 01       	movw	r24, r14
     e0a:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7Complex3argEv>
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	44 e3       	ldi	r20, 0x34	; 52
     e14:	53 e4       	ldi	r21, 0x43	; 67
     e16:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
     e1a:	2b ed       	ldi	r18, 0xDB	; 219
     e1c:	3f e0       	ldi	r19, 0x0F	; 15
     e1e:	49 e4       	ldi	r20, 0x49	; 73
     e20:	50 e4       	ldi	r21, 0x40	; 64
     e22:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
     e26:	0e 94 46 31 	call	0x628c	; 0x628c <__fixsfsi>
     e2a:	f8 01       	movw	r30, r16
     e2c:	71 83       	std	Z+1, r23	; 0x01
     e2e:	60 83       	st	Z, r22
     e30:	21 96       	adiw	r28, 0x01	; 1
     e32:	f8 e0       	ldi	r31, 0x08	; 8
     e34:	ef 0e       	add	r14, r31
     e36:	f1 1c       	adc	r15, r1
     e38:	0e 5f       	subi	r16, 0xFE	; 254
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	cc 15       	cp	r28, r12
     e3e:	dd 05       	cpc	r29, r13
     e40:	41 f6       	brne	.-112    	; 0xdd2 <_ZN5Gates8vec2amplEP7Complexi+0x7e>
	
	print_states(kron_size,vec,"After: ");
     e42:	4e e7       	ldi	r20, 0x7E	; 126
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	66 2d       	mov	r22, r6
     e48:	77 2d       	mov	r23, r7
     e4a:	c4 01       	movw	r24, r8
     e4c:	0e 94 0b 03 	call	0x616	; 0x616 <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     e50:	84 2d       	mov	r24, r4
     e52:	95 2d       	mov	r25, r5
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	bf 90       	pop	r11
     e66:	af 90       	pop	r10
     e68:	9f 90       	pop	r9
     e6a:	8f 90       	pop	r8
     e6c:	7f 90       	pop	r7
     e6e:	6f 90       	pop	r6
     e70:	5f 90       	pop	r5
     e72:	4f 90       	pop	r4
     e74:	08 95       	ret

00000e76 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     e76:	2f 92       	push	r2
     e78:	3f 92       	push	r3
     e7a:	4f 92       	push	r4
     e7c:	5f 92       	push	r5
     e7e:	6f 92       	push	r6
     e80:	7f 92       	push	r7
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	60 97       	sbiw	r28, 0x10	; 16
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	4b 01       	movw	r8, r22
     eac:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     eae:	80 e1       	ldi	r24, 0x10	; 16
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
     eb6:	38 2e       	mov	r3, r24
     eb8:	29 2e       	mov	r2, r25
     eba:	c8 2e       	mov	r12, r24
     ebc:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     ebe:	a1 2c       	mov	r10, r1
     ec0:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     ec2:	24 01       	movw	r4, r8
     ec4:	88 e0       	ldi	r24, 0x08	; 8
     ec6:	48 0e       	add	r4, r24
     ec8:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     eca:	ce 01       	movw	r24, r28
     ecc:	09 96       	adiw	r24, 0x09	; 9
     ece:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     ed2:	75 01       	movw	r14, r10
     ed4:	ee 0c       	add	r14, r14
     ed6:	ff 1c       	adc	r15, r15
     ed8:	ee 0c       	add	r14, r14
     eda:	ff 1c       	adc	r15, r15
     edc:	ee 0c       	add	r14, r14
     ede:	ff 1c       	adc	r15, r15
     ee0:	e6 0c       	add	r14, r6
     ee2:	f7 1c       	adc	r15, r7
     ee4:	d7 01       	movw	r26, r14
     ee6:	0c 91       	ld	r16, X
     ee8:	11 96       	adiw	r26, 0x01	; 1
     eea:	1c 91       	ld	r17, X
     eec:	11 97       	sbiw	r26, 0x01	; 1
     eee:	12 96       	adiw	r26, 0x02	; 2
     ef0:	2c 91       	ld	r18, X
     ef2:	12 97       	sbiw	r26, 0x02	; 2
     ef4:	13 96       	adiw	r26, 0x03	; 3
     ef6:	3c 91       	ld	r19, X
     ef8:	13 97       	sbiw	r26, 0x03	; 3
     efa:	14 96       	adiw	r26, 0x04	; 4
     efc:	4c 91       	ld	r20, X
     efe:	14 97       	sbiw	r26, 0x04	; 4
     f00:	15 96       	adiw	r26, 0x05	; 5
     f02:	5c 91       	ld	r21, X
     f04:	15 97       	sbiw	r26, 0x05	; 5
     f06:	16 96       	adiw	r26, 0x06	; 6
     f08:	6c 91       	ld	r22, X
     f0a:	16 97       	sbiw	r26, 0x06	; 6
     f0c:	17 96       	adiw	r26, 0x07	; 7
     f0e:	7c 91       	ld	r23, X
     f10:	c4 01       	movw	r24, r8
     f12:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7Complex3mulES_>
     f16:	02 2f       	mov	r16, r18
     f18:	13 2f       	mov	r17, r19
     f1a:	24 2f       	mov	r18, r20
     f1c:	35 2f       	mov	r19, r21
     f1e:	46 2f       	mov	r20, r22
     f20:	57 2f       	mov	r21, r23
     f22:	68 2f       	mov	r22, r24
     f24:	79 2f       	mov	r23, r25
     f26:	ce 01       	movw	r24, r28
     f28:	09 96       	adiw	r24, 0x09	; 9
     f2a:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN7Complex3addES_>
     f2e:	29 87       	std	Y+9, r18	; 0x09
     f30:	3a 87       	std	Y+10, r19	; 0x0a
     f32:	4b 87       	std	Y+11, r20	; 0x0b
     f34:	5c 87       	std	Y+12, r21	; 0x0c
     f36:	6d 87       	std	Y+13, r22	; 0x0d
     f38:	7e 87       	std	Y+14, r23	; 0x0e
     f3a:	8f 87       	std	Y+15, r24	; 0x0f
     f3c:	98 8b       	std	Y+16, r25	; 0x10
     f3e:	f7 01       	movw	r30, r14
     f40:	70 96       	adiw	r30, 0x10	; 16
     f42:	d7 01       	movw	r26, r14
     f44:	50 96       	adiw	r26, 0x10	; 16
     f46:	0c 91       	ld	r16, X
     f48:	11 81       	ldd	r17, Z+1	; 0x01
     f4a:	22 81       	ldd	r18, Z+2	; 0x02
     f4c:	33 81       	ldd	r19, Z+3	; 0x03
     f4e:	44 81       	ldd	r20, Z+4	; 0x04
     f50:	55 81       	ldd	r21, Z+5	; 0x05
     f52:	66 81       	ldd	r22, Z+6	; 0x06
     f54:	77 81       	ldd	r23, Z+7	; 0x07
     f56:	c2 01       	movw	r24, r4
     f58:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7Complex3mulES_>
     f5c:	02 2f       	mov	r16, r18
     f5e:	13 2f       	mov	r17, r19
     f60:	24 2f       	mov	r18, r20
     f62:	35 2f       	mov	r19, r21
     f64:	46 2f       	mov	r20, r22
     f66:	57 2f       	mov	r21, r23
     f68:	68 2f       	mov	r22, r24
     f6a:	79 2f       	mov	r23, r25
     f6c:	ce 01       	movw	r24, r28
     f6e:	09 96       	adiw	r24, 0x09	; 9
     f70:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN7Complex3addES_>
     f74:	29 87       	std	Y+9, r18	; 0x09
     f76:	3a 87       	std	Y+10, r19	; 0x0a
     f78:	4b 87       	std	Y+11, r20	; 0x0b
     f7a:	5c 87       	std	Y+12, r21	; 0x0c
     f7c:	6d 87       	std	Y+13, r22	; 0x0d
     f7e:	7e 87       	std	Y+14, r23	; 0x0e
     f80:	8f 87       	std	Y+15, r24	; 0x0f
     f82:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     f84:	89 85       	ldd	r24, Y+9	; 0x09
     f86:	9a 85       	ldd	r25, Y+10	; 0x0a
     f88:	ab 85       	ldd	r26, Y+11	; 0x0b
     f8a:	bc 85       	ldd	r27, Y+12	; 0x0c
     f8c:	f6 01       	movw	r30, r12
     f8e:	80 83       	st	Z, r24
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	a2 83       	std	Z+2, r26	; 0x02
     f94:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     f96:	8d 85       	ldd	r24, Y+13	; 0x0d
     f98:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9a:	af 85       	ldd	r26, Y+15	; 0x0f
     f9c:	b8 89       	ldd	r27, Y+16	; 0x10
     f9e:	84 83       	std	Z+4, r24	; 0x04
     fa0:	95 83       	std	Z+5, r25	; 0x05
     fa2:	a6 83       	std	Z+6, r26	; 0x06
     fa4:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     fa6:	ff ef       	ldi	r31, 0xFF	; 255
     fa8:	af 1a       	sub	r10, r31
     faa:	bf 0a       	sbc	r11, r31
     fac:	88 e0       	ldi	r24, 0x08	; 8
     fae:	c8 0e       	add	r12, r24
     fb0:	d1 1c       	adc	r13, r1
     fb2:	a2 e0       	ldi	r26, 0x02	; 2
     fb4:	aa 16       	cp	r10, r26
     fb6:	b1 04       	cpc	r11, r1
     fb8:	09 f0       	breq	.+2      	; 0xfbc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     fba:	87 cf       	rjmp	.-242    	; 0xeca <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     fbc:	83 2d       	mov	r24, r3
     fbe:	92 2d       	mov	r25, r2
     fc0:	60 96       	adiw	r28, 0x10	; 16
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	bf 90       	pop	r11
     fde:	af 90       	pop	r10
     fe0:	9f 90       	pop	r9
     fe2:	8f 90       	pop	r8
     fe4:	7f 90       	pop	r7
     fe6:	6f 90       	pop	r6
     fe8:	5f 90       	pop	r5
     fea:	4f 90       	pop	r4
     fec:	3f 90       	pop	r3
     fee:	2f 90       	pop	r2
     ff0:	08 95       	ret

00000ff2 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     ff2:	2f 92       	push	r2
     ff4:	3f 92       	push	r3
     ff6:	4f 92       	push	r4
     ff8:	5f 92       	push	r5
     ffa:	6f 92       	push	r6
     ffc:	7f 92       	push	r7
     ffe:	8f 92       	push	r8
    1000:	9f 92       	push	r9
    1002:	af 92       	push	r10
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	64 97       	sbiw	r28, 0x14	; 20
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	3b 01       	movw	r6, r22
    1028:	e4 2e       	mov	r14, r20
    102a:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
    102c:	80 e2       	ldi	r24, 0x20	; 32
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
    1034:	8b 8b       	std	Y+19, r24	; 0x13
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	48 2e       	mov	r4, r24
    103a:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
    103c:	81 2c       	mov	r8, r1
    103e:	91 2c       	mov	r9, r1
    1040:	e9 8a       	std	Y+17, r14	; 0x11
    1042:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
    1044:	21 2c       	mov	r2, r1
    1046:	31 2c       	mov	r3, r1
    1048:	ce 01       	movw	r24, r28
    104a:	09 96       	adiw	r24, 0x09	; 9
    104c:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN7ComplexC1Ev>
    1050:	c9 88       	ldd	r12, Y+17	; 0x11
    1052:	da 88       	ldd	r13, Y+18	; 0x12
    1054:	e2 2c       	mov	r14, r2
    1056:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
    1058:	54 01       	movw	r10, r8
    105a:	aa 0c       	add	r10, r10
    105c:	bb 1c       	adc	r11, r11
    105e:	aa 0c       	add	r10, r10
    1060:	bb 1c       	adc	r11, r11
    1062:	aa 0c       	add	r10, r10
    1064:	bb 1c       	adc	r11, r11
    1066:	f5 01       	movw	r30, r10
    1068:	ec 0d       	add	r30, r12
    106a:	fd 1d       	adc	r31, r13
    106c:	00 81       	ld	r16, Z
    106e:	11 81       	ldd	r17, Z+1	; 0x01
    1070:	22 81       	ldd	r18, Z+2	; 0x02
    1072:	33 81       	ldd	r19, Z+3	; 0x03
    1074:	44 81       	ldd	r20, Z+4	; 0x04
    1076:	55 81       	ldd	r21, Z+5	; 0x05
    1078:	66 81       	ldd	r22, Z+6	; 0x06
    107a:	77 81       	ldd	r23, Z+7	; 0x07
    107c:	c3 01       	movw	r24, r6
    107e:	8e 0d       	add	r24, r14
    1080:	9f 1d       	adc	r25, r15
    1082:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7Complex3mulES_>
    1086:	29 83       	std	Y+1, r18	; 0x01
    1088:	3a 83       	std	Y+2, r19	; 0x02
    108a:	4b 83       	std	Y+3, r20	; 0x03
    108c:	5c 83       	std	Y+4, r21	; 0x04
    108e:	6d 83       	std	Y+5, r22	; 0x05
    1090:	7e 83       	std	Y+6, r23	; 0x06
    1092:	8f 83       	std	Y+7, r24	; 0x07
    1094:	98 87       	std	Y+8, r25	; 0x08
    1096:	02 2f       	mov	r16, r18
    1098:	13 2f       	mov	r17, r19
    109a:	24 2f       	mov	r18, r20
    109c:	35 2f       	mov	r19, r21
    109e:	46 2f       	mov	r20, r22
    10a0:	57 2f       	mov	r21, r23
    10a2:	68 2f       	mov	r22, r24
    10a4:	79 2f       	mov	r23, r25
    10a6:	ce 01       	movw	r24, r28
    10a8:	09 96       	adiw	r24, 0x09	; 9
    10aa:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN7Complex3addES_>
    10ae:	29 87       	std	Y+9, r18	; 0x09
    10b0:	3a 87       	std	Y+10, r19	; 0x0a
    10b2:	4b 87       	std	Y+11, r20	; 0x0b
    10b4:	5c 87       	std	Y+12, r21	; 0x0c
    10b6:	6d 87       	std	Y+13, r22	; 0x0d
    10b8:	7e 87       	std	Y+14, r23	; 0x0e
    10ba:	8f 87       	std	Y+15, r24	; 0x0f
    10bc:	98 8b       	std	Y+16, r25	; 0x10
    10be:	88 e0       	ldi	r24, 0x08	; 8
    10c0:	e8 0e       	add	r14, r24
    10c2:	f1 1c       	adc	r15, r1
    10c4:	e0 e2       	ldi	r30, 0x20	; 32
    10c6:	ce 0e       	add	r12, r30
    10c8:	d1 1c       	adc	r13, r1
    10ca:	f0 e2       	ldi	r31, 0x20	; 32
    10cc:	ef 16       	cp	r14, r31
    10ce:	f1 04       	cpc	r15, r1
    10d0:	51 f6       	brne	.-108    	; 0x1066 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
    10d2:	89 85       	ldd	r24, Y+9	; 0x09
    10d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    10d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    10da:	f2 01       	movw	r30, r4
    10dc:	80 83       	st	Z, r24
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	a2 83       	std	Z+2, r26	; 0x02
    10e2:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    10e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e8:	af 85       	ldd	r26, Y+15	; 0x0f
    10ea:	b8 89       	ldd	r27, Y+16	; 0x10
    10ec:	84 83       	std	Z+4, r24	; 0x04
    10ee:	95 83       	std	Z+5, r25	; 0x05
    10f0:	a6 83       	std	Z+6, r26	; 0x06
    10f2:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    10f4:	ff ef       	ldi	r31, 0xFF	; 255
    10f6:	8f 1a       	sub	r8, r31
    10f8:	9f 0a       	sbc	r9, r31
    10fa:	88 e0       	ldi	r24, 0x08	; 8
    10fc:	48 0e       	add	r4, r24
    10fe:	51 1c       	adc	r5, r1
    1100:	e4 e0       	ldi	r30, 0x04	; 4
    1102:	8e 16       	cp	r8, r30
    1104:	91 04       	cpc	r9, r1
    1106:	09 f0       	breq	.+2      	; 0x110a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
    1108:	9f cf       	rjmp	.-194    	; 0x1048 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    110a:	8b 89       	ldd	r24, Y+19	; 0x13
    110c:	9c 89       	ldd	r25, Y+20	; 0x14
    110e:	64 96       	adiw	r28, 0x14	; 20
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	bf 90       	pop	r11
    112c:	af 90       	pop	r10
    112e:	9f 90       	pop	r9
    1130:	8f 90       	pop	r8
    1132:	7f 90       	pop	r7
    1134:	6f 90       	pop	r6
    1136:	5f 90       	pop	r5
    1138:	4f 90       	pop	r4
    113a:	3f 90       	pop	r3
    113c:	2f 90       	pop	r2
    113e:	08 95       	ret

00001140 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>:
Complex * Gates::multiply8x8(Complex *q,Complex matrix[8][8]){
    1140:	2f 92       	push	r2
    1142:	3f 92       	push	r3
    1144:	4f 92       	push	r4
    1146:	5f 92       	push	r5
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	62 97       	sbiw	r28, 0x12	; 18
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	4b 01       	movw	r8, r22
    1176:	34 2e       	mov	r3, r20
    1178:	25 2e       	mov	r2, r21
	int qb_size=8;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
    117a:	80 e4       	ldi	r24, 0x40	; 64
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
    1182:	89 8b       	std	Y+17, r24	; 0x11
    1184:	9a 8b       	std	Y+18, r25	; 0x12
    1186:	48 2e       	mov	r4, r24
    1188:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
    118a:	61 2c       	mov	r6, r1
    118c:	71 2c       	mov	r7, r1
		Complex tmp;
    118e:	ce 01       	movw	r24, r28
    1190:	09 96       	adiw	r24, 0x09	; 9
    1192:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN7ComplexC1Ev>
    1196:	c3 2c       	mov	r12, r3
    1198:	d2 2c       	mov	r13, r2
    119a:	e1 2c       	mov	r14, r1
    119c:	f1 2c       	mov	r15, r1
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
    119e:	53 01       	movw	r10, r6
    11a0:	aa 0c       	add	r10, r10
    11a2:	bb 1c       	adc	r11, r11
    11a4:	aa 0c       	add	r10, r10
    11a6:	bb 1c       	adc	r11, r11
    11a8:	aa 0c       	add	r10, r10
    11aa:	bb 1c       	adc	r11, r11
    11ac:	f5 01       	movw	r30, r10
    11ae:	ec 0d       	add	r30, r12
    11b0:	fd 1d       	adc	r31, r13
    11b2:	00 81       	ld	r16, Z
    11b4:	11 81       	ldd	r17, Z+1	; 0x01
    11b6:	22 81       	ldd	r18, Z+2	; 0x02
    11b8:	33 81       	ldd	r19, Z+3	; 0x03
    11ba:	44 81       	ldd	r20, Z+4	; 0x04
    11bc:	55 81       	ldd	r21, Z+5	; 0x05
    11be:	66 81       	ldd	r22, Z+6	; 0x06
    11c0:	77 81       	ldd	r23, Z+7	; 0x07
    11c2:	c4 01       	movw	r24, r8
    11c4:	8e 0d       	add	r24, r14
    11c6:	9f 1d       	adc	r25, r15
    11c8:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7Complex3mulES_>
    11cc:	29 83       	std	Y+1, r18	; 0x01
    11ce:	3a 83       	std	Y+2, r19	; 0x02
    11d0:	4b 83       	std	Y+3, r20	; 0x03
    11d2:	5c 83       	std	Y+4, r21	; 0x04
    11d4:	6d 83       	std	Y+5, r22	; 0x05
    11d6:	7e 83       	std	Y+6, r23	; 0x06
    11d8:	8f 83       	std	Y+7, r24	; 0x07
    11da:	98 87       	std	Y+8, r25	; 0x08
    11dc:	02 2f       	mov	r16, r18
    11de:	13 2f       	mov	r17, r19
    11e0:	24 2f       	mov	r18, r20
    11e2:	35 2f       	mov	r19, r21
    11e4:	46 2f       	mov	r20, r22
    11e6:	57 2f       	mov	r21, r23
    11e8:	68 2f       	mov	r22, r24
    11ea:	79 2f       	mov	r23, r25
    11ec:	ce 01       	movw	r24, r28
    11ee:	09 96       	adiw	r24, 0x09	; 9
    11f0:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN7Complex3addES_>
    11f4:	29 87       	std	Y+9, r18	; 0x09
    11f6:	3a 87       	std	Y+10, r19	; 0x0a
    11f8:	4b 87       	std	Y+11, r20	; 0x0b
    11fa:	5c 87       	std	Y+12, r21	; 0x0c
    11fc:	6d 87       	std	Y+13, r22	; 0x0d
    11fe:	7e 87       	std	Y+14, r23	; 0x0e
    1200:	8f 87       	std	Y+15, r24	; 0x0f
    1202:	98 8b       	std	Y+16, r25	; 0x10
    1204:	88 e0       	ldi	r24, 0x08	; 8
    1206:	e8 0e       	add	r14, r24
    1208:	f1 1c       	adc	r15, r1
    120a:	e0 e4       	ldi	r30, 0x40	; 64
    120c:	ce 0e       	add	r12, r30
    120e:	d1 1c       	adc	r13, r1
    1210:	f0 e4       	ldi	r31, 0x40	; 64
    1212:	ef 16       	cp	r14, r31
    1214:	f1 04       	cpc	r15, r1
    1216:	51 f6       	brne	.-108    	; 0x11ac <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x6c>
		result[i].re=tmp.re;
    1218:	89 85       	ldd	r24, Y+9	; 0x09
    121a:	9a 85       	ldd	r25, Y+10	; 0x0a
    121c:	ab 85       	ldd	r26, Y+11	; 0x0b
    121e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1220:	f2 01       	movw	r30, r4
    1222:	80 83       	st	Z, r24
    1224:	91 83       	std	Z+1, r25	; 0x01
    1226:	a2 83       	std	Z+2, r26	; 0x02
    1228:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	9e 85       	ldd	r25, Y+14	; 0x0e
    122e:	af 85       	ldd	r26, Y+15	; 0x0f
    1230:	b8 89       	ldd	r27, Y+16	; 0x10
    1232:	84 83       	std	Z+4, r24	; 0x04
    1234:	95 83       	std	Z+5, r25	; 0x05
    1236:	a6 83       	std	Z+6, r26	; 0x06
    1238:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply8x8(Complex *q,Complex matrix[8][8]){
	int qb_size=8;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    123a:	ff ef       	ldi	r31, 0xFF	; 255
    123c:	6f 1a       	sub	r6, r31
    123e:	7f 0a       	sbc	r7, r31
    1240:	88 e0       	ldi	r24, 0x08	; 8
    1242:	48 0e       	add	r4, r24
    1244:	51 1c       	adc	r5, r1
    1246:	e8 e0       	ldi	r30, 0x08	; 8
    1248:	6e 16       	cp	r6, r30
    124a:	71 04       	cpc	r7, r1
    124c:	09 f0       	breq	.+2      	; 0x1250 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x110>
    124e:	9f cf       	rjmp	.-194    	; 0x118e <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x4e>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    1250:	89 89       	ldd	r24, Y+17	; 0x11
    1252:	9a 89       	ldd	r25, Y+18	; 0x12
    1254:	62 96       	adiw	r28, 0x12	; 18
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	9f 90       	pop	r9
    1276:	8f 90       	pop	r8
    1278:	7f 90       	pop	r7
    127a:	6f 90       	pop	r6
    127c:	5f 90       	pop	r5
    127e:	4f 90       	pop	r4
    1280:	3f 90       	pop	r3
    1282:	2f 90       	pop	r2
    1284:	08 95       	ret

00001286 <_ZN5Gates1XEii>:

int * Gates::X(int theta,int phi){
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	a4 97       	sbiw	r28, 0x24	; 36
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	7c 01       	movw	r14, r24
    12ac:	5b 01       	movw	r10, r22
    12ae:	6a 01       	movw	r12, r20
	Complex x_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,0),Complex(1,0)},
													   {Complex(1,0),Complex(0,0)}};
    12b0:	00 e0       	ldi	r16, 0x00	; 0
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	98 01       	movw	r18, r16
    12b6:	b9 01       	movw	r22, r18
    12b8:	a8 01       	movw	r20, r16
    12ba:	ce 01       	movw	r24, r28
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    12c2:	00 e0       	ldi	r16, 0x00	; 0
    12c4:	10 e0       	ldi	r17, 0x00	; 0
    12c6:	98 01       	movw	r18, r16
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	60 e8       	ldi	r22, 0x80	; 128
    12ce:	7f e3       	ldi	r23, 0x3F	; 63
    12d0:	ce 01       	movw	r24, r28
    12d2:	09 96       	adiw	r24, 0x09	; 9
    12d4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    12d8:	00 e0       	ldi	r16, 0x00	; 0
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	98 01       	movw	r18, r16
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	60 e8       	ldi	r22, 0x80	; 128
    12e4:	7f e3       	ldi	r23, 0x3F	; 63
    12e6:	ce 01       	movw	r24, r28
    12e8:	41 96       	adiw	r24, 0x11	; 17
    12ea:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	98 01       	movw	r18, r16
    12f4:	b9 01       	movw	r22, r18
    12f6:	a8 01       	movw	r20, r16
    12f8:	ce 01       	movw	r24, r28
    12fa:	49 96       	adiw	r24, 0x19	; 25
    12fc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[1]={phi};
    1300:	bc a2       	std	Y+36, r11	; 0x24
    1302:	ab a2       	std	Y+35, r10	; 0x23
    1304:	da a2       	std	Y+34, r13	; 0x22
    1306:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),x_matrix),QB_SIZE1);
    1308:	9e 01       	movw	r18, r28
    130a:	2f 5d       	subi	r18, 0xDF	; 223
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	ae 01       	movw	r20, r28
    1310:	4d 5d       	subi	r20, 0xDD	; 221
    1312:	5f 4f       	sbci	r21, 0xFF	; 255
    1314:	61 e0       	ldi	r22, 0x01	; 1
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	c7 01       	movw	r24, r14
    131a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    131e:	ae 01       	movw	r20, r28
    1320:	4f 5f       	subi	r20, 0xFF	; 255
    1322:	5f 4f       	sbci	r21, 0xFF	; 255
    1324:	bc 01       	movw	r22, r24
    1326:	c7 01       	movw	r24, r14
    1328:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	bc 01       	movw	r22, r24
    1332:	c7 01       	movw	r24, r14
    1334:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    1338:	a4 96       	adiw	r28, 0x24	; 36
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	08 95       	ret

0000135a <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	a4 97       	sbiw	r28, 0x24	; 36
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	7c 01       	movw	r14, r24
    1380:	5b 01       	movw	r10, r22
    1382:	6a 01       	movw	r12, r20
	Complex y_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,0),Complex(0,-1)},
													   {Complex(0,1),Complex(0,0)}};
    1384:	00 e0       	ldi	r16, 0x00	; 0
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	98 01       	movw	r18, r16
    138a:	b9 01       	movw	r22, r18
    138c:	a8 01       	movw	r20, r16
    138e:	ce 01       	movw	r24, r28
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1396:	00 e0       	ldi	r16, 0x00	; 0
    1398:	10 e0       	ldi	r17, 0x00	; 0
    139a:	20 e8       	ldi	r18, 0x80	; 128
    139c:	3f eb       	ldi	r19, 0xBF	; 191
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	ba 01       	movw	r22, r20
    13a4:	ce 01       	movw	r24, r28
    13a6:	09 96       	adiw	r24, 0x09	; 9
    13a8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    13ac:	00 e0       	ldi	r16, 0x00	; 0
    13ae:	10 e0       	ldi	r17, 0x00	; 0
    13b0:	20 e8       	ldi	r18, 0x80	; 128
    13b2:	3f e3       	ldi	r19, 0x3F	; 63
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	ba 01       	movw	r22, r20
    13ba:	ce 01       	movw	r24, r28
    13bc:	41 96       	adiw	r24, 0x11	; 17
    13be:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    13c2:	00 e0       	ldi	r16, 0x00	; 0
    13c4:	10 e0       	ldi	r17, 0x00	; 0
    13c6:	98 01       	movw	r18, r16
    13c8:	b9 01       	movw	r22, r18
    13ca:	a8 01       	movw	r20, r16
    13cc:	ce 01       	movw	r24, r28
    13ce:	49 96       	adiw	r24, 0x19	; 25
    13d0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    13d4:	bc a2       	std	Y+36, r11	; 0x24
    13d6:	ab a2       	std	Y+35, r10	; 0x23
    13d8:	da a2       	std	Y+34, r13	; 0x22
    13da:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),y_matrix),QB_SIZE1);
    13dc:	9e 01       	movw	r18, r28
    13de:	2f 5d       	subi	r18, 0xDF	; 223
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	ae 01       	movw	r20, r28
    13e4:	4d 5d       	subi	r20, 0xDD	; 221
    13e6:	5f 4f       	sbci	r21, 0xFF	; 255
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	c7 01       	movw	r24, r14
    13ee:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    13f2:	ae 01       	movw	r20, r28
    13f4:	4f 5f       	subi	r20, 0xFF	; 255
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	bc 01       	movw	r22, r24
    13fa:	c7 01       	movw	r24, r14
    13fc:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	bc 01       	movw	r22, r24
    1406:	c7 01       	movw	r24, r14
    1408:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    140c:	a4 96       	adiw	r28, 0x24	; 36
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	df 90       	pop	r13
    1426:	cf 90       	pop	r12
    1428:	bf 90       	pop	r11
    142a:	af 90       	pop	r10
    142c:	08 95       	ret

0000142e <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	a4 97       	sbiw	r28, 0x24	; 36
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	7c 01       	movw	r14, r24
    1454:	5b 01       	movw	r10, r22
    1456:	6a 01       	movw	r12, r20
	Complex z_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(-1,0)}};
    1458:	00 e0       	ldi	r16, 0x00	; 0
    145a:	10 e0       	ldi	r17, 0x00	; 0
    145c:	98 01       	movw	r18, r16
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	60 e8       	ldi	r22, 0x80	; 128
    1464:	7f e3       	ldi	r23, 0x3F	; 63
    1466:	ce 01       	movw	r24, r28
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    146e:	00 e0       	ldi	r16, 0x00	; 0
    1470:	10 e0       	ldi	r17, 0x00	; 0
    1472:	98 01       	movw	r18, r16
    1474:	b9 01       	movw	r22, r18
    1476:	a8 01       	movw	r20, r16
    1478:	ce 01       	movw	r24, r28
    147a:	09 96       	adiw	r24, 0x09	; 9
    147c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1480:	00 e0       	ldi	r16, 0x00	; 0
    1482:	10 e0       	ldi	r17, 0x00	; 0
    1484:	98 01       	movw	r18, r16
    1486:	b9 01       	movw	r22, r18
    1488:	a8 01       	movw	r20, r16
    148a:	ce 01       	movw	r24, r28
    148c:	41 96       	adiw	r24, 0x11	; 17
    148e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1492:	00 e0       	ldi	r16, 0x00	; 0
    1494:	10 e0       	ldi	r17, 0x00	; 0
    1496:	98 01       	movw	r18, r16
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	60 e8       	ldi	r22, 0x80	; 128
    149e:	7f eb       	ldi	r23, 0xBF	; 191
    14a0:	ce 01       	movw	r24, r28
    14a2:	49 96       	adiw	r24, 0x19	; 25
    14a4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    14a8:	bc a2       	std	Y+36, r11	; 0x24
    14aa:	ab a2       	std	Y+35, r10	; 0x23
    14ac:	da a2       	std	Y+34, r13	; 0x22
    14ae:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),z_matrix),QB_SIZE1);
    14b0:	9e 01       	movw	r18, r28
    14b2:	2f 5d       	subi	r18, 0xDF	; 223
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255
    14b6:	ae 01       	movw	r20, r28
    14b8:	4d 5d       	subi	r20, 0xDD	; 221
    14ba:	5f 4f       	sbci	r21, 0xFF	; 255
    14bc:	61 e0       	ldi	r22, 0x01	; 1
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	c7 01       	movw	r24, r14
    14c2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    14c6:	ae 01       	movw	r20, r28
    14c8:	4f 5f       	subi	r20, 0xFF	; 255
    14ca:	5f 4f       	sbci	r21, 0xFF	; 255
    14cc:	bc 01       	movw	r22, r24
    14ce:	c7 01       	movw	r24, r14
    14d0:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    14d4:	41 e0       	ldi	r20, 0x01	; 1
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	bc 01       	movw	r22, r24
    14da:	c7 01       	movw	r24, r14
    14dc:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    14e0:	a4 96       	adiw	r28, 0x24	; 36
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	bf 90       	pop	r11
    14fe:	af 90       	pop	r10
    1500:	08 95       	ret

00001502 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    1502:	af 92       	push	r10
    1504:	bf 92       	push	r11
    1506:	cf 92       	push	r12
    1508:	df 92       	push	r13
    150a:	ef 92       	push	r14
    150c:	ff 92       	push	r15
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	a4 97       	sbiw	r28, 0x24	; 36
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	7c 01       	movw	r14, r24
    1528:	5b 01       	movw	r10, r22
    152a:	6a 01       	movw	r12, r20
	Complex h_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
													   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    152c:	00 e0       	ldi	r16, 0x00	; 0
    152e:	10 e0       	ldi	r17, 0x00	; 0
    1530:	98 01       	movw	r18, r16
    1532:	43 ef       	ldi	r20, 0xF3	; 243
    1534:	54 e0       	ldi	r21, 0x04	; 4
    1536:	65 e3       	ldi	r22, 0x35	; 53
    1538:	7f e3       	ldi	r23, 0x3F	; 63
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	98 01       	movw	r18, r16
    1548:	43 ef       	ldi	r20, 0xF3	; 243
    154a:	54 e0       	ldi	r21, 0x04	; 4
    154c:	65 e3       	ldi	r22, 0x35	; 53
    154e:	7f e3       	ldi	r23, 0x3F	; 63
    1550:	ce 01       	movw	r24, r28
    1552:	09 96       	adiw	r24, 0x09	; 9
    1554:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1558:	00 e0       	ldi	r16, 0x00	; 0
    155a:	10 e0       	ldi	r17, 0x00	; 0
    155c:	98 01       	movw	r18, r16
    155e:	43 ef       	ldi	r20, 0xF3	; 243
    1560:	54 e0       	ldi	r21, 0x04	; 4
    1562:	65 e3       	ldi	r22, 0x35	; 53
    1564:	7f e3       	ldi	r23, 0x3F	; 63
    1566:	ce 01       	movw	r24, r28
    1568:	41 96       	adiw	r24, 0x11	; 17
    156a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    156e:	00 e0       	ldi	r16, 0x00	; 0
    1570:	10 e0       	ldi	r17, 0x00	; 0
    1572:	98 01       	movw	r18, r16
    1574:	43 ef       	ldi	r20, 0xF3	; 243
    1576:	54 e0       	ldi	r21, 0x04	; 4
    1578:	65 e3       	ldi	r22, 0x35	; 53
    157a:	7f eb       	ldi	r23, 0xBF	; 191
    157c:	ce 01       	movw	r24, r28
    157e:	49 96       	adiw	r24, 0x19	; 25
    1580:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1584:	bc a2       	std	Y+36, r11	; 0x24
    1586:	ab a2       	std	Y+35, r10	; 0x23
    1588:	da a2       	std	Y+34, r13	; 0x22
    158a:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),h_matrix),QB_SIZE1);
    158c:	9e 01       	movw	r18, r28
    158e:	2f 5d       	subi	r18, 0xDF	; 223
    1590:	3f 4f       	sbci	r19, 0xFF	; 255
    1592:	ae 01       	movw	r20, r28
    1594:	4d 5d       	subi	r20, 0xDD	; 221
    1596:	5f 4f       	sbci	r21, 0xFF	; 255
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	c7 01       	movw	r24, r14
    159e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    15a2:	ae 01       	movw	r20, r28
    15a4:	4f 5f       	subi	r20, 0xFF	; 255
    15a6:	5f 4f       	sbci	r21, 0xFF	; 255
    15a8:	bc 01       	movw	r22, r24
    15aa:	c7 01       	movw	r24, r14
    15ac:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	bc 01       	movw	r22, r24
    15b6:	c7 01       	movw	r24, r14
    15b8:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    15bc:	a4 96       	adiw	r28, 0x24	; 36
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	ef 90       	pop	r14
    15d4:	df 90       	pop	r13
    15d6:	cf 90       	pop	r12
    15d8:	bf 90       	pop	r11
    15da:	af 90       	pop	r10
    15dc:	08 95       	ret

000015de <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    15de:	af 92       	push	r10
    15e0:	bf 92       	push	r11
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	a4 97       	sbiw	r28, 0x24	; 36
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	7c 01       	movw	r14, r24
    1604:	5b 01       	movw	r10, r22
    1606:	6a 01       	movw	r12, r20
	Complex s_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(0,1)}};
    1608:	00 e0       	ldi	r16, 0x00	; 0
    160a:	10 e0       	ldi	r17, 0x00	; 0
    160c:	98 01       	movw	r18, r16
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	60 e8       	ldi	r22, 0x80	; 128
    1614:	7f e3       	ldi	r23, 0x3F	; 63
    1616:	ce 01       	movw	r24, r28
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    161e:	00 e0       	ldi	r16, 0x00	; 0
    1620:	10 e0       	ldi	r17, 0x00	; 0
    1622:	98 01       	movw	r18, r16
    1624:	b9 01       	movw	r22, r18
    1626:	a8 01       	movw	r20, r16
    1628:	ce 01       	movw	r24, r28
    162a:	09 96       	adiw	r24, 0x09	; 9
    162c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1630:	00 e0       	ldi	r16, 0x00	; 0
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	98 01       	movw	r18, r16
    1636:	b9 01       	movw	r22, r18
    1638:	a8 01       	movw	r20, r16
    163a:	ce 01       	movw	r24, r28
    163c:	41 96       	adiw	r24, 0x11	; 17
    163e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1642:	00 e0       	ldi	r16, 0x00	; 0
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	20 e8       	ldi	r18, 0x80	; 128
    1648:	3f e3       	ldi	r19, 0x3F	; 63
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	ba 01       	movw	r22, r20
    1650:	ce 01       	movw	r24, r28
    1652:	49 96       	adiw	r24, 0x19	; 25
    1654:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1658:	bc a2       	std	Y+36, r11	; 0x24
    165a:	ab a2       	std	Y+35, r10	; 0x23
    165c:	da a2       	std	Y+34, r13	; 0x22
    165e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),s_matrix),QB_SIZE1);
    1660:	9e 01       	movw	r18, r28
    1662:	2f 5d       	subi	r18, 0xDF	; 223
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
    1666:	ae 01       	movw	r20, r28
    1668:	4d 5d       	subi	r20, 0xDD	; 221
    166a:	5f 4f       	sbci	r21, 0xFF	; 255
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	c7 01       	movw	r24, r14
    1672:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    1676:	ae 01       	movw	r20, r28
    1678:	4f 5f       	subi	r20, 0xFF	; 255
    167a:	5f 4f       	sbci	r21, 0xFF	; 255
    167c:	bc 01       	movw	r22, r24
    167e:	c7 01       	movw	r24, r14
    1680:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	bc 01       	movw	r22, r24
    168a:	c7 01       	movw	r24, r14
    168c:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    1690:	a4 96       	adiw	r28, 0x24	; 36
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	cf 90       	pop	r12
    16ac:	bf 90       	pop	r11
    16ae:	af 90       	pop	r10
    16b0:	08 95       	ret

000016b2 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    16b2:	af 92       	push	r10
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	a4 97       	sbiw	r28, 0x24	; 36
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	7c 01       	movw	r14, r24
    16d8:	5b 01       	movw	r10, r22
    16da:	6a 01       	movw	r12, r20
	Complex t_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    16dc:	00 e0       	ldi	r16, 0x00	; 0
    16de:	10 e0       	ldi	r17, 0x00	; 0
    16e0:	98 01       	movw	r18, r16
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	60 e8       	ldi	r22, 0x80	; 128
    16e8:	7f e3       	ldi	r23, 0x3F	; 63
    16ea:	ce 01       	movw	r24, r28
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    16f2:	00 e0       	ldi	r16, 0x00	; 0
    16f4:	10 e0       	ldi	r17, 0x00	; 0
    16f6:	98 01       	movw	r18, r16
    16f8:	b9 01       	movw	r22, r18
    16fa:	a8 01       	movw	r20, r16
    16fc:	ce 01       	movw	r24, r28
    16fe:	09 96       	adiw	r24, 0x09	; 9
    1700:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1704:	00 e0       	ldi	r16, 0x00	; 0
    1706:	10 e0       	ldi	r17, 0x00	; 0
    1708:	98 01       	movw	r18, r16
    170a:	b9 01       	movw	r22, r18
    170c:	a8 01       	movw	r20, r16
    170e:	ce 01       	movw	r24, r28
    1710:	41 96       	adiw	r24, 0x11	; 17
    1712:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1716:	03 ef       	ldi	r16, 0xF3	; 243
    1718:	14 e0       	ldi	r17, 0x04	; 4
    171a:	25 e3       	ldi	r18, 0x35	; 53
    171c:	3f e3       	ldi	r19, 0x3F	; 63
    171e:	b9 01       	movw	r22, r18
    1720:	a8 01       	movw	r20, r16
    1722:	ce 01       	movw	r24, r28
    1724:	49 96       	adiw	r24, 0x19	; 25
    1726:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    172a:	bc a2       	std	Y+36, r11	; 0x24
    172c:	ab a2       	std	Y+35, r10	; 0x23
    172e:	da a2       	std	Y+34, r13	; 0x22
    1730:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),t_matrix),QB_SIZE1);
    1732:	9e 01       	movw	r18, r28
    1734:	2f 5d       	subi	r18, 0xDF	; 223
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	ae 01       	movw	r20, r28
    173a:	4d 5d       	subi	r20, 0xDD	; 221
    173c:	5f 4f       	sbci	r21, 0xFF	; 255
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	c7 01       	movw	r24, r14
    1744:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    1748:	ae 01       	movw	r20, r28
    174a:	4f 5f       	subi	r20, 0xFF	; 255
    174c:	5f 4f       	sbci	r21, 0xFF	; 255
    174e:	bc 01       	movw	r22, r24
    1750:	c7 01       	movw	r24, r14
    1752:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	bc 01       	movw	r22, r24
    175c:	c7 01       	movw	r24, r14
    175e:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    1762:	a4 96       	adiw	r28, 0x24	; 36
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	ff 90       	pop	r15
    1778:	ef 90       	pop	r14
    177a:	df 90       	pop	r13
    177c:	cf 90       	pop	r12
    177e:	bf 90       	pop	r11
    1780:	af 90       	pop	r10
    1782:	08 95       	ret

00001784 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    1784:	6f 92       	push	r6
    1786:	7f 92       	push	r7
    1788:	8f 92       	push	r8
    178a:	9f 92       	push	r9
    178c:	af 92       	push	r10
    178e:	bf 92       	push	r11
    1790:	cf 92       	push	r12
    1792:	df 92       	push	r13
    1794:	ef 92       	push	r14
    1796:	ff 92       	push	r15
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	c8 58       	subi	r28, 0x88	; 136
    17a6:	d1 09       	sbc	r29, r1
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	7c 01       	movw	r14, r24
    17b4:	3b 01       	movw	r6, r22
    17b6:	5a 01       	movw	r10, r20
    17b8:	49 01       	movw	r8, r18
    17ba:	68 01       	movw	r12, r16
	Complex cno_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    17bc:	00 e0       	ldi	r16, 0x00	; 0
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	98 01       	movw	r18, r16
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	60 e8       	ldi	r22, 0x80	; 128
    17c8:	7f e3       	ldi	r23, 0x3F	; 63
    17ca:	ce 01       	movw	r24, r28
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    17d2:	00 e0       	ldi	r16, 0x00	; 0
    17d4:	10 e0       	ldi	r17, 0x00	; 0
    17d6:	98 01       	movw	r18, r16
    17d8:	b9 01       	movw	r22, r18
    17da:	a8 01       	movw	r20, r16
    17dc:	ce 01       	movw	r24, r28
    17de:	09 96       	adiw	r24, 0x09	; 9
    17e0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    17e4:	00 e0       	ldi	r16, 0x00	; 0
    17e6:	10 e0       	ldi	r17, 0x00	; 0
    17e8:	98 01       	movw	r18, r16
    17ea:	b9 01       	movw	r22, r18
    17ec:	a8 01       	movw	r20, r16
    17ee:	ce 01       	movw	r24, r28
    17f0:	41 96       	adiw	r24, 0x11	; 17
    17f2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    17f6:	00 e0       	ldi	r16, 0x00	; 0
    17f8:	10 e0       	ldi	r17, 0x00	; 0
    17fa:	98 01       	movw	r18, r16
    17fc:	b9 01       	movw	r22, r18
    17fe:	a8 01       	movw	r20, r16
    1800:	ce 01       	movw	r24, r28
    1802:	49 96       	adiw	r24, 0x19	; 25
    1804:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1808:	00 e0       	ldi	r16, 0x00	; 0
    180a:	10 e0       	ldi	r17, 0x00	; 0
    180c:	98 01       	movw	r18, r16
    180e:	b9 01       	movw	r22, r18
    1810:	a8 01       	movw	r20, r16
    1812:	ce 01       	movw	r24, r28
    1814:	81 96       	adiw	r24, 0x21	; 33
    1816:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    181a:	00 e0       	ldi	r16, 0x00	; 0
    181c:	10 e0       	ldi	r17, 0x00	; 0
    181e:	98 01       	movw	r18, r16
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	60 e8       	ldi	r22, 0x80	; 128
    1826:	7f e3       	ldi	r23, 0x3F	; 63
    1828:	ce 01       	movw	r24, r28
    182a:	89 96       	adiw	r24, 0x29	; 41
    182c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1830:	00 e0       	ldi	r16, 0x00	; 0
    1832:	10 e0       	ldi	r17, 0x00	; 0
    1834:	98 01       	movw	r18, r16
    1836:	b9 01       	movw	r22, r18
    1838:	a8 01       	movw	r20, r16
    183a:	ce 01       	movw	r24, r28
    183c:	c1 96       	adiw	r24, 0x31	; 49
    183e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1842:	00 e0       	ldi	r16, 0x00	; 0
    1844:	10 e0       	ldi	r17, 0x00	; 0
    1846:	98 01       	movw	r18, r16
    1848:	b9 01       	movw	r22, r18
    184a:	a8 01       	movw	r20, r16
    184c:	ce 01       	movw	r24, r28
    184e:	c9 96       	adiw	r24, 0x39	; 57
    1850:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1854:	00 e0       	ldi	r16, 0x00	; 0
    1856:	10 e0       	ldi	r17, 0x00	; 0
    1858:	98 01       	movw	r18, r16
    185a:	b9 01       	movw	r22, r18
    185c:	a8 01       	movw	r20, r16
    185e:	ce 01       	movw	r24, r28
    1860:	8f 5b       	subi	r24, 0xBF	; 191
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1868:	00 e0       	ldi	r16, 0x00	; 0
    186a:	10 e0       	ldi	r17, 0x00	; 0
    186c:	98 01       	movw	r18, r16
    186e:	b9 01       	movw	r22, r18
    1870:	a8 01       	movw	r20, r16
    1872:	ce 01       	movw	r24, r28
    1874:	87 5b       	subi	r24, 0xB7	; 183
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    187c:	00 e0       	ldi	r16, 0x00	; 0
    187e:	10 e0       	ldi	r17, 0x00	; 0
    1880:	98 01       	movw	r18, r16
    1882:	b9 01       	movw	r22, r18
    1884:	a8 01       	movw	r20, r16
    1886:	ce 01       	movw	r24, r28
    1888:	8f 5a       	subi	r24, 0xAF	; 175
    188a:	9f 4f       	sbci	r25, 0xFF	; 255
    188c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1890:	00 e0       	ldi	r16, 0x00	; 0
    1892:	10 e0       	ldi	r17, 0x00	; 0
    1894:	98 01       	movw	r18, r16
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	60 e8       	ldi	r22, 0x80	; 128
    189c:	7f e3       	ldi	r23, 0x3F	; 63
    189e:	ce 01       	movw	r24, r28
    18a0:	87 5a       	subi	r24, 0xA7	; 167
    18a2:	9f 4f       	sbci	r25, 0xFF	; 255
    18a4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    18a8:	00 e0       	ldi	r16, 0x00	; 0
    18aa:	10 e0       	ldi	r17, 0x00	; 0
    18ac:	98 01       	movw	r18, r16
    18ae:	b9 01       	movw	r22, r18
    18b0:	a8 01       	movw	r20, r16
    18b2:	ce 01       	movw	r24, r28
    18b4:	8f 59       	subi	r24, 0x9F	; 159
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    18bc:	00 e0       	ldi	r16, 0x00	; 0
    18be:	10 e0       	ldi	r17, 0x00	; 0
    18c0:	98 01       	movw	r18, r16
    18c2:	b9 01       	movw	r22, r18
    18c4:	a8 01       	movw	r20, r16
    18c6:	ce 01       	movw	r24, r28
    18c8:	87 59       	subi	r24, 0x97	; 151
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    18d0:	00 e0       	ldi	r16, 0x00	; 0
    18d2:	10 e0       	ldi	r17, 0x00	; 0
    18d4:	98 01       	movw	r18, r16
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	60 e8       	ldi	r22, 0x80	; 128
    18dc:	7f e3       	ldi	r23, 0x3F	; 63
    18de:	ce 01       	movw	r24, r28
    18e0:	8f 58       	subi	r24, 0x8F	; 143
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    18e8:	00 e0       	ldi	r16, 0x00	; 0
    18ea:	10 e0       	ldi	r17, 0x00	; 0
    18ec:	98 01       	movw	r18, r16
    18ee:	b9 01       	movw	r22, r18
    18f0:	a8 01       	movw	r20, r16
    18f2:	ce 01       	movw	r24, r28
    18f4:	87 58       	subi	r24, 0x87	; 135
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};						
    18fc:	cb 57       	subi	r28, 0x7B	; 123
    18fe:	df 4f       	sbci	r29, 0xFF	; 255
    1900:	79 82       	std	Y+1, r7	; 0x01
    1902:	68 82       	st	Y, r6
    1904:	c5 58       	subi	r28, 0x85	; 133
    1906:	d0 40       	sbci	r29, 0x00	; 0
    1908:	c9 57       	subi	r28, 0x79	; 121
    190a:	df 4f       	sbci	r29, 0xFF	; 255
    190c:	99 82       	std	Y+1, r9	; 0x01
    190e:	88 82       	st	Y, r8
    1910:	c7 58       	subi	r28, 0x87	; 135
    1912:	d0 40       	sbci	r29, 0x00	; 0
    1914:	cf 57       	subi	r28, 0x7F	; 127
    1916:	df 4f       	sbci	r29, 0xFF	; 255
    1918:	b9 82       	std	Y+1, r11	; 0x01
    191a:	a8 82       	st	Y, r10
    191c:	c1 58       	subi	r28, 0x81	; 129
    191e:	d0 40       	sbci	r29, 0x00	; 0
    1920:	cd 57       	subi	r28, 0x7D	; 125
    1922:	df 4f       	sbci	r29, 0xFF	; 255
    1924:	d9 82       	std	Y+1, r13	; 0x01
    1926:	c8 82       	st	Y, r12
    1928:	c3 58       	subi	r28, 0x83	; 131
    192a:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),cno_matrix),QB_SIZE2);
    192c:	9e 01       	movw	r18, r28
    192e:	2f 57       	subi	r18, 0x7F	; 127
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	ae 01       	movw	r20, r28
    1934:	4b 57       	subi	r20, 0x7B	; 123
    1936:	5f 4f       	sbci	r21, 0xFF	; 255
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	c7 01       	movw	r24, r14
    193e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    1942:	ae 01       	movw	r20, r28
    1944:	4f 5f       	subi	r20, 0xFF	; 255
    1946:	5f 4f       	sbci	r21, 0xFF	; 255
    1948:	bc 01       	movw	r22, r24
    194a:	c7 01       	movw	r24, r14
    194c:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1950:	42 e0       	ldi	r20, 0x02	; 2
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	bc 01       	movw	r22, r24
    1956:	c7 01       	movw	r24, r14
    1958:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    195c:	c8 57       	subi	r28, 0x78	; 120
    195e:	df 4f       	sbci	r29, 0xFF	; 255
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	bf 90       	pop	r11
    197c:	af 90       	pop	r10
    197e:	9f 90       	pop	r9
    1980:	8f 90       	pop	r8
    1982:	7f 90       	pop	r7
    1984:	6f 90       	pop	r6
    1986:	08 95       	ret

00001988 <_ZN5Gates3CSIEiiii>:
int * Gates::CSI(int theta1, int phi1, int theta2,int phi2){
    1988:	6f 92       	push	r6
    198a:	7f 92       	push	r7
    198c:	8f 92       	push	r8
    198e:	9f 92       	push	r9
    1990:	af 92       	push	r10
    1992:	bf 92       	push	r11
    1994:	cf 92       	push	r12
    1996:	df 92       	push	r13
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	c8 58       	subi	r28, 0x88	; 136
    19aa:	d1 09       	sbc	r29, r1
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	7c 01       	movw	r14, r24
    19b8:	3b 01       	movw	r6, r22
    19ba:	5a 01       	movw	r10, r20
    19bc:	49 01       	movw	r8, r18
    19be:	68 01       	movw	r12, r16
	Complex csi_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(-1,0)}};
    19c0:	00 e0       	ldi	r16, 0x00	; 0
    19c2:	10 e0       	ldi	r17, 0x00	; 0
    19c4:	98 01       	movw	r18, r16
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	60 e8       	ldi	r22, 0x80	; 128
    19cc:	7f e3       	ldi	r23, 0x3F	; 63
    19ce:	ce 01       	movw	r24, r28
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    19d6:	00 e0       	ldi	r16, 0x00	; 0
    19d8:	10 e0       	ldi	r17, 0x00	; 0
    19da:	98 01       	movw	r18, r16
    19dc:	b9 01       	movw	r22, r18
    19de:	a8 01       	movw	r20, r16
    19e0:	ce 01       	movw	r24, r28
    19e2:	09 96       	adiw	r24, 0x09	; 9
    19e4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    19e8:	00 e0       	ldi	r16, 0x00	; 0
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	98 01       	movw	r18, r16
    19ee:	b9 01       	movw	r22, r18
    19f0:	a8 01       	movw	r20, r16
    19f2:	ce 01       	movw	r24, r28
    19f4:	41 96       	adiw	r24, 0x11	; 17
    19f6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    19fa:	00 e0       	ldi	r16, 0x00	; 0
    19fc:	10 e0       	ldi	r17, 0x00	; 0
    19fe:	98 01       	movw	r18, r16
    1a00:	b9 01       	movw	r22, r18
    1a02:	a8 01       	movw	r20, r16
    1a04:	ce 01       	movw	r24, r28
    1a06:	49 96       	adiw	r24, 0x19	; 25
    1a08:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a0c:	00 e0       	ldi	r16, 0x00	; 0
    1a0e:	10 e0       	ldi	r17, 0x00	; 0
    1a10:	98 01       	movw	r18, r16
    1a12:	b9 01       	movw	r22, r18
    1a14:	a8 01       	movw	r20, r16
    1a16:	ce 01       	movw	r24, r28
    1a18:	81 96       	adiw	r24, 0x21	; 33
    1a1a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a1e:	00 e0       	ldi	r16, 0x00	; 0
    1a20:	10 e0       	ldi	r17, 0x00	; 0
    1a22:	98 01       	movw	r18, r16
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	60 e8       	ldi	r22, 0x80	; 128
    1a2a:	7f e3       	ldi	r23, 0x3F	; 63
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	89 96       	adiw	r24, 0x29	; 41
    1a30:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a34:	00 e0       	ldi	r16, 0x00	; 0
    1a36:	10 e0       	ldi	r17, 0x00	; 0
    1a38:	98 01       	movw	r18, r16
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	a8 01       	movw	r20, r16
    1a3e:	ce 01       	movw	r24, r28
    1a40:	c1 96       	adiw	r24, 0x31	; 49
    1a42:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a46:	00 e0       	ldi	r16, 0x00	; 0
    1a48:	10 e0       	ldi	r17, 0x00	; 0
    1a4a:	98 01       	movw	r18, r16
    1a4c:	b9 01       	movw	r22, r18
    1a4e:	a8 01       	movw	r20, r16
    1a50:	ce 01       	movw	r24, r28
    1a52:	c9 96       	adiw	r24, 0x39	; 57
    1a54:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a58:	00 e0       	ldi	r16, 0x00	; 0
    1a5a:	10 e0       	ldi	r17, 0x00	; 0
    1a5c:	98 01       	movw	r18, r16
    1a5e:	b9 01       	movw	r22, r18
    1a60:	a8 01       	movw	r20, r16
    1a62:	ce 01       	movw	r24, r28
    1a64:	8f 5b       	subi	r24, 0xBF	; 191
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
    1a68:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a6c:	00 e0       	ldi	r16, 0x00	; 0
    1a6e:	10 e0       	ldi	r17, 0x00	; 0
    1a70:	98 01       	movw	r18, r16
    1a72:	b9 01       	movw	r22, r18
    1a74:	a8 01       	movw	r20, r16
    1a76:	ce 01       	movw	r24, r28
    1a78:	87 5b       	subi	r24, 0xB7	; 183
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a80:	00 e0       	ldi	r16, 0x00	; 0
    1a82:	10 e0       	ldi	r17, 0x00	; 0
    1a84:	98 01       	movw	r18, r16
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	60 e8       	ldi	r22, 0x80	; 128
    1a8c:	7f e3       	ldi	r23, 0x3F	; 63
    1a8e:	ce 01       	movw	r24, r28
    1a90:	8f 5a       	subi	r24, 0xAF	; 175
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a98:	00 e0       	ldi	r16, 0x00	; 0
    1a9a:	10 e0       	ldi	r17, 0x00	; 0
    1a9c:	98 01       	movw	r18, r16
    1a9e:	b9 01       	movw	r22, r18
    1aa0:	a8 01       	movw	r20, r16
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	87 5a       	subi	r24, 0xA7	; 167
    1aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1aac:	00 e0       	ldi	r16, 0x00	; 0
    1aae:	10 e0       	ldi	r17, 0x00	; 0
    1ab0:	98 01       	movw	r18, r16
    1ab2:	b9 01       	movw	r22, r18
    1ab4:	a8 01       	movw	r20, r16
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	8f 59       	subi	r24, 0x9F	; 159
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1ac0:	00 e0       	ldi	r16, 0x00	; 0
    1ac2:	10 e0       	ldi	r17, 0x00	; 0
    1ac4:	98 01       	movw	r18, r16
    1ac6:	b9 01       	movw	r22, r18
    1ac8:	a8 01       	movw	r20, r16
    1aca:	ce 01       	movw	r24, r28
    1acc:	87 59       	subi	r24, 0x97	; 151
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1ad4:	00 e0       	ldi	r16, 0x00	; 0
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
    1ad8:	98 01       	movw	r18, r16
    1ada:	b9 01       	movw	r22, r18
    1adc:	a8 01       	movw	r20, r16
    1ade:	ce 01       	movw	r24, r28
    1ae0:	8f 58       	subi	r24, 0x8F	; 143
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1ae8:	00 e0       	ldi	r16, 0x00	; 0
    1aea:	10 e0       	ldi	r17, 0x00	; 0
    1aec:	98 01       	movw	r18, r16
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	60 e8       	ldi	r22, 0x80	; 128
    1af4:	7f eb       	ldi	r23, 0xBF	; 191
    1af6:	ce 01       	movw	r24, r28
    1af8:	87 58       	subi	r24, 0x87	; 135
    1afa:	9f 4f       	sbci	r25, 0xFF	; 255
    1afc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1b00:	cb 57       	subi	r28, 0x7B	; 123
    1b02:	df 4f       	sbci	r29, 0xFF	; 255
    1b04:	79 82       	std	Y+1, r7	; 0x01
    1b06:	68 82       	st	Y, r6
    1b08:	c5 58       	subi	r28, 0x85	; 133
    1b0a:	d0 40       	sbci	r29, 0x00	; 0
    1b0c:	c9 57       	subi	r28, 0x79	; 121
    1b0e:	df 4f       	sbci	r29, 0xFF	; 255
    1b10:	99 82       	std	Y+1, r9	; 0x01
    1b12:	88 82       	st	Y, r8
    1b14:	c7 58       	subi	r28, 0x87	; 135
    1b16:	d0 40       	sbci	r29, 0x00	; 0
    1b18:	cf 57       	subi	r28, 0x7F	; 127
    1b1a:	df 4f       	sbci	r29, 0xFF	; 255
    1b1c:	b9 82       	std	Y+1, r11	; 0x01
    1b1e:	a8 82       	st	Y, r10
    1b20:	c1 58       	subi	r28, 0x81	; 129
    1b22:	d0 40       	sbci	r29, 0x00	; 0
    1b24:	cd 57       	subi	r28, 0x7D	; 125
    1b26:	df 4f       	sbci	r29, 0xFF	; 255
    1b28:	d9 82       	std	Y+1, r13	; 0x01
    1b2a:	c8 82       	st	Y, r12
    1b2c:	c3 58       	subi	r28, 0x83	; 131
    1b2e:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),csi_matrix),QB_SIZE2);
    1b30:	9e 01       	movw	r18, r28
    1b32:	2f 57       	subi	r18, 0x7F	; 127
    1b34:	3f 4f       	sbci	r19, 0xFF	; 255
    1b36:	ae 01       	movw	r20, r28
    1b38:	4b 57       	subi	r20, 0x7B	; 123
    1b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	c7 01       	movw	r24, r14
    1b42:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    1b46:	ae 01       	movw	r20, r28
    1b48:	4f 5f       	subi	r20, 0xFF	; 255
    1b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	c7 01       	movw	r24, r14
    1b50:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1b54:	42 e0       	ldi	r20, 0x02	; 2
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	bc 01       	movw	r22, r24
    1b5a:	c7 01       	movw	r24, r14
    1b5c:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    1b60:	c8 57       	subi	r28, 0x78	; 120
    1b62:	df 4f       	sbci	r29, 0xFF	; 255
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	bf 90       	pop	r11
    1b80:	af 90       	pop	r10
    1b82:	9f 90       	pop	r9
    1b84:	8f 90       	pop	r8
    1b86:	7f 90       	pop	r7
    1b88:	6f 90       	pop	r6
    1b8a:	08 95       	ret

00001b8c <_ZN5Gates3SWAEiiii>:
int * Gates::SWA(int theta1, int phi1, int theta2,int phi2){
    1b8c:	6f 92       	push	r6
    1b8e:	7f 92       	push	r7
    1b90:	8f 92       	push	r8
    1b92:	9f 92       	push	r9
    1b94:	af 92       	push	r10
    1b96:	bf 92       	push	r11
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	c8 58       	subi	r28, 0x88	; 136
    1bae:	d1 09       	sbc	r29, r1
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	7c 01       	movw	r14, r24
    1bbc:	3b 01       	movw	r6, r22
    1bbe:	5a 01       	movw	r10, r20
    1bc0:	49 01       	movw	r8, r18
    1bc2:	68 01       	movw	r12, r16
	Complex swa_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    1bc4:	00 e0       	ldi	r16, 0x00	; 0
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
    1bc8:	98 01       	movw	r18, r16
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	60 e8       	ldi	r22, 0x80	; 128
    1bd0:	7f e3       	ldi	r23, 0x3F	; 63
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1bda:	00 e0       	ldi	r16, 0x00	; 0
    1bdc:	10 e0       	ldi	r17, 0x00	; 0
    1bde:	98 01       	movw	r18, r16
    1be0:	b9 01       	movw	r22, r18
    1be2:	a8 01       	movw	r20, r16
    1be4:	ce 01       	movw	r24, r28
    1be6:	09 96       	adiw	r24, 0x09	; 9
    1be8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1bec:	00 e0       	ldi	r16, 0x00	; 0
    1bee:	10 e0       	ldi	r17, 0x00	; 0
    1bf0:	98 01       	movw	r18, r16
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	a8 01       	movw	r20, r16
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	41 96       	adiw	r24, 0x11	; 17
    1bfa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1bfe:	00 e0       	ldi	r16, 0x00	; 0
    1c00:	10 e0       	ldi	r17, 0x00	; 0
    1c02:	98 01       	movw	r18, r16
    1c04:	b9 01       	movw	r22, r18
    1c06:	a8 01       	movw	r20, r16
    1c08:	ce 01       	movw	r24, r28
    1c0a:	49 96       	adiw	r24, 0x19	; 25
    1c0c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c10:	00 e0       	ldi	r16, 0x00	; 0
    1c12:	10 e0       	ldi	r17, 0x00	; 0
    1c14:	98 01       	movw	r18, r16
    1c16:	b9 01       	movw	r22, r18
    1c18:	a8 01       	movw	r20, r16
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	81 96       	adiw	r24, 0x21	; 33
    1c1e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c22:	00 e0       	ldi	r16, 0x00	; 0
    1c24:	10 e0       	ldi	r17, 0x00	; 0
    1c26:	98 01       	movw	r18, r16
    1c28:	b9 01       	movw	r22, r18
    1c2a:	a8 01       	movw	r20, r16
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	89 96       	adiw	r24, 0x29	; 41
    1c30:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c34:	00 e0       	ldi	r16, 0x00	; 0
    1c36:	10 e0       	ldi	r17, 0x00	; 0
    1c38:	98 01       	movw	r18, r16
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	60 e8       	ldi	r22, 0x80	; 128
    1c40:	7f e3       	ldi	r23, 0x3F	; 63
    1c42:	ce 01       	movw	r24, r28
    1c44:	c1 96       	adiw	r24, 0x31	; 49
    1c46:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c4a:	00 e0       	ldi	r16, 0x00	; 0
    1c4c:	10 e0       	ldi	r17, 0x00	; 0
    1c4e:	98 01       	movw	r18, r16
    1c50:	b9 01       	movw	r22, r18
    1c52:	a8 01       	movw	r20, r16
    1c54:	ce 01       	movw	r24, r28
    1c56:	c9 96       	adiw	r24, 0x39	; 57
    1c58:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c5c:	00 e0       	ldi	r16, 0x00	; 0
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
    1c60:	98 01       	movw	r18, r16
    1c62:	b9 01       	movw	r22, r18
    1c64:	a8 01       	movw	r20, r16
    1c66:	ce 01       	movw	r24, r28
    1c68:	8f 5b       	subi	r24, 0xBF	; 191
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c70:	00 e0       	ldi	r16, 0x00	; 0
    1c72:	10 e0       	ldi	r17, 0x00	; 0
    1c74:	98 01       	movw	r18, r16
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	60 e8       	ldi	r22, 0x80	; 128
    1c7c:	7f e3       	ldi	r23, 0x3F	; 63
    1c7e:	ce 01       	movw	r24, r28
    1c80:	87 5b       	subi	r24, 0xB7	; 183
    1c82:	9f 4f       	sbci	r25, 0xFF	; 255
    1c84:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
    1c8c:	98 01       	movw	r18, r16
    1c8e:	b9 01       	movw	r22, r18
    1c90:	a8 01       	movw	r20, r16
    1c92:	ce 01       	movw	r24, r28
    1c94:	8f 5a       	subi	r24, 0xAF	; 175
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c9c:	00 e0       	ldi	r16, 0x00	; 0
    1c9e:	10 e0       	ldi	r17, 0x00	; 0
    1ca0:	98 01       	movw	r18, r16
    1ca2:	b9 01       	movw	r22, r18
    1ca4:	a8 01       	movw	r20, r16
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	87 5a       	subi	r24, 0xA7	; 167
    1caa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cac:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1cb0:	00 e0       	ldi	r16, 0x00	; 0
    1cb2:	10 e0       	ldi	r17, 0x00	; 0
    1cb4:	98 01       	movw	r18, r16
    1cb6:	b9 01       	movw	r22, r18
    1cb8:	a8 01       	movw	r20, r16
    1cba:	ce 01       	movw	r24, r28
    1cbc:	8f 59       	subi	r24, 0x9F	; 159
    1cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1cc4:	00 e0       	ldi	r16, 0x00	; 0
    1cc6:	10 e0       	ldi	r17, 0x00	; 0
    1cc8:	98 01       	movw	r18, r16
    1cca:	b9 01       	movw	r22, r18
    1ccc:	a8 01       	movw	r20, r16
    1cce:	ce 01       	movw	r24, r28
    1cd0:	87 59       	subi	r24, 0x97	; 151
    1cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1cd8:	00 e0       	ldi	r16, 0x00	; 0
    1cda:	10 e0       	ldi	r17, 0x00	; 0
    1cdc:	98 01       	movw	r18, r16
    1cde:	b9 01       	movw	r22, r18
    1ce0:	a8 01       	movw	r20, r16
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	8f 58       	subi	r24, 0x8F	; 143
    1ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1cec:	00 e0       	ldi	r16, 0x00	; 0
    1cee:	10 e0       	ldi	r17, 0x00	; 0
    1cf0:	98 01       	movw	r18, r16
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	60 e8       	ldi	r22, 0x80	; 128
    1cf8:	7f e3       	ldi	r23, 0x3F	; 63
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	87 58       	subi	r24, 0x87	; 135
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1d04:	cb 57       	subi	r28, 0x7B	; 123
    1d06:	df 4f       	sbci	r29, 0xFF	; 255
    1d08:	79 82       	std	Y+1, r7	; 0x01
    1d0a:	68 82       	st	Y, r6
    1d0c:	c5 58       	subi	r28, 0x85	; 133
    1d0e:	d0 40       	sbci	r29, 0x00	; 0
    1d10:	c9 57       	subi	r28, 0x79	; 121
    1d12:	df 4f       	sbci	r29, 0xFF	; 255
    1d14:	99 82       	std	Y+1, r9	; 0x01
    1d16:	88 82       	st	Y, r8
    1d18:	c7 58       	subi	r28, 0x87	; 135
    1d1a:	d0 40       	sbci	r29, 0x00	; 0
    1d1c:	cf 57       	subi	r28, 0x7F	; 127
    1d1e:	df 4f       	sbci	r29, 0xFF	; 255
    1d20:	b9 82       	std	Y+1, r11	; 0x01
    1d22:	a8 82       	st	Y, r10
    1d24:	c1 58       	subi	r28, 0x81	; 129
    1d26:	d0 40       	sbci	r29, 0x00	; 0
    1d28:	cd 57       	subi	r28, 0x7D	; 125
    1d2a:	df 4f       	sbci	r29, 0xFF	; 255
    1d2c:	d9 82       	std	Y+1, r13	; 0x01
    1d2e:	c8 82       	st	Y, r12
    1d30:	c3 58       	subi	r28, 0x83	; 131
    1d32:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swa_matrix),QB_SIZE2);	
    1d34:	9e 01       	movw	r18, r28
    1d36:	2f 57       	subi	r18, 0x7F	; 127
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	ae 01       	movw	r20, r28
    1d3c:	4b 57       	subi	r20, 0x7B	; 123
    1d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d40:	62 e0       	ldi	r22, 0x02	; 2
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	c7 01       	movw	r24, r14
    1d46:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    1d4a:	ae 01       	movw	r20, r28
    1d4c:	4f 5f       	subi	r20, 0xFF	; 255
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d50:	bc 01       	movw	r22, r24
    1d52:	c7 01       	movw	r24, r14
    1d54:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1d58:	42 e0       	ldi	r20, 0x02	; 2
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	c7 01       	movw	r24, r14
    1d60:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    1d64:	c8 57       	subi	r28, 0x78	; 120
    1d66:	df 4f       	sbci	r29, 0xFF	; 255
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	df 90       	pop	r13
    1d80:	cf 90       	pop	r12
    1d82:	bf 90       	pop	r11
    1d84:	af 90       	pop	r10
    1d86:	9f 90       	pop	r9
    1d88:	8f 90       	pop	r8
    1d8a:	7f 90       	pop	r7
    1d8c:	6f 90       	pop	r6
    1d8e:	08 95       	ret

00001d90 <_ZN5Gates3INCEiiii>:
int * Gates::INC(int theta1, int phi1, int theta2,int phi2){
    1d90:	6f 92       	push	r6
    1d92:	7f 92       	push	r7
    1d94:	8f 92       	push	r8
    1d96:	9f 92       	push	r9
    1d98:	af 92       	push	r10
    1d9a:	bf 92       	push	r11
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	c8 58       	subi	r28, 0x88	; 136
    1db2:	d1 09       	sbc	r29, r1
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	7c 01       	movw	r14, r24
    1dc0:	3b 01       	movw	r6, r22
    1dc2:	5a 01       	movw	r10, r20
    1dc4:	49 01       	movw	r8, r18
    1dc6:	68 01       	movw	r12, r16
	Complex inc_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)}};
    1dc8:	00 e0       	ldi	r16, 0x00	; 0
    1dca:	10 e0       	ldi	r17, 0x00	; 0
    1dcc:	98 01       	movw	r18, r16
    1dce:	b9 01       	movw	r22, r18
    1dd0:	a8 01       	movw	r20, r16
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1dda:	00 e0       	ldi	r16, 0x00	; 0
    1ddc:	10 e0       	ldi	r17, 0x00	; 0
    1dde:	98 01       	movw	r18, r16
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	60 e8       	ldi	r22, 0x80	; 128
    1de6:	7f e3       	ldi	r23, 0x3F	; 63
    1de8:	ce 01       	movw	r24, r28
    1dea:	09 96       	adiw	r24, 0x09	; 9
    1dec:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1df0:	00 e0       	ldi	r16, 0x00	; 0
    1df2:	10 e0       	ldi	r17, 0x00	; 0
    1df4:	98 01       	movw	r18, r16
    1df6:	b9 01       	movw	r22, r18
    1df8:	a8 01       	movw	r20, r16
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	41 96       	adiw	r24, 0x11	; 17
    1dfe:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e02:	00 e0       	ldi	r16, 0x00	; 0
    1e04:	10 e0       	ldi	r17, 0x00	; 0
    1e06:	98 01       	movw	r18, r16
    1e08:	b9 01       	movw	r22, r18
    1e0a:	a8 01       	movw	r20, r16
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	49 96       	adiw	r24, 0x19	; 25
    1e10:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e14:	00 e0       	ldi	r16, 0x00	; 0
    1e16:	10 e0       	ldi	r17, 0x00	; 0
    1e18:	98 01       	movw	r18, r16
    1e1a:	b9 01       	movw	r22, r18
    1e1c:	a8 01       	movw	r20, r16
    1e1e:	ce 01       	movw	r24, r28
    1e20:	81 96       	adiw	r24, 0x21	; 33
    1e22:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e26:	00 e0       	ldi	r16, 0x00	; 0
    1e28:	10 e0       	ldi	r17, 0x00	; 0
    1e2a:	98 01       	movw	r18, r16
    1e2c:	b9 01       	movw	r22, r18
    1e2e:	a8 01       	movw	r20, r16
    1e30:	ce 01       	movw	r24, r28
    1e32:	89 96       	adiw	r24, 0x29	; 41
    1e34:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e38:	00 e0       	ldi	r16, 0x00	; 0
    1e3a:	10 e0       	ldi	r17, 0x00	; 0
    1e3c:	98 01       	movw	r18, r16
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	60 e8       	ldi	r22, 0x80	; 128
    1e44:	7f e3       	ldi	r23, 0x3F	; 63
    1e46:	ce 01       	movw	r24, r28
    1e48:	c1 96       	adiw	r24, 0x31	; 49
    1e4a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e4e:	00 e0       	ldi	r16, 0x00	; 0
    1e50:	10 e0       	ldi	r17, 0x00	; 0
    1e52:	98 01       	movw	r18, r16
    1e54:	b9 01       	movw	r22, r18
    1e56:	a8 01       	movw	r20, r16
    1e58:	ce 01       	movw	r24, r28
    1e5a:	c9 96       	adiw	r24, 0x39	; 57
    1e5c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e60:	00 e0       	ldi	r16, 0x00	; 0
    1e62:	10 e0       	ldi	r17, 0x00	; 0
    1e64:	98 01       	movw	r18, r16
    1e66:	b9 01       	movw	r22, r18
    1e68:	a8 01       	movw	r20, r16
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	8f 5b       	subi	r24, 0xBF	; 191
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e74:	00 e0       	ldi	r16, 0x00	; 0
    1e76:	10 e0       	ldi	r17, 0x00	; 0
    1e78:	98 01       	movw	r18, r16
    1e7a:	b9 01       	movw	r22, r18
    1e7c:	a8 01       	movw	r20, r16
    1e7e:	ce 01       	movw	r24, r28
    1e80:	87 5b       	subi	r24, 0xB7	; 183
    1e82:	9f 4f       	sbci	r25, 0xFF	; 255
    1e84:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e88:	00 e0       	ldi	r16, 0x00	; 0
    1e8a:	10 e0       	ldi	r17, 0x00	; 0
    1e8c:	98 01       	movw	r18, r16
    1e8e:	b9 01       	movw	r22, r18
    1e90:	a8 01       	movw	r20, r16
    1e92:	ce 01       	movw	r24, r28
    1e94:	8f 5a       	subi	r24, 0xAF	; 175
    1e96:	9f 4f       	sbci	r25, 0xFF	; 255
    1e98:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e9c:	00 e0       	ldi	r16, 0x00	; 0
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
    1ea0:	98 01       	movw	r18, r16
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	60 e8       	ldi	r22, 0x80	; 128
    1ea8:	7f e3       	ldi	r23, 0x3F	; 63
    1eaa:	ce 01       	movw	r24, r28
    1eac:	87 5a       	subi	r24, 0xA7	; 167
    1eae:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1eb4:	00 e0       	ldi	r16, 0x00	; 0
    1eb6:	10 e0       	ldi	r17, 0x00	; 0
    1eb8:	98 01       	movw	r18, r16
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	60 e8       	ldi	r22, 0x80	; 128
    1ec0:	7f e3       	ldi	r23, 0x3F	; 63
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	8f 59       	subi	r24, 0x9F	; 159
    1ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1ecc:	00 e0       	ldi	r16, 0x00	; 0
    1ece:	10 e0       	ldi	r17, 0x00	; 0
    1ed0:	98 01       	movw	r18, r16
    1ed2:	b9 01       	movw	r22, r18
    1ed4:	a8 01       	movw	r20, r16
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	87 59       	subi	r24, 0x97	; 151
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1ee0:	00 e0       	ldi	r16, 0x00	; 0
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
    1ee4:	98 01       	movw	r18, r16
    1ee6:	b9 01       	movw	r22, r18
    1ee8:	a8 01       	movw	r20, r16
    1eea:	ce 01       	movw	r24, r28
    1eec:	8f 58       	subi	r24, 0x8F	; 143
    1eee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1ef4:	00 e0       	ldi	r16, 0x00	; 0
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
    1ef8:	98 01       	movw	r18, r16
    1efa:	b9 01       	movw	r22, r18
    1efc:	a8 01       	movw	r20, r16
    1efe:	ce 01       	movw	r24, r28
    1f00:	87 58       	subi	r24, 0x87	; 135
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1f08:	cb 57       	subi	r28, 0x7B	; 123
    1f0a:	df 4f       	sbci	r29, 0xFF	; 255
    1f0c:	79 82       	std	Y+1, r7	; 0x01
    1f0e:	68 82       	st	Y, r6
    1f10:	c5 58       	subi	r28, 0x85	; 133
    1f12:	d0 40       	sbci	r29, 0x00	; 0
    1f14:	c9 57       	subi	r28, 0x79	; 121
    1f16:	df 4f       	sbci	r29, 0xFF	; 255
    1f18:	99 82       	std	Y+1, r9	; 0x01
    1f1a:	88 82       	st	Y, r8
    1f1c:	c7 58       	subi	r28, 0x87	; 135
    1f1e:	d0 40       	sbci	r29, 0x00	; 0
    1f20:	cf 57       	subi	r28, 0x7F	; 127
    1f22:	df 4f       	sbci	r29, 0xFF	; 255
    1f24:	b9 82       	std	Y+1, r11	; 0x01
    1f26:	a8 82       	st	Y, r10
    1f28:	c1 58       	subi	r28, 0x81	; 129
    1f2a:	d0 40       	sbci	r29, 0x00	; 0
    1f2c:	cd 57       	subi	r28, 0x7D	; 125
    1f2e:	df 4f       	sbci	r29, 0xFF	; 255
    1f30:	d9 82       	std	Y+1, r13	; 0x01
    1f32:	c8 82       	st	Y, r12
    1f34:	c3 58       	subi	r28, 0x83	; 131
    1f36:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),inc_matrix),QB_SIZE2);
    1f38:	9e 01       	movw	r18, r28
    1f3a:	2f 57       	subi	r18, 0x7F	; 127
    1f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3e:	ae 01       	movw	r20, r28
    1f40:	4b 57       	subi	r20, 0x7B	; 123
    1f42:	5f 4f       	sbci	r21, 0xFF	; 255
    1f44:	62 e0       	ldi	r22, 0x02	; 2
    1f46:	70 e0       	ldi	r23, 0x00	; 0
    1f48:	c7 01       	movw	r24, r14
    1f4a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    1f4e:	ae 01       	movw	r20, r28
    1f50:	4f 5f       	subi	r20, 0xFF	; 255
    1f52:	5f 4f       	sbci	r21, 0xFF	; 255
    1f54:	bc 01       	movw	r22, r24
    1f56:	c7 01       	movw	r24, r14
    1f58:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1f5c:	42 e0       	ldi	r20, 0x02	; 2
    1f5e:	50 e0       	ldi	r21, 0x00	; 0
    1f60:	bc 01       	movw	r22, r24
    1f62:	c7 01       	movw	r24, r14
    1f64:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    1f68:	c8 57       	subi	r28, 0x78	; 120
    1f6a:	df 4f       	sbci	r29, 0xFF	; 255
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ff 90       	pop	r15
    1f80:	ef 90       	pop	r14
    1f82:	df 90       	pop	r13
    1f84:	cf 90       	pop	r12
    1f86:	bf 90       	pop	r11
    1f88:	af 90       	pop	r10
    1f8a:	9f 90       	pop	r9
    1f8c:	8f 90       	pop	r8
    1f8e:	7f 90       	pop	r7
    1f90:	6f 90       	pop	r6
    1f92:	08 95       	ret

00001f94 <_ZN5Gates3DECEiiii>:
int * Gates::DEC(int theta1, int phi1, int theta2,int phi2){
    1f94:	6f 92       	push	r6
    1f96:	7f 92       	push	r7
    1f98:	8f 92       	push	r8
    1f9a:	9f 92       	push	r9
    1f9c:	af 92       	push	r10
    1f9e:	bf 92       	push	r11
    1fa0:	cf 92       	push	r12
    1fa2:	df 92       	push	r13
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	c8 58       	subi	r28, 0x88	; 136
    1fb6:	d1 09       	sbc	r29, r1
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	7c 01       	movw	r14, r24
    1fc4:	3b 01       	movw	r6, r22
    1fc6:	5a 01       	movw	r10, r20
    1fc8:	49 01       	movw	r8, r18
    1fca:	68 01       	movw	r12, r16
	Complex dec_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1fcc:	00 e0       	ldi	r16, 0x00	; 0
    1fce:	10 e0       	ldi	r17, 0x00	; 0
    1fd0:	98 01       	movw	r18, r16
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	a8 01       	movw	r20, r16
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1fde:	00 e0       	ldi	r16, 0x00	; 0
    1fe0:	10 e0       	ldi	r17, 0x00	; 0
    1fe2:	98 01       	movw	r18, r16
    1fe4:	b9 01       	movw	r22, r18
    1fe6:	a8 01       	movw	r20, r16
    1fe8:	ce 01       	movw	r24, r28
    1fea:	09 96       	adiw	r24, 0x09	; 9
    1fec:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1ff0:	00 e0       	ldi	r16, 0x00	; 0
    1ff2:	10 e0       	ldi	r17, 0x00	; 0
    1ff4:	98 01       	movw	r18, r16
    1ff6:	b9 01       	movw	r22, r18
    1ff8:	a8 01       	movw	r20, r16
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	41 96       	adiw	r24, 0x11	; 17
    1ffe:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2002:	00 e0       	ldi	r16, 0x00	; 0
    2004:	10 e0       	ldi	r17, 0x00	; 0
    2006:	98 01       	movw	r18, r16
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	60 e8       	ldi	r22, 0x80	; 128
    200e:	7f e3       	ldi	r23, 0x3F	; 63
    2010:	ce 01       	movw	r24, r28
    2012:	49 96       	adiw	r24, 0x19	; 25
    2014:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2018:	00 e0       	ldi	r16, 0x00	; 0
    201a:	10 e0       	ldi	r17, 0x00	; 0
    201c:	98 01       	movw	r18, r16
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	60 e8       	ldi	r22, 0x80	; 128
    2024:	7f e3       	ldi	r23, 0x3F	; 63
    2026:	ce 01       	movw	r24, r28
    2028:	81 96       	adiw	r24, 0x21	; 33
    202a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    202e:	00 e0       	ldi	r16, 0x00	; 0
    2030:	10 e0       	ldi	r17, 0x00	; 0
    2032:	98 01       	movw	r18, r16
    2034:	b9 01       	movw	r22, r18
    2036:	a8 01       	movw	r20, r16
    2038:	ce 01       	movw	r24, r28
    203a:	89 96       	adiw	r24, 0x29	; 41
    203c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2040:	00 e0       	ldi	r16, 0x00	; 0
    2042:	10 e0       	ldi	r17, 0x00	; 0
    2044:	98 01       	movw	r18, r16
    2046:	b9 01       	movw	r22, r18
    2048:	a8 01       	movw	r20, r16
    204a:	ce 01       	movw	r24, r28
    204c:	c1 96       	adiw	r24, 0x31	; 49
    204e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2052:	00 e0       	ldi	r16, 0x00	; 0
    2054:	10 e0       	ldi	r17, 0x00	; 0
    2056:	98 01       	movw	r18, r16
    2058:	b9 01       	movw	r22, r18
    205a:	a8 01       	movw	r20, r16
    205c:	ce 01       	movw	r24, r28
    205e:	c9 96       	adiw	r24, 0x39	; 57
    2060:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2064:	00 e0       	ldi	r16, 0x00	; 0
    2066:	10 e0       	ldi	r17, 0x00	; 0
    2068:	98 01       	movw	r18, r16
    206a:	b9 01       	movw	r22, r18
    206c:	a8 01       	movw	r20, r16
    206e:	ce 01       	movw	r24, r28
    2070:	8f 5b       	subi	r24, 0xBF	; 191
    2072:	9f 4f       	sbci	r25, 0xFF	; 255
    2074:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2078:	00 e0       	ldi	r16, 0x00	; 0
    207a:	10 e0       	ldi	r17, 0x00	; 0
    207c:	98 01       	movw	r18, r16
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	60 e8       	ldi	r22, 0x80	; 128
    2084:	7f e3       	ldi	r23, 0x3F	; 63
    2086:	ce 01       	movw	r24, r28
    2088:	87 5b       	subi	r24, 0xB7	; 183
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2090:	00 e0       	ldi	r16, 0x00	; 0
    2092:	10 e0       	ldi	r17, 0x00	; 0
    2094:	98 01       	movw	r18, r16
    2096:	b9 01       	movw	r22, r18
    2098:	a8 01       	movw	r20, r16
    209a:	ce 01       	movw	r24, r28
    209c:	8f 5a       	subi	r24, 0xAF	; 175
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    20a4:	00 e0       	ldi	r16, 0x00	; 0
    20a6:	10 e0       	ldi	r17, 0x00	; 0
    20a8:	98 01       	movw	r18, r16
    20aa:	b9 01       	movw	r22, r18
    20ac:	a8 01       	movw	r20, r16
    20ae:	ce 01       	movw	r24, r28
    20b0:	87 5a       	subi	r24, 0xA7	; 167
    20b2:	9f 4f       	sbci	r25, 0xFF	; 255
    20b4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    20b8:	00 e0       	ldi	r16, 0x00	; 0
    20ba:	10 e0       	ldi	r17, 0x00	; 0
    20bc:	98 01       	movw	r18, r16
    20be:	b9 01       	movw	r22, r18
    20c0:	a8 01       	movw	r20, r16
    20c2:	ce 01       	movw	r24, r28
    20c4:	8f 59       	subi	r24, 0x9F	; 159
    20c6:	9f 4f       	sbci	r25, 0xFF	; 255
    20c8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    20cc:	00 e0       	ldi	r16, 0x00	; 0
    20ce:	10 e0       	ldi	r17, 0x00	; 0
    20d0:	98 01       	movw	r18, r16
    20d2:	b9 01       	movw	r22, r18
    20d4:	a8 01       	movw	r20, r16
    20d6:	ce 01       	movw	r24, r28
    20d8:	87 59       	subi	r24, 0x97	; 151
    20da:	9f 4f       	sbci	r25, 0xFF	; 255
    20dc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    20e0:	00 e0       	ldi	r16, 0x00	; 0
    20e2:	10 e0       	ldi	r17, 0x00	; 0
    20e4:	98 01       	movw	r18, r16
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	60 e8       	ldi	r22, 0x80	; 128
    20ec:	7f e3       	ldi	r23, 0x3F	; 63
    20ee:	ce 01       	movw	r24, r28
    20f0:	8f 58       	subi	r24, 0x8F	; 143
    20f2:	9f 4f       	sbci	r25, 0xFF	; 255
    20f4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    20f8:	00 e0       	ldi	r16, 0x00	; 0
    20fa:	10 e0       	ldi	r17, 0x00	; 0
    20fc:	98 01       	movw	r18, r16
    20fe:	b9 01       	movw	r22, r18
    2100:	a8 01       	movw	r20, r16
    2102:	ce 01       	movw	r24, r28
    2104:	87 58       	subi	r24, 0x87	; 135
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    210c:	cb 57       	subi	r28, 0x7B	; 123
    210e:	df 4f       	sbci	r29, 0xFF	; 255
    2110:	79 82       	std	Y+1, r7	; 0x01
    2112:	68 82       	st	Y, r6
    2114:	c5 58       	subi	r28, 0x85	; 133
    2116:	d0 40       	sbci	r29, 0x00	; 0
    2118:	c9 57       	subi	r28, 0x79	; 121
    211a:	df 4f       	sbci	r29, 0xFF	; 255
    211c:	99 82       	std	Y+1, r9	; 0x01
    211e:	88 82       	st	Y, r8
    2120:	c7 58       	subi	r28, 0x87	; 135
    2122:	d0 40       	sbci	r29, 0x00	; 0
    2124:	cf 57       	subi	r28, 0x7F	; 127
    2126:	df 4f       	sbci	r29, 0xFF	; 255
    2128:	b9 82       	std	Y+1, r11	; 0x01
    212a:	a8 82       	st	Y, r10
    212c:	c1 58       	subi	r28, 0x81	; 129
    212e:	d0 40       	sbci	r29, 0x00	; 0
    2130:	cd 57       	subi	r28, 0x7D	; 125
    2132:	df 4f       	sbci	r29, 0xFF	; 255
    2134:	d9 82       	std	Y+1, r13	; 0x01
    2136:	c8 82       	st	Y, r12
    2138:	c3 58       	subi	r28, 0x83	; 131
    213a:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    213c:	9e 01       	movw	r18, r28
    213e:	2f 57       	subi	r18, 0x7F	; 127
    2140:	3f 4f       	sbci	r19, 0xFF	; 255
    2142:	ae 01       	movw	r20, r28
    2144:	4b 57       	subi	r20, 0x7B	; 123
    2146:	5f 4f       	sbci	r21, 0xFF	; 255
    2148:	62 e0       	ldi	r22, 0x02	; 2
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	c7 01       	movw	r24, r14
    214e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    2152:	ae 01       	movw	r20, r28
    2154:	4f 5f       	subi	r20, 0xFF	; 255
    2156:	5f 4f       	sbci	r21, 0xFF	; 255
    2158:	bc 01       	movw	r22, r24
    215a:	c7 01       	movw	r24, r14
    215c:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    2160:	42 e0       	ldi	r20, 0x02	; 2
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	bc 01       	movw	r22, r24
    2166:	c7 01       	movw	r24, r14
    2168:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    216c:	c8 57       	subi	r28, 0x78	; 120
    216e:	df 4f       	sbci	r29, 0xFF	; 255
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	1f 91       	pop	r17
    2180:	0f 91       	pop	r16
    2182:	ff 90       	pop	r15
    2184:	ef 90       	pop	r14
    2186:	df 90       	pop	r13
    2188:	cf 90       	pop	r12
    218a:	bf 90       	pop	r11
    218c:	af 90       	pop	r10
    218e:	9f 90       	pop	r9
    2190:	8f 90       	pop	r8
    2192:	7f 90       	pop	r7
    2194:	6f 90       	pop	r6
    2196:	08 95       	ret

00002198 <_ZN5Gates3SWQEiiii>:
int * Gates::SWQ(int theta1, int phi1, int theta2,int phi2){
    2198:	6f 92       	push	r6
    219a:	7f 92       	push	r7
    219c:	8f 92       	push	r8
    219e:	9f 92       	push	r9
    21a0:	af 92       	push	r10
    21a2:	bf 92       	push	r11
    21a4:	cf 92       	push	r12
    21a6:	df 92       	push	r13
    21a8:	ef 92       	push	r14
    21aa:	ff 92       	push	r15
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	c8 58       	subi	r28, 0x88	; 136
    21ba:	d1 09       	sbc	r29, r1
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	7c 01       	movw	r14, r24
    21c8:	3b 01       	movw	r6, r22
    21ca:	5a 01       	movw	r10, r20
    21cc:	49 01       	movw	r8, r18
    21ce:	68 01       	movw	r12, r16
	Complex swq_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),   Complex(0,0),   Complex(0,0)},
	 												     {Complex(0,0),Complex(.5,.5), Complex(.5,-.5),Complex(0,0)},
													     {Complex(0,0),Complex(.5,-.5),Complex(.5,.5), Complex(0,0)},
													     {Complex(0,0),Complex(0,0),   Complex(0,0),   Complex(1,0)}};
    21d0:	00 e0       	ldi	r16, 0x00	; 0
    21d2:	10 e0       	ldi	r17, 0x00	; 0
    21d4:	98 01       	movw	r18, r16
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	60 e8       	ldi	r22, 0x80	; 128
    21dc:	7f e3       	ldi	r23, 0x3F	; 63
    21de:	ce 01       	movw	r24, r28
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    21e6:	00 e0       	ldi	r16, 0x00	; 0
    21e8:	10 e0       	ldi	r17, 0x00	; 0
    21ea:	98 01       	movw	r18, r16
    21ec:	b9 01       	movw	r22, r18
    21ee:	a8 01       	movw	r20, r16
    21f0:	ce 01       	movw	r24, r28
    21f2:	09 96       	adiw	r24, 0x09	; 9
    21f4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    21f8:	00 e0       	ldi	r16, 0x00	; 0
    21fa:	10 e0       	ldi	r17, 0x00	; 0
    21fc:	98 01       	movw	r18, r16
    21fe:	b9 01       	movw	r22, r18
    2200:	a8 01       	movw	r20, r16
    2202:	ce 01       	movw	r24, r28
    2204:	41 96       	adiw	r24, 0x11	; 17
    2206:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    220a:	00 e0       	ldi	r16, 0x00	; 0
    220c:	10 e0       	ldi	r17, 0x00	; 0
    220e:	98 01       	movw	r18, r16
    2210:	b9 01       	movw	r22, r18
    2212:	a8 01       	movw	r20, r16
    2214:	ce 01       	movw	r24, r28
    2216:	49 96       	adiw	r24, 0x19	; 25
    2218:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    221c:	00 e0       	ldi	r16, 0x00	; 0
    221e:	10 e0       	ldi	r17, 0x00	; 0
    2220:	98 01       	movw	r18, r16
    2222:	b9 01       	movw	r22, r18
    2224:	a8 01       	movw	r20, r16
    2226:	ce 01       	movw	r24, r28
    2228:	81 96       	adiw	r24, 0x21	; 33
    222a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    222e:	00 e0       	ldi	r16, 0x00	; 0
    2230:	10 e0       	ldi	r17, 0x00	; 0
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	3f e3       	ldi	r19, 0x3F	; 63
    2236:	b9 01       	movw	r22, r18
    2238:	a8 01       	movw	r20, r16
    223a:	ce 01       	movw	r24, r28
    223c:	89 96       	adiw	r24, 0x29	; 41
    223e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2242:	00 e0       	ldi	r16, 0x00	; 0
    2244:	10 e0       	ldi	r17, 0x00	; 0
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f eb       	ldi	r19, 0xBF	; 191
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	7f e3       	ldi	r23, 0x3F	; 63
    2252:	ce 01       	movw	r24, r28
    2254:	c1 96       	adiw	r24, 0x31	; 49
    2256:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    225a:	00 e0       	ldi	r16, 0x00	; 0
    225c:	10 e0       	ldi	r17, 0x00	; 0
    225e:	98 01       	movw	r18, r16
    2260:	b9 01       	movw	r22, r18
    2262:	a8 01       	movw	r20, r16
    2264:	ce 01       	movw	r24, r28
    2266:	c9 96       	adiw	r24, 0x39	; 57
    2268:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    226c:	00 e0       	ldi	r16, 0x00	; 0
    226e:	10 e0       	ldi	r17, 0x00	; 0
    2270:	98 01       	movw	r18, r16
    2272:	b9 01       	movw	r22, r18
    2274:	a8 01       	movw	r20, r16
    2276:	ce 01       	movw	r24, r28
    2278:	8f 5b       	subi	r24, 0xBF	; 191
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2280:	00 e0       	ldi	r16, 0x00	; 0
    2282:	10 e0       	ldi	r17, 0x00	; 0
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	3f eb       	ldi	r19, 0xBF	; 191
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	7f e3       	ldi	r23, 0x3F	; 63
    2290:	ce 01       	movw	r24, r28
    2292:	87 5b       	subi	r24, 0xB7	; 183
    2294:	9f 4f       	sbci	r25, 0xFF	; 255
    2296:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    229a:	00 e0       	ldi	r16, 0x00	; 0
    229c:	10 e0       	ldi	r17, 0x00	; 0
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f e3       	ldi	r19, 0x3F	; 63
    22a2:	b9 01       	movw	r22, r18
    22a4:	a8 01       	movw	r20, r16
    22a6:	ce 01       	movw	r24, r28
    22a8:	8f 5a       	subi	r24, 0xAF	; 175
    22aa:	9f 4f       	sbci	r25, 0xFF	; 255
    22ac:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    22b0:	00 e0       	ldi	r16, 0x00	; 0
    22b2:	10 e0       	ldi	r17, 0x00	; 0
    22b4:	98 01       	movw	r18, r16
    22b6:	b9 01       	movw	r22, r18
    22b8:	a8 01       	movw	r20, r16
    22ba:	ce 01       	movw	r24, r28
    22bc:	87 5a       	subi	r24, 0xA7	; 167
    22be:	9f 4f       	sbci	r25, 0xFF	; 255
    22c0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    22c4:	00 e0       	ldi	r16, 0x00	; 0
    22c6:	10 e0       	ldi	r17, 0x00	; 0
    22c8:	98 01       	movw	r18, r16
    22ca:	b9 01       	movw	r22, r18
    22cc:	a8 01       	movw	r20, r16
    22ce:	ce 01       	movw	r24, r28
    22d0:	8f 59       	subi	r24, 0x9F	; 159
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    22d8:	00 e0       	ldi	r16, 0x00	; 0
    22da:	10 e0       	ldi	r17, 0x00	; 0
    22dc:	98 01       	movw	r18, r16
    22de:	b9 01       	movw	r22, r18
    22e0:	a8 01       	movw	r20, r16
    22e2:	ce 01       	movw	r24, r28
    22e4:	87 59       	subi	r24, 0x97	; 151
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    22ec:	00 e0       	ldi	r16, 0x00	; 0
    22ee:	10 e0       	ldi	r17, 0x00	; 0
    22f0:	98 01       	movw	r18, r16
    22f2:	b9 01       	movw	r22, r18
    22f4:	a8 01       	movw	r20, r16
    22f6:	ce 01       	movw	r24, r28
    22f8:	8f 58       	subi	r24, 0x8F	; 143
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2300:	00 e0       	ldi	r16, 0x00	; 0
    2302:	10 e0       	ldi	r17, 0x00	; 0
    2304:	98 01       	movw	r18, r16
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	60 e8       	ldi	r22, 0x80	; 128
    230c:	7f e3       	ldi	r23, 0x3F	; 63
    230e:	ce 01       	movw	r24, r28
    2310:	87 58       	subi	r24, 0x87	; 135
    2312:	9f 4f       	sbci	r25, 0xFF	; 255
    2314:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2318:	cb 57       	subi	r28, 0x7B	; 123
    231a:	df 4f       	sbci	r29, 0xFF	; 255
    231c:	79 82       	std	Y+1, r7	; 0x01
    231e:	68 82       	st	Y, r6
    2320:	c5 58       	subi	r28, 0x85	; 133
    2322:	d0 40       	sbci	r29, 0x00	; 0
    2324:	c9 57       	subi	r28, 0x79	; 121
    2326:	df 4f       	sbci	r29, 0xFF	; 255
    2328:	99 82       	std	Y+1, r9	; 0x01
    232a:	88 82       	st	Y, r8
    232c:	c7 58       	subi	r28, 0x87	; 135
    232e:	d0 40       	sbci	r29, 0x00	; 0
    2330:	cf 57       	subi	r28, 0x7F	; 127
    2332:	df 4f       	sbci	r29, 0xFF	; 255
    2334:	b9 82       	std	Y+1, r11	; 0x01
    2336:	a8 82       	st	Y, r10
    2338:	c1 58       	subi	r28, 0x81	; 129
    233a:	d0 40       	sbci	r29, 0x00	; 0
    233c:	cd 57       	subi	r28, 0x7D	; 125
    233e:	df 4f       	sbci	r29, 0xFF	; 255
    2340:	d9 82       	std	Y+1, r13	; 0x01
    2342:	c8 82       	st	Y, r12
    2344:	c3 58       	subi	r28, 0x83	; 131
    2346:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swq_matrix),QB_SIZE2);
    2348:	9e 01       	movw	r18, r28
    234a:	2f 57       	subi	r18, 0x7F	; 127
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	ae 01       	movw	r20, r28
    2350:	4b 57       	subi	r20, 0x7B	; 123
    2352:	5f 4f       	sbci	r21, 0xFF	; 255
    2354:	62 e0       	ldi	r22, 0x02	; 2
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	c7 01       	movw	r24, r14
    235a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    235e:	ae 01       	movw	r20, r28
    2360:	4f 5f       	subi	r20, 0xFF	; 255
    2362:	5f 4f       	sbci	r21, 0xFF	; 255
    2364:	bc 01       	movw	r22, r24
    2366:	c7 01       	movw	r24, r14
    2368:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    236c:	42 e0       	ldi	r20, 0x02	; 2
    236e:	50 e0       	ldi	r21, 0x00	; 0
    2370:	bc 01       	movw	r22, r24
    2372:	c7 01       	movw	r24, r14
    2374:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    2378:	c8 57       	subi	r28, 0x78	; 120
    237a:	df 4f       	sbci	r29, 0xFF	; 255
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	ff 90       	pop	r15
    2390:	ef 90       	pop	r14
    2392:	df 90       	pop	r13
    2394:	cf 90       	pop	r12
    2396:	bf 90       	pop	r11
    2398:	af 90       	pop	r10
    239a:	9f 90       	pop	r9
    239c:	8f 90       	pop	r8
    239e:	7f 90       	pop	r7
    23a0:	6f 90       	pop	r6
    23a2:	08 95       	ret

000023a4 <_ZN5Gates3SWIEiiii>:
int * Gates::SWI(int theta1, int phi1, int theta2,int phi2){
    23a4:	6f 92       	push	r6
    23a6:	7f 92       	push	r7
    23a8:	8f 92       	push	r8
    23aa:	9f 92       	push	r9
    23ac:	af 92       	push	r10
    23ae:	bf 92       	push	r11
    23b0:	cf 92       	push	r12
    23b2:	df 92       	push	r13
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	c8 58       	subi	r28, 0x88	; 136
    23c6:	d1 09       	sbc	r29, r1
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	7c 01       	movw	r14, r24
    23d4:	3b 01       	movw	r6, r22
    23d6:	5a 01       	movw	r10, r20
    23d8:	49 01       	movw	r8, r18
    23da:	68 01       	movw	r12, r16
	Complex dec_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,1),Complex(0,0)},
 													     {Complex(0,0),Complex(0,1),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    23dc:	00 e0       	ldi	r16, 0x00	; 0
    23de:	10 e0       	ldi	r17, 0x00	; 0
    23e0:	98 01       	movw	r18, r16
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	60 e8       	ldi	r22, 0x80	; 128
    23e8:	7f e3       	ldi	r23, 0x3F	; 63
    23ea:	ce 01       	movw	r24, r28
    23ec:	01 96       	adiw	r24, 0x01	; 1
    23ee:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    23f2:	00 e0       	ldi	r16, 0x00	; 0
    23f4:	10 e0       	ldi	r17, 0x00	; 0
    23f6:	98 01       	movw	r18, r16
    23f8:	b9 01       	movw	r22, r18
    23fa:	a8 01       	movw	r20, r16
    23fc:	ce 01       	movw	r24, r28
    23fe:	09 96       	adiw	r24, 0x09	; 9
    2400:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2404:	00 e0       	ldi	r16, 0x00	; 0
    2406:	10 e0       	ldi	r17, 0x00	; 0
    2408:	98 01       	movw	r18, r16
    240a:	b9 01       	movw	r22, r18
    240c:	a8 01       	movw	r20, r16
    240e:	ce 01       	movw	r24, r28
    2410:	41 96       	adiw	r24, 0x11	; 17
    2412:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2416:	00 e0       	ldi	r16, 0x00	; 0
    2418:	10 e0       	ldi	r17, 0x00	; 0
    241a:	98 01       	movw	r18, r16
    241c:	b9 01       	movw	r22, r18
    241e:	a8 01       	movw	r20, r16
    2420:	ce 01       	movw	r24, r28
    2422:	49 96       	adiw	r24, 0x19	; 25
    2424:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2428:	00 e0       	ldi	r16, 0x00	; 0
    242a:	10 e0       	ldi	r17, 0x00	; 0
    242c:	98 01       	movw	r18, r16
    242e:	b9 01       	movw	r22, r18
    2430:	a8 01       	movw	r20, r16
    2432:	ce 01       	movw	r24, r28
    2434:	81 96       	adiw	r24, 0x21	; 33
    2436:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    243a:	00 e0       	ldi	r16, 0x00	; 0
    243c:	10 e0       	ldi	r17, 0x00	; 0
    243e:	98 01       	movw	r18, r16
    2440:	b9 01       	movw	r22, r18
    2442:	a8 01       	movw	r20, r16
    2444:	ce 01       	movw	r24, r28
    2446:	89 96       	adiw	r24, 0x29	; 41
    2448:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    244c:	00 e0       	ldi	r16, 0x00	; 0
    244e:	10 e0       	ldi	r17, 0x00	; 0
    2450:	20 e8       	ldi	r18, 0x80	; 128
    2452:	3f e3       	ldi	r19, 0x3F	; 63
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	ba 01       	movw	r22, r20
    245a:	ce 01       	movw	r24, r28
    245c:	c1 96       	adiw	r24, 0x31	; 49
    245e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2462:	00 e0       	ldi	r16, 0x00	; 0
    2464:	10 e0       	ldi	r17, 0x00	; 0
    2466:	98 01       	movw	r18, r16
    2468:	b9 01       	movw	r22, r18
    246a:	a8 01       	movw	r20, r16
    246c:	ce 01       	movw	r24, r28
    246e:	c9 96       	adiw	r24, 0x39	; 57
    2470:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2474:	00 e0       	ldi	r16, 0x00	; 0
    2476:	10 e0       	ldi	r17, 0x00	; 0
    2478:	98 01       	movw	r18, r16
    247a:	b9 01       	movw	r22, r18
    247c:	a8 01       	movw	r20, r16
    247e:	ce 01       	movw	r24, r28
    2480:	8f 5b       	subi	r24, 0xBF	; 191
    2482:	9f 4f       	sbci	r25, 0xFF	; 255
    2484:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2488:	00 e0       	ldi	r16, 0x00	; 0
    248a:	10 e0       	ldi	r17, 0x00	; 0
    248c:	20 e8       	ldi	r18, 0x80	; 128
    248e:	3f e3       	ldi	r19, 0x3F	; 63
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	ba 01       	movw	r22, r20
    2496:	ce 01       	movw	r24, r28
    2498:	87 5b       	subi	r24, 0xB7	; 183
    249a:	9f 4f       	sbci	r25, 0xFF	; 255
    249c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    24a0:	00 e0       	ldi	r16, 0x00	; 0
    24a2:	10 e0       	ldi	r17, 0x00	; 0
    24a4:	98 01       	movw	r18, r16
    24a6:	b9 01       	movw	r22, r18
    24a8:	a8 01       	movw	r20, r16
    24aa:	ce 01       	movw	r24, r28
    24ac:	8f 5a       	subi	r24, 0xAF	; 175
    24ae:	9f 4f       	sbci	r25, 0xFF	; 255
    24b0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    24b4:	00 e0       	ldi	r16, 0x00	; 0
    24b6:	10 e0       	ldi	r17, 0x00	; 0
    24b8:	98 01       	movw	r18, r16
    24ba:	b9 01       	movw	r22, r18
    24bc:	a8 01       	movw	r20, r16
    24be:	ce 01       	movw	r24, r28
    24c0:	87 5a       	subi	r24, 0xA7	; 167
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    24c8:	00 e0       	ldi	r16, 0x00	; 0
    24ca:	10 e0       	ldi	r17, 0x00	; 0
    24cc:	98 01       	movw	r18, r16
    24ce:	b9 01       	movw	r22, r18
    24d0:	a8 01       	movw	r20, r16
    24d2:	ce 01       	movw	r24, r28
    24d4:	8f 59       	subi	r24, 0x9F	; 159
    24d6:	9f 4f       	sbci	r25, 0xFF	; 255
    24d8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    24dc:	00 e0       	ldi	r16, 0x00	; 0
    24de:	10 e0       	ldi	r17, 0x00	; 0
    24e0:	98 01       	movw	r18, r16
    24e2:	b9 01       	movw	r22, r18
    24e4:	a8 01       	movw	r20, r16
    24e6:	ce 01       	movw	r24, r28
    24e8:	87 59       	subi	r24, 0x97	; 151
    24ea:	9f 4f       	sbci	r25, 0xFF	; 255
    24ec:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    24f0:	00 e0       	ldi	r16, 0x00	; 0
    24f2:	10 e0       	ldi	r17, 0x00	; 0
    24f4:	98 01       	movw	r18, r16
    24f6:	b9 01       	movw	r22, r18
    24f8:	a8 01       	movw	r20, r16
    24fa:	ce 01       	movw	r24, r28
    24fc:	8f 58       	subi	r24, 0x8F	; 143
    24fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2500:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2504:	00 e0       	ldi	r16, 0x00	; 0
    2506:	10 e0       	ldi	r17, 0x00	; 0
    2508:	98 01       	movw	r18, r16
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	60 e8       	ldi	r22, 0x80	; 128
    2510:	7f e3       	ldi	r23, 0x3F	; 63
    2512:	ce 01       	movw	r24, r28
    2514:	87 58       	subi	r24, 0x87	; 135
    2516:	9f 4f       	sbci	r25, 0xFF	; 255
    2518:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    251c:	cb 57       	subi	r28, 0x7B	; 123
    251e:	df 4f       	sbci	r29, 0xFF	; 255
    2520:	79 82       	std	Y+1, r7	; 0x01
    2522:	68 82       	st	Y, r6
    2524:	c5 58       	subi	r28, 0x85	; 133
    2526:	d0 40       	sbci	r29, 0x00	; 0
    2528:	c9 57       	subi	r28, 0x79	; 121
    252a:	df 4f       	sbci	r29, 0xFF	; 255
    252c:	99 82       	std	Y+1, r9	; 0x01
    252e:	88 82       	st	Y, r8
    2530:	c7 58       	subi	r28, 0x87	; 135
    2532:	d0 40       	sbci	r29, 0x00	; 0
    2534:	cf 57       	subi	r28, 0x7F	; 127
    2536:	df 4f       	sbci	r29, 0xFF	; 255
    2538:	b9 82       	std	Y+1, r11	; 0x01
    253a:	a8 82       	st	Y, r10
    253c:	c1 58       	subi	r28, 0x81	; 129
    253e:	d0 40       	sbci	r29, 0x00	; 0
    2540:	cd 57       	subi	r28, 0x7D	; 125
    2542:	df 4f       	sbci	r29, 0xFF	; 255
    2544:	d9 82       	std	Y+1, r13	; 0x01
    2546:	c8 82       	st	Y, r12
    2548:	c3 58       	subi	r28, 0x83	; 131
    254a:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    254c:	9e 01       	movw	r18, r28
    254e:	2f 57       	subi	r18, 0x7F	; 127
    2550:	3f 4f       	sbci	r19, 0xFF	; 255
    2552:	ae 01       	movw	r20, r28
    2554:	4b 57       	subi	r20, 0x7B	; 123
    2556:	5f 4f       	sbci	r21, 0xFF	; 255
    2558:	62 e0       	ldi	r22, 0x02	; 2
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	c7 01       	movw	r24, r14
    255e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    2562:	ae 01       	movw	r20, r28
    2564:	4f 5f       	subi	r20, 0xFF	; 255
    2566:	5f 4f       	sbci	r21, 0xFF	; 255
    2568:	bc 01       	movw	r22, r24
    256a:	c7 01       	movw	r24, r14
    256c:	0e 94 f9 07 	call	0xff2	; 0xff2 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    2570:	42 e0       	ldi	r20, 0x02	; 2
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	bc 01       	movw	r22, r24
    2576:	c7 01       	movw	r24, r14
    2578:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    257c:	c8 57       	subi	r28, 0x78	; 120
    257e:	df 4f       	sbci	r29, 0xFF	; 255
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	1f 91       	pop	r17
    2590:	0f 91       	pop	r16
    2592:	ff 90       	pop	r15
    2594:	ef 90       	pop	r14
    2596:	df 90       	pop	r13
    2598:	cf 90       	pop	r12
    259a:	bf 90       	pop	r11
    259c:	af 90       	pop	r10
    259e:	9f 90       	pop	r9
    25a0:	8f 90       	pop	r8
    25a2:	7f 90       	pop	r7
    25a4:	6f 90       	pop	r6
    25a6:	08 95       	ret

000025a8 <_ZN5Gates3ROXEiii>:
int * Gates::ROX(int theta,int phi,int delta){
    25a8:	2f 92       	push	r2
    25aa:	3f 92       	push	r3
    25ac:	4f 92       	push	r4
    25ae:	5f 92       	push	r5
    25b0:	6f 92       	push	r6
    25b2:	7f 92       	push	r7
    25b4:	8f 92       	push	r8
    25b6:	9f 92       	push	r9
    25b8:	af 92       	push	r10
    25ba:	bf 92       	push	r11
    25bc:	cf 92       	push	r12
    25be:	df 92       	push	r13
    25c0:	ef 92       	push	r14
    25c2:	ff 92       	push	r15
    25c4:	0f 93       	push	r16
    25c6:	1f 93       	push	r17
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	a4 97       	sbiw	r28, 0x24	; 36
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	7c 01       	movw	r14, r24
    25de:	1b 01       	movw	r2, r22
    25e0:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    25e2:	b9 01       	movw	r22, r18
    25e4:	88 27       	eor	r24, r24
    25e6:	77 fd       	sbrc	r23, 7
    25e8:	80 95       	com	r24
    25ea:	98 2f       	mov	r25, r24
    25ec:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
    25f0:	2b ed       	ldi	r18, 0xDB	; 219
    25f2:	3f e0       	ldi	r19, 0x0F	; 15
    25f4:	49 e4       	ldi	r20, 0x49	; 73
    25f6:	50 e4       	ldi	r21, 0x40	; 64
    25f8:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	44 e3       	ldi	r20, 0x34	; 52
    2602:	53 e4       	ldi	r21, 0x43	; 67
    2604:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
	Complex rox_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0), Complex(0,-sin(delta_float/2))},
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
    2614:	4b 01       	movw	r8, r22
    2616:	5c 01       	movw	r10, r24
    2618:	0e 94 aa 30 	call	0x6154	; 0x6154 <cos>
    261c:	2b 01       	movw	r4, r22
    261e:	3c 01       	movw	r6, r24
														 {Complex(0,-sin(delta_float/2)),Complex(cos(delta_float/2),0)}};
    2620:	00 e0       	ldi	r16, 0x00	; 0
    2622:	10 e0       	ldi	r17, 0x00	; 0
    2624:	98 01       	movw	r18, r16
    2626:	ab 01       	movw	r20, r22
    2628:	bc 01       	movw	r22, r24
    262a:	ce 01       	movw	r24, r28
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
}
int * Gates::ROX(int theta,int phi,int delta){
	float delta_float=(delta*M_PI)/180;
	Complex rox_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0), Complex(0,-sin(delta_float/2))},
    2632:	c5 01       	movw	r24, r10
    2634:	b4 01       	movw	r22, r8
    2636:	0e 94 be 33 	call	0x677c	; 0x677c <sin>
														 {Complex(0,-sin(delta_float/2)),Complex(cos(delta_float/2),0)}};
    263a:	4b 01       	movw	r8, r22
    263c:	5c 01       	movw	r10, r24
    263e:	b7 fa       	bst	r11, 7
    2640:	b0 94       	com	r11
    2642:	b7 f8       	bld	r11, 7
    2644:	b0 94       	com	r11
    2646:	95 01       	movw	r18, r10
    2648:	84 01       	movw	r16, r8
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	ba 01       	movw	r22, r20
    2650:	ce 01       	movw	r24, r28
    2652:	09 96       	adiw	r24, 0x09	; 9
    2654:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2658:	95 01       	movw	r18, r10
    265a:	84 01       	movw	r16, r8
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	50 e0       	ldi	r21, 0x00	; 0
    2660:	ba 01       	movw	r22, r20
    2662:	ce 01       	movw	r24, r28
    2664:	41 96       	adiw	r24, 0x11	; 17
    2666:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    266a:	00 e0       	ldi	r16, 0x00	; 0
    266c:	10 e0       	ldi	r17, 0x00	; 0
    266e:	98 01       	movw	r18, r16
    2670:	b3 01       	movw	r22, r6
    2672:	a2 01       	movw	r20, r4
    2674:	ce 01       	movw	r24, r28
    2676:	49 96       	adiw	r24, 0x19	; 25
    2678:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    267c:	3c a2       	std	Y+36, r3	; 0x24
    267e:	2b a2       	std	Y+35, r2	; 0x23
    2680:	da a2       	std	Y+34, r13	; 0x22
    2682:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
    2684:	9e 01       	movw	r18, r28
    2686:	2f 5d       	subi	r18, 0xDF	; 223
    2688:	3f 4f       	sbci	r19, 0xFF	; 255
    268a:	ae 01       	movw	r20, r28
    268c:	4d 5d       	subi	r20, 0xDD	; 221
    268e:	5f 4f       	sbci	r21, 0xFF	; 255
    2690:	61 e0       	ldi	r22, 0x01	; 1
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	c7 01       	movw	r24, r14
    2696:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    269a:	ae 01       	movw	r20, r28
    269c:	4f 5f       	subi	r20, 0xFF	; 255
    269e:	5f 4f       	sbci	r21, 0xFF	; 255
    26a0:	bc 01       	movw	r22, r24
    26a2:	c7 01       	movw	r24, r14
    26a4:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    26a8:	41 e0       	ldi	r20, 0x01	; 1
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	bc 01       	movw	r22, r24
    26ae:	c7 01       	movw	r24, r14
    26b0:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    26b4:	a4 96       	adiw	r28, 0x24	; 36
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	ff 90       	pop	r15
    26ca:	ef 90       	pop	r14
    26cc:	df 90       	pop	r13
    26ce:	cf 90       	pop	r12
    26d0:	bf 90       	pop	r11
    26d2:	af 90       	pop	r10
    26d4:	9f 90       	pop	r9
    26d6:	8f 90       	pop	r8
    26d8:	7f 90       	pop	r7
    26da:	6f 90       	pop	r6
    26dc:	5f 90       	pop	r5
    26de:	4f 90       	pop	r4
    26e0:	3f 90       	pop	r3
    26e2:	2f 90       	pop	r2
    26e4:	08 95       	ret

000026e6 <_ZN5Gates3ROYEiii>:
int * Gates::ROY(int theta,int phi,int delta){
    26e6:	2f 92       	push	r2
    26e8:	3f 92       	push	r3
    26ea:	4f 92       	push	r4
    26ec:	5f 92       	push	r5
    26ee:	6f 92       	push	r6
    26f0:	7f 92       	push	r7
    26f2:	8f 92       	push	r8
    26f4:	9f 92       	push	r9
    26f6:	af 92       	push	r10
    26f8:	bf 92       	push	r11
    26fa:	cf 92       	push	r12
    26fc:	df 92       	push	r13
    26fe:	ef 92       	push	r14
    2700:	ff 92       	push	r15
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	a4 97       	sbiw	r28, 0x24	; 36
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	7c 01       	movw	r14, r24
    271c:	1b 01       	movw	r2, r22
    271e:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    2720:	b9 01       	movw	r22, r18
    2722:	88 27       	eor	r24, r24
    2724:	77 fd       	sbrc	r23, 7
    2726:	80 95       	com	r24
    2728:	98 2f       	mov	r25, r24
    272a:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
    272e:	2b ed       	ldi	r18, 0xDB	; 219
    2730:	3f e0       	ldi	r19, 0x0F	; 15
    2732:	49 e4       	ldi	r20, 0x49	; 73
    2734:	50 e4       	ldi	r21, 0x40	; 64
    2736:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	44 e3       	ldi	r20, 0x34	; 52
    2740:	53 e4       	ldi	r21, 0x43	; 67
    2742:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0),Complex(-sin(delta_float/2),0)},
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	5f e3       	ldi	r21, 0x3F	; 63
    274e:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
    2752:	4b 01       	movw	r8, r22
    2754:	5c 01       	movw	r10, r24
    2756:	0e 94 aa 30 	call	0x6154	; 0x6154 <cos>
    275a:	2b 01       	movw	r4, r22
    275c:	3c 01       	movw	r6, r24
														 {Complex(sin(delta_float/2),0),Complex(cos(delta_float/2),0)}};
    275e:	00 e0       	ldi	r16, 0x00	; 0
    2760:	10 e0       	ldi	r17, 0x00	; 0
    2762:	98 01       	movw	r18, r16
    2764:	ab 01       	movw	r20, r22
    2766:	bc 01       	movw	r22, r24
    2768:	ce 01       	movw	r24, r28
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
}
int * Gates::ROY(int theta,int phi,int delta){
	float delta_float=(delta*M_PI)/180;
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0),Complex(-sin(delta_float/2),0)},
    2770:	c5 01       	movw	r24, r10
    2772:	b4 01       	movw	r22, r8
    2774:	0e 94 be 33 	call	0x677c	; 0x677c <sin>
    2778:	4b 01       	movw	r8, r22
    277a:	5c 01       	movw	r10, r24
														 {Complex(sin(delta_float/2),0),Complex(cos(delta_float/2),0)}};
    277c:	ab 01       	movw	r20, r22
    277e:	bc 01       	movw	r22, r24
    2780:	70 58       	subi	r23, 0x80	; 128
    2782:	00 e0       	ldi	r16, 0x00	; 0
    2784:	10 e0       	ldi	r17, 0x00	; 0
    2786:	98 01       	movw	r18, r16
    2788:	ce 01       	movw	r24, r28
    278a:	09 96       	adiw	r24, 0x09	; 9
    278c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2790:	00 e0       	ldi	r16, 0x00	; 0
    2792:	10 e0       	ldi	r17, 0x00	; 0
    2794:	98 01       	movw	r18, r16
    2796:	b5 01       	movw	r22, r10
    2798:	a4 01       	movw	r20, r8
    279a:	ce 01       	movw	r24, r28
    279c:	41 96       	adiw	r24, 0x11	; 17
    279e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    27a2:	00 e0       	ldi	r16, 0x00	; 0
    27a4:	10 e0       	ldi	r17, 0x00	; 0
    27a6:	98 01       	movw	r18, r16
    27a8:	b3 01       	movw	r22, r6
    27aa:	a2 01       	movw	r20, r4
    27ac:	ce 01       	movw	r24, r28
    27ae:	49 96       	adiw	r24, 0x19	; 25
    27b0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    27b4:	3c a2       	std	Y+36, r3	; 0x24
    27b6:	2b a2       	std	Y+35, r2	; 0x23
    27b8:	da a2       	std	Y+34, r13	; 0x22
    27ba:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    27bc:	9e 01       	movw	r18, r28
    27be:	2f 5d       	subi	r18, 0xDF	; 223
    27c0:	3f 4f       	sbci	r19, 0xFF	; 255
    27c2:	ae 01       	movw	r20, r28
    27c4:	4d 5d       	subi	r20, 0xDD	; 221
    27c6:	5f 4f       	sbci	r21, 0xFF	; 255
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	c7 01       	movw	r24, r14
    27ce:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    27d2:	ae 01       	movw	r20, r28
    27d4:	4f 5f       	subi	r20, 0xFF	; 255
    27d6:	5f 4f       	sbci	r21, 0xFF	; 255
    27d8:	bc 01       	movw	r22, r24
    27da:	c7 01       	movw	r24, r14
    27dc:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	bc 01       	movw	r22, r24
    27e6:	c7 01       	movw	r24, r14
    27e8:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    27ec:	a4 96       	adiw	r28, 0x24	; 36
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	1f 91       	pop	r17
    27fe:	0f 91       	pop	r16
    2800:	ff 90       	pop	r15
    2802:	ef 90       	pop	r14
    2804:	df 90       	pop	r13
    2806:	cf 90       	pop	r12
    2808:	bf 90       	pop	r11
    280a:	af 90       	pop	r10
    280c:	9f 90       	pop	r9
    280e:	8f 90       	pop	r8
    2810:	7f 90       	pop	r7
    2812:	6f 90       	pop	r6
    2814:	5f 90       	pop	r5
    2816:	4f 90       	pop	r4
    2818:	3f 90       	pop	r3
    281a:	2f 90       	pop	r2
    281c:	08 95       	ret

0000281e <_ZN5Gates3ROZEiii>:
int * Gates::ROZ(int theta,int phi,int delta){
    281e:	4f 92       	push	r4
    2820:	5f 92       	push	r5
    2822:	6f 92       	push	r6
    2824:	7f 92       	push	r7
    2826:	af 92       	push	r10
    2828:	bf 92       	push	r11
    282a:	cf 92       	push	r12
    282c:	df 92       	push	r13
    282e:	ef 92       	push	r14
    2830:	ff 92       	push	r15
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	a4 97       	sbiw	r28, 0x24	; 36
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	7c 01       	movw	r14, r24
    284c:	5b 01       	movw	r10, r22
    284e:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    2850:	b9 01       	movw	r22, r18
    2852:	88 27       	eor	r24, r24
    2854:	77 fd       	sbrc	r23, 7
    2856:	80 95       	com	r24
    2858:	98 2f       	mov	r25, r24
    285a:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
    285e:	2b ed       	ldi	r18, 0xDB	; 219
    2860:	3f e0       	ldi	r19, 0x0F	; 15
    2862:	49 e4       	ldi	r20, 0x49	; 73
    2864:	50 e4       	ldi	r21, 0x40	; 64
    2866:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	44 e3       	ldi	r20, 0x34	; 52
    2870:	53 e4       	ldi	r21, 0x43	; 67
    2872:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
    2876:	2b 01       	movw	r4, r22
    2878:	3c 01       	movw	r6, r24
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,exp(-delta_float/2)),Complex(0,0)},
    287a:	90 58       	subi	r25, 0x80	; 128
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	5f e3       	ldi	r21, 0x3F	; 63
    2884:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
    2888:	0e 94 1a 31 	call	0x6234	; 0x6234 <exp>
    288c:	8b 01       	movw	r16, r22
    288e:	9c 01       	movw	r18, r24
														 {Complex(0,0),		  		     Complex(0,exp(delta_float/2))}};
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	50 e0       	ldi	r21, 0x00	; 0
    2894:	ba 01       	movw	r22, r20
    2896:	ce 01       	movw	r24, r28
    2898:	01 96       	adiw	r24, 0x01	; 1
    289a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    289e:	00 e0       	ldi	r16, 0x00	; 0
    28a0:	10 e0       	ldi	r17, 0x00	; 0
    28a2:	98 01       	movw	r18, r16
    28a4:	b9 01       	movw	r22, r18
    28a6:	a8 01       	movw	r20, r16
    28a8:	ce 01       	movw	r24, r28
    28aa:	09 96       	adiw	r24, 0x09	; 9
    28ac:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    28b0:	00 e0       	ldi	r16, 0x00	; 0
    28b2:	10 e0       	ldi	r17, 0x00	; 0
    28b4:	98 01       	movw	r18, r16
    28b6:	b9 01       	movw	r22, r18
    28b8:	a8 01       	movw	r20, r16
    28ba:	ce 01       	movw	r24, r28
    28bc:	41 96       	adiw	r24, 0x11	; 17
    28be:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	5f e3       	ldi	r21, 0x3F	; 63
    28ca:	c3 01       	movw	r24, r6
    28cc:	b2 01       	movw	r22, r4
    28ce:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
    28d2:	0e 94 1a 31 	call	0x6234	; 0x6234 <exp>
    28d6:	8b 01       	movw	r16, r22
    28d8:	9c 01       	movw	r18, r24
    28da:	40 e0       	ldi	r20, 0x00	; 0
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	ba 01       	movw	r22, r20
    28e0:	ce 01       	movw	r24, r28
    28e2:	49 96       	adiw	r24, 0x19	; 25
    28e4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    28e8:	bc a2       	std	Y+36, r11	; 0x24
    28ea:	ab a2       	std	Y+35, r10	; 0x23
    28ec:	da a2       	std	Y+34, r13	; 0x22
    28ee:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    28f0:	9e 01       	movw	r18, r28
    28f2:	2f 5d       	subi	r18, 0xDF	; 223
    28f4:	3f 4f       	sbci	r19, 0xFF	; 255
    28f6:	ae 01       	movw	r20, r28
    28f8:	4d 5d       	subi	r20, 0xDD	; 221
    28fa:	5f 4f       	sbci	r21, 0xFF	; 255
    28fc:	61 e0       	ldi	r22, 0x01	; 1
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	c7 01       	movw	r24, r14
    2902:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    2906:	ae 01       	movw	r20, r28
    2908:	4f 5f       	subi	r20, 0xFF	; 255
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	bc 01       	movw	r22, r24
    290e:	c7 01       	movw	r24, r14
    2910:	0e 94 3b 07 	call	0xe76	; 0xe76 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	50 e0       	ldi	r21, 0x00	; 0
    2918:	bc 01       	movw	r22, r24
    291a:	c7 01       	movw	r24, r14
    291c:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    2920:	a4 96       	adiw	r28, 0x24	; 36
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	ff 90       	pop	r15
    2936:	ef 90       	pop	r14
    2938:	df 90       	pop	r13
    293a:	cf 90       	pop	r12
    293c:	bf 90       	pop	r11
    293e:	af 90       	pop	r10
    2940:	7f 90       	pop	r7
    2942:	6f 90       	pop	r6
    2944:	5f 90       	pop	r5
    2946:	4f 90       	pop	r4
    2948:	08 95       	ret

0000294a <_ZN5Gates3CSWEiiiiii>:
int * Gates::CSW(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3){
    294a:	2f 92       	push	r2
    294c:	3f 92       	push	r3
    294e:	4f 92       	push	r4
    2950:	5f 92       	push	r5
    2952:	6f 92       	push	r6
    2954:	7f 92       	push	r7
    2956:	8f 92       	push	r8
    2958:	9f 92       	push	r9
    295a:	af 92       	push	r10
    295c:	bf 92       	push	r11
    295e:	cf 92       	push	r12
    2960:	df 92       	push	r13
    2962:	ef 92       	push	r14
    2964:	ff 92       	push	r15
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	cc 50       	subi	r28, 0x0C	; 12
    2974:	d2 40       	sbci	r29, 0x02	; 2
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	5c 01       	movw	r10, r24
    2982:	3b 01       	movw	r6, r22
    2984:	2a 01       	movw	r4, r20
    2986:	49 01       	movw	r8, r18
    2988:	18 01       	movw	r2, r16
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    298a:	00 e0       	ldi	r16, 0x00	; 0
    298c:	10 e0       	ldi	r17, 0x00	; 0
    298e:	98 01       	movw	r18, r16
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	60 e8       	ldi	r22, 0x80	; 128
    2996:	7f e3       	ldi	r23, 0x3F	; 63
    2998:	ce 01       	movw	r24, r28
    299a:	01 96       	adiw	r24, 0x01	; 1
    299c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    29a0:	00 e0       	ldi	r16, 0x00	; 0
    29a2:	10 e0       	ldi	r17, 0x00	; 0
    29a4:	98 01       	movw	r18, r16
    29a6:	b9 01       	movw	r22, r18
    29a8:	a8 01       	movw	r20, r16
    29aa:	ce 01       	movw	r24, r28
    29ac:	09 96       	adiw	r24, 0x09	; 9
    29ae:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    29b2:	00 e0       	ldi	r16, 0x00	; 0
    29b4:	10 e0       	ldi	r17, 0x00	; 0
    29b6:	98 01       	movw	r18, r16
    29b8:	b9 01       	movw	r22, r18
    29ba:	a8 01       	movw	r20, r16
    29bc:	ce 01       	movw	r24, r28
    29be:	41 96       	adiw	r24, 0x11	; 17
    29c0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    29c4:	00 e0       	ldi	r16, 0x00	; 0
    29c6:	10 e0       	ldi	r17, 0x00	; 0
    29c8:	98 01       	movw	r18, r16
    29ca:	b9 01       	movw	r22, r18
    29cc:	a8 01       	movw	r20, r16
    29ce:	ce 01       	movw	r24, r28
    29d0:	49 96       	adiw	r24, 0x19	; 25
    29d2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    29d6:	00 e0       	ldi	r16, 0x00	; 0
    29d8:	10 e0       	ldi	r17, 0x00	; 0
    29da:	98 01       	movw	r18, r16
    29dc:	b9 01       	movw	r22, r18
    29de:	a8 01       	movw	r20, r16
    29e0:	ce 01       	movw	r24, r28
    29e2:	81 96       	adiw	r24, 0x21	; 33
    29e4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    29e8:	00 e0       	ldi	r16, 0x00	; 0
    29ea:	10 e0       	ldi	r17, 0x00	; 0
    29ec:	98 01       	movw	r18, r16
    29ee:	b9 01       	movw	r22, r18
    29f0:	a8 01       	movw	r20, r16
    29f2:	ce 01       	movw	r24, r28
    29f4:	89 96       	adiw	r24, 0x29	; 41
    29f6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    29fa:	00 e0       	ldi	r16, 0x00	; 0
    29fc:	10 e0       	ldi	r17, 0x00	; 0
    29fe:	98 01       	movw	r18, r16
    2a00:	b9 01       	movw	r22, r18
    2a02:	a8 01       	movw	r20, r16
    2a04:	ce 01       	movw	r24, r28
    2a06:	c1 96       	adiw	r24, 0x31	; 49
    2a08:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a0c:	00 e0       	ldi	r16, 0x00	; 0
    2a0e:	10 e0       	ldi	r17, 0x00	; 0
    2a10:	98 01       	movw	r18, r16
    2a12:	b9 01       	movw	r22, r18
    2a14:	a8 01       	movw	r20, r16
    2a16:	ce 01       	movw	r24, r28
    2a18:	c9 96       	adiw	r24, 0x39	; 57
    2a1a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a1e:	00 e0       	ldi	r16, 0x00	; 0
    2a20:	10 e0       	ldi	r17, 0x00	; 0
    2a22:	98 01       	movw	r18, r16
    2a24:	b9 01       	movw	r22, r18
    2a26:	a8 01       	movw	r20, r16
    2a28:	ce 01       	movw	r24, r28
    2a2a:	8f 5b       	subi	r24, 0xBF	; 191
    2a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a32:	00 e0       	ldi	r16, 0x00	; 0
    2a34:	10 e0       	ldi	r17, 0x00	; 0
    2a36:	98 01       	movw	r18, r16
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	50 e0       	ldi	r21, 0x00	; 0
    2a3c:	60 e8       	ldi	r22, 0x80	; 128
    2a3e:	7f e3       	ldi	r23, 0x3F	; 63
    2a40:	ce 01       	movw	r24, r28
    2a42:	87 5b       	subi	r24, 0xB7	; 183
    2a44:	9f 4f       	sbci	r25, 0xFF	; 255
    2a46:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a4a:	00 e0       	ldi	r16, 0x00	; 0
    2a4c:	10 e0       	ldi	r17, 0x00	; 0
    2a4e:	98 01       	movw	r18, r16
    2a50:	b9 01       	movw	r22, r18
    2a52:	a8 01       	movw	r20, r16
    2a54:	ce 01       	movw	r24, r28
    2a56:	8f 5a       	subi	r24, 0xAF	; 175
    2a58:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a5e:	00 e0       	ldi	r16, 0x00	; 0
    2a60:	10 e0       	ldi	r17, 0x00	; 0
    2a62:	98 01       	movw	r18, r16
    2a64:	b9 01       	movw	r22, r18
    2a66:	a8 01       	movw	r20, r16
    2a68:	ce 01       	movw	r24, r28
    2a6a:	87 5a       	subi	r24, 0xA7	; 167
    2a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a72:	00 e0       	ldi	r16, 0x00	; 0
    2a74:	10 e0       	ldi	r17, 0x00	; 0
    2a76:	98 01       	movw	r18, r16
    2a78:	b9 01       	movw	r22, r18
    2a7a:	a8 01       	movw	r20, r16
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	8f 59       	subi	r24, 0x9F	; 159
    2a80:	9f 4f       	sbci	r25, 0xFF	; 255
    2a82:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a86:	00 e0       	ldi	r16, 0x00	; 0
    2a88:	10 e0       	ldi	r17, 0x00	; 0
    2a8a:	98 01       	movw	r18, r16
    2a8c:	b9 01       	movw	r22, r18
    2a8e:	a8 01       	movw	r20, r16
    2a90:	ce 01       	movw	r24, r28
    2a92:	87 59       	subi	r24, 0x97	; 151
    2a94:	9f 4f       	sbci	r25, 0xFF	; 255
    2a96:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a9a:	00 e0       	ldi	r16, 0x00	; 0
    2a9c:	10 e0       	ldi	r17, 0x00	; 0
    2a9e:	98 01       	movw	r18, r16
    2aa0:	b9 01       	movw	r22, r18
    2aa2:	a8 01       	movw	r20, r16
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	8f 58       	subi	r24, 0x8F	; 143
    2aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aaa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2aae:	00 e0       	ldi	r16, 0x00	; 0
    2ab0:	10 e0       	ldi	r17, 0x00	; 0
    2ab2:	98 01       	movw	r18, r16
    2ab4:	b9 01       	movw	r22, r18
    2ab6:	a8 01       	movw	r20, r16
    2ab8:	ce 01       	movw	r24, r28
    2aba:	87 58       	subi	r24, 0x87	; 135
    2abc:	9f 4f       	sbci	r25, 0xFF	; 255
    2abe:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2ac2:	00 e0       	ldi	r16, 0x00	; 0
    2ac4:	10 e0       	ldi	r17, 0x00	; 0
    2ac6:	98 01       	movw	r18, r16
    2ac8:	b9 01       	movw	r22, r18
    2aca:	a8 01       	movw	r20, r16
    2acc:	ce 01       	movw	r24, r28
    2ace:	8f 57       	subi	r24, 0x7F	; 127
    2ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2ad6:	00 e0       	ldi	r16, 0x00	; 0
    2ad8:	10 e0       	ldi	r17, 0x00	; 0
    2ada:	98 01       	movw	r18, r16
    2adc:	b9 01       	movw	r22, r18
    2ade:	a8 01       	movw	r20, r16
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	87 57       	subi	r24, 0x77	; 119
    2ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2aea:	00 e0       	ldi	r16, 0x00	; 0
    2aec:	10 e0       	ldi	r17, 0x00	; 0
    2aee:	98 01       	movw	r18, r16
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	60 e8       	ldi	r22, 0x80	; 128
    2af6:	7f e3       	ldi	r23, 0x3F	; 63
    2af8:	ce 01       	movw	r24, r28
    2afa:	8f 56       	subi	r24, 0x6F	; 111
    2afc:	9f 4f       	sbci	r25, 0xFF	; 255
    2afe:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b02:	00 e0       	ldi	r16, 0x00	; 0
    2b04:	10 e0       	ldi	r17, 0x00	; 0
    2b06:	98 01       	movw	r18, r16
    2b08:	b9 01       	movw	r22, r18
    2b0a:	a8 01       	movw	r20, r16
    2b0c:	ce 01       	movw	r24, r28
    2b0e:	87 56       	subi	r24, 0x67	; 103
    2b10:	9f 4f       	sbci	r25, 0xFF	; 255
    2b12:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b16:	00 e0       	ldi	r16, 0x00	; 0
    2b18:	10 e0       	ldi	r17, 0x00	; 0
    2b1a:	98 01       	movw	r18, r16
    2b1c:	b9 01       	movw	r22, r18
    2b1e:	a8 01       	movw	r20, r16
    2b20:	ce 01       	movw	r24, r28
    2b22:	8f 55       	subi	r24, 0x5F	; 95
    2b24:	9f 4f       	sbci	r25, 0xFF	; 255
    2b26:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b2a:	00 e0       	ldi	r16, 0x00	; 0
    2b2c:	10 e0       	ldi	r17, 0x00	; 0
    2b2e:	98 01       	movw	r18, r16
    2b30:	b9 01       	movw	r22, r18
    2b32:	a8 01       	movw	r20, r16
    2b34:	ce 01       	movw	r24, r28
    2b36:	87 55       	subi	r24, 0x57	; 87
    2b38:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b3e:	00 e0       	ldi	r16, 0x00	; 0
    2b40:	10 e0       	ldi	r17, 0x00	; 0
    2b42:	98 01       	movw	r18, r16
    2b44:	b9 01       	movw	r22, r18
    2b46:	a8 01       	movw	r20, r16
    2b48:	ce 01       	movw	r24, r28
    2b4a:	8f 54       	subi	r24, 0x4F	; 79
    2b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b52:	00 e0       	ldi	r16, 0x00	; 0
    2b54:	10 e0       	ldi	r17, 0x00	; 0
    2b56:	98 01       	movw	r18, r16
    2b58:	b9 01       	movw	r22, r18
    2b5a:	a8 01       	movw	r20, r16
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	87 54       	subi	r24, 0x47	; 71
    2b60:	9f 4f       	sbci	r25, 0xFF	; 255
    2b62:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b66:	00 e0       	ldi	r16, 0x00	; 0
    2b68:	10 e0       	ldi	r17, 0x00	; 0
    2b6a:	98 01       	movw	r18, r16
    2b6c:	b9 01       	movw	r22, r18
    2b6e:	a8 01       	movw	r20, r16
    2b70:	ce 01       	movw	r24, r28
    2b72:	8f 53       	subi	r24, 0x3F	; 63
    2b74:	9f 4f       	sbci	r25, 0xFF	; 255
    2b76:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b7a:	00 e0       	ldi	r16, 0x00	; 0
    2b7c:	10 e0       	ldi	r17, 0x00	; 0
    2b7e:	98 01       	movw	r18, r16
    2b80:	b9 01       	movw	r22, r18
    2b82:	a8 01       	movw	r20, r16
    2b84:	ce 01       	movw	r24, r28
    2b86:	87 53       	subi	r24, 0x37	; 55
    2b88:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b8e:	00 e0       	ldi	r16, 0x00	; 0
    2b90:	10 e0       	ldi	r17, 0x00	; 0
    2b92:	98 01       	movw	r18, r16
    2b94:	b9 01       	movw	r22, r18
    2b96:	a8 01       	movw	r20, r16
    2b98:	ce 01       	movw	r24, r28
    2b9a:	8f 52       	subi	r24, 0x2F	; 47
    2b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2ba2:	00 e0       	ldi	r16, 0x00	; 0
    2ba4:	10 e0       	ldi	r17, 0x00	; 0
    2ba6:	98 01       	movw	r18, r16
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	60 e8       	ldi	r22, 0x80	; 128
    2bae:	7f e3       	ldi	r23, 0x3F	; 63
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	87 52       	subi	r24, 0x27	; 39
    2bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2bba:	00 e0       	ldi	r16, 0x00	; 0
    2bbc:	10 e0       	ldi	r17, 0x00	; 0
    2bbe:	98 01       	movw	r18, r16
    2bc0:	b9 01       	movw	r22, r18
    2bc2:	a8 01       	movw	r20, r16
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	8f 51       	subi	r24, 0x1F	; 31
    2bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bca:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2bce:	00 e0       	ldi	r16, 0x00	; 0
    2bd0:	10 e0       	ldi	r17, 0x00	; 0
    2bd2:	98 01       	movw	r18, r16
    2bd4:	b9 01       	movw	r22, r18
    2bd6:	a8 01       	movw	r20, r16
    2bd8:	ce 01       	movw	r24, r28
    2bda:	87 51       	subi	r24, 0x17	; 23
    2bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bde:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2be2:	00 e0       	ldi	r16, 0x00	; 0
    2be4:	10 e0       	ldi	r17, 0x00	; 0
    2be6:	98 01       	movw	r18, r16
    2be8:	b9 01       	movw	r22, r18
    2bea:	a8 01       	movw	r20, r16
    2bec:	ce 01       	movw	r24, r28
    2bee:	8f 50       	subi	r24, 0x0F	; 15
    2bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2bf6:	00 e0       	ldi	r16, 0x00	; 0
    2bf8:	10 e0       	ldi	r17, 0x00	; 0
    2bfa:	98 01       	movw	r18, r16
    2bfc:	b9 01       	movw	r22, r18
    2bfe:	a8 01       	movw	r20, r16
    2c00:	ce 01       	movw	r24, r28
    2c02:	87 50       	subi	r24, 0x07	; 7
    2c04:	9f 4f       	sbci	r25, 0xFF	; 255
    2c06:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c0a:	00 e0       	ldi	r16, 0x00	; 0
    2c0c:	10 e0       	ldi	r17, 0x00	; 0
    2c0e:	98 01       	movw	r18, r16
    2c10:	b9 01       	movw	r22, r18
    2c12:	a8 01       	movw	r20, r16
    2c14:	ce 01       	movw	r24, r28
    2c16:	8f 5f       	subi	r24, 0xFF	; 255
    2c18:	9e 4f       	sbci	r25, 0xFE	; 254
    2c1a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c1e:	00 e0       	ldi	r16, 0x00	; 0
    2c20:	10 e0       	ldi	r17, 0x00	; 0
    2c22:	98 01       	movw	r18, r16
    2c24:	b9 01       	movw	r22, r18
    2c26:	a8 01       	movw	r20, r16
    2c28:	ce 01       	movw	r24, r28
    2c2a:	87 5f       	subi	r24, 0xF7	; 247
    2c2c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c2e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c32:	00 e0       	ldi	r16, 0x00	; 0
    2c34:	10 e0       	ldi	r17, 0x00	; 0
    2c36:	98 01       	movw	r18, r16
    2c38:	b9 01       	movw	r22, r18
    2c3a:	a8 01       	movw	r20, r16
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	8f 5e       	subi	r24, 0xEF	; 239
    2c40:	9e 4f       	sbci	r25, 0xFE	; 254
    2c42:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c46:	00 e0       	ldi	r16, 0x00	; 0
    2c48:	10 e0       	ldi	r17, 0x00	; 0
    2c4a:	98 01       	movw	r18, r16
    2c4c:	b9 01       	movw	r22, r18
    2c4e:	a8 01       	movw	r20, r16
    2c50:	ce 01       	movw	r24, r28
    2c52:	87 5e       	subi	r24, 0xE7	; 231
    2c54:	9e 4f       	sbci	r25, 0xFE	; 254
    2c56:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c5a:	00 e0       	ldi	r16, 0x00	; 0
    2c5c:	10 e0       	ldi	r17, 0x00	; 0
    2c5e:	98 01       	movw	r18, r16
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	60 e8       	ldi	r22, 0x80	; 128
    2c66:	7f e3       	ldi	r23, 0x3F	; 63
    2c68:	ce 01       	movw	r24, r28
    2c6a:	8f 5d       	subi	r24, 0xDF	; 223
    2c6c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c6e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c72:	00 e0       	ldi	r16, 0x00	; 0
    2c74:	10 e0       	ldi	r17, 0x00	; 0
    2c76:	98 01       	movw	r18, r16
    2c78:	b9 01       	movw	r22, r18
    2c7a:	a8 01       	movw	r20, r16
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	87 5d       	subi	r24, 0xD7	; 215
    2c80:	9e 4f       	sbci	r25, 0xFE	; 254
    2c82:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c86:	00 e0       	ldi	r16, 0x00	; 0
    2c88:	10 e0       	ldi	r17, 0x00	; 0
    2c8a:	98 01       	movw	r18, r16
    2c8c:	b9 01       	movw	r22, r18
    2c8e:	a8 01       	movw	r20, r16
    2c90:	ce 01       	movw	r24, r28
    2c92:	8f 5c       	subi	r24, 0xCF	; 207
    2c94:	9e 4f       	sbci	r25, 0xFE	; 254
    2c96:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c9a:	00 e0       	ldi	r16, 0x00	; 0
    2c9c:	10 e0       	ldi	r17, 0x00	; 0
    2c9e:	98 01       	movw	r18, r16
    2ca0:	b9 01       	movw	r22, r18
    2ca2:	a8 01       	movw	r20, r16
    2ca4:	ce 01       	movw	r24, r28
    2ca6:	87 5c       	subi	r24, 0xC7	; 199
    2ca8:	9e 4f       	sbci	r25, 0xFE	; 254
    2caa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2cae:	00 e0       	ldi	r16, 0x00	; 0
    2cb0:	10 e0       	ldi	r17, 0x00	; 0
    2cb2:	98 01       	movw	r18, r16
    2cb4:	b9 01       	movw	r22, r18
    2cb6:	a8 01       	movw	r20, r16
    2cb8:	ce 01       	movw	r24, r28
    2cba:	8f 5b       	subi	r24, 0xBF	; 191
    2cbc:	9e 4f       	sbci	r25, 0xFE	; 254
    2cbe:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2cc2:	00 e0       	ldi	r16, 0x00	; 0
    2cc4:	10 e0       	ldi	r17, 0x00	; 0
    2cc6:	98 01       	movw	r18, r16
    2cc8:	b9 01       	movw	r22, r18
    2cca:	a8 01       	movw	r20, r16
    2ccc:	ce 01       	movw	r24, r28
    2cce:	87 5b       	subi	r24, 0xB7	; 183
    2cd0:	9e 4f       	sbci	r25, 0xFE	; 254
    2cd2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2cd6:	00 e0       	ldi	r16, 0x00	; 0
    2cd8:	10 e0       	ldi	r17, 0x00	; 0
    2cda:	98 01       	movw	r18, r16
    2cdc:	b9 01       	movw	r22, r18
    2cde:	a8 01       	movw	r20, r16
    2ce0:	ce 01       	movw	r24, r28
    2ce2:	8f 5a       	subi	r24, 0xAF	; 175
    2ce4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ce6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2cea:	00 e0       	ldi	r16, 0x00	; 0
    2cec:	10 e0       	ldi	r17, 0x00	; 0
    2cee:	98 01       	movw	r18, r16
    2cf0:	b9 01       	movw	r22, r18
    2cf2:	a8 01       	movw	r20, r16
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	87 5a       	subi	r24, 0xA7	; 167
    2cf8:	9e 4f       	sbci	r25, 0xFE	; 254
    2cfa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2cfe:	00 e0       	ldi	r16, 0x00	; 0
    2d00:	10 e0       	ldi	r17, 0x00	; 0
    2d02:	98 01       	movw	r18, r16
    2d04:	b9 01       	movw	r22, r18
    2d06:	a8 01       	movw	r20, r16
    2d08:	ce 01       	movw	r24, r28
    2d0a:	8f 59       	subi	r24, 0x9F	; 159
    2d0c:	9e 4f       	sbci	r25, 0xFE	; 254
    2d0e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d12:	00 e0       	ldi	r16, 0x00	; 0
    2d14:	10 e0       	ldi	r17, 0x00	; 0
    2d16:	98 01       	movw	r18, r16
    2d18:	b9 01       	movw	r22, r18
    2d1a:	a8 01       	movw	r20, r16
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	87 59       	subi	r24, 0x97	; 151
    2d20:	9e 4f       	sbci	r25, 0xFE	; 254
    2d22:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d26:	00 e0       	ldi	r16, 0x00	; 0
    2d28:	10 e0       	ldi	r17, 0x00	; 0
    2d2a:	98 01       	movw	r18, r16
    2d2c:	40 e0       	ldi	r20, 0x00	; 0
    2d2e:	50 e0       	ldi	r21, 0x00	; 0
    2d30:	60 e8       	ldi	r22, 0x80	; 128
    2d32:	7f e3       	ldi	r23, 0x3F	; 63
    2d34:	ce 01       	movw	r24, r28
    2d36:	8f 58       	subi	r24, 0x8F	; 143
    2d38:	9e 4f       	sbci	r25, 0xFE	; 254
    2d3a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d3e:	00 e0       	ldi	r16, 0x00	; 0
    2d40:	10 e0       	ldi	r17, 0x00	; 0
    2d42:	98 01       	movw	r18, r16
    2d44:	b9 01       	movw	r22, r18
    2d46:	a8 01       	movw	r20, r16
    2d48:	ce 01       	movw	r24, r28
    2d4a:	87 58       	subi	r24, 0x87	; 135
    2d4c:	9e 4f       	sbci	r25, 0xFE	; 254
    2d4e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d52:	00 e0       	ldi	r16, 0x00	; 0
    2d54:	10 e0       	ldi	r17, 0x00	; 0
    2d56:	98 01       	movw	r18, r16
    2d58:	b9 01       	movw	r22, r18
    2d5a:	a8 01       	movw	r20, r16
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	8f 57       	subi	r24, 0x7F	; 127
    2d60:	9e 4f       	sbci	r25, 0xFE	; 254
    2d62:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d66:	00 e0       	ldi	r16, 0x00	; 0
    2d68:	10 e0       	ldi	r17, 0x00	; 0
    2d6a:	98 01       	movw	r18, r16
    2d6c:	b9 01       	movw	r22, r18
    2d6e:	a8 01       	movw	r20, r16
    2d70:	ce 01       	movw	r24, r28
    2d72:	87 57       	subi	r24, 0x77	; 119
    2d74:	9e 4f       	sbci	r25, 0xFE	; 254
    2d76:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d7a:	00 e0       	ldi	r16, 0x00	; 0
    2d7c:	10 e0       	ldi	r17, 0x00	; 0
    2d7e:	98 01       	movw	r18, r16
    2d80:	b9 01       	movw	r22, r18
    2d82:	a8 01       	movw	r20, r16
    2d84:	ce 01       	movw	r24, r28
    2d86:	8f 56       	subi	r24, 0x6F	; 111
    2d88:	9e 4f       	sbci	r25, 0xFE	; 254
    2d8a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d8e:	00 e0       	ldi	r16, 0x00	; 0
    2d90:	10 e0       	ldi	r17, 0x00	; 0
    2d92:	98 01       	movw	r18, r16
    2d94:	b9 01       	movw	r22, r18
    2d96:	a8 01       	movw	r20, r16
    2d98:	ce 01       	movw	r24, r28
    2d9a:	87 56       	subi	r24, 0x67	; 103
    2d9c:	9e 4f       	sbci	r25, 0xFE	; 254
    2d9e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2da2:	00 e0       	ldi	r16, 0x00	; 0
    2da4:	10 e0       	ldi	r17, 0x00	; 0
    2da6:	98 01       	movw	r18, r16
    2da8:	b9 01       	movw	r22, r18
    2daa:	a8 01       	movw	r20, r16
    2dac:	ce 01       	movw	r24, r28
    2dae:	8f 55       	subi	r24, 0x5F	; 95
    2db0:	9e 4f       	sbci	r25, 0xFE	; 254
    2db2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2db6:	00 e0       	ldi	r16, 0x00	; 0
    2db8:	10 e0       	ldi	r17, 0x00	; 0
    2dba:	98 01       	movw	r18, r16
    2dbc:	40 e0       	ldi	r20, 0x00	; 0
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	60 e8       	ldi	r22, 0x80	; 128
    2dc2:	7f e3       	ldi	r23, 0x3F	; 63
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	87 55       	subi	r24, 0x57	; 87
    2dc8:	9e 4f       	sbci	r25, 0xFE	; 254
    2dca:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2dce:	00 e0       	ldi	r16, 0x00	; 0
    2dd0:	10 e0       	ldi	r17, 0x00	; 0
    2dd2:	98 01       	movw	r18, r16
    2dd4:	b9 01       	movw	r22, r18
    2dd6:	a8 01       	movw	r20, r16
    2dd8:	ce 01       	movw	r24, r28
    2dda:	8f 54       	subi	r24, 0x4F	; 79
    2ddc:	9e 4f       	sbci	r25, 0xFE	; 254
    2dde:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2de2:	00 e0       	ldi	r16, 0x00	; 0
    2de4:	10 e0       	ldi	r17, 0x00	; 0
    2de6:	98 01       	movw	r18, r16
    2de8:	b9 01       	movw	r22, r18
    2dea:	a8 01       	movw	r20, r16
    2dec:	ce 01       	movw	r24, r28
    2dee:	87 54       	subi	r24, 0x47	; 71
    2df0:	9e 4f       	sbci	r25, 0xFE	; 254
    2df2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2df6:	00 e0       	ldi	r16, 0x00	; 0
    2df8:	10 e0       	ldi	r17, 0x00	; 0
    2dfa:	98 01       	movw	r18, r16
    2dfc:	b9 01       	movw	r22, r18
    2dfe:	a8 01       	movw	r20, r16
    2e00:	ce 01       	movw	r24, r28
    2e02:	8f 53       	subi	r24, 0x3F	; 63
    2e04:	9e 4f       	sbci	r25, 0xFE	; 254
    2e06:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e0a:	00 e0       	ldi	r16, 0x00	; 0
    2e0c:	10 e0       	ldi	r17, 0x00	; 0
    2e0e:	98 01       	movw	r18, r16
    2e10:	b9 01       	movw	r22, r18
    2e12:	a8 01       	movw	r20, r16
    2e14:	ce 01       	movw	r24, r28
    2e16:	87 53       	subi	r24, 0x37	; 55
    2e18:	9e 4f       	sbci	r25, 0xFE	; 254
    2e1a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e1e:	00 e0       	ldi	r16, 0x00	; 0
    2e20:	10 e0       	ldi	r17, 0x00	; 0
    2e22:	98 01       	movw	r18, r16
    2e24:	b9 01       	movw	r22, r18
    2e26:	a8 01       	movw	r20, r16
    2e28:	ce 01       	movw	r24, r28
    2e2a:	8f 52       	subi	r24, 0x2F	; 47
    2e2c:	9e 4f       	sbci	r25, 0xFE	; 254
    2e2e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e32:	00 e0       	ldi	r16, 0x00	; 0
    2e34:	10 e0       	ldi	r17, 0x00	; 0
    2e36:	98 01       	movw	r18, r16
    2e38:	b9 01       	movw	r22, r18
    2e3a:	a8 01       	movw	r20, r16
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	87 52       	subi	r24, 0x27	; 39
    2e40:	9e 4f       	sbci	r25, 0xFE	; 254
    2e42:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e46:	00 e0       	ldi	r16, 0x00	; 0
    2e48:	10 e0       	ldi	r17, 0x00	; 0
    2e4a:	98 01       	movw	r18, r16
    2e4c:	b9 01       	movw	r22, r18
    2e4e:	a8 01       	movw	r20, r16
    2e50:	ce 01       	movw	r24, r28
    2e52:	8f 51       	subi	r24, 0x1F	; 31
    2e54:	9e 4f       	sbci	r25, 0xFE	; 254
    2e56:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e5a:	00 e0       	ldi	r16, 0x00	; 0
    2e5c:	10 e0       	ldi	r17, 0x00	; 0
    2e5e:	98 01       	movw	r18, r16
    2e60:	b9 01       	movw	r22, r18
    2e62:	a8 01       	movw	r20, r16
    2e64:	ce 01       	movw	r24, r28
    2e66:	87 51       	subi	r24, 0x17	; 23
    2e68:	9e 4f       	sbci	r25, 0xFE	; 254
    2e6a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e6e:	00 e0       	ldi	r16, 0x00	; 0
    2e70:	10 e0       	ldi	r17, 0x00	; 0
    2e72:	98 01       	movw	r18, r16
    2e74:	b9 01       	movw	r22, r18
    2e76:	a8 01       	movw	r20, r16
    2e78:	ce 01       	movw	r24, r28
    2e7a:	8f 50       	subi	r24, 0x0F	; 15
    2e7c:	9e 4f       	sbci	r25, 0xFE	; 254
    2e7e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e82:	00 e0       	ldi	r16, 0x00	; 0
    2e84:	10 e0       	ldi	r17, 0x00	; 0
    2e86:	98 01       	movw	r18, r16
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	60 e8       	ldi	r22, 0x80	; 128
    2e8e:	7f e3       	ldi	r23, 0x3F	; 63
    2e90:	ce 01       	movw	r24, r28
    2e92:	87 50       	subi	r24, 0x07	; 7
    2e94:	9e 4f       	sbci	r25, 0xFE	; 254
    2e96:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    2e9a:	c9 5f       	subi	r28, 0xF9	; 249
    2e9c:	dd 4f       	sbci	r29, 0xFD	; 253
    2e9e:	79 82       	std	Y+1, r7	; 0x01
    2ea0:	68 82       	st	Y, r6
    2ea2:	c7 50       	subi	r28, 0x07	; 7
    2ea4:	d2 40       	sbci	r29, 0x02	; 2
    2ea6:	c7 5f       	subi	r28, 0xF7	; 247
    2ea8:	dd 4f       	sbci	r29, 0xFD	; 253
    2eaa:	99 82       	std	Y+1, r9	; 0x01
    2eac:	88 82       	st	Y, r8
    2eae:	c9 50       	subi	r28, 0x09	; 9
    2eb0:	d2 40       	sbci	r29, 0x02	; 2
    2eb2:	c5 5f       	subi	r28, 0xF5	; 245
    2eb4:	dd 4f       	sbci	r29, 0xFD	; 253
    2eb6:	f9 82       	std	Y+1, r15	; 0x01
    2eb8:	e8 82       	st	Y, r14
    2eba:	cb 50       	subi	r28, 0x0B	; 11
    2ebc:	d2 40       	sbci	r29, 0x02	; 2
    2ebe:	cf 5f       	subi	r28, 0xFF	; 255
    2ec0:	dd 4f       	sbci	r29, 0xFD	; 253
    2ec2:	59 82       	std	Y+1, r5	; 0x01
    2ec4:	48 82       	st	Y, r4
    2ec6:	c1 50       	subi	r28, 0x01	; 1
    2ec8:	d2 40       	sbci	r29, 0x02	; 2
    2eca:	cd 5f       	subi	r28, 0xFD	; 253
    2ecc:	dd 4f       	sbci	r29, 0xFD	; 253
    2ece:	39 82       	std	Y+1, r3	; 0x01
    2ed0:	28 82       	st	Y, r2
    2ed2:	c3 50       	subi	r28, 0x03	; 3
    2ed4:	d2 40       	sbci	r29, 0x02	; 2
    2ed6:	cb 5f       	subi	r28, 0xFB	; 251
    2ed8:	dd 4f       	sbci	r29, 0xFD	; 253
    2eda:	d9 82       	std	Y+1, r13	; 0x01
    2edc:	c8 82       	st	Y, r12
    2ede:	c5 50       	subi	r28, 0x05	; 5
    2ee0:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),csw_matrix),QB_SIZE3);
    2ee2:	9e 01       	movw	r18, r28
    2ee4:	2f 5f       	subi	r18, 0xFF	; 255
    2ee6:	3d 4f       	sbci	r19, 0xFD	; 253
    2ee8:	ae 01       	movw	r20, r28
    2eea:	49 5f       	subi	r20, 0xF9	; 249
    2eec:	5d 4f       	sbci	r21, 0xFD	; 253
    2eee:	63 e0       	ldi	r22, 0x03	; 3
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	c5 01       	movw	r24, r10
    2ef4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    2ef8:	ae 01       	movw	r20, r28
    2efa:	4f 5f       	subi	r20, 0xFF	; 255
    2efc:	5f 4f       	sbci	r21, 0xFF	; 255
    2efe:	bc 01       	movw	r22, r24
    2f00:	c5 01       	movw	r24, r10
    2f02:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    2f06:	43 e0       	ldi	r20, 0x03	; 3
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	c5 01       	movw	r24, r10
    2f0e:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    2f12:	c4 5f       	subi	r28, 0xF4	; 244
    2f14:	dd 4f       	sbci	r29, 0xFD	; 253
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	ff 90       	pop	r15
    2f2a:	ef 90       	pop	r14
    2f2c:	df 90       	pop	r13
    2f2e:	cf 90       	pop	r12
    2f30:	bf 90       	pop	r11
    2f32:	af 90       	pop	r10
    2f34:	9f 90       	pop	r9
    2f36:	8f 90       	pop	r8
    2f38:	7f 90       	pop	r7
    2f3a:	6f 90       	pop	r6
    2f3c:	5f 90       	pop	r5
    2f3e:	4f 90       	pop	r4
    2f40:	3f 90       	pop	r3
    2f42:	2f 90       	pop	r2
    2f44:	08 95       	ret

00002f46 <_ZN5Gates3TOFEiiiiii>:
int * Gates::TOF(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3){
    2f46:	2f 92       	push	r2
    2f48:	3f 92       	push	r3
    2f4a:	4f 92       	push	r4
    2f4c:	5f 92       	push	r5
    2f4e:	6f 92       	push	r6
    2f50:	7f 92       	push	r7
    2f52:	8f 92       	push	r8
    2f54:	9f 92       	push	r9
    2f56:	af 92       	push	r10
    2f58:	bf 92       	push	r11
    2f5a:	cf 92       	push	r12
    2f5c:	df 92       	push	r13
    2f5e:	ef 92       	push	r14
    2f60:	ff 92       	push	r15
    2f62:	0f 93       	push	r16
    2f64:	1f 93       	push	r17
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	cc 50       	subi	r28, 0x0C	; 12
    2f70:	d2 40       	sbci	r29, 0x02	; 2
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	5c 01       	movw	r10, r24
    2f7e:	3b 01       	movw	r6, r22
    2f80:	2a 01       	movw	r4, r20
    2f82:	49 01       	movw	r8, r18
    2f84:	18 01       	movw	r2, r16
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    2f86:	00 e0       	ldi	r16, 0x00	; 0
    2f88:	10 e0       	ldi	r17, 0x00	; 0
    2f8a:	98 01       	movw	r18, r16
    2f8c:	40 e0       	ldi	r20, 0x00	; 0
    2f8e:	50 e0       	ldi	r21, 0x00	; 0
    2f90:	60 e8       	ldi	r22, 0x80	; 128
    2f92:	7f e3       	ldi	r23, 0x3F	; 63
    2f94:	ce 01       	movw	r24, r28
    2f96:	01 96       	adiw	r24, 0x01	; 1
    2f98:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2f9c:	00 e0       	ldi	r16, 0x00	; 0
    2f9e:	10 e0       	ldi	r17, 0x00	; 0
    2fa0:	98 01       	movw	r18, r16
    2fa2:	b9 01       	movw	r22, r18
    2fa4:	a8 01       	movw	r20, r16
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	09 96       	adiw	r24, 0x09	; 9
    2faa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2fae:	00 e0       	ldi	r16, 0x00	; 0
    2fb0:	10 e0       	ldi	r17, 0x00	; 0
    2fb2:	98 01       	movw	r18, r16
    2fb4:	b9 01       	movw	r22, r18
    2fb6:	a8 01       	movw	r20, r16
    2fb8:	ce 01       	movw	r24, r28
    2fba:	41 96       	adiw	r24, 0x11	; 17
    2fbc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2fc0:	00 e0       	ldi	r16, 0x00	; 0
    2fc2:	10 e0       	ldi	r17, 0x00	; 0
    2fc4:	98 01       	movw	r18, r16
    2fc6:	b9 01       	movw	r22, r18
    2fc8:	a8 01       	movw	r20, r16
    2fca:	ce 01       	movw	r24, r28
    2fcc:	49 96       	adiw	r24, 0x19	; 25
    2fce:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2fd2:	00 e0       	ldi	r16, 0x00	; 0
    2fd4:	10 e0       	ldi	r17, 0x00	; 0
    2fd6:	98 01       	movw	r18, r16
    2fd8:	b9 01       	movw	r22, r18
    2fda:	a8 01       	movw	r20, r16
    2fdc:	ce 01       	movw	r24, r28
    2fde:	81 96       	adiw	r24, 0x21	; 33
    2fe0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2fe4:	00 e0       	ldi	r16, 0x00	; 0
    2fe6:	10 e0       	ldi	r17, 0x00	; 0
    2fe8:	98 01       	movw	r18, r16
    2fea:	b9 01       	movw	r22, r18
    2fec:	a8 01       	movw	r20, r16
    2fee:	ce 01       	movw	r24, r28
    2ff0:	89 96       	adiw	r24, 0x29	; 41
    2ff2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2ff6:	00 e0       	ldi	r16, 0x00	; 0
    2ff8:	10 e0       	ldi	r17, 0x00	; 0
    2ffa:	98 01       	movw	r18, r16
    2ffc:	b9 01       	movw	r22, r18
    2ffe:	a8 01       	movw	r20, r16
    3000:	ce 01       	movw	r24, r28
    3002:	c1 96       	adiw	r24, 0x31	; 49
    3004:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3008:	00 e0       	ldi	r16, 0x00	; 0
    300a:	10 e0       	ldi	r17, 0x00	; 0
    300c:	98 01       	movw	r18, r16
    300e:	b9 01       	movw	r22, r18
    3010:	a8 01       	movw	r20, r16
    3012:	ce 01       	movw	r24, r28
    3014:	c9 96       	adiw	r24, 0x39	; 57
    3016:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    301a:	00 e0       	ldi	r16, 0x00	; 0
    301c:	10 e0       	ldi	r17, 0x00	; 0
    301e:	98 01       	movw	r18, r16
    3020:	b9 01       	movw	r22, r18
    3022:	a8 01       	movw	r20, r16
    3024:	ce 01       	movw	r24, r28
    3026:	8f 5b       	subi	r24, 0xBF	; 191
    3028:	9f 4f       	sbci	r25, 0xFF	; 255
    302a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    302e:	00 e0       	ldi	r16, 0x00	; 0
    3030:	10 e0       	ldi	r17, 0x00	; 0
    3032:	98 01       	movw	r18, r16
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	50 e0       	ldi	r21, 0x00	; 0
    3038:	60 e8       	ldi	r22, 0x80	; 128
    303a:	7f e3       	ldi	r23, 0x3F	; 63
    303c:	ce 01       	movw	r24, r28
    303e:	87 5b       	subi	r24, 0xB7	; 183
    3040:	9f 4f       	sbci	r25, 0xFF	; 255
    3042:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3046:	00 e0       	ldi	r16, 0x00	; 0
    3048:	10 e0       	ldi	r17, 0x00	; 0
    304a:	98 01       	movw	r18, r16
    304c:	b9 01       	movw	r22, r18
    304e:	a8 01       	movw	r20, r16
    3050:	ce 01       	movw	r24, r28
    3052:	8f 5a       	subi	r24, 0xAF	; 175
    3054:	9f 4f       	sbci	r25, 0xFF	; 255
    3056:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    305a:	00 e0       	ldi	r16, 0x00	; 0
    305c:	10 e0       	ldi	r17, 0x00	; 0
    305e:	98 01       	movw	r18, r16
    3060:	b9 01       	movw	r22, r18
    3062:	a8 01       	movw	r20, r16
    3064:	ce 01       	movw	r24, r28
    3066:	87 5a       	subi	r24, 0xA7	; 167
    3068:	9f 4f       	sbci	r25, 0xFF	; 255
    306a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    306e:	00 e0       	ldi	r16, 0x00	; 0
    3070:	10 e0       	ldi	r17, 0x00	; 0
    3072:	98 01       	movw	r18, r16
    3074:	b9 01       	movw	r22, r18
    3076:	a8 01       	movw	r20, r16
    3078:	ce 01       	movw	r24, r28
    307a:	8f 59       	subi	r24, 0x9F	; 159
    307c:	9f 4f       	sbci	r25, 0xFF	; 255
    307e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3082:	00 e0       	ldi	r16, 0x00	; 0
    3084:	10 e0       	ldi	r17, 0x00	; 0
    3086:	98 01       	movw	r18, r16
    3088:	b9 01       	movw	r22, r18
    308a:	a8 01       	movw	r20, r16
    308c:	ce 01       	movw	r24, r28
    308e:	87 59       	subi	r24, 0x97	; 151
    3090:	9f 4f       	sbci	r25, 0xFF	; 255
    3092:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3096:	00 e0       	ldi	r16, 0x00	; 0
    3098:	10 e0       	ldi	r17, 0x00	; 0
    309a:	98 01       	movw	r18, r16
    309c:	b9 01       	movw	r22, r18
    309e:	a8 01       	movw	r20, r16
    30a0:	ce 01       	movw	r24, r28
    30a2:	8f 58       	subi	r24, 0x8F	; 143
    30a4:	9f 4f       	sbci	r25, 0xFF	; 255
    30a6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    30aa:	00 e0       	ldi	r16, 0x00	; 0
    30ac:	10 e0       	ldi	r17, 0x00	; 0
    30ae:	98 01       	movw	r18, r16
    30b0:	b9 01       	movw	r22, r18
    30b2:	a8 01       	movw	r20, r16
    30b4:	ce 01       	movw	r24, r28
    30b6:	87 58       	subi	r24, 0x87	; 135
    30b8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ba:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    30be:	00 e0       	ldi	r16, 0x00	; 0
    30c0:	10 e0       	ldi	r17, 0x00	; 0
    30c2:	98 01       	movw	r18, r16
    30c4:	b9 01       	movw	r22, r18
    30c6:	a8 01       	movw	r20, r16
    30c8:	ce 01       	movw	r24, r28
    30ca:	8f 57       	subi	r24, 0x7F	; 127
    30cc:	9f 4f       	sbci	r25, 0xFF	; 255
    30ce:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    30d2:	00 e0       	ldi	r16, 0x00	; 0
    30d4:	10 e0       	ldi	r17, 0x00	; 0
    30d6:	98 01       	movw	r18, r16
    30d8:	b9 01       	movw	r22, r18
    30da:	a8 01       	movw	r20, r16
    30dc:	ce 01       	movw	r24, r28
    30de:	87 57       	subi	r24, 0x77	; 119
    30e0:	9f 4f       	sbci	r25, 0xFF	; 255
    30e2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    30e6:	00 e0       	ldi	r16, 0x00	; 0
    30e8:	10 e0       	ldi	r17, 0x00	; 0
    30ea:	98 01       	movw	r18, r16
    30ec:	40 e0       	ldi	r20, 0x00	; 0
    30ee:	50 e0       	ldi	r21, 0x00	; 0
    30f0:	60 e8       	ldi	r22, 0x80	; 128
    30f2:	7f e3       	ldi	r23, 0x3F	; 63
    30f4:	ce 01       	movw	r24, r28
    30f6:	8f 56       	subi	r24, 0x6F	; 111
    30f8:	9f 4f       	sbci	r25, 0xFF	; 255
    30fa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    30fe:	00 e0       	ldi	r16, 0x00	; 0
    3100:	10 e0       	ldi	r17, 0x00	; 0
    3102:	98 01       	movw	r18, r16
    3104:	b9 01       	movw	r22, r18
    3106:	a8 01       	movw	r20, r16
    3108:	ce 01       	movw	r24, r28
    310a:	87 56       	subi	r24, 0x67	; 103
    310c:	9f 4f       	sbci	r25, 0xFF	; 255
    310e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3112:	00 e0       	ldi	r16, 0x00	; 0
    3114:	10 e0       	ldi	r17, 0x00	; 0
    3116:	98 01       	movw	r18, r16
    3118:	b9 01       	movw	r22, r18
    311a:	a8 01       	movw	r20, r16
    311c:	ce 01       	movw	r24, r28
    311e:	8f 55       	subi	r24, 0x5F	; 95
    3120:	9f 4f       	sbci	r25, 0xFF	; 255
    3122:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3126:	00 e0       	ldi	r16, 0x00	; 0
    3128:	10 e0       	ldi	r17, 0x00	; 0
    312a:	98 01       	movw	r18, r16
    312c:	b9 01       	movw	r22, r18
    312e:	a8 01       	movw	r20, r16
    3130:	ce 01       	movw	r24, r28
    3132:	87 55       	subi	r24, 0x57	; 87
    3134:	9f 4f       	sbci	r25, 0xFF	; 255
    3136:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    313a:	00 e0       	ldi	r16, 0x00	; 0
    313c:	10 e0       	ldi	r17, 0x00	; 0
    313e:	98 01       	movw	r18, r16
    3140:	b9 01       	movw	r22, r18
    3142:	a8 01       	movw	r20, r16
    3144:	ce 01       	movw	r24, r28
    3146:	8f 54       	subi	r24, 0x4F	; 79
    3148:	9f 4f       	sbci	r25, 0xFF	; 255
    314a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    314e:	00 e0       	ldi	r16, 0x00	; 0
    3150:	10 e0       	ldi	r17, 0x00	; 0
    3152:	98 01       	movw	r18, r16
    3154:	b9 01       	movw	r22, r18
    3156:	a8 01       	movw	r20, r16
    3158:	ce 01       	movw	r24, r28
    315a:	87 54       	subi	r24, 0x47	; 71
    315c:	9f 4f       	sbci	r25, 0xFF	; 255
    315e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3162:	00 e0       	ldi	r16, 0x00	; 0
    3164:	10 e0       	ldi	r17, 0x00	; 0
    3166:	98 01       	movw	r18, r16
    3168:	b9 01       	movw	r22, r18
    316a:	a8 01       	movw	r20, r16
    316c:	ce 01       	movw	r24, r28
    316e:	8f 53       	subi	r24, 0x3F	; 63
    3170:	9f 4f       	sbci	r25, 0xFF	; 255
    3172:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3176:	00 e0       	ldi	r16, 0x00	; 0
    3178:	10 e0       	ldi	r17, 0x00	; 0
    317a:	98 01       	movw	r18, r16
    317c:	b9 01       	movw	r22, r18
    317e:	a8 01       	movw	r20, r16
    3180:	ce 01       	movw	r24, r28
    3182:	87 53       	subi	r24, 0x37	; 55
    3184:	9f 4f       	sbci	r25, 0xFF	; 255
    3186:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    318a:	00 e0       	ldi	r16, 0x00	; 0
    318c:	10 e0       	ldi	r17, 0x00	; 0
    318e:	98 01       	movw	r18, r16
    3190:	b9 01       	movw	r22, r18
    3192:	a8 01       	movw	r20, r16
    3194:	ce 01       	movw	r24, r28
    3196:	8f 52       	subi	r24, 0x2F	; 47
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    319e:	00 e0       	ldi	r16, 0x00	; 0
    31a0:	10 e0       	ldi	r17, 0x00	; 0
    31a2:	98 01       	movw	r18, r16
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	50 e0       	ldi	r21, 0x00	; 0
    31a8:	60 e8       	ldi	r22, 0x80	; 128
    31aa:	7f e3       	ldi	r23, 0x3F	; 63
    31ac:	ce 01       	movw	r24, r28
    31ae:	87 52       	subi	r24, 0x27	; 39
    31b0:	9f 4f       	sbci	r25, 0xFF	; 255
    31b2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    31b6:	00 e0       	ldi	r16, 0x00	; 0
    31b8:	10 e0       	ldi	r17, 0x00	; 0
    31ba:	98 01       	movw	r18, r16
    31bc:	b9 01       	movw	r22, r18
    31be:	a8 01       	movw	r20, r16
    31c0:	ce 01       	movw	r24, r28
    31c2:	8f 51       	subi	r24, 0x1F	; 31
    31c4:	9f 4f       	sbci	r25, 0xFF	; 255
    31c6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    31ca:	00 e0       	ldi	r16, 0x00	; 0
    31cc:	10 e0       	ldi	r17, 0x00	; 0
    31ce:	98 01       	movw	r18, r16
    31d0:	b9 01       	movw	r22, r18
    31d2:	a8 01       	movw	r20, r16
    31d4:	ce 01       	movw	r24, r28
    31d6:	87 51       	subi	r24, 0x17	; 23
    31d8:	9f 4f       	sbci	r25, 0xFF	; 255
    31da:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    31de:	00 e0       	ldi	r16, 0x00	; 0
    31e0:	10 e0       	ldi	r17, 0x00	; 0
    31e2:	98 01       	movw	r18, r16
    31e4:	b9 01       	movw	r22, r18
    31e6:	a8 01       	movw	r20, r16
    31e8:	ce 01       	movw	r24, r28
    31ea:	8f 50       	subi	r24, 0x0F	; 15
    31ec:	9f 4f       	sbci	r25, 0xFF	; 255
    31ee:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    31f2:	00 e0       	ldi	r16, 0x00	; 0
    31f4:	10 e0       	ldi	r17, 0x00	; 0
    31f6:	98 01       	movw	r18, r16
    31f8:	b9 01       	movw	r22, r18
    31fa:	a8 01       	movw	r20, r16
    31fc:	ce 01       	movw	r24, r28
    31fe:	87 50       	subi	r24, 0x07	; 7
    3200:	9f 4f       	sbci	r25, 0xFF	; 255
    3202:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3206:	00 e0       	ldi	r16, 0x00	; 0
    3208:	10 e0       	ldi	r17, 0x00	; 0
    320a:	98 01       	movw	r18, r16
    320c:	b9 01       	movw	r22, r18
    320e:	a8 01       	movw	r20, r16
    3210:	ce 01       	movw	r24, r28
    3212:	8f 5f       	subi	r24, 0xFF	; 255
    3214:	9e 4f       	sbci	r25, 0xFE	; 254
    3216:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    321a:	00 e0       	ldi	r16, 0x00	; 0
    321c:	10 e0       	ldi	r17, 0x00	; 0
    321e:	98 01       	movw	r18, r16
    3220:	b9 01       	movw	r22, r18
    3222:	a8 01       	movw	r20, r16
    3224:	ce 01       	movw	r24, r28
    3226:	87 5f       	subi	r24, 0xF7	; 247
    3228:	9e 4f       	sbci	r25, 0xFE	; 254
    322a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    322e:	00 e0       	ldi	r16, 0x00	; 0
    3230:	10 e0       	ldi	r17, 0x00	; 0
    3232:	98 01       	movw	r18, r16
    3234:	b9 01       	movw	r22, r18
    3236:	a8 01       	movw	r20, r16
    3238:	ce 01       	movw	r24, r28
    323a:	8f 5e       	subi	r24, 0xEF	; 239
    323c:	9e 4f       	sbci	r25, 0xFE	; 254
    323e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3242:	00 e0       	ldi	r16, 0x00	; 0
    3244:	10 e0       	ldi	r17, 0x00	; 0
    3246:	98 01       	movw	r18, r16
    3248:	b9 01       	movw	r22, r18
    324a:	a8 01       	movw	r20, r16
    324c:	ce 01       	movw	r24, r28
    324e:	87 5e       	subi	r24, 0xE7	; 231
    3250:	9e 4f       	sbci	r25, 0xFE	; 254
    3252:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3256:	00 e0       	ldi	r16, 0x00	; 0
    3258:	10 e0       	ldi	r17, 0x00	; 0
    325a:	98 01       	movw	r18, r16
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	60 e8       	ldi	r22, 0x80	; 128
    3262:	7f e3       	ldi	r23, 0x3F	; 63
    3264:	ce 01       	movw	r24, r28
    3266:	8f 5d       	subi	r24, 0xDF	; 223
    3268:	9e 4f       	sbci	r25, 0xFE	; 254
    326a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    326e:	00 e0       	ldi	r16, 0x00	; 0
    3270:	10 e0       	ldi	r17, 0x00	; 0
    3272:	98 01       	movw	r18, r16
    3274:	b9 01       	movw	r22, r18
    3276:	a8 01       	movw	r20, r16
    3278:	ce 01       	movw	r24, r28
    327a:	87 5d       	subi	r24, 0xD7	; 215
    327c:	9e 4f       	sbci	r25, 0xFE	; 254
    327e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3282:	00 e0       	ldi	r16, 0x00	; 0
    3284:	10 e0       	ldi	r17, 0x00	; 0
    3286:	98 01       	movw	r18, r16
    3288:	b9 01       	movw	r22, r18
    328a:	a8 01       	movw	r20, r16
    328c:	ce 01       	movw	r24, r28
    328e:	8f 5c       	subi	r24, 0xCF	; 207
    3290:	9e 4f       	sbci	r25, 0xFE	; 254
    3292:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3296:	00 e0       	ldi	r16, 0x00	; 0
    3298:	10 e0       	ldi	r17, 0x00	; 0
    329a:	98 01       	movw	r18, r16
    329c:	b9 01       	movw	r22, r18
    329e:	a8 01       	movw	r20, r16
    32a0:	ce 01       	movw	r24, r28
    32a2:	87 5c       	subi	r24, 0xC7	; 199
    32a4:	9e 4f       	sbci	r25, 0xFE	; 254
    32a6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    32aa:	00 e0       	ldi	r16, 0x00	; 0
    32ac:	10 e0       	ldi	r17, 0x00	; 0
    32ae:	98 01       	movw	r18, r16
    32b0:	b9 01       	movw	r22, r18
    32b2:	a8 01       	movw	r20, r16
    32b4:	ce 01       	movw	r24, r28
    32b6:	8f 5b       	subi	r24, 0xBF	; 191
    32b8:	9e 4f       	sbci	r25, 0xFE	; 254
    32ba:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    32be:	00 e0       	ldi	r16, 0x00	; 0
    32c0:	10 e0       	ldi	r17, 0x00	; 0
    32c2:	98 01       	movw	r18, r16
    32c4:	b9 01       	movw	r22, r18
    32c6:	a8 01       	movw	r20, r16
    32c8:	ce 01       	movw	r24, r28
    32ca:	87 5b       	subi	r24, 0xB7	; 183
    32cc:	9e 4f       	sbci	r25, 0xFE	; 254
    32ce:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    32d2:	00 e0       	ldi	r16, 0x00	; 0
    32d4:	10 e0       	ldi	r17, 0x00	; 0
    32d6:	98 01       	movw	r18, r16
    32d8:	b9 01       	movw	r22, r18
    32da:	a8 01       	movw	r20, r16
    32dc:	ce 01       	movw	r24, r28
    32de:	8f 5a       	subi	r24, 0xAF	; 175
    32e0:	9e 4f       	sbci	r25, 0xFE	; 254
    32e2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    32e6:	00 e0       	ldi	r16, 0x00	; 0
    32e8:	10 e0       	ldi	r17, 0x00	; 0
    32ea:	98 01       	movw	r18, r16
    32ec:	b9 01       	movw	r22, r18
    32ee:	a8 01       	movw	r20, r16
    32f0:	ce 01       	movw	r24, r28
    32f2:	87 5a       	subi	r24, 0xA7	; 167
    32f4:	9e 4f       	sbci	r25, 0xFE	; 254
    32f6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    32fa:	00 e0       	ldi	r16, 0x00	; 0
    32fc:	10 e0       	ldi	r17, 0x00	; 0
    32fe:	98 01       	movw	r18, r16
    3300:	b9 01       	movw	r22, r18
    3302:	a8 01       	movw	r20, r16
    3304:	ce 01       	movw	r24, r28
    3306:	8f 59       	subi	r24, 0x9F	; 159
    3308:	9e 4f       	sbci	r25, 0xFE	; 254
    330a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    330e:	00 e0       	ldi	r16, 0x00	; 0
    3310:	10 e0       	ldi	r17, 0x00	; 0
    3312:	98 01       	movw	r18, r16
    3314:	40 e0       	ldi	r20, 0x00	; 0
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	60 e8       	ldi	r22, 0x80	; 128
    331a:	7f e3       	ldi	r23, 0x3F	; 63
    331c:	ce 01       	movw	r24, r28
    331e:	87 59       	subi	r24, 0x97	; 151
    3320:	9e 4f       	sbci	r25, 0xFE	; 254
    3322:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3326:	00 e0       	ldi	r16, 0x00	; 0
    3328:	10 e0       	ldi	r17, 0x00	; 0
    332a:	98 01       	movw	r18, r16
    332c:	b9 01       	movw	r22, r18
    332e:	a8 01       	movw	r20, r16
    3330:	ce 01       	movw	r24, r28
    3332:	8f 58       	subi	r24, 0x8F	; 143
    3334:	9e 4f       	sbci	r25, 0xFE	; 254
    3336:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    333a:	00 e0       	ldi	r16, 0x00	; 0
    333c:	10 e0       	ldi	r17, 0x00	; 0
    333e:	98 01       	movw	r18, r16
    3340:	b9 01       	movw	r22, r18
    3342:	a8 01       	movw	r20, r16
    3344:	ce 01       	movw	r24, r28
    3346:	87 58       	subi	r24, 0x87	; 135
    3348:	9e 4f       	sbci	r25, 0xFE	; 254
    334a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    334e:	00 e0       	ldi	r16, 0x00	; 0
    3350:	10 e0       	ldi	r17, 0x00	; 0
    3352:	98 01       	movw	r18, r16
    3354:	b9 01       	movw	r22, r18
    3356:	a8 01       	movw	r20, r16
    3358:	ce 01       	movw	r24, r28
    335a:	8f 57       	subi	r24, 0x7F	; 127
    335c:	9e 4f       	sbci	r25, 0xFE	; 254
    335e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3362:	00 e0       	ldi	r16, 0x00	; 0
    3364:	10 e0       	ldi	r17, 0x00	; 0
    3366:	98 01       	movw	r18, r16
    3368:	b9 01       	movw	r22, r18
    336a:	a8 01       	movw	r20, r16
    336c:	ce 01       	movw	r24, r28
    336e:	87 57       	subi	r24, 0x77	; 119
    3370:	9e 4f       	sbci	r25, 0xFE	; 254
    3372:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3376:	00 e0       	ldi	r16, 0x00	; 0
    3378:	10 e0       	ldi	r17, 0x00	; 0
    337a:	98 01       	movw	r18, r16
    337c:	b9 01       	movw	r22, r18
    337e:	a8 01       	movw	r20, r16
    3380:	ce 01       	movw	r24, r28
    3382:	8f 56       	subi	r24, 0x6F	; 111
    3384:	9e 4f       	sbci	r25, 0xFE	; 254
    3386:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    338a:	00 e0       	ldi	r16, 0x00	; 0
    338c:	10 e0       	ldi	r17, 0x00	; 0
    338e:	98 01       	movw	r18, r16
    3390:	b9 01       	movw	r22, r18
    3392:	a8 01       	movw	r20, r16
    3394:	ce 01       	movw	r24, r28
    3396:	87 56       	subi	r24, 0x67	; 103
    3398:	9e 4f       	sbci	r25, 0xFE	; 254
    339a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    339e:	00 e0       	ldi	r16, 0x00	; 0
    33a0:	10 e0       	ldi	r17, 0x00	; 0
    33a2:	98 01       	movw	r18, r16
    33a4:	b9 01       	movw	r22, r18
    33a6:	a8 01       	movw	r20, r16
    33a8:	ce 01       	movw	r24, r28
    33aa:	8f 55       	subi	r24, 0x5F	; 95
    33ac:	9e 4f       	sbci	r25, 0xFE	; 254
    33ae:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    33b2:	00 e0       	ldi	r16, 0x00	; 0
    33b4:	10 e0       	ldi	r17, 0x00	; 0
    33b6:	98 01       	movw	r18, r16
    33b8:	b9 01       	movw	r22, r18
    33ba:	a8 01       	movw	r20, r16
    33bc:	ce 01       	movw	r24, r28
    33be:	87 55       	subi	r24, 0x57	; 87
    33c0:	9e 4f       	sbci	r25, 0xFE	; 254
    33c2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    33c6:	00 e0       	ldi	r16, 0x00	; 0
    33c8:	10 e0       	ldi	r17, 0x00	; 0
    33ca:	98 01       	movw	r18, r16
    33cc:	b9 01       	movw	r22, r18
    33ce:	a8 01       	movw	r20, r16
    33d0:	ce 01       	movw	r24, r28
    33d2:	8f 54       	subi	r24, 0x4F	; 79
    33d4:	9e 4f       	sbci	r25, 0xFE	; 254
    33d6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    33da:	00 e0       	ldi	r16, 0x00	; 0
    33dc:	10 e0       	ldi	r17, 0x00	; 0
    33de:	98 01       	movw	r18, r16
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	60 e8       	ldi	r22, 0x80	; 128
    33e6:	7f e3       	ldi	r23, 0x3F	; 63
    33e8:	ce 01       	movw	r24, r28
    33ea:	87 54       	subi	r24, 0x47	; 71
    33ec:	9e 4f       	sbci	r25, 0xFE	; 254
    33ee:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    33f2:	00 e0       	ldi	r16, 0x00	; 0
    33f4:	10 e0       	ldi	r17, 0x00	; 0
    33f6:	98 01       	movw	r18, r16
    33f8:	b9 01       	movw	r22, r18
    33fa:	a8 01       	movw	r20, r16
    33fc:	ce 01       	movw	r24, r28
    33fe:	8f 53       	subi	r24, 0x3F	; 63
    3400:	9e 4f       	sbci	r25, 0xFE	; 254
    3402:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3406:	00 e0       	ldi	r16, 0x00	; 0
    3408:	10 e0       	ldi	r17, 0x00	; 0
    340a:	98 01       	movw	r18, r16
    340c:	b9 01       	movw	r22, r18
    340e:	a8 01       	movw	r20, r16
    3410:	ce 01       	movw	r24, r28
    3412:	87 53       	subi	r24, 0x37	; 55
    3414:	9e 4f       	sbci	r25, 0xFE	; 254
    3416:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    341a:	00 e0       	ldi	r16, 0x00	; 0
    341c:	10 e0       	ldi	r17, 0x00	; 0
    341e:	98 01       	movw	r18, r16
    3420:	b9 01       	movw	r22, r18
    3422:	a8 01       	movw	r20, r16
    3424:	ce 01       	movw	r24, r28
    3426:	8f 52       	subi	r24, 0x2F	; 47
    3428:	9e 4f       	sbci	r25, 0xFE	; 254
    342a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    342e:	00 e0       	ldi	r16, 0x00	; 0
    3430:	10 e0       	ldi	r17, 0x00	; 0
    3432:	98 01       	movw	r18, r16
    3434:	b9 01       	movw	r22, r18
    3436:	a8 01       	movw	r20, r16
    3438:	ce 01       	movw	r24, r28
    343a:	87 52       	subi	r24, 0x27	; 39
    343c:	9e 4f       	sbci	r25, 0xFE	; 254
    343e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3442:	00 e0       	ldi	r16, 0x00	; 0
    3444:	10 e0       	ldi	r17, 0x00	; 0
    3446:	98 01       	movw	r18, r16
    3448:	b9 01       	movw	r22, r18
    344a:	a8 01       	movw	r20, r16
    344c:	ce 01       	movw	r24, r28
    344e:	8f 51       	subi	r24, 0x1F	; 31
    3450:	9e 4f       	sbci	r25, 0xFE	; 254
    3452:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3456:	00 e0       	ldi	r16, 0x00	; 0
    3458:	10 e0       	ldi	r17, 0x00	; 0
    345a:	98 01       	movw	r18, r16
    345c:	b9 01       	movw	r22, r18
    345e:	a8 01       	movw	r20, r16
    3460:	ce 01       	movw	r24, r28
    3462:	87 51       	subi	r24, 0x17	; 23
    3464:	9e 4f       	sbci	r25, 0xFE	; 254
    3466:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    346a:	00 e0       	ldi	r16, 0x00	; 0
    346c:	10 e0       	ldi	r17, 0x00	; 0
    346e:	98 01       	movw	r18, r16
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	50 e0       	ldi	r21, 0x00	; 0
    3474:	60 e8       	ldi	r22, 0x80	; 128
    3476:	7f e3       	ldi	r23, 0x3F	; 63
    3478:	ce 01       	movw	r24, r28
    347a:	8f 50       	subi	r24, 0x0F	; 15
    347c:	9e 4f       	sbci	r25, 0xFE	; 254
    347e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3482:	00 e0       	ldi	r16, 0x00	; 0
    3484:	10 e0       	ldi	r17, 0x00	; 0
    3486:	98 01       	movw	r18, r16
    3488:	b9 01       	movw	r22, r18
    348a:	a8 01       	movw	r20, r16
    348c:	ce 01       	movw	r24, r28
    348e:	87 50       	subi	r24, 0x07	; 7
    3490:	9e 4f       	sbci	r25, 0xFE	; 254
    3492:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    3496:	c9 5f       	subi	r28, 0xF9	; 249
    3498:	dd 4f       	sbci	r29, 0xFD	; 253
    349a:	79 82       	std	Y+1, r7	; 0x01
    349c:	68 82       	st	Y, r6
    349e:	c7 50       	subi	r28, 0x07	; 7
    34a0:	d2 40       	sbci	r29, 0x02	; 2
    34a2:	c7 5f       	subi	r28, 0xF7	; 247
    34a4:	dd 4f       	sbci	r29, 0xFD	; 253
    34a6:	99 82       	std	Y+1, r9	; 0x01
    34a8:	88 82       	st	Y, r8
    34aa:	c9 50       	subi	r28, 0x09	; 9
    34ac:	d2 40       	sbci	r29, 0x02	; 2
    34ae:	c5 5f       	subi	r28, 0xF5	; 245
    34b0:	dd 4f       	sbci	r29, 0xFD	; 253
    34b2:	f9 82       	std	Y+1, r15	; 0x01
    34b4:	e8 82       	st	Y, r14
    34b6:	cb 50       	subi	r28, 0x0B	; 11
    34b8:	d2 40       	sbci	r29, 0x02	; 2
    34ba:	cf 5f       	subi	r28, 0xFF	; 255
    34bc:	dd 4f       	sbci	r29, 0xFD	; 253
    34be:	59 82       	std	Y+1, r5	; 0x01
    34c0:	48 82       	st	Y, r4
    34c2:	c1 50       	subi	r28, 0x01	; 1
    34c4:	d2 40       	sbci	r29, 0x02	; 2
    34c6:	cd 5f       	subi	r28, 0xFD	; 253
    34c8:	dd 4f       	sbci	r29, 0xFD	; 253
    34ca:	39 82       	std	Y+1, r3	; 0x01
    34cc:	28 82       	st	Y, r2
    34ce:	c3 50       	subi	r28, 0x03	; 3
    34d0:	d2 40       	sbci	r29, 0x02	; 2
    34d2:	cb 5f       	subi	r28, 0xFB	; 251
    34d4:	dd 4f       	sbci	r29, 0xFD	; 253
    34d6:	d9 82       	std	Y+1, r13	; 0x01
    34d8:	c8 82       	st	Y, r12
    34da:	c5 50       	subi	r28, 0x05	; 5
    34dc:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),tof_matrix),QB_SIZE3);
    34de:	9e 01       	movw	r18, r28
    34e0:	2f 5f       	subi	r18, 0xFF	; 255
    34e2:	3d 4f       	sbci	r19, 0xFD	; 253
    34e4:	ae 01       	movw	r20, r28
    34e6:	49 5f       	subi	r20, 0xF9	; 249
    34e8:	5d 4f       	sbci	r21, 0xFD	; 253
    34ea:	63 e0       	ldi	r22, 0x03	; 3
    34ec:	70 e0       	ldi	r23, 0x00	; 0
    34ee:	c5 01       	movw	r24, r10
    34f0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    34f4:	ae 01       	movw	r20, r28
    34f6:	4f 5f       	subi	r20, 0xFF	; 255
    34f8:	5f 4f       	sbci	r21, 0xFF	; 255
    34fa:	bc 01       	movw	r22, r24
    34fc:	c5 01       	movw	r24, r10
    34fe:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    3502:	43 e0       	ldi	r20, 0x03	; 3
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	bc 01       	movw	r22, r24
    3508:	c5 01       	movw	r24, r10
    350a:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
}
    350e:	c4 5f       	subi	r28, 0xF4	; 244
    3510:	dd 4f       	sbci	r29, 0xFD	; 253
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	f8 94       	cli
    3516:	de bf       	out	0x3e, r29	; 62
    3518:	0f be       	out	0x3f, r0	; 63
    351a:	cd bf       	out	0x3d, r28	; 61
    351c:	df 91       	pop	r29
    351e:	cf 91       	pop	r28
    3520:	1f 91       	pop	r17
    3522:	0f 91       	pop	r16
    3524:	ff 90       	pop	r15
    3526:	ef 90       	pop	r14
    3528:	df 90       	pop	r13
    352a:	cf 90       	pop	r12
    352c:	bf 90       	pop	r11
    352e:	af 90       	pop	r10
    3530:	9f 90       	pop	r9
    3532:	8f 90       	pop	r8
    3534:	7f 90       	pop	r7
    3536:	6f 90       	pop	r6
    3538:	5f 90       	pop	r5
    353a:	4f 90       	pop	r4
    353c:	3f 90       	pop	r3
    353e:	2f 90       	pop	r2
    3540:	08 95       	ret

00003542 <_ZN5Gates3DEUEiiiiiii>:
int * Gates::DEU(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3,int delta){
    3542:	2f 92       	push	r2
    3544:	3f 92       	push	r3
    3546:	4f 92       	push	r4
    3548:	5f 92       	push	r5
    354a:	6f 92       	push	r6
    354c:	7f 92       	push	r7
    354e:	8f 92       	push	r8
    3550:	9f 92       	push	r9
    3552:	af 92       	push	r10
    3554:	bf 92       	push	r11
    3556:	cf 92       	push	r12
    3558:	df 92       	push	r13
    355a:	ef 92       	push	r14
    355c:	ff 92       	push	r15
    355e:	0f 93       	push	r16
    3560:	1f 93       	push	r17
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	c4 51       	subi	r28, 0x14	; 20
    356c:	d2 40       	sbci	r29, 0x02	; 2
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	c3 5f       	subi	r28, 0xF3	; 243
    357a:	dd 4f       	sbci	r29, 0xFD	; 253
    357c:	99 83       	std	Y+1, r25	; 0x01
    357e:	88 83       	st	Y, r24
    3580:	cd 50       	subi	r28, 0x0D	; 13
    3582:	d2 40       	sbci	r29, 0x02	; 2
    3584:	2b 01       	movw	r4, r22
    3586:	c1 5f       	subi	r28, 0xF1	; 241
    3588:	dd 4f       	sbci	r29, 0xFD	; 253
    358a:	59 83       	std	Y+1, r21	; 0x01
    358c:	48 83       	st	Y, r20
    358e:	cf 50       	subi	r28, 0x0F	; 15
    3590:	d2 40       	sbci	r29, 0x02	; 2
    3592:	39 01       	movw	r6, r18
    3594:	cf 5e       	subi	r28, 0xEF	; 239
    3596:	dd 4f       	sbci	r29, 0xFD	; 253
    3598:	19 83       	std	Y+1, r17	; 0x01
    359a:	08 83       	st	Y, r16
    359c:	c1 51       	subi	r28, 0x11	; 17
    359e:	d2 40       	sbci	r29, 0x02	; 2
    35a0:	17 01       	movw	r2, r14
    35a2:	cd 5e       	subi	r28, 0xED	; 237
    35a4:	dd 4f       	sbci	r29, 0xFD	; 253
    35a6:	d9 82       	std	Y+1, r13	; 0x01
    35a8:	c8 82       	st	Y, r12
    35aa:	c3 51       	subi	r28, 0x13	; 19
    35ac:	d2 40       	sbci	r29, 0x02	; 2
	float delta_float=(delta*M_PI)/180;
    35ae:	b5 01       	movw	r22, r10
    35b0:	88 27       	eor	r24, r24
    35b2:	77 fd       	sbrc	r23, 7
    35b4:	80 95       	com	r24
    35b6:	98 2f       	mov	r25, r24
    35b8:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
    35bc:	2b ed       	ldi	r18, 0xDB	; 219
    35be:	3f e0       	ldi	r19, 0x0F	; 15
    35c0:	49 e4       	ldi	r20, 0x49	; 73
    35c2:	50 e4       	ldi	r21, 0x40	; 64
    35c4:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	44 e3       	ldi	r20, 0x34	; 52
    35ce:	53 e4       	ldi	r21, 0x43	; 67
    35d0:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
    35d4:	4b 01       	movw	r8, r22
    35d6:	5c 01       	movw	r10, r24
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    35d8:	00 e0       	ldi	r16, 0x00	; 0
    35da:	10 e0       	ldi	r17, 0x00	; 0
    35dc:	98 01       	movw	r18, r16
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	60 e8       	ldi	r22, 0x80	; 128
    35e4:	7f e3       	ldi	r23, 0x3F	; 63
    35e6:	ce 01       	movw	r24, r28
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    35ee:	00 e0       	ldi	r16, 0x00	; 0
    35f0:	10 e0       	ldi	r17, 0x00	; 0
    35f2:	98 01       	movw	r18, r16
    35f4:	b9 01       	movw	r22, r18
    35f6:	a8 01       	movw	r20, r16
    35f8:	ce 01       	movw	r24, r28
    35fa:	09 96       	adiw	r24, 0x09	; 9
    35fc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3600:	00 e0       	ldi	r16, 0x00	; 0
    3602:	10 e0       	ldi	r17, 0x00	; 0
    3604:	98 01       	movw	r18, r16
    3606:	b9 01       	movw	r22, r18
    3608:	a8 01       	movw	r20, r16
    360a:	ce 01       	movw	r24, r28
    360c:	41 96       	adiw	r24, 0x11	; 17
    360e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3612:	00 e0       	ldi	r16, 0x00	; 0
    3614:	10 e0       	ldi	r17, 0x00	; 0
    3616:	98 01       	movw	r18, r16
    3618:	b9 01       	movw	r22, r18
    361a:	a8 01       	movw	r20, r16
    361c:	ce 01       	movw	r24, r28
    361e:	49 96       	adiw	r24, 0x19	; 25
    3620:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3624:	00 e0       	ldi	r16, 0x00	; 0
    3626:	10 e0       	ldi	r17, 0x00	; 0
    3628:	98 01       	movw	r18, r16
    362a:	b9 01       	movw	r22, r18
    362c:	a8 01       	movw	r20, r16
    362e:	ce 01       	movw	r24, r28
    3630:	81 96       	adiw	r24, 0x21	; 33
    3632:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3636:	00 e0       	ldi	r16, 0x00	; 0
    3638:	10 e0       	ldi	r17, 0x00	; 0
    363a:	98 01       	movw	r18, r16
    363c:	b9 01       	movw	r22, r18
    363e:	a8 01       	movw	r20, r16
    3640:	ce 01       	movw	r24, r28
    3642:	89 96       	adiw	r24, 0x29	; 41
    3644:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3648:	00 e0       	ldi	r16, 0x00	; 0
    364a:	10 e0       	ldi	r17, 0x00	; 0
    364c:	98 01       	movw	r18, r16
    364e:	b9 01       	movw	r22, r18
    3650:	a8 01       	movw	r20, r16
    3652:	ce 01       	movw	r24, r28
    3654:	c1 96       	adiw	r24, 0x31	; 49
    3656:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    365a:	00 e0       	ldi	r16, 0x00	; 0
    365c:	10 e0       	ldi	r17, 0x00	; 0
    365e:	98 01       	movw	r18, r16
    3660:	b9 01       	movw	r22, r18
    3662:	a8 01       	movw	r20, r16
    3664:	ce 01       	movw	r24, r28
    3666:	c9 96       	adiw	r24, 0x39	; 57
    3668:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    366c:	00 e0       	ldi	r16, 0x00	; 0
    366e:	10 e0       	ldi	r17, 0x00	; 0
    3670:	98 01       	movw	r18, r16
    3672:	b9 01       	movw	r22, r18
    3674:	a8 01       	movw	r20, r16
    3676:	ce 01       	movw	r24, r28
    3678:	8f 5b       	subi	r24, 0xBF	; 191
    367a:	9f 4f       	sbci	r25, 0xFF	; 255
    367c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3680:	00 e0       	ldi	r16, 0x00	; 0
    3682:	10 e0       	ldi	r17, 0x00	; 0
    3684:	98 01       	movw	r18, r16
    3686:	40 e0       	ldi	r20, 0x00	; 0
    3688:	50 e0       	ldi	r21, 0x00	; 0
    368a:	60 e8       	ldi	r22, 0x80	; 128
    368c:	7f e3       	ldi	r23, 0x3F	; 63
    368e:	ce 01       	movw	r24, r28
    3690:	87 5b       	subi	r24, 0xB7	; 183
    3692:	9f 4f       	sbci	r25, 0xFF	; 255
    3694:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3698:	00 e0       	ldi	r16, 0x00	; 0
    369a:	10 e0       	ldi	r17, 0x00	; 0
    369c:	98 01       	movw	r18, r16
    369e:	b9 01       	movw	r22, r18
    36a0:	a8 01       	movw	r20, r16
    36a2:	ce 01       	movw	r24, r28
    36a4:	8f 5a       	subi	r24, 0xAF	; 175
    36a6:	9f 4f       	sbci	r25, 0xFF	; 255
    36a8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    36ac:	00 e0       	ldi	r16, 0x00	; 0
    36ae:	10 e0       	ldi	r17, 0x00	; 0
    36b0:	98 01       	movw	r18, r16
    36b2:	b9 01       	movw	r22, r18
    36b4:	a8 01       	movw	r20, r16
    36b6:	ce 01       	movw	r24, r28
    36b8:	87 5a       	subi	r24, 0xA7	; 167
    36ba:	9f 4f       	sbci	r25, 0xFF	; 255
    36bc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    36c0:	00 e0       	ldi	r16, 0x00	; 0
    36c2:	10 e0       	ldi	r17, 0x00	; 0
    36c4:	98 01       	movw	r18, r16
    36c6:	b9 01       	movw	r22, r18
    36c8:	a8 01       	movw	r20, r16
    36ca:	ce 01       	movw	r24, r28
    36cc:	8f 59       	subi	r24, 0x9F	; 159
    36ce:	9f 4f       	sbci	r25, 0xFF	; 255
    36d0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    36d4:	00 e0       	ldi	r16, 0x00	; 0
    36d6:	10 e0       	ldi	r17, 0x00	; 0
    36d8:	98 01       	movw	r18, r16
    36da:	b9 01       	movw	r22, r18
    36dc:	a8 01       	movw	r20, r16
    36de:	ce 01       	movw	r24, r28
    36e0:	87 59       	subi	r24, 0x97	; 151
    36e2:	9f 4f       	sbci	r25, 0xFF	; 255
    36e4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    36e8:	00 e0       	ldi	r16, 0x00	; 0
    36ea:	10 e0       	ldi	r17, 0x00	; 0
    36ec:	98 01       	movw	r18, r16
    36ee:	b9 01       	movw	r22, r18
    36f0:	a8 01       	movw	r20, r16
    36f2:	ce 01       	movw	r24, r28
    36f4:	8f 58       	subi	r24, 0x8F	; 143
    36f6:	9f 4f       	sbci	r25, 0xFF	; 255
    36f8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    36fc:	00 e0       	ldi	r16, 0x00	; 0
    36fe:	10 e0       	ldi	r17, 0x00	; 0
    3700:	98 01       	movw	r18, r16
    3702:	b9 01       	movw	r22, r18
    3704:	a8 01       	movw	r20, r16
    3706:	ce 01       	movw	r24, r28
    3708:	87 58       	subi	r24, 0x87	; 135
    370a:	9f 4f       	sbci	r25, 0xFF	; 255
    370c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3710:	00 e0       	ldi	r16, 0x00	; 0
    3712:	10 e0       	ldi	r17, 0x00	; 0
    3714:	98 01       	movw	r18, r16
    3716:	b9 01       	movw	r22, r18
    3718:	a8 01       	movw	r20, r16
    371a:	ce 01       	movw	r24, r28
    371c:	8f 57       	subi	r24, 0x7F	; 127
    371e:	9f 4f       	sbci	r25, 0xFF	; 255
    3720:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3724:	00 e0       	ldi	r16, 0x00	; 0
    3726:	10 e0       	ldi	r17, 0x00	; 0
    3728:	98 01       	movw	r18, r16
    372a:	b9 01       	movw	r22, r18
    372c:	a8 01       	movw	r20, r16
    372e:	ce 01       	movw	r24, r28
    3730:	87 57       	subi	r24, 0x77	; 119
    3732:	9f 4f       	sbci	r25, 0xFF	; 255
    3734:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3738:	00 e0       	ldi	r16, 0x00	; 0
    373a:	10 e0       	ldi	r17, 0x00	; 0
    373c:	98 01       	movw	r18, r16
    373e:	40 e0       	ldi	r20, 0x00	; 0
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	60 e8       	ldi	r22, 0x80	; 128
    3744:	7f e3       	ldi	r23, 0x3F	; 63
    3746:	ce 01       	movw	r24, r28
    3748:	8f 56       	subi	r24, 0x6F	; 111
    374a:	9f 4f       	sbci	r25, 0xFF	; 255
    374c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3750:	00 e0       	ldi	r16, 0x00	; 0
    3752:	10 e0       	ldi	r17, 0x00	; 0
    3754:	98 01       	movw	r18, r16
    3756:	b9 01       	movw	r22, r18
    3758:	a8 01       	movw	r20, r16
    375a:	ce 01       	movw	r24, r28
    375c:	87 56       	subi	r24, 0x67	; 103
    375e:	9f 4f       	sbci	r25, 0xFF	; 255
    3760:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3764:	00 e0       	ldi	r16, 0x00	; 0
    3766:	10 e0       	ldi	r17, 0x00	; 0
    3768:	98 01       	movw	r18, r16
    376a:	b9 01       	movw	r22, r18
    376c:	a8 01       	movw	r20, r16
    376e:	ce 01       	movw	r24, r28
    3770:	8f 55       	subi	r24, 0x5F	; 95
    3772:	9f 4f       	sbci	r25, 0xFF	; 255
    3774:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3778:	00 e0       	ldi	r16, 0x00	; 0
    377a:	10 e0       	ldi	r17, 0x00	; 0
    377c:	98 01       	movw	r18, r16
    377e:	b9 01       	movw	r22, r18
    3780:	a8 01       	movw	r20, r16
    3782:	ce 01       	movw	r24, r28
    3784:	87 55       	subi	r24, 0x57	; 87
    3786:	9f 4f       	sbci	r25, 0xFF	; 255
    3788:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    378c:	00 e0       	ldi	r16, 0x00	; 0
    378e:	10 e0       	ldi	r17, 0x00	; 0
    3790:	98 01       	movw	r18, r16
    3792:	b9 01       	movw	r22, r18
    3794:	a8 01       	movw	r20, r16
    3796:	ce 01       	movw	r24, r28
    3798:	8f 54       	subi	r24, 0x4F	; 79
    379a:	9f 4f       	sbci	r25, 0xFF	; 255
    379c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    37a0:	00 e0       	ldi	r16, 0x00	; 0
    37a2:	10 e0       	ldi	r17, 0x00	; 0
    37a4:	98 01       	movw	r18, r16
    37a6:	b9 01       	movw	r22, r18
    37a8:	a8 01       	movw	r20, r16
    37aa:	ce 01       	movw	r24, r28
    37ac:	87 54       	subi	r24, 0x47	; 71
    37ae:	9f 4f       	sbci	r25, 0xFF	; 255
    37b0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    37b4:	00 e0       	ldi	r16, 0x00	; 0
    37b6:	10 e0       	ldi	r17, 0x00	; 0
    37b8:	98 01       	movw	r18, r16
    37ba:	b9 01       	movw	r22, r18
    37bc:	a8 01       	movw	r20, r16
    37be:	ce 01       	movw	r24, r28
    37c0:	8f 53       	subi	r24, 0x3F	; 63
    37c2:	9f 4f       	sbci	r25, 0xFF	; 255
    37c4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    37c8:	00 e0       	ldi	r16, 0x00	; 0
    37ca:	10 e0       	ldi	r17, 0x00	; 0
    37cc:	98 01       	movw	r18, r16
    37ce:	b9 01       	movw	r22, r18
    37d0:	a8 01       	movw	r20, r16
    37d2:	ce 01       	movw	r24, r28
    37d4:	87 53       	subi	r24, 0x37	; 55
    37d6:	9f 4f       	sbci	r25, 0xFF	; 255
    37d8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    37dc:	00 e0       	ldi	r16, 0x00	; 0
    37de:	10 e0       	ldi	r17, 0x00	; 0
    37e0:	98 01       	movw	r18, r16
    37e2:	b9 01       	movw	r22, r18
    37e4:	a8 01       	movw	r20, r16
    37e6:	ce 01       	movw	r24, r28
    37e8:	8f 52       	subi	r24, 0x2F	; 47
    37ea:	9f 4f       	sbci	r25, 0xFF	; 255
    37ec:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    37f0:	00 e0       	ldi	r16, 0x00	; 0
    37f2:	10 e0       	ldi	r17, 0x00	; 0
    37f4:	98 01       	movw	r18, r16
    37f6:	40 e0       	ldi	r20, 0x00	; 0
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	60 e8       	ldi	r22, 0x80	; 128
    37fc:	7f e3       	ldi	r23, 0x3F	; 63
    37fe:	ce 01       	movw	r24, r28
    3800:	87 52       	subi	r24, 0x27	; 39
    3802:	9f 4f       	sbci	r25, 0xFF	; 255
    3804:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3808:	00 e0       	ldi	r16, 0x00	; 0
    380a:	10 e0       	ldi	r17, 0x00	; 0
    380c:	98 01       	movw	r18, r16
    380e:	b9 01       	movw	r22, r18
    3810:	a8 01       	movw	r20, r16
    3812:	ce 01       	movw	r24, r28
    3814:	8f 51       	subi	r24, 0x1F	; 31
    3816:	9f 4f       	sbci	r25, 0xFF	; 255
    3818:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    381c:	00 e0       	ldi	r16, 0x00	; 0
    381e:	10 e0       	ldi	r17, 0x00	; 0
    3820:	98 01       	movw	r18, r16
    3822:	b9 01       	movw	r22, r18
    3824:	a8 01       	movw	r20, r16
    3826:	ce 01       	movw	r24, r28
    3828:	87 51       	subi	r24, 0x17	; 23
    382a:	9f 4f       	sbci	r25, 0xFF	; 255
    382c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3830:	00 e0       	ldi	r16, 0x00	; 0
    3832:	10 e0       	ldi	r17, 0x00	; 0
    3834:	98 01       	movw	r18, r16
    3836:	b9 01       	movw	r22, r18
    3838:	a8 01       	movw	r20, r16
    383a:	ce 01       	movw	r24, r28
    383c:	8f 50       	subi	r24, 0x0F	; 15
    383e:	9f 4f       	sbci	r25, 0xFF	; 255
    3840:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3844:	00 e0       	ldi	r16, 0x00	; 0
    3846:	10 e0       	ldi	r17, 0x00	; 0
    3848:	98 01       	movw	r18, r16
    384a:	b9 01       	movw	r22, r18
    384c:	a8 01       	movw	r20, r16
    384e:	ce 01       	movw	r24, r28
    3850:	87 50       	subi	r24, 0x07	; 7
    3852:	9f 4f       	sbci	r25, 0xFF	; 255
    3854:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3858:	00 e0       	ldi	r16, 0x00	; 0
    385a:	10 e0       	ldi	r17, 0x00	; 0
    385c:	98 01       	movw	r18, r16
    385e:	b9 01       	movw	r22, r18
    3860:	a8 01       	movw	r20, r16
    3862:	ce 01       	movw	r24, r28
    3864:	8f 5f       	subi	r24, 0xFF	; 255
    3866:	9e 4f       	sbci	r25, 0xFE	; 254
    3868:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    386c:	00 e0       	ldi	r16, 0x00	; 0
    386e:	10 e0       	ldi	r17, 0x00	; 0
    3870:	98 01       	movw	r18, r16
    3872:	b9 01       	movw	r22, r18
    3874:	a8 01       	movw	r20, r16
    3876:	ce 01       	movw	r24, r28
    3878:	87 5f       	subi	r24, 0xF7	; 247
    387a:	9e 4f       	sbci	r25, 0xFE	; 254
    387c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3880:	00 e0       	ldi	r16, 0x00	; 0
    3882:	10 e0       	ldi	r17, 0x00	; 0
    3884:	98 01       	movw	r18, r16
    3886:	b9 01       	movw	r22, r18
    3888:	a8 01       	movw	r20, r16
    388a:	ce 01       	movw	r24, r28
    388c:	8f 5e       	subi	r24, 0xEF	; 239
    388e:	9e 4f       	sbci	r25, 0xFE	; 254
    3890:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3894:	00 e0       	ldi	r16, 0x00	; 0
    3896:	10 e0       	ldi	r17, 0x00	; 0
    3898:	98 01       	movw	r18, r16
    389a:	b9 01       	movw	r22, r18
    389c:	a8 01       	movw	r20, r16
    389e:	ce 01       	movw	r24, r28
    38a0:	87 5e       	subi	r24, 0xE7	; 231
    38a2:	9e 4f       	sbci	r25, 0xFE	; 254
    38a4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    38a8:	00 e0       	ldi	r16, 0x00	; 0
    38aa:	10 e0       	ldi	r17, 0x00	; 0
    38ac:	98 01       	movw	r18, r16
    38ae:	40 e0       	ldi	r20, 0x00	; 0
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	60 e8       	ldi	r22, 0x80	; 128
    38b4:	7f e3       	ldi	r23, 0x3F	; 63
    38b6:	ce 01       	movw	r24, r28
    38b8:	8f 5d       	subi	r24, 0xDF	; 223
    38ba:	9e 4f       	sbci	r25, 0xFE	; 254
    38bc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    38c0:	00 e0       	ldi	r16, 0x00	; 0
    38c2:	10 e0       	ldi	r17, 0x00	; 0
    38c4:	98 01       	movw	r18, r16
    38c6:	b9 01       	movw	r22, r18
    38c8:	a8 01       	movw	r20, r16
    38ca:	ce 01       	movw	r24, r28
    38cc:	87 5d       	subi	r24, 0xD7	; 215
    38ce:	9e 4f       	sbci	r25, 0xFE	; 254
    38d0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    38d4:	00 e0       	ldi	r16, 0x00	; 0
    38d6:	10 e0       	ldi	r17, 0x00	; 0
    38d8:	98 01       	movw	r18, r16
    38da:	b9 01       	movw	r22, r18
    38dc:	a8 01       	movw	r20, r16
    38de:	ce 01       	movw	r24, r28
    38e0:	8f 5c       	subi	r24, 0xCF	; 207
    38e2:	9e 4f       	sbci	r25, 0xFE	; 254
    38e4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    38e8:	00 e0       	ldi	r16, 0x00	; 0
    38ea:	10 e0       	ldi	r17, 0x00	; 0
    38ec:	98 01       	movw	r18, r16
    38ee:	b9 01       	movw	r22, r18
    38f0:	a8 01       	movw	r20, r16
    38f2:	ce 01       	movw	r24, r28
    38f4:	87 5c       	subi	r24, 0xC7	; 199
    38f6:	9e 4f       	sbci	r25, 0xFE	; 254
    38f8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    38fc:	00 e0       	ldi	r16, 0x00	; 0
    38fe:	10 e0       	ldi	r17, 0x00	; 0
    3900:	98 01       	movw	r18, r16
    3902:	b9 01       	movw	r22, r18
    3904:	a8 01       	movw	r20, r16
    3906:	ce 01       	movw	r24, r28
    3908:	8f 5b       	subi	r24, 0xBF	; 191
    390a:	9e 4f       	sbci	r25, 0xFE	; 254
    390c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3910:	00 e0       	ldi	r16, 0x00	; 0
    3912:	10 e0       	ldi	r17, 0x00	; 0
    3914:	98 01       	movw	r18, r16
    3916:	b9 01       	movw	r22, r18
    3918:	a8 01       	movw	r20, r16
    391a:	ce 01       	movw	r24, r28
    391c:	87 5b       	subi	r24, 0xB7	; 183
    391e:	9e 4f       	sbci	r25, 0xFE	; 254
    3920:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3924:	00 e0       	ldi	r16, 0x00	; 0
    3926:	10 e0       	ldi	r17, 0x00	; 0
    3928:	98 01       	movw	r18, r16
    392a:	b9 01       	movw	r22, r18
    392c:	a8 01       	movw	r20, r16
    392e:	ce 01       	movw	r24, r28
    3930:	8f 5a       	subi	r24, 0xAF	; 175
    3932:	9e 4f       	sbci	r25, 0xFE	; 254
    3934:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3938:	00 e0       	ldi	r16, 0x00	; 0
    393a:	10 e0       	ldi	r17, 0x00	; 0
    393c:	98 01       	movw	r18, r16
    393e:	b9 01       	movw	r22, r18
    3940:	a8 01       	movw	r20, r16
    3942:	ce 01       	movw	r24, r28
    3944:	87 5a       	subi	r24, 0xA7	; 167
    3946:	9e 4f       	sbci	r25, 0xFE	; 254
    3948:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    394c:	00 e0       	ldi	r16, 0x00	; 0
    394e:	10 e0       	ldi	r17, 0x00	; 0
    3950:	98 01       	movw	r18, r16
    3952:	b9 01       	movw	r22, r18
    3954:	a8 01       	movw	r20, r16
    3956:	ce 01       	movw	r24, r28
    3958:	8f 59       	subi	r24, 0x9F	; 159
    395a:	9e 4f       	sbci	r25, 0xFE	; 254
    395c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3960:	00 e0       	ldi	r16, 0x00	; 0
    3962:	10 e0       	ldi	r17, 0x00	; 0
    3964:	98 01       	movw	r18, r16
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	50 e0       	ldi	r21, 0x00	; 0
    396a:	60 e8       	ldi	r22, 0x80	; 128
    396c:	7f e3       	ldi	r23, 0x3F	; 63
    396e:	ce 01       	movw	r24, r28
    3970:	87 59       	subi	r24, 0x97	; 151
    3972:	9e 4f       	sbci	r25, 0xFE	; 254
    3974:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3978:	00 e0       	ldi	r16, 0x00	; 0
    397a:	10 e0       	ldi	r17, 0x00	; 0
    397c:	98 01       	movw	r18, r16
    397e:	b9 01       	movw	r22, r18
    3980:	a8 01       	movw	r20, r16
    3982:	ce 01       	movw	r24, r28
    3984:	8f 58       	subi	r24, 0x8F	; 143
    3986:	9e 4f       	sbci	r25, 0xFE	; 254
    3988:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    398c:	00 e0       	ldi	r16, 0x00	; 0
    398e:	10 e0       	ldi	r17, 0x00	; 0
    3990:	98 01       	movw	r18, r16
    3992:	b9 01       	movw	r22, r18
    3994:	a8 01       	movw	r20, r16
    3996:	ce 01       	movw	r24, r28
    3998:	87 58       	subi	r24, 0x87	; 135
    399a:	9e 4f       	sbci	r25, 0xFE	; 254
    399c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    39a0:	00 e0       	ldi	r16, 0x00	; 0
    39a2:	10 e0       	ldi	r17, 0x00	; 0
    39a4:	98 01       	movw	r18, r16
    39a6:	b9 01       	movw	r22, r18
    39a8:	a8 01       	movw	r20, r16
    39aa:	ce 01       	movw	r24, r28
    39ac:	8f 57       	subi	r24, 0x7F	; 127
    39ae:	9e 4f       	sbci	r25, 0xFE	; 254
    39b0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    39b4:	00 e0       	ldi	r16, 0x00	; 0
    39b6:	10 e0       	ldi	r17, 0x00	; 0
    39b8:	98 01       	movw	r18, r16
    39ba:	b9 01       	movw	r22, r18
    39bc:	a8 01       	movw	r20, r16
    39be:	ce 01       	movw	r24, r28
    39c0:	87 57       	subi	r24, 0x77	; 119
    39c2:	9e 4f       	sbci	r25, 0xFE	; 254
    39c4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    39c8:	00 e0       	ldi	r16, 0x00	; 0
    39ca:	10 e0       	ldi	r17, 0x00	; 0
    39cc:	98 01       	movw	r18, r16
    39ce:	b9 01       	movw	r22, r18
    39d0:	a8 01       	movw	r20, r16
    39d2:	ce 01       	movw	r24, r28
    39d4:	8f 56       	subi	r24, 0x6F	; 111
    39d6:	9e 4f       	sbci	r25, 0xFE	; 254
    39d8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    39dc:	00 e0       	ldi	r16, 0x00	; 0
    39de:	10 e0       	ldi	r17, 0x00	; 0
    39e0:	98 01       	movw	r18, r16
    39e2:	b9 01       	movw	r22, r18
    39e4:	a8 01       	movw	r20, r16
    39e6:	ce 01       	movw	r24, r28
    39e8:	87 56       	subi	r24, 0x67	; 103
    39ea:	9e 4f       	sbci	r25, 0xFE	; 254
    39ec:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    39f0:	00 e0       	ldi	r16, 0x00	; 0
    39f2:	10 e0       	ldi	r17, 0x00	; 0
    39f4:	98 01       	movw	r18, r16
    39f6:	b9 01       	movw	r22, r18
    39f8:	a8 01       	movw	r20, r16
    39fa:	ce 01       	movw	r24, r28
    39fc:	8f 55       	subi	r24, 0x5F	; 95
    39fe:	9e 4f       	sbci	r25, 0xFE	; 254
    3a00:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3a04:	00 e0       	ldi	r16, 0x00	; 0
    3a06:	10 e0       	ldi	r17, 0x00	; 0
    3a08:	98 01       	movw	r18, r16
    3a0a:	b9 01       	movw	r22, r18
    3a0c:	a8 01       	movw	r20, r16
    3a0e:	ce 01       	movw	r24, r28
    3a10:	87 55       	subi	r24, 0x57	; 87
    3a12:	9e 4f       	sbci	r25, 0xFE	; 254
    3a14:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
														  {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),               Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
    3a18:	c5 01       	movw	r24, r10
    3a1a:	b4 01       	movw	r22, r8
    3a1c:	0e 94 aa 30 	call	0x6154	; 0x6154 <cos>
    3a20:	6b 01       	movw	r12, r22
    3a22:	7c 01       	movw	r14, r24
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    3a24:	8b 01       	movw	r16, r22
    3a26:	9c 01       	movw	r18, r24
    3a28:	40 e0       	ldi	r20, 0x00	; 0
    3a2a:	50 e0       	ldi	r21, 0x00	; 0
    3a2c:	ba 01       	movw	r22, r20
    3a2e:	ce 01       	movw	r24, r28
    3a30:	8f 54       	subi	r24, 0x4F	; 79
    3a32:	9e 4f       	sbci	r25, 0xFE	; 254
    3a34:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
														  {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),               Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
    3a38:	c5 01       	movw	r24, r10
    3a3a:	b4 01       	movw	r22, r8
    3a3c:	0e 94 be 33 	call	0x677c	; 0x677c <sin>
    3a40:	4b 01       	movw	r8, r22
    3a42:	5c 01       	movw	r10, r24
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    3a44:	00 e0       	ldi	r16, 0x00	; 0
    3a46:	10 e0       	ldi	r17, 0x00	; 0
    3a48:	98 01       	movw	r18, r16
    3a4a:	ab 01       	movw	r20, r22
    3a4c:	bc 01       	movw	r22, r24
    3a4e:	ce 01       	movw	r24, r28
    3a50:	87 54       	subi	r24, 0x47	; 71
    3a52:	9e 4f       	sbci	r25, 0xFE	; 254
    3a54:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3a58:	00 e0       	ldi	r16, 0x00	; 0
    3a5a:	10 e0       	ldi	r17, 0x00	; 0
    3a5c:	98 01       	movw	r18, r16
    3a5e:	b9 01       	movw	r22, r18
    3a60:	a8 01       	movw	r20, r16
    3a62:	ce 01       	movw	r24, r28
    3a64:	8f 53       	subi	r24, 0x3F	; 63
    3a66:	9e 4f       	sbci	r25, 0xFE	; 254
    3a68:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3a6c:	00 e0       	ldi	r16, 0x00	; 0
    3a6e:	10 e0       	ldi	r17, 0x00	; 0
    3a70:	98 01       	movw	r18, r16
    3a72:	b9 01       	movw	r22, r18
    3a74:	a8 01       	movw	r20, r16
    3a76:	ce 01       	movw	r24, r28
    3a78:	87 53       	subi	r24, 0x37	; 55
    3a7a:	9e 4f       	sbci	r25, 0xFE	; 254
    3a7c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3a80:	00 e0       	ldi	r16, 0x00	; 0
    3a82:	10 e0       	ldi	r17, 0x00	; 0
    3a84:	98 01       	movw	r18, r16
    3a86:	b9 01       	movw	r22, r18
    3a88:	a8 01       	movw	r20, r16
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	8f 52       	subi	r24, 0x2F	; 47
    3a8e:	9e 4f       	sbci	r25, 0xFE	; 254
    3a90:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3a94:	00 e0       	ldi	r16, 0x00	; 0
    3a96:	10 e0       	ldi	r17, 0x00	; 0
    3a98:	98 01       	movw	r18, r16
    3a9a:	b9 01       	movw	r22, r18
    3a9c:	a8 01       	movw	r20, r16
    3a9e:	ce 01       	movw	r24, r28
    3aa0:	87 52       	subi	r24, 0x27	; 39
    3aa2:	9e 4f       	sbci	r25, 0xFE	; 254
    3aa4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3aa8:	00 e0       	ldi	r16, 0x00	; 0
    3aaa:	10 e0       	ldi	r17, 0x00	; 0
    3aac:	98 01       	movw	r18, r16
    3aae:	b9 01       	movw	r22, r18
    3ab0:	a8 01       	movw	r20, r16
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	8f 51       	subi	r24, 0x1F	; 31
    3ab6:	9e 4f       	sbci	r25, 0xFE	; 254
    3ab8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3abc:	00 e0       	ldi	r16, 0x00	; 0
    3abe:	10 e0       	ldi	r17, 0x00	; 0
    3ac0:	98 01       	movw	r18, r16
    3ac2:	b9 01       	movw	r22, r18
    3ac4:	a8 01       	movw	r20, r16
    3ac6:	ce 01       	movw	r24, r28
    3ac8:	87 51       	subi	r24, 0x17	; 23
    3aca:	9e 4f       	sbci	r25, 0xFE	; 254
    3acc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3ad0:	00 e0       	ldi	r16, 0x00	; 0
    3ad2:	10 e0       	ldi	r17, 0x00	; 0
    3ad4:	98 01       	movw	r18, r16
    3ad6:	b5 01       	movw	r22, r10
    3ad8:	a4 01       	movw	r20, r8
    3ada:	ce 01       	movw	r24, r28
    3adc:	8f 50       	subi	r24, 0x0F	; 15
    3ade:	9e 4f       	sbci	r25, 0xFE	; 254
    3ae0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3ae4:	97 01       	movw	r18, r14
    3ae6:	86 01       	movw	r16, r12
    3ae8:	40 e0       	ldi	r20, 0x00	; 0
    3aea:	50 e0       	ldi	r21, 0x00	; 0
    3aec:	ba 01       	movw	r22, r20
    3aee:	ce 01       	movw	r24, r28
    3af0:	87 50       	subi	r24, 0x07	; 7
    3af2:	9e 4f       	sbci	r25, 0xFE	; 254
    3af4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    3af8:	c9 5f       	subi	r28, 0xF9	; 249
    3afa:	dd 4f       	sbci	r29, 0xFD	; 253
    3afc:	59 82       	std	Y+1, r5	; 0x01
    3afe:	48 82       	st	Y, r4
    3b00:	c7 50       	subi	r28, 0x07	; 7
    3b02:	d2 40       	sbci	r29, 0x02	; 2
    3b04:	c7 5f       	subi	r28, 0xF7	; 247
    3b06:	dd 4f       	sbci	r29, 0xFD	; 253
    3b08:	79 82       	std	Y+1, r7	; 0x01
    3b0a:	68 82       	st	Y, r6
    3b0c:	c9 50       	subi	r28, 0x09	; 9
    3b0e:	d2 40       	sbci	r29, 0x02	; 2
    3b10:	c5 5f       	subi	r28, 0xF5	; 245
    3b12:	dd 4f       	sbci	r29, 0xFD	; 253
    3b14:	39 82       	std	Y+1, r3	; 0x01
    3b16:	28 82       	st	Y, r2
    3b18:	cb 50       	subi	r28, 0x0B	; 11
    3b1a:	d2 40       	sbci	r29, 0x02	; 2
    3b1c:	c1 5f       	subi	r28, 0xF1	; 241
    3b1e:	dd 4f       	sbci	r29, 0xFD	; 253
    3b20:	88 81       	ld	r24, Y
    3b22:	99 81       	ldd	r25, Y+1	; 0x01
    3b24:	cf 50       	subi	r28, 0x0F	; 15
    3b26:	d2 40       	sbci	r29, 0x02	; 2
    3b28:	cf 5f       	subi	r28, 0xFF	; 255
    3b2a:	dd 4f       	sbci	r29, 0xFD	; 253
    3b2c:	99 83       	std	Y+1, r25	; 0x01
    3b2e:	88 83       	st	Y, r24
    3b30:	c1 50       	subi	r28, 0x01	; 1
    3b32:	d2 40       	sbci	r29, 0x02	; 2
    3b34:	cf 5e       	subi	r28, 0xEF	; 239
    3b36:	dd 4f       	sbci	r29, 0xFD	; 253
    3b38:	88 81       	ld	r24, Y
    3b3a:	99 81       	ldd	r25, Y+1	; 0x01
    3b3c:	c1 51       	subi	r28, 0x11	; 17
    3b3e:	d2 40       	sbci	r29, 0x02	; 2
    3b40:	cd 5f       	subi	r28, 0xFD	; 253
    3b42:	dd 4f       	sbci	r29, 0xFD	; 253
    3b44:	99 83       	std	Y+1, r25	; 0x01
    3b46:	88 83       	st	Y, r24
    3b48:	c3 50       	subi	r28, 0x03	; 3
    3b4a:	d2 40       	sbci	r29, 0x02	; 2
    3b4c:	cd 5e       	subi	r28, 0xED	; 237
    3b4e:	dd 4f       	sbci	r29, 0xFD	; 253
    3b50:	88 81       	ld	r24, Y
    3b52:	99 81       	ldd	r25, Y+1	; 0x01
    3b54:	c3 51       	subi	r28, 0x13	; 19
    3b56:	d2 40       	sbci	r29, 0x02	; 2
    3b58:	cb 5f       	subi	r28, 0xFB	; 251
    3b5a:	dd 4f       	sbci	r29, 0xFD	; 253
    3b5c:	99 83       	std	Y+1, r25	; 0x01
    3b5e:	88 83       	st	Y, r24
    3b60:	c5 50       	subi	r28, 0x05	; 5
    3b62:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),deu_matrix),QB_SIZE3);	
    3b64:	9e 01       	movw	r18, r28
    3b66:	2f 5f       	subi	r18, 0xFF	; 255
    3b68:	3d 4f       	sbci	r19, 0xFD	; 253
    3b6a:	ae 01       	movw	r20, r28
    3b6c:	49 5f       	subi	r20, 0xF9	; 249
    3b6e:	5d 4f       	sbci	r21, 0xFD	; 253
    3b70:	63 e0       	ldi	r22, 0x03	; 3
    3b72:	70 e0       	ldi	r23, 0x00	; 0
    3b74:	c3 5f       	subi	r28, 0xF3	; 243
    3b76:	dd 4f       	sbci	r29, 0xFD	; 253
    3b78:	88 81       	ld	r24, Y
    3b7a:	99 81       	ldd	r25, Y+1	; 0x01
    3b7c:	cd 50       	subi	r28, 0x0D	; 13
    3b7e:	d2 40       	sbci	r29, 0x02	; 2
    3b80:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Gates8ampl2vecEiPiS0_>
    3b84:	ae 01       	movw	r20, r28
    3b86:	4f 5f       	subi	r20, 0xFF	; 255
    3b88:	5f 4f       	sbci	r21, 0xFF	; 255
    3b8a:	bc 01       	movw	r22, r24
    3b8c:	c3 5f       	subi	r28, 0xF3	; 243
    3b8e:	dd 4f       	sbci	r29, 0xFD	; 253
    3b90:	88 81       	ld	r24, Y
    3b92:	99 81       	ldd	r25, Y+1	; 0x01
    3b94:	cd 50       	subi	r28, 0x0D	; 13
    3b96:	d2 40       	sbci	r29, 0x02	; 2
    3b98:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    3b9c:	43 e0       	ldi	r20, 0x03	; 3
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	bc 01       	movw	r22, r24
    3ba2:	c3 5f       	subi	r28, 0xF3	; 243
    3ba4:	dd 4f       	sbci	r29, 0xFD	; 253
    3ba6:	88 81       	ld	r24, Y
    3ba8:	99 81       	ldd	r25, Y+1	; 0x01
    3baa:	cd 50       	subi	r28, 0x0D	; 13
    3bac:	d2 40       	sbci	r29, 0x02	; 2
    3bae:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Gates8vec2amplEP7Complexi>
    3bb2:	cc 5e       	subi	r28, 0xEC	; 236
    3bb4:	dd 4f       	sbci	r29, 0xFD	; 253
    3bb6:	0f b6       	in	r0, 0x3f	; 63
    3bb8:	f8 94       	cli
    3bba:	de bf       	out	0x3e, r29	; 62
    3bbc:	0f be       	out	0x3f, r0	; 63
    3bbe:	cd bf       	out	0x3d, r28	; 61
    3bc0:	df 91       	pop	r29
    3bc2:	cf 91       	pop	r28
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    3bc8:	ff 90       	pop	r15
    3bca:	ef 90       	pop	r14
    3bcc:	df 90       	pop	r13
    3bce:	cf 90       	pop	r12
    3bd0:	bf 90       	pop	r11
    3bd2:	af 90       	pop	r10
    3bd4:	9f 90       	pop	r9
    3bd6:	8f 90       	pop	r8
    3bd8:	7f 90       	pop	r7
    3bda:	6f 90       	pop	r6
    3bdc:	5f 90       	pop	r5
    3bde:	4f 90       	pop	r4
    3be0:	3f 90       	pop	r3
    3be2:	2f 90       	pop	r2
    3be4:	08 95       	ret

00003be6 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){}

Serial s;
    3be6:	85 e5       	ldi	r24, 0x55	; 85
    3be8:	91 e0       	ldi	r25, 0x01	; 1
    3bea:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <_ZN6SerialC1Ev>
    3bee:	08 95       	ret

00003bf0 <_ZN4QEPU13interrupt_cpuEi>:
#include "qepu.h"

void QEPU::interrupt_cpu(int interrupt_type){
    3bf0:	08 95       	ret

00003bf2 <_ZN4QEPU9JumpstackC1Ev>:
#include "qepu.h"

QEPU::Jumpstack::Jumpstack():newest_address_index(0){
    3bf2:	fc 01       	movw	r30, r24
    3bf4:	11 82       	std	Z+1, r1	; 0x01
    3bf6:	10 82       	st	Z, r1
    3bf8:	08 95       	ret

00003bfa <_ZN4QEPU9Jumpstack4pushEi>:
	
}
void QEPU::Jumpstack::push(int newaddress){
	addresses_toreturn[newest_address_index]=newaddress;
    3bfa:	fc 01       	movw	r30, r24
    3bfc:	20 81       	ld	r18, Z
    3bfe:	31 81       	ldd	r19, Z+1	; 0x01
    3c00:	2f 5f       	subi	r18, 0xFF	; 255
    3c02:	3f 4f       	sbci	r19, 0xFF	; 255
    3c04:	f9 01       	movw	r30, r18
    3c06:	ee 0f       	add	r30, r30
    3c08:	ff 1f       	adc	r31, r31
    3c0a:	e8 0f       	add	r30, r24
    3c0c:	f9 1f       	adc	r31, r25
    3c0e:	71 83       	std	Z+1, r23	; 0x01
    3c10:	60 83       	st	Z, r22
	newest_address_index++;
    3c12:	fc 01       	movw	r30, r24
    3c14:	31 83       	std	Z+1, r19	; 0x01
    3c16:	20 83       	st	Z, r18
    3c18:	08 95       	ret

00003c1a <_ZN4QEPU9Jumpstack3popEv>:
}
int QEPU::Jumpstack::pop(){
    3c1a:	fc 01       	movw	r30, r24
	if(newest_address_index<=0) return 0;
    3c1c:	80 81       	ld	r24, Z
    3c1e:	91 81       	ldd	r25, Z+1	; 0x01
    3c20:	18 16       	cp	r1, r24
    3c22:	19 06       	cpc	r1, r25
    3c24:	ac f4       	brge	.+42     	; 0x3c50 <_ZN4QEPU9Jumpstack3popEv+0x36>
	int address_returning=addresses_toreturn[newest_address_index-1];
    3c26:	01 97       	sbiw	r24, 0x01	; 1
    3c28:	dc 01       	movw	r26, r24
    3c2a:	aa 0f       	add	r26, r26
    3c2c:	bb 1f       	adc	r27, r27
    3c2e:	ae 0f       	add	r26, r30
    3c30:	bf 1f       	adc	r27, r31
    3c32:	12 96       	adiw	r26, 0x02	; 2
    3c34:	3c 91       	ld	r19, X
    3c36:	12 97       	sbiw	r26, 0x02	; 2
    3c38:	13 96       	adiw	r26, 0x03	; 3
    3c3a:	2c 91       	ld	r18, X
    3c3c:	13 97       	sbiw	r26, 0x03	; 3
	addresses_toreturn[newest_address_index-1]=0;
    3c3e:	13 96       	adiw	r26, 0x03	; 3
    3c40:	1c 92       	st	X, r1
    3c42:	1e 92       	st	-X, r1
    3c44:	12 97       	sbiw	r26, 0x02	; 2
	newest_address_index--;
    3c46:	91 83       	std	Z+1, r25	; 0x01
    3c48:	80 83       	st	Z, r24
	return address_returning;
    3c4a:	83 2f       	mov	r24, r19
    3c4c:	92 2f       	mov	r25, r18
    3c4e:	08 95       	ret
void QEPU::Jumpstack::push(int newaddress){
	addresses_toreturn[newest_address_index]=newaddress;
	newest_address_index++;
}
int QEPU::Jumpstack::pop(){
	if(newest_address_index<=0) return 0;
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	90 e0       	ldi	r25, 0x00	; 0
	int address_returning=addresses_toreturn[newest_address_index-1];
	addresses_toreturn[newest_address_index-1]=0;
	newest_address_index--;
	return address_returning;
}
    3c54:	08 95       	ret

00003c56 <_ZN4QEPU10setup_seedEv>:

//SETUP SEED FOR RAND():
uint16_t EEMEM randinit;

void QEPU::setup_seed(){
	srand(eeprom_read_word(&randinit));
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	0e 94 22 39 	call	0x7244	; 0x7244 <__eerd_word_m32>
    3c5e:	0e 94 d7 35 	call	0x6bae	; 0x6bae <srand>
	eeprom_write_word(&randinit,rand()%10000);
    3c62:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <rand>
    3c66:	60 e1       	ldi	r22, 0x10	; 16
    3c68:	77 e2       	ldi	r23, 0x27	; 39
    3c6a:	0e 94 2f 34 	call	0x685e	; 0x685e <__divmodhi4>
    3c6e:	bc 01       	movw	r22, r24
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	0e 94 28 39 	call	0x7250	; 0x7250 <__eewr_word_m32>
    3c78:	08 95       	ret

00003c7a <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){serial.writestr("INITIALIZING . . . ");setup_seed();CTRL_QB_DIR=OUTPUT;program_counter=0;program_counter_maximum=0;}
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	ec 01       	movw	r28, r24
    3c84:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN4QEPU4FlagC1Ev>
    3c88:	8e 01       	movw	r16, r28
    3c8a:	0f 5f       	subi	r16, 0xFF	; 255
    3c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8e:	c8 01       	movw	r24, r16
    3c90:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <_ZN6SerialC1Ev>
    3c94:	ce 01       	movw	r24, r28
    3c96:	02 96       	adiw	r24, 0x02	; 2
    3c98:	0e 94 2b 02 	call	0x456	; 0x456 <_ZN6EEPromC1Ev>
    3c9c:	ce 01       	movw	r24, r28
    3c9e:	03 96       	adiw	r24, 0x03	; 3
    3ca0:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <_ZN4SRAMC1Ev>
    3ca4:	ce 01       	movw	r24, r28
    3ca6:	09 96       	adiw	r24, 0x09	; 9
    3ca8:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN5GatesC1Ev>
    3cac:	ce 01       	movw	r24, r28
    3cae:	0a 96       	adiw	r24, 0x0a	; 10
    3cb0:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <_ZN4QEPU9JumpstackC1Ev>
    3cb4:	66 e8       	ldi	r22, 0x86	; 134
    3cb6:	70 e0       	ldi	r23, 0x00	; 0
    3cb8:	c8 01       	movw	r24, r16
    3cba:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
    3cbe:	ce 01       	movw	r24, r28
    3cc0:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <_ZN4QEPU10setup_seedEv>
    3cc4:	8f ef       	ldi	r24, 0xFF	; 255
    3cc6:	8a bb       	out	0x1a, r24	; 26
    3cc8:	fe 01       	movw	r30, r28
    3cca:	eb 52       	subi	r30, 0x2B	; 43
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	11 82       	std	Z+1, r1	; 0x01
    3cd0:	10 82       	st	Z, r1
    3cd2:	c9 52       	subi	r28, 0x29	; 41
    3cd4:	df 4f       	sbci	r29, 0xFF	; 255
    3cd6:	19 82       	std	Y+1, r1	; 0x01
    3cd8:	18 82       	st	Y, r1
    3cda:	df 91       	pop	r29
    3cdc:	cf 91       	pop	r28
    3cde:	1f 91       	pop	r17
    3ce0:	0f 91       	pop	r16
    3ce2:	08 95       	ret

00003ce4 <_ZN4QEPU14setbuffctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	BUS_OUT&=~(1<<pin); // CLEAR PIN
	BUS_OUT|=(state<<pin); // SET PIN
}
void QEPU::setbuffctrlpin(int pin,int state){
	CTRL_BUFF&=~(1<<pin); // CLEAR PIN
    3ce4:	75 b3       	in	r23, 0x15	; 21
    3ce6:	21 e0       	ldi	r18, 0x01	; 1
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	c9 01       	movw	r24, r18
    3cec:	06 2e       	mov	r0, r22
    3cee:	02 c0       	rjmp	.+4      	; 0x3cf4 <_ZN4QEPU14setbuffctrlpinEii+0x10>
    3cf0:	88 0f       	add	r24, r24
    3cf2:	99 1f       	adc	r25, r25
    3cf4:	0a 94       	dec	r0
    3cf6:	e2 f7       	brpl	.-8      	; 0x3cf0 <_ZN4QEPU14setbuffctrlpinEii+0xc>
    3cf8:	80 95       	com	r24
    3cfa:	87 23       	and	r24, r23
    3cfc:	85 bb       	out	0x15, r24	; 21
	CTRL_BUFF|=(state<<pin); // SET PIN
    3cfe:	85 b3       	in	r24, 0x15	; 21
    3d00:	02 c0       	rjmp	.+4      	; 0x3d06 <_ZN4QEPU14setbuffctrlpinEii+0x22>
    3d02:	44 0f       	add	r20, r20
    3d04:	55 1f       	adc	r21, r21
    3d06:	6a 95       	dec	r22
    3d08:	e2 f7       	brpl	.-8      	; 0x3d02 <_ZN4QEPU14setbuffctrlpinEii+0x1e>
    3d0a:	48 2b       	or	r20, r24
    3d0c:	45 bb       	out	0x15, r20	; 21
    3d0e:	08 95       	ret

00003d10 <_ZN4QEPU14deselect_qubitEv>:
	//TODO: TOUCH QUBIT
	
	return deg_read;
}
void QEPU::deselect_qubit(){
	CTRL_BUFF_DIR=OUTPUT;
    3d10:	2f ef       	ldi	r18, 0xFF	; 255
    3d12:	24 bb       	out	0x14, r18	; 20
	setbuffctrlpin(EO_AB,LOW);
    3d14:	40 e0       	ldi	r20, 0x00	; 0
    3d16:	50 e0       	ldi	r21, 0x00	; 0
    3d18:	64 e0       	ldi	r22, 0x04	; 4
    3d1a:	70 e0       	ldi	r23, 0x00	; 0
    3d1c:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <_ZN4QEPU14setbuffctrlpinEii>
    3d20:	08 95       	ret

00003d22 <_ZN4QEPU12select_qubitEi>:
}
void QEPU::select_qubit(int index){
    3d22:	af 92       	push	r10
    3d24:	bf 92       	push	r11
    3d26:	cf 92       	push	r12
    3d28:	df 92       	push	r13
    3d2a:	ef 92       	push	r14
    3d2c:	ff 92       	push	r15
    3d2e:	0f 93       	push	r16
    3d30:	1f 93       	push	r17
    3d32:	cf 93       	push	r28
    3d34:	df 93       	push	r29
    3d36:	00 d0       	rcall	.+0      	; 0x3d38 <_ZN4QEPU12select_qubitEi+0x16>
    3d38:	00 d0       	rcall	.+0      	; 0x3d3a <_ZN4QEPU12select_qubitEi+0x18>
    3d3a:	00 d0       	rcall	.+0      	; 0x3d3c <_ZN4QEPU12select_qubitEi+0x1a>
    3d3c:	cd b7       	in	r28, 0x3d	; 61
    3d3e:	de b7       	in	r29, 0x3e	; 62
    3d40:	8c 01       	movw	r16, r24
	int address_buffer[ADDRESS_BUFFER_SIZE];
	int mask_bit_addressbuff=0b1111;
	for(int i=0;i<ADDRESS_BUFFER_SIZE;i++){
		address_buffer[i]=(index&mask_bit_addressbuff)>>(4*i);
    3d42:	cb 01       	movw	r24, r22
    3d44:	8f 70       	andi	r24, 0x0F	; 15
    3d46:	99 27       	eor	r25, r25
    3d48:	9a 83       	std	Y+2, r25	; 0x02
    3d4a:	89 83       	std	Y+1, r24	; 0x01
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	80 7f       	andi	r24, 0xF0	; 240
    3d50:	99 27       	eor	r25, r25
    3d52:	95 95       	asr	r25
    3d54:	87 95       	ror	r24
    3d56:	95 95       	asr	r25
    3d58:	87 95       	ror	r24
    3d5a:	95 95       	asr	r25
    3d5c:	87 95       	ror	r24
    3d5e:	95 95       	asr	r25
    3d60:	87 95       	ror	r24
    3d62:	9c 83       	std	Y+4, r25	; 0x04
    3d64:	8b 83       	std	Y+3, r24	; 0x03
    3d66:	66 27       	eor	r22, r22
    3d68:	7f 70       	andi	r23, 0x0F	; 15
    3d6a:	87 2f       	mov	r24, r23
    3d6c:	88 0f       	add	r24, r24
    3d6e:	88 0b       	sbc	r24, r24
    3d70:	7d 83       	std	Y+5, r23	; 0x05
    3d72:	8e 83       	std	Y+6, r24	; 0x06
		mask_bit_addressbuff<<=4;
	}
	CTRL_QB_DIR=OUTPUT;
    3d74:	8f ef       	ldi	r24, 0xFF	; 255
    3d76:	8a bb       	out	0x1a, r24	; 26
	CTRL_BUFF_DIR=OUTPUT;
    3d78:	84 bb       	out	0x14, r24	; 20
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	8b bb       	out	0x1b, r24	; 27
	}
	CTRL_QB_DIR=OUTPUT;
	CTRL_BUFF_DIR=OUTPUT;
	
	setctrl(address_buffer[0]);
	setbuffctrlpin(IN_ABBUFFER_START,HIGH);
    3d7e:	41 e0       	ldi	r20, 0x01	; 1
    3d80:	50 e0       	ldi	r21, 0x00	; 0
    3d82:	62 e0       	ldi	r22, 0x02	; 2
    3d84:	70 e0       	ldi	r23, 0x00	; 0
    3d86:	c8 01       	movw	r24, r16
    3d88:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    3d8c:	41 e0       	ldi	r20, 0x01	; 1
    3d8e:	50 e0       	ldi	r21, 0x00	; 0
    3d90:	63 e0       	ldi	r22, 0x03	; 3
    3d92:	70 e0       	ldi	r23, 0x00	; 0
    3d94:	c8 01       	movw	r24, r16
    3d96:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    3d9a:	40 e0       	ldi	r20, 0x00	; 0
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	63 e0       	ldi	r22, 0x03	; 3
    3da0:	70 e0       	ldi	r23, 0x00	; 0
    3da2:	c8 01       	movw	r24, r16
    3da4:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_START,LOW);
    3da8:	40 e0       	ldi	r20, 0x00	; 0
    3daa:	50 e0       	ldi	r21, 0x00	; 0
    3dac:	62 e0       	ldi	r22, 0x02	; 2
    3dae:	70 e0       	ldi	r23, 0x00	; 0
    3db0:	c8 01       	movw	r24, r16
    3db2:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <_ZN4QEPU14setbuffctrlpinEii>
	utils.delay(ADDRESS_WRITE_DELAY);
    3db6:	68 01       	movw	r12, r16
    3db8:	84 ed       	ldi	r24, 0xD4	; 212
    3dba:	c8 0e       	add	r12, r24
    3dbc:	d1 1c       	adc	r13, r1
    3dbe:	6a e0       	ldi	r22, 0x0A	; 10
    3dc0:	70 e0       	ldi	r23, 0x00	; 0
    3dc2:	c6 01       	movw	r24, r12
    3dc4:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN5Utils5delayEi>
    3dc8:	7e 01       	movw	r14, r28
    3dca:	93 e0       	ldi	r25, 0x03	; 3
    3dcc:	e9 0e       	add	r14, r25
    3dce:	f1 1c       	adc	r15, r1
    3dd0:	5e 01       	movw	r10, r28
    3dd2:	e7 e0       	ldi	r30, 0x07	; 7
    3dd4:	ae 0e       	add	r10, r30
    3dd6:	b1 1c       	adc	r11, r1
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    3dd8:	41 e0       	ldi	r20, 0x01	; 1
    3dda:	50 e0       	ldi	r21, 0x00	; 0
    3ddc:	63 e0       	ldi	r22, 0x03	; 3
    3dde:	70 e0       	ldi	r23, 0x00	; 0
    3de0:	c8 01       	movw	r24, r16
    3de2:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <_ZN4QEPU14setbuffctrlpinEii>
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    3de6:	40 e0       	ldi	r20, 0x00	; 0
    3de8:	50 e0       	ldi	r21, 0x00	; 0
    3dea:	63 e0       	ldi	r22, 0x03	; 3
    3dec:	70 e0       	ldi	r23, 0x00	; 0
    3dee:	c8 01       	movw	r24, r16
    3df0:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <_ZN4QEPU14setbuffctrlpinEii>
		setctrl(address_buffer[i]);
    3df4:	f7 01       	movw	r30, r14
    3df6:	80 81       	ld	r24, Z
    3df8:	f2 e0       	ldi	r31, 0x02	; 2
    3dfa:	ef 0e       	add	r14, r31
    3dfc:	f1 1c       	adc	r15, r1
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    3dfe:	8b bb       	out	0x1b, r24	; 27
	utils.delay(ADDRESS_WRITE_DELAY);
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
		setctrl(address_buffer[i]);
		utils.delay(ADDRESS_WRITE_DELAY);
    3e00:	6a e0       	ldi	r22, 0x0A	; 10
    3e02:	70 e0       	ldi	r23, 0x00	; 0
    3e04:	c6 01       	movw	r24, r12
    3e06:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN5Utils5delayEi>
	setbuffctrlpin(IN_ABBUFFER_START,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(IN_ABBUFFER_START,LOW);
	utils.delay(ADDRESS_WRITE_DELAY);
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
    3e0a:	ea 14       	cp	r14, r10
    3e0c:	fb 04       	cpc	r15, r11
    3e0e:	21 f7       	brne	.-56     	; 0x3dd8 <_ZN4QEPU12select_qubitEi+0xb6>
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
		setctrl(address_buffer[i]);
		utils.delay(ADDRESS_WRITE_DELAY);
	}
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    3e10:	41 e0       	ldi	r20, 0x01	; 1
    3e12:	50 e0       	ldi	r21, 0x00	; 0
    3e14:	63 e0       	ldi	r22, 0x03	; 3
    3e16:	70 e0       	ldi	r23, 0x00	; 0
    3e18:	c8 01       	movw	r24, r16
    3e1a:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    3e1e:	40 e0       	ldi	r20, 0x00	; 0
    3e20:	50 e0       	ldi	r21, 0x00	; 0
    3e22:	63 e0       	ldi	r22, 0x03	; 3
    3e24:	70 e0       	ldi	r23, 0x00	; 0
    3e26:	c8 01       	movw	r24, r16
    3e28:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(EO_AB,HIGH);
    3e2c:	41 e0       	ldi	r20, 0x01	; 1
    3e2e:	50 e0       	ldi	r21, 0x00	; 0
    3e30:	64 e0       	ldi	r22, 0x04	; 4
    3e32:	70 e0       	ldi	r23, 0x00	; 0
    3e34:	c8 01       	movw	r24, r16
    3e36:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <_ZN4QEPU14setbuffctrlpinEii>
}
    3e3a:	26 96       	adiw	r28, 0x06	; 6
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	f8 94       	cli
    3e40:	de bf       	out	0x3e, r29	; 62
    3e42:	0f be       	out	0x3f, r0	; 63
    3e44:	cd bf       	out	0x3d, r28	; 61
    3e46:	df 91       	pop	r29
    3e48:	cf 91       	pop	r28
    3e4a:	1f 91       	pop	r17
    3e4c:	0f 91       	pop	r16
    3e4e:	ff 90       	pop	r15
    3e50:	ef 90       	pop	r14
    3e52:	df 90       	pop	r13
    3e54:	cf 90       	pop	r12
    3e56:	bf 90       	pop	r11
    3e58:	af 90       	pop	r10
    3e5a:	08 95       	ret

00003e5c <_ZN4QEPU10setctrlpinEii>:
void QEPU::setbuffctrlpin(int pin,int state){
	CTRL_BUFF&=~(1<<pin); // CLEAR PIN
	CTRL_BUFF|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	CTRL_QB&=~(1<<pin); // CLEAR PIN
    3e5c:	7b b3       	in	r23, 0x1b	; 27
    3e5e:	21 e0       	ldi	r18, 0x01	; 1
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	c9 01       	movw	r24, r18
    3e64:	06 2e       	mov	r0, r22
    3e66:	02 c0       	rjmp	.+4      	; 0x3e6c <_ZN4QEPU10setctrlpinEii+0x10>
    3e68:	88 0f       	add	r24, r24
    3e6a:	99 1f       	adc	r25, r25
    3e6c:	0a 94       	dec	r0
    3e6e:	e2 f7       	brpl	.-8      	; 0x3e68 <_ZN4QEPU10setctrlpinEii+0xc>
    3e70:	80 95       	com	r24
    3e72:	87 23       	and	r24, r23
    3e74:	8b bb       	out	0x1b, r24	; 27
	CTRL_QB|=(state<<pin); // SET PIN
    3e76:	8b b3       	in	r24, 0x1b	; 27
    3e78:	02 c0       	rjmp	.+4      	; 0x3e7e <_ZN4QEPU10setctrlpinEii+0x22>
    3e7a:	44 0f       	add	r20, r20
    3e7c:	55 1f       	adc	r21, r21
    3e7e:	6a 95       	dec	r22
    3e80:	e2 f7       	brpl	.-8      	; 0x3e7a <_ZN4QEPU10setctrlpinEii+0x1e>
    3e82:	48 2b       	or	r20, r24
    3e84:	4b bb       	out	0x1b, r20	; 27
    3e86:	08 95       	ret

00003e88 <_ZN4QEPU5writeEiii>:
void QEPU::close_bus(){
	setctrl(0); // CLOSE ALL CONTROLS
	deselect_qubit(); // DESELECT ALL QUBITS
	bus_write(LOW);
}
void QEPU::write(int index,int dim,int deg){
    3e88:	ff 92       	push	r15
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
    3e92:	ec 01       	movw	r28, r24
    3e94:	8a 01       	movw	r16, r20
	BUS_DIR=OUTPUT;
    3e96:	ff 24       	eor	r15, r15
    3e98:	fa 94       	dec	r15
    3e9a:	f7 ba       	out	0x17, r15	; 23
	eeprom_write_word(&randinit,rand()%10000);
}

//QUBIT MEMORY HANDLING:
void QEPU::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    3e9c:	f7 ba       	out	0x17, r15	; 23
	BUS_OUT=data;
    3e9e:	28 bb       	out	0x18, r18	; 24
}
void QEPU::write(int index,int dim,int deg){
	BUS_DIR=OUTPUT;
	
	bus_write(deg);
	select_qubit(index);
    3ea0:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN4QEPU12select_qubitEi>
	setctrlpin(DIM_SEL,dim);
    3ea4:	a8 01       	movw	r20, r16
    3ea6:	64 e0       	ldi	r22, 0x04	; 4
    3ea8:	70 e0       	ldi	r23, 0x00	; 0
    3eaa:	ce 01       	movw	r24, r28
    3eac:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN4QEPU10setctrlpinEii>
	setctrlpin(WRITE_QB,HIGH); // CLOCK UP LOAD
    3eb0:	41 e0       	ldi	r20, 0x01	; 1
    3eb2:	50 e0       	ldi	r21, 0x00	; 0
    3eb4:	66 e0       	ldi	r22, 0x06	; 6
    3eb6:	70 e0       	ldi	r23, 0x00	; 0
    3eb8:	ce 01       	movw	r24, r28
    3eba:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN4QEPU10setctrlpinEii>
	setctrlpin(WRITE_QB,LOW); // CLOCK DOWN LOAD
    3ebe:	40 e0       	ldi	r20, 0x00	; 0
    3ec0:	50 e0       	ldi	r21, 0x00	; 0
    3ec2:	66 e0       	ldi	r22, 0x06	; 6
    3ec4:	70 e0       	ldi	r23, 0x00	; 0
    3ec6:	ce 01       	movw	r24, r28
    3ec8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN4QEPU10setctrlpinEii>
	eeprom_write_word(&randinit,rand()%10000);
}

//QUBIT MEMORY HANDLING:
void QEPU::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    3ecc:	f7 ba       	out	0x17, r15	; 23
	BUS_OUT=data;
    3ece:	18 ba       	out	0x18, r1	; 24
	select_qubit(index);
	setctrlpin(DIM_SEL,dim);
	setctrlpin(WRITE_QB,HIGH); // CLOCK UP LOAD
	setctrlpin(WRITE_QB,LOW); // CLOCK DOWN LOAD
	bus_write(LOW);
	deselect_qubit();
    3ed0:	ce 01       	movw	r24, r28
    3ed2:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <_ZN4QEPU14deselect_qubitEv>
}
    3ed6:	df 91       	pop	r29
    3ed8:	cf 91       	pop	r28
    3eda:	1f 91       	pop	r17
    3edc:	0f 91       	pop	r16
    3ede:	ff 90       	pop	r15
    3ee0:	08 95       	ret

00003ee2 <_ZN4QEPU4readEiib>:
int QEPU::read(int index,int dim,bool freeze_bus){
    3ee2:	ff 92       	push	r15
    3ee4:	0f 93       	push	r16
    3ee6:	1f 93       	push	r17
    3ee8:	cf 93       	push	r28
    3eea:	df 93       	push	r29
    3eec:	ec 01       	movw	r28, r24
    3eee:	8a 01       	movw	r16, r20
    3ef0:	f2 2e       	mov	r15, r18
	BUS_DIR=INPUT;
    3ef2:	17 ba       	out	0x17, r1	; 23
	
	select_qubit(index);
    3ef4:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN4QEPU12select_qubitEi>
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    3ef8:	41 e0       	ldi	r20, 0x01	; 1
    3efa:	50 e0       	ldi	r21, 0x00	; 0
    3efc:	65 e0       	ldi	r22, 0x05	; 5
    3efe:	70 e0       	ldi	r23, 0x00	; 0
    3f00:	ce 01       	movw	r24, r28
    3f02:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    3f06:	a8 01       	movw	r20, r16
    3f08:	64 e0       	ldi	r22, 0x04	; 4
    3f0a:	70 e0       	ldi	r23, 0x00	; 0
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_ZN4QEPU10setctrlpinEii>
	int deg_read=BUS_IN; // READ INPUT
    3f12:	06 b3       	in	r16, 0x16	; 22
    3f14:	10 e0       	ldi	r17, 0x00	; 0
	//CLOSE ALL AND GATES
	BUS_DIR=OUTPUT;
    3f16:	8f ef       	ldi	r24, 0xFF	; 255
    3f18:	87 bb       	out	0x17, r24	; 23
	if(!freeze_bus){
    3f1a:	f1 10       	cpse	r15, r1
    3f1c:	04 c0       	rjmp	.+8      	; 0x3f26 <_ZN4QEPU4readEiib+0x44>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    3f1e:	1b ba       	out	0x1b, r1	; 27
	int deg_read=BUS_IN; // READ INPUT
	//CLOSE ALL AND GATES
	BUS_DIR=OUTPUT;
	if(!freeze_bus){
		setctrl(0); // CLOSE ALL CONTROLS
		deselect_qubit();
    3f20:	ce 01       	movw	r24, r28
    3f22:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <_ZN4QEPU14deselect_qubitEv>
	}
	//TODO: TOUCH QUBIT
	
	return deg_read;
}
    3f26:	c8 01       	movw	r24, r16
    3f28:	df 91       	pop	r29
    3f2a:	cf 91       	pop	r28
    3f2c:	1f 91       	pop	r17
    3f2e:	0f 91       	pop	r16
    3f30:	ff 90       	pop	r15
    3f32:	08 95       	ret

00003f34 <_ZN4QEPU7measureEi>:
}
void QEPU::setctrlpin(int pin,int state){
	CTRL_QB&=~(1<<pin); // CLEAR PIN
	CTRL_QB|=(state<<pin); // SET PIN
}
int QEPU::measure(int amplitude){
    3f34:	cf 93       	push	r28
    3f36:	df 93       	push	r29
    3f38:	ec 01       	movw	r28, r24
	return gates.touch(utils.custom_pow(sin(amplitude*M_PI/360),2));
    3f3a:	88 27       	eor	r24, r24
    3f3c:	77 fd       	sbrc	r23, 7
    3f3e:	80 95       	com	r24
    3f40:	98 2f       	mov	r25, r24
    3f42:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__floatsisf>
    3f46:	2b ed       	ldi	r18, 0xDB	; 219
    3f48:	3f e0       	ldi	r19, 0x0F	; 15
    3f4a:	49 e4       	ldi	r20, 0x49	; 73
    3f4c:	50 e4       	ldi	r21, 0x40	; 64
    3f4e:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	44 eb       	ldi	r20, 0xB4	; 180
    3f58:	53 e4       	ldi	r21, 0x43	; 67
    3f5a:	0e 94 ad 30 	call	0x615a	; 0x615a <__divsf3>
    3f5e:	0e 94 be 33 	call	0x677c	; 0x677c <sin>
    3f62:	ab 01       	movw	r20, r22
    3f64:	bc 01       	movw	r22, r24
    3f66:	22 e0       	ldi	r18, 0x02	; 2
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	ce 01       	movw	r24, r28
    3f6c:	8c 52       	subi	r24, 0x2C	; 44
    3f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f70:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <_ZN5Utils10custom_powEfi>
    3f74:	ab 01       	movw	r20, r22
    3f76:	bc 01       	movw	r22, r24
    3f78:	ce 01       	movw	r24, r28
    3f7a:	09 96       	adiw	r24, 0x09	; 9
    3f7c:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN5Gates5touchEd>
}
    3f80:	df 91       	pop	r29
    3f82:	cf 91       	pop	r28
    3f84:	08 95       	ret

00003f86 <_ZN4QEPU14fetch_registerEi>:

int QEPU::fetch_register(int address){
    3f86:	8f 92       	push	r8
    3f88:	9f 92       	push	r9
    3f8a:	af 92       	push	r10
    3f8c:	bf 92       	push	r11
    3f8e:	cf 92       	push	r12
    3f90:	df 92       	push	r13
    3f92:	ef 92       	push	r14
    3f94:	ff 92       	push	r15
    3f96:	0f 93       	push	r16
    3f98:	1f 93       	push	r17
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
    3fa2:	29 97       	sbiw	r28, 0x09	; 9
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	de bf       	out	0x3e, r29	; 62
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	cd bf       	out	0x3d, r28	; 61
    3fae:	5c 01       	movw	r10, r24
	char data_fetched[BUS_WIDTH+1]="";
    3fb0:	19 82       	std	Y+1, r1	; 0x01
    3fb2:	1a 82       	std	Y+2, r1	; 0x02
    3fb4:	1b 82       	std	Y+3, r1	; 0x03
    3fb6:	1c 82       	std	Y+4, r1	; 0x04
    3fb8:	fe 01       	movw	r30, r28
    3fba:	35 96       	adiw	r30, 0x05	; 5
    3fbc:	85 e0       	ldi	r24, 0x05	; 5
    3fbe:	df 01       	movw	r26, r30
    3fc0:	1d 92       	st	X+, r1
    3fc2:	8a 95       	dec	r24
    3fc4:	e9 f7       	brne	.-6      	; 0x3fc0 <_ZN4QEPU14fetch_registerEi+0x3a>
	int address_offset=address*BUS_WIDTH;
    3fc6:	4b 01       	movw	r8, r22
    3fc8:	88 0c       	add	r8, r8
    3fca:	99 1c       	adc	r9, r9
    3fcc:	88 0c       	add	r8, r8
    3fce:	99 1c       	adc	r9, r9
    3fd0:	88 0c       	add	r8, r8
    3fd2:	99 1c       	adc	r9, r9
	for(int i=0;i<BUS_WIDTH;i++)
    3fd4:	e1 2c       	mov	r14, r1
    3fd6:	f1 2c       	mov	r15, r1
		sprintf(data_fetched,"%s%d",data_fetched,measure(read(address_offset+i,THE,false)));
    3fd8:	8e 01       	movw	r16, r28
    3fda:	0f 5f       	subi	r16, 0xFF	; 255
    3fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    3fde:	0f 2e       	mov	r0, r31
    3fe0:	fa e9       	ldi	r31, 0x9A	; 154
    3fe2:	cf 2e       	mov	r12, r31
    3fe4:	f0 e0       	ldi	r31, 0x00	; 0
    3fe6:	df 2e       	mov	r13, r31
    3fe8:	f0 2d       	mov	r31, r0
    3fea:	b7 01       	movw	r22, r14
    3fec:	68 0d       	add	r22, r8
    3fee:	79 1d       	adc	r23, r9
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	40 e0       	ldi	r20, 0x00	; 0
    3ff4:	50 e0       	ldi	r21, 0x00	; 0
    3ff6:	c5 01       	movw	r24, r10
    3ff8:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    3ffc:	bc 01       	movw	r22, r24
    3ffe:	c5 01       	movw	r24, r10
    4000:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <_ZN4QEPU7measureEi>
    4004:	9f 93       	push	r25
    4006:	8f 93       	push	r24
    4008:	1f 93       	push	r17
    400a:	0f 93       	push	r16
    400c:	df 92       	push	r13
    400e:	cf 92       	push	r12
    4010:	1f 93       	push	r17
    4012:	0f 93       	push	r16
    4014:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <sprintf>
}

int QEPU::fetch_register(int address){
	char data_fetched[BUS_WIDTH+1]="";
	int address_offset=address*BUS_WIDTH;
	for(int i=0;i<BUS_WIDTH;i++)
    4018:	bf ef       	ldi	r27, 0xFF	; 255
    401a:	eb 1a       	sub	r14, r27
    401c:	fb 0a       	sbc	r15, r27
    401e:	0f b6       	in	r0, 0x3f	; 63
    4020:	f8 94       	cli
    4022:	de bf       	out	0x3e, r29	; 62
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	cd bf       	out	0x3d, r28	; 61
    4028:	98 e0       	ldi	r25, 0x08	; 8
    402a:	e9 16       	cp	r14, r25
    402c:	f1 04       	cpc	r15, r1
    402e:	e9 f6       	brne	.-70     	; 0x3fea <_ZN4QEPU14fetch_registerEi+0x64>
		sprintf(data_fetched,"%s%d",data_fetched,measure(read(address_offset+i,THE,false)));
	strrev(data_fetched);
    4030:	ce 01       	movw	r24, r28
    4032:	01 96       	adiw	r24, 0x01	; 1
    4034:	0e 94 1e 37 	call	0x6e3c	; 0x6e3c <strrev>
	return strtol(data_fetched,NULL,2);
    4038:	42 e0       	ldi	r20, 0x02	; 2
    403a:	50 e0       	ldi	r21, 0x00	; 0
    403c:	60 e0       	ldi	r22, 0x00	; 0
    403e:	70 e0       	ldi	r23, 0x00	; 0
    4040:	ce 01       	movw	r24, r28
    4042:	01 96       	adiw	r24, 0x01	; 1
    4044:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <strtol>
}
    4048:	cb 01       	movw	r24, r22
    404a:	29 96       	adiw	r28, 0x09	; 9
    404c:	0f b6       	in	r0, 0x3f	; 63
    404e:	f8 94       	cli
    4050:	de bf       	out	0x3e, r29	; 62
    4052:	0f be       	out	0x3f, r0	; 63
    4054:	cd bf       	out	0x3d, r28	; 61
    4056:	df 91       	pop	r29
    4058:	cf 91       	pop	r28
    405a:	1f 91       	pop	r17
    405c:	0f 91       	pop	r16
    405e:	ff 90       	pop	r15
    4060:	ef 90       	pop	r14
    4062:	df 90       	pop	r13
    4064:	cf 90       	pop	r12
    4066:	bf 90       	pop	r11
    4068:	af 90       	pop	r10
    406a:	9f 90       	pop	r9
    406c:	8f 90       	pop	r8
    406e:	08 95       	ret

00004070 <_ZN4QEPU12set_registerEii>:

void QEPU::set_register(int address,int data){
    4070:	cf 92       	push	r12
    4072:	df 92       	push	r13
    4074:	ef 92       	push	r14
    4076:	ff 92       	push	r15
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	6c 01       	movw	r12, r24
    4082:	8b 01       	movw	r16, r22
    4084:	ba 01       	movw	r22, r20
	char* data_str=utils.int2binstr(data,BUS_WIDTH);
    4086:	48 e0       	ldi	r20, 0x08	; 8
    4088:	50 e0       	ldi	r21, 0x00	; 0
    408a:	8c 52       	subi	r24, 0x2C	; 44
    408c:	9f 4f       	sbci	r25, 0xFF	; 255
    408e:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <_ZN5Utils10int2binstrEii>
    4092:	d8 2f       	mov	r29, r24
    4094:	c9 2f       	mov	r28, r25
	strrev(data_str);
    4096:	0e 94 1e 37 	call	0x6e3c	; 0x6e3c <strrev>
    409a:	ed 2e       	mov	r14, r29
    409c:	fc 2e       	mov	r15, r28
	int address_offset=address*BUS_WIDTH;
    409e:	00 0f       	add	r16, r16
    40a0:	11 1f       	adc	r17, r17
    40a2:	00 0f       	add	r16, r16
    40a4:	11 1f       	adc	r17, r17
    40a6:	00 0f       	add	r16, r16
    40a8:	11 1f       	adc	r17, r17
	
	for(int i=0;i<BUS_WIDTH;i++)
    40aa:	c0 e0       	ldi	r28, 0x00	; 0
    40ac:	d0 e0       	ldi	r29, 0x00	; 0
		if(data_str[i]=='1') write(address_offset+i,THE,180);
    40ae:	f7 01       	movw	r30, r14
    40b0:	81 91       	ld	r24, Z+
    40b2:	7f 01       	movw	r14, r30
    40b4:	81 33       	cpi	r24, 0x31	; 49
    40b6:	49 f4       	brne	.+18     	; 0x40ca <_ZN4QEPU12set_registerEii+0x5a>
    40b8:	24 eb       	ldi	r18, 0xB4	; 180
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	40 e0       	ldi	r20, 0x00	; 0
    40be:	50 e0       	ldi	r21, 0x00	; 0
    40c0:	b8 01       	movw	r22, r16
    40c2:	c6 01       	movw	r24, r12
    40c4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    40c8:	08 c0       	rjmp	.+16     	; 0x40da <_ZN4QEPU12set_registerEii+0x6a>
		else write(address_offset+i,THE,0);
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	40 e0       	ldi	r20, 0x00	; 0
    40d0:	50 e0       	ldi	r21, 0x00	; 0
    40d2:	b8 01       	movw	r22, r16
    40d4:	c6 01       	movw	r24, r12
    40d6:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
void QEPU::set_register(int address,int data){
	char* data_str=utils.int2binstr(data,BUS_WIDTH);
	strrev(data_str);
	int address_offset=address*BUS_WIDTH;
	
	for(int i=0;i<BUS_WIDTH;i++)
    40da:	21 96       	adiw	r28, 0x01	; 1
    40dc:	0f 5f       	subi	r16, 0xFF	; 255
    40de:	1f 4f       	sbci	r17, 0xFF	; 255
    40e0:	c8 30       	cpi	r28, 0x08	; 8
    40e2:	d1 05       	cpc	r29, r1
    40e4:	21 f7       	brne	.-56     	; 0x40ae <_ZN4QEPU12set_registerEii+0x3e>
		if(data_str[i]=='1') write(address_offset+i,THE,180);
		else write(address_offset+i,THE,0);
}
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
    40ee:	ff 90       	pop	r15
    40f0:	ef 90       	pop	r14
    40f2:	df 90       	pop	r13
    40f4:	cf 90       	pop	r12
    40f6:	08 95       	ret

000040f8 <_ZN4QEPU7dumpmemEi>:

void QEPU::dumpmem(int length){
    40f8:	4f 92       	push	r4
    40fa:	5f 92       	push	r5
    40fc:	6f 92       	push	r6
    40fe:	7f 92       	push	r7
    4100:	8f 92       	push	r8
    4102:	9f 92       	push	r9
    4104:	af 92       	push	r10
    4106:	bf 92       	push	r11
    4108:	cf 92       	push	r12
    410a:	df 92       	push	r13
    410c:	ef 92       	push	r14
    410e:	ff 92       	push	r15
    4110:	0f 93       	push	r16
    4112:	1f 93       	push	r17
    4114:	cf 93       	push	r28
    4116:	df 93       	push	r29
    4118:	6c 01       	movw	r12, r24
    411a:	5b 01       	movw	r10, r22
	serial.writestrln("");
    411c:	8c 01       	movw	r16, r24
    411e:	0f 5f       	subi	r16, 0xFF	; 255
    4120:	1f 4f       	sbci	r17, 0xFF	; 255
    4122:	65 ec       	ldi	r22, 0xC5	; 197
    4124:	70 e0       	ldi	r23, 0x00	; 0
    4126:	c8 01       	movw	r24, r16
    4128:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    412c:	6f e9       	ldi	r22, 0x9F	; 159
    412e:	70 e0       	ldi	r23, 0x00	; 0
    4130:	c8 01       	movw	r24, r16
    4132:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<length;i++){
    4136:	1a 14       	cp	r1, r10
    4138:	1b 04       	cpc	r1, r11
    413a:	0c f0       	brlt	.+2      	; 0x413e <_ZN4QEPU7dumpmemEi+0x46>
    413c:	6b c0       	rjmp	.+214    	; 0x4214 <_ZN4QEPU7dumpmemEi+0x11c>
    413e:	c0 e0       	ldi	r28, 0x00	; 0
    4140:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE,false));
    4142:	0f 2e       	mov	r0, r31
    4144:	f8 e4       	ldi	r31, 0x48	; 72
    4146:	ef 2e       	mov	r14, r31
    4148:	f1 e0       	ldi	r31, 0x01	; 1
    414a:	ff 2e       	mov	r15, r31
    414c:	f0 2d       	mov	r31, r0
    414e:	83 e0       	ldi	r24, 0x03	; 3
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
    4156:	68 2e       	mov	r6, r24
    4158:	79 2e       	mov	r7, r25
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	40 e0       	ldi	r20, 0x00	; 0
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	be 01       	movw	r22, r28
    4162:	c6 01       	movw	r24, r12
    4164:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4168:	9f 93       	push	r25
    416a:	8f 93       	push	r24
    416c:	ff 92       	push	r15
    416e:	ef 92       	push	r14
    4170:	7f 92       	push	r7
    4172:	6f 92       	push	r6
    4174:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI,false));
    4178:	83 e0       	ldi	r24, 0x03	; 3
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
    4180:	88 2e       	mov	r8, r24
    4182:	99 2e       	mov	r9, r25
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	41 e0       	ldi	r20, 0x01	; 1
    4188:	50 e0       	ldi	r21, 0x00	; 0
    418a:	be 01       	movw	r22, r28
    418c:	c6 01       	movw	r24, r12
    418e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4192:	9f 93       	push	r25
    4194:	8f 93       	push	r24
    4196:	ff 92       	push	r15
    4198:	ef 92       	push	r14
    419a:	9f 92       	push	r9
    419c:	8f 92       	push	r8
    419e:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
    41aa:	48 2e       	mov	r4, r24
    41ac:	59 2e       	mov	r5, r25
    41ae:	df 93       	push	r29
    41b0:	cf 93       	push	r28
    41b2:	ff 92       	push	r15
    41b4:	ef 92       	push	r14
    41b6:	5f 92       	push	r5
    41b8:	4f 92       	push	r4
    41ba:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    41be:	69 eb       	ldi	r22, 0xB9	; 185
    41c0:	70 e0       	ldi	r23, 0x00	; 0
    41c2:	c8 01       	movw	r24, r16
    41c4:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
    41c8:	64 2d       	mov	r22, r4
    41ca:	75 2d       	mov	r23, r5
    41cc:	c8 01       	movw	r24, r16
    41ce:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
    41d2:	6b eb       	ldi	r22, 0xBB	; 187
    41d4:	70 e0       	ldi	r23, 0x00	; 0
    41d6:	c8 01       	movw	r24, r16
    41d8:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    41dc:	66 2d       	mov	r22, r6
    41de:	77 2d       	mov	r23, r7
    41e0:	c8 01       	movw	r24, r16
    41e2:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    41e6:	66 ec       	ldi	r22, 0xC6	; 198
    41e8:	70 e0       	ldi	r23, 0x00	; 0
    41ea:	c8 01       	movw	r24, r16
    41ec:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    41f0:	68 2d       	mov	r22, r8
    41f2:	79 2d       	mov	r23, r9
    41f4:	c8 01       	movw	r24, r16
    41f6:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
}

void QEPU::dumpmem(int length){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<length;i++){
    41fa:	21 96       	adiw	r28, 0x01	; 1
    41fc:	8d b7       	in	r24, 0x3d	; 61
    41fe:	9e b7       	in	r25, 0x3e	; 62
    4200:	42 96       	adiw	r24, 0x12	; 18
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	9e bf       	out	0x3e, r25	; 62
    4208:	0f be       	out	0x3f, r0	; 63
    420a:	8d bf       	out	0x3d, r24	; 61
    420c:	ca 15       	cp	r28, r10
    420e:	db 05       	cpc	r29, r11
    4210:	09 f0       	breq	.+2      	; 0x4214 <_ZN4QEPU7dumpmemEi+0x11c>
    4212:	9d cf       	rjmp	.-198    	; 0x414e <_ZN4QEPU7dumpmemEi+0x56>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	1f 91       	pop	r17
    421a:	0f 91       	pop	r16
    421c:	ff 90       	pop	r15
    421e:	ef 90       	pop	r14
    4220:	df 90       	pop	r13
    4222:	cf 90       	pop	r12
    4224:	bf 90       	pop	r11
    4226:	af 90       	pop	r10
    4228:	9f 90       	pop	r9
    422a:	8f 90       	pop	r8
    422c:	7f 90       	pop	r7
    422e:	6f 90       	pop	r6
    4230:	5f 90       	pop	r5
    4232:	4f 90       	pop	r4
    4234:	08 95       	ret

00004236 <_ZN4QEPU7executeEilll>:
	sram.dumpmem(5);
	serial.writestr("The execution of the program has finished");
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2,int32_t op3){
    4236:	2f 92       	push	r2
    4238:	3f 92       	push	r3
    423a:	4f 92       	push	r4
    423c:	5f 92       	push	r5
    423e:	6f 92       	push	r6
    4240:	7f 92       	push	r7
    4242:	8f 92       	push	r8
    4244:	9f 92       	push	r9
    4246:	af 92       	push	r10
    4248:	bf 92       	push	r11
    424a:	cf 92       	push	r12
    424c:	df 92       	push	r13
    424e:	ef 92       	push	r14
    4250:	ff 92       	push	r15
    4252:	0f 93       	push	r16
    4254:	1f 93       	push	r17
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
    425e:	2c 97       	sbiw	r28, 0x0c	; 12
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	9c 87       	std	Y+12, r25	; 0x0c
    426c:	8b 87       	std	Y+11, r24	; 0x0b
    426e:	4b 01       	movw	r8, r22
    4270:	29 01       	movw	r4, r18
    4272:	3a 01       	movw	r6, r20
    4274:	e9 82       	std	Y+1, r14	; 0x01
    4276:	fa 82       	std	Y+2, r15	; 0x02
    4278:	0b 83       	std	Y+3, r16	; 0x03
    427a:	1c 83       	std	Y+4, r17	; 0x04
	int * newthephi=(int*)malloc(sizeof(int)*MAX_NEWTHEPHI);
    427c:	8c e0       	ldi	r24, 0x0C	; 12
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
    4284:	6c 01       	movw	r12, r24
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    4286:	f4 01       	movw	r30, r8
    4288:	31 97       	sbiw	r30, 0x01	; 1
    428a:	ed 33       	cpi	r30, 0x3D	; 61
    428c:	f1 05       	cpc	r31, r1
    428e:	10 f0       	brcs	.+4      	; 0x4294 <_ZN4QEPU7executeEilll+0x5e>
    4290:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
    4294:	e6 5d       	subi	r30, 0xD6	; 214
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	0c 94 43 34 	jmp	0x6886	; 0x6886 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOQ (move qubit) */
			write(op1,THE,read(op2,THE,false));
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	40 e0       	ldi	r20, 0x00	; 0
    42a0:	50 e0       	ldi	r21, 0x00	; 0
    42a2:	69 81       	ldd	r22, Y+1	; 0x01
    42a4:	7a 81       	ldd	r23, Y+2	; 0x02
    42a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    42a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    42aa:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    42ae:	9c 01       	movw	r18, r24
    42b0:	40 e0       	ldi	r20, 0x00	; 0
    42b2:	50 e0       	ldi	r21, 0x00	; 0
    42b4:	b2 01       	movw	r22, r4
    42b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    42b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    42ba:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI,false));
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	41 e0       	ldi	r20, 0x01	; 1
    42c2:	50 e0       	ldi	r21, 0x00	; 0
    42c4:	69 81       	ldd	r22, Y+1	; 0x01
    42c6:	7a 81       	ldd	r23, Y+2	; 0x02
    42c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    42ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    42cc:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    42d0:	9c 01       	movw	r18, r24
    42d2:	41 e0       	ldi	r20, 0x01	; 1
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	b2 01       	movw	r22, r4
    42d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    42da:	9c 85       	ldd	r25, Y+12	; 0x0c
    42dc:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    42e0:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x02: /*MOR (move register)*/
			set_register(op1,fetch_register(op1)); // TOUCH ITSELF 1ST
    42e4:	b2 01       	movw	r22, r4
    42e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    42e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    42ea:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN4QEPU14fetch_registerEi>
    42ee:	ac 01       	movw	r20, r24
    42f0:	b2 01       	movw	r22, r4
    42f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    42f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    42f6:	0e 94 38 20 	call	0x4070	; 0x4070 <_ZN4QEPU12set_registerEii>
			set_register(op1,fetch_register(op2)); // MOVE TO THE NEW REGISTER (IF IT NEEDS TO BE UNTOUCHED IT NEEDS TO USE MATRICES INSTEAD)
    42fa:	69 81       	ldd	r22, Y+1	; 0x01
    42fc:	7a 81       	ldd	r23, Y+2	; 0x02
    42fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4300:	9c 85       	ldd	r25, Y+12	; 0x0c
    4302:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN4QEPU14fetch_registerEi>
    4306:	ac 01       	movw	r20, r24
    4308:	b2 01       	movw	r22, r4
    430a:	8b 85       	ldd	r24, Y+11	; 0x0b
    430c:	9c 85       	ldd	r25, Y+12	; 0x0c
    430e:	0e 94 38 20 	call	0x4070	; 0x4070 <_ZN4QEPU12set_registerEii>
			break;
    4312:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x03: /*MOM (move memory)*/
			sram.write(op1,sram.read(op2));
    4316:	69 81       	ldd	r22, Y+1	; 0x01
    4318:	0b 85       	ldd	r16, Y+11	; 0x0b
    431a:	1c 85       	ldd	r17, Y+12	; 0x0c
    431c:	0d 5f       	subi	r16, 0xFD	; 253
    431e:	1f 4f       	sbci	r17, 0xFF	; 255
    4320:	c8 01       	movw	r24, r16
    4322:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    4326:	48 2f       	mov	r20, r24
    4328:	64 2d       	mov	r22, r4
    432a:	c8 01       	movw	r24, r16
    432c:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    4330:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x04: /*STR (store)*/
			sram.write(op1,fetch_register(op2));
    4334:	69 81       	ldd	r22, Y+1	; 0x01
    4336:	7a 81       	ldd	r23, Y+2	; 0x02
    4338:	8b 85       	ldd	r24, Y+11	; 0x0b
    433a:	9c 85       	ldd	r25, Y+12	; 0x0c
    433c:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN4QEPU14fetch_registerEi>
    4340:	48 2f       	mov	r20, r24
    4342:	64 2d       	mov	r22, r4
    4344:	8b 85       	ldd	r24, Y+11	; 0x0b
    4346:	9c 85       	ldd	r25, Y+12	; 0x0c
    4348:	03 96       	adiw	r24, 0x03	; 3
    434a:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    434e:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x05: /*LOD (load)*/
			set_register(op1,sram.read(op2));
    4352:	69 81       	ldd	r22, Y+1	; 0x01
    4354:	8b 85       	ldd	r24, Y+11	; 0x0b
    4356:	9c 85       	ldd	r25, Y+12	; 0x0c
    4358:	03 96       	adiw	r24, 0x03	; 3
    435a:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    435e:	48 2f       	mov	r20, r24
    4360:	55 27       	eor	r21, r21
    4362:	47 fd       	sbrc	r20, 7
    4364:	50 95       	com	r21
    4366:	b2 01       	movw	r22, r4
    4368:	8b 85       	ldd	r24, Y+11	; 0x0b
    436a:	9c 85       	ldd	r25, Y+12	; 0x0c
    436c:	0e 94 38 20 	call	0x4070	; 0x4070 <_ZN4QEPU12set_registerEii>
			break;
    4370:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x06: /*CRW (Constant Ram Write)*/
			sram.write(op1,op2);
    4374:	49 81       	ldd	r20, Y+1	; 0x01
    4376:	64 2d       	mov	r22, r4
    4378:	8b 85       	ldd	r24, Y+11	; 0x0b
    437a:	9c 85       	ldd	r25, Y+12	; 0x0c
    437c:	03 96       	adiw	r24, 0x03	; 3
    437e:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    4382:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x07: /*CQW* (Constant Qubit Write)*/
			set_register(op1,op2);
    4386:	49 81       	ldd	r20, Y+1	; 0x01
    4388:	5a 81       	ldd	r21, Y+2	; 0x02
    438a:	b2 01       	movw	r22, r4
    438c:	8b 85       	ldd	r24, Y+11	; 0x0b
    438e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4390:	0e 94 38 20 	call	0x4070	; 0x4070 <_ZN4QEPU12set_registerEii>
			break;
    4394:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x08: /*POP (pop)*/
			set_register(op1,sram.pop());
    4398:	8b 85       	ldd	r24, Y+11	; 0x0b
    439a:	9c 85       	ldd	r25, Y+12	; 0x0c
    439c:	03 96       	adiw	r24, 0x03	; 3
    439e:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <_ZN4SRAM3popEv>
    43a2:	ac 01       	movw	r20, r24
    43a4:	b2 01       	movw	r22, r4
    43a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    43a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    43aa:	0e 94 38 20 	call	0x4070	; 0x4070 <_ZN4QEPU12set_registerEii>
			break;
    43ae:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x09: /*PSH (push)*/
			sram.push(fetch_register(op1));
    43b2:	b2 01       	movw	r22, r4
    43b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    43b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    43b8:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN4QEPU14fetch_registerEi>
    43bc:	bc 01       	movw	r22, r24
    43be:	8b 85       	ldd	r24, Y+11	; 0x0b
    43c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    43c2:	03 96       	adiw	r24, 0x03	; 3
    43c4:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <_ZN4SRAM4pushEi>
			break;
    43c8:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x0A: /*CMT (constantmovtheta)*/
			write(op1,THE,op2);
    43cc:	29 81       	ldd	r18, Y+1	; 0x01
    43ce:	3a 81       	ldd	r19, Y+2	; 0x02
    43d0:	40 e0       	ldi	r20, 0x00	; 0
    43d2:	50 e0       	ldi	r21, 0x00	; 0
    43d4:	b2 01       	movw	r22, r4
    43d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    43d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    43da:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    43de:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x0B: /*CMP (constantmovphi)*/
			write(op1,PHI,op2);
    43e2:	29 81       	ldd	r18, Y+1	; 0x01
    43e4:	3a 81       	ldd	r19, Y+2	; 0x02
    43e6:	41 e0       	ldi	r20, 0x01	; 1
    43e8:	50 e0       	ldi	r21, 0x00	; 0
    43ea:	b2 01       	movw	r22, r4
    43ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    43ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    43f0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    43f4:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x0C: /*CME (compare)*/
			flags.compare(fetch_register(op1),fetch_register(op2));
    43f8:	69 81       	ldd	r22, Y+1	; 0x01
    43fa:	7a 81       	ldd	r23, Y+2	; 0x02
    43fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    43fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    4400:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN4QEPU14fetch_registerEi>
    4404:	8c 01       	movw	r16, r24
    4406:	b2 01       	movw	r22, r4
    4408:	8b 85       	ldd	r24, Y+11	; 0x0b
    440a:	9c 85       	ldd	r25, Y+12	; 0x0c
    440c:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN4QEPU14fetch_registerEi>
    4410:	b8 01       	movw	r22, r16
    4412:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN4QEPU4Flag7compareEii>
			break;
    4416:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x0D: /*SEF (SET FLAG)*/
			flags.flaglist[op1]=op2;
    441a:	f2 01       	movw	r30, r4
    441c:	e4 5b       	subi	r30, 0xB4	; 180
    441e:	fe 4f       	sbci	r31, 0xFE	; 254
    4420:	89 81       	ldd	r24, Y+1	; 0x01
    4422:	80 83       	st	Z, r24
			break;
    4424:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x0E: /*GEF (GET FLAG)*/
			sram.write(op1,flags.flaglist[op2]);
    4428:	e9 81       	ldd	r30, Y+1	; 0x01
    442a:	fa 81       	ldd	r31, Y+2	; 0x02
    442c:	e4 5b       	subi	r30, 0xB4	; 180
    442e:	fe 4f       	sbci	r31, 0xFE	; 254
    4430:	40 81       	ld	r20, Z
    4432:	64 2d       	mov	r22, r4
    4434:	8b 85       	ldd	r24, Y+11	; 0x0b
    4436:	9c 85       	ldd	r25, Y+12	; 0x0c
    4438:	03 96       	adiw	r24, 0x03	; 3
    443a:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    443e:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		/*IMPLEMENT CONDICIONAL/INCONDICIONAL BRANCHES HERE*/
		case 0x0F: /*BES (branch enable stack)*/
			flags.flaglist[ALLOW_BRANCH_STACK]=op1;
    4442:	40 92 54 01 	sts	0x0154, r4
			break;
    4446:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x10: /*BLW (branch if lower (with jumpstack))*/
			if(flags.flaglist[CND_LWER]){
    444a:	80 91 4c 01 	lds	r24, 0x014C
    444e:	88 23       	and	r24, r24
    4450:	11 f4       	brne	.+4      	; 0x4456 <_ZN4QEPU7executeEilll+0x220>
    4452:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
				jumpstack.push(program_counter+1);
    4456:	0b 85       	ldd	r16, Y+11	; 0x0b
    4458:	1c 85       	ldd	r17, Y+12	; 0x0c
    445a:	0b 52       	subi	r16, 0x2B	; 43
    445c:	1f 4f       	sbci	r17, 0xFF	; 255
    445e:	d8 01       	movw	r26, r16
    4460:	6d 91       	ld	r22, X+
    4462:	7c 91       	ld	r23, X
    4464:	6f 5f       	subi	r22, 0xFF	; 255
    4466:	7f 4f       	sbci	r23, 0xFF	; 255
    4468:	8b 85       	ldd	r24, Y+11	; 0x0b
    446a:	9c 85       	ldd	r25, Y+12	; 0x0c
    446c:	0a 96       	adiw	r24, 0x0a	; 10
    446e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4472:	c2 01       	movw	r24, r4
    4474:	01 97       	sbiw	r24, 0x01	; 1
    4476:	f8 01       	movw	r30, r16
    4478:	91 83       	std	Z+1, r25	; 0x01
    447a:	80 83       	st	Z, r24
    447c:	e9 c7       	rjmp	.+4050   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
				jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x11: /*BLE (branch if lower or equal (with jumpstack))*/
			if(flags.flaglist[CND_LWER_EQUAL]){
    447e:	80 91 4d 01 	lds	r24, 0x014D
    4482:	88 23       	and	r24, r24
    4484:	09 f4       	brne	.+2      	; 0x4488 <_ZN4QEPU7executeEilll+0x252>
    4486:	e4 c7       	rjmp	.+4040   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4488:	80 91 54 01 	lds	r24, 0x0154
    448c:	88 23       	and	r24, r24
    448e:	69 f0       	breq	.+26     	; 0x44aa <_ZN4QEPU7executeEilll+0x274>
					jumpstack.push(program_counter+1);
    4490:	eb 85       	ldd	r30, Y+11	; 0x0b
    4492:	fc 85       	ldd	r31, Y+12	; 0x0c
    4494:	eb 52       	subi	r30, 0x2B	; 43
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	60 81       	ld	r22, Z
    449a:	71 81       	ldd	r23, Z+1	; 0x01
    449c:	6f 5f       	subi	r22, 0xFF	; 255
    449e:	7f 4f       	sbci	r23, 0xFF	; 255
    44a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    44a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    44a4:	0a 96       	adiw	r24, 0x0a	; 10
    44a6:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    44aa:	eb 85       	ldd	r30, Y+11	; 0x0b
    44ac:	fc 85       	ldd	r31, Y+12	; 0x0c
    44ae:	eb 52       	subi	r30, 0x2B	; 43
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	c2 01       	movw	r24, r4
    44b4:	01 97       	sbiw	r24, 0x01	; 1
    44b6:	91 83       	std	Z+1, r25	; 0x01
    44b8:	80 83       	st	Z, r24
    44ba:	ca c7       	rjmp	.+3988   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x12: /*BEQ (branch if equal) (with jumpstack)*/
			if(flags.flaglist[CND_EQUAL]){
    44bc:	80 91 4e 01 	lds	r24, 0x014E
    44c0:	88 23       	and	r24, r24
    44c2:	09 f4       	brne	.+2      	; 0x44c6 <_ZN4QEPU7executeEilll+0x290>
    44c4:	c5 c7       	rjmp	.+3978   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    44c6:	80 91 54 01 	lds	r24, 0x0154
    44ca:	88 23       	and	r24, r24
    44cc:	69 f0       	breq	.+26     	; 0x44e8 <_ZN4QEPU7executeEilll+0x2b2>
					jumpstack.push(program_counter+1);
    44ce:	eb 85       	ldd	r30, Y+11	; 0x0b
    44d0:	fc 85       	ldd	r31, Y+12	; 0x0c
    44d2:	eb 52       	subi	r30, 0x2B	; 43
    44d4:	ff 4f       	sbci	r31, 0xFF	; 255
    44d6:	60 81       	ld	r22, Z
    44d8:	71 81       	ldd	r23, Z+1	; 0x01
    44da:	6f 5f       	subi	r22, 0xFF	; 255
    44dc:	7f 4f       	sbci	r23, 0xFF	; 255
    44de:	8b 85       	ldd	r24, Y+11	; 0x0b
    44e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    44e2:	0a 96       	adiw	r24, 0x0a	; 10
    44e4:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    44e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    44ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    44ec:	eb 52       	subi	r30, 0x2B	; 43
    44ee:	ff 4f       	sbci	r31, 0xFF	; 255
    44f0:	c2 01       	movw	r24, r4
    44f2:	01 97       	sbiw	r24, 0x01	; 1
    44f4:	91 83       	std	Z+1, r25	; 0x01
    44f6:	80 83       	st	Z, r24
    44f8:	ab c7       	rjmp	.+3926   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x13: /*BGE (branch if greater or equal (with jumpstack))*/
			if(flags.flaglist[CND_GRTER_EQUAL]){
    44fa:	80 91 4f 01 	lds	r24, 0x014F
    44fe:	88 23       	and	r24, r24
    4500:	09 f4       	brne	.+2      	; 0x4504 <_ZN4QEPU7executeEilll+0x2ce>
    4502:	a6 c7       	rjmp	.+3916   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4504:	80 91 54 01 	lds	r24, 0x0154
    4508:	88 23       	and	r24, r24
    450a:	69 f0       	breq	.+26     	; 0x4526 <_ZN4QEPU7executeEilll+0x2f0>
					jumpstack.push(program_counter+1);
    450c:	eb 85       	ldd	r30, Y+11	; 0x0b
    450e:	fc 85       	ldd	r31, Y+12	; 0x0c
    4510:	eb 52       	subi	r30, 0x2B	; 43
    4512:	ff 4f       	sbci	r31, 0xFF	; 255
    4514:	60 81       	ld	r22, Z
    4516:	71 81       	ldd	r23, Z+1	; 0x01
    4518:	6f 5f       	subi	r22, 0xFF	; 255
    451a:	7f 4f       	sbci	r23, 0xFF	; 255
    451c:	8b 85       	ldd	r24, Y+11	; 0x0b
    451e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4520:	0a 96       	adiw	r24, 0x0a	; 10
    4522:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4526:	eb 85       	ldd	r30, Y+11	; 0x0b
    4528:	fc 85       	ldd	r31, Y+12	; 0x0c
    452a:	eb 52       	subi	r30, 0x2B	; 43
    452c:	ff 4f       	sbci	r31, 0xFF	; 255
    452e:	c2 01       	movw	r24, r4
    4530:	01 97       	sbiw	r24, 0x01	; 1
    4532:	91 83       	std	Z+1, r25	; 0x01
    4534:	80 83       	st	Z, r24
    4536:	8c c7       	rjmp	.+3864   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x14: /*BGR (branch if greater (with jumpstack))*/
			if(flags.flaglist[CND_GRTER]){
    4538:	80 91 50 01 	lds	r24, 0x0150
    453c:	88 23       	and	r24, r24
    453e:	09 f4       	brne	.+2      	; 0x4542 <_ZN4QEPU7executeEilll+0x30c>
    4540:	87 c7       	rjmp	.+3854   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4542:	80 91 54 01 	lds	r24, 0x0154
    4546:	88 23       	and	r24, r24
    4548:	69 f0       	breq	.+26     	; 0x4564 <_ZN4QEPU7executeEilll+0x32e>
					jumpstack.push(program_counter+1);
    454a:	eb 85       	ldd	r30, Y+11	; 0x0b
    454c:	fc 85       	ldd	r31, Y+12	; 0x0c
    454e:	eb 52       	subi	r30, 0x2B	; 43
    4550:	ff 4f       	sbci	r31, 0xFF	; 255
    4552:	60 81       	ld	r22, Z
    4554:	71 81       	ldd	r23, Z+1	; 0x01
    4556:	6f 5f       	subi	r22, 0xFF	; 255
    4558:	7f 4f       	sbci	r23, 0xFF	; 255
    455a:	8b 85       	ldd	r24, Y+11	; 0x0b
    455c:	9c 85       	ldd	r25, Y+12	; 0x0c
    455e:	0a 96       	adiw	r24, 0x0a	; 10
    4560:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4564:	eb 85       	ldd	r30, Y+11	; 0x0b
    4566:	fc 85       	ldd	r31, Y+12	; 0x0c
    4568:	eb 52       	subi	r30, 0x2B	; 43
    456a:	ff 4f       	sbci	r31, 0xFF	; 255
    456c:	c2 01       	movw	r24, r4
    456e:	01 97       	sbiw	r24, 0x01	; 1
    4570:	91 83       	std	Z+1, r25	; 0x01
    4572:	80 83       	st	Z, r24
    4574:	6d c7       	rjmp	.+3802   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x15: /*BDI (branch if different (with jumpstack))*/
			if(flags.flaglist[CND_DIFF]){
    4576:	80 91 51 01 	lds	r24, 0x0151
    457a:	88 23       	and	r24, r24
    457c:	09 f4       	brne	.+2      	; 0x4580 <_ZN4QEPU7executeEilll+0x34a>
    457e:	68 c7       	rjmp	.+3792   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4580:	80 91 54 01 	lds	r24, 0x0154
    4584:	88 23       	and	r24, r24
    4586:	69 f0       	breq	.+26     	; 0x45a2 <_ZN4QEPU7executeEilll+0x36c>
					jumpstack.push(program_counter+1);
    4588:	eb 85       	ldd	r30, Y+11	; 0x0b
    458a:	fc 85       	ldd	r31, Y+12	; 0x0c
    458c:	eb 52       	subi	r30, 0x2B	; 43
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	60 81       	ld	r22, Z
    4592:	71 81       	ldd	r23, Z+1	; 0x01
    4594:	6f 5f       	subi	r22, 0xFF	; 255
    4596:	7f 4f       	sbci	r23, 0xFF	; 255
    4598:	8b 85       	ldd	r24, Y+11	; 0x0b
    459a:	9c 85       	ldd	r25, Y+12	; 0x0c
    459c:	0a 96       	adiw	r24, 0x0a	; 10
    459e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    45a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    45a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    45a6:	eb 52       	subi	r30, 0x2B	; 43
    45a8:	ff 4f       	sbci	r31, 0xFF	; 255
    45aa:	c2 01       	movw	r24, r4
    45ac:	01 97       	sbiw	r24, 0x01	; 1
    45ae:	91 83       	std	Z+1, r25	; 0x01
    45b0:	80 83       	st	Z, r24
    45b2:	4e c7       	rjmp	.+3740   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x16: /*BZE (branch if register(op1)=0 (zero) (with jumpstack))*/
			if(flags.flaglist[CND_ZERO]){
    45b4:	80 91 52 01 	lds	r24, 0x0152
    45b8:	88 23       	and	r24, r24
    45ba:	09 f4       	brne	.+2      	; 0x45be <_ZN4QEPU7executeEilll+0x388>
    45bc:	49 c7       	rjmp	.+3730   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    45be:	80 91 54 01 	lds	r24, 0x0154
    45c2:	88 23       	and	r24, r24
    45c4:	69 f0       	breq	.+26     	; 0x45e0 <_ZN4QEPU7executeEilll+0x3aa>
					jumpstack.push(program_counter+1);
    45c6:	eb 85       	ldd	r30, Y+11	; 0x0b
    45c8:	fc 85       	ldd	r31, Y+12	; 0x0c
    45ca:	eb 52       	subi	r30, 0x2B	; 43
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	60 81       	ld	r22, Z
    45d0:	71 81       	ldd	r23, Z+1	; 0x01
    45d2:	6f 5f       	subi	r22, 0xFF	; 255
    45d4:	7f 4f       	sbci	r23, 0xFF	; 255
    45d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    45d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    45da:	0a 96       	adiw	r24, 0x0a	; 10
    45dc:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    45e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    45e2:	fc 85       	ldd	r31, Y+12	; 0x0c
    45e4:	eb 52       	subi	r30, 0x2B	; 43
    45e6:	ff 4f       	sbci	r31, 0xFF	; 255
    45e8:	c2 01       	movw	r24, r4
    45ea:	01 97       	sbiw	r24, 0x01	; 1
    45ec:	91 83       	std	Z+1, r25	; 0x01
    45ee:	80 83       	st	Z, r24
    45f0:	2f c7       	rjmp	.+3678   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x17: /*BNZ (branch if register(op1)!=0 (not zero) (with jumpstack))*/
			if(flags.flaglist[CND_NOT_ZERO]){
    45f2:	80 91 53 01 	lds	r24, 0x0153
    45f6:	88 23       	and	r24, r24
    45f8:	09 f4       	brne	.+2      	; 0x45fc <_ZN4QEPU7executeEilll+0x3c6>
    45fa:	2a c7       	rjmp	.+3668   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    45fc:	80 91 54 01 	lds	r24, 0x0154
    4600:	88 23       	and	r24, r24
    4602:	69 f0       	breq	.+26     	; 0x461e <_ZN4QEPU7executeEilll+0x3e8>
					jumpstack.push(program_counter+1);
    4604:	eb 85       	ldd	r30, Y+11	; 0x0b
    4606:	fc 85       	ldd	r31, Y+12	; 0x0c
    4608:	eb 52       	subi	r30, 0x2B	; 43
    460a:	ff 4f       	sbci	r31, 0xFF	; 255
    460c:	60 81       	ld	r22, Z
    460e:	71 81       	ldd	r23, Z+1	; 0x01
    4610:	6f 5f       	subi	r22, 0xFF	; 255
    4612:	7f 4f       	sbci	r23, 0xFF	; 255
    4614:	8b 85       	ldd	r24, Y+11	; 0x0b
    4616:	9c 85       	ldd	r25, Y+12	; 0x0c
    4618:	0a 96       	adiw	r24, 0x0a	; 10
    461a:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    461e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4620:	fc 85       	ldd	r31, Y+12	; 0x0c
    4622:	eb 52       	subi	r30, 0x2B	; 43
    4624:	ff 4f       	sbci	r31, 0xFF	; 255
    4626:	c2 01       	movw	r24, r4
    4628:	01 97       	sbiw	r24, 0x01	; 1
    462a:	91 83       	std	Z+1, r25	; 0x01
    462c:	80 83       	st	Z, r24
    462e:	10 c7       	rjmp	.+3616   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x18: /*CALL (incondicional branch WITH jumpstack)*/
			jumpstack.push(program_counter+1);
    4630:	0b 85       	ldd	r16, Y+11	; 0x0b
    4632:	1c 85       	ldd	r17, Y+12	; 0x0c
    4634:	0b 52       	subi	r16, 0x2B	; 43
    4636:	1f 4f       	sbci	r17, 0xFF	; 255
    4638:	d8 01       	movw	r26, r16
    463a:	6d 91       	ld	r22, X+
    463c:	7c 91       	ld	r23, X
    463e:	6f 5f       	subi	r22, 0xFF	; 255
    4640:	7f 4f       	sbci	r23, 0xFF	; 255
    4642:	8b 85       	ldd	r24, Y+11	; 0x0b
    4644:	9c 85       	ldd	r25, Y+12	; 0x0c
    4646:	0a 96       	adiw	r24, 0x0a	; 10
    4648:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    464c:	c2 01       	movw	r24, r4
    464e:	01 97       	sbiw	r24, 0x01	; 1
    4650:	f8 01       	movw	r30, r16
    4652:	91 83       	std	Z+1, r25	; 0x01
    4654:	80 83       	st	Z, r24
    4656:	fc c6       	rjmp	.+3576   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x18: /*CALL (incondicional branch WITH jumpstack)*/
			jumpstack.push(program_counter+1);
			set_programcounter(op1);
			break;
		case 0x19: /*RET (return)*/
			set_programcounter(jumpstack.pop());
    4658:	8b 85       	ldd	r24, Y+11	; 0x0b
    465a:	9c 85       	ldd	r25, Y+12	; 0x0c
    465c:	0a 96       	adiw	r24, 0x0a	; 10
    465e:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZN4QEPU9Jumpstack3popEv>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4662:	eb 85       	ldd	r30, Y+11	; 0x0b
    4664:	fc 85       	ldd	r31, Y+12	; 0x0c
    4666:	eb 52       	subi	r30, 0x2B	; 43
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	01 97       	sbiw	r24, 0x01	; 1
    466c:	91 83       	std	Z+1, r25	; 0x01
    466e:	80 83       	st	Z, r24
    4670:	ef c6       	rjmp	.+3550   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
    4672:	eb 85       	ldd	r30, Y+11	; 0x0b
    4674:	fc 85       	ldd	r31, Y+12	; 0x0c
    4676:	eb 52       	subi	r30, 0x2B	; 43
    4678:	ff 4f       	sbci	r31, 0xFF	; 255
    467a:	c2 01       	movw	r24, r4
    467c:	01 97       	sbiw	r24, 0x01	; 1
    467e:	91 83       	std	Z+1, r25	; 0x01
    4680:	80 83       	st	Z, r24
    4682:	e6 c6       	rjmp	.+3532   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x1A: /*JMP (jump (incondicional branch WITHOUT jumpstack))*/
			set_programcounter(op1);
			break;
		/*IMPLEMENT LOGIC AND ARITHMETIC (CLASSICAL) CALCULATIONS HERE*/
		case 0x1B: /*ADD*/
			sram.write(op1,sram.read(op2)+sram.read(op3));
    4684:	69 81       	ldd	r22, Y+1	; 0x01
    4686:	0b 85       	ldd	r16, Y+11	; 0x0b
    4688:	1c 85       	ldd	r17, Y+12	; 0x0c
    468a:	0d 5f       	subi	r16, 0xFD	; 253
    468c:	1f 4f       	sbci	r17, 0xFF	; 255
    468e:	c8 01       	movw	r24, r16
    4690:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    4694:	f8 2e       	mov	r15, r24
    4696:	6a 2d       	mov	r22, r10
    4698:	c8 01       	movw	r24, r16
    469a:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    469e:	48 2f       	mov	r20, r24
    46a0:	4f 0d       	add	r20, r15
    46a2:	64 2d       	mov	r22, r4
    46a4:	c8 01       	movw	r24, r16
    46a6:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    46aa:	d2 c6       	rjmp	.+3492   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x1C: /*SUB*/
			sram.write(op1,sram.read(op2)-sram.read(op3));
    46ac:	69 81       	ldd	r22, Y+1	; 0x01
    46ae:	0b 85       	ldd	r16, Y+11	; 0x0b
    46b0:	1c 85       	ldd	r17, Y+12	; 0x0c
    46b2:	0d 5f       	subi	r16, 0xFD	; 253
    46b4:	1f 4f       	sbci	r17, 0xFF	; 255
    46b6:	c8 01       	movw	r24, r16
    46b8:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    46bc:	f8 2e       	mov	r15, r24
    46be:	6a 2d       	mov	r22, r10
    46c0:	c8 01       	movw	r24, r16
    46c2:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    46c6:	4f 2d       	mov	r20, r15
    46c8:	48 1b       	sub	r20, r24
    46ca:	64 2d       	mov	r22, r4
    46cc:	c8 01       	movw	r24, r16
    46ce:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    46d2:	be c6       	rjmp	.+3452   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x1D: /*MUL*/
			sram.write(op1,sram.read(op2)*sram.read(op3));
    46d4:	69 81       	ldd	r22, Y+1	; 0x01
    46d6:	0b 85       	ldd	r16, Y+11	; 0x0b
    46d8:	1c 85       	ldd	r17, Y+12	; 0x0c
    46da:	0d 5f       	subi	r16, 0xFD	; 253
    46dc:	1f 4f       	sbci	r17, 0xFF	; 255
    46de:	c8 01       	movw	r24, r16
    46e0:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    46e4:	f8 2e       	mov	r15, r24
    46e6:	6a 2d       	mov	r22, r10
    46e8:	c8 01       	movw	r24, r16
    46ea:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    46ee:	8f 9d       	mul	r24, r15
    46f0:	40 2d       	mov	r20, r0
    46f2:	11 24       	eor	r1, r1
    46f4:	64 2d       	mov	r22, r4
    46f6:	c8 01       	movw	r24, r16
    46f8:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    46fc:	a9 c6       	rjmp	.+3410   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x1E: /*DIV*/
			sram.write(op1,sram.read(op2)/sram.read(op3));
    46fe:	69 81       	ldd	r22, Y+1	; 0x01
    4700:	0b 85       	ldd	r16, Y+11	; 0x0b
    4702:	1c 85       	ldd	r17, Y+12	; 0x0c
    4704:	0d 5f       	subi	r16, 0xFD	; 253
    4706:	1f 4f       	sbci	r17, 0xFF	; 255
    4708:	c8 01       	movw	r24, r16
    470a:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    470e:	f8 2e       	mov	r15, r24
    4710:	6a 2d       	mov	r22, r10
    4712:	c8 01       	movw	r24, r16
    4714:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    4718:	68 2f       	mov	r22, r24
    471a:	8f 2d       	mov	r24, r15
    471c:	99 27       	eor	r25, r25
    471e:	87 fd       	sbrc	r24, 7
    4720:	90 95       	com	r25
    4722:	77 27       	eor	r23, r23
    4724:	67 fd       	sbrc	r22, 7
    4726:	70 95       	com	r23
    4728:	0e 94 2f 34 	call	0x685e	; 0x685e <__divmodhi4>
    472c:	46 2f       	mov	r20, r22
    472e:	64 2d       	mov	r22, r4
    4730:	c8 01       	movw	r24, r16
    4732:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    4736:	8c c6       	rjmp	.+3352   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x1F: /*AND*/
			sram.write(op1,sram.read(op2)&sram.read(op3));
    4738:	69 81       	ldd	r22, Y+1	; 0x01
    473a:	0b 85       	ldd	r16, Y+11	; 0x0b
    473c:	1c 85       	ldd	r17, Y+12	; 0x0c
    473e:	0d 5f       	subi	r16, 0xFD	; 253
    4740:	1f 4f       	sbci	r17, 0xFF	; 255
    4742:	c8 01       	movw	r24, r16
    4744:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    4748:	f8 2e       	mov	r15, r24
    474a:	6a 2d       	mov	r22, r10
    474c:	c8 01       	movw	r24, r16
    474e:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    4752:	48 2f       	mov	r20, r24
    4754:	4f 21       	and	r20, r15
    4756:	64 2d       	mov	r22, r4
    4758:	c8 01       	movw	r24, r16
    475a:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    475e:	78 c6       	rjmp	.+3312   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x20: /*OR*/
			sram.write(op1,sram.read(op2)|sram.read(op3));
    4760:	69 81       	ldd	r22, Y+1	; 0x01
    4762:	0b 85       	ldd	r16, Y+11	; 0x0b
    4764:	1c 85       	ldd	r17, Y+12	; 0x0c
    4766:	0d 5f       	subi	r16, 0xFD	; 253
    4768:	1f 4f       	sbci	r17, 0xFF	; 255
    476a:	c8 01       	movw	r24, r16
    476c:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    4770:	f8 2e       	mov	r15, r24
    4772:	6a 2d       	mov	r22, r10
    4774:	c8 01       	movw	r24, r16
    4776:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    477a:	48 2f       	mov	r20, r24
    477c:	4f 29       	or	r20, r15
    477e:	64 2d       	mov	r22, r4
    4780:	c8 01       	movw	r24, r16
    4782:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    4786:	64 c6       	rjmp	.+3272   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x21: /*NOR*/
			sram.write(op1,~(sram.read(op2)|sram.read(op3)));
    4788:	69 81       	ldd	r22, Y+1	; 0x01
    478a:	0b 85       	ldd	r16, Y+11	; 0x0b
    478c:	1c 85       	ldd	r17, Y+12	; 0x0c
    478e:	0d 5f       	subi	r16, 0xFD	; 253
    4790:	1f 4f       	sbci	r17, 0xFF	; 255
    4792:	c8 01       	movw	r24, r16
    4794:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    4798:	f8 2e       	mov	r15, r24
    479a:	6a 2d       	mov	r22, r10
    479c:	c8 01       	movw	r24, r16
    479e:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    47a2:	8f 29       	or	r24, r15
    47a4:	48 2f       	mov	r20, r24
    47a6:	40 95       	com	r20
    47a8:	64 2d       	mov	r22, r4
    47aa:	c8 01       	movw	r24, r16
    47ac:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    47b0:	4f c6       	rjmp	.+3230   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x22: /*XOR*/
			sram.write(op1,sram.read(op2)^sram.read(op3));
    47b2:	69 81       	ldd	r22, Y+1	; 0x01
    47b4:	0b 85       	ldd	r16, Y+11	; 0x0b
    47b6:	1c 85       	ldd	r17, Y+12	; 0x0c
    47b8:	0d 5f       	subi	r16, 0xFD	; 253
    47ba:	1f 4f       	sbci	r17, 0xFF	; 255
    47bc:	c8 01       	movw	r24, r16
    47be:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    47c2:	f8 2e       	mov	r15, r24
    47c4:	6a 2d       	mov	r22, r10
    47c6:	c8 01       	movw	r24, r16
    47c8:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    47cc:	48 2f       	mov	r20, r24
    47ce:	4f 25       	eor	r20, r15
    47d0:	64 2d       	mov	r22, r4
    47d2:	c8 01       	movw	r24, r16
    47d4:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    47d8:	3b c6       	rjmp	.+3190   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x23: /*NAN*/
			sram.write(op1,~(sram.read(op2)&sram.read(op3)));
    47da:	69 81       	ldd	r22, Y+1	; 0x01
    47dc:	0b 85       	ldd	r16, Y+11	; 0x0b
    47de:	1c 85       	ldd	r17, Y+12	; 0x0c
    47e0:	0d 5f       	subi	r16, 0xFD	; 253
    47e2:	1f 4f       	sbci	r17, 0xFF	; 255
    47e4:	c8 01       	movw	r24, r16
    47e6:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    47ea:	f8 2e       	mov	r15, r24
    47ec:	6a 2d       	mov	r22, r10
    47ee:	c8 01       	movw	r24, r16
    47f0:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    47f4:	8f 21       	and	r24, r15
    47f6:	48 2f       	mov	r20, r24
    47f8:	40 95       	com	r20
    47fa:	64 2d       	mov	r22, r4
    47fc:	c8 01       	movw	r24, r16
    47fe:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    4802:	26 c6       	rjmp	.+3148   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x24: /*NOT*/
			sram.write(op1,~sram.read(op2));
    4804:	69 81       	ldd	r22, Y+1	; 0x01
    4806:	0b 85       	ldd	r16, Y+11	; 0x0b
    4808:	1c 85       	ldd	r17, Y+12	; 0x0c
    480a:	0d 5f       	subi	r16, 0xFD	; 253
    480c:	1f 4f       	sbci	r17, 0xFF	; 255
    480e:	c8 01       	movw	r24, r16
    4810:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    4814:	48 2f       	mov	r20, r24
    4816:	40 95       	com	r20
    4818:	64 2d       	mov	r22, r4
    481a:	c8 01       	movw	r24, r16
    481c:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    4820:	17 c6       	rjmp	.+3118   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x25: /*SHL*/
			sram.write(op1,sram.read(op2)<<op3);
    4822:	69 81       	ldd	r22, Y+1	; 0x01
    4824:	0b 85       	ldd	r16, Y+11	; 0x0b
    4826:	1c 85       	ldd	r17, Y+12	; 0x0c
    4828:	0d 5f       	subi	r16, 0xFD	; 253
    482a:	1f 4f       	sbci	r17, 0xFF	; 255
    482c:	c8 01       	movw	r24, r16
    482e:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    4832:	48 2f       	mov	r20, r24
    4834:	55 27       	eor	r21, r21
    4836:	47 fd       	sbrc	r20, 7
    4838:	50 95       	com	r21
    483a:	02 c0       	rjmp	.+4      	; 0x4840 <_ZN4QEPU7executeEilll+0x60a>
    483c:	44 0f       	add	r20, r20
    483e:	55 1f       	adc	r21, r21
    4840:	aa 94       	dec	r10
    4842:	e2 f7       	brpl	.-8      	; 0x483c <_ZN4QEPU7executeEilll+0x606>
    4844:	64 2d       	mov	r22, r4
    4846:	c8 01       	movw	r24, r16
    4848:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    484c:	01 c6       	rjmp	.+3074   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x26: /*SHR*/
			sram.write(op1,sram.read(op2)>>op3);
    484e:	69 81       	ldd	r22, Y+1	; 0x01
    4850:	0b 85       	ldd	r16, Y+11	; 0x0b
    4852:	1c 85       	ldd	r17, Y+12	; 0x0c
    4854:	0d 5f       	subi	r16, 0xFD	; 253
    4856:	1f 4f       	sbci	r17, 0xFF	; 255
    4858:	c8 01       	movw	r24, r16
    485a:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    485e:	48 2f       	mov	r20, r24
    4860:	55 27       	eor	r21, r21
    4862:	47 fd       	sbrc	r20, 7
    4864:	50 95       	com	r21
    4866:	02 c0       	rjmp	.+4      	; 0x486c <_ZN4QEPU7executeEilll+0x636>
    4868:	55 95       	asr	r21
    486a:	47 95       	ror	r20
    486c:	aa 94       	dec	r10
    486e:	e2 f7       	brpl	.-8      	; 0x4868 <_ZN4QEPU7executeEilll+0x632>
    4870:	64 2d       	mov	r22, r4
    4872:	c8 01       	movw	r24, r16
    4874:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
			break;
    4878:	eb c5       	rjmp	.+3030   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x27: /*INT (interrupt)*/ //NEEDS TABLE SYSTEM
			interrupt_cpu(op1);
    487a:	b2 01       	movw	r22, r4
    487c:	8b 85       	ldd	r24, Y+11	; 0x0b
    487e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4880:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <_ZN4QEPU13interrupt_cpuEi>
			break;
    4884:	e5 c5       	rjmp	.+3018   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x28: /*DLY (delay)*/
			utils.delay(op1);
    4886:	b2 01       	movw	r22, r4
    4888:	8b 85       	ldd	r24, Y+11	; 0x0b
    488a:	9c 85       	ldd	r25, Y+12	; 0x0c
    488c:	8c 52       	subi	r24, 0x2C	; 44
    488e:	9f 4f       	sbci	r25, 0xFF	; 255
    4890:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN5Utils5delayEi>
			break;
    4894:	dd c5       	rjmp	.+3002   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x29: /*NOP (nop) - DOES NOTHING*/ 
			break;
		case 0x2A: /*HLT (halt)*/ 
			program_counter=program_counter_maximum;
    4896:	eb 85       	ldd	r30, Y+11	; 0x0b
    4898:	fc 85       	ldd	r31, Y+12	; 0x0c
    489a:	e9 52       	subi	r30, 0x29	; 41
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	80 81       	ld	r24, Z
    48a0:	91 81       	ldd	r25, Z+1	; 0x01
    48a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    48a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    48a6:	eb 52       	subi	r30, 0x2B	; 43
    48a8:	ff 4f       	sbci	r31, 0xFF	; 255
    48aa:	91 83       	std	Z+1, r25	; 0x01
    48ac:	80 83       	st	Z, r24
			break;
    48ae:	d0 c5       	rjmp	.+2976   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x2B: // X GATE
			newthephi=gates.X(read(op1,THE,false),read(op1,PHI,false));
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	41 e0       	ldi	r20, 0x01	; 1
    48b4:	50 e0       	ldi	r21, 0x00	; 0
    48b6:	b2 01       	movw	r22, r4
    48b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    48ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    48bc:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    48c0:	8c 01       	movw	r16, r24
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	40 e0       	ldi	r20, 0x00	; 0
    48c6:	50 e0       	ldi	r21, 0x00	; 0
    48c8:	b2 01       	movw	r22, r4
    48ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    48cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    48ce:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    48d2:	a8 01       	movw	r20, r16
    48d4:	bc 01       	movw	r22, r24
    48d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    48d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    48da:	09 96       	adiw	r24, 0x09	; 9
    48dc:	0e 94 43 09 	call	0x1286	; 0x1286 <_ZN5Gates1XEii>
    48e0:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    48e2:	dc 01       	movw	r26, r24
    48e4:	2d 91       	ld	r18, X+
    48e6:	3c 91       	ld	r19, X
    48e8:	40 e0       	ldi	r20, 0x00	; 0
    48ea:	50 e0       	ldi	r21, 0x00	; 0
    48ec:	b2 01       	movw	r22, r4
    48ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    48f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    48f2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    48f6:	f6 01       	movw	r30, r12
    48f8:	22 81       	ldd	r18, Z+2	; 0x02
    48fa:	33 81       	ldd	r19, Z+3	; 0x03
    48fc:	41 e0       	ldi	r20, 0x01	; 1
    48fe:	50 e0       	ldi	r21, 0x00	; 0
    4900:	b2 01       	movw	r22, r4
    4902:	8b 85       	ldd	r24, Y+11	; 0x0b
    4904:	9c 85       	ldd	r25, Y+12	; 0x0c
    4906:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    490a:	a2 c5       	rjmp	.+2884   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x2C: // Y GATE
			newthephi=gates.Y(read(op1,THE,false),read(op1,PHI,false));
    490c:	20 e0       	ldi	r18, 0x00	; 0
    490e:	41 e0       	ldi	r20, 0x01	; 1
    4910:	50 e0       	ldi	r21, 0x00	; 0
    4912:	b2 01       	movw	r22, r4
    4914:	8b 85       	ldd	r24, Y+11	; 0x0b
    4916:	9c 85       	ldd	r25, Y+12	; 0x0c
    4918:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    491c:	8c 01       	movw	r16, r24
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	40 e0       	ldi	r20, 0x00	; 0
    4922:	50 e0       	ldi	r21, 0x00	; 0
    4924:	b2 01       	movw	r22, r4
    4926:	8b 85       	ldd	r24, Y+11	; 0x0b
    4928:	9c 85       	ldd	r25, Y+12	; 0x0c
    492a:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    492e:	a8 01       	movw	r20, r16
    4930:	bc 01       	movw	r22, r24
    4932:	8b 85       	ldd	r24, Y+11	; 0x0b
    4934:	9c 85       	ldd	r25, Y+12	; 0x0c
    4936:	09 96       	adiw	r24, 0x09	; 9
    4938:	0e 94 ad 09 	call	0x135a	; 0x135a <_ZN5Gates1YEii>
    493c:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    493e:	dc 01       	movw	r26, r24
    4940:	2d 91       	ld	r18, X+
    4942:	3c 91       	ld	r19, X
    4944:	40 e0       	ldi	r20, 0x00	; 0
    4946:	50 e0       	ldi	r21, 0x00	; 0
    4948:	b2 01       	movw	r22, r4
    494a:	8b 85       	ldd	r24, Y+11	; 0x0b
    494c:	9c 85       	ldd	r25, Y+12	; 0x0c
    494e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4952:	f6 01       	movw	r30, r12
    4954:	22 81       	ldd	r18, Z+2	; 0x02
    4956:	33 81       	ldd	r19, Z+3	; 0x03
    4958:	41 e0       	ldi	r20, 0x01	; 1
    495a:	50 e0       	ldi	r21, 0x00	; 0
    495c:	b2 01       	movw	r22, r4
    495e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4960:	9c 85       	ldd	r25, Y+12	; 0x0c
    4962:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4966:	74 c5       	rjmp	.+2792   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x2D: // Z GATE
			newthephi=gates.Z(read(op1,THE,false),read(op1,PHI,false));
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	41 e0       	ldi	r20, 0x01	; 1
    496c:	50 e0       	ldi	r21, 0x00	; 0
    496e:	b2 01       	movw	r22, r4
    4970:	8b 85       	ldd	r24, Y+11	; 0x0b
    4972:	9c 85       	ldd	r25, Y+12	; 0x0c
    4974:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4978:	8c 01       	movw	r16, r24
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	40 e0       	ldi	r20, 0x00	; 0
    497e:	50 e0       	ldi	r21, 0x00	; 0
    4980:	b2 01       	movw	r22, r4
    4982:	8b 85       	ldd	r24, Y+11	; 0x0b
    4984:	9c 85       	ldd	r25, Y+12	; 0x0c
    4986:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    498a:	a8 01       	movw	r20, r16
    498c:	bc 01       	movw	r22, r24
    498e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4990:	9c 85       	ldd	r25, Y+12	; 0x0c
    4992:	09 96       	adiw	r24, 0x09	; 9
    4994:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZN5Gates1ZEii>
    4998:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    499a:	dc 01       	movw	r26, r24
    499c:	2d 91       	ld	r18, X+
    499e:	3c 91       	ld	r19, X
    49a0:	40 e0       	ldi	r20, 0x00	; 0
    49a2:	50 e0       	ldi	r21, 0x00	; 0
    49a4:	b2 01       	movw	r22, r4
    49a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    49a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    49aa:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    49ae:	f6 01       	movw	r30, r12
    49b0:	22 81       	ldd	r18, Z+2	; 0x02
    49b2:	33 81       	ldd	r19, Z+3	; 0x03
    49b4:	41 e0       	ldi	r20, 0x01	; 1
    49b6:	50 e0       	ldi	r21, 0x00	; 0
    49b8:	b2 01       	movw	r22, r4
    49ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    49bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    49be:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    49c2:	46 c5       	rjmp	.+2700   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x2E: // H GATE
			newthephi=gates.H(read(op1,THE,false),read(op1,PHI,false));
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	41 e0       	ldi	r20, 0x01	; 1
    49c8:	50 e0       	ldi	r21, 0x00	; 0
    49ca:	b2 01       	movw	r22, r4
    49cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    49ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    49d0:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    49d4:	8c 01       	movw	r16, r24
    49d6:	20 e0       	ldi	r18, 0x00	; 0
    49d8:	40 e0       	ldi	r20, 0x00	; 0
    49da:	50 e0       	ldi	r21, 0x00	; 0
    49dc:	b2 01       	movw	r22, r4
    49de:	8b 85       	ldd	r24, Y+11	; 0x0b
    49e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    49e2:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    49e6:	a8 01       	movw	r20, r16
    49e8:	bc 01       	movw	r22, r24
    49ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    49ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    49ee:	09 96       	adiw	r24, 0x09	; 9
    49f0:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN5Gates1HEii>
    49f4:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    49f6:	dc 01       	movw	r26, r24
    49f8:	2d 91       	ld	r18, X+
    49fa:	3c 91       	ld	r19, X
    49fc:	40 e0       	ldi	r20, 0x00	; 0
    49fe:	50 e0       	ldi	r21, 0x00	; 0
    4a00:	b2 01       	movw	r22, r4
    4a02:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a04:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a06:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4a0a:	f6 01       	movw	r30, r12
    4a0c:	22 81       	ldd	r18, Z+2	; 0x02
    4a0e:	33 81       	ldd	r19, Z+3	; 0x03
    4a10:	41 e0       	ldi	r20, 0x01	; 1
    4a12:	50 e0       	ldi	r21, 0x00	; 0
    4a14:	b2 01       	movw	r22, r4
    4a16:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a18:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a1a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4a1e:	18 c5       	rjmp	.+2608   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x2F: // S GATE
			newthephi=gates.S(read(op1,THE,false),read(op1,PHI,false));
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	41 e0       	ldi	r20, 0x01	; 1
    4a24:	50 e0       	ldi	r21, 0x00	; 0
    4a26:	b2 01       	movw	r22, r4
    4a28:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a2c:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4a30:	8c 01       	movw	r16, r24
    4a32:	20 e0       	ldi	r18, 0x00	; 0
    4a34:	40 e0       	ldi	r20, 0x00	; 0
    4a36:	50 e0       	ldi	r21, 0x00	; 0
    4a38:	b2 01       	movw	r22, r4
    4a3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a3e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4a42:	a8 01       	movw	r20, r16
    4a44:	bc 01       	movw	r22, r24
    4a46:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a48:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a4a:	09 96       	adiw	r24, 0x09	; 9
    4a4c:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN5Gates1SEii>
    4a50:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4a52:	dc 01       	movw	r26, r24
    4a54:	2d 91       	ld	r18, X+
    4a56:	3c 91       	ld	r19, X
    4a58:	40 e0       	ldi	r20, 0x00	; 0
    4a5a:	50 e0       	ldi	r21, 0x00	; 0
    4a5c:	b2 01       	movw	r22, r4
    4a5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a60:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a62:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4a66:	f6 01       	movw	r30, r12
    4a68:	22 81       	ldd	r18, Z+2	; 0x02
    4a6a:	33 81       	ldd	r19, Z+3	; 0x03
    4a6c:	41 e0       	ldi	r20, 0x01	; 1
    4a6e:	50 e0       	ldi	r21, 0x00	; 0
    4a70:	b2 01       	movw	r22, r4
    4a72:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a74:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a76:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4a7a:	ea c4       	rjmp	.+2516   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x30: // T GATE
			newthephi=gates.T(read(op1,THE,false),read(op1,PHI,false));
    4a7c:	20 e0       	ldi	r18, 0x00	; 0
    4a7e:	41 e0       	ldi	r20, 0x01	; 1
    4a80:	50 e0       	ldi	r21, 0x00	; 0
    4a82:	b2 01       	movw	r22, r4
    4a84:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a86:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a88:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4a8c:	8c 01       	movw	r16, r24
    4a8e:	20 e0       	ldi	r18, 0x00	; 0
    4a90:	40 e0       	ldi	r20, 0x00	; 0
    4a92:	50 e0       	ldi	r21, 0x00	; 0
    4a94:	b2 01       	movw	r22, r4
    4a96:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a98:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a9a:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4a9e:	a8 01       	movw	r20, r16
    4aa0:	bc 01       	movw	r22, r24
    4aa2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4aa4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4aa6:	09 96       	adiw	r24, 0x09	; 9
    4aa8:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN5Gates1TEii>
    4aac:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4aae:	dc 01       	movw	r26, r24
    4ab0:	2d 91       	ld	r18, X+
    4ab2:	3c 91       	ld	r19, X
    4ab4:	40 e0       	ldi	r20, 0x00	; 0
    4ab6:	50 e0       	ldi	r21, 0x00	; 0
    4ab8:	b2 01       	movw	r22, r4
    4aba:	8b 85       	ldd	r24, Y+11	; 0x0b
    4abc:	9c 85       	ldd	r25, Y+12	; 0x0c
    4abe:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4ac2:	f6 01       	movw	r30, r12
    4ac4:	22 81       	ldd	r18, Z+2	; 0x02
    4ac6:	33 81       	ldd	r19, Z+3	; 0x03
    4ac8:	41 e0       	ldi	r20, 0x01	; 1
    4aca:	50 e0       	ldi	r21, 0x00	; 0
    4acc:	b2 01       	movw	r22, r4
    4ace:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ad0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ad2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4ad6:	bc c4       	rjmp	.+2424   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x31: // ROTATE X GATE
			newthephi=gates.ROX(read(op1,THE,false),read(op1,PHI,false),op2);
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	41 e0       	ldi	r20, 0x01	; 1
    4adc:	50 e0       	ldi	r21, 0x00	; 0
    4ade:	b2 01       	movw	r22, r4
    4ae0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ae2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ae4:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4ae8:	8c 01       	movw	r16, r24
    4aea:	20 e0       	ldi	r18, 0x00	; 0
    4aec:	40 e0       	ldi	r20, 0x00	; 0
    4aee:	50 e0       	ldi	r21, 0x00	; 0
    4af0:	b2 01       	movw	r22, r4
    4af2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4af4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4af6:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4afa:	29 81       	ldd	r18, Y+1	; 0x01
    4afc:	3a 81       	ldd	r19, Y+2	; 0x02
    4afe:	a8 01       	movw	r20, r16
    4b00:	bc 01       	movw	r22, r24
    4b02:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b04:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b06:	09 96       	adiw	r24, 0x09	; 9
    4b08:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <_ZN5Gates3ROXEiii>
    4b0c:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4b0e:	dc 01       	movw	r26, r24
    4b10:	2d 91       	ld	r18, X+
    4b12:	3c 91       	ld	r19, X
    4b14:	40 e0       	ldi	r20, 0x00	; 0
    4b16:	50 e0       	ldi	r21, 0x00	; 0
    4b18:	b2 01       	movw	r22, r4
    4b1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b1e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4b22:	f6 01       	movw	r30, r12
    4b24:	22 81       	ldd	r18, Z+2	; 0x02
    4b26:	33 81       	ldd	r19, Z+3	; 0x03
    4b28:	41 e0       	ldi	r20, 0x01	; 1
    4b2a:	50 e0       	ldi	r21, 0x00	; 0
    4b2c:	b2 01       	movw	r22, r4
    4b2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b30:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b32:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4b36:	8c c4       	rjmp	.+2328   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x32: // ROTATE Y GATE
			newthephi=gates.ROY(read(op1,THE,false),read(op1,PHI,false),op2);
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	41 e0       	ldi	r20, 0x01	; 1
    4b3c:	50 e0       	ldi	r21, 0x00	; 0
    4b3e:	b2 01       	movw	r22, r4
    4b40:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b42:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b44:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4b48:	8c 01       	movw	r16, r24
    4b4a:	20 e0       	ldi	r18, 0x00	; 0
    4b4c:	40 e0       	ldi	r20, 0x00	; 0
    4b4e:	50 e0       	ldi	r21, 0x00	; 0
    4b50:	b2 01       	movw	r22, r4
    4b52:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b54:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b56:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4b5a:	29 81       	ldd	r18, Y+1	; 0x01
    4b5c:	3a 81       	ldd	r19, Y+2	; 0x02
    4b5e:	a8 01       	movw	r20, r16
    4b60:	bc 01       	movw	r22, r24
    4b62:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b64:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b66:	09 96       	adiw	r24, 0x09	; 9
    4b68:	0e 94 73 13 	call	0x26e6	; 0x26e6 <_ZN5Gates3ROYEiii>
    4b6c:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4b6e:	dc 01       	movw	r26, r24
    4b70:	2d 91       	ld	r18, X+
    4b72:	3c 91       	ld	r19, X
    4b74:	40 e0       	ldi	r20, 0x00	; 0
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	b2 01       	movw	r22, r4
    4b7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b7e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4b82:	f6 01       	movw	r30, r12
    4b84:	22 81       	ldd	r18, Z+2	; 0x02
    4b86:	33 81       	ldd	r19, Z+3	; 0x03
    4b88:	41 e0       	ldi	r20, 0x01	; 1
    4b8a:	50 e0       	ldi	r21, 0x00	; 0
    4b8c:	b2 01       	movw	r22, r4
    4b8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b90:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b92:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4b96:	5c c4       	rjmp	.+2232   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x33: // ROTATE Z GATE
			newthephi=gates.ROZ(read(op1,THE,false),read(op1,PHI,false),op2);
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	41 e0       	ldi	r20, 0x01	; 1
    4b9c:	50 e0       	ldi	r21, 0x00	; 0
    4b9e:	b2 01       	movw	r22, r4
    4ba0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ba2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ba4:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4ba8:	8c 01       	movw	r16, r24
    4baa:	20 e0       	ldi	r18, 0x00	; 0
    4bac:	40 e0       	ldi	r20, 0x00	; 0
    4bae:	50 e0       	ldi	r21, 0x00	; 0
    4bb0:	b2 01       	movw	r22, r4
    4bb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bb6:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4bba:	29 81       	ldd	r18, Y+1	; 0x01
    4bbc:	3a 81       	ldd	r19, Y+2	; 0x02
    4bbe:	a8 01       	movw	r20, r16
    4bc0:	bc 01       	movw	r22, r24
    4bc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bc4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bc6:	09 96       	adiw	r24, 0x09	; 9
    4bc8:	0e 94 0f 14 	call	0x281e	; 0x281e <_ZN5Gates3ROZEiii>
    4bcc:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4bce:	dc 01       	movw	r26, r24
    4bd0:	2d 91       	ld	r18, X+
    4bd2:	3c 91       	ld	r19, X
    4bd4:	40 e0       	ldi	r20, 0x00	; 0
    4bd6:	50 e0       	ldi	r21, 0x00	; 0
    4bd8:	b2 01       	movw	r22, r4
    4bda:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bde:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4be2:	f6 01       	movw	r30, r12
    4be4:	22 81       	ldd	r18, Z+2	; 0x02
    4be6:	33 81       	ldd	r19, Z+3	; 0x03
    4be8:	41 e0       	ldi	r20, 0x01	; 1
    4bea:	50 e0       	ldi	r21, 0x00	; 0
    4bec:	b2 01       	movw	r22, r4
    4bee:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bf0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bf2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4bf6:	2c c4       	rjmp	.+2136   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		//2 QUBIT GATES -
		case 0x34: // CNOT GATE
			newthephi=gates.CNO(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	41 e0       	ldi	r20, 0x01	; 1
    4bfc:	50 e0       	ldi	r21, 0x00	; 0
    4bfe:	69 81       	ldd	r22, Y+1	; 0x01
    4c00:	7a 81       	ldd	r23, Y+2	; 0x02
    4c02:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c04:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c06:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4c0a:	8c 01       	movw	r16, r24
    4c0c:	20 e0       	ldi	r18, 0x00	; 0
    4c0e:	40 e0       	ldi	r20, 0x00	; 0
    4c10:	50 e0       	ldi	r21, 0x00	; 0
    4c12:	69 81       	ldd	r22, Y+1	; 0x01
    4c14:	7a 81       	ldd	r23, Y+2	; 0x02
    4c16:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c18:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c1a:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4c1e:	6c 01       	movw	r12, r24
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	41 e0       	ldi	r20, 0x01	; 1
    4c24:	50 e0       	ldi	r21, 0x00	; 0
    4c26:	b2 01       	movw	r22, r4
    4c28:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c2c:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4c30:	7c 01       	movw	r14, r24
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	40 e0       	ldi	r20, 0x00	; 0
    4c36:	50 e0       	ldi	r21, 0x00	; 0
    4c38:	b2 01       	movw	r22, r4
    4c3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c3e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4c42:	96 01       	movw	r18, r12
    4c44:	a7 01       	movw	r20, r14
    4c46:	bc 01       	movw	r22, r24
    4c48:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c4c:	09 96       	adiw	r24, 0x09	; 9
    4c4e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <_ZN5Gates3CNOEiiii>
    4c52:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4c54:	dc 01       	movw	r26, r24
    4c56:	2d 91       	ld	r18, X+
    4c58:	3c 91       	ld	r19, X
    4c5a:	40 e0       	ldi	r20, 0x00	; 0
    4c5c:	50 e0       	ldi	r21, 0x00	; 0
    4c5e:	b2 01       	movw	r22, r4
    4c60:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c62:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c64:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4c68:	f6 01       	movw	r30, r12
    4c6a:	22 81       	ldd	r18, Z+2	; 0x02
    4c6c:	33 81       	ldd	r19, Z+3	; 0x03
    4c6e:	41 e0       	ldi	r20, 0x01	; 1
    4c70:	50 e0       	ldi	r21, 0x00	; 0
    4c72:	b2 01       	movw	r22, r4
    4c74:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c76:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c78:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    4c7c:	d6 01       	movw	r26, r12
    4c7e:	14 96       	adiw	r26, 0x04	; 4
    4c80:	2d 91       	ld	r18, X+
    4c82:	3c 91       	ld	r19, X
    4c84:	15 97       	sbiw	r26, 0x05	; 5
    4c86:	40 e0       	ldi	r20, 0x00	; 0
    4c88:	50 e0       	ldi	r21, 0x00	; 0
    4c8a:	69 81       	ldd	r22, Y+1	; 0x01
    4c8c:	7a 81       	ldd	r23, Y+2	; 0x02
    4c8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c90:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c92:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4c96:	f6 01       	movw	r30, r12
    4c98:	26 81       	ldd	r18, Z+6	; 0x06
    4c9a:	37 81       	ldd	r19, Z+7	; 0x07
    4c9c:	41 e0       	ldi	r20, 0x01	; 1
    4c9e:	50 e0       	ldi	r21, 0x00	; 0
    4ca0:	69 81       	ldd	r22, Y+1	; 0x01
    4ca2:	7a 81       	ldd	r23, Y+2	; 0x02
    4ca4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ca6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ca8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4cac:	d1 c3       	rjmp	.+1954   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x35: // CSIGN GATE
			newthephi=gates.CSI(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	41 e0       	ldi	r20, 0x01	; 1
    4cb2:	50 e0       	ldi	r21, 0x00	; 0
    4cb4:	69 81       	ldd	r22, Y+1	; 0x01
    4cb6:	7a 81       	ldd	r23, Y+2	; 0x02
    4cb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    4cba:	9c 85       	ldd	r25, Y+12	; 0x0c
    4cbc:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4cc0:	8c 01       	movw	r16, r24
    4cc2:	20 e0       	ldi	r18, 0x00	; 0
    4cc4:	40 e0       	ldi	r20, 0x00	; 0
    4cc6:	50 e0       	ldi	r21, 0x00	; 0
    4cc8:	69 81       	ldd	r22, Y+1	; 0x01
    4cca:	7a 81       	ldd	r23, Y+2	; 0x02
    4ccc:	8b 85       	ldd	r24, Y+11	; 0x0b
    4cce:	9c 85       	ldd	r25, Y+12	; 0x0c
    4cd0:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4cd4:	6c 01       	movw	r12, r24
    4cd6:	20 e0       	ldi	r18, 0x00	; 0
    4cd8:	41 e0       	ldi	r20, 0x01	; 1
    4cda:	50 e0       	ldi	r21, 0x00	; 0
    4cdc:	b2 01       	movw	r22, r4
    4cde:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ce0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ce2:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4ce6:	7c 01       	movw	r14, r24
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	40 e0       	ldi	r20, 0x00	; 0
    4cec:	50 e0       	ldi	r21, 0x00	; 0
    4cee:	b2 01       	movw	r22, r4
    4cf0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4cf2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4cf4:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4cf8:	96 01       	movw	r18, r12
    4cfa:	a7 01       	movw	r20, r14
    4cfc:	bc 01       	movw	r22, r24
    4cfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d00:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d02:	09 96       	adiw	r24, 0x09	; 9
    4d04:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN5Gates3CSIEiiii>
    4d08:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4d0a:	dc 01       	movw	r26, r24
    4d0c:	2d 91       	ld	r18, X+
    4d0e:	3c 91       	ld	r19, X
    4d10:	40 e0       	ldi	r20, 0x00	; 0
    4d12:	50 e0       	ldi	r21, 0x00	; 0
    4d14:	b2 01       	movw	r22, r4
    4d16:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d18:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d1a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4d1e:	f6 01       	movw	r30, r12
    4d20:	22 81       	ldd	r18, Z+2	; 0x02
    4d22:	33 81       	ldd	r19, Z+3	; 0x03
    4d24:	41 e0       	ldi	r20, 0x01	; 1
    4d26:	50 e0       	ldi	r21, 0x00	; 0
    4d28:	b2 01       	movw	r22, r4
    4d2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d2e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    4d32:	d6 01       	movw	r26, r12
    4d34:	14 96       	adiw	r26, 0x04	; 4
    4d36:	2d 91       	ld	r18, X+
    4d38:	3c 91       	ld	r19, X
    4d3a:	15 97       	sbiw	r26, 0x05	; 5
    4d3c:	40 e0       	ldi	r20, 0x00	; 0
    4d3e:	50 e0       	ldi	r21, 0x00	; 0
    4d40:	69 81       	ldd	r22, Y+1	; 0x01
    4d42:	7a 81       	ldd	r23, Y+2	; 0x02
    4d44:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d46:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d48:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4d4c:	f6 01       	movw	r30, r12
    4d4e:	26 81       	ldd	r18, Z+6	; 0x06
    4d50:	37 81       	ldd	r19, Z+7	; 0x07
    4d52:	41 e0       	ldi	r20, 0x01	; 1
    4d54:	50 e0       	ldi	r21, 0x00	; 0
    4d56:	69 81       	ldd	r22, Y+1	; 0x01
    4d58:	7a 81       	ldd	r23, Y+2	; 0x02
    4d5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d5e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4d62:	76 c3       	rjmp	.+1772   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x36: // SWAP GATE
			newthephi=gates.SWA(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	41 e0       	ldi	r20, 0x01	; 1
    4d68:	50 e0       	ldi	r21, 0x00	; 0
    4d6a:	69 81       	ldd	r22, Y+1	; 0x01
    4d6c:	7a 81       	ldd	r23, Y+2	; 0x02
    4d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d70:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d72:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4d76:	8c 01       	movw	r16, r24
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	40 e0       	ldi	r20, 0x00	; 0
    4d7c:	50 e0       	ldi	r21, 0x00	; 0
    4d7e:	69 81       	ldd	r22, Y+1	; 0x01
    4d80:	7a 81       	ldd	r23, Y+2	; 0x02
    4d82:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d84:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d86:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4d8a:	6c 01       	movw	r12, r24
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	41 e0       	ldi	r20, 0x01	; 1
    4d90:	50 e0       	ldi	r21, 0x00	; 0
    4d92:	b2 01       	movw	r22, r4
    4d94:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d96:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d98:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4d9c:	7c 01       	movw	r14, r24
    4d9e:	20 e0       	ldi	r18, 0x00	; 0
    4da0:	40 e0       	ldi	r20, 0x00	; 0
    4da2:	50 e0       	ldi	r21, 0x00	; 0
    4da4:	b2 01       	movw	r22, r4
    4da6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4da8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4daa:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4dae:	96 01       	movw	r18, r12
    4db0:	a7 01       	movw	r20, r14
    4db2:	bc 01       	movw	r22, r24
    4db4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4db6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4db8:	09 96       	adiw	r24, 0x09	; 9
    4dba:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Gates3SWAEiiii>
    4dbe:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4dc0:	dc 01       	movw	r26, r24
    4dc2:	2d 91       	ld	r18, X+
    4dc4:	3c 91       	ld	r19, X
    4dc6:	40 e0       	ldi	r20, 0x00	; 0
    4dc8:	50 e0       	ldi	r21, 0x00	; 0
    4dca:	b2 01       	movw	r22, r4
    4dcc:	8b 85       	ldd	r24, Y+11	; 0x0b
    4dce:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dd0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4dd4:	f6 01       	movw	r30, r12
    4dd6:	22 81       	ldd	r18, Z+2	; 0x02
    4dd8:	33 81       	ldd	r19, Z+3	; 0x03
    4dda:	41 e0       	ldi	r20, 0x01	; 1
    4ddc:	50 e0       	ldi	r21, 0x00	; 0
    4dde:	b2 01       	movw	r22, r4
    4de0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4de2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4de4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    4de8:	d6 01       	movw	r26, r12
    4dea:	14 96       	adiw	r26, 0x04	; 4
    4dec:	2d 91       	ld	r18, X+
    4dee:	3c 91       	ld	r19, X
    4df0:	15 97       	sbiw	r26, 0x05	; 5
    4df2:	40 e0       	ldi	r20, 0x00	; 0
    4df4:	50 e0       	ldi	r21, 0x00	; 0
    4df6:	69 81       	ldd	r22, Y+1	; 0x01
    4df8:	7a 81       	ldd	r23, Y+2	; 0x02
    4dfa:	8b 85       	ldd	r24, Y+11	; 0x0b
    4dfc:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dfe:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4e02:	f6 01       	movw	r30, r12
    4e04:	26 81       	ldd	r18, Z+6	; 0x06
    4e06:	37 81       	ldd	r19, Z+7	; 0x07
    4e08:	41 e0       	ldi	r20, 0x01	; 1
    4e0a:	50 e0       	ldi	r21, 0x00	; 0
    4e0c:	69 81       	ldd	r22, Y+1	; 0x01
    4e0e:	7a 81       	ldd	r23, Y+2	; 0x02
    4e10:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e12:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e14:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4e18:	1b c3       	rjmp	.+1590   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x37: // INCREMENT GATE
			newthephi=gates.INC(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4e1a:	20 e0       	ldi	r18, 0x00	; 0
    4e1c:	41 e0       	ldi	r20, 0x01	; 1
    4e1e:	50 e0       	ldi	r21, 0x00	; 0
    4e20:	69 81       	ldd	r22, Y+1	; 0x01
    4e22:	7a 81       	ldd	r23, Y+2	; 0x02
    4e24:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e26:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e28:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4e2c:	8c 01       	movw	r16, r24
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	40 e0       	ldi	r20, 0x00	; 0
    4e32:	50 e0       	ldi	r21, 0x00	; 0
    4e34:	69 81       	ldd	r22, Y+1	; 0x01
    4e36:	7a 81       	ldd	r23, Y+2	; 0x02
    4e38:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e3c:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4e40:	6c 01       	movw	r12, r24
    4e42:	20 e0       	ldi	r18, 0x00	; 0
    4e44:	41 e0       	ldi	r20, 0x01	; 1
    4e46:	50 e0       	ldi	r21, 0x00	; 0
    4e48:	b2 01       	movw	r22, r4
    4e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e4e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4e52:	7c 01       	movw	r14, r24
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	40 e0       	ldi	r20, 0x00	; 0
    4e58:	50 e0       	ldi	r21, 0x00	; 0
    4e5a:	b2 01       	movw	r22, r4
    4e5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e60:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4e64:	96 01       	movw	r18, r12
    4e66:	a7 01       	movw	r20, r14
    4e68:	bc 01       	movw	r22, r24
    4e6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e6e:	09 96       	adiw	r24, 0x09	; 9
    4e70:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN5Gates3INCEiiii>
    4e74:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4e76:	dc 01       	movw	r26, r24
    4e78:	2d 91       	ld	r18, X+
    4e7a:	3c 91       	ld	r19, X
    4e7c:	40 e0       	ldi	r20, 0x00	; 0
    4e7e:	50 e0       	ldi	r21, 0x00	; 0
    4e80:	b2 01       	movw	r22, r4
    4e82:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e84:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e86:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4e8a:	f6 01       	movw	r30, r12
    4e8c:	22 81       	ldd	r18, Z+2	; 0x02
    4e8e:	33 81       	ldd	r19, Z+3	; 0x03
    4e90:	41 e0       	ldi	r20, 0x01	; 1
    4e92:	50 e0       	ldi	r21, 0x00	; 0
    4e94:	b2 01       	movw	r22, r4
    4e96:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e98:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e9a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    4e9e:	d6 01       	movw	r26, r12
    4ea0:	14 96       	adiw	r26, 0x04	; 4
    4ea2:	2d 91       	ld	r18, X+
    4ea4:	3c 91       	ld	r19, X
    4ea6:	15 97       	sbiw	r26, 0x05	; 5
    4ea8:	40 e0       	ldi	r20, 0x00	; 0
    4eaa:	50 e0       	ldi	r21, 0x00	; 0
    4eac:	69 81       	ldd	r22, Y+1	; 0x01
    4eae:	7a 81       	ldd	r23, Y+2	; 0x02
    4eb0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4eb2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4eb4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4eb8:	f6 01       	movw	r30, r12
    4eba:	26 81       	ldd	r18, Z+6	; 0x06
    4ebc:	37 81       	ldd	r19, Z+7	; 0x07
    4ebe:	41 e0       	ldi	r20, 0x01	; 1
    4ec0:	50 e0       	ldi	r21, 0x00	; 0
    4ec2:	69 81       	ldd	r22, Y+1	; 0x01
    4ec4:	7a 81       	ldd	r23, Y+2	; 0x02
    4ec6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ec8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4eca:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4ece:	c0 c2       	rjmp	.+1408   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x38: // DECREMENT GATE
			newthephi=gates.DEC(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4ed0:	20 e0       	ldi	r18, 0x00	; 0
    4ed2:	41 e0       	ldi	r20, 0x01	; 1
    4ed4:	50 e0       	ldi	r21, 0x00	; 0
    4ed6:	69 81       	ldd	r22, Y+1	; 0x01
    4ed8:	7a 81       	ldd	r23, Y+2	; 0x02
    4eda:	8b 85       	ldd	r24, Y+11	; 0x0b
    4edc:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ede:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4ee2:	8c 01       	movw	r16, r24
    4ee4:	20 e0       	ldi	r18, 0x00	; 0
    4ee6:	40 e0       	ldi	r20, 0x00	; 0
    4ee8:	50 e0       	ldi	r21, 0x00	; 0
    4eea:	69 81       	ldd	r22, Y+1	; 0x01
    4eec:	7a 81       	ldd	r23, Y+2	; 0x02
    4eee:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ef0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ef2:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4ef6:	6c 01       	movw	r12, r24
    4ef8:	20 e0       	ldi	r18, 0x00	; 0
    4efa:	41 e0       	ldi	r20, 0x01	; 1
    4efc:	50 e0       	ldi	r21, 0x00	; 0
    4efe:	b2 01       	movw	r22, r4
    4f00:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f02:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f04:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4f08:	7c 01       	movw	r14, r24
    4f0a:	20 e0       	ldi	r18, 0x00	; 0
    4f0c:	40 e0       	ldi	r20, 0x00	; 0
    4f0e:	50 e0       	ldi	r21, 0x00	; 0
    4f10:	b2 01       	movw	r22, r4
    4f12:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f14:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f16:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4f1a:	96 01       	movw	r18, r12
    4f1c:	a7 01       	movw	r20, r14
    4f1e:	bc 01       	movw	r22, r24
    4f20:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f22:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f24:	09 96       	adiw	r24, 0x09	; 9
    4f26:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <_ZN5Gates3DECEiiii>
    4f2a:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	2d 91       	ld	r18, X+
    4f30:	3c 91       	ld	r19, X
    4f32:	40 e0       	ldi	r20, 0x00	; 0
    4f34:	50 e0       	ldi	r21, 0x00	; 0
    4f36:	b2 01       	movw	r22, r4
    4f38:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f3c:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4f40:	f6 01       	movw	r30, r12
    4f42:	22 81       	ldd	r18, Z+2	; 0x02
    4f44:	33 81       	ldd	r19, Z+3	; 0x03
    4f46:	41 e0       	ldi	r20, 0x01	; 1
    4f48:	50 e0       	ldi	r21, 0x00	; 0
    4f4a:	b2 01       	movw	r22, r4
    4f4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f50:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    4f54:	d6 01       	movw	r26, r12
    4f56:	14 96       	adiw	r26, 0x04	; 4
    4f58:	2d 91       	ld	r18, X+
    4f5a:	3c 91       	ld	r19, X
    4f5c:	15 97       	sbiw	r26, 0x05	; 5
    4f5e:	40 e0       	ldi	r20, 0x00	; 0
    4f60:	50 e0       	ldi	r21, 0x00	; 0
    4f62:	69 81       	ldd	r22, Y+1	; 0x01
    4f64:	7a 81       	ldd	r23, Y+2	; 0x02
    4f66:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f68:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f6a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4f6e:	f6 01       	movw	r30, r12
    4f70:	26 81       	ldd	r18, Z+6	; 0x06
    4f72:	37 81       	ldd	r19, Z+7	; 0x07
    4f74:	41 e0       	ldi	r20, 0x01	; 1
    4f76:	50 e0       	ldi	r21, 0x00	; 0
    4f78:	69 81       	ldd	r22, Y+1	; 0x01
    4f7a:	7a 81       	ldd	r23, Y+2	; 0x02
    4f7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f80:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    4f84:	65 c2       	rjmp	.+1226   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x39: // SWAGSQ GATE
			newthephi=gates.SWQ(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4f86:	20 e0       	ldi	r18, 0x00	; 0
    4f88:	41 e0       	ldi	r20, 0x01	; 1
    4f8a:	50 e0       	ldi	r21, 0x00	; 0
    4f8c:	69 81       	ldd	r22, Y+1	; 0x01
    4f8e:	7a 81       	ldd	r23, Y+2	; 0x02
    4f90:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f92:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f94:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4f98:	8c 01       	movw	r16, r24
    4f9a:	20 e0       	ldi	r18, 0x00	; 0
    4f9c:	40 e0       	ldi	r20, 0x00	; 0
    4f9e:	50 e0       	ldi	r21, 0x00	; 0
    4fa0:	69 81       	ldd	r22, Y+1	; 0x01
    4fa2:	7a 81       	ldd	r23, Y+2	; 0x02
    4fa4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fa6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fa8:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4fac:	6c 01       	movw	r12, r24
    4fae:	20 e0       	ldi	r18, 0x00	; 0
    4fb0:	41 e0       	ldi	r20, 0x01	; 1
    4fb2:	50 e0       	ldi	r21, 0x00	; 0
    4fb4:	b2 01       	movw	r22, r4
    4fb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fba:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4fbe:	7c 01       	movw	r14, r24
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	40 e0       	ldi	r20, 0x00	; 0
    4fc4:	50 e0       	ldi	r21, 0x00	; 0
    4fc6:	b2 01       	movw	r22, r4
    4fc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fca:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fcc:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    4fd0:	96 01       	movw	r18, r12
    4fd2:	a7 01       	movw	r20, r14
    4fd4:	bc 01       	movw	r22, r24
    4fd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fda:	09 96       	adiw	r24, 0x09	; 9
    4fdc:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5Gates3SWQEiiii>
    4fe0:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4fe2:	dc 01       	movw	r26, r24
    4fe4:	2d 91       	ld	r18, X+
    4fe6:	3c 91       	ld	r19, X
    4fe8:	40 e0       	ldi	r20, 0x00	; 0
    4fea:	50 e0       	ldi	r21, 0x00	; 0
    4fec:	b2 01       	movw	r22, r4
    4fee:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ff0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ff2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    4ff6:	f6 01       	movw	r30, r12
    4ff8:	22 81       	ldd	r18, Z+2	; 0x02
    4ffa:	33 81       	ldd	r19, Z+3	; 0x03
    4ffc:	41 e0       	ldi	r20, 0x01	; 1
    4ffe:	50 e0       	ldi	r21, 0x00	; 0
    5000:	b2 01       	movw	r22, r4
    5002:	8b 85       	ldd	r24, Y+11	; 0x0b
    5004:	9c 85       	ldd	r25, Y+12	; 0x0c
    5006:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    500a:	d6 01       	movw	r26, r12
    500c:	14 96       	adiw	r26, 0x04	; 4
    500e:	2d 91       	ld	r18, X+
    5010:	3c 91       	ld	r19, X
    5012:	15 97       	sbiw	r26, 0x05	; 5
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	50 e0       	ldi	r21, 0x00	; 0
    5018:	69 81       	ldd	r22, Y+1	; 0x01
    501a:	7a 81       	ldd	r23, Y+2	; 0x02
    501c:	8b 85       	ldd	r24, Y+11	; 0x0b
    501e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5020:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    5024:	f6 01       	movw	r30, r12
    5026:	26 81       	ldd	r18, Z+6	; 0x06
    5028:	37 81       	ldd	r19, Z+7	; 0x07
    502a:	41 e0       	ldi	r20, 0x01	; 1
    502c:	50 e0       	ldi	r21, 0x00	; 0
    502e:	69 81       	ldd	r22, Y+1	; 0x01
    5030:	7a 81       	ldd	r23, Y+2	; 0x02
    5032:	8b 85       	ldd	r24, Y+11	; 0x0b
    5034:	9c 85       	ldd	r25, Y+12	; 0x0c
    5036:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    503a:	0a c2       	rjmp	.+1044   	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x3A: // SWAPI GATE
			newthephi=gates.SWI(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    503c:	20 e0       	ldi	r18, 0x00	; 0
    503e:	41 e0       	ldi	r20, 0x01	; 1
    5040:	50 e0       	ldi	r21, 0x00	; 0
    5042:	69 81       	ldd	r22, Y+1	; 0x01
    5044:	7a 81       	ldd	r23, Y+2	; 0x02
    5046:	8b 85       	ldd	r24, Y+11	; 0x0b
    5048:	9c 85       	ldd	r25, Y+12	; 0x0c
    504a:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    504e:	8c 01       	movw	r16, r24
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	40 e0       	ldi	r20, 0x00	; 0
    5054:	50 e0       	ldi	r21, 0x00	; 0
    5056:	69 81       	ldd	r22, Y+1	; 0x01
    5058:	7a 81       	ldd	r23, Y+2	; 0x02
    505a:	8b 85       	ldd	r24, Y+11	; 0x0b
    505c:	9c 85       	ldd	r25, Y+12	; 0x0c
    505e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5062:	6c 01       	movw	r12, r24
    5064:	20 e0       	ldi	r18, 0x00	; 0
    5066:	41 e0       	ldi	r20, 0x01	; 1
    5068:	50 e0       	ldi	r21, 0x00	; 0
    506a:	b2 01       	movw	r22, r4
    506c:	8b 85       	ldd	r24, Y+11	; 0x0b
    506e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5070:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5074:	7c 01       	movw	r14, r24
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	40 e0       	ldi	r20, 0x00	; 0
    507a:	50 e0       	ldi	r21, 0x00	; 0
    507c:	b2 01       	movw	r22, r4
    507e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5080:	9c 85       	ldd	r25, Y+12	; 0x0c
    5082:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5086:	96 01       	movw	r18, r12
    5088:	a7 01       	movw	r20, r14
    508a:	bc 01       	movw	r22, r24
    508c:	8b 85       	ldd	r24, Y+11	; 0x0b
    508e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5090:	09 96       	adiw	r24, 0x09	; 9
    5092:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_ZN5Gates3SWIEiiii>
    5096:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5098:	dc 01       	movw	r26, r24
    509a:	2d 91       	ld	r18, X+
    509c:	3c 91       	ld	r19, X
    509e:	40 e0       	ldi	r20, 0x00	; 0
    50a0:	50 e0       	ldi	r21, 0x00	; 0
    50a2:	b2 01       	movw	r22, r4
    50a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    50a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    50a8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    50ac:	f6 01       	movw	r30, r12
    50ae:	22 81       	ldd	r18, Z+2	; 0x02
    50b0:	33 81       	ldd	r19, Z+3	; 0x03
    50b2:	41 e0       	ldi	r20, 0x01	; 1
    50b4:	50 e0       	ldi	r21, 0x00	; 0
    50b6:	b2 01       	movw	r22, r4
    50b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    50ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    50bc:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    50c0:	d6 01       	movw	r26, r12
    50c2:	14 96       	adiw	r26, 0x04	; 4
    50c4:	2d 91       	ld	r18, X+
    50c6:	3c 91       	ld	r19, X
    50c8:	15 97       	sbiw	r26, 0x05	; 5
    50ca:	40 e0       	ldi	r20, 0x00	; 0
    50cc:	50 e0       	ldi	r21, 0x00	; 0
    50ce:	69 81       	ldd	r22, Y+1	; 0x01
    50d0:	7a 81       	ldd	r23, Y+2	; 0x02
    50d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    50d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    50d6:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    50da:	f6 01       	movw	r30, r12
    50dc:	26 81       	ldd	r18, Z+6	; 0x06
    50de:	37 81       	ldd	r19, Z+7	; 0x07
    50e0:	41 e0       	ldi	r20, 0x01	; 1
    50e2:	50 e0       	ldi	r21, 0x00	; 0
    50e4:	69 81       	ldd	r22, Y+1	; 0x01
    50e6:	7a 81       	ldd	r23, Y+2	; 0x02
    50e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    50ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    50ec:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    50f0:	af c1       	rjmp	.+862    	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		//3 QUBIT GATES -
		case 0x3B: // CONTROL SWAP GATE
			newthephi=gates.CSW(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false));
    50f2:	3a 2c       	mov	r3, r10
    50f4:	2b 2c       	mov	r2, r11
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	41 e0       	ldi	r20, 0x01	; 1
    50fa:	50 e0       	ldi	r21, 0x00	; 0
    50fc:	6a 2d       	mov	r22, r10
    50fe:	7b 2d       	mov	r23, r11
    5100:	8b 85       	ldd	r24, Y+11	; 0x0b
    5102:	9c 85       	ldd	r25, Y+12	; 0x0c
    5104:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5108:	6c 01       	movw	r12, r24
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	40 e0       	ldi	r20, 0x00	; 0
    510e:	50 e0       	ldi	r21, 0x00	; 0
    5110:	6a 2d       	mov	r22, r10
    5112:	7b 2d       	mov	r23, r11
    5114:	8b 85       	ldd	r24, Y+11	; 0x0b
    5116:	9c 85       	ldd	r25, Y+12	; 0x0c
    5118:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    511c:	7c 01       	movw	r14, r24
    511e:	20 e0       	ldi	r18, 0x00	; 0
    5120:	41 e0       	ldi	r20, 0x01	; 1
    5122:	50 e0       	ldi	r21, 0x00	; 0
    5124:	69 81       	ldd	r22, Y+1	; 0x01
    5126:	7a 81       	ldd	r23, Y+2	; 0x02
    5128:	8b 85       	ldd	r24, Y+11	; 0x0b
    512a:	9c 85       	ldd	r25, Y+12	; 0x0c
    512c:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5130:	8c 01       	movw	r16, r24
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	40 e0       	ldi	r20, 0x00	; 0
    5136:	50 e0       	ldi	r21, 0x00	; 0
    5138:	69 81       	ldd	r22, Y+1	; 0x01
    513a:	7a 81       	ldd	r23, Y+2	; 0x02
    513c:	8b 85       	ldd	r24, Y+11	; 0x0b
    513e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5140:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5144:	5c 01       	movw	r10, r24
    5146:	20 e0       	ldi	r18, 0x00	; 0
    5148:	41 e0       	ldi	r20, 0x01	; 1
    514a:	50 e0       	ldi	r21, 0x00	; 0
    514c:	b2 01       	movw	r22, r4
    514e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5150:	9c 85       	ldd	r25, Y+12	; 0x0c
    5152:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5156:	9e 83       	std	Y+6, r25	; 0x06
    5158:	8d 83       	std	Y+5, r24	; 0x05
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	40 e0       	ldi	r20, 0x00	; 0
    515e:	50 e0       	ldi	r21, 0x00	; 0
    5160:	b2 01       	movw	r22, r4
    5162:	8b 85       	ldd	r24, Y+11	; 0x0b
    5164:	9c 85       	ldd	r25, Y+12	; 0x0c
    5166:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    516a:	95 01       	movw	r18, r10
    516c:	4d 81       	ldd	r20, Y+5	; 0x05
    516e:	5e 81       	ldd	r21, Y+6	; 0x06
    5170:	bc 01       	movw	r22, r24
    5172:	8b 85       	ldd	r24, Y+11	; 0x0b
    5174:	9c 85       	ldd	r25, Y+12	; 0x0c
    5176:	09 96       	adiw	r24, 0x09	; 9
    5178:	0e 94 a5 14 	call	0x294a	; 0x294a <_ZN5Gates3CSWEiiiiii>
    517c:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    517e:	dc 01       	movw	r26, r24
    5180:	2d 91       	ld	r18, X+
    5182:	3c 91       	ld	r19, X
    5184:	40 e0       	ldi	r20, 0x00	; 0
    5186:	50 e0       	ldi	r21, 0x00	; 0
    5188:	b2 01       	movw	r22, r4
    518a:	8b 85       	ldd	r24, Y+11	; 0x0b
    518c:	9c 85       	ldd	r25, Y+12	; 0x0c
    518e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    5192:	f6 01       	movw	r30, r12
    5194:	22 81       	ldd	r18, Z+2	; 0x02
    5196:	33 81       	ldd	r19, Z+3	; 0x03
    5198:	41 e0       	ldi	r20, 0x01	; 1
    519a:	50 e0       	ldi	r21, 0x00	; 0
    519c:	b2 01       	movw	r22, r4
    519e:	8b 85       	ldd	r24, Y+11	; 0x0b
    51a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    51a2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    51a6:	d6 01       	movw	r26, r12
    51a8:	14 96       	adiw	r26, 0x04	; 4
    51aa:	2d 91       	ld	r18, X+
    51ac:	3c 91       	ld	r19, X
    51ae:	15 97       	sbiw	r26, 0x05	; 5
    51b0:	40 e0       	ldi	r20, 0x00	; 0
    51b2:	50 e0       	ldi	r21, 0x00	; 0
    51b4:	69 81       	ldd	r22, Y+1	; 0x01
    51b6:	7a 81       	ldd	r23, Y+2	; 0x02
    51b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    51ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    51bc:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    51c0:	f6 01       	movw	r30, r12
    51c2:	26 81       	ldd	r18, Z+6	; 0x06
    51c4:	37 81       	ldd	r19, Z+7	; 0x07
    51c6:	41 e0       	ldi	r20, 0x01	; 1
    51c8:	50 e0       	ldi	r21, 0x00	; 0
    51ca:	69 81       	ldd	r22, Y+1	; 0x01
    51cc:	7a 81       	ldd	r23, Y+2	; 0x02
    51ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    51d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    51d2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    51d6:	d6 01       	movw	r26, r12
    51d8:	18 96       	adiw	r26, 0x08	; 8
    51da:	2d 91       	ld	r18, X+
    51dc:	3c 91       	ld	r19, X
    51de:	19 97       	sbiw	r26, 0x09	; 9
    51e0:	40 e0       	ldi	r20, 0x00	; 0
    51e2:	50 e0       	ldi	r21, 0x00	; 0
    51e4:	63 2d       	mov	r22, r3
    51e6:	72 2d       	mov	r23, r2
    51e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    51ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    51ec:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    51f0:	f6 01       	movw	r30, r12
    51f2:	22 85       	ldd	r18, Z+10	; 0x0a
    51f4:	33 85       	ldd	r19, Z+11	; 0x0b
    51f6:	41 e0       	ldi	r20, 0x01	; 1
    51f8:	50 e0       	ldi	r21, 0x00	; 0
    51fa:	63 2d       	mov	r22, r3
    51fc:	72 2d       	mov	r23, r2
    51fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    5200:	9c 85       	ldd	r25, Y+12	; 0x0c
    5202:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    5206:	24 c1       	rjmp	.+584    	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x3C: // TOFFOLI GATE
			newthephi=gates.TOF(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false));
    5208:	3a 2c       	mov	r3, r10
    520a:	2b 2c       	mov	r2, r11
    520c:	20 e0       	ldi	r18, 0x00	; 0
    520e:	41 e0       	ldi	r20, 0x01	; 1
    5210:	50 e0       	ldi	r21, 0x00	; 0
    5212:	6a 2d       	mov	r22, r10
    5214:	7b 2d       	mov	r23, r11
    5216:	8b 85       	ldd	r24, Y+11	; 0x0b
    5218:	9c 85       	ldd	r25, Y+12	; 0x0c
    521a:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    521e:	6c 01       	movw	r12, r24
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	40 e0       	ldi	r20, 0x00	; 0
    5224:	50 e0       	ldi	r21, 0x00	; 0
    5226:	6a 2d       	mov	r22, r10
    5228:	7b 2d       	mov	r23, r11
    522a:	8b 85       	ldd	r24, Y+11	; 0x0b
    522c:	9c 85       	ldd	r25, Y+12	; 0x0c
    522e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5232:	7c 01       	movw	r14, r24
    5234:	20 e0       	ldi	r18, 0x00	; 0
    5236:	41 e0       	ldi	r20, 0x01	; 1
    5238:	50 e0       	ldi	r21, 0x00	; 0
    523a:	69 81       	ldd	r22, Y+1	; 0x01
    523c:	7a 81       	ldd	r23, Y+2	; 0x02
    523e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5240:	9c 85       	ldd	r25, Y+12	; 0x0c
    5242:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5246:	8c 01       	movw	r16, r24
    5248:	20 e0       	ldi	r18, 0x00	; 0
    524a:	40 e0       	ldi	r20, 0x00	; 0
    524c:	50 e0       	ldi	r21, 0x00	; 0
    524e:	69 81       	ldd	r22, Y+1	; 0x01
    5250:	7a 81       	ldd	r23, Y+2	; 0x02
    5252:	8b 85       	ldd	r24, Y+11	; 0x0b
    5254:	9c 85       	ldd	r25, Y+12	; 0x0c
    5256:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    525a:	5c 01       	movw	r10, r24
    525c:	20 e0       	ldi	r18, 0x00	; 0
    525e:	41 e0       	ldi	r20, 0x01	; 1
    5260:	50 e0       	ldi	r21, 0x00	; 0
    5262:	b2 01       	movw	r22, r4
    5264:	8b 85       	ldd	r24, Y+11	; 0x0b
    5266:	9c 85       	ldd	r25, Y+12	; 0x0c
    5268:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    526c:	9e 83       	std	Y+6, r25	; 0x06
    526e:	8d 83       	std	Y+5, r24	; 0x05
    5270:	20 e0       	ldi	r18, 0x00	; 0
    5272:	40 e0       	ldi	r20, 0x00	; 0
    5274:	50 e0       	ldi	r21, 0x00	; 0
    5276:	b2 01       	movw	r22, r4
    5278:	8b 85       	ldd	r24, Y+11	; 0x0b
    527a:	9c 85       	ldd	r25, Y+12	; 0x0c
    527c:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5280:	95 01       	movw	r18, r10
    5282:	4d 81       	ldd	r20, Y+5	; 0x05
    5284:	5e 81       	ldd	r21, Y+6	; 0x06
    5286:	bc 01       	movw	r22, r24
    5288:	8b 85       	ldd	r24, Y+11	; 0x0b
    528a:	9c 85       	ldd	r25, Y+12	; 0x0c
    528c:	09 96       	adiw	r24, 0x09	; 9
    528e:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN5Gates3TOFEiiiiii>
    5292:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5294:	dc 01       	movw	r26, r24
    5296:	2d 91       	ld	r18, X+
    5298:	3c 91       	ld	r19, X
    529a:	40 e0       	ldi	r20, 0x00	; 0
    529c:	50 e0       	ldi	r21, 0x00	; 0
    529e:	b2 01       	movw	r22, r4
    52a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    52a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    52a4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    52a8:	f6 01       	movw	r30, r12
    52aa:	22 81       	ldd	r18, Z+2	; 0x02
    52ac:	33 81       	ldd	r19, Z+3	; 0x03
    52ae:	41 e0       	ldi	r20, 0x01	; 1
    52b0:	50 e0       	ldi	r21, 0x00	; 0
    52b2:	b2 01       	movw	r22, r4
    52b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    52b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    52b8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    52bc:	d6 01       	movw	r26, r12
    52be:	14 96       	adiw	r26, 0x04	; 4
    52c0:	2d 91       	ld	r18, X+
    52c2:	3c 91       	ld	r19, X
    52c4:	15 97       	sbiw	r26, 0x05	; 5
    52c6:	40 e0       	ldi	r20, 0x00	; 0
    52c8:	50 e0       	ldi	r21, 0x00	; 0
    52ca:	69 81       	ldd	r22, Y+1	; 0x01
    52cc:	7a 81       	ldd	r23, Y+2	; 0x02
    52ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    52d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    52d2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    52d6:	f6 01       	movw	r30, r12
    52d8:	26 81       	ldd	r18, Z+6	; 0x06
    52da:	37 81       	ldd	r19, Z+7	; 0x07
    52dc:	41 e0       	ldi	r20, 0x01	; 1
    52de:	50 e0       	ldi	r21, 0x00	; 0
    52e0:	69 81       	ldd	r22, Y+1	; 0x01
    52e2:	7a 81       	ldd	r23, Y+2	; 0x02
    52e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    52e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    52e8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    52ec:	d6 01       	movw	r26, r12
    52ee:	18 96       	adiw	r26, 0x08	; 8
    52f0:	2d 91       	ld	r18, X+
    52f2:	3c 91       	ld	r19, X
    52f4:	19 97       	sbiw	r26, 0x09	; 9
    52f6:	40 e0       	ldi	r20, 0x00	; 0
    52f8:	50 e0       	ldi	r21, 0x00	; 0
    52fa:	63 2d       	mov	r22, r3
    52fc:	72 2d       	mov	r23, r2
    52fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    5300:	9c 85       	ldd	r25, Y+12	; 0x0c
    5302:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    5306:	f6 01       	movw	r30, r12
    5308:	22 85       	ldd	r18, Z+10	; 0x0a
    530a:	33 85       	ldd	r19, Z+11	; 0x0b
    530c:	41 e0       	ldi	r20, 0x01	; 1
    530e:	50 e0       	ldi	r21, 0x00	; 0
    5310:	63 2d       	mov	r22, r3
    5312:	72 2d       	mov	r23, r2
    5314:	8b 85       	ldd	r24, Y+11	; 0x0b
    5316:	9c 85       	ldd	r25, Y+12	; 0x0c
    5318:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			break;
    531c:	99 c0       	rjmp	.+306    	; 0x5450 <_ZN4QEPU7executeEilll+0x121a>
		case 0x3D: // DEUTSCH GATE
			newthephi=gates.DEU(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false),read(0,THE,false));
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	40 e0       	ldi	r20, 0x00	; 0
    5322:	50 e0       	ldi	r21, 0x00	; 0
    5324:	60 e0       	ldi	r22, 0x00	; 0
    5326:	70 e0       	ldi	r23, 0x00	; 0
    5328:	8b 85       	ldd	r24, Y+11	; 0x0b
    532a:	9c 85       	ldd	r25, Y+12	; 0x0c
    532c:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5330:	9e 83       	std	Y+6, r25	; 0x06
    5332:	8d 83       	std	Y+5, r24	; 0x05
    5334:	3a 2c       	mov	r3, r10
    5336:	2b 2c       	mov	r2, r11
    5338:	20 e0       	ldi	r18, 0x00	; 0
    533a:	41 e0       	ldi	r20, 0x01	; 1
    533c:	50 e0       	ldi	r21, 0x00	; 0
    533e:	6a 2d       	mov	r22, r10
    5340:	7b 2d       	mov	r23, r11
    5342:	8b 85       	ldd	r24, Y+11	; 0x0b
    5344:	9c 85       	ldd	r25, Y+12	; 0x0c
    5346:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    534a:	6c 01       	movw	r12, r24
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	40 e0       	ldi	r20, 0x00	; 0
    5350:	50 e0       	ldi	r21, 0x00	; 0
    5352:	6a 2d       	mov	r22, r10
    5354:	7b 2d       	mov	r23, r11
    5356:	8b 85       	ldd	r24, Y+11	; 0x0b
    5358:	9c 85       	ldd	r25, Y+12	; 0x0c
    535a:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    535e:	7c 01       	movw	r14, r24
    5360:	20 e0       	ldi	r18, 0x00	; 0
    5362:	41 e0       	ldi	r20, 0x01	; 1
    5364:	50 e0       	ldi	r21, 0x00	; 0
    5366:	69 81       	ldd	r22, Y+1	; 0x01
    5368:	7a 81       	ldd	r23, Y+2	; 0x02
    536a:	8b 85       	ldd	r24, Y+11	; 0x0b
    536c:	9c 85       	ldd	r25, Y+12	; 0x0c
    536e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5372:	8c 01       	movw	r16, r24
    5374:	20 e0       	ldi	r18, 0x00	; 0
    5376:	40 e0       	ldi	r20, 0x00	; 0
    5378:	50 e0       	ldi	r21, 0x00	; 0
    537a:	69 81       	ldd	r22, Y+1	; 0x01
    537c:	7a 81       	ldd	r23, Y+2	; 0x02
    537e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5380:	9c 85       	ldd	r25, Y+12	; 0x0c
    5382:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    5386:	98 87       	std	Y+8, r25	; 0x08
    5388:	8f 83       	std	Y+7, r24	; 0x07
    538a:	20 e0       	ldi	r18, 0x00	; 0
    538c:	41 e0       	ldi	r20, 0x01	; 1
    538e:	50 e0       	ldi	r21, 0x00	; 0
    5390:	b2 01       	movw	r22, r4
    5392:	8b 85       	ldd	r24, Y+11	; 0x0b
    5394:	9c 85       	ldd	r25, Y+12	; 0x0c
    5396:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    539a:	9a 87       	std	Y+10, r25	; 0x0a
    539c:	89 87       	std	Y+9, r24	; 0x09
    539e:	20 e0       	ldi	r18, 0x00	; 0
    53a0:	40 e0       	ldi	r20, 0x00	; 0
    53a2:	50 e0       	ldi	r21, 0x00	; 0
    53a4:	b2 01       	movw	r22, r4
    53a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    53a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    53aa:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZN4QEPU4readEiib>
    53ae:	ad 80       	ldd	r10, Y+5	; 0x05
    53b0:	be 80       	ldd	r11, Y+6	; 0x06
    53b2:	2f 81       	ldd	r18, Y+7	; 0x07
    53b4:	38 85       	ldd	r19, Y+8	; 0x08
    53b6:	49 85       	ldd	r20, Y+9	; 0x09
    53b8:	5a 85       	ldd	r21, Y+10	; 0x0a
    53ba:	bc 01       	movw	r22, r24
    53bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    53be:	9c 85       	ldd	r25, Y+12	; 0x0c
    53c0:	09 96       	adiw	r24, 0x09	; 9
    53c2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <_ZN5Gates3DEUEiiiiiii>
    53c6:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    53c8:	dc 01       	movw	r26, r24
    53ca:	2d 91       	ld	r18, X+
    53cc:	3c 91       	ld	r19, X
    53ce:	40 e0       	ldi	r20, 0x00	; 0
    53d0:	50 e0       	ldi	r21, 0x00	; 0
    53d2:	b2 01       	movw	r22, r4
    53d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    53d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    53d8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    53dc:	f6 01       	movw	r30, r12
    53de:	22 81       	ldd	r18, Z+2	; 0x02
    53e0:	33 81       	ldd	r19, Z+3	; 0x03
    53e2:	41 e0       	ldi	r20, 0x01	; 1
    53e4:	50 e0       	ldi	r21, 0x00	; 0
    53e6:	b2 01       	movw	r22, r4
    53e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    53ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    53ec:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    53f0:	d6 01       	movw	r26, r12
    53f2:	14 96       	adiw	r26, 0x04	; 4
    53f4:	2d 91       	ld	r18, X+
    53f6:	3c 91       	ld	r19, X
    53f8:	15 97       	sbiw	r26, 0x05	; 5
    53fa:	40 e0       	ldi	r20, 0x00	; 0
    53fc:	50 e0       	ldi	r21, 0x00	; 0
    53fe:	69 81       	ldd	r22, Y+1	; 0x01
    5400:	7a 81       	ldd	r23, Y+2	; 0x02
    5402:	8b 85       	ldd	r24, Y+11	; 0x0b
    5404:	9c 85       	ldd	r25, Y+12	; 0x0c
    5406:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    540a:	f6 01       	movw	r30, r12
    540c:	26 81       	ldd	r18, Z+6	; 0x06
    540e:	37 81       	ldd	r19, Z+7	; 0x07
    5410:	41 e0       	ldi	r20, 0x01	; 1
    5412:	50 e0       	ldi	r21, 0x00	; 0
    5414:	69 81       	ldd	r22, Y+1	; 0x01
    5416:	7a 81       	ldd	r23, Y+2	; 0x02
    5418:	8b 85       	ldd	r24, Y+11	; 0x0b
    541a:	9c 85       	ldd	r25, Y+12	; 0x0c
    541c:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    5420:	d6 01       	movw	r26, r12
    5422:	18 96       	adiw	r26, 0x08	; 8
    5424:	2d 91       	ld	r18, X+
    5426:	3c 91       	ld	r19, X
    5428:	19 97       	sbiw	r26, 0x09	; 9
    542a:	40 e0       	ldi	r20, 0x00	; 0
    542c:	50 e0       	ldi	r21, 0x00	; 0
    542e:	63 2d       	mov	r22, r3
    5430:	72 2d       	mov	r23, r2
    5432:	8b 85       	ldd	r24, Y+11	; 0x0b
    5434:	9c 85       	ldd	r25, Y+12	; 0x0c
    5436:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
    543a:	f6 01       	movw	r30, r12
    543c:	22 85       	ldd	r18, Z+10	; 0x0a
    543e:	33 85       	ldd	r19, Z+11	; 0x0b
    5440:	41 e0       	ldi	r20, 0x01	; 1
    5442:	50 e0       	ldi	r21, 0x00	; 0
    5444:	63 2d       	mov	r22, r3
    5446:	72 2d       	mov	r23, r2
    5448:	8b 85       	ldd	r24, Y+11	; 0x0b
    544a:	9c 85       	ldd	r25, Y+12	; 0x0c
    544c:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU5writeEiii>
		default: /*THIS FUNCTION DOES NOT EXIST*/
			break;
	}
	
	if(true){
		serial.writestr("Function: "); serial.writestr(utils.int2str(func));
    5450:	0b 85       	ldd	r16, Y+11	; 0x0b
    5452:	1c 85       	ldd	r17, Y+12	; 0x0c
    5454:	0f 5f       	subi	r16, 0xFF	; 255
    5456:	1f 4f       	sbci	r17, 0xFF	; 255
    5458:	60 ed       	ldi	r22, 0xD0	; 208
    545a:	70 e0       	ldi	r23, 0x00	; 0
    545c:	c8 01       	movw	r24, r16
    545e:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
    5462:	eb 84       	ldd	r14, Y+11	; 0x0b
    5464:	fc 84       	ldd	r15, Y+12	; 0x0c
    5466:	f4 ed       	ldi	r31, 0xD4	; 212
    5468:	ef 0e       	add	r14, r31
    546a:	f1 1c       	adc	r15, r1
    546c:	b4 01       	movw	r22, r8
    546e:	c7 01       	movw	r24, r14
    5470:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <_ZN5Utils7int2strEi>
    5474:	bc 01       	movw	r22, r24
    5476:	c8 01       	movw	r24, r16
    5478:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
		serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
    547c:	6b ed       	ldi	r22, 0xDB	; 219
    547e:	70 e0       	ldi	r23, 0x00	; 0
    5480:	c8 01       	movw	r24, r16
    5482:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
    5486:	b2 01       	movw	r22, r4
    5488:	c7 01       	movw	r24, r14
    548a:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <_ZN5Utils7int2strEi>
    548e:	bc 01       	movw	r22, r24
    5490:	c8 01       	movw	r24, r16
    5492:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
		serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
    5496:	64 ee       	ldi	r22, 0xE4	; 228
    5498:	70 e0       	ldi	r23, 0x00	; 0
    549a:	c8 01       	movw	r24, r16
    549c:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
    54a0:	69 81       	ldd	r22, Y+1	; 0x01
    54a2:	7a 81       	ldd	r23, Y+2	; 0x02
    54a4:	c7 01       	movw	r24, r14
    54a6:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <_ZN5Utils7int2strEi>
    54aa:	bc 01       	movw	r22, r24
    54ac:	c8 01       	movw	r24, r16
    54ae:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
		serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
    54b2:	6d ee       	ldi	r22, 0xED	; 237
    54b4:	70 e0       	ldi	r23, 0x00	; 0
    54b6:	c8 01       	movw	r24, r16
    54b8:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
    54bc:	eb 85       	ldd	r30, Y+11	; 0x0b
    54be:	fc 85       	ldd	r31, Y+12	; 0x0c
    54c0:	eb 52       	subi	r30, 0x2B	; 43
    54c2:	ff 4f       	sbci	r31, 0xFF	; 255
    54c4:	60 81       	ld	r22, Z
    54c6:	71 81       	ldd	r23, Z+1	; 0x01
    54c8:	c7 01       	movw	r24, r14
    54ca:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <_ZN5Utils7int2strEi>
    54ce:	bc 01       	movw	r22, r24
    54d0:	c8 01       	movw	r24, r16
    54d2:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
		serial.writestrln("");
    54d6:	65 ec       	ldi	r22, 0xC5	; 197
    54d8:	70 e0       	ldi	r23, 0x00	; 0
    54da:	c8 01       	movw	r24, r16
    54dc:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
	}
	free(newthephi);	
    54e0:	c6 01       	movw	r24, r12
    54e2:	0e 94 f5 34 	call	0x69ea	; 0x69ea <free>
    54e6:	2c 96       	adiw	r28, 0x0c	; 12
    54e8:	0f b6       	in	r0, 0x3f	; 63
    54ea:	f8 94       	cli
    54ec:	de bf       	out	0x3e, r29	; 62
    54ee:	0f be       	out	0x3f, r0	; 63
    54f0:	cd bf       	out	0x3d, r28	; 61
    54f2:	df 91       	pop	r29
    54f4:	cf 91       	pop	r28
    54f6:	1f 91       	pop	r17
    54f8:	0f 91       	pop	r16
    54fa:	ff 90       	pop	r15
    54fc:	ef 90       	pop	r14
    54fe:	df 90       	pop	r13
    5500:	cf 90       	pop	r12
    5502:	bf 90       	pop	r11
    5504:	af 90       	pop	r10
    5506:	9f 90       	pop	r9
    5508:	8f 90       	pop	r8
    550a:	7f 90       	pop	r7
    550c:	6f 90       	pop	r6
    550e:	5f 90       	pop	r5
    5510:	4f 90       	pop	r4
    5512:	3f 90       	pop	r3
    5514:	2f 90       	pop	r2
    5516:	08 95       	ret

00005518 <_ZN4QEPU3runEv>:

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
}

void QEPU::run(){
    5518:	2f 92       	push	r2
    551a:	3f 92       	push	r3
    551c:	4f 92       	push	r4
    551e:	5f 92       	push	r5
    5520:	6f 92       	push	r6
    5522:	7f 92       	push	r7
    5524:	8f 92       	push	r8
    5526:	9f 92       	push	r9
    5528:	af 92       	push	r10
    552a:	bf 92       	push	r11
    552c:	cf 92       	push	r12
    552e:	df 92       	push	r13
    5530:	ef 92       	push	r14
    5532:	ff 92       	push	r15
    5534:	0f 93       	push	r16
    5536:	1f 93       	push	r17
    5538:	cf 93       	push	r28
    553a:	df 93       	push	r29
    553c:	cd b7       	in	r28, 0x3d	; 61
    553e:	de b7       	in	r29, 0x3e	; 62
    5540:	c1 53       	subi	r28, 0x31	; 49
    5542:	d2 40       	sbci	r29, 0x02	; 2
    5544:	0f b6       	in	r0, 0x3f	; 63
    5546:	f8 94       	cli
    5548:	de bf       	out	0x3e, r29	; 62
    554a:	0f be       	out	0x3f, r0	; 63
    554c:	cd bf       	out	0x3d, r28	; 61
    554e:	c0 5e       	subi	r28, 0xE0	; 224
    5550:	dd 4f       	sbci	r29, 0xFD	; 253
    5552:	99 83       	std	Y+1, r25	; 0x01
    5554:	88 83       	st	Y, r24
    5556:	c0 52       	subi	r28, 0x20	; 32
    5558:	d2 40       	sbci	r29, 0x02	; 2
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
    555a:	01 96       	adiw	r24, 0x01	; 1
    555c:	c0 5d       	subi	r28, 0xD0	; 208
    555e:	dd 4f       	sbci	r29, 0xFD	; 253
    5560:	99 83       	std	Y+1, r25	; 0x01
    5562:	88 83       	st	Y, r24
    5564:	c0 53       	subi	r28, 0x30	; 48
    5566:	d2 40       	sbci	r29, 0x02	; 2
    5568:	63 ef       	ldi	r22, 0xF3	; 243
    556a:	70 e0       	ldi	r23, 0x00	; 0
    556c:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
    5570:	65 ec       	ldi	r22, 0xC5	; 197
    5572:	70 e0       	ldi	r23, 0x00	; 0
    5574:	c0 5d       	subi	r28, 0xD0	; 208
    5576:	dd 4f       	sbci	r29, 0xFD	; 253
    5578:	88 81       	ld	r24, Y
    557a:	99 81       	ldd	r25, Y+1	; 0x01
    557c:	c0 53       	subi	r28, 0x30	; 48
    557e:	d2 40       	sbci	r29, 0x02	; 2
    5580:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
	
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    5584:	c0 5e       	subi	r28, 0xE0	; 224
    5586:	dd 4f       	sbci	r29, 0xFD	; 253
    5588:	88 81       	ld	r24, Y
    558a:	99 81       	ldd	r25, Y+1	; 0x01
    558c:	c0 52       	subi	r28, 0x20	; 32
    558e:	d2 40       	sbci	r29, 0x02	; 2
    5590:	02 96       	adiw	r24, 0x02	; 2
    5592:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN6EEProm7readallEv>
    5596:	bc 01       	movw	r22, r24
    5598:	c0 5e       	subi	r28, 0xE0	; 224
    559a:	dd 4f       	sbci	r29, 0xFD	; 253
    559c:	88 81       	ld	r24, Y
    559e:	99 81       	ldd	r25, Y+1	; 0x01
    55a0:	c0 52       	subi	r28, 0x20	; 32
    55a2:	d2 40       	sbci	r29, 0x02	; 2
    55a4:	8c 52       	subi	r24, 0x2C	; 44
    55a6:	9f 4f       	sbci	r25, 0xFF	; 255
    55a8:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <_ZN5Utils10str2intarrEPc>
    55ac:	dc 01       	movw	r26, r24
    55ae:	18 97       	sbiw	r26, 0x08	; 8
	int eeprom_mem_length=0;
    55b0:	61 2c       	mov	r6, r1
    55b2:	71 2c       	mov	r7, r1
    55b4:	fd 01       	movw	r30, r26
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    55b6:	18 96       	adiw	r26, 0x08	; 8
    55b8:	2d 91       	ld	r18, X+
    55ba:	3c 91       	ld	r19, X
    55bc:	19 97       	sbiw	r26, 0x09	; 9
    55be:	2f 3f       	cpi	r18, 0xFF	; 255
    55c0:	31 05       	cpc	r19, r1
    55c2:	b1 f4       	brne	.+44     	; 0x55f0 <_ZN4QEPU3runEv+0xd8>
    55c4:	16 96       	adiw	r26, 0x06	; 6
    55c6:	2d 91       	ld	r18, X+
    55c8:	3c 91       	ld	r19, X
    55ca:	17 97       	sbiw	r26, 0x07	; 7
    55cc:	2f 3f       	cpi	r18, 0xFF	; 255
    55ce:	31 05       	cpc	r19, r1
    55d0:	79 f4       	brne	.+30     	; 0x55f0 <_ZN4QEPU3runEv+0xd8>
    55d2:	24 81       	ldd	r18, Z+4	; 0x04
    55d4:	35 81       	ldd	r19, Z+5	; 0x05
    55d6:	2f 3f       	cpi	r18, 0xFF	; 255
    55d8:	31 05       	cpc	r19, r1
    55da:	51 f4       	brne	.+20     	; 0x55f0 <_ZN4QEPU3runEv+0xd8>
    55dc:	22 81       	ldd	r18, Z+2	; 0x02
    55de:	33 81       	ldd	r19, Z+3	; 0x03
    55e0:	2f 3f       	cpi	r18, 0xFF	; 255
    55e2:	31 05       	cpc	r19, r1
    55e4:	29 f4       	brne	.+10     	; 0x55f0 <_ZN4QEPU3runEv+0xd8>
    55e6:	20 81       	ld	r18, Z
    55e8:	31 81       	ldd	r19, Z+1	; 0x01
    55ea:	2f 3f       	cpi	r18, 0xFF	; 255
    55ec:	31 05       	cpc	r19, r1
    55ee:	29 f0       	breq	.+10     	; 0x55fa <_ZN4QEPU3runEv+0xe2>
    55f0:	2f ef       	ldi	r18, 0xFF	; 255
    55f2:	62 1a       	sub	r6, r18
    55f4:	72 0a       	sbc	r7, r18
    55f6:	12 96       	adiw	r26, 0x02	; 2
    55f8:	dd cf       	rjmp	.-70     	; 0x55b4 <_ZN4QEPU3runEv+0x9c>
    55fa:	93 01       	movw	r18, r6
    55fc:	24 50       	subi	r18, 0x04	; 4
    55fe:	31 09       	sbc	r19, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    5600:	12 16       	cp	r1, r18
    5602:	13 06       	cpc	r1, r19
    5604:	a4 f5       	brge	.+104    	; 0x566e <_ZN4QEPU3runEv+0x156>
    5606:	fc 01       	movw	r30, r24
    5608:	35 e0       	ldi	r19, 0x05	; 5
    560a:	63 1a       	sub	r6, r19
    560c:	71 08       	sbc	r7, r1
    560e:	20 e0       	ldi	r18, 0x00	; 0
    5610:	30 e0       	ldi	r19, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    5612:	80 e0       	ldi	r24, 0x00	; 0
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	40 e0       	ldi	r20, 0x00	; 0
    5618:	50 e0       	ldi	r21, 0x00	; 0
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    561a:	1d e0       	ldi	r17, 0x0D	; 13
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    561c:	31 2c       	mov	r3, r1
    561e:	41 2c       	mov	r4, r1
    5620:	0b c0       	rjmp	.+22     	; 0x5638 <_ZN4QEPU3runEv+0x120>
    5622:	6d 30       	cpi	r22, 0x0D	; 13
    5624:	71 05       	cpc	r23, r1
    5626:	2c f0       	brlt	.+10     	; 0x5632 <_ZN4QEPU3runEv+0x11a>
    5628:	4f 5f       	subi	r20, 0xFF	; 255
    562a:	5f 4f       	sbci	r21, 0xFF	; 255
    562c:	83 2d       	mov	r24, r3
    562e:	94 2d       	mov	r25, r4
    5630:	01 c0       	rjmp	.+2      	; 0x5634 <_ZN4QEPU3runEv+0x11c>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    5632:	cb 01       	movw	r24, r22
    5634:	2f 5f       	subi	r18, 0xFF	; 255
    5636:	3f 4f       	sbci	r19, 0xFF	; 255
    5638:	bc 01       	movw	r22, r24
    563a:	6f 5f       	subi	r22, 0xFF	; 255
    563c:	7f 4f       	sbci	r23, 0xFF	; 255
    563e:	c1 90       	ld	r12, Z+
    5640:	d1 90       	ld	r13, Z+
    5642:	14 9f       	mul	r17, r20
    5644:	d0 01       	movw	r26, r0
    5646:	15 9f       	mul	r17, r21
    5648:	b0 0d       	add	r27, r0
    564a:	11 24       	eor	r1, r1
    564c:	8a 0f       	add	r24, r26
    564e:	9b 1f       	adc	r25, r27
    5650:	dc 01       	movw	r26, r24
    5652:	aa 0f       	add	r26, r26
    5654:	bb 1f       	adc	r27, r27
    5656:	81 e0       	ldi	r24, 0x01	; 1
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	8c 0f       	add	r24, r28
    565c:	9d 1f       	adc	r25, r29
    565e:	a8 0f       	add	r26, r24
    5660:	b9 1f       	adc	r27, r25
    5662:	cd 92       	st	X+, r12
    5664:	dc 92       	st	X, r13
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    5666:	26 15       	cp	r18, r6
    5668:	37 05       	cpc	r19, r7
    566a:	d9 f6       	brne	.-74     	; 0x5622 <_ZN4QEPU3runEv+0x10a>
    566c:	02 c0       	rjmp	.+4      	; 0x5672 <_ZN4QEPU3runEv+0x15a>
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    566e:	40 e0       	ldi	r20, 0x00	; 0
    5670:	50 e0       	ldi	r21, 0x00	; 0
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	program_counter_maximum=line;
    5672:	c0 5e       	subi	r28, 0xE0	; 224
    5674:	dd 4f       	sbci	r29, 0xFD	; 253
    5676:	e8 81       	ld	r30, Y
    5678:	f9 81       	ldd	r31, Y+1	; 0x01
    567a:	c0 52       	subi	r28, 0x20	; 32
    567c:	d2 40       	sbci	r29, 0x02	; 2
    567e:	e9 52       	subi	r30, 0x29	; 41
    5680:	ff 4f       	sbci	r31, 0xFF	; 255
    5682:	51 83       	std	Z+1, r21	; 0x01
    5684:	40 83       	st	Z, r20
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    5686:	c0 5e       	subi	r28, 0xE0	; 224
    5688:	dd 4f       	sbci	r29, 0xFD	; 253
    568a:	e8 81       	ld	r30, Y
    568c:	f9 81       	ldd	r31, Y+1	; 0x01
    568e:	c0 52       	subi	r28, 0x20	; 32
    5690:	d2 40       	sbci	r29, 0x02	; 2
    5692:	eb 52       	subi	r30, 0x2B	; 43
    5694:	ff 4f       	sbci	r31, 0xFF	; 255
    5696:	11 82       	std	Z+1, r1	; 0x01
    5698:	10 82       	st	Z, r1
    569a:	14 16       	cp	r1, r20
    569c:	15 06       	cpc	r1, r21
    569e:	0c f0       	brlt	.+2      	; 0x56a2 <_ZN4QEPU3runEv+0x18a>
    56a0:	58 c1       	rjmp	.+688    	; 0x5952 <_ZN4QEPU3runEv+0x43a>
    56a2:	80 e0       	ldi	r24, 0x00	; 0
    56a4:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";	
    56a6:	3e 01       	movw	r6, r28
    56a8:	e9 ee       	ldi	r30, 0xE9	; 233
    56aa:	6e 1a       	sub	r6, r30
    56ac:	ed ef       	ldi	r30, 0xFD	; 253
    56ae:	7e 0a       	sbc	r7, r30
    56b0:	1e 01       	movw	r2, r28
    56b2:	f0 ef       	ldi	r31, 0xF0	; 240
    56b4:	2f 1a       	sub	r2, r31
    56b6:	fd ef       	ldi	r31, 0xFD	; 253
    56b8:	3f 0a       	sbc	r3, r31
    56ba:	2e 01       	movw	r4, r28
    56bc:	27 ef       	ldi	r18, 0xF7	; 247
    56be:	42 1a       	sub	r4, r18
    56c0:	2d ef       	ldi	r18, 0xFD	; 253
    56c2:	52 0a       	sbc	r5, r18
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    56c4:	c0 5e       	subi	r28, 0xE0	; 224
    56c6:	dd 4f       	sbci	r29, 0xFD	; 253
    56c8:	e8 81       	ld	r30, Y
    56ca:	f9 81       	ldd	r31, Y+1	; 0x01
    56cc:	c0 52       	subi	r28, 0x20	; 32
    56ce:	d2 40       	sbci	r29, 0x02	; 2
    56d0:	eb 52       	subi	r30, 0x2B	; 43
    56d2:	ff 4f       	sbci	r31, 0xFF	; 255
    56d4:	c2 5e       	subi	r28, 0xE2	; 226
    56d6:	dd 4f       	sbci	r29, 0xFD	; 253
    56d8:	f9 83       	std	Y+1, r31	; 0x01
    56da:	e8 83       	st	Y, r30
    56dc:	ce 51       	subi	r28, 0x1E	; 30
    56de:	d2 40       	sbci	r29, 0x02	; 2
    56e0:	0f 2e       	mov	r0, r31
    56e2:	fd ef       	ldi	r31, 0xFD	; 253
    56e4:	8f 2e       	mov	r8, r31
    56e6:	f0 e0       	ldi	r31, 0x00	; 0
    56e8:	9f 2e       	mov	r9, r31
    56ea:	f0 2d       	mov	r31, r0
    56ec:	c6 5d       	subi	r28, 0xD6	; 214
    56ee:	dd 4f       	sbci	r29, 0xFD	; 253
    56f0:	68 82       	st	Y, r6
    56f2:	ca 52       	subi	r28, 0x2A	; 42
    56f4:	d2 40       	sbci	r29, 0x02	; 2
    56f6:	c5 5d       	subi	r28, 0xD5	; 213
    56f8:	dd 4f       	sbci	r29, 0xFD	; 253
    56fa:	78 82       	st	Y, r7
    56fc:	cb 52       	subi	r28, 0x2B	; 43
    56fe:	d2 40       	sbci	r29, 0x02	; 2
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    5700:	c4 5d       	subi	r28, 0xD4	; 212
    5702:	dd 4f       	sbci	r29, 0xFD	; 253
    5704:	28 82       	st	Y, r2
    5706:	cc 52       	subi	r28, 0x2C	; 44
    5708:	d2 40       	sbci	r29, 0x02	; 2
    570a:	c3 5d       	subi	r28, 0xD3	; 211
    570c:	dd 4f       	sbci	r29, 0xFD	; 253
    570e:	38 82       	st	Y, r3
    5710:	cd 52       	subi	r28, 0x2D	; 45
    5712:	d2 40       	sbci	r29, 0x02	; 2
			sprintf(op3s,"%s%x",op3s,eeprom_splitted[program_counter][k+FIXED_OP3_OFFSET]); // HEX CONCAT TO STRING (OP3 FETCH)
    5714:	c2 5d       	subi	r28, 0xD2	; 210
    5716:	dd 4f       	sbci	r29, 0xFD	; 253
    5718:	48 82       	st	Y, r4
    571a:	ce 52       	subi	r28, 0x2E	; 46
    571c:	d2 40       	sbci	r29, 0x02	; 2
    571e:	c1 5d       	subi	r28, 0xD1	; 209
    5720:	dd 4f       	sbci	r29, 0xFD	; 253
    5722:	58 82       	st	Y, r5
    5724:	cf 52       	subi	r28, 0x2F	; 47
    5726:	d2 40       	sbci	r29, 0x02	; 2
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	program_counter_maximum=line;
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    5728:	c0 5e       	subi	r28, 0xE0	; 224
    572a:	dd 4f       	sbci	r29, 0xFD	; 253
    572c:	28 81       	ld	r18, Y
    572e:	39 81       	ldd	r19, Y+1	; 0x01
    5730:	c0 52       	subi	r28, 0x20	; 32
    5732:	d2 40       	sbci	r29, 0x02	; 2
    5734:	29 52       	subi	r18, 0x29	; 41
    5736:	3f 4f       	sbci	r19, 0xFF	; 255
    5738:	c8 5d       	subi	r28, 0xD8	; 216
    573a:	dd 4f       	sbci	r29, 0xFD	; 253
    573c:	39 83       	std	Y+1, r19	; 0x01
    573e:	28 83       	st	Y, r18
    5740:	c8 52       	subi	r28, 0x28	; 40
    5742:	d2 40       	sbci	r29, 0x02	; 2
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";	
    5744:	f3 01       	movw	r30, r6
    5746:	10 82       	st	Z, r1
    5748:	11 82       	std	Z+1, r1	; 0x01
    574a:	12 82       	std	Z+2, r1	; 0x02
    574c:	13 82       	std	Z+3, r1	; 0x03
    574e:	14 82       	std	Z+4, r1	; 0x04
    5750:	15 82       	std	Z+5, r1	; 0x05
    5752:	16 82       	std	Z+6, r1	; 0x06
    5754:	f1 01       	movw	r30, r2
    5756:	10 82       	st	Z, r1
    5758:	11 82       	std	Z+1, r1	; 0x01
    575a:	12 82       	std	Z+2, r1	; 0x02
    575c:	13 82       	std	Z+3, r1	; 0x03
    575e:	14 82       	std	Z+4, r1	; 0x04
    5760:	15 82       	std	Z+5, r1	; 0x05
    5762:	16 82       	std	Z+6, r1	; 0x06
    5764:	f2 01       	movw	r30, r4
    5766:	10 82       	st	Z, r1
    5768:	11 82       	std	Z+1, r1	; 0x01
    576a:	12 82       	std	Z+2, r1	; 0x02
    576c:	13 82       	std	Z+3, r1	; 0x03
    576e:	14 82       	std	Z+4, r1	; 0x04
    5770:	15 82       	std	Z+5, r1	; 0x05
    5772:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    5774:	2a e1       	ldi	r18, 0x1A	; 26
    5776:	28 9f       	mul	r18, r24
    5778:	f0 01       	movw	r30, r0
    577a:	29 9f       	mul	r18, r25
    577c:	f0 0d       	add	r31, r0
    577e:	11 24       	eor	r1, r1
    5780:	21 e0       	ldi	r18, 0x01	; 1
    5782:	30 e0       	ldi	r19, 0x00	; 0
    5784:	2c 0f       	add	r18, r28
    5786:	3d 1f       	adc	r19, r29
    5788:	e2 0f       	add	r30, r18
    578a:	f3 1f       	adc	r31, r19
    578c:	80 81       	ld	r24, Z
    578e:	91 81       	ldd	r25, Z+1	; 0x01
    5790:	ce 5d       	subi	r28, 0xDE	; 222
    5792:	dd 4f       	sbci	r29, 0xFD	; 253
    5794:	99 83       	std	Y+1, r25	; 0x01
    5796:	88 83       	st	Y, r24
    5798:	c2 52       	subi	r28, 0x22	; 34
    579a:	d2 40       	sbci	r29, 0x02	; 2
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    579c:	c1 2c       	mov	r12, r1
    579e:	d1 2c       	mov	r13, r1
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    57a0:	1d e0       	ldi	r17, 0x0D	; 13
    57a2:	c2 5e       	subi	r28, 0xE2	; 226
    57a4:	dd 4f       	sbci	r29, 0xFD	; 253
    57a6:	a8 80       	ld	r10, Y
    57a8:	b9 80       	ldd	r11, Y+1	; 0x01
    57aa:	ce 51       	subi	r28, 0x1E	; 30
    57ac:	d2 40       	sbci	r29, 0x02	; 2
    57ae:	9f ef       	ldi	r25, 0xFF	; 255
    57b0:	c9 1a       	sub	r12, r25
    57b2:	d9 0a       	sbc	r13, r25
    57b4:	f5 01       	movw	r30, r10
    57b6:	80 81       	ld	r24, Z
    57b8:	91 81       	ldd	r25, Z+1	; 0x01
    57ba:	18 9f       	mul	r17, r24
    57bc:	f0 01       	movw	r30, r0
    57be:	19 9f       	mul	r17, r25
    57c0:	f0 0d       	add	r31, r0
    57c2:	11 24       	eor	r1, r1
    57c4:	ec 0d       	add	r30, r12
    57c6:	fd 1d       	adc	r31, r13
    57c8:	ee 0f       	add	r30, r30
    57ca:	ff 1f       	adc	r31, r31
    57cc:	21 e0       	ldi	r18, 0x01	; 1
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	2c 0f       	add	r18, r28
    57d2:	3d 1f       	adc	r19, r29
    57d4:	e2 0f       	add	r30, r18
    57d6:	f3 1f       	adc	r31, r19
    57d8:	81 81       	ldd	r24, Z+1	; 0x01
    57da:	8f 93       	push	r24
    57dc:	80 81       	ld	r24, Z
    57de:	8f 93       	push	r24
    57e0:	7f 92       	push	r7
    57e2:	6f 92       	push	r6
    57e4:	9f 92       	push	r9
    57e6:	8f 92       	push	r8
    57e8:	7f 92       	push	r7
    57ea:	6f 92       	push	r6
    57ec:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    57f0:	f5 01       	movw	r30, r10
    57f2:	80 81       	ld	r24, Z
    57f4:	91 81       	ldd	r25, Z+1	; 0x01
    57f6:	18 9f       	mul	r17, r24
    57f8:	f0 01       	movw	r30, r0
    57fa:	19 9f       	mul	r17, r25
    57fc:	f0 0d       	add	r31, r0
    57fe:	11 24       	eor	r1, r1
    5800:	ec 0d       	add	r30, r12
    5802:	fd 1d       	adc	r31, r13
    5804:	34 96       	adiw	r30, 0x04	; 4
    5806:	ee 0f       	add	r30, r30
    5808:	ff 1f       	adc	r31, r31
    580a:	21 e0       	ldi	r18, 0x01	; 1
    580c:	30 e0       	ldi	r19, 0x00	; 0
    580e:	2c 0f       	add	r18, r28
    5810:	3d 1f       	adc	r19, r29
    5812:	e2 0f       	add	r30, r18
    5814:	f3 1f       	adc	r31, r19
    5816:	81 81       	ldd	r24, Z+1	; 0x01
    5818:	8f 93       	push	r24
    581a:	80 81       	ld	r24, Z
    581c:	8f 93       	push	r24
    581e:	3f 92       	push	r3
    5820:	2f 92       	push	r2
    5822:	9f 92       	push	r9
    5824:	8f 92       	push	r8
    5826:	3f 92       	push	r3
    5828:	2f 92       	push	r2
    582a:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <sprintf>
			sprintf(op3s,"%s%x",op3s,eeprom_splitted[program_counter][k+FIXED_OP3_OFFSET]); // HEX CONCAT TO STRING (OP3 FETCH)
    582e:	f5 01       	movw	r30, r10
    5830:	80 81       	ld	r24, Z
    5832:	91 81       	ldd	r25, Z+1	; 0x01
    5834:	18 9f       	mul	r17, r24
    5836:	f0 01       	movw	r30, r0
    5838:	19 9f       	mul	r17, r25
    583a:	f0 0d       	add	r31, r0
    583c:	11 24       	eor	r1, r1
    583e:	ec 0d       	add	r30, r12
    5840:	fd 1d       	adc	r31, r13
    5842:	38 96       	adiw	r30, 0x08	; 8
    5844:	ee 0f       	add	r30, r30
    5846:	ff 1f       	adc	r31, r31
    5848:	21 e0       	ldi	r18, 0x01	; 1
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	2c 0f       	add	r18, r28
    584e:	3d 1f       	adc	r19, r29
    5850:	e2 0f       	add	r30, r18
    5852:	f3 1f       	adc	r31, r19
    5854:	81 81       	ldd	r24, Z+1	; 0x01
    5856:	8f 93       	push	r24
    5858:	80 81       	ld	r24, Z
    585a:	8f 93       	push	r24
    585c:	5f 92       	push	r5
    585e:	4f 92       	push	r4
    5860:	9f 92       	push	r9
    5862:	8f 92       	push	r8
    5864:	5f 92       	push	r5
    5866:	4f 92       	push	r4
    5868:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <sprintf>
	program_counter_maximum=line;
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";	
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    586c:	0f b6       	in	r0, 0x3f	; 63
    586e:	f8 94       	cli
    5870:	de bf       	out	0x3e, r29	; 62
    5872:	0f be       	out	0x3f, r0	; 63
    5874:	cd bf       	out	0x3d, r28	; 61
    5876:	94 e0       	ldi	r25, 0x04	; 4
    5878:	c9 16       	cp	r12, r25
    587a:	d1 04       	cpc	r13, r1
    587c:	09 f0       	breq	.+2      	; 0x5880 <_ZN4QEPU3runEv+0x368>
    587e:	97 cf       	rjmp	.-210    	; 0x57ae <_ZN4QEPU3runEv+0x296>
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
			sprintf(op3s,"%s%x",op3s,eeprom_splitted[program_counter][k+FIXED_OP3_OFFSET]); // HEX CONCAT TO STRING (OP3 FETCH)
		}
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16),strtol(op3s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    5880:	40 e1       	ldi	r20, 0x10	; 16
    5882:	50 e0       	ldi	r21, 0x00	; 0
    5884:	60 e0       	ldi	r22, 0x00	; 0
    5886:	70 e0       	ldi	r23, 0x00	; 0
    5888:	c2 5d       	subi	r28, 0xD2	; 210
    588a:	dd 4f       	sbci	r29, 0xFD	; 253
    588c:	88 81       	ld	r24, Y
    588e:	ce 52       	subi	r28, 0x2E	; 46
    5890:	d2 40       	sbci	r29, 0x02	; 2
    5892:	c1 5d       	subi	r28, 0xD1	; 209
    5894:	dd 4f       	sbci	r29, 0xFD	; 253
    5896:	98 81       	ld	r25, Y
    5898:	cf 52       	subi	r28, 0x2F	; 47
    589a:	d2 40       	sbci	r29, 0x02	; 2
    589c:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <strtol>
    58a0:	5b 01       	movw	r10, r22
    58a2:	6c 01       	movw	r12, r24
    58a4:	40 e1       	ldi	r20, 0x10	; 16
    58a6:	50 e0       	ldi	r21, 0x00	; 0
    58a8:	60 e0       	ldi	r22, 0x00	; 0
    58aa:	70 e0       	ldi	r23, 0x00	; 0
    58ac:	c4 5d       	subi	r28, 0xD4	; 212
    58ae:	dd 4f       	sbci	r29, 0xFD	; 253
    58b0:	88 81       	ld	r24, Y
    58b2:	cc 52       	subi	r28, 0x2C	; 44
    58b4:	d2 40       	sbci	r29, 0x02	; 2
    58b6:	c3 5d       	subi	r28, 0xD3	; 211
    58b8:	dd 4f       	sbci	r29, 0xFD	; 253
    58ba:	98 81       	ld	r25, Y
    58bc:	cd 52       	subi	r28, 0x2D	; 45
    58be:	d2 40       	sbci	r29, 0x02	; 2
    58c0:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <strtol>
    58c4:	cc 5d       	subi	r28, 0xDC	; 220
    58c6:	dd 4f       	sbci	r29, 0xFD	; 253
    58c8:	68 83       	st	Y, r22
    58ca:	79 83       	std	Y+1, r23	; 0x01
    58cc:	8a 83       	std	Y+2, r24	; 0x02
    58ce:	9b 83       	std	Y+3, r25	; 0x03
    58d0:	c4 52       	subi	r28, 0x24	; 36
    58d2:	d2 40       	sbci	r29, 0x02	; 2
    58d4:	40 e1       	ldi	r20, 0x10	; 16
    58d6:	50 e0       	ldi	r21, 0x00	; 0
    58d8:	60 e0       	ldi	r22, 0x00	; 0
    58da:	70 e0       	ldi	r23, 0x00	; 0
    58dc:	c6 5d       	subi	r28, 0xD6	; 214
    58de:	dd 4f       	sbci	r29, 0xFD	; 253
    58e0:	88 81       	ld	r24, Y
    58e2:	ca 52       	subi	r28, 0x2A	; 42
    58e4:	d2 40       	sbci	r29, 0x02	; 2
    58e6:	c5 5d       	subi	r28, 0xD5	; 213
    58e8:	dd 4f       	sbci	r29, 0xFD	; 253
    58ea:	98 81       	ld	r25, Y
    58ec:	cb 52       	subi	r28, 0x2B	; 43
    58ee:	d2 40       	sbci	r29, 0x02	; 2
    58f0:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <strtol>
    58f4:	9b 01       	movw	r18, r22
    58f6:	ac 01       	movw	r20, r24
    58f8:	cc 5d       	subi	r28, 0xDC	; 220
    58fa:	dd 4f       	sbci	r29, 0xFD	; 253
    58fc:	e8 80       	ld	r14, Y
    58fe:	f9 80       	ldd	r15, Y+1	; 0x01
    5900:	0a 81       	ldd	r16, Y+2	; 0x02
    5902:	1b 81       	ldd	r17, Y+3	; 0x03
    5904:	c4 52       	subi	r28, 0x24	; 36
    5906:	d2 40       	sbci	r29, 0x02	; 2
    5908:	ce 5d       	subi	r28, 0xDE	; 222
    590a:	dd 4f       	sbci	r29, 0xFD	; 253
    590c:	68 81       	ld	r22, Y
    590e:	79 81       	ldd	r23, Y+1	; 0x01
    5910:	c2 52       	subi	r28, 0x22	; 34
    5912:	d2 40       	sbci	r29, 0x02	; 2
    5914:	c0 5e       	subi	r28, 0xE0	; 224
    5916:	dd 4f       	sbci	r29, 0xFD	; 253
    5918:	88 81       	ld	r24, Y
    591a:	99 81       	ldd	r25, Y+1	; 0x01
    591c:	c0 52       	subi	r28, 0x20	; 32
    591e:	d2 40       	sbci	r29, 0x02	; 2
    5920:	0e 94 1b 21 	call	0x4236	; 0x4236 <_ZN4QEPU7executeEilll>
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	program_counter_maximum=line;
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    5924:	c2 5e       	subi	r28, 0xE2	; 226
    5926:	dd 4f       	sbci	r29, 0xFD	; 253
    5928:	e8 81       	ld	r30, Y
    592a:	f9 81       	ldd	r31, Y+1	; 0x01
    592c:	ce 51       	subi	r28, 0x1E	; 30
    592e:	d2 40       	sbci	r29, 0x02	; 2
    5930:	80 81       	ld	r24, Z
    5932:	91 81       	ldd	r25, Z+1	; 0x01
    5934:	01 96       	adiw	r24, 0x01	; 1
    5936:	91 83       	std	Z+1, r25	; 0x01
    5938:	80 83       	st	Z, r24
    593a:	c8 5d       	subi	r28, 0xD8	; 216
    593c:	dd 4f       	sbci	r29, 0xFD	; 253
    593e:	e8 81       	ld	r30, Y
    5940:	f9 81       	ldd	r31, Y+1	; 0x01
    5942:	c8 52       	subi	r28, 0x28	; 40
    5944:	d2 40       	sbci	r29, 0x02	; 2
    5946:	20 81       	ld	r18, Z
    5948:	31 81       	ldd	r19, Z+1	; 0x01
    594a:	82 17       	cp	r24, r18
    594c:	93 07       	cpc	r25, r19
    594e:	0c f4       	brge	.+2      	; 0x5952 <_ZN4QEPU3runEv+0x43a>
    5950:	f9 ce       	rjmp	.-526    	; 0x5744 <_ZN4QEPU3runEv+0x22c>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
			sprintf(op3s,"%s%x",op3s,eeprom_splitted[program_counter][k+FIXED_OP3_OFFSET]); // HEX CONCAT TO STRING (OP3 FETCH)
		}
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16),strtol(op3s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem(QUBIT_COUNT);
    5952:	60 e1       	ldi	r22, 0x10	; 16
    5954:	70 e0       	ldi	r23, 0x00	; 0
    5956:	c0 5e       	subi	r28, 0xE0	; 224
    5958:	dd 4f       	sbci	r29, 0xFD	; 253
    595a:	88 81       	ld	r24, Y
    595c:	99 81       	ldd	r25, Y+1	; 0x01
    595e:	c0 52       	subi	r28, 0x20	; 32
    5960:	d2 40       	sbci	r29, 0x02	; 2
    5962:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN4QEPU7dumpmemEi>
	serial.writestrln("");
    5966:	65 ec       	ldi	r22, 0xC5	; 197
    5968:	70 e0       	ldi	r23, 0x00	; 0
    596a:	c0 5d       	subi	r28, 0xD0	; 208
    596c:	dd 4f       	sbci	r29, 0xFD	; 253
    596e:	88 81       	ld	r24, Y
    5970:	99 81       	ldd	r25, Y+1	; 0x01
    5972:	c0 53       	subi	r28, 0x30	; 48
    5974:	d2 40       	sbci	r29, 0x02	; 2
    5976:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
	sram.dumpmem(5);
    597a:	65 e0       	ldi	r22, 0x05	; 5
    597c:	70 e0       	ldi	r23, 0x00	; 0
    597e:	c0 5e       	subi	r28, 0xE0	; 224
    5980:	dd 4f       	sbci	r29, 0xFD	; 253
    5982:	88 81       	ld	r24, Y
    5984:	99 81       	ldd	r25, Y+1	; 0x01
    5986:	c0 52       	subi	r28, 0x20	; 32
    5988:	d2 40       	sbci	r29, 0x02	; 2
    598a:	03 96       	adiw	r24, 0x03	; 3
    598c:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <_ZN4SRAM7dumpmemEi>
	serial.writestr("The execution of the program has finished");
    5990:	62 e0       	ldi	r22, 0x02	; 2
    5992:	71 e0       	ldi	r23, 0x01	; 1
    5994:	c0 5d       	subi	r28, 0xD0	; 208
    5996:	dd 4f       	sbci	r29, 0xFD	; 253
    5998:	88 81       	ld	r24, Y
    599a:	99 81       	ldd	r25, Y+1	; 0x01
    599c:	c0 53       	subi	r28, 0x30	; 48
    599e:	d2 40       	sbci	r29, 0x02	; 2
    59a0:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
	#pragma endregion
}
    59a4:	cf 5c       	subi	r28, 0xCF	; 207
    59a6:	dd 4f       	sbci	r29, 0xFD	; 253
    59a8:	0f b6       	in	r0, 0x3f	; 63
    59aa:	f8 94       	cli
    59ac:	de bf       	out	0x3e, r29	; 62
    59ae:	0f be       	out	0x3f, r0	; 63
    59b0:	cd bf       	out	0x3d, r28	; 61
    59b2:	df 91       	pop	r29
    59b4:	cf 91       	pop	r28
    59b6:	1f 91       	pop	r17
    59b8:	0f 91       	pop	r16
    59ba:	ff 90       	pop	r15
    59bc:	ef 90       	pop	r14
    59be:	df 90       	pop	r13
    59c0:	cf 90       	pop	r12
    59c2:	bf 90       	pop	r11
    59c4:	af 90       	pop	r10
    59c6:	9f 90       	pop	r9
    59c8:	8f 90       	pop	r8
    59ca:	7f 90       	pop	r7
    59cc:	6f 90       	pop	r6
    59ce:	5f 90       	pop	r5
    59d0:	4f 90       	pop	r4
    59d2:	3f 90       	pop	r3
    59d4:	2f 90       	pop	r2
    59d6:	08 95       	ret

000059d8 <main>:
#include "qepu.h"
int main(void){
    59d8:	cf 93       	push	r28
    59da:	df 93       	push	r29
    59dc:	cd b7       	in	r28, 0x3d	; 61
    59de:	de b7       	in	r29, 0x3e	; 62
    59e0:	c9 5d       	subi	r28, 0xD9	; 217
    59e2:	d1 09       	sbc	r29, r1
    59e4:	0f b6       	in	r0, 0x3f	; 63
    59e6:	f8 94       	cli
    59e8:	de bf       	out	0x3e, r29	; 62
    59ea:	0f be       	out	0x3f, r0	; 63
    59ec:	cd bf       	out	0x3d, r28	; 61
	QEPU qepu;
    59ee:	ce 01       	movw	r24, r28
    59f0:	01 96       	adiw	r24, 0x01	; 1
    59f2:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <_ZN4QEPUC1Ev>
	qepu.run();
    59f6:	ce 01       	movw	r24, r28
    59f8:	01 96       	adiw	r24, 0x01	; 1
    59fa:	0e 94 8c 2a 	call	0x5518	; 0x5518 <_ZN4QEPU3runEv>
    59fe:	ff cf       	rjmp	.-2      	; 0x59fe <main+0x26>

00005a00 <_ZN4SRAMC1Ev>:
#include "sram.h"

SRAM::SRAM(){
    5a00:	cf 93       	push	r28
    5a02:	df 93       	push	r29
    5a04:	ec 01       	movw	r28, r24
    5a06:	03 96       	adiw	r24, 0x03	; 3
    5a08:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <_ZN6SerialC1Ev>
	CTRLMEM_DIR=OUTPUT;
    5a0c:	8f ef       	ldi	r24, 0xFF	; 255
    5a0e:	84 bb       	out	0x14, r24	; 20
	stack_head_offset=MEMORY_HEAD_PERMISSION_OFFSET+HEAD_PROGRAMMER_OFFSET;
    5a10:	84 e1       	ldi	r24, 0x14	; 20
    5a12:	90 e0       	ldi	r25, 0x00	; 0
    5a14:	99 83       	std	Y+1, r25	; 0x01
    5a16:	88 83       	st	Y, r24
	stack_tail_offset=ADDRESS_MAX-MEMORY_TAIL_PERMISSION_OFFSET-TAIL_PROGRAMMER_OFFSET;
    5a18:	88 e3       	ldi	r24, 0x38	; 56
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	9d 83       	std	Y+5, r25	; 0x05
    5a1e:	8c 83       	std	Y+4, r24	; 0x04
}
    5a20:	df 91       	pop	r29
    5a22:	cf 91       	pop	r28
    5a24:	08 95       	ret

00005a26 <_ZN4SRAM11set_addressEi>:

void SRAM::set_address(int address){
	MEM_ADDRESS_DIR=OUTPUT;
    5a26:	2f ef       	ldi	r18, 0xFF	; 255
    5a28:	2a bb       	out	0x1a, r18	; 26
	if(address+stack_head_offset>stack_tail_offset) MEM_ADDRESS=stack_tail_offset;
    5a2a:	fc 01       	movw	r30, r24
    5a2c:	20 81       	ld	r18, Z
    5a2e:	31 81       	ldd	r19, Z+1	; 0x01
    5a30:	84 81       	ldd	r24, Z+4	; 0x04
    5a32:	95 81       	ldd	r25, Z+5	; 0x05
    5a34:	a9 01       	movw	r20, r18
    5a36:	46 0f       	add	r20, r22
    5a38:	57 1f       	adc	r21, r23
    5a3a:	84 17       	cp	r24, r20
    5a3c:	95 07       	cpc	r25, r21
    5a3e:	14 f4       	brge	.+4      	; 0x5a44 <_ZN4SRAM11set_addressEi+0x1e>
    5a40:	8b bb       	out	0x1b, r24	; 27
    5a42:	08 95       	ret
	else MEM_ADDRESS=address+stack_head_offset;
    5a44:	26 0f       	add	r18, r22
    5a46:	2b bb       	out	0x1b, r18	; 27
    5a48:	08 95       	ret

00005a4a <_ZN4SRAM10setctrlpinEii>:
void SRAM::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
	BUS_OUT=data;
}
void SRAM::setctrlpin(int pin,int state){
	CTRLMEM&=~(1<<pin); // CLEAR PIN
    5a4a:	75 b3       	in	r23, 0x15	; 21
    5a4c:	21 e0       	ldi	r18, 0x01	; 1
    5a4e:	30 e0       	ldi	r19, 0x00	; 0
    5a50:	c9 01       	movw	r24, r18
    5a52:	06 2e       	mov	r0, r22
    5a54:	02 c0       	rjmp	.+4      	; 0x5a5a <_ZN4SRAM10setctrlpinEii+0x10>
    5a56:	88 0f       	add	r24, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	0a 94       	dec	r0
    5a5c:	e2 f7       	brpl	.-8      	; 0x5a56 <_ZN4SRAM10setctrlpinEii+0xc>
    5a5e:	80 95       	com	r24
    5a60:	87 23       	and	r24, r23
    5a62:	85 bb       	out	0x15, r24	; 21
	CTRLMEM|=(state<<pin); // SET PIN
    5a64:	85 b3       	in	r24, 0x15	; 21
    5a66:	02 c0       	rjmp	.+4      	; 0x5a6c <_ZN4SRAM10setctrlpinEii+0x22>
    5a68:	44 0f       	add	r20, r20
    5a6a:	55 1f       	adc	r21, r21
    5a6c:	6a 95       	dec	r22
    5a6e:	e2 f7       	brpl	.-8      	; 0x5a68 <_ZN4SRAM10setctrlpinEii+0x1e>
    5a70:	48 2b       	or	r20, r24
    5a72:	45 bb       	out	0x15, r20	; 21
    5a74:	08 95       	ret

00005a76 <_ZN4SRAM17memory_managementEv>:
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
		serial.writestrln(mem_debug_str);
	}
}

void SRAM::memory_management(){
    5a76:	fc 01       	movw	r30, r24
	if(stack_head_offset>stack_tail_offset || stack_head_offset<0 || stack_head_offset>ADDRESS_MAX || stack_tail_offset<0 || stack_tail_offset>ADDRESS_MAX){
    5a78:	80 81       	ld	r24, Z
    5a7a:	91 81       	ldd	r25, Z+1	; 0x01
    5a7c:	24 81       	ldd	r18, Z+4	; 0x04
    5a7e:	35 81       	ldd	r19, Z+5	; 0x05
    5a80:	28 17       	cp	r18, r24
    5a82:	39 07       	cpc	r19, r25
    5a84:	34 f0       	brlt	.+12     	; 0x5a92 <_ZN4SRAM17memory_managementEv+0x1c>
    5a86:	81 30       	cpi	r24, 0x01	; 1
    5a88:	91 40       	sbci	r25, 0x01	; 1
    5a8a:	18 f4       	brcc	.+6      	; 0x5a92 <_ZN4SRAM17memory_managementEv+0x1c>
    5a8c:	21 30       	cpi	r18, 0x01	; 1
    5a8e:	31 40       	sbci	r19, 0x01	; 1
    5a90:	40 f0       	brcs	.+16     	; 0x5aa2 <_ZN4SRAM17memory_managementEv+0x2c>
		//RESTORE STACK POINTERS TO DEFAULT
		stack_head_offset=MEMORY_HEAD_PERMISSION_OFFSET+HEAD_PROGRAMMER_OFFSET;
    5a92:	84 e1       	ldi	r24, 0x14	; 20
    5a94:	90 e0       	ldi	r25, 0x00	; 0
    5a96:	91 83       	std	Z+1, r25	; 0x01
    5a98:	80 83       	st	Z, r24
		stack_tail_offset=ADDRESS_MAX-MEMORY_TAIL_PERMISSION_OFFSET-TAIL_PROGRAMMER_OFFSET;
    5a9a:	88 e3       	ldi	r24, 0x38	; 56
    5a9c:	90 e0       	ldi	r25, 0x00	; 0
    5a9e:	95 83       	std	Z+5, r25	; 0x05
    5aa0:	84 83       	std	Z+4, r24	; 0x04
    5aa2:	08 95       	ret

00005aa4 <_ZN4SRAM4readEa>:
	MEM_ADDRESS_DIR=OUTPUT;
	if(address+stack_head_offset>stack_tail_offset) MEM_ADDRESS=stack_tail_offset;
	else MEM_ADDRESS=address+stack_head_offset;
}

int8_t SRAM::read(int8_t address){
    5aa4:	1f 93       	push	r17
    5aa6:	cf 93       	push	r28
    5aa8:	df 93       	push	r29
    5aaa:	ec 01       	movw	r28, r24
    5aac:	16 2f       	mov	r17, r22
	memory_management();
    5aae:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <_ZN4SRAM17memory_managementEv>
	set_address(address);
    5ab2:	61 2f       	mov	r22, r17
    5ab4:	77 27       	eor	r23, r23
    5ab6:	67 fd       	sbrc	r22, 7
    5ab8:	70 95       	com	r23
    5aba:	ce 01       	movw	r24, r28
    5abc:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <_ZN4SRAM11set_addressEi>
	BUS_DIR=INPUT;
    5ac0:	17 ba       	out	0x17, r1	; 23
	setctrlpin(MRE,HIGH);
    5ac2:	41 e0       	ldi	r20, 0x01	; 1
    5ac4:	50 e0       	ldi	r21, 0x00	; 0
    5ac6:	66 e0       	ldi	r22, 0x06	; 6
    5ac8:	70 e0       	ldi	r23, 0x00	; 0
    5aca:	ce 01       	movw	r24, r28
    5acc:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <_ZN4SRAM10setctrlpinEii>
	int bus_data=BUS_IN;
    5ad0:	16 b3       	in	r17, 0x16	; 22
	setctrlpin(MRE,LOW);
    5ad2:	40 e0       	ldi	r20, 0x00	; 0
    5ad4:	50 e0       	ldi	r21, 0x00	; 0
    5ad6:	66 e0       	ldi	r22, 0x06	; 6
    5ad8:	70 e0       	ldi	r23, 0x00	; 0
    5ada:	ce 01       	movw	r24, r28
    5adc:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <_ZN4SRAM10setctrlpinEii>
	BUS_DIR=OUTPUT;
    5ae0:	8f ef       	ldi	r24, 0xFF	; 255
    5ae2:	87 bb       	out	0x17, r24	; 23
	MEM_ADDRESS=LOW;
    5ae4:	1b ba       	out	0x1b, r1	; 27
	return bus_data;
}
    5ae6:	81 2f       	mov	r24, r17
    5ae8:	df 91       	pop	r29
    5aea:	cf 91       	pop	r28
    5aec:	1f 91       	pop	r17
    5aee:	08 95       	ret

00005af0 <_ZN4SRAM9read_sramEv>:
	}else{
		stack_head_offset--;
		write(0,register_data);
	}
}
int* SRAM::read_sram(){
    5af0:	cf 92       	push	r12
    5af2:	df 92       	push	r13
    5af4:	ef 92       	push	r14
    5af6:	ff 92       	push	r15
    5af8:	0f 93       	push	r16
    5afa:	1f 93       	push	r17
    5afc:	cf 93       	push	r28
    5afe:	df 93       	push	r29
    5b00:	cd b7       	in	r28, 0x3d	; 61
    5b02:	de b7       	in	r29, 0x3e	; 62
    5b04:	d2 50       	subi	r29, 0x02	; 2
    5b06:	0f b6       	in	r0, 0x3f	; 63
    5b08:	f8 94       	cli
    5b0a:	de bf       	out	0x3e, r29	; 62
    5b0c:	0f be       	out	0x3f, r0	; 63
    5b0e:	cd bf       	out	0x3d, r28	; 61
    5b10:	7c 01       	movw	r14, r24
	int ram_memory[ADDRESS_MAX];
	for(int i=stack_head_offset;i<stack_tail_offset;i++) ram_memory[i]=read(i);
    5b12:	fc 01       	movw	r30, r24
    5b14:	00 81       	ld	r16, Z
    5b16:	11 81       	ldd	r17, Z+1	; 0x01
    5b18:	84 81       	ldd	r24, Z+4	; 0x04
    5b1a:	95 81       	ldd	r25, Z+5	; 0x05
    5b1c:	08 17       	cp	r16, r24
    5b1e:	19 07       	cpc	r17, r25
    5b20:	e4 f4       	brge	.+56     	; 0x5b5a <_ZN4SRAM9read_sramEv+0x6a>
    5b22:	68 01       	movw	r12, r16
    5b24:	cc 0c       	add	r12, r12
    5b26:	dd 1c       	adc	r13, r13
    5b28:	81 e0       	ldi	r24, 0x01	; 1
    5b2a:	90 e0       	ldi	r25, 0x00	; 0
    5b2c:	8c 0f       	add	r24, r28
    5b2e:	9d 1f       	adc	r25, r29
    5b30:	c8 0e       	add	r12, r24
    5b32:	d9 1e       	adc	r13, r25
    5b34:	60 2f       	mov	r22, r16
    5b36:	c7 01       	movw	r24, r14
    5b38:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    5b3c:	99 27       	eor	r25, r25
    5b3e:	87 fd       	sbrc	r24, 7
    5b40:	90 95       	com	r25
    5b42:	f6 01       	movw	r30, r12
    5b44:	81 93       	st	Z+, r24
    5b46:	91 93       	st	Z+, r25
    5b48:	6f 01       	movw	r12, r30
    5b4a:	0f 5f       	subi	r16, 0xFF	; 255
    5b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b4e:	f7 01       	movw	r30, r14
    5b50:	84 81       	ldd	r24, Z+4	; 0x04
    5b52:	95 81       	ldd	r25, Z+5	; 0x05
    5b54:	08 17       	cp	r16, r24
    5b56:	19 07       	cpc	r17, r25
    5b58:	6c f3       	brlt	.-38     	; 0x5b34 <_ZN4SRAM9read_sramEv+0x44>
	return ram_memory;
}
    5b5a:	ce 01       	movw	r24, r28
    5b5c:	01 96       	adiw	r24, 0x01	; 1
    5b5e:	de 5f       	subi	r29, 0xFE	; 254
    5b60:	0f b6       	in	r0, 0x3f	; 63
    5b62:	f8 94       	cli
    5b64:	de bf       	out	0x3e, r29	; 62
    5b66:	0f be       	out	0x3f, r0	; 63
    5b68:	cd bf       	out	0x3d, r28	; 61
    5b6a:	df 91       	pop	r29
    5b6c:	cf 91       	pop	r28
    5b6e:	1f 91       	pop	r17
    5b70:	0f 91       	pop	r16
    5b72:	ff 90       	pop	r15
    5b74:	ef 90       	pop	r14
    5b76:	df 90       	pop	r13
    5b78:	cf 90       	pop	r12
    5b7a:	08 95       	ret

00005b7c <_ZN4SRAM5writeEaa>:
	setctrlpin(MRE,LOW);
	BUS_DIR=OUTPUT;
	MEM_ADDRESS=LOW;
	return bus_data;
}
void SRAM::write(int8_t address,int8_t data){
    5b7c:	0f 93       	push	r16
    5b7e:	1f 93       	push	r17
    5b80:	cf 93       	push	r28
    5b82:	df 93       	push	r29
    5b84:	ec 01       	movw	r28, r24
    5b86:	16 2f       	mov	r17, r22
    5b88:	04 2f       	mov	r16, r20
	memory_management();
    5b8a:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <_ZN4SRAM17memory_managementEv>
	set_address(address);
    5b8e:	61 2f       	mov	r22, r17
    5b90:	77 27       	eor	r23, r23
    5b92:	67 fd       	sbrc	r22, 7
    5b94:	70 95       	com	r23
    5b96:	ce 01       	movw	r24, r28
    5b98:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <_ZN4SRAM11set_addressEi>
	setctrlpin(MWR,LOW);
	MEM_ADDRESS=LOW;
	bus_write(LOW);
}
void SRAM::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    5b9c:	1f ef       	ldi	r17, 0xFF	; 255
    5b9e:	17 bb       	out	0x17, r17	; 23
	BUS_OUT=data;
    5ba0:	08 bb       	out	0x18, r16	; 24
}
void SRAM::write(int8_t address,int8_t data){
	memory_management();
	set_address(address);
	bus_write(data);
	setctrlpin(MWR,HIGH);
    5ba2:	41 e0       	ldi	r20, 0x01	; 1
    5ba4:	50 e0       	ldi	r21, 0x00	; 0
    5ba6:	65 e0       	ldi	r22, 0x05	; 5
    5ba8:	70 e0       	ldi	r23, 0x00	; 0
    5baa:	ce 01       	movw	r24, r28
    5bac:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <_ZN4SRAM10setctrlpinEii>
	setctrlpin(MWR,LOW);
    5bb0:	40 e0       	ldi	r20, 0x00	; 0
    5bb2:	50 e0       	ldi	r21, 0x00	; 0
    5bb4:	65 e0       	ldi	r22, 0x05	; 5
    5bb6:	70 e0       	ldi	r23, 0x00	; 0
    5bb8:	ce 01       	movw	r24, r28
    5bba:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <_ZN4SRAM10setctrlpinEii>
	MEM_ADDRESS=LOW;
    5bbe:	1b ba       	out	0x1b, r1	; 27
	bus_write(LOW);
}
void SRAM::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    5bc0:	17 bb       	out	0x17, r17	; 23
	BUS_OUT=data;
    5bc2:	18 ba       	out	0x18, r1	; 24
	bus_write(data);
	setctrlpin(MWR,HIGH);
	setctrlpin(MWR,LOW);
	MEM_ADDRESS=LOW;
	bus_write(LOW);
}
    5bc4:	df 91       	pop	r29
    5bc6:	cf 91       	pop	r28
    5bc8:	1f 91       	pop	r17
    5bca:	0f 91       	pop	r16
    5bcc:	08 95       	ret

00005bce <_ZN4SRAM3popEv>:
}
void SRAM::setctrlpin(int pin,int state){
	CTRLMEM&=~(1<<pin); // CLEAR PIN
	CTRLMEM|=(state<<pin); // SET PIN
}
int SRAM::pop(){
    5bce:	cf 93       	push	r28
    5bd0:	df 93       	push	r29
    5bd2:	ec 01       	movw	r28, r24
	memory_management();
    5bd4:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <_ZN4SRAM17memory_managementEv>
	int popped_number=read(0);
    5bd8:	60 e0       	ldi	r22, 0x00	; 0
    5bda:	ce 01       	movw	r24, r28
    5bdc:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
	stack_head_offset++;
    5be0:	28 81       	ld	r18, Y
    5be2:	39 81       	ldd	r19, Y+1	; 0x01
    5be4:	2f 5f       	subi	r18, 0xFF	; 255
    5be6:	3f 4f       	sbci	r19, 0xFF	; 255
    5be8:	39 83       	std	Y+1, r19	; 0x01
    5bea:	28 83       	st	Y, r18
	if(stack_head_offset>stack_tail_offset) return 0;
    5bec:	4c 81       	ldd	r20, Y+4	; 0x04
    5bee:	5d 81       	ldd	r21, Y+5	; 0x05
    5bf0:	42 17       	cp	r20, r18
    5bf2:	53 07       	cpc	r21, r19
    5bf4:	24 f0       	brlt	.+8      	; 0x5bfe <_ZN4SRAM3popEv+0x30>
	CTRLMEM&=~(1<<pin); // CLEAR PIN
	CTRLMEM|=(state<<pin); // SET PIN
}
int SRAM::pop(){
	memory_management();
	int popped_number=read(0);
    5bf6:	99 27       	eor	r25, r25
    5bf8:	87 fd       	sbrc	r24, 7
    5bfa:	90 95       	com	r25
	stack_head_offset++;
	if(stack_head_offset>stack_tail_offset) return 0;
	else return popped_number;
    5bfc:	02 c0       	rjmp	.+4      	; 0x5c02 <_ZN4SRAM3popEv+0x34>
}
int SRAM::pop(){
	memory_management();
	int popped_number=read(0);
	stack_head_offset++;
	if(stack_head_offset>stack_tail_offset) return 0;
    5bfe:	80 e0       	ldi	r24, 0x00	; 0
    5c00:	90 e0       	ldi	r25, 0x00	; 0
	else return popped_number;
}
    5c02:	df 91       	pop	r29
    5c04:	cf 91       	pop	r28
    5c06:	08 95       	ret

00005c08 <_ZN4SRAM4pushEi>:
void SRAM::push(int register_data){
    5c08:	ef 92       	push	r14
    5c0a:	ff 92       	push	r15
    5c0c:	0f 93       	push	r16
    5c0e:	1f 93       	push	r17
    5c10:	cf 93       	push	r28
    5c12:	df 93       	push	r29
    5c14:	8c 01       	movw	r16, r24
    5c16:	f6 2e       	mov	r15, r22
    5c18:	e7 2e       	mov	r14, r23
	memory_management();
    5c1a:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <_ZN4SRAM17memory_managementEv>
	if(stack_head_offset<=MEMORY_HEAD_PERMISSION_OFFSET){ //PUSH EVERY OTHER ELEMENT FORWARD ****
    5c1e:	f8 01       	movw	r30, r16
    5c20:	80 81       	ld	r24, Z
    5c22:	91 81       	ldd	r25, Z+1	; 0x01
    5c24:	18 16       	cp	r1, r24
    5c26:	19 06       	cpc	r1, r25
    5c28:	6c f1       	brlt	.+90     	; 0x5c84 <_ZN4SRAM4pushEi+0x7c>
		int *ram_memory=utils.arrint_shiftright(read_sram(),register_data,stack_tail_offset-stack_head_offset);
    5c2a:	c4 81       	ldd	r28, Z+4	; 0x04
    5c2c:	d5 81       	ldd	r29, Z+5	; 0x05
    5c2e:	c8 1b       	sub	r28, r24
    5c30:	d9 0b       	sbc	r29, r25
    5c32:	c8 01       	movw	r24, r16
    5c34:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN4SRAM9read_sramEv>
    5c38:	9e 01       	movw	r18, r28
    5c3a:	4f 2d       	mov	r20, r15
    5c3c:	5e 2d       	mov	r21, r14
    5c3e:	bc 01       	movw	r22, r24
    5c40:	c8 01       	movw	r24, r16
    5c42:	02 96       	adiw	r24, 0x02	; 2
    5c44:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <_ZN5Utils17arrint_shiftrightEPiii>
		for(int i=stack_head_offset;i<stack_tail_offset;i++) write(i,ram_memory[i]);
    5c48:	f8 01       	movw	r30, r16
    5c4a:	c0 81       	ld	r28, Z
    5c4c:	d1 81       	ldd	r29, Z+1	; 0x01
    5c4e:	24 81       	ldd	r18, Z+4	; 0x04
    5c50:	35 81       	ldd	r19, Z+5	; 0x05
    5c52:	c2 17       	cp	r28, r18
    5c54:	d3 07       	cpc	r29, r19
    5c56:	fc f4       	brge	.+62     	; 0x5c96 <_ZN4SRAM4pushEi+0x8e>
    5c58:	7e 01       	movw	r14, r28
    5c5a:	ee 0c       	add	r14, r14
    5c5c:	ff 1c       	adc	r15, r15
    5c5e:	e8 0e       	add	r14, r24
    5c60:	f9 1e       	adc	r15, r25
    5c62:	f7 01       	movw	r30, r14
    5c64:	40 81       	ld	r20, Z
    5c66:	f2 e0       	ldi	r31, 0x02	; 2
    5c68:	ef 0e       	add	r14, r31
    5c6a:	f1 1c       	adc	r15, r1
    5c6c:	6c 2f       	mov	r22, r28
    5c6e:	c8 01       	movw	r24, r16
    5c70:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
    5c74:	21 96       	adiw	r28, 0x01	; 1
    5c76:	f8 01       	movw	r30, r16
    5c78:	84 81       	ldd	r24, Z+4	; 0x04
    5c7a:	95 81       	ldd	r25, Z+5	; 0x05
    5c7c:	c8 17       	cp	r28, r24
    5c7e:	d9 07       	cpc	r29, r25
    5c80:	84 f3       	brlt	.-32     	; 0x5c62 <_ZN4SRAM4pushEi+0x5a>
    5c82:	09 c0       	rjmp	.+18     	; 0x5c96 <_ZN4SRAM4pushEi+0x8e>
	}else{
		stack_head_offset--;
    5c84:	01 97       	sbiw	r24, 0x01	; 1
    5c86:	f8 01       	movw	r30, r16
    5c88:	91 83       	std	Z+1, r25	; 0x01
    5c8a:	80 83       	st	Z, r24
		write(0,register_data);
    5c8c:	4f 2d       	mov	r20, r15
    5c8e:	60 e0       	ldi	r22, 0x00	; 0
    5c90:	c8 01       	movw	r24, r16
    5c92:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <_ZN4SRAM5writeEaa>
	}
}
    5c96:	df 91       	pop	r29
    5c98:	cf 91       	pop	r28
    5c9a:	1f 91       	pop	r17
    5c9c:	0f 91       	pop	r16
    5c9e:	ff 90       	pop	r15
    5ca0:	ef 90       	pop	r14
    5ca2:	08 95       	ret

00005ca4 <_ZN4SRAM7dumpmemEi>:
int* SRAM::read_sram(){
	int ram_memory[ADDRESS_MAX];
	for(int i=stack_head_offset;i<stack_tail_offset;i++) ram_memory[i]=read(i);
	return ram_memory;
}
void SRAM::dumpmem(int length){
    5ca4:	6f 92       	push	r6
    5ca6:	7f 92       	push	r7
    5ca8:	8f 92       	push	r8
    5caa:	9f 92       	push	r9
    5cac:	af 92       	push	r10
    5cae:	bf 92       	push	r11
    5cb0:	cf 92       	push	r12
    5cb2:	df 92       	push	r13
    5cb4:	ef 92       	push	r14
    5cb6:	ff 92       	push	r15
    5cb8:	0f 93       	push	r16
    5cba:	1f 93       	push	r17
    5cbc:	cf 93       	push	r28
    5cbe:	df 93       	push	r29
    5cc0:	cd b7       	in	r28, 0x3d	; 61
    5cc2:	de b7       	in	r29, 0x3e	; 62
    5cc4:	6e 97       	sbiw	r28, 0x1e	; 30
    5cc6:	0f b6       	in	r0, 0x3f	; 63
    5cc8:	f8 94       	cli
    5cca:	de bf       	out	0x3e, r29	; 62
    5ccc:	0f be       	out	0x3f, r0	; 63
    5cce:	cd bf       	out	0x3d, r28	; 61
    5cd0:	6c 01       	movw	r12, r24
    5cd2:	5b 01       	movw	r10, r22
	memory_management();
    5cd4:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <_ZN4SRAM17memory_managementEv>
	int head=0,tail=length;
	if(length<=0){head=stack_head_offset; tail=stack_tail_offset;}
    5cd8:	1a 14       	cp	r1, r10
    5cda:	1b 04       	cpc	r1, r11
    5cdc:	84 f4       	brge	.+32     	; 0x5cfe <_ZN4SRAM7dumpmemEi+0x5a>
	for(int i=0;i<tail+head;i++){
    5cde:	00 e0       	ldi	r16, 0x00	; 0
    5ce0:	10 e0       	ldi	r17, 0x00	; 0
		char mem_debug_str[30];
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
    5ce2:	0f 2e       	mov	r0, r31
    5ce4:	fc e2       	ldi	r31, 0x2C	; 44
    5ce6:	6f 2e       	mov	r6, r31
    5ce8:	f1 e0       	ldi	r31, 0x01	; 1
    5cea:	7f 2e       	mov	r7, r31
    5cec:	f0 2d       	mov	r31, r0
    5cee:	ce 01       	movw	r24, r28
    5cf0:	01 96       	adiw	r24, 0x01	; 1
    5cf2:	7c 01       	movw	r14, r24
		serial.writestrln(mem_debug_str);
    5cf4:	46 01       	movw	r8, r12
    5cf6:	93 e0       	ldi	r25, 0x03	; 3
    5cf8:	89 0e       	add	r8, r25
    5cfa:	91 1c       	adc	r9, r1
    5cfc:	0b c0       	rjmp	.+22     	; 0x5d14 <_ZN4SRAM7dumpmemEi+0x70>
}
void SRAM::dumpmem(int length){
	memory_management();
	int head=0,tail=length;
	if(length<=0){head=stack_head_offset; tail=stack_tail_offset;}
	for(int i=0;i<tail+head;i++){
    5cfe:	f6 01       	movw	r30, r12
    5d00:	a0 80       	ld	r10, Z
    5d02:	b1 80       	ldd	r11, Z+1	; 0x01
    5d04:	84 81       	ldd	r24, Z+4	; 0x04
    5d06:	95 81       	ldd	r25, Z+5	; 0x05
    5d08:	a8 0e       	add	r10, r24
    5d0a:	b9 1e       	adc	r11, r25
    5d0c:	1a 14       	cp	r1, r10
    5d0e:	1b 04       	cpc	r1, r11
    5d10:	34 f3       	brlt	.-52     	; 0x5cde <_ZN4SRAM7dumpmemEi+0x3a>
    5d12:	27 c0       	rjmp	.+78     	; 0x5d62 <_ZN4SRAM7dumpmemEi+0xbe>
		char mem_debug_str[30];
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
    5d14:	60 2f       	mov	r22, r16
    5d16:	c6 01       	movw	r24, r12
    5d18:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <_ZN4SRAM4readEa>
    5d1c:	28 2f       	mov	r18, r24
    5d1e:	33 27       	eor	r19, r19
    5d20:	27 fd       	sbrc	r18, 7
    5d22:	30 95       	com	r19
    5d24:	3f 93       	push	r19
    5d26:	8f 93       	push	r24
    5d28:	f6 01       	movw	r30, r12
    5d2a:	80 81       	ld	r24, Z
    5d2c:	91 81       	ldd	r25, Z+1	; 0x01
    5d2e:	80 0f       	add	r24, r16
    5d30:	91 1f       	adc	r25, r17
    5d32:	9f 93       	push	r25
    5d34:	8f 93       	push	r24
    5d36:	1f 93       	push	r17
    5d38:	0f 93       	push	r16
    5d3a:	7f 92       	push	r7
    5d3c:	6f 92       	push	r6
    5d3e:	ff 92       	push	r15
    5d40:	ef 92       	push	r14
    5d42:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <sprintf>
		serial.writestrln(mem_debug_str);
    5d46:	b7 01       	movw	r22, r14
    5d48:	c4 01       	movw	r24, r8
    5d4a:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <_ZN6Serial10writestrlnEPc>
}
void SRAM::dumpmem(int length){
	memory_management();
	int head=0,tail=length;
	if(length<=0){head=stack_head_offset; tail=stack_tail_offset;}
	for(int i=0;i<tail+head;i++){
    5d4e:	0f 5f       	subi	r16, 0xFF	; 255
    5d50:	1f 4f       	sbci	r17, 0xFF	; 255
    5d52:	0f b6       	in	r0, 0x3f	; 63
    5d54:	f8 94       	cli
    5d56:	de bf       	out	0x3e, r29	; 62
    5d58:	0f be       	out	0x3f, r0	; 63
    5d5a:	cd bf       	out	0x3d, r28	; 61
    5d5c:	0a 15       	cp	r16, r10
    5d5e:	1b 05       	cpc	r17, r11
    5d60:	cc f2       	brlt	.-78     	; 0x5d14 <_ZN4SRAM7dumpmemEi+0x70>
		char mem_debug_str[30];
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
		serial.writestrln(mem_debug_str);
	}
}
    5d62:	6e 96       	adiw	r28, 0x1e	; 30
    5d64:	0f b6       	in	r0, 0x3f	; 63
    5d66:	f8 94       	cli
    5d68:	de bf       	out	0x3e, r29	; 62
    5d6a:	0f be       	out	0x3f, r0	; 63
    5d6c:	cd bf       	out	0x3d, r28	; 61
    5d6e:	df 91       	pop	r29
    5d70:	cf 91       	pop	r28
    5d72:	1f 91       	pop	r17
    5d74:	0f 91       	pop	r16
    5d76:	ff 90       	pop	r15
    5d78:	ef 90       	pop	r14
    5d7a:	df 90       	pop	r13
    5d7c:	cf 90       	pop	r12
    5d7e:	bf 90       	pop	r11
    5d80:	af 90       	pop	r10
    5d82:	9f 90       	pop	r9
    5d84:	8f 90       	pop	r8
    5d86:	7f 90       	pop	r7
    5d88:	6f 90       	pop	r6
    5d8a:	08 95       	ret

00005d8c <_ZN6SerialC1Ev>:
    5d8c:	83 e3       	ldi	r24, 0x33	; 51
    5d8e:	89 b9       	out	0x09, r24	; 9
    5d90:	10 bc       	out	0x20, r1	; 32
    5d92:	86 e8       	ldi	r24, 0x86	; 134
    5d94:	80 bd       	out	0x20, r24	; 32
    5d96:	88 e1       	ldi	r24, 0x18	; 24
    5d98:	8a b9       	out	0x0a, r24	; 10
    5d9a:	08 95       	ret

00005d9c <_ZN6Serial5writeEc>:
    5d9c:	5d 9b       	sbis	0x0b, 5	; 11
    5d9e:	fe cf       	rjmp	.-4      	; 0x5d9c <_ZN6Serial5writeEc>
    5da0:	6c b9       	out	0x0c, r22	; 12
    5da2:	08 95       	ret

00005da4 <_ZN6Serial8writestrEPc>:
    5da4:	0f 93       	push	r16
    5da6:	1f 93       	push	r17
    5da8:	cf 93       	push	r28
    5daa:	df 93       	push	r29
    5dac:	8c 01       	movw	r16, r24
    5dae:	eb 01       	movw	r28, r22
    5db0:	68 81       	ld	r22, Y
    5db2:	66 23       	and	r22, r22
    5db4:	39 f0       	breq	.+14     	; 0x5dc4 <_ZN6Serial8writestrEPc+0x20>
    5db6:	21 96       	adiw	r28, 0x01	; 1
    5db8:	c8 01       	movw	r24, r16
    5dba:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN6Serial5writeEc>
    5dbe:	69 91       	ld	r22, Y+
    5dc0:	61 11       	cpse	r22, r1
    5dc2:	fa cf       	rjmp	.-12     	; 0x5db8 <_ZN6Serial8writestrEPc+0x14>
    5dc4:	df 91       	pop	r29
    5dc6:	cf 91       	pop	r28
    5dc8:	1f 91       	pop	r17
    5dca:	0f 91       	pop	r16
    5dcc:	08 95       	ret

00005dce <_ZN6Serial10writestrlnEPc>:
    5dce:	cf 93       	push	r28
    5dd0:	df 93       	push	r29
    5dd2:	ec 01       	movw	r28, r24
    5dd4:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN6Serial8writestrEPc>
    5dd8:	6d e0       	ldi	r22, 0x0D	; 13
    5dda:	ce 01       	movw	r24, r28
    5ddc:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN6Serial5writeEc>
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	08 95       	ret

00005de6 <_ZN5Utils10int2binstrEii>:
#include "utils.h"

char * Utils::int2binstr(int num,int strlength){
    5de6:	0f 93       	push	r16
    5de8:	1f 93       	push	r17
    5dea:	cf 93       	push	r28
    5dec:	df 93       	push	r29
    5dee:	06 2f       	mov	r16, r22
    5df0:	17 2f       	mov	r17, r23
    5df2:	ea 01       	movw	r28, r20
	char * str = (char*)malloc(strlength + 1);
    5df4:	ca 01       	movw	r24, r20
    5df6:	01 96       	adiw	r24, 0x01	; 1
    5df8:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
	if(!str) return NULL;
    5dfc:	00 97       	sbiw	r24, 0x00	; 0
    5dfe:	b9 f0       	breq	.+46     	; 0x5e2e <_ZN5Utils10int2binstrEii+0x48>
	str[strlength] = 0;
    5e00:	fc 01       	movw	r30, r24
    5e02:	ec 0f       	add	r30, r28
    5e04:	fd 1f       	adc	r31, r29
    5e06:	10 82       	st	Z, r1

	// type punning because signed shift is implementation-defined
	unsigned u = *(unsigned *)&num;
    5e08:	20 2f       	mov	r18, r16
    5e0a:	31 2f       	mov	r19, r17
	for(; strlength--; u >>= 1)
    5e0c:	be 01       	movw	r22, r28
    5e0e:	61 50       	subi	r22, 0x01	; 1
    5e10:	71 09       	sbc	r23, r1
    5e12:	cd 2b       	or	r28, r29
    5e14:	71 f0       	breq	.+28     	; 0x5e32 <_ZN5Utils10int2binstrEii+0x4c>
	str[strlength] = u & 1 ? '1' : '0';
    5e16:	20 ff       	sbrs	r18, 0
    5e18:	02 c0       	rjmp	.+4      	; 0x5e1e <_ZN5Utils10int2binstrEii+0x38>
    5e1a:	41 e3       	ldi	r20, 0x31	; 49
    5e1c:	01 c0       	rjmp	.+2      	; 0x5e20 <_ZN5Utils10int2binstrEii+0x3a>
    5e1e:	40 e3       	ldi	r20, 0x30	; 48
    5e20:	42 93       	st	-Z, r20
	if(!str) return NULL;
	str[strlength] = 0;

	// type punning because signed shift is implementation-defined
	unsigned u = *(unsigned *)&num;
	for(; strlength--; u >>= 1)
    5e22:	36 95       	lsr	r19
    5e24:	27 95       	ror	r18
    5e26:	61 50       	subi	r22, 0x01	; 1
    5e28:	71 09       	sbc	r23, r1
    5e2a:	a8 f7       	brcc	.-22     	; 0x5e16 <_ZN5Utils10int2binstrEii+0x30>
    5e2c:	02 c0       	rjmp	.+4      	; 0x5e32 <_ZN5Utils10int2binstrEii+0x4c>
#include "utils.h"

char * Utils::int2binstr(int num,int strlength){
	char * str = (char*)malloc(strlength + 1);
	if(!str) return NULL;
    5e2e:	80 e0       	ldi	r24, 0x00	; 0
    5e30:	90 e0       	ldi	r25, 0x00	; 0
	unsigned u = *(unsigned *)&num;
	for(; strlength--; u >>= 1)
	str[strlength] = u & 1 ? '1' : '0';

	return str;
}
    5e32:	df 91       	pop	r29
    5e34:	cf 91       	pop	r28
    5e36:	1f 91       	pop	r17
    5e38:	0f 91       	pop	r16
    5e3a:	08 95       	ret

00005e3c <_ZN5Utils10str2intarrEPc>:
char* Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  Utils::str2intarr(char* c){
    5e3c:	cf 92       	push	r12
    5e3e:	df 92       	push	r13
    5e40:	ef 92       	push	r14
    5e42:	ff 92       	push	r15
    5e44:	0f 93       	push	r16
    5e46:	1f 93       	push	r17
    5e48:	cf 93       	push	r28
    5e4a:	df 93       	push	r29
    5e4c:	d6 2f       	mov	r29, r22
    5e4e:	c7 2f       	mov	r28, r23
    5e50:	e6 2f       	mov	r30, r22
    5e52:	f7 2f       	mov	r31, r23
	int c_length=0;
    5e54:	80 e0       	ldi	r24, 0x00	; 0
    5e56:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    5e58:	21 91       	ld	r18, Z+
    5e5a:	2f 3f       	cpi	r18, 0xFF	; 255
    5e5c:	89 f4       	brne	.+34     	; 0x5e80 <_ZN5Utils10str2intarrEPc+0x44>
    5e5e:	df 01       	movw	r26, r30
    5e60:	12 97       	sbiw	r26, 0x02	; 2
    5e62:	4c 91       	ld	r20, X
    5e64:	4f 3f       	cpi	r20, 0xFF	; 255
    5e66:	61 f4       	brne	.+24     	; 0x5e80 <_ZN5Utils10str2intarrEPc+0x44>
    5e68:	11 97       	sbiw	r26, 0x01	; 1
    5e6a:	4c 91       	ld	r20, X
    5e6c:	4f 3f       	cpi	r20, 0xFF	; 255
    5e6e:	41 f4       	brne	.+16     	; 0x5e80 <_ZN5Utils10str2intarrEPc+0x44>
    5e70:	11 97       	sbiw	r26, 0x01	; 1
    5e72:	4c 91       	ld	r20, X
    5e74:	4f 3f       	cpi	r20, 0xFF	; 255
    5e76:	21 f4       	brne	.+8      	; 0x5e80 <_ZN5Utils10str2intarrEPc+0x44>
    5e78:	11 97       	sbiw	r26, 0x01	; 1
    5e7a:	2c 91       	ld	r18, X
    5e7c:	2f 3f       	cpi	r18, 0xFF	; 255
    5e7e:	11 f0       	breq	.+4      	; 0x5e84 <_ZN5Utils10str2intarrEPc+0x48>
    5e80:	01 96       	adiw	r24, 0x01	; 1
    5e82:	ea cf       	rjmp	.-44     	; 0x5e58 <_ZN5Utils10str2intarrEPc+0x1c>
    5e84:	8c 01       	movw	r16, r24
    5e86:	04 50       	subi	r16, 0x04	; 4
    5e88:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    5e8a:	6c 01       	movw	r12, r24
    5e8c:	2f ef       	ldi	r18, 0xFF	; 255
    5e8e:	c2 1a       	sub	r12, r18
    5e90:	d2 0a       	sbc	r13, r18
    5e92:	76 01       	movw	r14, r12
    5e94:	ee 0c       	add	r14, r14
    5e96:	ff 1c       	adc	r15, r15
    5e98:	c7 01       	movw	r24, r14
    5e9a:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    5e9e:	10 16       	cp	r1, r16
    5ea0:	11 06       	cpc	r1, r17
    5ea2:	74 f4       	brge	.+28     	; 0x5ec0 <_ZN5Utils10str2intarrEPc+0x84>
    5ea4:	dc 01       	movw	r26, r24
    5ea6:	ed 2f       	mov	r30, r29
    5ea8:	fc 2f       	mov	r31, r28
    5eaa:	20 e0       	ldi	r18, 0x00	; 0
    5eac:	30 e0       	ldi	r19, 0x00	; 0
    5eae:	41 91       	ld	r20, Z+
    5eb0:	50 e0       	ldi	r21, 0x00	; 0
    5eb2:	4d 93       	st	X+, r20
    5eb4:	5d 93       	st	X+, r21
    5eb6:	2f 5f       	subi	r18, 0xFF	; 255
    5eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eba:	20 17       	cp	r18, r16
    5ebc:	31 07       	cpc	r19, r17
    5ebe:	bc f3       	brlt	.-18     	; 0x5eae <_ZN5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    5ec0:	0c 15       	cp	r16, r12
    5ec2:	1d 05       	cpc	r17, r13
    5ec4:	7c f4       	brge	.+30     	; 0x5ee4 <_ZN5Utils10str2intarrEPc+0xa8>
    5ec6:	f7 01       	movw	r30, r14
    5ec8:	3a 97       	sbiw	r30, 0x0a	; 10
    5eca:	e8 0f       	add	r30, r24
    5ecc:	f9 1f       	adc	r31, r25
    5ece:	25 e0       	ldi	r18, 0x05	; 5
    5ed0:	30 e0       	ldi	r19, 0x00	; 0
    5ed2:	4f ef       	ldi	r20, 0xFF	; 255
    5ed4:	50 e0       	ldi	r21, 0x00	; 0
    5ed6:	41 93       	st	Z+, r20
    5ed8:	51 93       	st	Z+, r21
    5eda:	21 50       	subi	r18, 0x01	; 1
    5edc:	31 09       	sbc	r19, r1
    5ede:	21 15       	cp	r18, r1
    5ee0:	31 05       	cpc	r19, r1
    5ee2:	c9 f7       	brne	.-14     	; 0x5ed6 <_ZN5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    5ee4:	df 91       	pop	r29
    5ee6:	cf 91       	pop	r28
    5ee8:	1f 91       	pop	r17
    5eea:	0f 91       	pop	r16
    5eec:	ff 90       	pop	r15
    5eee:	ef 90       	pop	r14
    5ef0:	df 90       	pop	r13
    5ef2:	cf 90       	pop	r12
    5ef4:	08 95       	ret

00005ef6 <_ZN5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* Utils::int2str(int dec){
    5ef6:	0f 93       	push	r16
    5ef8:	1f 93       	push	r17
    5efa:	cf 93       	push	r28
    5efc:	df 93       	push	r29
    5efe:	cd b7       	in	r28, 0x3d	; 61
    5f00:	de b7       	in	r29, 0x3e	; 62
    5f02:	2a 97       	sbiw	r28, 0x0a	; 10
    5f04:	0f b6       	in	r0, 0x3f	; 63
    5f06:	f8 94       	cli
    5f08:	de bf       	out	0x3e, r29	; 62
    5f0a:	0f be       	out	0x3f, r0	; 63
    5f0c:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	sprintf(str,"%d",dec);
    5f0e:	7f 93       	push	r23
    5f10:	6f 93       	push	r22
    5f12:	88 e4       	ldi	r24, 0x48	; 72
    5f14:	91 e0       	ldi	r25, 0x01	; 1
    5f16:	9f 93       	push	r25
    5f18:	8f 93       	push	r24
    5f1a:	8e 01       	movw	r16, r28
    5f1c:	0f 5f       	subi	r16, 0xFF	; 255
    5f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    5f20:	1f 93       	push	r17
    5f22:	0f 93       	push	r16
    5f24:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <sprintf>
	return str;
    5f28:	0f 90       	pop	r0
    5f2a:	0f 90       	pop	r0
    5f2c:	0f 90       	pop	r0
    5f2e:	0f 90       	pop	r0
    5f30:	0f 90       	pop	r0
    5f32:	0f 90       	pop	r0
}
    5f34:	c8 01       	movw	r24, r16
    5f36:	2a 96       	adiw	r28, 0x0a	; 10
    5f38:	0f b6       	in	r0, 0x3f	; 63
    5f3a:	f8 94       	cli
    5f3c:	de bf       	out	0x3e, r29	; 62
    5f3e:	0f be       	out	0x3f, r0	; 63
    5f40:	cd bf       	out	0x3d, r28	; 61
    5f42:	df 91       	pop	r29
    5f44:	cf 91       	pop	r28
    5f46:	1f 91       	pop	r17
    5f48:	0f 91       	pop	r16
    5f4a:	08 95       	ret

00005f4c <_ZN5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    5f4c:	61 15       	cp	r22, r1
    5f4e:	71 05       	cpc	r23, r1
    5f50:	51 f0       	breq	.+20     	; 0x5f66 <_ZN5Utils5delayEi+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5f52:	86 e6       	ldi	r24, 0x66	; 102
    5f54:	9e e0       	ldi	r25, 0x0E	; 14
    5f56:	01 97       	sbiw	r24, 0x01	; 1
    5f58:	f1 f7       	brne	.-4      	; 0x5f56 <_ZN5Utils5delayEi+0xa>
    5f5a:	00 00       	nop
    5f5c:	61 50       	subi	r22, 0x01	; 1
    5f5e:	71 09       	sbc	r23, r1
    5f60:	61 15       	cp	r22, r1
    5f62:	71 05       	cpc	r23, r1
    5f64:	b1 f7       	brne	.-20     	; 0x5f52 <_ZN5Utils5delayEi+0x6>
}
    5f66:	08 95       	ret

00005f68 <_ZN5Utils10custom_powEfi>:
float Utils::custom_pow(float base,int exp){
    5f68:	cf 92       	push	r12
    5f6a:	df 92       	push	r13
    5f6c:	ef 92       	push	r14
    5f6e:	ff 92       	push	r15
    5f70:	0f 93       	push	r16
    5f72:	1f 93       	push	r17
    5f74:	cf 93       	push	r28
    5f76:	df 93       	push	r29
    5f78:	6a 01       	movw	r12, r20
    5f7a:	7b 01       	movw	r14, r22
    5f7c:	89 01       	movw	r16, r18
	float result=1; for(int i=0;i<exp;i++) result*=base;
    5f7e:	12 16       	cp	r1, r18
    5f80:	13 06       	cpc	r1, r19
    5f82:	7c f4       	brge	.+30     	; 0x5fa2 <_ZN5Utils10custom_powEfi+0x3a>
    5f84:	c0 e0       	ldi	r28, 0x00	; 0
    5f86:	d0 e0       	ldi	r29, 0x00	; 0
    5f88:	60 e0       	ldi	r22, 0x00	; 0
    5f8a:	70 e0       	ldi	r23, 0x00	; 0
    5f8c:	80 e8       	ldi	r24, 0x80	; 128
    5f8e:	9f e3       	ldi	r25, 0x3F	; 63
    5f90:	a7 01       	movw	r20, r14
    5f92:	96 01       	movw	r18, r12
    5f94:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__mulsf3>
    5f98:	21 96       	adiw	r28, 0x01	; 1
    5f9a:	c0 17       	cp	r28, r16
    5f9c:	d1 07       	cpc	r29, r17
    5f9e:	c1 f7       	brne	.-16     	; 0x5f90 <_ZN5Utils10custom_powEfi+0x28>
    5fa0:	04 c0       	rjmp	.+8      	; 0x5faa <_ZN5Utils10custom_powEfi+0x42>
    5fa2:	60 e0       	ldi	r22, 0x00	; 0
    5fa4:	70 e0       	ldi	r23, 0x00	; 0
    5fa6:	80 e8       	ldi	r24, 0x80	; 128
    5fa8:	9f e3       	ldi	r25, 0x3F	; 63
	return result;
}
    5faa:	df 91       	pop	r29
    5fac:	cf 91       	pop	r28
    5fae:	1f 91       	pop	r17
    5fb0:	0f 91       	pop	r16
    5fb2:	ff 90       	pop	r15
    5fb4:	ef 90       	pop	r14
    5fb6:	df 90       	pop	r13
    5fb8:	cf 90       	pop	r12
    5fba:	08 95       	ret

00005fbc <_ZN5Utils17arrint_shiftrightEPiii>:
int * Utils::arrint_shiftright(int * arr,int newelem,int array_length){
    5fbc:	cf 92       	push	r12
    5fbe:	df 92       	push	r13
    5fc0:	ef 92       	push	r14
    5fc2:	ff 92       	push	r15
    5fc4:	0f 93       	push	r16
    5fc6:	1f 93       	push	r17
    5fc8:	cf 93       	push	r28
    5fca:	df 93       	push	r29
    5fcc:	7b 01       	movw	r14, r22
    5fce:	6a 01       	movw	r12, r20
    5fd0:	e9 01       	movw	r28, r18
	int * new_array=(int*)malloc(sizeof(int)*array_length);
    5fd2:	89 01       	movw	r16, r18
    5fd4:	00 0f       	add	r16, r16
    5fd6:	11 1f       	adc	r17, r17
    5fd8:	c8 01       	movw	r24, r16
    5fda:	0e 94 5d 34 	call	0x68ba	; 0x68ba <malloc>
	int new_array_index=0;
	new_array[0]=newelem;
    5fde:	fc 01       	movw	r30, r24
    5fe0:	d1 82       	std	Z+1, r13	; 0x01
    5fe2:	c0 82       	st	Z, r12
	for(int i=0;i<array_length;i++) new_array[++new_array_index]=arr[i];
    5fe4:	1c 16       	cp	r1, r28
    5fe6:	1d 06       	cpc	r1, r29
    5fe8:	6c f4       	brge	.+26     	; 0x6004 <_ZN5Utils17arrint_shiftrightEPiii+0x48>
    5fea:	f7 01       	movw	r30, r14
    5fec:	dc 01       	movw	r26, r24
    5fee:	12 96       	adiw	r26, 0x02	; 2
    5ff0:	b7 01       	movw	r22, r14
    5ff2:	60 0f       	add	r22, r16
    5ff4:	71 1f       	adc	r23, r17
    5ff6:	21 91       	ld	r18, Z+
    5ff8:	31 91       	ld	r19, Z+
    5ffa:	2d 93       	st	X+, r18
    5ffc:	3d 93       	st	X+, r19
    5ffe:	e6 17       	cp	r30, r22
    6000:	f7 07       	cpc	r31, r23
    6002:	c9 f7       	brne	.-14     	; 0x5ff6 <_ZN5Utils17arrint_shiftrightEPiii+0x3a>
	return new_array;
    6004:	df 91       	pop	r29
    6006:	cf 91       	pop	r28
    6008:	1f 91       	pop	r17
    600a:	0f 91       	pop	r16
    600c:	ff 90       	pop	r15
    600e:	ef 90       	pop	r14
    6010:	df 90       	pop	r13
    6012:	cf 90       	pop	r12
    6014:	08 95       	ret

00006016 <acos>:
    6016:	9f 93       	push	r25
    6018:	9f 77       	andi	r25, 0x7F	; 127
    601a:	a6 d1       	rcall	.+844    	; 0x6368 <__fp_arccos>
    601c:	0f 90       	pop	r0
    601e:	00 20       	and	r0, r0
    6020:	3a f4       	brpl	.+14     	; 0x6030 <acos+0x1a>
    6022:	90 58       	subi	r25, 0x80	; 128
    6024:	a2 ea       	ldi	r26, 0xA2	; 162
    6026:	2a ed       	ldi	r18, 0xDA	; 218
    6028:	3f e0       	ldi	r19, 0x0F	; 15
    602a:	49 e4       	ldi	r20, 0x49	; 73
    602c:	50 e4       	ldi	r21, 0x40	; 64
    602e:	13 d0       	rcall	.+38     	; 0x6056 <__addsf3x>
    6030:	3e c2       	rjmp	.+1148   	; 0x64ae <__fp_round>

00006032 <__subsf3>:
    6032:	50 58       	subi	r21, 0x80	; 128

00006034 <__addsf3>:
    6034:	bb 27       	eor	r27, r27
    6036:	aa 27       	eor	r26, r26
    6038:	0e d0       	rcall	.+28     	; 0x6056 <__addsf3x>
    603a:	39 c2       	rjmp	.+1138   	; 0x64ae <__fp_round>
    603c:	02 d2       	rcall	.+1028   	; 0x6442 <__fp_pscA>
    603e:	30 f0       	brcs	.+12     	; 0x604c <__addsf3+0x18>
    6040:	07 d2       	rcall	.+1038   	; 0x6450 <__fp_pscB>
    6042:	20 f0       	brcs	.+8      	; 0x604c <__addsf3+0x18>
    6044:	31 f4       	brne	.+12     	; 0x6052 <__addsf3+0x1e>
    6046:	9f 3f       	cpi	r25, 0xFF	; 255
    6048:	11 f4       	brne	.+4      	; 0x604e <__addsf3+0x1a>
    604a:	1e f4       	brtc	.+6      	; 0x6052 <__addsf3+0x1e>
    604c:	d2 c1       	rjmp	.+932    	; 0x63f2 <__fp_nan>
    604e:	0e f4       	brtc	.+2      	; 0x6052 <__addsf3+0x1e>
    6050:	e0 95       	com	r30
    6052:	e7 fb       	bst	r30, 7
    6054:	c8 c1       	rjmp	.+912    	; 0x63e6 <__fp_inf>

00006056 <__addsf3x>:
    6056:	e9 2f       	mov	r30, r25
    6058:	4c d2       	rcall	.+1176   	; 0x64f2 <__fp_split3>
    605a:	80 f3       	brcs	.-32     	; 0x603c <__addsf3+0x8>
    605c:	ba 17       	cp	r27, r26
    605e:	62 07       	cpc	r22, r18
    6060:	73 07       	cpc	r23, r19
    6062:	84 07       	cpc	r24, r20
    6064:	95 07       	cpc	r25, r21
    6066:	18 f0       	brcs	.+6      	; 0x606e <__addsf3x+0x18>
    6068:	71 f4       	brne	.+28     	; 0x6086 <__addsf3x+0x30>
    606a:	9e f5       	brtc	.+102    	; 0x60d2 <__addsf3x+0x7c>
    606c:	64 c2       	rjmp	.+1224   	; 0x6536 <__fp_zero>
    606e:	0e f4       	brtc	.+2      	; 0x6072 <__addsf3x+0x1c>
    6070:	e0 95       	com	r30
    6072:	0b 2e       	mov	r0, r27
    6074:	ba 2f       	mov	r27, r26
    6076:	a0 2d       	mov	r26, r0
    6078:	0b 01       	movw	r0, r22
    607a:	b9 01       	movw	r22, r18
    607c:	90 01       	movw	r18, r0
    607e:	0c 01       	movw	r0, r24
    6080:	ca 01       	movw	r24, r20
    6082:	a0 01       	movw	r20, r0
    6084:	11 24       	eor	r1, r1
    6086:	ff 27       	eor	r31, r31
    6088:	59 1b       	sub	r21, r25
    608a:	99 f0       	breq	.+38     	; 0x60b2 <__addsf3x+0x5c>
    608c:	59 3f       	cpi	r21, 0xF9	; 249
    608e:	50 f4       	brcc	.+20     	; 0x60a4 <__addsf3x+0x4e>
    6090:	50 3e       	cpi	r21, 0xE0	; 224
    6092:	68 f1       	brcs	.+90     	; 0x60ee <__addsf3x+0x98>
    6094:	1a 16       	cp	r1, r26
    6096:	f0 40       	sbci	r31, 0x00	; 0
    6098:	a2 2f       	mov	r26, r18
    609a:	23 2f       	mov	r18, r19
    609c:	34 2f       	mov	r19, r20
    609e:	44 27       	eor	r20, r20
    60a0:	58 5f       	subi	r21, 0xF8	; 248
    60a2:	f3 cf       	rjmp	.-26     	; 0x608a <__addsf3x+0x34>
    60a4:	46 95       	lsr	r20
    60a6:	37 95       	ror	r19
    60a8:	27 95       	ror	r18
    60aa:	a7 95       	ror	r26
    60ac:	f0 40       	sbci	r31, 0x00	; 0
    60ae:	53 95       	inc	r21
    60b0:	c9 f7       	brne	.-14     	; 0x60a4 <__addsf3x+0x4e>
    60b2:	7e f4       	brtc	.+30     	; 0x60d2 <__addsf3x+0x7c>
    60b4:	1f 16       	cp	r1, r31
    60b6:	ba 0b       	sbc	r27, r26
    60b8:	62 0b       	sbc	r22, r18
    60ba:	73 0b       	sbc	r23, r19
    60bc:	84 0b       	sbc	r24, r20
    60be:	ba f0       	brmi	.+46     	; 0x60ee <__addsf3x+0x98>
    60c0:	91 50       	subi	r25, 0x01	; 1
    60c2:	a1 f0       	breq	.+40     	; 0x60ec <__addsf3x+0x96>
    60c4:	ff 0f       	add	r31, r31
    60c6:	bb 1f       	adc	r27, r27
    60c8:	66 1f       	adc	r22, r22
    60ca:	77 1f       	adc	r23, r23
    60cc:	88 1f       	adc	r24, r24
    60ce:	c2 f7       	brpl	.-16     	; 0x60c0 <__addsf3x+0x6a>
    60d0:	0e c0       	rjmp	.+28     	; 0x60ee <__addsf3x+0x98>
    60d2:	ba 0f       	add	r27, r26
    60d4:	62 1f       	adc	r22, r18
    60d6:	73 1f       	adc	r23, r19
    60d8:	84 1f       	adc	r24, r20
    60da:	48 f4       	brcc	.+18     	; 0x60ee <__addsf3x+0x98>
    60dc:	87 95       	ror	r24
    60de:	77 95       	ror	r23
    60e0:	67 95       	ror	r22
    60e2:	b7 95       	ror	r27
    60e4:	f7 95       	ror	r31
    60e6:	9e 3f       	cpi	r25, 0xFE	; 254
    60e8:	08 f0       	brcs	.+2      	; 0x60ec <__addsf3x+0x96>
    60ea:	b3 cf       	rjmp	.-154    	; 0x6052 <__addsf3+0x1e>
    60ec:	93 95       	inc	r25
    60ee:	88 0f       	add	r24, r24
    60f0:	08 f0       	brcs	.+2      	; 0x60f4 <__addsf3x+0x9e>
    60f2:	99 27       	eor	r25, r25
    60f4:	ee 0f       	add	r30, r30
    60f6:	97 95       	ror	r25
    60f8:	87 95       	ror	r24
    60fa:	08 95       	ret

000060fc <atan>:
    60fc:	df 93       	push	r29
    60fe:	dd 27       	eor	r29, r29
    6100:	b9 2f       	mov	r27, r25
    6102:	bf 77       	andi	r27, 0x7F	; 127
    6104:	40 e8       	ldi	r20, 0x80	; 128
    6106:	5f e3       	ldi	r21, 0x3F	; 63
    6108:	16 16       	cp	r1, r22
    610a:	17 06       	cpc	r1, r23
    610c:	48 07       	cpc	r20, r24
    610e:	5b 07       	cpc	r21, r27
    6110:	10 f4       	brcc	.+4      	; 0x6116 <atan+0x1a>
    6112:	d9 2f       	mov	r29, r25
    6114:	1b d2       	rcall	.+1078   	; 0x654c <inverse>
    6116:	9f 93       	push	r25
    6118:	8f 93       	push	r24
    611a:	7f 93       	push	r23
    611c:	6f 93       	push	r22
    611e:	76 d3       	rcall	.+1772   	; 0x680c <square>
    6120:	ee ec       	ldi	r30, 0xCE	; 206
    6122:	f0 e0       	ldi	r31, 0x00	; 0
    6124:	69 d1       	rcall	.+722    	; 0x63f8 <__fp_powser>
    6126:	c3 d1       	rcall	.+902    	; 0x64ae <__fp_round>
    6128:	2f 91       	pop	r18
    612a:	3f 91       	pop	r19
    612c:	4f 91       	pop	r20
    612e:	5f 91       	pop	r21
    6130:	ce d2       	rcall	.+1436   	; 0x66ce <__mulsf3x>
    6132:	dd 23       	and	r29, r29
    6134:	49 f0       	breq	.+18     	; 0x6148 <atan+0x4c>
    6136:	90 58       	subi	r25, 0x80	; 128
    6138:	a2 ea       	ldi	r26, 0xA2	; 162
    613a:	2a ed       	ldi	r18, 0xDA	; 218
    613c:	3f e0       	ldi	r19, 0x0F	; 15
    613e:	49 ec       	ldi	r20, 0xC9	; 201
    6140:	5f e3       	ldi	r21, 0x3F	; 63
    6142:	d0 78       	andi	r29, 0x80	; 128
    6144:	5d 27       	eor	r21, r29
    6146:	87 df       	rcall	.-242    	; 0x6056 <__addsf3x>
    6148:	df 91       	pop	r29
    614a:	b1 c1       	rjmp	.+866    	; 0x64ae <__fp_round>

0000614c <__cmpsf2>:
    614c:	28 d1       	rcall	.+592    	; 0x639e <__fp_cmp>
    614e:	08 f4       	brcc	.+2      	; 0x6152 <__cmpsf2+0x6>
    6150:	81 e0       	ldi	r24, 0x01	; 1
    6152:	08 95       	ret

00006154 <cos>:
    6154:	85 d1       	rcall	.+778    	; 0x6460 <__fp_rempio2>
    6156:	e3 95       	inc	r30
    6158:	bb c1       	rjmp	.+886    	; 0x64d0 <__fp_sinus>

0000615a <__divsf3>:
    615a:	0c d0       	rcall	.+24     	; 0x6174 <__divsf3x>
    615c:	a8 c1       	rjmp	.+848    	; 0x64ae <__fp_round>
    615e:	78 d1       	rcall	.+752    	; 0x6450 <__fp_pscB>
    6160:	40 f0       	brcs	.+16     	; 0x6172 <__divsf3+0x18>
    6162:	6f d1       	rcall	.+734    	; 0x6442 <__fp_pscA>
    6164:	30 f0       	brcs	.+12     	; 0x6172 <__divsf3+0x18>
    6166:	21 f4       	brne	.+8      	; 0x6170 <__divsf3+0x16>
    6168:	5f 3f       	cpi	r21, 0xFF	; 255
    616a:	19 f0       	breq	.+6      	; 0x6172 <__divsf3+0x18>
    616c:	3c c1       	rjmp	.+632    	; 0x63e6 <__fp_inf>
    616e:	51 11       	cpse	r21, r1
    6170:	e3 c1       	rjmp	.+966    	; 0x6538 <__fp_szero>
    6172:	3f c1       	rjmp	.+638    	; 0x63f2 <__fp_nan>

00006174 <__divsf3x>:
    6174:	be d1       	rcall	.+892    	; 0x64f2 <__fp_split3>
    6176:	98 f3       	brcs	.-26     	; 0x615e <__divsf3+0x4>

00006178 <__divsf3_pse>:
    6178:	99 23       	and	r25, r25
    617a:	c9 f3       	breq	.-14     	; 0x616e <__divsf3+0x14>
    617c:	55 23       	and	r21, r21
    617e:	b1 f3       	breq	.-20     	; 0x616c <__divsf3+0x12>
    6180:	95 1b       	sub	r25, r21
    6182:	55 0b       	sbc	r21, r21
    6184:	bb 27       	eor	r27, r27
    6186:	aa 27       	eor	r26, r26
    6188:	62 17       	cp	r22, r18
    618a:	73 07       	cpc	r23, r19
    618c:	84 07       	cpc	r24, r20
    618e:	38 f0       	brcs	.+14     	; 0x619e <__divsf3_pse+0x26>
    6190:	9f 5f       	subi	r25, 0xFF	; 255
    6192:	5f 4f       	sbci	r21, 0xFF	; 255
    6194:	22 0f       	add	r18, r18
    6196:	33 1f       	adc	r19, r19
    6198:	44 1f       	adc	r20, r20
    619a:	aa 1f       	adc	r26, r26
    619c:	a9 f3       	breq	.-22     	; 0x6188 <__divsf3_pse+0x10>
    619e:	33 d0       	rcall	.+102    	; 0x6206 <__divsf3_pse+0x8e>
    61a0:	0e 2e       	mov	r0, r30
    61a2:	3a f0       	brmi	.+14     	; 0x61b2 <__divsf3_pse+0x3a>
    61a4:	e0 e8       	ldi	r30, 0x80	; 128
    61a6:	30 d0       	rcall	.+96     	; 0x6208 <__divsf3_pse+0x90>
    61a8:	91 50       	subi	r25, 0x01	; 1
    61aa:	50 40       	sbci	r21, 0x00	; 0
    61ac:	e6 95       	lsr	r30
    61ae:	00 1c       	adc	r0, r0
    61b0:	ca f7       	brpl	.-14     	; 0x61a4 <__divsf3_pse+0x2c>
    61b2:	29 d0       	rcall	.+82     	; 0x6206 <__divsf3_pse+0x8e>
    61b4:	fe 2f       	mov	r31, r30
    61b6:	27 d0       	rcall	.+78     	; 0x6206 <__divsf3_pse+0x8e>
    61b8:	66 0f       	add	r22, r22
    61ba:	77 1f       	adc	r23, r23
    61bc:	88 1f       	adc	r24, r24
    61be:	bb 1f       	adc	r27, r27
    61c0:	26 17       	cp	r18, r22
    61c2:	37 07       	cpc	r19, r23
    61c4:	48 07       	cpc	r20, r24
    61c6:	ab 07       	cpc	r26, r27
    61c8:	b0 e8       	ldi	r27, 0x80	; 128
    61ca:	09 f0       	breq	.+2      	; 0x61ce <__divsf3_pse+0x56>
    61cc:	bb 0b       	sbc	r27, r27
    61ce:	80 2d       	mov	r24, r0
    61d0:	bf 01       	movw	r22, r30
    61d2:	ff 27       	eor	r31, r31
    61d4:	93 58       	subi	r25, 0x83	; 131
    61d6:	5f 4f       	sbci	r21, 0xFF	; 255
    61d8:	2a f0       	brmi	.+10     	; 0x61e4 <__divsf3_pse+0x6c>
    61da:	9e 3f       	cpi	r25, 0xFE	; 254
    61dc:	51 05       	cpc	r21, r1
    61de:	68 f0       	brcs	.+26     	; 0x61fa <__divsf3_pse+0x82>
    61e0:	02 c1       	rjmp	.+516    	; 0x63e6 <__fp_inf>
    61e2:	aa c1       	rjmp	.+852    	; 0x6538 <__fp_szero>
    61e4:	5f 3f       	cpi	r21, 0xFF	; 255
    61e6:	ec f3       	brlt	.-6      	; 0x61e2 <__divsf3_pse+0x6a>
    61e8:	98 3e       	cpi	r25, 0xE8	; 232
    61ea:	dc f3       	brlt	.-10     	; 0x61e2 <__divsf3_pse+0x6a>
    61ec:	86 95       	lsr	r24
    61ee:	77 95       	ror	r23
    61f0:	67 95       	ror	r22
    61f2:	b7 95       	ror	r27
    61f4:	f7 95       	ror	r31
    61f6:	9f 5f       	subi	r25, 0xFF	; 255
    61f8:	c9 f7       	brne	.-14     	; 0x61ec <__divsf3_pse+0x74>
    61fa:	88 0f       	add	r24, r24
    61fc:	91 1d       	adc	r25, r1
    61fe:	96 95       	lsr	r25
    6200:	87 95       	ror	r24
    6202:	97 f9       	bld	r25, 7
    6204:	08 95       	ret
    6206:	e1 e0       	ldi	r30, 0x01	; 1
    6208:	66 0f       	add	r22, r22
    620a:	77 1f       	adc	r23, r23
    620c:	88 1f       	adc	r24, r24
    620e:	bb 1f       	adc	r27, r27
    6210:	62 17       	cp	r22, r18
    6212:	73 07       	cpc	r23, r19
    6214:	84 07       	cpc	r24, r20
    6216:	ba 07       	cpc	r27, r26
    6218:	20 f0       	brcs	.+8      	; 0x6222 <__divsf3_pse+0xaa>
    621a:	62 1b       	sub	r22, r18
    621c:	73 0b       	sbc	r23, r19
    621e:	84 0b       	sbc	r24, r20
    6220:	ba 0b       	sbc	r27, r26
    6222:	ee 1f       	adc	r30, r30
    6224:	88 f7       	brcc	.-30     	; 0x6208 <__divsf3_pse+0x90>
    6226:	e0 95       	com	r30
    6228:	08 95       	ret
    622a:	19 f4       	brne	.+6      	; 0x6232 <__divsf3_pse+0xba>
    622c:	0e f0       	brts	.+2      	; 0x6230 <__divsf3_pse+0xb8>
    622e:	db c0       	rjmp	.+438    	; 0x63e6 <__fp_inf>
    6230:	82 c1       	rjmp	.+772    	; 0x6536 <__fp_zero>
    6232:	df c0       	rjmp	.+446    	; 0x63f2 <__fp_nan>

00006234 <exp>:
    6234:	66 d1       	rcall	.+716    	; 0x6502 <__fp_splitA>
    6236:	c8 f3       	brcs	.-14     	; 0x622a <__divsf3_pse+0xb2>
    6238:	96 38       	cpi	r25, 0x86	; 134
    623a:	c0 f7       	brcc	.-16     	; 0x622c <__divsf3_pse+0xb4>
    623c:	07 f8       	bld	r0, 7
    623e:	0f 92       	push	r0
    6240:	e8 94       	clt
    6242:	2b e3       	ldi	r18, 0x3B	; 59
    6244:	3a ea       	ldi	r19, 0xAA	; 170
    6246:	48 eb       	ldi	r20, 0xB8	; 184
    6248:	5f e7       	ldi	r21, 0x7F	; 127
    624a:	43 d2       	rcall	.+1158   	; 0x66d2 <__mulsf3_pse>
    624c:	0f 92       	push	r0
    624e:	0f 92       	push	r0
    6250:	0f 92       	push	r0
    6252:	4d b7       	in	r20, 0x3d	; 61
    6254:	5e b7       	in	r21, 0x3e	; 62
    6256:	0f 92       	push	r0
    6258:	fb d1       	rcall	.+1014   	; 0x6650 <modf>
    625a:	eb ef       	ldi	r30, 0xFB	; 251
    625c:	f0 e0       	ldi	r31, 0x00	; 0
    625e:	cc d0       	rcall	.+408    	; 0x63f8 <__fp_powser>
    6260:	4f 91       	pop	r20
    6262:	5f 91       	pop	r21
    6264:	ef 91       	pop	r30
    6266:	ff 91       	pop	r31
    6268:	e5 95       	asr	r30
    626a:	ee 1f       	adc	r30, r30
    626c:	ff 1f       	adc	r31, r31
    626e:	49 f0       	breq	.+18     	; 0x6282 <exp+0x4e>
    6270:	fe 57       	subi	r31, 0x7E	; 126
    6272:	e0 68       	ori	r30, 0x80	; 128
    6274:	44 27       	eor	r20, r20
    6276:	ee 0f       	add	r30, r30
    6278:	44 1f       	adc	r20, r20
    627a:	fa 95       	dec	r31
    627c:	e1 f7       	brne	.-8      	; 0x6276 <exp+0x42>
    627e:	41 95       	neg	r20
    6280:	55 0b       	sbc	r21, r21
    6282:	6d d1       	rcall	.+730    	; 0x655e <ldexp>
    6284:	0f 90       	pop	r0
    6286:	07 fe       	sbrs	r0, 7
    6288:	61 c1       	rjmp	.+706    	; 0x654c <inverse>
    628a:	08 95       	ret

0000628c <__fixsfsi>:
    628c:	04 d0       	rcall	.+8      	; 0x6296 <__fixunssfsi>
    628e:	68 94       	set
    6290:	b1 11       	cpse	r27, r1
    6292:	52 c1       	rjmp	.+676    	; 0x6538 <__fp_szero>
    6294:	08 95       	ret

00006296 <__fixunssfsi>:
    6296:	35 d1       	rcall	.+618    	; 0x6502 <__fp_splitA>
    6298:	88 f0       	brcs	.+34     	; 0x62bc <__fixunssfsi+0x26>
    629a:	9f 57       	subi	r25, 0x7F	; 127
    629c:	90 f0       	brcs	.+36     	; 0x62c2 <__fixunssfsi+0x2c>
    629e:	b9 2f       	mov	r27, r25
    62a0:	99 27       	eor	r25, r25
    62a2:	b7 51       	subi	r27, 0x17	; 23
    62a4:	a0 f0       	brcs	.+40     	; 0x62ce <__fixunssfsi+0x38>
    62a6:	d1 f0       	breq	.+52     	; 0x62dc <__fixunssfsi+0x46>
    62a8:	66 0f       	add	r22, r22
    62aa:	77 1f       	adc	r23, r23
    62ac:	88 1f       	adc	r24, r24
    62ae:	99 1f       	adc	r25, r25
    62b0:	1a f0       	brmi	.+6      	; 0x62b8 <__fixunssfsi+0x22>
    62b2:	ba 95       	dec	r27
    62b4:	c9 f7       	brne	.-14     	; 0x62a8 <__fixunssfsi+0x12>
    62b6:	12 c0       	rjmp	.+36     	; 0x62dc <__fixunssfsi+0x46>
    62b8:	b1 30       	cpi	r27, 0x01	; 1
    62ba:	81 f0       	breq	.+32     	; 0x62dc <__fixunssfsi+0x46>
    62bc:	3c d1       	rcall	.+632    	; 0x6536 <__fp_zero>
    62be:	b1 e0       	ldi	r27, 0x01	; 1
    62c0:	08 95       	ret
    62c2:	39 c1       	rjmp	.+626    	; 0x6536 <__fp_zero>
    62c4:	67 2f       	mov	r22, r23
    62c6:	78 2f       	mov	r23, r24
    62c8:	88 27       	eor	r24, r24
    62ca:	b8 5f       	subi	r27, 0xF8	; 248
    62cc:	39 f0       	breq	.+14     	; 0x62dc <__fixunssfsi+0x46>
    62ce:	b9 3f       	cpi	r27, 0xF9	; 249
    62d0:	cc f3       	brlt	.-14     	; 0x62c4 <__fixunssfsi+0x2e>
    62d2:	86 95       	lsr	r24
    62d4:	77 95       	ror	r23
    62d6:	67 95       	ror	r22
    62d8:	b3 95       	inc	r27
    62da:	d9 f7       	brne	.-10     	; 0x62d2 <__fixunssfsi+0x3c>
    62dc:	3e f4       	brtc	.+14     	; 0x62ec <__fixunssfsi+0x56>
    62de:	90 95       	com	r25
    62e0:	80 95       	com	r24
    62e2:	70 95       	com	r23
    62e4:	61 95       	neg	r22
    62e6:	7f 4f       	sbci	r23, 0xFF	; 255
    62e8:	8f 4f       	sbci	r24, 0xFF	; 255
    62ea:	9f 4f       	sbci	r25, 0xFF	; 255
    62ec:	08 95       	ret

000062ee <__floatunsisf>:
    62ee:	e8 94       	clt
    62f0:	09 c0       	rjmp	.+18     	; 0x6304 <__floatsisf+0x12>

000062f2 <__floatsisf>:
    62f2:	97 fb       	bst	r25, 7
    62f4:	3e f4       	brtc	.+14     	; 0x6304 <__floatsisf+0x12>
    62f6:	90 95       	com	r25
    62f8:	80 95       	com	r24
    62fa:	70 95       	com	r23
    62fc:	61 95       	neg	r22
    62fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6300:	8f 4f       	sbci	r24, 0xFF	; 255
    6302:	9f 4f       	sbci	r25, 0xFF	; 255
    6304:	99 23       	and	r25, r25
    6306:	a9 f0       	breq	.+42     	; 0x6332 <__floatsisf+0x40>
    6308:	f9 2f       	mov	r31, r25
    630a:	96 e9       	ldi	r25, 0x96	; 150
    630c:	bb 27       	eor	r27, r27
    630e:	93 95       	inc	r25
    6310:	f6 95       	lsr	r31
    6312:	87 95       	ror	r24
    6314:	77 95       	ror	r23
    6316:	67 95       	ror	r22
    6318:	b7 95       	ror	r27
    631a:	f1 11       	cpse	r31, r1
    631c:	f8 cf       	rjmp	.-16     	; 0x630e <__floatsisf+0x1c>
    631e:	fa f4       	brpl	.+62     	; 0x635e <__floatsisf+0x6c>
    6320:	bb 0f       	add	r27, r27
    6322:	11 f4       	brne	.+4      	; 0x6328 <__floatsisf+0x36>
    6324:	60 ff       	sbrs	r22, 0
    6326:	1b c0       	rjmp	.+54     	; 0x635e <__floatsisf+0x6c>
    6328:	6f 5f       	subi	r22, 0xFF	; 255
    632a:	7f 4f       	sbci	r23, 0xFF	; 255
    632c:	8f 4f       	sbci	r24, 0xFF	; 255
    632e:	9f 4f       	sbci	r25, 0xFF	; 255
    6330:	16 c0       	rjmp	.+44     	; 0x635e <__floatsisf+0x6c>
    6332:	88 23       	and	r24, r24
    6334:	11 f0       	breq	.+4      	; 0x633a <__floatsisf+0x48>
    6336:	96 e9       	ldi	r25, 0x96	; 150
    6338:	11 c0       	rjmp	.+34     	; 0x635c <__floatsisf+0x6a>
    633a:	77 23       	and	r23, r23
    633c:	21 f0       	breq	.+8      	; 0x6346 <__floatsisf+0x54>
    633e:	9e e8       	ldi	r25, 0x8E	; 142
    6340:	87 2f       	mov	r24, r23
    6342:	76 2f       	mov	r23, r22
    6344:	05 c0       	rjmp	.+10     	; 0x6350 <__floatsisf+0x5e>
    6346:	66 23       	and	r22, r22
    6348:	71 f0       	breq	.+28     	; 0x6366 <__floatsisf+0x74>
    634a:	96 e8       	ldi	r25, 0x86	; 134
    634c:	86 2f       	mov	r24, r22
    634e:	70 e0       	ldi	r23, 0x00	; 0
    6350:	60 e0       	ldi	r22, 0x00	; 0
    6352:	2a f0       	brmi	.+10     	; 0x635e <__floatsisf+0x6c>
    6354:	9a 95       	dec	r25
    6356:	66 0f       	add	r22, r22
    6358:	77 1f       	adc	r23, r23
    635a:	88 1f       	adc	r24, r24
    635c:	da f7       	brpl	.-10     	; 0x6354 <__floatsisf+0x62>
    635e:	88 0f       	add	r24, r24
    6360:	96 95       	lsr	r25
    6362:	87 95       	ror	r24
    6364:	97 f9       	bld	r25, 7
    6366:	08 95       	ret

00006368 <__fp_arccos>:
    6368:	df 93       	push	r29
    636a:	cf 93       	push	r28
    636c:	1f 93       	push	r17
    636e:	0f 93       	push	r16
    6370:	8b 01       	movw	r16, r22
    6372:	ec 01       	movw	r28, r24
    6374:	e3 e2       	ldi	r30, 0x23	; 35
    6376:	f1 e0       	ldi	r31, 0x01	; 1
    6378:	3f d0       	rcall	.+126    	; 0x63f8 <__fp_powser>
    637a:	99 d0       	rcall	.+306    	; 0x64ae <__fp_round>
    637c:	98 01       	movw	r18, r16
    637e:	ae 01       	movw	r20, r28
    6380:	8b 01       	movw	r16, r22
    6382:	ec 01       	movw	r28, r24
    6384:	60 e0       	ldi	r22, 0x00	; 0
    6386:	70 e0       	ldi	r23, 0x00	; 0
    6388:	80 e8       	ldi	r24, 0x80	; 128
    638a:	9f e3       	ldi	r25, 0x3F	; 63
    638c:	52 de       	rcall	.-860    	; 0x6032 <__subsf3>
    638e:	00 d2       	rcall	.+1024   	; 0x6790 <sqrt>
    6390:	98 01       	movw	r18, r16
    6392:	ae 01       	movw	r20, r28
    6394:	0f 91       	pop	r16
    6396:	1f 91       	pop	r17
    6398:	cf 91       	pop	r28
    639a:	df 91       	pop	r29
    639c:	98 c1       	rjmp	.+816    	; 0x66ce <__mulsf3x>

0000639e <__fp_cmp>:
    639e:	99 0f       	add	r25, r25
    63a0:	00 08       	sbc	r0, r0
    63a2:	55 0f       	add	r21, r21
    63a4:	aa 0b       	sbc	r26, r26
    63a6:	e0 e8       	ldi	r30, 0x80	; 128
    63a8:	fe ef       	ldi	r31, 0xFE	; 254
    63aa:	16 16       	cp	r1, r22
    63ac:	17 06       	cpc	r1, r23
    63ae:	e8 07       	cpc	r30, r24
    63b0:	f9 07       	cpc	r31, r25
    63b2:	c0 f0       	brcs	.+48     	; 0x63e4 <__fp_cmp+0x46>
    63b4:	12 16       	cp	r1, r18
    63b6:	13 06       	cpc	r1, r19
    63b8:	e4 07       	cpc	r30, r20
    63ba:	f5 07       	cpc	r31, r21
    63bc:	98 f0       	brcs	.+38     	; 0x63e4 <__fp_cmp+0x46>
    63be:	62 1b       	sub	r22, r18
    63c0:	73 0b       	sbc	r23, r19
    63c2:	84 0b       	sbc	r24, r20
    63c4:	95 0b       	sbc	r25, r21
    63c6:	39 f4       	brne	.+14     	; 0x63d6 <__fp_cmp+0x38>
    63c8:	0a 26       	eor	r0, r26
    63ca:	61 f0       	breq	.+24     	; 0x63e4 <__fp_cmp+0x46>
    63cc:	23 2b       	or	r18, r19
    63ce:	24 2b       	or	r18, r20
    63d0:	25 2b       	or	r18, r21
    63d2:	21 f4       	brne	.+8      	; 0x63dc <__fp_cmp+0x3e>
    63d4:	08 95       	ret
    63d6:	0a 26       	eor	r0, r26
    63d8:	09 f4       	brne	.+2      	; 0x63dc <__fp_cmp+0x3e>
    63da:	a1 40       	sbci	r26, 0x01	; 1
    63dc:	a6 95       	lsr	r26
    63de:	8f ef       	ldi	r24, 0xFF	; 255
    63e0:	81 1d       	adc	r24, r1
    63e2:	81 1d       	adc	r24, r1
    63e4:	08 95       	ret

000063e6 <__fp_inf>:
    63e6:	97 f9       	bld	r25, 7
    63e8:	9f 67       	ori	r25, 0x7F	; 127
    63ea:	80 e8       	ldi	r24, 0x80	; 128
    63ec:	70 e0       	ldi	r23, 0x00	; 0
    63ee:	60 e0       	ldi	r22, 0x00	; 0
    63f0:	08 95       	ret

000063f2 <__fp_nan>:
    63f2:	9f ef       	ldi	r25, 0xFF	; 255
    63f4:	80 ec       	ldi	r24, 0xC0	; 192
    63f6:	08 95       	ret

000063f8 <__fp_powser>:
    63f8:	df 93       	push	r29
    63fa:	cf 93       	push	r28
    63fc:	1f 93       	push	r17
    63fe:	0f 93       	push	r16
    6400:	ff 92       	push	r15
    6402:	ef 92       	push	r14
    6404:	df 92       	push	r13
    6406:	7b 01       	movw	r14, r22
    6408:	8c 01       	movw	r16, r24
    640a:	68 94       	set
    640c:	05 c0       	rjmp	.+10     	; 0x6418 <__fp_powser+0x20>
    640e:	da 2e       	mov	r13, r26
    6410:	ef 01       	movw	r28, r30
    6412:	5d d1       	rcall	.+698    	; 0x66ce <__mulsf3x>
    6414:	fe 01       	movw	r30, r28
    6416:	e8 94       	clt
    6418:	a5 91       	lpm	r26, Z+
    641a:	25 91       	lpm	r18, Z+
    641c:	35 91       	lpm	r19, Z+
    641e:	45 91       	lpm	r20, Z+
    6420:	55 91       	lpm	r21, Z+
    6422:	ae f3       	brts	.-22     	; 0x640e <__fp_powser+0x16>
    6424:	ef 01       	movw	r28, r30
    6426:	17 de       	rcall	.-978    	; 0x6056 <__addsf3x>
    6428:	fe 01       	movw	r30, r28
    642a:	97 01       	movw	r18, r14
    642c:	a8 01       	movw	r20, r16
    642e:	da 94       	dec	r13
    6430:	79 f7       	brne	.-34     	; 0x6410 <__fp_powser+0x18>
    6432:	df 90       	pop	r13
    6434:	ef 90       	pop	r14
    6436:	ff 90       	pop	r15
    6438:	0f 91       	pop	r16
    643a:	1f 91       	pop	r17
    643c:	cf 91       	pop	r28
    643e:	df 91       	pop	r29
    6440:	08 95       	ret

00006442 <__fp_pscA>:
    6442:	00 24       	eor	r0, r0
    6444:	0a 94       	dec	r0
    6446:	16 16       	cp	r1, r22
    6448:	17 06       	cpc	r1, r23
    644a:	18 06       	cpc	r1, r24
    644c:	09 06       	cpc	r0, r25
    644e:	08 95       	ret

00006450 <__fp_pscB>:
    6450:	00 24       	eor	r0, r0
    6452:	0a 94       	dec	r0
    6454:	12 16       	cp	r1, r18
    6456:	13 06       	cpc	r1, r19
    6458:	14 06       	cpc	r1, r20
    645a:	05 06       	cpc	r0, r21
    645c:	08 95       	ret
    645e:	c9 cf       	rjmp	.-110    	; 0x63f2 <__fp_nan>

00006460 <__fp_rempio2>:
    6460:	50 d0       	rcall	.+160    	; 0x6502 <__fp_splitA>
    6462:	e8 f3       	brcs	.-6      	; 0x645e <__fp_pscB+0xe>
    6464:	e8 94       	clt
    6466:	e0 e0       	ldi	r30, 0x00	; 0
    6468:	bb 27       	eor	r27, r27
    646a:	9f 57       	subi	r25, 0x7F	; 127
    646c:	f0 f0       	brcs	.+60     	; 0x64aa <__fp_rempio2+0x4a>
    646e:	2a ed       	ldi	r18, 0xDA	; 218
    6470:	3f e0       	ldi	r19, 0x0F	; 15
    6472:	49 ec       	ldi	r20, 0xC9	; 201
    6474:	06 c0       	rjmp	.+12     	; 0x6482 <__fp_rempio2+0x22>
    6476:	ee 0f       	add	r30, r30
    6478:	bb 0f       	add	r27, r27
    647a:	66 1f       	adc	r22, r22
    647c:	77 1f       	adc	r23, r23
    647e:	88 1f       	adc	r24, r24
    6480:	28 f0       	brcs	.+10     	; 0x648c <__fp_rempio2+0x2c>
    6482:	b2 3a       	cpi	r27, 0xA2	; 162
    6484:	62 07       	cpc	r22, r18
    6486:	73 07       	cpc	r23, r19
    6488:	84 07       	cpc	r24, r20
    648a:	28 f0       	brcs	.+10     	; 0x6496 <__fp_rempio2+0x36>
    648c:	b2 5a       	subi	r27, 0xA2	; 162
    648e:	62 0b       	sbc	r22, r18
    6490:	73 0b       	sbc	r23, r19
    6492:	84 0b       	sbc	r24, r20
    6494:	e3 95       	inc	r30
    6496:	9a 95       	dec	r25
    6498:	72 f7       	brpl	.-36     	; 0x6476 <__fp_rempio2+0x16>
    649a:	80 38       	cpi	r24, 0x80	; 128
    649c:	30 f4       	brcc	.+12     	; 0x64aa <__fp_rempio2+0x4a>
    649e:	9a 95       	dec	r25
    64a0:	bb 0f       	add	r27, r27
    64a2:	66 1f       	adc	r22, r22
    64a4:	77 1f       	adc	r23, r23
    64a6:	88 1f       	adc	r24, r24
    64a8:	d2 f7       	brpl	.-12     	; 0x649e <__fp_rempio2+0x3e>
    64aa:	90 48       	sbci	r25, 0x80	; 128
    64ac:	b4 c1       	rjmp	.+872    	; 0x6816 <__fp_mpack_finite>

000064ae <__fp_round>:
    64ae:	09 2e       	mov	r0, r25
    64b0:	03 94       	inc	r0
    64b2:	00 0c       	add	r0, r0
    64b4:	11 f4       	brne	.+4      	; 0x64ba <__fp_round+0xc>
    64b6:	88 23       	and	r24, r24
    64b8:	52 f0       	brmi	.+20     	; 0x64ce <__fp_round+0x20>
    64ba:	bb 0f       	add	r27, r27
    64bc:	40 f4       	brcc	.+16     	; 0x64ce <__fp_round+0x20>
    64be:	bf 2b       	or	r27, r31
    64c0:	11 f4       	brne	.+4      	; 0x64c6 <__fp_round+0x18>
    64c2:	60 ff       	sbrs	r22, 0
    64c4:	04 c0       	rjmp	.+8      	; 0x64ce <__fp_round+0x20>
    64c6:	6f 5f       	subi	r22, 0xFF	; 255
    64c8:	7f 4f       	sbci	r23, 0xFF	; 255
    64ca:	8f 4f       	sbci	r24, 0xFF	; 255
    64cc:	9f 4f       	sbci	r25, 0xFF	; 255
    64ce:	08 95       	ret

000064d0 <__fp_sinus>:
    64d0:	ef 93       	push	r30
    64d2:	e0 ff       	sbrs	r30, 0
    64d4:	06 c0       	rjmp	.+12     	; 0x64e2 <__fp_sinus+0x12>
    64d6:	a2 ea       	ldi	r26, 0xA2	; 162
    64d8:	2a ed       	ldi	r18, 0xDA	; 218
    64da:	3f e0       	ldi	r19, 0x0F	; 15
    64dc:	49 ec       	ldi	r20, 0xC9	; 201
    64de:	5f eb       	ldi	r21, 0xBF	; 191
    64e0:	ba dd       	rcall	.-1164   	; 0x6056 <__addsf3x>
    64e2:	e5 df       	rcall	.-54     	; 0x64ae <__fp_round>
    64e4:	0f 90       	pop	r0
    64e6:	03 94       	inc	r0
    64e8:	01 fc       	sbrc	r0, 1
    64ea:	90 58       	subi	r25, 0x80	; 128
    64ec:	eb e4       	ldi	r30, 0x4B	; 75
    64ee:	f1 e0       	ldi	r31, 0x01	; 1
    64f0:	a5 c1       	rjmp	.+842    	; 0x683c <__fp_powsodd>

000064f2 <__fp_split3>:
    64f2:	57 fd       	sbrc	r21, 7
    64f4:	90 58       	subi	r25, 0x80	; 128
    64f6:	44 0f       	add	r20, r20
    64f8:	55 1f       	adc	r21, r21
    64fa:	59 f0       	breq	.+22     	; 0x6512 <__fp_splitA+0x10>
    64fc:	5f 3f       	cpi	r21, 0xFF	; 255
    64fe:	71 f0       	breq	.+28     	; 0x651c <__fp_splitA+0x1a>
    6500:	47 95       	ror	r20

00006502 <__fp_splitA>:
    6502:	88 0f       	add	r24, r24
    6504:	97 fb       	bst	r25, 7
    6506:	99 1f       	adc	r25, r25
    6508:	61 f0       	breq	.+24     	; 0x6522 <__fp_splitA+0x20>
    650a:	9f 3f       	cpi	r25, 0xFF	; 255
    650c:	79 f0       	breq	.+30     	; 0x652c <__fp_splitA+0x2a>
    650e:	87 95       	ror	r24
    6510:	08 95       	ret
    6512:	12 16       	cp	r1, r18
    6514:	13 06       	cpc	r1, r19
    6516:	14 06       	cpc	r1, r20
    6518:	55 1f       	adc	r21, r21
    651a:	f2 cf       	rjmp	.-28     	; 0x6500 <__fp_split3+0xe>
    651c:	46 95       	lsr	r20
    651e:	f1 df       	rcall	.-30     	; 0x6502 <__fp_splitA>
    6520:	08 c0       	rjmp	.+16     	; 0x6532 <__fp_splitA+0x30>
    6522:	16 16       	cp	r1, r22
    6524:	17 06       	cpc	r1, r23
    6526:	18 06       	cpc	r1, r24
    6528:	99 1f       	adc	r25, r25
    652a:	f1 cf       	rjmp	.-30     	; 0x650e <__fp_splitA+0xc>
    652c:	86 95       	lsr	r24
    652e:	71 05       	cpc	r23, r1
    6530:	61 05       	cpc	r22, r1
    6532:	08 94       	sec
    6534:	08 95       	ret

00006536 <__fp_zero>:
    6536:	e8 94       	clt

00006538 <__fp_szero>:
    6538:	bb 27       	eor	r27, r27
    653a:	66 27       	eor	r22, r22
    653c:	77 27       	eor	r23, r23
    653e:	cb 01       	movw	r24, r22
    6540:	97 f9       	bld	r25, 7
    6542:	08 95       	ret

00006544 <__gesf2>:
    6544:	2c df       	rcall	.-424    	; 0x639e <__fp_cmp>
    6546:	08 f4       	brcc	.+2      	; 0x654a <__gesf2+0x6>
    6548:	8f ef       	ldi	r24, 0xFF	; 255
    654a:	08 95       	ret

0000654c <inverse>:
    654c:	9b 01       	movw	r18, r22
    654e:	ac 01       	movw	r20, r24
    6550:	60 e0       	ldi	r22, 0x00	; 0
    6552:	70 e0       	ldi	r23, 0x00	; 0
    6554:	80 e8       	ldi	r24, 0x80	; 128
    6556:	9f e3       	ldi	r25, 0x3F	; 63
    6558:	00 ce       	rjmp	.-1024   	; 0x615a <__divsf3>
    655a:	45 cf       	rjmp	.-374    	; 0x63e6 <__fp_inf>
    655c:	5a c1       	rjmp	.+692    	; 0x6812 <__fp_mpack>

0000655e <ldexp>:
    655e:	d1 df       	rcall	.-94     	; 0x6502 <__fp_splitA>
    6560:	e8 f3       	brcs	.-6      	; 0x655c <inverse+0x10>
    6562:	99 23       	and	r25, r25
    6564:	d9 f3       	breq	.-10     	; 0x655c <inverse+0x10>
    6566:	94 0f       	add	r25, r20
    6568:	51 1d       	adc	r21, r1
    656a:	bb f3       	brvs	.-18     	; 0x655a <inverse+0xe>
    656c:	91 50       	subi	r25, 0x01	; 1
    656e:	50 40       	sbci	r21, 0x00	; 0
    6570:	94 f0       	brlt	.+36     	; 0x6596 <ldexp+0x38>
    6572:	59 f0       	breq	.+22     	; 0x658a <ldexp+0x2c>
    6574:	88 23       	and	r24, r24
    6576:	32 f0       	brmi	.+12     	; 0x6584 <ldexp+0x26>
    6578:	66 0f       	add	r22, r22
    657a:	77 1f       	adc	r23, r23
    657c:	88 1f       	adc	r24, r24
    657e:	91 50       	subi	r25, 0x01	; 1
    6580:	50 40       	sbci	r21, 0x00	; 0
    6582:	c1 f7       	brne	.-16     	; 0x6574 <ldexp+0x16>
    6584:	9e 3f       	cpi	r25, 0xFE	; 254
    6586:	51 05       	cpc	r21, r1
    6588:	44 f7       	brge	.-48     	; 0x655a <inverse+0xe>
    658a:	88 0f       	add	r24, r24
    658c:	91 1d       	adc	r25, r1
    658e:	96 95       	lsr	r25
    6590:	87 95       	ror	r24
    6592:	97 f9       	bld	r25, 7
    6594:	08 95       	ret
    6596:	5f 3f       	cpi	r21, 0xFF	; 255
    6598:	ac f0       	brlt	.+42     	; 0x65c4 <ldexp+0x66>
    659a:	98 3e       	cpi	r25, 0xE8	; 232
    659c:	9c f0       	brlt	.+38     	; 0x65c4 <ldexp+0x66>
    659e:	bb 27       	eor	r27, r27
    65a0:	86 95       	lsr	r24
    65a2:	77 95       	ror	r23
    65a4:	67 95       	ror	r22
    65a6:	b7 95       	ror	r27
    65a8:	08 f4       	brcc	.+2      	; 0x65ac <ldexp+0x4e>
    65aa:	b1 60       	ori	r27, 0x01	; 1
    65ac:	93 95       	inc	r25
    65ae:	c1 f7       	brne	.-16     	; 0x65a0 <ldexp+0x42>
    65b0:	bb 0f       	add	r27, r27
    65b2:	58 f7       	brcc	.-42     	; 0x658a <ldexp+0x2c>
    65b4:	11 f4       	brne	.+4      	; 0x65ba <ldexp+0x5c>
    65b6:	60 ff       	sbrs	r22, 0
    65b8:	e8 cf       	rjmp	.-48     	; 0x658a <ldexp+0x2c>
    65ba:	6f 5f       	subi	r22, 0xFF	; 255
    65bc:	7f 4f       	sbci	r23, 0xFF	; 255
    65be:	8f 4f       	sbci	r24, 0xFF	; 255
    65c0:	9f 4f       	sbci	r25, 0xFF	; 255
    65c2:	e3 cf       	rjmp	.-58     	; 0x658a <ldexp+0x2c>
    65c4:	b9 cf       	rjmp	.-142    	; 0x6538 <__fp_szero>
    65c6:	0e f0       	brts	.+2      	; 0x65ca <ldexp+0x6c>
    65c8:	24 c1       	rjmp	.+584    	; 0x6812 <__fp_mpack>
    65ca:	13 cf       	rjmp	.-474    	; 0x63f2 <__fp_nan>
    65cc:	68 94       	set
    65ce:	0b cf       	rjmp	.-490    	; 0x63e6 <__fp_inf>

000065d0 <log>:
    65d0:	98 df       	rcall	.-208    	; 0x6502 <__fp_splitA>
    65d2:	c8 f3       	brcs	.-14     	; 0x65c6 <ldexp+0x68>
    65d4:	99 23       	and	r25, r25
    65d6:	d1 f3       	breq	.-12     	; 0x65cc <ldexp+0x6e>
    65d8:	c6 f3       	brts	.-16     	; 0x65ca <ldexp+0x6c>
    65da:	df 93       	push	r29
    65dc:	cf 93       	push	r28
    65de:	1f 93       	push	r17
    65e0:	0f 93       	push	r16
    65e2:	ff 92       	push	r15
    65e4:	c9 2f       	mov	r28, r25
    65e6:	dd 27       	eor	r29, r29
    65e8:	88 23       	and	r24, r24
    65ea:	2a f0       	brmi	.+10     	; 0x65f6 <log+0x26>
    65ec:	21 97       	sbiw	r28, 0x01	; 1
    65ee:	66 0f       	add	r22, r22
    65f0:	77 1f       	adc	r23, r23
    65f2:	88 1f       	adc	r24, r24
    65f4:	da f7       	brpl	.-10     	; 0x65ec <log+0x1c>
    65f6:	20 e0       	ldi	r18, 0x00	; 0
    65f8:	30 e0       	ldi	r19, 0x00	; 0
    65fa:	40 e8       	ldi	r20, 0x80	; 128
    65fc:	5f eb       	ldi	r21, 0xBF	; 191
    65fe:	9f e3       	ldi	r25, 0x3F	; 63
    6600:	88 39       	cpi	r24, 0x98	; 152
    6602:	20 f0       	brcs	.+8      	; 0x660c <log+0x3c>
    6604:	80 3e       	cpi	r24, 0xE0	; 224
    6606:	30 f0       	brcs	.+12     	; 0x6614 <log+0x44>
    6608:	21 96       	adiw	r28, 0x01	; 1
    660a:	8f 77       	andi	r24, 0x7F	; 127
    660c:	13 dd       	rcall	.-1498   	; 0x6034 <__addsf3>
    660e:	e9 e6       	ldi	r30, 0x69	; 105
    6610:	f1 e0       	ldi	r31, 0x01	; 1
    6612:	03 c0       	rjmp	.+6      	; 0x661a <log+0x4a>
    6614:	0f dd       	rcall	.-1506   	; 0x6034 <__addsf3>
    6616:	e6 e9       	ldi	r30, 0x96	; 150
    6618:	f1 e0       	ldi	r31, 0x01	; 1
    661a:	ee de       	rcall	.-548    	; 0x63f8 <__fp_powser>
    661c:	8b 01       	movw	r16, r22
    661e:	be 01       	movw	r22, r28
    6620:	ec 01       	movw	r28, r24
    6622:	fb 2e       	mov	r15, r27
    6624:	6f 57       	subi	r22, 0x7F	; 127
    6626:	71 09       	sbc	r23, r1
    6628:	75 95       	asr	r23
    662a:	77 1f       	adc	r23, r23
    662c:	88 0b       	sbc	r24, r24
    662e:	99 0b       	sbc	r25, r25
    6630:	60 de       	rcall	.-832    	; 0x62f2 <__floatsisf>
    6632:	28 e1       	ldi	r18, 0x18	; 24
    6634:	32 e7       	ldi	r19, 0x72	; 114
    6636:	41 e3       	ldi	r20, 0x31	; 49
    6638:	5f e3       	ldi	r21, 0x3F	; 63
    663a:	49 d0       	rcall	.+146    	; 0x66ce <__mulsf3x>
    663c:	af 2d       	mov	r26, r15
    663e:	98 01       	movw	r18, r16
    6640:	ae 01       	movw	r20, r28
    6642:	ff 90       	pop	r15
    6644:	0f 91       	pop	r16
    6646:	1f 91       	pop	r17
    6648:	cf 91       	pop	r28
    664a:	df 91       	pop	r29
    664c:	04 dd       	rcall	.-1528   	; 0x6056 <__addsf3x>
    664e:	2f cf       	rjmp	.-418    	; 0x64ae <__fp_round>

00006650 <modf>:
    6650:	fa 01       	movw	r30, r20
    6652:	dc 01       	movw	r26, r24
    6654:	aa 0f       	add	r26, r26
    6656:	bb 1f       	adc	r27, r27
    6658:	9b 01       	movw	r18, r22
    665a:	ac 01       	movw	r20, r24
    665c:	bf 57       	subi	r27, 0x7F	; 127
    665e:	28 f4       	brcc	.+10     	; 0x666a <modf+0x1a>
    6660:	22 27       	eor	r18, r18
    6662:	33 27       	eor	r19, r19
    6664:	44 27       	eor	r20, r20
    6666:	50 78       	andi	r21, 0x80	; 128
    6668:	1f c0       	rjmp	.+62     	; 0x66a8 <modf+0x58>
    666a:	b7 51       	subi	r27, 0x17	; 23
    666c:	88 f4       	brcc	.+34     	; 0x6690 <modf+0x40>
    666e:	ab 2f       	mov	r26, r27
    6670:	00 24       	eor	r0, r0
    6672:	46 95       	lsr	r20
    6674:	37 95       	ror	r19
    6676:	27 95       	ror	r18
    6678:	01 1c       	adc	r0, r1
    667a:	a3 95       	inc	r26
    667c:	d2 f3       	brmi	.-12     	; 0x6672 <modf+0x22>
    667e:	00 20       	and	r0, r0
    6680:	69 f0       	breq	.+26     	; 0x669c <modf+0x4c>
    6682:	22 0f       	add	r18, r18
    6684:	33 1f       	adc	r19, r19
    6686:	44 1f       	adc	r20, r20
    6688:	b3 95       	inc	r27
    668a:	da f3       	brmi	.-10     	; 0x6682 <modf+0x32>
    668c:	0d d0       	rcall	.+26     	; 0x66a8 <modf+0x58>
    668e:	d1 cc       	rjmp	.-1630   	; 0x6032 <__subsf3>
    6690:	61 30       	cpi	r22, 0x01	; 1
    6692:	71 05       	cpc	r23, r1
    6694:	a0 e8       	ldi	r26, 0x80	; 128
    6696:	8a 07       	cpc	r24, r26
    6698:	b9 46       	sbci	r27, 0x69	; 105
    669a:	30 f4       	brcc	.+12     	; 0x66a8 <modf+0x58>
    669c:	9b 01       	movw	r18, r22
    669e:	ac 01       	movw	r20, r24
    66a0:	66 27       	eor	r22, r22
    66a2:	77 27       	eor	r23, r23
    66a4:	88 27       	eor	r24, r24
    66a6:	90 78       	andi	r25, 0x80	; 128
    66a8:	30 96       	adiw	r30, 0x00	; 0
    66aa:	21 f0       	breq	.+8      	; 0x66b4 <modf+0x64>
    66ac:	20 83       	st	Z, r18
    66ae:	31 83       	std	Z+1, r19	; 0x01
    66b0:	42 83       	std	Z+2, r20	; 0x02
    66b2:	53 83       	std	Z+3, r21	; 0x03
    66b4:	08 95       	ret

000066b6 <__mulsf3>:
    66b6:	0b d0       	rcall	.+22     	; 0x66ce <__mulsf3x>
    66b8:	fa ce       	rjmp	.-524    	; 0x64ae <__fp_round>
    66ba:	c3 de       	rcall	.-634    	; 0x6442 <__fp_pscA>
    66bc:	28 f0       	brcs	.+10     	; 0x66c8 <__mulsf3+0x12>
    66be:	c8 de       	rcall	.-624    	; 0x6450 <__fp_pscB>
    66c0:	18 f0       	brcs	.+6      	; 0x66c8 <__mulsf3+0x12>
    66c2:	95 23       	and	r25, r21
    66c4:	09 f0       	breq	.+2      	; 0x66c8 <__mulsf3+0x12>
    66c6:	8f ce       	rjmp	.-738    	; 0x63e6 <__fp_inf>
    66c8:	94 ce       	rjmp	.-728    	; 0x63f2 <__fp_nan>
    66ca:	11 24       	eor	r1, r1
    66cc:	35 cf       	rjmp	.-406    	; 0x6538 <__fp_szero>

000066ce <__mulsf3x>:
    66ce:	11 df       	rcall	.-478    	; 0x64f2 <__fp_split3>
    66d0:	a0 f3       	brcs	.-24     	; 0x66ba <__mulsf3+0x4>

000066d2 <__mulsf3_pse>:
    66d2:	95 9f       	mul	r25, r21
    66d4:	d1 f3       	breq	.-12     	; 0x66ca <__mulsf3+0x14>
    66d6:	95 0f       	add	r25, r21
    66d8:	50 e0       	ldi	r21, 0x00	; 0
    66da:	55 1f       	adc	r21, r21
    66dc:	62 9f       	mul	r22, r18
    66de:	f0 01       	movw	r30, r0
    66e0:	72 9f       	mul	r23, r18
    66e2:	bb 27       	eor	r27, r27
    66e4:	f0 0d       	add	r31, r0
    66e6:	b1 1d       	adc	r27, r1
    66e8:	63 9f       	mul	r22, r19
    66ea:	aa 27       	eor	r26, r26
    66ec:	f0 0d       	add	r31, r0
    66ee:	b1 1d       	adc	r27, r1
    66f0:	aa 1f       	adc	r26, r26
    66f2:	64 9f       	mul	r22, r20
    66f4:	66 27       	eor	r22, r22
    66f6:	b0 0d       	add	r27, r0
    66f8:	a1 1d       	adc	r26, r1
    66fa:	66 1f       	adc	r22, r22
    66fc:	82 9f       	mul	r24, r18
    66fe:	22 27       	eor	r18, r18
    6700:	b0 0d       	add	r27, r0
    6702:	a1 1d       	adc	r26, r1
    6704:	62 1f       	adc	r22, r18
    6706:	73 9f       	mul	r23, r19
    6708:	b0 0d       	add	r27, r0
    670a:	a1 1d       	adc	r26, r1
    670c:	62 1f       	adc	r22, r18
    670e:	83 9f       	mul	r24, r19
    6710:	a0 0d       	add	r26, r0
    6712:	61 1d       	adc	r22, r1
    6714:	22 1f       	adc	r18, r18
    6716:	74 9f       	mul	r23, r20
    6718:	33 27       	eor	r19, r19
    671a:	a0 0d       	add	r26, r0
    671c:	61 1d       	adc	r22, r1
    671e:	23 1f       	adc	r18, r19
    6720:	84 9f       	mul	r24, r20
    6722:	60 0d       	add	r22, r0
    6724:	21 1d       	adc	r18, r1
    6726:	82 2f       	mov	r24, r18
    6728:	76 2f       	mov	r23, r22
    672a:	6a 2f       	mov	r22, r26
    672c:	11 24       	eor	r1, r1
    672e:	9f 57       	subi	r25, 0x7F	; 127
    6730:	50 40       	sbci	r21, 0x00	; 0
    6732:	8a f0       	brmi	.+34     	; 0x6756 <__mulsf3_pse+0x84>
    6734:	e1 f0       	breq	.+56     	; 0x676e <__mulsf3_pse+0x9c>
    6736:	88 23       	and	r24, r24
    6738:	4a f0       	brmi	.+18     	; 0x674c <__mulsf3_pse+0x7a>
    673a:	ee 0f       	add	r30, r30
    673c:	ff 1f       	adc	r31, r31
    673e:	bb 1f       	adc	r27, r27
    6740:	66 1f       	adc	r22, r22
    6742:	77 1f       	adc	r23, r23
    6744:	88 1f       	adc	r24, r24
    6746:	91 50       	subi	r25, 0x01	; 1
    6748:	50 40       	sbci	r21, 0x00	; 0
    674a:	a9 f7       	brne	.-22     	; 0x6736 <__mulsf3_pse+0x64>
    674c:	9e 3f       	cpi	r25, 0xFE	; 254
    674e:	51 05       	cpc	r21, r1
    6750:	70 f0       	brcs	.+28     	; 0x676e <__mulsf3_pse+0x9c>
    6752:	49 ce       	rjmp	.-878    	; 0x63e6 <__fp_inf>
    6754:	f1 ce       	rjmp	.-542    	; 0x6538 <__fp_szero>
    6756:	5f 3f       	cpi	r21, 0xFF	; 255
    6758:	ec f3       	brlt	.-6      	; 0x6754 <__mulsf3_pse+0x82>
    675a:	98 3e       	cpi	r25, 0xE8	; 232
    675c:	dc f3       	brlt	.-10     	; 0x6754 <__mulsf3_pse+0x82>
    675e:	86 95       	lsr	r24
    6760:	77 95       	ror	r23
    6762:	67 95       	ror	r22
    6764:	b7 95       	ror	r27
    6766:	f7 95       	ror	r31
    6768:	e7 95       	ror	r30
    676a:	9f 5f       	subi	r25, 0xFF	; 255
    676c:	c1 f7       	brne	.-16     	; 0x675e <__mulsf3_pse+0x8c>
    676e:	fe 2b       	or	r31, r30
    6770:	88 0f       	add	r24, r24
    6772:	91 1d       	adc	r25, r1
    6774:	96 95       	lsr	r25
    6776:	87 95       	ror	r24
    6778:	97 f9       	bld	r25, 7
    677a:	08 95       	ret

0000677c <sin>:
    677c:	9f 93       	push	r25
    677e:	70 de       	rcall	.-800    	; 0x6460 <__fp_rempio2>
    6780:	0f 90       	pop	r0
    6782:	07 fc       	sbrc	r0, 7
    6784:	ee 5f       	subi	r30, 0xFE	; 254
    6786:	a4 ce       	rjmp	.-696    	; 0x64d0 <__fp_sinus>
    6788:	11 f4       	brne	.+4      	; 0x678e <sin+0x12>
    678a:	0e f4       	brtc	.+2      	; 0x678e <sin+0x12>
    678c:	32 ce       	rjmp	.-924    	; 0x63f2 <__fp_nan>
    678e:	41 c0       	rjmp	.+130    	; 0x6812 <__fp_mpack>

00006790 <sqrt>:
    6790:	b8 de       	rcall	.-656    	; 0x6502 <__fp_splitA>
    6792:	d0 f3       	brcs	.-12     	; 0x6788 <sin+0xc>
    6794:	99 23       	and	r25, r25
    6796:	d9 f3       	breq	.-10     	; 0x678e <sin+0x12>
    6798:	ce f3       	brts	.-14     	; 0x678c <sin+0x10>
    679a:	9f 57       	subi	r25, 0x7F	; 127
    679c:	55 0b       	sbc	r21, r21
    679e:	87 ff       	sbrs	r24, 7
    67a0:	46 d0       	rcall	.+140    	; 0x682e <__fp_norm2>
    67a2:	00 24       	eor	r0, r0
    67a4:	a0 e6       	ldi	r26, 0x60	; 96
    67a6:	40 ea       	ldi	r20, 0xA0	; 160
    67a8:	90 01       	movw	r18, r0
    67aa:	80 58       	subi	r24, 0x80	; 128
    67ac:	56 95       	lsr	r21
    67ae:	97 95       	ror	r25
    67b0:	28 f4       	brcc	.+10     	; 0x67bc <sqrt+0x2c>
    67b2:	80 5c       	subi	r24, 0xC0	; 192
    67b4:	66 0f       	add	r22, r22
    67b6:	77 1f       	adc	r23, r23
    67b8:	88 1f       	adc	r24, r24
    67ba:	20 f0       	brcs	.+8      	; 0x67c4 <sqrt+0x34>
    67bc:	26 17       	cp	r18, r22
    67be:	37 07       	cpc	r19, r23
    67c0:	48 07       	cpc	r20, r24
    67c2:	30 f4       	brcc	.+12     	; 0x67d0 <sqrt+0x40>
    67c4:	62 1b       	sub	r22, r18
    67c6:	73 0b       	sbc	r23, r19
    67c8:	84 0b       	sbc	r24, r20
    67ca:	20 29       	or	r18, r0
    67cc:	31 29       	or	r19, r1
    67ce:	4a 2b       	or	r20, r26
    67d0:	a6 95       	lsr	r26
    67d2:	17 94       	ror	r1
    67d4:	07 94       	ror	r0
    67d6:	20 25       	eor	r18, r0
    67d8:	31 25       	eor	r19, r1
    67da:	4a 27       	eor	r20, r26
    67dc:	58 f7       	brcc	.-42     	; 0x67b4 <sqrt+0x24>
    67de:	66 0f       	add	r22, r22
    67e0:	77 1f       	adc	r23, r23
    67e2:	88 1f       	adc	r24, r24
    67e4:	20 f0       	brcs	.+8      	; 0x67ee <sqrt+0x5e>
    67e6:	26 17       	cp	r18, r22
    67e8:	37 07       	cpc	r19, r23
    67ea:	48 07       	cpc	r20, r24
    67ec:	30 f4       	brcc	.+12     	; 0x67fa <sqrt+0x6a>
    67ee:	62 0b       	sbc	r22, r18
    67f0:	73 0b       	sbc	r23, r19
    67f2:	84 0b       	sbc	r24, r20
    67f4:	20 0d       	add	r18, r0
    67f6:	31 1d       	adc	r19, r1
    67f8:	41 1d       	adc	r20, r1
    67fa:	a0 95       	com	r26
    67fc:	81 f7       	brne	.-32     	; 0x67de <sqrt+0x4e>
    67fe:	b9 01       	movw	r22, r18
    6800:	84 2f       	mov	r24, r20
    6802:	91 58       	subi	r25, 0x81	; 129
    6804:	88 0f       	add	r24, r24
    6806:	96 95       	lsr	r25
    6808:	87 95       	ror	r24
    680a:	08 95       	ret

0000680c <square>:
    680c:	9b 01       	movw	r18, r22
    680e:	ac 01       	movw	r20, r24
    6810:	52 cf       	rjmp	.-348    	; 0x66b6 <__mulsf3>

00006812 <__fp_mpack>:
    6812:	9f 3f       	cpi	r25, 0xFF	; 255
    6814:	31 f0       	breq	.+12     	; 0x6822 <__fp_mpack_finite+0xc>

00006816 <__fp_mpack_finite>:
    6816:	91 50       	subi	r25, 0x01	; 1
    6818:	20 f4       	brcc	.+8      	; 0x6822 <__fp_mpack_finite+0xc>
    681a:	87 95       	ror	r24
    681c:	77 95       	ror	r23
    681e:	67 95       	ror	r22
    6820:	b7 95       	ror	r27
    6822:	88 0f       	add	r24, r24
    6824:	91 1d       	adc	r25, r1
    6826:	96 95       	lsr	r25
    6828:	87 95       	ror	r24
    682a:	97 f9       	bld	r25, 7
    682c:	08 95       	ret

0000682e <__fp_norm2>:
    682e:	91 50       	subi	r25, 0x01	; 1
    6830:	50 40       	sbci	r21, 0x00	; 0
    6832:	66 0f       	add	r22, r22
    6834:	77 1f       	adc	r23, r23
    6836:	88 1f       	adc	r24, r24
    6838:	d2 f7       	brpl	.-12     	; 0x682e <__fp_norm2>
    683a:	08 95       	ret

0000683c <__fp_powsodd>:
    683c:	9f 93       	push	r25
    683e:	8f 93       	push	r24
    6840:	7f 93       	push	r23
    6842:	6f 93       	push	r22
    6844:	ff 93       	push	r31
    6846:	ef 93       	push	r30
    6848:	9b 01       	movw	r18, r22
    684a:	ac 01       	movw	r20, r24
    684c:	34 df       	rcall	.-408    	; 0x66b6 <__mulsf3>
    684e:	ef 91       	pop	r30
    6850:	ff 91       	pop	r31
    6852:	d2 dd       	rcall	.-1116   	; 0x63f8 <__fp_powser>
    6854:	2f 91       	pop	r18
    6856:	3f 91       	pop	r19
    6858:	4f 91       	pop	r20
    685a:	5f 91       	pop	r21
    685c:	2c cf       	rjmp	.-424    	; 0x66b6 <__mulsf3>

0000685e <__divmodhi4>:
    685e:	97 fb       	bst	r25, 7
    6860:	07 2e       	mov	r0, r23
    6862:	16 f4       	brtc	.+4      	; 0x6868 <__divmodhi4+0xa>
    6864:	00 94       	com	r0
    6866:	07 d0       	rcall	.+14     	; 0x6876 <__divmodhi4_neg1>
    6868:	77 fd       	sbrc	r23, 7
    686a:	09 d0       	rcall	.+18     	; 0x687e <__divmodhi4_neg2>
    686c:	0e 94 49 34 	call	0x6892	; 0x6892 <__udivmodhi4>
    6870:	07 fc       	sbrc	r0, 7
    6872:	05 d0       	rcall	.+10     	; 0x687e <__divmodhi4_neg2>
    6874:	3e f4       	brtc	.+14     	; 0x6884 <__divmodhi4_exit>

00006876 <__divmodhi4_neg1>:
    6876:	90 95       	com	r25
    6878:	81 95       	neg	r24
    687a:	9f 4f       	sbci	r25, 0xFF	; 255
    687c:	08 95       	ret

0000687e <__divmodhi4_neg2>:
    687e:	70 95       	com	r23
    6880:	61 95       	neg	r22
    6882:	7f 4f       	sbci	r23, 0xFF	; 255

00006884 <__divmodhi4_exit>:
    6884:	08 95       	ret

00006886 <__tablejump2__>:
    6886:	ee 0f       	add	r30, r30
    6888:	ff 1f       	adc	r31, r31

0000688a <__tablejump__>:
    688a:	05 90       	lpm	r0, Z+
    688c:	f4 91       	lpm	r31, Z
    688e:	e0 2d       	mov	r30, r0
    6890:	09 94       	ijmp

00006892 <__udivmodhi4>:
    6892:	aa 1b       	sub	r26, r26
    6894:	bb 1b       	sub	r27, r27
    6896:	51 e1       	ldi	r21, 0x11	; 17
    6898:	07 c0       	rjmp	.+14     	; 0x68a8 <__udivmodhi4_ep>

0000689a <__udivmodhi4_loop>:
    689a:	aa 1f       	adc	r26, r26
    689c:	bb 1f       	adc	r27, r27
    689e:	a6 17       	cp	r26, r22
    68a0:	b7 07       	cpc	r27, r23
    68a2:	10 f0       	brcs	.+4      	; 0x68a8 <__udivmodhi4_ep>
    68a4:	a6 1b       	sub	r26, r22
    68a6:	b7 0b       	sbc	r27, r23

000068a8 <__udivmodhi4_ep>:
    68a8:	88 1f       	adc	r24, r24
    68aa:	99 1f       	adc	r25, r25
    68ac:	5a 95       	dec	r21
    68ae:	a9 f7       	brne	.-22     	; 0x689a <__udivmodhi4_loop>
    68b0:	80 95       	com	r24
    68b2:	90 95       	com	r25
    68b4:	bc 01       	movw	r22, r24
    68b6:	cd 01       	movw	r24, r26
    68b8:	08 95       	ret

000068ba <malloc>:
    68ba:	cf 93       	push	r28
    68bc:	df 93       	push	r29
    68be:	82 30       	cpi	r24, 0x02	; 2
    68c0:	91 05       	cpc	r25, r1
    68c2:	10 f4       	brcc	.+4      	; 0x68c8 <malloc+0xe>
    68c4:	82 e0       	ldi	r24, 0x02	; 2
    68c6:	90 e0       	ldi	r25, 0x00	; 0
    68c8:	e0 91 58 01 	lds	r30, 0x0158
    68cc:	f0 91 59 01 	lds	r31, 0x0159
    68d0:	20 e0       	ldi	r18, 0x00	; 0
    68d2:	30 e0       	ldi	r19, 0x00	; 0
    68d4:	a0 e0       	ldi	r26, 0x00	; 0
    68d6:	b0 e0       	ldi	r27, 0x00	; 0
    68d8:	30 97       	sbiw	r30, 0x00	; 0
    68da:	39 f1       	breq	.+78     	; 0x692a <malloc+0x70>
    68dc:	40 81       	ld	r20, Z
    68de:	51 81       	ldd	r21, Z+1	; 0x01
    68e0:	48 17       	cp	r20, r24
    68e2:	59 07       	cpc	r21, r25
    68e4:	b8 f0       	brcs	.+46     	; 0x6914 <malloc+0x5a>
    68e6:	48 17       	cp	r20, r24
    68e8:	59 07       	cpc	r21, r25
    68ea:	71 f4       	brne	.+28     	; 0x6908 <malloc+0x4e>
    68ec:	82 81       	ldd	r24, Z+2	; 0x02
    68ee:	93 81       	ldd	r25, Z+3	; 0x03
    68f0:	10 97       	sbiw	r26, 0x00	; 0
    68f2:	29 f0       	breq	.+10     	; 0x68fe <malloc+0x44>
    68f4:	13 96       	adiw	r26, 0x03	; 3
    68f6:	9c 93       	st	X, r25
    68f8:	8e 93       	st	-X, r24
    68fa:	12 97       	sbiw	r26, 0x02	; 2
    68fc:	2c c0       	rjmp	.+88     	; 0x6956 <malloc+0x9c>
    68fe:	90 93 59 01 	sts	0x0159, r25
    6902:	80 93 58 01 	sts	0x0158, r24
    6906:	27 c0       	rjmp	.+78     	; 0x6956 <malloc+0x9c>
    6908:	21 15       	cp	r18, r1
    690a:	31 05       	cpc	r19, r1
    690c:	31 f0       	breq	.+12     	; 0x691a <malloc+0x60>
    690e:	42 17       	cp	r20, r18
    6910:	53 07       	cpc	r21, r19
    6912:	18 f0       	brcs	.+6      	; 0x691a <malloc+0x60>
    6914:	a9 01       	movw	r20, r18
    6916:	db 01       	movw	r26, r22
    6918:	01 c0       	rjmp	.+2      	; 0x691c <malloc+0x62>
    691a:	ef 01       	movw	r28, r30
    691c:	9a 01       	movw	r18, r20
    691e:	bd 01       	movw	r22, r26
    6920:	df 01       	movw	r26, r30
    6922:	02 80       	ldd	r0, Z+2	; 0x02
    6924:	f3 81       	ldd	r31, Z+3	; 0x03
    6926:	e0 2d       	mov	r30, r0
    6928:	d7 cf       	rjmp	.-82     	; 0x68d8 <malloc+0x1e>
    692a:	21 15       	cp	r18, r1
    692c:	31 05       	cpc	r19, r1
    692e:	f9 f0       	breq	.+62     	; 0x696e <malloc+0xb4>
    6930:	28 1b       	sub	r18, r24
    6932:	39 0b       	sbc	r19, r25
    6934:	24 30       	cpi	r18, 0x04	; 4
    6936:	31 05       	cpc	r19, r1
    6938:	80 f4       	brcc	.+32     	; 0x695a <malloc+0xa0>
    693a:	8a 81       	ldd	r24, Y+2	; 0x02
    693c:	9b 81       	ldd	r25, Y+3	; 0x03
    693e:	61 15       	cp	r22, r1
    6940:	71 05       	cpc	r23, r1
    6942:	21 f0       	breq	.+8      	; 0x694c <malloc+0x92>
    6944:	fb 01       	movw	r30, r22
    6946:	93 83       	std	Z+3, r25	; 0x03
    6948:	82 83       	std	Z+2, r24	; 0x02
    694a:	04 c0       	rjmp	.+8      	; 0x6954 <malloc+0x9a>
    694c:	90 93 59 01 	sts	0x0159, r25
    6950:	80 93 58 01 	sts	0x0158, r24
    6954:	fe 01       	movw	r30, r28
    6956:	32 96       	adiw	r30, 0x02	; 2
    6958:	44 c0       	rjmp	.+136    	; 0x69e2 <malloc+0x128>
    695a:	fe 01       	movw	r30, r28
    695c:	e2 0f       	add	r30, r18
    695e:	f3 1f       	adc	r31, r19
    6960:	81 93       	st	Z+, r24
    6962:	91 93       	st	Z+, r25
    6964:	22 50       	subi	r18, 0x02	; 2
    6966:	31 09       	sbc	r19, r1
    6968:	39 83       	std	Y+1, r19	; 0x01
    696a:	28 83       	st	Y, r18
    696c:	3a c0       	rjmp	.+116    	; 0x69e2 <malloc+0x128>
    696e:	20 91 56 01 	lds	r18, 0x0156
    6972:	30 91 57 01 	lds	r19, 0x0157
    6976:	23 2b       	or	r18, r19
    6978:	41 f4       	brne	.+16     	; 0x698a <malloc+0xd0>
    697a:	20 91 62 00 	lds	r18, 0x0062
    697e:	30 91 63 00 	lds	r19, 0x0063
    6982:	30 93 57 01 	sts	0x0157, r19
    6986:	20 93 56 01 	sts	0x0156, r18
    698a:	20 91 60 00 	lds	r18, 0x0060
    698e:	30 91 61 00 	lds	r19, 0x0061
    6992:	21 15       	cp	r18, r1
    6994:	31 05       	cpc	r19, r1
    6996:	41 f4       	brne	.+16     	; 0x69a8 <malloc+0xee>
    6998:	2d b7       	in	r18, 0x3d	; 61
    699a:	3e b7       	in	r19, 0x3e	; 62
    699c:	40 91 64 00 	lds	r20, 0x0064
    69a0:	50 91 65 00 	lds	r21, 0x0065
    69a4:	24 1b       	sub	r18, r20
    69a6:	35 0b       	sbc	r19, r21
    69a8:	e0 91 56 01 	lds	r30, 0x0156
    69ac:	f0 91 57 01 	lds	r31, 0x0157
    69b0:	e2 17       	cp	r30, r18
    69b2:	f3 07       	cpc	r31, r19
    69b4:	a0 f4       	brcc	.+40     	; 0x69de <malloc+0x124>
    69b6:	2e 1b       	sub	r18, r30
    69b8:	3f 0b       	sbc	r19, r31
    69ba:	28 17       	cp	r18, r24
    69bc:	39 07       	cpc	r19, r25
    69be:	78 f0       	brcs	.+30     	; 0x69de <malloc+0x124>
    69c0:	ac 01       	movw	r20, r24
    69c2:	4e 5f       	subi	r20, 0xFE	; 254
    69c4:	5f 4f       	sbci	r21, 0xFF	; 255
    69c6:	24 17       	cp	r18, r20
    69c8:	35 07       	cpc	r19, r21
    69ca:	48 f0       	brcs	.+18     	; 0x69de <malloc+0x124>
    69cc:	4e 0f       	add	r20, r30
    69ce:	5f 1f       	adc	r21, r31
    69d0:	50 93 57 01 	sts	0x0157, r21
    69d4:	40 93 56 01 	sts	0x0156, r20
    69d8:	81 93       	st	Z+, r24
    69da:	91 93       	st	Z+, r25
    69dc:	02 c0       	rjmp	.+4      	; 0x69e2 <malloc+0x128>
    69de:	e0 e0       	ldi	r30, 0x00	; 0
    69e0:	f0 e0       	ldi	r31, 0x00	; 0
    69e2:	cf 01       	movw	r24, r30
    69e4:	df 91       	pop	r29
    69e6:	cf 91       	pop	r28
    69e8:	08 95       	ret

000069ea <free>:
    69ea:	cf 93       	push	r28
    69ec:	df 93       	push	r29
    69ee:	00 97       	sbiw	r24, 0x00	; 0
    69f0:	09 f4       	brne	.+2      	; 0x69f4 <free+0xa>
    69f2:	87 c0       	rjmp	.+270    	; 0x6b02 <free+0x118>
    69f4:	fc 01       	movw	r30, r24
    69f6:	32 97       	sbiw	r30, 0x02	; 2
    69f8:	13 82       	std	Z+3, r1	; 0x03
    69fa:	12 82       	std	Z+2, r1	; 0x02
    69fc:	c0 91 58 01 	lds	r28, 0x0158
    6a00:	d0 91 59 01 	lds	r29, 0x0159
    6a04:	20 97       	sbiw	r28, 0x00	; 0
    6a06:	81 f4       	brne	.+32     	; 0x6a28 <free+0x3e>
    6a08:	20 81       	ld	r18, Z
    6a0a:	31 81       	ldd	r19, Z+1	; 0x01
    6a0c:	28 0f       	add	r18, r24
    6a0e:	39 1f       	adc	r19, r25
    6a10:	80 91 56 01 	lds	r24, 0x0156
    6a14:	90 91 57 01 	lds	r25, 0x0157
    6a18:	82 17       	cp	r24, r18
    6a1a:	93 07       	cpc	r25, r19
    6a1c:	79 f5       	brne	.+94     	; 0x6a7c <free+0x92>
    6a1e:	f0 93 57 01 	sts	0x0157, r31
    6a22:	e0 93 56 01 	sts	0x0156, r30
    6a26:	6d c0       	rjmp	.+218    	; 0x6b02 <free+0x118>
    6a28:	de 01       	movw	r26, r28
    6a2a:	20 e0       	ldi	r18, 0x00	; 0
    6a2c:	30 e0       	ldi	r19, 0x00	; 0
    6a2e:	ae 17       	cp	r26, r30
    6a30:	bf 07       	cpc	r27, r31
    6a32:	50 f4       	brcc	.+20     	; 0x6a48 <free+0x5e>
    6a34:	12 96       	adiw	r26, 0x02	; 2
    6a36:	4d 91       	ld	r20, X+
    6a38:	5c 91       	ld	r21, X
    6a3a:	13 97       	sbiw	r26, 0x03	; 3
    6a3c:	9d 01       	movw	r18, r26
    6a3e:	41 15       	cp	r20, r1
    6a40:	51 05       	cpc	r21, r1
    6a42:	09 f1       	breq	.+66     	; 0x6a86 <free+0x9c>
    6a44:	da 01       	movw	r26, r20
    6a46:	f3 cf       	rjmp	.-26     	; 0x6a2e <free+0x44>
    6a48:	b3 83       	std	Z+3, r27	; 0x03
    6a4a:	a2 83       	std	Z+2, r26	; 0x02
    6a4c:	40 81       	ld	r20, Z
    6a4e:	51 81       	ldd	r21, Z+1	; 0x01
    6a50:	84 0f       	add	r24, r20
    6a52:	95 1f       	adc	r25, r21
    6a54:	8a 17       	cp	r24, r26
    6a56:	9b 07       	cpc	r25, r27
    6a58:	71 f4       	brne	.+28     	; 0x6a76 <free+0x8c>
    6a5a:	8d 91       	ld	r24, X+
    6a5c:	9c 91       	ld	r25, X
    6a5e:	11 97       	sbiw	r26, 0x01	; 1
    6a60:	84 0f       	add	r24, r20
    6a62:	95 1f       	adc	r25, r21
    6a64:	02 96       	adiw	r24, 0x02	; 2
    6a66:	91 83       	std	Z+1, r25	; 0x01
    6a68:	80 83       	st	Z, r24
    6a6a:	12 96       	adiw	r26, 0x02	; 2
    6a6c:	8d 91       	ld	r24, X+
    6a6e:	9c 91       	ld	r25, X
    6a70:	13 97       	sbiw	r26, 0x03	; 3
    6a72:	93 83       	std	Z+3, r25	; 0x03
    6a74:	82 83       	std	Z+2, r24	; 0x02
    6a76:	21 15       	cp	r18, r1
    6a78:	31 05       	cpc	r19, r1
    6a7a:	29 f4       	brne	.+10     	; 0x6a86 <free+0x9c>
    6a7c:	f0 93 59 01 	sts	0x0159, r31
    6a80:	e0 93 58 01 	sts	0x0158, r30
    6a84:	3e c0       	rjmp	.+124    	; 0x6b02 <free+0x118>
    6a86:	d9 01       	movw	r26, r18
    6a88:	13 96       	adiw	r26, 0x03	; 3
    6a8a:	fc 93       	st	X, r31
    6a8c:	ee 93       	st	-X, r30
    6a8e:	12 97       	sbiw	r26, 0x02	; 2
    6a90:	4d 91       	ld	r20, X+
    6a92:	5d 91       	ld	r21, X+
    6a94:	a4 0f       	add	r26, r20
    6a96:	b5 1f       	adc	r27, r21
    6a98:	ea 17       	cp	r30, r26
    6a9a:	fb 07       	cpc	r31, r27
    6a9c:	79 f4       	brne	.+30     	; 0x6abc <free+0xd2>
    6a9e:	80 81       	ld	r24, Z
    6aa0:	91 81       	ldd	r25, Z+1	; 0x01
    6aa2:	84 0f       	add	r24, r20
    6aa4:	95 1f       	adc	r25, r21
    6aa6:	02 96       	adiw	r24, 0x02	; 2
    6aa8:	d9 01       	movw	r26, r18
    6aaa:	11 96       	adiw	r26, 0x01	; 1
    6aac:	9c 93       	st	X, r25
    6aae:	8e 93       	st	-X, r24
    6ab0:	82 81       	ldd	r24, Z+2	; 0x02
    6ab2:	93 81       	ldd	r25, Z+3	; 0x03
    6ab4:	13 96       	adiw	r26, 0x03	; 3
    6ab6:	9c 93       	st	X, r25
    6ab8:	8e 93       	st	-X, r24
    6aba:	12 97       	sbiw	r26, 0x02	; 2
    6abc:	e0 e0       	ldi	r30, 0x00	; 0
    6abe:	f0 e0       	ldi	r31, 0x00	; 0
    6ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    6ac4:	00 97       	sbiw	r24, 0x00	; 0
    6ac6:	19 f0       	breq	.+6      	; 0x6ace <free+0xe4>
    6ac8:	fe 01       	movw	r30, r28
    6aca:	ec 01       	movw	r28, r24
    6acc:	f9 cf       	rjmp	.-14     	; 0x6ac0 <free+0xd6>
    6ace:	ce 01       	movw	r24, r28
    6ad0:	02 96       	adiw	r24, 0x02	; 2
    6ad2:	28 81       	ld	r18, Y
    6ad4:	39 81       	ldd	r19, Y+1	; 0x01
    6ad6:	82 0f       	add	r24, r18
    6ad8:	93 1f       	adc	r25, r19
    6ada:	20 91 56 01 	lds	r18, 0x0156
    6ade:	30 91 57 01 	lds	r19, 0x0157
    6ae2:	28 17       	cp	r18, r24
    6ae4:	39 07       	cpc	r19, r25
    6ae6:	69 f4       	brne	.+26     	; 0x6b02 <free+0x118>
    6ae8:	30 97       	sbiw	r30, 0x00	; 0
    6aea:	29 f4       	brne	.+10     	; 0x6af6 <free+0x10c>
    6aec:	10 92 59 01 	sts	0x0159, r1
    6af0:	10 92 58 01 	sts	0x0158, r1
    6af4:	02 c0       	rjmp	.+4      	; 0x6afa <free+0x110>
    6af6:	13 82       	std	Z+3, r1	; 0x03
    6af8:	12 82       	std	Z+2, r1	; 0x02
    6afa:	d0 93 57 01 	sts	0x0157, r29
    6afe:	c0 93 56 01 	sts	0x0156, r28
    6b02:	df 91       	pop	r29
    6b04:	cf 91       	pop	r28
    6b06:	08 95       	ret

00006b08 <do_rand>:
    6b08:	8f 92       	push	r8
    6b0a:	9f 92       	push	r9
    6b0c:	af 92       	push	r10
    6b0e:	bf 92       	push	r11
    6b10:	cf 92       	push	r12
    6b12:	df 92       	push	r13
    6b14:	ef 92       	push	r14
    6b16:	ff 92       	push	r15
    6b18:	cf 93       	push	r28
    6b1a:	df 93       	push	r29
    6b1c:	ec 01       	movw	r28, r24
    6b1e:	68 81       	ld	r22, Y
    6b20:	79 81       	ldd	r23, Y+1	; 0x01
    6b22:	8a 81       	ldd	r24, Y+2	; 0x02
    6b24:	9b 81       	ldd	r25, Y+3	; 0x03
    6b26:	61 15       	cp	r22, r1
    6b28:	71 05       	cpc	r23, r1
    6b2a:	81 05       	cpc	r24, r1
    6b2c:	91 05       	cpc	r25, r1
    6b2e:	21 f4       	brne	.+8      	; 0x6b38 <do_rand+0x30>
    6b30:	64 e2       	ldi	r22, 0x24	; 36
    6b32:	79 ed       	ldi	r23, 0xD9	; 217
    6b34:	8b e5       	ldi	r24, 0x5B	; 91
    6b36:	97 e0       	ldi	r25, 0x07	; 7
    6b38:	2d e1       	ldi	r18, 0x1D	; 29
    6b3a:	33 ef       	ldi	r19, 0xF3	; 243
    6b3c:	41 e0       	ldi	r20, 0x01	; 1
    6b3e:	50 e0       	ldi	r21, 0x00	; 0
    6b40:	0e 94 25 3a 	call	0x744a	; 0x744a <__divmodsi4>
    6b44:	49 01       	movw	r8, r18
    6b46:	5a 01       	movw	r10, r20
    6b48:	9b 01       	movw	r18, r22
    6b4a:	ac 01       	movw	r20, r24
    6b4c:	a7 ea       	ldi	r26, 0xA7	; 167
    6b4e:	b1 e4       	ldi	r27, 0x41	; 65
    6b50:	0e 94 44 3a 	call	0x7488	; 0x7488 <__muluhisi3>
    6b54:	6b 01       	movw	r12, r22
    6b56:	7c 01       	movw	r14, r24
    6b58:	ac ee       	ldi	r26, 0xEC	; 236
    6b5a:	b4 ef       	ldi	r27, 0xF4	; 244
    6b5c:	a5 01       	movw	r20, r10
    6b5e:	94 01       	movw	r18, r8
    6b60:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <__mulohisi3>
    6b64:	c6 0e       	add	r12, r22
    6b66:	d7 1e       	adc	r13, r23
    6b68:	e8 1e       	adc	r14, r24
    6b6a:	f9 1e       	adc	r15, r25
    6b6c:	f7 fe       	sbrs	r15, 7
    6b6e:	06 c0       	rjmp	.+12     	; 0x6b7c <do_rand+0x74>
    6b70:	81 e0       	ldi	r24, 0x01	; 1
    6b72:	c8 1a       	sub	r12, r24
    6b74:	d1 08       	sbc	r13, r1
    6b76:	e1 08       	sbc	r14, r1
    6b78:	80 e8       	ldi	r24, 0x80	; 128
    6b7a:	f8 0a       	sbc	r15, r24
    6b7c:	c8 82       	st	Y, r12
    6b7e:	d9 82       	std	Y+1, r13	; 0x01
    6b80:	ea 82       	std	Y+2, r14	; 0x02
    6b82:	fb 82       	std	Y+3, r15	; 0x03
    6b84:	c6 01       	movw	r24, r12
    6b86:	9f 77       	andi	r25, 0x7F	; 127
    6b88:	df 91       	pop	r29
    6b8a:	cf 91       	pop	r28
    6b8c:	ff 90       	pop	r15
    6b8e:	ef 90       	pop	r14
    6b90:	df 90       	pop	r13
    6b92:	cf 90       	pop	r12
    6b94:	bf 90       	pop	r11
    6b96:	af 90       	pop	r10
    6b98:	9f 90       	pop	r9
    6b9a:	8f 90       	pop	r8
    6b9c:	08 95       	ret

00006b9e <rand_r>:
    6b9e:	0e 94 84 35 	call	0x6b08	; 0x6b08 <do_rand>
    6ba2:	08 95       	ret

00006ba4 <rand>:
    6ba4:	86 e6       	ldi	r24, 0x66	; 102
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	0e 94 84 35 	call	0x6b08	; 0x6b08 <do_rand>
    6bac:	08 95       	ret

00006bae <srand>:
    6bae:	a0 e0       	ldi	r26, 0x00	; 0
    6bb0:	b0 e0       	ldi	r27, 0x00	; 0
    6bb2:	80 93 66 00 	sts	0x0066, r24
    6bb6:	90 93 67 00 	sts	0x0067, r25
    6bba:	a0 93 68 00 	sts	0x0068, r26
    6bbe:	b0 93 69 00 	sts	0x0069, r27
    6bc2:	08 95       	ret

00006bc4 <strtol>:
    6bc4:	2f 92       	push	r2
    6bc6:	3f 92       	push	r3
    6bc8:	5f 92       	push	r5
    6bca:	6f 92       	push	r6
    6bcc:	7f 92       	push	r7
    6bce:	8f 92       	push	r8
    6bd0:	9f 92       	push	r9
    6bd2:	af 92       	push	r10
    6bd4:	bf 92       	push	r11
    6bd6:	cf 92       	push	r12
    6bd8:	df 92       	push	r13
    6bda:	ef 92       	push	r14
    6bdc:	ff 92       	push	r15
    6bde:	0f 93       	push	r16
    6be0:	1f 93       	push	r17
    6be2:	cf 93       	push	r28
    6be4:	df 93       	push	r29
    6be6:	8b 01       	movw	r16, r22
    6be8:	ea 01       	movw	r28, r20
    6bea:	61 15       	cp	r22, r1
    6bec:	71 05       	cpc	r23, r1
    6bee:	21 f0       	breq	.+8      	; 0x6bf8 <strtol+0x34>
    6bf0:	db 01       	movw	r26, r22
    6bf2:	8c 93       	st	X, r24
    6bf4:	11 96       	adiw	r26, 0x01	; 1
    6bf6:	9c 93       	st	X, r25
    6bf8:	20 97       	sbiw	r28, 0x00	; 0
    6bfa:	39 f0       	breq	.+14     	; 0x6c0a <strtol+0x46>
    6bfc:	9e 01       	movw	r18, r28
    6bfe:	22 50       	subi	r18, 0x02	; 2
    6c00:	31 09       	sbc	r19, r1
    6c02:	23 32       	cpi	r18, 0x23	; 35
    6c04:	31 05       	cpc	r19, r1
    6c06:	08 f0       	brcs	.+2      	; 0x6c0a <strtol+0x46>
    6c08:	fb c0       	rjmp	.+502    	; 0x6e00 <strtol+0x23c>
    6c0a:	7c 01       	movw	r14, r24
    6c0c:	67 01       	movw	r12, r14
    6c0e:	bf ef       	ldi	r27, 0xFF	; 255
    6c10:	cb 1a       	sub	r12, r27
    6c12:	db 0a       	sbc	r13, r27
    6c14:	56 01       	movw	r10, r12
    6c16:	f7 01       	movw	r30, r14
    6c18:	60 80       	ld	r6, Z
    6c1a:	86 2d       	mov	r24, r6
    6c1c:	90 e0       	ldi	r25, 0x00	; 0
    6c1e:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <isspace>
    6c22:	89 2b       	or	r24, r25
    6c24:	11 f0       	breq	.+4      	; 0x6c2a <strtol+0x66>
    6c26:	76 01       	movw	r14, r12
    6c28:	f1 cf       	rjmp	.-30     	; 0x6c0c <strtol+0x48>
    6c2a:	fd e2       	ldi	r31, 0x2D	; 45
    6c2c:	6f 12       	cpse	r6, r31
    6c2e:	0a c0       	rjmp	.+20     	; 0x6c44 <strtol+0x80>
    6c30:	57 01       	movw	r10, r14
    6c32:	82 e0       	ldi	r24, 0x02	; 2
    6c34:	a8 0e       	add	r10, r24
    6c36:	b1 1c       	adc	r11, r1
    6c38:	d7 01       	movw	r26, r14
    6c3a:	11 96       	adiw	r26, 0x01	; 1
    6c3c:	6c 90       	ld	r6, X
    6c3e:	77 24       	eor	r7, r7
    6c40:	73 94       	inc	r7
    6c42:	0b c0       	rjmp	.+22     	; 0x6c5a <strtol+0x96>
    6c44:	bb e2       	ldi	r27, 0x2B	; 43
    6c46:	6b 12       	cpse	r6, r27
    6c48:	07 c0       	rjmp	.+14     	; 0x6c58 <strtol+0x94>
    6c4a:	57 01       	movw	r10, r14
    6c4c:	e2 e0       	ldi	r30, 0x02	; 2
    6c4e:	ae 0e       	add	r10, r30
    6c50:	b1 1c       	adc	r11, r1
    6c52:	d7 01       	movw	r26, r14
    6c54:	11 96       	adiw	r26, 0x01	; 1
    6c56:	6c 90       	ld	r6, X
    6c58:	71 2c       	mov	r7, r1
    6c5a:	ce 01       	movw	r24, r28
    6c5c:	8f 7e       	andi	r24, 0xEF	; 239
    6c5e:	89 2b       	or	r24, r25
    6c60:	89 f4       	brne	.+34     	; 0x6c84 <strtol+0xc0>
    6c62:	b0 e3       	ldi	r27, 0x30	; 48
    6c64:	6b 12       	cpse	r6, r27
    6c66:	22 c0       	rjmp	.+68     	; 0x6cac <strtol+0xe8>
    6c68:	f5 01       	movw	r30, r10
    6c6a:	80 81       	ld	r24, Z
    6c6c:	8f 7d       	andi	r24, 0xDF	; 223
    6c6e:	88 35       	cpi	r24, 0x58	; 88
    6c70:	41 f5       	brne	.+80     	; 0x6cc2 <strtol+0xfe>
    6c72:	61 80       	ldd	r6, Z+1	; 0x01
    6c74:	f2 e0       	ldi	r31, 0x02	; 2
    6c76:	af 0e       	add	r10, r31
    6c78:	b1 1c       	adc	r11, r1
    6c7a:	87 2d       	mov	r24, r7
    6c7c:	82 60       	ori	r24, 0x02	; 2
    6c7e:	78 2e       	mov	r7, r24
    6c80:	c0 e1       	ldi	r28, 0x10	; 16
    6c82:	d0 e0       	ldi	r29, 0x00	; 0
    6c84:	c8 30       	cpi	r28, 0x08	; 8
    6c86:	d1 05       	cpc	r29, r1
    6c88:	f1 f0       	breq	.+60     	; 0x6cc6 <strtol+0x102>
    6c8a:	4c f4       	brge	.+18     	; 0x6c9e <strtol+0xda>
    6c8c:	c2 30       	cpi	r28, 0x02	; 2
    6c8e:	d1 05       	cpc	r29, r1
    6c90:	11 f5       	brne	.+68     	; 0x6cd6 <strtol+0x112>
    6c92:	c1 2c       	mov	r12, r1
    6c94:	d1 2c       	mov	r13, r1
    6c96:	e1 2c       	mov	r14, r1
    6c98:	b0 e4       	ldi	r27, 0x40	; 64
    6c9a:	fb 2e       	mov	r15, r27
    6c9c:	2f c0       	rjmp	.+94     	; 0x6cfc <strtol+0x138>
    6c9e:	ca 30       	cpi	r28, 0x0A	; 10
    6ca0:	d1 05       	cpc	r29, r1
    6ca2:	31 f0       	breq	.+12     	; 0x6cb0 <strtol+0xec>
    6ca4:	c0 31       	cpi	r28, 0x10	; 16
    6ca6:	d1 05       	cpc	r29, r1
    6ca8:	21 f1       	breq	.+72     	; 0x6cf2 <strtol+0x12e>
    6caa:	15 c0       	rjmp	.+42     	; 0x6cd6 <strtol+0x112>
    6cac:	20 97       	sbiw	r28, 0x00	; 0
    6cae:	51 f7       	brne	.-44     	; 0x6c84 <strtol+0xc0>
    6cb0:	ca e0       	ldi	r28, 0x0A	; 10
    6cb2:	d0 e0       	ldi	r29, 0x00	; 0
    6cb4:	ac ec       	ldi	r26, 0xCC	; 204
    6cb6:	ca 2e       	mov	r12, r26
    6cb8:	dc 2c       	mov	r13, r12
    6cba:	ec 2c       	mov	r14, r12
    6cbc:	ac e0       	ldi	r26, 0x0C	; 12
    6cbe:	fa 2e       	mov	r15, r26
    6cc0:	1d c0       	rjmp	.+58     	; 0x6cfc <strtol+0x138>
    6cc2:	20 97       	sbiw	r28, 0x00	; 0
    6cc4:	f9 f6       	brne	.-66     	; 0x6c84 <strtol+0xc0>
    6cc6:	c8 e0       	ldi	r28, 0x08	; 8
    6cc8:	d0 e0       	ldi	r29, 0x00	; 0
    6cca:	c1 2c       	mov	r12, r1
    6ccc:	d1 2c       	mov	r13, r1
    6cce:	e1 2c       	mov	r14, r1
    6cd0:	f0 e1       	ldi	r31, 0x10	; 16
    6cd2:	ff 2e       	mov	r15, r31
    6cd4:	13 c0       	rjmp	.+38     	; 0x6cfc <strtol+0x138>
    6cd6:	60 e0       	ldi	r22, 0x00	; 0
    6cd8:	70 e0       	ldi	r23, 0x00	; 0
    6cda:	80 e0       	ldi	r24, 0x00	; 0
    6cdc:	90 e8       	ldi	r25, 0x80	; 128
    6cde:	9e 01       	movw	r18, r28
    6ce0:	44 27       	eor	r20, r20
    6ce2:	37 fd       	sbrc	r19, 7
    6ce4:	40 95       	com	r20
    6ce6:	54 2f       	mov	r21, r20
    6ce8:	0e 94 03 3a 	call	0x7406	; 0x7406 <__udivmodsi4>
    6cec:	69 01       	movw	r12, r18
    6cee:	7a 01       	movw	r14, r20
    6cf0:	05 c0       	rjmp	.+10     	; 0x6cfc <strtol+0x138>
    6cf2:	c1 2c       	mov	r12, r1
    6cf4:	d1 2c       	mov	r13, r1
    6cf6:	e1 2c       	mov	r14, r1
    6cf8:	e8 e0       	ldi	r30, 0x08	; 8
    6cfa:	fe 2e       	mov	r15, r30
    6cfc:	f5 01       	movw	r30, r10
    6cfe:	60 e0       	ldi	r22, 0x00	; 0
    6d00:	20 e0       	ldi	r18, 0x00	; 0
    6d02:	30 e0       	ldi	r19, 0x00	; 0
    6d04:	a9 01       	movw	r20, r18
    6d06:	4e 01       	movw	r8, r28
    6d08:	aa 24       	eor	r10, r10
    6d0a:	97 fc       	sbrc	r9, 7
    6d0c:	a0 94       	com	r10
    6d0e:	ba 2c       	mov	r11, r10
    6d10:	1f 01       	movw	r2, r30
    6d12:	70 ed       	ldi	r23, 0xD0	; 208
    6d14:	57 2e       	mov	r5, r23
    6d16:	56 0c       	add	r5, r6
    6d18:	a9 e0       	ldi	r26, 0x09	; 9
    6d1a:	a5 15       	cp	r26, r5
    6d1c:	70 f4       	brcc	.+28     	; 0x6d3a <strtol+0x176>
    6d1e:	8f eb       	ldi	r24, 0xBF	; 191
    6d20:	86 0d       	add	r24, r6
    6d22:	8a 31       	cpi	r24, 0x1A	; 26
    6d24:	18 f4       	brcc	.+6      	; 0x6d2c <strtol+0x168>
    6d26:	99 ec       	ldi	r25, 0xC9	; 201
    6d28:	59 2e       	mov	r5, r25
    6d2a:	06 c0       	rjmp	.+12     	; 0x6d38 <strtol+0x174>
    6d2c:	8f e9       	ldi	r24, 0x9F	; 159
    6d2e:	86 0d       	add	r24, r6
    6d30:	8a 31       	cpi	r24, 0x1A	; 26
    6d32:	30 f5       	brcc	.+76     	; 0x6d80 <strtol+0x1bc>
    6d34:	89 ea       	ldi	r24, 0xA9	; 169
    6d36:	58 2e       	mov	r5, r24
    6d38:	56 0c       	add	r5, r6
    6d3a:	85 2d       	mov	r24, r5
    6d3c:	90 e0       	ldi	r25, 0x00	; 0
    6d3e:	8c 17       	cp	r24, r28
    6d40:	9d 07       	cpc	r25, r29
    6d42:	f4 f4       	brge	.+60     	; 0x6d80 <strtol+0x1bc>
    6d44:	67 fd       	sbrc	r22, 7
    6d46:	18 c0       	rjmp	.+48     	; 0x6d78 <strtol+0x1b4>
    6d48:	c2 16       	cp	r12, r18
    6d4a:	d3 06       	cpc	r13, r19
    6d4c:	e4 06       	cpc	r14, r20
    6d4e:	f5 06       	cpc	r15, r21
    6d50:	80 f0       	brcs	.+32     	; 0x6d72 <strtol+0x1ae>
    6d52:	c5 01       	movw	r24, r10
    6d54:	b4 01       	movw	r22, r8
    6d56:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <__mulsi3>
    6d5a:	9b 01       	movw	r18, r22
    6d5c:	ac 01       	movw	r20, r24
    6d5e:	25 0d       	add	r18, r5
    6d60:	31 1d       	adc	r19, r1
    6d62:	41 1d       	adc	r20, r1
    6d64:	51 1d       	adc	r21, r1
    6d66:	21 30       	cpi	r18, 0x01	; 1
    6d68:	31 05       	cpc	r19, r1
    6d6a:	41 05       	cpc	r20, r1
    6d6c:	b0 e8       	ldi	r27, 0x80	; 128
    6d6e:	5b 07       	cpc	r21, r27
    6d70:	10 f0       	brcs	.+4      	; 0x6d76 <strtol+0x1b2>
    6d72:	6f ef       	ldi	r22, 0xFF	; 255
    6d74:	01 c0       	rjmp	.+2      	; 0x6d78 <strtol+0x1b4>
    6d76:	61 e0       	ldi	r22, 0x01	; 1
    6d78:	31 96       	adiw	r30, 0x01	; 1
    6d7a:	d1 01       	movw	r26, r2
    6d7c:	6c 90       	ld	r6, X
    6d7e:	c8 cf       	rjmp	.-112    	; 0x6d10 <strtol+0x14c>
    6d80:	87 2d       	mov	r24, r7
    6d82:	81 70       	andi	r24, 0x01	; 1
    6d84:	01 15       	cp	r16, r1
    6d86:	11 05       	cpc	r17, r1
    6d88:	71 f0       	breq	.+28     	; 0x6da6 <strtol+0x1e2>
    6d8a:	66 23       	and	r22, r22
    6d8c:	29 f0       	breq	.+10     	; 0x6d98 <strtol+0x1d4>
    6d8e:	31 97       	sbiw	r30, 0x01	; 1
    6d90:	d8 01       	movw	r26, r16
    6d92:	ed 93       	st	X+, r30
    6d94:	fc 93       	st	X, r31
    6d96:	07 c0       	rjmp	.+14     	; 0x6da6 <strtol+0x1e2>
    6d98:	71 fe       	sbrs	r7, 1
    6d9a:	19 c0       	rjmp	.+50     	; 0x6dce <strtol+0x20a>
    6d9c:	32 97       	sbiw	r30, 0x02	; 2
    6d9e:	d8 01       	movw	r26, r16
    6da0:	ed 93       	st	X+, r30
    6da2:	fc 93       	st	X, r31
    6da4:	14 c0       	rjmp	.+40     	; 0x6dce <strtol+0x20a>
    6da6:	67 ff       	sbrs	r22, 7
    6da8:	12 c0       	rjmp	.+36     	; 0x6dce <strtol+0x20a>
    6daa:	88 23       	and	r24, r24
    6dac:	29 f0       	breq	.+10     	; 0x6db8 <strtol+0x1f4>
    6dae:	20 e0       	ldi	r18, 0x00	; 0
    6db0:	30 e0       	ldi	r19, 0x00	; 0
    6db2:	40 e0       	ldi	r20, 0x00	; 0
    6db4:	50 e8       	ldi	r21, 0x80	; 128
    6db6:	04 c0       	rjmp	.+8      	; 0x6dc0 <strtol+0x1fc>
    6db8:	2f ef       	ldi	r18, 0xFF	; 255
    6dba:	3f ef       	ldi	r19, 0xFF	; 255
    6dbc:	4f ef       	ldi	r20, 0xFF	; 255
    6dbe:	5f e7       	ldi	r21, 0x7F	; 127
    6dc0:	82 e2       	ldi	r24, 0x22	; 34
    6dc2:	90 e0       	ldi	r25, 0x00	; 0
    6dc4:	90 93 5b 01 	sts	0x015B, r25
    6dc8:	80 93 5a 01 	sts	0x015A, r24
    6dcc:	16 c0       	rjmp	.+44     	; 0x6dfa <strtol+0x236>
    6dce:	88 23       	and	r24, r24
    6dd0:	41 f0       	breq	.+16     	; 0x6de2 <strtol+0x21e>
    6dd2:	50 95       	com	r21
    6dd4:	40 95       	com	r20
    6dd6:	30 95       	com	r19
    6dd8:	21 95       	neg	r18
    6dda:	3f 4f       	sbci	r19, 0xFF	; 255
    6ddc:	4f 4f       	sbci	r20, 0xFF	; 255
    6dde:	5f 4f       	sbci	r21, 0xFF	; 255
    6de0:	0c c0       	rjmp	.+24     	; 0x6dfa <strtol+0x236>
    6de2:	57 ff       	sbrs	r21, 7
    6de4:	0a c0       	rjmp	.+20     	; 0x6dfa <strtol+0x236>
    6de6:	82 e2       	ldi	r24, 0x22	; 34
    6de8:	90 e0       	ldi	r25, 0x00	; 0
    6dea:	90 93 5b 01 	sts	0x015B, r25
    6dee:	80 93 5a 01 	sts	0x015A, r24
    6df2:	2f ef       	ldi	r18, 0xFF	; 255
    6df4:	3f ef       	ldi	r19, 0xFF	; 255
    6df6:	4f ef       	ldi	r20, 0xFF	; 255
    6df8:	5f e7       	ldi	r21, 0x7F	; 127
    6dfa:	b9 01       	movw	r22, r18
    6dfc:	ca 01       	movw	r24, r20
    6dfe:	04 c0       	rjmp	.+8      	; 0x6e08 <strtol+0x244>
    6e00:	60 e0       	ldi	r22, 0x00	; 0
    6e02:	70 e0       	ldi	r23, 0x00	; 0
    6e04:	80 e0       	ldi	r24, 0x00	; 0
    6e06:	90 e0       	ldi	r25, 0x00	; 0
    6e08:	df 91       	pop	r29
    6e0a:	cf 91       	pop	r28
    6e0c:	1f 91       	pop	r17
    6e0e:	0f 91       	pop	r16
    6e10:	ff 90       	pop	r15
    6e12:	ef 90       	pop	r14
    6e14:	df 90       	pop	r13
    6e16:	cf 90       	pop	r12
    6e18:	bf 90       	pop	r11
    6e1a:	af 90       	pop	r10
    6e1c:	9f 90       	pop	r9
    6e1e:	8f 90       	pop	r8
    6e20:	7f 90       	pop	r7
    6e22:	6f 90       	pop	r6
    6e24:	5f 90       	pop	r5
    6e26:	3f 90       	pop	r3
    6e28:	2f 90       	pop	r2
    6e2a:	08 95       	ret

00006e2c <isspace>:
    6e2c:	91 11       	cpse	r25, r1
    6e2e:	15 c2       	rjmp	.+1066   	; 0x725a <__ctype_isfalse>
    6e30:	80 32       	cpi	r24, 0x20	; 32
    6e32:	19 f0       	breq	.+6      	; 0x6e3a <isspace+0xe>
    6e34:	89 50       	subi	r24, 0x09	; 9
    6e36:	85 50       	subi	r24, 0x05	; 5
    6e38:	d0 f7       	brcc	.-12     	; 0x6e2e <isspace+0x2>
    6e3a:	08 95       	ret

00006e3c <strrev>:
    6e3c:	dc 01       	movw	r26, r24
    6e3e:	fc 01       	movw	r30, r24
    6e40:	67 2f       	mov	r22, r23
    6e42:	71 91       	ld	r23, Z+
    6e44:	77 23       	and	r23, r23
    6e46:	e1 f7       	brne	.-8      	; 0x6e40 <strrev+0x4>
    6e48:	32 97       	sbiw	r30, 0x02	; 2
    6e4a:	04 c0       	rjmp	.+8      	; 0x6e54 <strrev+0x18>
    6e4c:	7c 91       	ld	r23, X
    6e4e:	6d 93       	st	X+, r22
    6e50:	70 83       	st	Z, r23
    6e52:	62 91       	ld	r22, -Z
    6e54:	ae 17       	cp	r26, r30
    6e56:	bf 07       	cpc	r27, r31
    6e58:	c8 f3       	brcs	.-14     	; 0x6e4c <strrev+0x10>
    6e5a:	08 95       	ret

00006e5c <sprintf>:
    6e5c:	ae e0       	ldi	r26, 0x0E	; 14
    6e5e:	b0 e0       	ldi	r27, 0x00	; 0
    6e60:	e4 e3       	ldi	r30, 0x34	; 52
    6e62:	f7 e3       	ldi	r31, 0x37	; 55
    6e64:	0c 94 65 3a 	jmp	0x74ca	; 0x74ca <__prologue_saves__+0x1c>
    6e68:	0d 89       	ldd	r16, Y+21	; 0x15
    6e6a:	1e 89       	ldd	r17, Y+22	; 0x16
    6e6c:	86 e0       	ldi	r24, 0x06	; 6
    6e6e:	8c 83       	std	Y+4, r24	; 0x04
    6e70:	1a 83       	std	Y+2, r17	; 0x02
    6e72:	09 83       	std	Y+1, r16	; 0x01
    6e74:	8f ef       	ldi	r24, 0xFF	; 255
    6e76:	9f e7       	ldi	r25, 0x7F	; 127
    6e78:	9e 83       	std	Y+6, r25	; 0x06
    6e7a:	8d 83       	std	Y+5, r24	; 0x05
    6e7c:	ae 01       	movw	r20, r28
    6e7e:	47 5e       	subi	r20, 0xE7	; 231
    6e80:	5f 4f       	sbci	r21, 0xFF	; 255
    6e82:	6f 89       	ldd	r22, Y+23	; 0x17
    6e84:	78 8d       	ldd	r23, Y+24	; 0x18
    6e86:	ce 01       	movw	r24, r28
    6e88:	01 96       	adiw	r24, 0x01	; 1
    6e8a:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <vfprintf>
    6e8e:	ef 81       	ldd	r30, Y+7	; 0x07
    6e90:	f8 85       	ldd	r31, Y+8	; 0x08
    6e92:	e0 0f       	add	r30, r16
    6e94:	f1 1f       	adc	r31, r17
    6e96:	10 82       	st	Z, r1
    6e98:	2e 96       	adiw	r28, 0x0e	; 14
    6e9a:	e4 e0       	ldi	r30, 0x04	; 4
    6e9c:	0c 94 81 3a 	jmp	0x7502	; 0x7502 <__epilogue_restores__+0x1c>

00006ea0 <vfprintf>:
    6ea0:	ac e0       	ldi	r26, 0x0C	; 12
    6ea2:	b0 e0       	ldi	r27, 0x00	; 0
    6ea4:	e6 e5       	ldi	r30, 0x56	; 86
    6ea6:	f7 e3       	ldi	r31, 0x37	; 55
    6ea8:	0c 94 57 3a 	jmp	0x74ae	; 0x74ae <__prologue_saves__>
    6eac:	7c 01       	movw	r14, r24
    6eae:	6b 01       	movw	r12, r22
    6eb0:	8a 01       	movw	r16, r20
    6eb2:	fc 01       	movw	r30, r24
    6eb4:	17 82       	std	Z+7, r1	; 0x07
    6eb6:	16 82       	std	Z+6, r1	; 0x06
    6eb8:	83 81       	ldd	r24, Z+3	; 0x03
    6eba:	81 ff       	sbrs	r24, 1
    6ebc:	bd c1       	rjmp	.+890    	; 0x7238 <vfprintf+0x398>
    6ebe:	ce 01       	movw	r24, r28
    6ec0:	01 96       	adiw	r24, 0x01	; 1
    6ec2:	4c 01       	movw	r8, r24
    6ec4:	f7 01       	movw	r30, r14
    6ec6:	93 81       	ldd	r25, Z+3	; 0x03
    6ec8:	f6 01       	movw	r30, r12
    6eca:	93 fd       	sbrc	r25, 3
    6ecc:	85 91       	lpm	r24, Z+
    6ece:	93 ff       	sbrs	r25, 3
    6ed0:	81 91       	ld	r24, Z+
    6ed2:	6f 01       	movw	r12, r30
    6ed4:	88 23       	and	r24, r24
    6ed6:	09 f4       	brne	.+2      	; 0x6eda <vfprintf+0x3a>
    6ed8:	ab c1       	rjmp	.+854    	; 0x7230 <vfprintf+0x390>
    6eda:	85 32       	cpi	r24, 0x25	; 37
    6edc:	39 f4       	brne	.+14     	; 0x6eec <vfprintf+0x4c>
    6ede:	93 fd       	sbrc	r25, 3
    6ee0:	85 91       	lpm	r24, Z+
    6ee2:	93 ff       	sbrs	r25, 3
    6ee4:	81 91       	ld	r24, Z+
    6ee6:	6f 01       	movw	r12, r30
    6ee8:	85 32       	cpi	r24, 0x25	; 37
    6eea:	29 f4       	brne	.+10     	; 0x6ef6 <vfprintf+0x56>
    6eec:	b7 01       	movw	r22, r14
    6eee:	90 e0       	ldi	r25, 0x00	; 0
    6ef0:	0e 94 46 39 	call	0x728c	; 0x728c <fputc>
    6ef4:	e7 cf       	rjmp	.-50     	; 0x6ec4 <vfprintf+0x24>
    6ef6:	51 2c       	mov	r5, r1
    6ef8:	31 2c       	mov	r3, r1
    6efa:	20 e0       	ldi	r18, 0x00	; 0
    6efc:	20 32       	cpi	r18, 0x20	; 32
    6efe:	a0 f4       	brcc	.+40     	; 0x6f28 <vfprintf+0x88>
    6f00:	8b 32       	cpi	r24, 0x2B	; 43
    6f02:	69 f0       	breq	.+26     	; 0x6f1e <vfprintf+0x7e>
    6f04:	30 f4       	brcc	.+12     	; 0x6f12 <vfprintf+0x72>
    6f06:	80 32       	cpi	r24, 0x20	; 32
    6f08:	59 f0       	breq	.+22     	; 0x6f20 <vfprintf+0x80>
    6f0a:	83 32       	cpi	r24, 0x23	; 35
    6f0c:	69 f4       	brne	.+26     	; 0x6f28 <vfprintf+0x88>
    6f0e:	20 61       	ori	r18, 0x10	; 16
    6f10:	2c c0       	rjmp	.+88     	; 0x6f6a <vfprintf+0xca>
    6f12:	8d 32       	cpi	r24, 0x2D	; 45
    6f14:	39 f0       	breq	.+14     	; 0x6f24 <vfprintf+0x84>
    6f16:	80 33       	cpi	r24, 0x30	; 48
    6f18:	39 f4       	brne	.+14     	; 0x6f28 <vfprintf+0x88>
    6f1a:	21 60       	ori	r18, 0x01	; 1
    6f1c:	26 c0       	rjmp	.+76     	; 0x6f6a <vfprintf+0xca>
    6f1e:	22 60       	ori	r18, 0x02	; 2
    6f20:	24 60       	ori	r18, 0x04	; 4
    6f22:	23 c0       	rjmp	.+70     	; 0x6f6a <vfprintf+0xca>
    6f24:	28 60       	ori	r18, 0x08	; 8
    6f26:	21 c0       	rjmp	.+66     	; 0x6f6a <vfprintf+0xca>
    6f28:	27 fd       	sbrc	r18, 7
    6f2a:	27 c0       	rjmp	.+78     	; 0x6f7a <vfprintf+0xda>
    6f2c:	30 ed       	ldi	r19, 0xD0	; 208
    6f2e:	38 0f       	add	r19, r24
    6f30:	3a 30       	cpi	r19, 0x0A	; 10
    6f32:	78 f4       	brcc	.+30     	; 0x6f52 <vfprintf+0xb2>
    6f34:	26 ff       	sbrs	r18, 6
    6f36:	06 c0       	rjmp	.+12     	; 0x6f44 <vfprintf+0xa4>
    6f38:	fa e0       	ldi	r31, 0x0A	; 10
    6f3a:	5f 9e       	mul	r5, r31
    6f3c:	30 0d       	add	r19, r0
    6f3e:	11 24       	eor	r1, r1
    6f40:	53 2e       	mov	r5, r19
    6f42:	13 c0       	rjmp	.+38     	; 0x6f6a <vfprintf+0xca>
    6f44:	8a e0       	ldi	r24, 0x0A	; 10
    6f46:	38 9e       	mul	r3, r24
    6f48:	30 0d       	add	r19, r0
    6f4a:	11 24       	eor	r1, r1
    6f4c:	33 2e       	mov	r3, r19
    6f4e:	20 62       	ori	r18, 0x20	; 32
    6f50:	0c c0       	rjmp	.+24     	; 0x6f6a <vfprintf+0xca>
    6f52:	8e 32       	cpi	r24, 0x2E	; 46
    6f54:	21 f4       	brne	.+8      	; 0x6f5e <vfprintf+0xbe>
    6f56:	26 fd       	sbrc	r18, 6
    6f58:	6b c1       	rjmp	.+726    	; 0x7230 <vfprintf+0x390>
    6f5a:	20 64       	ori	r18, 0x40	; 64
    6f5c:	06 c0       	rjmp	.+12     	; 0x6f6a <vfprintf+0xca>
    6f5e:	8c 36       	cpi	r24, 0x6C	; 108
    6f60:	11 f4       	brne	.+4      	; 0x6f66 <vfprintf+0xc6>
    6f62:	20 68       	ori	r18, 0x80	; 128
    6f64:	02 c0       	rjmp	.+4      	; 0x6f6a <vfprintf+0xca>
    6f66:	88 36       	cpi	r24, 0x68	; 104
    6f68:	41 f4       	brne	.+16     	; 0x6f7a <vfprintf+0xda>
    6f6a:	f6 01       	movw	r30, r12
    6f6c:	93 fd       	sbrc	r25, 3
    6f6e:	85 91       	lpm	r24, Z+
    6f70:	93 ff       	sbrs	r25, 3
    6f72:	81 91       	ld	r24, Z+
    6f74:	6f 01       	movw	r12, r30
    6f76:	81 11       	cpse	r24, r1
    6f78:	c1 cf       	rjmp	.-126    	; 0x6efc <vfprintf+0x5c>
    6f7a:	98 2f       	mov	r25, r24
    6f7c:	9f 7d       	andi	r25, 0xDF	; 223
    6f7e:	95 54       	subi	r25, 0x45	; 69
    6f80:	93 30       	cpi	r25, 0x03	; 3
    6f82:	28 f4       	brcc	.+10     	; 0x6f8e <vfprintf+0xee>
    6f84:	0c 5f       	subi	r16, 0xFC	; 252
    6f86:	1f 4f       	sbci	r17, 0xFF	; 255
    6f88:	ff e3       	ldi	r31, 0x3F	; 63
    6f8a:	f9 83       	std	Y+1, r31	; 0x01
    6f8c:	0d c0       	rjmp	.+26     	; 0x6fa8 <vfprintf+0x108>
    6f8e:	83 36       	cpi	r24, 0x63	; 99
    6f90:	31 f0       	breq	.+12     	; 0x6f9e <vfprintf+0xfe>
    6f92:	83 37       	cpi	r24, 0x73	; 115
    6f94:	71 f0       	breq	.+28     	; 0x6fb2 <vfprintf+0x112>
    6f96:	83 35       	cpi	r24, 0x53	; 83
    6f98:	09 f0       	breq	.+2      	; 0x6f9c <vfprintf+0xfc>
    6f9a:	5b c0       	rjmp	.+182    	; 0x7052 <vfprintf+0x1b2>
    6f9c:	22 c0       	rjmp	.+68     	; 0x6fe2 <vfprintf+0x142>
    6f9e:	f8 01       	movw	r30, r16
    6fa0:	80 81       	ld	r24, Z
    6fa2:	89 83       	std	Y+1, r24	; 0x01
    6fa4:	0e 5f       	subi	r16, 0xFE	; 254
    6fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    6fa8:	44 24       	eor	r4, r4
    6faa:	43 94       	inc	r4
    6fac:	51 2c       	mov	r5, r1
    6fae:	54 01       	movw	r10, r8
    6fb0:	15 c0       	rjmp	.+42     	; 0x6fdc <vfprintf+0x13c>
    6fb2:	38 01       	movw	r6, r16
    6fb4:	f2 e0       	ldi	r31, 0x02	; 2
    6fb6:	6f 0e       	add	r6, r31
    6fb8:	71 1c       	adc	r7, r1
    6fba:	f8 01       	movw	r30, r16
    6fbc:	a0 80       	ld	r10, Z
    6fbe:	b1 80       	ldd	r11, Z+1	; 0x01
    6fc0:	26 ff       	sbrs	r18, 6
    6fc2:	03 c0       	rjmp	.+6      	; 0x6fca <vfprintf+0x12a>
    6fc4:	65 2d       	mov	r22, r5
    6fc6:	70 e0       	ldi	r23, 0x00	; 0
    6fc8:	02 c0       	rjmp	.+4      	; 0x6fce <vfprintf+0x12e>
    6fca:	6f ef       	ldi	r22, 0xFF	; 255
    6fcc:	7f ef       	ldi	r23, 0xFF	; 255
    6fce:	c5 01       	movw	r24, r10
    6fd0:	2c 87       	std	Y+12, r18	; 0x0c
    6fd2:	0e 94 3b 39 	call	0x7276	; 0x7276 <strnlen>
    6fd6:	2c 01       	movw	r4, r24
    6fd8:	83 01       	movw	r16, r6
    6fda:	2c 85       	ldd	r18, Y+12	; 0x0c
    6fdc:	2f 77       	andi	r18, 0x7F	; 127
    6fde:	22 2e       	mov	r2, r18
    6fe0:	17 c0       	rjmp	.+46     	; 0x7010 <vfprintf+0x170>
    6fe2:	38 01       	movw	r6, r16
    6fe4:	f2 e0       	ldi	r31, 0x02	; 2
    6fe6:	6f 0e       	add	r6, r31
    6fe8:	71 1c       	adc	r7, r1
    6fea:	f8 01       	movw	r30, r16
    6fec:	a0 80       	ld	r10, Z
    6fee:	b1 80       	ldd	r11, Z+1	; 0x01
    6ff0:	26 ff       	sbrs	r18, 6
    6ff2:	03 c0       	rjmp	.+6      	; 0x6ffa <vfprintf+0x15a>
    6ff4:	65 2d       	mov	r22, r5
    6ff6:	70 e0       	ldi	r23, 0x00	; 0
    6ff8:	02 c0       	rjmp	.+4      	; 0x6ffe <vfprintf+0x15e>
    6ffa:	6f ef       	ldi	r22, 0xFF	; 255
    6ffc:	7f ef       	ldi	r23, 0xFF	; 255
    6ffe:	c5 01       	movw	r24, r10
    7000:	2c 87       	std	Y+12, r18	; 0x0c
    7002:	0e 94 30 39 	call	0x7260	; 0x7260 <strnlen_P>
    7006:	2c 01       	movw	r4, r24
    7008:	2c 85       	ldd	r18, Y+12	; 0x0c
    700a:	20 68       	ori	r18, 0x80	; 128
    700c:	22 2e       	mov	r2, r18
    700e:	83 01       	movw	r16, r6
    7010:	23 fc       	sbrc	r2, 3
    7012:	1b c0       	rjmp	.+54     	; 0x704a <vfprintf+0x1aa>
    7014:	83 2d       	mov	r24, r3
    7016:	90 e0       	ldi	r25, 0x00	; 0
    7018:	48 16       	cp	r4, r24
    701a:	59 06       	cpc	r5, r25
    701c:	b0 f4       	brcc	.+44     	; 0x704a <vfprintf+0x1aa>
    701e:	b7 01       	movw	r22, r14
    7020:	80 e2       	ldi	r24, 0x20	; 32
    7022:	90 e0       	ldi	r25, 0x00	; 0
    7024:	0e 94 46 39 	call	0x728c	; 0x728c <fputc>
    7028:	3a 94       	dec	r3
    702a:	f4 cf       	rjmp	.-24     	; 0x7014 <vfprintf+0x174>
    702c:	f5 01       	movw	r30, r10
    702e:	27 fc       	sbrc	r2, 7
    7030:	85 91       	lpm	r24, Z+
    7032:	27 fe       	sbrs	r2, 7
    7034:	81 91       	ld	r24, Z+
    7036:	5f 01       	movw	r10, r30
    7038:	b7 01       	movw	r22, r14
    703a:	90 e0       	ldi	r25, 0x00	; 0
    703c:	0e 94 46 39 	call	0x728c	; 0x728c <fputc>
    7040:	31 10       	cpse	r3, r1
    7042:	3a 94       	dec	r3
    7044:	f1 e0       	ldi	r31, 0x01	; 1
    7046:	4f 1a       	sub	r4, r31
    7048:	51 08       	sbc	r5, r1
    704a:	41 14       	cp	r4, r1
    704c:	51 04       	cpc	r5, r1
    704e:	71 f7       	brne	.-36     	; 0x702c <vfprintf+0x18c>
    7050:	e5 c0       	rjmp	.+458    	; 0x721c <vfprintf+0x37c>
    7052:	84 36       	cpi	r24, 0x64	; 100
    7054:	11 f0       	breq	.+4      	; 0x705a <vfprintf+0x1ba>
    7056:	89 36       	cpi	r24, 0x69	; 105
    7058:	39 f5       	brne	.+78     	; 0x70a8 <vfprintf+0x208>
    705a:	f8 01       	movw	r30, r16
    705c:	27 ff       	sbrs	r18, 7
    705e:	07 c0       	rjmp	.+14     	; 0x706e <vfprintf+0x1ce>
    7060:	60 81       	ld	r22, Z
    7062:	71 81       	ldd	r23, Z+1	; 0x01
    7064:	82 81       	ldd	r24, Z+2	; 0x02
    7066:	93 81       	ldd	r25, Z+3	; 0x03
    7068:	0c 5f       	subi	r16, 0xFC	; 252
    706a:	1f 4f       	sbci	r17, 0xFF	; 255
    706c:	08 c0       	rjmp	.+16     	; 0x707e <vfprintf+0x1de>
    706e:	60 81       	ld	r22, Z
    7070:	71 81       	ldd	r23, Z+1	; 0x01
    7072:	88 27       	eor	r24, r24
    7074:	77 fd       	sbrc	r23, 7
    7076:	80 95       	com	r24
    7078:	98 2f       	mov	r25, r24
    707a:	0e 5f       	subi	r16, 0xFE	; 254
    707c:	1f 4f       	sbci	r17, 0xFF	; 255
    707e:	2f 76       	andi	r18, 0x6F	; 111
    7080:	b2 2e       	mov	r11, r18
    7082:	97 ff       	sbrs	r25, 7
    7084:	09 c0       	rjmp	.+18     	; 0x7098 <vfprintf+0x1f8>
    7086:	90 95       	com	r25
    7088:	80 95       	com	r24
    708a:	70 95       	com	r23
    708c:	61 95       	neg	r22
    708e:	7f 4f       	sbci	r23, 0xFF	; 255
    7090:	8f 4f       	sbci	r24, 0xFF	; 255
    7092:	9f 4f       	sbci	r25, 0xFF	; 255
    7094:	20 68       	ori	r18, 0x80	; 128
    7096:	b2 2e       	mov	r11, r18
    7098:	2a e0       	ldi	r18, 0x0A	; 10
    709a:	30 e0       	ldi	r19, 0x00	; 0
    709c:	a4 01       	movw	r20, r8
    709e:	0e 94 78 39 	call	0x72f0	; 0x72f0 <__ultoa_invert>
    70a2:	a8 2e       	mov	r10, r24
    70a4:	a8 18       	sub	r10, r8
    70a6:	44 c0       	rjmp	.+136    	; 0x7130 <vfprintf+0x290>
    70a8:	85 37       	cpi	r24, 0x75	; 117
    70aa:	29 f4       	brne	.+10     	; 0x70b6 <vfprintf+0x216>
    70ac:	2f 7e       	andi	r18, 0xEF	; 239
    70ae:	b2 2e       	mov	r11, r18
    70b0:	2a e0       	ldi	r18, 0x0A	; 10
    70b2:	30 e0       	ldi	r19, 0x00	; 0
    70b4:	25 c0       	rjmp	.+74     	; 0x7100 <vfprintf+0x260>
    70b6:	f2 2f       	mov	r31, r18
    70b8:	f9 7f       	andi	r31, 0xF9	; 249
    70ba:	bf 2e       	mov	r11, r31
    70bc:	8f 36       	cpi	r24, 0x6F	; 111
    70be:	c1 f0       	breq	.+48     	; 0x70f0 <vfprintf+0x250>
    70c0:	18 f4       	brcc	.+6      	; 0x70c8 <vfprintf+0x228>
    70c2:	88 35       	cpi	r24, 0x58	; 88
    70c4:	79 f0       	breq	.+30     	; 0x70e4 <vfprintf+0x244>
    70c6:	b4 c0       	rjmp	.+360    	; 0x7230 <vfprintf+0x390>
    70c8:	80 37       	cpi	r24, 0x70	; 112
    70ca:	19 f0       	breq	.+6      	; 0x70d2 <vfprintf+0x232>
    70cc:	88 37       	cpi	r24, 0x78	; 120
    70ce:	21 f0       	breq	.+8      	; 0x70d8 <vfprintf+0x238>
    70d0:	af c0       	rjmp	.+350    	; 0x7230 <vfprintf+0x390>
    70d2:	2f 2f       	mov	r18, r31
    70d4:	20 61       	ori	r18, 0x10	; 16
    70d6:	b2 2e       	mov	r11, r18
    70d8:	b4 fe       	sbrs	r11, 4
    70da:	0d c0       	rjmp	.+26     	; 0x70f6 <vfprintf+0x256>
    70dc:	8b 2d       	mov	r24, r11
    70de:	84 60       	ori	r24, 0x04	; 4
    70e0:	b8 2e       	mov	r11, r24
    70e2:	09 c0       	rjmp	.+18     	; 0x70f6 <vfprintf+0x256>
    70e4:	24 ff       	sbrs	r18, 4
    70e6:	0a c0       	rjmp	.+20     	; 0x70fc <vfprintf+0x25c>
    70e8:	9f 2f       	mov	r25, r31
    70ea:	96 60       	ori	r25, 0x06	; 6
    70ec:	b9 2e       	mov	r11, r25
    70ee:	06 c0       	rjmp	.+12     	; 0x70fc <vfprintf+0x25c>
    70f0:	28 e0       	ldi	r18, 0x08	; 8
    70f2:	30 e0       	ldi	r19, 0x00	; 0
    70f4:	05 c0       	rjmp	.+10     	; 0x7100 <vfprintf+0x260>
    70f6:	20 e1       	ldi	r18, 0x10	; 16
    70f8:	30 e0       	ldi	r19, 0x00	; 0
    70fa:	02 c0       	rjmp	.+4      	; 0x7100 <vfprintf+0x260>
    70fc:	20 e1       	ldi	r18, 0x10	; 16
    70fe:	32 e0       	ldi	r19, 0x02	; 2
    7100:	f8 01       	movw	r30, r16
    7102:	b7 fe       	sbrs	r11, 7
    7104:	07 c0       	rjmp	.+14     	; 0x7114 <vfprintf+0x274>
    7106:	60 81       	ld	r22, Z
    7108:	71 81       	ldd	r23, Z+1	; 0x01
    710a:	82 81       	ldd	r24, Z+2	; 0x02
    710c:	93 81       	ldd	r25, Z+3	; 0x03
    710e:	0c 5f       	subi	r16, 0xFC	; 252
    7110:	1f 4f       	sbci	r17, 0xFF	; 255
    7112:	06 c0       	rjmp	.+12     	; 0x7120 <vfprintf+0x280>
    7114:	60 81       	ld	r22, Z
    7116:	71 81       	ldd	r23, Z+1	; 0x01
    7118:	80 e0       	ldi	r24, 0x00	; 0
    711a:	90 e0       	ldi	r25, 0x00	; 0
    711c:	0e 5f       	subi	r16, 0xFE	; 254
    711e:	1f 4f       	sbci	r17, 0xFF	; 255
    7120:	a4 01       	movw	r20, r8
    7122:	0e 94 78 39 	call	0x72f0	; 0x72f0 <__ultoa_invert>
    7126:	a8 2e       	mov	r10, r24
    7128:	a8 18       	sub	r10, r8
    712a:	fb 2d       	mov	r31, r11
    712c:	ff 77       	andi	r31, 0x7F	; 127
    712e:	bf 2e       	mov	r11, r31
    7130:	b6 fe       	sbrs	r11, 6
    7132:	0b c0       	rjmp	.+22     	; 0x714a <vfprintf+0x2aa>
    7134:	2b 2d       	mov	r18, r11
    7136:	2e 7f       	andi	r18, 0xFE	; 254
    7138:	a5 14       	cp	r10, r5
    713a:	50 f4       	brcc	.+20     	; 0x7150 <vfprintf+0x2b0>
    713c:	b4 fe       	sbrs	r11, 4
    713e:	0a c0       	rjmp	.+20     	; 0x7154 <vfprintf+0x2b4>
    7140:	b2 fc       	sbrc	r11, 2
    7142:	08 c0       	rjmp	.+16     	; 0x7154 <vfprintf+0x2b4>
    7144:	2b 2d       	mov	r18, r11
    7146:	2e 7e       	andi	r18, 0xEE	; 238
    7148:	05 c0       	rjmp	.+10     	; 0x7154 <vfprintf+0x2b4>
    714a:	7a 2c       	mov	r7, r10
    714c:	2b 2d       	mov	r18, r11
    714e:	03 c0       	rjmp	.+6      	; 0x7156 <vfprintf+0x2b6>
    7150:	7a 2c       	mov	r7, r10
    7152:	01 c0       	rjmp	.+2      	; 0x7156 <vfprintf+0x2b6>
    7154:	75 2c       	mov	r7, r5
    7156:	24 ff       	sbrs	r18, 4
    7158:	0d c0       	rjmp	.+26     	; 0x7174 <vfprintf+0x2d4>
    715a:	fe 01       	movw	r30, r28
    715c:	ea 0d       	add	r30, r10
    715e:	f1 1d       	adc	r31, r1
    7160:	80 81       	ld	r24, Z
    7162:	80 33       	cpi	r24, 0x30	; 48
    7164:	11 f4       	brne	.+4      	; 0x716a <vfprintf+0x2ca>
    7166:	29 7e       	andi	r18, 0xE9	; 233
    7168:	09 c0       	rjmp	.+18     	; 0x717c <vfprintf+0x2dc>
    716a:	22 ff       	sbrs	r18, 2
    716c:	06 c0       	rjmp	.+12     	; 0x717a <vfprintf+0x2da>
    716e:	73 94       	inc	r7
    7170:	73 94       	inc	r7
    7172:	04 c0       	rjmp	.+8      	; 0x717c <vfprintf+0x2dc>
    7174:	82 2f       	mov	r24, r18
    7176:	86 78       	andi	r24, 0x86	; 134
    7178:	09 f0       	breq	.+2      	; 0x717c <vfprintf+0x2dc>
    717a:	73 94       	inc	r7
    717c:	23 fd       	sbrc	r18, 3
    717e:	13 c0       	rjmp	.+38     	; 0x71a6 <vfprintf+0x306>
    7180:	20 ff       	sbrs	r18, 0
    7182:	06 c0       	rjmp	.+12     	; 0x7190 <vfprintf+0x2f0>
    7184:	5a 2c       	mov	r5, r10
    7186:	73 14       	cp	r7, r3
    7188:	18 f4       	brcc	.+6      	; 0x7190 <vfprintf+0x2f0>
    718a:	53 0c       	add	r5, r3
    718c:	57 18       	sub	r5, r7
    718e:	73 2c       	mov	r7, r3
    7190:	73 14       	cp	r7, r3
    7192:	68 f4       	brcc	.+26     	; 0x71ae <vfprintf+0x30e>
    7194:	b7 01       	movw	r22, r14
    7196:	80 e2       	ldi	r24, 0x20	; 32
    7198:	90 e0       	ldi	r25, 0x00	; 0
    719a:	2c 87       	std	Y+12, r18	; 0x0c
    719c:	0e 94 46 39 	call	0x728c	; 0x728c <fputc>
    71a0:	73 94       	inc	r7
    71a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    71a4:	f5 cf       	rjmp	.-22     	; 0x7190 <vfprintf+0x2f0>
    71a6:	73 14       	cp	r7, r3
    71a8:	10 f4       	brcc	.+4      	; 0x71ae <vfprintf+0x30e>
    71aa:	37 18       	sub	r3, r7
    71ac:	01 c0       	rjmp	.+2      	; 0x71b0 <vfprintf+0x310>
    71ae:	31 2c       	mov	r3, r1
    71b0:	24 ff       	sbrs	r18, 4
    71b2:	12 c0       	rjmp	.+36     	; 0x71d8 <vfprintf+0x338>
    71b4:	b7 01       	movw	r22, r14
    71b6:	80 e3       	ldi	r24, 0x30	; 48
    71b8:	90 e0       	ldi	r25, 0x00	; 0
    71ba:	2c 87       	std	Y+12, r18	; 0x0c
    71bc:	0e 94 46 39 	call	0x728c	; 0x728c <fputc>
    71c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    71c2:	22 ff       	sbrs	r18, 2
    71c4:	17 c0       	rjmp	.+46     	; 0x71f4 <vfprintf+0x354>
    71c6:	21 ff       	sbrs	r18, 1
    71c8:	03 c0       	rjmp	.+6      	; 0x71d0 <vfprintf+0x330>
    71ca:	88 e5       	ldi	r24, 0x58	; 88
    71cc:	90 e0       	ldi	r25, 0x00	; 0
    71ce:	02 c0       	rjmp	.+4      	; 0x71d4 <vfprintf+0x334>
    71d0:	88 e7       	ldi	r24, 0x78	; 120
    71d2:	90 e0       	ldi	r25, 0x00	; 0
    71d4:	b7 01       	movw	r22, r14
    71d6:	0c c0       	rjmp	.+24     	; 0x71f0 <vfprintf+0x350>
    71d8:	82 2f       	mov	r24, r18
    71da:	86 78       	andi	r24, 0x86	; 134
    71dc:	59 f0       	breq	.+22     	; 0x71f4 <vfprintf+0x354>
    71de:	21 fd       	sbrc	r18, 1
    71e0:	02 c0       	rjmp	.+4      	; 0x71e6 <vfprintf+0x346>
    71e2:	80 e2       	ldi	r24, 0x20	; 32
    71e4:	01 c0       	rjmp	.+2      	; 0x71e8 <vfprintf+0x348>
    71e6:	8b e2       	ldi	r24, 0x2B	; 43
    71e8:	27 fd       	sbrc	r18, 7
    71ea:	8d e2       	ldi	r24, 0x2D	; 45
    71ec:	b7 01       	movw	r22, r14
    71ee:	90 e0       	ldi	r25, 0x00	; 0
    71f0:	0e 94 46 39 	call	0x728c	; 0x728c <fputc>
    71f4:	a5 14       	cp	r10, r5
    71f6:	38 f4       	brcc	.+14     	; 0x7206 <vfprintf+0x366>
    71f8:	b7 01       	movw	r22, r14
    71fa:	80 e3       	ldi	r24, 0x30	; 48
    71fc:	90 e0       	ldi	r25, 0x00	; 0
    71fe:	0e 94 46 39 	call	0x728c	; 0x728c <fputc>
    7202:	5a 94       	dec	r5
    7204:	f7 cf       	rjmp	.-18     	; 0x71f4 <vfprintf+0x354>
    7206:	aa 94       	dec	r10
    7208:	f4 01       	movw	r30, r8
    720a:	ea 0d       	add	r30, r10
    720c:	f1 1d       	adc	r31, r1
    720e:	80 81       	ld	r24, Z
    7210:	b7 01       	movw	r22, r14
    7212:	90 e0       	ldi	r25, 0x00	; 0
    7214:	0e 94 46 39 	call	0x728c	; 0x728c <fputc>
    7218:	a1 10       	cpse	r10, r1
    721a:	f5 cf       	rjmp	.-22     	; 0x7206 <vfprintf+0x366>
    721c:	33 20       	and	r3, r3
    721e:	09 f4       	brne	.+2      	; 0x7222 <vfprintf+0x382>
    7220:	51 ce       	rjmp	.-862    	; 0x6ec4 <vfprintf+0x24>
    7222:	b7 01       	movw	r22, r14
    7224:	80 e2       	ldi	r24, 0x20	; 32
    7226:	90 e0       	ldi	r25, 0x00	; 0
    7228:	0e 94 46 39 	call	0x728c	; 0x728c <fputc>
    722c:	3a 94       	dec	r3
    722e:	f6 cf       	rjmp	.-20     	; 0x721c <vfprintf+0x37c>
    7230:	f7 01       	movw	r30, r14
    7232:	86 81       	ldd	r24, Z+6	; 0x06
    7234:	97 81       	ldd	r25, Z+7	; 0x07
    7236:	02 c0       	rjmp	.+4      	; 0x723c <vfprintf+0x39c>
    7238:	8f ef       	ldi	r24, 0xFF	; 255
    723a:	9f ef       	ldi	r25, 0xFF	; 255
    723c:	2c 96       	adiw	r28, 0x0c	; 12
    723e:	e2 e1       	ldi	r30, 0x12	; 18
    7240:	0c 94 73 3a 	jmp	0x74e6	; 0x74e6 <__epilogue_restores__>

00007244 <__eerd_word_m32>:
    7244:	a8 e1       	ldi	r26, 0x18	; 24
    7246:	b0 e0       	ldi	r27, 0x00	; 0
    7248:	42 e0       	ldi	r20, 0x02	; 2
    724a:	50 e0       	ldi	r21, 0x00	; 0
    724c:	0c 94 d8 39 	jmp	0x73b0	; 0x73b0 <__eerd_blraw_m32>

00007250 <__eewr_word_m32>:
    7250:	0e 94 e6 39 	call	0x73cc	; 0x73cc <__eewr_byte_m32>
    7254:	27 2f       	mov	r18, r23
    7256:	0c 94 e7 39 	jmp	0x73ce	; 0x73ce <__eewr_r18_m32>

0000725a <__ctype_isfalse>:
    725a:	99 27       	eor	r25, r25
    725c:	88 27       	eor	r24, r24

0000725e <__ctype_istrue>:
    725e:	08 95       	ret

00007260 <strnlen_P>:
    7260:	fc 01       	movw	r30, r24
    7262:	05 90       	lpm	r0, Z+
    7264:	61 50       	subi	r22, 0x01	; 1
    7266:	70 40       	sbci	r23, 0x00	; 0
    7268:	01 10       	cpse	r0, r1
    726a:	d8 f7       	brcc	.-10     	; 0x7262 <strnlen_P+0x2>
    726c:	80 95       	com	r24
    726e:	90 95       	com	r25
    7270:	8e 0f       	add	r24, r30
    7272:	9f 1f       	adc	r25, r31
    7274:	08 95       	ret

00007276 <strnlen>:
    7276:	fc 01       	movw	r30, r24
    7278:	61 50       	subi	r22, 0x01	; 1
    727a:	70 40       	sbci	r23, 0x00	; 0
    727c:	01 90       	ld	r0, Z+
    727e:	01 10       	cpse	r0, r1
    7280:	d8 f7       	brcc	.-10     	; 0x7278 <strnlen+0x2>
    7282:	80 95       	com	r24
    7284:	90 95       	com	r25
    7286:	8e 0f       	add	r24, r30
    7288:	9f 1f       	adc	r25, r31
    728a:	08 95       	ret

0000728c <fputc>:
    728c:	0f 93       	push	r16
    728e:	1f 93       	push	r17
    7290:	cf 93       	push	r28
    7292:	df 93       	push	r29
    7294:	18 2f       	mov	r17, r24
    7296:	09 2f       	mov	r16, r25
    7298:	eb 01       	movw	r28, r22
    729a:	8b 81       	ldd	r24, Y+3	; 0x03
    729c:	81 fd       	sbrc	r24, 1
    729e:	03 c0       	rjmp	.+6      	; 0x72a6 <fputc+0x1a>
    72a0:	8f ef       	ldi	r24, 0xFF	; 255
    72a2:	9f ef       	ldi	r25, 0xFF	; 255
    72a4:	20 c0       	rjmp	.+64     	; 0x72e6 <fputc+0x5a>
    72a6:	82 ff       	sbrs	r24, 2
    72a8:	10 c0       	rjmp	.+32     	; 0x72ca <fputc+0x3e>
    72aa:	4e 81       	ldd	r20, Y+6	; 0x06
    72ac:	5f 81       	ldd	r21, Y+7	; 0x07
    72ae:	2c 81       	ldd	r18, Y+4	; 0x04
    72b0:	3d 81       	ldd	r19, Y+5	; 0x05
    72b2:	42 17       	cp	r20, r18
    72b4:	53 07       	cpc	r21, r19
    72b6:	7c f4       	brge	.+30     	; 0x72d6 <fputc+0x4a>
    72b8:	e8 81       	ld	r30, Y
    72ba:	f9 81       	ldd	r31, Y+1	; 0x01
    72bc:	9f 01       	movw	r18, r30
    72be:	2f 5f       	subi	r18, 0xFF	; 255
    72c0:	3f 4f       	sbci	r19, 0xFF	; 255
    72c2:	39 83       	std	Y+1, r19	; 0x01
    72c4:	28 83       	st	Y, r18
    72c6:	10 83       	st	Z, r17
    72c8:	06 c0       	rjmp	.+12     	; 0x72d6 <fputc+0x4a>
    72ca:	e8 85       	ldd	r30, Y+8	; 0x08
    72cc:	f9 85       	ldd	r31, Y+9	; 0x09
    72ce:	81 2f       	mov	r24, r17
    72d0:	09 95       	icall
    72d2:	89 2b       	or	r24, r25
    72d4:	29 f7       	brne	.-54     	; 0x72a0 <fputc+0x14>
    72d6:	2e 81       	ldd	r18, Y+6	; 0x06
    72d8:	3f 81       	ldd	r19, Y+7	; 0x07
    72da:	2f 5f       	subi	r18, 0xFF	; 255
    72dc:	3f 4f       	sbci	r19, 0xFF	; 255
    72de:	3f 83       	std	Y+7, r19	; 0x07
    72e0:	2e 83       	std	Y+6, r18	; 0x06
    72e2:	81 2f       	mov	r24, r17
    72e4:	90 2f       	mov	r25, r16
    72e6:	df 91       	pop	r29
    72e8:	cf 91       	pop	r28
    72ea:	1f 91       	pop	r17
    72ec:	0f 91       	pop	r16
    72ee:	08 95       	ret

000072f0 <__ultoa_invert>:
    72f0:	fa 01       	movw	r30, r20
    72f2:	aa 27       	eor	r26, r26
    72f4:	28 30       	cpi	r18, 0x08	; 8
    72f6:	51 f1       	breq	.+84     	; 0x734c <__ultoa_invert+0x5c>
    72f8:	20 31       	cpi	r18, 0x10	; 16
    72fa:	81 f1       	breq	.+96     	; 0x735c <__ultoa_invert+0x6c>
    72fc:	e8 94       	clt
    72fe:	6f 93       	push	r22
    7300:	6e 7f       	andi	r22, 0xFE	; 254
    7302:	6e 5f       	subi	r22, 0xFE	; 254
    7304:	7f 4f       	sbci	r23, 0xFF	; 255
    7306:	8f 4f       	sbci	r24, 0xFF	; 255
    7308:	9f 4f       	sbci	r25, 0xFF	; 255
    730a:	af 4f       	sbci	r26, 0xFF	; 255
    730c:	b1 e0       	ldi	r27, 0x01	; 1
    730e:	3e d0       	rcall	.+124    	; 0x738c <__ultoa_invert+0x9c>
    7310:	b4 e0       	ldi	r27, 0x04	; 4
    7312:	3c d0       	rcall	.+120    	; 0x738c <__ultoa_invert+0x9c>
    7314:	67 0f       	add	r22, r23
    7316:	78 1f       	adc	r23, r24
    7318:	89 1f       	adc	r24, r25
    731a:	9a 1f       	adc	r25, r26
    731c:	a1 1d       	adc	r26, r1
    731e:	68 0f       	add	r22, r24
    7320:	79 1f       	adc	r23, r25
    7322:	8a 1f       	adc	r24, r26
    7324:	91 1d       	adc	r25, r1
    7326:	a1 1d       	adc	r26, r1
    7328:	6a 0f       	add	r22, r26
    732a:	71 1d       	adc	r23, r1
    732c:	81 1d       	adc	r24, r1
    732e:	91 1d       	adc	r25, r1
    7330:	a1 1d       	adc	r26, r1
    7332:	20 d0       	rcall	.+64     	; 0x7374 <__ultoa_invert+0x84>
    7334:	09 f4       	brne	.+2      	; 0x7338 <__ultoa_invert+0x48>
    7336:	68 94       	set
    7338:	3f 91       	pop	r19
    733a:	2a e0       	ldi	r18, 0x0A	; 10
    733c:	26 9f       	mul	r18, r22
    733e:	11 24       	eor	r1, r1
    7340:	30 19       	sub	r19, r0
    7342:	30 5d       	subi	r19, 0xD0	; 208
    7344:	31 93       	st	Z+, r19
    7346:	de f6       	brtc	.-74     	; 0x72fe <__ultoa_invert+0xe>
    7348:	cf 01       	movw	r24, r30
    734a:	08 95       	ret
    734c:	46 2f       	mov	r20, r22
    734e:	47 70       	andi	r20, 0x07	; 7
    7350:	40 5d       	subi	r20, 0xD0	; 208
    7352:	41 93       	st	Z+, r20
    7354:	b3 e0       	ldi	r27, 0x03	; 3
    7356:	0f d0       	rcall	.+30     	; 0x7376 <__ultoa_invert+0x86>
    7358:	c9 f7       	brne	.-14     	; 0x734c <__ultoa_invert+0x5c>
    735a:	f6 cf       	rjmp	.-20     	; 0x7348 <__ultoa_invert+0x58>
    735c:	46 2f       	mov	r20, r22
    735e:	4f 70       	andi	r20, 0x0F	; 15
    7360:	40 5d       	subi	r20, 0xD0	; 208
    7362:	4a 33       	cpi	r20, 0x3A	; 58
    7364:	18 f0       	brcs	.+6      	; 0x736c <__ultoa_invert+0x7c>
    7366:	49 5d       	subi	r20, 0xD9	; 217
    7368:	31 fd       	sbrc	r19, 1
    736a:	40 52       	subi	r20, 0x20	; 32
    736c:	41 93       	st	Z+, r20
    736e:	02 d0       	rcall	.+4      	; 0x7374 <__ultoa_invert+0x84>
    7370:	a9 f7       	brne	.-22     	; 0x735c <__ultoa_invert+0x6c>
    7372:	ea cf       	rjmp	.-44     	; 0x7348 <__ultoa_invert+0x58>
    7374:	b4 e0       	ldi	r27, 0x04	; 4
    7376:	a6 95       	lsr	r26
    7378:	97 95       	ror	r25
    737a:	87 95       	ror	r24
    737c:	77 95       	ror	r23
    737e:	67 95       	ror	r22
    7380:	ba 95       	dec	r27
    7382:	c9 f7       	brne	.-14     	; 0x7376 <__ultoa_invert+0x86>
    7384:	00 97       	sbiw	r24, 0x00	; 0
    7386:	61 05       	cpc	r22, r1
    7388:	71 05       	cpc	r23, r1
    738a:	08 95       	ret
    738c:	9b 01       	movw	r18, r22
    738e:	ac 01       	movw	r20, r24
    7390:	0a 2e       	mov	r0, r26
    7392:	06 94       	lsr	r0
    7394:	57 95       	ror	r21
    7396:	47 95       	ror	r20
    7398:	37 95       	ror	r19
    739a:	27 95       	ror	r18
    739c:	ba 95       	dec	r27
    739e:	c9 f7       	brne	.-14     	; 0x7392 <__ultoa_invert+0xa2>
    73a0:	62 0f       	add	r22, r18
    73a2:	73 1f       	adc	r23, r19
    73a4:	84 1f       	adc	r24, r20
    73a6:	95 1f       	adc	r25, r21
    73a8:	a0 1d       	adc	r26, r0
    73aa:	08 95       	ret

000073ac <__eerd_block_m32>:
    73ac:	dc 01       	movw	r26, r24
    73ae:	cb 01       	movw	r24, r22

000073b0 <__eerd_blraw_m32>:
    73b0:	fc 01       	movw	r30, r24
    73b2:	e1 99       	sbic	0x1c, 1	; 28
    73b4:	fe cf       	rjmp	.-4      	; 0x73b2 <__eerd_blraw_m32+0x2>
    73b6:	06 c0       	rjmp	.+12     	; 0x73c4 <__eerd_blraw_m32+0x14>
    73b8:	ff bb       	out	0x1f, r31	; 31
    73ba:	ee bb       	out	0x1e, r30	; 30
    73bc:	e0 9a       	sbi	0x1c, 0	; 28
    73be:	31 96       	adiw	r30, 0x01	; 1
    73c0:	0d b2       	in	r0, 0x1d	; 29
    73c2:	0d 92       	st	X+, r0
    73c4:	41 50       	subi	r20, 0x01	; 1
    73c6:	50 40       	sbci	r21, 0x00	; 0
    73c8:	b8 f7       	brcc	.-18     	; 0x73b8 <__eerd_blraw_m32+0x8>
    73ca:	08 95       	ret

000073cc <__eewr_byte_m32>:
    73cc:	26 2f       	mov	r18, r22

000073ce <__eewr_r18_m32>:
    73ce:	e1 99       	sbic	0x1c, 1	; 28
    73d0:	fe cf       	rjmp	.-4      	; 0x73ce <__eewr_r18_m32>
    73d2:	9f bb       	out	0x1f, r25	; 31
    73d4:	8e bb       	out	0x1e, r24	; 30
    73d6:	2d bb       	out	0x1d, r18	; 29
    73d8:	0f b6       	in	r0, 0x3f	; 63
    73da:	f8 94       	cli
    73dc:	e2 9a       	sbi	0x1c, 2	; 28
    73de:	e1 9a       	sbi	0x1c, 1	; 28
    73e0:	0f be       	out	0x3f, r0	; 63
    73e2:	01 96       	adiw	r24, 0x01	; 1
    73e4:	08 95       	ret

000073e6 <__mulsi3>:
    73e6:	db 01       	movw	r26, r22
    73e8:	8f 93       	push	r24
    73ea:	9f 93       	push	r25
    73ec:	0e 94 44 3a 	call	0x7488	; 0x7488 <__muluhisi3>
    73f0:	bf 91       	pop	r27
    73f2:	af 91       	pop	r26
    73f4:	a2 9f       	mul	r26, r18
    73f6:	80 0d       	add	r24, r0
    73f8:	91 1d       	adc	r25, r1
    73fa:	a3 9f       	mul	r26, r19
    73fc:	90 0d       	add	r25, r0
    73fe:	b2 9f       	mul	r27, r18
    7400:	90 0d       	add	r25, r0
    7402:	11 24       	eor	r1, r1
    7404:	08 95       	ret

00007406 <__udivmodsi4>:
    7406:	a1 e2       	ldi	r26, 0x21	; 33
    7408:	1a 2e       	mov	r1, r26
    740a:	aa 1b       	sub	r26, r26
    740c:	bb 1b       	sub	r27, r27
    740e:	fd 01       	movw	r30, r26
    7410:	0d c0       	rjmp	.+26     	; 0x742c <__udivmodsi4_ep>

00007412 <__udivmodsi4_loop>:
    7412:	aa 1f       	adc	r26, r26
    7414:	bb 1f       	adc	r27, r27
    7416:	ee 1f       	adc	r30, r30
    7418:	ff 1f       	adc	r31, r31
    741a:	a2 17       	cp	r26, r18
    741c:	b3 07       	cpc	r27, r19
    741e:	e4 07       	cpc	r30, r20
    7420:	f5 07       	cpc	r31, r21
    7422:	20 f0       	brcs	.+8      	; 0x742c <__udivmodsi4_ep>
    7424:	a2 1b       	sub	r26, r18
    7426:	b3 0b       	sbc	r27, r19
    7428:	e4 0b       	sbc	r30, r20
    742a:	f5 0b       	sbc	r31, r21

0000742c <__udivmodsi4_ep>:
    742c:	66 1f       	adc	r22, r22
    742e:	77 1f       	adc	r23, r23
    7430:	88 1f       	adc	r24, r24
    7432:	99 1f       	adc	r25, r25
    7434:	1a 94       	dec	r1
    7436:	69 f7       	brne	.-38     	; 0x7412 <__udivmodsi4_loop>
    7438:	60 95       	com	r22
    743a:	70 95       	com	r23
    743c:	80 95       	com	r24
    743e:	90 95       	com	r25
    7440:	9b 01       	movw	r18, r22
    7442:	ac 01       	movw	r20, r24
    7444:	bd 01       	movw	r22, r26
    7446:	cf 01       	movw	r24, r30
    7448:	08 95       	ret

0000744a <__divmodsi4>:
    744a:	05 2e       	mov	r0, r21
    744c:	97 fb       	bst	r25, 7
    744e:	1e f4       	brtc	.+6      	; 0x7456 <__divmodsi4+0xc>
    7450:	00 94       	com	r0
    7452:	0e 94 3c 3a 	call	0x7478	; 0x7478 <__negsi2>
    7456:	57 fd       	sbrc	r21, 7
    7458:	07 d0       	rcall	.+14     	; 0x7468 <__divmodsi4_neg2>
    745a:	0e 94 03 3a 	call	0x7406	; 0x7406 <__udivmodsi4>
    745e:	07 fc       	sbrc	r0, 7
    7460:	03 d0       	rcall	.+6      	; 0x7468 <__divmodsi4_neg2>
    7462:	4e f4       	brtc	.+18     	; 0x7476 <__divmodsi4_exit>
    7464:	0c 94 3c 3a 	jmp	0x7478	; 0x7478 <__negsi2>

00007468 <__divmodsi4_neg2>:
    7468:	50 95       	com	r21
    746a:	40 95       	com	r20
    746c:	30 95       	com	r19
    746e:	21 95       	neg	r18
    7470:	3f 4f       	sbci	r19, 0xFF	; 255
    7472:	4f 4f       	sbci	r20, 0xFF	; 255
    7474:	5f 4f       	sbci	r21, 0xFF	; 255

00007476 <__divmodsi4_exit>:
    7476:	08 95       	ret

00007478 <__negsi2>:
    7478:	90 95       	com	r25
    747a:	80 95       	com	r24
    747c:	70 95       	com	r23
    747e:	61 95       	neg	r22
    7480:	7f 4f       	sbci	r23, 0xFF	; 255
    7482:	8f 4f       	sbci	r24, 0xFF	; 255
    7484:	9f 4f       	sbci	r25, 0xFF	; 255
    7486:	08 95       	ret

00007488 <__muluhisi3>:
    7488:	0e 94 8e 3a 	call	0x751c	; 0x751c <__umulhisi3>
    748c:	a5 9f       	mul	r26, r21
    748e:	90 0d       	add	r25, r0
    7490:	b4 9f       	mul	r27, r20
    7492:	90 0d       	add	r25, r0
    7494:	a4 9f       	mul	r26, r20
    7496:	80 0d       	add	r24, r0
    7498:	91 1d       	adc	r25, r1
    749a:	11 24       	eor	r1, r1
    749c:	08 95       	ret

0000749e <__mulshisi3>:
    749e:	b7 ff       	sbrs	r27, 7
    74a0:	0c 94 44 3a 	jmp	0x7488	; 0x7488 <__muluhisi3>

000074a4 <__mulohisi3>:
    74a4:	0e 94 44 3a 	call	0x7488	; 0x7488 <__muluhisi3>
    74a8:	82 1b       	sub	r24, r18
    74aa:	93 0b       	sbc	r25, r19
    74ac:	08 95       	ret

000074ae <__prologue_saves__>:
    74ae:	2f 92       	push	r2
    74b0:	3f 92       	push	r3
    74b2:	4f 92       	push	r4
    74b4:	5f 92       	push	r5
    74b6:	6f 92       	push	r6
    74b8:	7f 92       	push	r7
    74ba:	8f 92       	push	r8
    74bc:	9f 92       	push	r9
    74be:	af 92       	push	r10
    74c0:	bf 92       	push	r11
    74c2:	cf 92       	push	r12
    74c4:	df 92       	push	r13
    74c6:	ef 92       	push	r14
    74c8:	ff 92       	push	r15
    74ca:	0f 93       	push	r16
    74cc:	1f 93       	push	r17
    74ce:	cf 93       	push	r28
    74d0:	df 93       	push	r29
    74d2:	cd b7       	in	r28, 0x3d	; 61
    74d4:	de b7       	in	r29, 0x3e	; 62
    74d6:	ca 1b       	sub	r28, r26
    74d8:	db 0b       	sbc	r29, r27
    74da:	0f b6       	in	r0, 0x3f	; 63
    74dc:	f8 94       	cli
    74de:	de bf       	out	0x3e, r29	; 62
    74e0:	0f be       	out	0x3f, r0	; 63
    74e2:	cd bf       	out	0x3d, r28	; 61
    74e4:	09 94       	ijmp

000074e6 <__epilogue_restores__>:
    74e6:	2a 88       	ldd	r2, Y+18	; 0x12
    74e8:	39 88       	ldd	r3, Y+17	; 0x11
    74ea:	48 88       	ldd	r4, Y+16	; 0x10
    74ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    74ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    74f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    74f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    74f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    74f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    74f8:	b9 84       	ldd	r11, Y+9	; 0x09
    74fa:	c8 84       	ldd	r12, Y+8	; 0x08
    74fc:	df 80       	ldd	r13, Y+7	; 0x07
    74fe:	ee 80       	ldd	r14, Y+6	; 0x06
    7500:	fd 80       	ldd	r15, Y+5	; 0x05
    7502:	0c 81       	ldd	r16, Y+4	; 0x04
    7504:	1b 81       	ldd	r17, Y+3	; 0x03
    7506:	aa 81       	ldd	r26, Y+2	; 0x02
    7508:	b9 81       	ldd	r27, Y+1	; 0x01
    750a:	ce 0f       	add	r28, r30
    750c:	d1 1d       	adc	r29, r1
    750e:	0f b6       	in	r0, 0x3f	; 63
    7510:	f8 94       	cli
    7512:	de bf       	out	0x3e, r29	; 62
    7514:	0f be       	out	0x3f, r0	; 63
    7516:	cd bf       	out	0x3d, r28	; 61
    7518:	ed 01       	movw	r28, r26
    751a:	08 95       	ret

0000751c <__umulhisi3>:
    751c:	a2 9f       	mul	r26, r18
    751e:	b0 01       	movw	r22, r0
    7520:	b3 9f       	mul	r27, r19
    7522:	c0 01       	movw	r24, r0
    7524:	a3 9f       	mul	r26, r19
    7526:	70 0d       	add	r23, r0
    7528:	81 1d       	adc	r24, r1
    752a:	11 24       	eor	r1, r1
    752c:	91 1d       	adc	r25, r1
    752e:	b2 9f       	mul	r27, r18
    7530:	70 0d       	add	r23, r0
    7532:	81 1d       	adc	r24, r1
    7534:	11 24       	eor	r1, r1
    7536:	91 1d       	adc	r25, r1
    7538:	08 95       	ret

0000753a <_exit>:
    753a:	f8 94       	cli

0000753c <__stop_program>:
    753c:	ff cf       	rjmp	.-2      	; 0x753c <__stop_program>
