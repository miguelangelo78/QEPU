
QEPU_Project_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000454e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  0000454e  00004602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800108  00800108  000046aa  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000046aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000046ac  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00004708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008b2a  00000000  00000000  00004990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa7  00000000  00000000  0000d4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e6a  00000000  00000000  0000e461  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000eec  00000000  00000000  0000f2cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb4  00000000  00000000  000101b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004bbb  00000000  00000000  00010d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  00015927  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	de 13       	cpse	r29, r30
      56:	f9 13       	cpse	r31, r25
      58:	f6 16       	cp	r15, r22
      5a:	f6 16       	cp	r15, r22
      5c:	f6 16       	cp	r15, r22
      5e:	f6 16       	cp	r15, r22
      60:	f6 16       	cp	r15, r22
      62:	f6 16       	cp	r15, r22
      64:	f6 16       	cp	r15, r22
      66:	ff 13       	cpse	r31, r31
      68:	f6 16       	cp	r15, r22
      6a:	f6 16       	cp	r15, r22
      6c:	f6 16       	cp	r15, r22
      6e:	05 14       	cp	r0, r5
      70:	0d 14       	cp	r0, r13
      72:	15 14       	cp	r1, r5
      74:	3c 14       	cp	r3, r12
      76:	63 14       	cp	r6, r3
      78:	8a 14       	cp	r8, r10
      7a:	b1 14       	cp	r11, r1
      7c:	d8 14       	cp	r13, r8
      7e:	ff 14       	cp	r15, r15
      80:	47 15       	cp	r20, r7
      82:	8f 15       	cp	r24, r15
      84:	d7 15       	cp	r29, r7
      86:	1f 16       	cp	r1, r31
      88:	f6 16       	cp	r15, r22
      8a:	f6 16       	cp	r15, r22
      8c:	f6 16       	cp	r15, r22
      8e:	67 16       	cp	r6, r23
      90:	af 16       	cp	r10, r31
      92:	08 4a       	sbci	r16, 0xA8	; 168
      94:	d7 3b       	cpi	r29, 0xB7	; 183
      96:	3b ce       	rjmp	.-906    	; 0xfffffd0e <__eeprom_end+0xff7efd0c>
      98:	01 6e       	ori	r16, 0xE1	; 225
      9a:	84 bc       	out	0x24, r8	; 36
      9c:	bf fd       	.word	0xfdbf	; ????
      9e:	c1 2f       	mov	r28, r17
      a0:	3d 6c       	ori	r19, 0xCD	; 205
      a2:	74 31       	cpi	r23, 0x14	; 20
      a4:	9a bd       	out	0x2a, r25	; 42
      a6:	56 83       	std	Z+6, r21	; 0x06
      a8:	3d da       	rcall	.-2950   	; 0xfffff524 <__eeprom_end+0xff7ef522>
      aa:	3d 00       	.word	0x003d	; ????
      ac:	c7 7f       	andi	r28, 0xF7	; 247
      ae:	11 be       	out	0x31, r1	; 49
      b0:	d9 e4       	ldi	r29, 0x49	; 73
      b2:	bb 4c       	sbci	r27, 0xCB	; 203
      b4:	3e 91       	ld	r19, -X
      b6:	6b aa       	std	Y+51, r6	; 0x33
      b8:	aa be       	out	0x3a, r10	; 58
      ba:	00 00       	nop
      bc:	00 80       	ld	r0, Z
      be:	3f 07       	cpc	r19, r31
      c0:	2c 7a       	andi	r18, 0xAC	; 172
      c2:	a5 ba       	out	0x15, r10	; 21
      c4:	6c c5       	rjmp	.+2776   	; 0xb9e <_ZN5Gates8ampl2vecEiPiS0_+0xee>
      c6:	90 da       	rcall	.-2784   	; 0xfffff5e8 <__eeprom_end+0xff7ef5e6>
      c8:	3b 93       	.word	0x933b	; ????
      ca:	65 fc       	sbrc	r6, 5
      cc:	8b bc       	out	0x2b, r8	; 43
      ce:	53 f8       	bld	r5, 3
      d0:	10 fd       	sbrc	r17, 0
      d2:	3c 56       	subi	r19, 0x6C	; 108
      d4:	92 83       	std	Z+2, r25	; 0x02
      d6:	4d bd       	out	0x2d, r20	; 45
      d8:	87 9d       	mul	r24, r7
      da:	3a b6       	in	r3, 0x3a	; 58
      dc:	3d cb       	rjmp	.-2438   	; 0xfffff758 <__eeprom_end+0xff7ef756>
      de:	c9 bf       	out	0x39, r28	; 57
      e0:	5b be       	out	0x3b, r5	; 59
      e2:	73 da       	rcall	.-2842   	; 0xfffff5ca <__eeprom_end+0xff7ef5c8>
      e4:	0f c9       	rjmp	.-3554   	; 0xfffff304 <__eeprom_end+0xff7ef302>
      e6:	3f 05       	cpc	r19, r15
      e8:	a8 4c       	sbci	r26, 0xC8	; 200
      ea:	cd b2       	in	r12, 0x1d	; 29
      ec:	d4 4e       	sbci	r29, 0xE4	; 228
      ee:	b9 38       	cpi	r27, 0x89	; 137
      f0:	36 a9       	ldd	r19, Z+54	; 0x36
      f2:	02 0c       	add	r0, r2
      f4:	50 b9       	out	0x00, r21	; 0
      f6:	91 86       	std	Z+9, r9	; 0x09
      f8:	88 08       	sbc	r8, r8
      fa:	3c a6       	std	Y+44, r3	; 0x2c
      fc:	aa aa       	std	Y+50, r10	; 0x32
      fe:	2a be       	out	0x3a, r2	; 58
     100:	00 00       	nop
     102:	00 80       	ld	r0, Z
     104:	3f 08       	sbc	r3, r15
     106:	00 00       	nop
     108:	00 be       	out	0x30, r0	; 48
     10a:	92 24       	eor	r9, r2
     10c:	49 12       	cpse	r4, r25
     10e:	3e ab       	std	Y+54, r19	; 0x36
     110:	aa aa       	std	Y+50, r10	; 0x32
     112:	2a be       	out	0x3a, r2	; 58
     114:	cd cc       	rjmp	.-1638   	; 0xfffffab0 <__eeprom_end+0xff7efaae>
     116:	cc 4c       	sbci	r28, 0xCC	; 204
     118:	3e 00       	.word	0x003e	; ????
     11a:	00 00       	nop
     11c:	80 be       	out	0x30, r8	; 48
     11e:	ab aa       	std	Y+51, r10	; 0x33
     120:	aa aa       	std	Y+50, r10	; 0x32
     122:	3e 00       	.word	0x003e	; ????
     124:	00 00       	nop
     126:	00 bf       	out	0x30, r16	; 48
     128:	00 00       	nop
     12a:	00 80       	ld	r0, Z
     12c:	3f 00       	.word	0x003f	; ????
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	08 41       	sbci	r16, 0x18	; 24
     134:	78 d3       	rcall	.+1776   	; 0x826 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a2>
     136:	bb 43       	sbci	r27, 0x3B	; 59
     138:	87 d1       	rcall	.+782    	; 0x448 <_ZN6EEProm4readEj+0x4a>
     13a:	13 3d       	cpi	r17, 0xD3	; 211
     13c:	19 0e       	add	r1, r25
     13e:	3c c3       	rjmp	.+1656   	; 0x7b8 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x134>
     140:	bd 42       	sbci	r27, 0x2D	; 45
     142:	82 ad       	ldd	r24, Z+58	; 0x3a
     144:	2b 3e       	cpi	r18, 0xEB	; 235
     146:	68 ec       	ldi	r22, 0xC8	; 200
     148:	82 76       	andi	r24, 0x62	; 98
     14a:	be d9       	rcall	.-3204   	; 0xfffff4c8 <__eeprom_end+0xff7ef4c6>
     14c:	8f e1       	ldi	r24, 0x1F	; 31
     14e:	a9 3e       	cpi	r26, 0xE9	; 233
     150:	4c 80       	ldd	r4, Y+4	; 0x04
     152:	ef ff       	.word	0xffef	; ????
     154:	be 01       	movw	r22, r28
     156:	c4 ff       	sbrs	r28, 4
     158:	7f 3f       	cpi	r23, 0xFF	; 255
     15a:	00 00       	nop
     15c:	00 00       	nop
	...

00000160 <__ctors_start>:
     160:	ec 11       	cpse	r30, r12

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf e5       	ldi	r28, 0x5F	; 95
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e6       	ldi	r26, 0x60	; 96
     172:	b0 e0       	ldi	r27, 0x00	; 0
     174:	ee e4       	ldi	r30, 0x4E	; 78
     176:	f5 e4       	ldi	r31, 0x45	; 69
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a8 30       	cpi	r26, 0x08	; 8
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a8 e0       	ldi	r26, 0x08	; 8
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a0 31       	cpi	r26, 0x10	; 16
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>

00000194 <__do_global_ctors>:
     194:	11 e0       	ldi	r17, 0x01	; 1
     196:	c2 e6       	ldi	r28, 0x62	; 98
     198:	d1 e0       	ldi	r29, 0x01	; 1
     19a:	04 c0       	rjmp	.+8      	; 0x1a4 <__do_global_ctors+0x10>
     19c:	22 97       	sbiw	r28, 0x02	; 2
     19e:	fe 01       	movw	r30, r28
     1a0:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__tablejump__>
     1a4:	c0 36       	cpi	r28, 0x60	; 96
     1a6:	d1 07       	cpc	r29, r17
     1a8:	c9 f7       	brne	.-14     	; 0x19c <__do_global_ctors+0x8>
     1aa:	0e 94 80 18 	call	0x3100	; 0x3100 <main>
     1ae:	0c 94 a5 22 	jmp	0x454a	; 0x454a <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	fc 01       	movw	r30, r24
     1bc:	40 83       	st	Z, r20
     1be:	51 83       	std	Z+1, r21	; 0x01
     1c0:	62 83       	std	Z+2, r22	; 0x02
     1c2:	73 83       	std	Z+3, r23	; 0x03
     1c4:	04 83       	std	Z+4, r16	; 0x04
     1c6:	15 83       	std	Z+5, r17	; 0x05
     1c8:	26 83       	std	Z+6, r18	; 0x06
     1ca:	37 83       	std	Z+7, r19	; 0x07
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	08 95       	ret

000001d2 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     1d2:	fc 01       	movw	r30, r24
     1d4:	10 82       	st	Z, r1
     1d6:	11 82       	std	Z+1, r1	; 0x01
     1d8:	12 82       	std	Z+2, r1	; 0x02
     1da:	13 82       	std	Z+3, r1	; 0x03
     1dc:	14 82       	std	Z+4, r1	; 0x04
     1de:	15 82       	std	Z+5, r1	; 0x05
     1e0:	16 82       	std	Z+6, r1	; 0x06
     1e2:	17 82       	std	Z+7, r1	; 0x07
     1e4:	08 95       	ret

000001e6 <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     1e6:	af 92       	push	r10
     1e8:	bf 92       	push	r11
     1ea:	cf 92       	push	r12
     1ec:	df 92       	push	r13
     1ee:	ef 92       	push	r14
     1f0:	ff 92       	push	r15
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
     1fe:	68 97       	sbiw	r28, 0x18	; 24
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	f8 94       	cli
     204:	de bf       	out	0x3e, r29	; 62
     206:	0f be       	out	0x3f, r0	; 63
     208:	cd bf       	out	0x3d, r28	; 61
     20a:	5c 01       	movw	r10, r24
     20c:	09 8b       	std	Y+17, r16	; 0x11
     20e:	1a 8b       	std	Y+18, r17	; 0x12
     210:	2b 8b       	std	Y+19, r18	; 0x13
     212:	3c 8b       	std	Y+20, r19	; 0x14
     214:	4d 8b       	std	Y+21, r20	; 0x15
     216:	5e 8b       	std	Y+22, r21	; 0x16
     218:	6f 8b       	std	Y+23, r22	; 0x17
     21a:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     21c:	2d 89       	ldd	r18, Y+21	; 0x15
     21e:	3e 89       	ldd	r19, Y+22	; 0x16
     220:	4f 89       	ldd	r20, Y+23	; 0x17
     222:	58 8d       	ldd	r21, Y+24	; 0x18
     224:	fc 01       	movw	r30, r24
     226:	64 81       	ldd	r22, Z+4	; 0x04
     228:	75 81       	ldd	r23, Z+5	; 0x05
     22a:	86 81       	ldd	r24, Z+6	; 0x06
     22c:	97 81       	ldd	r25, Z+7	; 0x07
     22e:	0e 94 cc 18 	call	0x3198	; 0x3198 <__addsf3>
     232:	6b 01       	movw	r12, r22
     234:	7c 01       	movw	r14, r24
     236:	29 89       	ldd	r18, Y+17	; 0x11
     238:	3a 89       	ldd	r19, Y+18	; 0x12
     23a:	4b 89       	ldd	r20, Y+19	; 0x13
     23c:	5c 89       	ldd	r21, Y+20	; 0x14
     23e:	f5 01       	movw	r30, r10
     240:	60 81       	ld	r22, Z
     242:	71 81       	ldd	r23, Z+1	; 0x01
     244:	82 81       	ldd	r24, Z+2	; 0x02
     246:	93 81       	ldd	r25, Z+3	; 0x03
     248:	0e 94 cc 18 	call	0x3198	; 0x3198 <__addsf3>
     24c:	ab 01       	movw	r20, r22
     24e:	bc 01       	movw	r22, r24
     250:	97 01       	movw	r18, r14
     252:	86 01       	movw	r16, r12
     254:	ce 01       	movw	r24, r28
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
     25c:	88 e0       	ldi	r24, 0x08	; 8
     25e:	fe 01       	movw	r30, r28
     260:	31 96       	adiw	r30, 0x01	; 1
     262:	de 01       	movw	r26, r28
     264:	19 96       	adiw	r26, 0x09	; 9
     266:	01 90       	ld	r0, Z+
     268:	0d 92       	st	X+, r0
     26a:	8a 95       	dec	r24
     26c:	e1 f7       	brne	.-8      	; 0x266 <_ZN7Complex3addES_+0x80>
     26e:	29 85       	ldd	r18, Y+9	; 0x09
     270:	3a 85       	ldd	r19, Y+10	; 0x0a
     272:	4b 85       	ldd	r20, Y+11	; 0x0b
     274:	5c 85       	ldd	r21, Y+12	; 0x0c
     276:	6d 85       	ldd	r22, Y+13	; 0x0d
     278:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     27a:	8f 85       	ldd	r24, Y+15	; 0x0f
     27c:	98 89       	ldd	r25, Y+16	; 0x10
     27e:	68 96       	adiw	r28, 0x18	; 24
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	de bf       	out	0x3e, r29	; 62
     286:	0f be       	out	0x3f, r0	; 63
     288:	cd bf       	out	0x3d, r28	; 61
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	cf 90       	pop	r12
     29a:	bf 90       	pop	r11
     29c:	af 90       	pop	r10
     29e:	08 95       	ret

000002a0 <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     2a0:	4f 92       	push	r4
     2a2:	5f 92       	push	r5
     2a4:	6f 92       	push	r6
     2a6:	7f 92       	push	r7
     2a8:	8f 92       	push	r8
     2aa:	9f 92       	push	r9
     2ac:	af 92       	push	r10
     2ae:	bf 92       	push	r11
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	a0 97       	sbiw	r28, 0x20	; 32
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	09 8b       	std	Y+17, r16	; 0x11
     2d2:	1a 8b       	std	Y+18, r17	; 0x12
     2d4:	2b 8b       	std	Y+19, r18	; 0x13
     2d6:	3c 8b       	std	Y+20, r19	; 0x14
     2d8:	4d 8b       	std	Y+21, r20	; 0x15
     2da:	5e 8b       	std	Y+22, r21	; 0x16
     2dc:	6f 8b       	std	Y+23, r22	; 0x17
     2de:	78 8f       	std	Y+24, r23	; 0x18
     2e0:	89 88       	ldd	r8, Y+17	; 0x11
     2e2:	9a 88       	ldd	r9, Y+18	; 0x12
     2e4:	ab 88       	ldd	r10, Y+19	; 0x13
     2e6:	bc 88       	ldd	r11, Y+20	; 0x14
     2e8:	2d 89       	ldd	r18, Y+21	; 0x15
     2ea:	3e 89       	ldd	r19, Y+22	; 0x16
     2ec:	4f 89       	ldd	r20, Y+23	; 0x17
     2ee:	58 8d       	ldd	r21, Y+24	; 0x18
     2f0:	2d 8f       	std	Y+29, r18	; 0x1d
     2f2:	3e 8f       	std	Y+30, r19	; 0x1e
     2f4:	4f 8f       	std	Y+31, r20	; 0x1f
     2f6:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     2f8:	fc 01       	movw	r30, r24
     2fa:	c0 80       	ld	r12, Z
     2fc:	d1 80       	ldd	r13, Z+1	; 0x01
     2fe:	e2 80       	ldd	r14, Z+2	; 0x02
     300:	f3 80       	ldd	r15, Z+3	; 0x03
     302:	24 81       	ldd	r18, Z+4	; 0x04
     304:	35 81       	ldd	r19, Z+5	; 0x05
     306:	46 81       	ldd	r20, Z+6	; 0x06
     308:	57 81       	ldd	r21, Z+7	; 0x07
     30a:	29 8f       	std	Y+25, r18	; 0x19
     30c:	3a 8f       	std	Y+26, r19	; 0x1a
     30e:	4b 8f       	std	Y+27, r20	; 0x1b
     310:	5c 8f       	std	Y+28, r21	; 0x1c
     312:	2d 8d       	ldd	r18, Y+29	; 0x1d
     314:	3e 8d       	ldd	r19, Y+30	; 0x1e
     316:	4f 8d       	ldd	r20, Y+31	; 0x1f
     318:	58 a1       	ldd	r21, Y+32	; 0x20
     31a:	c7 01       	movw	r24, r14
     31c:	b6 01       	movw	r22, r12
     31e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     322:	2b 01       	movw	r4, r22
     324:	3c 01       	movw	r6, r24
     326:	a5 01       	movw	r20, r10
     328:	94 01       	movw	r18, r8
     32a:	69 8d       	ldd	r22, Y+25	; 0x19
     32c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     32e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     330:	9c 8d       	ldd	r25, Y+28	; 0x1c
     332:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     336:	9b 01       	movw	r18, r22
     338:	ac 01       	movw	r20, r24
     33a:	c3 01       	movw	r24, r6
     33c:	b2 01       	movw	r22, r4
     33e:	0e 94 cc 18 	call	0x3198	; 0x3198 <__addsf3>
     342:	2b 01       	movw	r4, r22
     344:	3c 01       	movw	r6, r24
     346:	a5 01       	movw	r20, r10
     348:	94 01       	movw	r18, r8
     34a:	c7 01       	movw	r24, r14
     34c:	b6 01       	movw	r22, r12
     34e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     352:	6b 01       	movw	r12, r22
     354:	7c 01       	movw	r14, r24
     356:	2d 8d       	ldd	r18, Y+29	; 0x1d
     358:	3e 8d       	ldd	r19, Y+30	; 0x1e
     35a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     35c:	58 a1       	ldd	r21, Y+32	; 0x20
     35e:	69 8d       	ldd	r22, Y+25	; 0x19
     360:	7a 8d       	ldd	r23, Y+26	; 0x1a
     362:	8b 8d       	ldd	r24, Y+27	; 0x1b
     364:	9c 8d       	ldd	r25, Y+28	; 0x1c
     366:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     36a:	9b 01       	movw	r18, r22
     36c:	ac 01       	movw	r20, r24
     36e:	c7 01       	movw	r24, r14
     370:	b6 01       	movw	r22, r12
     372:	0e 94 cb 18 	call	0x3196	; 0x3196 <__subsf3>
     376:	ab 01       	movw	r20, r22
     378:	bc 01       	movw	r22, r24
     37a:	93 01       	movw	r18, r6
     37c:	82 01       	movw	r16, r4
     37e:	ce 01       	movw	r24, r28
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
     386:	88 e0       	ldi	r24, 0x08	; 8
     388:	fe 01       	movw	r30, r28
     38a:	31 96       	adiw	r30, 0x01	; 1
     38c:	de 01       	movw	r26, r28
     38e:	19 96       	adiw	r26, 0x09	; 9
     390:	01 90       	ld	r0, Z+
     392:	0d 92       	st	X+, r0
     394:	8a 95       	dec	r24
     396:	e1 f7       	brne	.-8      	; 0x390 <_ZN7Complex3mulES_+0xf0>
     398:	29 85       	ldd	r18, Y+9	; 0x09
     39a:	3a 85       	ldd	r19, Y+10	; 0x0a
     39c:	4b 85       	ldd	r20, Y+11	; 0x0b
     39e:	5c 85       	ldd	r21, Y+12	; 0x0c
     3a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     3a2:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     3a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     3a6:	98 89       	ldd	r25, Y+16	; 0x10
     3a8:	a0 96       	adiw	r28, 0x20	; 32
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	ff 90       	pop	r15
     3be:	ef 90       	pop	r14
     3c0:	df 90       	pop	r13
     3c2:	cf 90       	pop	r12
     3c4:	bf 90       	pop	r11
     3c6:	af 90       	pop	r10
     3c8:	9f 90       	pop	r9
     3ca:	8f 90       	pop	r8
     3cc:	7f 90       	pop	r7
     3ce:	6f 90       	pop	r6
     3d0:	5f 90       	pop	r5
     3d2:	4f 90       	pop	r4
     3d4:	08 95       	ret

000003d6 <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 81       	ld	r18, Z
     3da:	31 81       	ldd	r19, Z+1	; 0x01
     3dc:	42 81       	ldd	r20, Z+2	; 0x02
     3de:	53 81       	ldd	r21, Z+3	; 0x03
     3e0:	64 81       	ldd	r22, Z+4	; 0x04
     3e2:	75 81       	ldd	r23, Z+5	; 0x05
     3e4:	86 81       	ldd	r24, Z+6	; 0x06
     3e6:	97 81       	ldd	r25, Z+7	; 0x07
     3e8:	0e 94 5f 19 	call	0x32be	; 0x32be <__divsf3>
     3ec:	0e 94 30 19 	call	0x3260	; 0x3260 <atan>
     3f0:	08 95       	ret

000003f2 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     3f2:	85 e0       	ldi	r24, 0x05	; 5
     3f4:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     3f6:	81 b1       	in	r24, 0x01	; 1
     3f8:	8c 7f       	andi	r24, 0xFC	; 252
     3fa:	81 b9       	out	0x01, r24	; 1
     3fc:	08 95       	ret

000003fe <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3fe:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     400:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     402:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     404:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     406:	06 b6       	in	r0, 0x36	; 54
     408:	07 fe       	sbrs	r0, 7
     40a:	fd cf       	rjmp	.-6      	; 0x406 <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     40c:	81 b1       	in	r24, 0x01	; 1
     40e:	88 7f       	andi	r24, 0xF8	; 248
     410:	88 30       	cpi	r24, 0x08	; 8
     412:	09 f0       	breq	.+2      	; 0x416 <_ZN6EEProm4readEj+0x18>
     414:	41 c0       	rjmp	.+130    	; 0x498 <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     416:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     418:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     41a:	06 b6       	in	r0, 0x36	; 54
     41c:	07 fe       	sbrs	r0, 7
     41e:	fd cf       	rjmp	.-6      	; 0x41a <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     420:	81 b1       	in	r24, 0x01	; 1
     422:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     424:	88 31       	cpi	r24, 0x18	; 24
     426:	71 f7       	brne	.-36     	; 0x404 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     428:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     42a:	84 e8       	ldi	r24, 0x84	; 132
     42c:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     42e:	06 b6       	in	r0, 0x36	; 54
     430:	07 fe       	sbrs	r0, 7
     432:	fd cf       	rjmp	.-6      	; 0x42e <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     434:	81 b1       	in	r24, 0x01	; 1
     436:	88 7f       	andi	r24, 0xF8	; 248
     438:	88 32       	cpi	r24, 0x28	; 40
     43a:	81 f5       	brne	.+96     	; 0x49c <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     43c:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     43e:	84 e8       	ldi	r24, 0x84	; 132
     440:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     442:	06 b6       	in	r0, 0x36	; 54
     444:	07 fe       	sbrs	r0, 7
     446:	fd cf       	rjmp	.-6      	; 0x442 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     448:	81 b1       	in	r24, 0x01	; 1
     44a:	88 7f       	andi	r24, 0xF8	; 248
     44c:	88 32       	cpi	r24, 0x28	; 40
     44e:	41 f5       	brne	.+80     	; 0x4a0 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     450:	84 ea       	ldi	r24, 0xA4	; 164
     452:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     454:	06 b6       	in	r0, 0x36	; 54
     456:	07 fe       	sbrs	r0, 7
     458:	fd cf       	rjmp	.-6      	; 0x454 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     45a:	81 b1       	in	r24, 0x01	; 1
     45c:	88 7f       	andi	r24, 0xF8	; 248
     45e:	80 31       	cpi	r24, 0x10	; 16
     460:	09 f5       	brne	.+66     	; 0x4a4 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     462:	81 ea       	ldi	r24, 0xA1	; 161
     464:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     466:	84 e8       	ldi	r24, 0x84	; 132
     468:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     46a:	06 b6       	in	r0, 0x36	; 54
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     470:	81 b1       	in	r24, 0x01	; 1
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	80 34       	cpi	r24, 0x40	; 64
     476:	c1 f4       	brne	.+48     	; 0x4a8 <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     478:	84 e8       	ldi	r24, 0x84	; 132
     47a:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     47c:	06 b6       	in	r0, 0x36	; 54
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     482:	81 b1       	in	r24, 0x01	; 1
     484:	88 7f       	andi	r24, 0xF8	; 248
     486:	88 35       	cpi	r24, 0x58	; 88
     488:	89 f4       	brne	.+34     	; 0x4ac <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     48a:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     48c:	94 e9       	ldi	r25, 0x94	; 148
     48e:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     490:	06 b6       	in	r0, 0x36	; 54
     492:	04 fc       	sbrc	r0, 4
     494:	fd cf       	rjmp	.-6      	; 0x490 <_ZN6EEProm4readEj+0x92>
     496:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     4ae:	08 95       	ret

000004b0 <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	c4 56       	subi	r28, 0x64	; 100
     4c6:	d1 09       	sbc	r29, r1
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	6c 01       	movw	r12, r24
     4d4:	ce 01       	movw	r24, r28
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4da:	00 e0       	ldi	r16, 0x00	; 0
     4dc:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     4de:	b8 01       	movw	r22, r16
     4e0:	c6 01       	movw	r24, r12
     4e2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN6EEProm4readEj>
     4e6:	f7 01       	movw	r30, r14
     4e8:	81 93       	st	Z+, r24
     4ea:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     4ec:	8f 3f       	cpi	r24, 0xFF	; 255
     4ee:	81 f4       	brne	.+32     	; 0x510 <_ZN6EEProm7readallEv+0x60>
     4f0:	32 97       	sbiw	r30, 0x02	; 2
     4f2:	20 81       	ld	r18, Z
     4f4:	2f 3f       	cpi	r18, 0xFF	; 255
     4f6:	61 f4       	brne	.+24     	; 0x510 <_ZN6EEProm7readallEv+0x60>
     4f8:	31 97       	sbiw	r30, 0x01	; 1
     4fa:	20 81       	ld	r18, Z
     4fc:	2f 3f       	cpi	r18, 0xFF	; 255
     4fe:	41 f4       	brne	.+16     	; 0x510 <_ZN6EEProm7readallEv+0x60>
     500:	31 97       	sbiw	r30, 0x01	; 1
     502:	20 81       	ld	r18, Z
     504:	2f 3f       	cpi	r18, 0xFF	; 255
     506:	21 f4       	brne	.+8      	; 0x510 <_ZN6EEProm7readallEv+0x60>
     508:	31 97       	sbiw	r30, 0x01	; 1
     50a:	80 81       	ld	r24, Z
     50c:	8f 3f       	cpi	r24, 0xFF	; 255
     50e:	19 f0       	breq	.+6      	; 0x516 <_ZN6EEProm7readallEv+0x66>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     510:	0f 5f       	subi	r16, 0xFF	; 255
     512:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     514:	e4 cf       	rjmp	.-56     	; 0x4de <_ZN6EEProm7readallEv+0x2e>
	return eeprom_mem;
     516:	ce 01       	movw	r24, r28
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	cc 59       	subi	r28, 0x9C	; 156
     51c:	df 4f       	sbci	r29, 0xFF	; 255
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	df 90       	pop	r13
     536:	cf 90       	pop	r12
     538:	08 95       	ret

0000053a <_Z12print_statesiP7ComplexPc>:

Serial s;
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	7c 01       	movw	r14, r24
     548:	06 2f       	mov	r16, r22
     54a:	17 2f       	mov	r17, r23
	s.writestrln(message);
     54c:	ba 01       	movw	r22, r20
     54e:	89 e0       	ldi	r24, 0x09	; 9
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     556:	1e 14       	cp	r1, r14
     558:	1f 04       	cpc	r1, r15
     55a:	0c f0       	brlt	.+2      	; 0x55e <_Z12print_statesiP7ComplexPc+0x24>
     55c:	47 c0       	rjmp	.+142    	; 0x5ec <_Z12print_statesiP7ComplexPc+0xb2>
     55e:	c0 2f       	mov	r28, r16
     560:	d1 2f       	mov	r29, r17
     562:	00 e0       	ldi	r16, 0x00	; 0
     564:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
     566:	6a e6       	ldi	r22, 0x6A	; 106
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	89 e0       	ldi	r24, 0x09	; 9
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	4a e7       	ldi	r20, 0x7A	; 122
     578:	54 e4       	ldi	r21, 0x44	; 68
     57a:	68 81       	ld	r22, Y
     57c:	79 81       	ldd	r23, Y+1	; 0x01
     57e:	8a 81       	ldd	r24, Y+2	; 0x02
     580:	9b 81       	ldd	r25, Y+3	; 0x03
     582:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     586:	0e 94 c7 19 	call	0x338e	; 0x338e <__fixsfsi>
     58a:	88 e0       	ldi	r24, 0x08	; 8
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_ZN4QEPU5Utils7int2strEi>
     592:	bc 01       	movw	r22, r24
     594:	89 e0       	ldi	r24, 0x09	; 9
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
     59c:	6e e6       	ldi	r22, 0x6E	; 110
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	89 e0       	ldi	r24, 0x09	; 9
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	4a e7       	ldi	r20, 0x7A	; 122
     5ae:	54 e4       	ldi	r21, 0x44	; 68
     5b0:	6c 81       	ldd	r22, Y+4	; 0x04
     5b2:	7d 81       	ldd	r23, Y+5	; 0x05
     5b4:	8e 81       	ldd	r24, Y+6	; 0x06
     5b6:	9f 81       	ldd	r25, Y+7	; 0x07
     5b8:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     5bc:	0e 94 c7 19 	call	0x338e	; 0x338e <__fixsfsi>
     5c0:	88 e0       	ldi	r24, 0x08	; 8
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_ZN4QEPU5Utils7int2strEi>
     5c8:	bc 01       	movw	r22, r24
     5ca:	89 e0       	ldi	r24, 0x09	; 9
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     5d2:	6e ee       	ldi	r22, 0xEE	; 238
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	89 e0       	ldi	r24, 0x09	; 9
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6Serial10writestrlnEPc>
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     5de:	0f 5f       	subi	r16, 0xFF	; 255
     5e0:	1f 4f       	sbci	r17, 0xFF	; 255
     5e2:	28 96       	adiw	r28, 0x08	; 8
     5e4:	0e 15       	cp	r16, r14
     5e6:	1f 05       	cpc	r17, r15
     5e8:	09 f0       	breq	.+2      	; 0x5ec <_Z12print_statesiP7ComplexPc+0xb2>
     5ea:	bd cf       	rjmp	.-134    	; 0x566 <_Z12print_statesiP7ComplexPc+0x2c>
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	08 95       	ret

000005fa <_ZN5Gates10setup_seedEv>:

void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 2a 21 	call	0x4254	; 0x4254 <__eerd_word_m32>
     602:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <srand>
	eeprom_write_word(&randinit,rand()%10000);
     606:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <rand>
     60a:	60 e1       	ldi	r22, 0x10	; 16
     60c:	77 e2       	ldi	r23, 0x27	; 39
     60e:	0e 94 47 1c 	call	0x388e	; 0x388e <__divmodhi4>
     612:	bc 01       	movw	r22, r24
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 30 21 	call	0x4260	; 0x4260 <__eewr_word_m32>
     61c:	08 95       	ret

0000061e <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}
     61e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN5Gates10setup_seedEv>
     622:	08 95       	ret

00000624 <_ZN5Gates5touchEd>:
void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

int Gates::touch(double probability){
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	6a 01       	movw	r12, r20
     632:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     634:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <rand>
     638:	ec 01       	movw	r28, r24
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	3e ef       	ldi	r19, 0xFE	; 254
     63e:	4f ef       	ldi	r20, 0xFF	; 255
     640:	56 e4       	ldi	r21, 0x46	; 70
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     64a:	6b 01       	movw	r12, r22
     64c:	7c 01       	movw	r14, r24
     64e:	be 01       	movw	r22, r28
     650:	88 27       	eor	r24, r24
     652:	77 fd       	sbrc	r23, 7
     654:	80 95       	com	r24
     656:	98 2f       	mov	r25, r24
     658:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__floatsisf>
     65c:	9b 01       	movw	r18, r22
     65e:	ac 01       	movw	r20, r24
     660:	c1 e0       	ldi	r28, 0x01	; 1
     662:	d0 e0       	ldi	r29, 0x00	; 0
     664:	c7 01       	movw	r24, r14
     666:	b6 01       	movw	r22, r12
     668:	0e 94 23 1b 	call	0x3646	; 0x3646 <__gesf2>
     66c:	88 23       	and	r24, r24
     66e:	14 f4       	brge	.+4      	; 0x674 <_ZN5Gates5touchEd+0x50>
     670:	c0 e0       	ldi	r28, 0x00	; 0
     672:	d0 e0       	ldi	r29, 0x00	; 0
}
     674:	ce 01       	movw	r24, r28
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	08 95       	ret

00000684 <_ZN5Gates17reverse_kroneckerEP7Complexi>:
int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
	return result;
}

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     684:	2f 92       	push	r2
     686:	3f 92       	push	r3
     688:	4f 92       	push	r4
     68a:	5f 92       	push	r5
     68c:	6f 92       	push	r6
     68e:	7f 92       	push	r7
     690:	8f 92       	push	r8
     692:	9f 92       	push	r9
     694:	af 92       	push	r10
     696:	bf 92       	push	r11
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	a4 97       	sbiw	r28, 0x24	; 36
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	6b 01       	movw	r12, r22
     6ba:	5a 01       	movw	r10, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     6bc:	ba 01       	movw	r22, r20
     6be:	88 27       	eor	r24, r24
     6c0:	77 fd       	sbrc	r23, 7
     6c2:	80 95       	com	r24
     6c4:	98 2f       	mov	r25, r24
     6c6:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__floatsisf>
     6ca:	0e 94 33 1b 	call	0x3666	; 0x3666 <log>
     6ce:	28 e1       	ldi	r18, 0x18	; 24
     6d0:	32 e7       	ldi	r19, 0x72	; 114
     6d2:	41 e3       	ldi	r20, 0x31	; 49
     6d4:	5f e3       	ldi	r21, 0x3F	; 63
     6d6:	0e 94 5f 19 	call	0x32be	; 0x32be <__divsf3>
     6da:	2b 01       	movw	r4, r22
     6dc:	3c 01       	movw	r6, r24
     6de:	9b 01       	movw	r18, r22
     6e0:	ac 01       	movw	r20, r24
     6e2:	0e 94 cc 18 	call	0x3198	; 0x3198 <__addsf3>
     6e6:	0e 94 c7 19 	call	0x338e	; 0x338e <__fixsfsi>
     6ea:	69 a3       	std	Y+33, r22	; 0x21
     6ec:	7a a3       	std	Y+34, r23	; 0x22
     6ee:	8b a3       	std	Y+35, r24	; 0x23
     6f0:	9c a3       	std	Y+36, r25	; 0x24
     6f2:	09 a1       	ldd	r16, Y+33	; 0x21
     6f4:	1a a1       	ldd	r17, Y+34	; 0x22
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
     6f6:	c8 01       	movw	r24, r16
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
     708:	4c 01       	movw	r8, r24
		
	for(int i=0;i<kron_size;i++)
     70a:	1a 14       	cp	r1, r10
     70c:	1b 04       	cpc	r1, r11
     70e:	0c f0       	brlt	.+2      	; 0x712 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x8e>
     710:	a4 c0       	rjmp	.+328    	; 0x85a <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1d6>
		if(kron[i].re==1){
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e8       	ldi	r20, 0x80	; 128
     718:	5f e3       	ldi	r21, 0x3F	; 63
     71a:	f6 01       	movw	r30, r12
     71c:	60 81       	ld	r22, Z
     71e:	71 81       	ldd	r23, Z+1	; 0x01
     720:	82 81       	ldd	r24, Z+2	; 0x02
     722:	93 81       	ldd	r25, Z+3	; 0x03
     724:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__cmpsf2>
     728:	81 11       	cpse	r24, r1
     72a:	8e c0       	rjmp	.+284    	; 0x848 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1c4>
     72c:	11 c0       	rjmp	.+34     	; 0x750 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xcc>
     72e:	f8 e0       	ldi	r31, 0x08	; 8
     730:	cf 0e       	add	r12, r31
     732:	d1 1c       	adc	r13, r1
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e8       	ldi	r20, 0x80	; 128
     73a:	5f e3       	ldi	r21, 0x3F	; 63
     73c:	f6 01       	movw	r30, r12
     73e:	60 81       	ld	r22, Z
     740:	71 81       	ldd	r23, Z+1	; 0x01
     742:	82 81       	ldd	r24, Z+2	; 0x02
     744:	93 81       	ldd	r25, Z+3	; 0x03
     746:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__cmpsf2>
     74a:	81 11       	cpse	r24, r1
     74c:	7f c0       	rjmp	.+254    	; 0x84c <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1c8>
     74e:	02 c0       	rjmp	.+4      	; 0x754 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xd0>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     750:	e1 2c       	mov	r14, r1
     752:	f1 2c       	mov	r15, r1
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
     754:	c3 01       	movw	r24, r6
     756:	b2 01       	movw	r22, r4
     758:	0e 94 c7 19 	call	0x338e	; 0x338e <__fixsfsi>
     75c:	ab 01       	movw	r20, r22
     75e:	b7 01       	movw	r22, r14
     760:	88 e0       	ldi	r24, 0x08	; 8
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN4QEPU5Utils10int2binstrEii>
     768:	1c 01       	movw	r2, r24
			s.writestrln(toBin);
     76a:	bc 01       	movw	r22, r24
     76c:	89 e0       	ldi	r24, 0x09	; 9
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6Serial10writestrlnEPc>
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     774:	10 16       	cp	r1, r16
     776:	11 06       	cpc	r1, r17
     778:	0c f0       	brlt	.+2      	; 0x77c <_ZN5Gates17reverse_kroneckerEP7Complexi+0xf8>
     77a:	6f c0       	rjmp	.+222    	; 0x85a <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1d6>
     77c:	71 01       	movw	r14, r2
     77e:	54 01       	movw	r10, r8
     780:	64 01       	movw	r12, r8
     782:	f8 e0       	ldi	r31, 0x08	; 8
     784:	cf 0e       	add	r12, r31
     786:	d1 1c       	adc	r13, r1
     788:	69 a0       	ldd	r6, Y+33	; 0x21
     78a:	7a a0       	ldd	r7, Y+34	; 0x22
     78c:	62 0c       	add	r6, r2
     78e:	73 1c       	adc	r7, r3
				if(toBin[j]=='1'){
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     790:	68 94       	set
     792:	33 24       	eor	r3, r3
     794:	33 f8       	bld	r3, 3
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			s.writestrln(toBin);
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
				if(toBin[j]=='1'){
     796:	f7 01       	movw	r30, r14
     798:	81 91       	ld	r24, Z+
     79a:	7f 01       	movw	r14, r30
     79c:	81 33       	cpi	r24, 0x31	; 49
     79e:	29 f5       	brne	.+74     	; 0x7ea <_ZN5Gates17reverse_kroneckerEP7Complexi+0x166>
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
     7a0:	00 e0       	ldi	r16, 0x00	; 0
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	98 01       	movw	r18, r16
     7a6:	b9 01       	movw	r22, r18
     7a8:	a8 01       	movw	r20, r16
     7aa:	ce 01       	movw	r24, r28
     7ac:	49 96       	adiw	r24, 0x19	; 25
     7ae:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
     7b2:	fe 01       	movw	r30, r28
     7b4:	79 96       	adiw	r30, 0x19	; 25
     7b6:	d5 01       	movw	r26, r10
     7b8:	83 2d       	mov	r24, r3
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
     7be:	8a 95       	dec	r24
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <_ZN5Gates17reverse_kroneckerEP7Complexi+0x136>
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0
     7c6:	98 01       	movw	r18, r16
     7c8:	40 e0       	ldi	r20, 0x00	; 0
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	60 e8       	ldi	r22, 0x80	; 128
     7ce:	7f e3       	ldi	r23, 0x3F	; 63
     7d0:	ce 01       	movw	r24, r28
     7d2:	41 96       	adiw	r24, 0x11	; 17
     7d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
     7d8:	fe 01       	movw	r30, r28
     7da:	71 96       	adiw	r30, 0x11	; 17
     7dc:	d6 01       	movw	r26, r12
     7de:	83 2d       	mov	r24, r3
     7e0:	01 90       	ld	r0, Z+
     7e2:	0d 92       	st	X+, r0
     7e4:	8a 95       	dec	r24
     7e6:	e1 f7       	brne	.-8      	; 0x7e0 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x15c>
     7e8:	24 c0       	rjmp	.+72     	; 0x832 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1ae>
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     7ea:	00 e0       	ldi	r16, 0x00	; 0
     7ec:	10 e0       	ldi	r17, 0x00	; 0
     7ee:	98 01       	movw	r18, r16
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	60 e8       	ldi	r22, 0x80	; 128
     7f6:	7f e3       	ldi	r23, 0x3F	; 63
     7f8:	ce 01       	movw	r24, r28
     7fa:	09 96       	adiw	r24, 0x09	; 9
     7fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
     800:	fe 01       	movw	r30, r28
     802:	39 96       	adiw	r30, 0x09	; 9
     804:	d5 01       	movw	r26, r10
     806:	83 2d       	mov	r24, r3
     808:	01 90       	ld	r0, Z+
     80a:	0d 92       	st	X+, r0
     80c:	8a 95       	dec	r24
     80e:	e1 f7       	brne	.-8      	; 0x808 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x184>
     810:	00 e0       	ldi	r16, 0x00	; 0
     812:	10 e0       	ldi	r17, 0x00	; 0
     814:	98 01       	movw	r18, r16
     816:	b9 01       	movw	r22, r18
     818:	a8 01       	movw	r20, r16
     81a:	ce 01       	movw	r24, r28
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
     822:	fe 01       	movw	r30, r28
     824:	31 96       	adiw	r30, 0x01	; 1
     826:	d6 01       	movw	r26, r12
     828:	83 2d       	mov	r24, r3
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	8a 95       	dec	r24
     830:	e1 f7       	brne	.-8      	; 0x82a <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a6>
     832:	f0 e1       	ldi	r31, 0x10	; 16
     834:	af 0e       	add	r10, r31
     836:	b1 1c       	adc	r11, r1
     838:	80 e1       	ldi	r24, 0x10	; 16
     83a:	c8 0e       	add	r12, r24
     83c:	d1 1c       	adc	r13, r1
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			s.writestrln(toBin);
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     83e:	e6 14       	cp	r14, r6
     840:	f7 04       	cpc	r15, r7
     842:	09 f0       	breq	.+2      	; 0x846 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1c2>
     844:	a8 cf       	rjmp	.-176    	; 0x796 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x112>
     846:	09 c0       	rjmp	.+18     	; 0x85a <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1d6>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     848:	e1 2c       	mov	r14, r1
     84a:	f1 2c       	mov	r15, r1
     84c:	ef ef       	ldi	r30, 0xFF	; 255
     84e:	ee 1a       	sub	r14, r30
     850:	fe 0a       	sbc	r15, r30
     852:	ea 14       	cp	r14, r10
     854:	fb 04       	cpc	r15, r11
     856:	09 f0       	breq	.+2      	; 0x85a <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1d6>
     858:	6a cf       	rjmp	.-300    	; 0x72e <_ZN5Gates17reverse_kroneckerEP7Complexi+0xaa>
				}
				index_rev_kro+=2;
			}
			break;
		}
	print_states(reversed_kron_size,reversed_kronecker,"Reversed kronecker AFTER mul: ");
     85a:	45 e7       	ldi	r20, 0x75	; 117
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	b4 01       	movw	r22, r8
     860:	89 a1       	ldd	r24, Y+33	; 0x21
     862:	9a a1       	ldd	r25, Y+34	; 0x22
     864:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z12print_statesiP7ComplexPc>
	return reversed_kronecker;
}
     868:	c4 01       	movw	r24, r8
     86a:	a4 96       	adiw	r28, 0x24	; 36
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	7f 90       	pop	r7
     890:	6f 90       	pop	r6
     892:	5f 90       	pop	r5
     894:	4f 90       	pop	r4
     896:	3f 90       	pop	r3
     898:	2f 90       	pop	r2
     89a:	08 95       	ret

0000089c <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     89c:	2f 92       	push	r2
     89e:	3f 92       	push	r3
     8a0:	4f 92       	push	r4
     8a2:	5f 92       	push	r5
     8a4:	6f 92       	push	r6
     8a6:	7f 92       	push	r7
     8a8:	8f 92       	push	r8
     8aa:	9f 92       	push	r9
     8ac:	af 92       	push	r10
     8ae:	bf 92       	push	r11
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	28 97       	sbiw	r28, 0x08	; 8
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	7c 01       	movw	r14, r24
     8d2:	5b 01       	movw	r10, r22
     8d4:	4a 01       	movw	r8, r20
     8d6:	3e 83       	std	Y+6, r19	; 0x06
     8d8:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     8da:	41 30       	cpi	r20, 0x01	; 1
     8dc:	51 05       	cpc	r21, r1
     8de:	09 f4       	brne	.+2      	; 0x8e2 <_ZN5Gates9kroneckerEP7Complexii+0x46>
     8e0:	b1 c0       	rjmp	.+354    	; 0xa44 <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     8e2:	14 16       	cp	r1, r20
     8e4:	15 06       	cpc	r1, r21
     8e6:	0c f0       	brlt	.+2      	; 0x8ea <_ZN5Gates9kroneckerEP7Complexii+0x4e>
     8e8:	b0 c0       	rjmp	.+352    	; 0xa4a <_ZN5Gates9kroneckerEP7Complexii+0x1ae>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	01 e0       	ldi	r16, 0x01	; 1
     8f0:	10 e0       	ldi	r17, 0x00	; 0
     8f2:	00 0f       	add	r16, r16
     8f4:	11 1f       	adc	r17, r17
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	88 15       	cp	r24, r8
     8fa:	99 05       	cpc	r25, r9
     8fc:	d1 f7       	brne	.-12     	; 0x8f2 <_ZN5Gates9kroneckerEP7Complexii+0x56>
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     8fe:	c8 01       	movw	r24, r16
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	9a 83       	std	Y+2, r25	; 0x02
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     914:	10 16       	cp	r1, r16
     916:	11 06       	cpc	r1, r17
     918:	0c f4       	brge	.+2      	; 0x91c <_ZN5Gates9kroneckerEP7Complexii+0x80>
     91a:	9f c0       	rjmp	.+318    	; 0xa5a <_ZN5Gates9kroneckerEP7Complexii+0x1be>
     91c:	40 c0       	rjmp	.+128    	; 0x99e <_ZN5Gates9kroneckerEP7Complexii+0x102>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     91e:	2e 16       	cp	r2, r30
     920:	3f 06       	cpc	r3, r31
     922:	29 f4       	brne	.+10     	; 0x92e <_ZN5Gates9kroneckerEP7Complexii+0x92>
     924:	9f ef       	ldi	r25, 0xFF	; 255
     926:	49 1a       	sub	r4, r25
     928:	59 0a       	sbc	r5, r25
     92a:	eb 81       	ldd	r30, Y+3	; 0x03
     92c:	fc 81       	ldd	r31, Y+4	; 0x04
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     92e:	7f 01       	movw	r14, r30
     930:	af ef       	ldi	r26, 0xFF	; 255
     932:	ea 1a       	sub	r14, r26
     934:	fa 0a       	sbc	r15, r26
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	ea 0d       	add	r30, r10
     944:	fb 1d       	adc	r31, r11
     946:	00 81       	ld	r16, Z
     948:	11 81       	ldd	r17, Z+1	; 0x01
     94a:	22 81       	ldd	r18, Z+2	; 0x02
     94c:	33 81       	ldd	r19, Z+3	; 0x03
     94e:	44 81       	ldd	r20, Z+4	; 0x04
     950:	55 81       	ldd	r21, Z+5	; 0x05
     952:	66 81       	ldd	r22, Z+6	; 0x06
     954:	77 81       	ldd	r23, Z+7	; 0x07
     956:	c2 01       	movw	r24, r4
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	8a 0d       	add	r24, r10
     966:	9b 1d       	adc	r25, r11
     968:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7Complex3mulES_>
     96c:	ef 81       	ldd	r30, Y+7	; 0x07
     96e:	f8 85       	ldd	r31, Y+8	; 0x08
     970:	20 83       	st	Z, r18
     972:	31 83       	std	Z+1, r19	; 0x01
     974:	42 83       	std	Z+2, r20	; 0x02
     976:	53 83       	std	Z+3, r21	; 0x03
     978:	64 83       	std	Z+4, r22	; 0x04
     97a:	75 83       	std	Z+5, r23	; 0x05
     97c:	86 83       	std	Z+6, r24	; 0x06
     97e:	97 83       	std	Z+7, r25	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     980:	ff ef       	ldi	r31, 0xFF	; 255
     982:	6f 1a       	sub	r6, r31
     984:	7f 0a       	sbc	r7, r31
     986:	8f 81       	ldd	r24, Y+7	; 0x07
     988:	98 85       	ldd	r25, Y+8	; 0x08
     98a:	08 96       	adiw	r24, 0x08	; 8
     98c:	98 87       	std	Y+8, r25	; 0x08
     98e:	8f 83       	std	Y+7, r24	; 0x07
     990:	6c 14       	cp	r6, r12
     992:	7d 04       	cpc	r7, r13
     994:	14 f4       	brge	.+4      	; 0x99a <_ZN5Gates9kroneckerEP7Complexii+0xfe>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     996:	f7 01       	movw	r30, r14
     998:	c2 cf       	rjmp	.-124    	; 0x91e <_ZN5Gates9kroneckerEP7Complexii+0x82>
     99a:	86 01       	movw	r16, r12
     99c:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     99e:	ad 81       	ldd	r26, Y+5	; 0x05
     9a0:	be 81       	ldd	r27, Y+6	; 0x06
     9a2:	ab 2b       	or	r26, r27
     9a4:	b1 f5       	brne	.+108    	; 0xa12 <_ZN5Gates9kroneckerEP7Complexii+0x176>
     9a6:	44 c0       	rjmp	.+136    	; 0xa30 <_ZN5Gates9kroneckerEP7Complexii+0x194>
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     9a8:	58 01       	movw	r10, r16
     9aa:	f8 01       	movw	r30, r16
     9ac:	40 81       	ld	r20, Z
     9ae:	51 81       	ldd	r21, Z+1	; 0x01
     9b0:	62 81       	ldd	r22, Z+2	; 0x02
     9b2:	73 81       	ldd	r23, Z+3	; 0x03
     9b4:	c7 01       	movw	r24, r14
     9b6:	0e 94 12 03 	call	0x624	; 0x624 <_ZN5Gates5touchEd>
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	09 f5       	brne	.+66     	; 0xa00 <_ZN5Gates9kroneckerEP7Complexii+0x164>
     9be:	84 01       	movw	r16, r8
     9c0:	c8 01       	movw	r24, r16
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	86 0d       	add	r24, r6
     9d0:	97 1d       	adc	r25, r7
     9d2:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     9d4:	10 82       	st	Z, r1
     9d6:	11 82       	std	Z+1, r1	; 0x01
     9d8:	12 82       	std	Z+2, r1	; 0x02
     9da:	13 82       	std	Z+3, r1	; 0x03
     9dc:	14 82       	std	Z+4, r1	; 0x04
     9de:	15 82       	std	Z+5, r1	; 0x05
     9e0:	16 82       	std	Z+6, r1	; 0x06
     9e2:	17 82       	std	Z+7, r1	; 0x07
     9e4:	38 96       	adiw	r30, 0x08	; 8
     9e6:	e8 17       	cp	r30, r24
     9e8:	f9 07       	cpc	r31, r25
     9ea:	a1 f7       	brne	.-24     	; 0x9d4 <_ZN5Gates9kroneckerEP7Complexii+0x138>
				kronvec[i].re=binary_touch;
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	a0 e8       	ldi	r26, 0x80	; 128
     9f2:	bf e3       	ldi	r27, 0x3F	; 63
     9f4:	f5 01       	movw	r30, r10
     9f6:	80 83       	st	Z, r24
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	a2 83       	std	Z+2, r26	; 0x02
     9fc:	b3 83       	std	Z+3, r27	; 0x03
     9fe:	18 c0       	rjmp	.+48     	; 0xa30 <_ZN5Gates9kroneckerEP7Complexii+0x194>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     a00:	ff ef       	ldi	r31, 0xFF	; 255
     a02:	cf 1a       	sub	r12, r31
     a04:	df 0a       	sbc	r13, r31
     a06:	08 5f       	subi	r16, 0xF8	; 248
     a08:	1f 4f       	sbci	r17, 0xFF	; 255
     a0a:	c8 14       	cp	r12, r8
     a0c:	d9 04       	cpc	r13, r9
     a0e:	61 f6       	brne	.-104    	; 0x9a8 <_ZN5Gates9kroneckerEP7Complexii+0x10c>
     a10:	05 c0       	rjmp	.+10     	; 0xa1c <_ZN5Gates9kroneckerEP7Complexii+0x180>
     a12:	49 80       	ldd	r4, Y+1	; 0x01
     a14:	5a 80       	ldd	r5, Y+2	; 0x02
     a16:	21 2c       	mov	r2, r1
     a18:	31 2c       	mov	r3, r1
     a1a:	48 01       	movw	r8, r16
     a1c:	18 14       	cp	r1, r8
     a1e:	19 04       	cpc	r1, r9
     a20:	ec f7       	brge	.-6      	; 0xa1c <_ZN5Gates9kroneckerEP7Complexii+0x180>
     a22:	64 2c       	mov	r6, r4
     a24:	75 2c       	mov	r7, r5
     a26:	04 2d       	mov	r16, r4
     a28:	15 2d       	mov	r17, r5
     a2a:	c2 2c       	mov	r12, r2
     a2c:	d3 2c       	mov	r13, r3
     a2e:	bc cf       	rjmp	.-136    	; 0x9a8 <_ZN5Gates9kroneckerEP7Complexii+0x10c>
				kronvec[i].re=binary_touch;
				binary_touch=0;
				break;
			}
	}
	print_states(kron_size,kronvec,"Kronecker: ");
     a30:	44 e9       	ldi	r20, 0x94	; 148
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	69 81       	ldd	r22, Y+1	; 0x01
     a36:	7a 81       	ldd	r23, Y+2	; 0x02
     a38:	c8 01       	movw	r24, r16
     a3a:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z12print_statesiP7ComplexPc>
	return kronvec;
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	1d c0       	rjmp	.+58     	; 0xa7e <_ZN5Gates9kroneckerEP7Complexii+0x1e2>
	print_states(reversed_kron_size,reversed_kronecker,"Reversed kronecker AFTER mul: ");
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     a44:	86 2f       	mov	r24, r22
     a46:	9b 2d       	mov	r25, r11
     a48:	1a c0       	rjmp	.+52     	; 0xa7e <_ZN5Gates9kroneckerEP7Complexii+0x1e2>
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     a4a:	88 e0       	ldi	r24, 0x08	; 8
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
     a52:	89 83       	std	Y+1, r24	; 0x01
     a54:	9a 83       	std	Y+2, r25	; 0x02
     a56:	01 e0       	ldi	r16, 0x01	; 1
     a58:	10 e0       	ldi	r17, 0x00	; 0
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     a5a:	14 01       	movw	r2, r8
     a5c:	22 0c       	add	r2, r2
     a5e:	33 1c       	adc	r3, r3
     a60:	c9 80       	ldd	r12, Y+1	; 0x01
     a62:	da 80       	ldd	r13, Y+2	; 0x02
     a64:	f4 01       	movw	r30, r8
     a66:	61 2c       	mov	r6, r1
     a68:	71 2c       	mov	r7, r1
     a6a:	41 2c       	mov	r4, r1
     a6c:	51 2c       	mov	r5, r1
     a6e:	8b 82       	std	Y+3, r8	; 0x03
     a70:	9c 82       	std	Y+4, r9	; 0x04
     a72:	c6 01       	movw	r24, r12
     a74:	68 01       	movw	r12, r16
     a76:	47 01       	movw	r8, r14
     a78:	98 87       	std	Y+8, r25	; 0x08
     a7a:	8f 83       	std	Y+7, r24	; 0x07
     a7c:	50 cf       	rjmp	.-352    	; 0x91e <_ZN5Gates9kroneckerEP7Complexii+0x82>
				break;
			}
	}
	print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
}
     a7e:	28 96       	adiw	r28, 0x08	; 8
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	df 90       	pop	r13
     a98:	cf 90       	pop	r12
     a9a:	bf 90       	pop	r11
     a9c:	af 90       	pop	r10
     a9e:	9f 90       	pop	r9
     aa0:	8f 90       	pop	r8
     aa2:	7f 90       	pop	r7
     aa4:	6f 90       	pop	r6
     aa6:	5f 90       	pop	r5
     aa8:	4f 90       	pop	r4
     aaa:	3f 90       	pop	r3
     aac:	2f 90       	pop	r2
     aae:	08 95       	ret

00000ab0 <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     ab0:	2f 92       	push	r2
     ab2:	3f 92       	push	r3
     ab4:	4f 92       	push	r4
     ab6:	5f 92       	push	r5
     ab8:	6f 92       	push	r6
     aba:	7f 92       	push	r7
     abc:	8f 92       	push	r8
     abe:	9f 92       	push	r9
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
     ad8:	28 97       	sbiw	r28, 0x08	; 8
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	9e 83       	std	Y+6, r25	; 0x06
     ae6:	8d 83       	std	Y+5, r24	; 0x05
     ae8:	7a 83       	std	Y+2, r23	; 0x02
     aea:	69 83       	std	Y+1, r22	; 0x01
     aec:	04 2f       	mov	r16, r20
     aee:	15 2f       	mov	r17, r21
     af0:	c2 2e       	mov	r12, r18
     af2:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     af4:	cb 01       	movw	r24, r22
     af6:	82 95       	swap	r24
     af8:	92 95       	swap	r25
     afa:	90 7f       	andi	r25, 0xF0	; 240
     afc:	98 27       	eor	r25, r24
     afe:	80 7f       	andi	r24, 0xF0	; 240
     b00:	98 27       	eor	r25, r24
     b02:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
     b06:	8b 83       	std	Y+3, r24	; 0x03
     b08:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     b0a:	29 80       	ldd	r2, Y+1	; 0x01
     b0c:	3a 80       	ldd	r3, Y+2	; 0x02
     b0e:	22 0c       	add	r2, r2
     b10:	33 1c       	adc	r3, r3
     b12:	12 14       	cp	r1, r2
     b14:	13 04       	cpc	r1, r3
     b16:	0c f0       	brlt	.+2      	; 0xb1a <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     b18:	ac c0       	rjmp	.+344    	; 0xc72 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     b1a:	a8 2e       	mov	r10, r24
     b1c:	b9 2e       	mov	r11, r25
     b1e:	e0 2e       	mov	r14, r16
     b20:	f1 2e       	mov	r15, r17
     b22:	0c 2d       	mov	r16, r12
     b24:	1d 2d       	mov	r17, r13
     b26:	81 2c       	mov	r8, r1
     b28:	91 2c       	mov	r9, r1
     b2a:	b8 86       	std	Y+8, r11	; 0x08
     b2c:	af 82       	std	Y+7, r10	; 0x07
     b2e:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     b30:	f7 01       	movw	r30, r14
     b32:	41 90       	ld	r4, Z+
     b34:	51 90       	ld	r5, Z+
     b36:	7f 01       	movw	r14, r30
     b38:	66 24       	eor	r6, r6
     b3a:	57 fc       	sbrc	r5, 7
     b3c:	60 94       	com	r6
     b3e:	76 2c       	mov	r7, r6
     b40:	c3 01       	movw	r24, r6
     b42:	b2 01       	movw	r22, r4
     b44:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__floatsisf>
     b48:	2b ed       	ldi	r18, 0xDB	; 219
     b4a:	3f e0       	ldi	r19, 0x0F	; 15
     b4c:	49 e4       	ldi	r20, 0x49	; 73
     b4e:	50 e4       	ldi	r21, 0x40	; 64
     b50:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	44 eb       	ldi	r20, 0xB4	; 180
     b5a:	53 e4       	ldi	r21, 0x43	; 67
     b5c:	0e 94 5f 19 	call	0x32be	; 0x32be <__divsf3>
     b60:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <cos>
     b64:	ef 81       	ldd	r30, Y+7	; 0x07
     b66:	f8 85       	ldd	r31, Y+8	; 0x08
     b68:	60 83       	st	Z, r22
     b6a:	71 83       	std	Z+1, r23	; 0x01
     b6c:	82 83       	std	Z+2, r24	; 0x02
     b6e:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     b70:	c3 01       	movw	r24, r6
     b72:	b2 01       	movw	r22, r4
     b74:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__floatsisf>
     b78:	2b ed       	ldi	r18, 0xDB	; 219
     b7a:	3f e0       	ldi	r19, 0x0F	; 15
     b7c:	49 e4       	ldi	r20, 0x49	; 73
     b7e:	50 e4       	ldi	r21, 0x40	; 64
     b80:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	44 eb       	ldi	r20, 0xB4	; 180
     b8a:	53 e4       	ldi	r21, 0x43	; 67
     b8c:	0e 94 5f 19 	call	0x32be	; 0x32be <__divsf3>
     b90:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <sin>
     b94:	2b 01       	movw	r4, r22
     b96:	3c 01       	movw	r6, r24
     b98:	58 01       	movw	r10, r16
     b9a:	f8 01       	movw	r30, r16
     b9c:	61 91       	ld	r22, Z+
     b9e:	71 91       	ld	r23, Z+
     ba0:	8f 01       	movw	r16, r30
     ba2:	88 27       	eor	r24, r24
     ba4:	77 fd       	sbrc	r23, 7
     ba6:	80 95       	com	r24
     ba8:	98 2f       	mov	r25, r24
     baa:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__floatsisf>
     bae:	2b ed       	ldi	r18, 0xDB	; 219
     bb0:	3f e0       	ldi	r19, 0x0F	; 15
     bb2:	49 e4       	ldi	r20, 0x49	; 73
     bb4:	50 e4       	ldi	r21, 0x40	; 64
     bb6:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	44 e3       	ldi	r20, 0x34	; 52
     bc0:	53 e4       	ldi	r21, 0x43	; 67
     bc2:	0e 94 5f 19 	call	0x32be	; 0x32be <__divsf3>
     bc6:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <cos>
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	c3 01       	movw	r24, r6
     bd0:	b2 01       	movw	r22, r4
     bd2:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     bd6:	ef 81       	ldd	r30, Y+7	; 0x07
     bd8:	f8 85       	ldd	r31, Y+8	; 0x08
     bda:	60 87       	std	Z+8, r22	; 0x08
     bdc:	71 87       	std	Z+9, r23	; 0x09
     bde:	82 87       	std	Z+10, r24	; 0x0a
     be0:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     be2:	f6 01       	movw	r30, r12
     be4:	60 81       	ld	r22, Z
     be6:	71 81       	ldd	r23, Z+1	; 0x01
     be8:	88 27       	eor	r24, r24
     bea:	77 fd       	sbrc	r23, 7
     bec:	80 95       	com	r24
     bee:	98 2f       	mov	r25, r24
     bf0:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__floatsisf>
     bf4:	2b ed       	ldi	r18, 0xDB	; 219
     bf6:	3f e0       	ldi	r19, 0x0F	; 15
     bf8:	49 e4       	ldi	r20, 0x49	; 73
     bfa:	50 e4       	ldi	r21, 0x40	; 64
     bfc:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	44 eb       	ldi	r20, 0xB4	; 180
     c06:	53 e4       	ldi	r21, 0x43	; 67
     c08:	0e 94 5f 19 	call	0x32be	; 0x32be <__divsf3>
     c0c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <sin>
     c10:	2b 01       	movw	r4, r22
     c12:	3c 01       	movw	r6, r24
     c14:	f5 01       	movw	r30, r10
     c16:	60 81       	ld	r22, Z
     c18:	71 81       	ldd	r23, Z+1	; 0x01
     c1a:	88 27       	eor	r24, r24
     c1c:	77 fd       	sbrc	r23, 7
     c1e:	80 95       	com	r24
     c20:	98 2f       	mov	r25, r24
     c22:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__floatsisf>
     c26:	2b ed       	ldi	r18, 0xDB	; 219
     c28:	3f e0       	ldi	r19, 0x0F	; 15
     c2a:	49 e4       	ldi	r20, 0x49	; 73
     c2c:	50 e4       	ldi	r21, 0x40	; 64
     c2e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	44 e3       	ldi	r20, 0x34	; 52
     c38:	53 e4       	ldi	r21, 0x43	; 67
     c3a:	0e 94 5f 19 	call	0x32be	; 0x32be <__divsf3>
     c3e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <sin>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	c3 01       	movw	r24, r6
     c48:	b2 01       	movw	r22, r4
     c4a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     c4e:	ef 81       	ldd	r30, Y+7	; 0x07
     c50:	f8 85       	ldd	r31, Y+8	; 0x08
     c52:	64 87       	std	Z+12, r22	; 0x0c
     c54:	75 87       	std	Z+13, r23	; 0x0d
     c56:	86 87       	std	Z+14, r24	; 0x0e
     c58:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     c5a:	f2 e0       	ldi	r31, 0x02	; 2
     c5c:	8f 0e       	add	r8, r31
     c5e:	91 1c       	adc	r9, r1
     c60:	8f 81       	ldd	r24, Y+7	; 0x07
     c62:	98 85       	ldd	r25, Y+8	; 0x08
     c64:	40 96       	adiw	r24, 0x10	; 16
     c66:	98 87       	std	Y+8, r25	; 0x08
     c68:	8f 83       	std	Y+7, r24	; 0x07
     c6a:	82 14       	cp	r8, r2
     c6c:	93 04       	cpc	r9, r3
     c6e:	0c f4       	brge	.+2      	; 0xc72 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     c70:	5e cf       	rjmp	.-324    	; 0xb2e <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
	print_states(qb_count*2,vec,"Before: ");
     c72:	40 ea       	ldi	r20, 0xA0	; 160
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	6b 81       	ldd	r22, Y+3	; 0x03
     c78:	7c 81       	ldd	r23, Y+4	; 0x04
     c7a:	c1 01       	movw	r24, r2
     c7c:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z12print_statesiP7ComplexPc>
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     c80:	21 e0       	ldi	r18, 0x01	; 1
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	49 81       	ldd	r20, Y+1	; 0x01
     c86:	5a 81       	ldd	r21, Y+2	; 0x02
     c88:	6b 81       	ldd	r22, Y+3	; 0x03
     c8a:	7c 81       	ldd	r23, Y+4	; 0x04
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	9e 81       	ldd	r25, Y+6	; 0x06
     c90:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN5Gates9kroneckerEP7Complexii>
}
     c94:	28 96       	adiw	r28, 0x08	; 8
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	bf 90       	pop	r11
     cb2:	af 90       	pop	r10
     cb4:	9f 90       	pop	r9
     cb6:	8f 90       	pop	r8
     cb8:	7f 90       	pop	r7
     cba:	6f 90       	pop	r6
     cbc:	5f 90       	pop	r5
     cbe:	4f 90       	pop	r4
     cc0:	3f 90       	pop	r3
     cc2:	2f 90       	pop	r2
     cc4:	08 95       	ret

00000cc6 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     cc6:	6f 92       	push	r6
     cc8:	7f 92       	push	r7
     cca:	8f 92       	push	r8
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	86 2e       	mov	r8, r22
     ce4:	97 2e       	mov	r9, r23
     ce6:	5a 01       	movw	r10, r20
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     ce8:	14 16       	cp	r1, r20
     cea:	15 06       	cpc	r1, r21
     cec:	6c f4       	brge	.+26     	; 0xd08 <_ZN5Gates8vec2amplEP7Complexi+0x42>
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	cc 24       	eor	r12, r12
     cf4:	c3 94       	inc	r12
     cf6:	d1 2c       	mov	r13, r1
     cf8:	cc 0c       	add	r12, r12
     cfa:	dd 1c       	adc	r13, r13
     cfc:	2f 5f       	subi	r18, 0xFF	; 255
     cfe:	3f 4f       	sbci	r19, 0xFF	; 255
     d00:	2a 15       	cp	r18, r10
     d02:	3b 05       	cpc	r19, r11
     d04:	c9 f7       	brne	.-14     	; 0xcf8 <_ZN5Gates8vec2amplEP7Complexi+0x32>
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <_ZN5Gates8vec2amplEP7Complexi+0x48>
     d08:	cc 24       	eor	r12, r12
     d0a:	c3 94       	inc	r12
     d0c:	d1 2c       	mov	r13, r1
	print_states(qb_count*2,vec,"Before: ");
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
}
int * Gates::vec2ampl(Complex * vec,int qb_count){
	int kron_size=custom_pow(2,qb_count);
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     d0e:	22 e0       	ldi	r18, 0x02	; 2
     d10:	a2 16       	cp	r10, r18
     d12:	b1 04       	cpc	r11, r1
     d14:	3c f0       	brlt	.+14     	; 0xd24 <_ZN5Gates8vec2amplEP7Complexi+0x5e>
     d16:	a6 01       	movw	r20, r12
     d18:	68 2d       	mov	r22, r8
     d1a:	79 2d       	mov	r23, r9
     d1c:	0e 94 42 03 	call	0x684	; 0x684 <_ZN5Gates17reverse_kroneckerEP7Complexi>
     d20:	88 2e       	mov	r8, r24
     d22:	99 2e       	mov	r9, r25
	
	int* newthephi=(int*)malloc(sizeof(int)*(qb_count*2));
     d24:	c5 01       	movw	r24, r10
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
     d32:	68 2e       	mov	r6, r24
     d34:	79 2e       	mov	r7, r25
	for(int i=0;i<qb_count*2;i++) if(i%2==0) newthephi[i]=(360*acos(vec[i].re))/M_PI; else newthephi[i]=(180*vec[i].arg())/M_PI;
     d36:	aa 0c       	add	r10, r10
     d38:	bb 1c       	adc	r11, r11
     d3a:	1a 14       	cp	r1, r10
     d3c:	1b 04       	cpc	r1, r11
     d3e:	f4 f5       	brge	.+124    	; 0xdbc <_ZN5Gates8vec2amplEP7Complexi+0xf6>
     d40:	e8 2c       	mov	r14, r8
     d42:	f9 2c       	mov	r15, r9
     d44:	08 2f       	mov	r16, r24
     d46:	19 2f       	mov	r17, r25
     d48:	c0 e0       	ldi	r28, 0x00	; 0
     d4a:	d0 e0       	ldi	r29, 0x00	; 0
     d4c:	c0 fd       	sbrc	r28, 0
     d4e:	19 c0       	rjmp	.+50     	; 0xd82 <_ZN5Gates8vec2amplEP7Complexi+0xbc>
     d50:	f7 01       	movw	r30, r14
     d52:	60 81       	ld	r22, Z
     d54:	71 81       	ldd	r23, Z+1	; 0x01
     d56:	82 81       	ldd	r24, Z+2	; 0x02
     d58:	93 81       	ldd	r25, Z+3	; 0x03
     d5a:	0e 94 bd 18 	call	0x317a	; 0x317a <acos>
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	44 eb       	ldi	r20, 0xB4	; 180
     d64:	53 e4       	ldi	r21, 0x43	; 67
     d66:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     d6a:	2b ed       	ldi	r18, 0xDB	; 219
     d6c:	3f e0       	ldi	r19, 0x0F	; 15
     d6e:	49 e4       	ldi	r20, 0x49	; 73
     d70:	50 e4       	ldi	r21, 0x40	; 64
     d72:	0e 94 5f 19 	call	0x32be	; 0x32be <__divsf3>
     d76:	0e 94 c7 19 	call	0x338e	; 0x338e <__fixsfsi>
     d7a:	f8 01       	movw	r30, r16
     d7c:	71 83       	std	Z+1, r23	; 0x01
     d7e:	60 83       	st	Z, r22
     d80:	14 c0       	rjmp	.+40     	; 0xdaa <_ZN5Gates8vec2amplEP7Complexi+0xe4>
     d82:	c7 01       	movw	r24, r14
     d84:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_ZN7Complex3argEv>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	44 e3       	ldi	r20, 0x34	; 52
     d8e:	53 e4       	ldi	r21, 0x43	; 67
     d90:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsf3>
     d94:	2b ed       	ldi	r18, 0xDB	; 219
     d96:	3f e0       	ldi	r19, 0x0F	; 15
     d98:	49 e4       	ldi	r20, 0x49	; 73
     d9a:	50 e4       	ldi	r21, 0x40	; 64
     d9c:	0e 94 5f 19 	call	0x32be	; 0x32be <__divsf3>
     da0:	0e 94 c7 19 	call	0x338e	; 0x338e <__fixsfsi>
     da4:	f8 01       	movw	r30, r16
     da6:	71 83       	std	Z+1, r23	; 0x01
     da8:	60 83       	st	Z, r22
     daa:	21 96       	adiw	r28, 0x01	; 1
     dac:	f8 e0       	ldi	r31, 0x08	; 8
     dae:	ef 0e       	add	r14, r31
     db0:	f1 1c       	adc	r15, r1
     db2:	0e 5f       	subi	r16, 0xFE	; 254
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	ca 15       	cp	r28, r10
     db8:	db 05       	cpc	r29, r11
     dba:	41 f6       	brne	.-112    	; 0xd4c <_ZN5Gates8vec2amplEP7Complexi+0x86>

	print_states(kron_size,vec,"After: ");
     dbc:	49 ea       	ldi	r20, 0xA9	; 169
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	68 2d       	mov	r22, r8
     dc2:	79 2d       	mov	r23, r9
     dc4:	c6 01       	movw	r24, r12
     dc6:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     dca:	86 2d       	mov	r24, r6
     dcc:	97 2d       	mov	r25, r7
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	af 90       	pop	r10
     de2:	9f 90       	pop	r9
     de4:	8f 90       	pop	r8
     de6:	7f 90       	pop	r7
     de8:	6f 90       	pop	r6
     dea:	08 95       	ret

00000dec <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     dec:	2f 92       	push	r2
     dee:	3f 92       	push	r3
     df0:	4f 92       	push	r4
     df2:	5f 92       	push	r5
     df4:	6f 92       	push	r6
     df6:	7f 92       	push	r7
     df8:	8f 92       	push	r8
     dfa:	9f 92       	push	r9
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	60 97       	sbiw	r28, 0x10	; 16
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	4b 01       	movw	r8, r22
     e22:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     e24:	80 e1       	ldi	r24, 0x10	; 16
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
     e2c:	38 2e       	mov	r3, r24
     e2e:	29 2e       	mov	r2, r25
     e30:	c8 2e       	mov	r12, r24
     e32:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     e34:	a1 2c       	mov	r10, r1
     e36:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e38:	24 01       	movw	r4, r8
     e3a:	88 e0       	ldi	r24, 0x08	; 8
     e3c:	48 0e       	add	r4, r24
     e3e:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     e40:	ce 01       	movw	r24, r28
     e42:	09 96       	adiw	r24, 0x09	; 9
     e44:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e48:	75 01       	movw	r14, r10
     e4a:	ee 0c       	add	r14, r14
     e4c:	ff 1c       	adc	r15, r15
     e4e:	ee 0c       	add	r14, r14
     e50:	ff 1c       	adc	r15, r15
     e52:	ee 0c       	add	r14, r14
     e54:	ff 1c       	adc	r15, r15
     e56:	e6 0c       	add	r14, r6
     e58:	f7 1c       	adc	r15, r7
     e5a:	d7 01       	movw	r26, r14
     e5c:	0c 91       	ld	r16, X
     e5e:	11 96       	adiw	r26, 0x01	; 1
     e60:	1c 91       	ld	r17, X
     e62:	11 97       	sbiw	r26, 0x01	; 1
     e64:	12 96       	adiw	r26, 0x02	; 2
     e66:	2c 91       	ld	r18, X
     e68:	12 97       	sbiw	r26, 0x02	; 2
     e6a:	13 96       	adiw	r26, 0x03	; 3
     e6c:	3c 91       	ld	r19, X
     e6e:	13 97       	sbiw	r26, 0x03	; 3
     e70:	14 96       	adiw	r26, 0x04	; 4
     e72:	4c 91       	ld	r20, X
     e74:	14 97       	sbiw	r26, 0x04	; 4
     e76:	15 96       	adiw	r26, 0x05	; 5
     e78:	5c 91       	ld	r21, X
     e7a:	15 97       	sbiw	r26, 0x05	; 5
     e7c:	16 96       	adiw	r26, 0x06	; 6
     e7e:	6c 91       	ld	r22, X
     e80:	16 97       	sbiw	r26, 0x06	; 6
     e82:	17 96       	adiw	r26, 0x07	; 7
     e84:	7c 91       	ld	r23, X
     e86:	c4 01       	movw	r24, r8
     e88:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7Complex3mulES_>
     e8c:	02 2f       	mov	r16, r18
     e8e:	13 2f       	mov	r17, r19
     e90:	24 2f       	mov	r18, r20
     e92:	35 2f       	mov	r19, r21
     e94:	46 2f       	mov	r20, r22
     e96:	57 2f       	mov	r21, r23
     e98:	68 2f       	mov	r22, r24
     e9a:	79 2f       	mov	r23, r25
     e9c:	ce 01       	movw	r24, r28
     e9e:	09 96       	adiw	r24, 0x09	; 9
     ea0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7Complex3addES_>
     ea4:	29 87       	std	Y+9, r18	; 0x09
     ea6:	3a 87       	std	Y+10, r19	; 0x0a
     ea8:	4b 87       	std	Y+11, r20	; 0x0b
     eaa:	5c 87       	std	Y+12, r21	; 0x0c
     eac:	6d 87       	std	Y+13, r22	; 0x0d
     eae:	7e 87       	std	Y+14, r23	; 0x0e
     eb0:	8f 87       	std	Y+15, r24	; 0x0f
     eb2:	98 8b       	std	Y+16, r25	; 0x10
     eb4:	f7 01       	movw	r30, r14
     eb6:	70 96       	adiw	r30, 0x10	; 16
     eb8:	d7 01       	movw	r26, r14
     eba:	50 96       	adiw	r26, 0x10	; 16
     ebc:	0c 91       	ld	r16, X
     ebe:	11 81       	ldd	r17, Z+1	; 0x01
     ec0:	22 81       	ldd	r18, Z+2	; 0x02
     ec2:	33 81       	ldd	r19, Z+3	; 0x03
     ec4:	44 81       	ldd	r20, Z+4	; 0x04
     ec6:	55 81       	ldd	r21, Z+5	; 0x05
     ec8:	66 81       	ldd	r22, Z+6	; 0x06
     eca:	77 81       	ldd	r23, Z+7	; 0x07
     ecc:	c2 01       	movw	r24, r4
     ece:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7Complex3mulES_>
     ed2:	02 2f       	mov	r16, r18
     ed4:	13 2f       	mov	r17, r19
     ed6:	24 2f       	mov	r18, r20
     ed8:	35 2f       	mov	r19, r21
     eda:	46 2f       	mov	r20, r22
     edc:	57 2f       	mov	r21, r23
     ede:	68 2f       	mov	r22, r24
     ee0:	79 2f       	mov	r23, r25
     ee2:	ce 01       	movw	r24, r28
     ee4:	09 96       	adiw	r24, 0x09	; 9
     ee6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7Complex3addES_>
     eea:	29 87       	std	Y+9, r18	; 0x09
     eec:	3a 87       	std	Y+10, r19	; 0x0a
     eee:	4b 87       	std	Y+11, r20	; 0x0b
     ef0:	5c 87       	std	Y+12, r21	; 0x0c
     ef2:	6d 87       	std	Y+13, r22	; 0x0d
     ef4:	7e 87       	std	Y+14, r23	; 0x0e
     ef6:	8f 87       	std	Y+15, r24	; 0x0f
     ef8:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     efa:	89 85       	ldd	r24, Y+9	; 0x09
     efc:	9a 85       	ldd	r25, Y+10	; 0x0a
     efe:	ab 85       	ldd	r26, Y+11	; 0x0b
     f00:	bc 85       	ldd	r27, Y+12	; 0x0c
     f02:	f6 01       	movw	r30, r12
     f04:	80 83       	st	Z, r24
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	a2 83       	std	Z+2, r26	; 0x02
     f0a:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f10:	af 85       	ldd	r26, Y+15	; 0x0f
     f12:	b8 89       	ldd	r27, Y+16	; 0x10
     f14:	84 83       	std	Z+4, r24	; 0x04
     f16:	95 83       	std	Z+5, r25	; 0x05
     f18:	a6 83       	std	Z+6, r26	; 0x06
     f1a:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     f1c:	ff ef       	ldi	r31, 0xFF	; 255
     f1e:	af 1a       	sub	r10, r31
     f20:	bf 0a       	sbc	r11, r31
     f22:	88 e0       	ldi	r24, 0x08	; 8
     f24:	c8 0e       	add	r12, r24
     f26:	d1 1c       	adc	r13, r1
     f28:	a2 e0       	ldi	r26, 0x02	; 2
     f2a:	aa 16       	cp	r10, r26
     f2c:	b1 04       	cpc	r11, r1
     f2e:	09 f0       	breq	.+2      	; 0xf32 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     f30:	87 cf       	rjmp	.-242    	; 0xe40 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     f32:	83 2d       	mov	r24, r3
     f34:	92 2d       	mov	r25, r2
     f36:	60 96       	adiw	r28, 0x10	; 16
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	7f 90       	pop	r7
     f5c:	6f 90       	pop	r6
     f5e:	5f 90       	pop	r5
     f60:	4f 90       	pop	r4
     f62:	3f 90       	pop	r3
     f64:	2f 90       	pop	r2
     f66:	08 95       	ret

00000f68 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     f68:	2f 92       	push	r2
     f6a:	3f 92       	push	r3
     f6c:	4f 92       	push	r4
     f6e:	5f 92       	push	r5
     f70:	6f 92       	push	r6
     f72:	7f 92       	push	r7
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	64 97       	sbiw	r28, 0x14	; 20
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	3b 01       	movw	r6, r22
     f9e:	e4 2e       	mov	r14, r20
     fa0:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     fa2:	80 e2       	ldi	r24, 0x20	; 32
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
     faa:	8b 8b       	std	Y+19, r24	; 0x13
     fac:	9c 8b       	std	Y+20, r25	; 0x14
     fae:	48 2e       	mov	r4, r24
     fb0:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     fb2:	81 2c       	mov	r8, r1
     fb4:	91 2c       	mov	r9, r1
     fb6:	e9 8a       	std	Y+17, r14	; 0x11
     fb8:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     fba:	21 2c       	mov	r2, r1
     fbc:	31 2c       	mov	r3, r1
     fbe:	ce 01       	movw	r24, r28
     fc0:	09 96       	adiw	r24, 0x09	; 9
     fc2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_ZN7ComplexC1Ev>
     fc6:	c9 88       	ldd	r12, Y+17	; 0x11
     fc8:	da 88       	ldd	r13, Y+18	; 0x12
     fca:	e2 2c       	mov	r14, r2
     fcc:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     fce:	54 01       	movw	r10, r8
     fd0:	aa 0c       	add	r10, r10
     fd2:	bb 1c       	adc	r11, r11
     fd4:	aa 0c       	add	r10, r10
     fd6:	bb 1c       	adc	r11, r11
     fd8:	aa 0c       	add	r10, r10
     fda:	bb 1c       	adc	r11, r11
     fdc:	f5 01       	movw	r30, r10
     fde:	ec 0d       	add	r30, r12
     fe0:	fd 1d       	adc	r31, r13
     fe2:	00 81       	ld	r16, Z
     fe4:	11 81       	ldd	r17, Z+1	; 0x01
     fe6:	22 81       	ldd	r18, Z+2	; 0x02
     fe8:	33 81       	ldd	r19, Z+3	; 0x03
     fea:	44 81       	ldd	r20, Z+4	; 0x04
     fec:	55 81       	ldd	r21, Z+5	; 0x05
     fee:	66 81       	ldd	r22, Z+6	; 0x06
     ff0:	77 81       	ldd	r23, Z+7	; 0x07
     ff2:	c3 01       	movw	r24, r6
     ff4:	8e 0d       	add	r24, r14
     ff6:	9f 1d       	adc	r25, r15
     ff8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7Complex3mulES_>
     ffc:	29 83       	std	Y+1, r18	; 0x01
     ffe:	3a 83       	std	Y+2, r19	; 0x02
    1000:	4b 83       	std	Y+3, r20	; 0x03
    1002:	5c 83       	std	Y+4, r21	; 0x04
    1004:	6d 83       	std	Y+5, r22	; 0x05
    1006:	7e 83       	std	Y+6, r23	; 0x06
    1008:	8f 83       	std	Y+7, r24	; 0x07
    100a:	98 87       	std	Y+8, r25	; 0x08
    100c:	02 2f       	mov	r16, r18
    100e:	13 2f       	mov	r17, r19
    1010:	24 2f       	mov	r18, r20
    1012:	35 2f       	mov	r19, r21
    1014:	46 2f       	mov	r20, r22
    1016:	57 2f       	mov	r21, r23
    1018:	68 2f       	mov	r22, r24
    101a:	79 2f       	mov	r23, r25
    101c:	ce 01       	movw	r24, r28
    101e:	09 96       	adiw	r24, 0x09	; 9
    1020:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN7Complex3addES_>
    1024:	29 87       	std	Y+9, r18	; 0x09
    1026:	3a 87       	std	Y+10, r19	; 0x0a
    1028:	4b 87       	std	Y+11, r20	; 0x0b
    102a:	5c 87       	std	Y+12, r21	; 0x0c
    102c:	6d 87       	std	Y+13, r22	; 0x0d
    102e:	7e 87       	std	Y+14, r23	; 0x0e
    1030:	8f 87       	std	Y+15, r24	; 0x0f
    1032:	98 8b       	std	Y+16, r25	; 0x10
    1034:	88 e0       	ldi	r24, 0x08	; 8
    1036:	e8 0e       	add	r14, r24
    1038:	f1 1c       	adc	r15, r1
    103a:	e0 e2       	ldi	r30, 0x20	; 32
    103c:	ce 0e       	add	r12, r30
    103e:	d1 1c       	adc	r13, r1
    1040:	f0 e2       	ldi	r31, 0x20	; 32
    1042:	ef 16       	cp	r14, r31
    1044:	f1 04       	cpc	r15, r1
    1046:	51 f6       	brne	.-108    	; 0xfdc <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
    1048:	89 85       	ldd	r24, Y+9	; 0x09
    104a:	9a 85       	ldd	r25, Y+10	; 0x0a
    104c:	ab 85       	ldd	r26, Y+11	; 0x0b
    104e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1050:	f2 01       	movw	r30, r4
    1052:	80 83       	st	Z, r24
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	a2 83       	std	Z+2, r26	; 0x02
    1058:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    105a:	8d 85       	ldd	r24, Y+13	; 0x0d
    105c:	9e 85       	ldd	r25, Y+14	; 0x0e
    105e:	af 85       	ldd	r26, Y+15	; 0x0f
    1060:	b8 89       	ldd	r27, Y+16	; 0x10
    1062:	84 83       	std	Z+4, r24	; 0x04
    1064:	95 83       	std	Z+5, r25	; 0x05
    1066:	a6 83       	std	Z+6, r26	; 0x06
    1068:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    106a:	ff ef       	ldi	r31, 0xFF	; 255
    106c:	8f 1a       	sub	r8, r31
    106e:	9f 0a       	sbc	r9, r31
    1070:	88 e0       	ldi	r24, 0x08	; 8
    1072:	48 0e       	add	r4, r24
    1074:	51 1c       	adc	r5, r1
    1076:	e4 e0       	ldi	r30, 0x04	; 4
    1078:	8e 16       	cp	r8, r30
    107a:	91 04       	cpc	r9, r1
    107c:	09 f0       	breq	.+2      	; 0x1080 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
    107e:	9f cf       	rjmp	.-194    	; 0xfbe <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    1080:	8b 89       	ldd	r24, Y+19	; 0x13
    1082:	9c 89       	ldd	r25, Y+20	; 0x14
    1084:	64 96       	adiw	r28, 0x14	; 20
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	bf 90       	pop	r11
    10a2:	af 90       	pop	r10
    10a4:	9f 90       	pop	r9
    10a6:	8f 90       	pop	r8
    10a8:	7f 90       	pop	r7
    10aa:	6f 90       	pop	r6
    10ac:	5f 90       	pop	r5
    10ae:	4f 90       	pop	r4
    10b0:	3f 90       	pop	r3
    10b2:	2f 90       	pop	r2
    10b4:	08 95       	ret

000010b6 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
    10b6:	af 92       	push	r10
    10b8:	bf 92       	push	r11
    10ba:	cf 92       	push	r12
    10bc:	df 92       	push	r13
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	a4 97       	sbiw	r28, 0x24	; 36
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	7c 01       	movw	r14, r24
    10dc:	5b 01       	movw	r10, r22
    10de:	6a 01       	movw	r12, r20
	Complex x_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(0,0),Complex(1,0)},
											 {Complex(1,0),Complex(0,0)}};
    10e0:	00 e0       	ldi	r16, 0x00	; 0
    10e2:	10 e0       	ldi	r17, 0x00	; 0
    10e4:	98 01       	movw	r18, r16
    10e6:	b9 01       	movw	r22, r18
    10e8:	a8 01       	movw	r20, r16
    10ea:	ce 01       	movw	r24, r28
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    10f2:	00 e0       	ldi	r16, 0x00	; 0
    10f4:	10 e0       	ldi	r17, 0x00	; 0
    10f6:	98 01       	movw	r18, r16
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	60 e8       	ldi	r22, 0x80	; 128
    10fe:	7f e3       	ldi	r23, 0x3F	; 63
    1100:	ce 01       	movw	r24, r28
    1102:	09 96       	adiw	r24, 0x09	; 9
    1104:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1108:	00 e0       	ldi	r16, 0x00	; 0
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	98 01       	movw	r18, r16
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	60 e8       	ldi	r22, 0x80	; 128
    1114:	7f e3       	ldi	r23, 0x3F	; 63
    1116:	ce 01       	movw	r24, r28
    1118:	41 96       	adiw	r24, 0x11	; 17
    111a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    111e:	00 e0       	ldi	r16, 0x00	; 0
    1120:	10 e0       	ldi	r17, 0x00	; 0
    1122:	98 01       	movw	r18, r16
    1124:	b9 01       	movw	r22, r18
    1126:	a8 01       	movw	r20, r16
    1128:	ce 01       	movw	r24, r28
    112a:	49 96       	adiw	r24, 0x19	; 25
    112c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[1]={phi};
    1130:	bc a2       	std	Y+36, r11	; 0x24
    1132:	ab a2       	std	Y+35, r10	; 0x23
    1134:	da a2       	std	Y+34, r13	; 0x22
    1136:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),x_matrix),QB_SIZE1);
    1138:	9e 01       	movw	r18, r28
    113a:	2f 5d       	subi	r18, 0xDF	; 223
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	ae 01       	movw	r20, r28
    1140:	4d 5d       	subi	r20, 0xDD	; 221
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	c7 01       	movw	r24, r14
    114a:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    114e:	ae 01       	movw	r20, r28
    1150:	4f 5f       	subi	r20, 0xFF	; 255
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	bc 01       	movw	r22, r24
    1156:	c7 01       	movw	r24, r14
    1158:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    115c:	41 e0       	ldi	r20, 0x01	; 1
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	bc 01       	movw	r22, r24
    1162:	c7 01       	movw	r24, r14
    1164:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    1168:	a4 96       	adiw	r28, 0x24	; 36
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	08 95       	ret

0000118a <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    118a:	af 92       	push	r10
    118c:	bf 92       	push	r11
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	a4 97       	sbiw	r28, 0x24	; 36
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	7c 01       	movw	r14, r24
    11b0:	5b 01       	movw	r10, r22
    11b2:	6a 01       	movw	r12, r20
	Complex y_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(0,0),Complex(0,-1)},
											 {Complex(0,1),Complex(0,0)}};
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	10 e0       	ldi	r17, 0x00	; 0
    11b8:	98 01       	movw	r18, r16
    11ba:	b9 01       	movw	r22, r18
    11bc:	a8 01       	movw	r20, r16
    11be:	ce 01       	movw	r24, r28
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    11c6:	00 e0       	ldi	r16, 0x00	; 0
    11c8:	10 e0       	ldi	r17, 0x00	; 0
    11ca:	20 e8       	ldi	r18, 0x80	; 128
    11cc:	3f eb       	ldi	r19, 0xBF	; 191
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	ba 01       	movw	r22, r20
    11d4:	ce 01       	movw	r24, r28
    11d6:	09 96       	adiw	r24, 0x09	; 9
    11d8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    11dc:	00 e0       	ldi	r16, 0x00	; 0
    11de:	10 e0       	ldi	r17, 0x00	; 0
    11e0:	20 e8       	ldi	r18, 0x80	; 128
    11e2:	3f e3       	ldi	r19, 0x3F	; 63
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	ba 01       	movw	r22, r20
    11ea:	ce 01       	movw	r24, r28
    11ec:	41 96       	adiw	r24, 0x11	; 17
    11ee:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    11f2:	00 e0       	ldi	r16, 0x00	; 0
    11f4:	10 e0       	ldi	r17, 0x00	; 0
    11f6:	98 01       	movw	r18, r16
    11f8:	b9 01       	movw	r22, r18
    11fa:	a8 01       	movw	r20, r16
    11fc:	ce 01       	movw	r24, r28
    11fe:	49 96       	adiw	r24, 0x19	; 25
    1200:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1204:	bc a2       	std	Y+36, r11	; 0x24
    1206:	ab a2       	std	Y+35, r10	; 0x23
    1208:	da a2       	std	Y+34, r13	; 0x22
    120a:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),y_matrix),QB_SIZE1);
    120c:	9e 01       	movw	r18, r28
    120e:	2f 5d       	subi	r18, 0xDF	; 223
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	ae 01       	movw	r20, r28
    1214:	4d 5d       	subi	r20, 0xDD	; 221
    1216:	5f 4f       	sbci	r21, 0xFF	; 255
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	c7 01       	movw	r24, r14
    121e:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    1222:	ae 01       	movw	r20, r28
    1224:	4f 5f       	subi	r20, 0xFF	; 255
    1226:	5f 4f       	sbci	r21, 0xFF	; 255
    1228:	bc 01       	movw	r22, r24
    122a:	c7 01       	movw	r24, r14
    122c:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	bc 01       	movw	r22, r24
    1236:	c7 01       	movw	r24, r14
    1238:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    123c:	a4 96       	adiw	r28, 0x24	; 36
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	bf 90       	pop	r11
    125a:	af 90       	pop	r10
    125c:	08 95       	ret

0000125e <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	a4 97       	sbiw	r28, 0x24	; 36
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	7c 01       	movw	r14, r24
    1284:	5b 01       	movw	r10, r22
    1286:	6a 01       	movw	r12, r20
	Complex z_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(1,0),Complex(0,0)},
											 {Complex(0,0),Complex(-1,0)}};
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	98 01       	movw	r18, r16
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	60 e8       	ldi	r22, 0x80	; 128
    1294:	7f e3       	ldi	r23, 0x3F	; 63
    1296:	ce 01       	movw	r24, r28
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    129e:	00 e0       	ldi	r16, 0x00	; 0
    12a0:	10 e0       	ldi	r17, 0x00	; 0
    12a2:	98 01       	movw	r18, r16
    12a4:	b9 01       	movw	r22, r18
    12a6:	a8 01       	movw	r20, r16
    12a8:	ce 01       	movw	r24, r28
    12aa:	09 96       	adiw	r24, 0x09	; 9
    12ac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    12b0:	00 e0       	ldi	r16, 0x00	; 0
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	98 01       	movw	r18, r16
    12b6:	b9 01       	movw	r22, r18
    12b8:	a8 01       	movw	r20, r16
    12ba:	ce 01       	movw	r24, r28
    12bc:	41 96       	adiw	r24, 0x11	; 17
    12be:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    12c2:	00 e0       	ldi	r16, 0x00	; 0
    12c4:	10 e0       	ldi	r17, 0x00	; 0
    12c6:	98 01       	movw	r18, r16
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	60 e8       	ldi	r22, 0x80	; 128
    12ce:	7f eb       	ldi	r23, 0xBF	; 191
    12d0:	ce 01       	movw	r24, r28
    12d2:	49 96       	adiw	r24, 0x19	; 25
    12d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    12d8:	bc a2       	std	Y+36, r11	; 0x24
    12da:	ab a2       	std	Y+35, r10	; 0x23
    12dc:	da a2       	std	Y+34, r13	; 0x22
    12de:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),z_matrix),QB_SIZE1);
    12e0:	9e 01       	movw	r18, r28
    12e2:	2f 5d       	subi	r18, 0xDF	; 223
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	ae 01       	movw	r20, r28
    12e8:	4d 5d       	subi	r20, 0xDD	; 221
    12ea:	5f 4f       	sbci	r21, 0xFF	; 255
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	c7 01       	movw	r24, r14
    12f2:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    12f6:	ae 01       	movw	r20, r28
    12f8:	4f 5f       	subi	r20, 0xFF	; 255
    12fa:	5f 4f       	sbci	r21, 0xFF	; 255
    12fc:	bc 01       	movw	r22, r24
    12fe:	c7 01       	movw	r24, r14
    1300:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	bc 01       	movw	r22, r24
    130a:	c7 01       	movw	r24, r14
    130c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    1310:	a4 96       	adiw	r28, 0x24	; 36
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	bf 90       	pop	r11
    132e:	af 90       	pop	r10
    1330:	08 95       	ret

00001332 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	a4 97       	sbiw	r28, 0x24	; 36
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	7c 01       	movw	r14, r24
    1358:	5b 01       	movw	r10, r22
    135a:	6a 01       	movw	r12, r20
	Complex h_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
											 {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    135c:	00 e0       	ldi	r16, 0x00	; 0
    135e:	10 e0       	ldi	r17, 0x00	; 0
    1360:	98 01       	movw	r18, r16
    1362:	43 ef       	ldi	r20, 0xF3	; 243
    1364:	54 e0       	ldi	r21, 0x04	; 4
    1366:	65 e3       	ldi	r22, 0x35	; 53
    1368:	7f e3       	ldi	r23, 0x3F	; 63
    136a:	ce 01       	movw	r24, r28
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1372:	00 e0       	ldi	r16, 0x00	; 0
    1374:	10 e0       	ldi	r17, 0x00	; 0
    1376:	98 01       	movw	r18, r16
    1378:	43 ef       	ldi	r20, 0xF3	; 243
    137a:	54 e0       	ldi	r21, 0x04	; 4
    137c:	65 e3       	ldi	r22, 0x35	; 53
    137e:	7f e3       	ldi	r23, 0x3F	; 63
    1380:	ce 01       	movw	r24, r28
    1382:	09 96       	adiw	r24, 0x09	; 9
    1384:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1388:	00 e0       	ldi	r16, 0x00	; 0
    138a:	10 e0       	ldi	r17, 0x00	; 0
    138c:	98 01       	movw	r18, r16
    138e:	43 ef       	ldi	r20, 0xF3	; 243
    1390:	54 e0       	ldi	r21, 0x04	; 4
    1392:	65 e3       	ldi	r22, 0x35	; 53
    1394:	7f e3       	ldi	r23, 0x3F	; 63
    1396:	ce 01       	movw	r24, r28
    1398:	41 96       	adiw	r24, 0x11	; 17
    139a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    139e:	00 e0       	ldi	r16, 0x00	; 0
    13a0:	10 e0       	ldi	r17, 0x00	; 0
    13a2:	98 01       	movw	r18, r16
    13a4:	43 ef       	ldi	r20, 0xF3	; 243
    13a6:	54 e0       	ldi	r21, 0x04	; 4
    13a8:	65 e3       	ldi	r22, 0x35	; 53
    13aa:	7f eb       	ldi	r23, 0xBF	; 191
    13ac:	ce 01       	movw	r24, r28
    13ae:	49 96       	adiw	r24, 0x19	; 25
    13b0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    13b4:	bc a2       	std	Y+36, r11	; 0x24
    13b6:	ab a2       	std	Y+35, r10	; 0x23
    13b8:	da a2       	std	Y+34, r13	; 0x22
    13ba:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),h_matrix),QB_SIZE1);
    13bc:	9e 01       	movw	r18, r28
    13be:	2f 5d       	subi	r18, 0xDF	; 223
    13c0:	3f 4f       	sbci	r19, 0xFF	; 255
    13c2:	ae 01       	movw	r20, r28
    13c4:	4d 5d       	subi	r20, 0xDD	; 221
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	c7 01       	movw	r24, r14
    13ce:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    13d2:	ae 01       	movw	r20, r28
    13d4:	4f 5f       	subi	r20, 0xFF	; 255
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	bc 01       	movw	r22, r24
    13da:	c7 01       	movw	r24, r14
    13dc:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	bc 01       	movw	r22, r24
    13e6:	c7 01       	movw	r24, r14
    13e8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    13ec:	a4 96       	adiw	r28, 0x24	; 36
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	af 90       	pop	r10
    140c:	08 95       	ret

0000140e <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    140e:	af 92       	push	r10
    1410:	bf 92       	push	r11
    1412:	cf 92       	push	r12
    1414:	df 92       	push	r13
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	a4 97       	sbiw	r28, 0x24	; 36
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	7c 01       	movw	r14, r24
    1434:	5b 01       	movw	r10, r22
    1436:	6a 01       	movw	r12, r20
	Complex s_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(1,0),Complex(0,0)},
											 {Complex(0,0),Complex(0,1)}};
    1438:	00 e0       	ldi	r16, 0x00	; 0
    143a:	10 e0       	ldi	r17, 0x00	; 0
    143c:	98 01       	movw	r18, r16
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	60 e8       	ldi	r22, 0x80	; 128
    1444:	7f e3       	ldi	r23, 0x3F	; 63
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    144e:	00 e0       	ldi	r16, 0x00	; 0
    1450:	10 e0       	ldi	r17, 0x00	; 0
    1452:	98 01       	movw	r18, r16
    1454:	b9 01       	movw	r22, r18
    1456:	a8 01       	movw	r20, r16
    1458:	ce 01       	movw	r24, r28
    145a:	09 96       	adiw	r24, 0x09	; 9
    145c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1460:	00 e0       	ldi	r16, 0x00	; 0
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	98 01       	movw	r18, r16
    1466:	b9 01       	movw	r22, r18
    1468:	a8 01       	movw	r20, r16
    146a:	ce 01       	movw	r24, r28
    146c:	41 96       	adiw	r24, 0x11	; 17
    146e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1472:	00 e0       	ldi	r16, 0x00	; 0
    1474:	10 e0       	ldi	r17, 0x00	; 0
    1476:	20 e8       	ldi	r18, 0x80	; 128
    1478:	3f e3       	ldi	r19, 0x3F	; 63
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	ba 01       	movw	r22, r20
    1480:	ce 01       	movw	r24, r28
    1482:	49 96       	adiw	r24, 0x19	; 25
    1484:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1488:	bc a2       	std	Y+36, r11	; 0x24
    148a:	ab a2       	std	Y+35, r10	; 0x23
    148c:	da a2       	std	Y+34, r13	; 0x22
    148e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),s_matrix),QB_SIZE1);
    1490:	9e 01       	movw	r18, r28
    1492:	2f 5d       	subi	r18, 0xDF	; 223
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	ae 01       	movw	r20, r28
    1498:	4d 5d       	subi	r20, 0xDD	; 221
    149a:	5f 4f       	sbci	r21, 0xFF	; 255
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	c7 01       	movw	r24, r14
    14a2:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    14a6:	ae 01       	movw	r20, r28
    14a8:	4f 5f       	subi	r20, 0xFF	; 255
    14aa:	5f 4f       	sbci	r21, 0xFF	; 255
    14ac:	bc 01       	movw	r22, r24
    14ae:	c7 01       	movw	r24, r14
    14b0:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    14b4:	41 e0       	ldi	r20, 0x01	; 1
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	bc 01       	movw	r22, r24
    14ba:	c7 01       	movw	r24, r14
    14bc:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    14c0:	a4 96       	adiw	r28, 0x24	; 36
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
    14dc:	bf 90       	pop	r11
    14de:	af 90       	pop	r10
    14e0:	08 95       	ret

000014e2 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    14e2:	af 92       	push	r10
    14e4:	bf 92       	push	r11
    14e6:	cf 92       	push	r12
    14e8:	df 92       	push	r13
    14ea:	ef 92       	push	r14
    14ec:	ff 92       	push	r15
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	a4 97       	sbiw	r28, 0x24	; 36
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	7c 01       	movw	r14, r24
    1508:	5b 01       	movw	r10, r22
    150a:	6a 01       	movw	r12, r20
	Complex t_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(1,0),Complex(0,0)},
											 {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    150c:	00 e0       	ldi	r16, 0x00	; 0
    150e:	10 e0       	ldi	r17, 0x00	; 0
    1510:	98 01       	movw	r18, r16
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	60 e8       	ldi	r22, 0x80	; 128
    1518:	7f e3       	ldi	r23, 0x3F	; 63
    151a:	ce 01       	movw	r24, r28
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1522:	00 e0       	ldi	r16, 0x00	; 0
    1524:	10 e0       	ldi	r17, 0x00	; 0
    1526:	98 01       	movw	r18, r16
    1528:	b9 01       	movw	r22, r18
    152a:	a8 01       	movw	r20, r16
    152c:	ce 01       	movw	r24, r28
    152e:	09 96       	adiw	r24, 0x09	; 9
    1530:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1534:	00 e0       	ldi	r16, 0x00	; 0
    1536:	10 e0       	ldi	r17, 0x00	; 0
    1538:	98 01       	movw	r18, r16
    153a:	b9 01       	movw	r22, r18
    153c:	a8 01       	movw	r20, r16
    153e:	ce 01       	movw	r24, r28
    1540:	41 96       	adiw	r24, 0x11	; 17
    1542:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1546:	03 ef       	ldi	r16, 0xF3	; 243
    1548:	14 e0       	ldi	r17, 0x04	; 4
    154a:	25 e3       	ldi	r18, 0x35	; 53
    154c:	3f e3       	ldi	r19, 0x3F	; 63
    154e:	b9 01       	movw	r22, r18
    1550:	a8 01       	movw	r20, r16
    1552:	ce 01       	movw	r24, r28
    1554:	49 96       	adiw	r24, 0x19	; 25
    1556:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    155a:	bc a2       	std	Y+36, r11	; 0x24
    155c:	ab a2       	std	Y+35, r10	; 0x23
    155e:	da a2       	std	Y+34, r13	; 0x22
    1560:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),t_matrix),QB_SIZE1);
    1562:	9e 01       	movw	r18, r28
    1564:	2f 5d       	subi	r18, 0xDF	; 223
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	ae 01       	movw	r20, r28
    156a:	4d 5d       	subi	r20, 0xDD	; 221
    156c:	5f 4f       	sbci	r21, 0xFF	; 255
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	c7 01       	movw	r24, r14
    1574:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    1578:	ae 01       	movw	r20, r28
    157a:	4f 5f       	subi	r20, 0xFF	; 255
    157c:	5f 4f       	sbci	r21, 0xFF	; 255
    157e:	bc 01       	movw	r22, r24
    1580:	c7 01       	movw	r24, r14
    1582:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1586:	41 e0       	ldi	r20, 0x01	; 1
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	bc 01       	movw	r22, r24
    158c:	c7 01       	movw	r24, r14
    158e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    1592:	a4 96       	adiw	r28, 0x24	; 36
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	cf 90       	pop	r12
    15ae:	bf 90       	pop	r11
    15b0:	af 90       	pop	r10
    15b2:	08 95       	ret

000015b4 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    15b4:	6f 92       	push	r6
    15b6:	7f 92       	push	r7
    15b8:	8f 92       	push	r8
    15ba:	9f 92       	push	r9
    15bc:	af 92       	push	r10
    15be:	bf 92       	push	r11
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	c8 58       	subi	r28, 0x88	; 136
    15d6:	d1 09       	sbc	r29, r1
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	7c 01       	movw	r14, r24
    15e4:	3b 01       	movw	r6, r22
    15e6:	5a 01       	movw	r10, r20
    15e8:	49 01       	movw	r8, r18
    15ea:	68 01       	movw	r12, r16
	Complex cno_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
											   {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    15ec:	00 e0       	ldi	r16, 0x00	; 0
    15ee:	10 e0       	ldi	r17, 0x00	; 0
    15f0:	98 01       	movw	r18, r16
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	50 e0       	ldi	r21, 0x00	; 0
    15f6:	60 e8       	ldi	r22, 0x80	; 128
    15f8:	7f e3       	ldi	r23, 0x3F	; 63
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1602:	00 e0       	ldi	r16, 0x00	; 0
    1604:	10 e0       	ldi	r17, 0x00	; 0
    1606:	98 01       	movw	r18, r16
    1608:	b9 01       	movw	r22, r18
    160a:	a8 01       	movw	r20, r16
    160c:	ce 01       	movw	r24, r28
    160e:	09 96       	adiw	r24, 0x09	; 9
    1610:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1614:	00 e0       	ldi	r16, 0x00	; 0
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	98 01       	movw	r18, r16
    161a:	b9 01       	movw	r22, r18
    161c:	a8 01       	movw	r20, r16
    161e:	ce 01       	movw	r24, r28
    1620:	41 96       	adiw	r24, 0x11	; 17
    1622:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1626:	00 e0       	ldi	r16, 0x00	; 0
    1628:	10 e0       	ldi	r17, 0x00	; 0
    162a:	98 01       	movw	r18, r16
    162c:	b9 01       	movw	r22, r18
    162e:	a8 01       	movw	r20, r16
    1630:	ce 01       	movw	r24, r28
    1632:	49 96       	adiw	r24, 0x19	; 25
    1634:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1638:	00 e0       	ldi	r16, 0x00	; 0
    163a:	10 e0       	ldi	r17, 0x00	; 0
    163c:	98 01       	movw	r18, r16
    163e:	b9 01       	movw	r22, r18
    1640:	a8 01       	movw	r20, r16
    1642:	ce 01       	movw	r24, r28
    1644:	81 96       	adiw	r24, 0x21	; 33
    1646:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    164a:	00 e0       	ldi	r16, 0x00	; 0
    164c:	10 e0       	ldi	r17, 0x00	; 0
    164e:	98 01       	movw	r18, r16
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	60 e8       	ldi	r22, 0x80	; 128
    1656:	7f e3       	ldi	r23, 0x3F	; 63
    1658:	ce 01       	movw	r24, r28
    165a:	89 96       	adiw	r24, 0x29	; 41
    165c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1660:	00 e0       	ldi	r16, 0x00	; 0
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	98 01       	movw	r18, r16
    1666:	b9 01       	movw	r22, r18
    1668:	a8 01       	movw	r20, r16
    166a:	ce 01       	movw	r24, r28
    166c:	c1 96       	adiw	r24, 0x31	; 49
    166e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1672:	00 e0       	ldi	r16, 0x00	; 0
    1674:	10 e0       	ldi	r17, 0x00	; 0
    1676:	98 01       	movw	r18, r16
    1678:	b9 01       	movw	r22, r18
    167a:	a8 01       	movw	r20, r16
    167c:	ce 01       	movw	r24, r28
    167e:	c9 96       	adiw	r24, 0x39	; 57
    1680:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1684:	00 e0       	ldi	r16, 0x00	; 0
    1686:	10 e0       	ldi	r17, 0x00	; 0
    1688:	98 01       	movw	r18, r16
    168a:	b9 01       	movw	r22, r18
    168c:	a8 01       	movw	r20, r16
    168e:	ce 01       	movw	r24, r28
    1690:	8f 5b       	subi	r24, 0xBF	; 191
    1692:	9f 4f       	sbci	r25, 0xFF	; 255
    1694:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1698:	00 e0       	ldi	r16, 0x00	; 0
    169a:	10 e0       	ldi	r17, 0x00	; 0
    169c:	98 01       	movw	r18, r16
    169e:	b9 01       	movw	r22, r18
    16a0:	a8 01       	movw	r20, r16
    16a2:	ce 01       	movw	r24, r28
    16a4:	87 5b       	subi	r24, 0xB7	; 183
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    16ac:	00 e0       	ldi	r16, 0x00	; 0
    16ae:	10 e0       	ldi	r17, 0x00	; 0
    16b0:	98 01       	movw	r18, r16
    16b2:	b9 01       	movw	r22, r18
    16b4:	a8 01       	movw	r20, r16
    16b6:	ce 01       	movw	r24, r28
    16b8:	8f 5a       	subi	r24, 0xAF	; 175
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    16c0:	00 e0       	ldi	r16, 0x00	; 0
    16c2:	10 e0       	ldi	r17, 0x00	; 0
    16c4:	98 01       	movw	r18, r16
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	60 e8       	ldi	r22, 0x80	; 128
    16cc:	7f e3       	ldi	r23, 0x3F	; 63
    16ce:	ce 01       	movw	r24, r28
    16d0:	87 5a       	subi	r24, 0xA7	; 167
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    16d8:	00 e0       	ldi	r16, 0x00	; 0
    16da:	10 e0       	ldi	r17, 0x00	; 0
    16dc:	98 01       	movw	r18, r16
    16de:	b9 01       	movw	r22, r18
    16e0:	a8 01       	movw	r20, r16
    16e2:	ce 01       	movw	r24, r28
    16e4:	8f 59       	subi	r24, 0x9F	; 159
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    16ec:	00 e0       	ldi	r16, 0x00	; 0
    16ee:	10 e0       	ldi	r17, 0x00	; 0
    16f0:	98 01       	movw	r18, r16
    16f2:	b9 01       	movw	r22, r18
    16f4:	a8 01       	movw	r20, r16
    16f6:	ce 01       	movw	r24, r28
    16f8:	87 59       	subi	r24, 0x97	; 151
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1700:	00 e0       	ldi	r16, 0x00	; 0
    1702:	10 e0       	ldi	r17, 0x00	; 0
    1704:	98 01       	movw	r18, r16
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	60 e8       	ldi	r22, 0x80	; 128
    170c:	7f e3       	ldi	r23, 0x3F	; 63
    170e:	ce 01       	movw	r24, r28
    1710:	8f 58       	subi	r24, 0x8F	; 143
    1712:	9f 4f       	sbci	r25, 0xFF	; 255
    1714:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1718:	00 e0       	ldi	r16, 0x00	; 0
    171a:	10 e0       	ldi	r17, 0x00	; 0
    171c:	98 01       	movw	r18, r16
    171e:	b9 01       	movw	r22, r18
    1720:	a8 01       	movw	r20, r16
    1722:	ce 01       	movw	r24, r28
    1724:	87 58       	subi	r24, 0x87	; 135
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};						
    172c:	cb 57       	subi	r28, 0x7B	; 123
    172e:	df 4f       	sbci	r29, 0xFF	; 255
    1730:	79 82       	std	Y+1, r7	; 0x01
    1732:	68 82       	st	Y, r6
    1734:	c5 58       	subi	r28, 0x85	; 133
    1736:	d0 40       	sbci	r29, 0x00	; 0
    1738:	c9 57       	subi	r28, 0x79	; 121
    173a:	df 4f       	sbci	r29, 0xFF	; 255
    173c:	99 82       	std	Y+1, r9	; 0x01
    173e:	88 82       	st	Y, r8
    1740:	c7 58       	subi	r28, 0x87	; 135
    1742:	d0 40       	sbci	r29, 0x00	; 0
    1744:	cf 57       	subi	r28, 0x7F	; 127
    1746:	df 4f       	sbci	r29, 0xFF	; 255
    1748:	b9 82       	std	Y+1, r11	; 0x01
    174a:	a8 82       	st	Y, r10
    174c:	c1 58       	subi	r28, 0x81	; 129
    174e:	d0 40       	sbci	r29, 0x00	; 0
    1750:	cd 57       	subi	r28, 0x7D	; 125
    1752:	df 4f       	sbci	r29, 0xFF	; 255
    1754:	d9 82       	std	Y+1, r13	; 0x01
    1756:	c8 82       	st	Y, r12
    1758:	c3 58       	subi	r28, 0x83	; 131
    175a:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),cno_matrix),QB_SIZE2);
    175c:	9e 01       	movw	r18, r28
    175e:	2f 57       	subi	r18, 0x7F	; 127
    1760:	3f 4f       	sbci	r19, 0xFF	; 255
    1762:	ae 01       	movw	r20, r28
    1764:	4b 57       	subi	r20, 0x7B	; 123
    1766:	5f 4f       	sbci	r21, 0xFF	; 255
    1768:	62 e0       	ldi	r22, 0x02	; 2
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	c7 01       	movw	r24, r14
    176e:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    1772:	ae 01       	movw	r20, r28
    1774:	4f 5f       	subi	r20, 0xFF	; 255
    1776:	5f 4f       	sbci	r21, 0xFF	; 255
    1778:	bc 01       	movw	r22, r24
    177a:	c7 01       	movw	r24, r14
    177c:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1780:	42 e0       	ldi	r20, 0x02	; 2
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	bc 01       	movw	r22, r24
    1786:	c7 01       	movw	r24, r14
    1788:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    178c:	c8 57       	subi	r28, 0x78	; 120
    178e:	df 4f       	sbci	r29, 0xFF	; 255
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	bf 90       	pop	r11
    17ac:	af 90       	pop	r10
    17ae:	9f 90       	pop	r9
    17b0:	8f 90       	pop	r8
    17b2:	7f 90       	pop	r7
    17b4:	6f 90       	pop	r6
    17b6:	08 95       	ret

000017b8 <_ZN5Gates3CSIEiiii>:
int * Gates::CSI(int theta1, int phi1, int theta2,int phi2){
    17b8:	6f 92       	push	r6
    17ba:	7f 92       	push	r7
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	c8 58       	subi	r28, 0x88	; 136
    17da:	d1 09       	sbc	r29, r1
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	7c 01       	movw	r14, r24
    17e8:	3b 01       	movw	r6, r22
    17ea:	5a 01       	movw	r10, r20
    17ec:	49 01       	movw	r8, r18
    17ee:	68 01       	movw	r12, r16
	Complex csi_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(-1,0)}};
    17f0:	00 e0       	ldi	r16, 0x00	; 0
    17f2:	10 e0       	ldi	r17, 0x00	; 0
    17f4:	98 01       	movw	r18, r16
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	60 e8       	ldi	r22, 0x80	; 128
    17fc:	7f e3       	ldi	r23, 0x3F	; 63
    17fe:	ce 01       	movw	r24, r28
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1806:	00 e0       	ldi	r16, 0x00	; 0
    1808:	10 e0       	ldi	r17, 0x00	; 0
    180a:	98 01       	movw	r18, r16
    180c:	b9 01       	movw	r22, r18
    180e:	a8 01       	movw	r20, r16
    1810:	ce 01       	movw	r24, r28
    1812:	09 96       	adiw	r24, 0x09	; 9
    1814:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1818:	00 e0       	ldi	r16, 0x00	; 0
    181a:	10 e0       	ldi	r17, 0x00	; 0
    181c:	98 01       	movw	r18, r16
    181e:	b9 01       	movw	r22, r18
    1820:	a8 01       	movw	r20, r16
    1822:	ce 01       	movw	r24, r28
    1824:	41 96       	adiw	r24, 0x11	; 17
    1826:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    182a:	00 e0       	ldi	r16, 0x00	; 0
    182c:	10 e0       	ldi	r17, 0x00	; 0
    182e:	98 01       	movw	r18, r16
    1830:	b9 01       	movw	r22, r18
    1832:	a8 01       	movw	r20, r16
    1834:	ce 01       	movw	r24, r28
    1836:	49 96       	adiw	r24, 0x19	; 25
    1838:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    183c:	00 e0       	ldi	r16, 0x00	; 0
    183e:	10 e0       	ldi	r17, 0x00	; 0
    1840:	98 01       	movw	r18, r16
    1842:	b9 01       	movw	r22, r18
    1844:	a8 01       	movw	r20, r16
    1846:	ce 01       	movw	r24, r28
    1848:	81 96       	adiw	r24, 0x21	; 33
    184a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    184e:	00 e0       	ldi	r16, 0x00	; 0
    1850:	10 e0       	ldi	r17, 0x00	; 0
    1852:	98 01       	movw	r18, r16
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	60 e8       	ldi	r22, 0x80	; 128
    185a:	7f e3       	ldi	r23, 0x3F	; 63
    185c:	ce 01       	movw	r24, r28
    185e:	89 96       	adiw	r24, 0x29	; 41
    1860:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1864:	00 e0       	ldi	r16, 0x00	; 0
    1866:	10 e0       	ldi	r17, 0x00	; 0
    1868:	98 01       	movw	r18, r16
    186a:	b9 01       	movw	r22, r18
    186c:	a8 01       	movw	r20, r16
    186e:	ce 01       	movw	r24, r28
    1870:	c1 96       	adiw	r24, 0x31	; 49
    1872:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1876:	00 e0       	ldi	r16, 0x00	; 0
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	98 01       	movw	r18, r16
    187c:	b9 01       	movw	r22, r18
    187e:	a8 01       	movw	r20, r16
    1880:	ce 01       	movw	r24, r28
    1882:	c9 96       	adiw	r24, 0x39	; 57
    1884:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1888:	00 e0       	ldi	r16, 0x00	; 0
    188a:	10 e0       	ldi	r17, 0x00	; 0
    188c:	98 01       	movw	r18, r16
    188e:	b9 01       	movw	r22, r18
    1890:	a8 01       	movw	r20, r16
    1892:	ce 01       	movw	r24, r28
    1894:	8f 5b       	subi	r24, 0xBF	; 191
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    189c:	00 e0       	ldi	r16, 0x00	; 0
    189e:	10 e0       	ldi	r17, 0x00	; 0
    18a0:	98 01       	movw	r18, r16
    18a2:	b9 01       	movw	r22, r18
    18a4:	a8 01       	movw	r20, r16
    18a6:	ce 01       	movw	r24, r28
    18a8:	87 5b       	subi	r24, 0xB7	; 183
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    18b0:	00 e0       	ldi	r16, 0x00	; 0
    18b2:	10 e0       	ldi	r17, 0x00	; 0
    18b4:	98 01       	movw	r18, r16
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	60 e8       	ldi	r22, 0x80	; 128
    18bc:	7f e3       	ldi	r23, 0x3F	; 63
    18be:	ce 01       	movw	r24, r28
    18c0:	8f 5a       	subi	r24, 0xAF	; 175
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    18c8:	00 e0       	ldi	r16, 0x00	; 0
    18ca:	10 e0       	ldi	r17, 0x00	; 0
    18cc:	98 01       	movw	r18, r16
    18ce:	b9 01       	movw	r22, r18
    18d0:	a8 01       	movw	r20, r16
    18d2:	ce 01       	movw	r24, r28
    18d4:	87 5a       	subi	r24, 0xA7	; 167
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    18dc:	00 e0       	ldi	r16, 0x00	; 0
    18de:	10 e0       	ldi	r17, 0x00	; 0
    18e0:	98 01       	movw	r18, r16
    18e2:	b9 01       	movw	r22, r18
    18e4:	a8 01       	movw	r20, r16
    18e6:	ce 01       	movw	r24, r28
    18e8:	8f 59       	subi	r24, 0x9F	; 159
    18ea:	9f 4f       	sbci	r25, 0xFF	; 255
    18ec:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    18f0:	00 e0       	ldi	r16, 0x00	; 0
    18f2:	10 e0       	ldi	r17, 0x00	; 0
    18f4:	98 01       	movw	r18, r16
    18f6:	b9 01       	movw	r22, r18
    18f8:	a8 01       	movw	r20, r16
    18fa:	ce 01       	movw	r24, r28
    18fc:	87 59       	subi	r24, 0x97	; 151
    18fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1900:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1904:	00 e0       	ldi	r16, 0x00	; 0
    1906:	10 e0       	ldi	r17, 0x00	; 0
    1908:	98 01       	movw	r18, r16
    190a:	b9 01       	movw	r22, r18
    190c:	a8 01       	movw	r20, r16
    190e:	ce 01       	movw	r24, r28
    1910:	8f 58       	subi	r24, 0x8F	; 143
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1918:	00 e0       	ldi	r16, 0x00	; 0
    191a:	10 e0       	ldi	r17, 0x00	; 0
    191c:	98 01       	movw	r18, r16
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	60 e8       	ldi	r22, 0x80	; 128
    1924:	7f eb       	ldi	r23, 0xBF	; 191
    1926:	ce 01       	movw	r24, r28
    1928:	87 58       	subi	r24, 0x87	; 135
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1930:	cb 57       	subi	r28, 0x7B	; 123
    1932:	df 4f       	sbci	r29, 0xFF	; 255
    1934:	79 82       	std	Y+1, r7	; 0x01
    1936:	68 82       	st	Y, r6
    1938:	c5 58       	subi	r28, 0x85	; 133
    193a:	d0 40       	sbci	r29, 0x00	; 0
    193c:	c9 57       	subi	r28, 0x79	; 121
    193e:	df 4f       	sbci	r29, 0xFF	; 255
    1940:	99 82       	std	Y+1, r9	; 0x01
    1942:	88 82       	st	Y, r8
    1944:	c7 58       	subi	r28, 0x87	; 135
    1946:	d0 40       	sbci	r29, 0x00	; 0
    1948:	cf 57       	subi	r28, 0x7F	; 127
    194a:	df 4f       	sbci	r29, 0xFF	; 255
    194c:	b9 82       	std	Y+1, r11	; 0x01
    194e:	a8 82       	st	Y, r10
    1950:	c1 58       	subi	r28, 0x81	; 129
    1952:	d0 40       	sbci	r29, 0x00	; 0
    1954:	cd 57       	subi	r28, 0x7D	; 125
    1956:	df 4f       	sbci	r29, 0xFF	; 255
    1958:	d9 82       	std	Y+1, r13	; 0x01
    195a:	c8 82       	st	Y, r12
    195c:	c3 58       	subi	r28, 0x83	; 131
    195e:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),csi_matrix),QB_SIZE2);
    1960:	9e 01       	movw	r18, r28
    1962:	2f 57       	subi	r18, 0x7F	; 127
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	ae 01       	movw	r20, r28
    1968:	4b 57       	subi	r20, 0x7B	; 123
    196a:	5f 4f       	sbci	r21, 0xFF	; 255
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	c7 01       	movw	r24, r14
    1972:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    1976:	ae 01       	movw	r20, r28
    1978:	4f 5f       	subi	r20, 0xFF	; 255
    197a:	5f 4f       	sbci	r21, 0xFF	; 255
    197c:	bc 01       	movw	r22, r24
    197e:	c7 01       	movw	r24, r14
    1980:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1984:	42 e0       	ldi	r20, 0x02	; 2
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	bc 01       	movw	r22, r24
    198a:	c7 01       	movw	r24, r14
    198c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    1990:	c8 57       	subi	r28, 0x78	; 120
    1992:	df 4f       	sbci	r29, 0xFF	; 255
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	ff 90       	pop	r15
    19a8:	ef 90       	pop	r14
    19aa:	df 90       	pop	r13
    19ac:	cf 90       	pop	r12
    19ae:	bf 90       	pop	r11
    19b0:	af 90       	pop	r10
    19b2:	9f 90       	pop	r9
    19b4:	8f 90       	pop	r8
    19b6:	7f 90       	pop	r7
    19b8:	6f 90       	pop	r6
    19ba:	08 95       	ret

000019bc <_ZN5Gates3SWAEiiii>:
int * Gates::SWA(int theta1, int phi1, int theta2,int phi2){
    19bc:	6f 92       	push	r6
    19be:	7f 92       	push	r7
    19c0:	8f 92       	push	r8
    19c2:	9f 92       	push	r9
    19c4:	af 92       	push	r10
    19c6:	bf 92       	push	r11
    19c8:	cf 92       	push	r12
    19ca:	df 92       	push	r13
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	c8 58       	subi	r28, 0x88	; 136
    19de:	d1 09       	sbc	r29, r1
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	7c 01       	movw	r14, r24
    19ec:	3b 01       	movw	r6, r22
    19ee:	5a 01       	movw	r10, r20
    19f0:	49 01       	movw	r8, r18
    19f2:	68 01       	movw	r12, r16
	Complex swa_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
											   {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    19f4:	00 e0       	ldi	r16, 0x00	; 0
    19f6:	10 e0       	ldi	r17, 0x00	; 0
    19f8:	98 01       	movw	r18, r16
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	60 e8       	ldi	r22, 0x80	; 128
    1a00:	7f e3       	ldi	r23, 0x3F	; 63
    1a02:	ce 01       	movw	r24, r28
    1a04:	01 96       	adiw	r24, 0x01	; 1
    1a06:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1a0a:	00 e0       	ldi	r16, 0x00	; 0
    1a0c:	10 e0       	ldi	r17, 0x00	; 0
    1a0e:	98 01       	movw	r18, r16
    1a10:	b9 01       	movw	r22, r18
    1a12:	a8 01       	movw	r20, r16
    1a14:	ce 01       	movw	r24, r28
    1a16:	09 96       	adiw	r24, 0x09	; 9
    1a18:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1a1c:	00 e0       	ldi	r16, 0x00	; 0
    1a1e:	10 e0       	ldi	r17, 0x00	; 0
    1a20:	98 01       	movw	r18, r16
    1a22:	b9 01       	movw	r22, r18
    1a24:	a8 01       	movw	r20, r16
    1a26:	ce 01       	movw	r24, r28
    1a28:	41 96       	adiw	r24, 0x11	; 17
    1a2a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1a2e:	00 e0       	ldi	r16, 0x00	; 0
    1a30:	10 e0       	ldi	r17, 0x00	; 0
    1a32:	98 01       	movw	r18, r16
    1a34:	b9 01       	movw	r22, r18
    1a36:	a8 01       	movw	r20, r16
    1a38:	ce 01       	movw	r24, r28
    1a3a:	49 96       	adiw	r24, 0x19	; 25
    1a3c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	10 e0       	ldi	r17, 0x00	; 0
    1a44:	98 01       	movw	r18, r16
    1a46:	b9 01       	movw	r22, r18
    1a48:	a8 01       	movw	r20, r16
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	81 96       	adiw	r24, 0x21	; 33
    1a4e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1a52:	00 e0       	ldi	r16, 0x00	; 0
    1a54:	10 e0       	ldi	r17, 0x00	; 0
    1a56:	98 01       	movw	r18, r16
    1a58:	b9 01       	movw	r22, r18
    1a5a:	a8 01       	movw	r20, r16
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	89 96       	adiw	r24, 0x29	; 41
    1a60:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1a64:	00 e0       	ldi	r16, 0x00	; 0
    1a66:	10 e0       	ldi	r17, 0x00	; 0
    1a68:	98 01       	movw	r18, r16
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	50 e0       	ldi	r21, 0x00	; 0
    1a6e:	60 e8       	ldi	r22, 0x80	; 128
    1a70:	7f e3       	ldi	r23, 0x3F	; 63
    1a72:	ce 01       	movw	r24, r28
    1a74:	c1 96       	adiw	r24, 0x31	; 49
    1a76:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1a7a:	00 e0       	ldi	r16, 0x00	; 0
    1a7c:	10 e0       	ldi	r17, 0x00	; 0
    1a7e:	98 01       	movw	r18, r16
    1a80:	b9 01       	movw	r22, r18
    1a82:	a8 01       	movw	r20, r16
    1a84:	ce 01       	movw	r24, r28
    1a86:	c9 96       	adiw	r24, 0x39	; 57
    1a88:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1a8c:	00 e0       	ldi	r16, 0x00	; 0
    1a8e:	10 e0       	ldi	r17, 0x00	; 0
    1a90:	98 01       	movw	r18, r16
    1a92:	b9 01       	movw	r22, r18
    1a94:	a8 01       	movw	r20, r16
    1a96:	ce 01       	movw	r24, r28
    1a98:	8f 5b       	subi	r24, 0xBF	; 191
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
    1aa4:	98 01       	movw	r18, r16
    1aa6:	40 e0       	ldi	r20, 0x00	; 0
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	60 e8       	ldi	r22, 0x80	; 128
    1aac:	7f e3       	ldi	r23, 0x3F	; 63
    1aae:	ce 01       	movw	r24, r28
    1ab0:	87 5b       	subi	r24, 0xB7	; 183
    1ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1ab8:	00 e0       	ldi	r16, 0x00	; 0
    1aba:	10 e0       	ldi	r17, 0x00	; 0
    1abc:	98 01       	movw	r18, r16
    1abe:	b9 01       	movw	r22, r18
    1ac0:	a8 01       	movw	r20, r16
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	8f 5a       	subi	r24, 0xAF	; 175
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1acc:	00 e0       	ldi	r16, 0x00	; 0
    1ace:	10 e0       	ldi	r17, 0x00	; 0
    1ad0:	98 01       	movw	r18, r16
    1ad2:	b9 01       	movw	r22, r18
    1ad4:	a8 01       	movw	r20, r16
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	87 5a       	subi	r24, 0xA7	; 167
    1ada:	9f 4f       	sbci	r25, 0xFF	; 255
    1adc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1ae0:	00 e0       	ldi	r16, 0x00	; 0
    1ae2:	10 e0       	ldi	r17, 0x00	; 0
    1ae4:	98 01       	movw	r18, r16
    1ae6:	b9 01       	movw	r22, r18
    1ae8:	a8 01       	movw	r20, r16
    1aea:	ce 01       	movw	r24, r28
    1aec:	8f 59       	subi	r24, 0x9F	; 159
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1af4:	00 e0       	ldi	r16, 0x00	; 0
    1af6:	10 e0       	ldi	r17, 0x00	; 0
    1af8:	98 01       	movw	r18, r16
    1afa:	b9 01       	movw	r22, r18
    1afc:	a8 01       	movw	r20, r16
    1afe:	ce 01       	movw	r24, r28
    1b00:	87 59       	subi	r24, 0x97	; 151
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1b08:	00 e0       	ldi	r16, 0x00	; 0
    1b0a:	10 e0       	ldi	r17, 0x00	; 0
    1b0c:	98 01       	movw	r18, r16
    1b0e:	b9 01       	movw	r22, r18
    1b10:	a8 01       	movw	r20, r16
    1b12:	ce 01       	movw	r24, r28
    1b14:	8f 58       	subi	r24, 0x8F	; 143
    1b16:	9f 4f       	sbci	r25, 0xFF	; 255
    1b18:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1b1c:	00 e0       	ldi	r16, 0x00	; 0
    1b1e:	10 e0       	ldi	r17, 0x00	; 0
    1b20:	98 01       	movw	r18, r16
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	60 e8       	ldi	r22, 0x80	; 128
    1b28:	7f e3       	ldi	r23, 0x3F	; 63
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	87 58       	subi	r24, 0x87	; 135
    1b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b30:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1b34:	cb 57       	subi	r28, 0x7B	; 123
    1b36:	df 4f       	sbci	r29, 0xFF	; 255
    1b38:	79 82       	std	Y+1, r7	; 0x01
    1b3a:	68 82       	st	Y, r6
    1b3c:	c5 58       	subi	r28, 0x85	; 133
    1b3e:	d0 40       	sbci	r29, 0x00	; 0
    1b40:	c9 57       	subi	r28, 0x79	; 121
    1b42:	df 4f       	sbci	r29, 0xFF	; 255
    1b44:	99 82       	std	Y+1, r9	; 0x01
    1b46:	88 82       	st	Y, r8
    1b48:	c7 58       	subi	r28, 0x87	; 135
    1b4a:	d0 40       	sbci	r29, 0x00	; 0
    1b4c:	cf 57       	subi	r28, 0x7F	; 127
    1b4e:	df 4f       	sbci	r29, 0xFF	; 255
    1b50:	b9 82       	std	Y+1, r11	; 0x01
    1b52:	a8 82       	st	Y, r10
    1b54:	c1 58       	subi	r28, 0x81	; 129
    1b56:	d0 40       	sbci	r29, 0x00	; 0
    1b58:	cd 57       	subi	r28, 0x7D	; 125
    1b5a:	df 4f       	sbci	r29, 0xFF	; 255
    1b5c:	d9 82       	std	Y+1, r13	; 0x01
    1b5e:	c8 82       	st	Y, r12
    1b60:	c3 58       	subi	r28, 0x83	; 131
    1b62:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swa_matrix),QB_SIZE2);	
    1b64:	9e 01       	movw	r18, r28
    1b66:	2f 57       	subi	r18, 0x7F	; 127
    1b68:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6a:	ae 01       	movw	r20, r28
    1b6c:	4b 57       	subi	r20, 0x7B	; 123
    1b6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	c7 01       	movw	r24, r14
    1b76:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    1b7a:	ae 01       	movw	r20, r28
    1b7c:	4f 5f       	subi	r20, 0xFF	; 255
    1b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b80:	bc 01       	movw	r22, r24
    1b82:	c7 01       	movw	r24, r14
    1b84:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1b88:	42 e0       	ldi	r20, 0x02	; 2
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	c7 01       	movw	r24, r14
    1b90:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    1b94:	c8 57       	subi	r28, 0x78	; 120
    1b96:	df 4f       	sbci	r29, 0xFF	; 255
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	bf 90       	pop	r11
    1bb4:	af 90       	pop	r10
    1bb6:	9f 90       	pop	r9
    1bb8:	8f 90       	pop	r8
    1bba:	7f 90       	pop	r7
    1bbc:	6f 90       	pop	r6
    1bbe:	08 95       	ret

00001bc0 <_ZN5Gates3INCEiiii>:
int * Gates::INC(int theta1, int phi1, int theta2,int phi2){
    1bc0:	6f 92       	push	r6
    1bc2:	7f 92       	push	r7
    1bc4:	8f 92       	push	r8
    1bc6:	9f 92       	push	r9
    1bc8:	af 92       	push	r10
    1bca:	bf 92       	push	r11
    1bcc:	cf 92       	push	r12
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	c8 58       	subi	r28, 0x88	; 136
    1be2:	d1 09       	sbc	r29, r1
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	7c 01       	movw	r14, r24
    1bf0:	3b 01       	movw	r6, r22
    1bf2:	5a 01       	movw	r10, r20
    1bf4:	49 01       	movw	r8, r18
    1bf6:	68 01       	movw	r12, r16
	Complex inc_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
											   {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1bf8:	00 e0       	ldi	r16, 0x00	; 0
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	98 01       	movw	r18, r16
    1bfe:	b9 01       	movw	r22, r18
    1c00:	a8 01       	movw	r20, r16
    1c02:	ce 01       	movw	r24, r28
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1c0a:	00 e0       	ldi	r16, 0x00	; 0
    1c0c:	10 e0       	ldi	r17, 0x00	; 0
    1c0e:	98 01       	movw	r18, r16
    1c10:	b9 01       	movw	r22, r18
    1c12:	a8 01       	movw	r20, r16
    1c14:	ce 01       	movw	r24, r28
    1c16:	09 96       	adiw	r24, 0x09	; 9
    1c18:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1c1c:	00 e0       	ldi	r16, 0x00	; 0
    1c1e:	10 e0       	ldi	r17, 0x00	; 0
    1c20:	98 01       	movw	r18, r16
    1c22:	b9 01       	movw	r22, r18
    1c24:	a8 01       	movw	r20, r16
    1c26:	ce 01       	movw	r24, r28
    1c28:	41 96       	adiw	r24, 0x11	; 17
    1c2a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1c2e:	00 e0       	ldi	r16, 0x00	; 0
    1c30:	10 e0       	ldi	r17, 0x00	; 0
    1c32:	98 01       	movw	r18, r16
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	60 e8       	ldi	r22, 0x80	; 128
    1c3a:	7f e3       	ldi	r23, 0x3F	; 63
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	49 96       	adiw	r24, 0x19	; 25
    1c40:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1c44:	00 e0       	ldi	r16, 0x00	; 0
    1c46:	10 e0       	ldi	r17, 0x00	; 0
    1c48:	98 01       	movw	r18, r16
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	60 e8       	ldi	r22, 0x80	; 128
    1c50:	7f e3       	ldi	r23, 0x3F	; 63
    1c52:	ce 01       	movw	r24, r28
    1c54:	81 96       	adiw	r24, 0x21	; 33
    1c56:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1c5a:	00 e0       	ldi	r16, 0x00	; 0
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
    1c5e:	98 01       	movw	r18, r16
    1c60:	b9 01       	movw	r22, r18
    1c62:	a8 01       	movw	r20, r16
    1c64:	ce 01       	movw	r24, r28
    1c66:	89 96       	adiw	r24, 0x29	; 41
    1c68:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1c6c:	00 e0       	ldi	r16, 0x00	; 0
    1c6e:	10 e0       	ldi	r17, 0x00	; 0
    1c70:	98 01       	movw	r18, r16
    1c72:	b9 01       	movw	r22, r18
    1c74:	a8 01       	movw	r20, r16
    1c76:	ce 01       	movw	r24, r28
    1c78:	c1 96       	adiw	r24, 0x31	; 49
    1c7a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1c7e:	00 e0       	ldi	r16, 0x00	; 0
    1c80:	10 e0       	ldi	r17, 0x00	; 0
    1c82:	98 01       	movw	r18, r16
    1c84:	b9 01       	movw	r22, r18
    1c86:	a8 01       	movw	r20, r16
    1c88:	ce 01       	movw	r24, r28
    1c8a:	c9 96       	adiw	r24, 0x39	; 57
    1c8c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1c90:	00 e0       	ldi	r16, 0x00	; 0
    1c92:	10 e0       	ldi	r17, 0x00	; 0
    1c94:	98 01       	movw	r18, r16
    1c96:	b9 01       	movw	r22, r18
    1c98:	a8 01       	movw	r20, r16
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	8f 5b       	subi	r24, 0xBF	; 191
    1c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1ca4:	00 e0       	ldi	r16, 0x00	; 0
    1ca6:	10 e0       	ldi	r17, 0x00	; 0
    1ca8:	98 01       	movw	r18, r16
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	60 e8       	ldi	r22, 0x80	; 128
    1cb0:	7f e3       	ldi	r23, 0x3F	; 63
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	87 5b       	subi	r24, 0xB7	; 183
    1cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1cbc:	00 e0       	ldi	r16, 0x00	; 0
    1cbe:	10 e0       	ldi	r17, 0x00	; 0
    1cc0:	98 01       	movw	r18, r16
    1cc2:	b9 01       	movw	r22, r18
    1cc4:	a8 01       	movw	r20, r16
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	8f 5a       	subi	r24, 0xAF	; 175
    1cca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ccc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1cd0:	00 e0       	ldi	r16, 0x00	; 0
    1cd2:	10 e0       	ldi	r17, 0x00	; 0
    1cd4:	98 01       	movw	r18, r16
    1cd6:	b9 01       	movw	r22, r18
    1cd8:	a8 01       	movw	r20, r16
    1cda:	ce 01       	movw	r24, r28
    1cdc:	87 5a       	subi	r24, 0xA7	; 167
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1ce4:	00 e0       	ldi	r16, 0x00	; 0
    1ce6:	10 e0       	ldi	r17, 0x00	; 0
    1ce8:	98 01       	movw	r18, r16
    1cea:	b9 01       	movw	r22, r18
    1cec:	a8 01       	movw	r20, r16
    1cee:	ce 01       	movw	r24, r28
    1cf0:	8f 59       	subi	r24, 0x9F	; 159
    1cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1cf8:	00 e0       	ldi	r16, 0x00	; 0
    1cfa:	10 e0       	ldi	r17, 0x00	; 0
    1cfc:	98 01       	movw	r18, r16
    1cfe:	b9 01       	movw	r22, r18
    1d00:	a8 01       	movw	r20, r16
    1d02:	ce 01       	movw	r24, r28
    1d04:	87 59       	subi	r24, 0x97	; 151
    1d06:	9f 4f       	sbci	r25, 0xFF	; 255
    1d08:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1d0c:	00 e0       	ldi	r16, 0x00	; 0
    1d0e:	10 e0       	ldi	r17, 0x00	; 0
    1d10:	98 01       	movw	r18, r16
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	60 e8       	ldi	r22, 0x80	; 128
    1d18:	7f e3       	ldi	r23, 0x3F	; 63
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	8f 58       	subi	r24, 0x8F	; 143
    1d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d20:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1d24:	00 e0       	ldi	r16, 0x00	; 0
    1d26:	10 e0       	ldi	r17, 0x00	; 0
    1d28:	98 01       	movw	r18, r16
    1d2a:	b9 01       	movw	r22, r18
    1d2c:	a8 01       	movw	r20, r16
    1d2e:	ce 01       	movw	r24, r28
    1d30:	87 58       	subi	r24, 0x87	; 135
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1d38:	cb 57       	subi	r28, 0x7B	; 123
    1d3a:	df 4f       	sbci	r29, 0xFF	; 255
    1d3c:	79 82       	std	Y+1, r7	; 0x01
    1d3e:	68 82       	st	Y, r6
    1d40:	c5 58       	subi	r28, 0x85	; 133
    1d42:	d0 40       	sbci	r29, 0x00	; 0
    1d44:	c9 57       	subi	r28, 0x79	; 121
    1d46:	df 4f       	sbci	r29, 0xFF	; 255
    1d48:	99 82       	std	Y+1, r9	; 0x01
    1d4a:	88 82       	st	Y, r8
    1d4c:	c7 58       	subi	r28, 0x87	; 135
    1d4e:	d0 40       	sbci	r29, 0x00	; 0
    1d50:	cf 57       	subi	r28, 0x7F	; 127
    1d52:	df 4f       	sbci	r29, 0xFF	; 255
    1d54:	b9 82       	std	Y+1, r11	; 0x01
    1d56:	a8 82       	st	Y, r10
    1d58:	c1 58       	subi	r28, 0x81	; 129
    1d5a:	d0 40       	sbci	r29, 0x00	; 0
    1d5c:	cd 57       	subi	r28, 0x7D	; 125
    1d5e:	df 4f       	sbci	r29, 0xFF	; 255
    1d60:	d9 82       	std	Y+1, r13	; 0x01
    1d62:	c8 82       	st	Y, r12
    1d64:	c3 58       	subi	r28, 0x83	; 131
    1d66:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),inc_matrix),QB_SIZE2);
    1d68:	9e 01       	movw	r18, r28
    1d6a:	2f 57       	subi	r18, 0x7F	; 127
    1d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6e:	ae 01       	movw	r20, r28
    1d70:	4b 57       	subi	r20, 0x7B	; 123
    1d72:	5f 4f       	sbci	r21, 0xFF	; 255
    1d74:	62 e0       	ldi	r22, 0x02	; 2
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	c7 01       	movw	r24, r14
    1d7a:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    1d7e:	ae 01       	movw	r20, r28
    1d80:	4f 5f       	subi	r20, 0xFF	; 255
    1d82:	5f 4f       	sbci	r21, 0xFF	; 255
    1d84:	bc 01       	movw	r22, r24
    1d86:	c7 01       	movw	r24, r14
    1d88:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1d8c:	42 e0       	ldi	r20, 0x02	; 2
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
    1d90:	bc 01       	movw	r22, r24
    1d92:	c7 01       	movw	r24, r14
    1d94:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    1d98:	c8 57       	subi	r28, 0x78	; 120
    1d9a:	df 4f       	sbci	r29, 0xFF	; 255
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	bf 90       	pop	r11
    1db8:	af 90       	pop	r10
    1dba:	9f 90       	pop	r9
    1dbc:	8f 90       	pop	r8
    1dbe:	7f 90       	pop	r7
    1dc0:	6f 90       	pop	r6
    1dc2:	08 95       	ret

00001dc4 <_ZN5Gates3DECEiiii>:
int * Gates::DEC(int theta1, int phi1, int theta2,int phi2){
    1dc4:	6f 92       	push	r6
    1dc6:	7f 92       	push	r7
    1dc8:	8f 92       	push	r8
    1dca:	9f 92       	push	r9
    1dcc:	af 92       	push	r10
    1dce:	bf 92       	push	r11
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	c8 58       	subi	r28, 0x88	; 136
    1de6:	d1 09       	sbc	r29, r1
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	7c 01       	movw	r14, r24
    1df4:	3b 01       	movw	r6, r22
    1df6:	5a 01       	movw	r10, r20
    1df8:	49 01       	movw	r8, r18
    1dfa:	68 01       	movw	r12, r16
	Complex dec_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
	  										   {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
						 					   {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)}};
    1dfc:	00 e0       	ldi	r16, 0x00	; 0
    1dfe:	10 e0       	ldi	r17, 0x00	; 0
    1e00:	98 01       	movw	r18, r16
    1e02:	b9 01       	movw	r22, r18
    1e04:	a8 01       	movw	r20, r16
    1e06:	ce 01       	movw	r24, r28
    1e08:	01 96       	adiw	r24, 0x01	; 1
    1e0a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1e0e:	00 e0       	ldi	r16, 0x00	; 0
    1e10:	10 e0       	ldi	r17, 0x00	; 0
    1e12:	98 01       	movw	r18, r16
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	60 e8       	ldi	r22, 0x80	; 128
    1e1a:	7f e3       	ldi	r23, 0x3F	; 63
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	09 96       	adiw	r24, 0x09	; 9
    1e20:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1e24:	00 e0       	ldi	r16, 0x00	; 0
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	98 01       	movw	r18, r16
    1e2a:	b9 01       	movw	r22, r18
    1e2c:	a8 01       	movw	r20, r16
    1e2e:	ce 01       	movw	r24, r28
    1e30:	41 96       	adiw	r24, 0x11	; 17
    1e32:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1e36:	00 e0       	ldi	r16, 0x00	; 0
    1e38:	10 e0       	ldi	r17, 0x00	; 0
    1e3a:	98 01       	movw	r18, r16
    1e3c:	b9 01       	movw	r22, r18
    1e3e:	a8 01       	movw	r20, r16
    1e40:	ce 01       	movw	r24, r28
    1e42:	49 96       	adiw	r24, 0x19	; 25
    1e44:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1e48:	00 e0       	ldi	r16, 0x00	; 0
    1e4a:	10 e0       	ldi	r17, 0x00	; 0
    1e4c:	98 01       	movw	r18, r16
    1e4e:	b9 01       	movw	r22, r18
    1e50:	a8 01       	movw	r20, r16
    1e52:	ce 01       	movw	r24, r28
    1e54:	81 96       	adiw	r24, 0x21	; 33
    1e56:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1e5a:	00 e0       	ldi	r16, 0x00	; 0
    1e5c:	10 e0       	ldi	r17, 0x00	; 0
    1e5e:	98 01       	movw	r18, r16
    1e60:	b9 01       	movw	r22, r18
    1e62:	a8 01       	movw	r20, r16
    1e64:	ce 01       	movw	r24, r28
    1e66:	89 96       	adiw	r24, 0x29	; 41
    1e68:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1e6c:	00 e0       	ldi	r16, 0x00	; 0
    1e6e:	10 e0       	ldi	r17, 0x00	; 0
    1e70:	98 01       	movw	r18, r16
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	60 e8       	ldi	r22, 0x80	; 128
    1e78:	7f e3       	ldi	r23, 0x3F	; 63
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	c1 96       	adiw	r24, 0x31	; 49
    1e7e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1e82:	00 e0       	ldi	r16, 0x00	; 0
    1e84:	10 e0       	ldi	r17, 0x00	; 0
    1e86:	98 01       	movw	r18, r16
    1e88:	b9 01       	movw	r22, r18
    1e8a:	a8 01       	movw	r20, r16
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	c9 96       	adiw	r24, 0x39	; 57
    1e90:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1e94:	00 e0       	ldi	r16, 0x00	; 0
    1e96:	10 e0       	ldi	r17, 0x00	; 0
    1e98:	98 01       	movw	r18, r16
    1e9a:	b9 01       	movw	r22, r18
    1e9c:	a8 01       	movw	r20, r16
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	8f 5b       	subi	r24, 0xBF	; 191
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1ea8:	00 e0       	ldi	r16, 0x00	; 0
    1eaa:	10 e0       	ldi	r17, 0x00	; 0
    1eac:	98 01       	movw	r18, r16
    1eae:	b9 01       	movw	r22, r18
    1eb0:	a8 01       	movw	r20, r16
    1eb2:	ce 01       	movw	r24, r28
    1eb4:	87 5b       	subi	r24, 0xB7	; 183
    1eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1ebc:	00 e0       	ldi	r16, 0x00	; 0
    1ebe:	10 e0       	ldi	r17, 0x00	; 0
    1ec0:	98 01       	movw	r18, r16
    1ec2:	b9 01       	movw	r22, r18
    1ec4:	a8 01       	movw	r20, r16
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	8f 5a       	subi	r24, 0xAF	; 175
    1eca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ecc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1ed0:	00 e0       	ldi	r16, 0x00	; 0
    1ed2:	10 e0       	ldi	r17, 0x00	; 0
    1ed4:	98 01       	movw	r18, r16
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	50 e0       	ldi	r21, 0x00	; 0
    1eda:	60 e8       	ldi	r22, 0x80	; 128
    1edc:	7f e3       	ldi	r23, 0x3F	; 63
    1ede:	ce 01       	movw	r24, r28
    1ee0:	87 5a       	subi	r24, 0xA7	; 167
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1ee8:	00 e0       	ldi	r16, 0x00	; 0
    1eea:	10 e0       	ldi	r17, 0x00	; 0
    1eec:	98 01       	movw	r18, r16
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	60 e8       	ldi	r22, 0x80	; 128
    1ef4:	7f e3       	ldi	r23, 0x3F	; 63
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	8f 59       	subi	r24, 0x9F	; 159
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1f00:	00 e0       	ldi	r16, 0x00	; 0
    1f02:	10 e0       	ldi	r17, 0x00	; 0
    1f04:	98 01       	movw	r18, r16
    1f06:	b9 01       	movw	r22, r18
    1f08:	a8 01       	movw	r20, r16
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	87 59       	subi	r24, 0x97	; 151
    1f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f10:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1f14:	00 e0       	ldi	r16, 0x00	; 0
    1f16:	10 e0       	ldi	r17, 0x00	; 0
    1f18:	98 01       	movw	r18, r16
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	a8 01       	movw	r20, r16
    1f1e:	ce 01       	movw	r24, r28
    1f20:	8f 58       	subi	r24, 0x8F	; 143
    1f22:	9f 4f       	sbci	r25, 0xFF	; 255
    1f24:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    1f28:	00 e0       	ldi	r16, 0x00	; 0
    1f2a:	10 e0       	ldi	r17, 0x00	; 0
    1f2c:	98 01       	movw	r18, r16
    1f2e:	b9 01       	movw	r22, r18
    1f30:	a8 01       	movw	r20, r16
    1f32:	ce 01       	movw	r24, r28
    1f34:	87 58       	subi	r24, 0x87	; 135
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1f3c:	cb 57       	subi	r28, 0x7B	; 123
    1f3e:	df 4f       	sbci	r29, 0xFF	; 255
    1f40:	79 82       	std	Y+1, r7	; 0x01
    1f42:	68 82       	st	Y, r6
    1f44:	c5 58       	subi	r28, 0x85	; 133
    1f46:	d0 40       	sbci	r29, 0x00	; 0
    1f48:	c9 57       	subi	r28, 0x79	; 121
    1f4a:	df 4f       	sbci	r29, 0xFF	; 255
    1f4c:	99 82       	std	Y+1, r9	; 0x01
    1f4e:	88 82       	st	Y, r8
    1f50:	c7 58       	subi	r28, 0x87	; 135
    1f52:	d0 40       	sbci	r29, 0x00	; 0
    1f54:	cf 57       	subi	r28, 0x7F	; 127
    1f56:	df 4f       	sbci	r29, 0xFF	; 255
    1f58:	b9 82       	std	Y+1, r11	; 0x01
    1f5a:	a8 82       	st	Y, r10
    1f5c:	c1 58       	subi	r28, 0x81	; 129
    1f5e:	d0 40       	sbci	r29, 0x00	; 0
    1f60:	cd 57       	subi	r28, 0x7D	; 125
    1f62:	df 4f       	sbci	r29, 0xFF	; 255
    1f64:	d9 82       	std	Y+1, r13	; 0x01
    1f66:	c8 82       	st	Y, r12
    1f68:	c3 58       	subi	r28, 0x83	; 131
    1f6a:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    1f6c:	9e 01       	movw	r18, r28
    1f6e:	2f 57       	subi	r18, 0x7F	; 127
    1f70:	3f 4f       	sbci	r19, 0xFF	; 255
    1f72:	ae 01       	movw	r20, r28
    1f74:	4b 57       	subi	r20, 0x7B	; 123
    1f76:	5f 4f       	sbci	r21, 0xFF	; 255
    1f78:	62 e0       	ldi	r22, 0x02	; 2
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	c7 01       	movw	r24, r14
    1f7e:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    1f82:	ae 01       	movw	r20, r28
    1f84:	4f 5f       	subi	r20, 0xFF	; 255
    1f86:	5f 4f       	sbci	r21, 0xFF	; 255
    1f88:	bc 01       	movw	r22, r24
    1f8a:	c7 01       	movw	r24, r14
    1f8c:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1f90:	42 e0       	ldi	r20, 0x02	; 2
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	bc 01       	movw	r22, r24
    1f96:	c7 01       	movw	r24, r14
    1f98:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    1f9c:	c8 57       	subi	r28, 0x78	; 120
    1f9e:	df 4f       	sbci	r29, 0xFF	; 255
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	ff 90       	pop	r15
    1fb4:	ef 90       	pop	r14
    1fb6:	df 90       	pop	r13
    1fb8:	cf 90       	pop	r12
    1fba:	bf 90       	pop	r11
    1fbc:	af 90       	pop	r10
    1fbe:	9f 90       	pop	r9
    1fc0:	8f 90       	pop	r8
    1fc2:	7f 90       	pop	r7
    1fc4:	6f 90       	pop	r6
    1fc6:	08 95       	ret

00001fc8 <_ZN5Gates3SWQEiiii>:
int * Gates::SWQ(int theta1, int phi1, int theta2,int phi2){
    1fc8:	6f 92       	push	r6
    1fca:	7f 92       	push	r7
    1fcc:	8f 92       	push	r8
    1fce:	9f 92       	push	r9
    1fd0:	af 92       	push	r10
    1fd2:	bf 92       	push	r11
    1fd4:	cf 92       	push	r12
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	c8 58       	subi	r28, 0x88	; 136
    1fea:	d1 09       	sbc	r29, r1
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	7c 01       	movw	r14, r24
    1ff8:	3b 01       	movw	r6, r22
    1ffa:	5a 01       	movw	r10, r20
    1ffc:	49 01       	movw	r8, r18
    1ffe:	68 01       	movw	r12, r16
	Complex swq_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(1,0),Complex(0,0),   Complex(0,0),   Complex(0,0)},
	 										   {Complex(0,0),Complex(.5,.5), Complex(.5,-.5),Complex(0,0)},
											   {Complex(0,0),Complex(.5,-.5),Complex(.5,.5), Complex(0,0)},
											   {Complex(0,0),Complex(0,0),   Complex(0,0),   Complex(1,0)}};
    2000:	00 e0       	ldi	r16, 0x00	; 0
    2002:	10 e0       	ldi	r17, 0x00	; 0
    2004:	98 01       	movw	r18, r16
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	60 e8       	ldi	r22, 0x80	; 128
    200c:	7f e3       	ldi	r23, 0x3F	; 63
    200e:	ce 01       	movw	r24, r28
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2016:	00 e0       	ldi	r16, 0x00	; 0
    2018:	10 e0       	ldi	r17, 0x00	; 0
    201a:	98 01       	movw	r18, r16
    201c:	b9 01       	movw	r22, r18
    201e:	a8 01       	movw	r20, r16
    2020:	ce 01       	movw	r24, r28
    2022:	09 96       	adiw	r24, 0x09	; 9
    2024:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2028:	00 e0       	ldi	r16, 0x00	; 0
    202a:	10 e0       	ldi	r17, 0x00	; 0
    202c:	98 01       	movw	r18, r16
    202e:	b9 01       	movw	r22, r18
    2030:	a8 01       	movw	r20, r16
    2032:	ce 01       	movw	r24, r28
    2034:	41 96       	adiw	r24, 0x11	; 17
    2036:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    203a:	00 e0       	ldi	r16, 0x00	; 0
    203c:	10 e0       	ldi	r17, 0x00	; 0
    203e:	98 01       	movw	r18, r16
    2040:	b9 01       	movw	r22, r18
    2042:	a8 01       	movw	r20, r16
    2044:	ce 01       	movw	r24, r28
    2046:	49 96       	adiw	r24, 0x19	; 25
    2048:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    204c:	00 e0       	ldi	r16, 0x00	; 0
    204e:	10 e0       	ldi	r17, 0x00	; 0
    2050:	98 01       	movw	r18, r16
    2052:	b9 01       	movw	r22, r18
    2054:	a8 01       	movw	r20, r16
    2056:	ce 01       	movw	r24, r28
    2058:	81 96       	adiw	r24, 0x21	; 33
    205a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    205e:	00 e0       	ldi	r16, 0x00	; 0
    2060:	10 e0       	ldi	r17, 0x00	; 0
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	3f e3       	ldi	r19, 0x3F	; 63
    2066:	b9 01       	movw	r22, r18
    2068:	a8 01       	movw	r20, r16
    206a:	ce 01       	movw	r24, r28
    206c:	89 96       	adiw	r24, 0x29	; 41
    206e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2072:	00 e0       	ldi	r16, 0x00	; 0
    2074:	10 e0       	ldi	r17, 0x00	; 0
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	3f eb       	ldi	r19, 0xBF	; 191
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	7f e3       	ldi	r23, 0x3F	; 63
    2082:	ce 01       	movw	r24, r28
    2084:	c1 96       	adiw	r24, 0x31	; 49
    2086:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    208a:	00 e0       	ldi	r16, 0x00	; 0
    208c:	10 e0       	ldi	r17, 0x00	; 0
    208e:	98 01       	movw	r18, r16
    2090:	b9 01       	movw	r22, r18
    2092:	a8 01       	movw	r20, r16
    2094:	ce 01       	movw	r24, r28
    2096:	c9 96       	adiw	r24, 0x39	; 57
    2098:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    209c:	00 e0       	ldi	r16, 0x00	; 0
    209e:	10 e0       	ldi	r17, 0x00	; 0
    20a0:	98 01       	movw	r18, r16
    20a2:	b9 01       	movw	r22, r18
    20a4:	a8 01       	movw	r20, r16
    20a6:	ce 01       	movw	r24, r28
    20a8:	8f 5b       	subi	r24, 0xBF	; 191
    20aa:	9f 4f       	sbci	r25, 0xFF	; 255
    20ac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    20b0:	00 e0       	ldi	r16, 0x00	; 0
    20b2:	10 e0       	ldi	r17, 0x00	; 0
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	3f eb       	ldi	r19, 0xBF	; 191
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	50 e0       	ldi	r21, 0x00	; 0
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	7f e3       	ldi	r23, 0x3F	; 63
    20c0:	ce 01       	movw	r24, r28
    20c2:	87 5b       	subi	r24, 0xB7	; 183
    20c4:	9f 4f       	sbci	r25, 0xFF	; 255
    20c6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    20ca:	00 e0       	ldi	r16, 0x00	; 0
    20cc:	10 e0       	ldi	r17, 0x00	; 0
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	3f e3       	ldi	r19, 0x3F	; 63
    20d2:	b9 01       	movw	r22, r18
    20d4:	a8 01       	movw	r20, r16
    20d6:	ce 01       	movw	r24, r28
    20d8:	8f 5a       	subi	r24, 0xAF	; 175
    20da:	9f 4f       	sbci	r25, 0xFF	; 255
    20dc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    20e0:	00 e0       	ldi	r16, 0x00	; 0
    20e2:	10 e0       	ldi	r17, 0x00	; 0
    20e4:	98 01       	movw	r18, r16
    20e6:	b9 01       	movw	r22, r18
    20e8:	a8 01       	movw	r20, r16
    20ea:	ce 01       	movw	r24, r28
    20ec:	87 5a       	subi	r24, 0xA7	; 167
    20ee:	9f 4f       	sbci	r25, 0xFF	; 255
    20f0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    20f4:	00 e0       	ldi	r16, 0x00	; 0
    20f6:	10 e0       	ldi	r17, 0x00	; 0
    20f8:	98 01       	movw	r18, r16
    20fa:	b9 01       	movw	r22, r18
    20fc:	a8 01       	movw	r20, r16
    20fe:	ce 01       	movw	r24, r28
    2100:	8f 59       	subi	r24, 0x9F	; 159
    2102:	9f 4f       	sbci	r25, 0xFF	; 255
    2104:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2108:	00 e0       	ldi	r16, 0x00	; 0
    210a:	10 e0       	ldi	r17, 0x00	; 0
    210c:	98 01       	movw	r18, r16
    210e:	b9 01       	movw	r22, r18
    2110:	a8 01       	movw	r20, r16
    2112:	ce 01       	movw	r24, r28
    2114:	87 59       	subi	r24, 0x97	; 151
    2116:	9f 4f       	sbci	r25, 0xFF	; 255
    2118:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    211c:	00 e0       	ldi	r16, 0x00	; 0
    211e:	10 e0       	ldi	r17, 0x00	; 0
    2120:	98 01       	movw	r18, r16
    2122:	b9 01       	movw	r22, r18
    2124:	a8 01       	movw	r20, r16
    2126:	ce 01       	movw	r24, r28
    2128:	8f 58       	subi	r24, 0x8F	; 143
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2130:	00 e0       	ldi	r16, 0x00	; 0
    2132:	10 e0       	ldi	r17, 0x00	; 0
    2134:	98 01       	movw	r18, r16
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	60 e8       	ldi	r22, 0x80	; 128
    213c:	7f e3       	ldi	r23, 0x3F	; 63
    213e:	ce 01       	movw	r24, r28
    2140:	87 58       	subi	r24, 0x87	; 135
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2148:	cb 57       	subi	r28, 0x7B	; 123
    214a:	df 4f       	sbci	r29, 0xFF	; 255
    214c:	79 82       	std	Y+1, r7	; 0x01
    214e:	68 82       	st	Y, r6
    2150:	c5 58       	subi	r28, 0x85	; 133
    2152:	d0 40       	sbci	r29, 0x00	; 0
    2154:	c9 57       	subi	r28, 0x79	; 121
    2156:	df 4f       	sbci	r29, 0xFF	; 255
    2158:	99 82       	std	Y+1, r9	; 0x01
    215a:	88 82       	st	Y, r8
    215c:	c7 58       	subi	r28, 0x87	; 135
    215e:	d0 40       	sbci	r29, 0x00	; 0
    2160:	cf 57       	subi	r28, 0x7F	; 127
    2162:	df 4f       	sbci	r29, 0xFF	; 255
    2164:	b9 82       	std	Y+1, r11	; 0x01
    2166:	a8 82       	st	Y, r10
    2168:	c1 58       	subi	r28, 0x81	; 129
    216a:	d0 40       	sbci	r29, 0x00	; 0
    216c:	cd 57       	subi	r28, 0x7D	; 125
    216e:	df 4f       	sbci	r29, 0xFF	; 255
    2170:	d9 82       	std	Y+1, r13	; 0x01
    2172:	c8 82       	st	Y, r12
    2174:	c3 58       	subi	r28, 0x83	; 131
    2176:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swq_matrix),QB_SIZE2);
    2178:	9e 01       	movw	r18, r28
    217a:	2f 57       	subi	r18, 0x7F	; 127
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	ae 01       	movw	r20, r28
    2180:	4b 57       	subi	r20, 0x7B	; 123
    2182:	5f 4f       	sbci	r21, 0xFF	; 255
    2184:	62 e0       	ldi	r22, 0x02	; 2
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	c7 01       	movw	r24, r14
    218a:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    218e:	ae 01       	movw	r20, r28
    2190:	4f 5f       	subi	r20, 0xFF	; 255
    2192:	5f 4f       	sbci	r21, 0xFF	; 255
    2194:	bc 01       	movw	r22, r24
    2196:	c7 01       	movw	r24, r14
    2198:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    219c:	42 e0       	ldi	r20, 0x02	; 2
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	bc 01       	movw	r22, r24
    21a2:	c7 01       	movw	r24, r14
    21a4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    21a8:	c8 57       	subi	r28, 0x78	; 120
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	bf 90       	pop	r11
    21c8:	af 90       	pop	r10
    21ca:	9f 90       	pop	r9
    21cc:	8f 90       	pop	r8
    21ce:	7f 90       	pop	r7
    21d0:	6f 90       	pop	r6
    21d2:	08 95       	ret

000021d4 <_ZN5Gates3SWIEiiii>:
int * Gates::SWI(int theta1, int phi1, int theta2,int phi2){
    21d4:	6f 92       	push	r6
    21d6:	7f 92       	push	r7
    21d8:	8f 92       	push	r8
    21da:	9f 92       	push	r9
    21dc:	af 92       	push	r10
    21de:	bf 92       	push	r11
    21e0:	cf 92       	push	r12
    21e2:	df 92       	push	r13
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	c8 58       	subi	r28, 0x88	; 136
    21f6:	d1 09       	sbc	r29, r1
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	7c 01       	movw	r14, r24
    2204:	3b 01       	movw	r6, r22
    2206:	5a 01       	movw	r10, r20
    2208:	49 01       	movw	r8, r18
    220a:	68 01       	movw	r12, r16
	Complex dec_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,1),Complex(0,0)},
 											   {Complex(0,0),Complex(0,1),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    220c:	00 e0       	ldi	r16, 0x00	; 0
    220e:	10 e0       	ldi	r17, 0x00	; 0
    2210:	98 01       	movw	r18, r16
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	60 e8       	ldi	r22, 0x80	; 128
    2218:	7f e3       	ldi	r23, 0x3F	; 63
    221a:	ce 01       	movw	r24, r28
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2222:	00 e0       	ldi	r16, 0x00	; 0
    2224:	10 e0       	ldi	r17, 0x00	; 0
    2226:	98 01       	movw	r18, r16
    2228:	b9 01       	movw	r22, r18
    222a:	a8 01       	movw	r20, r16
    222c:	ce 01       	movw	r24, r28
    222e:	09 96       	adiw	r24, 0x09	; 9
    2230:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2234:	00 e0       	ldi	r16, 0x00	; 0
    2236:	10 e0       	ldi	r17, 0x00	; 0
    2238:	98 01       	movw	r18, r16
    223a:	b9 01       	movw	r22, r18
    223c:	a8 01       	movw	r20, r16
    223e:	ce 01       	movw	r24, r28
    2240:	41 96       	adiw	r24, 0x11	; 17
    2242:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2246:	00 e0       	ldi	r16, 0x00	; 0
    2248:	10 e0       	ldi	r17, 0x00	; 0
    224a:	98 01       	movw	r18, r16
    224c:	b9 01       	movw	r22, r18
    224e:	a8 01       	movw	r20, r16
    2250:	ce 01       	movw	r24, r28
    2252:	49 96       	adiw	r24, 0x19	; 25
    2254:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2258:	00 e0       	ldi	r16, 0x00	; 0
    225a:	10 e0       	ldi	r17, 0x00	; 0
    225c:	98 01       	movw	r18, r16
    225e:	b9 01       	movw	r22, r18
    2260:	a8 01       	movw	r20, r16
    2262:	ce 01       	movw	r24, r28
    2264:	81 96       	adiw	r24, 0x21	; 33
    2266:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    226a:	00 e0       	ldi	r16, 0x00	; 0
    226c:	10 e0       	ldi	r17, 0x00	; 0
    226e:	98 01       	movw	r18, r16
    2270:	b9 01       	movw	r22, r18
    2272:	a8 01       	movw	r20, r16
    2274:	ce 01       	movw	r24, r28
    2276:	89 96       	adiw	r24, 0x29	; 41
    2278:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    227c:	00 e0       	ldi	r16, 0x00	; 0
    227e:	10 e0       	ldi	r17, 0x00	; 0
    2280:	20 e8       	ldi	r18, 0x80	; 128
    2282:	3f e3       	ldi	r19, 0x3F	; 63
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	50 e0       	ldi	r21, 0x00	; 0
    2288:	ba 01       	movw	r22, r20
    228a:	ce 01       	movw	r24, r28
    228c:	c1 96       	adiw	r24, 0x31	; 49
    228e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2292:	00 e0       	ldi	r16, 0x00	; 0
    2294:	10 e0       	ldi	r17, 0x00	; 0
    2296:	98 01       	movw	r18, r16
    2298:	b9 01       	movw	r22, r18
    229a:	a8 01       	movw	r20, r16
    229c:	ce 01       	movw	r24, r28
    229e:	c9 96       	adiw	r24, 0x39	; 57
    22a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    22a4:	00 e0       	ldi	r16, 0x00	; 0
    22a6:	10 e0       	ldi	r17, 0x00	; 0
    22a8:	98 01       	movw	r18, r16
    22aa:	b9 01       	movw	r22, r18
    22ac:	a8 01       	movw	r20, r16
    22ae:	ce 01       	movw	r24, r28
    22b0:	8f 5b       	subi	r24, 0xBF	; 191
    22b2:	9f 4f       	sbci	r25, 0xFF	; 255
    22b4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    22b8:	00 e0       	ldi	r16, 0x00	; 0
    22ba:	10 e0       	ldi	r17, 0x00	; 0
    22bc:	20 e8       	ldi	r18, 0x80	; 128
    22be:	3f e3       	ldi	r19, 0x3F	; 63
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	ba 01       	movw	r22, r20
    22c6:	ce 01       	movw	r24, r28
    22c8:	87 5b       	subi	r24, 0xB7	; 183
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    22d0:	00 e0       	ldi	r16, 0x00	; 0
    22d2:	10 e0       	ldi	r17, 0x00	; 0
    22d4:	98 01       	movw	r18, r16
    22d6:	b9 01       	movw	r22, r18
    22d8:	a8 01       	movw	r20, r16
    22da:	ce 01       	movw	r24, r28
    22dc:	8f 5a       	subi	r24, 0xAF	; 175
    22de:	9f 4f       	sbci	r25, 0xFF	; 255
    22e0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    22e4:	00 e0       	ldi	r16, 0x00	; 0
    22e6:	10 e0       	ldi	r17, 0x00	; 0
    22e8:	98 01       	movw	r18, r16
    22ea:	b9 01       	movw	r22, r18
    22ec:	a8 01       	movw	r20, r16
    22ee:	ce 01       	movw	r24, r28
    22f0:	87 5a       	subi	r24, 0xA7	; 167
    22f2:	9f 4f       	sbci	r25, 0xFF	; 255
    22f4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    22f8:	00 e0       	ldi	r16, 0x00	; 0
    22fa:	10 e0       	ldi	r17, 0x00	; 0
    22fc:	98 01       	movw	r18, r16
    22fe:	b9 01       	movw	r22, r18
    2300:	a8 01       	movw	r20, r16
    2302:	ce 01       	movw	r24, r28
    2304:	8f 59       	subi	r24, 0x9F	; 159
    2306:	9f 4f       	sbci	r25, 0xFF	; 255
    2308:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    230c:	00 e0       	ldi	r16, 0x00	; 0
    230e:	10 e0       	ldi	r17, 0x00	; 0
    2310:	98 01       	movw	r18, r16
    2312:	b9 01       	movw	r22, r18
    2314:	a8 01       	movw	r20, r16
    2316:	ce 01       	movw	r24, r28
    2318:	87 59       	subi	r24, 0x97	; 151
    231a:	9f 4f       	sbci	r25, 0xFF	; 255
    231c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2320:	00 e0       	ldi	r16, 0x00	; 0
    2322:	10 e0       	ldi	r17, 0x00	; 0
    2324:	98 01       	movw	r18, r16
    2326:	b9 01       	movw	r22, r18
    2328:	a8 01       	movw	r20, r16
    232a:	ce 01       	movw	r24, r28
    232c:	8f 58       	subi	r24, 0x8F	; 143
    232e:	9f 4f       	sbci	r25, 0xFF	; 255
    2330:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
    2334:	00 e0       	ldi	r16, 0x00	; 0
    2336:	10 e0       	ldi	r17, 0x00	; 0
    2338:	98 01       	movw	r18, r16
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	60 e8       	ldi	r22, 0x80	; 128
    2340:	7f e3       	ldi	r23, 0x3F	; 63
    2342:	ce 01       	movw	r24, r28
    2344:	87 58       	subi	r24, 0x87	; 135
    2346:	9f 4f       	sbci	r25, 0xFF	; 255
    2348:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    234c:	cb 57       	subi	r28, 0x7B	; 123
    234e:	df 4f       	sbci	r29, 0xFF	; 255
    2350:	79 82       	std	Y+1, r7	; 0x01
    2352:	68 82       	st	Y, r6
    2354:	c5 58       	subi	r28, 0x85	; 133
    2356:	d0 40       	sbci	r29, 0x00	; 0
    2358:	c9 57       	subi	r28, 0x79	; 121
    235a:	df 4f       	sbci	r29, 0xFF	; 255
    235c:	99 82       	std	Y+1, r9	; 0x01
    235e:	88 82       	st	Y, r8
    2360:	c7 58       	subi	r28, 0x87	; 135
    2362:	d0 40       	sbci	r29, 0x00	; 0
    2364:	cf 57       	subi	r28, 0x7F	; 127
    2366:	df 4f       	sbci	r29, 0xFF	; 255
    2368:	b9 82       	std	Y+1, r11	; 0x01
    236a:	a8 82       	st	Y, r10
    236c:	c1 58       	subi	r28, 0x81	; 129
    236e:	d0 40       	sbci	r29, 0x00	; 0
    2370:	cd 57       	subi	r28, 0x7D	; 125
    2372:	df 4f       	sbci	r29, 0xFF	; 255
    2374:	d9 82       	std	Y+1, r13	; 0x01
    2376:	c8 82       	st	Y, r12
    2378:	c3 58       	subi	r28, 0x83	; 131
    237a:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    237c:	9e 01       	movw	r18, r28
    237e:	2f 57       	subi	r18, 0x7F	; 127
    2380:	3f 4f       	sbci	r19, 0xFF	; 255
    2382:	ae 01       	movw	r20, r28
    2384:	4b 57       	subi	r20, 0x7B	; 123
    2386:	5f 4f       	sbci	r21, 0xFF	; 255
    2388:	62 e0       	ldi	r22, 0x02	; 2
    238a:	70 e0       	ldi	r23, 0x00	; 0
    238c:	c7 01       	movw	r24, r14
    238e:	0e 94 58 05 	call	0xab0	; 0xab0 <_ZN5Gates8ampl2vecEiPiS0_>
    2392:	ae 01       	movw	r20, r28
    2394:	4f 5f       	subi	r20, 0xFF	; 255
    2396:	5f 4f       	sbci	r21, 0xFF	; 255
    2398:	bc 01       	movw	r22, r24
    239a:	c7 01       	movw	r24, r14
    239c:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    23a0:	42 e0       	ldi	r20, 0x02	; 2
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	bc 01       	movw	r22, r24
    23a6:	c7 01       	movw	r24, r14
    23a8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Gates8vec2amplEP7Complexi>
}
    23ac:	c8 57       	subi	r28, 0x78	; 120
    23ae:	df 4f       	sbci	r29, 0xFF	; 255
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	ff 90       	pop	r15
    23c4:	ef 90       	pop	r14
    23c6:	df 90       	pop	r13
    23c8:	cf 90       	pop	r12
    23ca:	bf 90       	pop	r11
    23cc:	af 90       	pop	r10
    23ce:	9f 90       	pop	r9
    23d0:	8f 90       	pop	r8
    23d2:	7f 90       	pop	r7
    23d4:	6f 90       	pop	r6
    23d6:	08 95       	ret

000023d8 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}

Serial s;
    23d8:	89 e0       	ldi	r24, 0x09	; 9
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN6SerialC1Ev>
    23e0:	08 95       	ret

000023e2 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){serial.writestr("INITIALIZING . . . ");DDRA=0xFF;program_counter=0;}
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	ec 01       	movw	r28, r24
    23ec:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_ZN6EEPromC1Ev>
    23f0:	8e 01       	movw	r16, r28
    23f2:	0f 5f       	subi	r16, 0xFF	; 255
    23f4:	1f 4f       	sbci	r17, 0xFF	; 255
    23f6:	c8 01       	movw	r24, r16
    23f8:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN6SerialC1Ev>
    23fc:	ce 01       	movw	r24, r28
    23fe:	05 96       	adiw	r24, 0x05	; 5
    2400:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN5GatesC1Ev>
    2404:	61 eb       	ldi	r22, 0xB1	; 177
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	c8 01       	movw	r24, r16
    240a:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
    240e:	8f ef       	ldi	r24, 0xFF	; 255
    2410:	8a bb       	out	0x1a, r24	; 26
    2412:	1c 82       	std	Y+4, r1	; 0x04
    2414:	1b 82       	std	Y+3, r1	; 0x03
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	08 95       	ret

00002420 <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    2420:	7b b3       	in	r23, 0x1b	; 27
    2422:	21 e0       	ldi	r18, 0x01	; 1
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	c9 01       	movw	r24, r18
    2428:	06 2e       	mov	r0, r22
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <_ZN4QEPU10setctrlpinEii+0x10>
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	0a 94       	dec	r0
    2432:	e2 f7       	brpl	.-8      	; 0x242c <_ZN4QEPU10setctrlpinEii+0xc>
    2434:	80 95       	com	r24
    2436:	87 23       	and	r24, r23
    2438:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    243a:	8b b3       	in	r24, 0x1b	; 27
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <_ZN4QEPU10setctrlpinEii+0x22>
    243e:	44 0f       	add	r20, r20
    2440:	55 1f       	adc	r21, r21
    2442:	6a 95       	dec	r22
    2444:	e2 f7       	brpl	.-8      	; 0x243e <_ZN4QEPU10setctrlpinEii+0x1e>
    2446:	48 2b       	or	r20, r24
    2448:	4b bb       	out	0x1b, r20	; 27
    244a:	08 95       	ret

0000244c <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){serial.writestr("INITIALIZING . . . ");DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    2452:	8f ef       	ldi	r24, 0xFF	; 255
    2454:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    2456:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    2458:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    245a:	64 e0       	ldi	r22, 0x04	; 4
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	ce 01       	movw	r24, r28
    2460:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    2464:	41 e0       	ldi	r20, 0x01	; 1
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	66 e0       	ldi	r22, 0x06	; 6
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	ce 01       	movw	r24, r28
    246e:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	66 e0       	ldi	r22, 0x06	; 6
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	ce 01       	movw	r24, r28
    247c:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    2480:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	08 95       	ret

00002488 <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	ec 01       	movw	r28, r24
    2492:	8a 01       	movw	r16, r20
	DDRB=0x00;
    2494:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    2496:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	65 e0       	ldi	r22, 0x05	; 5
    249e:	70 e0       	ldi	r23, 0x00	; 0
    24a0:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    24a4:	a8 01       	movw	r20, r16
    24a6:	64 e0       	ldi	r22, 0x04	; 4
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	ce 01       	movw	r24, r28
    24ac:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    24b0:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    24b2:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    24b4:	9f ef       	ldi	r25, 0xFF	; 255
    24b6:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	08 95       	ret

000024c4 <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    24c4:	6f 92       	push	r6
    24c6:	7f 92       	push	r7
    24c8:	8f 92       	push	r8
    24ca:	9f 92       	push	r9
    24cc:	af 92       	push	r10
    24ce:	bf 92       	push	r11
    24d0:	cf 92       	push	r12
    24d2:	df 92       	push	r13
    24d4:	ef 92       	push	r14
    24d6:	ff 92       	push	r15
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	6c 01       	movw	r12, r24
	serial.writestrln("");
    24e2:	8c 01       	movw	r16, r24
    24e4:	0f 5f       	subi	r16, 0xFF	; 255
    24e6:	1f 4f       	sbci	r17, 0xFF	; 255
    24e8:	6e ee       	ldi	r22, 0xEE	; 238
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	c8 01       	movw	r24, r16
    24ee:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    24f2:	65 ec       	ldi	r22, 0xC5	; 197
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	c8 01       	movw	r24, r16
    24f8:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    24fc:	c0 e0       	ldi	r28, 0x00	; 0
    24fe:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    2500:	0f 2e       	mov	r0, r31
    2502:	ff ed       	ldi	r31, 0xDF	; 223
    2504:	ef 2e       	mov	r14, r31
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	ff 2e       	mov	r15, r31
    250a:	f0 2d       	mov	r31, r0
    250c:	83 e0       	ldi	r24, 0x03	; 3
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
    2514:	88 2e       	mov	r8, r24
    2516:	99 2e       	mov	r9, r25
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	50 e0       	ldi	r21, 0x00	; 0
    251c:	be 01       	movw	r22, r28
    251e:	c6 01       	movw	r24, r12
    2520:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2524:	9f 93       	push	r25
    2526:	8f 93       	push	r24
    2528:	ff 92       	push	r15
    252a:	ef 92       	push	r14
    252c:	9f 92       	push	r9
    252e:	8f 92       	push	r8
    2530:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    2534:	83 e0       	ldi	r24, 0x03	; 3
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
    253c:	a8 2e       	mov	r10, r24
    253e:	b9 2e       	mov	r11, r25
    2540:	41 e0       	ldi	r20, 0x01	; 1
    2542:	50 e0       	ldi	r21, 0x00	; 0
    2544:	be 01       	movw	r22, r28
    2546:	c6 01       	movw	r24, r12
    2548:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    254c:	9f 93       	push	r25
    254e:	8f 93       	push	r24
    2550:	ff 92       	push	r15
    2552:	ef 92       	push	r14
    2554:	bf 92       	push	r11
    2556:	af 92       	push	r10
    2558:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
    2564:	68 2e       	mov	r6, r24
    2566:	79 2e       	mov	r7, r25
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	ff 92       	push	r15
    256e:	ef 92       	push	r14
    2570:	7f 92       	push	r7
    2572:	6f 92       	push	r6
    2574:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    2578:	62 ee       	ldi	r22, 0xE2	; 226
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	c8 01       	movw	r24, r16
    257e:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
    2582:	66 2d       	mov	r22, r6
    2584:	77 2d       	mov	r23, r7
    2586:	c8 01       	movw	r24, r16
    2588:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
    258c:	64 ee       	ldi	r22, 0xE4	; 228
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	c8 01       	movw	r24, r16
    2592:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    2596:	68 2d       	mov	r22, r8
    2598:	79 2d       	mov	r23, r9
    259a:	c8 01       	movw	r24, r16
    259c:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    25a0:	6f ee       	ldi	r22, 0xEF	; 239
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	c8 01       	movw	r24, r16
    25a6:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    25aa:	6a 2d       	mov	r22, r10
    25ac:	7b 2d       	mov	r23, r11
    25ae:	c8 01       	movw	r24, r16
    25b0:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    25b4:	21 96       	adiw	r28, 0x01	; 1
    25b6:	8d b7       	in	r24, 0x3d	; 61
    25b8:	9e b7       	in	r25, 0x3e	; 62
    25ba:	42 96       	adiw	r24, 0x12	; 18
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	9e bf       	out	0x3e, r25	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	8d bf       	out	0x3d, r24	; 61
    25c6:	c4 30       	cpi	r28, 0x04	; 4
    25c8:	d1 05       	cpc	r29, r1
    25ca:	09 f0       	breq	.+2      	; 0x25ce <_ZN4QEPU7dumpmemEv+0x10a>
    25cc:	9f cf       	rjmp	.-194    	; 0x250c <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	df 90       	pop	r13
    25dc:	cf 90       	pop	r12
    25de:	bf 90       	pop	r11
    25e0:	af 90       	pop	r10
    25e2:	9f 90       	pop	r9
    25e4:	8f 90       	pop	r8
    25e6:	7f 90       	pop	r7
    25e8:	6f 90       	pop	r6
    25ea:	08 95       	ret

000025ec <_ZN4QEPU5Utils10int2binstrEii>:

char * QEPU::Utils::int2binstr(int num,int strlength){
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	06 2f       	mov	r16, r22
    25f6:	17 2f       	mov	r17, r23
    25f8:	ea 01       	movw	r28, r20
    char * str = (char*)malloc(strlength + 1);
    25fa:	ca 01       	movw	r24, r20
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
    if(!str) return NULL;
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	b9 f0       	breq	.+46     	; 0x2634 <_ZN4QEPU5Utils10int2binstrEii+0x48>
    str[strlength] = 0;
    2606:	fc 01       	movw	r30, r24
    2608:	ec 0f       	add	r30, r28
    260a:	fd 1f       	adc	r31, r29
    260c:	10 82       	st	Z, r1

    // type punning because signed shift is implementation-defined
    unsigned u = *(unsigned *)&num;
    260e:	20 2f       	mov	r18, r16
    2610:	31 2f       	mov	r19, r17
    for(; strlength--; u >>= 1)
    2612:	be 01       	movw	r22, r28
    2614:	61 50       	subi	r22, 0x01	; 1
    2616:	71 09       	sbc	r23, r1
    2618:	cd 2b       	or	r28, r29
    261a:	71 f0       	breq	.+28     	; 0x2638 <_ZN4QEPU5Utils10int2binstrEii+0x4c>
    str[strlength] = u & 1 ? '1' : '0';
    261c:	20 ff       	sbrs	r18, 0
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <_ZN4QEPU5Utils10int2binstrEii+0x38>
    2620:	41 e3       	ldi	r20, 0x31	; 49
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <_ZN4QEPU5Utils10int2binstrEii+0x3a>
    2624:	40 e3       	ldi	r20, 0x30	; 48
    2626:	42 93       	st	-Z, r20
    if(!str) return NULL;
    str[strlength] = 0;

    // type punning because signed shift is implementation-defined
    unsigned u = *(unsigned *)&num;
    for(; strlength--; u >>= 1)
    2628:	36 95       	lsr	r19
    262a:	27 95       	ror	r18
    262c:	61 50       	subi	r22, 0x01	; 1
    262e:	71 09       	sbc	r23, r1
    2630:	a8 f7       	brcc	.-22     	; 0x261c <_ZN4QEPU5Utils10int2binstrEii+0x30>
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <_ZN4QEPU5Utils10int2binstrEii+0x4c>
	}
}

char * QEPU::Utils::int2binstr(int num,int strlength){
    char * str = (char*)malloc(strlength + 1);
    if(!str) return NULL;
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    unsigned u = *(unsigned *)&num;
    for(; strlength--; u >>= 1)
    str[strlength] = u & 1 ? '1' : '0';

    return str;
}
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	08 95       	ret

00002642 <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    2642:	cf 92       	push	r12
    2644:	df 92       	push	r13
    2646:	ef 92       	push	r14
    2648:	ff 92       	push	r15
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	d6 2f       	mov	r29, r22
    2654:	c7 2f       	mov	r28, r23
    2656:	e6 2f       	mov	r30, r22
    2658:	f7 2f       	mov	r31, r23
	int c_length=0;
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    265e:	21 91       	ld	r18, Z+
    2660:	2f 3f       	cpi	r18, 0xFF	; 255
    2662:	89 f4       	brne	.+34     	; 0x2686 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    2664:	df 01       	movw	r26, r30
    2666:	12 97       	sbiw	r26, 0x02	; 2
    2668:	4c 91       	ld	r20, X
    266a:	4f 3f       	cpi	r20, 0xFF	; 255
    266c:	61 f4       	brne	.+24     	; 0x2686 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    266e:	11 97       	sbiw	r26, 0x01	; 1
    2670:	4c 91       	ld	r20, X
    2672:	4f 3f       	cpi	r20, 0xFF	; 255
    2674:	41 f4       	brne	.+16     	; 0x2686 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    2676:	11 97       	sbiw	r26, 0x01	; 1
    2678:	4c 91       	ld	r20, X
    267a:	4f 3f       	cpi	r20, 0xFF	; 255
    267c:	21 f4       	brne	.+8      	; 0x2686 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    267e:	11 97       	sbiw	r26, 0x01	; 1
    2680:	2c 91       	ld	r18, X
    2682:	2f 3f       	cpi	r18, 0xFF	; 255
    2684:	11 f0       	breq	.+4      	; 0x268a <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	ea cf       	rjmp	.-44     	; 0x265e <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    268a:	8c 01       	movw	r16, r24
    268c:	04 50       	subi	r16, 0x04	; 4
    268e:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    2690:	6c 01       	movw	r12, r24
    2692:	2f ef       	ldi	r18, 0xFF	; 255
    2694:	c2 1a       	sub	r12, r18
    2696:	d2 0a       	sbc	r13, r18
    2698:	76 01       	movw	r14, r12
    269a:	ee 0c       	add	r14, r14
    269c:	ff 1c       	adc	r15, r15
    269e:	c7 01       	movw	r24, r14
    26a0:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    26a4:	10 16       	cp	r1, r16
    26a6:	11 06       	cpc	r1, r17
    26a8:	74 f4       	brge	.+28     	; 0x26c6 <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    26aa:	dc 01       	movw	r26, r24
    26ac:	ed 2f       	mov	r30, r29
    26ae:	fc 2f       	mov	r31, r28
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	41 91       	ld	r20, Z+
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	4d 93       	st	X+, r20
    26ba:	5d 93       	st	X+, r21
    26bc:	2f 5f       	subi	r18, 0xFF	; 255
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	20 17       	cp	r18, r16
    26c2:	31 07       	cpc	r19, r17
    26c4:	bc f3       	brlt	.-18     	; 0x26b4 <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    26c6:	0c 15       	cp	r16, r12
    26c8:	1d 05       	cpc	r17, r13
    26ca:	7c f4       	brge	.+30     	; 0x26ea <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    26cc:	f7 01       	movw	r30, r14
    26ce:	3a 97       	sbiw	r30, 0x0a	; 10
    26d0:	e8 0f       	add	r30, r24
    26d2:	f9 1f       	adc	r31, r25
    26d4:	25 e0       	ldi	r18, 0x05	; 5
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	4f ef       	ldi	r20, 0xFF	; 255
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	41 93       	st	Z+, r20
    26de:	51 93       	st	Z+, r21
    26e0:	21 50       	subi	r18, 0x01	; 1
    26e2:	31 09       	sbc	r19, r1
    26e4:	21 15       	cp	r18, r1
    26e6:	31 05       	cpc	r19, r1
    26e8:	c9 f7       	brne	.-14     	; 0x26dc <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	1f 91       	pop	r17
    26f0:	0f 91       	pop	r16
    26f2:	ff 90       	pop	r15
    26f4:	ef 90       	pop	r14
    26f6:	df 90       	pop	r13
    26f8:	cf 90       	pop	r12
    26fa:	08 95       	ret

000026fc <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	c4 56       	subi	r28, 0x64	; 100
    270a:	d1 09       	sbc	r29, r1
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
	char str[100];
	sprintf(str,"%d",dec);
    2716:	7f 93       	push	r23
    2718:	6f 93       	push	r22
    271a:	8f ed       	ldi	r24, 0xDF	; 223
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9f 93       	push	r25
    2720:	8f 93       	push	r24
    2722:	8e 01       	movw	r16, r28
    2724:	0f 5f       	subi	r16, 0xFF	; 255
    2726:	1f 4f       	sbci	r17, 0xFF	; 255
    2728:	1f 93       	push	r17
    272a:	0f 93       	push	r16
    272c:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <sprintf>
	return str;
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
}
    273c:	c8 01       	movw	r24, r16
    273e:	cc 59       	subi	r28, 0x9C	; 156
    2740:	df 4f       	sbci	r29, 0xFF	; 255
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	08 95       	ret

00002756 <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    2756:	61 15       	cp	r22, r1
    2758:	71 05       	cpc	r23, r1
    275a:	51 f0       	breq	.+20     	; 0x2770 <_ZN4QEPU5Utils5delayEi+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    275c:	86 e6       	ldi	r24, 0x66	; 102
    275e:	9e e0       	ldi	r25, 0x0E	; 14
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <_ZN4QEPU5Utils5delayEi+0xa>
    2764:	00 00       	nop
    2766:	61 50       	subi	r22, 0x01	; 1
    2768:	71 09       	sbc	r23, r1
    276a:	61 15       	cp	r22, r1
    276c:	71 05       	cpc	r23, r1
    276e:	b1 f7       	brne	.-20     	; 0x275c <_ZN4QEPU5Utils5delayEi+0x6>
}
    2770:	08 95       	ret

00002772 <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    2772:	4f 92       	push	r4
    2774:	5f 92       	push	r5
    2776:	6f 92       	push	r6
    2778:	7f 92       	push	r7
    277a:	8f 92       	push	r8
    277c:	9f 92       	push	r9
    277e:	af 92       	push	r10
    2780:	bf 92       	push	r11
    2782:	cf 92       	push	r12
    2784:	df 92       	push	r13
    2786:	ef 92       	push	r14
    2788:	ff 92       	push	r15
    278a:	0f 93       	push	r16
    278c:	1f 93       	push	r17
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	ec 01       	movw	r28, r24
    2794:	6b 01       	movw	r12, r22
    2796:	49 01       	movw	r8, r18
    2798:	5a 01       	movw	r10, r20
    279a:	27 01       	movw	r4, r14
    279c:	38 01       	movw	r6, r16
	int * newthephi=(int*)malloc(sizeof(int)*5);
    279e:	8a e0       	ldi	r24, 0x0A	; 10
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 75 1c 	call	0x38ea	; 0x38ea <malloc>
    27a6:	8c 01       	movw	r16, r24
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    27a8:	f6 01       	movw	r30, r12
    27aa:	31 97       	sbiw	r30, 0x01	; 1
    27ac:	ef 31       	cpi	r30, 0x1F	; 31
    27ae:	f1 05       	cpc	r31, r1
    27b0:	08 f0       	brcs	.+2      	; 0x27b4 <_ZN4QEPU7executeEill+0x42>
    27b2:	1c c3       	rjmp	.+1592   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
    27b4:	e6 5d       	subi	r30, 0xD6	; 214
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	b2 01       	movw	r22, r4
    27c2:	ce 01       	movw	r24, r28
    27c4:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    27c8:	9c 01       	movw	r18, r24
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	b4 01       	movw	r22, r8
    27d0:	ce 01       	movw	r24, r28
    27d2:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	b2 01       	movw	r22, r4
    27dc:	ce 01       	movw	r24, r28
    27de:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    27e2:	9c 01       	movw	r18, r24
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	b4 01       	movw	r22, r8
    27ea:	ce 01       	movw	r24, r28
    27ec:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    27f0:	fd c2       	rjmp	.+1530   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	88 1a       	sub	r8, r24
    27f6:	91 08       	sbc	r9, r1
    27f8:	9c 82       	std	Y+4, r9	; 0x04
    27fa:	8b 82       	std	Y+3, r8	; 0x03
		break;
    27fc:	f7 c2       	rjmp	.+1518   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    27fe:	b4 01       	movw	r22, r8
    2800:	ce 01       	movw	r24, r28
    2802:	02 96       	adiw	r24, 0x02	; 2
    2804:	0e 94 ab 13 	call	0x2756	; 0x2756 <_ZN4QEPU5Utils5delayEi>
    2808:	f1 c2       	rjmp	.+1506   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    280a:	92 01       	movw	r18, r4
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	b4 01       	movw	r22, r8
    2812:	ce 01       	movw	r24, r28
    2814:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2818:	e9 c2       	rjmp	.+1490   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    281a:	92 01       	movw	r18, r4
    281c:	41 e0       	ldi	r20, 0x01	; 1
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	b4 01       	movw	r22, r8
    2822:	ce 01       	movw	r24, r28
    2824:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2828:	e1 c2       	rjmp	.+1474   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    282a:	41 e0       	ldi	r20, 0x01	; 1
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	b4 01       	movw	r22, r8
    2830:	ce 01       	movw	r24, r28
    2832:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2836:	8c 01       	movw	r16, r24
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	b4 01       	movw	r22, r8
    283e:	ce 01       	movw	r24, r28
    2840:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2844:	a8 01       	movw	r20, r16
    2846:	bc 01       	movw	r22, r24
    2848:	ce 01       	movw	r24, r28
    284a:	05 96       	adiw	r24, 0x05	; 5
    284c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN5Gates1XEii>
    2850:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    2852:	fc 01       	movw	r30, r24
    2854:	20 81       	ld	r18, Z
    2856:	31 81       	ldd	r19, Z+1	; 0x01
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	b4 01       	movw	r22, r8
    285e:	ce 01       	movw	r24, r28
    2860:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2864:	f8 01       	movw	r30, r16
    2866:	22 81       	ldd	r18, Z+2	; 0x02
    2868:	33 81       	ldd	r19, Z+3	; 0x03
    286a:	41 e0       	ldi	r20, 0x01	; 1
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	b4 01       	movw	r22, r8
    2870:	ce 01       	movw	r24, r28
    2872:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2876:	ba c2       	rjmp	.+1396   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    2878:	41 e0       	ldi	r20, 0x01	; 1
    287a:	50 e0       	ldi	r21, 0x00	; 0
    287c:	b4 01       	movw	r22, r8
    287e:	ce 01       	movw	r24, r28
    2880:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2884:	8c 01       	movw	r16, r24
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	b4 01       	movw	r22, r8
    288c:	ce 01       	movw	r24, r28
    288e:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2892:	a8 01       	movw	r20, r16
    2894:	bc 01       	movw	r22, r24
    2896:	ce 01       	movw	r24, r28
    2898:	05 96       	adiw	r24, 0x05	; 5
    289a:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN5Gates1YEii>
    289e:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    28a0:	fc 01       	movw	r30, r24
    28a2:	20 81       	ld	r18, Z
    28a4:	31 81       	ldd	r19, Z+1	; 0x01
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	50 e0       	ldi	r21, 0x00	; 0
    28aa:	b4 01       	movw	r22, r8
    28ac:	ce 01       	movw	r24, r28
    28ae:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    28b2:	f8 01       	movw	r30, r16
    28b4:	22 81       	ldd	r18, Z+2	; 0x02
    28b6:	33 81       	ldd	r19, Z+3	; 0x03
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	50 e0       	ldi	r21, 0x00	; 0
    28bc:	b4 01       	movw	r22, r8
    28be:	ce 01       	movw	r24, r28
    28c0:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    28c4:	93 c2       	rjmp	.+1318   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	b4 01       	movw	r22, r8
    28cc:	ce 01       	movw	r24, r28
    28ce:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    28d2:	8c 01       	movw	r16, r24
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	b4 01       	movw	r22, r8
    28da:	ce 01       	movw	r24, r28
    28dc:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    28e0:	a8 01       	movw	r20, r16
    28e2:	bc 01       	movw	r22, r24
    28e4:	ce 01       	movw	r24, r28
    28e6:	05 96       	adiw	r24, 0x05	; 5
    28e8:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN5Gates1ZEii>
    28ec:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    28ee:	fc 01       	movw	r30, r24
    28f0:	20 81       	ld	r18, Z
    28f2:	31 81       	ldd	r19, Z+1	; 0x01
    28f4:	40 e0       	ldi	r20, 0x00	; 0
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	b4 01       	movw	r22, r8
    28fa:	ce 01       	movw	r24, r28
    28fc:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2900:	f8 01       	movw	r30, r16
    2902:	22 81       	ldd	r18, Z+2	; 0x02
    2904:	33 81       	ldd	r19, Z+3	; 0x03
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	b4 01       	movw	r22, r8
    290c:	ce 01       	movw	r24, r28
    290e:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2912:	6c c2       	rjmp	.+1240   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	50 e0       	ldi	r21, 0x00	; 0
    2918:	b4 01       	movw	r22, r8
    291a:	ce 01       	movw	r24, r28
    291c:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2920:	8c 01       	movw	r16, r24
    2922:	40 e0       	ldi	r20, 0x00	; 0
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	b4 01       	movw	r22, r8
    2928:	ce 01       	movw	r24, r28
    292a:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    292e:	a8 01       	movw	r20, r16
    2930:	bc 01       	movw	r22, r24
    2932:	ce 01       	movw	r24, r28
    2934:	05 96       	adiw	r24, 0x05	; 5
    2936:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN5Gates1HEii>
    293a:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    293c:	fc 01       	movw	r30, r24
    293e:	20 81       	ld	r18, Z
    2940:	31 81       	ldd	r19, Z+1	; 0x01
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	b4 01       	movw	r22, r8
    2948:	ce 01       	movw	r24, r28
    294a:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    294e:	f8 01       	movw	r30, r16
    2950:	22 81       	ldd	r18, Z+2	; 0x02
    2952:	33 81       	ldd	r19, Z+3	; 0x03
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	50 e0       	ldi	r21, 0x00	; 0
    2958:	b4 01       	movw	r22, r8
    295a:	ce 01       	movw	r24, r28
    295c:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2960:	45 c2       	rjmp	.+1162   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    2962:	41 e0       	ldi	r20, 0x01	; 1
    2964:	50 e0       	ldi	r21, 0x00	; 0
    2966:	b4 01       	movw	r22, r8
    2968:	ce 01       	movw	r24, r28
    296a:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    296e:	8c 01       	movw	r16, r24
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	b4 01       	movw	r22, r8
    2976:	ce 01       	movw	r24, r28
    2978:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    297c:	a8 01       	movw	r20, r16
    297e:	bc 01       	movw	r22, r24
    2980:	ce 01       	movw	r24, r28
    2982:	05 96       	adiw	r24, 0x05	; 5
    2984:	0e 94 07 0a 	call	0x140e	; 0x140e <_ZN5Gates1SEii>
    2988:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    298a:	fc 01       	movw	r30, r24
    298c:	20 81       	ld	r18, Z
    298e:	31 81       	ldd	r19, Z+1	; 0x01
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	b4 01       	movw	r22, r8
    2996:	ce 01       	movw	r24, r28
    2998:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    299c:	f8 01       	movw	r30, r16
    299e:	22 81       	ldd	r18, Z+2	; 0x02
    29a0:	33 81       	ldd	r19, Z+3	; 0x03
    29a2:	41 e0       	ldi	r20, 0x01	; 1
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	b4 01       	movw	r22, r8
    29a8:	ce 01       	movw	r24, r28
    29aa:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    29ae:	1e c2       	rjmp	.+1084   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    29b0:	41 e0       	ldi	r20, 0x01	; 1
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	b4 01       	movw	r22, r8
    29b6:	ce 01       	movw	r24, r28
    29b8:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    29bc:	8c 01       	movw	r16, r24
    29be:	40 e0       	ldi	r20, 0x00	; 0
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	b4 01       	movw	r22, r8
    29c4:	ce 01       	movw	r24, r28
    29c6:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    29ca:	a8 01       	movw	r20, r16
    29cc:	bc 01       	movw	r22, r24
    29ce:	ce 01       	movw	r24, r28
    29d0:	05 96       	adiw	r24, 0x05	; 5
    29d2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN5Gates1TEii>
    29d6:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    29d8:	fc 01       	movw	r30, r24
    29da:	20 81       	ld	r18, Z
    29dc:	31 81       	ldd	r19, Z+1	; 0x01
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	50 e0       	ldi	r21, 0x00	; 0
    29e2:	b4 01       	movw	r22, r8
    29e4:	ce 01       	movw	r24, r28
    29e6:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    29ea:	f8 01       	movw	r30, r16
    29ec:	22 81       	ldd	r18, Z+2	; 0x02
    29ee:	33 81       	ldd	r19, Z+3	; 0x03
    29f0:	41 e0       	ldi	r20, 0x01	; 1
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	b4 01       	movw	r22, r8
    29f6:	ce 01       	movw	r24, r28
    29f8:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    29fc:	f7 c1       	rjmp	.+1006   	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		//2 QUBIT GATES -
		case 0x16: 
			newthephi=gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	50 e0       	ldi	r21, 0x00	; 0
    2a02:	b2 01       	movw	r22, r4
    2a04:	ce 01       	movw	r24, r28
    2a06:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2a0a:	8c 01       	movw	r16, r24
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	b2 01       	movw	r22, r4
    2a12:	ce 01       	movw	r24, r28
    2a14:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2a18:	6c 01       	movw	r12, r24
    2a1a:	41 e0       	ldi	r20, 0x01	; 1
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	b4 01       	movw	r22, r8
    2a20:	ce 01       	movw	r24, r28
    2a22:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2a26:	7c 01       	movw	r14, r24
    2a28:	40 e0       	ldi	r20, 0x00	; 0
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	b4 01       	movw	r22, r8
    2a2e:	ce 01       	movw	r24, r28
    2a30:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2a34:	96 01       	movw	r18, r12
    2a36:	a7 01       	movw	r20, r14
    2a38:	bc 01       	movw	r22, r24
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	05 96       	adiw	r24, 0x05	; 5
    2a3e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN5Gates3CNOEiiii>
    2a42:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2a44:	fc 01       	movw	r30, r24
    2a46:	20 81       	ld	r18, Z
    2a48:	31 81       	ldd	r19, Z+1	; 0x01
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	b4 01       	movw	r22, r8
    2a50:	ce 01       	movw	r24, r28
    2a52:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2a56:	f8 01       	movw	r30, r16
    2a58:	22 81       	ldd	r18, Z+2	; 0x02
    2a5a:	33 81       	ldd	r19, Z+3	; 0x03
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	b4 01       	movw	r22, r8
    2a62:	ce 01       	movw	r24, r28
    2a64:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2a68:	f8 01       	movw	r30, r16
    2a6a:	24 81       	ldd	r18, Z+4	; 0x04
    2a6c:	35 81       	ldd	r19, Z+5	; 0x05
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	b2 01       	movw	r22, r4
    2a74:	ce 01       	movw	r24, r28
    2a76:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	26 81       	ldd	r18, Z+6	; 0x06
    2a7e:	37 81       	ldd	r19, Z+7	; 0x07
    2a80:	41 e0       	ldi	r20, 0x01	; 1
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	b2 01       	movw	r22, r4
    2a86:	ce 01       	movw	r24, r28
    2a88:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2a8c:	af c1       	rjmp	.+862    	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x17:
			newthephi=gates.CSI(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2a8e:	41 e0       	ldi	r20, 0x01	; 1
    2a90:	50 e0       	ldi	r21, 0x00	; 0
    2a92:	b2 01       	movw	r22, r4
    2a94:	ce 01       	movw	r24, r28
    2a96:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2a9a:	8c 01       	movw	r16, r24
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	b2 01       	movw	r22, r4
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2aa8:	7c 01       	movw	r14, r24
    2aaa:	41 e0       	ldi	r20, 0x01	; 1
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	b4 01       	movw	r22, r8
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2ab6:	6c 01       	movw	r12, r24
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	b4 01       	movw	r22, r8
    2abe:	ce 01       	movw	r24, r28
    2ac0:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2ac4:	97 01       	movw	r18, r14
    2ac6:	a6 01       	movw	r20, r12
    2ac8:	bc 01       	movw	r22, r24
    2aca:	ce 01       	movw	r24, r28
    2acc:	05 96       	adiw	r24, 0x05	; 5
    2ace:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <_ZN5Gates3CSIEiiii>
    2ad2:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	20 81       	ld	r18, Z
    2ad8:	31 81       	ldd	r19, Z+1	; 0x01
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	b4 01       	movw	r22, r8
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	22 81       	ldd	r18, Z+2	; 0x02
    2aea:	33 81       	ldd	r19, Z+3	; 0x03
    2aec:	41 e0       	ldi	r20, 0x01	; 1
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	b4 01       	movw	r22, r8
    2af2:	ce 01       	movw	r24, r28
    2af4:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2af8:	f8 01       	movw	r30, r16
    2afa:	24 81       	ldd	r18, Z+4	; 0x04
    2afc:	35 81       	ldd	r19, Z+5	; 0x05
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	50 e0       	ldi	r21, 0x00	; 0
    2b02:	b2 01       	movw	r22, r4
    2b04:	ce 01       	movw	r24, r28
    2b06:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2b0a:	f8 01       	movw	r30, r16
    2b0c:	26 81       	ldd	r18, Z+6	; 0x06
    2b0e:	37 81       	ldd	r19, Z+7	; 0x07
    2b10:	41 e0       	ldi	r20, 0x01	; 1
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	b2 01       	movw	r22, r4
    2b16:	ce 01       	movw	r24, r28
    2b18:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2b1c:	67 c1       	rjmp	.+718    	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x18: 
			newthephi=gates.SWA(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2b1e:	41 e0       	ldi	r20, 0x01	; 1
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	b2 01       	movw	r22, r4
    2b24:	ce 01       	movw	r24, r28
    2b26:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2b2a:	8c 01       	movw	r16, r24
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	b2 01       	movw	r22, r4
    2b32:	ce 01       	movw	r24, r28
    2b34:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2b38:	7c 01       	movw	r14, r24
    2b3a:	41 e0       	ldi	r20, 0x01	; 1
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	b4 01       	movw	r22, r8
    2b40:	ce 01       	movw	r24, r28
    2b42:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2b46:	6c 01       	movw	r12, r24
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	b4 01       	movw	r22, r8
    2b4e:	ce 01       	movw	r24, r28
    2b50:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2b54:	97 01       	movw	r18, r14
    2b56:	a6 01       	movw	r20, r12
    2b58:	bc 01       	movw	r22, r24
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	05 96       	adiw	r24, 0x05	; 5
    2b5e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN5Gates3SWAEiiii>
    2b62:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2b64:	fc 01       	movw	r30, r24
    2b66:	20 81       	ld	r18, Z
    2b68:	31 81       	ldd	r19, Z+1	; 0x01
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	50 e0       	ldi	r21, 0x00	; 0
    2b6e:	b4 01       	movw	r22, r8
    2b70:	ce 01       	movw	r24, r28
    2b72:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2b76:	f8 01       	movw	r30, r16
    2b78:	22 81       	ldd	r18, Z+2	; 0x02
    2b7a:	33 81       	ldd	r19, Z+3	; 0x03
    2b7c:	41 e0       	ldi	r20, 0x01	; 1
    2b7e:	50 e0       	ldi	r21, 0x00	; 0
    2b80:	b4 01       	movw	r22, r8
    2b82:	ce 01       	movw	r24, r28
    2b84:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2b88:	f8 01       	movw	r30, r16
    2b8a:	24 81       	ldd	r18, Z+4	; 0x04
    2b8c:	35 81       	ldd	r19, Z+5	; 0x05
    2b8e:	40 e0       	ldi	r20, 0x00	; 0
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	b2 01       	movw	r22, r4
    2b94:	ce 01       	movw	r24, r28
    2b96:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	26 81       	ldd	r18, Z+6	; 0x06
    2b9e:	37 81       	ldd	r19, Z+7	; 0x07
    2ba0:	41 e0       	ldi	r20, 0x01	; 1
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	b2 01       	movw	r22, r4
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2bac:	1f c1       	rjmp	.+574    	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x19: 
			newthephi=gates.INC(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2bae:	41 e0       	ldi	r20, 0x01	; 1
    2bb0:	50 e0       	ldi	r21, 0x00	; 0
    2bb2:	b2 01       	movw	r22, r4
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2bba:	8c 01       	movw	r16, r24
    2bbc:	40 e0       	ldi	r20, 0x00	; 0
    2bbe:	50 e0       	ldi	r21, 0x00	; 0
    2bc0:	b2 01       	movw	r22, r4
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2bc8:	7c 01       	movw	r14, r24
    2bca:	41 e0       	ldi	r20, 0x01	; 1
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	b4 01       	movw	r22, r8
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2bd6:	6c 01       	movw	r12, r24
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	50 e0       	ldi	r21, 0x00	; 0
    2bdc:	b4 01       	movw	r22, r8
    2bde:	ce 01       	movw	r24, r28
    2be0:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2be4:	97 01       	movw	r18, r14
    2be6:	a6 01       	movw	r20, r12
    2be8:	bc 01       	movw	r22, r24
    2bea:	ce 01       	movw	r24, r28
    2bec:	05 96       	adiw	r24, 0x05	; 5
    2bee:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_ZN5Gates3INCEiiii>
    2bf2:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	20 81       	ld	r18, Z
    2bf8:	31 81       	ldd	r19, Z+1	; 0x01
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	b4 01       	movw	r22, r8
    2c00:	ce 01       	movw	r24, r28
    2c02:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2c06:	f8 01       	movw	r30, r16
    2c08:	22 81       	ldd	r18, Z+2	; 0x02
    2c0a:	33 81       	ldd	r19, Z+3	; 0x03
    2c0c:	41 e0       	ldi	r20, 0x01	; 1
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	b4 01       	movw	r22, r8
    2c12:	ce 01       	movw	r24, r28
    2c14:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2c18:	f8 01       	movw	r30, r16
    2c1a:	24 81       	ldd	r18, Z+4	; 0x04
    2c1c:	35 81       	ldd	r19, Z+5	; 0x05
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	50 e0       	ldi	r21, 0x00	; 0
    2c22:	b2 01       	movw	r22, r4
    2c24:	ce 01       	movw	r24, r28
    2c26:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2c2a:	f8 01       	movw	r30, r16
    2c2c:	26 81       	ldd	r18, Z+6	; 0x06
    2c2e:	37 81       	ldd	r19, Z+7	; 0x07
    2c30:	41 e0       	ldi	r20, 0x01	; 1
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	b2 01       	movw	r22, r4
    2c36:	ce 01       	movw	r24, r28
    2c38:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2c3c:	d7 c0       	rjmp	.+430    	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x1A: 
			newthephi=gates.DEC(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2c3e:	41 e0       	ldi	r20, 0x01	; 1
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	b2 01       	movw	r22, r4
    2c44:	ce 01       	movw	r24, r28
    2c46:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2c4a:	8c 01       	movw	r16, r24
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	b2 01       	movw	r22, r4
    2c52:	ce 01       	movw	r24, r28
    2c54:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2c58:	7c 01       	movw	r14, r24
    2c5a:	41 e0       	ldi	r20, 0x01	; 1
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	b4 01       	movw	r22, r8
    2c60:	ce 01       	movw	r24, r28
    2c62:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2c66:	6c 01       	movw	r12, r24
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	b4 01       	movw	r22, r8
    2c6e:	ce 01       	movw	r24, r28
    2c70:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2c74:	97 01       	movw	r18, r14
    2c76:	a6 01       	movw	r20, r12
    2c78:	bc 01       	movw	r22, r24
    2c7a:	ce 01       	movw	r24, r28
    2c7c:	05 96       	adiw	r24, 0x05	; 5
    2c7e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <_ZN5Gates3DECEiiii>
    2c82:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2c84:	fc 01       	movw	r30, r24
    2c86:	20 81       	ld	r18, Z
    2c88:	31 81       	ldd	r19, Z+1	; 0x01
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	b4 01       	movw	r22, r8
    2c90:	ce 01       	movw	r24, r28
    2c92:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2c96:	f8 01       	movw	r30, r16
    2c98:	22 81       	ldd	r18, Z+2	; 0x02
    2c9a:	33 81       	ldd	r19, Z+3	; 0x03
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	b4 01       	movw	r22, r8
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2ca8:	f8 01       	movw	r30, r16
    2caa:	24 81       	ldd	r18, Z+4	; 0x04
    2cac:	35 81       	ldd	r19, Z+5	; 0x05
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	b2 01       	movw	r22, r4
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2cba:	f8 01       	movw	r30, r16
    2cbc:	26 81       	ldd	r18, Z+6	; 0x06
    2cbe:	37 81       	ldd	r19, Z+7	; 0x07
    2cc0:	41 e0       	ldi	r20, 0x01	; 1
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	b2 01       	movw	r22, r4
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2ccc:	8f c0       	rjmp	.+286    	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		break;
		case 0x1D: 
			//DEUTSCH -> 3 QUBIT GATE
		break;
		case 0x1E: 
			newthephi=gates.SWQ(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2cce:	41 e0       	ldi	r20, 0x01	; 1
    2cd0:	50 e0       	ldi	r21, 0x00	; 0
    2cd2:	b2 01       	movw	r22, r4
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2cda:	8c 01       	movw	r16, r24
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	50 e0       	ldi	r21, 0x00	; 0
    2ce0:	b2 01       	movw	r22, r4
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2ce8:	7c 01       	movw	r14, r24
    2cea:	41 e0       	ldi	r20, 0x01	; 1
    2cec:	50 e0       	ldi	r21, 0x00	; 0
    2cee:	b4 01       	movw	r22, r8
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2cf6:	6c 01       	movw	r12, r24
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	50 e0       	ldi	r21, 0x00	; 0
    2cfc:	b4 01       	movw	r22, r8
    2cfe:	ce 01       	movw	r24, r28
    2d00:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2d04:	97 01       	movw	r18, r14
    2d06:	a6 01       	movw	r20, r12
    2d08:	bc 01       	movw	r22, r24
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	05 96       	adiw	r24, 0x05	; 5
    2d0e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <_ZN5Gates3SWQEiiii>
    2d12:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2d14:	fc 01       	movw	r30, r24
    2d16:	20 81       	ld	r18, Z
    2d18:	31 81       	ldd	r19, Z+1	; 0x01
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	b4 01       	movw	r22, r8
    2d20:	ce 01       	movw	r24, r28
    2d22:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2d26:	f8 01       	movw	r30, r16
    2d28:	22 81       	ldd	r18, Z+2	; 0x02
    2d2a:	33 81       	ldd	r19, Z+3	; 0x03
    2d2c:	41 e0       	ldi	r20, 0x01	; 1
    2d2e:	50 e0       	ldi	r21, 0x00	; 0
    2d30:	b4 01       	movw	r22, r8
    2d32:	ce 01       	movw	r24, r28
    2d34:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2d38:	f8 01       	movw	r30, r16
    2d3a:	24 81       	ldd	r18, Z+4	; 0x04
    2d3c:	35 81       	ldd	r19, Z+5	; 0x05
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	b2 01       	movw	r22, r4
    2d44:	ce 01       	movw	r24, r28
    2d46:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2d4a:	f8 01       	movw	r30, r16
    2d4c:	26 81       	ldd	r18, Z+6	; 0x06
    2d4e:	37 81       	ldd	r19, Z+7	; 0x07
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	b2 01       	movw	r22, r4
    2d56:	ce 01       	movw	r24, r28
    2d58:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
		break;
    2d5c:	47 c0       	rjmp	.+142    	; 0x2dec <_ZN4QEPU7executeEill+0x67a>
		case 0x1F: 
			newthephi=gates.SWI(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2d5e:	41 e0       	ldi	r20, 0x01	; 1
    2d60:	50 e0       	ldi	r21, 0x00	; 0
    2d62:	b2 01       	movw	r22, r4
    2d64:	ce 01       	movw	r24, r28
    2d66:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2d6a:	8c 01       	movw	r16, r24
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	b2 01       	movw	r22, r4
    2d72:	ce 01       	movw	r24, r28
    2d74:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2d78:	7c 01       	movw	r14, r24
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	50 e0       	ldi	r21, 0x00	; 0
    2d7e:	b4 01       	movw	r22, r8
    2d80:	ce 01       	movw	r24, r28
    2d82:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2d86:	6c 01       	movw	r12, r24
    2d88:	40 e0       	ldi	r20, 0x00	; 0
    2d8a:	50 e0       	ldi	r21, 0x00	; 0
    2d8c:	b4 01       	movw	r22, r8
    2d8e:	ce 01       	movw	r24, r28
    2d90:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN4QEPU4readEii>
    2d94:	97 01       	movw	r18, r14
    2d96:	a6 01       	movw	r20, r12
    2d98:	bc 01       	movw	r22, r24
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	05 96       	adiw	r24, 0x05	; 5
    2d9e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <_ZN5Gates3SWIEiiii>
    2da2:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2da4:	fc 01       	movw	r30, r24
    2da6:	20 81       	ld	r18, Z
    2da8:	31 81       	ldd	r19, Z+1	; 0x01
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	b4 01       	movw	r22, r8
    2db0:	ce 01       	movw	r24, r28
    2db2:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2db6:	f8 01       	movw	r30, r16
    2db8:	22 81       	ldd	r18, Z+2	; 0x02
    2dba:	33 81       	ldd	r19, Z+3	; 0x03
    2dbc:	41 e0       	ldi	r20, 0x01	; 1
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	b4 01       	movw	r22, r8
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2dc8:	f8 01       	movw	r30, r16
    2dca:	24 81       	ldd	r18, Z+4	; 0x04
    2dcc:	35 81       	ldd	r19, Z+5	; 0x05
    2dce:	40 e0       	ldi	r20, 0x00	; 0
    2dd0:	50 e0       	ldi	r21, 0x00	; 0
    2dd2:	b2 01       	movw	r22, r4
    2dd4:	ce 01       	movw	r24, r28
    2dd6:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
    2dda:	f8 01       	movw	r30, r16
    2ddc:	26 81       	ldd	r18, Z+6	; 0x06
    2dde:	37 81       	ldd	r19, Z+7	; 0x07
    2de0:	41 e0       	ldi	r20, 0x01	; 1
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	b2 01       	movw	r22, r4
    2de6:	ce 01       	movw	r24, r28
    2de8:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN4QEPU5writeEiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    2dec:	c8 01       	movw	r24, r16
    2dee:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <free>
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	0f 91       	pop	r16
    2dfa:	ff 90       	pop	r15
    2dfc:	ef 90       	pop	r14
    2dfe:	df 90       	pop	r13
    2e00:	cf 90       	pop	r12
    2e02:	bf 90       	pop	r11
    2e04:	af 90       	pop	r10
    2e06:	9f 90       	pop	r9
    2e08:	8f 90       	pop	r8
    2e0a:	7f 90       	pop	r7
    2e0c:	6f 90       	pop	r6
    2e0e:	5f 90       	pop	r5
    2e10:	4f 90       	pop	r4
    2e12:	08 95       	ret

00002e14 <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    2e14:	2f 92       	push	r2
    2e16:	3f 92       	push	r3
    2e18:	4f 92       	push	r4
    2e1a:	5f 92       	push	r5
    2e1c:	6f 92       	push	r6
    2e1e:	7f 92       	push	r7
    2e20:	8f 92       	push	r8
    2e22:	9f 92       	push	r9
    2e24:	af 92       	push	r10
    2e26:	bf 92       	push	r11
    2e28:	cf 92       	push	r12
    2e2a:	df 92       	push	r13
    2e2c:	ef 92       	push	r14
    2e2e:	ff 92       	push	r15
    2e30:	0f 93       	push	r16
    2e32:	1f 93       	push	r17
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	c0 57       	subi	r28, 0x70	; 112
    2e3e:	d1 09       	sbc	r29, r1
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	3c 01       	movw	r6, r24
	serial.writestrln(" RUNNING ");
    2e4c:	69 ef       	ldi	r22, 0xF9	; 249
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	01 96       	adiw	r24, 0x01	; 1
    2e52:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6Serial10writestrlnEPc>
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    2e56:	c3 01       	movw	r24, r6
    2e58:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZN6EEProm7readallEv>
    2e5c:	bc 01       	movw	r22, r24
    2e5e:	c3 01       	movw	r24, r6
    2e60:	02 96       	adiw	r24, 0x02	; 2
    2e62:	0e 94 21 13 	call	0x2642	; 0x2642 <_ZN4QEPU5Utils10str2intarrEPc>
    2e66:	fc 01       	movw	r30, r24
    2e68:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    2e6e:	40 85       	ldd	r20, Z+8	; 0x08
    2e70:	51 85       	ldd	r21, Z+9	; 0x09
    2e72:	4f 3f       	cpi	r20, 0xFF	; 255
    2e74:	51 05       	cpc	r21, r1
    2e76:	a1 f4       	brne	.+40     	; 0x2ea0 <_ZN4QEPU3runEv+0x8c>
    2e78:	46 81       	ldd	r20, Z+6	; 0x06
    2e7a:	57 81       	ldd	r21, Z+7	; 0x07
    2e7c:	4f 3f       	cpi	r20, 0xFF	; 255
    2e7e:	51 05       	cpc	r21, r1
    2e80:	79 f4       	brne	.+30     	; 0x2ea0 <_ZN4QEPU3runEv+0x8c>
    2e82:	44 81       	ldd	r20, Z+4	; 0x04
    2e84:	55 81       	ldd	r21, Z+5	; 0x05
    2e86:	4f 3f       	cpi	r20, 0xFF	; 255
    2e88:	51 05       	cpc	r21, r1
    2e8a:	51 f4       	brne	.+20     	; 0x2ea0 <_ZN4QEPU3runEv+0x8c>
    2e8c:	42 81       	ldd	r20, Z+2	; 0x02
    2e8e:	53 81       	ldd	r21, Z+3	; 0x03
    2e90:	4f 3f       	cpi	r20, 0xFF	; 255
    2e92:	51 05       	cpc	r21, r1
    2e94:	29 f4       	brne	.+10     	; 0x2ea0 <_ZN4QEPU3runEv+0x8c>
    2e96:	40 81       	ld	r20, Z
    2e98:	51 81       	ldd	r21, Z+1	; 0x01
    2e9a:	4f 3f       	cpi	r20, 0xFF	; 255
    2e9c:	51 05       	cpc	r21, r1
    2e9e:	21 f0       	breq	.+8      	; 0x2ea8 <_ZN4QEPU3runEv+0x94>
    2ea0:	2f 5f       	subi	r18, 0xFF	; 255
    2ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea4:	32 96       	adiw	r30, 0x02	; 2
    2ea6:	e3 cf       	rjmp	.-58     	; 0x2e6e <_ZN4QEPU3runEv+0x5a>
    2ea8:	a9 01       	movw	r20, r18
    2eaa:	44 50       	subi	r20, 0x04	; 4
    2eac:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    2eae:	14 16       	cp	r1, r20
    2eb0:	15 06       	cpc	r1, r21
    2eb2:	0c f0       	brlt	.+2      	; 0x2eb6 <_ZN4QEPU3runEv+0xa2>
    2eb4:	07 c1       	rjmp	.+526    	; 0x30c4 <_ZN4QEPU3runEv+0x2b0>
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	25 50       	subi	r18, 0x05	; 5
    2eba:	31 09       	sbc	r19, r1
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	41 2c       	mov	r4, r1
    2ec6:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    2ec8:	c1 2c       	mov	r12, r1
    2eca:	d1 2c       	mov	r13, r1
    2ecc:	0c c0       	rjmp	.+24     	; 0x2ee6 <_ZN4QEPU3runEv+0xd2>
    2ece:	69 30       	cpi	r22, 0x09	; 9
    2ed0:	71 05       	cpc	r23, r1
    2ed2:	34 f0       	brlt	.+12     	; 0x2ee0 <_ZN4QEPU3runEv+0xcc>
    2ed4:	8f ef       	ldi	r24, 0xFF	; 255
    2ed6:	48 1a       	sub	r4, r24
    2ed8:	58 0a       	sbc	r5, r24
    2eda:	8c 2d       	mov	r24, r12
    2edc:	9d 2d       	mov	r25, r13
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <_ZN4QEPU3runEv+0xce>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	4f 5f       	subi	r20, 0xFF	; 255
    2ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	6f 5f       	subi	r22, 0xFF	; 255
    2eea:	7f 4f       	sbci	r23, 0xFF	; 255
    2eec:	01 91       	ld	r16, Z+
    2eee:	11 91       	ld	r17, Z+
    2ef0:	d2 01       	movw	r26, r4
    2ef2:	aa 0f       	add	r26, r26
    2ef4:	bb 1f       	adc	r27, r27
    2ef6:	aa 0f       	add	r26, r26
    2ef8:	bb 1f       	adc	r27, r27
    2efa:	aa 0f       	add	r26, r26
    2efc:	bb 1f       	adc	r27, r27
    2efe:	a4 0d       	add	r26, r4
    2f00:	b5 1d       	adc	r27, r5
    2f02:	8a 0f       	add	r24, r26
    2f04:	9b 1f       	adc	r25, r27
    2f06:	dc 01       	movw	r26, r24
    2f08:	aa 0f       	add	r26, r26
    2f0a:	bb 1f       	adc	r27, r27
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	8c 0f       	add	r24, r28
    2f12:	9d 1f       	adc	r25, r29
    2f14:	a8 0f       	add	r26, r24
    2f16:	b9 1f       	adc	r27, r25
    2f18:	0d 93       	st	X+, r16
    2f1a:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    2f1c:	42 17       	cp	r20, r18
    2f1e:	53 07       	cpc	r21, r19
    2f20:	b1 f6       	brne	.-84     	; 0x2ece <_ZN4QEPU3runEv+0xba>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    2f22:	f3 01       	movw	r30, r6
    2f24:	14 82       	std	Z+4, r1	; 0x04
    2f26:	13 82       	std	Z+3, r1	; 0x03
    2f28:	14 14       	cp	r1, r4
    2f2a:	15 04       	cpc	r1, r5
    2f2c:	0c f0       	brlt	.+2      	; 0x2f30 <_ZN4QEPU3runEv+0x11c>
    2f2e:	c6 c0       	rjmp	.+396    	; 0x30bc <_ZN4QEPU3runEv+0x2a8>
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    2f34:	5e 01       	movw	r10, r28
    2f36:	f2 e6       	ldi	r31, 0x62	; 98
    2f38:	af 0e       	add	r10, r31
    2f3a:	b1 1c       	adc	r11, r1
    2f3c:	6e 01       	movw	r12, r28
    2f3e:	2b e5       	ldi	r18, 0x5B	; 91
    2f40:	c2 0e       	add	r12, r18
    2f42:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    2f44:	0f 2e       	mov	r0, r31
    2f46:	f3 e0       	ldi	r31, 0x03	; 3
    2f48:	8f 2e       	mov	r8, r31
    2f4a:	f1 e0       	ldi	r31, 0x01	; 1
    2f4c:	9f 2e       	mov	r9, r31
    2f4e:	f0 2d       	mov	r31, r0
    2f50:	ae 96       	adiw	r28, 0x2e	; 46
    2f52:	af ae       	std	Y+63, r10	; 0x3f
    2f54:	ae 97       	sbiw	r28, 0x2e	; 46
    2f56:	af 96       	adiw	r28, 0x2f	; 47
    2f58:	bf ae       	std	Y+63, r11	; 0x3f
    2f5a:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    2f5c:	e0 96       	adiw	r28, 0x30	; 48
    2f5e:	cf ae       	std	Y+63, r12	; 0x3f
    2f60:	e0 97       	sbiw	r28, 0x30	; 48
    2f62:	e1 96       	adiw	r28, 0x31	; 49
    2f64:	df ae       	std	Y+63, r13	; 0x3f
    2f66:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    2f68:	f5 01       	movw	r30, r10
    2f6a:	10 82       	st	Z, r1
    2f6c:	11 82       	std	Z+1, r1	; 0x01
    2f6e:	12 82       	std	Z+2, r1	; 0x02
    2f70:	13 82       	std	Z+3, r1	; 0x03
    2f72:	14 82       	std	Z+4, r1	; 0x04
    2f74:	15 82       	std	Z+5, r1	; 0x05
    2f76:	16 82       	std	Z+6, r1	; 0x06
    2f78:	f6 01       	movw	r30, r12
    2f7a:	10 82       	st	Z, r1
    2f7c:	11 82       	std	Z+1, r1	; 0x01
    2f7e:	12 82       	std	Z+2, r1	; 0x02
    2f80:	13 82       	std	Z+3, r1	; 0x03
    2f82:	14 82       	std	Z+4, r1	; 0x04
    2f84:	15 82       	std	Z+5, r1	; 0x05
    2f86:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	ee 0f       	add	r30, r30
    2f90:	ff 1f       	adc	r31, r31
    2f92:	ee 0f       	add	r30, r30
    2f94:	ff 1f       	adc	r31, r31
    2f96:	ee 0f       	add	r30, r30
    2f98:	ff 1f       	adc	r31, r31
    2f9a:	8e 0f       	add	r24, r30
    2f9c:	9f 1f       	adc	r25, r31
    2f9e:	e1 e0       	ldi	r30, 0x01	; 1
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	ec 0f       	add	r30, r28
    2fa4:	fd 1f       	adc	r31, r29
    2fa6:	e8 0f       	add	r30, r24
    2fa8:	f9 1f       	adc	r31, r25
    2faa:	20 80       	ld	r2, Z
    2fac:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    2fae:	00 e0       	ldi	r16, 0x00	; 0
    2fb0:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    2fb2:	0f 5f       	subi	r16, 0xFF	; 255
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	f3 01       	movw	r30, r6
    2fb8:	83 81       	ldd	r24, Z+3	; 0x03
    2fba:	94 81       	ldd	r25, Z+4	; 0x04
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	ee 0f       	add	r30, r30
    2fc0:	ff 1f       	adc	r31, r31
    2fc2:	ee 0f       	add	r30, r30
    2fc4:	ff 1f       	adc	r31, r31
    2fc6:	ee 0f       	add	r30, r30
    2fc8:	ff 1f       	adc	r31, r31
    2fca:	8e 0f       	add	r24, r30
    2fcc:	9f 1f       	adc	r25, r31
    2fce:	80 0f       	add	r24, r16
    2fd0:	91 1f       	adc	r25, r17
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	ee 0f       	add	r30, r30
    2fd6:	ff 1f       	adc	r31, r31
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	8c 0f       	add	r24, r28
    2fde:	9d 1f       	adc	r25, r29
    2fe0:	e8 0f       	add	r30, r24
    2fe2:	f9 1f       	adc	r31, r25
    2fe4:	81 81       	ldd	r24, Z+1	; 0x01
    2fe6:	8f 93       	push	r24
    2fe8:	80 81       	ld	r24, Z
    2fea:	8f 93       	push	r24
    2fec:	bf 92       	push	r11
    2fee:	af 92       	push	r10
    2ff0:	9f 92       	push	r9
    2ff2:	8f 92       	push	r8
    2ff4:	bf 92       	push	r11
    2ff6:	af 92       	push	r10
    2ff8:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    2ffc:	f3 01       	movw	r30, r6
    2ffe:	83 81       	ldd	r24, Z+3	; 0x03
    3000:	94 81       	ldd	r25, Z+4	; 0x04
    3002:	fc 01       	movw	r30, r24
    3004:	ee 0f       	add	r30, r30
    3006:	ff 1f       	adc	r31, r31
    3008:	ee 0f       	add	r30, r30
    300a:	ff 1f       	adc	r31, r31
    300c:	ee 0f       	add	r30, r30
    300e:	ff 1f       	adc	r31, r31
    3010:	e8 0f       	add	r30, r24
    3012:	f9 1f       	adc	r31, r25
    3014:	e0 0f       	add	r30, r16
    3016:	f1 1f       	adc	r31, r17
    3018:	34 96       	adiw	r30, 0x04	; 4
    301a:	ee 0f       	add	r30, r30
    301c:	ff 1f       	adc	r31, r31
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	8c 0f       	add	r24, r28
    3024:	9d 1f       	adc	r25, r29
    3026:	e8 0f       	add	r30, r24
    3028:	f9 1f       	adc	r31, r25
    302a:	81 81       	ldd	r24, Z+1	; 0x01
    302c:	8f 93       	push	r24
    302e:	80 81       	ld	r24, Z
    3030:	8f 93       	push	r24
    3032:	df 92       	push	r13
    3034:	cf 92       	push	r12
    3036:	9f 92       	push	r9
    3038:	8f 92       	push	r8
    303a:	df 92       	push	r13
    303c:	cf 92       	push	r12
    303e:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	cd bf       	out	0x3d, r28	; 61
    304c:	04 30       	cpi	r16, 0x04	; 4
    304e:	11 05       	cpc	r17, r1
    3050:	09 f0       	breq	.+2      	; 0x3054 <_ZN4QEPU3runEv+0x240>
    3052:	af cf       	rjmp	.-162    	; 0x2fb2 <_ZN4QEPU3runEv+0x19e>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    3054:	40 e1       	ldi	r20, 0x10	; 16
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	60 e0       	ldi	r22, 0x00	; 0
    305a:	70 e0       	ldi	r23, 0x00	; 0
    305c:	e0 96       	adiw	r28, 0x30	; 48
    305e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3060:	e0 97       	sbiw	r28, 0x30	; 48
    3062:	e1 96       	adiw	r28, 0x31	; 49
    3064:	9f ad       	ldd	r25, Y+63	; 0x3f
    3066:	e1 97       	sbiw	r28, 0x31	; 49
    3068:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <strtol>
    306c:	ad 96       	adiw	r28, 0x2d	; 45
    306e:	6c af       	std	Y+60, r22	; 0x3c
    3070:	7d af       	std	Y+61, r23	; 0x3d
    3072:	8e af       	std	Y+62, r24	; 0x3e
    3074:	9f af       	std	Y+63, r25	; 0x3f
    3076:	ad 97       	sbiw	r28, 0x2d	; 45
    3078:	40 e1       	ldi	r20, 0x10	; 16
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	60 e0       	ldi	r22, 0x00	; 0
    307e:	70 e0       	ldi	r23, 0x00	; 0
    3080:	ae 96       	adiw	r28, 0x2e	; 46
    3082:	8f ad       	ldd	r24, Y+63	; 0x3f
    3084:	ae 97       	sbiw	r28, 0x2e	; 46
    3086:	af 96       	adiw	r28, 0x2f	; 47
    3088:	9f ad       	ldd	r25, Y+63	; 0x3f
    308a:	af 97       	sbiw	r28, 0x2f	; 47
    308c:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <strtol>
    3090:	9b 01       	movw	r18, r22
    3092:	ac 01       	movw	r20, r24
    3094:	ad 96       	adiw	r28, 0x2d	; 45
    3096:	ec ac       	ldd	r14, Y+60	; 0x3c
    3098:	fd ac       	ldd	r15, Y+61	; 0x3d
    309a:	0e ad       	ldd	r16, Y+62	; 0x3e
    309c:	1f ad       	ldd	r17, Y+63	; 0x3f
    309e:	ad 97       	sbiw	r28, 0x2d	; 45
    30a0:	b1 01       	movw	r22, r2
    30a2:	c3 01       	movw	r24, r6
    30a4:	0e 94 b9 13 	call	0x2772	; 0x2772 <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    30a8:	f3 01       	movw	r30, r6
    30aa:	83 81       	ldd	r24, Z+3	; 0x03
    30ac:	94 81       	ldd	r25, Z+4	; 0x04
    30ae:	01 96       	adiw	r24, 0x01	; 1
    30b0:	94 83       	std	Z+4, r25	; 0x04
    30b2:	83 83       	std	Z+3, r24	; 0x03
    30b4:	84 15       	cp	r24, r4
    30b6:	95 05       	cpc	r25, r5
    30b8:	0c f4       	brge	.+2      	; 0x30bc <_ZN4QEPU3runEv+0x2a8>
    30ba:	56 cf       	rjmp	.-340    	; 0x2f68 <_ZN4QEPU3runEv+0x154>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    30bc:	c3 01       	movw	r24, r6
    30be:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN4QEPU7dumpmemEv>
    30c2:	04 c0       	rjmp	.+8      	; 0x30cc <_ZN4QEPU3runEv+0x2b8>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    30c4:	f3 01       	movw	r30, r6
    30c6:	14 82       	std	Z+4, r1	; 0x04
    30c8:	13 82       	std	Z+3, r1	; 0x03
    30ca:	f8 cf       	rjmp	.-16     	; 0x30bc <_ZN4QEPU3runEv+0x2a8>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    30cc:	c0 59       	subi	r28, 0x90	; 144
    30ce:	df 4f       	sbci	r29, 0xFF	; 255
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	cd bf       	out	0x3d, r28	; 61
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	1f 91       	pop	r17
    30e0:	0f 91       	pop	r16
    30e2:	ff 90       	pop	r15
    30e4:	ef 90       	pop	r14
    30e6:	df 90       	pop	r13
    30e8:	cf 90       	pop	r12
    30ea:	bf 90       	pop	r11
    30ec:	af 90       	pop	r10
    30ee:	9f 90       	pop	r9
    30f0:	8f 90       	pop	r8
    30f2:	7f 90       	pop	r7
    30f4:	6f 90       	pop	r6
    30f6:	5f 90       	pop	r5
    30f8:	4f 90       	pop	r4
    30fa:	3f 90       	pop	r3
    30fc:	2f 90       	pop	r2
    30fe:	08 95       	ret

00003100 <main>:
#include "qepu.h"
int main(void){
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	00 d0       	rcall	.+0      	; 0x3106 <main+0x6>
    3106:	00 d0       	rcall	.+0      	; 0x3108 <main+0x8>
    3108:	00 d0       	rcall	.+0      	; 0x310a <main+0xa>
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu;
    310e:	ce 01       	movw	r24, r28
    3110:	01 96       	adiw	r24, 0x01	; 1
    3112:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN4QEPUC1Ev>
	qepu.run();
    3116:	ce 01       	movw	r24, r28
    3118:	01 96       	adiw	r24, 0x01	; 1
    311a:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <_ZN4QEPU3runEv>
    311e:	ff cf       	rjmp	.-2      	; 0x311e <main+0x1e>

00003120 <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	 //Set Baud rate
	 int ubrr=51;
	 UBRRL = ubrr;
    3120:	83 e3       	ldi	r24, 0x33	; 51
    3122:	89 b9       	out	0x09, r24	; 9
	 UBRRH = (ubrr>>8);
    3124:	10 bc       	out	0x20, r1	; 32
	 
	 //Set Frame Format
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    3126:	86 e8       	ldi	r24, 0x86	; 134
    3128:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    312a:	88 e1       	ldi	r24, 0x18	; 24
    312c:	8a b9       	out	0x0a, r24	; 10
    312e:	08 95       	ret

00003130 <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    3130:	5d 9b       	sbis	0x0b, 5	; 11
    3132:	fe cf       	rjmp	.-4      	; 0x3130 <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    3134:	6c b9       	out	0x0c, r22	; 12
    3136:	08 95       	ret

00003138 <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    3138:	0f 93       	push	r16
    313a:	1f 93       	push	r17
    313c:	cf 93       	push	r28
    313e:	df 93       	push	r29
    3140:	8c 01       	movw	r16, r24
    3142:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    3144:	68 81       	ld	r22, Y
    3146:	66 23       	and	r22, r22
    3148:	39 f0       	breq	.+14     	; 0x3158 <_ZN6Serial8writestrEPc+0x20>
    314a:	21 96       	adiw	r28, 0x01	; 1
    314c:	c8 01       	movw	r24, r16
    314e:	0e 94 98 18 	call	0x3130	; 0x3130 <_ZN6Serial5writeEc>
    3152:	69 91       	ld	r22, Y+
    3154:	61 11       	cpse	r22, r1
    3156:	fa cf       	rjmp	.-12     	; 0x314c <_ZN6Serial8writestrEPc+0x14>
}
    3158:	df 91       	pop	r29
    315a:	cf 91       	pop	r28
    315c:	1f 91       	pop	r17
    315e:	0f 91       	pop	r16
    3160:	08 95       	ret

00003162 <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	ec 01       	movw	r28, r24
	writestr(data);
    3168:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    316c:	6d e0       	ldi	r22, 0x0D	; 13
    316e:	ce 01       	movw	r24, r28
    3170:	0e 94 98 18 	call	0x3130	; 0x3130 <_ZN6Serial5writeEc>
    3174:	df 91       	pop	r29
    3176:	cf 91       	pop	r28
    3178:	08 95       	ret

0000317a <acos>:
    317a:	9f 93       	push	r25
    317c:	9f 77       	andi	r25, 0x7F	; 127
    317e:	75 d1       	rcall	.+746    	; 0x346a <__fp_arccos>
    3180:	0f 90       	pop	r0
    3182:	00 20       	and	r0, r0
    3184:	3a f4       	brpl	.+14     	; 0x3194 <acos+0x1a>
    3186:	90 58       	subi	r25, 0x80	; 128
    3188:	a2 ea       	ldi	r26, 0xA2	; 162
    318a:	2a ed       	ldi	r18, 0xDA	; 218
    318c:	3f e0       	ldi	r19, 0x0F	; 15
    318e:	49 e4       	ldi	r20, 0x49	; 73
    3190:	50 e4       	ldi	r21, 0x40	; 64
    3192:	13 d0       	rcall	.+38     	; 0x31ba <__addsf3x>
    3194:	0d c2       	rjmp	.+1050   	; 0x35b0 <__fp_round>

00003196 <__subsf3>:
    3196:	50 58       	subi	r21, 0x80	; 128

00003198 <__addsf3>:
    3198:	bb 27       	eor	r27, r27
    319a:	aa 27       	eor	r26, r26
    319c:	0e d0       	rcall	.+28     	; 0x31ba <__addsf3x>
    319e:	08 c2       	rjmp	.+1040   	; 0x35b0 <__fp_round>
    31a0:	d1 d1       	rcall	.+930    	; 0x3544 <__fp_pscA>
    31a2:	30 f0       	brcs	.+12     	; 0x31b0 <__addsf3+0x18>
    31a4:	d6 d1       	rcall	.+940    	; 0x3552 <__fp_pscB>
    31a6:	20 f0       	brcs	.+8      	; 0x31b0 <__addsf3+0x18>
    31a8:	31 f4       	brne	.+12     	; 0x31b6 <__addsf3+0x1e>
    31aa:	9f 3f       	cpi	r25, 0xFF	; 255
    31ac:	11 f4       	brne	.+4      	; 0x31b2 <__addsf3+0x1a>
    31ae:	1e f4       	brtc	.+6      	; 0x31b6 <__addsf3+0x1e>
    31b0:	a1 c1       	rjmp	.+834    	; 0x34f4 <__fp_nan>
    31b2:	0e f4       	brtc	.+2      	; 0x31b6 <__addsf3+0x1e>
    31b4:	e0 95       	com	r30
    31b6:	e7 fb       	bst	r30, 7
    31b8:	97 c1       	rjmp	.+814    	; 0x34e8 <__fp_inf>

000031ba <__addsf3x>:
    31ba:	e9 2f       	mov	r30, r25
    31bc:	1b d2       	rcall	.+1078   	; 0x35f4 <__fp_split3>
    31be:	80 f3       	brcs	.-32     	; 0x31a0 <__addsf3+0x8>
    31c0:	ba 17       	cp	r27, r26
    31c2:	62 07       	cpc	r22, r18
    31c4:	73 07       	cpc	r23, r19
    31c6:	84 07       	cpc	r24, r20
    31c8:	95 07       	cpc	r25, r21
    31ca:	18 f0       	brcs	.+6      	; 0x31d2 <__addsf3x+0x18>
    31cc:	71 f4       	brne	.+28     	; 0x31ea <__addsf3x+0x30>
    31ce:	9e f5       	brtc	.+102    	; 0x3236 <__addsf3x+0x7c>
    31d0:	33 c2       	rjmp	.+1126   	; 0x3638 <__fp_zero>
    31d2:	0e f4       	brtc	.+2      	; 0x31d6 <__addsf3x+0x1c>
    31d4:	e0 95       	com	r30
    31d6:	0b 2e       	mov	r0, r27
    31d8:	ba 2f       	mov	r27, r26
    31da:	a0 2d       	mov	r26, r0
    31dc:	0b 01       	movw	r0, r22
    31de:	b9 01       	movw	r22, r18
    31e0:	90 01       	movw	r18, r0
    31e2:	0c 01       	movw	r0, r24
    31e4:	ca 01       	movw	r24, r20
    31e6:	a0 01       	movw	r20, r0
    31e8:	11 24       	eor	r1, r1
    31ea:	ff 27       	eor	r31, r31
    31ec:	59 1b       	sub	r21, r25
    31ee:	99 f0       	breq	.+38     	; 0x3216 <__addsf3x+0x5c>
    31f0:	59 3f       	cpi	r21, 0xF9	; 249
    31f2:	50 f4       	brcc	.+20     	; 0x3208 <__addsf3x+0x4e>
    31f4:	50 3e       	cpi	r21, 0xE0	; 224
    31f6:	68 f1       	brcs	.+90     	; 0x3252 <__addsf3x+0x98>
    31f8:	1a 16       	cp	r1, r26
    31fa:	f0 40       	sbci	r31, 0x00	; 0
    31fc:	a2 2f       	mov	r26, r18
    31fe:	23 2f       	mov	r18, r19
    3200:	34 2f       	mov	r19, r20
    3202:	44 27       	eor	r20, r20
    3204:	58 5f       	subi	r21, 0xF8	; 248
    3206:	f3 cf       	rjmp	.-26     	; 0x31ee <__addsf3x+0x34>
    3208:	46 95       	lsr	r20
    320a:	37 95       	ror	r19
    320c:	27 95       	ror	r18
    320e:	a7 95       	ror	r26
    3210:	f0 40       	sbci	r31, 0x00	; 0
    3212:	53 95       	inc	r21
    3214:	c9 f7       	brne	.-14     	; 0x3208 <__addsf3x+0x4e>
    3216:	7e f4       	brtc	.+30     	; 0x3236 <__addsf3x+0x7c>
    3218:	1f 16       	cp	r1, r31
    321a:	ba 0b       	sbc	r27, r26
    321c:	62 0b       	sbc	r22, r18
    321e:	73 0b       	sbc	r23, r19
    3220:	84 0b       	sbc	r24, r20
    3222:	ba f0       	brmi	.+46     	; 0x3252 <__addsf3x+0x98>
    3224:	91 50       	subi	r25, 0x01	; 1
    3226:	a1 f0       	breq	.+40     	; 0x3250 <__addsf3x+0x96>
    3228:	ff 0f       	add	r31, r31
    322a:	bb 1f       	adc	r27, r27
    322c:	66 1f       	adc	r22, r22
    322e:	77 1f       	adc	r23, r23
    3230:	88 1f       	adc	r24, r24
    3232:	c2 f7       	brpl	.-16     	; 0x3224 <__addsf3x+0x6a>
    3234:	0e c0       	rjmp	.+28     	; 0x3252 <__addsf3x+0x98>
    3236:	ba 0f       	add	r27, r26
    3238:	62 1f       	adc	r22, r18
    323a:	73 1f       	adc	r23, r19
    323c:	84 1f       	adc	r24, r20
    323e:	48 f4       	brcc	.+18     	; 0x3252 <__addsf3x+0x98>
    3240:	87 95       	ror	r24
    3242:	77 95       	ror	r23
    3244:	67 95       	ror	r22
    3246:	b7 95       	ror	r27
    3248:	f7 95       	ror	r31
    324a:	9e 3f       	cpi	r25, 0xFE	; 254
    324c:	08 f0       	brcs	.+2      	; 0x3250 <__addsf3x+0x96>
    324e:	b3 cf       	rjmp	.-154    	; 0x31b6 <__addsf3+0x1e>
    3250:	93 95       	inc	r25
    3252:	88 0f       	add	r24, r24
    3254:	08 f0       	brcs	.+2      	; 0x3258 <__addsf3x+0x9e>
    3256:	99 27       	eor	r25, r25
    3258:	ee 0f       	add	r30, r30
    325a:	97 95       	ror	r25
    325c:	87 95       	ror	r24
    325e:	08 95       	ret

00003260 <atan>:
    3260:	df 93       	push	r29
    3262:	dd 27       	eor	r29, r29
    3264:	b9 2f       	mov	r27, r25
    3266:	bf 77       	andi	r27, 0x7F	; 127
    3268:	40 e8       	ldi	r20, 0x80	; 128
    326a:	5f e3       	ldi	r21, 0x3F	; 63
    326c:	16 16       	cp	r1, r22
    326e:	17 06       	cpc	r1, r23
    3270:	48 07       	cpc	r20, r24
    3272:	5b 07       	cpc	r21, r27
    3274:	10 f4       	brcc	.+4      	; 0x327a <atan+0x1a>
    3276:	d9 2f       	mov	r29, r25
    3278:	ea d1       	rcall	.+980    	; 0x364e <inverse>
    327a:	9f 93       	push	r25
    327c:	8f 93       	push	r24
    327e:	7f 93       	push	r23
    3280:	6f 93       	push	r22
    3282:	dc d2       	rcall	.+1464   	; 0x383c <square>
    3284:	e2 e9       	ldi	r30, 0x92	; 146
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	38 d1       	rcall	.+624    	; 0x34fa <__fp_powser>
    328a:	92 d1       	rcall	.+804    	; 0x35b0 <__fp_round>
    328c:	2f 91       	pop	r18
    328e:	3f 91       	pop	r19
    3290:	4f 91       	pop	r20
    3292:	5f 91       	pop	r21
    3294:	34 d2       	rcall	.+1128   	; 0x36fe <__mulsf3x>
    3296:	dd 23       	and	r29, r29
    3298:	49 f0       	breq	.+18     	; 0x32ac <atan+0x4c>
    329a:	90 58       	subi	r25, 0x80	; 128
    329c:	a2 ea       	ldi	r26, 0xA2	; 162
    329e:	2a ed       	ldi	r18, 0xDA	; 218
    32a0:	3f e0       	ldi	r19, 0x0F	; 15
    32a2:	49 ec       	ldi	r20, 0xC9	; 201
    32a4:	5f e3       	ldi	r21, 0x3F	; 63
    32a6:	d0 78       	andi	r29, 0x80	; 128
    32a8:	5d 27       	eor	r21, r29
    32aa:	87 df       	rcall	.-242    	; 0x31ba <__addsf3x>
    32ac:	df 91       	pop	r29
    32ae:	80 c1       	rjmp	.+768    	; 0x35b0 <__fp_round>

000032b0 <__cmpsf2>:
    32b0:	f7 d0       	rcall	.+494    	; 0x34a0 <__fp_cmp>
    32b2:	08 f4       	brcc	.+2      	; 0x32b6 <__cmpsf2+0x6>
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	08 95       	ret

000032b8 <cos>:
    32b8:	54 d1       	rcall	.+680    	; 0x3562 <__fp_rempio2>
    32ba:	e3 95       	inc	r30
    32bc:	8a c1       	rjmp	.+788    	; 0x35d2 <__fp_sinus>

000032be <__divsf3>:
    32be:	0c d0       	rcall	.+24     	; 0x32d8 <__divsf3x>
    32c0:	77 c1       	rjmp	.+750    	; 0x35b0 <__fp_round>
    32c2:	47 d1       	rcall	.+654    	; 0x3552 <__fp_pscB>
    32c4:	40 f0       	brcs	.+16     	; 0x32d6 <__divsf3+0x18>
    32c6:	3e d1       	rcall	.+636    	; 0x3544 <__fp_pscA>
    32c8:	30 f0       	brcs	.+12     	; 0x32d6 <__divsf3+0x18>
    32ca:	21 f4       	brne	.+8      	; 0x32d4 <__divsf3+0x16>
    32cc:	5f 3f       	cpi	r21, 0xFF	; 255
    32ce:	19 f0       	breq	.+6      	; 0x32d6 <__divsf3+0x18>
    32d0:	0b c1       	rjmp	.+534    	; 0x34e8 <__fp_inf>
    32d2:	51 11       	cpse	r21, r1
    32d4:	b2 c1       	rjmp	.+868    	; 0x363a <__fp_szero>
    32d6:	0e c1       	rjmp	.+540    	; 0x34f4 <__fp_nan>

000032d8 <__divsf3x>:
    32d8:	8d d1       	rcall	.+794    	; 0x35f4 <__fp_split3>
    32da:	98 f3       	brcs	.-26     	; 0x32c2 <__divsf3+0x4>

000032dc <__divsf3_pse>:
    32dc:	99 23       	and	r25, r25
    32de:	c9 f3       	breq	.-14     	; 0x32d2 <__divsf3+0x14>
    32e0:	55 23       	and	r21, r21
    32e2:	b1 f3       	breq	.-20     	; 0x32d0 <__divsf3+0x12>
    32e4:	95 1b       	sub	r25, r21
    32e6:	55 0b       	sbc	r21, r21
    32e8:	bb 27       	eor	r27, r27
    32ea:	aa 27       	eor	r26, r26
    32ec:	62 17       	cp	r22, r18
    32ee:	73 07       	cpc	r23, r19
    32f0:	84 07       	cpc	r24, r20
    32f2:	38 f0       	brcs	.+14     	; 0x3302 <__divsf3_pse+0x26>
    32f4:	9f 5f       	subi	r25, 0xFF	; 255
    32f6:	5f 4f       	sbci	r21, 0xFF	; 255
    32f8:	22 0f       	add	r18, r18
    32fa:	33 1f       	adc	r19, r19
    32fc:	44 1f       	adc	r20, r20
    32fe:	aa 1f       	adc	r26, r26
    3300:	a9 f3       	breq	.-22     	; 0x32ec <__divsf3_pse+0x10>
    3302:	33 d0       	rcall	.+102    	; 0x336a <__divsf3_pse+0x8e>
    3304:	0e 2e       	mov	r0, r30
    3306:	3a f0       	brmi	.+14     	; 0x3316 <__divsf3_pse+0x3a>
    3308:	e0 e8       	ldi	r30, 0x80	; 128
    330a:	30 d0       	rcall	.+96     	; 0x336c <__divsf3_pse+0x90>
    330c:	91 50       	subi	r25, 0x01	; 1
    330e:	50 40       	sbci	r21, 0x00	; 0
    3310:	e6 95       	lsr	r30
    3312:	00 1c       	adc	r0, r0
    3314:	ca f7       	brpl	.-14     	; 0x3308 <__divsf3_pse+0x2c>
    3316:	29 d0       	rcall	.+82     	; 0x336a <__divsf3_pse+0x8e>
    3318:	fe 2f       	mov	r31, r30
    331a:	27 d0       	rcall	.+78     	; 0x336a <__divsf3_pse+0x8e>
    331c:	66 0f       	add	r22, r22
    331e:	77 1f       	adc	r23, r23
    3320:	88 1f       	adc	r24, r24
    3322:	bb 1f       	adc	r27, r27
    3324:	26 17       	cp	r18, r22
    3326:	37 07       	cpc	r19, r23
    3328:	48 07       	cpc	r20, r24
    332a:	ab 07       	cpc	r26, r27
    332c:	b0 e8       	ldi	r27, 0x80	; 128
    332e:	09 f0       	breq	.+2      	; 0x3332 <__divsf3_pse+0x56>
    3330:	bb 0b       	sbc	r27, r27
    3332:	80 2d       	mov	r24, r0
    3334:	bf 01       	movw	r22, r30
    3336:	ff 27       	eor	r31, r31
    3338:	93 58       	subi	r25, 0x83	; 131
    333a:	5f 4f       	sbci	r21, 0xFF	; 255
    333c:	2a f0       	brmi	.+10     	; 0x3348 <__divsf3_pse+0x6c>
    333e:	9e 3f       	cpi	r25, 0xFE	; 254
    3340:	51 05       	cpc	r21, r1
    3342:	68 f0       	brcs	.+26     	; 0x335e <__divsf3_pse+0x82>
    3344:	d1 c0       	rjmp	.+418    	; 0x34e8 <__fp_inf>
    3346:	79 c1       	rjmp	.+754    	; 0x363a <__fp_szero>
    3348:	5f 3f       	cpi	r21, 0xFF	; 255
    334a:	ec f3       	brlt	.-6      	; 0x3346 <__divsf3_pse+0x6a>
    334c:	98 3e       	cpi	r25, 0xE8	; 232
    334e:	dc f3       	brlt	.-10     	; 0x3346 <__divsf3_pse+0x6a>
    3350:	86 95       	lsr	r24
    3352:	77 95       	ror	r23
    3354:	67 95       	ror	r22
    3356:	b7 95       	ror	r27
    3358:	f7 95       	ror	r31
    335a:	9f 5f       	subi	r25, 0xFF	; 255
    335c:	c9 f7       	brne	.-14     	; 0x3350 <__divsf3_pse+0x74>
    335e:	88 0f       	add	r24, r24
    3360:	91 1d       	adc	r25, r1
    3362:	96 95       	lsr	r25
    3364:	87 95       	ror	r24
    3366:	97 f9       	bld	r25, 7
    3368:	08 95       	ret
    336a:	e1 e0       	ldi	r30, 0x01	; 1
    336c:	66 0f       	add	r22, r22
    336e:	77 1f       	adc	r23, r23
    3370:	88 1f       	adc	r24, r24
    3372:	bb 1f       	adc	r27, r27
    3374:	62 17       	cp	r22, r18
    3376:	73 07       	cpc	r23, r19
    3378:	84 07       	cpc	r24, r20
    337a:	ba 07       	cpc	r27, r26
    337c:	20 f0       	brcs	.+8      	; 0x3386 <__divsf3_pse+0xaa>
    337e:	62 1b       	sub	r22, r18
    3380:	73 0b       	sbc	r23, r19
    3382:	84 0b       	sbc	r24, r20
    3384:	ba 0b       	sbc	r27, r26
    3386:	ee 1f       	adc	r30, r30
    3388:	88 f7       	brcc	.-30     	; 0x336c <__divsf3_pse+0x90>
    338a:	e0 95       	com	r30
    338c:	08 95       	ret

0000338e <__fixsfsi>:
    338e:	04 d0       	rcall	.+8      	; 0x3398 <__fixunssfsi>
    3390:	68 94       	set
    3392:	b1 11       	cpse	r27, r1
    3394:	52 c1       	rjmp	.+676    	; 0x363a <__fp_szero>
    3396:	08 95       	ret

00003398 <__fixunssfsi>:
    3398:	35 d1       	rcall	.+618    	; 0x3604 <__fp_splitA>
    339a:	88 f0       	brcs	.+34     	; 0x33be <__fixunssfsi+0x26>
    339c:	9f 57       	subi	r25, 0x7F	; 127
    339e:	90 f0       	brcs	.+36     	; 0x33c4 <__fixunssfsi+0x2c>
    33a0:	b9 2f       	mov	r27, r25
    33a2:	99 27       	eor	r25, r25
    33a4:	b7 51       	subi	r27, 0x17	; 23
    33a6:	a0 f0       	brcs	.+40     	; 0x33d0 <__fixunssfsi+0x38>
    33a8:	d1 f0       	breq	.+52     	; 0x33de <__fixunssfsi+0x46>
    33aa:	66 0f       	add	r22, r22
    33ac:	77 1f       	adc	r23, r23
    33ae:	88 1f       	adc	r24, r24
    33b0:	99 1f       	adc	r25, r25
    33b2:	1a f0       	brmi	.+6      	; 0x33ba <__fixunssfsi+0x22>
    33b4:	ba 95       	dec	r27
    33b6:	c9 f7       	brne	.-14     	; 0x33aa <__fixunssfsi+0x12>
    33b8:	12 c0       	rjmp	.+36     	; 0x33de <__fixunssfsi+0x46>
    33ba:	b1 30       	cpi	r27, 0x01	; 1
    33bc:	81 f0       	breq	.+32     	; 0x33de <__fixunssfsi+0x46>
    33be:	3c d1       	rcall	.+632    	; 0x3638 <__fp_zero>
    33c0:	b1 e0       	ldi	r27, 0x01	; 1
    33c2:	08 95       	ret
    33c4:	39 c1       	rjmp	.+626    	; 0x3638 <__fp_zero>
    33c6:	67 2f       	mov	r22, r23
    33c8:	78 2f       	mov	r23, r24
    33ca:	88 27       	eor	r24, r24
    33cc:	b8 5f       	subi	r27, 0xF8	; 248
    33ce:	39 f0       	breq	.+14     	; 0x33de <__fixunssfsi+0x46>
    33d0:	b9 3f       	cpi	r27, 0xF9	; 249
    33d2:	cc f3       	brlt	.-14     	; 0x33c6 <__fixunssfsi+0x2e>
    33d4:	86 95       	lsr	r24
    33d6:	77 95       	ror	r23
    33d8:	67 95       	ror	r22
    33da:	b3 95       	inc	r27
    33dc:	d9 f7       	brne	.-10     	; 0x33d4 <__fixunssfsi+0x3c>
    33de:	3e f4       	brtc	.+14     	; 0x33ee <__fixunssfsi+0x56>
    33e0:	90 95       	com	r25
    33e2:	80 95       	com	r24
    33e4:	70 95       	com	r23
    33e6:	61 95       	neg	r22
    33e8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ea:	8f 4f       	sbci	r24, 0xFF	; 255
    33ec:	9f 4f       	sbci	r25, 0xFF	; 255
    33ee:	08 95       	ret

000033f0 <__floatunsisf>:
    33f0:	e8 94       	clt
    33f2:	09 c0       	rjmp	.+18     	; 0x3406 <__floatsisf+0x12>

000033f4 <__floatsisf>:
    33f4:	97 fb       	bst	r25, 7
    33f6:	3e f4       	brtc	.+14     	; 0x3406 <__floatsisf+0x12>
    33f8:	90 95       	com	r25
    33fa:	80 95       	com	r24
    33fc:	70 95       	com	r23
    33fe:	61 95       	neg	r22
    3400:	7f 4f       	sbci	r23, 0xFF	; 255
    3402:	8f 4f       	sbci	r24, 0xFF	; 255
    3404:	9f 4f       	sbci	r25, 0xFF	; 255
    3406:	99 23       	and	r25, r25
    3408:	a9 f0       	breq	.+42     	; 0x3434 <__floatsisf+0x40>
    340a:	f9 2f       	mov	r31, r25
    340c:	96 e9       	ldi	r25, 0x96	; 150
    340e:	bb 27       	eor	r27, r27
    3410:	93 95       	inc	r25
    3412:	f6 95       	lsr	r31
    3414:	87 95       	ror	r24
    3416:	77 95       	ror	r23
    3418:	67 95       	ror	r22
    341a:	b7 95       	ror	r27
    341c:	f1 11       	cpse	r31, r1
    341e:	f8 cf       	rjmp	.-16     	; 0x3410 <__floatsisf+0x1c>
    3420:	fa f4       	brpl	.+62     	; 0x3460 <__floatsisf+0x6c>
    3422:	bb 0f       	add	r27, r27
    3424:	11 f4       	brne	.+4      	; 0x342a <__floatsisf+0x36>
    3426:	60 ff       	sbrs	r22, 0
    3428:	1b c0       	rjmp	.+54     	; 0x3460 <__floatsisf+0x6c>
    342a:	6f 5f       	subi	r22, 0xFF	; 255
    342c:	7f 4f       	sbci	r23, 0xFF	; 255
    342e:	8f 4f       	sbci	r24, 0xFF	; 255
    3430:	9f 4f       	sbci	r25, 0xFF	; 255
    3432:	16 c0       	rjmp	.+44     	; 0x3460 <__floatsisf+0x6c>
    3434:	88 23       	and	r24, r24
    3436:	11 f0       	breq	.+4      	; 0x343c <__floatsisf+0x48>
    3438:	96 e9       	ldi	r25, 0x96	; 150
    343a:	11 c0       	rjmp	.+34     	; 0x345e <__floatsisf+0x6a>
    343c:	77 23       	and	r23, r23
    343e:	21 f0       	breq	.+8      	; 0x3448 <__floatsisf+0x54>
    3440:	9e e8       	ldi	r25, 0x8E	; 142
    3442:	87 2f       	mov	r24, r23
    3444:	76 2f       	mov	r23, r22
    3446:	05 c0       	rjmp	.+10     	; 0x3452 <__floatsisf+0x5e>
    3448:	66 23       	and	r22, r22
    344a:	71 f0       	breq	.+28     	; 0x3468 <__floatsisf+0x74>
    344c:	96 e8       	ldi	r25, 0x86	; 134
    344e:	86 2f       	mov	r24, r22
    3450:	70 e0       	ldi	r23, 0x00	; 0
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	2a f0       	brmi	.+10     	; 0x3460 <__floatsisf+0x6c>
    3456:	9a 95       	dec	r25
    3458:	66 0f       	add	r22, r22
    345a:	77 1f       	adc	r23, r23
    345c:	88 1f       	adc	r24, r24
    345e:	da f7       	brpl	.-10     	; 0x3456 <__floatsisf+0x62>
    3460:	88 0f       	add	r24, r24
    3462:	96 95       	lsr	r25
    3464:	87 95       	ror	r24
    3466:	97 f9       	bld	r25, 7
    3468:	08 95       	ret

0000346a <__fp_arccos>:
    346a:	df 93       	push	r29
    346c:	cf 93       	push	r28
    346e:	1f 93       	push	r17
    3470:	0f 93       	push	r16
    3472:	8b 01       	movw	r16, r22
    3474:	ec 01       	movw	r28, r24
    3476:	ef eb       	ldi	r30, 0xBF	; 191
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	3f d0       	rcall	.+126    	; 0x34fa <__fp_powser>
    347c:	99 d0       	rcall	.+306    	; 0x35b0 <__fp_round>
    347e:	98 01       	movw	r18, r16
    3480:	ae 01       	movw	r20, r28
    3482:	8b 01       	movw	r16, r22
    3484:	ec 01       	movw	r28, r24
    3486:	60 e0       	ldi	r22, 0x00	; 0
    3488:	70 e0       	ldi	r23, 0x00	; 0
    348a:	80 e8       	ldi	r24, 0x80	; 128
    348c:	9f e3       	ldi	r25, 0x3F	; 63
    348e:	83 de       	rcall	.-762    	; 0x3196 <__subsf3>
    3490:	97 d1       	rcall	.+814    	; 0x37c0 <sqrt>
    3492:	98 01       	movw	r18, r16
    3494:	ae 01       	movw	r20, r28
    3496:	0f 91       	pop	r16
    3498:	1f 91       	pop	r17
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	2f c1       	rjmp	.+606    	; 0x36fe <__mulsf3x>

000034a0 <__fp_cmp>:
    34a0:	99 0f       	add	r25, r25
    34a2:	00 08       	sbc	r0, r0
    34a4:	55 0f       	add	r21, r21
    34a6:	aa 0b       	sbc	r26, r26
    34a8:	e0 e8       	ldi	r30, 0x80	; 128
    34aa:	fe ef       	ldi	r31, 0xFE	; 254
    34ac:	16 16       	cp	r1, r22
    34ae:	17 06       	cpc	r1, r23
    34b0:	e8 07       	cpc	r30, r24
    34b2:	f9 07       	cpc	r31, r25
    34b4:	c0 f0       	brcs	.+48     	; 0x34e6 <__fp_cmp+0x46>
    34b6:	12 16       	cp	r1, r18
    34b8:	13 06       	cpc	r1, r19
    34ba:	e4 07       	cpc	r30, r20
    34bc:	f5 07       	cpc	r31, r21
    34be:	98 f0       	brcs	.+38     	; 0x34e6 <__fp_cmp+0x46>
    34c0:	62 1b       	sub	r22, r18
    34c2:	73 0b       	sbc	r23, r19
    34c4:	84 0b       	sbc	r24, r20
    34c6:	95 0b       	sbc	r25, r21
    34c8:	39 f4       	brne	.+14     	; 0x34d8 <__fp_cmp+0x38>
    34ca:	0a 26       	eor	r0, r26
    34cc:	61 f0       	breq	.+24     	; 0x34e6 <__fp_cmp+0x46>
    34ce:	23 2b       	or	r18, r19
    34d0:	24 2b       	or	r18, r20
    34d2:	25 2b       	or	r18, r21
    34d4:	21 f4       	brne	.+8      	; 0x34de <__fp_cmp+0x3e>
    34d6:	08 95       	ret
    34d8:	0a 26       	eor	r0, r26
    34da:	09 f4       	brne	.+2      	; 0x34de <__fp_cmp+0x3e>
    34dc:	a1 40       	sbci	r26, 0x01	; 1
    34de:	a6 95       	lsr	r26
    34e0:	8f ef       	ldi	r24, 0xFF	; 255
    34e2:	81 1d       	adc	r24, r1
    34e4:	81 1d       	adc	r24, r1
    34e6:	08 95       	ret

000034e8 <__fp_inf>:
    34e8:	97 f9       	bld	r25, 7
    34ea:	9f 67       	ori	r25, 0x7F	; 127
    34ec:	80 e8       	ldi	r24, 0x80	; 128
    34ee:	70 e0       	ldi	r23, 0x00	; 0
    34f0:	60 e0       	ldi	r22, 0x00	; 0
    34f2:	08 95       	ret

000034f4 <__fp_nan>:
    34f4:	9f ef       	ldi	r25, 0xFF	; 255
    34f6:	80 ec       	ldi	r24, 0xC0	; 192
    34f8:	08 95       	ret

000034fa <__fp_powser>:
    34fa:	df 93       	push	r29
    34fc:	cf 93       	push	r28
    34fe:	1f 93       	push	r17
    3500:	0f 93       	push	r16
    3502:	ff 92       	push	r15
    3504:	ef 92       	push	r14
    3506:	df 92       	push	r13
    3508:	7b 01       	movw	r14, r22
    350a:	8c 01       	movw	r16, r24
    350c:	68 94       	set
    350e:	05 c0       	rjmp	.+10     	; 0x351a <__fp_powser+0x20>
    3510:	da 2e       	mov	r13, r26
    3512:	ef 01       	movw	r28, r30
    3514:	f4 d0       	rcall	.+488    	; 0x36fe <__mulsf3x>
    3516:	fe 01       	movw	r30, r28
    3518:	e8 94       	clt
    351a:	a5 91       	lpm	r26, Z+
    351c:	25 91       	lpm	r18, Z+
    351e:	35 91       	lpm	r19, Z+
    3520:	45 91       	lpm	r20, Z+
    3522:	55 91       	lpm	r21, Z+
    3524:	ae f3       	brts	.-22     	; 0x3510 <__fp_powser+0x16>
    3526:	ef 01       	movw	r28, r30
    3528:	48 de       	rcall	.-880    	; 0x31ba <__addsf3x>
    352a:	fe 01       	movw	r30, r28
    352c:	97 01       	movw	r18, r14
    352e:	a8 01       	movw	r20, r16
    3530:	da 94       	dec	r13
    3532:	79 f7       	brne	.-34     	; 0x3512 <__fp_powser+0x18>
    3534:	df 90       	pop	r13
    3536:	ef 90       	pop	r14
    3538:	ff 90       	pop	r15
    353a:	0f 91       	pop	r16
    353c:	1f 91       	pop	r17
    353e:	cf 91       	pop	r28
    3540:	df 91       	pop	r29
    3542:	08 95       	ret

00003544 <__fp_pscA>:
    3544:	00 24       	eor	r0, r0
    3546:	0a 94       	dec	r0
    3548:	16 16       	cp	r1, r22
    354a:	17 06       	cpc	r1, r23
    354c:	18 06       	cpc	r1, r24
    354e:	09 06       	cpc	r0, r25
    3550:	08 95       	ret

00003552 <__fp_pscB>:
    3552:	00 24       	eor	r0, r0
    3554:	0a 94       	dec	r0
    3556:	12 16       	cp	r1, r18
    3558:	13 06       	cpc	r1, r19
    355a:	14 06       	cpc	r1, r20
    355c:	05 06       	cpc	r0, r21
    355e:	08 95       	ret
    3560:	c9 cf       	rjmp	.-110    	; 0x34f4 <__fp_nan>

00003562 <__fp_rempio2>:
    3562:	50 d0       	rcall	.+160    	; 0x3604 <__fp_splitA>
    3564:	e8 f3       	brcs	.-6      	; 0x3560 <__fp_pscB+0xe>
    3566:	e8 94       	clt
    3568:	e0 e0       	ldi	r30, 0x00	; 0
    356a:	bb 27       	eor	r27, r27
    356c:	9f 57       	subi	r25, 0x7F	; 127
    356e:	f0 f0       	brcs	.+60     	; 0x35ac <__fp_rempio2+0x4a>
    3570:	2a ed       	ldi	r18, 0xDA	; 218
    3572:	3f e0       	ldi	r19, 0x0F	; 15
    3574:	49 ec       	ldi	r20, 0xC9	; 201
    3576:	06 c0       	rjmp	.+12     	; 0x3584 <__fp_rempio2+0x22>
    3578:	ee 0f       	add	r30, r30
    357a:	bb 0f       	add	r27, r27
    357c:	66 1f       	adc	r22, r22
    357e:	77 1f       	adc	r23, r23
    3580:	88 1f       	adc	r24, r24
    3582:	28 f0       	brcs	.+10     	; 0x358e <__fp_rempio2+0x2c>
    3584:	b2 3a       	cpi	r27, 0xA2	; 162
    3586:	62 07       	cpc	r22, r18
    3588:	73 07       	cpc	r23, r19
    358a:	84 07       	cpc	r24, r20
    358c:	28 f0       	brcs	.+10     	; 0x3598 <__fp_rempio2+0x36>
    358e:	b2 5a       	subi	r27, 0xA2	; 162
    3590:	62 0b       	sbc	r22, r18
    3592:	73 0b       	sbc	r23, r19
    3594:	84 0b       	sbc	r24, r20
    3596:	e3 95       	inc	r30
    3598:	9a 95       	dec	r25
    359a:	72 f7       	brpl	.-36     	; 0x3578 <__fp_rempio2+0x16>
    359c:	80 38       	cpi	r24, 0x80	; 128
    359e:	30 f4       	brcc	.+12     	; 0x35ac <__fp_rempio2+0x4a>
    35a0:	9a 95       	dec	r25
    35a2:	bb 0f       	add	r27, r27
    35a4:	66 1f       	adc	r22, r22
    35a6:	77 1f       	adc	r23, r23
    35a8:	88 1f       	adc	r24, r24
    35aa:	d2 f7       	brpl	.-12     	; 0x35a0 <__fp_rempio2+0x3e>
    35ac:	90 48       	sbci	r25, 0x80	; 128
    35ae:	4b c1       	rjmp	.+662    	; 0x3846 <__fp_mpack_finite>

000035b0 <__fp_round>:
    35b0:	09 2e       	mov	r0, r25
    35b2:	03 94       	inc	r0
    35b4:	00 0c       	add	r0, r0
    35b6:	11 f4       	brne	.+4      	; 0x35bc <__fp_round+0xc>
    35b8:	88 23       	and	r24, r24
    35ba:	52 f0       	brmi	.+20     	; 0x35d0 <__fp_round+0x20>
    35bc:	bb 0f       	add	r27, r27
    35be:	40 f4       	brcc	.+16     	; 0x35d0 <__fp_round+0x20>
    35c0:	bf 2b       	or	r27, r31
    35c2:	11 f4       	brne	.+4      	; 0x35c8 <__fp_round+0x18>
    35c4:	60 ff       	sbrs	r22, 0
    35c6:	04 c0       	rjmp	.+8      	; 0x35d0 <__fp_round+0x20>
    35c8:	6f 5f       	subi	r22, 0xFF	; 255
    35ca:	7f 4f       	sbci	r23, 0xFF	; 255
    35cc:	8f 4f       	sbci	r24, 0xFF	; 255
    35ce:	9f 4f       	sbci	r25, 0xFF	; 255
    35d0:	08 95       	ret

000035d2 <__fp_sinus>:
    35d2:	ef 93       	push	r30
    35d4:	e0 ff       	sbrs	r30, 0
    35d6:	06 c0       	rjmp	.+12     	; 0x35e4 <__fp_sinus+0x12>
    35d8:	a2 ea       	ldi	r26, 0xA2	; 162
    35da:	2a ed       	ldi	r18, 0xDA	; 218
    35dc:	3f e0       	ldi	r19, 0x0F	; 15
    35de:	49 ec       	ldi	r20, 0xC9	; 201
    35e0:	5f eb       	ldi	r21, 0xBF	; 191
    35e2:	eb dd       	rcall	.-1066   	; 0x31ba <__addsf3x>
    35e4:	e5 df       	rcall	.-54     	; 0x35b0 <__fp_round>
    35e6:	0f 90       	pop	r0
    35e8:	03 94       	inc	r0
    35ea:	01 fc       	sbrc	r0, 1
    35ec:	90 58       	subi	r25, 0x80	; 128
    35ee:	e7 ee       	ldi	r30, 0xE7	; 231
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	3c c1       	rjmp	.+632    	; 0x386c <__fp_powsodd>

000035f4 <__fp_split3>:
    35f4:	57 fd       	sbrc	r21, 7
    35f6:	90 58       	subi	r25, 0x80	; 128
    35f8:	44 0f       	add	r20, r20
    35fa:	55 1f       	adc	r21, r21
    35fc:	59 f0       	breq	.+22     	; 0x3614 <__fp_splitA+0x10>
    35fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3600:	71 f0       	breq	.+28     	; 0x361e <__fp_splitA+0x1a>
    3602:	47 95       	ror	r20

00003604 <__fp_splitA>:
    3604:	88 0f       	add	r24, r24
    3606:	97 fb       	bst	r25, 7
    3608:	99 1f       	adc	r25, r25
    360a:	61 f0       	breq	.+24     	; 0x3624 <__fp_splitA+0x20>
    360c:	9f 3f       	cpi	r25, 0xFF	; 255
    360e:	79 f0       	breq	.+30     	; 0x362e <__fp_splitA+0x2a>
    3610:	87 95       	ror	r24
    3612:	08 95       	ret
    3614:	12 16       	cp	r1, r18
    3616:	13 06       	cpc	r1, r19
    3618:	14 06       	cpc	r1, r20
    361a:	55 1f       	adc	r21, r21
    361c:	f2 cf       	rjmp	.-28     	; 0x3602 <__fp_split3+0xe>
    361e:	46 95       	lsr	r20
    3620:	f1 df       	rcall	.-30     	; 0x3604 <__fp_splitA>
    3622:	08 c0       	rjmp	.+16     	; 0x3634 <__fp_splitA+0x30>
    3624:	16 16       	cp	r1, r22
    3626:	17 06       	cpc	r1, r23
    3628:	18 06       	cpc	r1, r24
    362a:	99 1f       	adc	r25, r25
    362c:	f1 cf       	rjmp	.-30     	; 0x3610 <__fp_splitA+0xc>
    362e:	86 95       	lsr	r24
    3630:	71 05       	cpc	r23, r1
    3632:	61 05       	cpc	r22, r1
    3634:	08 94       	sec
    3636:	08 95       	ret

00003638 <__fp_zero>:
    3638:	e8 94       	clt

0000363a <__fp_szero>:
    363a:	bb 27       	eor	r27, r27
    363c:	66 27       	eor	r22, r22
    363e:	77 27       	eor	r23, r23
    3640:	cb 01       	movw	r24, r22
    3642:	97 f9       	bld	r25, 7
    3644:	08 95       	ret

00003646 <__gesf2>:
    3646:	2c df       	rcall	.-424    	; 0x34a0 <__fp_cmp>
    3648:	08 f4       	brcc	.+2      	; 0x364c <__gesf2+0x6>
    364a:	8f ef       	ldi	r24, 0xFF	; 255
    364c:	08 95       	ret

0000364e <inverse>:
    364e:	9b 01       	movw	r18, r22
    3650:	ac 01       	movw	r20, r24
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	80 e8       	ldi	r24, 0x80	; 128
    3658:	9f e3       	ldi	r25, 0x3F	; 63
    365a:	31 ce       	rjmp	.-926    	; 0x32be <__divsf3>
    365c:	0e f0       	brts	.+2      	; 0x3660 <inverse+0x12>
    365e:	f1 c0       	rjmp	.+482    	; 0x3842 <__fp_mpack>
    3660:	49 cf       	rjmp	.-366    	; 0x34f4 <__fp_nan>
    3662:	68 94       	set
    3664:	41 cf       	rjmp	.-382    	; 0x34e8 <__fp_inf>

00003666 <log>:
    3666:	ce df       	rcall	.-100    	; 0x3604 <__fp_splitA>
    3668:	c8 f3       	brcs	.-14     	; 0x365c <inverse+0xe>
    366a:	99 23       	and	r25, r25
    366c:	d1 f3       	breq	.-12     	; 0x3662 <inverse+0x14>
    366e:	c6 f3       	brts	.-16     	; 0x3660 <inverse+0x12>
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	1f 93       	push	r17
    3676:	0f 93       	push	r16
    3678:	ff 92       	push	r15
    367a:	c9 2f       	mov	r28, r25
    367c:	dd 27       	eor	r29, r29
    367e:	88 23       	and	r24, r24
    3680:	2a f0       	brmi	.+10     	; 0x368c <log+0x26>
    3682:	21 97       	sbiw	r28, 0x01	; 1
    3684:	66 0f       	add	r22, r22
    3686:	77 1f       	adc	r23, r23
    3688:	88 1f       	adc	r24, r24
    368a:	da f7       	brpl	.-10     	; 0x3682 <log+0x1c>
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e8       	ldi	r20, 0x80	; 128
    3692:	5f eb       	ldi	r21, 0xBF	; 191
    3694:	9f e3       	ldi	r25, 0x3F	; 63
    3696:	88 39       	cpi	r24, 0x98	; 152
    3698:	20 f0       	brcs	.+8      	; 0x36a2 <log+0x3c>
    369a:	80 3e       	cpi	r24, 0xE0	; 224
    369c:	30 f0       	brcs	.+12     	; 0x36aa <log+0x44>
    369e:	21 96       	adiw	r28, 0x01	; 1
    36a0:	8f 77       	andi	r24, 0x7F	; 127
    36a2:	7a dd       	rcall	.-1292   	; 0x3198 <__addsf3>
    36a4:	e5 e0       	ldi	r30, 0x05	; 5
    36a6:	f1 e0       	ldi	r31, 0x01	; 1
    36a8:	03 c0       	rjmp	.+6      	; 0x36b0 <log+0x4a>
    36aa:	76 dd       	rcall	.-1300   	; 0x3198 <__addsf3>
    36ac:	e2 e3       	ldi	r30, 0x32	; 50
    36ae:	f1 e0       	ldi	r31, 0x01	; 1
    36b0:	24 df       	rcall	.-440    	; 0x34fa <__fp_powser>
    36b2:	8b 01       	movw	r16, r22
    36b4:	be 01       	movw	r22, r28
    36b6:	ec 01       	movw	r28, r24
    36b8:	fb 2e       	mov	r15, r27
    36ba:	6f 57       	subi	r22, 0x7F	; 127
    36bc:	71 09       	sbc	r23, r1
    36be:	75 95       	asr	r23
    36c0:	77 1f       	adc	r23, r23
    36c2:	88 0b       	sbc	r24, r24
    36c4:	99 0b       	sbc	r25, r25
    36c6:	96 de       	rcall	.-724    	; 0x33f4 <__floatsisf>
    36c8:	28 e1       	ldi	r18, 0x18	; 24
    36ca:	32 e7       	ldi	r19, 0x72	; 114
    36cc:	41 e3       	ldi	r20, 0x31	; 49
    36ce:	5f e3       	ldi	r21, 0x3F	; 63
    36d0:	16 d0       	rcall	.+44     	; 0x36fe <__mulsf3x>
    36d2:	af 2d       	mov	r26, r15
    36d4:	98 01       	movw	r18, r16
    36d6:	ae 01       	movw	r20, r28
    36d8:	ff 90       	pop	r15
    36da:	0f 91       	pop	r16
    36dc:	1f 91       	pop	r17
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	6b dd       	rcall	.-1322   	; 0x31ba <__addsf3x>
    36e4:	65 cf       	rjmp	.-310    	; 0x35b0 <__fp_round>

000036e6 <__mulsf3>:
    36e6:	0b d0       	rcall	.+22     	; 0x36fe <__mulsf3x>
    36e8:	63 cf       	rjmp	.-314    	; 0x35b0 <__fp_round>
    36ea:	2c df       	rcall	.-424    	; 0x3544 <__fp_pscA>
    36ec:	28 f0       	brcs	.+10     	; 0x36f8 <__mulsf3+0x12>
    36ee:	31 df       	rcall	.-414    	; 0x3552 <__fp_pscB>
    36f0:	18 f0       	brcs	.+6      	; 0x36f8 <__mulsf3+0x12>
    36f2:	95 23       	and	r25, r21
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <__mulsf3+0x12>
    36f6:	f8 ce       	rjmp	.-528    	; 0x34e8 <__fp_inf>
    36f8:	fd ce       	rjmp	.-518    	; 0x34f4 <__fp_nan>
    36fa:	11 24       	eor	r1, r1
    36fc:	9e cf       	rjmp	.-196    	; 0x363a <__fp_szero>

000036fe <__mulsf3x>:
    36fe:	7a df       	rcall	.-268    	; 0x35f4 <__fp_split3>
    3700:	a0 f3       	brcs	.-24     	; 0x36ea <__mulsf3+0x4>

00003702 <__mulsf3_pse>:
    3702:	95 9f       	mul	r25, r21
    3704:	d1 f3       	breq	.-12     	; 0x36fa <__mulsf3+0x14>
    3706:	95 0f       	add	r25, r21
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	55 1f       	adc	r21, r21
    370c:	62 9f       	mul	r22, r18
    370e:	f0 01       	movw	r30, r0
    3710:	72 9f       	mul	r23, r18
    3712:	bb 27       	eor	r27, r27
    3714:	f0 0d       	add	r31, r0
    3716:	b1 1d       	adc	r27, r1
    3718:	63 9f       	mul	r22, r19
    371a:	aa 27       	eor	r26, r26
    371c:	f0 0d       	add	r31, r0
    371e:	b1 1d       	adc	r27, r1
    3720:	aa 1f       	adc	r26, r26
    3722:	64 9f       	mul	r22, r20
    3724:	66 27       	eor	r22, r22
    3726:	b0 0d       	add	r27, r0
    3728:	a1 1d       	adc	r26, r1
    372a:	66 1f       	adc	r22, r22
    372c:	82 9f       	mul	r24, r18
    372e:	22 27       	eor	r18, r18
    3730:	b0 0d       	add	r27, r0
    3732:	a1 1d       	adc	r26, r1
    3734:	62 1f       	adc	r22, r18
    3736:	73 9f       	mul	r23, r19
    3738:	b0 0d       	add	r27, r0
    373a:	a1 1d       	adc	r26, r1
    373c:	62 1f       	adc	r22, r18
    373e:	83 9f       	mul	r24, r19
    3740:	a0 0d       	add	r26, r0
    3742:	61 1d       	adc	r22, r1
    3744:	22 1f       	adc	r18, r18
    3746:	74 9f       	mul	r23, r20
    3748:	33 27       	eor	r19, r19
    374a:	a0 0d       	add	r26, r0
    374c:	61 1d       	adc	r22, r1
    374e:	23 1f       	adc	r18, r19
    3750:	84 9f       	mul	r24, r20
    3752:	60 0d       	add	r22, r0
    3754:	21 1d       	adc	r18, r1
    3756:	82 2f       	mov	r24, r18
    3758:	76 2f       	mov	r23, r22
    375a:	6a 2f       	mov	r22, r26
    375c:	11 24       	eor	r1, r1
    375e:	9f 57       	subi	r25, 0x7F	; 127
    3760:	50 40       	sbci	r21, 0x00	; 0
    3762:	8a f0       	brmi	.+34     	; 0x3786 <__mulsf3_pse+0x84>
    3764:	e1 f0       	breq	.+56     	; 0x379e <__mulsf3_pse+0x9c>
    3766:	88 23       	and	r24, r24
    3768:	4a f0       	brmi	.+18     	; 0x377c <__mulsf3_pse+0x7a>
    376a:	ee 0f       	add	r30, r30
    376c:	ff 1f       	adc	r31, r31
    376e:	bb 1f       	adc	r27, r27
    3770:	66 1f       	adc	r22, r22
    3772:	77 1f       	adc	r23, r23
    3774:	88 1f       	adc	r24, r24
    3776:	91 50       	subi	r25, 0x01	; 1
    3778:	50 40       	sbci	r21, 0x00	; 0
    377a:	a9 f7       	brne	.-22     	; 0x3766 <__mulsf3_pse+0x64>
    377c:	9e 3f       	cpi	r25, 0xFE	; 254
    377e:	51 05       	cpc	r21, r1
    3780:	70 f0       	brcs	.+28     	; 0x379e <__mulsf3_pse+0x9c>
    3782:	b2 ce       	rjmp	.-668    	; 0x34e8 <__fp_inf>
    3784:	5a cf       	rjmp	.-332    	; 0x363a <__fp_szero>
    3786:	5f 3f       	cpi	r21, 0xFF	; 255
    3788:	ec f3       	brlt	.-6      	; 0x3784 <__mulsf3_pse+0x82>
    378a:	98 3e       	cpi	r25, 0xE8	; 232
    378c:	dc f3       	brlt	.-10     	; 0x3784 <__mulsf3_pse+0x82>
    378e:	86 95       	lsr	r24
    3790:	77 95       	ror	r23
    3792:	67 95       	ror	r22
    3794:	b7 95       	ror	r27
    3796:	f7 95       	ror	r31
    3798:	e7 95       	ror	r30
    379a:	9f 5f       	subi	r25, 0xFF	; 255
    379c:	c1 f7       	brne	.-16     	; 0x378e <__mulsf3_pse+0x8c>
    379e:	fe 2b       	or	r31, r30
    37a0:	88 0f       	add	r24, r24
    37a2:	91 1d       	adc	r25, r1
    37a4:	96 95       	lsr	r25
    37a6:	87 95       	ror	r24
    37a8:	97 f9       	bld	r25, 7
    37aa:	08 95       	ret

000037ac <sin>:
    37ac:	9f 93       	push	r25
    37ae:	d9 de       	rcall	.-590    	; 0x3562 <__fp_rempio2>
    37b0:	0f 90       	pop	r0
    37b2:	07 fc       	sbrc	r0, 7
    37b4:	ee 5f       	subi	r30, 0xFE	; 254
    37b6:	0d cf       	rjmp	.-486    	; 0x35d2 <__fp_sinus>
    37b8:	11 f4       	brne	.+4      	; 0x37be <sin+0x12>
    37ba:	0e f4       	brtc	.+2      	; 0x37be <sin+0x12>
    37bc:	9b ce       	rjmp	.-714    	; 0x34f4 <__fp_nan>
    37be:	41 c0       	rjmp	.+130    	; 0x3842 <__fp_mpack>

000037c0 <sqrt>:
    37c0:	21 df       	rcall	.-446    	; 0x3604 <__fp_splitA>
    37c2:	d0 f3       	brcs	.-12     	; 0x37b8 <sin+0xc>
    37c4:	99 23       	and	r25, r25
    37c6:	d9 f3       	breq	.-10     	; 0x37be <sin+0x12>
    37c8:	ce f3       	brts	.-14     	; 0x37bc <sin+0x10>
    37ca:	9f 57       	subi	r25, 0x7F	; 127
    37cc:	55 0b       	sbc	r21, r21
    37ce:	87 ff       	sbrs	r24, 7
    37d0:	46 d0       	rcall	.+140    	; 0x385e <__fp_norm2>
    37d2:	00 24       	eor	r0, r0
    37d4:	a0 e6       	ldi	r26, 0x60	; 96
    37d6:	40 ea       	ldi	r20, 0xA0	; 160
    37d8:	90 01       	movw	r18, r0
    37da:	80 58       	subi	r24, 0x80	; 128
    37dc:	56 95       	lsr	r21
    37de:	97 95       	ror	r25
    37e0:	28 f4       	brcc	.+10     	; 0x37ec <sqrt+0x2c>
    37e2:	80 5c       	subi	r24, 0xC0	; 192
    37e4:	66 0f       	add	r22, r22
    37e6:	77 1f       	adc	r23, r23
    37e8:	88 1f       	adc	r24, r24
    37ea:	20 f0       	brcs	.+8      	; 0x37f4 <sqrt+0x34>
    37ec:	26 17       	cp	r18, r22
    37ee:	37 07       	cpc	r19, r23
    37f0:	48 07       	cpc	r20, r24
    37f2:	30 f4       	brcc	.+12     	; 0x3800 <sqrt+0x40>
    37f4:	62 1b       	sub	r22, r18
    37f6:	73 0b       	sbc	r23, r19
    37f8:	84 0b       	sbc	r24, r20
    37fa:	20 29       	or	r18, r0
    37fc:	31 29       	or	r19, r1
    37fe:	4a 2b       	or	r20, r26
    3800:	a6 95       	lsr	r26
    3802:	17 94       	ror	r1
    3804:	07 94       	ror	r0
    3806:	20 25       	eor	r18, r0
    3808:	31 25       	eor	r19, r1
    380a:	4a 27       	eor	r20, r26
    380c:	58 f7       	brcc	.-42     	; 0x37e4 <sqrt+0x24>
    380e:	66 0f       	add	r22, r22
    3810:	77 1f       	adc	r23, r23
    3812:	88 1f       	adc	r24, r24
    3814:	20 f0       	brcs	.+8      	; 0x381e <sqrt+0x5e>
    3816:	26 17       	cp	r18, r22
    3818:	37 07       	cpc	r19, r23
    381a:	48 07       	cpc	r20, r24
    381c:	30 f4       	brcc	.+12     	; 0x382a <sqrt+0x6a>
    381e:	62 0b       	sbc	r22, r18
    3820:	73 0b       	sbc	r23, r19
    3822:	84 0b       	sbc	r24, r20
    3824:	20 0d       	add	r18, r0
    3826:	31 1d       	adc	r19, r1
    3828:	41 1d       	adc	r20, r1
    382a:	a0 95       	com	r26
    382c:	81 f7       	brne	.-32     	; 0x380e <sqrt+0x4e>
    382e:	b9 01       	movw	r22, r18
    3830:	84 2f       	mov	r24, r20
    3832:	91 58       	subi	r25, 0x81	; 129
    3834:	88 0f       	add	r24, r24
    3836:	96 95       	lsr	r25
    3838:	87 95       	ror	r24
    383a:	08 95       	ret

0000383c <square>:
    383c:	9b 01       	movw	r18, r22
    383e:	ac 01       	movw	r20, r24
    3840:	52 cf       	rjmp	.-348    	; 0x36e6 <__mulsf3>

00003842 <__fp_mpack>:
    3842:	9f 3f       	cpi	r25, 0xFF	; 255
    3844:	31 f0       	breq	.+12     	; 0x3852 <__fp_mpack_finite+0xc>

00003846 <__fp_mpack_finite>:
    3846:	91 50       	subi	r25, 0x01	; 1
    3848:	20 f4       	brcc	.+8      	; 0x3852 <__fp_mpack_finite+0xc>
    384a:	87 95       	ror	r24
    384c:	77 95       	ror	r23
    384e:	67 95       	ror	r22
    3850:	b7 95       	ror	r27
    3852:	88 0f       	add	r24, r24
    3854:	91 1d       	adc	r25, r1
    3856:	96 95       	lsr	r25
    3858:	87 95       	ror	r24
    385a:	97 f9       	bld	r25, 7
    385c:	08 95       	ret

0000385e <__fp_norm2>:
    385e:	91 50       	subi	r25, 0x01	; 1
    3860:	50 40       	sbci	r21, 0x00	; 0
    3862:	66 0f       	add	r22, r22
    3864:	77 1f       	adc	r23, r23
    3866:	88 1f       	adc	r24, r24
    3868:	d2 f7       	brpl	.-12     	; 0x385e <__fp_norm2>
    386a:	08 95       	ret

0000386c <__fp_powsodd>:
    386c:	9f 93       	push	r25
    386e:	8f 93       	push	r24
    3870:	7f 93       	push	r23
    3872:	6f 93       	push	r22
    3874:	ff 93       	push	r31
    3876:	ef 93       	push	r30
    3878:	9b 01       	movw	r18, r22
    387a:	ac 01       	movw	r20, r24
    387c:	34 df       	rcall	.-408    	; 0x36e6 <__mulsf3>
    387e:	ef 91       	pop	r30
    3880:	ff 91       	pop	r31
    3882:	3b de       	rcall	.-906    	; 0x34fa <__fp_powser>
    3884:	2f 91       	pop	r18
    3886:	3f 91       	pop	r19
    3888:	4f 91       	pop	r20
    388a:	5f 91       	pop	r21
    388c:	2c cf       	rjmp	.-424    	; 0x36e6 <__mulsf3>

0000388e <__divmodhi4>:
    388e:	97 fb       	bst	r25, 7
    3890:	07 2e       	mov	r0, r23
    3892:	16 f4       	brtc	.+4      	; 0x3898 <__divmodhi4+0xa>
    3894:	00 94       	com	r0
    3896:	07 d0       	rcall	.+14     	; 0x38a6 <__divmodhi4_neg1>
    3898:	77 fd       	sbrc	r23, 7
    389a:	09 d0       	rcall	.+18     	; 0x38ae <__divmodhi4_neg2>
    389c:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__udivmodhi4>
    38a0:	07 fc       	sbrc	r0, 7
    38a2:	05 d0       	rcall	.+10     	; 0x38ae <__divmodhi4_neg2>
    38a4:	3e f4       	brtc	.+14     	; 0x38b4 <__divmodhi4_exit>

000038a6 <__divmodhi4_neg1>:
    38a6:	90 95       	com	r25
    38a8:	81 95       	neg	r24
    38aa:	9f 4f       	sbci	r25, 0xFF	; 255
    38ac:	08 95       	ret

000038ae <__divmodhi4_neg2>:
    38ae:	70 95       	com	r23
    38b0:	61 95       	neg	r22
    38b2:	7f 4f       	sbci	r23, 0xFF	; 255

000038b4 <__divmodhi4_exit>:
    38b4:	08 95       	ret

000038b6 <__tablejump2__>:
    38b6:	ee 0f       	add	r30, r30
    38b8:	ff 1f       	adc	r31, r31

000038ba <__tablejump__>:
    38ba:	05 90       	lpm	r0, Z+
    38bc:	f4 91       	lpm	r31, Z
    38be:	e0 2d       	mov	r30, r0
    38c0:	09 94       	ijmp

000038c2 <__udivmodhi4>:
    38c2:	aa 1b       	sub	r26, r26
    38c4:	bb 1b       	sub	r27, r27
    38c6:	51 e1       	ldi	r21, 0x11	; 17
    38c8:	07 c0       	rjmp	.+14     	; 0x38d8 <__udivmodhi4_ep>

000038ca <__udivmodhi4_loop>:
    38ca:	aa 1f       	adc	r26, r26
    38cc:	bb 1f       	adc	r27, r27
    38ce:	a6 17       	cp	r26, r22
    38d0:	b7 07       	cpc	r27, r23
    38d2:	10 f0       	brcs	.+4      	; 0x38d8 <__udivmodhi4_ep>
    38d4:	a6 1b       	sub	r26, r22
    38d6:	b7 0b       	sbc	r27, r23

000038d8 <__udivmodhi4_ep>:
    38d8:	88 1f       	adc	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	5a 95       	dec	r21
    38de:	a9 f7       	brne	.-22     	; 0x38ca <__udivmodhi4_loop>
    38e0:	80 95       	com	r24
    38e2:	90 95       	com	r25
    38e4:	bc 01       	movw	r22, r24
    38e6:	cd 01       	movw	r24, r26
    38e8:	08 95       	ret

000038ea <malloc>:
    38ea:	cf 93       	push	r28
    38ec:	df 93       	push	r29
    38ee:	82 30       	cpi	r24, 0x02	; 2
    38f0:	91 05       	cpc	r25, r1
    38f2:	10 f4       	brcc	.+4      	; 0x38f8 <malloc+0xe>
    38f4:	82 e0       	ldi	r24, 0x02	; 2
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	e0 91 0c 01 	lds	r30, 0x010C
    38fc:	f0 91 0d 01 	lds	r31, 0x010D
    3900:	20 e0       	ldi	r18, 0x00	; 0
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	a0 e0       	ldi	r26, 0x00	; 0
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	30 97       	sbiw	r30, 0x00	; 0
    390a:	39 f1       	breq	.+78     	; 0x395a <malloc+0x70>
    390c:	40 81       	ld	r20, Z
    390e:	51 81       	ldd	r21, Z+1	; 0x01
    3910:	48 17       	cp	r20, r24
    3912:	59 07       	cpc	r21, r25
    3914:	b8 f0       	brcs	.+46     	; 0x3944 <malloc+0x5a>
    3916:	48 17       	cp	r20, r24
    3918:	59 07       	cpc	r21, r25
    391a:	71 f4       	brne	.+28     	; 0x3938 <malloc+0x4e>
    391c:	82 81       	ldd	r24, Z+2	; 0x02
    391e:	93 81       	ldd	r25, Z+3	; 0x03
    3920:	10 97       	sbiw	r26, 0x00	; 0
    3922:	29 f0       	breq	.+10     	; 0x392e <malloc+0x44>
    3924:	13 96       	adiw	r26, 0x03	; 3
    3926:	9c 93       	st	X, r25
    3928:	8e 93       	st	-X, r24
    392a:	12 97       	sbiw	r26, 0x02	; 2
    392c:	2c c0       	rjmp	.+88     	; 0x3986 <malloc+0x9c>
    392e:	90 93 0d 01 	sts	0x010D, r25
    3932:	80 93 0c 01 	sts	0x010C, r24
    3936:	27 c0       	rjmp	.+78     	; 0x3986 <malloc+0x9c>
    3938:	21 15       	cp	r18, r1
    393a:	31 05       	cpc	r19, r1
    393c:	31 f0       	breq	.+12     	; 0x394a <malloc+0x60>
    393e:	42 17       	cp	r20, r18
    3940:	53 07       	cpc	r21, r19
    3942:	18 f0       	brcs	.+6      	; 0x394a <malloc+0x60>
    3944:	a9 01       	movw	r20, r18
    3946:	db 01       	movw	r26, r22
    3948:	01 c0       	rjmp	.+2      	; 0x394c <malloc+0x62>
    394a:	ef 01       	movw	r28, r30
    394c:	9a 01       	movw	r18, r20
    394e:	bd 01       	movw	r22, r26
    3950:	df 01       	movw	r26, r30
    3952:	02 80       	ldd	r0, Z+2	; 0x02
    3954:	f3 81       	ldd	r31, Z+3	; 0x03
    3956:	e0 2d       	mov	r30, r0
    3958:	d7 cf       	rjmp	.-82     	; 0x3908 <malloc+0x1e>
    395a:	21 15       	cp	r18, r1
    395c:	31 05       	cpc	r19, r1
    395e:	f9 f0       	breq	.+62     	; 0x399e <malloc+0xb4>
    3960:	28 1b       	sub	r18, r24
    3962:	39 0b       	sbc	r19, r25
    3964:	24 30       	cpi	r18, 0x04	; 4
    3966:	31 05       	cpc	r19, r1
    3968:	80 f4       	brcc	.+32     	; 0x398a <malloc+0xa0>
    396a:	8a 81       	ldd	r24, Y+2	; 0x02
    396c:	9b 81       	ldd	r25, Y+3	; 0x03
    396e:	61 15       	cp	r22, r1
    3970:	71 05       	cpc	r23, r1
    3972:	21 f0       	breq	.+8      	; 0x397c <malloc+0x92>
    3974:	fb 01       	movw	r30, r22
    3976:	93 83       	std	Z+3, r25	; 0x03
    3978:	82 83       	std	Z+2, r24	; 0x02
    397a:	04 c0       	rjmp	.+8      	; 0x3984 <malloc+0x9a>
    397c:	90 93 0d 01 	sts	0x010D, r25
    3980:	80 93 0c 01 	sts	0x010C, r24
    3984:	fe 01       	movw	r30, r28
    3986:	32 96       	adiw	r30, 0x02	; 2
    3988:	44 c0       	rjmp	.+136    	; 0x3a12 <malloc+0x128>
    398a:	fe 01       	movw	r30, r28
    398c:	e2 0f       	add	r30, r18
    398e:	f3 1f       	adc	r31, r19
    3990:	81 93       	st	Z+, r24
    3992:	91 93       	st	Z+, r25
    3994:	22 50       	subi	r18, 0x02	; 2
    3996:	31 09       	sbc	r19, r1
    3998:	39 83       	std	Y+1, r19	; 0x01
    399a:	28 83       	st	Y, r18
    399c:	3a c0       	rjmp	.+116    	; 0x3a12 <malloc+0x128>
    399e:	20 91 0a 01 	lds	r18, 0x010A
    39a2:	30 91 0b 01 	lds	r19, 0x010B
    39a6:	23 2b       	or	r18, r19
    39a8:	41 f4       	brne	.+16     	; 0x39ba <malloc+0xd0>
    39aa:	20 91 62 00 	lds	r18, 0x0062
    39ae:	30 91 63 00 	lds	r19, 0x0063
    39b2:	30 93 0b 01 	sts	0x010B, r19
    39b6:	20 93 0a 01 	sts	0x010A, r18
    39ba:	20 91 60 00 	lds	r18, 0x0060
    39be:	30 91 61 00 	lds	r19, 0x0061
    39c2:	21 15       	cp	r18, r1
    39c4:	31 05       	cpc	r19, r1
    39c6:	41 f4       	brne	.+16     	; 0x39d8 <malloc+0xee>
    39c8:	2d b7       	in	r18, 0x3d	; 61
    39ca:	3e b7       	in	r19, 0x3e	; 62
    39cc:	40 91 64 00 	lds	r20, 0x0064
    39d0:	50 91 65 00 	lds	r21, 0x0065
    39d4:	24 1b       	sub	r18, r20
    39d6:	35 0b       	sbc	r19, r21
    39d8:	e0 91 0a 01 	lds	r30, 0x010A
    39dc:	f0 91 0b 01 	lds	r31, 0x010B
    39e0:	e2 17       	cp	r30, r18
    39e2:	f3 07       	cpc	r31, r19
    39e4:	a0 f4       	brcc	.+40     	; 0x3a0e <malloc+0x124>
    39e6:	2e 1b       	sub	r18, r30
    39e8:	3f 0b       	sbc	r19, r31
    39ea:	28 17       	cp	r18, r24
    39ec:	39 07       	cpc	r19, r25
    39ee:	78 f0       	brcs	.+30     	; 0x3a0e <malloc+0x124>
    39f0:	ac 01       	movw	r20, r24
    39f2:	4e 5f       	subi	r20, 0xFE	; 254
    39f4:	5f 4f       	sbci	r21, 0xFF	; 255
    39f6:	24 17       	cp	r18, r20
    39f8:	35 07       	cpc	r19, r21
    39fa:	48 f0       	brcs	.+18     	; 0x3a0e <malloc+0x124>
    39fc:	4e 0f       	add	r20, r30
    39fe:	5f 1f       	adc	r21, r31
    3a00:	50 93 0b 01 	sts	0x010B, r21
    3a04:	40 93 0a 01 	sts	0x010A, r20
    3a08:	81 93       	st	Z+, r24
    3a0a:	91 93       	st	Z+, r25
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <malloc+0x128>
    3a0e:	e0 e0       	ldi	r30, 0x00	; 0
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	cf 01       	movw	r24, r30
    3a14:	df 91       	pop	r29
    3a16:	cf 91       	pop	r28
    3a18:	08 95       	ret

00003a1a <free>:
    3a1a:	cf 93       	push	r28
    3a1c:	df 93       	push	r29
    3a1e:	00 97       	sbiw	r24, 0x00	; 0
    3a20:	09 f4       	brne	.+2      	; 0x3a24 <free+0xa>
    3a22:	87 c0       	rjmp	.+270    	; 0x3b32 <free+0x118>
    3a24:	fc 01       	movw	r30, r24
    3a26:	32 97       	sbiw	r30, 0x02	; 2
    3a28:	13 82       	std	Z+3, r1	; 0x03
    3a2a:	12 82       	std	Z+2, r1	; 0x02
    3a2c:	c0 91 0c 01 	lds	r28, 0x010C
    3a30:	d0 91 0d 01 	lds	r29, 0x010D
    3a34:	20 97       	sbiw	r28, 0x00	; 0
    3a36:	81 f4       	brne	.+32     	; 0x3a58 <free+0x3e>
    3a38:	20 81       	ld	r18, Z
    3a3a:	31 81       	ldd	r19, Z+1	; 0x01
    3a3c:	28 0f       	add	r18, r24
    3a3e:	39 1f       	adc	r19, r25
    3a40:	80 91 0a 01 	lds	r24, 0x010A
    3a44:	90 91 0b 01 	lds	r25, 0x010B
    3a48:	82 17       	cp	r24, r18
    3a4a:	93 07       	cpc	r25, r19
    3a4c:	79 f5       	brne	.+94     	; 0x3aac <free+0x92>
    3a4e:	f0 93 0b 01 	sts	0x010B, r31
    3a52:	e0 93 0a 01 	sts	0x010A, r30
    3a56:	6d c0       	rjmp	.+218    	; 0x3b32 <free+0x118>
    3a58:	de 01       	movw	r26, r28
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	ae 17       	cp	r26, r30
    3a60:	bf 07       	cpc	r27, r31
    3a62:	50 f4       	brcc	.+20     	; 0x3a78 <free+0x5e>
    3a64:	12 96       	adiw	r26, 0x02	; 2
    3a66:	4d 91       	ld	r20, X+
    3a68:	5c 91       	ld	r21, X
    3a6a:	13 97       	sbiw	r26, 0x03	; 3
    3a6c:	9d 01       	movw	r18, r26
    3a6e:	41 15       	cp	r20, r1
    3a70:	51 05       	cpc	r21, r1
    3a72:	09 f1       	breq	.+66     	; 0x3ab6 <free+0x9c>
    3a74:	da 01       	movw	r26, r20
    3a76:	f3 cf       	rjmp	.-26     	; 0x3a5e <free+0x44>
    3a78:	b3 83       	std	Z+3, r27	; 0x03
    3a7a:	a2 83       	std	Z+2, r26	; 0x02
    3a7c:	40 81       	ld	r20, Z
    3a7e:	51 81       	ldd	r21, Z+1	; 0x01
    3a80:	84 0f       	add	r24, r20
    3a82:	95 1f       	adc	r25, r21
    3a84:	8a 17       	cp	r24, r26
    3a86:	9b 07       	cpc	r25, r27
    3a88:	71 f4       	brne	.+28     	; 0x3aa6 <free+0x8c>
    3a8a:	8d 91       	ld	r24, X+
    3a8c:	9c 91       	ld	r25, X
    3a8e:	11 97       	sbiw	r26, 0x01	; 1
    3a90:	84 0f       	add	r24, r20
    3a92:	95 1f       	adc	r25, r21
    3a94:	02 96       	adiw	r24, 0x02	; 2
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
    3a9a:	12 96       	adiw	r26, 0x02	; 2
    3a9c:	8d 91       	ld	r24, X+
    3a9e:	9c 91       	ld	r25, X
    3aa0:	13 97       	sbiw	r26, 0x03	; 3
    3aa2:	93 83       	std	Z+3, r25	; 0x03
    3aa4:	82 83       	std	Z+2, r24	; 0x02
    3aa6:	21 15       	cp	r18, r1
    3aa8:	31 05       	cpc	r19, r1
    3aaa:	29 f4       	brne	.+10     	; 0x3ab6 <free+0x9c>
    3aac:	f0 93 0d 01 	sts	0x010D, r31
    3ab0:	e0 93 0c 01 	sts	0x010C, r30
    3ab4:	3e c0       	rjmp	.+124    	; 0x3b32 <free+0x118>
    3ab6:	d9 01       	movw	r26, r18
    3ab8:	13 96       	adiw	r26, 0x03	; 3
    3aba:	fc 93       	st	X, r31
    3abc:	ee 93       	st	-X, r30
    3abe:	12 97       	sbiw	r26, 0x02	; 2
    3ac0:	4d 91       	ld	r20, X+
    3ac2:	5d 91       	ld	r21, X+
    3ac4:	a4 0f       	add	r26, r20
    3ac6:	b5 1f       	adc	r27, r21
    3ac8:	ea 17       	cp	r30, r26
    3aca:	fb 07       	cpc	r31, r27
    3acc:	79 f4       	brne	.+30     	; 0x3aec <free+0xd2>
    3ace:	80 81       	ld	r24, Z
    3ad0:	91 81       	ldd	r25, Z+1	; 0x01
    3ad2:	84 0f       	add	r24, r20
    3ad4:	95 1f       	adc	r25, r21
    3ad6:	02 96       	adiw	r24, 0x02	; 2
    3ad8:	d9 01       	movw	r26, r18
    3ada:	11 96       	adiw	r26, 0x01	; 1
    3adc:	9c 93       	st	X, r25
    3ade:	8e 93       	st	-X, r24
    3ae0:	82 81       	ldd	r24, Z+2	; 0x02
    3ae2:	93 81       	ldd	r25, Z+3	; 0x03
    3ae4:	13 96       	adiw	r26, 0x03	; 3
    3ae6:	9c 93       	st	X, r25
    3ae8:	8e 93       	st	-X, r24
    3aea:	12 97       	sbiw	r26, 0x02	; 2
    3aec:	e0 e0       	ldi	r30, 0x00	; 0
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	8a 81       	ldd	r24, Y+2	; 0x02
    3af2:	9b 81       	ldd	r25, Y+3	; 0x03
    3af4:	00 97       	sbiw	r24, 0x00	; 0
    3af6:	19 f0       	breq	.+6      	; 0x3afe <free+0xe4>
    3af8:	fe 01       	movw	r30, r28
    3afa:	ec 01       	movw	r28, r24
    3afc:	f9 cf       	rjmp	.-14     	; 0x3af0 <free+0xd6>
    3afe:	ce 01       	movw	r24, r28
    3b00:	02 96       	adiw	r24, 0x02	; 2
    3b02:	28 81       	ld	r18, Y
    3b04:	39 81       	ldd	r19, Y+1	; 0x01
    3b06:	82 0f       	add	r24, r18
    3b08:	93 1f       	adc	r25, r19
    3b0a:	20 91 0a 01 	lds	r18, 0x010A
    3b0e:	30 91 0b 01 	lds	r19, 0x010B
    3b12:	28 17       	cp	r18, r24
    3b14:	39 07       	cpc	r19, r25
    3b16:	69 f4       	brne	.+26     	; 0x3b32 <free+0x118>
    3b18:	30 97       	sbiw	r30, 0x00	; 0
    3b1a:	29 f4       	brne	.+10     	; 0x3b26 <free+0x10c>
    3b1c:	10 92 0d 01 	sts	0x010D, r1
    3b20:	10 92 0c 01 	sts	0x010C, r1
    3b24:	02 c0       	rjmp	.+4      	; 0x3b2a <free+0x110>
    3b26:	13 82       	std	Z+3, r1	; 0x03
    3b28:	12 82       	std	Z+2, r1	; 0x02
    3b2a:	d0 93 0b 01 	sts	0x010B, r29
    3b2e:	c0 93 0a 01 	sts	0x010A, r28
    3b32:	df 91       	pop	r29
    3b34:	cf 91       	pop	r28
    3b36:	08 95       	ret

00003b38 <do_rand>:
    3b38:	8f 92       	push	r8
    3b3a:	9f 92       	push	r9
    3b3c:	af 92       	push	r10
    3b3e:	bf 92       	push	r11
    3b40:	cf 92       	push	r12
    3b42:	df 92       	push	r13
    3b44:	ef 92       	push	r14
    3b46:	ff 92       	push	r15
    3b48:	cf 93       	push	r28
    3b4a:	df 93       	push	r29
    3b4c:	ec 01       	movw	r28, r24
    3b4e:	68 81       	ld	r22, Y
    3b50:	79 81       	ldd	r23, Y+1	; 0x01
    3b52:	8a 81       	ldd	r24, Y+2	; 0x02
    3b54:	9b 81       	ldd	r25, Y+3	; 0x03
    3b56:	61 15       	cp	r22, r1
    3b58:	71 05       	cpc	r23, r1
    3b5a:	81 05       	cpc	r24, r1
    3b5c:	91 05       	cpc	r25, r1
    3b5e:	21 f4       	brne	.+8      	; 0x3b68 <do_rand+0x30>
    3b60:	64 e2       	ldi	r22, 0x24	; 36
    3b62:	79 ed       	ldi	r23, 0xD9	; 217
    3b64:	8b e5       	ldi	r24, 0x5B	; 91
    3b66:	97 e0       	ldi	r25, 0x07	; 7
    3b68:	2d e1       	ldi	r18, 0x1D	; 29
    3b6a:	33 ef       	ldi	r19, 0xF3	; 243
    3b6c:	41 e0       	ldi	r20, 0x01	; 1
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	0e 94 2d 22 	call	0x445a	; 0x445a <__divmodsi4>
    3b74:	49 01       	movw	r8, r18
    3b76:	5a 01       	movw	r10, r20
    3b78:	9b 01       	movw	r18, r22
    3b7a:	ac 01       	movw	r20, r24
    3b7c:	a7 ea       	ldi	r26, 0xA7	; 167
    3b7e:	b1 e4       	ldi	r27, 0x41	; 65
    3b80:	0e 94 4c 22 	call	0x4498	; 0x4498 <__muluhisi3>
    3b84:	6b 01       	movw	r12, r22
    3b86:	7c 01       	movw	r14, r24
    3b88:	ac ee       	ldi	r26, 0xEC	; 236
    3b8a:	b4 ef       	ldi	r27, 0xF4	; 244
    3b8c:	a5 01       	movw	r20, r10
    3b8e:	94 01       	movw	r18, r8
    3b90:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__mulohisi3>
    3b94:	c6 0e       	add	r12, r22
    3b96:	d7 1e       	adc	r13, r23
    3b98:	e8 1e       	adc	r14, r24
    3b9a:	f9 1e       	adc	r15, r25
    3b9c:	f7 fe       	sbrs	r15, 7
    3b9e:	06 c0       	rjmp	.+12     	; 0x3bac <do_rand+0x74>
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	c8 1a       	sub	r12, r24
    3ba4:	d1 08       	sbc	r13, r1
    3ba6:	e1 08       	sbc	r14, r1
    3ba8:	80 e8       	ldi	r24, 0x80	; 128
    3baa:	f8 0a       	sbc	r15, r24
    3bac:	c8 82       	st	Y, r12
    3bae:	d9 82       	std	Y+1, r13	; 0x01
    3bb0:	ea 82       	std	Y+2, r14	; 0x02
    3bb2:	fb 82       	std	Y+3, r15	; 0x03
    3bb4:	c6 01       	movw	r24, r12
    3bb6:	9f 77       	andi	r25, 0x7F	; 127
    3bb8:	df 91       	pop	r29
    3bba:	cf 91       	pop	r28
    3bbc:	ff 90       	pop	r15
    3bbe:	ef 90       	pop	r14
    3bc0:	df 90       	pop	r13
    3bc2:	cf 90       	pop	r12
    3bc4:	bf 90       	pop	r11
    3bc6:	af 90       	pop	r10
    3bc8:	9f 90       	pop	r9
    3bca:	8f 90       	pop	r8
    3bcc:	08 95       	ret

00003bce <rand_r>:
    3bce:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <do_rand>
    3bd2:	08 95       	ret

00003bd4 <rand>:
    3bd4:	86 e6       	ldi	r24, 0x66	; 102
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <do_rand>
    3bdc:	08 95       	ret

00003bde <srand>:
    3bde:	a0 e0       	ldi	r26, 0x00	; 0
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	80 93 66 00 	sts	0x0066, r24
    3be6:	90 93 67 00 	sts	0x0067, r25
    3bea:	a0 93 68 00 	sts	0x0068, r26
    3bee:	b0 93 69 00 	sts	0x0069, r27
    3bf2:	08 95       	ret

00003bf4 <strtol>:
    3bf4:	2f 92       	push	r2
    3bf6:	3f 92       	push	r3
    3bf8:	5f 92       	push	r5
    3bfa:	6f 92       	push	r6
    3bfc:	7f 92       	push	r7
    3bfe:	8f 92       	push	r8
    3c00:	9f 92       	push	r9
    3c02:	af 92       	push	r10
    3c04:	bf 92       	push	r11
    3c06:	cf 92       	push	r12
    3c08:	df 92       	push	r13
    3c0a:	ef 92       	push	r14
    3c0c:	ff 92       	push	r15
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
    3c16:	8b 01       	movw	r16, r22
    3c18:	ea 01       	movw	r28, r20
    3c1a:	61 15       	cp	r22, r1
    3c1c:	71 05       	cpc	r23, r1
    3c1e:	21 f0       	breq	.+8      	; 0x3c28 <strtol+0x34>
    3c20:	db 01       	movw	r26, r22
    3c22:	8c 93       	st	X, r24
    3c24:	11 96       	adiw	r26, 0x01	; 1
    3c26:	9c 93       	st	X, r25
    3c28:	20 97       	sbiw	r28, 0x00	; 0
    3c2a:	39 f0       	breq	.+14     	; 0x3c3a <strtol+0x46>
    3c2c:	9e 01       	movw	r18, r28
    3c2e:	22 50       	subi	r18, 0x02	; 2
    3c30:	31 09       	sbc	r19, r1
    3c32:	23 32       	cpi	r18, 0x23	; 35
    3c34:	31 05       	cpc	r19, r1
    3c36:	08 f0       	brcs	.+2      	; 0x3c3a <strtol+0x46>
    3c38:	fb c0       	rjmp	.+502    	; 0x3e30 <strtol+0x23c>
    3c3a:	7c 01       	movw	r14, r24
    3c3c:	67 01       	movw	r12, r14
    3c3e:	bf ef       	ldi	r27, 0xFF	; 255
    3c40:	cb 1a       	sub	r12, r27
    3c42:	db 0a       	sbc	r13, r27
    3c44:	56 01       	movw	r10, r12
    3c46:	f7 01       	movw	r30, r14
    3c48:	60 80       	ld	r6, Z
    3c4a:	86 2d       	mov	r24, r6
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <isspace>
    3c52:	89 2b       	or	r24, r25
    3c54:	11 f0       	breq	.+4      	; 0x3c5a <strtol+0x66>
    3c56:	76 01       	movw	r14, r12
    3c58:	f1 cf       	rjmp	.-30     	; 0x3c3c <strtol+0x48>
    3c5a:	fd e2       	ldi	r31, 0x2D	; 45
    3c5c:	6f 12       	cpse	r6, r31
    3c5e:	0a c0       	rjmp	.+20     	; 0x3c74 <strtol+0x80>
    3c60:	57 01       	movw	r10, r14
    3c62:	82 e0       	ldi	r24, 0x02	; 2
    3c64:	a8 0e       	add	r10, r24
    3c66:	b1 1c       	adc	r11, r1
    3c68:	d7 01       	movw	r26, r14
    3c6a:	11 96       	adiw	r26, 0x01	; 1
    3c6c:	6c 90       	ld	r6, X
    3c6e:	77 24       	eor	r7, r7
    3c70:	73 94       	inc	r7
    3c72:	0b c0       	rjmp	.+22     	; 0x3c8a <strtol+0x96>
    3c74:	bb e2       	ldi	r27, 0x2B	; 43
    3c76:	6b 12       	cpse	r6, r27
    3c78:	07 c0       	rjmp	.+14     	; 0x3c88 <strtol+0x94>
    3c7a:	57 01       	movw	r10, r14
    3c7c:	e2 e0       	ldi	r30, 0x02	; 2
    3c7e:	ae 0e       	add	r10, r30
    3c80:	b1 1c       	adc	r11, r1
    3c82:	d7 01       	movw	r26, r14
    3c84:	11 96       	adiw	r26, 0x01	; 1
    3c86:	6c 90       	ld	r6, X
    3c88:	71 2c       	mov	r7, r1
    3c8a:	ce 01       	movw	r24, r28
    3c8c:	8f 7e       	andi	r24, 0xEF	; 239
    3c8e:	89 2b       	or	r24, r25
    3c90:	89 f4       	brne	.+34     	; 0x3cb4 <strtol+0xc0>
    3c92:	b0 e3       	ldi	r27, 0x30	; 48
    3c94:	6b 12       	cpse	r6, r27
    3c96:	22 c0       	rjmp	.+68     	; 0x3cdc <strtol+0xe8>
    3c98:	f5 01       	movw	r30, r10
    3c9a:	80 81       	ld	r24, Z
    3c9c:	8f 7d       	andi	r24, 0xDF	; 223
    3c9e:	88 35       	cpi	r24, 0x58	; 88
    3ca0:	41 f5       	brne	.+80     	; 0x3cf2 <strtol+0xfe>
    3ca2:	61 80       	ldd	r6, Z+1	; 0x01
    3ca4:	f2 e0       	ldi	r31, 0x02	; 2
    3ca6:	af 0e       	add	r10, r31
    3ca8:	b1 1c       	adc	r11, r1
    3caa:	87 2d       	mov	r24, r7
    3cac:	82 60       	ori	r24, 0x02	; 2
    3cae:	78 2e       	mov	r7, r24
    3cb0:	c0 e1       	ldi	r28, 0x10	; 16
    3cb2:	d0 e0       	ldi	r29, 0x00	; 0
    3cb4:	c8 30       	cpi	r28, 0x08	; 8
    3cb6:	d1 05       	cpc	r29, r1
    3cb8:	f1 f0       	breq	.+60     	; 0x3cf6 <strtol+0x102>
    3cba:	4c f4       	brge	.+18     	; 0x3cce <strtol+0xda>
    3cbc:	c2 30       	cpi	r28, 0x02	; 2
    3cbe:	d1 05       	cpc	r29, r1
    3cc0:	11 f5       	brne	.+68     	; 0x3d06 <strtol+0x112>
    3cc2:	c1 2c       	mov	r12, r1
    3cc4:	d1 2c       	mov	r13, r1
    3cc6:	e1 2c       	mov	r14, r1
    3cc8:	b0 e4       	ldi	r27, 0x40	; 64
    3cca:	fb 2e       	mov	r15, r27
    3ccc:	2f c0       	rjmp	.+94     	; 0x3d2c <strtol+0x138>
    3cce:	ca 30       	cpi	r28, 0x0A	; 10
    3cd0:	d1 05       	cpc	r29, r1
    3cd2:	31 f0       	breq	.+12     	; 0x3ce0 <strtol+0xec>
    3cd4:	c0 31       	cpi	r28, 0x10	; 16
    3cd6:	d1 05       	cpc	r29, r1
    3cd8:	21 f1       	breq	.+72     	; 0x3d22 <strtol+0x12e>
    3cda:	15 c0       	rjmp	.+42     	; 0x3d06 <strtol+0x112>
    3cdc:	20 97       	sbiw	r28, 0x00	; 0
    3cde:	51 f7       	brne	.-44     	; 0x3cb4 <strtol+0xc0>
    3ce0:	ca e0       	ldi	r28, 0x0A	; 10
    3ce2:	d0 e0       	ldi	r29, 0x00	; 0
    3ce4:	ac ec       	ldi	r26, 0xCC	; 204
    3ce6:	ca 2e       	mov	r12, r26
    3ce8:	dc 2c       	mov	r13, r12
    3cea:	ec 2c       	mov	r14, r12
    3cec:	ac e0       	ldi	r26, 0x0C	; 12
    3cee:	fa 2e       	mov	r15, r26
    3cf0:	1d c0       	rjmp	.+58     	; 0x3d2c <strtol+0x138>
    3cf2:	20 97       	sbiw	r28, 0x00	; 0
    3cf4:	f9 f6       	brne	.-66     	; 0x3cb4 <strtol+0xc0>
    3cf6:	c8 e0       	ldi	r28, 0x08	; 8
    3cf8:	d0 e0       	ldi	r29, 0x00	; 0
    3cfa:	c1 2c       	mov	r12, r1
    3cfc:	d1 2c       	mov	r13, r1
    3cfe:	e1 2c       	mov	r14, r1
    3d00:	f0 e1       	ldi	r31, 0x10	; 16
    3d02:	ff 2e       	mov	r15, r31
    3d04:	13 c0       	rjmp	.+38     	; 0x3d2c <strtol+0x138>
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	70 e0       	ldi	r23, 0x00	; 0
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e8       	ldi	r25, 0x80	; 128
    3d0e:	9e 01       	movw	r18, r28
    3d10:	44 27       	eor	r20, r20
    3d12:	37 fd       	sbrc	r19, 7
    3d14:	40 95       	com	r20
    3d16:	54 2f       	mov	r21, r20
    3d18:	0e 94 0b 22 	call	0x4416	; 0x4416 <__udivmodsi4>
    3d1c:	69 01       	movw	r12, r18
    3d1e:	7a 01       	movw	r14, r20
    3d20:	05 c0       	rjmp	.+10     	; 0x3d2c <strtol+0x138>
    3d22:	c1 2c       	mov	r12, r1
    3d24:	d1 2c       	mov	r13, r1
    3d26:	e1 2c       	mov	r14, r1
    3d28:	e8 e0       	ldi	r30, 0x08	; 8
    3d2a:	fe 2e       	mov	r15, r30
    3d2c:	f5 01       	movw	r30, r10
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	a9 01       	movw	r20, r18
    3d36:	4e 01       	movw	r8, r28
    3d38:	aa 24       	eor	r10, r10
    3d3a:	97 fc       	sbrc	r9, 7
    3d3c:	a0 94       	com	r10
    3d3e:	ba 2c       	mov	r11, r10
    3d40:	1f 01       	movw	r2, r30
    3d42:	70 ed       	ldi	r23, 0xD0	; 208
    3d44:	57 2e       	mov	r5, r23
    3d46:	56 0c       	add	r5, r6
    3d48:	a9 e0       	ldi	r26, 0x09	; 9
    3d4a:	a5 15       	cp	r26, r5
    3d4c:	70 f4       	brcc	.+28     	; 0x3d6a <strtol+0x176>
    3d4e:	8f eb       	ldi	r24, 0xBF	; 191
    3d50:	86 0d       	add	r24, r6
    3d52:	8a 31       	cpi	r24, 0x1A	; 26
    3d54:	18 f4       	brcc	.+6      	; 0x3d5c <strtol+0x168>
    3d56:	99 ec       	ldi	r25, 0xC9	; 201
    3d58:	59 2e       	mov	r5, r25
    3d5a:	06 c0       	rjmp	.+12     	; 0x3d68 <strtol+0x174>
    3d5c:	8f e9       	ldi	r24, 0x9F	; 159
    3d5e:	86 0d       	add	r24, r6
    3d60:	8a 31       	cpi	r24, 0x1A	; 26
    3d62:	30 f5       	brcc	.+76     	; 0x3db0 <strtol+0x1bc>
    3d64:	89 ea       	ldi	r24, 0xA9	; 169
    3d66:	58 2e       	mov	r5, r24
    3d68:	56 0c       	add	r5, r6
    3d6a:	85 2d       	mov	r24, r5
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	8c 17       	cp	r24, r28
    3d70:	9d 07       	cpc	r25, r29
    3d72:	f4 f4       	brge	.+60     	; 0x3db0 <strtol+0x1bc>
    3d74:	67 fd       	sbrc	r22, 7
    3d76:	18 c0       	rjmp	.+48     	; 0x3da8 <strtol+0x1b4>
    3d78:	c2 16       	cp	r12, r18
    3d7a:	d3 06       	cpc	r13, r19
    3d7c:	e4 06       	cpc	r14, r20
    3d7e:	f5 06       	cpc	r15, r21
    3d80:	80 f0       	brcs	.+32     	; 0x3da2 <strtol+0x1ae>
    3d82:	c5 01       	movw	r24, r10
    3d84:	b4 01       	movw	r22, r8
    3d86:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__mulsi3>
    3d8a:	9b 01       	movw	r18, r22
    3d8c:	ac 01       	movw	r20, r24
    3d8e:	25 0d       	add	r18, r5
    3d90:	31 1d       	adc	r19, r1
    3d92:	41 1d       	adc	r20, r1
    3d94:	51 1d       	adc	r21, r1
    3d96:	21 30       	cpi	r18, 0x01	; 1
    3d98:	31 05       	cpc	r19, r1
    3d9a:	41 05       	cpc	r20, r1
    3d9c:	b0 e8       	ldi	r27, 0x80	; 128
    3d9e:	5b 07       	cpc	r21, r27
    3da0:	10 f0       	brcs	.+4      	; 0x3da6 <strtol+0x1b2>
    3da2:	6f ef       	ldi	r22, 0xFF	; 255
    3da4:	01 c0       	rjmp	.+2      	; 0x3da8 <strtol+0x1b4>
    3da6:	61 e0       	ldi	r22, 0x01	; 1
    3da8:	31 96       	adiw	r30, 0x01	; 1
    3daa:	d1 01       	movw	r26, r2
    3dac:	6c 90       	ld	r6, X
    3dae:	c8 cf       	rjmp	.-112    	; 0x3d40 <strtol+0x14c>
    3db0:	87 2d       	mov	r24, r7
    3db2:	81 70       	andi	r24, 0x01	; 1
    3db4:	01 15       	cp	r16, r1
    3db6:	11 05       	cpc	r17, r1
    3db8:	71 f0       	breq	.+28     	; 0x3dd6 <strtol+0x1e2>
    3dba:	66 23       	and	r22, r22
    3dbc:	29 f0       	breq	.+10     	; 0x3dc8 <strtol+0x1d4>
    3dbe:	31 97       	sbiw	r30, 0x01	; 1
    3dc0:	d8 01       	movw	r26, r16
    3dc2:	ed 93       	st	X+, r30
    3dc4:	fc 93       	st	X, r31
    3dc6:	07 c0       	rjmp	.+14     	; 0x3dd6 <strtol+0x1e2>
    3dc8:	71 fe       	sbrs	r7, 1
    3dca:	19 c0       	rjmp	.+50     	; 0x3dfe <strtol+0x20a>
    3dcc:	32 97       	sbiw	r30, 0x02	; 2
    3dce:	d8 01       	movw	r26, r16
    3dd0:	ed 93       	st	X+, r30
    3dd2:	fc 93       	st	X, r31
    3dd4:	14 c0       	rjmp	.+40     	; 0x3dfe <strtol+0x20a>
    3dd6:	67 ff       	sbrs	r22, 7
    3dd8:	12 c0       	rjmp	.+36     	; 0x3dfe <strtol+0x20a>
    3dda:	88 23       	and	r24, r24
    3ddc:	29 f0       	breq	.+10     	; 0x3de8 <strtol+0x1f4>
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	40 e0       	ldi	r20, 0x00	; 0
    3de4:	50 e8       	ldi	r21, 0x80	; 128
    3de6:	04 c0       	rjmp	.+8      	; 0x3df0 <strtol+0x1fc>
    3de8:	2f ef       	ldi	r18, 0xFF	; 255
    3dea:	3f ef       	ldi	r19, 0xFF	; 255
    3dec:	4f ef       	ldi	r20, 0xFF	; 255
    3dee:	5f e7       	ldi	r21, 0x7F	; 127
    3df0:	82 e2       	ldi	r24, 0x22	; 34
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	90 93 0f 01 	sts	0x010F, r25
    3df8:	80 93 0e 01 	sts	0x010E, r24
    3dfc:	16 c0       	rjmp	.+44     	; 0x3e2a <strtol+0x236>
    3dfe:	88 23       	and	r24, r24
    3e00:	41 f0       	breq	.+16     	; 0x3e12 <strtol+0x21e>
    3e02:	50 95       	com	r21
    3e04:	40 95       	com	r20
    3e06:	30 95       	com	r19
    3e08:	21 95       	neg	r18
    3e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0c:	4f 4f       	sbci	r20, 0xFF	; 255
    3e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e10:	0c c0       	rjmp	.+24     	; 0x3e2a <strtol+0x236>
    3e12:	57 ff       	sbrs	r21, 7
    3e14:	0a c0       	rjmp	.+20     	; 0x3e2a <strtol+0x236>
    3e16:	82 e2       	ldi	r24, 0x22	; 34
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	90 93 0f 01 	sts	0x010F, r25
    3e1e:	80 93 0e 01 	sts	0x010E, r24
    3e22:	2f ef       	ldi	r18, 0xFF	; 255
    3e24:	3f ef       	ldi	r19, 0xFF	; 255
    3e26:	4f ef       	ldi	r20, 0xFF	; 255
    3e28:	5f e7       	ldi	r21, 0x7F	; 127
    3e2a:	b9 01       	movw	r22, r18
    3e2c:	ca 01       	movw	r24, r20
    3e2e:	04 c0       	rjmp	.+8      	; 0x3e38 <strtol+0x244>
    3e30:	60 e0       	ldi	r22, 0x00	; 0
    3e32:	70 e0       	ldi	r23, 0x00	; 0
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	1f 91       	pop	r17
    3e3e:	0f 91       	pop	r16
    3e40:	ff 90       	pop	r15
    3e42:	ef 90       	pop	r14
    3e44:	df 90       	pop	r13
    3e46:	cf 90       	pop	r12
    3e48:	bf 90       	pop	r11
    3e4a:	af 90       	pop	r10
    3e4c:	9f 90       	pop	r9
    3e4e:	8f 90       	pop	r8
    3e50:	7f 90       	pop	r7
    3e52:	6f 90       	pop	r6
    3e54:	5f 90       	pop	r5
    3e56:	3f 90       	pop	r3
    3e58:	2f 90       	pop	r2
    3e5a:	08 95       	ret

00003e5c <isspace>:
    3e5c:	91 11       	cpse	r25, r1
    3e5e:	05 c2       	rjmp	.+1034   	; 0x426a <__ctype_isfalse>
    3e60:	80 32       	cpi	r24, 0x20	; 32
    3e62:	19 f0       	breq	.+6      	; 0x3e6a <isspace+0xe>
    3e64:	89 50       	subi	r24, 0x09	; 9
    3e66:	85 50       	subi	r24, 0x05	; 5
    3e68:	d0 f7       	brcc	.-12     	; 0x3e5e <isspace+0x2>
    3e6a:	08 95       	ret

00003e6c <sprintf>:
    3e6c:	ae e0       	ldi	r26, 0x0E	; 14
    3e6e:	b0 e0       	ldi	r27, 0x00	; 0
    3e70:	ec e3       	ldi	r30, 0x3C	; 60
    3e72:	ff e1       	ldi	r31, 0x1F	; 31
    3e74:	0c 94 6d 22 	jmp	0x44da	; 0x44da <__prologue_saves__+0x1c>
    3e78:	0d 89       	ldd	r16, Y+21	; 0x15
    3e7a:	1e 89       	ldd	r17, Y+22	; 0x16
    3e7c:	86 e0       	ldi	r24, 0x06	; 6
    3e7e:	8c 83       	std	Y+4, r24	; 0x04
    3e80:	1a 83       	std	Y+2, r17	; 0x02
    3e82:	09 83       	std	Y+1, r16	; 0x01
    3e84:	8f ef       	ldi	r24, 0xFF	; 255
    3e86:	9f e7       	ldi	r25, 0x7F	; 127
    3e88:	9e 83       	std	Y+6, r25	; 0x06
    3e8a:	8d 83       	std	Y+5, r24	; 0x05
    3e8c:	ae 01       	movw	r20, r28
    3e8e:	47 5e       	subi	r20, 0xE7	; 231
    3e90:	5f 4f       	sbci	r21, 0xFF	; 255
    3e92:	6f 89       	ldd	r22, Y+23	; 0x17
    3e94:	78 8d       	ldd	r23, Y+24	; 0x18
    3e96:	ce 01       	movw	r24, r28
    3e98:	01 96       	adiw	r24, 0x01	; 1
    3e9a:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <vfprintf>
    3e9e:	ef 81       	ldd	r30, Y+7	; 0x07
    3ea0:	f8 85       	ldd	r31, Y+8	; 0x08
    3ea2:	e0 0f       	add	r30, r16
    3ea4:	f1 1f       	adc	r31, r17
    3ea6:	10 82       	st	Z, r1
    3ea8:	2e 96       	adiw	r28, 0x0e	; 14
    3eaa:	e4 e0       	ldi	r30, 0x04	; 4
    3eac:	0c 94 89 22 	jmp	0x4512	; 0x4512 <__epilogue_restores__+0x1c>

00003eb0 <vfprintf>:
    3eb0:	ac e0       	ldi	r26, 0x0C	; 12
    3eb2:	b0 e0       	ldi	r27, 0x00	; 0
    3eb4:	ee e5       	ldi	r30, 0x5E	; 94
    3eb6:	ff e1       	ldi	r31, 0x1F	; 31
    3eb8:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__prologue_saves__>
    3ebc:	7c 01       	movw	r14, r24
    3ebe:	6b 01       	movw	r12, r22
    3ec0:	8a 01       	movw	r16, r20
    3ec2:	fc 01       	movw	r30, r24
    3ec4:	17 82       	std	Z+7, r1	; 0x07
    3ec6:	16 82       	std	Z+6, r1	; 0x06
    3ec8:	83 81       	ldd	r24, Z+3	; 0x03
    3eca:	81 ff       	sbrs	r24, 1
    3ecc:	bd c1       	rjmp	.+890    	; 0x4248 <vfprintf+0x398>
    3ece:	ce 01       	movw	r24, r28
    3ed0:	01 96       	adiw	r24, 0x01	; 1
    3ed2:	4c 01       	movw	r8, r24
    3ed4:	f7 01       	movw	r30, r14
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	f6 01       	movw	r30, r12
    3eda:	93 fd       	sbrc	r25, 3
    3edc:	85 91       	lpm	r24, Z+
    3ede:	93 ff       	sbrs	r25, 3
    3ee0:	81 91       	ld	r24, Z+
    3ee2:	6f 01       	movw	r12, r30
    3ee4:	88 23       	and	r24, r24
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <vfprintf+0x3a>
    3ee8:	ab c1       	rjmp	.+854    	; 0x4240 <vfprintf+0x390>
    3eea:	85 32       	cpi	r24, 0x25	; 37
    3eec:	39 f4       	brne	.+14     	; 0x3efc <vfprintf+0x4c>
    3eee:	93 fd       	sbrc	r25, 3
    3ef0:	85 91       	lpm	r24, Z+
    3ef2:	93 ff       	sbrs	r25, 3
    3ef4:	81 91       	ld	r24, Z+
    3ef6:	6f 01       	movw	r12, r30
    3ef8:	85 32       	cpi	r24, 0x25	; 37
    3efa:	29 f4       	brne	.+10     	; 0x3f06 <vfprintf+0x56>
    3efc:	b7 01       	movw	r22, r14
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	0e 94 4e 21 	call	0x429c	; 0x429c <fputc>
    3f04:	e7 cf       	rjmp	.-50     	; 0x3ed4 <vfprintf+0x24>
    3f06:	51 2c       	mov	r5, r1
    3f08:	31 2c       	mov	r3, r1
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	20 32       	cpi	r18, 0x20	; 32
    3f0e:	a0 f4       	brcc	.+40     	; 0x3f38 <vfprintf+0x88>
    3f10:	8b 32       	cpi	r24, 0x2B	; 43
    3f12:	69 f0       	breq	.+26     	; 0x3f2e <vfprintf+0x7e>
    3f14:	30 f4       	brcc	.+12     	; 0x3f22 <vfprintf+0x72>
    3f16:	80 32       	cpi	r24, 0x20	; 32
    3f18:	59 f0       	breq	.+22     	; 0x3f30 <vfprintf+0x80>
    3f1a:	83 32       	cpi	r24, 0x23	; 35
    3f1c:	69 f4       	brne	.+26     	; 0x3f38 <vfprintf+0x88>
    3f1e:	20 61       	ori	r18, 0x10	; 16
    3f20:	2c c0       	rjmp	.+88     	; 0x3f7a <vfprintf+0xca>
    3f22:	8d 32       	cpi	r24, 0x2D	; 45
    3f24:	39 f0       	breq	.+14     	; 0x3f34 <vfprintf+0x84>
    3f26:	80 33       	cpi	r24, 0x30	; 48
    3f28:	39 f4       	brne	.+14     	; 0x3f38 <vfprintf+0x88>
    3f2a:	21 60       	ori	r18, 0x01	; 1
    3f2c:	26 c0       	rjmp	.+76     	; 0x3f7a <vfprintf+0xca>
    3f2e:	22 60       	ori	r18, 0x02	; 2
    3f30:	24 60       	ori	r18, 0x04	; 4
    3f32:	23 c0       	rjmp	.+70     	; 0x3f7a <vfprintf+0xca>
    3f34:	28 60       	ori	r18, 0x08	; 8
    3f36:	21 c0       	rjmp	.+66     	; 0x3f7a <vfprintf+0xca>
    3f38:	27 fd       	sbrc	r18, 7
    3f3a:	27 c0       	rjmp	.+78     	; 0x3f8a <vfprintf+0xda>
    3f3c:	30 ed       	ldi	r19, 0xD0	; 208
    3f3e:	38 0f       	add	r19, r24
    3f40:	3a 30       	cpi	r19, 0x0A	; 10
    3f42:	78 f4       	brcc	.+30     	; 0x3f62 <vfprintf+0xb2>
    3f44:	26 ff       	sbrs	r18, 6
    3f46:	06 c0       	rjmp	.+12     	; 0x3f54 <vfprintf+0xa4>
    3f48:	fa e0       	ldi	r31, 0x0A	; 10
    3f4a:	5f 9e       	mul	r5, r31
    3f4c:	30 0d       	add	r19, r0
    3f4e:	11 24       	eor	r1, r1
    3f50:	53 2e       	mov	r5, r19
    3f52:	13 c0       	rjmp	.+38     	; 0x3f7a <vfprintf+0xca>
    3f54:	8a e0       	ldi	r24, 0x0A	; 10
    3f56:	38 9e       	mul	r3, r24
    3f58:	30 0d       	add	r19, r0
    3f5a:	11 24       	eor	r1, r1
    3f5c:	33 2e       	mov	r3, r19
    3f5e:	20 62       	ori	r18, 0x20	; 32
    3f60:	0c c0       	rjmp	.+24     	; 0x3f7a <vfprintf+0xca>
    3f62:	8e 32       	cpi	r24, 0x2E	; 46
    3f64:	21 f4       	brne	.+8      	; 0x3f6e <vfprintf+0xbe>
    3f66:	26 fd       	sbrc	r18, 6
    3f68:	6b c1       	rjmp	.+726    	; 0x4240 <vfprintf+0x390>
    3f6a:	20 64       	ori	r18, 0x40	; 64
    3f6c:	06 c0       	rjmp	.+12     	; 0x3f7a <vfprintf+0xca>
    3f6e:	8c 36       	cpi	r24, 0x6C	; 108
    3f70:	11 f4       	brne	.+4      	; 0x3f76 <vfprintf+0xc6>
    3f72:	20 68       	ori	r18, 0x80	; 128
    3f74:	02 c0       	rjmp	.+4      	; 0x3f7a <vfprintf+0xca>
    3f76:	88 36       	cpi	r24, 0x68	; 104
    3f78:	41 f4       	brne	.+16     	; 0x3f8a <vfprintf+0xda>
    3f7a:	f6 01       	movw	r30, r12
    3f7c:	93 fd       	sbrc	r25, 3
    3f7e:	85 91       	lpm	r24, Z+
    3f80:	93 ff       	sbrs	r25, 3
    3f82:	81 91       	ld	r24, Z+
    3f84:	6f 01       	movw	r12, r30
    3f86:	81 11       	cpse	r24, r1
    3f88:	c1 cf       	rjmp	.-126    	; 0x3f0c <vfprintf+0x5c>
    3f8a:	98 2f       	mov	r25, r24
    3f8c:	9f 7d       	andi	r25, 0xDF	; 223
    3f8e:	95 54       	subi	r25, 0x45	; 69
    3f90:	93 30       	cpi	r25, 0x03	; 3
    3f92:	28 f4       	brcc	.+10     	; 0x3f9e <vfprintf+0xee>
    3f94:	0c 5f       	subi	r16, 0xFC	; 252
    3f96:	1f 4f       	sbci	r17, 0xFF	; 255
    3f98:	ff e3       	ldi	r31, 0x3F	; 63
    3f9a:	f9 83       	std	Y+1, r31	; 0x01
    3f9c:	0d c0       	rjmp	.+26     	; 0x3fb8 <vfprintf+0x108>
    3f9e:	83 36       	cpi	r24, 0x63	; 99
    3fa0:	31 f0       	breq	.+12     	; 0x3fae <vfprintf+0xfe>
    3fa2:	83 37       	cpi	r24, 0x73	; 115
    3fa4:	71 f0       	breq	.+28     	; 0x3fc2 <vfprintf+0x112>
    3fa6:	83 35       	cpi	r24, 0x53	; 83
    3fa8:	09 f0       	breq	.+2      	; 0x3fac <vfprintf+0xfc>
    3faa:	5b c0       	rjmp	.+182    	; 0x4062 <vfprintf+0x1b2>
    3fac:	22 c0       	rjmp	.+68     	; 0x3ff2 <vfprintf+0x142>
    3fae:	f8 01       	movw	r30, r16
    3fb0:	80 81       	ld	r24, Z
    3fb2:	89 83       	std	Y+1, r24	; 0x01
    3fb4:	0e 5f       	subi	r16, 0xFE	; 254
    3fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb8:	44 24       	eor	r4, r4
    3fba:	43 94       	inc	r4
    3fbc:	51 2c       	mov	r5, r1
    3fbe:	54 01       	movw	r10, r8
    3fc0:	15 c0       	rjmp	.+42     	; 0x3fec <vfprintf+0x13c>
    3fc2:	38 01       	movw	r6, r16
    3fc4:	f2 e0       	ldi	r31, 0x02	; 2
    3fc6:	6f 0e       	add	r6, r31
    3fc8:	71 1c       	adc	r7, r1
    3fca:	f8 01       	movw	r30, r16
    3fcc:	a0 80       	ld	r10, Z
    3fce:	b1 80       	ldd	r11, Z+1	; 0x01
    3fd0:	26 ff       	sbrs	r18, 6
    3fd2:	03 c0       	rjmp	.+6      	; 0x3fda <vfprintf+0x12a>
    3fd4:	65 2d       	mov	r22, r5
    3fd6:	70 e0       	ldi	r23, 0x00	; 0
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <vfprintf+0x12e>
    3fda:	6f ef       	ldi	r22, 0xFF	; 255
    3fdc:	7f ef       	ldi	r23, 0xFF	; 255
    3fde:	c5 01       	movw	r24, r10
    3fe0:	2c 87       	std	Y+12, r18	; 0x0c
    3fe2:	0e 94 43 21 	call	0x4286	; 0x4286 <strnlen>
    3fe6:	2c 01       	movw	r4, r24
    3fe8:	83 01       	movw	r16, r6
    3fea:	2c 85       	ldd	r18, Y+12	; 0x0c
    3fec:	2f 77       	andi	r18, 0x7F	; 127
    3fee:	22 2e       	mov	r2, r18
    3ff0:	17 c0       	rjmp	.+46     	; 0x4020 <vfprintf+0x170>
    3ff2:	38 01       	movw	r6, r16
    3ff4:	f2 e0       	ldi	r31, 0x02	; 2
    3ff6:	6f 0e       	add	r6, r31
    3ff8:	71 1c       	adc	r7, r1
    3ffa:	f8 01       	movw	r30, r16
    3ffc:	a0 80       	ld	r10, Z
    3ffe:	b1 80       	ldd	r11, Z+1	; 0x01
    4000:	26 ff       	sbrs	r18, 6
    4002:	03 c0       	rjmp	.+6      	; 0x400a <vfprintf+0x15a>
    4004:	65 2d       	mov	r22, r5
    4006:	70 e0       	ldi	r23, 0x00	; 0
    4008:	02 c0       	rjmp	.+4      	; 0x400e <vfprintf+0x15e>
    400a:	6f ef       	ldi	r22, 0xFF	; 255
    400c:	7f ef       	ldi	r23, 0xFF	; 255
    400e:	c5 01       	movw	r24, r10
    4010:	2c 87       	std	Y+12, r18	; 0x0c
    4012:	0e 94 38 21 	call	0x4270	; 0x4270 <strnlen_P>
    4016:	2c 01       	movw	r4, r24
    4018:	2c 85       	ldd	r18, Y+12	; 0x0c
    401a:	20 68       	ori	r18, 0x80	; 128
    401c:	22 2e       	mov	r2, r18
    401e:	83 01       	movw	r16, r6
    4020:	23 fc       	sbrc	r2, 3
    4022:	1b c0       	rjmp	.+54     	; 0x405a <vfprintf+0x1aa>
    4024:	83 2d       	mov	r24, r3
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	48 16       	cp	r4, r24
    402a:	59 06       	cpc	r5, r25
    402c:	b0 f4       	brcc	.+44     	; 0x405a <vfprintf+0x1aa>
    402e:	b7 01       	movw	r22, r14
    4030:	80 e2       	ldi	r24, 0x20	; 32
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	0e 94 4e 21 	call	0x429c	; 0x429c <fputc>
    4038:	3a 94       	dec	r3
    403a:	f4 cf       	rjmp	.-24     	; 0x4024 <vfprintf+0x174>
    403c:	f5 01       	movw	r30, r10
    403e:	27 fc       	sbrc	r2, 7
    4040:	85 91       	lpm	r24, Z+
    4042:	27 fe       	sbrs	r2, 7
    4044:	81 91       	ld	r24, Z+
    4046:	5f 01       	movw	r10, r30
    4048:	b7 01       	movw	r22, r14
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	0e 94 4e 21 	call	0x429c	; 0x429c <fputc>
    4050:	31 10       	cpse	r3, r1
    4052:	3a 94       	dec	r3
    4054:	f1 e0       	ldi	r31, 0x01	; 1
    4056:	4f 1a       	sub	r4, r31
    4058:	51 08       	sbc	r5, r1
    405a:	41 14       	cp	r4, r1
    405c:	51 04       	cpc	r5, r1
    405e:	71 f7       	brne	.-36     	; 0x403c <vfprintf+0x18c>
    4060:	e5 c0       	rjmp	.+458    	; 0x422c <vfprintf+0x37c>
    4062:	84 36       	cpi	r24, 0x64	; 100
    4064:	11 f0       	breq	.+4      	; 0x406a <vfprintf+0x1ba>
    4066:	89 36       	cpi	r24, 0x69	; 105
    4068:	39 f5       	brne	.+78     	; 0x40b8 <vfprintf+0x208>
    406a:	f8 01       	movw	r30, r16
    406c:	27 ff       	sbrs	r18, 7
    406e:	07 c0       	rjmp	.+14     	; 0x407e <vfprintf+0x1ce>
    4070:	60 81       	ld	r22, Z
    4072:	71 81       	ldd	r23, Z+1	; 0x01
    4074:	82 81       	ldd	r24, Z+2	; 0x02
    4076:	93 81       	ldd	r25, Z+3	; 0x03
    4078:	0c 5f       	subi	r16, 0xFC	; 252
    407a:	1f 4f       	sbci	r17, 0xFF	; 255
    407c:	08 c0       	rjmp	.+16     	; 0x408e <vfprintf+0x1de>
    407e:	60 81       	ld	r22, Z
    4080:	71 81       	ldd	r23, Z+1	; 0x01
    4082:	88 27       	eor	r24, r24
    4084:	77 fd       	sbrc	r23, 7
    4086:	80 95       	com	r24
    4088:	98 2f       	mov	r25, r24
    408a:	0e 5f       	subi	r16, 0xFE	; 254
    408c:	1f 4f       	sbci	r17, 0xFF	; 255
    408e:	2f 76       	andi	r18, 0x6F	; 111
    4090:	b2 2e       	mov	r11, r18
    4092:	97 ff       	sbrs	r25, 7
    4094:	09 c0       	rjmp	.+18     	; 0x40a8 <vfprintf+0x1f8>
    4096:	90 95       	com	r25
    4098:	80 95       	com	r24
    409a:	70 95       	com	r23
    409c:	61 95       	neg	r22
    409e:	7f 4f       	sbci	r23, 0xFF	; 255
    40a0:	8f 4f       	sbci	r24, 0xFF	; 255
    40a2:	9f 4f       	sbci	r25, 0xFF	; 255
    40a4:	20 68       	ori	r18, 0x80	; 128
    40a6:	b2 2e       	mov	r11, r18
    40a8:	2a e0       	ldi	r18, 0x0A	; 10
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	a4 01       	movw	r20, r8
    40ae:	0e 94 80 21 	call	0x4300	; 0x4300 <__ultoa_invert>
    40b2:	a8 2e       	mov	r10, r24
    40b4:	a8 18       	sub	r10, r8
    40b6:	44 c0       	rjmp	.+136    	; 0x4140 <vfprintf+0x290>
    40b8:	85 37       	cpi	r24, 0x75	; 117
    40ba:	29 f4       	brne	.+10     	; 0x40c6 <vfprintf+0x216>
    40bc:	2f 7e       	andi	r18, 0xEF	; 239
    40be:	b2 2e       	mov	r11, r18
    40c0:	2a e0       	ldi	r18, 0x0A	; 10
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	25 c0       	rjmp	.+74     	; 0x4110 <vfprintf+0x260>
    40c6:	f2 2f       	mov	r31, r18
    40c8:	f9 7f       	andi	r31, 0xF9	; 249
    40ca:	bf 2e       	mov	r11, r31
    40cc:	8f 36       	cpi	r24, 0x6F	; 111
    40ce:	c1 f0       	breq	.+48     	; 0x4100 <vfprintf+0x250>
    40d0:	18 f4       	brcc	.+6      	; 0x40d8 <vfprintf+0x228>
    40d2:	88 35       	cpi	r24, 0x58	; 88
    40d4:	79 f0       	breq	.+30     	; 0x40f4 <vfprintf+0x244>
    40d6:	b4 c0       	rjmp	.+360    	; 0x4240 <vfprintf+0x390>
    40d8:	80 37       	cpi	r24, 0x70	; 112
    40da:	19 f0       	breq	.+6      	; 0x40e2 <vfprintf+0x232>
    40dc:	88 37       	cpi	r24, 0x78	; 120
    40de:	21 f0       	breq	.+8      	; 0x40e8 <vfprintf+0x238>
    40e0:	af c0       	rjmp	.+350    	; 0x4240 <vfprintf+0x390>
    40e2:	2f 2f       	mov	r18, r31
    40e4:	20 61       	ori	r18, 0x10	; 16
    40e6:	b2 2e       	mov	r11, r18
    40e8:	b4 fe       	sbrs	r11, 4
    40ea:	0d c0       	rjmp	.+26     	; 0x4106 <vfprintf+0x256>
    40ec:	8b 2d       	mov	r24, r11
    40ee:	84 60       	ori	r24, 0x04	; 4
    40f0:	b8 2e       	mov	r11, r24
    40f2:	09 c0       	rjmp	.+18     	; 0x4106 <vfprintf+0x256>
    40f4:	24 ff       	sbrs	r18, 4
    40f6:	0a c0       	rjmp	.+20     	; 0x410c <vfprintf+0x25c>
    40f8:	9f 2f       	mov	r25, r31
    40fa:	96 60       	ori	r25, 0x06	; 6
    40fc:	b9 2e       	mov	r11, r25
    40fe:	06 c0       	rjmp	.+12     	; 0x410c <vfprintf+0x25c>
    4100:	28 e0       	ldi	r18, 0x08	; 8
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	05 c0       	rjmp	.+10     	; 0x4110 <vfprintf+0x260>
    4106:	20 e1       	ldi	r18, 0x10	; 16
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	02 c0       	rjmp	.+4      	; 0x4110 <vfprintf+0x260>
    410c:	20 e1       	ldi	r18, 0x10	; 16
    410e:	32 e0       	ldi	r19, 0x02	; 2
    4110:	f8 01       	movw	r30, r16
    4112:	b7 fe       	sbrs	r11, 7
    4114:	07 c0       	rjmp	.+14     	; 0x4124 <vfprintf+0x274>
    4116:	60 81       	ld	r22, Z
    4118:	71 81       	ldd	r23, Z+1	; 0x01
    411a:	82 81       	ldd	r24, Z+2	; 0x02
    411c:	93 81       	ldd	r25, Z+3	; 0x03
    411e:	0c 5f       	subi	r16, 0xFC	; 252
    4120:	1f 4f       	sbci	r17, 0xFF	; 255
    4122:	06 c0       	rjmp	.+12     	; 0x4130 <vfprintf+0x280>
    4124:	60 81       	ld	r22, Z
    4126:	71 81       	ldd	r23, Z+1	; 0x01
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	0e 5f       	subi	r16, 0xFE	; 254
    412e:	1f 4f       	sbci	r17, 0xFF	; 255
    4130:	a4 01       	movw	r20, r8
    4132:	0e 94 80 21 	call	0x4300	; 0x4300 <__ultoa_invert>
    4136:	a8 2e       	mov	r10, r24
    4138:	a8 18       	sub	r10, r8
    413a:	fb 2d       	mov	r31, r11
    413c:	ff 77       	andi	r31, 0x7F	; 127
    413e:	bf 2e       	mov	r11, r31
    4140:	b6 fe       	sbrs	r11, 6
    4142:	0b c0       	rjmp	.+22     	; 0x415a <vfprintf+0x2aa>
    4144:	2b 2d       	mov	r18, r11
    4146:	2e 7f       	andi	r18, 0xFE	; 254
    4148:	a5 14       	cp	r10, r5
    414a:	50 f4       	brcc	.+20     	; 0x4160 <vfprintf+0x2b0>
    414c:	b4 fe       	sbrs	r11, 4
    414e:	0a c0       	rjmp	.+20     	; 0x4164 <vfprintf+0x2b4>
    4150:	b2 fc       	sbrc	r11, 2
    4152:	08 c0       	rjmp	.+16     	; 0x4164 <vfprintf+0x2b4>
    4154:	2b 2d       	mov	r18, r11
    4156:	2e 7e       	andi	r18, 0xEE	; 238
    4158:	05 c0       	rjmp	.+10     	; 0x4164 <vfprintf+0x2b4>
    415a:	7a 2c       	mov	r7, r10
    415c:	2b 2d       	mov	r18, r11
    415e:	03 c0       	rjmp	.+6      	; 0x4166 <vfprintf+0x2b6>
    4160:	7a 2c       	mov	r7, r10
    4162:	01 c0       	rjmp	.+2      	; 0x4166 <vfprintf+0x2b6>
    4164:	75 2c       	mov	r7, r5
    4166:	24 ff       	sbrs	r18, 4
    4168:	0d c0       	rjmp	.+26     	; 0x4184 <vfprintf+0x2d4>
    416a:	fe 01       	movw	r30, r28
    416c:	ea 0d       	add	r30, r10
    416e:	f1 1d       	adc	r31, r1
    4170:	80 81       	ld	r24, Z
    4172:	80 33       	cpi	r24, 0x30	; 48
    4174:	11 f4       	brne	.+4      	; 0x417a <vfprintf+0x2ca>
    4176:	29 7e       	andi	r18, 0xE9	; 233
    4178:	09 c0       	rjmp	.+18     	; 0x418c <vfprintf+0x2dc>
    417a:	22 ff       	sbrs	r18, 2
    417c:	06 c0       	rjmp	.+12     	; 0x418a <vfprintf+0x2da>
    417e:	73 94       	inc	r7
    4180:	73 94       	inc	r7
    4182:	04 c0       	rjmp	.+8      	; 0x418c <vfprintf+0x2dc>
    4184:	82 2f       	mov	r24, r18
    4186:	86 78       	andi	r24, 0x86	; 134
    4188:	09 f0       	breq	.+2      	; 0x418c <vfprintf+0x2dc>
    418a:	73 94       	inc	r7
    418c:	23 fd       	sbrc	r18, 3
    418e:	13 c0       	rjmp	.+38     	; 0x41b6 <vfprintf+0x306>
    4190:	20 ff       	sbrs	r18, 0
    4192:	06 c0       	rjmp	.+12     	; 0x41a0 <vfprintf+0x2f0>
    4194:	5a 2c       	mov	r5, r10
    4196:	73 14       	cp	r7, r3
    4198:	18 f4       	brcc	.+6      	; 0x41a0 <vfprintf+0x2f0>
    419a:	53 0c       	add	r5, r3
    419c:	57 18       	sub	r5, r7
    419e:	73 2c       	mov	r7, r3
    41a0:	73 14       	cp	r7, r3
    41a2:	68 f4       	brcc	.+26     	; 0x41be <vfprintf+0x30e>
    41a4:	b7 01       	movw	r22, r14
    41a6:	80 e2       	ldi	r24, 0x20	; 32
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	2c 87       	std	Y+12, r18	; 0x0c
    41ac:	0e 94 4e 21 	call	0x429c	; 0x429c <fputc>
    41b0:	73 94       	inc	r7
    41b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    41b4:	f5 cf       	rjmp	.-22     	; 0x41a0 <vfprintf+0x2f0>
    41b6:	73 14       	cp	r7, r3
    41b8:	10 f4       	brcc	.+4      	; 0x41be <vfprintf+0x30e>
    41ba:	37 18       	sub	r3, r7
    41bc:	01 c0       	rjmp	.+2      	; 0x41c0 <vfprintf+0x310>
    41be:	31 2c       	mov	r3, r1
    41c0:	24 ff       	sbrs	r18, 4
    41c2:	12 c0       	rjmp	.+36     	; 0x41e8 <vfprintf+0x338>
    41c4:	b7 01       	movw	r22, r14
    41c6:	80 e3       	ldi	r24, 0x30	; 48
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	2c 87       	std	Y+12, r18	; 0x0c
    41cc:	0e 94 4e 21 	call	0x429c	; 0x429c <fputc>
    41d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    41d2:	22 ff       	sbrs	r18, 2
    41d4:	17 c0       	rjmp	.+46     	; 0x4204 <vfprintf+0x354>
    41d6:	21 ff       	sbrs	r18, 1
    41d8:	03 c0       	rjmp	.+6      	; 0x41e0 <vfprintf+0x330>
    41da:	88 e5       	ldi	r24, 0x58	; 88
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <vfprintf+0x334>
    41e0:	88 e7       	ldi	r24, 0x78	; 120
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	b7 01       	movw	r22, r14
    41e6:	0c c0       	rjmp	.+24     	; 0x4200 <vfprintf+0x350>
    41e8:	82 2f       	mov	r24, r18
    41ea:	86 78       	andi	r24, 0x86	; 134
    41ec:	59 f0       	breq	.+22     	; 0x4204 <vfprintf+0x354>
    41ee:	21 fd       	sbrc	r18, 1
    41f0:	02 c0       	rjmp	.+4      	; 0x41f6 <vfprintf+0x346>
    41f2:	80 e2       	ldi	r24, 0x20	; 32
    41f4:	01 c0       	rjmp	.+2      	; 0x41f8 <vfprintf+0x348>
    41f6:	8b e2       	ldi	r24, 0x2B	; 43
    41f8:	27 fd       	sbrc	r18, 7
    41fa:	8d e2       	ldi	r24, 0x2D	; 45
    41fc:	b7 01       	movw	r22, r14
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	0e 94 4e 21 	call	0x429c	; 0x429c <fputc>
    4204:	a5 14       	cp	r10, r5
    4206:	38 f4       	brcc	.+14     	; 0x4216 <vfprintf+0x366>
    4208:	b7 01       	movw	r22, r14
    420a:	80 e3       	ldi	r24, 0x30	; 48
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	0e 94 4e 21 	call	0x429c	; 0x429c <fputc>
    4212:	5a 94       	dec	r5
    4214:	f7 cf       	rjmp	.-18     	; 0x4204 <vfprintf+0x354>
    4216:	aa 94       	dec	r10
    4218:	f4 01       	movw	r30, r8
    421a:	ea 0d       	add	r30, r10
    421c:	f1 1d       	adc	r31, r1
    421e:	80 81       	ld	r24, Z
    4220:	b7 01       	movw	r22, r14
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0e 94 4e 21 	call	0x429c	; 0x429c <fputc>
    4228:	a1 10       	cpse	r10, r1
    422a:	f5 cf       	rjmp	.-22     	; 0x4216 <vfprintf+0x366>
    422c:	33 20       	and	r3, r3
    422e:	09 f4       	brne	.+2      	; 0x4232 <vfprintf+0x382>
    4230:	51 ce       	rjmp	.-862    	; 0x3ed4 <vfprintf+0x24>
    4232:	b7 01       	movw	r22, r14
    4234:	80 e2       	ldi	r24, 0x20	; 32
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	0e 94 4e 21 	call	0x429c	; 0x429c <fputc>
    423c:	3a 94       	dec	r3
    423e:	f6 cf       	rjmp	.-20     	; 0x422c <vfprintf+0x37c>
    4240:	f7 01       	movw	r30, r14
    4242:	86 81       	ldd	r24, Z+6	; 0x06
    4244:	97 81       	ldd	r25, Z+7	; 0x07
    4246:	02 c0       	rjmp	.+4      	; 0x424c <vfprintf+0x39c>
    4248:	8f ef       	ldi	r24, 0xFF	; 255
    424a:	9f ef       	ldi	r25, 0xFF	; 255
    424c:	2c 96       	adiw	r28, 0x0c	; 12
    424e:	e2 e1       	ldi	r30, 0x12	; 18
    4250:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__epilogue_restores__>

00004254 <__eerd_word_m32>:
    4254:	a8 e1       	ldi	r26, 0x18	; 24
    4256:	b0 e0       	ldi	r27, 0x00	; 0
    4258:	42 e0       	ldi	r20, 0x02	; 2
    425a:	50 e0       	ldi	r21, 0x00	; 0
    425c:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <__eerd_blraw_m32>

00004260 <__eewr_word_m32>:
    4260:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__eewr_byte_m32>
    4264:	27 2f       	mov	r18, r23
    4266:	0c 94 ef 21 	jmp	0x43de	; 0x43de <__eewr_r18_m32>

0000426a <__ctype_isfalse>:
    426a:	99 27       	eor	r25, r25
    426c:	88 27       	eor	r24, r24

0000426e <__ctype_istrue>:
    426e:	08 95       	ret

00004270 <strnlen_P>:
    4270:	fc 01       	movw	r30, r24
    4272:	05 90       	lpm	r0, Z+
    4274:	61 50       	subi	r22, 0x01	; 1
    4276:	70 40       	sbci	r23, 0x00	; 0
    4278:	01 10       	cpse	r0, r1
    427a:	d8 f7       	brcc	.-10     	; 0x4272 <strnlen_P+0x2>
    427c:	80 95       	com	r24
    427e:	90 95       	com	r25
    4280:	8e 0f       	add	r24, r30
    4282:	9f 1f       	adc	r25, r31
    4284:	08 95       	ret

00004286 <strnlen>:
    4286:	fc 01       	movw	r30, r24
    4288:	61 50       	subi	r22, 0x01	; 1
    428a:	70 40       	sbci	r23, 0x00	; 0
    428c:	01 90       	ld	r0, Z+
    428e:	01 10       	cpse	r0, r1
    4290:	d8 f7       	brcc	.-10     	; 0x4288 <strnlen+0x2>
    4292:	80 95       	com	r24
    4294:	90 95       	com	r25
    4296:	8e 0f       	add	r24, r30
    4298:	9f 1f       	adc	r25, r31
    429a:	08 95       	ret

0000429c <fputc>:
    429c:	0f 93       	push	r16
    429e:	1f 93       	push	r17
    42a0:	cf 93       	push	r28
    42a2:	df 93       	push	r29
    42a4:	18 2f       	mov	r17, r24
    42a6:	09 2f       	mov	r16, r25
    42a8:	eb 01       	movw	r28, r22
    42aa:	8b 81       	ldd	r24, Y+3	; 0x03
    42ac:	81 fd       	sbrc	r24, 1
    42ae:	03 c0       	rjmp	.+6      	; 0x42b6 <fputc+0x1a>
    42b0:	8f ef       	ldi	r24, 0xFF	; 255
    42b2:	9f ef       	ldi	r25, 0xFF	; 255
    42b4:	20 c0       	rjmp	.+64     	; 0x42f6 <fputc+0x5a>
    42b6:	82 ff       	sbrs	r24, 2
    42b8:	10 c0       	rjmp	.+32     	; 0x42da <fputc+0x3e>
    42ba:	4e 81       	ldd	r20, Y+6	; 0x06
    42bc:	5f 81       	ldd	r21, Y+7	; 0x07
    42be:	2c 81       	ldd	r18, Y+4	; 0x04
    42c0:	3d 81       	ldd	r19, Y+5	; 0x05
    42c2:	42 17       	cp	r20, r18
    42c4:	53 07       	cpc	r21, r19
    42c6:	7c f4       	brge	.+30     	; 0x42e6 <fputc+0x4a>
    42c8:	e8 81       	ld	r30, Y
    42ca:	f9 81       	ldd	r31, Y+1	; 0x01
    42cc:	9f 01       	movw	r18, r30
    42ce:	2f 5f       	subi	r18, 0xFF	; 255
    42d0:	3f 4f       	sbci	r19, 0xFF	; 255
    42d2:	39 83       	std	Y+1, r19	; 0x01
    42d4:	28 83       	st	Y, r18
    42d6:	10 83       	st	Z, r17
    42d8:	06 c0       	rjmp	.+12     	; 0x42e6 <fputc+0x4a>
    42da:	e8 85       	ldd	r30, Y+8	; 0x08
    42dc:	f9 85       	ldd	r31, Y+9	; 0x09
    42de:	81 2f       	mov	r24, r17
    42e0:	09 95       	icall
    42e2:	89 2b       	or	r24, r25
    42e4:	29 f7       	brne	.-54     	; 0x42b0 <fputc+0x14>
    42e6:	2e 81       	ldd	r18, Y+6	; 0x06
    42e8:	3f 81       	ldd	r19, Y+7	; 0x07
    42ea:	2f 5f       	subi	r18, 0xFF	; 255
    42ec:	3f 4f       	sbci	r19, 0xFF	; 255
    42ee:	3f 83       	std	Y+7, r19	; 0x07
    42f0:	2e 83       	std	Y+6, r18	; 0x06
    42f2:	81 2f       	mov	r24, r17
    42f4:	90 2f       	mov	r25, r16
    42f6:	df 91       	pop	r29
    42f8:	cf 91       	pop	r28
    42fa:	1f 91       	pop	r17
    42fc:	0f 91       	pop	r16
    42fe:	08 95       	ret

00004300 <__ultoa_invert>:
    4300:	fa 01       	movw	r30, r20
    4302:	aa 27       	eor	r26, r26
    4304:	28 30       	cpi	r18, 0x08	; 8
    4306:	51 f1       	breq	.+84     	; 0x435c <__ultoa_invert+0x5c>
    4308:	20 31       	cpi	r18, 0x10	; 16
    430a:	81 f1       	breq	.+96     	; 0x436c <__ultoa_invert+0x6c>
    430c:	e8 94       	clt
    430e:	6f 93       	push	r22
    4310:	6e 7f       	andi	r22, 0xFE	; 254
    4312:	6e 5f       	subi	r22, 0xFE	; 254
    4314:	7f 4f       	sbci	r23, 0xFF	; 255
    4316:	8f 4f       	sbci	r24, 0xFF	; 255
    4318:	9f 4f       	sbci	r25, 0xFF	; 255
    431a:	af 4f       	sbci	r26, 0xFF	; 255
    431c:	b1 e0       	ldi	r27, 0x01	; 1
    431e:	3e d0       	rcall	.+124    	; 0x439c <__ultoa_invert+0x9c>
    4320:	b4 e0       	ldi	r27, 0x04	; 4
    4322:	3c d0       	rcall	.+120    	; 0x439c <__ultoa_invert+0x9c>
    4324:	67 0f       	add	r22, r23
    4326:	78 1f       	adc	r23, r24
    4328:	89 1f       	adc	r24, r25
    432a:	9a 1f       	adc	r25, r26
    432c:	a1 1d       	adc	r26, r1
    432e:	68 0f       	add	r22, r24
    4330:	79 1f       	adc	r23, r25
    4332:	8a 1f       	adc	r24, r26
    4334:	91 1d       	adc	r25, r1
    4336:	a1 1d       	adc	r26, r1
    4338:	6a 0f       	add	r22, r26
    433a:	71 1d       	adc	r23, r1
    433c:	81 1d       	adc	r24, r1
    433e:	91 1d       	adc	r25, r1
    4340:	a1 1d       	adc	r26, r1
    4342:	20 d0       	rcall	.+64     	; 0x4384 <__ultoa_invert+0x84>
    4344:	09 f4       	brne	.+2      	; 0x4348 <__ultoa_invert+0x48>
    4346:	68 94       	set
    4348:	3f 91       	pop	r19
    434a:	2a e0       	ldi	r18, 0x0A	; 10
    434c:	26 9f       	mul	r18, r22
    434e:	11 24       	eor	r1, r1
    4350:	30 19       	sub	r19, r0
    4352:	30 5d       	subi	r19, 0xD0	; 208
    4354:	31 93       	st	Z+, r19
    4356:	de f6       	brtc	.-74     	; 0x430e <__ultoa_invert+0xe>
    4358:	cf 01       	movw	r24, r30
    435a:	08 95       	ret
    435c:	46 2f       	mov	r20, r22
    435e:	47 70       	andi	r20, 0x07	; 7
    4360:	40 5d       	subi	r20, 0xD0	; 208
    4362:	41 93       	st	Z+, r20
    4364:	b3 e0       	ldi	r27, 0x03	; 3
    4366:	0f d0       	rcall	.+30     	; 0x4386 <__ultoa_invert+0x86>
    4368:	c9 f7       	brne	.-14     	; 0x435c <__ultoa_invert+0x5c>
    436a:	f6 cf       	rjmp	.-20     	; 0x4358 <__ultoa_invert+0x58>
    436c:	46 2f       	mov	r20, r22
    436e:	4f 70       	andi	r20, 0x0F	; 15
    4370:	40 5d       	subi	r20, 0xD0	; 208
    4372:	4a 33       	cpi	r20, 0x3A	; 58
    4374:	18 f0       	brcs	.+6      	; 0x437c <__ultoa_invert+0x7c>
    4376:	49 5d       	subi	r20, 0xD9	; 217
    4378:	31 fd       	sbrc	r19, 1
    437a:	40 52       	subi	r20, 0x20	; 32
    437c:	41 93       	st	Z+, r20
    437e:	02 d0       	rcall	.+4      	; 0x4384 <__ultoa_invert+0x84>
    4380:	a9 f7       	brne	.-22     	; 0x436c <__ultoa_invert+0x6c>
    4382:	ea cf       	rjmp	.-44     	; 0x4358 <__ultoa_invert+0x58>
    4384:	b4 e0       	ldi	r27, 0x04	; 4
    4386:	a6 95       	lsr	r26
    4388:	97 95       	ror	r25
    438a:	87 95       	ror	r24
    438c:	77 95       	ror	r23
    438e:	67 95       	ror	r22
    4390:	ba 95       	dec	r27
    4392:	c9 f7       	brne	.-14     	; 0x4386 <__ultoa_invert+0x86>
    4394:	00 97       	sbiw	r24, 0x00	; 0
    4396:	61 05       	cpc	r22, r1
    4398:	71 05       	cpc	r23, r1
    439a:	08 95       	ret
    439c:	9b 01       	movw	r18, r22
    439e:	ac 01       	movw	r20, r24
    43a0:	0a 2e       	mov	r0, r26
    43a2:	06 94       	lsr	r0
    43a4:	57 95       	ror	r21
    43a6:	47 95       	ror	r20
    43a8:	37 95       	ror	r19
    43aa:	27 95       	ror	r18
    43ac:	ba 95       	dec	r27
    43ae:	c9 f7       	brne	.-14     	; 0x43a2 <__ultoa_invert+0xa2>
    43b0:	62 0f       	add	r22, r18
    43b2:	73 1f       	adc	r23, r19
    43b4:	84 1f       	adc	r24, r20
    43b6:	95 1f       	adc	r25, r21
    43b8:	a0 1d       	adc	r26, r0
    43ba:	08 95       	ret

000043bc <__eerd_block_m32>:
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22

000043c0 <__eerd_blraw_m32>:
    43c0:	fc 01       	movw	r30, r24
    43c2:	e1 99       	sbic	0x1c, 1	; 28
    43c4:	fe cf       	rjmp	.-4      	; 0x43c2 <__eerd_blraw_m32+0x2>
    43c6:	06 c0       	rjmp	.+12     	; 0x43d4 <__eerd_blraw_m32+0x14>
    43c8:	ff bb       	out	0x1f, r31	; 31
    43ca:	ee bb       	out	0x1e, r30	; 30
    43cc:	e0 9a       	sbi	0x1c, 0	; 28
    43ce:	31 96       	adiw	r30, 0x01	; 1
    43d0:	0d b2       	in	r0, 0x1d	; 29
    43d2:	0d 92       	st	X+, r0
    43d4:	41 50       	subi	r20, 0x01	; 1
    43d6:	50 40       	sbci	r21, 0x00	; 0
    43d8:	b8 f7       	brcc	.-18     	; 0x43c8 <__eerd_blraw_m32+0x8>
    43da:	08 95       	ret

000043dc <__eewr_byte_m32>:
    43dc:	26 2f       	mov	r18, r22

000043de <__eewr_r18_m32>:
    43de:	e1 99       	sbic	0x1c, 1	; 28
    43e0:	fe cf       	rjmp	.-4      	; 0x43de <__eewr_r18_m32>
    43e2:	9f bb       	out	0x1f, r25	; 31
    43e4:	8e bb       	out	0x1e, r24	; 30
    43e6:	2d bb       	out	0x1d, r18	; 29
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	f8 94       	cli
    43ec:	e2 9a       	sbi	0x1c, 2	; 28
    43ee:	e1 9a       	sbi	0x1c, 1	; 28
    43f0:	0f be       	out	0x3f, r0	; 63
    43f2:	01 96       	adiw	r24, 0x01	; 1
    43f4:	08 95       	ret

000043f6 <__mulsi3>:
    43f6:	db 01       	movw	r26, r22
    43f8:	8f 93       	push	r24
    43fa:	9f 93       	push	r25
    43fc:	0e 94 4c 22 	call	0x4498	; 0x4498 <__muluhisi3>
    4400:	bf 91       	pop	r27
    4402:	af 91       	pop	r26
    4404:	a2 9f       	mul	r26, r18
    4406:	80 0d       	add	r24, r0
    4408:	91 1d       	adc	r25, r1
    440a:	a3 9f       	mul	r26, r19
    440c:	90 0d       	add	r25, r0
    440e:	b2 9f       	mul	r27, r18
    4410:	90 0d       	add	r25, r0
    4412:	11 24       	eor	r1, r1
    4414:	08 95       	ret

00004416 <__udivmodsi4>:
    4416:	a1 e2       	ldi	r26, 0x21	; 33
    4418:	1a 2e       	mov	r1, r26
    441a:	aa 1b       	sub	r26, r26
    441c:	bb 1b       	sub	r27, r27
    441e:	fd 01       	movw	r30, r26
    4420:	0d c0       	rjmp	.+26     	; 0x443c <__udivmodsi4_ep>

00004422 <__udivmodsi4_loop>:
    4422:	aa 1f       	adc	r26, r26
    4424:	bb 1f       	adc	r27, r27
    4426:	ee 1f       	adc	r30, r30
    4428:	ff 1f       	adc	r31, r31
    442a:	a2 17       	cp	r26, r18
    442c:	b3 07       	cpc	r27, r19
    442e:	e4 07       	cpc	r30, r20
    4430:	f5 07       	cpc	r31, r21
    4432:	20 f0       	brcs	.+8      	; 0x443c <__udivmodsi4_ep>
    4434:	a2 1b       	sub	r26, r18
    4436:	b3 0b       	sbc	r27, r19
    4438:	e4 0b       	sbc	r30, r20
    443a:	f5 0b       	sbc	r31, r21

0000443c <__udivmodsi4_ep>:
    443c:	66 1f       	adc	r22, r22
    443e:	77 1f       	adc	r23, r23
    4440:	88 1f       	adc	r24, r24
    4442:	99 1f       	adc	r25, r25
    4444:	1a 94       	dec	r1
    4446:	69 f7       	brne	.-38     	; 0x4422 <__udivmodsi4_loop>
    4448:	60 95       	com	r22
    444a:	70 95       	com	r23
    444c:	80 95       	com	r24
    444e:	90 95       	com	r25
    4450:	9b 01       	movw	r18, r22
    4452:	ac 01       	movw	r20, r24
    4454:	bd 01       	movw	r22, r26
    4456:	cf 01       	movw	r24, r30
    4458:	08 95       	ret

0000445a <__divmodsi4>:
    445a:	05 2e       	mov	r0, r21
    445c:	97 fb       	bst	r25, 7
    445e:	1e f4       	brtc	.+6      	; 0x4466 <__divmodsi4+0xc>
    4460:	00 94       	com	r0
    4462:	0e 94 44 22 	call	0x4488	; 0x4488 <__negsi2>
    4466:	57 fd       	sbrc	r21, 7
    4468:	07 d0       	rcall	.+14     	; 0x4478 <__divmodsi4_neg2>
    446a:	0e 94 0b 22 	call	0x4416	; 0x4416 <__udivmodsi4>
    446e:	07 fc       	sbrc	r0, 7
    4470:	03 d0       	rcall	.+6      	; 0x4478 <__divmodsi4_neg2>
    4472:	4e f4       	brtc	.+18     	; 0x4486 <__divmodsi4_exit>
    4474:	0c 94 44 22 	jmp	0x4488	; 0x4488 <__negsi2>

00004478 <__divmodsi4_neg2>:
    4478:	50 95       	com	r21
    447a:	40 95       	com	r20
    447c:	30 95       	com	r19
    447e:	21 95       	neg	r18
    4480:	3f 4f       	sbci	r19, 0xFF	; 255
    4482:	4f 4f       	sbci	r20, 0xFF	; 255
    4484:	5f 4f       	sbci	r21, 0xFF	; 255

00004486 <__divmodsi4_exit>:
    4486:	08 95       	ret

00004488 <__negsi2>:
    4488:	90 95       	com	r25
    448a:	80 95       	com	r24
    448c:	70 95       	com	r23
    448e:	61 95       	neg	r22
    4490:	7f 4f       	sbci	r23, 0xFF	; 255
    4492:	8f 4f       	sbci	r24, 0xFF	; 255
    4494:	9f 4f       	sbci	r25, 0xFF	; 255
    4496:	08 95       	ret

00004498 <__muluhisi3>:
    4498:	0e 94 96 22 	call	0x452c	; 0x452c <__umulhisi3>
    449c:	a5 9f       	mul	r26, r21
    449e:	90 0d       	add	r25, r0
    44a0:	b4 9f       	mul	r27, r20
    44a2:	90 0d       	add	r25, r0
    44a4:	a4 9f       	mul	r26, r20
    44a6:	80 0d       	add	r24, r0
    44a8:	91 1d       	adc	r25, r1
    44aa:	11 24       	eor	r1, r1
    44ac:	08 95       	ret

000044ae <__mulshisi3>:
    44ae:	b7 ff       	sbrs	r27, 7
    44b0:	0c 94 4c 22 	jmp	0x4498	; 0x4498 <__muluhisi3>

000044b4 <__mulohisi3>:
    44b4:	0e 94 4c 22 	call	0x4498	; 0x4498 <__muluhisi3>
    44b8:	82 1b       	sub	r24, r18
    44ba:	93 0b       	sbc	r25, r19
    44bc:	08 95       	ret

000044be <__prologue_saves__>:
    44be:	2f 92       	push	r2
    44c0:	3f 92       	push	r3
    44c2:	4f 92       	push	r4
    44c4:	5f 92       	push	r5
    44c6:	6f 92       	push	r6
    44c8:	7f 92       	push	r7
    44ca:	8f 92       	push	r8
    44cc:	9f 92       	push	r9
    44ce:	af 92       	push	r10
    44d0:	bf 92       	push	r11
    44d2:	cf 92       	push	r12
    44d4:	df 92       	push	r13
    44d6:	ef 92       	push	r14
    44d8:	ff 92       	push	r15
    44da:	0f 93       	push	r16
    44dc:	1f 93       	push	r17
    44de:	cf 93       	push	r28
    44e0:	df 93       	push	r29
    44e2:	cd b7       	in	r28, 0x3d	; 61
    44e4:	de b7       	in	r29, 0x3e	; 62
    44e6:	ca 1b       	sub	r28, r26
    44e8:	db 0b       	sbc	r29, r27
    44ea:	0f b6       	in	r0, 0x3f	; 63
    44ec:	f8 94       	cli
    44ee:	de bf       	out	0x3e, r29	; 62
    44f0:	0f be       	out	0x3f, r0	; 63
    44f2:	cd bf       	out	0x3d, r28	; 61
    44f4:	09 94       	ijmp

000044f6 <__epilogue_restores__>:
    44f6:	2a 88       	ldd	r2, Y+18	; 0x12
    44f8:	39 88       	ldd	r3, Y+17	; 0x11
    44fa:	48 88       	ldd	r4, Y+16	; 0x10
    44fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    44fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    4500:	7d 84       	ldd	r7, Y+13	; 0x0d
    4502:	8c 84       	ldd	r8, Y+12	; 0x0c
    4504:	9b 84       	ldd	r9, Y+11	; 0x0b
    4506:	aa 84       	ldd	r10, Y+10	; 0x0a
    4508:	b9 84       	ldd	r11, Y+9	; 0x09
    450a:	c8 84       	ldd	r12, Y+8	; 0x08
    450c:	df 80       	ldd	r13, Y+7	; 0x07
    450e:	ee 80       	ldd	r14, Y+6	; 0x06
    4510:	fd 80       	ldd	r15, Y+5	; 0x05
    4512:	0c 81       	ldd	r16, Y+4	; 0x04
    4514:	1b 81       	ldd	r17, Y+3	; 0x03
    4516:	aa 81       	ldd	r26, Y+2	; 0x02
    4518:	b9 81       	ldd	r27, Y+1	; 0x01
    451a:	ce 0f       	add	r28, r30
    451c:	d1 1d       	adc	r29, r1
    451e:	0f b6       	in	r0, 0x3f	; 63
    4520:	f8 94       	cli
    4522:	de bf       	out	0x3e, r29	; 62
    4524:	0f be       	out	0x3f, r0	; 63
    4526:	cd bf       	out	0x3d, r28	; 61
    4528:	ed 01       	movw	r28, r26
    452a:	08 95       	ret

0000452c <__umulhisi3>:
    452c:	a2 9f       	mul	r26, r18
    452e:	b0 01       	movw	r22, r0
    4530:	b3 9f       	mul	r27, r19
    4532:	c0 01       	movw	r24, r0
    4534:	a3 9f       	mul	r26, r19
    4536:	70 0d       	add	r23, r0
    4538:	81 1d       	adc	r24, r1
    453a:	11 24       	eor	r1, r1
    453c:	91 1d       	adc	r25, r1
    453e:	b2 9f       	mul	r27, r18
    4540:	70 0d       	add	r23, r0
    4542:	81 1d       	adc	r24, r1
    4544:	11 24       	eor	r1, r1
    4546:	91 1d       	adc	r25, r1
    4548:	08 95       	ret

0000454a <_exit>:
    454a:	f8 94       	cli

0000454c <__stop_program>:
    454c:	ff cf       	rjmp	.-2      	; 0x454c <__stop_program>
