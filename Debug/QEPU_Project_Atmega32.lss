
QEPU_Project_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004afc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00004afc  00004bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800108  00800108  00004c58  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00004c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00004c5a  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00004cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008ddf  00000000  00000000  00004f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa7  00000000  00000000  0000dd1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e77  00000000  00000000  0000ecc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000eec  00000000  00000000  0000fb3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb4  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c09  00000000  00000000  000115dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  000161e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__ctors_end>
       4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
       c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
      54:	a3 15       	cp	r26, r3
      56:	be 15       	cp	r27, r14
      58:	33 19       	sub	r19, r3
      5a:	33 19       	sub	r19, r3
      5c:	33 19       	sub	r19, r3
      5e:	33 19       	sub	r19, r3
      60:	33 19       	sub	r19, r3
      62:	33 19       	sub	r19, r3
      64:	33 19       	sub	r19, r3
      66:	c4 15       	cp	r28, r4
      68:	33 19       	sub	r19, r3
      6a:	33 19       	sub	r19, r3
      6c:	33 19       	sub	r19, r3
      6e:	ca 15       	cp	r28, r10
      70:	d2 15       	cp	r29, r2
      72:	da 15       	cp	r29, r10
      74:	01 16       	cp	r0, r17
      76:	28 16       	cp	r2, r24
      78:	4f 16       	cp	r4, r31
      7a:	76 16       	cp	r7, r22
      7c:	9d 16       	cp	r9, r29
      7e:	c4 16       	cp	r12, r20
      80:	0c 17       	cp	r16, r28
      82:	54 17       	cp	r21, r20
      84:	9c 17       	cp	r25, r28
      86:	e4 17       	cp	r30, r20
      88:	33 19       	sub	r19, r3
      8a:	33 19       	sub	r19, r3
      8c:	33 19       	sub	r19, r3
      8e:	2c 18       	sub	r2, r12
      90:	74 18       	sub	r7, r4
      92:	bc 18       	sub	r11, r12
      94:	e4 18       	sub	r14, r4
      96:	0c 19       	sub	r16, r12
      98:	08 4a       	sbci	r16, 0xA8	; 168
      9a:	d7 3b       	cpi	r29, 0xB7	; 183
      9c:	3b ce       	rjmp	.-906    	; 0xfffffd14 <__eeprom_end+0xff7efd12>
      9e:	01 6e       	ori	r16, 0xE1	; 225
      a0:	84 bc       	out	0x24, r8	; 36
      a2:	bf fd       	.word	0xfdbf	; ????
      a4:	c1 2f       	mov	r28, r17
      a6:	3d 6c       	ori	r19, 0xCD	; 205
      a8:	74 31       	cpi	r23, 0x14	; 20
      aa:	9a bd       	out	0x2a, r25	; 42
      ac:	56 83       	std	Z+6, r21	; 0x06
      ae:	3d da       	rcall	.-2950   	; 0xfffff52a <__eeprom_end+0xff7ef528>
      b0:	3d 00       	.word	0x003d	; ????
      b2:	c7 7f       	andi	r28, 0xF7	; 247
      b4:	11 be       	out	0x31, r1	; 49
      b6:	d9 e4       	ldi	r29, 0x49	; 73
      b8:	bb 4c       	sbci	r27, 0xCB	; 203
      ba:	3e 91       	ld	r19, -X
      bc:	6b aa       	std	Y+51, r6	; 0x33
      be:	aa be       	out	0x3a, r10	; 58
      c0:	00 00       	nop
      c2:	00 80       	ld	r0, Z
      c4:	3f 07       	cpc	r19, r31
      c6:	63 42       	sbci	r22, 0x23	; 35
      c8:	36 b7       	in	r19, 0x36	; 54
      ca:	9b d8       	rcall	.-3786   	; 0xfffff202 <__eeprom_end+0xff7ef200>
      cc:	a7 1a       	sub	r10, r23
      ce:	39 68       	ori	r19, 0x89	; 137
      d0:	56 18       	sub	r5, r6
      d2:	ae ba       	out	0x1e, r10	; 30
      d4:	ab 55       	subi	r26, 0x5B	; 91
      d6:	8c 1d       	adc	r24, r12
      d8:	3c b7       	in	r19, 0x3c	; 60
      da:	cc 57       	subi	r28, 0x7C	; 124
      dc:	63 bd       	out	0x23, r22	; 35
      de:	6d ed       	ldi	r22, 0xDD	; 221
      e0:	fd 75       	andi	r31, 0x5D	; 93
      e2:	3e f6       	brtc	.-114    	; 0x72 <__SREG__+0x33>
      e4:	17 72       	andi	r17, 0x27	; 39
      e6:	31 bf       	out	0x31, r19	; 49
      e8:	00 00       	nop
      ea:	00 80       	ld	r0, Z
      ec:	3f 07       	cpc	r19, r31
      ee:	2c 7a       	andi	r18, 0xAC	; 172
      f0:	a5 ba       	out	0x15, r10	; 21
      f2:	6c c5       	rjmp	.+2776   	; 0xbcc <_ZN5Gates8ampl2vecEiPiS0_+0xee>
      f4:	90 da       	rcall	.-2784   	; 0xfffff616 <__eeprom_end+0xff7ef614>
      f6:	3b 93       	.word	0x933b	; ????
      f8:	65 fc       	sbrc	r6, 5
      fa:	8b bc       	out	0x2b, r8	; 43
      fc:	53 f8       	bld	r5, 3
      fe:	10 fd       	sbrc	r17, 0
     100:	3c 56       	subi	r19, 0x6C	; 108
     102:	92 83       	std	Z+2, r25	; 0x02
     104:	4d bd       	out	0x2d, r20	; 45
     106:	87 9d       	mul	r24, r7
     108:	3a b6       	in	r3, 0x3a	; 58
     10a:	3d cb       	rjmp	.-2438   	; 0xfffff786 <__eeprom_end+0xff7ef784>
     10c:	c9 bf       	out	0x39, r28	; 57
     10e:	5b be       	out	0x3b, r5	; 59
     110:	73 da       	rcall	.-2842   	; 0xfffff5f8 <__eeprom_end+0xff7ef5f6>
     112:	0f c9       	rjmp	.-3554   	; 0xfffff332 <__eeprom_end+0xff7ef330>
     114:	3f 05       	cpc	r19, r15
     116:	a8 4c       	sbci	r26, 0xC8	; 200
     118:	cd b2       	in	r12, 0x1d	; 29
     11a:	d4 4e       	sbci	r29, 0xE4	; 228
     11c:	b9 38       	cpi	r27, 0x89	; 137
     11e:	36 a9       	ldd	r19, Z+54	; 0x36
     120:	02 0c       	add	r0, r2
     122:	50 b9       	out	0x00, r21	; 0
     124:	91 86       	std	Z+9, r9	; 0x09
     126:	88 08       	sbc	r8, r8
     128:	3c a6       	std	Y+44, r3	; 0x2c
     12a:	aa aa       	std	Y+50, r10	; 0x32
     12c:	2a be       	out	0x3a, r2	; 58
     12e:	00 00       	nop
     130:	00 80       	ld	r0, Z
     132:	3f 08       	sbc	r3, r15
     134:	00 00       	nop
     136:	00 be       	out	0x30, r0	; 48
     138:	92 24       	eor	r9, r2
     13a:	49 12       	cpse	r4, r25
     13c:	3e ab       	std	Y+54, r19	; 0x36
     13e:	aa aa       	std	Y+50, r10	; 0x32
     140:	2a be       	out	0x3a, r2	; 58
     142:	cd cc       	rjmp	.-1638   	; 0xfffffade <__eeprom_end+0xff7efadc>
     144:	cc 4c       	sbci	r28, 0xCC	; 204
     146:	3e 00       	.word	0x003e	; ????
     148:	00 00       	nop
     14a:	80 be       	out	0x30, r8	; 48
     14c:	ab aa       	std	Y+51, r10	; 0x33
     14e:	aa aa       	std	Y+50, r10	; 0x32
     150:	3e 00       	.word	0x003e	; ????
     152:	00 00       	nop
     154:	00 bf       	out	0x30, r16	; 48
     156:	00 00       	nop
     158:	00 80       	ld	r0, Z
     15a:	3f 00       	.word	0x003f	; ????
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	08 41       	sbci	r16, 0x18	; 24
     162:	78 d3       	rcall	.+1776   	; 0x854 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a2>
     164:	bb 43       	sbci	r27, 0x3B	; 59
     166:	87 d1       	rcall	.+782    	; 0x476 <_ZN6EEProm4readEj+0x4a>
     168:	13 3d       	cpi	r17, 0xD3	; 211
     16a:	19 0e       	add	r1, r25
     16c:	3c c3       	rjmp	.+1656   	; 0x7e6 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x134>
     16e:	bd 42       	sbci	r27, 0x2D	; 45
     170:	82 ad       	ldd	r24, Z+58	; 0x3a
     172:	2b 3e       	cpi	r18, 0xEB	; 235
     174:	68 ec       	ldi	r22, 0xC8	; 200
     176:	82 76       	andi	r24, 0x62	; 98
     178:	be d9       	rcall	.-3204   	; 0xfffff4f6 <__eeprom_end+0xff7ef4f4>
     17a:	8f e1       	ldi	r24, 0x1F	; 31
     17c:	a9 3e       	cpi	r26, 0xE9	; 233
     17e:	4c 80       	ldd	r4, Y+4	; 0x04
     180:	ef ff       	.word	0xffef	; ????
     182:	be 01       	movw	r22, r28
     184:	c4 ff       	sbrs	r28, 4
     186:	7f 3f       	cpi	r23, 0xFF	; 255
     188:	00 00       	nop
     18a:	00 00       	nop
	...

0000018e <__ctors_start>:
     18e:	b1 13       	cpse	r27, r17

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf e5       	ldi	r28, 0x5F	; 95
     196:	d8 e0       	ldi	r29, 0x08	; 8
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	a0 e6       	ldi	r26, 0x60	; 96
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	ec ef       	ldi	r30, 0xFC	; 252
     1a4:	fa e4       	ldi	r31, 0x4A	; 74
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	a8 30       	cpi	r26, 0x08	; 8
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	a8 e0       	ldi	r26, 0x08	; 8
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	a0 31       	cpi	r26, 0x10	; 16
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>

000001c2 <__do_global_ctors>:
     1c2:	11 e0       	ldi	r17, 0x01	; 1
     1c4:	c0 e9       	ldi	r28, 0x90	; 144
     1c6:	d1 e0       	ldi	r29, 0x01	; 1
     1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <__do_global_ctors+0x10>
     1ca:	22 97       	sbiw	r28, 0x02	; 2
     1cc:	fe 01       	movw	r30, r28
     1ce:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__tablejump__>
     1d2:	ce 38       	cpi	r28, 0x8E	; 142
     1d4:	d1 07       	cpc	r29, r17
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <__do_global_ctors+0x8>
     1d8:	0e 94 bd 1a 	call	0x357a	; 0x357a <main>
     1dc:	0c 94 7c 25 	jmp	0x4af8	; 0x4af8 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e4 <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	fc 01       	movw	r30, r24
     1ea:	40 83       	st	Z, r20
     1ec:	51 83       	std	Z+1, r21	; 0x01
     1ee:	62 83       	std	Z+2, r22	; 0x02
     1f0:	73 83       	std	Z+3, r23	; 0x03
     1f2:	04 83       	std	Z+4, r16	; 0x04
     1f4:	15 83       	std	Z+5, r17	; 0x05
     1f6:	26 83       	std	Z+6, r18	; 0x06
     1f8:	37 83       	std	Z+7, r19	; 0x07
     1fa:	1f 91       	pop	r17
     1fc:	0f 91       	pop	r16
     1fe:	08 95       	ret

00000200 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     200:	fc 01       	movw	r30, r24
     202:	10 82       	st	Z, r1
     204:	11 82       	std	Z+1, r1	; 0x01
     206:	12 82       	std	Z+2, r1	; 0x02
     208:	13 82       	std	Z+3, r1	; 0x03
     20a:	14 82       	std	Z+4, r1	; 0x04
     20c:	15 82       	std	Z+5, r1	; 0x05
     20e:	16 82       	std	Z+6, r1	; 0x06
     210:	17 82       	std	Z+7, r1	; 0x07
     212:	08 95       	ret

00000214 <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     214:	af 92       	push	r10
     216:	bf 92       	push	r11
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	68 97       	sbiw	r28, 0x18	; 24
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	de bf       	out	0x3e, r29	; 62
     234:	0f be       	out	0x3f, r0	; 63
     236:	cd bf       	out	0x3d, r28	; 61
     238:	5c 01       	movw	r10, r24
     23a:	09 8b       	std	Y+17, r16	; 0x11
     23c:	1a 8b       	std	Y+18, r17	; 0x12
     23e:	2b 8b       	std	Y+19, r18	; 0x13
     240:	3c 8b       	std	Y+20, r19	; 0x14
     242:	4d 8b       	std	Y+21, r20	; 0x15
     244:	5e 8b       	std	Y+22, r21	; 0x16
     246:	6f 8b       	std	Y+23, r22	; 0x17
     248:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     24a:	2d 89       	ldd	r18, Y+21	; 0x15
     24c:	3e 89       	ldd	r19, Y+22	; 0x16
     24e:	4f 89       	ldd	r20, Y+23	; 0x17
     250:	58 8d       	ldd	r21, Y+24	; 0x18
     252:	fc 01       	movw	r30, r24
     254:	64 81       	ldd	r22, Z+4	; 0x04
     256:	75 81       	ldd	r23, Z+5	; 0x05
     258:	86 81       	ldd	r24, Z+6	; 0x06
     25a:	97 81       	ldd	r25, Z+7	; 0x07
     25c:	0e 94 09 1b 	call	0x3612	; 0x3612 <__addsf3>
     260:	6b 01       	movw	r12, r22
     262:	7c 01       	movw	r14, r24
     264:	29 89       	ldd	r18, Y+17	; 0x11
     266:	3a 89       	ldd	r19, Y+18	; 0x12
     268:	4b 89       	ldd	r20, Y+19	; 0x13
     26a:	5c 89       	ldd	r21, Y+20	; 0x14
     26c:	f5 01       	movw	r30, r10
     26e:	60 81       	ld	r22, Z
     270:	71 81       	ldd	r23, Z+1	; 0x01
     272:	82 81       	ldd	r24, Z+2	; 0x02
     274:	93 81       	ldd	r25, Z+3	; 0x03
     276:	0e 94 09 1b 	call	0x3612	; 0x3612 <__addsf3>
     27a:	ab 01       	movw	r20, r22
     27c:	bc 01       	movw	r22, r24
     27e:	97 01       	movw	r18, r14
     280:	86 01       	movw	r16, r12
     282:	ce 01       	movw	r24, r28
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
     28a:	88 e0       	ldi	r24, 0x08	; 8
     28c:	fe 01       	movw	r30, r28
     28e:	31 96       	adiw	r30, 0x01	; 1
     290:	de 01       	movw	r26, r28
     292:	19 96       	adiw	r26, 0x09	; 9
     294:	01 90       	ld	r0, Z+
     296:	0d 92       	st	X+, r0
     298:	8a 95       	dec	r24
     29a:	e1 f7       	brne	.-8      	; 0x294 <_ZN7Complex3addES_+0x80>
     29c:	29 85       	ldd	r18, Y+9	; 0x09
     29e:	3a 85       	ldd	r19, Y+10	; 0x0a
     2a0:	4b 85       	ldd	r20, Y+11	; 0x0b
     2a2:	5c 85       	ldd	r21, Y+12	; 0x0c
     2a4:	6d 85       	ldd	r22, Y+13	; 0x0d
     2a6:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     2a8:	8f 85       	ldd	r24, Y+15	; 0x0f
     2aa:	98 89       	ldd	r25, Y+16	; 0x10
     2ac:	68 96       	adiw	r28, 0x18	; 24
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	bf 90       	pop	r11
     2ca:	af 90       	pop	r10
     2cc:	08 95       	ret

000002ce <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     2ce:	4f 92       	push	r4
     2d0:	5f 92       	push	r5
     2d2:	6f 92       	push	r6
     2d4:	7f 92       	push	r7
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	a0 97       	sbiw	r28, 0x20	; 32
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	09 8b       	std	Y+17, r16	; 0x11
     300:	1a 8b       	std	Y+18, r17	; 0x12
     302:	2b 8b       	std	Y+19, r18	; 0x13
     304:	3c 8b       	std	Y+20, r19	; 0x14
     306:	4d 8b       	std	Y+21, r20	; 0x15
     308:	5e 8b       	std	Y+22, r21	; 0x16
     30a:	6f 8b       	std	Y+23, r22	; 0x17
     30c:	78 8f       	std	Y+24, r23	; 0x18
     30e:	89 88       	ldd	r8, Y+17	; 0x11
     310:	9a 88       	ldd	r9, Y+18	; 0x12
     312:	ab 88       	ldd	r10, Y+19	; 0x13
     314:	bc 88       	ldd	r11, Y+20	; 0x14
     316:	2d 89       	ldd	r18, Y+21	; 0x15
     318:	3e 89       	ldd	r19, Y+22	; 0x16
     31a:	4f 89       	ldd	r20, Y+23	; 0x17
     31c:	58 8d       	ldd	r21, Y+24	; 0x18
     31e:	2d 8f       	std	Y+29, r18	; 0x1d
     320:	3e 8f       	std	Y+30, r19	; 0x1e
     322:	4f 8f       	std	Y+31, r20	; 0x1f
     324:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     326:	fc 01       	movw	r30, r24
     328:	c0 80       	ld	r12, Z
     32a:	d1 80       	ldd	r13, Z+1	; 0x01
     32c:	e2 80       	ldd	r14, Z+2	; 0x02
     32e:	f3 80       	ldd	r15, Z+3	; 0x03
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	29 8f       	std	Y+25, r18	; 0x19
     33a:	3a 8f       	std	Y+26, r19	; 0x1a
     33c:	4b 8f       	std	Y+27, r20	; 0x1b
     33e:	5c 8f       	std	Y+28, r21	; 0x1c
     340:	2d 8d       	ldd	r18, Y+29	; 0x1d
     342:	3e 8d       	ldd	r19, Y+30	; 0x1e
     344:	4f 8d       	ldd	r20, Y+31	; 0x1f
     346:	58 a1       	ldd	r21, Y+32	; 0x20
     348:	c7 01       	movw	r24, r14
     34a:	b6 01       	movw	r22, r12
     34c:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     350:	2b 01       	movw	r4, r22
     352:	3c 01       	movw	r6, r24
     354:	a5 01       	movw	r20, r10
     356:	94 01       	movw	r18, r8
     358:	69 8d       	ldd	r22, Y+25	; 0x19
     35a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     35c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     35e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     360:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     364:	9b 01       	movw	r18, r22
     366:	ac 01       	movw	r20, r24
     368:	c3 01       	movw	r24, r6
     36a:	b2 01       	movw	r22, r4
     36c:	0e 94 09 1b 	call	0x3612	; 0x3612 <__addsf3>
     370:	2b 01       	movw	r4, r22
     372:	3c 01       	movw	r6, r24
     374:	a5 01       	movw	r20, r10
     376:	94 01       	movw	r18, r8
     378:	c7 01       	movw	r24, r14
     37a:	b6 01       	movw	r22, r12
     37c:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     380:	6b 01       	movw	r12, r22
     382:	7c 01       	movw	r14, r24
     384:	2d 8d       	ldd	r18, Y+29	; 0x1d
     386:	3e 8d       	ldd	r19, Y+30	; 0x1e
     388:	4f 8d       	ldd	r20, Y+31	; 0x1f
     38a:	58 a1       	ldd	r21, Y+32	; 0x20
     38c:	69 8d       	ldd	r22, Y+25	; 0x19
     38e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     390:	8b 8d       	ldd	r24, Y+27	; 0x1b
     392:	9c 8d       	ldd	r25, Y+28	; 0x1c
     394:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     398:	9b 01       	movw	r18, r22
     39a:	ac 01       	movw	r20, r24
     39c:	c7 01       	movw	r24, r14
     39e:	b6 01       	movw	r22, r12
     3a0:	0e 94 08 1b 	call	0x3610	; 0x3610 <__subsf3>
     3a4:	ab 01       	movw	r20, r22
     3a6:	bc 01       	movw	r22, r24
     3a8:	93 01       	movw	r18, r6
     3aa:	82 01       	movw	r16, r4
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
     3b4:	88 e0       	ldi	r24, 0x08	; 8
     3b6:	fe 01       	movw	r30, r28
     3b8:	31 96       	adiw	r30, 0x01	; 1
     3ba:	de 01       	movw	r26, r28
     3bc:	19 96       	adiw	r26, 0x09	; 9
     3be:	01 90       	ld	r0, Z+
     3c0:	0d 92       	st	X+, r0
     3c2:	8a 95       	dec	r24
     3c4:	e1 f7       	brne	.-8      	; 0x3be <_ZN7Complex3mulES_+0xf0>
     3c6:	29 85       	ldd	r18, Y+9	; 0x09
     3c8:	3a 85       	ldd	r19, Y+10	; 0x0a
     3ca:	4b 85       	ldd	r20, Y+11	; 0x0b
     3cc:	5c 85       	ldd	r21, Y+12	; 0x0c
     3ce:	6d 85       	ldd	r22, Y+13	; 0x0d
     3d0:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     3d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d4:	98 89       	ldd	r25, Y+16	; 0x10
     3d6:	a0 96       	adiw	r28, 0x20	; 32
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	ff 90       	pop	r15
     3ec:	ef 90       	pop	r14
     3ee:	df 90       	pop	r13
     3f0:	cf 90       	pop	r12
     3f2:	bf 90       	pop	r11
     3f4:	af 90       	pop	r10
     3f6:	9f 90       	pop	r9
     3f8:	8f 90       	pop	r8
     3fa:	7f 90       	pop	r7
     3fc:	6f 90       	pop	r6
     3fe:	5f 90       	pop	r5
     400:	4f 90       	pop	r4
     402:	08 95       	ret

00000404 <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     404:	fc 01       	movw	r30, r24
     406:	20 81       	ld	r18, Z
     408:	31 81       	ldd	r19, Z+1	; 0x01
     40a:	42 81       	ldd	r20, Z+2	; 0x02
     40c:	53 81       	ldd	r21, Z+3	; 0x03
     40e:	64 81       	ldd	r22, Z+4	; 0x04
     410:	75 81       	ldd	r23, Z+5	; 0x05
     412:	86 81       	ldd	r24, Z+6	; 0x06
     414:	97 81       	ldd	r25, Z+7	; 0x07
     416:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__divsf3>
     41a:	0e 94 6d 1b 	call	0x36da	; 0x36da <atan>
     41e:	08 95       	ret

00000420 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     420:	85 e0       	ldi	r24, 0x05	; 5
     422:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     424:	81 b1       	in	r24, 0x01	; 1
     426:	8c 7f       	andi	r24, 0xFC	; 252
     428:	81 b9       	out	0x01, r24	; 1
     42a:	08 95       	ret

0000042c <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     42c:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     42e:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     430:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     432:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     434:	06 b6       	in	r0, 0x36	; 54
     436:	07 fe       	sbrs	r0, 7
     438:	fd cf       	rjmp	.-6      	; 0x434 <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     43a:	81 b1       	in	r24, 0x01	; 1
     43c:	88 7f       	andi	r24, 0xF8	; 248
     43e:	88 30       	cpi	r24, 0x08	; 8
     440:	09 f0       	breq	.+2      	; 0x444 <_ZN6EEProm4readEj+0x18>
     442:	41 c0       	rjmp	.+130    	; 0x4c6 <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     444:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     446:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     448:	06 b6       	in	r0, 0x36	; 54
     44a:	07 fe       	sbrs	r0, 7
     44c:	fd cf       	rjmp	.-6      	; 0x448 <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     44e:	81 b1       	in	r24, 0x01	; 1
     450:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     452:	88 31       	cpi	r24, 0x18	; 24
     454:	71 f7       	brne	.-36     	; 0x432 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     456:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     458:	84 e8       	ldi	r24, 0x84	; 132
     45a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     45c:	06 b6       	in	r0, 0x36	; 54
     45e:	07 fe       	sbrs	r0, 7
     460:	fd cf       	rjmp	.-6      	; 0x45c <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     462:	81 b1       	in	r24, 0x01	; 1
     464:	88 7f       	andi	r24, 0xF8	; 248
     466:	88 32       	cpi	r24, 0x28	; 40
     468:	81 f5       	brne	.+96     	; 0x4ca <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     46a:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     46c:	84 e8       	ldi	r24, 0x84	; 132
     46e:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     470:	06 b6       	in	r0, 0x36	; 54
     472:	07 fe       	sbrs	r0, 7
     474:	fd cf       	rjmp	.-6      	; 0x470 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     476:	81 b1       	in	r24, 0x01	; 1
     478:	88 7f       	andi	r24, 0xF8	; 248
     47a:	88 32       	cpi	r24, 0x28	; 40
     47c:	41 f5       	brne	.+80     	; 0x4ce <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     47e:	84 ea       	ldi	r24, 0xA4	; 164
     480:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     482:	06 b6       	in	r0, 0x36	; 54
     484:	07 fe       	sbrs	r0, 7
     486:	fd cf       	rjmp	.-6      	; 0x482 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     488:	81 b1       	in	r24, 0x01	; 1
     48a:	88 7f       	andi	r24, 0xF8	; 248
     48c:	80 31       	cpi	r24, 0x10	; 16
     48e:	09 f5       	brne	.+66     	; 0x4d2 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     490:	81 ea       	ldi	r24, 0xA1	; 161
     492:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     498:	06 b6       	in	r0, 0x36	; 54
     49a:	07 fe       	sbrs	r0, 7
     49c:	fd cf       	rjmp	.-6      	; 0x498 <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     49e:	81 b1       	in	r24, 0x01	; 1
     4a0:	88 7f       	andi	r24, 0xF8	; 248
     4a2:	80 34       	cpi	r24, 0x40	; 64
     4a4:	c1 f4       	brne	.+48     	; 0x4d6 <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     4a6:	84 e8       	ldi	r24, 0x84	; 132
     4a8:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     4aa:	06 b6       	in	r0, 0x36	; 54
     4ac:	07 fe       	sbrs	r0, 7
     4ae:	fd cf       	rjmp	.-6      	; 0x4aa <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     4b0:	81 b1       	in	r24, 0x01	; 1
     4b2:	88 7f       	andi	r24, 0xF8	; 248
     4b4:	88 35       	cpi	r24, 0x58	; 88
     4b6:	89 f4       	brne	.+34     	; 0x4da <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     4b8:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     4ba:	94 e9       	ldi	r25, 0x94	; 148
     4bc:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     4be:	06 b6       	in	r0, 0x36	; 54
     4c0:	04 fc       	sbrc	r0, 4
     4c2:	fd cf       	rjmp	.-6      	; 0x4be <_ZN6EEProm4readEj+0x92>
     4c4:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     4da:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     4dc:	08 95       	ret

000004de <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	c4 56       	subi	r28, 0x64	; 100
     4f4:	d1 09       	sbc	r29, r1
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	6c 01       	movw	r12, r24
     502:	ce 01       	movw	r24, r28
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     508:	00 e0       	ldi	r16, 0x00	; 0
     50a:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     50c:	b8 01       	movw	r22, r16
     50e:	c6 01       	movw	r24, r12
     510:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN6EEProm4readEj>
     514:	f7 01       	movw	r30, r14
     516:	81 93       	st	Z+, r24
     518:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     51a:	8f 3f       	cpi	r24, 0xFF	; 255
     51c:	81 f4       	brne	.+32     	; 0x53e <_ZN6EEProm7readallEv+0x60>
     51e:	32 97       	sbiw	r30, 0x02	; 2
     520:	20 81       	ld	r18, Z
     522:	2f 3f       	cpi	r18, 0xFF	; 255
     524:	61 f4       	brne	.+24     	; 0x53e <_ZN6EEProm7readallEv+0x60>
     526:	31 97       	sbiw	r30, 0x01	; 1
     528:	20 81       	ld	r18, Z
     52a:	2f 3f       	cpi	r18, 0xFF	; 255
     52c:	41 f4       	brne	.+16     	; 0x53e <_ZN6EEProm7readallEv+0x60>
     52e:	31 97       	sbiw	r30, 0x01	; 1
     530:	20 81       	ld	r18, Z
     532:	2f 3f       	cpi	r18, 0xFF	; 255
     534:	21 f4       	brne	.+8      	; 0x53e <_ZN6EEProm7readallEv+0x60>
     536:	31 97       	sbiw	r30, 0x01	; 1
     538:	80 81       	ld	r24, Z
     53a:	8f 3f       	cpi	r24, 0xFF	; 255
     53c:	19 f0       	breq	.+6      	; 0x544 <_ZN6EEProm7readallEv+0x66>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     53e:	0f 5f       	subi	r16, 0xFF	; 255
     540:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     542:	e4 cf       	rjmp	.-56     	; 0x50c <_ZN6EEProm7readallEv+0x2e>
	return eeprom_mem;
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	cc 59       	subi	r28, 0x9C	; 156
     54a:	df 4f       	sbci	r29, 0xFF	; 255
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	cf 90       	pop	r12
     566:	08 95       	ret

00000568 <_Z12print_statesiP7ComplexPc>:

Serial s;
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
     568:	ef 92       	push	r14
     56a:	ff 92       	push	r15
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	7c 01       	movw	r14, r24
     576:	06 2f       	mov	r16, r22
     578:	17 2f       	mov	r17, r23
	s.writestrln(message);
     57a:	ba 01       	movw	r22, r20
     57c:	89 e0       	ldi	r24, 0x09	; 9
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     584:	1e 14       	cp	r1, r14
     586:	1f 04       	cpc	r1, r15
     588:	0c f0       	brlt	.+2      	; 0x58c <_Z12print_statesiP7ComplexPc+0x24>
     58a:	47 c0       	rjmp	.+142    	; 0x61a <_Z12print_statesiP7ComplexPc+0xb2>
     58c:	c0 2f       	mov	r28, r16
     58e:	d1 2f       	mov	r29, r17
     590:	00 e0       	ldi	r16, 0x00	; 0
     592:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
     594:	6a e6       	ldi	r22, 0x6A	; 106
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	89 e0       	ldi	r24, 0x09	; 9
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	4a e7       	ldi	r20, 0x7A	; 122
     5a6:	54 e4       	ldi	r21, 0x44	; 68
     5a8:	68 81       	ld	r22, Y
     5aa:	79 81       	ldd	r23, Y+1	; 0x01
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	9b 81       	ldd	r25, Y+3	; 0x03
     5b0:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     5b4:	0e 94 35 1c 	call	0x386a	; 0x386a <__fixsfsi>
     5b8:	88 e0       	ldi	r24, 0x08	; 8
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZN4QEPU5Utils7int2strEi>
     5c0:	bc 01       	movw	r22, r24
     5c2:	89 e0       	ldi	r24, 0x09	; 9
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
     5ca:	6e e6       	ldi	r22, 0x6E	; 110
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	89 e0       	ldi	r24, 0x09	; 9
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	4a e7       	ldi	r20, 0x7A	; 122
     5dc:	54 e4       	ldi	r21, 0x44	; 68
     5de:	6c 81       	ldd	r22, Y+4	; 0x04
     5e0:	7d 81       	ldd	r23, Y+5	; 0x05
     5e2:	8e 81       	ldd	r24, Y+6	; 0x06
     5e4:	9f 81       	ldd	r25, Y+7	; 0x07
     5e6:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     5ea:	0e 94 35 1c 	call	0x386a	; 0x386a <__fixsfsi>
     5ee:	88 e0       	ldi	r24, 0x08	; 8
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZN4QEPU5Utils7int2strEi>
     5f6:	bc 01       	movw	r22, r24
     5f8:	89 e0       	ldi	r24, 0x09	; 9
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     600:	6e ee       	ldi	r22, 0xEE	; 238
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	89 e0       	ldi	r24, 0x09	; 9
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_ZN6Serial10writestrlnEPc>
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     60c:	0f 5f       	subi	r16, 0xFF	; 255
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	28 96       	adiw	r28, 0x08	; 8
     612:	0e 15       	cp	r16, r14
     614:	1f 05       	cpc	r17, r15
     616:	09 f0       	breq	.+2      	; 0x61a <_Z12print_statesiP7ComplexPc+0xb2>
     618:	bd cf       	rjmp	.-134    	; 0x594 <_Z12print_statesiP7ComplexPc+0x2c>
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	08 95       	ret

00000628 <_ZN5Gates10setup_seedEv>:

void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 01 24 	call	0x4802	; 0x4802 <__eerd_word_m32>
     630:	0e 94 c6 20 	call	0x418c	; 0x418c <srand>
	eeprom_write_word(&randinit,rand()%10000);
     634:	0e 94 c1 20 	call	0x4182	; 0x4182 <rand>
     638:	60 e1       	ldi	r22, 0x10	; 16
     63a:	77 e2       	ldi	r23, 0x27	; 39
     63c:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <__divmodhi4>
     640:	bc 01       	movw	r22, r24
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 07 24 	call	0x480e	; 0x480e <__eewr_word_m32>
     64a:	08 95       	ret

0000064c <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}
     64c:	0e 94 14 03 	call	0x628	; 0x628 <_ZN5Gates10setup_seedEv>
     650:	08 95       	ret

00000652 <_ZN5Gates5touchEd>:
void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

int Gates::touch(double probability){
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	6a 01       	movw	r12, r20
     660:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     662:	0e 94 c1 20 	call	0x4182	; 0x4182 <rand>
     666:	ec 01       	movw	r28, r24
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	3e ef       	ldi	r19, 0xFE	; 254
     66c:	4f ef       	ldi	r20, 0xFF	; 255
     66e:	56 e4       	ldi	r21, 0x46	; 70
     670:	c7 01       	movw	r24, r14
     672:	b6 01       	movw	r22, r12
     674:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     678:	6b 01       	movw	r12, r22
     67a:	7c 01       	movw	r14, r24
     67c:	be 01       	movw	r22, r28
     67e:	88 27       	eor	r24, r24
     680:	77 fd       	sbrc	r23, 7
     682:	80 95       	com	r24
     684:	98 2f       	mov	r25, r24
     686:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
     68a:	9b 01       	movw	r18, r22
     68c:	ac 01       	movw	r20, r24
     68e:	c1 e0       	ldi	r28, 0x01	; 1
     690:	d0 e0       	ldi	r29, 0x00	; 0
     692:	c7 01       	movw	r24, r14
     694:	b6 01       	movw	r22, r12
     696:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__gesf2>
     69a:	88 23       	and	r24, r24
     69c:	14 f4       	brge	.+4      	; 0x6a2 <_ZN5Gates5touchEd+0x50>
     69e:	c0 e0       	ldi	r28, 0x00	; 0
     6a0:	d0 e0       	ldi	r29, 0x00	; 0
}
     6a2:	ce 01       	movw	r24, r28
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	df 90       	pop	r13
     6ae:	cf 90       	pop	r12
     6b0:	08 95       	ret

000006b2 <_ZN5Gates17reverse_kroneckerEP7Complexi>:
int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
	return result;
}

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     6b2:	2f 92       	push	r2
     6b4:	3f 92       	push	r3
     6b6:	4f 92       	push	r4
     6b8:	5f 92       	push	r5
     6ba:	6f 92       	push	r6
     6bc:	7f 92       	push	r7
     6be:	8f 92       	push	r8
     6c0:	9f 92       	push	r9
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	a4 97       	sbiw	r28, 0x24	; 36
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	6b 01       	movw	r12, r22
     6e8:	5a 01       	movw	r10, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     6ea:	ba 01       	movw	r22, r20
     6ec:	88 27       	eor	r24, r24
     6ee:	77 fd       	sbrc	r23, 7
     6f0:	80 95       	com	r24
     6f2:	98 2f       	mov	r25, r24
     6f4:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
     6f8:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <log>
     6fc:	28 e1       	ldi	r18, 0x18	; 24
     6fe:	32 e7       	ldi	r19, 0x72	; 114
     700:	41 e3       	ldi	r20, 0x31	; 49
     702:	5f e3       	ldi	r21, 0x3F	; 63
     704:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__divsf3>
     708:	2b 01       	movw	r4, r22
     70a:	3c 01       	movw	r6, r24
     70c:	9b 01       	movw	r18, r22
     70e:	ac 01       	movw	r20, r24
     710:	0e 94 09 1b 	call	0x3612	; 0x3612 <__addsf3>
     714:	0e 94 35 1c 	call	0x386a	; 0x386a <__fixsfsi>
     718:	69 a3       	std	Y+33, r22	; 0x21
     71a:	7a a3       	std	Y+34, r23	; 0x22
     71c:	8b a3       	std	Y+35, r24	; 0x23
     71e:	9c a3       	std	Y+36, r25	; 0x24
     720:	09 a1       	ldd	r16, Y+33	; 0x21
     722:	1a a1       	ldd	r17, Y+34	; 0x22
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
     724:	c8 01       	movw	r24, r16
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	88 0f       	add	r24, r24
     72c:	99 1f       	adc	r25, r25
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
     736:	4c 01       	movw	r8, r24
		
	for(int i=0;i<kron_size;i++)
     738:	1a 14       	cp	r1, r10
     73a:	1b 04       	cpc	r1, r11
     73c:	0c f0       	brlt	.+2      	; 0x740 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x8e>
     73e:	a4 c0       	rjmp	.+328    	; 0x888 <__stack+0x29>
		if(kron[i].re==1){
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e8       	ldi	r20, 0x80	; 128
     746:	5f e3       	ldi	r21, 0x3F	; 63
     748:	f6 01       	movw	r30, r12
     74a:	60 81       	ld	r22, Z
     74c:	71 81       	ldd	r23, Z+1	; 0x01
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 95 1b 	call	0x372a	; 0x372a <__cmpsf2>
     756:	81 11       	cpse	r24, r1
     758:	8e c0       	rjmp	.+284    	; 0x876 <__stack+0x17>
     75a:	11 c0       	rjmp	.+34     	; 0x77e <_ZN5Gates17reverse_kroneckerEP7Complexi+0xcc>
     75c:	f8 e0       	ldi	r31, 0x08	; 8
     75e:	cf 0e       	add	r12, r31
     760:	d1 1c       	adc	r13, r1
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e8       	ldi	r20, 0x80	; 128
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	f6 01       	movw	r30, r12
     76c:	60 81       	ld	r22, Z
     76e:	71 81       	ldd	r23, Z+1	; 0x01
     770:	82 81       	ldd	r24, Z+2	; 0x02
     772:	93 81       	ldd	r25, Z+3	; 0x03
     774:	0e 94 95 1b 	call	0x372a	; 0x372a <__cmpsf2>
     778:	81 11       	cpse	r24, r1
     77a:	7f c0       	rjmp	.+254    	; 0x87a <__stack+0x1b>
     77c:	02 c0       	rjmp	.+4      	; 0x782 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xd0>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     77e:	e1 2c       	mov	r14, r1
     780:	f1 2c       	mov	r15, r1
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
     782:	c3 01       	movw	r24, r6
     784:	b2 01       	movw	r22, r4
     786:	0e 94 35 1c 	call	0x386a	; 0x386a <__fixsfsi>
     78a:	ab 01       	movw	r20, r22
     78c:	b7 01       	movw	r22, r14
     78e:	88 e0       	ldi	r24, 0x08	; 8
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 bb 14 	call	0x2976	; 0x2976 <_ZN4QEPU5Utils10int2binstrEii>
     796:	1c 01       	movw	r2, r24
			s.writestrln(toBin);
     798:	bc 01       	movw	r22, r24
     79a:	89 e0       	ldi	r24, 0x09	; 9
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_ZN6Serial10writestrlnEPc>
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     7a2:	10 16       	cp	r1, r16
     7a4:	11 06       	cpc	r1, r17
     7a6:	0c f0       	brlt	.+2      	; 0x7aa <_ZN5Gates17reverse_kroneckerEP7Complexi+0xf8>
     7a8:	6f c0       	rjmp	.+222    	; 0x888 <__stack+0x29>
     7aa:	71 01       	movw	r14, r2
     7ac:	54 01       	movw	r10, r8
     7ae:	64 01       	movw	r12, r8
     7b0:	f8 e0       	ldi	r31, 0x08	; 8
     7b2:	cf 0e       	add	r12, r31
     7b4:	d1 1c       	adc	r13, r1
     7b6:	69 a0       	ldd	r6, Y+33	; 0x21
     7b8:	7a a0       	ldd	r7, Y+34	; 0x22
     7ba:	62 0c       	add	r6, r2
     7bc:	73 1c       	adc	r7, r3
				if(toBin[j]=='1'){
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     7be:	68 94       	set
     7c0:	33 24       	eor	r3, r3
     7c2:	33 f8       	bld	r3, 3
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			s.writestrln(toBin);
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
				if(toBin[j]=='1'){
     7c4:	f7 01       	movw	r30, r14
     7c6:	81 91       	ld	r24, Z+
     7c8:	7f 01       	movw	r14, r30
     7ca:	81 33       	cpi	r24, 0x31	; 49
     7cc:	29 f5       	brne	.+74     	; 0x818 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x166>
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
     7ce:	00 e0       	ldi	r16, 0x00	; 0
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	98 01       	movw	r18, r16
     7d4:	b9 01       	movw	r22, r18
     7d6:	a8 01       	movw	r20, r16
     7d8:	ce 01       	movw	r24, r28
     7da:	49 96       	adiw	r24, 0x19	; 25
     7dc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
     7e0:	fe 01       	movw	r30, r28
     7e2:	79 96       	adiw	r30, 0x19	; 25
     7e4:	d5 01       	movw	r26, r10
     7e6:	83 2d       	mov	r24, r3
     7e8:	01 90       	ld	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	8a 95       	dec	r24
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x136>
     7f0:	00 e0       	ldi	r16, 0x00	; 0
     7f2:	10 e0       	ldi	r17, 0x00	; 0
     7f4:	98 01       	movw	r18, r16
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	60 e8       	ldi	r22, 0x80	; 128
     7fc:	7f e3       	ldi	r23, 0x3F	; 63
     7fe:	ce 01       	movw	r24, r28
     800:	41 96       	adiw	r24, 0x11	; 17
     802:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
     806:	fe 01       	movw	r30, r28
     808:	71 96       	adiw	r30, 0x11	; 17
     80a:	d6 01       	movw	r26, r12
     80c:	83 2d       	mov	r24, r3
     80e:	01 90       	ld	r0, Z+
     810:	0d 92       	st	X+, r0
     812:	8a 95       	dec	r24
     814:	e1 f7       	brne	.-8      	; 0x80e <_ZN5Gates17reverse_kroneckerEP7Complexi+0x15c>
     816:	24 c0       	rjmp	.+72     	; 0x860 <__stack+0x1>
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     818:	00 e0       	ldi	r16, 0x00	; 0
     81a:	10 e0       	ldi	r17, 0x00	; 0
     81c:	98 01       	movw	r18, r16
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	60 e8       	ldi	r22, 0x80	; 128
     824:	7f e3       	ldi	r23, 0x3F	; 63
     826:	ce 01       	movw	r24, r28
     828:	09 96       	adiw	r24, 0x09	; 9
     82a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
     82e:	fe 01       	movw	r30, r28
     830:	39 96       	adiw	r30, 0x09	; 9
     832:	d5 01       	movw	r26, r10
     834:	83 2d       	mov	r24, r3
     836:	01 90       	ld	r0, Z+
     838:	0d 92       	st	X+, r0
     83a:	8a 95       	dec	r24
     83c:	e1 f7       	brne	.-8      	; 0x836 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x184>
     83e:	00 e0       	ldi	r16, 0x00	; 0
     840:	10 e0       	ldi	r17, 0x00	; 0
     842:	98 01       	movw	r18, r16
     844:	b9 01       	movw	r22, r18
     846:	a8 01       	movw	r20, r16
     848:	ce 01       	movw	r24, r28
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
     850:	fe 01       	movw	r30, r28
     852:	31 96       	adiw	r30, 0x01	; 1
     854:	d6 01       	movw	r26, r12
     856:	83 2d       	mov	r24, r3
     858:	01 90       	ld	r0, Z+
     85a:	0d 92       	st	X+, r0
     85c:	8a 95       	dec	r24
     85e:	e1 f7       	brne	.-8      	; 0x858 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a6>
     860:	f0 e1       	ldi	r31, 0x10	; 16
     862:	af 0e       	add	r10, r31
     864:	b1 1c       	adc	r11, r1
     866:	80 e1       	ldi	r24, 0x10	; 16
     868:	c8 0e       	add	r12, r24
     86a:	d1 1c       	adc	r13, r1
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			s.writestrln(toBin);
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     86c:	e6 14       	cp	r14, r6
     86e:	f7 04       	cpc	r15, r7
     870:	09 f0       	breq	.+2      	; 0x874 <__stack+0x15>
     872:	a8 cf       	rjmp	.-176    	; 0x7c4 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x112>
     874:	09 c0       	rjmp	.+18     	; 0x888 <__stack+0x29>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     876:	e1 2c       	mov	r14, r1
     878:	f1 2c       	mov	r15, r1
     87a:	ef ef       	ldi	r30, 0xFF	; 255
     87c:	ee 1a       	sub	r14, r30
     87e:	fe 0a       	sbc	r15, r30
     880:	ea 14       	cp	r14, r10
     882:	fb 04       	cpc	r15, r11
     884:	09 f0       	breq	.+2      	; 0x888 <__stack+0x29>
     886:	6a cf       	rjmp	.-300    	; 0x75c <_ZN5Gates17reverse_kroneckerEP7Complexi+0xaa>
				}
				index_rev_kro+=2;
			}
			break;
		}
	print_states(reversed_kron_size,reversed_kronecker,"Reversed kronecker AFTER mul: ");
     888:	45 e7       	ldi	r20, 0x75	; 117
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	b4 01       	movw	r22, r8
     88e:	89 a1       	ldd	r24, Y+33	; 0x21
     890:	9a a1       	ldd	r25, Y+34	; 0x22
     892:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12print_statesiP7ComplexPc>
	return reversed_kronecker;
}
     896:	c4 01       	movw	r24, r8
     898:	a4 96       	adiw	r28, 0x24	; 36
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	af 90       	pop	r10
     8b8:	9f 90       	pop	r9
     8ba:	8f 90       	pop	r8
     8bc:	7f 90       	pop	r7
     8be:	6f 90       	pop	r6
     8c0:	5f 90       	pop	r5
     8c2:	4f 90       	pop	r4
     8c4:	3f 90       	pop	r3
     8c6:	2f 90       	pop	r2
     8c8:	08 95       	ret

000008ca <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     8ca:	2f 92       	push	r2
     8cc:	3f 92       	push	r3
     8ce:	4f 92       	push	r4
     8d0:	5f 92       	push	r5
     8d2:	6f 92       	push	r6
     8d4:	7f 92       	push	r7
     8d6:	8f 92       	push	r8
     8d8:	9f 92       	push	r9
     8da:	af 92       	push	r10
     8dc:	bf 92       	push	r11
     8de:	cf 92       	push	r12
     8e0:	df 92       	push	r13
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	28 97       	sbiw	r28, 0x08	; 8
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	7c 01       	movw	r14, r24
     900:	5b 01       	movw	r10, r22
     902:	4a 01       	movw	r8, r20
     904:	3e 83       	std	Y+6, r19	; 0x06
     906:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     908:	41 30       	cpi	r20, 0x01	; 1
     90a:	51 05       	cpc	r21, r1
     90c:	09 f4       	brne	.+2      	; 0x910 <_ZN5Gates9kroneckerEP7Complexii+0x46>
     90e:	b1 c0       	rjmp	.+354    	; 0xa72 <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     910:	14 16       	cp	r1, r20
     912:	15 06       	cpc	r1, r21
     914:	0c f0       	brlt	.+2      	; 0x918 <_ZN5Gates9kroneckerEP7Complexii+0x4e>
     916:	b0 c0       	rjmp	.+352    	; 0xa78 <_ZN5Gates9kroneckerEP7Complexii+0x1ae>
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	01 e0       	ldi	r16, 0x01	; 1
     91e:	10 e0       	ldi	r17, 0x00	; 0
     920:	00 0f       	add	r16, r16
     922:	11 1f       	adc	r17, r17
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	88 15       	cp	r24, r8
     928:	99 05       	cpc	r25, r9
     92a:	d1 f7       	brne	.-12     	; 0x920 <_ZN5Gates9kroneckerEP7Complexii+0x56>
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     92c:	c8 01       	movw	r24, r16
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
     93e:	89 83       	std	Y+1, r24	; 0x01
     940:	9a 83       	std	Y+2, r25	; 0x02
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     942:	10 16       	cp	r1, r16
     944:	11 06       	cpc	r1, r17
     946:	0c f4       	brge	.+2      	; 0x94a <_ZN5Gates9kroneckerEP7Complexii+0x80>
     948:	9f c0       	rjmp	.+318    	; 0xa88 <_ZN5Gates9kroneckerEP7Complexii+0x1be>
     94a:	40 c0       	rjmp	.+128    	; 0x9cc <_ZN5Gates9kroneckerEP7Complexii+0x102>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     94c:	2e 16       	cp	r2, r30
     94e:	3f 06       	cpc	r3, r31
     950:	29 f4       	brne	.+10     	; 0x95c <_ZN5Gates9kroneckerEP7Complexii+0x92>
     952:	9f ef       	ldi	r25, 0xFF	; 255
     954:	49 1a       	sub	r4, r25
     956:	59 0a       	sbc	r5, r25
     958:	eb 81       	ldd	r30, Y+3	; 0x03
     95a:	fc 81       	ldd	r31, Y+4	; 0x04
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     95c:	7f 01       	movw	r14, r30
     95e:	af ef       	ldi	r26, 0xFF	; 255
     960:	ea 1a       	sub	r14, r26
     962:	fa 0a       	sbc	r15, r26
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	ee 0f       	add	r30, r30
     96e:	ff 1f       	adc	r31, r31
     970:	ea 0d       	add	r30, r10
     972:	fb 1d       	adc	r31, r11
     974:	00 81       	ld	r16, Z
     976:	11 81       	ldd	r17, Z+1	; 0x01
     978:	22 81       	ldd	r18, Z+2	; 0x02
     97a:	33 81       	ldd	r19, Z+3	; 0x03
     97c:	44 81       	ldd	r20, Z+4	; 0x04
     97e:	55 81       	ldd	r21, Z+5	; 0x05
     980:	66 81       	ldd	r22, Z+6	; 0x06
     982:	77 81       	ldd	r23, Z+7	; 0x07
     984:	c2 01       	movw	r24, r4
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	8a 0d       	add	r24, r10
     994:	9b 1d       	adc	r25, r11
     996:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN7Complex3mulES_>
     99a:	ef 81       	ldd	r30, Y+7	; 0x07
     99c:	f8 85       	ldd	r31, Y+8	; 0x08
     99e:	20 83       	st	Z, r18
     9a0:	31 83       	std	Z+1, r19	; 0x01
     9a2:	42 83       	std	Z+2, r20	; 0x02
     9a4:	53 83       	std	Z+3, r21	; 0x03
     9a6:	64 83       	std	Z+4, r22	; 0x04
     9a8:	75 83       	std	Z+5, r23	; 0x05
     9aa:	86 83       	std	Z+6, r24	; 0x06
     9ac:	97 83       	std	Z+7, r25	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     9ae:	ff ef       	ldi	r31, 0xFF	; 255
     9b0:	6f 1a       	sub	r6, r31
     9b2:	7f 0a       	sbc	r7, r31
     9b4:	8f 81       	ldd	r24, Y+7	; 0x07
     9b6:	98 85       	ldd	r25, Y+8	; 0x08
     9b8:	08 96       	adiw	r24, 0x08	; 8
     9ba:	98 87       	std	Y+8, r25	; 0x08
     9bc:	8f 83       	std	Y+7, r24	; 0x07
     9be:	6c 14       	cp	r6, r12
     9c0:	7d 04       	cpc	r7, r13
     9c2:	14 f4       	brge	.+4      	; 0x9c8 <_ZN5Gates9kroneckerEP7Complexii+0xfe>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     9c4:	f7 01       	movw	r30, r14
     9c6:	c2 cf       	rjmp	.-124    	; 0x94c <_ZN5Gates9kroneckerEP7Complexii+0x82>
     9c8:	86 01       	movw	r16, r12
     9ca:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     9cc:	ad 81       	ldd	r26, Y+5	; 0x05
     9ce:	be 81       	ldd	r27, Y+6	; 0x06
     9d0:	ab 2b       	or	r26, r27
     9d2:	b1 f5       	brne	.+108    	; 0xa40 <_ZN5Gates9kroneckerEP7Complexii+0x176>
     9d4:	44 c0       	rjmp	.+136    	; 0xa5e <_ZN5Gates9kroneckerEP7Complexii+0x194>
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     9d6:	58 01       	movw	r10, r16
     9d8:	f8 01       	movw	r30, r16
     9da:	40 81       	ld	r20, Z
     9dc:	51 81       	ldd	r21, Z+1	; 0x01
     9de:	62 81       	ldd	r22, Z+2	; 0x02
     9e0:	73 81       	ldd	r23, Z+3	; 0x03
     9e2:	c7 01       	movw	r24, r14
     9e4:	0e 94 29 03 	call	0x652	; 0x652 <_ZN5Gates5touchEd>
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	09 f5       	brne	.+66     	; 0xa2e <_ZN5Gates9kroneckerEP7Complexii+0x164>
     9ec:	84 01       	movw	r16, r8
     9ee:	c8 01       	movw	r24, r16
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	86 0d       	add	r24, r6
     9fe:	97 1d       	adc	r25, r7
     a00:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     a02:	10 82       	st	Z, r1
     a04:	11 82       	std	Z+1, r1	; 0x01
     a06:	12 82       	std	Z+2, r1	; 0x02
     a08:	13 82       	std	Z+3, r1	; 0x03
     a0a:	14 82       	std	Z+4, r1	; 0x04
     a0c:	15 82       	std	Z+5, r1	; 0x05
     a0e:	16 82       	std	Z+6, r1	; 0x06
     a10:	17 82       	std	Z+7, r1	; 0x07
     a12:	38 96       	adiw	r30, 0x08	; 8
     a14:	e8 17       	cp	r30, r24
     a16:	f9 07       	cpc	r31, r25
     a18:	a1 f7       	brne	.-24     	; 0xa02 <_ZN5Gates9kroneckerEP7Complexii+0x138>
				kronvec[i].re=binary_touch;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e8       	ldi	r26, 0x80	; 128
     a20:	bf e3       	ldi	r27, 0x3F	; 63
     a22:	f5 01       	movw	r30, r10
     a24:	80 83       	st	Z, r24
     a26:	91 83       	std	Z+1, r25	; 0x01
     a28:	a2 83       	std	Z+2, r26	; 0x02
     a2a:	b3 83       	std	Z+3, r27	; 0x03
     a2c:	18 c0       	rjmp	.+48     	; 0xa5e <_ZN5Gates9kroneckerEP7Complexii+0x194>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     a2e:	ff ef       	ldi	r31, 0xFF	; 255
     a30:	cf 1a       	sub	r12, r31
     a32:	df 0a       	sbc	r13, r31
     a34:	08 5f       	subi	r16, 0xF8	; 248
     a36:	1f 4f       	sbci	r17, 0xFF	; 255
     a38:	c8 14       	cp	r12, r8
     a3a:	d9 04       	cpc	r13, r9
     a3c:	61 f6       	brne	.-104    	; 0x9d6 <_ZN5Gates9kroneckerEP7Complexii+0x10c>
     a3e:	05 c0       	rjmp	.+10     	; 0xa4a <_ZN5Gates9kroneckerEP7Complexii+0x180>
     a40:	49 80       	ldd	r4, Y+1	; 0x01
     a42:	5a 80       	ldd	r5, Y+2	; 0x02
     a44:	21 2c       	mov	r2, r1
     a46:	31 2c       	mov	r3, r1
     a48:	48 01       	movw	r8, r16
     a4a:	18 14       	cp	r1, r8
     a4c:	19 04       	cpc	r1, r9
     a4e:	ec f7       	brge	.-6      	; 0xa4a <_ZN5Gates9kroneckerEP7Complexii+0x180>
     a50:	64 2c       	mov	r6, r4
     a52:	75 2c       	mov	r7, r5
     a54:	04 2d       	mov	r16, r4
     a56:	15 2d       	mov	r17, r5
     a58:	c2 2c       	mov	r12, r2
     a5a:	d3 2c       	mov	r13, r3
     a5c:	bc cf       	rjmp	.-136    	; 0x9d6 <_ZN5Gates9kroneckerEP7Complexii+0x10c>
				kronvec[i].re=binary_touch;
				binary_touch=0;
				break;
			}
	}
	print_states(kron_size,kronvec,"Kronecker: ");
     a5e:	44 e9       	ldi	r20, 0x94	; 148
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	69 81       	ldd	r22, Y+1	; 0x01
     a64:	7a 81       	ldd	r23, Y+2	; 0x02
     a66:	c8 01       	movw	r24, r16
     a68:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12print_statesiP7ComplexPc>
	return kronvec;
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	9a 81       	ldd	r25, Y+2	; 0x02
     a70:	1d c0       	rjmp	.+58     	; 0xaac <_ZN5Gates9kroneckerEP7Complexii+0x1e2>
	print_states(reversed_kron_size,reversed_kronecker,"Reversed kronecker AFTER mul: ");
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     a72:	86 2f       	mov	r24, r22
     a74:	9b 2d       	mov	r25, r11
     a76:	1a c0       	rjmp	.+52     	; 0xaac <_ZN5Gates9kroneckerEP7Complexii+0x1e2>
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
     a80:	89 83       	std	Y+1, r24	; 0x01
     a82:	9a 83       	std	Y+2, r25	; 0x02
     a84:	01 e0       	ldi	r16, 0x01	; 1
     a86:	10 e0       	ldi	r17, 0x00	; 0
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     a88:	14 01       	movw	r2, r8
     a8a:	22 0c       	add	r2, r2
     a8c:	33 1c       	adc	r3, r3
     a8e:	c9 80       	ldd	r12, Y+1	; 0x01
     a90:	da 80       	ldd	r13, Y+2	; 0x02
     a92:	f4 01       	movw	r30, r8
     a94:	61 2c       	mov	r6, r1
     a96:	71 2c       	mov	r7, r1
     a98:	41 2c       	mov	r4, r1
     a9a:	51 2c       	mov	r5, r1
     a9c:	8b 82       	std	Y+3, r8	; 0x03
     a9e:	9c 82       	std	Y+4, r9	; 0x04
     aa0:	c6 01       	movw	r24, r12
     aa2:	68 01       	movw	r12, r16
     aa4:	47 01       	movw	r8, r14
     aa6:	98 87       	std	Y+8, r25	; 0x08
     aa8:	8f 83       	std	Y+7, r24	; 0x07
     aaa:	50 cf       	rjmp	.-352    	; 0x94c <_ZN5Gates9kroneckerEP7Complexii+0x82>
				break;
			}
	}
	print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
}
     aac:	28 96       	adiw	r28, 0x08	; 8
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	9f 90       	pop	r9
     ace:	8f 90       	pop	r8
     ad0:	7f 90       	pop	r7
     ad2:	6f 90       	pop	r6
     ad4:	5f 90       	pop	r5
     ad6:	4f 90       	pop	r4
     ad8:	3f 90       	pop	r3
     ada:	2f 90       	pop	r2
     adc:	08 95       	ret

00000ade <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     ade:	2f 92       	push	r2
     ae0:	3f 92       	push	r3
     ae2:	4f 92       	push	r4
     ae4:	5f 92       	push	r5
     ae6:	6f 92       	push	r6
     ae8:	7f 92       	push	r7
     aea:	8f 92       	push	r8
     aec:	9f 92       	push	r9
     aee:	af 92       	push	r10
     af0:	bf 92       	push	r11
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	28 97       	sbiw	r28, 0x08	; 8
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	9e 83       	std	Y+6, r25	; 0x06
     b14:	8d 83       	std	Y+5, r24	; 0x05
     b16:	7a 83       	std	Y+2, r23	; 0x02
     b18:	69 83       	std	Y+1, r22	; 0x01
     b1a:	04 2f       	mov	r16, r20
     b1c:	15 2f       	mov	r17, r21
     b1e:	c2 2e       	mov	r12, r18
     b20:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     b22:	cb 01       	movw	r24, r22
     b24:	82 95       	swap	r24
     b26:	92 95       	swap	r25
     b28:	90 7f       	andi	r25, 0xF0	; 240
     b2a:	98 27       	eor	r25, r24
     b2c:	80 7f       	andi	r24, 0xF0	; 240
     b2e:	98 27       	eor	r25, r24
     b30:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
     b34:	8b 83       	std	Y+3, r24	; 0x03
     b36:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     b38:	29 80       	ldd	r2, Y+1	; 0x01
     b3a:	3a 80       	ldd	r3, Y+2	; 0x02
     b3c:	22 0c       	add	r2, r2
     b3e:	33 1c       	adc	r3, r3
     b40:	12 14       	cp	r1, r2
     b42:	13 04       	cpc	r1, r3
     b44:	0c f0       	brlt	.+2      	; 0xb48 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     b46:	ac c0       	rjmp	.+344    	; 0xca0 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     b48:	a8 2e       	mov	r10, r24
     b4a:	b9 2e       	mov	r11, r25
     b4c:	e0 2e       	mov	r14, r16
     b4e:	f1 2e       	mov	r15, r17
     b50:	0c 2d       	mov	r16, r12
     b52:	1d 2d       	mov	r17, r13
     b54:	81 2c       	mov	r8, r1
     b56:	91 2c       	mov	r9, r1
     b58:	b8 86       	std	Y+8, r11	; 0x08
     b5a:	af 82       	std	Y+7, r10	; 0x07
     b5c:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     b5e:	f7 01       	movw	r30, r14
     b60:	41 90       	ld	r4, Z+
     b62:	51 90       	ld	r5, Z+
     b64:	7f 01       	movw	r14, r30
     b66:	66 24       	eor	r6, r6
     b68:	57 fc       	sbrc	r5, 7
     b6a:	60 94       	com	r6
     b6c:	76 2c       	mov	r7, r6
     b6e:	c3 01       	movw	r24, r6
     b70:	b2 01       	movw	r22, r4
     b72:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
     b76:	2b ed       	ldi	r18, 0xDB	; 219
     b78:	3f e0       	ldi	r19, 0x0F	; 15
     b7a:	49 e4       	ldi	r20, 0x49	; 73
     b7c:	50 e4       	ldi	r21, 0x40	; 64
     b7e:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	44 eb       	ldi	r20, 0xB4	; 180
     b88:	53 e4       	ldi	r21, 0x43	; 67
     b8a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__divsf3>
     b8e:	0e 94 99 1b 	call	0x3732	; 0x3732 <cos>
     b92:	ef 81       	ldd	r30, Y+7	; 0x07
     b94:	f8 85       	ldd	r31, Y+8	; 0x08
     b96:	60 83       	st	Z, r22
     b98:	71 83       	std	Z+1, r23	; 0x01
     b9a:	82 83       	std	Z+2, r24	; 0x02
     b9c:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     b9e:	c3 01       	movw	r24, r6
     ba0:	b2 01       	movw	r22, r4
     ba2:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
     ba6:	2b ed       	ldi	r18, 0xDB	; 219
     ba8:	3f e0       	ldi	r19, 0x0F	; 15
     baa:	49 e4       	ldi	r20, 0x49	; 73
     bac:	50 e4       	ldi	r21, 0x40	; 64
     bae:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	44 eb       	ldi	r20, 0xB4	; 180
     bb8:	53 e4       	ldi	r21, 0x43	; 67
     bba:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__divsf3>
     bbe:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <sin>
     bc2:	2b 01       	movw	r4, r22
     bc4:	3c 01       	movw	r6, r24
     bc6:	58 01       	movw	r10, r16
     bc8:	f8 01       	movw	r30, r16
     bca:	61 91       	ld	r22, Z+
     bcc:	71 91       	ld	r23, Z+
     bce:	8f 01       	movw	r16, r30
     bd0:	88 27       	eor	r24, r24
     bd2:	77 fd       	sbrc	r23, 7
     bd4:	80 95       	com	r24
     bd6:	98 2f       	mov	r25, r24
     bd8:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
     bdc:	2b ed       	ldi	r18, 0xDB	; 219
     bde:	3f e0       	ldi	r19, 0x0F	; 15
     be0:	49 e4       	ldi	r20, 0x49	; 73
     be2:	50 e4       	ldi	r21, 0x40	; 64
     be4:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	44 e3       	ldi	r20, 0x34	; 52
     bee:	53 e4       	ldi	r21, 0x43	; 67
     bf0:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__divsf3>
     bf4:	0e 94 99 1b 	call	0x3732	; 0x3732 <cos>
     bf8:	9b 01       	movw	r18, r22
     bfa:	ac 01       	movw	r20, r24
     bfc:	c3 01       	movw	r24, r6
     bfe:	b2 01       	movw	r22, r4
     c00:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     c04:	ef 81       	ldd	r30, Y+7	; 0x07
     c06:	f8 85       	ldd	r31, Y+8	; 0x08
     c08:	60 87       	std	Z+8, r22	; 0x08
     c0a:	71 87       	std	Z+9, r23	; 0x09
     c0c:	82 87       	std	Z+10, r24	; 0x0a
     c0e:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     c10:	f6 01       	movw	r30, r12
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	88 27       	eor	r24, r24
     c18:	77 fd       	sbrc	r23, 7
     c1a:	80 95       	com	r24
     c1c:	98 2f       	mov	r25, r24
     c1e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
     c22:	2b ed       	ldi	r18, 0xDB	; 219
     c24:	3f e0       	ldi	r19, 0x0F	; 15
     c26:	49 e4       	ldi	r20, 0x49	; 73
     c28:	50 e4       	ldi	r21, 0x40	; 64
     c2a:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	44 eb       	ldi	r20, 0xB4	; 180
     c34:	53 e4       	ldi	r21, 0x43	; 67
     c36:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__divsf3>
     c3a:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <sin>
     c3e:	2b 01       	movw	r4, r22
     c40:	3c 01       	movw	r6, r24
     c42:	f5 01       	movw	r30, r10
     c44:	60 81       	ld	r22, Z
     c46:	71 81       	ldd	r23, Z+1	; 0x01
     c48:	88 27       	eor	r24, r24
     c4a:	77 fd       	sbrc	r23, 7
     c4c:	80 95       	com	r24
     c4e:	98 2f       	mov	r25, r24
     c50:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
     c54:	2b ed       	ldi	r18, 0xDB	; 219
     c56:	3f e0       	ldi	r19, 0x0F	; 15
     c58:	49 e4       	ldi	r20, 0x49	; 73
     c5a:	50 e4       	ldi	r21, 0x40	; 64
     c5c:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	44 e3       	ldi	r20, 0x34	; 52
     c66:	53 e4       	ldi	r21, 0x43	; 67
     c68:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__divsf3>
     c6c:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <sin>
     c70:	9b 01       	movw	r18, r22
     c72:	ac 01       	movw	r20, r24
     c74:	c3 01       	movw	r24, r6
     c76:	b2 01       	movw	r22, r4
     c78:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     c7c:	ef 81       	ldd	r30, Y+7	; 0x07
     c7e:	f8 85       	ldd	r31, Y+8	; 0x08
     c80:	64 87       	std	Z+12, r22	; 0x0c
     c82:	75 87       	std	Z+13, r23	; 0x0d
     c84:	86 87       	std	Z+14, r24	; 0x0e
     c86:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     c88:	f2 e0       	ldi	r31, 0x02	; 2
     c8a:	8f 0e       	add	r8, r31
     c8c:	91 1c       	adc	r9, r1
     c8e:	8f 81       	ldd	r24, Y+7	; 0x07
     c90:	98 85       	ldd	r25, Y+8	; 0x08
     c92:	40 96       	adiw	r24, 0x10	; 16
     c94:	98 87       	std	Y+8, r25	; 0x08
     c96:	8f 83       	std	Y+7, r24	; 0x07
     c98:	82 14       	cp	r8, r2
     c9a:	93 04       	cpc	r9, r3
     c9c:	0c f4       	brge	.+2      	; 0xca0 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     c9e:	5e cf       	rjmp	.-324    	; 0xb5c <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
	print_states(qb_count*2,vec,"Before: ");
     ca0:	40 ea       	ldi	r20, 0xA0	; 160
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	6b 81       	ldd	r22, Y+3	; 0x03
     ca6:	7c 81       	ldd	r23, Y+4	; 0x04
     ca8:	c1 01       	movw	r24, r2
     caa:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12print_statesiP7ComplexPc>
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     cae:	21 e0       	ldi	r18, 0x01	; 1
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	49 81       	ldd	r20, Y+1	; 0x01
     cb4:	5a 81       	ldd	r21, Y+2	; 0x02
     cb6:	6b 81       	ldd	r22, Y+3	; 0x03
     cb8:	7c 81       	ldd	r23, Y+4	; 0x04
     cba:	8d 81       	ldd	r24, Y+5	; 0x05
     cbc:	9e 81       	ldd	r25, Y+6	; 0x06
     cbe:	0e 94 65 04 	call	0x8ca	; 0x8ca <_ZN5Gates9kroneckerEP7Complexii>
}
     cc2:	28 96       	adiw	r28, 0x08	; 8
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	af 90       	pop	r10
     ce2:	9f 90       	pop	r9
     ce4:	8f 90       	pop	r8
     ce6:	7f 90       	pop	r7
     ce8:	6f 90       	pop	r6
     cea:	5f 90       	pop	r5
     cec:	4f 90       	pop	r4
     cee:	3f 90       	pop	r3
     cf0:	2f 90       	pop	r2
     cf2:	08 95       	ret

00000cf4 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     cf4:	6f 92       	push	r6
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	86 2e       	mov	r8, r22
     d12:	97 2e       	mov	r9, r23
     d14:	5a 01       	movw	r10, r20
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     d16:	14 16       	cp	r1, r20
     d18:	15 06       	cpc	r1, r21
     d1a:	6c f4       	brge	.+26     	; 0xd36 <_ZN5Gates8vec2amplEP7Complexi+0x42>
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	cc 24       	eor	r12, r12
     d22:	c3 94       	inc	r12
     d24:	d1 2c       	mov	r13, r1
     d26:	cc 0c       	add	r12, r12
     d28:	dd 1c       	adc	r13, r13
     d2a:	2f 5f       	subi	r18, 0xFF	; 255
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	2a 15       	cp	r18, r10
     d30:	3b 05       	cpc	r19, r11
     d32:	c9 f7       	brne	.-14     	; 0xd26 <_ZN5Gates8vec2amplEP7Complexi+0x32>
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <_ZN5Gates8vec2amplEP7Complexi+0x48>
     d36:	cc 24       	eor	r12, r12
     d38:	c3 94       	inc	r12
     d3a:	d1 2c       	mov	r13, r1
	print_states(qb_count*2,vec,"Before: ");
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
}
int * Gates::vec2ampl(Complex * vec,int qb_count){
	int kron_size=custom_pow(2,qb_count);
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     d3c:	22 e0       	ldi	r18, 0x02	; 2
     d3e:	a2 16       	cp	r10, r18
     d40:	b1 04       	cpc	r11, r1
     d42:	3c f0       	brlt	.+14     	; 0xd52 <_ZN5Gates8vec2amplEP7Complexi+0x5e>
     d44:	a6 01       	movw	r20, r12
     d46:	68 2d       	mov	r22, r8
     d48:	79 2d       	mov	r23, r9
     d4a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN5Gates17reverse_kroneckerEP7Complexi>
     d4e:	88 2e       	mov	r8, r24
     d50:	99 2e       	mov	r9, r25
	
	int* newthephi=(int*)malloc(sizeof(int)*(qb_count*2));
     d52:	c5 01       	movw	r24, r10
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
     d60:	68 2e       	mov	r6, r24
     d62:	79 2e       	mov	r7, r25
	for(int i=0;i<qb_count*2;i++) if(i%2==0) newthephi[i]=(360*acos(vec[i].re))/M_PI; else newthephi[i]=(180*vec[i].arg())/M_PI;
     d64:	aa 0c       	add	r10, r10
     d66:	bb 1c       	adc	r11, r11
     d68:	1a 14       	cp	r1, r10
     d6a:	1b 04       	cpc	r1, r11
     d6c:	f4 f5       	brge	.+124    	; 0xdea <_ZN5Gates8vec2amplEP7Complexi+0xf6>
     d6e:	e8 2c       	mov	r14, r8
     d70:	f9 2c       	mov	r15, r9
     d72:	08 2f       	mov	r16, r24
     d74:	19 2f       	mov	r17, r25
     d76:	c0 e0       	ldi	r28, 0x00	; 0
     d78:	d0 e0       	ldi	r29, 0x00	; 0
     d7a:	c0 fd       	sbrc	r28, 0
     d7c:	19 c0       	rjmp	.+50     	; 0xdb0 <_ZN5Gates8vec2amplEP7Complexi+0xbc>
     d7e:	f7 01       	movw	r30, r14
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	82 81       	ldd	r24, Z+2	; 0x02
     d86:	93 81       	ldd	r25, Z+3	; 0x03
     d88:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <acos>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	44 eb       	ldi	r20, 0xB4	; 180
     d92:	53 e4       	ldi	r21, 0x43	; 67
     d94:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     d98:	2b ed       	ldi	r18, 0xDB	; 219
     d9a:	3f e0       	ldi	r19, 0x0F	; 15
     d9c:	49 e4       	ldi	r20, 0x49	; 73
     d9e:	50 e4       	ldi	r21, 0x40	; 64
     da0:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__divsf3>
     da4:	0e 94 35 1c 	call	0x386a	; 0x386a <__fixsfsi>
     da8:	f8 01       	movw	r30, r16
     daa:	71 83       	std	Z+1, r23	; 0x01
     dac:	60 83       	st	Z, r22
     dae:	14 c0       	rjmp	.+40     	; 0xdd8 <_ZN5Gates8vec2amplEP7Complexi+0xe4>
     db0:	c7 01       	movw	r24, r14
     db2:	0e 94 02 02 	call	0x404	; 0x404 <_ZN7Complex3argEv>
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	44 e3       	ldi	r20, 0x34	; 52
     dbc:	53 e4       	ldi	r21, 0x43	; 67
     dbe:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <__mulsf3>
     dc2:	2b ed       	ldi	r18, 0xDB	; 219
     dc4:	3f e0       	ldi	r19, 0x0F	; 15
     dc6:	49 e4       	ldi	r20, 0x49	; 73
     dc8:	50 e4       	ldi	r21, 0x40	; 64
     dca:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__divsf3>
     dce:	0e 94 35 1c 	call	0x386a	; 0x386a <__fixsfsi>
     dd2:	f8 01       	movw	r30, r16
     dd4:	71 83       	std	Z+1, r23	; 0x01
     dd6:	60 83       	st	Z, r22
     dd8:	21 96       	adiw	r28, 0x01	; 1
     dda:	f8 e0       	ldi	r31, 0x08	; 8
     ddc:	ef 0e       	add	r14, r31
     dde:	f1 1c       	adc	r15, r1
     de0:	0e 5f       	subi	r16, 0xFE	; 254
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	ca 15       	cp	r28, r10
     de6:	db 05       	cpc	r29, r11
     de8:	41 f6       	brne	.-112    	; 0xd7a <_ZN5Gates8vec2amplEP7Complexi+0x86>

	print_states(kron_size,vec,"After: ");
     dea:	49 ea       	ldi	r20, 0xA9	; 169
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	68 2d       	mov	r22, r8
     df0:	79 2d       	mov	r23, r9
     df2:	c6 01       	movw	r24, r12
     df4:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     df8:	86 2d       	mov	r24, r6
     dfa:	97 2d       	mov	r25, r7
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	bf 90       	pop	r11
     e0e:	af 90       	pop	r10
     e10:	9f 90       	pop	r9
     e12:	8f 90       	pop	r8
     e14:	7f 90       	pop	r7
     e16:	6f 90       	pop	r6
     e18:	08 95       	ret

00000e1a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     e1a:	2f 92       	push	r2
     e1c:	3f 92       	push	r3
     e1e:	4f 92       	push	r4
     e20:	5f 92       	push	r5
     e22:	6f 92       	push	r6
     e24:	7f 92       	push	r7
     e26:	8f 92       	push	r8
     e28:	9f 92       	push	r9
     e2a:	af 92       	push	r10
     e2c:	bf 92       	push	r11
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	60 97       	sbiw	r28, 0x10	; 16
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	4b 01       	movw	r8, r22
     e50:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     e52:	80 e1       	ldi	r24, 0x10	; 16
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
     e5a:	38 2e       	mov	r3, r24
     e5c:	29 2e       	mov	r2, r25
     e5e:	c8 2e       	mov	r12, r24
     e60:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     e62:	a1 2c       	mov	r10, r1
     e64:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e66:	24 01       	movw	r4, r8
     e68:	88 e0       	ldi	r24, 0x08	; 8
     e6a:	48 0e       	add	r4, r24
     e6c:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     e6e:	ce 01       	movw	r24, r28
     e70:	09 96       	adiw	r24, 0x09	; 9
     e72:	0e 94 00 01 	call	0x200	; 0x200 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e76:	75 01       	movw	r14, r10
     e78:	ee 0c       	add	r14, r14
     e7a:	ff 1c       	adc	r15, r15
     e7c:	ee 0c       	add	r14, r14
     e7e:	ff 1c       	adc	r15, r15
     e80:	ee 0c       	add	r14, r14
     e82:	ff 1c       	adc	r15, r15
     e84:	e6 0c       	add	r14, r6
     e86:	f7 1c       	adc	r15, r7
     e88:	d7 01       	movw	r26, r14
     e8a:	0c 91       	ld	r16, X
     e8c:	11 96       	adiw	r26, 0x01	; 1
     e8e:	1c 91       	ld	r17, X
     e90:	11 97       	sbiw	r26, 0x01	; 1
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	2c 91       	ld	r18, X
     e96:	12 97       	sbiw	r26, 0x02	; 2
     e98:	13 96       	adiw	r26, 0x03	; 3
     e9a:	3c 91       	ld	r19, X
     e9c:	13 97       	sbiw	r26, 0x03	; 3
     e9e:	14 96       	adiw	r26, 0x04	; 4
     ea0:	4c 91       	ld	r20, X
     ea2:	14 97       	sbiw	r26, 0x04	; 4
     ea4:	15 96       	adiw	r26, 0x05	; 5
     ea6:	5c 91       	ld	r21, X
     ea8:	15 97       	sbiw	r26, 0x05	; 5
     eaa:	16 96       	adiw	r26, 0x06	; 6
     eac:	6c 91       	ld	r22, X
     eae:	16 97       	sbiw	r26, 0x06	; 6
     eb0:	17 96       	adiw	r26, 0x07	; 7
     eb2:	7c 91       	ld	r23, X
     eb4:	c4 01       	movw	r24, r8
     eb6:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN7Complex3mulES_>
     eba:	02 2f       	mov	r16, r18
     ebc:	13 2f       	mov	r17, r19
     ebe:	24 2f       	mov	r18, r20
     ec0:	35 2f       	mov	r19, r21
     ec2:	46 2f       	mov	r20, r22
     ec4:	57 2f       	mov	r21, r23
     ec6:	68 2f       	mov	r22, r24
     ec8:	79 2f       	mov	r23, r25
     eca:	ce 01       	movw	r24, r28
     ecc:	09 96       	adiw	r24, 0x09	; 9
     ece:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN7Complex3addES_>
     ed2:	29 87       	std	Y+9, r18	; 0x09
     ed4:	3a 87       	std	Y+10, r19	; 0x0a
     ed6:	4b 87       	std	Y+11, r20	; 0x0b
     ed8:	5c 87       	std	Y+12, r21	; 0x0c
     eda:	6d 87       	std	Y+13, r22	; 0x0d
     edc:	7e 87       	std	Y+14, r23	; 0x0e
     ede:	8f 87       	std	Y+15, r24	; 0x0f
     ee0:	98 8b       	std	Y+16, r25	; 0x10
     ee2:	f7 01       	movw	r30, r14
     ee4:	70 96       	adiw	r30, 0x10	; 16
     ee6:	d7 01       	movw	r26, r14
     ee8:	50 96       	adiw	r26, 0x10	; 16
     eea:	0c 91       	ld	r16, X
     eec:	11 81       	ldd	r17, Z+1	; 0x01
     eee:	22 81       	ldd	r18, Z+2	; 0x02
     ef0:	33 81       	ldd	r19, Z+3	; 0x03
     ef2:	44 81       	ldd	r20, Z+4	; 0x04
     ef4:	55 81       	ldd	r21, Z+5	; 0x05
     ef6:	66 81       	ldd	r22, Z+6	; 0x06
     ef8:	77 81       	ldd	r23, Z+7	; 0x07
     efa:	c2 01       	movw	r24, r4
     efc:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN7Complex3mulES_>
     f00:	02 2f       	mov	r16, r18
     f02:	13 2f       	mov	r17, r19
     f04:	24 2f       	mov	r18, r20
     f06:	35 2f       	mov	r19, r21
     f08:	46 2f       	mov	r20, r22
     f0a:	57 2f       	mov	r21, r23
     f0c:	68 2f       	mov	r22, r24
     f0e:	79 2f       	mov	r23, r25
     f10:	ce 01       	movw	r24, r28
     f12:	09 96       	adiw	r24, 0x09	; 9
     f14:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN7Complex3addES_>
     f18:	29 87       	std	Y+9, r18	; 0x09
     f1a:	3a 87       	std	Y+10, r19	; 0x0a
     f1c:	4b 87       	std	Y+11, r20	; 0x0b
     f1e:	5c 87       	std	Y+12, r21	; 0x0c
     f20:	6d 87       	std	Y+13, r22	; 0x0d
     f22:	7e 87       	std	Y+14, r23	; 0x0e
     f24:	8f 87       	std	Y+15, r24	; 0x0f
     f26:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	ab 85       	ldd	r26, Y+11	; 0x0b
     f2e:	bc 85       	ldd	r27, Y+12	; 0x0c
     f30:	f6 01       	movw	r30, r12
     f32:	80 83       	st	Z, r24
     f34:	91 83       	std	Z+1, r25	; 0x01
     f36:	a2 83       	std	Z+2, r26	; 0x02
     f38:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3e:	af 85       	ldd	r26, Y+15	; 0x0f
     f40:	b8 89       	ldd	r27, Y+16	; 0x10
     f42:	84 83       	std	Z+4, r24	; 0x04
     f44:	95 83       	std	Z+5, r25	; 0x05
     f46:	a6 83       	std	Z+6, r26	; 0x06
     f48:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     f4a:	ff ef       	ldi	r31, 0xFF	; 255
     f4c:	af 1a       	sub	r10, r31
     f4e:	bf 0a       	sbc	r11, r31
     f50:	88 e0       	ldi	r24, 0x08	; 8
     f52:	c8 0e       	add	r12, r24
     f54:	d1 1c       	adc	r13, r1
     f56:	a2 e0       	ldi	r26, 0x02	; 2
     f58:	aa 16       	cp	r10, r26
     f5a:	b1 04       	cpc	r11, r1
     f5c:	09 f0       	breq	.+2      	; 0xf60 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     f5e:	87 cf       	rjmp	.-242    	; 0xe6e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     f60:	83 2d       	mov	r24, r3
     f62:	92 2d       	mov	r25, r2
     f64:	60 96       	adiw	r28, 0x10	; 16
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	ef 90       	pop	r14
     f7c:	df 90       	pop	r13
     f7e:	cf 90       	pop	r12
     f80:	bf 90       	pop	r11
     f82:	af 90       	pop	r10
     f84:	9f 90       	pop	r9
     f86:	8f 90       	pop	r8
     f88:	7f 90       	pop	r7
     f8a:	6f 90       	pop	r6
     f8c:	5f 90       	pop	r5
     f8e:	4f 90       	pop	r4
     f90:	3f 90       	pop	r3
     f92:	2f 90       	pop	r2
     f94:	08 95       	ret

00000f96 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     f96:	2f 92       	push	r2
     f98:	3f 92       	push	r3
     f9a:	4f 92       	push	r4
     f9c:	5f 92       	push	r5
     f9e:	6f 92       	push	r6
     fa0:	7f 92       	push	r7
     fa2:	8f 92       	push	r8
     fa4:	9f 92       	push	r9
     fa6:	af 92       	push	r10
     fa8:	bf 92       	push	r11
     faa:	cf 92       	push	r12
     fac:	df 92       	push	r13
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	64 97       	sbiw	r28, 0x14	; 20
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	3b 01       	movw	r6, r22
     fcc:	e4 2e       	mov	r14, r20
     fce:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     fd0:	80 e2       	ldi	r24, 0x20	; 32
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
     fd8:	8b 8b       	std	Y+19, r24	; 0x13
     fda:	9c 8b       	std	Y+20, r25	; 0x14
     fdc:	48 2e       	mov	r4, r24
     fde:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     fe0:	81 2c       	mov	r8, r1
     fe2:	91 2c       	mov	r9, r1
     fe4:	e9 8a       	std	Y+17, r14	; 0x11
     fe6:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     fe8:	21 2c       	mov	r2, r1
     fea:	31 2c       	mov	r3, r1
     fec:	ce 01       	movw	r24, r28
     fee:	09 96       	adiw	r24, 0x09	; 9
     ff0:	0e 94 00 01 	call	0x200	; 0x200 <_ZN7ComplexC1Ev>
     ff4:	c9 88       	ldd	r12, Y+17	; 0x11
     ff6:	da 88       	ldd	r13, Y+18	; 0x12
     ff8:	e2 2c       	mov	r14, r2
     ffa:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     ffc:	54 01       	movw	r10, r8
     ffe:	aa 0c       	add	r10, r10
    1000:	bb 1c       	adc	r11, r11
    1002:	aa 0c       	add	r10, r10
    1004:	bb 1c       	adc	r11, r11
    1006:	aa 0c       	add	r10, r10
    1008:	bb 1c       	adc	r11, r11
    100a:	f5 01       	movw	r30, r10
    100c:	ec 0d       	add	r30, r12
    100e:	fd 1d       	adc	r31, r13
    1010:	00 81       	ld	r16, Z
    1012:	11 81       	ldd	r17, Z+1	; 0x01
    1014:	22 81       	ldd	r18, Z+2	; 0x02
    1016:	33 81       	ldd	r19, Z+3	; 0x03
    1018:	44 81       	ldd	r20, Z+4	; 0x04
    101a:	55 81       	ldd	r21, Z+5	; 0x05
    101c:	66 81       	ldd	r22, Z+6	; 0x06
    101e:	77 81       	ldd	r23, Z+7	; 0x07
    1020:	c3 01       	movw	r24, r6
    1022:	8e 0d       	add	r24, r14
    1024:	9f 1d       	adc	r25, r15
    1026:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN7Complex3mulES_>
    102a:	29 83       	std	Y+1, r18	; 0x01
    102c:	3a 83       	std	Y+2, r19	; 0x02
    102e:	4b 83       	std	Y+3, r20	; 0x03
    1030:	5c 83       	std	Y+4, r21	; 0x04
    1032:	6d 83       	std	Y+5, r22	; 0x05
    1034:	7e 83       	std	Y+6, r23	; 0x06
    1036:	8f 83       	std	Y+7, r24	; 0x07
    1038:	98 87       	std	Y+8, r25	; 0x08
    103a:	02 2f       	mov	r16, r18
    103c:	13 2f       	mov	r17, r19
    103e:	24 2f       	mov	r18, r20
    1040:	35 2f       	mov	r19, r21
    1042:	46 2f       	mov	r20, r22
    1044:	57 2f       	mov	r21, r23
    1046:	68 2f       	mov	r22, r24
    1048:	79 2f       	mov	r23, r25
    104a:	ce 01       	movw	r24, r28
    104c:	09 96       	adiw	r24, 0x09	; 9
    104e:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN7Complex3addES_>
    1052:	29 87       	std	Y+9, r18	; 0x09
    1054:	3a 87       	std	Y+10, r19	; 0x0a
    1056:	4b 87       	std	Y+11, r20	; 0x0b
    1058:	5c 87       	std	Y+12, r21	; 0x0c
    105a:	6d 87       	std	Y+13, r22	; 0x0d
    105c:	7e 87       	std	Y+14, r23	; 0x0e
    105e:	8f 87       	std	Y+15, r24	; 0x0f
    1060:	98 8b       	std	Y+16, r25	; 0x10
    1062:	88 e0       	ldi	r24, 0x08	; 8
    1064:	e8 0e       	add	r14, r24
    1066:	f1 1c       	adc	r15, r1
    1068:	e0 e2       	ldi	r30, 0x20	; 32
    106a:	ce 0e       	add	r12, r30
    106c:	d1 1c       	adc	r13, r1
    106e:	f0 e2       	ldi	r31, 0x20	; 32
    1070:	ef 16       	cp	r14, r31
    1072:	f1 04       	cpc	r15, r1
    1074:	51 f6       	brne	.-108    	; 0x100a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
    1076:	89 85       	ldd	r24, Y+9	; 0x09
    1078:	9a 85       	ldd	r25, Y+10	; 0x0a
    107a:	ab 85       	ldd	r26, Y+11	; 0x0b
    107c:	bc 85       	ldd	r27, Y+12	; 0x0c
    107e:	f2 01       	movw	r30, r4
    1080:	80 83       	st	Z, r24
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	a2 83       	std	Z+2, r26	; 0x02
    1086:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    1088:	8d 85       	ldd	r24, Y+13	; 0x0d
    108a:	9e 85       	ldd	r25, Y+14	; 0x0e
    108c:	af 85       	ldd	r26, Y+15	; 0x0f
    108e:	b8 89       	ldd	r27, Y+16	; 0x10
    1090:	84 83       	std	Z+4, r24	; 0x04
    1092:	95 83       	std	Z+5, r25	; 0x05
    1094:	a6 83       	std	Z+6, r26	; 0x06
    1096:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    1098:	ff ef       	ldi	r31, 0xFF	; 255
    109a:	8f 1a       	sub	r8, r31
    109c:	9f 0a       	sbc	r9, r31
    109e:	88 e0       	ldi	r24, 0x08	; 8
    10a0:	48 0e       	add	r4, r24
    10a2:	51 1c       	adc	r5, r1
    10a4:	e4 e0       	ldi	r30, 0x04	; 4
    10a6:	8e 16       	cp	r8, r30
    10a8:	91 04       	cpc	r9, r1
    10aa:	09 f0       	breq	.+2      	; 0x10ae <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
    10ac:	9f cf       	rjmp	.-194    	; 0xfec <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    10ae:	8b 89       	ldd	r24, Y+19	; 0x13
    10b0:	9c 89       	ldd	r25, Y+20	; 0x14
    10b2:	64 96       	adiw	r28, 0x14	; 20
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	bf 90       	pop	r11
    10d0:	af 90       	pop	r10
    10d2:	9f 90       	pop	r9
    10d4:	8f 90       	pop	r8
    10d6:	7f 90       	pop	r7
    10d8:	6f 90       	pop	r6
    10da:	5f 90       	pop	r5
    10dc:	4f 90       	pop	r4
    10de:	3f 90       	pop	r3
    10e0:	2f 90       	pop	r2
    10e2:	08 95       	ret

000010e4 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	a4 97       	sbiw	r28, 0x24	; 36
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	7c 01       	movw	r14, r24
    110a:	5b 01       	movw	r10, r22
    110c:	6a 01       	movw	r12, r20
	Complex x_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(0,0),Complex(1,0)},
											 {Complex(1,0),Complex(0,0)}};
    110e:	00 e0       	ldi	r16, 0x00	; 0
    1110:	10 e0       	ldi	r17, 0x00	; 0
    1112:	98 01       	movw	r18, r16
    1114:	b9 01       	movw	r22, r18
    1116:	a8 01       	movw	r20, r16
    1118:	ce 01       	movw	r24, r28
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1120:	00 e0       	ldi	r16, 0x00	; 0
    1122:	10 e0       	ldi	r17, 0x00	; 0
    1124:	98 01       	movw	r18, r16
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	60 e8       	ldi	r22, 0x80	; 128
    112c:	7f e3       	ldi	r23, 0x3F	; 63
    112e:	ce 01       	movw	r24, r28
    1130:	09 96       	adiw	r24, 0x09	; 9
    1132:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1136:	00 e0       	ldi	r16, 0x00	; 0
    1138:	10 e0       	ldi	r17, 0x00	; 0
    113a:	98 01       	movw	r18, r16
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	60 e8       	ldi	r22, 0x80	; 128
    1142:	7f e3       	ldi	r23, 0x3F	; 63
    1144:	ce 01       	movw	r24, r28
    1146:	41 96       	adiw	r24, 0x11	; 17
    1148:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    114c:	00 e0       	ldi	r16, 0x00	; 0
    114e:	10 e0       	ldi	r17, 0x00	; 0
    1150:	98 01       	movw	r18, r16
    1152:	b9 01       	movw	r22, r18
    1154:	a8 01       	movw	r20, r16
    1156:	ce 01       	movw	r24, r28
    1158:	49 96       	adiw	r24, 0x19	; 25
    115a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[1]={phi};
    115e:	bc a2       	std	Y+36, r11	; 0x24
    1160:	ab a2       	std	Y+35, r10	; 0x23
    1162:	da a2       	std	Y+34, r13	; 0x22
    1164:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),x_matrix),QB_SIZE1);
    1166:	9e 01       	movw	r18, r28
    1168:	2f 5d       	subi	r18, 0xDF	; 223
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	ae 01       	movw	r20, r28
    116e:	4d 5d       	subi	r20, 0xDD	; 221
    1170:	5f 4f       	sbci	r21, 0xFF	; 255
    1172:	61 e0       	ldi	r22, 0x01	; 1
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	c7 01       	movw	r24, r14
    1178:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    117c:	ae 01       	movw	r20, r28
    117e:	4f 5f       	subi	r20, 0xFF	; 255
    1180:	5f 4f       	sbci	r21, 0xFF	; 255
    1182:	bc 01       	movw	r22, r24
    1184:	c7 01       	movw	r24, r14
    1186:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    118a:	41 e0       	ldi	r20, 0x01	; 1
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	bc 01       	movw	r22, r24
    1190:	c7 01       	movw	r24, r14
    1192:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1196:	a4 96       	adiw	r28, 0x24	; 36
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	08 95       	ret

000011b8 <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    11b8:	af 92       	push	r10
    11ba:	bf 92       	push	r11
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	a4 97       	sbiw	r28, 0x24	; 36
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	7c 01       	movw	r14, r24
    11de:	5b 01       	movw	r10, r22
    11e0:	6a 01       	movw	r12, r20
	Complex y_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(0,0),Complex(0,-1)},
											 {Complex(0,1),Complex(0,0)}};
    11e2:	00 e0       	ldi	r16, 0x00	; 0
    11e4:	10 e0       	ldi	r17, 0x00	; 0
    11e6:	98 01       	movw	r18, r16
    11e8:	b9 01       	movw	r22, r18
    11ea:	a8 01       	movw	r20, r16
    11ec:	ce 01       	movw	r24, r28
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    11f4:	00 e0       	ldi	r16, 0x00	; 0
    11f6:	10 e0       	ldi	r17, 0x00	; 0
    11f8:	20 e8       	ldi	r18, 0x80	; 128
    11fa:	3f eb       	ldi	r19, 0xBF	; 191
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	ba 01       	movw	r22, r20
    1202:	ce 01       	movw	r24, r28
    1204:	09 96       	adiw	r24, 0x09	; 9
    1206:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    120a:	00 e0       	ldi	r16, 0x00	; 0
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	20 e8       	ldi	r18, 0x80	; 128
    1210:	3f e3       	ldi	r19, 0x3F	; 63
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	ba 01       	movw	r22, r20
    1218:	ce 01       	movw	r24, r28
    121a:	41 96       	adiw	r24, 0x11	; 17
    121c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1220:	00 e0       	ldi	r16, 0x00	; 0
    1222:	10 e0       	ldi	r17, 0x00	; 0
    1224:	98 01       	movw	r18, r16
    1226:	b9 01       	movw	r22, r18
    1228:	a8 01       	movw	r20, r16
    122a:	ce 01       	movw	r24, r28
    122c:	49 96       	adiw	r24, 0x19	; 25
    122e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1232:	bc a2       	std	Y+36, r11	; 0x24
    1234:	ab a2       	std	Y+35, r10	; 0x23
    1236:	da a2       	std	Y+34, r13	; 0x22
    1238:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),y_matrix),QB_SIZE1);
    123a:	9e 01       	movw	r18, r28
    123c:	2f 5d       	subi	r18, 0xDF	; 223
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
    1240:	ae 01       	movw	r20, r28
    1242:	4d 5d       	subi	r20, 0xDD	; 221
    1244:	5f 4f       	sbci	r21, 0xFF	; 255
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	c7 01       	movw	r24, r14
    124c:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    1250:	ae 01       	movw	r20, r28
    1252:	4f 5f       	subi	r20, 0xFF	; 255
    1254:	5f 4f       	sbci	r21, 0xFF	; 255
    1256:	bc 01       	movw	r22, r24
    1258:	c7 01       	movw	r24, r14
    125a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	bc 01       	movw	r22, r24
    1264:	c7 01       	movw	r24, r14
    1266:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    126a:	a4 96       	adiw	r28, 0x24	; 36
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	bf 90       	pop	r11
    1288:	af 90       	pop	r10
    128a:	08 95       	ret

0000128c <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    128c:	af 92       	push	r10
    128e:	bf 92       	push	r11
    1290:	cf 92       	push	r12
    1292:	df 92       	push	r13
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	a4 97       	sbiw	r28, 0x24	; 36
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	7c 01       	movw	r14, r24
    12b2:	5b 01       	movw	r10, r22
    12b4:	6a 01       	movw	r12, r20
	Complex z_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(1,0),Complex(0,0)},
											 {Complex(0,0),Complex(-1,0)}};
    12b6:	00 e0       	ldi	r16, 0x00	; 0
    12b8:	10 e0       	ldi	r17, 0x00	; 0
    12ba:	98 01       	movw	r18, r16
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	60 e8       	ldi	r22, 0x80	; 128
    12c2:	7f e3       	ldi	r23, 0x3F	; 63
    12c4:	ce 01       	movw	r24, r28
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    12cc:	00 e0       	ldi	r16, 0x00	; 0
    12ce:	10 e0       	ldi	r17, 0x00	; 0
    12d0:	98 01       	movw	r18, r16
    12d2:	b9 01       	movw	r22, r18
    12d4:	a8 01       	movw	r20, r16
    12d6:	ce 01       	movw	r24, r28
    12d8:	09 96       	adiw	r24, 0x09	; 9
    12da:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    12de:	00 e0       	ldi	r16, 0x00	; 0
    12e0:	10 e0       	ldi	r17, 0x00	; 0
    12e2:	98 01       	movw	r18, r16
    12e4:	b9 01       	movw	r22, r18
    12e6:	a8 01       	movw	r20, r16
    12e8:	ce 01       	movw	r24, r28
    12ea:	41 96       	adiw	r24, 0x11	; 17
    12ec:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    12f0:	00 e0       	ldi	r16, 0x00	; 0
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	98 01       	movw	r18, r16
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	60 e8       	ldi	r22, 0x80	; 128
    12fc:	7f eb       	ldi	r23, 0xBF	; 191
    12fe:	ce 01       	movw	r24, r28
    1300:	49 96       	adiw	r24, 0x19	; 25
    1302:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1306:	bc a2       	std	Y+36, r11	; 0x24
    1308:	ab a2       	std	Y+35, r10	; 0x23
    130a:	da a2       	std	Y+34, r13	; 0x22
    130c:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),z_matrix),QB_SIZE1);
    130e:	9e 01       	movw	r18, r28
    1310:	2f 5d       	subi	r18, 0xDF	; 223
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	ae 01       	movw	r20, r28
    1316:	4d 5d       	subi	r20, 0xDD	; 221
    1318:	5f 4f       	sbci	r21, 0xFF	; 255
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	c7 01       	movw	r24, r14
    1320:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    1324:	ae 01       	movw	r20, r28
    1326:	4f 5f       	subi	r20, 0xFF	; 255
    1328:	5f 4f       	sbci	r21, 0xFF	; 255
    132a:	bc 01       	movw	r22, r24
    132c:	c7 01       	movw	r24, r14
    132e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	bc 01       	movw	r22, r24
    1338:	c7 01       	movw	r24, r14
    133a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    133e:	a4 96       	adiw	r28, 0x24	; 36
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	bf 90       	pop	r11
    135c:	af 90       	pop	r10
    135e:	08 95       	ret

00001360 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	a4 97       	sbiw	r28, 0x24	; 36
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	7c 01       	movw	r14, r24
    1386:	5b 01       	movw	r10, r22
    1388:	6a 01       	movw	r12, r20
	Complex h_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
											 {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    138a:	00 e0       	ldi	r16, 0x00	; 0
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	98 01       	movw	r18, r16
    1390:	43 ef       	ldi	r20, 0xF3	; 243
    1392:	54 e0       	ldi	r21, 0x04	; 4
    1394:	65 e3       	ldi	r22, 0x35	; 53
    1396:	7f e3       	ldi	r23, 0x3F	; 63
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    13a0:	00 e0       	ldi	r16, 0x00	; 0
    13a2:	10 e0       	ldi	r17, 0x00	; 0
    13a4:	98 01       	movw	r18, r16
    13a6:	43 ef       	ldi	r20, 0xF3	; 243
    13a8:	54 e0       	ldi	r21, 0x04	; 4
    13aa:	65 e3       	ldi	r22, 0x35	; 53
    13ac:	7f e3       	ldi	r23, 0x3F	; 63
    13ae:	ce 01       	movw	r24, r28
    13b0:	09 96       	adiw	r24, 0x09	; 9
    13b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    13b6:	00 e0       	ldi	r16, 0x00	; 0
    13b8:	10 e0       	ldi	r17, 0x00	; 0
    13ba:	98 01       	movw	r18, r16
    13bc:	43 ef       	ldi	r20, 0xF3	; 243
    13be:	54 e0       	ldi	r21, 0x04	; 4
    13c0:	65 e3       	ldi	r22, 0x35	; 53
    13c2:	7f e3       	ldi	r23, 0x3F	; 63
    13c4:	ce 01       	movw	r24, r28
    13c6:	41 96       	adiw	r24, 0x11	; 17
    13c8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	98 01       	movw	r18, r16
    13d2:	43 ef       	ldi	r20, 0xF3	; 243
    13d4:	54 e0       	ldi	r21, 0x04	; 4
    13d6:	65 e3       	ldi	r22, 0x35	; 53
    13d8:	7f eb       	ldi	r23, 0xBF	; 191
    13da:	ce 01       	movw	r24, r28
    13dc:	49 96       	adiw	r24, 0x19	; 25
    13de:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    13e2:	bc a2       	std	Y+36, r11	; 0x24
    13e4:	ab a2       	std	Y+35, r10	; 0x23
    13e6:	da a2       	std	Y+34, r13	; 0x22
    13e8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),h_matrix),QB_SIZE1);
    13ea:	9e 01       	movw	r18, r28
    13ec:	2f 5d       	subi	r18, 0xDF	; 223
    13ee:	3f 4f       	sbci	r19, 0xFF	; 255
    13f0:	ae 01       	movw	r20, r28
    13f2:	4d 5d       	subi	r20, 0xDD	; 221
    13f4:	5f 4f       	sbci	r21, 0xFF	; 255
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	c7 01       	movw	r24, r14
    13fc:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    1400:	ae 01       	movw	r20, r28
    1402:	4f 5f       	subi	r20, 0xFF	; 255
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
    1406:	bc 01       	movw	r22, r24
    1408:	c7 01       	movw	r24, r14
    140a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	bc 01       	movw	r22, r24
    1414:	c7 01       	movw	r24, r14
    1416:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    141a:	a4 96       	adiw	r28, 0x24	; 36
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	df 90       	pop	r13
    1434:	cf 90       	pop	r12
    1436:	bf 90       	pop	r11
    1438:	af 90       	pop	r10
    143a:	08 95       	ret

0000143c <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    143c:	af 92       	push	r10
    143e:	bf 92       	push	r11
    1440:	cf 92       	push	r12
    1442:	df 92       	push	r13
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	a4 97       	sbiw	r28, 0x24	; 36
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	7c 01       	movw	r14, r24
    1462:	5b 01       	movw	r10, r22
    1464:	6a 01       	movw	r12, r20
	Complex s_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(1,0),Complex(0,0)},
											 {Complex(0,0),Complex(0,1)}};
    1466:	00 e0       	ldi	r16, 0x00	; 0
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	98 01       	movw	r18, r16
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	60 e8       	ldi	r22, 0x80	; 128
    1472:	7f e3       	ldi	r23, 0x3F	; 63
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    147c:	00 e0       	ldi	r16, 0x00	; 0
    147e:	10 e0       	ldi	r17, 0x00	; 0
    1480:	98 01       	movw	r18, r16
    1482:	b9 01       	movw	r22, r18
    1484:	a8 01       	movw	r20, r16
    1486:	ce 01       	movw	r24, r28
    1488:	09 96       	adiw	r24, 0x09	; 9
    148a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    148e:	00 e0       	ldi	r16, 0x00	; 0
    1490:	10 e0       	ldi	r17, 0x00	; 0
    1492:	98 01       	movw	r18, r16
    1494:	b9 01       	movw	r22, r18
    1496:	a8 01       	movw	r20, r16
    1498:	ce 01       	movw	r24, r28
    149a:	41 96       	adiw	r24, 0x11	; 17
    149c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    14a0:	00 e0       	ldi	r16, 0x00	; 0
    14a2:	10 e0       	ldi	r17, 0x00	; 0
    14a4:	20 e8       	ldi	r18, 0x80	; 128
    14a6:	3f e3       	ldi	r19, 0x3F	; 63
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	ba 01       	movw	r22, r20
    14ae:	ce 01       	movw	r24, r28
    14b0:	49 96       	adiw	r24, 0x19	; 25
    14b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    14b6:	bc a2       	std	Y+36, r11	; 0x24
    14b8:	ab a2       	std	Y+35, r10	; 0x23
    14ba:	da a2       	std	Y+34, r13	; 0x22
    14bc:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),s_matrix),QB_SIZE1);
    14be:	9e 01       	movw	r18, r28
    14c0:	2f 5d       	subi	r18, 0xDF	; 223
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	ae 01       	movw	r20, r28
    14c6:	4d 5d       	subi	r20, 0xDD	; 221
    14c8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ca:	61 e0       	ldi	r22, 0x01	; 1
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	c7 01       	movw	r24, r14
    14d0:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    14d4:	ae 01       	movw	r20, r28
    14d6:	4f 5f       	subi	r20, 0xFF	; 255
    14d8:	5f 4f       	sbci	r21, 0xFF	; 255
    14da:	bc 01       	movw	r22, r24
    14dc:	c7 01       	movw	r24, r14
    14de:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    14e2:	41 e0       	ldi	r20, 0x01	; 1
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	bc 01       	movw	r22, r24
    14e8:	c7 01       	movw	r24, r14
    14ea:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    14ee:	a4 96       	adiw	r28, 0x24	; 36
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	af 90       	pop	r10
    150e:	08 95       	ret

00001510 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    1510:	af 92       	push	r10
    1512:	bf 92       	push	r11
    1514:	cf 92       	push	r12
    1516:	df 92       	push	r13
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	a4 97       	sbiw	r28, 0x24	; 36
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	7c 01       	movw	r14, r24
    1536:	5b 01       	movw	r10, r22
    1538:	6a 01       	movw	r12, r20
	Complex t_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(1,0),Complex(0,0)},
											 {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    153a:	00 e0       	ldi	r16, 0x00	; 0
    153c:	10 e0       	ldi	r17, 0x00	; 0
    153e:	98 01       	movw	r18, r16
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	60 e8       	ldi	r22, 0x80	; 128
    1546:	7f e3       	ldi	r23, 0x3F	; 63
    1548:	ce 01       	movw	r24, r28
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1550:	00 e0       	ldi	r16, 0x00	; 0
    1552:	10 e0       	ldi	r17, 0x00	; 0
    1554:	98 01       	movw	r18, r16
    1556:	b9 01       	movw	r22, r18
    1558:	a8 01       	movw	r20, r16
    155a:	ce 01       	movw	r24, r28
    155c:	09 96       	adiw	r24, 0x09	; 9
    155e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1562:	00 e0       	ldi	r16, 0x00	; 0
    1564:	10 e0       	ldi	r17, 0x00	; 0
    1566:	98 01       	movw	r18, r16
    1568:	b9 01       	movw	r22, r18
    156a:	a8 01       	movw	r20, r16
    156c:	ce 01       	movw	r24, r28
    156e:	41 96       	adiw	r24, 0x11	; 17
    1570:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1574:	03 ef       	ldi	r16, 0xF3	; 243
    1576:	14 e0       	ldi	r17, 0x04	; 4
    1578:	25 e3       	ldi	r18, 0x35	; 53
    157a:	3f e3       	ldi	r19, 0x3F	; 63
    157c:	b9 01       	movw	r22, r18
    157e:	a8 01       	movw	r20, r16
    1580:	ce 01       	movw	r24, r28
    1582:	49 96       	adiw	r24, 0x19	; 25
    1584:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1588:	bc a2       	std	Y+36, r11	; 0x24
    158a:	ab a2       	std	Y+35, r10	; 0x23
    158c:	da a2       	std	Y+34, r13	; 0x22
    158e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),t_matrix),QB_SIZE1);
    1590:	9e 01       	movw	r18, r28
    1592:	2f 5d       	subi	r18, 0xDF	; 223
    1594:	3f 4f       	sbci	r19, 0xFF	; 255
    1596:	ae 01       	movw	r20, r28
    1598:	4d 5d       	subi	r20, 0xDD	; 221
    159a:	5f 4f       	sbci	r21, 0xFF	; 255
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	c7 01       	movw	r24, r14
    15a2:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    15a6:	ae 01       	movw	r20, r28
    15a8:	4f 5f       	subi	r20, 0xFF	; 255
    15aa:	5f 4f       	sbci	r21, 0xFF	; 255
    15ac:	bc 01       	movw	r22, r24
    15ae:	c7 01       	movw	r24, r14
    15b0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	bc 01       	movw	r22, r24
    15ba:	c7 01       	movw	r24, r14
    15bc:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    15c0:	a4 96       	adiw	r28, 0x24	; 36
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	bf 90       	pop	r11
    15de:	af 90       	pop	r10
    15e0:	08 95       	ret

000015e2 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    15e2:	6f 92       	push	r6
    15e4:	7f 92       	push	r7
    15e6:	8f 92       	push	r8
    15e8:	9f 92       	push	r9
    15ea:	af 92       	push	r10
    15ec:	bf 92       	push	r11
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	c8 58       	subi	r28, 0x88	; 136
    1604:	d1 09       	sbc	r29, r1
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	7c 01       	movw	r14, r24
    1612:	3b 01       	movw	r6, r22
    1614:	5a 01       	movw	r10, r20
    1616:	49 01       	movw	r8, r18
    1618:	68 01       	movw	r12, r16
	Complex cno_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
											   {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    161a:	00 e0       	ldi	r16, 0x00	; 0
    161c:	10 e0       	ldi	r17, 0x00	; 0
    161e:	98 01       	movw	r18, r16
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	60 e8       	ldi	r22, 0x80	; 128
    1626:	7f e3       	ldi	r23, 0x3F	; 63
    1628:	ce 01       	movw	r24, r28
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1630:	00 e0       	ldi	r16, 0x00	; 0
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	98 01       	movw	r18, r16
    1636:	b9 01       	movw	r22, r18
    1638:	a8 01       	movw	r20, r16
    163a:	ce 01       	movw	r24, r28
    163c:	09 96       	adiw	r24, 0x09	; 9
    163e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1642:	00 e0       	ldi	r16, 0x00	; 0
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	98 01       	movw	r18, r16
    1648:	b9 01       	movw	r22, r18
    164a:	a8 01       	movw	r20, r16
    164c:	ce 01       	movw	r24, r28
    164e:	41 96       	adiw	r24, 0x11	; 17
    1650:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	10 e0       	ldi	r17, 0x00	; 0
    1658:	98 01       	movw	r18, r16
    165a:	b9 01       	movw	r22, r18
    165c:	a8 01       	movw	r20, r16
    165e:	ce 01       	movw	r24, r28
    1660:	49 96       	adiw	r24, 0x19	; 25
    1662:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1666:	00 e0       	ldi	r16, 0x00	; 0
    1668:	10 e0       	ldi	r17, 0x00	; 0
    166a:	98 01       	movw	r18, r16
    166c:	b9 01       	movw	r22, r18
    166e:	a8 01       	movw	r20, r16
    1670:	ce 01       	movw	r24, r28
    1672:	81 96       	adiw	r24, 0x21	; 33
    1674:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1678:	00 e0       	ldi	r16, 0x00	; 0
    167a:	10 e0       	ldi	r17, 0x00	; 0
    167c:	98 01       	movw	r18, r16
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	60 e8       	ldi	r22, 0x80	; 128
    1684:	7f e3       	ldi	r23, 0x3F	; 63
    1686:	ce 01       	movw	r24, r28
    1688:	89 96       	adiw	r24, 0x29	; 41
    168a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    168e:	00 e0       	ldi	r16, 0x00	; 0
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	98 01       	movw	r18, r16
    1694:	b9 01       	movw	r22, r18
    1696:	a8 01       	movw	r20, r16
    1698:	ce 01       	movw	r24, r28
    169a:	c1 96       	adiw	r24, 0x31	; 49
    169c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    16a0:	00 e0       	ldi	r16, 0x00	; 0
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	98 01       	movw	r18, r16
    16a6:	b9 01       	movw	r22, r18
    16a8:	a8 01       	movw	r20, r16
    16aa:	ce 01       	movw	r24, r28
    16ac:	c9 96       	adiw	r24, 0x39	; 57
    16ae:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    16b2:	00 e0       	ldi	r16, 0x00	; 0
    16b4:	10 e0       	ldi	r17, 0x00	; 0
    16b6:	98 01       	movw	r18, r16
    16b8:	b9 01       	movw	r22, r18
    16ba:	a8 01       	movw	r20, r16
    16bc:	ce 01       	movw	r24, r28
    16be:	8f 5b       	subi	r24, 0xBF	; 191
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    16c6:	00 e0       	ldi	r16, 0x00	; 0
    16c8:	10 e0       	ldi	r17, 0x00	; 0
    16ca:	98 01       	movw	r18, r16
    16cc:	b9 01       	movw	r22, r18
    16ce:	a8 01       	movw	r20, r16
    16d0:	ce 01       	movw	r24, r28
    16d2:	87 5b       	subi	r24, 0xB7	; 183
    16d4:	9f 4f       	sbci	r25, 0xFF	; 255
    16d6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    16da:	00 e0       	ldi	r16, 0x00	; 0
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	98 01       	movw	r18, r16
    16e0:	b9 01       	movw	r22, r18
    16e2:	a8 01       	movw	r20, r16
    16e4:	ce 01       	movw	r24, r28
    16e6:	8f 5a       	subi	r24, 0xAF	; 175
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	10 e0       	ldi	r17, 0x00	; 0
    16f2:	98 01       	movw	r18, r16
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	60 e8       	ldi	r22, 0x80	; 128
    16fa:	7f e3       	ldi	r23, 0x3F	; 63
    16fc:	ce 01       	movw	r24, r28
    16fe:	87 5a       	subi	r24, 0xA7	; 167
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1706:	00 e0       	ldi	r16, 0x00	; 0
    1708:	10 e0       	ldi	r17, 0x00	; 0
    170a:	98 01       	movw	r18, r16
    170c:	b9 01       	movw	r22, r18
    170e:	a8 01       	movw	r20, r16
    1710:	ce 01       	movw	r24, r28
    1712:	8f 59       	subi	r24, 0x9F	; 159
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    171a:	00 e0       	ldi	r16, 0x00	; 0
    171c:	10 e0       	ldi	r17, 0x00	; 0
    171e:	98 01       	movw	r18, r16
    1720:	b9 01       	movw	r22, r18
    1722:	a8 01       	movw	r20, r16
    1724:	ce 01       	movw	r24, r28
    1726:	87 59       	subi	r24, 0x97	; 151
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    172e:	00 e0       	ldi	r16, 0x00	; 0
    1730:	10 e0       	ldi	r17, 0x00	; 0
    1732:	98 01       	movw	r18, r16
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	60 e8       	ldi	r22, 0x80	; 128
    173a:	7f e3       	ldi	r23, 0x3F	; 63
    173c:	ce 01       	movw	r24, r28
    173e:	8f 58       	subi	r24, 0x8F	; 143
    1740:	9f 4f       	sbci	r25, 0xFF	; 255
    1742:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1746:	00 e0       	ldi	r16, 0x00	; 0
    1748:	10 e0       	ldi	r17, 0x00	; 0
    174a:	98 01       	movw	r18, r16
    174c:	b9 01       	movw	r22, r18
    174e:	a8 01       	movw	r20, r16
    1750:	ce 01       	movw	r24, r28
    1752:	87 58       	subi	r24, 0x87	; 135
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};						
    175a:	cb 57       	subi	r28, 0x7B	; 123
    175c:	df 4f       	sbci	r29, 0xFF	; 255
    175e:	79 82       	std	Y+1, r7	; 0x01
    1760:	68 82       	st	Y, r6
    1762:	c5 58       	subi	r28, 0x85	; 133
    1764:	d0 40       	sbci	r29, 0x00	; 0
    1766:	c9 57       	subi	r28, 0x79	; 121
    1768:	df 4f       	sbci	r29, 0xFF	; 255
    176a:	99 82       	std	Y+1, r9	; 0x01
    176c:	88 82       	st	Y, r8
    176e:	c7 58       	subi	r28, 0x87	; 135
    1770:	d0 40       	sbci	r29, 0x00	; 0
    1772:	cf 57       	subi	r28, 0x7F	; 127
    1774:	df 4f       	sbci	r29, 0xFF	; 255
    1776:	b9 82       	std	Y+1, r11	; 0x01
    1778:	a8 82       	st	Y, r10
    177a:	c1 58       	subi	r28, 0x81	; 129
    177c:	d0 40       	sbci	r29, 0x00	; 0
    177e:	cd 57       	subi	r28, 0x7D	; 125
    1780:	df 4f       	sbci	r29, 0xFF	; 255
    1782:	d9 82       	std	Y+1, r13	; 0x01
    1784:	c8 82       	st	Y, r12
    1786:	c3 58       	subi	r28, 0x83	; 131
    1788:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),cno_matrix),QB_SIZE2);
    178a:	9e 01       	movw	r18, r28
    178c:	2f 57       	subi	r18, 0x7F	; 127
    178e:	3f 4f       	sbci	r19, 0xFF	; 255
    1790:	ae 01       	movw	r20, r28
    1792:	4b 57       	subi	r20, 0x7B	; 123
    1794:	5f 4f       	sbci	r21, 0xFF	; 255
    1796:	62 e0       	ldi	r22, 0x02	; 2
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	c7 01       	movw	r24, r14
    179c:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    17a0:	ae 01       	movw	r20, r28
    17a2:	4f 5f       	subi	r20, 0xFF	; 255
    17a4:	5f 4f       	sbci	r21, 0xFF	; 255
    17a6:	bc 01       	movw	r22, r24
    17a8:	c7 01       	movw	r24, r14
    17aa:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    17ae:	42 e0       	ldi	r20, 0x02	; 2
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	bc 01       	movw	r22, r24
    17b4:	c7 01       	movw	r24, r14
    17b6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    17ba:	c8 57       	subi	r28, 0x78	; 120
    17bc:	df 4f       	sbci	r29, 0xFF	; 255
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	df 90       	pop	r13
    17d6:	cf 90       	pop	r12
    17d8:	bf 90       	pop	r11
    17da:	af 90       	pop	r10
    17dc:	9f 90       	pop	r9
    17de:	8f 90       	pop	r8
    17e0:	7f 90       	pop	r7
    17e2:	6f 90       	pop	r6
    17e4:	08 95       	ret

000017e6 <_ZN5Gates3CSIEiiii>:
int * Gates::CSI(int theta1, int phi1, int theta2,int phi2){
    17e6:	6f 92       	push	r6
    17e8:	7f 92       	push	r7
    17ea:	8f 92       	push	r8
    17ec:	9f 92       	push	r9
    17ee:	af 92       	push	r10
    17f0:	bf 92       	push	r11
    17f2:	cf 92       	push	r12
    17f4:	df 92       	push	r13
    17f6:	ef 92       	push	r14
    17f8:	ff 92       	push	r15
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	c8 58       	subi	r28, 0x88	; 136
    1808:	d1 09       	sbc	r29, r1
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	7c 01       	movw	r14, r24
    1816:	3b 01       	movw	r6, r22
    1818:	5a 01       	movw	r10, r20
    181a:	49 01       	movw	r8, r18
    181c:	68 01       	movw	r12, r16
	Complex csi_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(-1,0)}};
    181e:	00 e0       	ldi	r16, 0x00	; 0
    1820:	10 e0       	ldi	r17, 0x00	; 0
    1822:	98 01       	movw	r18, r16
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	50 e0       	ldi	r21, 0x00	; 0
    1828:	60 e8       	ldi	r22, 0x80	; 128
    182a:	7f e3       	ldi	r23, 0x3F	; 63
    182c:	ce 01       	movw	r24, r28
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1834:	00 e0       	ldi	r16, 0x00	; 0
    1836:	10 e0       	ldi	r17, 0x00	; 0
    1838:	98 01       	movw	r18, r16
    183a:	b9 01       	movw	r22, r18
    183c:	a8 01       	movw	r20, r16
    183e:	ce 01       	movw	r24, r28
    1840:	09 96       	adiw	r24, 0x09	; 9
    1842:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1846:	00 e0       	ldi	r16, 0x00	; 0
    1848:	10 e0       	ldi	r17, 0x00	; 0
    184a:	98 01       	movw	r18, r16
    184c:	b9 01       	movw	r22, r18
    184e:	a8 01       	movw	r20, r16
    1850:	ce 01       	movw	r24, r28
    1852:	41 96       	adiw	r24, 0x11	; 17
    1854:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1858:	00 e0       	ldi	r16, 0x00	; 0
    185a:	10 e0       	ldi	r17, 0x00	; 0
    185c:	98 01       	movw	r18, r16
    185e:	b9 01       	movw	r22, r18
    1860:	a8 01       	movw	r20, r16
    1862:	ce 01       	movw	r24, r28
    1864:	49 96       	adiw	r24, 0x19	; 25
    1866:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    186a:	00 e0       	ldi	r16, 0x00	; 0
    186c:	10 e0       	ldi	r17, 0x00	; 0
    186e:	98 01       	movw	r18, r16
    1870:	b9 01       	movw	r22, r18
    1872:	a8 01       	movw	r20, r16
    1874:	ce 01       	movw	r24, r28
    1876:	81 96       	adiw	r24, 0x21	; 33
    1878:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    187c:	00 e0       	ldi	r16, 0x00	; 0
    187e:	10 e0       	ldi	r17, 0x00	; 0
    1880:	98 01       	movw	r18, r16
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	60 e8       	ldi	r22, 0x80	; 128
    1888:	7f e3       	ldi	r23, 0x3F	; 63
    188a:	ce 01       	movw	r24, r28
    188c:	89 96       	adiw	r24, 0x29	; 41
    188e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1892:	00 e0       	ldi	r16, 0x00	; 0
    1894:	10 e0       	ldi	r17, 0x00	; 0
    1896:	98 01       	movw	r18, r16
    1898:	b9 01       	movw	r22, r18
    189a:	a8 01       	movw	r20, r16
    189c:	ce 01       	movw	r24, r28
    189e:	c1 96       	adiw	r24, 0x31	; 49
    18a0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    18a4:	00 e0       	ldi	r16, 0x00	; 0
    18a6:	10 e0       	ldi	r17, 0x00	; 0
    18a8:	98 01       	movw	r18, r16
    18aa:	b9 01       	movw	r22, r18
    18ac:	a8 01       	movw	r20, r16
    18ae:	ce 01       	movw	r24, r28
    18b0:	c9 96       	adiw	r24, 0x39	; 57
    18b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    18b6:	00 e0       	ldi	r16, 0x00	; 0
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	98 01       	movw	r18, r16
    18bc:	b9 01       	movw	r22, r18
    18be:	a8 01       	movw	r20, r16
    18c0:	ce 01       	movw	r24, r28
    18c2:	8f 5b       	subi	r24, 0xBF	; 191
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    18ca:	00 e0       	ldi	r16, 0x00	; 0
    18cc:	10 e0       	ldi	r17, 0x00	; 0
    18ce:	98 01       	movw	r18, r16
    18d0:	b9 01       	movw	r22, r18
    18d2:	a8 01       	movw	r20, r16
    18d4:	ce 01       	movw	r24, r28
    18d6:	87 5b       	subi	r24, 0xB7	; 183
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    18de:	00 e0       	ldi	r16, 0x00	; 0
    18e0:	10 e0       	ldi	r17, 0x00	; 0
    18e2:	98 01       	movw	r18, r16
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	60 e8       	ldi	r22, 0x80	; 128
    18ea:	7f e3       	ldi	r23, 0x3F	; 63
    18ec:	ce 01       	movw	r24, r28
    18ee:	8f 5a       	subi	r24, 0xAF	; 175
    18f0:	9f 4f       	sbci	r25, 0xFF	; 255
    18f2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    18f6:	00 e0       	ldi	r16, 0x00	; 0
    18f8:	10 e0       	ldi	r17, 0x00	; 0
    18fa:	98 01       	movw	r18, r16
    18fc:	b9 01       	movw	r22, r18
    18fe:	a8 01       	movw	r20, r16
    1900:	ce 01       	movw	r24, r28
    1902:	87 5a       	subi	r24, 0xA7	; 167
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    190a:	00 e0       	ldi	r16, 0x00	; 0
    190c:	10 e0       	ldi	r17, 0x00	; 0
    190e:	98 01       	movw	r18, r16
    1910:	b9 01       	movw	r22, r18
    1912:	a8 01       	movw	r20, r16
    1914:	ce 01       	movw	r24, r28
    1916:	8f 59       	subi	r24, 0x9F	; 159
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    191e:	00 e0       	ldi	r16, 0x00	; 0
    1920:	10 e0       	ldi	r17, 0x00	; 0
    1922:	98 01       	movw	r18, r16
    1924:	b9 01       	movw	r22, r18
    1926:	a8 01       	movw	r20, r16
    1928:	ce 01       	movw	r24, r28
    192a:	87 59       	subi	r24, 0x97	; 151
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1932:	00 e0       	ldi	r16, 0x00	; 0
    1934:	10 e0       	ldi	r17, 0x00	; 0
    1936:	98 01       	movw	r18, r16
    1938:	b9 01       	movw	r22, r18
    193a:	a8 01       	movw	r20, r16
    193c:	ce 01       	movw	r24, r28
    193e:	8f 58       	subi	r24, 0x8F	; 143
    1940:	9f 4f       	sbci	r25, 0xFF	; 255
    1942:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1946:	00 e0       	ldi	r16, 0x00	; 0
    1948:	10 e0       	ldi	r17, 0x00	; 0
    194a:	98 01       	movw	r18, r16
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	60 e8       	ldi	r22, 0x80	; 128
    1952:	7f eb       	ldi	r23, 0xBF	; 191
    1954:	ce 01       	movw	r24, r28
    1956:	87 58       	subi	r24, 0x87	; 135
    1958:	9f 4f       	sbci	r25, 0xFF	; 255
    195a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    195e:	cb 57       	subi	r28, 0x7B	; 123
    1960:	df 4f       	sbci	r29, 0xFF	; 255
    1962:	79 82       	std	Y+1, r7	; 0x01
    1964:	68 82       	st	Y, r6
    1966:	c5 58       	subi	r28, 0x85	; 133
    1968:	d0 40       	sbci	r29, 0x00	; 0
    196a:	c9 57       	subi	r28, 0x79	; 121
    196c:	df 4f       	sbci	r29, 0xFF	; 255
    196e:	99 82       	std	Y+1, r9	; 0x01
    1970:	88 82       	st	Y, r8
    1972:	c7 58       	subi	r28, 0x87	; 135
    1974:	d0 40       	sbci	r29, 0x00	; 0
    1976:	cf 57       	subi	r28, 0x7F	; 127
    1978:	df 4f       	sbci	r29, 0xFF	; 255
    197a:	b9 82       	std	Y+1, r11	; 0x01
    197c:	a8 82       	st	Y, r10
    197e:	c1 58       	subi	r28, 0x81	; 129
    1980:	d0 40       	sbci	r29, 0x00	; 0
    1982:	cd 57       	subi	r28, 0x7D	; 125
    1984:	df 4f       	sbci	r29, 0xFF	; 255
    1986:	d9 82       	std	Y+1, r13	; 0x01
    1988:	c8 82       	st	Y, r12
    198a:	c3 58       	subi	r28, 0x83	; 131
    198c:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),csi_matrix),QB_SIZE2);
    198e:	9e 01       	movw	r18, r28
    1990:	2f 57       	subi	r18, 0x7F	; 127
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	ae 01       	movw	r20, r28
    1996:	4b 57       	subi	r20, 0x7B	; 123
    1998:	5f 4f       	sbci	r21, 0xFF	; 255
    199a:	62 e0       	ldi	r22, 0x02	; 2
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	c7 01       	movw	r24, r14
    19a0:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    19a4:	ae 01       	movw	r20, r28
    19a6:	4f 5f       	subi	r20, 0xFF	; 255
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	bc 01       	movw	r22, r24
    19ac:	c7 01       	movw	r24, r14
    19ae:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    19b2:	42 e0       	ldi	r20, 0x02	; 2
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	bc 01       	movw	r22, r24
    19b8:	c7 01       	movw	r24, r14
    19ba:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    19be:	c8 57       	subi	r28, 0x78	; 120
    19c0:	df 4f       	sbci	r29, 0xFF	; 255
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	bf 90       	pop	r11
    19de:	af 90       	pop	r10
    19e0:	9f 90       	pop	r9
    19e2:	8f 90       	pop	r8
    19e4:	7f 90       	pop	r7
    19e6:	6f 90       	pop	r6
    19e8:	08 95       	ret

000019ea <_ZN5Gates3SWAEiiii>:
int * Gates::SWA(int theta1, int phi1, int theta2,int phi2){
    19ea:	6f 92       	push	r6
    19ec:	7f 92       	push	r7
    19ee:	8f 92       	push	r8
    19f0:	9f 92       	push	r9
    19f2:	af 92       	push	r10
    19f4:	bf 92       	push	r11
    19f6:	cf 92       	push	r12
    19f8:	df 92       	push	r13
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	c8 58       	subi	r28, 0x88	; 136
    1a0c:	d1 09       	sbc	r29, r1
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	7c 01       	movw	r14, r24
    1a1a:	3b 01       	movw	r6, r22
    1a1c:	5a 01       	movw	r10, r20
    1a1e:	49 01       	movw	r8, r18
    1a20:	68 01       	movw	r12, r16
	Complex swa_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
											   {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    1a22:	00 e0       	ldi	r16, 0x00	; 0
    1a24:	10 e0       	ldi	r17, 0x00	; 0
    1a26:	98 01       	movw	r18, r16
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	60 e8       	ldi	r22, 0x80	; 128
    1a2e:	7f e3       	ldi	r23, 0x3F	; 63
    1a30:	ce 01       	movw	r24, r28
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1a38:	00 e0       	ldi	r16, 0x00	; 0
    1a3a:	10 e0       	ldi	r17, 0x00	; 0
    1a3c:	98 01       	movw	r18, r16
    1a3e:	b9 01       	movw	r22, r18
    1a40:	a8 01       	movw	r20, r16
    1a42:	ce 01       	movw	r24, r28
    1a44:	09 96       	adiw	r24, 0x09	; 9
    1a46:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1a4a:	00 e0       	ldi	r16, 0x00	; 0
    1a4c:	10 e0       	ldi	r17, 0x00	; 0
    1a4e:	98 01       	movw	r18, r16
    1a50:	b9 01       	movw	r22, r18
    1a52:	a8 01       	movw	r20, r16
    1a54:	ce 01       	movw	r24, r28
    1a56:	41 96       	adiw	r24, 0x11	; 17
    1a58:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1a5c:	00 e0       	ldi	r16, 0x00	; 0
    1a5e:	10 e0       	ldi	r17, 0x00	; 0
    1a60:	98 01       	movw	r18, r16
    1a62:	b9 01       	movw	r22, r18
    1a64:	a8 01       	movw	r20, r16
    1a66:	ce 01       	movw	r24, r28
    1a68:	49 96       	adiw	r24, 0x19	; 25
    1a6a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1a6e:	00 e0       	ldi	r16, 0x00	; 0
    1a70:	10 e0       	ldi	r17, 0x00	; 0
    1a72:	98 01       	movw	r18, r16
    1a74:	b9 01       	movw	r22, r18
    1a76:	a8 01       	movw	r20, r16
    1a78:	ce 01       	movw	r24, r28
    1a7a:	81 96       	adiw	r24, 0x21	; 33
    1a7c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1a80:	00 e0       	ldi	r16, 0x00	; 0
    1a82:	10 e0       	ldi	r17, 0x00	; 0
    1a84:	98 01       	movw	r18, r16
    1a86:	b9 01       	movw	r22, r18
    1a88:	a8 01       	movw	r20, r16
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	89 96       	adiw	r24, 0x29	; 41
    1a8e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1a92:	00 e0       	ldi	r16, 0x00	; 0
    1a94:	10 e0       	ldi	r17, 0x00	; 0
    1a96:	98 01       	movw	r18, r16
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	60 e8       	ldi	r22, 0x80	; 128
    1a9e:	7f e3       	ldi	r23, 0x3F	; 63
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	c1 96       	adiw	r24, 0x31	; 49
    1aa4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1aa8:	00 e0       	ldi	r16, 0x00	; 0
    1aaa:	10 e0       	ldi	r17, 0x00	; 0
    1aac:	98 01       	movw	r18, r16
    1aae:	b9 01       	movw	r22, r18
    1ab0:	a8 01       	movw	r20, r16
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	c9 96       	adiw	r24, 0x39	; 57
    1ab6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1aba:	00 e0       	ldi	r16, 0x00	; 0
    1abc:	10 e0       	ldi	r17, 0x00	; 0
    1abe:	98 01       	movw	r18, r16
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	a8 01       	movw	r20, r16
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	8f 5b       	subi	r24, 0xBF	; 191
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1ace:	00 e0       	ldi	r16, 0x00	; 0
    1ad0:	10 e0       	ldi	r17, 0x00	; 0
    1ad2:	98 01       	movw	r18, r16
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	60 e8       	ldi	r22, 0x80	; 128
    1ada:	7f e3       	ldi	r23, 0x3F	; 63
    1adc:	ce 01       	movw	r24, r28
    1ade:	87 5b       	subi	r24, 0xB7	; 183
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1ae6:	00 e0       	ldi	r16, 0x00	; 0
    1ae8:	10 e0       	ldi	r17, 0x00	; 0
    1aea:	98 01       	movw	r18, r16
    1aec:	b9 01       	movw	r22, r18
    1aee:	a8 01       	movw	r20, r16
    1af0:	ce 01       	movw	r24, r28
    1af2:	8f 5a       	subi	r24, 0xAF	; 175
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1afa:	00 e0       	ldi	r16, 0x00	; 0
    1afc:	10 e0       	ldi	r17, 0x00	; 0
    1afe:	98 01       	movw	r18, r16
    1b00:	b9 01       	movw	r22, r18
    1b02:	a8 01       	movw	r20, r16
    1b04:	ce 01       	movw	r24, r28
    1b06:	87 5a       	subi	r24, 0xA7	; 167
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1b0e:	00 e0       	ldi	r16, 0x00	; 0
    1b10:	10 e0       	ldi	r17, 0x00	; 0
    1b12:	98 01       	movw	r18, r16
    1b14:	b9 01       	movw	r22, r18
    1b16:	a8 01       	movw	r20, r16
    1b18:	ce 01       	movw	r24, r28
    1b1a:	8f 59       	subi	r24, 0x9F	; 159
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1b22:	00 e0       	ldi	r16, 0x00	; 0
    1b24:	10 e0       	ldi	r17, 0x00	; 0
    1b26:	98 01       	movw	r18, r16
    1b28:	b9 01       	movw	r22, r18
    1b2a:	a8 01       	movw	r20, r16
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	87 59       	subi	r24, 0x97	; 151
    1b30:	9f 4f       	sbci	r25, 0xFF	; 255
    1b32:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1b36:	00 e0       	ldi	r16, 0x00	; 0
    1b38:	10 e0       	ldi	r17, 0x00	; 0
    1b3a:	98 01       	movw	r18, r16
    1b3c:	b9 01       	movw	r22, r18
    1b3e:	a8 01       	movw	r20, r16
    1b40:	ce 01       	movw	r24, r28
    1b42:	8f 58       	subi	r24, 0x8F	; 143
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1b4a:	00 e0       	ldi	r16, 0x00	; 0
    1b4c:	10 e0       	ldi	r17, 0x00	; 0
    1b4e:	98 01       	movw	r18, r16
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	60 e8       	ldi	r22, 0x80	; 128
    1b56:	7f e3       	ldi	r23, 0x3F	; 63
    1b58:	ce 01       	movw	r24, r28
    1b5a:	87 58       	subi	r24, 0x87	; 135
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1b62:	cb 57       	subi	r28, 0x7B	; 123
    1b64:	df 4f       	sbci	r29, 0xFF	; 255
    1b66:	79 82       	std	Y+1, r7	; 0x01
    1b68:	68 82       	st	Y, r6
    1b6a:	c5 58       	subi	r28, 0x85	; 133
    1b6c:	d0 40       	sbci	r29, 0x00	; 0
    1b6e:	c9 57       	subi	r28, 0x79	; 121
    1b70:	df 4f       	sbci	r29, 0xFF	; 255
    1b72:	99 82       	std	Y+1, r9	; 0x01
    1b74:	88 82       	st	Y, r8
    1b76:	c7 58       	subi	r28, 0x87	; 135
    1b78:	d0 40       	sbci	r29, 0x00	; 0
    1b7a:	cf 57       	subi	r28, 0x7F	; 127
    1b7c:	df 4f       	sbci	r29, 0xFF	; 255
    1b7e:	b9 82       	std	Y+1, r11	; 0x01
    1b80:	a8 82       	st	Y, r10
    1b82:	c1 58       	subi	r28, 0x81	; 129
    1b84:	d0 40       	sbci	r29, 0x00	; 0
    1b86:	cd 57       	subi	r28, 0x7D	; 125
    1b88:	df 4f       	sbci	r29, 0xFF	; 255
    1b8a:	d9 82       	std	Y+1, r13	; 0x01
    1b8c:	c8 82       	st	Y, r12
    1b8e:	c3 58       	subi	r28, 0x83	; 131
    1b90:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swa_matrix),QB_SIZE2);	
    1b92:	9e 01       	movw	r18, r28
    1b94:	2f 57       	subi	r18, 0x7F	; 127
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	ae 01       	movw	r20, r28
    1b9a:	4b 57       	subi	r20, 0x7B	; 123
    1b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9e:	62 e0       	ldi	r22, 0x02	; 2
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	c7 01       	movw	r24, r14
    1ba4:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    1ba8:	ae 01       	movw	r20, r28
    1baa:	4f 5f       	subi	r20, 0xFF	; 255
    1bac:	5f 4f       	sbci	r21, 0xFF	; 255
    1bae:	bc 01       	movw	r22, r24
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1bb6:	42 e0       	ldi	r20, 0x02	; 2
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	bc 01       	movw	r22, r24
    1bbc:	c7 01       	movw	r24, r14
    1bbe:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1bc2:	c8 57       	subi	r28, 0x78	; 120
    1bc4:	df 4f       	sbci	r29, 0xFF	; 255
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	df 90       	pop	r13
    1bde:	cf 90       	pop	r12
    1be0:	bf 90       	pop	r11
    1be2:	af 90       	pop	r10
    1be4:	9f 90       	pop	r9
    1be6:	8f 90       	pop	r8
    1be8:	7f 90       	pop	r7
    1bea:	6f 90       	pop	r6
    1bec:	08 95       	ret

00001bee <_ZN5Gates3INCEiiii>:
int * Gates::INC(int theta1, int phi1, int theta2,int phi2){
    1bee:	6f 92       	push	r6
    1bf0:	7f 92       	push	r7
    1bf2:	8f 92       	push	r8
    1bf4:	9f 92       	push	r9
    1bf6:	af 92       	push	r10
    1bf8:	bf 92       	push	r11
    1bfa:	cf 92       	push	r12
    1bfc:	df 92       	push	r13
    1bfe:	ef 92       	push	r14
    1c00:	ff 92       	push	r15
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	c8 58       	subi	r28, 0x88	; 136
    1c10:	d1 09       	sbc	r29, r1
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	7c 01       	movw	r14, r24
    1c1e:	3b 01       	movw	r6, r22
    1c20:	5a 01       	movw	r10, r20
    1c22:	49 01       	movw	r8, r18
    1c24:	68 01       	movw	r12, r16
	Complex inc_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
											   {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1c26:	00 e0       	ldi	r16, 0x00	; 0
    1c28:	10 e0       	ldi	r17, 0x00	; 0
    1c2a:	98 01       	movw	r18, r16
    1c2c:	b9 01       	movw	r22, r18
    1c2e:	a8 01       	movw	r20, r16
    1c30:	ce 01       	movw	r24, r28
    1c32:	01 96       	adiw	r24, 0x01	; 1
    1c34:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1c38:	00 e0       	ldi	r16, 0x00	; 0
    1c3a:	10 e0       	ldi	r17, 0x00	; 0
    1c3c:	98 01       	movw	r18, r16
    1c3e:	b9 01       	movw	r22, r18
    1c40:	a8 01       	movw	r20, r16
    1c42:	ce 01       	movw	r24, r28
    1c44:	09 96       	adiw	r24, 0x09	; 9
    1c46:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1c4a:	00 e0       	ldi	r16, 0x00	; 0
    1c4c:	10 e0       	ldi	r17, 0x00	; 0
    1c4e:	98 01       	movw	r18, r16
    1c50:	b9 01       	movw	r22, r18
    1c52:	a8 01       	movw	r20, r16
    1c54:	ce 01       	movw	r24, r28
    1c56:	41 96       	adiw	r24, 0x11	; 17
    1c58:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1c5c:	00 e0       	ldi	r16, 0x00	; 0
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
    1c60:	98 01       	movw	r18, r16
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	60 e8       	ldi	r22, 0x80	; 128
    1c68:	7f e3       	ldi	r23, 0x3F	; 63
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	49 96       	adiw	r24, 0x19	; 25
    1c6e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1c72:	00 e0       	ldi	r16, 0x00	; 0
    1c74:	10 e0       	ldi	r17, 0x00	; 0
    1c76:	98 01       	movw	r18, r16
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	60 e8       	ldi	r22, 0x80	; 128
    1c7e:	7f e3       	ldi	r23, 0x3F	; 63
    1c80:	ce 01       	movw	r24, r28
    1c82:	81 96       	adiw	r24, 0x21	; 33
    1c84:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
    1c8c:	98 01       	movw	r18, r16
    1c8e:	b9 01       	movw	r22, r18
    1c90:	a8 01       	movw	r20, r16
    1c92:	ce 01       	movw	r24, r28
    1c94:	89 96       	adiw	r24, 0x29	; 41
    1c96:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1c9a:	00 e0       	ldi	r16, 0x00	; 0
    1c9c:	10 e0       	ldi	r17, 0x00	; 0
    1c9e:	98 01       	movw	r18, r16
    1ca0:	b9 01       	movw	r22, r18
    1ca2:	a8 01       	movw	r20, r16
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	c1 96       	adiw	r24, 0x31	; 49
    1ca8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1cac:	00 e0       	ldi	r16, 0x00	; 0
    1cae:	10 e0       	ldi	r17, 0x00	; 0
    1cb0:	98 01       	movw	r18, r16
    1cb2:	b9 01       	movw	r22, r18
    1cb4:	a8 01       	movw	r20, r16
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	c9 96       	adiw	r24, 0x39	; 57
    1cba:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1cbe:	00 e0       	ldi	r16, 0x00	; 0
    1cc0:	10 e0       	ldi	r17, 0x00	; 0
    1cc2:	98 01       	movw	r18, r16
    1cc4:	b9 01       	movw	r22, r18
    1cc6:	a8 01       	movw	r20, r16
    1cc8:	ce 01       	movw	r24, r28
    1cca:	8f 5b       	subi	r24, 0xBF	; 191
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1cd2:	00 e0       	ldi	r16, 0x00	; 0
    1cd4:	10 e0       	ldi	r17, 0x00	; 0
    1cd6:	98 01       	movw	r18, r16
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	60 e8       	ldi	r22, 0x80	; 128
    1cde:	7f e3       	ldi	r23, 0x3F	; 63
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	87 5b       	subi	r24, 0xB7	; 183
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1cea:	00 e0       	ldi	r16, 0x00	; 0
    1cec:	10 e0       	ldi	r17, 0x00	; 0
    1cee:	98 01       	movw	r18, r16
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	a8 01       	movw	r20, r16
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	8f 5a       	subi	r24, 0xAF	; 175
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1cfe:	00 e0       	ldi	r16, 0x00	; 0
    1d00:	10 e0       	ldi	r17, 0x00	; 0
    1d02:	98 01       	movw	r18, r16
    1d04:	b9 01       	movw	r22, r18
    1d06:	a8 01       	movw	r20, r16
    1d08:	ce 01       	movw	r24, r28
    1d0a:	87 5a       	subi	r24, 0xA7	; 167
    1d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1d12:	00 e0       	ldi	r16, 0x00	; 0
    1d14:	10 e0       	ldi	r17, 0x00	; 0
    1d16:	98 01       	movw	r18, r16
    1d18:	b9 01       	movw	r22, r18
    1d1a:	a8 01       	movw	r20, r16
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	8f 59       	subi	r24, 0x9F	; 159
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1d26:	00 e0       	ldi	r16, 0x00	; 0
    1d28:	10 e0       	ldi	r17, 0x00	; 0
    1d2a:	98 01       	movw	r18, r16
    1d2c:	b9 01       	movw	r22, r18
    1d2e:	a8 01       	movw	r20, r16
    1d30:	ce 01       	movw	r24, r28
    1d32:	87 59       	subi	r24, 0x97	; 151
    1d34:	9f 4f       	sbci	r25, 0xFF	; 255
    1d36:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1d3a:	00 e0       	ldi	r16, 0x00	; 0
    1d3c:	10 e0       	ldi	r17, 0x00	; 0
    1d3e:	98 01       	movw	r18, r16
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	60 e8       	ldi	r22, 0x80	; 128
    1d46:	7f e3       	ldi	r23, 0x3F	; 63
    1d48:	ce 01       	movw	r24, r28
    1d4a:	8f 58       	subi	r24, 0x8F	; 143
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1d52:	00 e0       	ldi	r16, 0x00	; 0
    1d54:	10 e0       	ldi	r17, 0x00	; 0
    1d56:	98 01       	movw	r18, r16
    1d58:	b9 01       	movw	r22, r18
    1d5a:	a8 01       	movw	r20, r16
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	87 58       	subi	r24, 0x87	; 135
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1d66:	cb 57       	subi	r28, 0x7B	; 123
    1d68:	df 4f       	sbci	r29, 0xFF	; 255
    1d6a:	79 82       	std	Y+1, r7	; 0x01
    1d6c:	68 82       	st	Y, r6
    1d6e:	c5 58       	subi	r28, 0x85	; 133
    1d70:	d0 40       	sbci	r29, 0x00	; 0
    1d72:	c9 57       	subi	r28, 0x79	; 121
    1d74:	df 4f       	sbci	r29, 0xFF	; 255
    1d76:	99 82       	std	Y+1, r9	; 0x01
    1d78:	88 82       	st	Y, r8
    1d7a:	c7 58       	subi	r28, 0x87	; 135
    1d7c:	d0 40       	sbci	r29, 0x00	; 0
    1d7e:	cf 57       	subi	r28, 0x7F	; 127
    1d80:	df 4f       	sbci	r29, 0xFF	; 255
    1d82:	b9 82       	std	Y+1, r11	; 0x01
    1d84:	a8 82       	st	Y, r10
    1d86:	c1 58       	subi	r28, 0x81	; 129
    1d88:	d0 40       	sbci	r29, 0x00	; 0
    1d8a:	cd 57       	subi	r28, 0x7D	; 125
    1d8c:	df 4f       	sbci	r29, 0xFF	; 255
    1d8e:	d9 82       	std	Y+1, r13	; 0x01
    1d90:	c8 82       	st	Y, r12
    1d92:	c3 58       	subi	r28, 0x83	; 131
    1d94:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),inc_matrix),QB_SIZE2);
    1d96:	9e 01       	movw	r18, r28
    1d98:	2f 57       	subi	r18, 0x7F	; 127
    1d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9c:	ae 01       	movw	r20, r28
    1d9e:	4b 57       	subi	r20, 0x7B	; 123
    1da0:	5f 4f       	sbci	r21, 0xFF	; 255
    1da2:	62 e0       	ldi	r22, 0x02	; 2
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	c7 01       	movw	r24, r14
    1da8:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    1dac:	ae 01       	movw	r20, r28
    1dae:	4f 5f       	subi	r20, 0xFF	; 255
    1db0:	5f 4f       	sbci	r21, 0xFF	; 255
    1db2:	bc 01       	movw	r22, r24
    1db4:	c7 01       	movw	r24, r14
    1db6:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1dba:	42 e0       	ldi	r20, 0x02	; 2
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	c7 01       	movw	r24, r14
    1dc2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1dc6:	c8 57       	subi	r28, 0x78	; 120
    1dc8:	df 4f       	sbci	r29, 0xFF	; 255
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	ff 90       	pop	r15
    1dde:	ef 90       	pop	r14
    1de0:	df 90       	pop	r13
    1de2:	cf 90       	pop	r12
    1de4:	bf 90       	pop	r11
    1de6:	af 90       	pop	r10
    1de8:	9f 90       	pop	r9
    1dea:	8f 90       	pop	r8
    1dec:	7f 90       	pop	r7
    1dee:	6f 90       	pop	r6
    1df0:	08 95       	ret

00001df2 <_ZN5Gates3DECEiiii>:
int * Gates::DEC(int theta1, int phi1, int theta2,int phi2){
    1df2:	6f 92       	push	r6
    1df4:	7f 92       	push	r7
    1df6:	8f 92       	push	r8
    1df8:	9f 92       	push	r9
    1dfa:	af 92       	push	r10
    1dfc:	bf 92       	push	r11
    1dfe:	cf 92       	push	r12
    1e00:	df 92       	push	r13
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	c8 58       	subi	r28, 0x88	; 136
    1e14:	d1 09       	sbc	r29, r1
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	7c 01       	movw	r14, r24
    1e22:	3b 01       	movw	r6, r22
    1e24:	5a 01       	movw	r10, r20
    1e26:	49 01       	movw	r8, r18
    1e28:	68 01       	movw	r12, r16
	Complex dec_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
	  										   {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
						 					   {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)}};
    1e2a:	00 e0       	ldi	r16, 0x00	; 0
    1e2c:	10 e0       	ldi	r17, 0x00	; 0
    1e2e:	98 01       	movw	r18, r16
    1e30:	b9 01       	movw	r22, r18
    1e32:	a8 01       	movw	r20, r16
    1e34:	ce 01       	movw	r24, r28
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1e3c:	00 e0       	ldi	r16, 0x00	; 0
    1e3e:	10 e0       	ldi	r17, 0x00	; 0
    1e40:	98 01       	movw	r18, r16
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	50 e0       	ldi	r21, 0x00	; 0
    1e46:	60 e8       	ldi	r22, 0x80	; 128
    1e48:	7f e3       	ldi	r23, 0x3F	; 63
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	09 96       	adiw	r24, 0x09	; 9
    1e4e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1e52:	00 e0       	ldi	r16, 0x00	; 0
    1e54:	10 e0       	ldi	r17, 0x00	; 0
    1e56:	98 01       	movw	r18, r16
    1e58:	b9 01       	movw	r22, r18
    1e5a:	a8 01       	movw	r20, r16
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	41 96       	adiw	r24, 0x11	; 17
    1e60:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1e64:	00 e0       	ldi	r16, 0x00	; 0
    1e66:	10 e0       	ldi	r17, 0x00	; 0
    1e68:	98 01       	movw	r18, r16
    1e6a:	b9 01       	movw	r22, r18
    1e6c:	a8 01       	movw	r20, r16
    1e6e:	ce 01       	movw	r24, r28
    1e70:	49 96       	adiw	r24, 0x19	; 25
    1e72:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1e76:	00 e0       	ldi	r16, 0x00	; 0
    1e78:	10 e0       	ldi	r17, 0x00	; 0
    1e7a:	98 01       	movw	r18, r16
    1e7c:	b9 01       	movw	r22, r18
    1e7e:	a8 01       	movw	r20, r16
    1e80:	ce 01       	movw	r24, r28
    1e82:	81 96       	adiw	r24, 0x21	; 33
    1e84:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1e88:	00 e0       	ldi	r16, 0x00	; 0
    1e8a:	10 e0       	ldi	r17, 0x00	; 0
    1e8c:	98 01       	movw	r18, r16
    1e8e:	b9 01       	movw	r22, r18
    1e90:	a8 01       	movw	r20, r16
    1e92:	ce 01       	movw	r24, r28
    1e94:	89 96       	adiw	r24, 0x29	; 41
    1e96:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1e9a:	00 e0       	ldi	r16, 0x00	; 0
    1e9c:	10 e0       	ldi	r17, 0x00	; 0
    1e9e:	98 01       	movw	r18, r16
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	60 e8       	ldi	r22, 0x80	; 128
    1ea6:	7f e3       	ldi	r23, 0x3F	; 63
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	c1 96       	adiw	r24, 0x31	; 49
    1eac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1eb0:	00 e0       	ldi	r16, 0x00	; 0
    1eb2:	10 e0       	ldi	r17, 0x00	; 0
    1eb4:	98 01       	movw	r18, r16
    1eb6:	b9 01       	movw	r22, r18
    1eb8:	a8 01       	movw	r20, r16
    1eba:	ce 01       	movw	r24, r28
    1ebc:	c9 96       	adiw	r24, 0x39	; 57
    1ebe:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1ec2:	00 e0       	ldi	r16, 0x00	; 0
    1ec4:	10 e0       	ldi	r17, 0x00	; 0
    1ec6:	98 01       	movw	r18, r16
    1ec8:	b9 01       	movw	r22, r18
    1eca:	a8 01       	movw	r20, r16
    1ecc:	ce 01       	movw	r24, r28
    1ece:	8f 5b       	subi	r24, 0xBF	; 191
    1ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1ed6:	00 e0       	ldi	r16, 0x00	; 0
    1ed8:	10 e0       	ldi	r17, 0x00	; 0
    1eda:	98 01       	movw	r18, r16
    1edc:	b9 01       	movw	r22, r18
    1ede:	a8 01       	movw	r20, r16
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	87 5b       	subi	r24, 0xB7	; 183
    1ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1eea:	00 e0       	ldi	r16, 0x00	; 0
    1eec:	10 e0       	ldi	r17, 0x00	; 0
    1eee:	98 01       	movw	r18, r16
    1ef0:	b9 01       	movw	r22, r18
    1ef2:	a8 01       	movw	r20, r16
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	8f 5a       	subi	r24, 0xAF	; 175
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1efe:	00 e0       	ldi	r16, 0x00	; 0
    1f00:	10 e0       	ldi	r17, 0x00	; 0
    1f02:	98 01       	movw	r18, r16
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	50 e0       	ldi	r21, 0x00	; 0
    1f08:	60 e8       	ldi	r22, 0x80	; 128
    1f0a:	7f e3       	ldi	r23, 0x3F	; 63
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	87 5a       	subi	r24, 0xA7	; 167
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1f16:	00 e0       	ldi	r16, 0x00	; 0
    1f18:	10 e0       	ldi	r17, 0x00	; 0
    1f1a:	98 01       	movw	r18, r16
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	60 e8       	ldi	r22, 0x80	; 128
    1f22:	7f e3       	ldi	r23, 0x3F	; 63
    1f24:	ce 01       	movw	r24, r28
    1f26:	8f 59       	subi	r24, 0x9F	; 159
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1f2e:	00 e0       	ldi	r16, 0x00	; 0
    1f30:	10 e0       	ldi	r17, 0x00	; 0
    1f32:	98 01       	movw	r18, r16
    1f34:	b9 01       	movw	r22, r18
    1f36:	a8 01       	movw	r20, r16
    1f38:	ce 01       	movw	r24, r28
    1f3a:	87 59       	subi	r24, 0x97	; 151
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1f42:	00 e0       	ldi	r16, 0x00	; 0
    1f44:	10 e0       	ldi	r17, 0x00	; 0
    1f46:	98 01       	movw	r18, r16
    1f48:	b9 01       	movw	r22, r18
    1f4a:	a8 01       	movw	r20, r16
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	8f 58       	subi	r24, 0x8F	; 143
    1f50:	9f 4f       	sbci	r25, 0xFF	; 255
    1f52:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    1f56:	00 e0       	ldi	r16, 0x00	; 0
    1f58:	10 e0       	ldi	r17, 0x00	; 0
    1f5a:	98 01       	movw	r18, r16
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	a8 01       	movw	r20, r16
    1f60:	ce 01       	movw	r24, r28
    1f62:	87 58       	subi	r24, 0x87	; 135
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1f6a:	cb 57       	subi	r28, 0x7B	; 123
    1f6c:	df 4f       	sbci	r29, 0xFF	; 255
    1f6e:	79 82       	std	Y+1, r7	; 0x01
    1f70:	68 82       	st	Y, r6
    1f72:	c5 58       	subi	r28, 0x85	; 133
    1f74:	d0 40       	sbci	r29, 0x00	; 0
    1f76:	c9 57       	subi	r28, 0x79	; 121
    1f78:	df 4f       	sbci	r29, 0xFF	; 255
    1f7a:	99 82       	std	Y+1, r9	; 0x01
    1f7c:	88 82       	st	Y, r8
    1f7e:	c7 58       	subi	r28, 0x87	; 135
    1f80:	d0 40       	sbci	r29, 0x00	; 0
    1f82:	cf 57       	subi	r28, 0x7F	; 127
    1f84:	df 4f       	sbci	r29, 0xFF	; 255
    1f86:	b9 82       	std	Y+1, r11	; 0x01
    1f88:	a8 82       	st	Y, r10
    1f8a:	c1 58       	subi	r28, 0x81	; 129
    1f8c:	d0 40       	sbci	r29, 0x00	; 0
    1f8e:	cd 57       	subi	r28, 0x7D	; 125
    1f90:	df 4f       	sbci	r29, 0xFF	; 255
    1f92:	d9 82       	std	Y+1, r13	; 0x01
    1f94:	c8 82       	st	Y, r12
    1f96:	c3 58       	subi	r28, 0x83	; 131
    1f98:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    1f9a:	9e 01       	movw	r18, r28
    1f9c:	2f 57       	subi	r18, 0x7F	; 127
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa0:	ae 01       	movw	r20, r28
    1fa2:	4b 57       	subi	r20, 0x7B	; 123
    1fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	c7 01       	movw	r24, r14
    1fac:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    1fb0:	ae 01       	movw	r20, r28
    1fb2:	4f 5f       	subi	r20, 0xFF	; 255
    1fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	c7 01       	movw	r24, r14
    1fba:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1fbe:	42 e0       	ldi	r20, 0x02	; 2
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	c7 01       	movw	r24, r14
    1fc6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1fca:	c8 57       	subi	r28, 0x78	; 120
    1fcc:	df 4f       	sbci	r29, 0xFF	; 255
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	ff 90       	pop	r15
    1fe2:	ef 90       	pop	r14
    1fe4:	df 90       	pop	r13
    1fe6:	cf 90       	pop	r12
    1fe8:	bf 90       	pop	r11
    1fea:	af 90       	pop	r10
    1fec:	9f 90       	pop	r9
    1fee:	8f 90       	pop	r8
    1ff0:	7f 90       	pop	r7
    1ff2:	6f 90       	pop	r6
    1ff4:	08 95       	ret

00001ff6 <_ZN5Gates3SWQEiiii>:
int * Gates::SWQ(int theta1, int phi1, int theta2,int phi2){
    1ff6:	6f 92       	push	r6
    1ff8:	7f 92       	push	r7
    1ffa:	8f 92       	push	r8
    1ffc:	9f 92       	push	r9
    1ffe:	af 92       	push	r10
    2000:	bf 92       	push	r11
    2002:	cf 92       	push	r12
    2004:	df 92       	push	r13
    2006:	ef 92       	push	r14
    2008:	ff 92       	push	r15
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	c8 58       	subi	r28, 0x88	; 136
    2018:	d1 09       	sbc	r29, r1
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	7c 01       	movw	r14, r24
    2026:	3b 01       	movw	r6, r22
    2028:	5a 01       	movw	r10, r20
    202a:	49 01       	movw	r8, r18
    202c:	68 01       	movw	r12, r16
	Complex swq_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(1,0),Complex(0,0),   Complex(0,0),   Complex(0,0)},
	 										   {Complex(0,0),Complex(.5,.5), Complex(.5,-.5),Complex(0,0)},
											   {Complex(0,0),Complex(.5,-.5),Complex(.5,.5), Complex(0,0)},
											   {Complex(0,0),Complex(0,0),   Complex(0,0),   Complex(1,0)}};
    202e:	00 e0       	ldi	r16, 0x00	; 0
    2030:	10 e0       	ldi	r17, 0x00	; 0
    2032:	98 01       	movw	r18, r16
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	60 e8       	ldi	r22, 0x80	; 128
    203a:	7f e3       	ldi	r23, 0x3F	; 63
    203c:	ce 01       	movw	r24, r28
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2044:	00 e0       	ldi	r16, 0x00	; 0
    2046:	10 e0       	ldi	r17, 0x00	; 0
    2048:	98 01       	movw	r18, r16
    204a:	b9 01       	movw	r22, r18
    204c:	a8 01       	movw	r20, r16
    204e:	ce 01       	movw	r24, r28
    2050:	09 96       	adiw	r24, 0x09	; 9
    2052:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2056:	00 e0       	ldi	r16, 0x00	; 0
    2058:	10 e0       	ldi	r17, 0x00	; 0
    205a:	98 01       	movw	r18, r16
    205c:	b9 01       	movw	r22, r18
    205e:	a8 01       	movw	r20, r16
    2060:	ce 01       	movw	r24, r28
    2062:	41 96       	adiw	r24, 0x11	; 17
    2064:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2068:	00 e0       	ldi	r16, 0x00	; 0
    206a:	10 e0       	ldi	r17, 0x00	; 0
    206c:	98 01       	movw	r18, r16
    206e:	b9 01       	movw	r22, r18
    2070:	a8 01       	movw	r20, r16
    2072:	ce 01       	movw	r24, r28
    2074:	49 96       	adiw	r24, 0x19	; 25
    2076:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    207a:	00 e0       	ldi	r16, 0x00	; 0
    207c:	10 e0       	ldi	r17, 0x00	; 0
    207e:	98 01       	movw	r18, r16
    2080:	b9 01       	movw	r22, r18
    2082:	a8 01       	movw	r20, r16
    2084:	ce 01       	movw	r24, r28
    2086:	81 96       	adiw	r24, 0x21	; 33
    2088:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    208c:	00 e0       	ldi	r16, 0x00	; 0
    208e:	10 e0       	ldi	r17, 0x00	; 0
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	3f e3       	ldi	r19, 0x3F	; 63
    2094:	b9 01       	movw	r22, r18
    2096:	a8 01       	movw	r20, r16
    2098:	ce 01       	movw	r24, r28
    209a:	89 96       	adiw	r24, 0x29	; 41
    209c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    20a0:	00 e0       	ldi	r16, 0x00	; 0
    20a2:	10 e0       	ldi	r17, 0x00	; 0
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f eb       	ldi	r19, 0xBF	; 191
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	7f e3       	ldi	r23, 0x3F	; 63
    20b0:	ce 01       	movw	r24, r28
    20b2:	c1 96       	adiw	r24, 0x31	; 49
    20b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    20b8:	00 e0       	ldi	r16, 0x00	; 0
    20ba:	10 e0       	ldi	r17, 0x00	; 0
    20bc:	98 01       	movw	r18, r16
    20be:	b9 01       	movw	r22, r18
    20c0:	a8 01       	movw	r20, r16
    20c2:	ce 01       	movw	r24, r28
    20c4:	c9 96       	adiw	r24, 0x39	; 57
    20c6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    20ca:	00 e0       	ldi	r16, 0x00	; 0
    20cc:	10 e0       	ldi	r17, 0x00	; 0
    20ce:	98 01       	movw	r18, r16
    20d0:	b9 01       	movw	r22, r18
    20d2:	a8 01       	movw	r20, r16
    20d4:	ce 01       	movw	r24, r28
    20d6:	8f 5b       	subi	r24, 0xBF	; 191
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    20de:	00 e0       	ldi	r16, 0x00	; 0
    20e0:	10 e0       	ldi	r17, 0x00	; 0
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f eb       	ldi	r19, 0xBF	; 191
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	7f e3       	ldi	r23, 0x3F	; 63
    20ee:	ce 01       	movw	r24, r28
    20f0:	87 5b       	subi	r24, 0xB7	; 183
    20f2:	9f 4f       	sbci	r25, 0xFF	; 255
    20f4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    20f8:	00 e0       	ldi	r16, 0x00	; 0
    20fa:	10 e0       	ldi	r17, 0x00	; 0
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f e3       	ldi	r19, 0x3F	; 63
    2100:	b9 01       	movw	r22, r18
    2102:	a8 01       	movw	r20, r16
    2104:	ce 01       	movw	r24, r28
    2106:	8f 5a       	subi	r24, 0xAF	; 175
    2108:	9f 4f       	sbci	r25, 0xFF	; 255
    210a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    210e:	00 e0       	ldi	r16, 0x00	; 0
    2110:	10 e0       	ldi	r17, 0x00	; 0
    2112:	98 01       	movw	r18, r16
    2114:	b9 01       	movw	r22, r18
    2116:	a8 01       	movw	r20, r16
    2118:	ce 01       	movw	r24, r28
    211a:	87 5a       	subi	r24, 0xA7	; 167
    211c:	9f 4f       	sbci	r25, 0xFF	; 255
    211e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2122:	00 e0       	ldi	r16, 0x00	; 0
    2124:	10 e0       	ldi	r17, 0x00	; 0
    2126:	98 01       	movw	r18, r16
    2128:	b9 01       	movw	r22, r18
    212a:	a8 01       	movw	r20, r16
    212c:	ce 01       	movw	r24, r28
    212e:	8f 59       	subi	r24, 0x9F	; 159
    2130:	9f 4f       	sbci	r25, 0xFF	; 255
    2132:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2136:	00 e0       	ldi	r16, 0x00	; 0
    2138:	10 e0       	ldi	r17, 0x00	; 0
    213a:	98 01       	movw	r18, r16
    213c:	b9 01       	movw	r22, r18
    213e:	a8 01       	movw	r20, r16
    2140:	ce 01       	movw	r24, r28
    2142:	87 59       	subi	r24, 0x97	; 151
    2144:	9f 4f       	sbci	r25, 0xFF	; 255
    2146:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    214a:	00 e0       	ldi	r16, 0x00	; 0
    214c:	10 e0       	ldi	r17, 0x00	; 0
    214e:	98 01       	movw	r18, r16
    2150:	b9 01       	movw	r22, r18
    2152:	a8 01       	movw	r20, r16
    2154:	ce 01       	movw	r24, r28
    2156:	8f 58       	subi	r24, 0x8F	; 143
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    215e:	00 e0       	ldi	r16, 0x00	; 0
    2160:	10 e0       	ldi	r17, 0x00	; 0
    2162:	98 01       	movw	r18, r16
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	60 e8       	ldi	r22, 0x80	; 128
    216a:	7f e3       	ldi	r23, 0x3F	; 63
    216c:	ce 01       	movw	r24, r28
    216e:	87 58       	subi	r24, 0x87	; 135
    2170:	9f 4f       	sbci	r25, 0xFF	; 255
    2172:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2176:	cb 57       	subi	r28, 0x7B	; 123
    2178:	df 4f       	sbci	r29, 0xFF	; 255
    217a:	79 82       	std	Y+1, r7	; 0x01
    217c:	68 82       	st	Y, r6
    217e:	c5 58       	subi	r28, 0x85	; 133
    2180:	d0 40       	sbci	r29, 0x00	; 0
    2182:	c9 57       	subi	r28, 0x79	; 121
    2184:	df 4f       	sbci	r29, 0xFF	; 255
    2186:	99 82       	std	Y+1, r9	; 0x01
    2188:	88 82       	st	Y, r8
    218a:	c7 58       	subi	r28, 0x87	; 135
    218c:	d0 40       	sbci	r29, 0x00	; 0
    218e:	cf 57       	subi	r28, 0x7F	; 127
    2190:	df 4f       	sbci	r29, 0xFF	; 255
    2192:	b9 82       	std	Y+1, r11	; 0x01
    2194:	a8 82       	st	Y, r10
    2196:	c1 58       	subi	r28, 0x81	; 129
    2198:	d0 40       	sbci	r29, 0x00	; 0
    219a:	cd 57       	subi	r28, 0x7D	; 125
    219c:	df 4f       	sbci	r29, 0xFF	; 255
    219e:	d9 82       	std	Y+1, r13	; 0x01
    21a0:	c8 82       	st	Y, r12
    21a2:	c3 58       	subi	r28, 0x83	; 131
    21a4:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swq_matrix),QB_SIZE2);
    21a6:	9e 01       	movw	r18, r28
    21a8:	2f 57       	subi	r18, 0x7F	; 127
    21aa:	3f 4f       	sbci	r19, 0xFF	; 255
    21ac:	ae 01       	movw	r20, r28
    21ae:	4b 57       	subi	r20, 0x7B	; 123
    21b0:	5f 4f       	sbci	r21, 0xFF	; 255
    21b2:	62 e0       	ldi	r22, 0x02	; 2
    21b4:	70 e0       	ldi	r23, 0x00	; 0
    21b6:	c7 01       	movw	r24, r14
    21b8:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    21bc:	ae 01       	movw	r20, r28
    21be:	4f 5f       	subi	r20, 0xFF	; 255
    21c0:	5f 4f       	sbci	r21, 0xFF	; 255
    21c2:	bc 01       	movw	r22, r24
    21c4:	c7 01       	movw	r24, r14
    21c6:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    21ca:	42 e0       	ldi	r20, 0x02	; 2
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	bc 01       	movw	r22, r24
    21d0:	c7 01       	movw	r24, r14
    21d2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    21d6:	c8 57       	subi	r28, 0x78	; 120
    21d8:	df 4f       	sbci	r29, 0xFF	; 255
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	1f 91       	pop	r17
    21ea:	0f 91       	pop	r16
    21ec:	ff 90       	pop	r15
    21ee:	ef 90       	pop	r14
    21f0:	df 90       	pop	r13
    21f2:	cf 90       	pop	r12
    21f4:	bf 90       	pop	r11
    21f6:	af 90       	pop	r10
    21f8:	9f 90       	pop	r9
    21fa:	8f 90       	pop	r8
    21fc:	7f 90       	pop	r7
    21fe:	6f 90       	pop	r6
    2200:	08 95       	ret

00002202 <_ZN5Gates3SWIEiiii>:
int * Gates::SWI(int theta1, int phi1, int theta2,int phi2){
    2202:	6f 92       	push	r6
    2204:	7f 92       	push	r7
    2206:	8f 92       	push	r8
    2208:	9f 92       	push	r9
    220a:	af 92       	push	r10
    220c:	bf 92       	push	r11
    220e:	cf 92       	push	r12
    2210:	df 92       	push	r13
    2212:	ef 92       	push	r14
    2214:	ff 92       	push	r15
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	c8 58       	subi	r28, 0x88	; 136
    2224:	d1 09       	sbc	r29, r1
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	7c 01       	movw	r14, r24
    2232:	3b 01       	movw	r6, r22
    2234:	5a 01       	movw	r10, r20
    2236:	49 01       	movw	r8, r18
    2238:	68 01       	movw	r12, r16
	Complex dec_matrix[QB_SIZE2*2][QB_SIZE2*2]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,1),Complex(0,0)},
 											   {Complex(0,0),Complex(0,1),Complex(0,0),Complex(0,0)},
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    223a:	00 e0       	ldi	r16, 0x00	; 0
    223c:	10 e0       	ldi	r17, 0x00	; 0
    223e:	98 01       	movw	r18, r16
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	60 e8       	ldi	r22, 0x80	; 128
    2246:	7f e3       	ldi	r23, 0x3F	; 63
    2248:	ce 01       	movw	r24, r28
    224a:	01 96       	adiw	r24, 0x01	; 1
    224c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2250:	00 e0       	ldi	r16, 0x00	; 0
    2252:	10 e0       	ldi	r17, 0x00	; 0
    2254:	98 01       	movw	r18, r16
    2256:	b9 01       	movw	r22, r18
    2258:	a8 01       	movw	r20, r16
    225a:	ce 01       	movw	r24, r28
    225c:	09 96       	adiw	r24, 0x09	; 9
    225e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2262:	00 e0       	ldi	r16, 0x00	; 0
    2264:	10 e0       	ldi	r17, 0x00	; 0
    2266:	98 01       	movw	r18, r16
    2268:	b9 01       	movw	r22, r18
    226a:	a8 01       	movw	r20, r16
    226c:	ce 01       	movw	r24, r28
    226e:	41 96       	adiw	r24, 0x11	; 17
    2270:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2274:	00 e0       	ldi	r16, 0x00	; 0
    2276:	10 e0       	ldi	r17, 0x00	; 0
    2278:	98 01       	movw	r18, r16
    227a:	b9 01       	movw	r22, r18
    227c:	a8 01       	movw	r20, r16
    227e:	ce 01       	movw	r24, r28
    2280:	49 96       	adiw	r24, 0x19	; 25
    2282:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2286:	00 e0       	ldi	r16, 0x00	; 0
    2288:	10 e0       	ldi	r17, 0x00	; 0
    228a:	98 01       	movw	r18, r16
    228c:	b9 01       	movw	r22, r18
    228e:	a8 01       	movw	r20, r16
    2290:	ce 01       	movw	r24, r28
    2292:	81 96       	adiw	r24, 0x21	; 33
    2294:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2298:	00 e0       	ldi	r16, 0x00	; 0
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	98 01       	movw	r18, r16
    229e:	b9 01       	movw	r22, r18
    22a0:	a8 01       	movw	r20, r16
    22a2:	ce 01       	movw	r24, r28
    22a4:	89 96       	adiw	r24, 0x29	; 41
    22a6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    22aa:	00 e0       	ldi	r16, 0x00	; 0
    22ac:	10 e0       	ldi	r17, 0x00	; 0
    22ae:	20 e8       	ldi	r18, 0x80	; 128
    22b0:	3f e3       	ldi	r19, 0x3F	; 63
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	ba 01       	movw	r22, r20
    22b8:	ce 01       	movw	r24, r28
    22ba:	c1 96       	adiw	r24, 0x31	; 49
    22bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    22c0:	00 e0       	ldi	r16, 0x00	; 0
    22c2:	10 e0       	ldi	r17, 0x00	; 0
    22c4:	98 01       	movw	r18, r16
    22c6:	b9 01       	movw	r22, r18
    22c8:	a8 01       	movw	r20, r16
    22ca:	ce 01       	movw	r24, r28
    22cc:	c9 96       	adiw	r24, 0x39	; 57
    22ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    22d2:	00 e0       	ldi	r16, 0x00	; 0
    22d4:	10 e0       	ldi	r17, 0x00	; 0
    22d6:	98 01       	movw	r18, r16
    22d8:	b9 01       	movw	r22, r18
    22da:	a8 01       	movw	r20, r16
    22dc:	ce 01       	movw	r24, r28
    22de:	8f 5b       	subi	r24, 0xBF	; 191
    22e0:	9f 4f       	sbci	r25, 0xFF	; 255
    22e2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    22e6:	00 e0       	ldi	r16, 0x00	; 0
    22e8:	10 e0       	ldi	r17, 0x00	; 0
    22ea:	20 e8       	ldi	r18, 0x80	; 128
    22ec:	3f e3       	ldi	r19, 0x3F	; 63
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	ba 01       	movw	r22, r20
    22f4:	ce 01       	movw	r24, r28
    22f6:	87 5b       	subi	r24, 0xB7	; 183
    22f8:	9f 4f       	sbci	r25, 0xFF	; 255
    22fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    22fe:	00 e0       	ldi	r16, 0x00	; 0
    2300:	10 e0       	ldi	r17, 0x00	; 0
    2302:	98 01       	movw	r18, r16
    2304:	b9 01       	movw	r22, r18
    2306:	a8 01       	movw	r20, r16
    2308:	ce 01       	movw	r24, r28
    230a:	8f 5a       	subi	r24, 0xAF	; 175
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2312:	00 e0       	ldi	r16, 0x00	; 0
    2314:	10 e0       	ldi	r17, 0x00	; 0
    2316:	98 01       	movw	r18, r16
    2318:	b9 01       	movw	r22, r18
    231a:	a8 01       	movw	r20, r16
    231c:	ce 01       	movw	r24, r28
    231e:	87 5a       	subi	r24, 0xA7	; 167
    2320:	9f 4f       	sbci	r25, 0xFF	; 255
    2322:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2326:	00 e0       	ldi	r16, 0x00	; 0
    2328:	10 e0       	ldi	r17, 0x00	; 0
    232a:	98 01       	movw	r18, r16
    232c:	b9 01       	movw	r22, r18
    232e:	a8 01       	movw	r20, r16
    2330:	ce 01       	movw	r24, r28
    2332:	8f 59       	subi	r24, 0x9F	; 159
    2334:	9f 4f       	sbci	r25, 0xFF	; 255
    2336:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    233a:	00 e0       	ldi	r16, 0x00	; 0
    233c:	10 e0       	ldi	r17, 0x00	; 0
    233e:	98 01       	movw	r18, r16
    2340:	b9 01       	movw	r22, r18
    2342:	a8 01       	movw	r20, r16
    2344:	ce 01       	movw	r24, r28
    2346:	87 59       	subi	r24, 0x97	; 151
    2348:	9f 4f       	sbci	r25, 0xFF	; 255
    234a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    234e:	00 e0       	ldi	r16, 0x00	; 0
    2350:	10 e0       	ldi	r17, 0x00	; 0
    2352:	98 01       	movw	r18, r16
    2354:	b9 01       	movw	r22, r18
    2356:	a8 01       	movw	r20, r16
    2358:	ce 01       	movw	r24, r28
    235a:	8f 58       	subi	r24, 0x8F	; 143
    235c:	9f 4f       	sbci	r25, 0xFF	; 255
    235e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    2362:	00 e0       	ldi	r16, 0x00	; 0
    2364:	10 e0       	ldi	r17, 0x00	; 0
    2366:	98 01       	movw	r18, r16
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	60 e8       	ldi	r22, 0x80	; 128
    236e:	7f e3       	ldi	r23, 0x3F	; 63
    2370:	ce 01       	movw	r24, r28
    2372:	87 58       	subi	r24, 0x87	; 135
    2374:	9f 4f       	sbci	r25, 0xFF	; 255
    2376:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    237a:	cb 57       	subi	r28, 0x7B	; 123
    237c:	df 4f       	sbci	r29, 0xFF	; 255
    237e:	79 82       	std	Y+1, r7	; 0x01
    2380:	68 82       	st	Y, r6
    2382:	c5 58       	subi	r28, 0x85	; 133
    2384:	d0 40       	sbci	r29, 0x00	; 0
    2386:	c9 57       	subi	r28, 0x79	; 121
    2388:	df 4f       	sbci	r29, 0xFF	; 255
    238a:	99 82       	std	Y+1, r9	; 0x01
    238c:	88 82       	st	Y, r8
    238e:	c7 58       	subi	r28, 0x87	; 135
    2390:	d0 40       	sbci	r29, 0x00	; 0
    2392:	cf 57       	subi	r28, 0x7F	; 127
    2394:	df 4f       	sbci	r29, 0xFF	; 255
    2396:	b9 82       	std	Y+1, r11	; 0x01
    2398:	a8 82       	st	Y, r10
    239a:	c1 58       	subi	r28, 0x81	; 129
    239c:	d0 40       	sbci	r29, 0x00	; 0
    239e:	cd 57       	subi	r28, 0x7D	; 125
    23a0:	df 4f       	sbci	r29, 0xFF	; 255
    23a2:	d9 82       	std	Y+1, r13	; 0x01
    23a4:	c8 82       	st	Y, r12
    23a6:	c3 58       	subi	r28, 0x83	; 131
    23a8:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    23aa:	9e 01       	movw	r18, r28
    23ac:	2f 57       	subi	r18, 0x7F	; 127
    23ae:	3f 4f       	sbci	r19, 0xFF	; 255
    23b0:	ae 01       	movw	r20, r28
    23b2:	4b 57       	subi	r20, 0x7B	; 123
    23b4:	5f 4f       	sbci	r21, 0xFF	; 255
    23b6:	62 e0       	ldi	r22, 0x02	; 2
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	c7 01       	movw	r24, r14
    23bc:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    23c0:	ae 01       	movw	r20, r28
    23c2:	4f 5f       	subi	r20, 0xFF	; 255
    23c4:	5f 4f       	sbci	r21, 0xFF	; 255
    23c6:	bc 01       	movw	r22, r24
    23c8:	c7 01       	movw	r24, r14
    23ca:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    23ce:	42 e0       	ldi	r20, 0x02	; 2
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	bc 01       	movw	r22, r24
    23d4:	c7 01       	movw	r24, r14
    23d6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    23da:	c8 57       	subi	r28, 0x78	; 120
    23dc:	df 4f       	sbci	r29, 0xFF	; 255
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	1f 91       	pop	r17
    23ee:	0f 91       	pop	r16
    23f0:	ff 90       	pop	r15
    23f2:	ef 90       	pop	r14
    23f4:	df 90       	pop	r13
    23f6:	cf 90       	pop	r12
    23f8:	bf 90       	pop	r11
    23fa:	af 90       	pop	r10
    23fc:	9f 90       	pop	r9
    23fe:	8f 90       	pop	r8
    2400:	7f 90       	pop	r7
    2402:	6f 90       	pop	r6
    2404:	08 95       	ret

00002406 <_ZN5Gates3ROXEiii>:
int * Gates::ROX(int theta,int phi,int delta){
    2406:	2f 92       	push	r2
    2408:	3f 92       	push	r3
    240a:	4f 92       	push	r4
    240c:	5f 92       	push	r5
    240e:	6f 92       	push	r6
    2410:	7f 92       	push	r7
    2412:	8f 92       	push	r8
    2414:	9f 92       	push	r9
    2416:	af 92       	push	r10
    2418:	bf 92       	push	r11
    241a:	cf 92       	push	r12
    241c:	df 92       	push	r13
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	a4 97       	sbiw	r28, 0x24	; 36
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	7c 01       	movw	r14, r24
    243c:	1b 01       	movw	r2, r22
    243e:	6a 01       	movw	r12, r20
	Complex rox_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(cos(delta/2),0), Complex(0,-sin(delta/2))},
    2440:	33 23       	and	r19, r19
    2442:	14 f4       	brge	.+4      	; 0x2448 <_ZN5Gates3ROXEiii+0x42>
    2444:	2f 5f       	subi	r18, 0xFF	; 255
    2446:	3f 4f       	sbci	r19, 0xFF	; 255
    2448:	b9 01       	movw	r22, r18
    244a:	75 95       	asr	r23
    244c:	67 95       	ror	r22
    244e:	88 27       	eor	r24, r24
    2450:	77 fd       	sbrc	r23, 7
    2452:	80 95       	com	r24
    2454:	98 2f       	mov	r25, r24
    2456:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
    245a:	4b 01       	movw	r8, r22
    245c:	5c 01       	movw	r10, r24
    245e:	0e 94 99 1b 	call	0x3732	; 0x3732 <cos>
    2462:	2b 01       	movw	r4, r22
    2464:	3c 01       	movw	r6, r24
											   {Complex(0,-sin(delta/2)),Complex(cos(delta/2),0)}};
    2466:	00 e0       	ldi	r16, 0x00	; 0
    2468:	10 e0       	ldi	r17, 0x00	; 0
    246a:	98 01       	movw	r18, r16
    246c:	ab 01       	movw	r20, r22
    246e:	bc 01       	movw	r22, r24
    2470:	ce 01       	movw	r24, r28
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
											   {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
}
int * Gates::ROX(int theta,int phi,int delta){
	Complex rox_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(cos(delta/2),0), Complex(0,-sin(delta/2))},
    2478:	c5 01       	movw	r24, r10
    247a:	b4 01       	movw	r22, r8
    247c:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <sin>
											   {Complex(0,-sin(delta/2)),Complex(cos(delta/2),0)}};
    2480:	4b 01       	movw	r8, r22
    2482:	5c 01       	movw	r10, r24
    2484:	b7 fa       	bst	r11, 7
    2486:	b0 94       	com	r11
    2488:	b7 f8       	bld	r11, 7
    248a:	b0 94       	com	r11
    248c:	95 01       	movw	r18, r10
    248e:	84 01       	movw	r16, r8
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	ba 01       	movw	r22, r20
    2496:	ce 01       	movw	r24, r28
    2498:	09 96       	adiw	r24, 0x09	; 9
    249a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    249e:	95 01       	movw	r18, r10
    24a0:	84 01       	movw	r16, r8
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	ba 01       	movw	r22, r20
    24a8:	ce 01       	movw	r24, r28
    24aa:	41 96       	adiw	r24, 0x11	; 17
    24ac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    24b0:	00 e0       	ldi	r16, 0x00	; 0
    24b2:	10 e0       	ldi	r17, 0x00	; 0
    24b4:	98 01       	movw	r18, r16
    24b6:	b3 01       	movw	r22, r6
    24b8:	a2 01       	movw	r20, r4
    24ba:	ce 01       	movw	r24, r28
    24bc:	49 96       	adiw	r24, 0x19	; 25
    24be:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    24c2:	3c a2       	std	Y+36, r3	; 0x24
    24c4:	2b a2       	std	Y+35, r2	; 0x23
    24c6:	da a2       	std	Y+34, r13	; 0x22
    24c8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
    24ca:	9e 01       	movw	r18, r28
    24cc:	2f 5d       	subi	r18, 0xDF	; 223
    24ce:	3f 4f       	sbci	r19, 0xFF	; 255
    24d0:	ae 01       	movw	r20, r28
    24d2:	4d 5d       	subi	r20, 0xDD	; 221
    24d4:	5f 4f       	sbci	r21, 0xFF	; 255
    24d6:	61 e0       	ldi	r22, 0x01	; 1
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	c7 01       	movw	r24, r14
    24dc:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    24e0:	ae 01       	movw	r20, r28
    24e2:	4f 5f       	subi	r20, 0xFF	; 255
    24e4:	5f 4f       	sbci	r21, 0xFF	; 255
    24e6:	bc 01       	movw	r22, r24
    24e8:	c7 01       	movw	r24, r14
    24ea:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	bc 01       	movw	r22, r24
    24f4:	c7 01       	movw	r24, r14
    24f6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    24fa:	a4 96       	adiw	r28, 0x24	; 36
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	ff 90       	pop	r15
    2510:	ef 90       	pop	r14
    2512:	df 90       	pop	r13
    2514:	cf 90       	pop	r12
    2516:	bf 90       	pop	r11
    2518:	af 90       	pop	r10
    251a:	9f 90       	pop	r9
    251c:	8f 90       	pop	r8
    251e:	7f 90       	pop	r7
    2520:	6f 90       	pop	r6
    2522:	5f 90       	pop	r5
    2524:	4f 90       	pop	r4
    2526:	3f 90       	pop	r3
    2528:	2f 90       	pop	r2
    252a:	08 95       	ret

0000252c <_ZN5Gates3ROYEiii>:
int * Gates::ROY(int theta,int phi,int delta){
    252c:	2f 92       	push	r2
    252e:	3f 92       	push	r3
    2530:	4f 92       	push	r4
    2532:	5f 92       	push	r5
    2534:	6f 92       	push	r6
    2536:	7f 92       	push	r7
    2538:	8f 92       	push	r8
    253a:	9f 92       	push	r9
    253c:	af 92       	push	r10
    253e:	bf 92       	push	r11
    2540:	cf 92       	push	r12
    2542:	df 92       	push	r13
    2544:	ef 92       	push	r14
    2546:	ff 92       	push	r15
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	a4 97       	sbiw	r28, 0x24	; 36
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	7c 01       	movw	r14, r24
    2562:	1b 01       	movw	r2, r22
    2564:	6a 01       	movw	r12, r20
	Complex roy_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(cos(delta/2),0),Complex(-sin(delta/2),0)},
    2566:	33 23       	and	r19, r19
    2568:	14 f4       	brge	.+4      	; 0x256e <_ZN5Gates3ROYEiii+0x42>
    256a:	2f 5f       	subi	r18, 0xFF	; 255
    256c:	3f 4f       	sbci	r19, 0xFF	; 255
    256e:	b9 01       	movw	r22, r18
    2570:	75 95       	asr	r23
    2572:	67 95       	ror	r22
    2574:	88 27       	eor	r24, r24
    2576:	77 fd       	sbrc	r23, 7
    2578:	80 95       	com	r24
    257a:	98 2f       	mov	r25, r24
    257c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
    2580:	4b 01       	movw	r8, r22
    2582:	5c 01       	movw	r10, r24
    2584:	0e 94 99 1b 	call	0x3732	; 0x3732 <cos>
    2588:	2b 01       	movw	r4, r22
    258a:	3c 01       	movw	r6, r24
											   {Complex(sin(delta/2),0),Complex(cos(delta/2),0)}};
    258c:	00 e0       	ldi	r16, 0x00	; 0
    258e:	10 e0       	ldi	r17, 0x00	; 0
    2590:	98 01       	movw	r18, r16
    2592:	ab 01       	movw	r20, r22
    2594:	bc 01       	movw	r22, r24
    2596:	ce 01       	movw	r24, r28
    2598:	01 96       	adiw	r24, 0x01	; 1
    259a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
											   {Complex(0,-sin(delta/2)),Complex(cos(delta/2),0)}};
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
}
int * Gates::ROY(int theta,int phi,int delta){
	Complex roy_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(cos(delta/2),0),Complex(-sin(delta/2),0)},
    259e:	c5 01       	movw	r24, r10
    25a0:	b4 01       	movw	r22, r8
    25a2:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <sin>
    25a6:	4b 01       	movw	r8, r22
    25a8:	5c 01       	movw	r10, r24
											   {Complex(sin(delta/2),0),Complex(cos(delta/2),0)}};
    25aa:	ab 01       	movw	r20, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	70 58       	subi	r23, 0x80	; 128
    25b0:	00 e0       	ldi	r16, 0x00	; 0
    25b2:	10 e0       	ldi	r17, 0x00	; 0
    25b4:	98 01       	movw	r18, r16
    25b6:	ce 01       	movw	r24, r28
    25b8:	09 96       	adiw	r24, 0x09	; 9
    25ba:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    25be:	00 e0       	ldi	r16, 0x00	; 0
    25c0:	10 e0       	ldi	r17, 0x00	; 0
    25c2:	98 01       	movw	r18, r16
    25c4:	b5 01       	movw	r22, r10
    25c6:	a4 01       	movw	r20, r8
    25c8:	ce 01       	movw	r24, r28
    25ca:	41 96       	adiw	r24, 0x11	; 17
    25cc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    25d0:	00 e0       	ldi	r16, 0x00	; 0
    25d2:	10 e0       	ldi	r17, 0x00	; 0
    25d4:	98 01       	movw	r18, r16
    25d6:	b3 01       	movw	r22, r6
    25d8:	a2 01       	movw	r20, r4
    25da:	ce 01       	movw	r24, r28
    25dc:	49 96       	adiw	r24, 0x19	; 25
    25de:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    25e2:	3c a2       	std	Y+36, r3	; 0x24
    25e4:	2b a2       	std	Y+35, r2	; 0x23
    25e6:	da a2       	std	Y+34, r13	; 0x22
    25e8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    25ea:	9e 01       	movw	r18, r28
    25ec:	2f 5d       	subi	r18, 0xDF	; 223
    25ee:	3f 4f       	sbci	r19, 0xFF	; 255
    25f0:	ae 01       	movw	r20, r28
    25f2:	4d 5d       	subi	r20, 0xDD	; 221
    25f4:	5f 4f       	sbci	r21, 0xFF	; 255
    25f6:	61 e0       	ldi	r22, 0x01	; 1
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	c7 01       	movw	r24, r14
    25fc:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    2600:	ae 01       	movw	r20, r28
    2602:	4f 5f       	subi	r20, 0xFF	; 255
    2604:	5f 4f       	sbci	r21, 0xFF	; 255
    2606:	bc 01       	movw	r22, r24
    2608:	c7 01       	movw	r24, r14
    260a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    260e:	41 e0       	ldi	r20, 0x01	; 1
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	bc 01       	movw	r22, r24
    2614:	c7 01       	movw	r24, r14
    2616:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    261a:	a4 96       	adiw	r28, 0x24	; 36
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	df 90       	pop	r13
    2634:	cf 90       	pop	r12
    2636:	bf 90       	pop	r11
    2638:	af 90       	pop	r10
    263a:	9f 90       	pop	r9
    263c:	8f 90       	pop	r8
    263e:	7f 90       	pop	r7
    2640:	6f 90       	pop	r6
    2642:	5f 90       	pop	r5
    2644:	4f 90       	pop	r4
    2646:	3f 90       	pop	r3
    2648:	2f 90       	pop	r2
    264a:	08 95       	ret

0000264c <_ZN5Gates3ROZEiii>:
int * Gates::ROZ(int theta,int phi,int delta){
    264c:	8f 92       	push	r8
    264e:	9f 92       	push	r9
    2650:	af 92       	push	r10
    2652:	bf 92       	push	r11
    2654:	cf 92       	push	r12
    2656:	df 92       	push	r13
    2658:	ef 92       	push	r14
    265a:	ff 92       	push	r15
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	a4 97       	sbiw	r28, 0x24	; 36
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	7c 01       	movw	r14, r24
    2676:	5b 01       	movw	r10, r22
    2678:	6a 01       	movw	r12, r20
    267a:	49 01       	movw	r8, r18
	Complex roy_matrix[QB_SIZE1*2][QB_SIZE1*2]{{Complex(0,exp(-delta/2)),Complex(0,0)},
    267c:	88 27       	eor	r24, r24
    267e:	99 27       	eor	r25, r25
    2680:	82 1b       	sub	r24, r18
    2682:	93 0b       	sbc	r25, r19
    2684:	0a f4       	brpl	.+2      	; 0x2688 <_ZN5Gates3ROZEiii+0x3c>
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	bc 01       	movw	r22, r24
    268a:	75 95       	asr	r23
    268c:	67 95       	ror	r22
    268e:	88 27       	eor	r24, r24
    2690:	77 fd       	sbrc	r23, 7
    2692:	80 95       	com	r24
    2694:	98 2f       	mov	r25, r24
    2696:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
    269a:	0e 94 09 1c 	call	0x3812	; 0x3812 <exp>
    269e:	8b 01       	movw	r16, r22
    26a0:	9c 01       	movw	r18, r24
											   {Complex(0,0),			 Complex(0,exp(delta/2))}};
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	ba 01       	movw	r22, r20
    26a8:	ce 01       	movw	r24, r28
    26aa:	01 96       	adiw	r24, 0x01	; 1
    26ac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    26b0:	00 e0       	ldi	r16, 0x00	; 0
    26b2:	10 e0       	ldi	r17, 0x00	; 0
    26b4:	98 01       	movw	r18, r16
    26b6:	b9 01       	movw	r22, r18
    26b8:	a8 01       	movw	r20, r16
    26ba:	ce 01       	movw	r24, r28
    26bc:	09 96       	adiw	r24, 0x09	; 9
    26be:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    26c2:	00 e0       	ldi	r16, 0x00	; 0
    26c4:	10 e0       	ldi	r17, 0x00	; 0
    26c6:	98 01       	movw	r18, r16
    26c8:	b9 01       	movw	r22, r18
    26ca:	a8 01       	movw	r20, r16
    26cc:	ce 01       	movw	r24, r28
    26ce:	41 96       	adiw	r24, 0x11	; 17
    26d0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
    26d4:	c4 01       	movw	r24, r8
    26d6:	99 23       	and	r25, r25
    26d8:	0c f4       	brge	.+2      	; 0x26dc <_ZN5Gates3ROZEiii+0x90>
    26da:	01 96       	adiw	r24, 0x01	; 1
    26dc:	bc 01       	movw	r22, r24
    26de:	75 95       	asr	r23
    26e0:	67 95       	ror	r22
    26e2:	88 27       	eor	r24, r24
    26e4:	77 fd       	sbrc	r23, 7
    26e6:	80 95       	com	r24
    26e8:	98 2f       	mov	r25, r24
    26ea:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__floatsisf>
    26ee:	0e 94 09 1c 	call	0x3812	; 0x3812 <exp>
    26f2:	8b 01       	movw	r16, r22
    26f4:	9c 01       	movw	r18, r24
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	ba 01       	movw	r22, r20
    26fc:	ce 01       	movw	r24, r28
    26fe:	49 96       	adiw	r24, 0x19	; 25
    2700:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    2704:	bc a2       	std	Y+36, r11	; 0x24
    2706:	ab a2       	std	Y+35, r10	; 0x23
    2708:	da a2       	std	Y+34, r13	; 0x22
    270a:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    270c:	9e 01       	movw	r18, r28
    270e:	2f 5d       	subi	r18, 0xDF	; 223
    2710:	3f 4f       	sbci	r19, 0xFF	; 255
    2712:	ae 01       	movw	r20, r28
    2714:	4d 5d       	subi	r20, 0xDD	; 221
    2716:	5f 4f       	sbci	r21, 0xFF	; 255
    2718:	61 e0       	ldi	r22, 0x01	; 1
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	c7 01       	movw	r24, r14
    271e:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates8ampl2vecEiPiS0_>
    2722:	ae 01       	movw	r20, r28
    2724:	4f 5f       	subi	r20, 0xFF	; 255
    2726:	5f 4f       	sbci	r21, 0xFF	; 255
    2728:	bc 01       	movw	r22, r24
    272a:	c7 01       	movw	r24, r14
    272c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	bc 01       	movw	r22, r24
    2736:	c7 01       	movw	r24, r14
    2738:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Gates8vec2amplEP7Complexi>
}
    273c:	a4 96       	adiw	r28, 0x24	; 36
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	ff 90       	pop	r15
    2752:	ef 90       	pop	r14
    2754:	df 90       	pop	r13
    2756:	cf 90       	pop	r12
    2758:	bf 90       	pop	r11
    275a:	af 90       	pop	r10
    275c:	9f 90       	pop	r9
    275e:	8f 90       	pop	r8
    2760:	08 95       	ret

00002762 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}

Serial s;
    2762:	89 e0       	ldi	r24, 0x09	; 9
    2764:	91 e0       	ldi	r25, 0x01	; 1
    2766:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN6SerialC1Ev>
    276a:	08 95       	ret

0000276c <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){serial.writestr("INITIALIZING . . . ");DDRA=0xFF;program_counter=0;}
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	ec 01       	movw	r28, r24
    2776:	0e 94 10 02 	call	0x420	; 0x420 <_ZN6EEPromC1Ev>
    277a:	8e 01       	movw	r16, r28
    277c:	0f 5f       	subi	r16, 0xFF	; 255
    277e:	1f 4f       	sbci	r17, 0xFF	; 255
    2780:	c8 01       	movw	r24, r16
    2782:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN6SerialC1Ev>
    2786:	ce 01       	movw	r24, r28
    2788:	05 96       	adiw	r24, 0x05	; 5
    278a:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5GatesC1Ev>
    278e:	61 eb       	ldi	r22, 0xB1	; 177
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	c8 01       	movw	r24, r16
    2794:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
    2798:	8f ef       	ldi	r24, 0xFF	; 255
    279a:	8a bb       	out	0x1a, r24	; 26
    279c:	1c 82       	std	Y+4, r1	; 0x04
    279e:	1b 82       	std	Y+3, r1	; 0x03
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	1f 91       	pop	r17
    27a6:	0f 91       	pop	r16
    27a8:	08 95       	ret

000027aa <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    27aa:	7b b3       	in	r23, 0x1b	; 27
    27ac:	21 e0       	ldi	r18, 0x01	; 1
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	c9 01       	movw	r24, r18
    27b2:	06 2e       	mov	r0, r22
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <_ZN4QEPU10setctrlpinEii+0x10>
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	0a 94       	dec	r0
    27bc:	e2 f7       	brpl	.-8      	; 0x27b6 <_ZN4QEPU10setctrlpinEii+0xc>
    27be:	80 95       	com	r24
    27c0:	87 23       	and	r24, r23
    27c2:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    27c4:	8b b3       	in	r24, 0x1b	; 27
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <_ZN4QEPU10setctrlpinEii+0x22>
    27c8:	44 0f       	add	r20, r20
    27ca:	55 1f       	adc	r21, r21
    27cc:	6a 95       	dec	r22
    27ce:	e2 f7       	brpl	.-8      	; 0x27c8 <_ZN4QEPU10setctrlpinEii+0x1e>
    27d0:	48 2b       	or	r20, r24
    27d2:	4b bb       	out	0x1b, r20	; 27
    27d4:	08 95       	ret

000027d6 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){serial.writestr("INITIALIZING . . . ");DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    27dc:	8f ef       	ldi	r24, 0xFF	; 255
    27de:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    27e0:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    27e2:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    27e4:	64 e0       	ldi	r22, 0x04	; 4
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	ce 01       	movw	r24, r28
    27ea:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	50 e0       	ldi	r21, 0x00	; 0
    27f2:	66 e0       	ldi	r22, 0x06	; 6
    27f4:	70 e0       	ldi	r23, 0x00	; 0
    27f6:	ce 01       	movw	r24, r28
    27f8:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	66 e0       	ldi	r22, 0x06	; 6
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	ce 01       	movw	r24, r28
    2806:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    280a:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	08 95       	ret

00002812 <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	ec 01       	movw	r28, r24
    281c:	8a 01       	movw	r16, r20
	DDRB=0x00;
    281e:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    2820:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	65 e0       	ldi	r22, 0x05	; 5
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    282e:	a8 01       	movw	r20, r16
    2830:	64 e0       	ldi	r22, 0x04	; 4
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	ce 01       	movw	r24, r28
    2836:	0e 94 d5 13 	call	0x27aa	; 0x27aa <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    283a:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    283c:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    283e:	9f ef       	ldi	r25, 0xFF	; 255
    2840:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	08 95       	ret

0000284e <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    284e:	6f 92       	push	r6
    2850:	7f 92       	push	r7
    2852:	8f 92       	push	r8
    2854:	9f 92       	push	r9
    2856:	af 92       	push	r10
    2858:	bf 92       	push	r11
    285a:	cf 92       	push	r12
    285c:	df 92       	push	r13
    285e:	ef 92       	push	r14
    2860:	ff 92       	push	r15
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	6c 01       	movw	r12, r24
	serial.writestrln("");
    286c:	8c 01       	movw	r16, r24
    286e:	0f 5f       	subi	r16, 0xFF	; 255
    2870:	1f 4f       	sbci	r17, 0xFF	; 255
    2872:	6e ee       	ldi	r22, 0xEE	; 238
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	c8 01       	movw	r24, r16
    2878:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    287c:	65 ec       	ldi	r22, 0xC5	; 197
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	c8 01       	movw	r24, r16
    2882:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    2886:	c0 e0       	ldi	r28, 0x00	; 0
    2888:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    288a:	0f 2e       	mov	r0, r31
    288c:	ff ed       	ldi	r31, 0xDF	; 223
    288e:	ef 2e       	mov	r14, r31
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	ff 2e       	mov	r15, r31
    2894:	f0 2d       	mov	r31, r0
    2896:	83 e0       	ldi	r24, 0x03	; 3
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
    289e:	88 2e       	mov	r8, r24
    28a0:	99 2e       	mov	r9, r25
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	be 01       	movw	r22, r28
    28a8:	c6 01       	movw	r24, r12
    28aa:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    28ae:	9f 93       	push	r25
    28b0:	8f 93       	push	r24
    28b2:	ff 92       	push	r15
    28b4:	ef 92       	push	r14
    28b6:	9f 92       	push	r9
    28b8:	8f 92       	push	r8
    28ba:	0e 94 0d 22 	call	0x441a	; 0x441a <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    28be:	83 e0       	ldi	r24, 0x03	; 3
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
    28c6:	a8 2e       	mov	r10, r24
    28c8:	b9 2e       	mov	r11, r25
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	be 01       	movw	r22, r28
    28d0:	c6 01       	movw	r24, r12
    28d2:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    28d6:	9f 93       	push	r25
    28d8:	8f 93       	push	r24
    28da:	ff 92       	push	r15
    28dc:	ef 92       	push	r14
    28de:	bf 92       	push	r11
    28e0:	af 92       	push	r10
    28e2:	0e 94 0d 22 	call	0x441a	; 0x441a <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
    28ee:	68 2e       	mov	r6, r24
    28f0:	79 2e       	mov	r7, r25
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	ff 92       	push	r15
    28f8:	ef 92       	push	r14
    28fa:	7f 92       	push	r7
    28fc:	6f 92       	push	r6
    28fe:	0e 94 0d 22 	call	0x441a	; 0x441a <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    2902:	62 ee       	ldi	r22, 0xE2	; 226
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	c8 01       	movw	r24, r16
    2908:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
    290c:	66 2d       	mov	r22, r6
    290e:	77 2d       	mov	r23, r7
    2910:	c8 01       	movw	r24, r16
    2912:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
    2916:	64 ee       	ldi	r22, 0xE4	; 228
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	c8 01       	movw	r24, r16
    291c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    2920:	68 2d       	mov	r22, r8
    2922:	79 2d       	mov	r23, r9
    2924:	c8 01       	movw	r24, r16
    2926:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    292a:	6f ee       	ldi	r22, 0xEF	; 239
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	c8 01       	movw	r24, r16
    2930:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    2934:	6a 2d       	mov	r22, r10
    2936:	7b 2d       	mov	r23, r11
    2938:	c8 01       	movw	r24, r16
    293a:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    293e:	21 96       	adiw	r28, 0x01	; 1
    2940:	8d b7       	in	r24, 0x3d	; 61
    2942:	9e b7       	in	r25, 0x3e	; 62
    2944:	42 96       	adiw	r24, 0x12	; 18
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	9e bf       	out	0x3e, r25	; 62
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	8d bf       	out	0x3d, r24	; 61
    2950:	c4 30       	cpi	r28, 0x04	; 4
    2952:	d1 05       	cpc	r29, r1
    2954:	09 f0       	breq	.+2      	; 0x2958 <_ZN4QEPU7dumpmemEv+0x10a>
    2956:	9f cf       	rjmp	.-194    	; 0x2896 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	ff 90       	pop	r15
    2962:	ef 90       	pop	r14
    2964:	df 90       	pop	r13
    2966:	cf 90       	pop	r12
    2968:	bf 90       	pop	r11
    296a:	af 90       	pop	r10
    296c:	9f 90       	pop	r9
    296e:	8f 90       	pop	r8
    2970:	7f 90       	pop	r7
    2972:	6f 90       	pop	r6
    2974:	08 95       	ret

00002976 <_ZN4QEPU5Utils10int2binstrEii>:

char * QEPU::Utils::int2binstr(int num,int strlength){
    2976:	0f 93       	push	r16
    2978:	1f 93       	push	r17
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	06 2f       	mov	r16, r22
    2980:	17 2f       	mov	r17, r23
    2982:	ea 01       	movw	r28, r20
    char * str = (char*)malloc(strlength + 1);
    2984:	ca 01       	movw	r24, r20
    2986:	01 96       	adiw	r24, 0x01	; 1
    2988:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
    if(!str) return NULL;
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	b9 f0       	breq	.+46     	; 0x29be <_ZN4QEPU5Utils10int2binstrEii+0x48>
    str[strlength] = 0;
    2990:	fc 01       	movw	r30, r24
    2992:	ec 0f       	add	r30, r28
    2994:	fd 1f       	adc	r31, r29
    2996:	10 82       	st	Z, r1

    // type punning because signed shift is implementation-defined
    unsigned u = *(unsigned *)&num;
    2998:	20 2f       	mov	r18, r16
    299a:	31 2f       	mov	r19, r17
    for(; strlength--; u >>= 1)
    299c:	be 01       	movw	r22, r28
    299e:	61 50       	subi	r22, 0x01	; 1
    29a0:	71 09       	sbc	r23, r1
    29a2:	cd 2b       	or	r28, r29
    29a4:	71 f0       	breq	.+28     	; 0x29c2 <_ZN4QEPU5Utils10int2binstrEii+0x4c>
    str[strlength] = u & 1 ? '1' : '0';
    29a6:	20 ff       	sbrs	r18, 0
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <_ZN4QEPU5Utils10int2binstrEii+0x38>
    29aa:	41 e3       	ldi	r20, 0x31	; 49
    29ac:	01 c0       	rjmp	.+2      	; 0x29b0 <_ZN4QEPU5Utils10int2binstrEii+0x3a>
    29ae:	40 e3       	ldi	r20, 0x30	; 48
    29b0:	42 93       	st	-Z, r20
    if(!str) return NULL;
    str[strlength] = 0;

    // type punning because signed shift is implementation-defined
    unsigned u = *(unsigned *)&num;
    for(; strlength--; u >>= 1)
    29b2:	36 95       	lsr	r19
    29b4:	27 95       	ror	r18
    29b6:	61 50       	subi	r22, 0x01	; 1
    29b8:	71 09       	sbc	r23, r1
    29ba:	a8 f7       	brcc	.-22     	; 0x29a6 <_ZN4QEPU5Utils10int2binstrEii+0x30>
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <_ZN4QEPU5Utils10int2binstrEii+0x4c>
	}
}

char * QEPU::Utils::int2binstr(int num,int strlength){
    char * str = (char*)malloc(strlength + 1);
    if(!str) return NULL;
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    unsigned u = *(unsigned *)&num;
    for(; strlength--; u >>= 1)
    str[strlength] = u & 1 ? '1' : '0';

    return str;
}
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	08 95       	ret

000029cc <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    29cc:	cf 92       	push	r12
    29ce:	df 92       	push	r13
    29d0:	ef 92       	push	r14
    29d2:	ff 92       	push	r15
    29d4:	0f 93       	push	r16
    29d6:	1f 93       	push	r17
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	d6 2f       	mov	r29, r22
    29de:	c7 2f       	mov	r28, r23
    29e0:	e6 2f       	mov	r30, r22
    29e2:	f7 2f       	mov	r31, r23
	int c_length=0;
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    29e8:	21 91       	ld	r18, Z+
    29ea:	2f 3f       	cpi	r18, 0xFF	; 255
    29ec:	89 f4       	brne	.+34     	; 0x2a10 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    29ee:	df 01       	movw	r26, r30
    29f0:	12 97       	sbiw	r26, 0x02	; 2
    29f2:	4c 91       	ld	r20, X
    29f4:	4f 3f       	cpi	r20, 0xFF	; 255
    29f6:	61 f4       	brne	.+24     	; 0x2a10 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    29f8:	11 97       	sbiw	r26, 0x01	; 1
    29fa:	4c 91       	ld	r20, X
    29fc:	4f 3f       	cpi	r20, 0xFF	; 255
    29fe:	41 f4       	brne	.+16     	; 0x2a10 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    2a00:	11 97       	sbiw	r26, 0x01	; 1
    2a02:	4c 91       	ld	r20, X
    2a04:	4f 3f       	cpi	r20, 0xFF	; 255
    2a06:	21 f4       	brne	.+8      	; 0x2a10 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    2a08:	11 97       	sbiw	r26, 0x01	; 1
    2a0a:	2c 91       	ld	r18, X
    2a0c:	2f 3f       	cpi	r18, 0xFF	; 255
    2a0e:	11 f0       	breq	.+4      	; 0x2a14 <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	ea cf       	rjmp	.-44     	; 0x29e8 <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    2a14:	8c 01       	movw	r16, r24
    2a16:	04 50       	subi	r16, 0x04	; 4
    2a18:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    2a1a:	6c 01       	movw	r12, r24
    2a1c:	2f ef       	ldi	r18, 0xFF	; 255
    2a1e:	c2 1a       	sub	r12, r18
    2a20:	d2 0a       	sbc	r13, r18
    2a22:	76 01       	movw	r14, r12
    2a24:	ee 0c       	add	r14, r14
    2a26:	ff 1c       	adc	r15, r15
    2a28:	c7 01       	movw	r24, r14
    2a2a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    2a2e:	10 16       	cp	r1, r16
    2a30:	11 06       	cpc	r1, r17
    2a32:	74 f4       	brge	.+28     	; 0x2a50 <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    2a34:	dc 01       	movw	r26, r24
    2a36:	ed 2f       	mov	r30, r29
    2a38:	fc 2f       	mov	r31, r28
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	41 91       	ld	r20, Z+
    2a40:	50 e0       	ldi	r21, 0x00	; 0
    2a42:	4d 93       	st	X+, r20
    2a44:	5d 93       	st	X+, r21
    2a46:	2f 5f       	subi	r18, 0xFF	; 255
    2a48:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4a:	20 17       	cp	r18, r16
    2a4c:	31 07       	cpc	r19, r17
    2a4e:	bc f3       	brlt	.-18     	; 0x2a3e <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    2a50:	0c 15       	cp	r16, r12
    2a52:	1d 05       	cpc	r17, r13
    2a54:	7c f4       	brge	.+30     	; 0x2a74 <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    2a56:	f7 01       	movw	r30, r14
    2a58:	3a 97       	sbiw	r30, 0x0a	; 10
    2a5a:	e8 0f       	add	r30, r24
    2a5c:	f9 1f       	adc	r31, r25
    2a5e:	25 e0       	ldi	r18, 0x05	; 5
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	4f ef       	ldi	r20, 0xFF	; 255
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	41 93       	st	Z+, r20
    2a68:	51 93       	st	Z+, r21
    2a6a:	21 50       	subi	r18, 0x01	; 1
    2a6c:	31 09       	sbc	r19, r1
    2a6e:	21 15       	cp	r18, r1
    2a70:	31 05       	cpc	r19, r1
    2a72:	c9 f7       	brne	.-14     	; 0x2a66 <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	df 90       	pop	r13
    2a82:	cf 90       	pop	r12
    2a84:	08 95       	ret

00002a86 <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    2a86:	0f 93       	push	r16
    2a88:	1f 93       	push	r17
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	c4 56       	subi	r28, 0x64	; 100
    2a94:	d1 09       	sbc	r29, r1
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
	char str[100];
	sprintf(str,"%d",dec);
    2aa0:	7f 93       	push	r23
    2aa2:	6f 93       	push	r22
    2aa4:	8f ed       	ldi	r24, 0xDF	; 223
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	9f 93       	push	r25
    2aaa:	8f 93       	push	r24
    2aac:	8e 01       	movw	r16, r28
    2aae:	0f 5f       	subi	r16, 0xFF	; 255
    2ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab2:	1f 93       	push	r17
    2ab4:	0f 93       	push	r16
    2ab6:	0e 94 0d 22 	call	0x441a	; 0x441a <sprintf>
	return str;
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
}
    2ac6:	c8 01       	movw	r24, r16
    2ac8:	cc 59       	subi	r28, 0x9C	; 156
    2aca:	df 4f       	sbci	r29, 0xFF	; 255
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	1f 91       	pop	r17
    2adc:	0f 91       	pop	r16
    2ade:	08 95       	ret

00002ae0 <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    2ae0:	61 15       	cp	r22, r1
    2ae2:	71 05       	cpc	r23, r1
    2ae4:	51 f0       	breq	.+20     	; 0x2afa <_ZN4QEPU5Utils5delayEi+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ae6:	86 e6       	ldi	r24, 0x66	; 102
    2ae8:	9e e0       	ldi	r25, 0x0E	; 14
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <_ZN4QEPU5Utils5delayEi+0xa>
    2aee:	00 00       	nop
    2af0:	61 50       	subi	r22, 0x01	; 1
    2af2:	71 09       	sbc	r23, r1
    2af4:	61 15       	cp	r22, r1
    2af6:	71 05       	cpc	r23, r1
    2af8:	b1 f7       	brne	.-20     	; 0x2ae6 <_ZN4QEPU5Utils5delayEi+0x6>
}
    2afa:	08 95       	ret

00002afc <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    2afc:	4f 92       	push	r4
    2afe:	5f 92       	push	r5
    2b00:	6f 92       	push	r6
    2b02:	7f 92       	push	r7
    2b04:	8f 92       	push	r8
    2b06:	9f 92       	push	r9
    2b08:	af 92       	push	r10
    2b0a:	bf 92       	push	r11
    2b0c:	cf 92       	push	r12
    2b0e:	df 92       	push	r13
    2b10:	ef 92       	push	r14
    2b12:	ff 92       	push	r15
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	ec 01       	movw	r28, r24
    2b1e:	6b 01       	movw	r12, r22
    2b20:	49 01       	movw	r8, r18
    2b22:	5a 01       	movw	r10, r20
    2b24:	27 01       	movw	r4, r14
    2b26:	38 01       	movw	r6, r16
	int * newthephi=(int*)malloc(sizeof(int)*5);
    2b28:	8a e0       	ldi	r24, 0x0A	; 10
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <malloc>
    2b30:	8c 01       	movw	r16, r24
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    2b32:	f6 01       	movw	r30, r12
    2b34:	31 97       	sbiw	r30, 0x01	; 1
    2b36:	e2 32       	cpi	r30, 0x22	; 34
    2b38:	f1 05       	cpc	r31, r1
    2b3a:	08 f0       	brcs	.+2      	; 0x2b3e <_ZN4QEPU7executeEill+0x42>
    2b3c:	94 c3       	rjmp	.+1832   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
    2b3e:	e6 5d       	subi	r30, 0xD6	; 214
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	50 e0       	ldi	r21, 0x00	; 0
    2b4a:	b2 01       	movw	r22, r4
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2b52:	9c 01       	movw	r18, r24
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	b4 01       	movw	r22, r8
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	50 e0       	ldi	r21, 0x00	; 0
    2b64:	b2 01       	movw	r22, r4
    2b66:	ce 01       	movw	r24, r28
    2b68:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2b6c:	9c 01       	movw	r18, r24
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	b4 01       	movw	r22, r8
    2b74:	ce 01       	movw	r24, r28
    2b76:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2b7a:	75 c3       	rjmp	.+1770   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	88 1a       	sub	r8, r24
    2b80:	91 08       	sbc	r9, r1
    2b82:	9c 82       	std	Y+4, r9	; 0x04
    2b84:	8b 82       	std	Y+3, r8	; 0x03
		break;
    2b86:	6f c3       	rjmp	.+1758   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    2b88:	b4 01       	movw	r22, r8
    2b8a:	ce 01       	movw	r24, r28
    2b8c:	02 96       	adiw	r24, 0x02	; 2
    2b8e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZN4QEPU5Utils5delayEi>
    2b92:	69 c3       	rjmp	.+1746   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    2b94:	92 01       	movw	r18, r4
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	b4 01       	movw	r22, r8
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2ba2:	61 c3       	rjmp	.+1730   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    2ba4:	92 01       	movw	r18, r4
    2ba6:	41 e0       	ldi	r20, 0x01	; 1
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	b4 01       	movw	r22, r8
    2bac:	ce 01       	movw	r24, r28
    2bae:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2bb2:	59 c3       	rjmp	.+1714   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    2bb4:	41 e0       	ldi	r20, 0x01	; 1
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	b4 01       	movw	r22, r8
    2bba:	ce 01       	movw	r24, r28
    2bbc:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2bc0:	8c 01       	movw	r16, r24
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	50 e0       	ldi	r21, 0x00	; 0
    2bc6:	b4 01       	movw	r22, r8
    2bc8:	ce 01       	movw	r24, r28
    2bca:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2bce:	a8 01       	movw	r20, r16
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	05 96       	adiw	r24, 0x05	; 5
    2bd6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN5Gates1XEii>
    2bda:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    2bdc:	fc 01       	movw	r30, r24
    2bde:	20 81       	ld	r18, Z
    2be0:	31 81       	ldd	r19, Z+1	; 0x01
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	b4 01       	movw	r22, r8
    2be8:	ce 01       	movw	r24, r28
    2bea:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2bee:	f8 01       	movw	r30, r16
    2bf0:	22 81       	ldd	r18, Z+2	; 0x02
    2bf2:	33 81       	ldd	r19, Z+3	; 0x03
    2bf4:	41 e0       	ldi	r20, 0x01	; 1
    2bf6:	50 e0       	ldi	r21, 0x00	; 0
    2bf8:	b4 01       	movw	r22, r8
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2c00:	32 c3       	rjmp	.+1636   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	b4 01       	movw	r22, r8
    2c08:	ce 01       	movw	r24, r28
    2c0a:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2c0e:	8c 01       	movw	r16, r24
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	b4 01       	movw	r22, r8
    2c16:	ce 01       	movw	r24, r28
    2c18:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2c1c:	a8 01       	movw	r20, r16
    2c1e:	bc 01       	movw	r22, r24
    2c20:	ce 01       	movw	r24, r28
    2c22:	05 96       	adiw	r24, 0x05	; 5
    2c24:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_ZN5Gates1YEii>
    2c28:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	20 81       	ld	r18, Z
    2c2e:	31 81       	ldd	r19, Z+1	; 0x01
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	b4 01       	movw	r22, r8
    2c36:	ce 01       	movw	r24, r28
    2c38:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	22 81       	ldd	r18, Z+2	; 0x02
    2c40:	33 81       	ldd	r19, Z+3	; 0x03
    2c42:	41 e0       	ldi	r20, 0x01	; 1
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	b4 01       	movw	r22, r8
    2c48:	ce 01       	movw	r24, r28
    2c4a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2c4e:	0b c3       	rjmp	.+1558   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    2c50:	41 e0       	ldi	r20, 0x01	; 1
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	b4 01       	movw	r22, r8
    2c56:	ce 01       	movw	r24, r28
    2c58:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2c5c:	8c 01       	movw	r16, r24
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	50 e0       	ldi	r21, 0x00	; 0
    2c62:	b4 01       	movw	r22, r8
    2c64:	ce 01       	movw	r24, r28
    2c66:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2c6a:	a8 01       	movw	r20, r16
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	ce 01       	movw	r24, r28
    2c70:	05 96       	adiw	r24, 0x05	; 5
    2c72:	0e 94 46 09 	call	0x128c	; 0x128c <_ZN5Gates1ZEii>
    2c76:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    2c78:	fc 01       	movw	r30, r24
    2c7a:	20 81       	ld	r18, Z
    2c7c:	31 81       	ldd	r19, Z+1	; 0x01
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	b4 01       	movw	r22, r8
    2c84:	ce 01       	movw	r24, r28
    2c86:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	22 81       	ldd	r18, Z+2	; 0x02
    2c8e:	33 81       	ldd	r19, Z+3	; 0x03
    2c90:	41 e0       	ldi	r20, 0x01	; 1
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	b4 01       	movw	r22, r8
    2c96:	ce 01       	movw	r24, r28
    2c98:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2c9c:	e4 c2       	rjmp	.+1480   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    2c9e:	41 e0       	ldi	r20, 0x01	; 1
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	b4 01       	movw	r22, r8
    2ca4:	ce 01       	movw	r24, r28
    2ca6:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2caa:	8c 01       	movw	r16, r24
    2cac:	40 e0       	ldi	r20, 0x00	; 0
    2cae:	50 e0       	ldi	r21, 0x00	; 0
    2cb0:	b4 01       	movw	r22, r8
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2cb8:	a8 01       	movw	r20, r16
    2cba:	bc 01       	movw	r22, r24
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	05 96       	adiw	r24, 0x05	; 5
    2cc0:	0e 94 b0 09 	call	0x1360	; 0x1360 <_ZN5Gates1HEii>
    2cc4:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	20 81       	ld	r18, Z
    2cca:	31 81       	ldd	r19, Z+1	; 0x01
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	b4 01       	movw	r22, r8
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2cd8:	f8 01       	movw	r30, r16
    2cda:	22 81       	ldd	r18, Z+2	; 0x02
    2cdc:	33 81       	ldd	r19, Z+3	; 0x03
    2cde:	41 e0       	ldi	r20, 0x01	; 1
    2ce0:	50 e0       	ldi	r21, 0x00	; 0
    2ce2:	b4 01       	movw	r22, r8
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2cea:	bd c2       	rjmp	.+1402   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    2cec:	41 e0       	ldi	r20, 0x01	; 1
    2cee:	50 e0       	ldi	r21, 0x00	; 0
    2cf0:	b4 01       	movw	r22, r8
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2cf8:	8c 01       	movw	r16, r24
    2cfa:	40 e0       	ldi	r20, 0x00	; 0
    2cfc:	50 e0       	ldi	r21, 0x00	; 0
    2cfe:	b4 01       	movw	r22, r8
    2d00:	ce 01       	movw	r24, r28
    2d02:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2d06:	a8 01       	movw	r20, r16
    2d08:	bc 01       	movw	r22, r24
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	05 96       	adiw	r24, 0x05	; 5
    2d0e:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN5Gates1SEii>
    2d12:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    2d14:	fc 01       	movw	r30, r24
    2d16:	20 81       	ld	r18, Z
    2d18:	31 81       	ldd	r19, Z+1	; 0x01
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	b4 01       	movw	r22, r8
    2d20:	ce 01       	movw	r24, r28
    2d22:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2d26:	f8 01       	movw	r30, r16
    2d28:	22 81       	ldd	r18, Z+2	; 0x02
    2d2a:	33 81       	ldd	r19, Z+3	; 0x03
    2d2c:	41 e0       	ldi	r20, 0x01	; 1
    2d2e:	50 e0       	ldi	r21, 0x00	; 0
    2d30:	b4 01       	movw	r22, r8
    2d32:	ce 01       	movw	r24, r28
    2d34:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2d38:	96 c2       	rjmp	.+1324   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    2d3a:	41 e0       	ldi	r20, 0x01	; 1
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	b4 01       	movw	r22, r8
    2d40:	ce 01       	movw	r24, r28
    2d42:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2d46:	8c 01       	movw	r16, r24
    2d48:	40 e0       	ldi	r20, 0x00	; 0
    2d4a:	50 e0       	ldi	r21, 0x00	; 0
    2d4c:	b4 01       	movw	r22, r8
    2d4e:	ce 01       	movw	r24, r28
    2d50:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2d54:	a8 01       	movw	r20, r16
    2d56:	bc 01       	movw	r22, r24
    2d58:	ce 01       	movw	r24, r28
    2d5a:	05 96       	adiw	r24, 0x05	; 5
    2d5c:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN5Gates1TEii>
    2d60:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    2d62:	fc 01       	movw	r30, r24
    2d64:	20 81       	ld	r18, Z
    2d66:	31 81       	ldd	r19, Z+1	; 0x01
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	b4 01       	movw	r22, r8
    2d6e:	ce 01       	movw	r24, r28
    2d70:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2d74:	f8 01       	movw	r30, r16
    2d76:	22 81       	ldd	r18, Z+2	; 0x02
    2d78:	33 81       	ldd	r19, Z+3	; 0x03
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	50 e0       	ldi	r21, 0x00	; 0
    2d7e:	b4 01       	movw	r22, r8
    2d80:	ce 01       	movw	r24, r28
    2d82:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2d86:	6f c2       	rjmp	.+1246   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		//2 QUBIT GATES -
		case 0x16: 
			newthephi=gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2d88:	41 e0       	ldi	r20, 0x01	; 1
    2d8a:	50 e0       	ldi	r21, 0x00	; 0
    2d8c:	b2 01       	movw	r22, r4
    2d8e:	ce 01       	movw	r24, r28
    2d90:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2d94:	8c 01       	movw	r16, r24
    2d96:	40 e0       	ldi	r20, 0x00	; 0
    2d98:	50 e0       	ldi	r21, 0x00	; 0
    2d9a:	b2 01       	movw	r22, r4
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2da2:	6c 01       	movw	r12, r24
    2da4:	41 e0       	ldi	r20, 0x01	; 1
    2da6:	50 e0       	ldi	r21, 0x00	; 0
    2da8:	b4 01       	movw	r22, r8
    2daa:	ce 01       	movw	r24, r28
    2dac:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2db0:	7c 01       	movw	r14, r24
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	b4 01       	movw	r22, r8
    2db8:	ce 01       	movw	r24, r28
    2dba:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2dbe:	96 01       	movw	r18, r12
    2dc0:	a7 01       	movw	r20, r14
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	05 96       	adiw	r24, 0x05	; 5
    2dc8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN5Gates3CNOEiiii>
    2dcc:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2dce:	fc 01       	movw	r30, r24
    2dd0:	20 81       	ld	r18, Z
    2dd2:	31 81       	ldd	r19, Z+1	; 0x01
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	b4 01       	movw	r22, r8
    2dda:	ce 01       	movw	r24, r28
    2ddc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2de0:	f8 01       	movw	r30, r16
    2de2:	22 81       	ldd	r18, Z+2	; 0x02
    2de4:	33 81       	ldd	r19, Z+3	; 0x03
    2de6:	41 e0       	ldi	r20, 0x01	; 1
    2de8:	50 e0       	ldi	r21, 0x00	; 0
    2dea:	b4 01       	movw	r22, r8
    2dec:	ce 01       	movw	r24, r28
    2dee:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2df2:	f8 01       	movw	r30, r16
    2df4:	24 81       	ldd	r18, Z+4	; 0x04
    2df6:	35 81       	ldd	r19, Z+5	; 0x05
    2df8:	40 e0       	ldi	r20, 0x00	; 0
    2dfa:	50 e0       	ldi	r21, 0x00	; 0
    2dfc:	b2 01       	movw	r22, r4
    2dfe:	ce 01       	movw	r24, r28
    2e00:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2e04:	f8 01       	movw	r30, r16
    2e06:	26 81       	ldd	r18, Z+6	; 0x06
    2e08:	37 81       	ldd	r19, Z+7	; 0x07
    2e0a:	41 e0       	ldi	r20, 0x01	; 1
    2e0c:	50 e0       	ldi	r21, 0x00	; 0
    2e0e:	b2 01       	movw	r22, r4
    2e10:	ce 01       	movw	r24, r28
    2e12:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2e16:	27 c2       	rjmp	.+1102   	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x17:
			newthephi=gates.CSI(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2e18:	41 e0       	ldi	r20, 0x01	; 1
    2e1a:	50 e0       	ldi	r21, 0x00	; 0
    2e1c:	b2 01       	movw	r22, r4
    2e1e:	ce 01       	movw	r24, r28
    2e20:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2e24:	8c 01       	movw	r16, r24
    2e26:	40 e0       	ldi	r20, 0x00	; 0
    2e28:	50 e0       	ldi	r21, 0x00	; 0
    2e2a:	b2 01       	movw	r22, r4
    2e2c:	ce 01       	movw	r24, r28
    2e2e:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2e32:	7c 01       	movw	r14, r24
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	50 e0       	ldi	r21, 0x00	; 0
    2e38:	b4 01       	movw	r22, r8
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2e40:	6c 01       	movw	r12, r24
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	50 e0       	ldi	r21, 0x00	; 0
    2e46:	b4 01       	movw	r22, r8
    2e48:	ce 01       	movw	r24, r28
    2e4a:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2e4e:	97 01       	movw	r18, r14
    2e50:	a6 01       	movw	r20, r12
    2e52:	bc 01       	movw	r22, r24
    2e54:	ce 01       	movw	r24, r28
    2e56:	05 96       	adiw	r24, 0x05	; 5
    2e58:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN5Gates3CSIEiiii>
    2e5c:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2e5e:	fc 01       	movw	r30, r24
    2e60:	20 81       	ld	r18, Z
    2e62:	31 81       	ldd	r19, Z+1	; 0x01
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	50 e0       	ldi	r21, 0x00	; 0
    2e68:	b4 01       	movw	r22, r8
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2e70:	f8 01       	movw	r30, r16
    2e72:	22 81       	ldd	r18, Z+2	; 0x02
    2e74:	33 81       	ldd	r19, Z+3	; 0x03
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	b4 01       	movw	r22, r8
    2e7c:	ce 01       	movw	r24, r28
    2e7e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2e82:	f8 01       	movw	r30, r16
    2e84:	24 81       	ldd	r18, Z+4	; 0x04
    2e86:	35 81       	ldd	r19, Z+5	; 0x05
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	b2 01       	movw	r22, r4
    2e8e:	ce 01       	movw	r24, r28
    2e90:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2e94:	f8 01       	movw	r30, r16
    2e96:	26 81       	ldd	r18, Z+6	; 0x06
    2e98:	37 81       	ldd	r19, Z+7	; 0x07
    2e9a:	41 e0       	ldi	r20, 0x01	; 1
    2e9c:	50 e0       	ldi	r21, 0x00	; 0
    2e9e:	b2 01       	movw	r22, r4
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2ea6:	df c1       	rjmp	.+958    	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x18: 
			newthephi=gates.SWA(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2ea8:	41 e0       	ldi	r20, 0x01	; 1
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	b2 01       	movw	r22, r4
    2eae:	ce 01       	movw	r24, r28
    2eb0:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2eb4:	8c 01       	movw	r16, r24
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	50 e0       	ldi	r21, 0x00	; 0
    2eba:	b2 01       	movw	r22, r4
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2ec2:	7c 01       	movw	r14, r24
    2ec4:	41 e0       	ldi	r20, 0x01	; 1
    2ec6:	50 e0       	ldi	r21, 0x00	; 0
    2ec8:	b4 01       	movw	r22, r8
    2eca:	ce 01       	movw	r24, r28
    2ecc:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2ed0:	6c 01       	movw	r12, r24
    2ed2:	40 e0       	ldi	r20, 0x00	; 0
    2ed4:	50 e0       	ldi	r21, 0x00	; 0
    2ed6:	b4 01       	movw	r22, r8
    2ed8:	ce 01       	movw	r24, r28
    2eda:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2ede:	97 01       	movw	r18, r14
    2ee0:	a6 01       	movw	r20, r12
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	05 96       	adiw	r24, 0x05	; 5
    2ee8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_ZN5Gates3SWAEiiii>
    2eec:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2eee:	fc 01       	movw	r30, r24
    2ef0:	20 81       	ld	r18, Z
    2ef2:	31 81       	ldd	r19, Z+1	; 0x01
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	50 e0       	ldi	r21, 0x00	; 0
    2ef8:	b4 01       	movw	r22, r8
    2efa:	ce 01       	movw	r24, r28
    2efc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2f00:	f8 01       	movw	r30, r16
    2f02:	22 81       	ldd	r18, Z+2	; 0x02
    2f04:	33 81       	ldd	r19, Z+3	; 0x03
    2f06:	41 e0       	ldi	r20, 0x01	; 1
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	b4 01       	movw	r22, r8
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2f12:	f8 01       	movw	r30, r16
    2f14:	24 81       	ldd	r18, Z+4	; 0x04
    2f16:	35 81       	ldd	r19, Z+5	; 0x05
    2f18:	40 e0       	ldi	r20, 0x00	; 0
    2f1a:	50 e0       	ldi	r21, 0x00	; 0
    2f1c:	b2 01       	movw	r22, r4
    2f1e:	ce 01       	movw	r24, r28
    2f20:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2f24:	f8 01       	movw	r30, r16
    2f26:	26 81       	ldd	r18, Z+6	; 0x06
    2f28:	37 81       	ldd	r19, Z+7	; 0x07
    2f2a:	41 e0       	ldi	r20, 0x01	; 1
    2f2c:	50 e0       	ldi	r21, 0x00	; 0
    2f2e:	b2 01       	movw	r22, r4
    2f30:	ce 01       	movw	r24, r28
    2f32:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2f36:	97 c1       	rjmp	.+814    	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x19: 
			newthephi=gates.INC(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2f38:	41 e0       	ldi	r20, 0x01	; 1
    2f3a:	50 e0       	ldi	r21, 0x00	; 0
    2f3c:	b2 01       	movw	r22, r4
    2f3e:	ce 01       	movw	r24, r28
    2f40:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2f44:	8c 01       	movw	r16, r24
    2f46:	40 e0       	ldi	r20, 0x00	; 0
    2f48:	50 e0       	ldi	r21, 0x00	; 0
    2f4a:	b2 01       	movw	r22, r4
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2f52:	7c 01       	movw	r14, r24
    2f54:	41 e0       	ldi	r20, 0x01	; 1
    2f56:	50 e0       	ldi	r21, 0x00	; 0
    2f58:	b4 01       	movw	r22, r8
    2f5a:	ce 01       	movw	r24, r28
    2f5c:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2f60:	6c 01       	movw	r12, r24
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	50 e0       	ldi	r21, 0x00	; 0
    2f66:	b4 01       	movw	r22, r8
    2f68:	ce 01       	movw	r24, r28
    2f6a:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2f6e:	97 01       	movw	r18, r14
    2f70:	a6 01       	movw	r20, r12
    2f72:	bc 01       	movw	r22, r24
    2f74:	ce 01       	movw	r24, r28
    2f76:	05 96       	adiw	r24, 0x05	; 5
    2f78:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN5Gates3INCEiiii>
    2f7c:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    2f7e:	fc 01       	movw	r30, r24
    2f80:	20 81       	ld	r18, Z
    2f82:	31 81       	ldd	r19, Z+1	; 0x01
    2f84:	40 e0       	ldi	r20, 0x00	; 0
    2f86:	50 e0       	ldi	r21, 0x00	; 0
    2f88:	b4 01       	movw	r22, r8
    2f8a:	ce 01       	movw	r24, r28
    2f8c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2f90:	f8 01       	movw	r30, r16
    2f92:	22 81       	ldd	r18, Z+2	; 0x02
    2f94:	33 81       	ldd	r19, Z+3	; 0x03
    2f96:	41 e0       	ldi	r20, 0x01	; 1
    2f98:	50 e0       	ldi	r21, 0x00	; 0
    2f9a:	b4 01       	movw	r22, r8
    2f9c:	ce 01       	movw	r24, r28
    2f9e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	24 81       	ldd	r18, Z+4	; 0x04
    2fa6:	35 81       	ldd	r19, Z+5	; 0x05
    2fa8:	40 e0       	ldi	r20, 0x00	; 0
    2faa:	50 e0       	ldi	r21, 0x00	; 0
    2fac:	b2 01       	movw	r22, r4
    2fae:	ce 01       	movw	r24, r28
    2fb0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	26 81       	ldd	r18, Z+6	; 0x06
    2fb8:	37 81       	ldd	r19, Z+7	; 0x07
    2fba:	41 e0       	ldi	r20, 0x01	; 1
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	b2 01       	movw	r22, r4
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    2fc6:	4f c1       	rjmp	.+670    	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x1A: 
			newthephi=gates.DEC(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    2fc8:	41 e0       	ldi	r20, 0x01	; 1
    2fca:	50 e0       	ldi	r21, 0x00	; 0
    2fcc:	b2 01       	movw	r22, r4
    2fce:	ce 01       	movw	r24, r28
    2fd0:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2fd4:	8c 01       	movw	r16, r24
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	b2 01       	movw	r22, r4
    2fdc:	ce 01       	movw	r24, r28
    2fde:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2fe2:	7c 01       	movw	r14, r24
    2fe4:	41 e0       	ldi	r20, 0x01	; 1
    2fe6:	50 e0       	ldi	r21, 0x00	; 0
    2fe8:	b4 01       	movw	r22, r8
    2fea:	ce 01       	movw	r24, r28
    2fec:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2ff0:	6c 01       	movw	r12, r24
    2ff2:	40 e0       	ldi	r20, 0x00	; 0
    2ff4:	50 e0       	ldi	r21, 0x00	; 0
    2ff6:	b4 01       	movw	r22, r8
    2ff8:	ce 01       	movw	r24, r28
    2ffa:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    2ffe:	97 01       	movw	r18, r14
    3000:	a6 01       	movw	r20, r12
    3002:	bc 01       	movw	r22, r24
    3004:	ce 01       	movw	r24, r28
    3006:	05 96       	adiw	r24, 0x05	; 5
    3008:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN5Gates3DECEiiii>
    300c:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    300e:	fc 01       	movw	r30, r24
    3010:	20 81       	ld	r18, Z
    3012:	31 81       	ldd	r19, Z+1	; 0x01
    3014:	40 e0       	ldi	r20, 0x00	; 0
    3016:	50 e0       	ldi	r21, 0x00	; 0
    3018:	b4 01       	movw	r22, r8
    301a:	ce 01       	movw	r24, r28
    301c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    3020:	f8 01       	movw	r30, r16
    3022:	22 81       	ldd	r18, Z+2	; 0x02
    3024:	33 81       	ldd	r19, Z+3	; 0x03
    3026:	41 e0       	ldi	r20, 0x01	; 1
    3028:	50 e0       	ldi	r21, 0x00	; 0
    302a:	b4 01       	movw	r22, r8
    302c:	ce 01       	movw	r24, r28
    302e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    3032:	f8 01       	movw	r30, r16
    3034:	24 81       	ldd	r18, Z+4	; 0x04
    3036:	35 81       	ldd	r19, Z+5	; 0x05
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	50 e0       	ldi	r21, 0x00	; 0
    303c:	b2 01       	movw	r22, r4
    303e:	ce 01       	movw	r24, r28
    3040:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    3044:	f8 01       	movw	r30, r16
    3046:	26 81       	ldd	r18, Z+6	; 0x06
    3048:	37 81       	ldd	r19, Z+7	; 0x07
    304a:	41 e0       	ldi	r20, 0x01	; 1
    304c:	50 e0       	ldi	r21, 0x00	; 0
    304e:	b2 01       	movw	r22, r4
    3050:	ce 01       	movw	r24, r28
    3052:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    3056:	07 c1       	rjmp	.+526    	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		break;
		case 0x1D: 
			//DEUTSCH -> 3 QUBIT GATE
		break;
		case 0x1E: 
			newthephi=gates.SWQ(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    3058:	41 e0       	ldi	r20, 0x01	; 1
    305a:	50 e0       	ldi	r21, 0x00	; 0
    305c:	b2 01       	movw	r22, r4
    305e:	ce 01       	movw	r24, r28
    3060:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    3064:	8c 01       	movw	r16, r24
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	50 e0       	ldi	r21, 0x00	; 0
    306a:	b2 01       	movw	r22, r4
    306c:	ce 01       	movw	r24, r28
    306e:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    3072:	7c 01       	movw	r14, r24
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	50 e0       	ldi	r21, 0x00	; 0
    3078:	b4 01       	movw	r22, r8
    307a:	ce 01       	movw	r24, r28
    307c:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    3080:	6c 01       	movw	r12, r24
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	b4 01       	movw	r22, r8
    3088:	ce 01       	movw	r24, r28
    308a:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    308e:	97 01       	movw	r18, r14
    3090:	a6 01       	movw	r20, r12
    3092:	bc 01       	movw	r22, r24
    3094:	ce 01       	movw	r24, r28
    3096:	05 96       	adiw	r24, 0x05	; 5
    3098:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN5Gates3SWQEiiii>
    309c:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    309e:	fc 01       	movw	r30, r24
    30a0:	20 81       	ld	r18, Z
    30a2:	31 81       	ldd	r19, Z+1	; 0x01
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	50 e0       	ldi	r21, 0x00	; 0
    30a8:	b4 01       	movw	r22, r8
    30aa:	ce 01       	movw	r24, r28
    30ac:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    30b0:	f8 01       	movw	r30, r16
    30b2:	22 81       	ldd	r18, Z+2	; 0x02
    30b4:	33 81       	ldd	r19, Z+3	; 0x03
    30b6:	41 e0       	ldi	r20, 0x01	; 1
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	b4 01       	movw	r22, r8
    30bc:	ce 01       	movw	r24, r28
    30be:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    30c2:	f8 01       	movw	r30, r16
    30c4:	24 81       	ldd	r18, Z+4	; 0x04
    30c6:	35 81       	ldd	r19, Z+5	; 0x05
    30c8:	40 e0       	ldi	r20, 0x00	; 0
    30ca:	50 e0       	ldi	r21, 0x00	; 0
    30cc:	b2 01       	movw	r22, r4
    30ce:	ce 01       	movw	r24, r28
    30d0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    30d4:	f8 01       	movw	r30, r16
    30d6:	26 81       	ldd	r18, Z+6	; 0x06
    30d8:	37 81       	ldd	r19, Z+7	; 0x07
    30da:	41 e0       	ldi	r20, 0x01	; 1
    30dc:	50 e0       	ldi	r21, 0x00	; 0
    30de:	b2 01       	movw	r22, r4
    30e0:	ce 01       	movw	r24, r28
    30e2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    30e6:	bf c0       	rjmp	.+382    	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x1F: 
			newthephi=gates.SWI(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    30e8:	41 e0       	ldi	r20, 0x01	; 1
    30ea:	50 e0       	ldi	r21, 0x00	; 0
    30ec:	b2 01       	movw	r22, r4
    30ee:	ce 01       	movw	r24, r28
    30f0:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    30f4:	8c 01       	movw	r16, r24
    30f6:	40 e0       	ldi	r20, 0x00	; 0
    30f8:	50 e0       	ldi	r21, 0x00	; 0
    30fa:	b2 01       	movw	r22, r4
    30fc:	ce 01       	movw	r24, r28
    30fe:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    3102:	7c 01       	movw	r14, r24
    3104:	41 e0       	ldi	r20, 0x01	; 1
    3106:	50 e0       	ldi	r21, 0x00	; 0
    3108:	b4 01       	movw	r22, r8
    310a:	ce 01       	movw	r24, r28
    310c:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    3110:	6c 01       	movw	r12, r24
    3112:	40 e0       	ldi	r20, 0x00	; 0
    3114:	50 e0       	ldi	r21, 0x00	; 0
    3116:	b4 01       	movw	r22, r8
    3118:	ce 01       	movw	r24, r28
    311a:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    311e:	97 01       	movw	r18, r14
    3120:	a6 01       	movw	r20, r12
    3122:	bc 01       	movw	r22, r24
    3124:	ce 01       	movw	r24, r28
    3126:	05 96       	adiw	r24, 0x05	; 5
    3128:	0e 94 01 11 	call	0x2202	; 0x2202 <_ZN5Gates3SWIEiiii>
    312c:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    312e:	fc 01       	movw	r30, r24
    3130:	20 81       	ld	r18, Z
    3132:	31 81       	ldd	r19, Z+1	; 0x01
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	b4 01       	movw	r22, r8
    313a:	ce 01       	movw	r24, r28
    313c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    3140:	f8 01       	movw	r30, r16
    3142:	22 81       	ldd	r18, Z+2	; 0x02
    3144:	33 81       	ldd	r19, Z+3	; 0x03
    3146:	41 e0       	ldi	r20, 0x01	; 1
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	b4 01       	movw	r22, r8
    314c:	ce 01       	movw	r24, r28
    314e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    3152:	f8 01       	movw	r30, r16
    3154:	24 81       	ldd	r18, Z+4	; 0x04
    3156:	35 81       	ldd	r19, Z+5	; 0x05
    3158:	40 e0       	ldi	r20, 0x00	; 0
    315a:	50 e0       	ldi	r21, 0x00	; 0
    315c:	b2 01       	movw	r22, r4
    315e:	ce 01       	movw	r24, r28
    3160:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    3164:	f8 01       	movw	r30, r16
    3166:	26 81       	ldd	r18, Z+6	; 0x06
    3168:	37 81       	ldd	r19, Z+7	; 0x07
    316a:	41 e0       	ldi	r20, 0x01	; 1
    316c:	50 e0       	ldi	r21, 0x00	; 0
    316e:	b2 01       	movw	r22, r4
    3170:	ce 01       	movw	r24, r28
    3172:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    3176:	77 c0       	rjmp	.+238    	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x20:
			newthephi=gates.ROX(read(op1,THE),read(op1,PHI),op2);
    3178:	41 e0       	ldi	r20, 0x01	; 1
    317a:	50 e0       	ldi	r21, 0x00	; 0
    317c:	b4 01       	movw	r22, r8
    317e:	ce 01       	movw	r24, r28
    3180:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    3184:	8c 01       	movw	r16, r24
    3186:	40 e0       	ldi	r20, 0x00	; 0
    3188:	50 e0       	ldi	r21, 0x00	; 0
    318a:	b4 01       	movw	r22, r8
    318c:	ce 01       	movw	r24, r28
    318e:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    3192:	92 01       	movw	r18, r4
    3194:	a8 01       	movw	r20, r16
    3196:	bc 01       	movw	r22, r24
    3198:	ce 01       	movw	r24, r28
    319a:	05 96       	adiw	r24, 0x05	; 5
    319c:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN5Gates3ROXEiii>
    31a0:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    31a2:	fc 01       	movw	r30, r24
    31a4:	20 81       	ld	r18, Z
    31a6:	31 81       	ldd	r19, Z+1	; 0x01
    31a8:	40 e0       	ldi	r20, 0x00	; 0
    31aa:	50 e0       	ldi	r21, 0x00	; 0
    31ac:	b4 01       	movw	r22, r8
    31ae:	ce 01       	movw	r24, r28
    31b0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    31b4:	f8 01       	movw	r30, r16
    31b6:	22 81       	ldd	r18, Z+2	; 0x02
    31b8:	33 81       	ldd	r19, Z+3	; 0x03
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	50 e0       	ldi	r21, 0x00	; 0
    31be:	b4 01       	movw	r22, r8
    31c0:	ce 01       	movw	r24, r28
    31c2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    31c6:	4f c0       	rjmp	.+158    	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x21: 
			newthephi=gates.ROY(read(op1,THE),read(op1,PHI),op2);
    31c8:	41 e0       	ldi	r20, 0x01	; 1
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	b4 01       	movw	r22, r8
    31ce:	ce 01       	movw	r24, r28
    31d0:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    31d4:	8c 01       	movw	r16, r24
    31d6:	40 e0       	ldi	r20, 0x00	; 0
    31d8:	50 e0       	ldi	r21, 0x00	; 0
    31da:	b4 01       	movw	r22, r8
    31dc:	ce 01       	movw	r24, r28
    31de:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    31e2:	92 01       	movw	r18, r4
    31e4:	a8 01       	movw	r20, r16
    31e6:	bc 01       	movw	r22, r24
    31e8:	ce 01       	movw	r24, r28
    31ea:	05 96       	adiw	r24, 0x05	; 5
    31ec:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN5Gates3ROYEiii>
    31f0:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    31f2:	fc 01       	movw	r30, r24
    31f4:	20 81       	ld	r18, Z
    31f6:	31 81       	ldd	r19, Z+1	; 0x01
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	b4 01       	movw	r22, r8
    31fe:	ce 01       	movw	r24, r28
    3200:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    3204:	f8 01       	movw	r30, r16
    3206:	22 81       	ldd	r18, Z+2	; 0x02
    3208:	33 81       	ldd	r19, Z+3	; 0x03
    320a:	41 e0       	ldi	r20, 0x01	; 1
    320c:	50 e0       	ldi	r21, 0x00	; 0
    320e:	b4 01       	movw	r22, r8
    3210:	ce 01       	movw	r24, r28
    3212:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
		break;
    3216:	27 c0       	rjmp	.+78     	; 0x3266 <_ZN4QEPU7executeEill+0x76a>
		case 0x22: 
			newthephi=gates.ROZ(read(op1,THE),read(op1,PHI),op2);
    3218:	41 e0       	ldi	r20, 0x01	; 1
    321a:	50 e0       	ldi	r21, 0x00	; 0
    321c:	b4 01       	movw	r22, r8
    321e:	ce 01       	movw	r24, r28
    3220:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    3224:	8c 01       	movw	r16, r24
    3226:	40 e0       	ldi	r20, 0x00	; 0
    3228:	50 e0       	ldi	r21, 0x00	; 0
    322a:	b4 01       	movw	r22, r8
    322c:	ce 01       	movw	r24, r28
    322e:	0e 94 09 14 	call	0x2812	; 0x2812 <_ZN4QEPU4readEii>
    3232:	92 01       	movw	r18, r4
    3234:	a8 01       	movw	r20, r16
    3236:	bc 01       	movw	r22, r24
    3238:	ce 01       	movw	r24, r28
    323a:	05 96       	adiw	r24, 0x05	; 5
    323c:	0e 94 26 13 	call	0x264c	; 0x264c <_ZN5Gates3ROZEiii>
    3240:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    3242:	fc 01       	movw	r30, r24
    3244:	20 81       	ld	r18, Z
    3246:	31 81       	ldd	r19, Z+1	; 0x01
    3248:	40 e0       	ldi	r20, 0x00	; 0
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	b4 01       	movw	r22, r8
    324e:	ce 01       	movw	r24, r28
    3250:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
    3254:	f8 01       	movw	r30, r16
    3256:	22 81       	ldd	r18, Z+2	; 0x02
    3258:	33 81       	ldd	r19, Z+3	; 0x03
    325a:	41 e0       	ldi	r20, 0x01	; 1
    325c:	50 e0       	ldi	r21, 0x00	; 0
    325e:	b4 01       	movw	r22, r8
    3260:	ce 01       	movw	r24, r28
    3262:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN4QEPU5writeEiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    3266:	c8 01       	movw	r24, r16
    3268:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <free>
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	1f 91       	pop	r17
    3272:	0f 91       	pop	r16
    3274:	ff 90       	pop	r15
    3276:	ef 90       	pop	r14
    3278:	df 90       	pop	r13
    327a:	cf 90       	pop	r12
    327c:	bf 90       	pop	r11
    327e:	af 90       	pop	r10
    3280:	9f 90       	pop	r9
    3282:	8f 90       	pop	r8
    3284:	7f 90       	pop	r7
    3286:	6f 90       	pop	r6
    3288:	5f 90       	pop	r5
    328a:	4f 90       	pop	r4
    328c:	08 95       	ret

0000328e <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    328e:	2f 92       	push	r2
    3290:	3f 92       	push	r3
    3292:	4f 92       	push	r4
    3294:	5f 92       	push	r5
    3296:	6f 92       	push	r6
    3298:	7f 92       	push	r7
    329a:	8f 92       	push	r8
    329c:	9f 92       	push	r9
    329e:	af 92       	push	r10
    32a0:	bf 92       	push	r11
    32a2:	cf 92       	push	r12
    32a4:	df 92       	push	r13
    32a6:	ef 92       	push	r14
    32a8:	ff 92       	push	r15
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	c0 57       	subi	r28, 0x70	; 112
    32b8:	d1 09       	sbc	r29, r1
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	3c 01       	movw	r6, r24
	serial.writestrln(" RUNNING ");
    32c6:	69 ef       	ldi	r22, 0xF9	; 249
    32c8:	70 e0       	ldi	r23, 0x00	; 0
    32ca:	01 96       	adiw	r24, 0x01	; 1
    32cc:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <_ZN6Serial10writestrlnEPc>
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    32d0:	c3 01       	movw	r24, r6
    32d2:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN6EEProm7readallEv>
    32d6:	bc 01       	movw	r22, r24
    32d8:	c3 01       	movw	r24, r6
    32da:	02 96       	adiw	r24, 0x02	; 2
    32dc:	0e 94 e6 14 	call	0x29cc	; 0x29cc <_ZN4QEPU5Utils10str2intarrEPc>
    32e0:	fc 01       	movw	r30, r24
    32e2:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    32e8:	40 85       	ldd	r20, Z+8	; 0x08
    32ea:	51 85       	ldd	r21, Z+9	; 0x09
    32ec:	4f 3f       	cpi	r20, 0xFF	; 255
    32ee:	51 05       	cpc	r21, r1
    32f0:	a1 f4       	brne	.+40     	; 0x331a <_ZN4QEPU3runEv+0x8c>
    32f2:	46 81       	ldd	r20, Z+6	; 0x06
    32f4:	57 81       	ldd	r21, Z+7	; 0x07
    32f6:	4f 3f       	cpi	r20, 0xFF	; 255
    32f8:	51 05       	cpc	r21, r1
    32fa:	79 f4       	brne	.+30     	; 0x331a <_ZN4QEPU3runEv+0x8c>
    32fc:	44 81       	ldd	r20, Z+4	; 0x04
    32fe:	55 81       	ldd	r21, Z+5	; 0x05
    3300:	4f 3f       	cpi	r20, 0xFF	; 255
    3302:	51 05       	cpc	r21, r1
    3304:	51 f4       	brne	.+20     	; 0x331a <_ZN4QEPU3runEv+0x8c>
    3306:	42 81       	ldd	r20, Z+2	; 0x02
    3308:	53 81       	ldd	r21, Z+3	; 0x03
    330a:	4f 3f       	cpi	r20, 0xFF	; 255
    330c:	51 05       	cpc	r21, r1
    330e:	29 f4       	brne	.+10     	; 0x331a <_ZN4QEPU3runEv+0x8c>
    3310:	40 81       	ld	r20, Z
    3312:	51 81       	ldd	r21, Z+1	; 0x01
    3314:	4f 3f       	cpi	r20, 0xFF	; 255
    3316:	51 05       	cpc	r21, r1
    3318:	21 f0       	breq	.+8      	; 0x3322 <_ZN4QEPU3runEv+0x94>
    331a:	2f 5f       	subi	r18, 0xFF	; 255
    331c:	3f 4f       	sbci	r19, 0xFF	; 255
    331e:	32 96       	adiw	r30, 0x02	; 2
    3320:	e3 cf       	rjmp	.-58     	; 0x32e8 <_ZN4QEPU3runEv+0x5a>
    3322:	a9 01       	movw	r20, r18
    3324:	44 50       	subi	r20, 0x04	; 4
    3326:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    3328:	14 16       	cp	r1, r20
    332a:	15 06       	cpc	r1, r21
    332c:	0c f0       	brlt	.+2      	; 0x3330 <_ZN4QEPU3runEv+0xa2>
    332e:	07 c1       	rjmp	.+526    	; 0x353e <_ZN4QEPU3runEv+0x2b0>
    3330:	fc 01       	movw	r30, r24
    3332:	25 50       	subi	r18, 0x05	; 5
    3334:	31 09       	sbc	r19, r1
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	41 2c       	mov	r4, r1
    3340:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    3342:	c1 2c       	mov	r12, r1
    3344:	d1 2c       	mov	r13, r1
    3346:	0c c0       	rjmp	.+24     	; 0x3360 <_ZN4QEPU3runEv+0xd2>
    3348:	69 30       	cpi	r22, 0x09	; 9
    334a:	71 05       	cpc	r23, r1
    334c:	34 f0       	brlt	.+12     	; 0x335a <_ZN4QEPU3runEv+0xcc>
    334e:	8f ef       	ldi	r24, 0xFF	; 255
    3350:	48 1a       	sub	r4, r24
    3352:	58 0a       	sbc	r5, r24
    3354:	8c 2d       	mov	r24, r12
    3356:	9d 2d       	mov	r25, r13
    3358:	01 c0       	rjmp	.+2      	; 0x335c <_ZN4QEPU3runEv+0xce>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    335a:	cb 01       	movw	r24, r22
    335c:	4f 5f       	subi	r20, 0xFF	; 255
    335e:	5f 4f       	sbci	r21, 0xFF	; 255
    3360:	bc 01       	movw	r22, r24
    3362:	6f 5f       	subi	r22, 0xFF	; 255
    3364:	7f 4f       	sbci	r23, 0xFF	; 255
    3366:	01 91       	ld	r16, Z+
    3368:	11 91       	ld	r17, Z+
    336a:	d2 01       	movw	r26, r4
    336c:	aa 0f       	add	r26, r26
    336e:	bb 1f       	adc	r27, r27
    3370:	aa 0f       	add	r26, r26
    3372:	bb 1f       	adc	r27, r27
    3374:	aa 0f       	add	r26, r26
    3376:	bb 1f       	adc	r27, r27
    3378:	a4 0d       	add	r26, r4
    337a:	b5 1d       	adc	r27, r5
    337c:	8a 0f       	add	r24, r26
    337e:	9b 1f       	adc	r25, r27
    3380:	dc 01       	movw	r26, r24
    3382:	aa 0f       	add	r26, r26
    3384:	bb 1f       	adc	r27, r27
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	8c 0f       	add	r24, r28
    338c:	9d 1f       	adc	r25, r29
    338e:	a8 0f       	add	r26, r24
    3390:	b9 1f       	adc	r27, r25
    3392:	0d 93       	st	X+, r16
    3394:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    3396:	42 17       	cp	r20, r18
    3398:	53 07       	cpc	r21, r19
    339a:	b1 f6       	brne	.-84     	; 0x3348 <_ZN4QEPU3runEv+0xba>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    339c:	f3 01       	movw	r30, r6
    339e:	14 82       	std	Z+4, r1	; 0x04
    33a0:	13 82       	std	Z+3, r1	; 0x03
    33a2:	14 14       	cp	r1, r4
    33a4:	15 04       	cpc	r1, r5
    33a6:	0c f0       	brlt	.+2      	; 0x33aa <_ZN4QEPU3runEv+0x11c>
    33a8:	c6 c0       	rjmp	.+396    	; 0x3536 <_ZN4QEPU3runEv+0x2a8>
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    33ae:	5e 01       	movw	r10, r28
    33b0:	f2 e6       	ldi	r31, 0x62	; 98
    33b2:	af 0e       	add	r10, r31
    33b4:	b1 1c       	adc	r11, r1
    33b6:	6e 01       	movw	r12, r28
    33b8:	2b e5       	ldi	r18, 0x5B	; 91
    33ba:	c2 0e       	add	r12, r18
    33bc:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    33be:	0f 2e       	mov	r0, r31
    33c0:	f3 e0       	ldi	r31, 0x03	; 3
    33c2:	8f 2e       	mov	r8, r31
    33c4:	f1 e0       	ldi	r31, 0x01	; 1
    33c6:	9f 2e       	mov	r9, r31
    33c8:	f0 2d       	mov	r31, r0
    33ca:	ae 96       	adiw	r28, 0x2e	; 46
    33cc:	af ae       	std	Y+63, r10	; 0x3f
    33ce:	ae 97       	sbiw	r28, 0x2e	; 46
    33d0:	af 96       	adiw	r28, 0x2f	; 47
    33d2:	bf ae       	std	Y+63, r11	; 0x3f
    33d4:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    33d6:	e0 96       	adiw	r28, 0x30	; 48
    33d8:	cf ae       	std	Y+63, r12	; 0x3f
    33da:	e0 97       	sbiw	r28, 0x30	; 48
    33dc:	e1 96       	adiw	r28, 0x31	; 49
    33de:	df ae       	std	Y+63, r13	; 0x3f
    33e0:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    33e2:	f5 01       	movw	r30, r10
    33e4:	10 82       	st	Z, r1
    33e6:	11 82       	std	Z+1, r1	; 0x01
    33e8:	12 82       	std	Z+2, r1	; 0x02
    33ea:	13 82       	std	Z+3, r1	; 0x03
    33ec:	14 82       	std	Z+4, r1	; 0x04
    33ee:	15 82       	std	Z+5, r1	; 0x05
    33f0:	16 82       	std	Z+6, r1	; 0x06
    33f2:	f6 01       	movw	r30, r12
    33f4:	10 82       	st	Z, r1
    33f6:	11 82       	std	Z+1, r1	; 0x01
    33f8:	12 82       	std	Z+2, r1	; 0x02
    33fa:	13 82       	std	Z+3, r1	; 0x03
    33fc:	14 82       	std	Z+4, r1	; 0x04
    33fe:	15 82       	std	Z+5, r1	; 0x05
    3400:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    3402:	88 0f       	add	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	fc 01       	movw	r30, r24
    3408:	ee 0f       	add	r30, r30
    340a:	ff 1f       	adc	r31, r31
    340c:	ee 0f       	add	r30, r30
    340e:	ff 1f       	adc	r31, r31
    3410:	ee 0f       	add	r30, r30
    3412:	ff 1f       	adc	r31, r31
    3414:	8e 0f       	add	r24, r30
    3416:	9f 1f       	adc	r25, r31
    3418:	e1 e0       	ldi	r30, 0x01	; 1
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	ec 0f       	add	r30, r28
    341e:	fd 1f       	adc	r31, r29
    3420:	e8 0f       	add	r30, r24
    3422:	f9 1f       	adc	r31, r25
    3424:	20 80       	ld	r2, Z
    3426:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    3428:	00 e0       	ldi	r16, 0x00	; 0
    342a:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    342c:	0f 5f       	subi	r16, 0xFF	; 255
    342e:	1f 4f       	sbci	r17, 0xFF	; 255
    3430:	f3 01       	movw	r30, r6
    3432:	83 81       	ldd	r24, Z+3	; 0x03
    3434:	94 81       	ldd	r25, Z+4	; 0x04
    3436:	fc 01       	movw	r30, r24
    3438:	ee 0f       	add	r30, r30
    343a:	ff 1f       	adc	r31, r31
    343c:	ee 0f       	add	r30, r30
    343e:	ff 1f       	adc	r31, r31
    3440:	ee 0f       	add	r30, r30
    3442:	ff 1f       	adc	r31, r31
    3444:	8e 0f       	add	r24, r30
    3446:	9f 1f       	adc	r25, r31
    3448:	80 0f       	add	r24, r16
    344a:	91 1f       	adc	r25, r17
    344c:	fc 01       	movw	r30, r24
    344e:	ee 0f       	add	r30, r30
    3450:	ff 1f       	adc	r31, r31
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	8c 0f       	add	r24, r28
    3458:	9d 1f       	adc	r25, r29
    345a:	e8 0f       	add	r30, r24
    345c:	f9 1f       	adc	r31, r25
    345e:	81 81       	ldd	r24, Z+1	; 0x01
    3460:	8f 93       	push	r24
    3462:	80 81       	ld	r24, Z
    3464:	8f 93       	push	r24
    3466:	bf 92       	push	r11
    3468:	af 92       	push	r10
    346a:	9f 92       	push	r9
    346c:	8f 92       	push	r8
    346e:	bf 92       	push	r11
    3470:	af 92       	push	r10
    3472:	0e 94 0d 22 	call	0x441a	; 0x441a <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    3476:	f3 01       	movw	r30, r6
    3478:	83 81       	ldd	r24, Z+3	; 0x03
    347a:	94 81       	ldd	r25, Z+4	; 0x04
    347c:	fc 01       	movw	r30, r24
    347e:	ee 0f       	add	r30, r30
    3480:	ff 1f       	adc	r31, r31
    3482:	ee 0f       	add	r30, r30
    3484:	ff 1f       	adc	r31, r31
    3486:	ee 0f       	add	r30, r30
    3488:	ff 1f       	adc	r31, r31
    348a:	e8 0f       	add	r30, r24
    348c:	f9 1f       	adc	r31, r25
    348e:	e0 0f       	add	r30, r16
    3490:	f1 1f       	adc	r31, r17
    3492:	34 96       	adiw	r30, 0x04	; 4
    3494:	ee 0f       	add	r30, r30
    3496:	ff 1f       	adc	r31, r31
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	8c 0f       	add	r24, r28
    349e:	9d 1f       	adc	r25, r29
    34a0:	e8 0f       	add	r30, r24
    34a2:	f9 1f       	adc	r31, r25
    34a4:	81 81       	ldd	r24, Z+1	; 0x01
    34a6:	8f 93       	push	r24
    34a8:	80 81       	ld	r24, Z
    34aa:	8f 93       	push	r24
    34ac:	df 92       	push	r13
    34ae:	cf 92       	push	r12
    34b0:	9f 92       	push	r9
    34b2:	8f 92       	push	r8
    34b4:	df 92       	push	r13
    34b6:	cf 92       	push	r12
    34b8:	0e 94 0d 22 	call	0x441a	; 0x441a <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	04 30       	cpi	r16, 0x04	; 4
    34c8:	11 05       	cpc	r17, r1
    34ca:	09 f0       	breq	.+2      	; 0x34ce <_ZN4QEPU3runEv+0x240>
    34cc:	af cf       	rjmp	.-162    	; 0x342c <_ZN4QEPU3runEv+0x19e>
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
		}
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    34ce:	40 e1       	ldi	r20, 0x10	; 16
    34d0:	50 e0       	ldi	r21, 0x00	; 0
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	e0 96       	adiw	r28, 0x30	; 48
    34d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    34da:	e0 97       	sbiw	r28, 0x30	; 48
    34dc:	e1 96       	adiw	r28, 0x31	; 49
    34de:	9f ad       	ldd	r25, Y+63	; 0x3f
    34e0:	e1 97       	sbiw	r28, 0x31	; 49
    34e2:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <strtol>
    34e6:	ad 96       	adiw	r28, 0x2d	; 45
    34e8:	6c af       	std	Y+60, r22	; 0x3c
    34ea:	7d af       	std	Y+61, r23	; 0x3d
    34ec:	8e af       	std	Y+62, r24	; 0x3e
    34ee:	9f af       	std	Y+63, r25	; 0x3f
    34f0:	ad 97       	sbiw	r28, 0x2d	; 45
    34f2:	40 e1       	ldi	r20, 0x10	; 16
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	60 e0       	ldi	r22, 0x00	; 0
    34f8:	70 e0       	ldi	r23, 0x00	; 0
    34fa:	ae 96       	adiw	r28, 0x2e	; 46
    34fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    34fe:	ae 97       	sbiw	r28, 0x2e	; 46
    3500:	af 96       	adiw	r28, 0x2f	; 47
    3502:	9f ad       	ldd	r25, Y+63	; 0x3f
    3504:	af 97       	sbiw	r28, 0x2f	; 47
    3506:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <strtol>
    350a:	9b 01       	movw	r18, r22
    350c:	ac 01       	movw	r20, r24
    350e:	ad 96       	adiw	r28, 0x2d	; 45
    3510:	ec ac       	ldd	r14, Y+60	; 0x3c
    3512:	fd ac       	ldd	r15, Y+61	; 0x3d
    3514:	0e ad       	ldd	r16, Y+62	; 0x3e
    3516:	1f ad       	ldd	r17, Y+63	; 0x3f
    3518:	ad 97       	sbiw	r28, 0x2d	; 45
    351a:	b1 01       	movw	r22, r2
    351c:	c3 01       	movw	r24, r6
    351e:	0e 94 7e 15 	call	0x2afc	; 0x2afc <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    3522:	f3 01       	movw	r30, r6
    3524:	83 81       	ldd	r24, Z+3	; 0x03
    3526:	94 81       	ldd	r25, Z+4	; 0x04
    3528:	01 96       	adiw	r24, 0x01	; 1
    352a:	94 83       	std	Z+4, r25	; 0x04
    352c:	83 83       	std	Z+3, r24	; 0x03
    352e:	84 15       	cp	r24, r4
    3530:	95 05       	cpc	r25, r5
    3532:	0c f4       	brge	.+2      	; 0x3536 <_ZN4QEPU3runEv+0x2a8>
    3534:	56 cf       	rjmp	.-340    	; 0x33e2 <_ZN4QEPU3runEv+0x154>
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
		}
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    3536:	c3 01       	movw	r24, r6
    3538:	0e 94 27 14 	call	0x284e	; 0x284e <_ZN4QEPU7dumpmemEv>
    353c:	04 c0       	rjmp	.+8      	; 0x3546 <_ZN4QEPU3runEv+0x2b8>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    353e:	f3 01       	movw	r30, r6
    3540:	14 82       	std	Z+4, r1	; 0x04
    3542:	13 82       	std	Z+3, r1	; 0x03
    3544:	f8 cf       	rjmp	.-16     	; 0x3536 <_ZN4QEPU3runEv+0x2a8>
		}
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    3546:	c0 59       	subi	r28, 0x90	; 144
    3548:	df 4f       	sbci	r29, 0xFF	; 255
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	f8 94       	cli
    354e:	de bf       	out	0x3e, r29	; 62
    3550:	0f be       	out	0x3f, r0	; 63
    3552:	cd bf       	out	0x3d, r28	; 61
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	1f 91       	pop	r17
    355a:	0f 91       	pop	r16
    355c:	ff 90       	pop	r15
    355e:	ef 90       	pop	r14
    3560:	df 90       	pop	r13
    3562:	cf 90       	pop	r12
    3564:	bf 90       	pop	r11
    3566:	af 90       	pop	r10
    3568:	9f 90       	pop	r9
    356a:	8f 90       	pop	r8
    356c:	7f 90       	pop	r7
    356e:	6f 90       	pop	r6
    3570:	5f 90       	pop	r5
    3572:	4f 90       	pop	r4
    3574:	3f 90       	pop	r3
    3576:	2f 90       	pop	r2
    3578:	08 95       	ret

0000357a <main>:
#include "qepu.h"
int main(void){
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	00 d0       	rcall	.+0      	; 0x3580 <main+0x6>
    3580:	00 d0       	rcall	.+0      	; 0x3582 <main+0x8>
    3582:	00 d0       	rcall	.+0      	; 0x3584 <main+0xa>
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu;
    3588:	ce 01       	movw	r24, r28
    358a:	01 96       	adiw	r24, 0x01	; 1
    358c:	0e 94 b6 13 	call	0x276c	; 0x276c <_ZN4QEPUC1Ev>
	qepu.run();
    3590:	ce 01       	movw	r24, r28
    3592:	01 96       	adiw	r24, 0x01	; 1
    3594:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN4QEPU3runEv>
    3598:	ff cf       	rjmp	.-2      	; 0x3598 <main+0x1e>

0000359a <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	 //Set Baud rate
	 int ubrr=51;
	 UBRRL = ubrr;
    359a:	83 e3       	ldi	r24, 0x33	; 51
    359c:	89 b9       	out	0x09, r24	; 9
	 UBRRH = (ubrr>>8);
    359e:	10 bc       	out	0x20, r1	; 32
	 
	 //Set Frame Format
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    35a0:	86 e8       	ldi	r24, 0x86	; 134
    35a2:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    35a4:	88 e1       	ldi	r24, 0x18	; 24
    35a6:	8a b9       	out	0x0a, r24	; 10
    35a8:	08 95       	ret

000035aa <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    35aa:	5d 9b       	sbis	0x0b, 5	; 11
    35ac:	fe cf       	rjmp	.-4      	; 0x35aa <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    35ae:	6c b9       	out	0x0c, r22	; 12
    35b0:	08 95       	ret

000035b2 <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    35b2:	0f 93       	push	r16
    35b4:	1f 93       	push	r17
    35b6:	cf 93       	push	r28
    35b8:	df 93       	push	r29
    35ba:	8c 01       	movw	r16, r24
    35bc:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    35be:	68 81       	ld	r22, Y
    35c0:	66 23       	and	r22, r22
    35c2:	39 f0       	breq	.+14     	; 0x35d2 <_ZN6Serial8writestrEPc+0x20>
    35c4:	21 96       	adiw	r28, 0x01	; 1
    35c6:	c8 01       	movw	r24, r16
    35c8:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN6Serial5writeEc>
    35cc:	69 91       	ld	r22, Y+
    35ce:	61 11       	cpse	r22, r1
    35d0:	fa cf       	rjmp	.-12     	; 0x35c6 <_ZN6Serial8writestrEPc+0x14>
}
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	08 95       	ret

000035dc <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    35dc:	cf 93       	push	r28
    35de:	df 93       	push	r29
    35e0:	ec 01       	movw	r28, r24
	writestr(data);
    35e2:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    35e6:	6d e0       	ldi	r22, 0x0D	; 13
    35e8:	ce 01       	movw	r24, r28
    35ea:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZN6Serial5writeEc>
    35ee:	df 91       	pop	r29
    35f0:	cf 91       	pop	r28
    35f2:	08 95       	ret

000035f4 <acos>:
    35f4:	9f 93       	push	r25
    35f6:	9f 77       	andi	r25, 0x7F	; 127
    35f8:	a6 d1       	rcall	.+844    	; 0x3946 <__fp_arccos>
    35fa:	0f 90       	pop	r0
    35fc:	00 20       	and	r0, r0
    35fe:	3a f4       	brpl	.+14     	; 0x360e <acos+0x1a>
    3600:	90 58       	subi	r25, 0x80	; 128
    3602:	a2 ea       	ldi	r26, 0xA2	; 162
    3604:	2a ed       	ldi	r18, 0xDA	; 218
    3606:	3f e0       	ldi	r19, 0x0F	; 15
    3608:	49 e4       	ldi	r20, 0x49	; 73
    360a:	50 e4       	ldi	r21, 0x40	; 64
    360c:	13 d0       	rcall	.+38     	; 0x3634 <__addsf3x>
    360e:	3e c2       	rjmp	.+1148   	; 0x3a8c <__fp_round>

00003610 <__subsf3>:
    3610:	50 58       	subi	r21, 0x80	; 128

00003612 <__addsf3>:
    3612:	bb 27       	eor	r27, r27
    3614:	aa 27       	eor	r26, r26
    3616:	0e d0       	rcall	.+28     	; 0x3634 <__addsf3x>
    3618:	39 c2       	rjmp	.+1138   	; 0x3a8c <__fp_round>
    361a:	02 d2       	rcall	.+1028   	; 0x3a20 <__fp_pscA>
    361c:	30 f0       	brcs	.+12     	; 0x362a <__addsf3+0x18>
    361e:	07 d2       	rcall	.+1038   	; 0x3a2e <__fp_pscB>
    3620:	20 f0       	brcs	.+8      	; 0x362a <__addsf3+0x18>
    3622:	31 f4       	brne	.+12     	; 0x3630 <__addsf3+0x1e>
    3624:	9f 3f       	cpi	r25, 0xFF	; 255
    3626:	11 f4       	brne	.+4      	; 0x362c <__addsf3+0x1a>
    3628:	1e f4       	brtc	.+6      	; 0x3630 <__addsf3+0x1e>
    362a:	d2 c1       	rjmp	.+932    	; 0x39d0 <__fp_nan>
    362c:	0e f4       	brtc	.+2      	; 0x3630 <__addsf3+0x1e>
    362e:	e0 95       	com	r30
    3630:	e7 fb       	bst	r30, 7
    3632:	c8 c1       	rjmp	.+912    	; 0x39c4 <__fp_inf>

00003634 <__addsf3x>:
    3634:	e9 2f       	mov	r30, r25
    3636:	4c d2       	rcall	.+1176   	; 0x3ad0 <__fp_split3>
    3638:	80 f3       	brcs	.-32     	; 0x361a <__addsf3+0x8>
    363a:	ba 17       	cp	r27, r26
    363c:	62 07       	cpc	r22, r18
    363e:	73 07       	cpc	r23, r19
    3640:	84 07       	cpc	r24, r20
    3642:	95 07       	cpc	r25, r21
    3644:	18 f0       	brcs	.+6      	; 0x364c <__addsf3x+0x18>
    3646:	71 f4       	brne	.+28     	; 0x3664 <__addsf3x+0x30>
    3648:	9e f5       	brtc	.+102    	; 0x36b0 <__addsf3x+0x7c>
    364a:	64 c2       	rjmp	.+1224   	; 0x3b14 <__fp_zero>
    364c:	0e f4       	brtc	.+2      	; 0x3650 <__addsf3x+0x1c>
    364e:	e0 95       	com	r30
    3650:	0b 2e       	mov	r0, r27
    3652:	ba 2f       	mov	r27, r26
    3654:	a0 2d       	mov	r26, r0
    3656:	0b 01       	movw	r0, r22
    3658:	b9 01       	movw	r22, r18
    365a:	90 01       	movw	r18, r0
    365c:	0c 01       	movw	r0, r24
    365e:	ca 01       	movw	r24, r20
    3660:	a0 01       	movw	r20, r0
    3662:	11 24       	eor	r1, r1
    3664:	ff 27       	eor	r31, r31
    3666:	59 1b       	sub	r21, r25
    3668:	99 f0       	breq	.+38     	; 0x3690 <__addsf3x+0x5c>
    366a:	59 3f       	cpi	r21, 0xF9	; 249
    366c:	50 f4       	brcc	.+20     	; 0x3682 <__addsf3x+0x4e>
    366e:	50 3e       	cpi	r21, 0xE0	; 224
    3670:	68 f1       	brcs	.+90     	; 0x36cc <__addsf3x+0x98>
    3672:	1a 16       	cp	r1, r26
    3674:	f0 40       	sbci	r31, 0x00	; 0
    3676:	a2 2f       	mov	r26, r18
    3678:	23 2f       	mov	r18, r19
    367a:	34 2f       	mov	r19, r20
    367c:	44 27       	eor	r20, r20
    367e:	58 5f       	subi	r21, 0xF8	; 248
    3680:	f3 cf       	rjmp	.-26     	; 0x3668 <__addsf3x+0x34>
    3682:	46 95       	lsr	r20
    3684:	37 95       	ror	r19
    3686:	27 95       	ror	r18
    3688:	a7 95       	ror	r26
    368a:	f0 40       	sbci	r31, 0x00	; 0
    368c:	53 95       	inc	r21
    368e:	c9 f7       	brne	.-14     	; 0x3682 <__addsf3x+0x4e>
    3690:	7e f4       	brtc	.+30     	; 0x36b0 <__addsf3x+0x7c>
    3692:	1f 16       	cp	r1, r31
    3694:	ba 0b       	sbc	r27, r26
    3696:	62 0b       	sbc	r22, r18
    3698:	73 0b       	sbc	r23, r19
    369a:	84 0b       	sbc	r24, r20
    369c:	ba f0       	brmi	.+46     	; 0x36cc <__addsf3x+0x98>
    369e:	91 50       	subi	r25, 0x01	; 1
    36a0:	a1 f0       	breq	.+40     	; 0x36ca <__addsf3x+0x96>
    36a2:	ff 0f       	add	r31, r31
    36a4:	bb 1f       	adc	r27, r27
    36a6:	66 1f       	adc	r22, r22
    36a8:	77 1f       	adc	r23, r23
    36aa:	88 1f       	adc	r24, r24
    36ac:	c2 f7       	brpl	.-16     	; 0x369e <__addsf3x+0x6a>
    36ae:	0e c0       	rjmp	.+28     	; 0x36cc <__addsf3x+0x98>
    36b0:	ba 0f       	add	r27, r26
    36b2:	62 1f       	adc	r22, r18
    36b4:	73 1f       	adc	r23, r19
    36b6:	84 1f       	adc	r24, r20
    36b8:	48 f4       	brcc	.+18     	; 0x36cc <__addsf3x+0x98>
    36ba:	87 95       	ror	r24
    36bc:	77 95       	ror	r23
    36be:	67 95       	ror	r22
    36c0:	b7 95       	ror	r27
    36c2:	f7 95       	ror	r31
    36c4:	9e 3f       	cpi	r25, 0xFE	; 254
    36c6:	08 f0       	brcs	.+2      	; 0x36ca <__addsf3x+0x96>
    36c8:	b3 cf       	rjmp	.-154    	; 0x3630 <__addsf3+0x1e>
    36ca:	93 95       	inc	r25
    36cc:	88 0f       	add	r24, r24
    36ce:	08 f0       	brcs	.+2      	; 0x36d2 <__addsf3x+0x9e>
    36d0:	99 27       	eor	r25, r25
    36d2:	ee 0f       	add	r30, r30
    36d4:	97 95       	ror	r25
    36d6:	87 95       	ror	r24
    36d8:	08 95       	ret

000036da <atan>:
    36da:	df 93       	push	r29
    36dc:	dd 27       	eor	r29, r29
    36de:	b9 2f       	mov	r27, r25
    36e0:	bf 77       	andi	r27, 0x7F	; 127
    36e2:	40 e8       	ldi	r20, 0x80	; 128
    36e4:	5f e3       	ldi	r21, 0x3F	; 63
    36e6:	16 16       	cp	r1, r22
    36e8:	17 06       	cpc	r1, r23
    36ea:	48 07       	cpc	r20, r24
    36ec:	5b 07       	cpc	r21, r27
    36ee:	10 f4       	brcc	.+4      	; 0x36f4 <atan+0x1a>
    36f0:	d9 2f       	mov	r29, r25
    36f2:	1b d2       	rcall	.+1078   	; 0x3b2a <inverse>
    36f4:	9f 93       	push	r25
    36f6:	8f 93       	push	r24
    36f8:	7f 93       	push	r23
    36fa:	6f 93       	push	r22
    36fc:	76 d3       	rcall	.+1772   	; 0x3dea <square>
    36fe:	e8 e9       	ldi	r30, 0x98	; 152
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	69 d1       	rcall	.+722    	; 0x39d6 <__fp_powser>
    3704:	c3 d1       	rcall	.+902    	; 0x3a8c <__fp_round>
    3706:	2f 91       	pop	r18
    3708:	3f 91       	pop	r19
    370a:	4f 91       	pop	r20
    370c:	5f 91       	pop	r21
    370e:	ce d2       	rcall	.+1436   	; 0x3cac <__mulsf3x>
    3710:	dd 23       	and	r29, r29
    3712:	49 f0       	breq	.+18     	; 0x3726 <atan+0x4c>
    3714:	90 58       	subi	r25, 0x80	; 128
    3716:	a2 ea       	ldi	r26, 0xA2	; 162
    3718:	2a ed       	ldi	r18, 0xDA	; 218
    371a:	3f e0       	ldi	r19, 0x0F	; 15
    371c:	49 ec       	ldi	r20, 0xC9	; 201
    371e:	5f e3       	ldi	r21, 0x3F	; 63
    3720:	d0 78       	andi	r29, 0x80	; 128
    3722:	5d 27       	eor	r21, r29
    3724:	87 df       	rcall	.-242    	; 0x3634 <__addsf3x>
    3726:	df 91       	pop	r29
    3728:	b1 c1       	rjmp	.+866    	; 0x3a8c <__fp_round>

0000372a <__cmpsf2>:
    372a:	28 d1       	rcall	.+592    	; 0x397c <__fp_cmp>
    372c:	08 f4       	brcc	.+2      	; 0x3730 <__cmpsf2+0x6>
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	08 95       	ret

00003732 <cos>:
    3732:	85 d1       	rcall	.+778    	; 0x3a3e <__fp_rempio2>
    3734:	e3 95       	inc	r30
    3736:	bb c1       	rjmp	.+886    	; 0x3aae <__fp_sinus>

00003738 <__divsf3>:
    3738:	0c d0       	rcall	.+24     	; 0x3752 <__divsf3x>
    373a:	a8 c1       	rjmp	.+848    	; 0x3a8c <__fp_round>
    373c:	78 d1       	rcall	.+752    	; 0x3a2e <__fp_pscB>
    373e:	40 f0       	brcs	.+16     	; 0x3750 <__divsf3+0x18>
    3740:	6f d1       	rcall	.+734    	; 0x3a20 <__fp_pscA>
    3742:	30 f0       	brcs	.+12     	; 0x3750 <__divsf3+0x18>
    3744:	21 f4       	brne	.+8      	; 0x374e <__divsf3+0x16>
    3746:	5f 3f       	cpi	r21, 0xFF	; 255
    3748:	19 f0       	breq	.+6      	; 0x3750 <__divsf3+0x18>
    374a:	3c c1       	rjmp	.+632    	; 0x39c4 <__fp_inf>
    374c:	51 11       	cpse	r21, r1
    374e:	e3 c1       	rjmp	.+966    	; 0x3b16 <__fp_szero>
    3750:	3f c1       	rjmp	.+638    	; 0x39d0 <__fp_nan>

00003752 <__divsf3x>:
    3752:	be d1       	rcall	.+892    	; 0x3ad0 <__fp_split3>
    3754:	98 f3       	brcs	.-26     	; 0x373c <__divsf3+0x4>

00003756 <__divsf3_pse>:
    3756:	99 23       	and	r25, r25
    3758:	c9 f3       	breq	.-14     	; 0x374c <__divsf3+0x14>
    375a:	55 23       	and	r21, r21
    375c:	b1 f3       	breq	.-20     	; 0x374a <__divsf3+0x12>
    375e:	95 1b       	sub	r25, r21
    3760:	55 0b       	sbc	r21, r21
    3762:	bb 27       	eor	r27, r27
    3764:	aa 27       	eor	r26, r26
    3766:	62 17       	cp	r22, r18
    3768:	73 07       	cpc	r23, r19
    376a:	84 07       	cpc	r24, r20
    376c:	38 f0       	brcs	.+14     	; 0x377c <__divsf3_pse+0x26>
    376e:	9f 5f       	subi	r25, 0xFF	; 255
    3770:	5f 4f       	sbci	r21, 0xFF	; 255
    3772:	22 0f       	add	r18, r18
    3774:	33 1f       	adc	r19, r19
    3776:	44 1f       	adc	r20, r20
    3778:	aa 1f       	adc	r26, r26
    377a:	a9 f3       	breq	.-22     	; 0x3766 <__divsf3_pse+0x10>
    377c:	33 d0       	rcall	.+102    	; 0x37e4 <__divsf3_pse+0x8e>
    377e:	0e 2e       	mov	r0, r30
    3780:	3a f0       	brmi	.+14     	; 0x3790 <__divsf3_pse+0x3a>
    3782:	e0 e8       	ldi	r30, 0x80	; 128
    3784:	30 d0       	rcall	.+96     	; 0x37e6 <__divsf3_pse+0x90>
    3786:	91 50       	subi	r25, 0x01	; 1
    3788:	50 40       	sbci	r21, 0x00	; 0
    378a:	e6 95       	lsr	r30
    378c:	00 1c       	adc	r0, r0
    378e:	ca f7       	brpl	.-14     	; 0x3782 <__divsf3_pse+0x2c>
    3790:	29 d0       	rcall	.+82     	; 0x37e4 <__divsf3_pse+0x8e>
    3792:	fe 2f       	mov	r31, r30
    3794:	27 d0       	rcall	.+78     	; 0x37e4 <__divsf3_pse+0x8e>
    3796:	66 0f       	add	r22, r22
    3798:	77 1f       	adc	r23, r23
    379a:	88 1f       	adc	r24, r24
    379c:	bb 1f       	adc	r27, r27
    379e:	26 17       	cp	r18, r22
    37a0:	37 07       	cpc	r19, r23
    37a2:	48 07       	cpc	r20, r24
    37a4:	ab 07       	cpc	r26, r27
    37a6:	b0 e8       	ldi	r27, 0x80	; 128
    37a8:	09 f0       	breq	.+2      	; 0x37ac <__divsf3_pse+0x56>
    37aa:	bb 0b       	sbc	r27, r27
    37ac:	80 2d       	mov	r24, r0
    37ae:	bf 01       	movw	r22, r30
    37b0:	ff 27       	eor	r31, r31
    37b2:	93 58       	subi	r25, 0x83	; 131
    37b4:	5f 4f       	sbci	r21, 0xFF	; 255
    37b6:	2a f0       	brmi	.+10     	; 0x37c2 <__divsf3_pse+0x6c>
    37b8:	9e 3f       	cpi	r25, 0xFE	; 254
    37ba:	51 05       	cpc	r21, r1
    37bc:	68 f0       	brcs	.+26     	; 0x37d8 <__divsf3_pse+0x82>
    37be:	02 c1       	rjmp	.+516    	; 0x39c4 <__fp_inf>
    37c0:	aa c1       	rjmp	.+852    	; 0x3b16 <__fp_szero>
    37c2:	5f 3f       	cpi	r21, 0xFF	; 255
    37c4:	ec f3       	brlt	.-6      	; 0x37c0 <__divsf3_pse+0x6a>
    37c6:	98 3e       	cpi	r25, 0xE8	; 232
    37c8:	dc f3       	brlt	.-10     	; 0x37c0 <__divsf3_pse+0x6a>
    37ca:	86 95       	lsr	r24
    37cc:	77 95       	ror	r23
    37ce:	67 95       	ror	r22
    37d0:	b7 95       	ror	r27
    37d2:	f7 95       	ror	r31
    37d4:	9f 5f       	subi	r25, 0xFF	; 255
    37d6:	c9 f7       	brne	.-14     	; 0x37ca <__divsf3_pse+0x74>
    37d8:	88 0f       	add	r24, r24
    37da:	91 1d       	adc	r25, r1
    37dc:	96 95       	lsr	r25
    37de:	87 95       	ror	r24
    37e0:	97 f9       	bld	r25, 7
    37e2:	08 95       	ret
    37e4:	e1 e0       	ldi	r30, 0x01	; 1
    37e6:	66 0f       	add	r22, r22
    37e8:	77 1f       	adc	r23, r23
    37ea:	88 1f       	adc	r24, r24
    37ec:	bb 1f       	adc	r27, r27
    37ee:	62 17       	cp	r22, r18
    37f0:	73 07       	cpc	r23, r19
    37f2:	84 07       	cpc	r24, r20
    37f4:	ba 07       	cpc	r27, r26
    37f6:	20 f0       	brcs	.+8      	; 0x3800 <__divsf3_pse+0xaa>
    37f8:	62 1b       	sub	r22, r18
    37fa:	73 0b       	sbc	r23, r19
    37fc:	84 0b       	sbc	r24, r20
    37fe:	ba 0b       	sbc	r27, r26
    3800:	ee 1f       	adc	r30, r30
    3802:	88 f7       	brcc	.-30     	; 0x37e6 <__divsf3_pse+0x90>
    3804:	e0 95       	com	r30
    3806:	08 95       	ret
    3808:	19 f4       	brne	.+6      	; 0x3810 <__divsf3_pse+0xba>
    380a:	0e f0       	brts	.+2      	; 0x380e <__divsf3_pse+0xb8>
    380c:	db c0       	rjmp	.+438    	; 0x39c4 <__fp_inf>
    380e:	82 c1       	rjmp	.+772    	; 0x3b14 <__fp_zero>
    3810:	df c0       	rjmp	.+446    	; 0x39d0 <__fp_nan>

00003812 <exp>:
    3812:	66 d1       	rcall	.+716    	; 0x3ae0 <__fp_splitA>
    3814:	c8 f3       	brcs	.-14     	; 0x3808 <__divsf3_pse+0xb2>
    3816:	96 38       	cpi	r25, 0x86	; 134
    3818:	c0 f7       	brcc	.-16     	; 0x380a <__divsf3_pse+0xb4>
    381a:	07 f8       	bld	r0, 7
    381c:	0f 92       	push	r0
    381e:	e8 94       	clt
    3820:	2b e3       	ldi	r18, 0x3B	; 59
    3822:	3a ea       	ldi	r19, 0xAA	; 170
    3824:	48 eb       	ldi	r20, 0xB8	; 184
    3826:	5f e7       	ldi	r21, 0x7F	; 127
    3828:	43 d2       	rcall	.+1158   	; 0x3cb0 <__mulsf3_pse>
    382a:	0f 92       	push	r0
    382c:	0f 92       	push	r0
    382e:	0f 92       	push	r0
    3830:	4d b7       	in	r20, 0x3d	; 61
    3832:	5e b7       	in	r21, 0x3e	; 62
    3834:	0f 92       	push	r0
    3836:	fb d1       	rcall	.+1014   	; 0x3c2e <modf>
    3838:	e5 ec       	ldi	r30, 0xC5	; 197
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	cc d0       	rcall	.+408    	; 0x39d6 <__fp_powser>
    383e:	4f 91       	pop	r20
    3840:	5f 91       	pop	r21
    3842:	ef 91       	pop	r30
    3844:	ff 91       	pop	r31
    3846:	e5 95       	asr	r30
    3848:	ee 1f       	adc	r30, r30
    384a:	ff 1f       	adc	r31, r31
    384c:	49 f0       	breq	.+18     	; 0x3860 <exp+0x4e>
    384e:	fe 57       	subi	r31, 0x7E	; 126
    3850:	e0 68       	ori	r30, 0x80	; 128
    3852:	44 27       	eor	r20, r20
    3854:	ee 0f       	add	r30, r30
    3856:	44 1f       	adc	r20, r20
    3858:	fa 95       	dec	r31
    385a:	e1 f7       	brne	.-8      	; 0x3854 <exp+0x42>
    385c:	41 95       	neg	r20
    385e:	55 0b       	sbc	r21, r21
    3860:	6d d1       	rcall	.+730    	; 0x3b3c <ldexp>
    3862:	0f 90       	pop	r0
    3864:	07 fe       	sbrs	r0, 7
    3866:	61 c1       	rjmp	.+706    	; 0x3b2a <inverse>
    3868:	08 95       	ret

0000386a <__fixsfsi>:
    386a:	04 d0       	rcall	.+8      	; 0x3874 <__fixunssfsi>
    386c:	68 94       	set
    386e:	b1 11       	cpse	r27, r1
    3870:	52 c1       	rjmp	.+676    	; 0x3b16 <__fp_szero>
    3872:	08 95       	ret

00003874 <__fixunssfsi>:
    3874:	35 d1       	rcall	.+618    	; 0x3ae0 <__fp_splitA>
    3876:	88 f0       	brcs	.+34     	; 0x389a <__fixunssfsi+0x26>
    3878:	9f 57       	subi	r25, 0x7F	; 127
    387a:	90 f0       	brcs	.+36     	; 0x38a0 <__fixunssfsi+0x2c>
    387c:	b9 2f       	mov	r27, r25
    387e:	99 27       	eor	r25, r25
    3880:	b7 51       	subi	r27, 0x17	; 23
    3882:	a0 f0       	brcs	.+40     	; 0x38ac <__fixunssfsi+0x38>
    3884:	d1 f0       	breq	.+52     	; 0x38ba <__fixunssfsi+0x46>
    3886:	66 0f       	add	r22, r22
    3888:	77 1f       	adc	r23, r23
    388a:	88 1f       	adc	r24, r24
    388c:	99 1f       	adc	r25, r25
    388e:	1a f0       	brmi	.+6      	; 0x3896 <__fixunssfsi+0x22>
    3890:	ba 95       	dec	r27
    3892:	c9 f7       	brne	.-14     	; 0x3886 <__fixunssfsi+0x12>
    3894:	12 c0       	rjmp	.+36     	; 0x38ba <__fixunssfsi+0x46>
    3896:	b1 30       	cpi	r27, 0x01	; 1
    3898:	81 f0       	breq	.+32     	; 0x38ba <__fixunssfsi+0x46>
    389a:	3c d1       	rcall	.+632    	; 0x3b14 <__fp_zero>
    389c:	b1 e0       	ldi	r27, 0x01	; 1
    389e:	08 95       	ret
    38a0:	39 c1       	rjmp	.+626    	; 0x3b14 <__fp_zero>
    38a2:	67 2f       	mov	r22, r23
    38a4:	78 2f       	mov	r23, r24
    38a6:	88 27       	eor	r24, r24
    38a8:	b8 5f       	subi	r27, 0xF8	; 248
    38aa:	39 f0       	breq	.+14     	; 0x38ba <__fixunssfsi+0x46>
    38ac:	b9 3f       	cpi	r27, 0xF9	; 249
    38ae:	cc f3       	brlt	.-14     	; 0x38a2 <__fixunssfsi+0x2e>
    38b0:	86 95       	lsr	r24
    38b2:	77 95       	ror	r23
    38b4:	67 95       	ror	r22
    38b6:	b3 95       	inc	r27
    38b8:	d9 f7       	brne	.-10     	; 0x38b0 <__fixunssfsi+0x3c>
    38ba:	3e f4       	brtc	.+14     	; 0x38ca <__fixunssfsi+0x56>
    38bc:	90 95       	com	r25
    38be:	80 95       	com	r24
    38c0:	70 95       	com	r23
    38c2:	61 95       	neg	r22
    38c4:	7f 4f       	sbci	r23, 0xFF	; 255
    38c6:	8f 4f       	sbci	r24, 0xFF	; 255
    38c8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ca:	08 95       	ret

000038cc <__floatunsisf>:
    38cc:	e8 94       	clt
    38ce:	09 c0       	rjmp	.+18     	; 0x38e2 <__floatsisf+0x12>

000038d0 <__floatsisf>:
    38d0:	97 fb       	bst	r25, 7
    38d2:	3e f4       	brtc	.+14     	; 0x38e2 <__floatsisf+0x12>
    38d4:	90 95       	com	r25
    38d6:	80 95       	com	r24
    38d8:	70 95       	com	r23
    38da:	61 95       	neg	r22
    38dc:	7f 4f       	sbci	r23, 0xFF	; 255
    38de:	8f 4f       	sbci	r24, 0xFF	; 255
    38e0:	9f 4f       	sbci	r25, 0xFF	; 255
    38e2:	99 23       	and	r25, r25
    38e4:	a9 f0       	breq	.+42     	; 0x3910 <__floatsisf+0x40>
    38e6:	f9 2f       	mov	r31, r25
    38e8:	96 e9       	ldi	r25, 0x96	; 150
    38ea:	bb 27       	eor	r27, r27
    38ec:	93 95       	inc	r25
    38ee:	f6 95       	lsr	r31
    38f0:	87 95       	ror	r24
    38f2:	77 95       	ror	r23
    38f4:	67 95       	ror	r22
    38f6:	b7 95       	ror	r27
    38f8:	f1 11       	cpse	r31, r1
    38fa:	f8 cf       	rjmp	.-16     	; 0x38ec <__floatsisf+0x1c>
    38fc:	fa f4       	brpl	.+62     	; 0x393c <__floatsisf+0x6c>
    38fe:	bb 0f       	add	r27, r27
    3900:	11 f4       	brne	.+4      	; 0x3906 <__floatsisf+0x36>
    3902:	60 ff       	sbrs	r22, 0
    3904:	1b c0       	rjmp	.+54     	; 0x393c <__floatsisf+0x6c>
    3906:	6f 5f       	subi	r22, 0xFF	; 255
    3908:	7f 4f       	sbci	r23, 0xFF	; 255
    390a:	8f 4f       	sbci	r24, 0xFF	; 255
    390c:	9f 4f       	sbci	r25, 0xFF	; 255
    390e:	16 c0       	rjmp	.+44     	; 0x393c <__floatsisf+0x6c>
    3910:	88 23       	and	r24, r24
    3912:	11 f0       	breq	.+4      	; 0x3918 <__floatsisf+0x48>
    3914:	96 e9       	ldi	r25, 0x96	; 150
    3916:	11 c0       	rjmp	.+34     	; 0x393a <__floatsisf+0x6a>
    3918:	77 23       	and	r23, r23
    391a:	21 f0       	breq	.+8      	; 0x3924 <__floatsisf+0x54>
    391c:	9e e8       	ldi	r25, 0x8E	; 142
    391e:	87 2f       	mov	r24, r23
    3920:	76 2f       	mov	r23, r22
    3922:	05 c0       	rjmp	.+10     	; 0x392e <__floatsisf+0x5e>
    3924:	66 23       	and	r22, r22
    3926:	71 f0       	breq	.+28     	; 0x3944 <__floatsisf+0x74>
    3928:	96 e8       	ldi	r25, 0x86	; 134
    392a:	86 2f       	mov	r24, r22
    392c:	70 e0       	ldi	r23, 0x00	; 0
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	2a f0       	brmi	.+10     	; 0x393c <__floatsisf+0x6c>
    3932:	9a 95       	dec	r25
    3934:	66 0f       	add	r22, r22
    3936:	77 1f       	adc	r23, r23
    3938:	88 1f       	adc	r24, r24
    393a:	da f7       	brpl	.-10     	; 0x3932 <__floatsisf+0x62>
    393c:	88 0f       	add	r24, r24
    393e:	96 95       	lsr	r25
    3940:	87 95       	ror	r24
    3942:	97 f9       	bld	r25, 7
    3944:	08 95       	ret

00003946 <__fp_arccos>:
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	1f 93       	push	r17
    394c:	0f 93       	push	r16
    394e:	8b 01       	movw	r16, r22
    3950:	ec 01       	movw	r28, r24
    3952:	ed ee       	ldi	r30, 0xED	; 237
    3954:	f0 e0       	ldi	r31, 0x00	; 0
    3956:	3f d0       	rcall	.+126    	; 0x39d6 <__fp_powser>
    3958:	99 d0       	rcall	.+306    	; 0x3a8c <__fp_round>
    395a:	98 01       	movw	r18, r16
    395c:	ae 01       	movw	r20, r28
    395e:	8b 01       	movw	r16, r22
    3960:	ec 01       	movw	r28, r24
    3962:	60 e0       	ldi	r22, 0x00	; 0
    3964:	70 e0       	ldi	r23, 0x00	; 0
    3966:	80 e8       	ldi	r24, 0x80	; 128
    3968:	9f e3       	ldi	r25, 0x3F	; 63
    396a:	52 de       	rcall	.-860    	; 0x3610 <__subsf3>
    396c:	00 d2       	rcall	.+1024   	; 0x3d6e <sqrt>
    396e:	98 01       	movw	r18, r16
    3970:	ae 01       	movw	r20, r28
    3972:	0f 91       	pop	r16
    3974:	1f 91       	pop	r17
    3976:	cf 91       	pop	r28
    3978:	df 91       	pop	r29
    397a:	98 c1       	rjmp	.+816    	; 0x3cac <__mulsf3x>

0000397c <__fp_cmp>:
    397c:	99 0f       	add	r25, r25
    397e:	00 08       	sbc	r0, r0
    3980:	55 0f       	add	r21, r21
    3982:	aa 0b       	sbc	r26, r26
    3984:	e0 e8       	ldi	r30, 0x80	; 128
    3986:	fe ef       	ldi	r31, 0xFE	; 254
    3988:	16 16       	cp	r1, r22
    398a:	17 06       	cpc	r1, r23
    398c:	e8 07       	cpc	r30, r24
    398e:	f9 07       	cpc	r31, r25
    3990:	c0 f0       	brcs	.+48     	; 0x39c2 <__fp_cmp+0x46>
    3992:	12 16       	cp	r1, r18
    3994:	13 06       	cpc	r1, r19
    3996:	e4 07       	cpc	r30, r20
    3998:	f5 07       	cpc	r31, r21
    399a:	98 f0       	brcs	.+38     	; 0x39c2 <__fp_cmp+0x46>
    399c:	62 1b       	sub	r22, r18
    399e:	73 0b       	sbc	r23, r19
    39a0:	84 0b       	sbc	r24, r20
    39a2:	95 0b       	sbc	r25, r21
    39a4:	39 f4       	brne	.+14     	; 0x39b4 <__fp_cmp+0x38>
    39a6:	0a 26       	eor	r0, r26
    39a8:	61 f0       	breq	.+24     	; 0x39c2 <__fp_cmp+0x46>
    39aa:	23 2b       	or	r18, r19
    39ac:	24 2b       	or	r18, r20
    39ae:	25 2b       	or	r18, r21
    39b0:	21 f4       	brne	.+8      	; 0x39ba <__fp_cmp+0x3e>
    39b2:	08 95       	ret
    39b4:	0a 26       	eor	r0, r26
    39b6:	09 f4       	brne	.+2      	; 0x39ba <__fp_cmp+0x3e>
    39b8:	a1 40       	sbci	r26, 0x01	; 1
    39ba:	a6 95       	lsr	r26
    39bc:	8f ef       	ldi	r24, 0xFF	; 255
    39be:	81 1d       	adc	r24, r1
    39c0:	81 1d       	adc	r24, r1
    39c2:	08 95       	ret

000039c4 <__fp_inf>:
    39c4:	97 f9       	bld	r25, 7
    39c6:	9f 67       	ori	r25, 0x7F	; 127
    39c8:	80 e8       	ldi	r24, 0x80	; 128
    39ca:	70 e0       	ldi	r23, 0x00	; 0
    39cc:	60 e0       	ldi	r22, 0x00	; 0
    39ce:	08 95       	ret

000039d0 <__fp_nan>:
    39d0:	9f ef       	ldi	r25, 0xFF	; 255
    39d2:	80 ec       	ldi	r24, 0xC0	; 192
    39d4:	08 95       	ret

000039d6 <__fp_powser>:
    39d6:	df 93       	push	r29
    39d8:	cf 93       	push	r28
    39da:	1f 93       	push	r17
    39dc:	0f 93       	push	r16
    39de:	ff 92       	push	r15
    39e0:	ef 92       	push	r14
    39e2:	df 92       	push	r13
    39e4:	7b 01       	movw	r14, r22
    39e6:	8c 01       	movw	r16, r24
    39e8:	68 94       	set
    39ea:	05 c0       	rjmp	.+10     	; 0x39f6 <__fp_powser+0x20>
    39ec:	da 2e       	mov	r13, r26
    39ee:	ef 01       	movw	r28, r30
    39f0:	5d d1       	rcall	.+698    	; 0x3cac <__mulsf3x>
    39f2:	fe 01       	movw	r30, r28
    39f4:	e8 94       	clt
    39f6:	a5 91       	lpm	r26, Z+
    39f8:	25 91       	lpm	r18, Z+
    39fa:	35 91       	lpm	r19, Z+
    39fc:	45 91       	lpm	r20, Z+
    39fe:	55 91       	lpm	r21, Z+
    3a00:	ae f3       	brts	.-22     	; 0x39ec <__fp_powser+0x16>
    3a02:	ef 01       	movw	r28, r30
    3a04:	17 de       	rcall	.-978    	; 0x3634 <__addsf3x>
    3a06:	fe 01       	movw	r30, r28
    3a08:	97 01       	movw	r18, r14
    3a0a:	a8 01       	movw	r20, r16
    3a0c:	da 94       	dec	r13
    3a0e:	79 f7       	brne	.-34     	; 0x39ee <__fp_powser+0x18>
    3a10:	df 90       	pop	r13
    3a12:	ef 90       	pop	r14
    3a14:	ff 90       	pop	r15
    3a16:	0f 91       	pop	r16
    3a18:	1f 91       	pop	r17
    3a1a:	cf 91       	pop	r28
    3a1c:	df 91       	pop	r29
    3a1e:	08 95       	ret

00003a20 <__fp_pscA>:
    3a20:	00 24       	eor	r0, r0
    3a22:	0a 94       	dec	r0
    3a24:	16 16       	cp	r1, r22
    3a26:	17 06       	cpc	r1, r23
    3a28:	18 06       	cpc	r1, r24
    3a2a:	09 06       	cpc	r0, r25
    3a2c:	08 95       	ret

00003a2e <__fp_pscB>:
    3a2e:	00 24       	eor	r0, r0
    3a30:	0a 94       	dec	r0
    3a32:	12 16       	cp	r1, r18
    3a34:	13 06       	cpc	r1, r19
    3a36:	14 06       	cpc	r1, r20
    3a38:	05 06       	cpc	r0, r21
    3a3a:	08 95       	ret
    3a3c:	c9 cf       	rjmp	.-110    	; 0x39d0 <__fp_nan>

00003a3e <__fp_rempio2>:
    3a3e:	50 d0       	rcall	.+160    	; 0x3ae0 <__fp_splitA>
    3a40:	e8 f3       	brcs	.-6      	; 0x3a3c <__fp_pscB+0xe>
    3a42:	e8 94       	clt
    3a44:	e0 e0       	ldi	r30, 0x00	; 0
    3a46:	bb 27       	eor	r27, r27
    3a48:	9f 57       	subi	r25, 0x7F	; 127
    3a4a:	f0 f0       	brcs	.+60     	; 0x3a88 <__fp_rempio2+0x4a>
    3a4c:	2a ed       	ldi	r18, 0xDA	; 218
    3a4e:	3f e0       	ldi	r19, 0x0F	; 15
    3a50:	49 ec       	ldi	r20, 0xC9	; 201
    3a52:	06 c0       	rjmp	.+12     	; 0x3a60 <__fp_rempio2+0x22>
    3a54:	ee 0f       	add	r30, r30
    3a56:	bb 0f       	add	r27, r27
    3a58:	66 1f       	adc	r22, r22
    3a5a:	77 1f       	adc	r23, r23
    3a5c:	88 1f       	adc	r24, r24
    3a5e:	28 f0       	brcs	.+10     	; 0x3a6a <__fp_rempio2+0x2c>
    3a60:	b2 3a       	cpi	r27, 0xA2	; 162
    3a62:	62 07       	cpc	r22, r18
    3a64:	73 07       	cpc	r23, r19
    3a66:	84 07       	cpc	r24, r20
    3a68:	28 f0       	brcs	.+10     	; 0x3a74 <__fp_rempio2+0x36>
    3a6a:	b2 5a       	subi	r27, 0xA2	; 162
    3a6c:	62 0b       	sbc	r22, r18
    3a6e:	73 0b       	sbc	r23, r19
    3a70:	84 0b       	sbc	r24, r20
    3a72:	e3 95       	inc	r30
    3a74:	9a 95       	dec	r25
    3a76:	72 f7       	brpl	.-36     	; 0x3a54 <__fp_rempio2+0x16>
    3a78:	80 38       	cpi	r24, 0x80	; 128
    3a7a:	30 f4       	brcc	.+12     	; 0x3a88 <__fp_rempio2+0x4a>
    3a7c:	9a 95       	dec	r25
    3a7e:	bb 0f       	add	r27, r27
    3a80:	66 1f       	adc	r22, r22
    3a82:	77 1f       	adc	r23, r23
    3a84:	88 1f       	adc	r24, r24
    3a86:	d2 f7       	brpl	.-12     	; 0x3a7c <__fp_rempio2+0x3e>
    3a88:	90 48       	sbci	r25, 0x80	; 128
    3a8a:	b4 c1       	rjmp	.+872    	; 0x3df4 <__fp_mpack_finite>

00003a8c <__fp_round>:
    3a8c:	09 2e       	mov	r0, r25
    3a8e:	03 94       	inc	r0
    3a90:	00 0c       	add	r0, r0
    3a92:	11 f4       	brne	.+4      	; 0x3a98 <__fp_round+0xc>
    3a94:	88 23       	and	r24, r24
    3a96:	52 f0       	brmi	.+20     	; 0x3aac <__fp_round+0x20>
    3a98:	bb 0f       	add	r27, r27
    3a9a:	40 f4       	brcc	.+16     	; 0x3aac <__fp_round+0x20>
    3a9c:	bf 2b       	or	r27, r31
    3a9e:	11 f4       	brne	.+4      	; 0x3aa4 <__fp_round+0x18>
    3aa0:	60 ff       	sbrs	r22, 0
    3aa2:	04 c0       	rjmp	.+8      	; 0x3aac <__fp_round+0x20>
    3aa4:	6f 5f       	subi	r22, 0xFF	; 255
    3aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    3aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3aac:	08 95       	ret

00003aae <__fp_sinus>:
    3aae:	ef 93       	push	r30
    3ab0:	e0 ff       	sbrs	r30, 0
    3ab2:	06 c0       	rjmp	.+12     	; 0x3ac0 <__fp_sinus+0x12>
    3ab4:	a2 ea       	ldi	r26, 0xA2	; 162
    3ab6:	2a ed       	ldi	r18, 0xDA	; 218
    3ab8:	3f e0       	ldi	r19, 0x0F	; 15
    3aba:	49 ec       	ldi	r20, 0xC9	; 201
    3abc:	5f eb       	ldi	r21, 0xBF	; 191
    3abe:	ba dd       	rcall	.-1164   	; 0x3634 <__addsf3x>
    3ac0:	e5 df       	rcall	.-54     	; 0x3a8c <__fp_round>
    3ac2:	0f 90       	pop	r0
    3ac4:	03 94       	inc	r0
    3ac6:	01 fc       	sbrc	r0, 1
    3ac8:	90 58       	subi	r25, 0x80	; 128
    3aca:	e5 e1       	ldi	r30, 0x15	; 21
    3acc:	f1 e0       	ldi	r31, 0x01	; 1
    3ace:	a5 c1       	rjmp	.+842    	; 0x3e1a <__fp_powsodd>

00003ad0 <__fp_split3>:
    3ad0:	57 fd       	sbrc	r21, 7
    3ad2:	90 58       	subi	r25, 0x80	; 128
    3ad4:	44 0f       	add	r20, r20
    3ad6:	55 1f       	adc	r21, r21
    3ad8:	59 f0       	breq	.+22     	; 0x3af0 <__fp_splitA+0x10>
    3ada:	5f 3f       	cpi	r21, 0xFF	; 255
    3adc:	71 f0       	breq	.+28     	; 0x3afa <__fp_splitA+0x1a>
    3ade:	47 95       	ror	r20

00003ae0 <__fp_splitA>:
    3ae0:	88 0f       	add	r24, r24
    3ae2:	97 fb       	bst	r25, 7
    3ae4:	99 1f       	adc	r25, r25
    3ae6:	61 f0       	breq	.+24     	; 0x3b00 <__fp_splitA+0x20>
    3ae8:	9f 3f       	cpi	r25, 0xFF	; 255
    3aea:	79 f0       	breq	.+30     	; 0x3b0a <__fp_splitA+0x2a>
    3aec:	87 95       	ror	r24
    3aee:	08 95       	ret
    3af0:	12 16       	cp	r1, r18
    3af2:	13 06       	cpc	r1, r19
    3af4:	14 06       	cpc	r1, r20
    3af6:	55 1f       	adc	r21, r21
    3af8:	f2 cf       	rjmp	.-28     	; 0x3ade <__fp_split3+0xe>
    3afa:	46 95       	lsr	r20
    3afc:	f1 df       	rcall	.-30     	; 0x3ae0 <__fp_splitA>
    3afe:	08 c0       	rjmp	.+16     	; 0x3b10 <__fp_splitA+0x30>
    3b00:	16 16       	cp	r1, r22
    3b02:	17 06       	cpc	r1, r23
    3b04:	18 06       	cpc	r1, r24
    3b06:	99 1f       	adc	r25, r25
    3b08:	f1 cf       	rjmp	.-30     	; 0x3aec <__fp_splitA+0xc>
    3b0a:	86 95       	lsr	r24
    3b0c:	71 05       	cpc	r23, r1
    3b0e:	61 05       	cpc	r22, r1
    3b10:	08 94       	sec
    3b12:	08 95       	ret

00003b14 <__fp_zero>:
    3b14:	e8 94       	clt

00003b16 <__fp_szero>:
    3b16:	bb 27       	eor	r27, r27
    3b18:	66 27       	eor	r22, r22
    3b1a:	77 27       	eor	r23, r23
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	97 f9       	bld	r25, 7
    3b20:	08 95       	ret

00003b22 <__gesf2>:
    3b22:	2c df       	rcall	.-424    	; 0x397c <__fp_cmp>
    3b24:	08 f4       	brcc	.+2      	; 0x3b28 <__gesf2+0x6>
    3b26:	8f ef       	ldi	r24, 0xFF	; 255
    3b28:	08 95       	ret

00003b2a <inverse>:
    3b2a:	9b 01       	movw	r18, r22
    3b2c:	ac 01       	movw	r20, r24
    3b2e:	60 e0       	ldi	r22, 0x00	; 0
    3b30:	70 e0       	ldi	r23, 0x00	; 0
    3b32:	80 e8       	ldi	r24, 0x80	; 128
    3b34:	9f e3       	ldi	r25, 0x3F	; 63
    3b36:	00 ce       	rjmp	.-1024   	; 0x3738 <__divsf3>
    3b38:	45 cf       	rjmp	.-374    	; 0x39c4 <__fp_inf>
    3b3a:	5a c1       	rjmp	.+692    	; 0x3df0 <__fp_mpack>

00003b3c <ldexp>:
    3b3c:	d1 df       	rcall	.-94     	; 0x3ae0 <__fp_splitA>
    3b3e:	e8 f3       	brcs	.-6      	; 0x3b3a <inverse+0x10>
    3b40:	99 23       	and	r25, r25
    3b42:	d9 f3       	breq	.-10     	; 0x3b3a <inverse+0x10>
    3b44:	94 0f       	add	r25, r20
    3b46:	51 1d       	adc	r21, r1
    3b48:	bb f3       	brvs	.-18     	; 0x3b38 <inverse+0xe>
    3b4a:	91 50       	subi	r25, 0x01	; 1
    3b4c:	50 40       	sbci	r21, 0x00	; 0
    3b4e:	94 f0       	brlt	.+36     	; 0x3b74 <ldexp+0x38>
    3b50:	59 f0       	breq	.+22     	; 0x3b68 <ldexp+0x2c>
    3b52:	88 23       	and	r24, r24
    3b54:	32 f0       	brmi	.+12     	; 0x3b62 <ldexp+0x26>
    3b56:	66 0f       	add	r22, r22
    3b58:	77 1f       	adc	r23, r23
    3b5a:	88 1f       	adc	r24, r24
    3b5c:	91 50       	subi	r25, 0x01	; 1
    3b5e:	50 40       	sbci	r21, 0x00	; 0
    3b60:	c1 f7       	brne	.-16     	; 0x3b52 <ldexp+0x16>
    3b62:	9e 3f       	cpi	r25, 0xFE	; 254
    3b64:	51 05       	cpc	r21, r1
    3b66:	44 f7       	brge	.-48     	; 0x3b38 <inverse+0xe>
    3b68:	88 0f       	add	r24, r24
    3b6a:	91 1d       	adc	r25, r1
    3b6c:	96 95       	lsr	r25
    3b6e:	87 95       	ror	r24
    3b70:	97 f9       	bld	r25, 7
    3b72:	08 95       	ret
    3b74:	5f 3f       	cpi	r21, 0xFF	; 255
    3b76:	ac f0       	brlt	.+42     	; 0x3ba2 <ldexp+0x66>
    3b78:	98 3e       	cpi	r25, 0xE8	; 232
    3b7a:	9c f0       	brlt	.+38     	; 0x3ba2 <ldexp+0x66>
    3b7c:	bb 27       	eor	r27, r27
    3b7e:	86 95       	lsr	r24
    3b80:	77 95       	ror	r23
    3b82:	67 95       	ror	r22
    3b84:	b7 95       	ror	r27
    3b86:	08 f4       	brcc	.+2      	; 0x3b8a <ldexp+0x4e>
    3b88:	b1 60       	ori	r27, 0x01	; 1
    3b8a:	93 95       	inc	r25
    3b8c:	c1 f7       	brne	.-16     	; 0x3b7e <ldexp+0x42>
    3b8e:	bb 0f       	add	r27, r27
    3b90:	58 f7       	brcc	.-42     	; 0x3b68 <ldexp+0x2c>
    3b92:	11 f4       	brne	.+4      	; 0x3b98 <ldexp+0x5c>
    3b94:	60 ff       	sbrs	r22, 0
    3b96:	e8 cf       	rjmp	.-48     	; 0x3b68 <ldexp+0x2c>
    3b98:	6f 5f       	subi	r22, 0xFF	; 255
    3b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba0:	e3 cf       	rjmp	.-58     	; 0x3b68 <ldexp+0x2c>
    3ba2:	b9 cf       	rjmp	.-142    	; 0x3b16 <__fp_szero>
    3ba4:	0e f0       	brts	.+2      	; 0x3ba8 <ldexp+0x6c>
    3ba6:	24 c1       	rjmp	.+584    	; 0x3df0 <__fp_mpack>
    3ba8:	13 cf       	rjmp	.-474    	; 0x39d0 <__fp_nan>
    3baa:	68 94       	set
    3bac:	0b cf       	rjmp	.-490    	; 0x39c4 <__fp_inf>

00003bae <log>:
    3bae:	98 df       	rcall	.-208    	; 0x3ae0 <__fp_splitA>
    3bb0:	c8 f3       	brcs	.-14     	; 0x3ba4 <ldexp+0x68>
    3bb2:	99 23       	and	r25, r25
    3bb4:	d1 f3       	breq	.-12     	; 0x3baa <ldexp+0x6e>
    3bb6:	c6 f3       	brts	.-16     	; 0x3ba8 <ldexp+0x6c>
    3bb8:	df 93       	push	r29
    3bba:	cf 93       	push	r28
    3bbc:	1f 93       	push	r17
    3bbe:	0f 93       	push	r16
    3bc0:	ff 92       	push	r15
    3bc2:	c9 2f       	mov	r28, r25
    3bc4:	dd 27       	eor	r29, r29
    3bc6:	88 23       	and	r24, r24
    3bc8:	2a f0       	brmi	.+10     	; 0x3bd4 <log+0x26>
    3bca:	21 97       	sbiw	r28, 0x01	; 1
    3bcc:	66 0f       	add	r22, r22
    3bce:	77 1f       	adc	r23, r23
    3bd0:	88 1f       	adc	r24, r24
    3bd2:	da f7       	brpl	.-10     	; 0x3bca <log+0x1c>
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	40 e8       	ldi	r20, 0x80	; 128
    3bda:	5f eb       	ldi	r21, 0xBF	; 191
    3bdc:	9f e3       	ldi	r25, 0x3F	; 63
    3bde:	88 39       	cpi	r24, 0x98	; 152
    3be0:	20 f0       	brcs	.+8      	; 0x3bea <log+0x3c>
    3be2:	80 3e       	cpi	r24, 0xE0	; 224
    3be4:	30 f0       	brcs	.+12     	; 0x3bf2 <log+0x44>
    3be6:	21 96       	adiw	r28, 0x01	; 1
    3be8:	8f 77       	andi	r24, 0x7F	; 127
    3bea:	13 dd       	rcall	.-1498   	; 0x3612 <__addsf3>
    3bec:	e3 e3       	ldi	r30, 0x33	; 51
    3bee:	f1 e0       	ldi	r31, 0x01	; 1
    3bf0:	03 c0       	rjmp	.+6      	; 0x3bf8 <log+0x4a>
    3bf2:	0f dd       	rcall	.-1506   	; 0x3612 <__addsf3>
    3bf4:	e0 e6       	ldi	r30, 0x60	; 96
    3bf6:	f1 e0       	ldi	r31, 0x01	; 1
    3bf8:	ee de       	rcall	.-548    	; 0x39d6 <__fp_powser>
    3bfa:	8b 01       	movw	r16, r22
    3bfc:	be 01       	movw	r22, r28
    3bfe:	ec 01       	movw	r28, r24
    3c00:	fb 2e       	mov	r15, r27
    3c02:	6f 57       	subi	r22, 0x7F	; 127
    3c04:	71 09       	sbc	r23, r1
    3c06:	75 95       	asr	r23
    3c08:	77 1f       	adc	r23, r23
    3c0a:	88 0b       	sbc	r24, r24
    3c0c:	99 0b       	sbc	r25, r25
    3c0e:	60 de       	rcall	.-832    	; 0x38d0 <__floatsisf>
    3c10:	28 e1       	ldi	r18, 0x18	; 24
    3c12:	32 e7       	ldi	r19, 0x72	; 114
    3c14:	41 e3       	ldi	r20, 0x31	; 49
    3c16:	5f e3       	ldi	r21, 0x3F	; 63
    3c18:	49 d0       	rcall	.+146    	; 0x3cac <__mulsf3x>
    3c1a:	af 2d       	mov	r26, r15
    3c1c:	98 01       	movw	r18, r16
    3c1e:	ae 01       	movw	r20, r28
    3c20:	ff 90       	pop	r15
    3c22:	0f 91       	pop	r16
    3c24:	1f 91       	pop	r17
    3c26:	cf 91       	pop	r28
    3c28:	df 91       	pop	r29
    3c2a:	04 dd       	rcall	.-1528   	; 0x3634 <__addsf3x>
    3c2c:	2f cf       	rjmp	.-418    	; 0x3a8c <__fp_round>

00003c2e <modf>:
    3c2e:	fa 01       	movw	r30, r20
    3c30:	dc 01       	movw	r26, r24
    3c32:	aa 0f       	add	r26, r26
    3c34:	bb 1f       	adc	r27, r27
    3c36:	9b 01       	movw	r18, r22
    3c38:	ac 01       	movw	r20, r24
    3c3a:	bf 57       	subi	r27, 0x7F	; 127
    3c3c:	28 f4       	brcc	.+10     	; 0x3c48 <modf+0x1a>
    3c3e:	22 27       	eor	r18, r18
    3c40:	33 27       	eor	r19, r19
    3c42:	44 27       	eor	r20, r20
    3c44:	50 78       	andi	r21, 0x80	; 128
    3c46:	1f c0       	rjmp	.+62     	; 0x3c86 <modf+0x58>
    3c48:	b7 51       	subi	r27, 0x17	; 23
    3c4a:	88 f4       	brcc	.+34     	; 0x3c6e <modf+0x40>
    3c4c:	ab 2f       	mov	r26, r27
    3c4e:	00 24       	eor	r0, r0
    3c50:	46 95       	lsr	r20
    3c52:	37 95       	ror	r19
    3c54:	27 95       	ror	r18
    3c56:	01 1c       	adc	r0, r1
    3c58:	a3 95       	inc	r26
    3c5a:	d2 f3       	brmi	.-12     	; 0x3c50 <modf+0x22>
    3c5c:	00 20       	and	r0, r0
    3c5e:	69 f0       	breq	.+26     	; 0x3c7a <modf+0x4c>
    3c60:	22 0f       	add	r18, r18
    3c62:	33 1f       	adc	r19, r19
    3c64:	44 1f       	adc	r20, r20
    3c66:	b3 95       	inc	r27
    3c68:	da f3       	brmi	.-10     	; 0x3c60 <modf+0x32>
    3c6a:	0d d0       	rcall	.+26     	; 0x3c86 <modf+0x58>
    3c6c:	d1 cc       	rjmp	.-1630   	; 0x3610 <__subsf3>
    3c6e:	61 30       	cpi	r22, 0x01	; 1
    3c70:	71 05       	cpc	r23, r1
    3c72:	a0 e8       	ldi	r26, 0x80	; 128
    3c74:	8a 07       	cpc	r24, r26
    3c76:	b9 46       	sbci	r27, 0x69	; 105
    3c78:	30 f4       	brcc	.+12     	; 0x3c86 <modf+0x58>
    3c7a:	9b 01       	movw	r18, r22
    3c7c:	ac 01       	movw	r20, r24
    3c7e:	66 27       	eor	r22, r22
    3c80:	77 27       	eor	r23, r23
    3c82:	88 27       	eor	r24, r24
    3c84:	90 78       	andi	r25, 0x80	; 128
    3c86:	30 96       	adiw	r30, 0x00	; 0
    3c88:	21 f0       	breq	.+8      	; 0x3c92 <modf+0x64>
    3c8a:	20 83       	st	Z, r18
    3c8c:	31 83       	std	Z+1, r19	; 0x01
    3c8e:	42 83       	std	Z+2, r20	; 0x02
    3c90:	53 83       	std	Z+3, r21	; 0x03
    3c92:	08 95       	ret

00003c94 <__mulsf3>:
    3c94:	0b d0       	rcall	.+22     	; 0x3cac <__mulsf3x>
    3c96:	fa ce       	rjmp	.-524    	; 0x3a8c <__fp_round>
    3c98:	c3 de       	rcall	.-634    	; 0x3a20 <__fp_pscA>
    3c9a:	28 f0       	brcs	.+10     	; 0x3ca6 <__mulsf3+0x12>
    3c9c:	c8 de       	rcall	.-624    	; 0x3a2e <__fp_pscB>
    3c9e:	18 f0       	brcs	.+6      	; 0x3ca6 <__mulsf3+0x12>
    3ca0:	95 23       	and	r25, r21
    3ca2:	09 f0       	breq	.+2      	; 0x3ca6 <__mulsf3+0x12>
    3ca4:	8f ce       	rjmp	.-738    	; 0x39c4 <__fp_inf>
    3ca6:	94 ce       	rjmp	.-728    	; 0x39d0 <__fp_nan>
    3ca8:	11 24       	eor	r1, r1
    3caa:	35 cf       	rjmp	.-406    	; 0x3b16 <__fp_szero>

00003cac <__mulsf3x>:
    3cac:	11 df       	rcall	.-478    	; 0x3ad0 <__fp_split3>
    3cae:	a0 f3       	brcs	.-24     	; 0x3c98 <__mulsf3+0x4>

00003cb0 <__mulsf3_pse>:
    3cb0:	95 9f       	mul	r25, r21
    3cb2:	d1 f3       	breq	.-12     	; 0x3ca8 <__mulsf3+0x14>
    3cb4:	95 0f       	add	r25, r21
    3cb6:	50 e0       	ldi	r21, 0x00	; 0
    3cb8:	55 1f       	adc	r21, r21
    3cba:	62 9f       	mul	r22, r18
    3cbc:	f0 01       	movw	r30, r0
    3cbe:	72 9f       	mul	r23, r18
    3cc0:	bb 27       	eor	r27, r27
    3cc2:	f0 0d       	add	r31, r0
    3cc4:	b1 1d       	adc	r27, r1
    3cc6:	63 9f       	mul	r22, r19
    3cc8:	aa 27       	eor	r26, r26
    3cca:	f0 0d       	add	r31, r0
    3ccc:	b1 1d       	adc	r27, r1
    3cce:	aa 1f       	adc	r26, r26
    3cd0:	64 9f       	mul	r22, r20
    3cd2:	66 27       	eor	r22, r22
    3cd4:	b0 0d       	add	r27, r0
    3cd6:	a1 1d       	adc	r26, r1
    3cd8:	66 1f       	adc	r22, r22
    3cda:	82 9f       	mul	r24, r18
    3cdc:	22 27       	eor	r18, r18
    3cde:	b0 0d       	add	r27, r0
    3ce0:	a1 1d       	adc	r26, r1
    3ce2:	62 1f       	adc	r22, r18
    3ce4:	73 9f       	mul	r23, r19
    3ce6:	b0 0d       	add	r27, r0
    3ce8:	a1 1d       	adc	r26, r1
    3cea:	62 1f       	adc	r22, r18
    3cec:	83 9f       	mul	r24, r19
    3cee:	a0 0d       	add	r26, r0
    3cf0:	61 1d       	adc	r22, r1
    3cf2:	22 1f       	adc	r18, r18
    3cf4:	74 9f       	mul	r23, r20
    3cf6:	33 27       	eor	r19, r19
    3cf8:	a0 0d       	add	r26, r0
    3cfa:	61 1d       	adc	r22, r1
    3cfc:	23 1f       	adc	r18, r19
    3cfe:	84 9f       	mul	r24, r20
    3d00:	60 0d       	add	r22, r0
    3d02:	21 1d       	adc	r18, r1
    3d04:	82 2f       	mov	r24, r18
    3d06:	76 2f       	mov	r23, r22
    3d08:	6a 2f       	mov	r22, r26
    3d0a:	11 24       	eor	r1, r1
    3d0c:	9f 57       	subi	r25, 0x7F	; 127
    3d0e:	50 40       	sbci	r21, 0x00	; 0
    3d10:	8a f0       	brmi	.+34     	; 0x3d34 <__mulsf3_pse+0x84>
    3d12:	e1 f0       	breq	.+56     	; 0x3d4c <__mulsf3_pse+0x9c>
    3d14:	88 23       	and	r24, r24
    3d16:	4a f0       	brmi	.+18     	; 0x3d2a <__mulsf3_pse+0x7a>
    3d18:	ee 0f       	add	r30, r30
    3d1a:	ff 1f       	adc	r31, r31
    3d1c:	bb 1f       	adc	r27, r27
    3d1e:	66 1f       	adc	r22, r22
    3d20:	77 1f       	adc	r23, r23
    3d22:	88 1f       	adc	r24, r24
    3d24:	91 50       	subi	r25, 0x01	; 1
    3d26:	50 40       	sbci	r21, 0x00	; 0
    3d28:	a9 f7       	brne	.-22     	; 0x3d14 <__mulsf3_pse+0x64>
    3d2a:	9e 3f       	cpi	r25, 0xFE	; 254
    3d2c:	51 05       	cpc	r21, r1
    3d2e:	70 f0       	brcs	.+28     	; 0x3d4c <__mulsf3_pse+0x9c>
    3d30:	49 ce       	rjmp	.-878    	; 0x39c4 <__fp_inf>
    3d32:	f1 ce       	rjmp	.-542    	; 0x3b16 <__fp_szero>
    3d34:	5f 3f       	cpi	r21, 0xFF	; 255
    3d36:	ec f3       	brlt	.-6      	; 0x3d32 <__mulsf3_pse+0x82>
    3d38:	98 3e       	cpi	r25, 0xE8	; 232
    3d3a:	dc f3       	brlt	.-10     	; 0x3d32 <__mulsf3_pse+0x82>
    3d3c:	86 95       	lsr	r24
    3d3e:	77 95       	ror	r23
    3d40:	67 95       	ror	r22
    3d42:	b7 95       	ror	r27
    3d44:	f7 95       	ror	r31
    3d46:	e7 95       	ror	r30
    3d48:	9f 5f       	subi	r25, 0xFF	; 255
    3d4a:	c1 f7       	brne	.-16     	; 0x3d3c <__mulsf3_pse+0x8c>
    3d4c:	fe 2b       	or	r31, r30
    3d4e:	88 0f       	add	r24, r24
    3d50:	91 1d       	adc	r25, r1
    3d52:	96 95       	lsr	r25
    3d54:	87 95       	ror	r24
    3d56:	97 f9       	bld	r25, 7
    3d58:	08 95       	ret

00003d5a <sin>:
    3d5a:	9f 93       	push	r25
    3d5c:	70 de       	rcall	.-800    	; 0x3a3e <__fp_rempio2>
    3d5e:	0f 90       	pop	r0
    3d60:	07 fc       	sbrc	r0, 7
    3d62:	ee 5f       	subi	r30, 0xFE	; 254
    3d64:	a4 ce       	rjmp	.-696    	; 0x3aae <__fp_sinus>
    3d66:	11 f4       	brne	.+4      	; 0x3d6c <sin+0x12>
    3d68:	0e f4       	brtc	.+2      	; 0x3d6c <sin+0x12>
    3d6a:	32 ce       	rjmp	.-924    	; 0x39d0 <__fp_nan>
    3d6c:	41 c0       	rjmp	.+130    	; 0x3df0 <__fp_mpack>

00003d6e <sqrt>:
    3d6e:	b8 de       	rcall	.-656    	; 0x3ae0 <__fp_splitA>
    3d70:	d0 f3       	brcs	.-12     	; 0x3d66 <sin+0xc>
    3d72:	99 23       	and	r25, r25
    3d74:	d9 f3       	breq	.-10     	; 0x3d6c <sin+0x12>
    3d76:	ce f3       	brts	.-14     	; 0x3d6a <sin+0x10>
    3d78:	9f 57       	subi	r25, 0x7F	; 127
    3d7a:	55 0b       	sbc	r21, r21
    3d7c:	87 ff       	sbrs	r24, 7
    3d7e:	46 d0       	rcall	.+140    	; 0x3e0c <__fp_norm2>
    3d80:	00 24       	eor	r0, r0
    3d82:	a0 e6       	ldi	r26, 0x60	; 96
    3d84:	40 ea       	ldi	r20, 0xA0	; 160
    3d86:	90 01       	movw	r18, r0
    3d88:	80 58       	subi	r24, 0x80	; 128
    3d8a:	56 95       	lsr	r21
    3d8c:	97 95       	ror	r25
    3d8e:	28 f4       	brcc	.+10     	; 0x3d9a <sqrt+0x2c>
    3d90:	80 5c       	subi	r24, 0xC0	; 192
    3d92:	66 0f       	add	r22, r22
    3d94:	77 1f       	adc	r23, r23
    3d96:	88 1f       	adc	r24, r24
    3d98:	20 f0       	brcs	.+8      	; 0x3da2 <sqrt+0x34>
    3d9a:	26 17       	cp	r18, r22
    3d9c:	37 07       	cpc	r19, r23
    3d9e:	48 07       	cpc	r20, r24
    3da0:	30 f4       	brcc	.+12     	; 0x3dae <sqrt+0x40>
    3da2:	62 1b       	sub	r22, r18
    3da4:	73 0b       	sbc	r23, r19
    3da6:	84 0b       	sbc	r24, r20
    3da8:	20 29       	or	r18, r0
    3daa:	31 29       	or	r19, r1
    3dac:	4a 2b       	or	r20, r26
    3dae:	a6 95       	lsr	r26
    3db0:	17 94       	ror	r1
    3db2:	07 94       	ror	r0
    3db4:	20 25       	eor	r18, r0
    3db6:	31 25       	eor	r19, r1
    3db8:	4a 27       	eor	r20, r26
    3dba:	58 f7       	brcc	.-42     	; 0x3d92 <sqrt+0x24>
    3dbc:	66 0f       	add	r22, r22
    3dbe:	77 1f       	adc	r23, r23
    3dc0:	88 1f       	adc	r24, r24
    3dc2:	20 f0       	brcs	.+8      	; 0x3dcc <sqrt+0x5e>
    3dc4:	26 17       	cp	r18, r22
    3dc6:	37 07       	cpc	r19, r23
    3dc8:	48 07       	cpc	r20, r24
    3dca:	30 f4       	brcc	.+12     	; 0x3dd8 <sqrt+0x6a>
    3dcc:	62 0b       	sbc	r22, r18
    3dce:	73 0b       	sbc	r23, r19
    3dd0:	84 0b       	sbc	r24, r20
    3dd2:	20 0d       	add	r18, r0
    3dd4:	31 1d       	adc	r19, r1
    3dd6:	41 1d       	adc	r20, r1
    3dd8:	a0 95       	com	r26
    3dda:	81 f7       	brne	.-32     	; 0x3dbc <sqrt+0x4e>
    3ddc:	b9 01       	movw	r22, r18
    3dde:	84 2f       	mov	r24, r20
    3de0:	91 58       	subi	r25, 0x81	; 129
    3de2:	88 0f       	add	r24, r24
    3de4:	96 95       	lsr	r25
    3de6:	87 95       	ror	r24
    3de8:	08 95       	ret

00003dea <square>:
    3dea:	9b 01       	movw	r18, r22
    3dec:	ac 01       	movw	r20, r24
    3dee:	52 cf       	rjmp	.-348    	; 0x3c94 <__mulsf3>

00003df0 <__fp_mpack>:
    3df0:	9f 3f       	cpi	r25, 0xFF	; 255
    3df2:	31 f0       	breq	.+12     	; 0x3e00 <__fp_mpack_finite+0xc>

00003df4 <__fp_mpack_finite>:
    3df4:	91 50       	subi	r25, 0x01	; 1
    3df6:	20 f4       	brcc	.+8      	; 0x3e00 <__fp_mpack_finite+0xc>
    3df8:	87 95       	ror	r24
    3dfa:	77 95       	ror	r23
    3dfc:	67 95       	ror	r22
    3dfe:	b7 95       	ror	r27
    3e00:	88 0f       	add	r24, r24
    3e02:	91 1d       	adc	r25, r1
    3e04:	96 95       	lsr	r25
    3e06:	87 95       	ror	r24
    3e08:	97 f9       	bld	r25, 7
    3e0a:	08 95       	ret

00003e0c <__fp_norm2>:
    3e0c:	91 50       	subi	r25, 0x01	; 1
    3e0e:	50 40       	sbci	r21, 0x00	; 0
    3e10:	66 0f       	add	r22, r22
    3e12:	77 1f       	adc	r23, r23
    3e14:	88 1f       	adc	r24, r24
    3e16:	d2 f7       	brpl	.-12     	; 0x3e0c <__fp_norm2>
    3e18:	08 95       	ret

00003e1a <__fp_powsodd>:
    3e1a:	9f 93       	push	r25
    3e1c:	8f 93       	push	r24
    3e1e:	7f 93       	push	r23
    3e20:	6f 93       	push	r22
    3e22:	ff 93       	push	r31
    3e24:	ef 93       	push	r30
    3e26:	9b 01       	movw	r18, r22
    3e28:	ac 01       	movw	r20, r24
    3e2a:	34 df       	rcall	.-408    	; 0x3c94 <__mulsf3>
    3e2c:	ef 91       	pop	r30
    3e2e:	ff 91       	pop	r31
    3e30:	d2 dd       	rcall	.-1116   	; 0x39d6 <__fp_powser>
    3e32:	2f 91       	pop	r18
    3e34:	3f 91       	pop	r19
    3e36:	4f 91       	pop	r20
    3e38:	5f 91       	pop	r21
    3e3a:	2c cf       	rjmp	.-424    	; 0x3c94 <__mulsf3>

00003e3c <__divmodhi4>:
    3e3c:	97 fb       	bst	r25, 7
    3e3e:	07 2e       	mov	r0, r23
    3e40:	16 f4       	brtc	.+4      	; 0x3e46 <__divmodhi4+0xa>
    3e42:	00 94       	com	r0
    3e44:	07 d0       	rcall	.+14     	; 0x3e54 <__divmodhi4_neg1>
    3e46:	77 fd       	sbrc	r23, 7
    3e48:	09 d0       	rcall	.+18     	; 0x3e5c <__divmodhi4_neg2>
    3e4a:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__udivmodhi4>
    3e4e:	07 fc       	sbrc	r0, 7
    3e50:	05 d0       	rcall	.+10     	; 0x3e5c <__divmodhi4_neg2>
    3e52:	3e f4       	brtc	.+14     	; 0x3e62 <__divmodhi4_exit>

00003e54 <__divmodhi4_neg1>:
    3e54:	90 95       	com	r25
    3e56:	81 95       	neg	r24
    3e58:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5a:	08 95       	ret

00003e5c <__divmodhi4_neg2>:
    3e5c:	70 95       	com	r23
    3e5e:	61 95       	neg	r22
    3e60:	7f 4f       	sbci	r23, 0xFF	; 255

00003e62 <__divmodhi4_exit>:
    3e62:	08 95       	ret

00003e64 <__tablejump2__>:
    3e64:	ee 0f       	add	r30, r30
    3e66:	ff 1f       	adc	r31, r31

00003e68 <__tablejump__>:
    3e68:	05 90       	lpm	r0, Z+
    3e6a:	f4 91       	lpm	r31, Z
    3e6c:	e0 2d       	mov	r30, r0
    3e6e:	09 94       	ijmp

00003e70 <__udivmodhi4>:
    3e70:	aa 1b       	sub	r26, r26
    3e72:	bb 1b       	sub	r27, r27
    3e74:	51 e1       	ldi	r21, 0x11	; 17
    3e76:	07 c0       	rjmp	.+14     	; 0x3e86 <__udivmodhi4_ep>

00003e78 <__udivmodhi4_loop>:
    3e78:	aa 1f       	adc	r26, r26
    3e7a:	bb 1f       	adc	r27, r27
    3e7c:	a6 17       	cp	r26, r22
    3e7e:	b7 07       	cpc	r27, r23
    3e80:	10 f0       	brcs	.+4      	; 0x3e86 <__udivmodhi4_ep>
    3e82:	a6 1b       	sub	r26, r22
    3e84:	b7 0b       	sbc	r27, r23

00003e86 <__udivmodhi4_ep>:
    3e86:	88 1f       	adc	r24, r24
    3e88:	99 1f       	adc	r25, r25
    3e8a:	5a 95       	dec	r21
    3e8c:	a9 f7       	brne	.-22     	; 0x3e78 <__udivmodhi4_loop>
    3e8e:	80 95       	com	r24
    3e90:	90 95       	com	r25
    3e92:	bc 01       	movw	r22, r24
    3e94:	cd 01       	movw	r24, r26
    3e96:	08 95       	ret

00003e98 <malloc>:
    3e98:	cf 93       	push	r28
    3e9a:	df 93       	push	r29
    3e9c:	82 30       	cpi	r24, 0x02	; 2
    3e9e:	91 05       	cpc	r25, r1
    3ea0:	10 f4       	brcc	.+4      	; 0x3ea6 <malloc+0xe>
    3ea2:	82 e0       	ldi	r24, 0x02	; 2
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	e0 91 0c 01 	lds	r30, 0x010C
    3eaa:	f0 91 0d 01 	lds	r31, 0x010D
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	a0 e0       	ldi	r26, 0x00	; 0
    3eb4:	b0 e0       	ldi	r27, 0x00	; 0
    3eb6:	30 97       	sbiw	r30, 0x00	; 0
    3eb8:	39 f1       	breq	.+78     	; 0x3f08 <malloc+0x70>
    3eba:	40 81       	ld	r20, Z
    3ebc:	51 81       	ldd	r21, Z+1	; 0x01
    3ebe:	48 17       	cp	r20, r24
    3ec0:	59 07       	cpc	r21, r25
    3ec2:	b8 f0       	brcs	.+46     	; 0x3ef2 <malloc+0x5a>
    3ec4:	48 17       	cp	r20, r24
    3ec6:	59 07       	cpc	r21, r25
    3ec8:	71 f4       	brne	.+28     	; 0x3ee6 <malloc+0x4e>
    3eca:	82 81       	ldd	r24, Z+2	; 0x02
    3ecc:	93 81       	ldd	r25, Z+3	; 0x03
    3ece:	10 97       	sbiw	r26, 0x00	; 0
    3ed0:	29 f0       	breq	.+10     	; 0x3edc <malloc+0x44>
    3ed2:	13 96       	adiw	r26, 0x03	; 3
    3ed4:	9c 93       	st	X, r25
    3ed6:	8e 93       	st	-X, r24
    3ed8:	12 97       	sbiw	r26, 0x02	; 2
    3eda:	2c c0       	rjmp	.+88     	; 0x3f34 <malloc+0x9c>
    3edc:	90 93 0d 01 	sts	0x010D, r25
    3ee0:	80 93 0c 01 	sts	0x010C, r24
    3ee4:	27 c0       	rjmp	.+78     	; 0x3f34 <malloc+0x9c>
    3ee6:	21 15       	cp	r18, r1
    3ee8:	31 05       	cpc	r19, r1
    3eea:	31 f0       	breq	.+12     	; 0x3ef8 <malloc+0x60>
    3eec:	42 17       	cp	r20, r18
    3eee:	53 07       	cpc	r21, r19
    3ef0:	18 f0       	brcs	.+6      	; 0x3ef8 <malloc+0x60>
    3ef2:	a9 01       	movw	r20, r18
    3ef4:	db 01       	movw	r26, r22
    3ef6:	01 c0       	rjmp	.+2      	; 0x3efa <malloc+0x62>
    3ef8:	ef 01       	movw	r28, r30
    3efa:	9a 01       	movw	r18, r20
    3efc:	bd 01       	movw	r22, r26
    3efe:	df 01       	movw	r26, r30
    3f00:	02 80       	ldd	r0, Z+2	; 0x02
    3f02:	f3 81       	ldd	r31, Z+3	; 0x03
    3f04:	e0 2d       	mov	r30, r0
    3f06:	d7 cf       	rjmp	.-82     	; 0x3eb6 <malloc+0x1e>
    3f08:	21 15       	cp	r18, r1
    3f0a:	31 05       	cpc	r19, r1
    3f0c:	f9 f0       	breq	.+62     	; 0x3f4c <malloc+0xb4>
    3f0e:	28 1b       	sub	r18, r24
    3f10:	39 0b       	sbc	r19, r25
    3f12:	24 30       	cpi	r18, 0x04	; 4
    3f14:	31 05       	cpc	r19, r1
    3f16:	80 f4       	brcc	.+32     	; 0x3f38 <malloc+0xa0>
    3f18:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f1c:	61 15       	cp	r22, r1
    3f1e:	71 05       	cpc	r23, r1
    3f20:	21 f0       	breq	.+8      	; 0x3f2a <malloc+0x92>
    3f22:	fb 01       	movw	r30, r22
    3f24:	93 83       	std	Z+3, r25	; 0x03
    3f26:	82 83       	std	Z+2, r24	; 0x02
    3f28:	04 c0       	rjmp	.+8      	; 0x3f32 <malloc+0x9a>
    3f2a:	90 93 0d 01 	sts	0x010D, r25
    3f2e:	80 93 0c 01 	sts	0x010C, r24
    3f32:	fe 01       	movw	r30, r28
    3f34:	32 96       	adiw	r30, 0x02	; 2
    3f36:	44 c0       	rjmp	.+136    	; 0x3fc0 <malloc+0x128>
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e2 0f       	add	r30, r18
    3f3c:	f3 1f       	adc	r31, r19
    3f3e:	81 93       	st	Z+, r24
    3f40:	91 93       	st	Z+, r25
    3f42:	22 50       	subi	r18, 0x02	; 2
    3f44:	31 09       	sbc	r19, r1
    3f46:	39 83       	std	Y+1, r19	; 0x01
    3f48:	28 83       	st	Y, r18
    3f4a:	3a c0       	rjmp	.+116    	; 0x3fc0 <malloc+0x128>
    3f4c:	20 91 0a 01 	lds	r18, 0x010A
    3f50:	30 91 0b 01 	lds	r19, 0x010B
    3f54:	23 2b       	or	r18, r19
    3f56:	41 f4       	brne	.+16     	; 0x3f68 <malloc+0xd0>
    3f58:	20 91 62 00 	lds	r18, 0x0062
    3f5c:	30 91 63 00 	lds	r19, 0x0063
    3f60:	30 93 0b 01 	sts	0x010B, r19
    3f64:	20 93 0a 01 	sts	0x010A, r18
    3f68:	20 91 60 00 	lds	r18, 0x0060
    3f6c:	30 91 61 00 	lds	r19, 0x0061
    3f70:	21 15       	cp	r18, r1
    3f72:	31 05       	cpc	r19, r1
    3f74:	41 f4       	brne	.+16     	; 0x3f86 <malloc+0xee>
    3f76:	2d b7       	in	r18, 0x3d	; 61
    3f78:	3e b7       	in	r19, 0x3e	; 62
    3f7a:	40 91 64 00 	lds	r20, 0x0064
    3f7e:	50 91 65 00 	lds	r21, 0x0065
    3f82:	24 1b       	sub	r18, r20
    3f84:	35 0b       	sbc	r19, r21
    3f86:	e0 91 0a 01 	lds	r30, 0x010A
    3f8a:	f0 91 0b 01 	lds	r31, 0x010B
    3f8e:	e2 17       	cp	r30, r18
    3f90:	f3 07       	cpc	r31, r19
    3f92:	a0 f4       	brcc	.+40     	; 0x3fbc <malloc+0x124>
    3f94:	2e 1b       	sub	r18, r30
    3f96:	3f 0b       	sbc	r19, r31
    3f98:	28 17       	cp	r18, r24
    3f9a:	39 07       	cpc	r19, r25
    3f9c:	78 f0       	brcs	.+30     	; 0x3fbc <malloc+0x124>
    3f9e:	ac 01       	movw	r20, r24
    3fa0:	4e 5f       	subi	r20, 0xFE	; 254
    3fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    3fa4:	24 17       	cp	r18, r20
    3fa6:	35 07       	cpc	r19, r21
    3fa8:	48 f0       	brcs	.+18     	; 0x3fbc <malloc+0x124>
    3faa:	4e 0f       	add	r20, r30
    3fac:	5f 1f       	adc	r21, r31
    3fae:	50 93 0b 01 	sts	0x010B, r21
    3fb2:	40 93 0a 01 	sts	0x010A, r20
    3fb6:	81 93       	st	Z+, r24
    3fb8:	91 93       	st	Z+, r25
    3fba:	02 c0       	rjmp	.+4      	; 0x3fc0 <malloc+0x128>
    3fbc:	e0 e0       	ldi	r30, 0x00	; 0
    3fbe:	f0 e0       	ldi	r31, 0x00	; 0
    3fc0:	cf 01       	movw	r24, r30
    3fc2:	df 91       	pop	r29
    3fc4:	cf 91       	pop	r28
    3fc6:	08 95       	ret

00003fc8 <free>:
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	09 f4       	brne	.+2      	; 0x3fd2 <free+0xa>
    3fd0:	87 c0       	rjmp	.+270    	; 0x40e0 <free+0x118>
    3fd2:	fc 01       	movw	r30, r24
    3fd4:	32 97       	sbiw	r30, 0x02	; 2
    3fd6:	13 82       	std	Z+3, r1	; 0x03
    3fd8:	12 82       	std	Z+2, r1	; 0x02
    3fda:	c0 91 0c 01 	lds	r28, 0x010C
    3fde:	d0 91 0d 01 	lds	r29, 0x010D
    3fe2:	20 97       	sbiw	r28, 0x00	; 0
    3fe4:	81 f4       	brne	.+32     	; 0x4006 <free+0x3e>
    3fe6:	20 81       	ld	r18, Z
    3fe8:	31 81       	ldd	r19, Z+1	; 0x01
    3fea:	28 0f       	add	r18, r24
    3fec:	39 1f       	adc	r19, r25
    3fee:	80 91 0a 01 	lds	r24, 0x010A
    3ff2:	90 91 0b 01 	lds	r25, 0x010B
    3ff6:	82 17       	cp	r24, r18
    3ff8:	93 07       	cpc	r25, r19
    3ffa:	79 f5       	brne	.+94     	; 0x405a <free+0x92>
    3ffc:	f0 93 0b 01 	sts	0x010B, r31
    4000:	e0 93 0a 01 	sts	0x010A, r30
    4004:	6d c0       	rjmp	.+218    	; 0x40e0 <free+0x118>
    4006:	de 01       	movw	r26, r28
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	ae 17       	cp	r26, r30
    400e:	bf 07       	cpc	r27, r31
    4010:	50 f4       	brcc	.+20     	; 0x4026 <free+0x5e>
    4012:	12 96       	adiw	r26, 0x02	; 2
    4014:	4d 91       	ld	r20, X+
    4016:	5c 91       	ld	r21, X
    4018:	13 97       	sbiw	r26, 0x03	; 3
    401a:	9d 01       	movw	r18, r26
    401c:	41 15       	cp	r20, r1
    401e:	51 05       	cpc	r21, r1
    4020:	09 f1       	breq	.+66     	; 0x4064 <free+0x9c>
    4022:	da 01       	movw	r26, r20
    4024:	f3 cf       	rjmp	.-26     	; 0x400c <free+0x44>
    4026:	b3 83       	std	Z+3, r27	; 0x03
    4028:	a2 83       	std	Z+2, r26	; 0x02
    402a:	40 81       	ld	r20, Z
    402c:	51 81       	ldd	r21, Z+1	; 0x01
    402e:	84 0f       	add	r24, r20
    4030:	95 1f       	adc	r25, r21
    4032:	8a 17       	cp	r24, r26
    4034:	9b 07       	cpc	r25, r27
    4036:	71 f4       	brne	.+28     	; 0x4054 <free+0x8c>
    4038:	8d 91       	ld	r24, X+
    403a:	9c 91       	ld	r25, X
    403c:	11 97       	sbiw	r26, 0x01	; 1
    403e:	84 0f       	add	r24, r20
    4040:	95 1f       	adc	r25, r21
    4042:	02 96       	adiw	r24, 0x02	; 2
    4044:	91 83       	std	Z+1, r25	; 0x01
    4046:	80 83       	st	Z, r24
    4048:	12 96       	adiw	r26, 0x02	; 2
    404a:	8d 91       	ld	r24, X+
    404c:	9c 91       	ld	r25, X
    404e:	13 97       	sbiw	r26, 0x03	; 3
    4050:	93 83       	std	Z+3, r25	; 0x03
    4052:	82 83       	std	Z+2, r24	; 0x02
    4054:	21 15       	cp	r18, r1
    4056:	31 05       	cpc	r19, r1
    4058:	29 f4       	brne	.+10     	; 0x4064 <free+0x9c>
    405a:	f0 93 0d 01 	sts	0x010D, r31
    405e:	e0 93 0c 01 	sts	0x010C, r30
    4062:	3e c0       	rjmp	.+124    	; 0x40e0 <free+0x118>
    4064:	d9 01       	movw	r26, r18
    4066:	13 96       	adiw	r26, 0x03	; 3
    4068:	fc 93       	st	X, r31
    406a:	ee 93       	st	-X, r30
    406c:	12 97       	sbiw	r26, 0x02	; 2
    406e:	4d 91       	ld	r20, X+
    4070:	5d 91       	ld	r21, X+
    4072:	a4 0f       	add	r26, r20
    4074:	b5 1f       	adc	r27, r21
    4076:	ea 17       	cp	r30, r26
    4078:	fb 07       	cpc	r31, r27
    407a:	79 f4       	brne	.+30     	; 0x409a <free+0xd2>
    407c:	80 81       	ld	r24, Z
    407e:	91 81       	ldd	r25, Z+1	; 0x01
    4080:	84 0f       	add	r24, r20
    4082:	95 1f       	adc	r25, r21
    4084:	02 96       	adiw	r24, 0x02	; 2
    4086:	d9 01       	movw	r26, r18
    4088:	11 96       	adiw	r26, 0x01	; 1
    408a:	9c 93       	st	X, r25
    408c:	8e 93       	st	-X, r24
    408e:	82 81       	ldd	r24, Z+2	; 0x02
    4090:	93 81       	ldd	r25, Z+3	; 0x03
    4092:	13 96       	adiw	r26, 0x03	; 3
    4094:	9c 93       	st	X, r25
    4096:	8e 93       	st	-X, r24
    4098:	12 97       	sbiw	r26, 0x02	; 2
    409a:	e0 e0       	ldi	r30, 0x00	; 0
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	8a 81       	ldd	r24, Y+2	; 0x02
    40a0:	9b 81       	ldd	r25, Y+3	; 0x03
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	19 f0       	breq	.+6      	; 0x40ac <free+0xe4>
    40a6:	fe 01       	movw	r30, r28
    40a8:	ec 01       	movw	r28, r24
    40aa:	f9 cf       	rjmp	.-14     	; 0x409e <free+0xd6>
    40ac:	ce 01       	movw	r24, r28
    40ae:	02 96       	adiw	r24, 0x02	; 2
    40b0:	28 81       	ld	r18, Y
    40b2:	39 81       	ldd	r19, Y+1	; 0x01
    40b4:	82 0f       	add	r24, r18
    40b6:	93 1f       	adc	r25, r19
    40b8:	20 91 0a 01 	lds	r18, 0x010A
    40bc:	30 91 0b 01 	lds	r19, 0x010B
    40c0:	28 17       	cp	r18, r24
    40c2:	39 07       	cpc	r19, r25
    40c4:	69 f4       	brne	.+26     	; 0x40e0 <free+0x118>
    40c6:	30 97       	sbiw	r30, 0x00	; 0
    40c8:	29 f4       	brne	.+10     	; 0x40d4 <free+0x10c>
    40ca:	10 92 0d 01 	sts	0x010D, r1
    40ce:	10 92 0c 01 	sts	0x010C, r1
    40d2:	02 c0       	rjmp	.+4      	; 0x40d8 <free+0x110>
    40d4:	13 82       	std	Z+3, r1	; 0x03
    40d6:	12 82       	std	Z+2, r1	; 0x02
    40d8:	d0 93 0b 01 	sts	0x010B, r29
    40dc:	c0 93 0a 01 	sts	0x010A, r28
    40e0:	df 91       	pop	r29
    40e2:	cf 91       	pop	r28
    40e4:	08 95       	ret

000040e6 <do_rand>:
    40e6:	8f 92       	push	r8
    40e8:	9f 92       	push	r9
    40ea:	af 92       	push	r10
    40ec:	bf 92       	push	r11
    40ee:	cf 92       	push	r12
    40f0:	df 92       	push	r13
    40f2:	ef 92       	push	r14
    40f4:	ff 92       	push	r15
    40f6:	cf 93       	push	r28
    40f8:	df 93       	push	r29
    40fa:	ec 01       	movw	r28, r24
    40fc:	68 81       	ld	r22, Y
    40fe:	79 81       	ldd	r23, Y+1	; 0x01
    4100:	8a 81       	ldd	r24, Y+2	; 0x02
    4102:	9b 81       	ldd	r25, Y+3	; 0x03
    4104:	61 15       	cp	r22, r1
    4106:	71 05       	cpc	r23, r1
    4108:	81 05       	cpc	r24, r1
    410a:	91 05       	cpc	r25, r1
    410c:	21 f4       	brne	.+8      	; 0x4116 <do_rand+0x30>
    410e:	64 e2       	ldi	r22, 0x24	; 36
    4110:	79 ed       	ldi	r23, 0xD9	; 217
    4112:	8b e5       	ldi	r24, 0x5B	; 91
    4114:	97 e0       	ldi	r25, 0x07	; 7
    4116:	2d e1       	ldi	r18, 0x1D	; 29
    4118:	33 ef       	ldi	r19, 0xF3	; 243
    411a:	41 e0       	ldi	r20, 0x01	; 1
    411c:	50 e0       	ldi	r21, 0x00	; 0
    411e:	0e 94 04 25 	call	0x4a08	; 0x4a08 <__divmodsi4>
    4122:	49 01       	movw	r8, r18
    4124:	5a 01       	movw	r10, r20
    4126:	9b 01       	movw	r18, r22
    4128:	ac 01       	movw	r20, r24
    412a:	a7 ea       	ldi	r26, 0xA7	; 167
    412c:	b1 e4       	ldi	r27, 0x41	; 65
    412e:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__muluhisi3>
    4132:	6b 01       	movw	r12, r22
    4134:	7c 01       	movw	r14, r24
    4136:	ac ee       	ldi	r26, 0xEC	; 236
    4138:	b4 ef       	ldi	r27, 0xF4	; 244
    413a:	a5 01       	movw	r20, r10
    413c:	94 01       	movw	r18, r8
    413e:	0e 94 31 25 	call	0x4a62	; 0x4a62 <__mulohisi3>
    4142:	c6 0e       	add	r12, r22
    4144:	d7 1e       	adc	r13, r23
    4146:	e8 1e       	adc	r14, r24
    4148:	f9 1e       	adc	r15, r25
    414a:	f7 fe       	sbrs	r15, 7
    414c:	06 c0       	rjmp	.+12     	; 0x415a <do_rand+0x74>
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	c8 1a       	sub	r12, r24
    4152:	d1 08       	sbc	r13, r1
    4154:	e1 08       	sbc	r14, r1
    4156:	80 e8       	ldi	r24, 0x80	; 128
    4158:	f8 0a       	sbc	r15, r24
    415a:	c8 82       	st	Y, r12
    415c:	d9 82       	std	Y+1, r13	; 0x01
    415e:	ea 82       	std	Y+2, r14	; 0x02
    4160:	fb 82       	std	Y+3, r15	; 0x03
    4162:	c6 01       	movw	r24, r12
    4164:	9f 77       	andi	r25, 0x7F	; 127
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	ff 90       	pop	r15
    416c:	ef 90       	pop	r14
    416e:	df 90       	pop	r13
    4170:	cf 90       	pop	r12
    4172:	bf 90       	pop	r11
    4174:	af 90       	pop	r10
    4176:	9f 90       	pop	r9
    4178:	8f 90       	pop	r8
    417a:	08 95       	ret

0000417c <rand_r>:
    417c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <do_rand>
    4180:	08 95       	ret

00004182 <rand>:
    4182:	86 e6       	ldi	r24, 0x66	; 102
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	0e 94 73 20 	call	0x40e6	; 0x40e6 <do_rand>
    418a:	08 95       	ret

0000418c <srand>:
    418c:	a0 e0       	ldi	r26, 0x00	; 0
    418e:	b0 e0       	ldi	r27, 0x00	; 0
    4190:	80 93 66 00 	sts	0x0066, r24
    4194:	90 93 67 00 	sts	0x0067, r25
    4198:	a0 93 68 00 	sts	0x0068, r26
    419c:	b0 93 69 00 	sts	0x0069, r27
    41a0:	08 95       	ret

000041a2 <strtol>:
    41a2:	2f 92       	push	r2
    41a4:	3f 92       	push	r3
    41a6:	5f 92       	push	r5
    41a8:	6f 92       	push	r6
    41aa:	7f 92       	push	r7
    41ac:	8f 92       	push	r8
    41ae:	9f 92       	push	r9
    41b0:	af 92       	push	r10
    41b2:	bf 92       	push	r11
    41b4:	cf 92       	push	r12
    41b6:	df 92       	push	r13
    41b8:	ef 92       	push	r14
    41ba:	ff 92       	push	r15
    41bc:	0f 93       	push	r16
    41be:	1f 93       	push	r17
    41c0:	cf 93       	push	r28
    41c2:	df 93       	push	r29
    41c4:	8b 01       	movw	r16, r22
    41c6:	ea 01       	movw	r28, r20
    41c8:	61 15       	cp	r22, r1
    41ca:	71 05       	cpc	r23, r1
    41cc:	21 f0       	breq	.+8      	; 0x41d6 <strtol+0x34>
    41ce:	db 01       	movw	r26, r22
    41d0:	8c 93       	st	X, r24
    41d2:	11 96       	adiw	r26, 0x01	; 1
    41d4:	9c 93       	st	X, r25
    41d6:	20 97       	sbiw	r28, 0x00	; 0
    41d8:	39 f0       	breq	.+14     	; 0x41e8 <strtol+0x46>
    41da:	9e 01       	movw	r18, r28
    41dc:	22 50       	subi	r18, 0x02	; 2
    41de:	31 09       	sbc	r19, r1
    41e0:	23 32       	cpi	r18, 0x23	; 35
    41e2:	31 05       	cpc	r19, r1
    41e4:	08 f0       	brcs	.+2      	; 0x41e8 <strtol+0x46>
    41e6:	fb c0       	rjmp	.+502    	; 0x43de <strtol+0x23c>
    41e8:	7c 01       	movw	r14, r24
    41ea:	67 01       	movw	r12, r14
    41ec:	bf ef       	ldi	r27, 0xFF	; 255
    41ee:	cb 1a       	sub	r12, r27
    41f0:	db 0a       	sbc	r13, r27
    41f2:	56 01       	movw	r10, r12
    41f4:	f7 01       	movw	r30, r14
    41f6:	60 80       	ld	r6, Z
    41f8:	86 2d       	mov	r24, r6
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	0e 94 05 22 	call	0x440a	; 0x440a <isspace>
    4200:	89 2b       	or	r24, r25
    4202:	11 f0       	breq	.+4      	; 0x4208 <strtol+0x66>
    4204:	76 01       	movw	r14, r12
    4206:	f1 cf       	rjmp	.-30     	; 0x41ea <strtol+0x48>
    4208:	fd e2       	ldi	r31, 0x2D	; 45
    420a:	6f 12       	cpse	r6, r31
    420c:	0a c0       	rjmp	.+20     	; 0x4222 <strtol+0x80>
    420e:	57 01       	movw	r10, r14
    4210:	82 e0       	ldi	r24, 0x02	; 2
    4212:	a8 0e       	add	r10, r24
    4214:	b1 1c       	adc	r11, r1
    4216:	d7 01       	movw	r26, r14
    4218:	11 96       	adiw	r26, 0x01	; 1
    421a:	6c 90       	ld	r6, X
    421c:	77 24       	eor	r7, r7
    421e:	73 94       	inc	r7
    4220:	0b c0       	rjmp	.+22     	; 0x4238 <strtol+0x96>
    4222:	bb e2       	ldi	r27, 0x2B	; 43
    4224:	6b 12       	cpse	r6, r27
    4226:	07 c0       	rjmp	.+14     	; 0x4236 <strtol+0x94>
    4228:	57 01       	movw	r10, r14
    422a:	e2 e0       	ldi	r30, 0x02	; 2
    422c:	ae 0e       	add	r10, r30
    422e:	b1 1c       	adc	r11, r1
    4230:	d7 01       	movw	r26, r14
    4232:	11 96       	adiw	r26, 0x01	; 1
    4234:	6c 90       	ld	r6, X
    4236:	71 2c       	mov	r7, r1
    4238:	ce 01       	movw	r24, r28
    423a:	8f 7e       	andi	r24, 0xEF	; 239
    423c:	89 2b       	or	r24, r25
    423e:	89 f4       	brne	.+34     	; 0x4262 <strtol+0xc0>
    4240:	b0 e3       	ldi	r27, 0x30	; 48
    4242:	6b 12       	cpse	r6, r27
    4244:	22 c0       	rjmp	.+68     	; 0x428a <strtol+0xe8>
    4246:	f5 01       	movw	r30, r10
    4248:	80 81       	ld	r24, Z
    424a:	8f 7d       	andi	r24, 0xDF	; 223
    424c:	88 35       	cpi	r24, 0x58	; 88
    424e:	41 f5       	brne	.+80     	; 0x42a0 <strtol+0xfe>
    4250:	61 80       	ldd	r6, Z+1	; 0x01
    4252:	f2 e0       	ldi	r31, 0x02	; 2
    4254:	af 0e       	add	r10, r31
    4256:	b1 1c       	adc	r11, r1
    4258:	87 2d       	mov	r24, r7
    425a:	82 60       	ori	r24, 0x02	; 2
    425c:	78 2e       	mov	r7, r24
    425e:	c0 e1       	ldi	r28, 0x10	; 16
    4260:	d0 e0       	ldi	r29, 0x00	; 0
    4262:	c8 30       	cpi	r28, 0x08	; 8
    4264:	d1 05       	cpc	r29, r1
    4266:	f1 f0       	breq	.+60     	; 0x42a4 <strtol+0x102>
    4268:	4c f4       	brge	.+18     	; 0x427c <strtol+0xda>
    426a:	c2 30       	cpi	r28, 0x02	; 2
    426c:	d1 05       	cpc	r29, r1
    426e:	11 f5       	brne	.+68     	; 0x42b4 <strtol+0x112>
    4270:	c1 2c       	mov	r12, r1
    4272:	d1 2c       	mov	r13, r1
    4274:	e1 2c       	mov	r14, r1
    4276:	b0 e4       	ldi	r27, 0x40	; 64
    4278:	fb 2e       	mov	r15, r27
    427a:	2f c0       	rjmp	.+94     	; 0x42da <strtol+0x138>
    427c:	ca 30       	cpi	r28, 0x0A	; 10
    427e:	d1 05       	cpc	r29, r1
    4280:	31 f0       	breq	.+12     	; 0x428e <strtol+0xec>
    4282:	c0 31       	cpi	r28, 0x10	; 16
    4284:	d1 05       	cpc	r29, r1
    4286:	21 f1       	breq	.+72     	; 0x42d0 <strtol+0x12e>
    4288:	15 c0       	rjmp	.+42     	; 0x42b4 <strtol+0x112>
    428a:	20 97       	sbiw	r28, 0x00	; 0
    428c:	51 f7       	brne	.-44     	; 0x4262 <strtol+0xc0>
    428e:	ca e0       	ldi	r28, 0x0A	; 10
    4290:	d0 e0       	ldi	r29, 0x00	; 0
    4292:	ac ec       	ldi	r26, 0xCC	; 204
    4294:	ca 2e       	mov	r12, r26
    4296:	dc 2c       	mov	r13, r12
    4298:	ec 2c       	mov	r14, r12
    429a:	ac e0       	ldi	r26, 0x0C	; 12
    429c:	fa 2e       	mov	r15, r26
    429e:	1d c0       	rjmp	.+58     	; 0x42da <strtol+0x138>
    42a0:	20 97       	sbiw	r28, 0x00	; 0
    42a2:	f9 f6       	brne	.-66     	; 0x4262 <strtol+0xc0>
    42a4:	c8 e0       	ldi	r28, 0x08	; 8
    42a6:	d0 e0       	ldi	r29, 0x00	; 0
    42a8:	c1 2c       	mov	r12, r1
    42aa:	d1 2c       	mov	r13, r1
    42ac:	e1 2c       	mov	r14, r1
    42ae:	f0 e1       	ldi	r31, 0x10	; 16
    42b0:	ff 2e       	mov	r15, r31
    42b2:	13 c0       	rjmp	.+38     	; 0x42da <strtol+0x138>
    42b4:	60 e0       	ldi	r22, 0x00	; 0
    42b6:	70 e0       	ldi	r23, 0x00	; 0
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	90 e8       	ldi	r25, 0x80	; 128
    42bc:	9e 01       	movw	r18, r28
    42be:	44 27       	eor	r20, r20
    42c0:	37 fd       	sbrc	r19, 7
    42c2:	40 95       	com	r20
    42c4:	54 2f       	mov	r21, r20
    42c6:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodsi4>
    42ca:	69 01       	movw	r12, r18
    42cc:	7a 01       	movw	r14, r20
    42ce:	05 c0       	rjmp	.+10     	; 0x42da <strtol+0x138>
    42d0:	c1 2c       	mov	r12, r1
    42d2:	d1 2c       	mov	r13, r1
    42d4:	e1 2c       	mov	r14, r1
    42d6:	e8 e0       	ldi	r30, 0x08	; 8
    42d8:	fe 2e       	mov	r15, r30
    42da:	f5 01       	movw	r30, r10
    42dc:	60 e0       	ldi	r22, 0x00	; 0
    42de:	20 e0       	ldi	r18, 0x00	; 0
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	a9 01       	movw	r20, r18
    42e4:	4e 01       	movw	r8, r28
    42e6:	aa 24       	eor	r10, r10
    42e8:	97 fc       	sbrc	r9, 7
    42ea:	a0 94       	com	r10
    42ec:	ba 2c       	mov	r11, r10
    42ee:	1f 01       	movw	r2, r30
    42f0:	70 ed       	ldi	r23, 0xD0	; 208
    42f2:	57 2e       	mov	r5, r23
    42f4:	56 0c       	add	r5, r6
    42f6:	a9 e0       	ldi	r26, 0x09	; 9
    42f8:	a5 15       	cp	r26, r5
    42fa:	70 f4       	brcc	.+28     	; 0x4318 <strtol+0x176>
    42fc:	8f eb       	ldi	r24, 0xBF	; 191
    42fe:	86 0d       	add	r24, r6
    4300:	8a 31       	cpi	r24, 0x1A	; 26
    4302:	18 f4       	brcc	.+6      	; 0x430a <strtol+0x168>
    4304:	99 ec       	ldi	r25, 0xC9	; 201
    4306:	59 2e       	mov	r5, r25
    4308:	06 c0       	rjmp	.+12     	; 0x4316 <strtol+0x174>
    430a:	8f e9       	ldi	r24, 0x9F	; 159
    430c:	86 0d       	add	r24, r6
    430e:	8a 31       	cpi	r24, 0x1A	; 26
    4310:	30 f5       	brcc	.+76     	; 0x435e <strtol+0x1bc>
    4312:	89 ea       	ldi	r24, 0xA9	; 169
    4314:	58 2e       	mov	r5, r24
    4316:	56 0c       	add	r5, r6
    4318:	85 2d       	mov	r24, r5
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	8c 17       	cp	r24, r28
    431e:	9d 07       	cpc	r25, r29
    4320:	f4 f4       	brge	.+60     	; 0x435e <strtol+0x1bc>
    4322:	67 fd       	sbrc	r22, 7
    4324:	18 c0       	rjmp	.+48     	; 0x4356 <strtol+0x1b4>
    4326:	c2 16       	cp	r12, r18
    4328:	d3 06       	cpc	r13, r19
    432a:	e4 06       	cpc	r14, r20
    432c:	f5 06       	cpc	r15, r21
    432e:	80 f0       	brcs	.+32     	; 0x4350 <strtol+0x1ae>
    4330:	c5 01       	movw	r24, r10
    4332:	b4 01       	movw	r22, r8
    4334:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__mulsi3>
    4338:	9b 01       	movw	r18, r22
    433a:	ac 01       	movw	r20, r24
    433c:	25 0d       	add	r18, r5
    433e:	31 1d       	adc	r19, r1
    4340:	41 1d       	adc	r20, r1
    4342:	51 1d       	adc	r21, r1
    4344:	21 30       	cpi	r18, 0x01	; 1
    4346:	31 05       	cpc	r19, r1
    4348:	41 05       	cpc	r20, r1
    434a:	b0 e8       	ldi	r27, 0x80	; 128
    434c:	5b 07       	cpc	r21, r27
    434e:	10 f0       	brcs	.+4      	; 0x4354 <strtol+0x1b2>
    4350:	6f ef       	ldi	r22, 0xFF	; 255
    4352:	01 c0       	rjmp	.+2      	; 0x4356 <strtol+0x1b4>
    4354:	61 e0       	ldi	r22, 0x01	; 1
    4356:	31 96       	adiw	r30, 0x01	; 1
    4358:	d1 01       	movw	r26, r2
    435a:	6c 90       	ld	r6, X
    435c:	c8 cf       	rjmp	.-112    	; 0x42ee <strtol+0x14c>
    435e:	87 2d       	mov	r24, r7
    4360:	81 70       	andi	r24, 0x01	; 1
    4362:	01 15       	cp	r16, r1
    4364:	11 05       	cpc	r17, r1
    4366:	71 f0       	breq	.+28     	; 0x4384 <strtol+0x1e2>
    4368:	66 23       	and	r22, r22
    436a:	29 f0       	breq	.+10     	; 0x4376 <strtol+0x1d4>
    436c:	31 97       	sbiw	r30, 0x01	; 1
    436e:	d8 01       	movw	r26, r16
    4370:	ed 93       	st	X+, r30
    4372:	fc 93       	st	X, r31
    4374:	07 c0       	rjmp	.+14     	; 0x4384 <strtol+0x1e2>
    4376:	71 fe       	sbrs	r7, 1
    4378:	19 c0       	rjmp	.+50     	; 0x43ac <strtol+0x20a>
    437a:	32 97       	sbiw	r30, 0x02	; 2
    437c:	d8 01       	movw	r26, r16
    437e:	ed 93       	st	X+, r30
    4380:	fc 93       	st	X, r31
    4382:	14 c0       	rjmp	.+40     	; 0x43ac <strtol+0x20a>
    4384:	67 ff       	sbrs	r22, 7
    4386:	12 c0       	rjmp	.+36     	; 0x43ac <strtol+0x20a>
    4388:	88 23       	and	r24, r24
    438a:	29 f0       	breq	.+10     	; 0x4396 <strtol+0x1f4>
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	40 e0       	ldi	r20, 0x00	; 0
    4392:	50 e8       	ldi	r21, 0x80	; 128
    4394:	04 c0       	rjmp	.+8      	; 0x439e <strtol+0x1fc>
    4396:	2f ef       	ldi	r18, 0xFF	; 255
    4398:	3f ef       	ldi	r19, 0xFF	; 255
    439a:	4f ef       	ldi	r20, 0xFF	; 255
    439c:	5f e7       	ldi	r21, 0x7F	; 127
    439e:	82 e2       	ldi	r24, 0x22	; 34
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	90 93 0f 01 	sts	0x010F, r25
    43a6:	80 93 0e 01 	sts	0x010E, r24
    43aa:	16 c0       	rjmp	.+44     	; 0x43d8 <strtol+0x236>
    43ac:	88 23       	and	r24, r24
    43ae:	41 f0       	breq	.+16     	; 0x43c0 <strtol+0x21e>
    43b0:	50 95       	com	r21
    43b2:	40 95       	com	r20
    43b4:	30 95       	com	r19
    43b6:	21 95       	neg	r18
    43b8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ba:	4f 4f       	sbci	r20, 0xFF	; 255
    43bc:	5f 4f       	sbci	r21, 0xFF	; 255
    43be:	0c c0       	rjmp	.+24     	; 0x43d8 <strtol+0x236>
    43c0:	57 ff       	sbrs	r21, 7
    43c2:	0a c0       	rjmp	.+20     	; 0x43d8 <strtol+0x236>
    43c4:	82 e2       	ldi	r24, 0x22	; 34
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	90 93 0f 01 	sts	0x010F, r25
    43cc:	80 93 0e 01 	sts	0x010E, r24
    43d0:	2f ef       	ldi	r18, 0xFF	; 255
    43d2:	3f ef       	ldi	r19, 0xFF	; 255
    43d4:	4f ef       	ldi	r20, 0xFF	; 255
    43d6:	5f e7       	ldi	r21, 0x7F	; 127
    43d8:	b9 01       	movw	r22, r18
    43da:	ca 01       	movw	r24, r20
    43dc:	04 c0       	rjmp	.+8      	; 0x43e6 <strtol+0x244>
    43de:	60 e0       	ldi	r22, 0x00	; 0
    43e0:	70 e0       	ldi	r23, 0x00	; 0
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	1f 91       	pop	r17
    43ec:	0f 91       	pop	r16
    43ee:	ff 90       	pop	r15
    43f0:	ef 90       	pop	r14
    43f2:	df 90       	pop	r13
    43f4:	cf 90       	pop	r12
    43f6:	bf 90       	pop	r11
    43f8:	af 90       	pop	r10
    43fa:	9f 90       	pop	r9
    43fc:	8f 90       	pop	r8
    43fe:	7f 90       	pop	r7
    4400:	6f 90       	pop	r6
    4402:	5f 90       	pop	r5
    4404:	3f 90       	pop	r3
    4406:	2f 90       	pop	r2
    4408:	08 95       	ret

0000440a <isspace>:
    440a:	91 11       	cpse	r25, r1
    440c:	05 c2       	rjmp	.+1034   	; 0x4818 <__ctype_isfalse>
    440e:	80 32       	cpi	r24, 0x20	; 32
    4410:	19 f0       	breq	.+6      	; 0x4418 <isspace+0xe>
    4412:	89 50       	subi	r24, 0x09	; 9
    4414:	85 50       	subi	r24, 0x05	; 5
    4416:	d0 f7       	brcc	.-12     	; 0x440c <isspace+0x2>
    4418:	08 95       	ret

0000441a <sprintf>:
    441a:	ae e0       	ldi	r26, 0x0E	; 14
    441c:	b0 e0       	ldi	r27, 0x00	; 0
    441e:	e3 e1       	ldi	r30, 0x13	; 19
    4420:	f2 e2       	ldi	r31, 0x22	; 34
    4422:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__prologue_saves__+0x1c>
    4426:	0d 89       	ldd	r16, Y+21	; 0x15
    4428:	1e 89       	ldd	r17, Y+22	; 0x16
    442a:	86 e0       	ldi	r24, 0x06	; 6
    442c:	8c 83       	std	Y+4, r24	; 0x04
    442e:	1a 83       	std	Y+2, r17	; 0x02
    4430:	09 83       	std	Y+1, r16	; 0x01
    4432:	8f ef       	ldi	r24, 0xFF	; 255
    4434:	9f e7       	ldi	r25, 0x7F	; 127
    4436:	9e 83       	std	Y+6, r25	; 0x06
    4438:	8d 83       	std	Y+5, r24	; 0x05
    443a:	ae 01       	movw	r20, r28
    443c:	47 5e       	subi	r20, 0xE7	; 231
    443e:	5f 4f       	sbci	r21, 0xFF	; 255
    4440:	6f 89       	ldd	r22, Y+23	; 0x17
    4442:	78 8d       	ldd	r23, Y+24	; 0x18
    4444:	ce 01       	movw	r24, r28
    4446:	01 96       	adiw	r24, 0x01	; 1
    4448:	0e 94 2f 22 	call	0x445e	; 0x445e <vfprintf>
    444c:	ef 81       	ldd	r30, Y+7	; 0x07
    444e:	f8 85       	ldd	r31, Y+8	; 0x08
    4450:	e0 0f       	add	r30, r16
    4452:	f1 1f       	adc	r31, r17
    4454:	10 82       	st	Z, r1
    4456:	2e 96       	adiw	r28, 0x0e	; 14
    4458:	e4 e0       	ldi	r30, 0x04	; 4
    445a:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x1c>

0000445e <vfprintf>:
    445e:	ac e0       	ldi	r26, 0x0C	; 12
    4460:	b0 e0       	ldi	r27, 0x00	; 0
    4462:	e5 e3       	ldi	r30, 0x35	; 53
    4464:	f2 e2       	ldi	r31, 0x22	; 34
    4466:	0c 94 36 25 	jmp	0x4a6c	; 0x4a6c <__prologue_saves__>
    446a:	7c 01       	movw	r14, r24
    446c:	6b 01       	movw	r12, r22
    446e:	8a 01       	movw	r16, r20
    4470:	fc 01       	movw	r30, r24
    4472:	17 82       	std	Z+7, r1	; 0x07
    4474:	16 82       	std	Z+6, r1	; 0x06
    4476:	83 81       	ldd	r24, Z+3	; 0x03
    4478:	81 ff       	sbrs	r24, 1
    447a:	bd c1       	rjmp	.+890    	; 0x47f6 <vfprintf+0x398>
    447c:	ce 01       	movw	r24, r28
    447e:	01 96       	adiw	r24, 0x01	; 1
    4480:	4c 01       	movw	r8, r24
    4482:	f7 01       	movw	r30, r14
    4484:	93 81       	ldd	r25, Z+3	; 0x03
    4486:	f6 01       	movw	r30, r12
    4488:	93 fd       	sbrc	r25, 3
    448a:	85 91       	lpm	r24, Z+
    448c:	93 ff       	sbrs	r25, 3
    448e:	81 91       	ld	r24, Z+
    4490:	6f 01       	movw	r12, r30
    4492:	88 23       	and	r24, r24
    4494:	09 f4       	brne	.+2      	; 0x4498 <vfprintf+0x3a>
    4496:	ab c1       	rjmp	.+854    	; 0x47ee <vfprintf+0x390>
    4498:	85 32       	cpi	r24, 0x25	; 37
    449a:	39 f4       	brne	.+14     	; 0x44aa <vfprintf+0x4c>
    449c:	93 fd       	sbrc	r25, 3
    449e:	85 91       	lpm	r24, Z+
    44a0:	93 ff       	sbrs	r25, 3
    44a2:	81 91       	ld	r24, Z+
    44a4:	6f 01       	movw	r12, r30
    44a6:	85 32       	cpi	r24, 0x25	; 37
    44a8:	29 f4       	brne	.+10     	; 0x44b4 <vfprintf+0x56>
    44aa:	b7 01       	movw	r22, r14
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	0e 94 25 24 	call	0x484a	; 0x484a <fputc>
    44b2:	e7 cf       	rjmp	.-50     	; 0x4482 <vfprintf+0x24>
    44b4:	51 2c       	mov	r5, r1
    44b6:	31 2c       	mov	r3, r1
    44b8:	20 e0       	ldi	r18, 0x00	; 0
    44ba:	20 32       	cpi	r18, 0x20	; 32
    44bc:	a0 f4       	brcc	.+40     	; 0x44e6 <vfprintf+0x88>
    44be:	8b 32       	cpi	r24, 0x2B	; 43
    44c0:	69 f0       	breq	.+26     	; 0x44dc <vfprintf+0x7e>
    44c2:	30 f4       	brcc	.+12     	; 0x44d0 <vfprintf+0x72>
    44c4:	80 32       	cpi	r24, 0x20	; 32
    44c6:	59 f0       	breq	.+22     	; 0x44de <vfprintf+0x80>
    44c8:	83 32       	cpi	r24, 0x23	; 35
    44ca:	69 f4       	brne	.+26     	; 0x44e6 <vfprintf+0x88>
    44cc:	20 61       	ori	r18, 0x10	; 16
    44ce:	2c c0       	rjmp	.+88     	; 0x4528 <vfprintf+0xca>
    44d0:	8d 32       	cpi	r24, 0x2D	; 45
    44d2:	39 f0       	breq	.+14     	; 0x44e2 <vfprintf+0x84>
    44d4:	80 33       	cpi	r24, 0x30	; 48
    44d6:	39 f4       	brne	.+14     	; 0x44e6 <vfprintf+0x88>
    44d8:	21 60       	ori	r18, 0x01	; 1
    44da:	26 c0       	rjmp	.+76     	; 0x4528 <vfprintf+0xca>
    44dc:	22 60       	ori	r18, 0x02	; 2
    44de:	24 60       	ori	r18, 0x04	; 4
    44e0:	23 c0       	rjmp	.+70     	; 0x4528 <vfprintf+0xca>
    44e2:	28 60       	ori	r18, 0x08	; 8
    44e4:	21 c0       	rjmp	.+66     	; 0x4528 <vfprintf+0xca>
    44e6:	27 fd       	sbrc	r18, 7
    44e8:	27 c0       	rjmp	.+78     	; 0x4538 <vfprintf+0xda>
    44ea:	30 ed       	ldi	r19, 0xD0	; 208
    44ec:	38 0f       	add	r19, r24
    44ee:	3a 30       	cpi	r19, 0x0A	; 10
    44f0:	78 f4       	brcc	.+30     	; 0x4510 <vfprintf+0xb2>
    44f2:	26 ff       	sbrs	r18, 6
    44f4:	06 c0       	rjmp	.+12     	; 0x4502 <vfprintf+0xa4>
    44f6:	fa e0       	ldi	r31, 0x0A	; 10
    44f8:	5f 9e       	mul	r5, r31
    44fa:	30 0d       	add	r19, r0
    44fc:	11 24       	eor	r1, r1
    44fe:	53 2e       	mov	r5, r19
    4500:	13 c0       	rjmp	.+38     	; 0x4528 <vfprintf+0xca>
    4502:	8a e0       	ldi	r24, 0x0A	; 10
    4504:	38 9e       	mul	r3, r24
    4506:	30 0d       	add	r19, r0
    4508:	11 24       	eor	r1, r1
    450a:	33 2e       	mov	r3, r19
    450c:	20 62       	ori	r18, 0x20	; 32
    450e:	0c c0       	rjmp	.+24     	; 0x4528 <vfprintf+0xca>
    4510:	8e 32       	cpi	r24, 0x2E	; 46
    4512:	21 f4       	brne	.+8      	; 0x451c <vfprintf+0xbe>
    4514:	26 fd       	sbrc	r18, 6
    4516:	6b c1       	rjmp	.+726    	; 0x47ee <vfprintf+0x390>
    4518:	20 64       	ori	r18, 0x40	; 64
    451a:	06 c0       	rjmp	.+12     	; 0x4528 <vfprintf+0xca>
    451c:	8c 36       	cpi	r24, 0x6C	; 108
    451e:	11 f4       	brne	.+4      	; 0x4524 <vfprintf+0xc6>
    4520:	20 68       	ori	r18, 0x80	; 128
    4522:	02 c0       	rjmp	.+4      	; 0x4528 <vfprintf+0xca>
    4524:	88 36       	cpi	r24, 0x68	; 104
    4526:	41 f4       	brne	.+16     	; 0x4538 <vfprintf+0xda>
    4528:	f6 01       	movw	r30, r12
    452a:	93 fd       	sbrc	r25, 3
    452c:	85 91       	lpm	r24, Z+
    452e:	93 ff       	sbrs	r25, 3
    4530:	81 91       	ld	r24, Z+
    4532:	6f 01       	movw	r12, r30
    4534:	81 11       	cpse	r24, r1
    4536:	c1 cf       	rjmp	.-126    	; 0x44ba <vfprintf+0x5c>
    4538:	98 2f       	mov	r25, r24
    453a:	9f 7d       	andi	r25, 0xDF	; 223
    453c:	95 54       	subi	r25, 0x45	; 69
    453e:	93 30       	cpi	r25, 0x03	; 3
    4540:	28 f4       	brcc	.+10     	; 0x454c <vfprintf+0xee>
    4542:	0c 5f       	subi	r16, 0xFC	; 252
    4544:	1f 4f       	sbci	r17, 0xFF	; 255
    4546:	ff e3       	ldi	r31, 0x3F	; 63
    4548:	f9 83       	std	Y+1, r31	; 0x01
    454a:	0d c0       	rjmp	.+26     	; 0x4566 <vfprintf+0x108>
    454c:	83 36       	cpi	r24, 0x63	; 99
    454e:	31 f0       	breq	.+12     	; 0x455c <vfprintf+0xfe>
    4550:	83 37       	cpi	r24, 0x73	; 115
    4552:	71 f0       	breq	.+28     	; 0x4570 <vfprintf+0x112>
    4554:	83 35       	cpi	r24, 0x53	; 83
    4556:	09 f0       	breq	.+2      	; 0x455a <vfprintf+0xfc>
    4558:	5b c0       	rjmp	.+182    	; 0x4610 <vfprintf+0x1b2>
    455a:	22 c0       	rjmp	.+68     	; 0x45a0 <vfprintf+0x142>
    455c:	f8 01       	movw	r30, r16
    455e:	80 81       	ld	r24, Z
    4560:	89 83       	std	Y+1, r24	; 0x01
    4562:	0e 5f       	subi	r16, 0xFE	; 254
    4564:	1f 4f       	sbci	r17, 0xFF	; 255
    4566:	44 24       	eor	r4, r4
    4568:	43 94       	inc	r4
    456a:	51 2c       	mov	r5, r1
    456c:	54 01       	movw	r10, r8
    456e:	15 c0       	rjmp	.+42     	; 0x459a <vfprintf+0x13c>
    4570:	38 01       	movw	r6, r16
    4572:	f2 e0       	ldi	r31, 0x02	; 2
    4574:	6f 0e       	add	r6, r31
    4576:	71 1c       	adc	r7, r1
    4578:	f8 01       	movw	r30, r16
    457a:	a0 80       	ld	r10, Z
    457c:	b1 80       	ldd	r11, Z+1	; 0x01
    457e:	26 ff       	sbrs	r18, 6
    4580:	03 c0       	rjmp	.+6      	; 0x4588 <vfprintf+0x12a>
    4582:	65 2d       	mov	r22, r5
    4584:	70 e0       	ldi	r23, 0x00	; 0
    4586:	02 c0       	rjmp	.+4      	; 0x458c <vfprintf+0x12e>
    4588:	6f ef       	ldi	r22, 0xFF	; 255
    458a:	7f ef       	ldi	r23, 0xFF	; 255
    458c:	c5 01       	movw	r24, r10
    458e:	2c 87       	std	Y+12, r18	; 0x0c
    4590:	0e 94 1a 24 	call	0x4834	; 0x4834 <strnlen>
    4594:	2c 01       	movw	r4, r24
    4596:	83 01       	movw	r16, r6
    4598:	2c 85       	ldd	r18, Y+12	; 0x0c
    459a:	2f 77       	andi	r18, 0x7F	; 127
    459c:	22 2e       	mov	r2, r18
    459e:	17 c0       	rjmp	.+46     	; 0x45ce <vfprintf+0x170>
    45a0:	38 01       	movw	r6, r16
    45a2:	f2 e0       	ldi	r31, 0x02	; 2
    45a4:	6f 0e       	add	r6, r31
    45a6:	71 1c       	adc	r7, r1
    45a8:	f8 01       	movw	r30, r16
    45aa:	a0 80       	ld	r10, Z
    45ac:	b1 80       	ldd	r11, Z+1	; 0x01
    45ae:	26 ff       	sbrs	r18, 6
    45b0:	03 c0       	rjmp	.+6      	; 0x45b8 <vfprintf+0x15a>
    45b2:	65 2d       	mov	r22, r5
    45b4:	70 e0       	ldi	r23, 0x00	; 0
    45b6:	02 c0       	rjmp	.+4      	; 0x45bc <vfprintf+0x15e>
    45b8:	6f ef       	ldi	r22, 0xFF	; 255
    45ba:	7f ef       	ldi	r23, 0xFF	; 255
    45bc:	c5 01       	movw	r24, r10
    45be:	2c 87       	std	Y+12, r18	; 0x0c
    45c0:	0e 94 0f 24 	call	0x481e	; 0x481e <strnlen_P>
    45c4:	2c 01       	movw	r4, r24
    45c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    45c8:	20 68       	ori	r18, 0x80	; 128
    45ca:	22 2e       	mov	r2, r18
    45cc:	83 01       	movw	r16, r6
    45ce:	23 fc       	sbrc	r2, 3
    45d0:	1b c0       	rjmp	.+54     	; 0x4608 <vfprintf+0x1aa>
    45d2:	83 2d       	mov	r24, r3
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	48 16       	cp	r4, r24
    45d8:	59 06       	cpc	r5, r25
    45da:	b0 f4       	brcc	.+44     	; 0x4608 <vfprintf+0x1aa>
    45dc:	b7 01       	movw	r22, r14
    45de:	80 e2       	ldi	r24, 0x20	; 32
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	0e 94 25 24 	call	0x484a	; 0x484a <fputc>
    45e6:	3a 94       	dec	r3
    45e8:	f4 cf       	rjmp	.-24     	; 0x45d2 <vfprintf+0x174>
    45ea:	f5 01       	movw	r30, r10
    45ec:	27 fc       	sbrc	r2, 7
    45ee:	85 91       	lpm	r24, Z+
    45f0:	27 fe       	sbrs	r2, 7
    45f2:	81 91       	ld	r24, Z+
    45f4:	5f 01       	movw	r10, r30
    45f6:	b7 01       	movw	r22, r14
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	0e 94 25 24 	call	0x484a	; 0x484a <fputc>
    45fe:	31 10       	cpse	r3, r1
    4600:	3a 94       	dec	r3
    4602:	f1 e0       	ldi	r31, 0x01	; 1
    4604:	4f 1a       	sub	r4, r31
    4606:	51 08       	sbc	r5, r1
    4608:	41 14       	cp	r4, r1
    460a:	51 04       	cpc	r5, r1
    460c:	71 f7       	brne	.-36     	; 0x45ea <vfprintf+0x18c>
    460e:	e5 c0       	rjmp	.+458    	; 0x47da <vfprintf+0x37c>
    4610:	84 36       	cpi	r24, 0x64	; 100
    4612:	11 f0       	breq	.+4      	; 0x4618 <vfprintf+0x1ba>
    4614:	89 36       	cpi	r24, 0x69	; 105
    4616:	39 f5       	brne	.+78     	; 0x4666 <vfprintf+0x208>
    4618:	f8 01       	movw	r30, r16
    461a:	27 ff       	sbrs	r18, 7
    461c:	07 c0       	rjmp	.+14     	; 0x462c <vfprintf+0x1ce>
    461e:	60 81       	ld	r22, Z
    4620:	71 81       	ldd	r23, Z+1	; 0x01
    4622:	82 81       	ldd	r24, Z+2	; 0x02
    4624:	93 81       	ldd	r25, Z+3	; 0x03
    4626:	0c 5f       	subi	r16, 0xFC	; 252
    4628:	1f 4f       	sbci	r17, 0xFF	; 255
    462a:	08 c0       	rjmp	.+16     	; 0x463c <vfprintf+0x1de>
    462c:	60 81       	ld	r22, Z
    462e:	71 81       	ldd	r23, Z+1	; 0x01
    4630:	88 27       	eor	r24, r24
    4632:	77 fd       	sbrc	r23, 7
    4634:	80 95       	com	r24
    4636:	98 2f       	mov	r25, r24
    4638:	0e 5f       	subi	r16, 0xFE	; 254
    463a:	1f 4f       	sbci	r17, 0xFF	; 255
    463c:	2f 76       	andi	r18, 0x6F	; 111
    463e:	b2 2e       	mov	r11, r18
    4640:	97 ff       	sbrs	r25, 7
    4642:	09 c0       	rjmp	.+18     	; 0x4656 <vfprintf+0x1f8>
    4644:	90 95       	com	r25
    4646:	80 95       	com	r24
    4648:	70 95       	com	r23
    464a:	61 95       	neg	r22
    464c:	7f 4f       	sbci	r23, 0xFF	; 255
    464e:	8f 4f       	sbci	r24, 0xFF	; 255
    4650:	9f 4f       	sbci	r25, 0xFF	; 255
    4652:	20 68       	ori	r18, 0x80	; 128
    4654:	b2 2e       	mov	r11, r18
    4656:	2a e0       	ldi	r18, 0x0A	; 10
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	a4 01       	movw	r20, r8
    465c:	0e 94 57 24 	call	0x48ae	; 0x48ae <__ultoa_invert>
    4660:	a8 2e       	mov	r10, r24
    4662:	a8 18       	sub	r10, r8
    4664:	44 c0       	rjmp	.+136    	; 0x46ee <vfprintf+0x290>
    4666:	85 37       	cpi	r24, 0x75	; 117
    4668:	29 f4       	brne	.+10     	; 0x4674 <vfprintf+0x216>
    466a:	2f 7e       	andi	r18, 0xEF	; 239
    466c:	b2 2e       	mov	r11, r18
    466e:	2a e0       	ldi	r18, 0x0A	; 10
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	25 c0       	rjmp	.+74     	; 0x46be <vfprintf+0x260>
    4674:	f2 2f       	mov	r31, r18
    4676:	f9 7f       	andi	r31, 0xF9	; 249
    4678:	bf 2e       	mov	r11, r31
    467a:	8f 36       	cpi	r24, 0x6F	; 111
    467c:	c1 f0       	breq	.+48     	; 0x46ae <vfprintf+0x250>
    467e:	18 f4       	brcc	.+6      	; 0x4686 <vfprintf+0x228>
    4680:	88 35       	cpi	r24, 0x58	; 88
    4682:	79 f0       	breq	.+30     	; 0x46a2 <vfprintf+0x244>
    4684:	b4 c0       	rjmp	.+360    	; 0x47ee <vfprintf+0x390>
    4686:	80 37       	cpi	r24, 0x70	; 112
    4688:	19 f0       	breq	.+6      	; 0x4690 <vfprintf+0x232>
    468a:	88 37       	cpi	r24, 0x78	; 120
    468c:	21 f0       	breq	.+8      	; 0x4696 <vfprintf+0x238>
    468e:	af c0       	rjmp	.+350    	; 0x47ee <vfprintf+0x390>
    4690:	2f 2f       	mov	r18, r31
    4692:	20 61       	ori	r18, 0x10	; 16
    4694:	b2 2e       	mov	r11, r18
    4696:	b4 fe       	sbrs	r11, 4
    4698:	0d c0       	rjmp	.+26     	; 0x46b4 <vfprintf+0x256>
    469a:	8b 2d       	mov	r24, r11
    469c:	84 60       	ori	r24, 0x04	; 4
    469e:	b8 2e       	mov	r11, r24
    46a0:	09 c0       	rjmp	.+18     	; 0x46b4 <vfprintf+0x256>
    46a2:	24 ff       	sbrs	r18, 4
    46a4:	0a c0       	rjmp	.+20     	; 0x46ba <vfprintf+0x25c>
    46a6:	9f 2f       	mov	r25, r31
    46a8:	96 60       	ori	r25, 0x06	; 6
    46aa:	b9 2e       	mov	r11, r25
    46ac:	06 c0       	rjmp	.+12     	; 0x46ba <vfprintf+0x25c>
    46ae:	28 e0       	ldi	r18, 0x08	; 8
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	05 c0       	rjmp	.+10     	; 0x46be <vfprintf+0x260>
    46b4:	20 e1       	ldi	r18, 0x10	; 16
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	02 c0       	rjmp	.+4      	; 0x46be <vfprintf+0x260>
    46ba:	20 e1       	ldi	r18, 0x10	; 16
    46bc:	32 e0       	ldi	r19, 0x02	; 2
    46be:	f8 01       	movw	r30, r16
    46c0:	b7 fe       	sbrs	r11, 7
    46c2:	07 c0       	rjmp	.+14     	; 0x46d2 <vfprintf+0x274>
    46c4:	60 81       	ld	r22, Z
    46c6:	71 81       	ldd	r23, Z+1	; 0x01
    46c8:	82 81       	ldd	r24, Z+2	; 0x02
    46ca:	93 81       	ldd	r25, Z+3	; 0x03
    46cc:	0c 5f       	subi	r16, 0xFC	; 252
    46ce:	1f 4f       	sbci	r17, 0xFF	; 255
    46d0:	06 c0       	rjmp	.+12     	; 0x46de <vfprintf+0x280>
    46d2:	60 81       	ld	r22, Z
    46d4:	71 81       	ldd	r23, Z+1	; 0x01
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	0e 5f       	subi	r16, 0xFE	; 254
    46dc:	1f 4f       	sbci	r17, 0xFF	; 255
    46de:	a4 01       	movw	r20, r8
    46e0:	0e 94 57 24 	call	0x48ae	; 0x48ae <__ultoa_invert>
    46e4:	a8 2e       	mov	r10, r24
    46e6:	a8 18       	sub	r10, r8
    46e8:	fb 2d       	mov	r31, r11
    46ea:	ff 77       	andi	r31, 0x7F	; 127
    46ec:	bf 2e       	mov	r11, r31
    46ee:	b6 fe       	sbrs	r11, 6
    46f0:	0b c0       	rjmp	.+22     	; 0x4708 <vfprintf+0x2aa>
    46f2:	2b 2d       	mov	r18, r11
    46f4:	2e 7f       	andi	r18, 0xFE	; 254
    46f6:	a5 14       	cp	r10, r5
    46f8:	50 f4       	brcc	.+20     	; 0x470e <vfprintf+0x2b0>
    46fa:	b4 fe       	sbrs	r11, 4
    46fc:	0a c0       	rjmp	.+20     	; 0x4712 <vfprintf+0x2b4>
    46fe:	b2 fc       	sbrc	r11, 2
    4700:	08 c0       	rjmp	.+16     	; 0x4712 <vfprintf+0x2b4>
    4702:	2b 2d       	mov	r18, r11
    4704:	2e 7e       	andi	r18, 0xEE	; 238
    4706:	05 c0       	rjmp	.+10     	; 0x4712 <vfprintf+0x2b4>
    4708:	7a 2c       	mov	r7, r10
    470a:	2b 2d       	mov	r18, r11
    470c:	03 c0       	rjmp	.+6      	; 0x4714 <vfprintf+0x2b6>
    470e:	7a 2c       	mov	r7, r10
    4710:	01 c0       	rjmp	.+2      	; 0x4714 <vfprintf+0x2b6>
    4712:	75 2c       	mov	r7, r5
    4714:	24 ff       	sbrs	r18, 4
    4716:	0d c0       	rjmp	.+26     	; 0x4732 <vfprintf+0x2d4>
    4718:	fe 01       	movw	r30, r28
    471a:	ea 0d       	add	r30, r10
    471c:	f1 1d       	adc	r31, r1
    471e:	80 81       	ld	r24, Z
    4720:	80 33       	cpi	r24, 0x30	; 48
    4722:	11 f4       	brne	.+4      	; 0x4728 <vfprintf+0x2ca>
    4724:	29 7e       	andi	r18, 0xE9	; 233
    4726:	09 c0       	rjmp	.+18     	; 0x473a <vfprintf+0x2dc>
    4728:	22 ff       	sbrs	r18, 2
    472a:	06 c0       	rjmp	.+12     	; 0x4738 <vfprintf+0x2da>
    472c:	73 94       	inc	r7
    472e:	73 94       	inc	r7
    4730:	04 c0       	rjmp	.+8      	; 0x473a <vfprintf+0x2dc>
    4732:	82 2f       	mov	r24, r18
    4734:	86 78       	andi	r24, 0x86	; 134
    4736:	09 f0       	breq	.+2      	; 0x473a <vfprintf+0x2dc>
    4738:	73 94       	inc	r7
    473a:	23 fd       	sbrc	r18, 3
    473c:	13 c0       	rjmp	.+38     	; 0x4764 <vfprintf+0x306>
    473e:	20 ff       	sbrs	r18, 0
    4740:	06 c0       	rjmp	.+12     	; 0x474e <vfprintf+0x2f0>
    4742:	5a 2c       	mov	r5, r10
    4744:	73 14       	cp	r7, r3
    4746:	18 f4       	brcc	.+6      	; 0x474e <vfprintf+0x2f0>
    4748:	53 0c       	add	r5, r3
    474a:	57 18       	sub	r5, r7
    474c:	73 2c       	mov	r7, r3
    474e:	73 14       	cp	r7, r3
    4750:	68 f4       	brcc	.+26     	; 0x476c <vfprintf+0x30e>
    4752:	b7 01       	movw	r22, r14
    4754:	80 e2       	ldi	r24, 0x20	; 32
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	2c 87       	std	Y+12, r18	; 0x0c
    475a:	0e 94 25 24 	call	0x484a	; 0x484a <fputc>
    475e:	73 94       	inc	r7
    4760:	2c 85       	ldd	r18, Y+12	; 0x0c
    4762:	f5 cf       	rjmp	.-22     	; 0x474e <vfprintf+0x2f0>
    4764:	73 14       	cp	r7, r3
    4766:	10 f4       	brcc	.+4      	; 0x476c <vfprintf+0x30e>
    4768:	37 18       	sub	r3, r7
    476a:	01 c0       	rjmp	.+2      	; 0x476e <vfprintf+0x310>
    476c:	31 2c       	mov	r3, r1
    476e:	24 ff       	sbrs	r18, 4
    4770:	12 c0       	rjmp	.+36     	; 0x4796 <vfprintf+0x338>
    4772:	b7 01       	movw	r22, r14
    4774:	80 e3       	ldi	r24, 0x30	; 48
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	2c 87       	std	Y+12, r18	; 0x0c
    477a:	0e 94 25 24 	call	0x484a	; 0x484a <fputc>
    477e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4780:	22 ff       	sbrs	r18, 2
    4782:	17 c0       	rjmp	.+46     	; 0x47b2 <vfprintf+0x354>
    4784:	21 ff       	sbrs	r18, 1
    4786:	03 c0       	rjmp	.+6      	; 0x478e <vfprintf+0x330>
    4788:	88 e5       	ldi	r24, 0x58	; 88
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	02 c0       	rjmp	.+4      	; 0x4792 <vfprintf+0x334>
    478e:	88 e7       	ldi	r24, 0x78	; 120
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	b7 01       	movw	r22, r14
    4794:	0c c0       	rjmp	.+24     	; 0x47ae <vfprintf+0x350>
    4796:	82 2f       	mov	r24, r18
    4798:	86 78       	andi	r24, 0x86	; 134
    479a:	59 f0       	breq	.+22     	; 0x47b2 <vfprintf+0x354>
    479c:	21 fd       	sbrc	r18, 1
    479e:	02 c0       	rjmp	.+4      	; 0x47a4 <vfprintf+0x346>
    47a0:	80 e2       	ldi	r24, 0x20	; 32
    47a2:	01 c0       	rjmp	.+2      	; 0x47a6 <vfprintf+0x348>
    47a4:	8b e2       	ldi	r24, 0x2B	; 43
    47a6:	27 fd       	sbrc	r18, 7
    47a8:	8d e2       	ldi	r24, 0x2D	; 45
    47aa:	b7 01       	movw	r22, r14
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	0e 94 25 24 	call	0x484a	; 0x484a <fputc>
    47b2:	a5 14       	cp	r10, r5
    47b4:	38 f4       	brcc	.+14     	; 0x47c4 <vfprintf+0x366>
    47b6:	b7 01       	movw	r22, r14
    47b8:	80 e3       	ldi	r24, 0x30	; 48
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	0e 94 25 24 	call	0x484a	; 0x484a <fputc>
    47c0:	5a 94       	dec	r5
    47c2:	f7 cf       	rjmp	.-18     	; 0x47b2 <vfprintf+0x354>
    47c4:	aa 94       	dec	r10
    47c6:	f4 01       	movw	r30, r8
    47c8:	ea 0d       	add	r30, r10
    47ca:	f1 1d       	adc	r31, r1
    47cc:	80 81       	ld	r24, Z
    47ce:	b7 01       	movw	r22, r14
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	0e 94 25 24 	call	0x484a	; 0x484a <fputc>
    47d6:	a1 10       	cpse	r10, r1
    47d8:	f5 cf       	rjmp	.-22     	; 0x47c4 <vfprintf+0x366>
    47da:	33 20       	and	r3, r3
    47dc:	09 f4       	brne	.+2      	; 0x47e0 <vfprintf+0x382>
    47de:	51 ce       	rjmp	.-862    	; 0x4482 <vfprintf+0x24>
    47e0:	b7 01       	movw	r22, r14
    47e2:	80 e2       	ldi	r24, 0x20	; 32
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	0e 94 25 24 	call	0x484a	; 0x484a <fputc>
    47ea:	3a 94       	dec	r3
    47ec:	f6 cf       	rjmp	.-20     	; 0x47da <vfprintf+0x37c>
    47ee:	f7 01       	movw	r30, r14
    47f0:	86 81       	ldd	r24, Z+6	; 0x06
    47f2:	97 81       	ldd	r25, Z+7	; 0x07
    47f4:	02 c0       	rjmp	.+4      	; 0x47fa <vfprintf+0x39c>
    47f6:	8f ef       	ldi	r24, 0xFF	; 255
    47f8:	9f ef       	ldi	r25, 0xFF	; 255
    47fa:	2c 96       	adiw	r28, 0x0c	; 12
    47fc:	e2 e1       	ldi	r30, 0x12	; 18
    47fe:	0c 94 52 25 	jmp	0x4aa4	; 0x4aa4 <__epilogue_restores__>

00004802 <__eerd_word_m32>:
    4802:	a8 e1       	ldi	r26, 0x18	; 24
    4804:	b0 e0       	ldi	r27, 0x00	; 0
    4806:	42 e0       	ldi	r20, 0x02	; 2
    4808:	50 e0       	ldi	r21, 0x00	; 0
    480a:	0c 94 b7 24 	jmp	0x496e	; 0x496e <__eerd_blraw_m32>

0000480e <__eewr_word_m32>:
    480e:	0e 94 c5 24 	call	0x498a	; 0x498a <__eewr_byte_m32>
    4812:	27 2f       	mov	r18, r23
    4814:	0c 94 c6 24 	jmp	0x498c	; 0x498c <__eewr_r18_m32>

00004818 <__ctype_isfalse>:
    4818:	99 27       	eor	r25, r25
    481a:	88 27       	eor	r24, r24

0000481c <__ctype_istrue>:
    481c:	08 95       	ret

0000481e <strnlen_P>:
    481e:	fc 01       	movw	r30, r24
    4820:	05 90       	lpm	r0, Z+
    4822:	61 50       	subi	r22, 0x01	; 1
    4824:	70 40       	sbci	r23, 0x00	; 0
    4826:	01 10       	cpse	r0, r1
    4828:	d8 f7       	brcc	.-10     	; 0x4820 <strnlen_P+0x2>
    482a:	80 95       	com	r24
    482c:	90 95       	com	r25
    482e:	8e 0f       	add	r24, r30
    4830:	9f 1f       	adc	r25, r31
    4832:	08 95       	ret

00004834 <strnlen>:
    4834:	fc 01       	movw	r30, r24
    4836:	61 50       	subi	r22, 0x01	; 1
    4838:	70 40       	sbci	r23, 0x00	; 0
    483a:	01 90       	ld	r0, Z+
    483c:	01 10       	cpse	r0, r1
    483e:	d8 f7       	brcc	.-10     	; 0x4836 <strnlen+0x2>
    4840:	80 95       	com	r24
    4842:	90 95       	com	r25
    4844:	8e 0f       	add	r24, r30
    4846:	9f 1f       	adc	r25, r31
    4848:	08 95       	ret

0000484a <fputc>:
    484a:	0f 93       	push	r16
    484c:	1f 93       	push	r17
    484e:	cf 93       	push	r28
    4850:	df 93       	push	r29
    4852:	18 2f       	mov	r17, r24
    4854:	09 2f       	mov	r16, r25
    4856:	eb 01       	movw	r28, r22
    4858:	8b 81       	ldd	r24, Y+3	; 0x03
    485a:	81 fd       	sbrc	r24, 1
    485c:	03 c0       	rjmp	.+6      	; 0x4864 <fputc+0x1a>
    485e:	8f ef       	ldi	r24, 0xFF	; 255
    4860:	9f ef       	ldi	r25, 0xFF	; 255
    4862:	20 c0       	rjmp	.+64     	; 0x48a4 <fputc+0x5a>
    4864:	82 ff       	sbrs	r24, 2
    4866:	10 c0       	rjmp	.+32     	; 0x4888 <fputc+0x3e>
    4868:	4e 81       	ldd	r20, Y+6	; 0x06
    486a:	5f 81       	ldd	r21, Y+7	; 0x07
    486c:	2c 81       	ldd	r18, Y+4	; 0x04
    486e:	3d 81       	ldd	r19, Y+5	; 0x05
    4870:	42 17       	cp	r20, r18
    4872:	53 07       	cpc	r21, r19
    4874:	7c f4       	brge	.+30     	; 0x4894 <fputc+0x4a>
    4876:	e8 81       	ld	r30, Y
    4878:	f9 81       	ldd	r31, Y+1	; 0x01
    487a:	9f 01       	movw	r18, r30
    487c:	2f 5f       	subi	r18, 0xFF	; 255
    487e:	3f 4f       	sbci	r19, 0xFF	; 255
    4880:	39 83       	std	Y+1, r19	; 0x01
    4882:	28 83       	st	Y, r18
    4884:	10 83       	st	Z, r17
    4886:	06 c0       	rjmp	.+12     	; 0x4894 <fputc+0x4a>
    4888:	e8 85       	ldd	r30, Y+8	; 0x08
    488a:	f9 85       	ldd	r31, Y+9	; 0x09
    488c:	81 2f       	mov	r24, r17
    488e:	09 95       	icall
    4890:	89 2b       	or	r24, r25
    4892:	29 f7       	brne	.-54     	; 0x485e <fputc+0x14>
    4894:	2e 81       	ldd	r18, Y+6	; 0x06
    4896:	3f 81       	ldd	r19, Y+7	; 0x07
    4898:	2f 5f       	subi	r18, 0xFF	; 255
    489a:	3f 4f       	sbci	r19, 0xFF	; 255
    489c:	3f 83       	std	Y+7, r19	; 0x07
    489e:	2e 83       	std	Y+6, r18	; 0x06
    48a0:	81 2f       	mov	r24, r17
    48a2:	90 2f       	mov	r25, r16
    48a4:	df 91       	pop	r29
    48a6:	cf 91       	pop	r28
    48a8:	1f 91       	pop	r17
    48aa:	0f 91       	pop	r16
    48ac:	08 95       	ret

000048ae <__ultoa_invert>:
    48ae:	fa 01       	movw	r30, r20
    48b0:	aa 27       	eor	r26, r26
    48b2:	28 30       	cpi	r18, 0x08	; 8
    48b4:	51 f1       	breq	.+84     	; 0x490a <__ultoa_invert+0x5c>
    48b6:	20 31       	cpi	r18, 0x10	; 16
    48b8:	81 f1       	breq	.+96     	; 0x491a <__ultoa_invert+0x6c>
    48ba:	e8 94       	clt
    48bc:	6f 93       	push	r22
    48be:	6e 7f       	andi	r22, 0xFE	; 254
    48c0:	6e 5f       	subi	r22, 0xFE	; 254
    48c2:	7f 4f       	sbci	r23, 0xFF	; 255
    48c4:	8f 4f       	sbci	r24, 0xFF	; 255
    48c6:	9f 4f       	sbci	r25, 0xFF	; 255
    48c8:	af 4f       	sbci	r26, 0xFF	; 255
    48ca:	b1 e0       	ldi	r27, 0x01	; 1
    48cc:	3e d0       	rcall	.+124    	; 0x494a <__ultoa_invert+0x9c>
    48ce:	b4 e0       	ldi	r27, 0x04	; 4
    48d0:	3c d0       	rcall	.+120    	; 0x494a <__ultoa_invert+0x9c>
    48d2:	67 0f       	add	r22, r23
    48d4:	78 1f       	adc	r23, r24
    48d6:	89 1f       	adc	r24, r25
    48d8:	9a 1f       	adc	r25, r26
    48da:	a1 1d       	adc	r26, r1
    48dc:	68 0f       	add	r22, r24
    48de:	79 1f       	adc	r23, r25
    48e0:	8a 1f       	adc	r24, r26
    48e2:	91 1d       	adc	r25, r1
    48e4:	a1 1d       	adc	r26, r1
    48e6:	6a 0f       	add	r22, r26
    48e8:	71 1d       	adc	r23, r1
    48ea:	81 1d       	adc	r24, r1
    48ec:	91 1d       	adc	r25, r1
    48ee:	a1 1d       	adc	r26, r1
    48f0:	20 d0       	rcall	.+64     	; 0x4932 <__ultoa_invert+0x84>
    48f2:	09 f4       	brne	.+2      	; 0x48f6 <__ultoa_invert+0x48>
    48f4:	68 94       	set
    48f6:	3f 91       	pop	r19
    48f8:	2a e0       	ldi	r18, 0x0A	; 10
    48fa:	26 9f       	mul	r18, r22
    48fc:	11 24       	eor	r1, r1
    48fe:	30 19       	sub	r19, r0
    4900:	30 5d       	subi	r19, 0xD0	; 208
    4902:	31 93       	st	Z+, r19
    4904:	de f6       	brtc	.-74     	; 0x48bc <__ultoa_invert+0xe>
    4906:	cf 01       	movw	r24, r30
    4908:	08 95       	ret
    490a:	46 2f       	mov	r20, r22
    490c:	47 70       	andi	r20, 0x07	; 7
    490e:	40 5d       	subi	r20, 0xD0	; 208
    4910:	41 93       	st	Z+, r20
    4912:	b3 e0       	ldi	r27, 0x03	; 3
    4914:	0f d0       	rcall	.+30     	; 0x4934 <__ultoa_invert+0x86>
    4916:	c9 f7       	brne	.-14     	; 0x490a <__ultoa_invert+0x5c>
    4918:	f6 cf       	rjmp	.-20     	; 0x4906 <__ultoa_invert+0x58>
    491a:	46 2f       	mov	r20, r22
    491c:	4f 70       	andi	r20, 0x0F	; 15
    491e:	40 5d       	subi	r20, 0xD0	; 208
    4920:	4a 33       	cpi	r20, 0x3A	; 58
    4922:	18 f0       	brcs	.+6      	; 0x492a <__ultoa_invert+0x7c>
    4924:	49 5d       	subi	r20, 0xD9	; 217
    4926:	31 fd       	sbrc	r19, 1
    4928:	40 52       	subi	r20, 0x20	; 32
    492a:	41 93       	st	Z+, r20
    492c:	02 d0       	rcall	.+4      	; 0x4932 <__ultoa_invert+0x84>
    492e:	a9 f7       	brne	.-22     	; 0x491a <__ultoa_invert+0x6c>
    4930:	ea cf       	rjmp	.-44     	; 0x4906 <__ultoa_invert+0x58>
    4932:	b4 e0       	ldi	r27, 0x04	; 4
    4934:	a6 95       	lsr	r26
    4936:	97 95       	ror	r25
    4938:	87 95       	ror	r24
    493a:	77 95       	ror	r23
    493c:	67 95       	ror	r22
    493e:	ba 95       	dec	r27
    4940:	c9 f7       	brne	.-14     	; 0x4934 <__ultoa_invert+0x86>
    4942:	00 97       	sbiw	r24, 0x00	; 0
    4944:	61 05       	cpc	r22, r1
    4946:	71 05       	cpc	r23, r1
    4948:	08 95       	ret
    494a:	9b 01       	movw	r18, r22
    494c:	ac 01       	movw	r20, r24
    494e:	0a 2e       	mov	r0, r26
    4950:	06 94       	lsr	r0
    4952:	57 95       	ror	r21
    4954:	47 95       	ror	r20
    4956:	37 95       	ror	r19
    4958:	27 95       	ror	r18
    495a:	ba 95       	dec	r27
    495c:	c9 f7       	brne	.-14     	; 0x4950 <__ultoa_invert+0xa2>
    495e:	62 0f       	add	r22, r18
    4960:	73 1f       	adc	r23, r19
    4962:	84 1f       	adc	r24, r20
    4964:	95 1f       	adc	r25, r21
    4966:	a0 1d       	adc	r26, r0
    4968:	08 95       	ret

0000496a <__eerd_block_m32>:
    496a:	dc 01       	movw	r26, r24
    496c:	cb 01       	movw	r24, r22

0000496e <__eerd_blraw_m32>:
    496e:	fc 01       	movw	r30, r24
    4970:	e1 99       	sbic	0x1c, 1	; 28
    4972:	fe cf       	rjmp	.-4      	; 0x4970 <__eerd_blraw_m32+0x2>
    4974:	06 c0       	rjmp	.+12     	; 0x4982 <__eerd_blraw_m32+0x14>
    4976:	ff bb       	out	0x1f, r31	; 31
    4978:	ee bb       	out	0x1e, r30	; 30
    497a:	e0 9a       	sbi	0x1c, 0	; 28
    497c:	31 96       	adiw	r30, 0x01	; 1
    497e:	0d b2       	in	r0, 0x1d	; 29
    4980:	0d 92       	st	X+, r0
    4982:	41 50       	subi	r20, 0x01	; 1
    4984:	50 40       	sbci	r21, 0x00	; 0
    4986:	b8 f7       	brcc	.-18     	; 0x4976 <__eerd_blraw_m32+0x8>
    4988:	08 95       	ret

0000498a <__eewr_byte_m32>:
    498a:	26 2f       	mov	r18, r22

0000498c <__eewr_r18_m32>:
    498c:	e1 99       	sbic	0x1c, 1	; 28
    498e:	fe cf       	rjmp	.-4      	; 0x498c <__eewr_r18_m32>
    4990:	9f bb       	out	0x1f, r25	; 31
    4992:	8e bb       	out	0x1e, r24	; 30
    4994:	2d bb       	out	0x1d, r18	; 29
    4996:	0f b6       	in	r0, 0x3f	; 63
    4998:	f8 94       	cli
    499a:	e2 9a       	sbi	0x1c, 2	; 28
    499c:	e1 9a       	sbi	0x1c, 1	; 28
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	01 96       	adiw	r24, 0x01	; 1
    49a2:	08 95       	ret

000049a4 <__mulsi3>:
    49a4:	db 01       	movw	r26, r22
    49a6:	8f 93       	push	r24
    49a8:	9f 93       	push	r25
    49aa:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__muluhisi3>
    49ae:	bf 91       	pop	r27
    49b0:	af 91       	pop	r26
    49b2:	a2 9f       	mul	r26, r18
    49b4:	80 0d       	add	r24, r0
    49b6:	91 1d       	adc	r25, r1
    49b8:	a3 9f       	mul	r26, r19
    49ba:	90 0d       	add	r25, r0
    49bc:	b2 9f       	mul	r27, r18
    49be:	90 0d       	add	r25, r0
    49c0:	11 24       	eor	r1, r1
    49c2:	08 95       	ret

000049c4 <__udivmodsi4>:
    49c4:	a1 e2       	ldi	r26, 0x21	; 33
    49c6:	1a 2e       	mov	r1, r26
    49c8:	aa 1b       	sub	r26, r26
    49ca:	bb 1b       	sub	r27, r27
    49cc:	fd 01       	movw	r30, r26
    49ce:	0d c0       	rjmp	.+26     	; 0x49ea <__udivmodsi4_ep>

000049d0 <__udivmodsi4_loop>:
    49d0:	aa 1f       	adc	r26, r26
    49d2:	bb 1f       	adc	r27, r27
    49d4:	ee 1f       	adc	r30, r30
    49d6:	ff 1f       	adc	r31, r31
    49d8:	a2 17       	cp	r26, r18
    49da:	b3 07       	cpc	r27, r19
    49dc:	e4 07       	cpc	r30, r20
    49de:	f5 07       	cpc	r31, r21
    49e0:	20 f0       	brcs	.+8      	; 0x49ea <__udivmodsi4_ep>
    49e2:	a2 1b       	sub	r26, r18
    49e4:	b3 0b       	sbc	r27, r19
    49e6:	e4 0b       	sbc	r30, r20
    49e8:	f5 0b       	sbc	r31, r21

000049ea <__udivmodsi4_ep>:
    49ea:	66 1f       	adc	r22, r22
    49ec:	77 1f       	adc	r23, r23
    49ee:	88 1f       	adc	r24, r24
    49f0:	99 1f       	adc	r25, r25
    49f2:	1a 94       	dec	r1
    49f4:	69 f7       	brne	.-38     	; 0x49d0 <__udivmodsi4_loop>
    49f6:	60 95       	com	r22
    49f8:	70 95       	com	r23
    49fa:	80 95       	com	r24
    49fc:	90 95       	com	r25
    49fe:	9b 01       	movw	r18, r22
    4a00:	ac 01       	movw	r20, r24
    4a02:	bd 01       	movw	r22, r26
    4a04:	cf 01       	movw	r24, r30
    4a06:	08 95       	ret

00004a08 <__divmodsi4>:
    4a08:	05 2e       	mov	r0, r21
    4a0a:	97 fb       	bst	r25, 7
    4a0c:	1e f4       	brtc	.+6      	; 0x4a14 <__divmodsi4+0xc>
    4a0e:	00 94       	com	r0
    4a10:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__negsi2>
    4a14:	57 fd       	sbrc	r21, 7
    4a16:	07 d0       	rcall	.+14     	; 0x4a26 <__divmodsi4_neg2>
    4a18:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodsi4>
    4a1c:	07 fc       	sbrc	r0, 7
    4a1e:	03 d0       	rcall	.+6      	; 0x4a26 <__divmodsi4_neg2>
    4a20:	4e f4       	brtc	.+18     	; 0x4a34 <__divmodsi4_exit>
    4a22:	0c 94 1b 25 	jmp	0x4a36	; 0x4a36 <__negsi2>

00004a26 <__divmodsi4_neg2>:
    4a26:	50 95       	com	r21
    4a28:	40 95       	com	r20
    4a2a:	30 95       	com	r19
    4a2c:	21 95       	neg	r18
    4a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a30:	4f 4f       	sbci	r20, 0xFF	; 255
    4a32:	5f 4f       	sbci	r21, 0xFF	; 255

00004a34 <__divmodsi4_exit>:
    4a34:	08 95       	ret

00004a36 <__negsi2>:
    4a36:	90 95       	com	r25
    4a38:	80 95       	com	r24
    4a3a:	70 95       	com	r23
    4a3c:	61 95       	neg	r22
    4a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a40:	8f 4f       	sbci	r24, 0xFF	; 255
    4a42:	9f 4f       	sbci	r25, 0xFF	; 255
    4a44:	08 95       	ret

00004a46 <__muluhisi3>:
    4a46:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__umulhisi3>
    4a4a:	a5 9f       	mul	r26, r21
    4a4c:	90 0d       	add	r25, r0
    4a4e:	b4 9f       	mul	r27, r20
    4a50:	90 0d       	add	r25, r0
    4a52:	a4 9f       	mul	r26, r20
    4a54:	80 0d       	add	r24, r0
    4a56:	91 1d       	adc	r25, r1
    4a58:	11 24       	eor	r1, r1
    4a5a:	08 95       	ret

00004a5c <__mulshisi3>:
    4a5c:	b7 ff       	sbrs	r27, 7
    4a5e:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__muluhisi3>

00004a62 <__mulohisi3>:
    4a62:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__muluhisi3>
    4a66:	82 1b       	sub	r24, r18
    4a68:	93 0b       	sbc	r25, r19
    4a6a:	08 95       	ret

00004a6c <__prologue_saves__>:
    4a6c:	2f 92       	push	r2
    4a6e:	3f 92       	push	r3
    4a70:	4f 92       	push	r4
    4a72:	5f 92       	push	r5
    4a74:	6f 92       	push	r6
    4a76:	7f 92       	push	r7
    4a78:	8f 92       	push	r8
    4a7a:	9f 92       	push	r9
    4a7c:	af 92       	push	r10
    4a7e:	bf 92       	push	r11
    4a80:	cf 92       	push	r12
    4a82:	df 92       	push	r13
    4a84:	ef 92       	push	r14
    4a86:	ff 92       	push	r15
    4a88:	0f 93       	push	r16
    4a8a:	1f 93       	push	r17
    4a8c:	cf 93       	push	r28
    4a8e:	df 93       	push	r29
    4a90:	cd b7       	in	r28, 0x3d	; 61
    4a92:	de b7       	in	r29, 0x3e	; 62
    4a94:	ca 1b       	sub	r28, r26
    4a96:	db 0b       	sbc	r29, r27
    4a98:	0f b6       	in	r0, 0x3f	; 63
    4a9a:	f8 94       	cli
    4a9c:	de bf       	out	0x3e, r29	; 62
    4a9e:	0f be       	out	0x3f, r0	; 63
    4aa0:	cd bf       	out	0x3d, r28	; 61
    4aa2:	09 94       	ijmp

00004aa4 <__epilogue_restores__>:
    4aa4:	2a 88       	ldd	r2, Y+18	; 0x12
    4aa6:	39 88       	ldd	r3, Y+17	; 0x11
    4aa8:	48 88       	ldd	r4, Y+16	; 0x10
    4aaa:	5f 84       	ldd	r5, Y+15	; 0x0f
    4aac:	6e 84       	ldd	r6, Y+14	; 0x0e
    4aae:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ab0:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ab2:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ab4:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ab6:	b9 84       	ldd	r11, Y+9	; 0x09
    4ab8:	c8 84       	ldd	r12, Y+8	; 0x08
    4aba:	df 80       	ldd	r13, Y+7	; 0x07
    4abc:	ee 80       	ldd	r14, Y+6	; 0x06
    4abe:	fd 80       	ldd	r15, Y+5	; 0x05
    4ac0:	0c 81       	ldd	r16, Y+4	; 0x04
    4ac2:	1b 81       	ldd	r17, Y+3	; 0x03
    4ac4:	aa 81       	ldd	r26, Y+2	; 0x02
    4ac6:	b9 81       	ldd	r27, Y+1	; 0x01
    4ac8:	ce 0f       	add	r28, r30
    4aca:	d1 1d       	adc	r29, r1
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	f8 94       	cli
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	ed 01       	movw	r28, r26
    4ad8:	08 95       	ret

00004ada <__umulhisi3>:
    4ada:	a2 9f       	mul	r26, r18
    4adc:	b0 01       	movw	r22, r0
    4ade:	b3 9f       	mul	r27, r19
    4ae0:	c0 01       	movw	r24, r0
    4ae2:	a3 9f       	mul	r26, r19
    4ae4:	70 0d       	add	r23, r0
    4ae6:	81 1d       	adc	r24, r1
    4ae8:	11 24       	eor	r1, r1
    4aea:	91 1d       	adc	r25, r1
    4aec:	b2 9f       	mul	r27, r18
    4aee:	70 0d       	add	r23, r0
    4af0:	81 1d       	adc	r24, r1
    4af2:	11 24       	eor	r1, r1
    4af4:	91 1d       	adc	r25, r1
    4af6:	08 95       	ret

00004af8 <_exit>:
    4af8:	f8 94       	cli

00004afa <__stop_program>:
    4afa:	ff cf       	rjmp	.-2      	; 0x4afa <__stop_program>
