
QEPU_Project_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000074c4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  000074c4  00007578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000f4  008000f4  0000760c  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  0000760c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000760e  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  0000766a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014a50  00000000  00000000  00007aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002073  00000000  00000000  0001c4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c9  00000000  00000000  0001e565  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015c4  00000000  00000000  0001fe30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001321  00000000  00000000  000213f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000081ad  00000000  00000000  00022715  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  0002a8c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	72 1f       	adc	r23, r18
      56:	95 1f       	adc	r25, r21
      58:	ad 1f       	adc	r26, r29
      5a:	bf 1f       	adc	r27, r31
      5c:	cc 1f       	adc	r28, r28
      5e:	dc 1f       	adc	r29, r28
      60:	e4 1f       	adc	r30, r20
      62:	ec 1f       	adc	r30, r28
      64:	f7 1f       	adc	r31, r23
      66:	02 20       	and	r0, r2
      68:	0c 20       	and	r0, r12
      6a:	16 20       	and	r1, r6
      6c:	28 20       	and	r2, r8
      6e:	2f 20       	and	r2, r15
      70:	3d 20       	and	r3, r13
      72:	41 20       	and	r4, r1
      74:	5b 20       	and	r5, r11
      76:	7a 20       	and	r7, r10
      78:	99 20       	and	r9, r9
      7a:	b8 20       	and	r11, r8
      7c:	d7 20       	and	r13, r7
      7e:	f6 20       	and	r15, r6
      80:	15 21       	and	r17, r5
      82:	34 21       	and	r19, r4
      84:	47 21       	and	r20, r7
      86:	52 21       	and	r21, r2
      88:	5c 21       	and	r21, r12
      8a:	78 21       	and	r23, r8
      8c:	8e 21       	and	r24, r14
      8e:	aa 21       	and	r26, r10
      90:	c0 21       	and	r28, r0
      92:	d5 21       	and	r29, r5
      94:	ec 21       	and	r30, r12
      96:	06 22       	and	r0, r22
      98:	25 22       	and	r2, r21
      9a:	40 22       	and	r4, r16
      9c:	5a 22       	and	r5, r26
      9e:	72 22       	and	r7, r18
      a0:	87 22       	and	r8, r23
      a2:	9c 22       	and	r9, r28
      a4:	b4 22       	and	r11, r20
      a6:	c9 22       	and	r12, r25
      a8:	de 22       	and	r13, r30
      aa:	f8 22       	and	r15, r24
      ac:	0f 23       	and	r16, r31
      ae:	26 23       	and	r18, r22
      b0:	3e 23       	and	r19, r30
      b2:	53 23       	and	r21, r19
      b4:	68 23       	and	r22, r24
      b6:	82 23       	and	r24, r18
      b8:	99 23       	and	r25, r25
      ba:	b0 23       	and	r27, r16
      bc:	c3 23       	and	r28, r19
      be:	e0 23       	and	r30, r16
      c0:	f7 23       	and	r31, r23
      c2:	0f 24       	eor	r0, r15
      c4:	2c 24       	eor	r2, r12
      c6:	43 24       	eor	r4, r3
      c8:	5b 24       	eor	r5, r11
      ca:	5f 24       	eor	r5, r15
      cc:	4a 2a       	or	r4, r26
      ce:	65 24       	eor	r6, r5
      d0:	70 24       	eor	r7, r0
      d2:	a0 24       	eor	r10, r0
      d4:	d0 24       	eor	r13, r0
      d6:	00 25       	eor	r16, r0
      d8:	30 25       	eor	r19, r0
      da:	60 25       	eor	r22, r0
      dc:	90 25       	eor	r25, r0
      de:	c2 25       	eor	r28, r2
      e0:	f4 25       	eor	r31, r4
      e2:	26 26       	eor	r2, r22
      e4:	7f 26       	eor	r7, r31
      e6:	d8 26       	eor	r13, r24
      e8:	31 27       	eor	r19, r17
      ea:	8a 27       	eor	r24, r26
      ec:	e3 27       	eor	r30, r19
      ee:	3c 28       	or	r3, r12
      f0:	95 28       	or	r9, r5
      f2:	23 29       	or	r18, r3
      f4:	b1 29       	or	r27, r1
      f6:	08 4a       	sbci	r16, 0xA8	; 168
      f8:	d7 3b       	cpi	r29, 0xB7	; 183
      fa:	3b ce       	rjmp	.-906    	; 0xfffffd72 <__eeprom_end+0xff7efd70>
      fc:	01 6e       	ori	r16, 0xE1	; 225
      fe:	84 bc       	out	0x24, r8	; 36
     100:	bf fd       	.word	0xfdbf	; ????
     102:	c1 2f       	mov	r28, r17
     104:	3d 6c       	ori	r19, 0xCD	; 205
     106:	74 31       	cpi	r23, 0x14	; 20
     108:	9a bd       	out	0x2a, r25	; 42
     10a:	56 83       	std	Z+6, r21	; 0x06
     10c:	3d da       	rcall	.-2950   	; 0xfffff588 <__eeprom_end+0xff7ef586>
     10e:	3d 00       	.word	0x003d	; ????
     110:	c7 7f       	andi	r28, 0xF7	; 247
     112:	11 be       	out	0x31, r1	; 49
     114:	d9 e4       	ldi	r29, 0x49	; 73
     116:	bb 4c       	sbci	r27, 0xCB	; 203
     118:	3e 91       	ld	r19, -X
     11a:	6b aa       	std	Y+51, r6	; 0x33
     11c:	aa be       	out	0x3a, r10	; 58
     11e:	00 00       	nop
     120:	00 80       	ld	r0, Z
     122:	3f 07       	cpc	r19, r31
     124:	63 42       	sbci	r22, 0x23	; 35
     126:	36 b7       	in	r19, 0x36	; 54
     128:	9b d8       	rcall	.-3786   	; 0xfffff260 <__eeprom_end+0xff7ef25e>
     12a:	a7 1a       	sub	r10, r23
     12c:	39 68       	ori	r19, 0x89	; 137
     12e:	56 18       	sub	r5, r6
     130:	ae ba       	out	0x1e, r10	; 30
     132:	ab 55       	subi	r26, 0x5B	; 91
     134:	8c 1d       	adc	r24, r12
     136:	3c b7       	in	r19, 0x3c	; 60
     138:	cc 57       	subi	r28, 0x7C	; 124
     13a:	63 bd       	out	0x23, r22	; 35
     13c:	6d ed       	ldi	r22, 0xDD	; 221
     13e:	fd 75       	andi	r31, 0x5D	; 93
     140:	3e f6       	brtc	.-114    	; 0xd0 <__SREG__+0x91>
     142:	17 72       	andi	r17, 0x27	; 39
     144:	31 bf       	out	0x31, r19	; 49
     146:	00 00       	nop
     148:	00 80       	ld	r0, Z
     14a:	3f 07       	cpc	r19, r31
     14c:	2c 7a       	andi	r18, 0xAC	; 172
     14e:	a5 ba       	out	0x15, r10	; 21
     150:	6c c5       	rjmp	.+2776   	; 0xc2a <_ZN5Gates8ampl2vecEiPiS0_+0x164>
     152:	90 da       	rcall	.-2784   	; 0xfffff674 <__eeprom_end+0xff7ef672>
     154:	3b 93       	.word	0x933b	; ????
     156:	65 fc       	sbrc	r6, 5
     158:	8b bc       	out	0x2b, r8	; 43
     15a:	53 f8       	bld	r5, 3
     15c:	10 fd       	sbrc	r17, 0
     15e:	3c 56       	subi	r19, 0x6C	; 108
     160:	92 83       	std	Z+2, r25	; 0x02
     162:	4d bd       	out	0x2d, r20	; 45
     164:	87 9d       	mul	r24, r7
     166:	3a b6       	in	r3, 0x3a	; 58
     168:	3d cb       	rjmp	.-2438   	; 0xfffff7e4 <__eeprom_end+0xff7ef7e2>
     16a:	c9 bf       	out	0x39, r28	; 57
     16c:	5b be       	out	0x3b, r5	; 59
     16e:	73 da       	rcall	.-2842   	; 0xfffff656 <__eeprom_end+0xff7ef654>
     170:	0f c9       	rjmp	.-3554   	; 0xfffff390 <__eeprom_end+0xff7ef38e>
     172:	3f 05       	cpc	r19, r15
     174:	a8 4c       	sbci	r26, 0xC8	; 200
     176:	cd b2       	in	r12, 0x1d	; 29
     178:	d4 4e       	sbci	r29, 0xE4	; 228
     17a:	b9 38       	cpi	r27, 0x89	; 137
     17c:	36 a9       	ldd	r19, Z+54	; 0x36
     17e:	02 0c       	add	r0, r2
     180:	50 b9       	out	0x00, r21	; 0
     182:	91 86       	std	Z+9, r9	; 0x09
     184:	88 08       	sbc	r8, r8
     186:	3c a6       	std	Y+44, r3	; 0x2c
     188:	aa aa       	std	Y+50, r10	; 0x32
     18a:	2a be       	out	0x3a, r2	; 58
     18c:	00 00       	nop
     18e:	00 80       	ld	r0, Z
     190:	3f 08       	sbc	r3, r15
     192:	00 00       	nop
     194:	00 be       	out	0x30, r0	; 48
     196:	92 24       	eor	r9, r2
     198:	49 12       	cpse	r4, r25
     19a:	3e ab       	std	Y+54, r19	; 0x36
     19c:	aa aa       	std	Y+50, r10	; 0x32
     19e:	2a be       	out	0x3a, r2	; 58
     1a0:	cd cc       	rjmp	.-1638   	; 0xfffffb3c <__eeprom_end+0xff7efb3a>
     1a2:	cc 4c       	sbci	r28, 0xCC	; 204
     1a4:	3e 00       	.word	0x003e	; ????
     1a6:	00 00       	nop
     1a8:	80 be       	out	0x30, r8	; 48
     1aa:	ab aa       	std	Y+51, r10	; 0x33
     1ac:	aa aa       	std	Y+50, r10	; 0x32
     1ae:	3e 00       	.word	0x003e	; ????
     1b0:	00 00       	nop
     1b2:	00 bf       	out	0x30, r16	; 48
     1b4:	00 00       	nop
     1b6:	00 80       	ld	r0, Z
     1b8:	3f 00       	.word	0x003f	; ????
     1ba:	00 00       	nop
     1bc:	00 00       	nop
     1be:	08 41       	sbci	r16, 0x18	; 24
     1c0:	78 d3       	rcall	.+1776   	; 0x8b2 <__stack+0x53>
     1c2:	bb 43       	sbci	r27, 0x3B	; 59
     1c4:	87 d1       	rcall	.+782    	; 0x4d4 <_ZN6EEProm4readEj+0x4a>
     1c6:	13 3d       	cpi	r17, 0xD3	; 211
     1c8:	19 0e       	add	r1, r25
     1ca:	3c c3       	rjmp	.+1656   	; 0x844 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x168>
     1cc:	bd 42       	sbci	r27, 0x2D	; 45
     1ce:	82 ad       	ldd	r24, Z+58	; 0x3a
     1d0:	2b 3e       	cpi	r18, 0xEB	; 235
     1d2:	68 ec       	ldi	r22, 0xC8	; 200
     1d4:	82 76       	andi	r24, 0x62	; 98
     1d6:	be d9       	rcall	.-3204   	; 0xfffff554 <__eeprom_end+0xff7ef552>
     1d8:	8f e1       	ldi	r24, 0x1F	; 31
     1da:	a9 3e       	cpi	r26, 0xE9	; 233
     1dc:	4c 80       	ldd	r4, Y+4	; 0x04
     1de:	ef ff       	.word	0xffef	; ????
     1e0:	be 01       	movw	r22, r28
     1e2:	c4 ff       	sbrs	r28, 4
     1e4:	7f 3f       	cpi	r23, 0xFF	; 255
     1e6:	00 00       	nop
     1e8:	00 00       	nop
	...

000001ec <__ctors_start>:
     1ec:	af 1d       	adc	r26, r15

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf e5       	ldi	r28, 0x5F	; 95
     1f4:	d8 e0       	ldi	r29, 0x08	; 8
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	10 e0       	ldi	r17, 0x00	; 0
     1fc:	a0 e6       	ldi	r26, 0x60	; 96
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	e4 ec       	ldi	r30, 0xC4	; 196
     202:	f4 e7       	ldi	r31, 0x74	; 116
     204:	02 c0       	rjmp	.+4      	; 0x20a <__do_copy_data+0x10>
     206:	05 90       	lpm	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	a4 3f       	cpi	r26, 0xF4	; 244
     20c:	b1 07       	cpc	r27, r17
     20e:	d9 f7       	brne	.-10     	; 0x206 <__do_copy_data+0xc>

00000210 <__do_clear_bss>:
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	a4 ef       	ldi	r26, 0xF4	; 244
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	01 c0       	rjmp	.+2      	; 0x21a <.do_clear_bss_start>

00000218 <.do_clear_bss_loop>:
     218:	1d 92       	st	X+, r1

0000021a <.do_clear_bss_start>:
     21a:	a4 30       	cpi	r26, 0x04	; 4
     21c:	b2 07       	cpc	r27, r18
     21e:	e1 f7       	brne	.-8      	; 0x218 <.do_clear_bss_loop>

00000220 <__do_global_ctors>:
     220:	11 e0       	ldi	r17, 0x01	; 1
     222:	ce ee       	ldi	r28, 0xEE	; 238
     224:	d1 e0       	ldi	r29, 0x01	; 1
     226:	04 c0       	rjmp	.+8      	; 0x230 <__do_global_ctors+0x10>
     228:	22 97       	sbiw	r28, 0x02	; 2
     22a:	fe 01       	movw	r30, r28
     22c:	0e 94 27 34 	call	0x684e	; 0x684e <__tablejump__>
     230:	cc 3e       	cpi	r28, 0xEC	; 236
     232:	d1 07       	cpc	r29, r17
     234:	c9 f7       	brne	.-14     	; 0x228 <__do_global_ctors+0x8>
     236:	0e 94 90 2b 	call	0x5720	; 0x5720 <main>
     23a:	0c 94 60 3a 	jmp	0x74c0	; 0x74c0 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <_ZN7ComplexC1Eff>:
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	fc 01       	movw	r30, r24
     248:	40 83       	st	Z, r20
     24a:	51 83       	std	Z+1, r21	; 0x01
     24c:	62 83       	std	Z+2, r22	; 0x02
     24e:	73 83       	std	Z+3, r23	; 0x03
     250:	04 83       	std	Z+4, r16	; 0x04
     252:	15 83       	std	Z+5, r17	; 0x05
     254:	26 83       	std	Z+6, r18	; 0x06
     256:	37 83       	std	Z+7, r19	; 0x07
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	08 95       	ret

0000025e <_ZN7ComplexC1Ev>:
     25e:	fc 01       	movw	r30, r24
     260:	10 82       	st	Z, r1
     262:	11 82       	std	Z+1, r1	; 0x01
     264:	12 82       	std	Z+2, r1	; 0x02
     266:	13 82       	std	Z+3, r1	; 0x03
     268:	14 82       	std	Z+4, r1	; 0x04
     26a:	15 82       	std	Z+5, r1	; 0x05
     26c:	16 82       	std	Z+6, r1	; 0x06
     26e:	17 82       	std	Z+7, r1	; 0x07
     270:	08 95       	ret

00000272 <_ZN7Complex3addES_>:
     272:	af 92       	push	r10
     274:	bf 92       	push	r11
     276:	cf 92       	push	r12
     278:	df 92       	push	r13
     27a:	ef 92       	push	r14
     27c:	ff 92       	push	r15
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	68 97       	sbiw	r28, 0x18	; 24
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
     296:	5c 01       	movw	r10, r24
     298:	09 8b       	std	Y+17, r16	; 0x11
     29a:	1a 8b       	std	Y+18, r17	; 0x12
     29c:	2b 8b       	std	Y+19, r18	; 0x13
     29e:	3c 8b       	std	Y+20, r19	; 0x14
     2a0:	4d 8b       	std	Y+21, r20	; 0x15
     2a2:	5e 8b       	std	Y+22, r21	; 0x16
     2a4:	6f 8b       	std	Y+23, r22	; 0x17
     2a6:	78 8f       	std	Y+24, r23	; 0x18
     2a8:	2d 89       	ldd	r18, Y+21	; 0x15
     2aa:	3e 89       	ldd	r19, Y+22	; 0x16
     2ac:	4f 89       	ldd	r20, Y+23	; 0x17
     2ae:	58 8d       	ldd	r21, Y+24	; 0x18
     2b0:	fc 01       	movw	r30, r24
     2b2:	64 81       	ldd	r22, Z+4	; 0x04
     2b4:	75 81       	ldd	r23, Z+5	; 0x05
     2b6:	86 81       	ldd	r24, Z+6	; 0x06
     2b8:	97 81       	ldd	r25, Z+7	; 0x07
     2ba:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__addsf3>
     2be:	6b 01       	movw	r12, r22
     2c0:	7c 01       	movw	r14, r24
     2c2:	29 89       	ldd	r18, Y+17	; 0x11
     2c4:	3a 89       	ldd	r19, Y+18	; 0x12
     2c6:	4b 89       	ldd	r20, Y+19	; 0x13
     2c8:	5c 89       	ldd	r21, Y+20	; 0x14
     2ca:	f5 01       	movw	r30, r10
     2cc:	60 81       	ld	r22, Z
     2ce:	71 81       	ldd	r23, Z+1	; 0x01
     2d0:	82 81       	ldd	r24, Z+2	; 0x02
     2d2:	93 81       	ldd	r25, Z+3	; 0x03
     2d4:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__addsf3>
     2d8:	ab 01       	movw	r20, r22
     2da:	bc 01       	movw	r22, r24
     2dc:	97 01       	movw	r18, r14
     2de:	86 01       	movw	r16, r12
     2e0:	ce 01       	movw	r24, r28
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     2e8:	88 e0       	ldi	r24, 0x08	; 8
     2ea:	fe 01       	movw	r30, r28
     2ec:	31 96       	adiw	r30, 0x01	; 1
     2ee:	de 01       	movw	r26, r28
     2f0:	19 96       	adiw	r26, 0x09	; 9
     2f2:	01 90       	ld	r0, Z+
     2f4:	0d 92       	st	X+, r0
     2f6:	8a 95       	dec	r24
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <_ZN7Complex3addES_+0x80>
     2fa:	29 85       	ldd	r18, Y+9	; 0x09
     2fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     2fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     300:	5c 85       	ldd	r21, Y+12	; 0x0c
     302:	6d 85       	ldd	r22, Y+13	; 0x0d
     304:	7e 85       	ldd	r23, Y+14	; 0x0e
     306:	8f 85       	ldd	r24, Y+15	; 0x0f
     308:	98 89       	ldd	r25, Y+16	; 0x10
     30a:	68 96       	adiw	r28, 0x18	; 24
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	cf 90       	pop	r12
     326:	bf 90       	pop	r11
     328:	af 90       	pop	r10
     32a:	08 95       	ret

0000032c <_ZN7Complex3mulES_>:
     32c:	4f 92       	push	r4
     32e:	5f 92       	push	r5
     330:	6f 92       	push	r6
     332:	7f 92       	push	r7
     334:	8f 92       	push	r8
     336:	9f 92       	push	r9
     338:	af 92       	push	r10
     33a:	bf 92       	push	r11
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	a0 97       	sbiw	r28, 0x20	; 32
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	09 8b       	std	Y+17, r16	; 0x11
     35e:	1a 8b       	std	Y+18, r17	; 0x12
     360:	2b 8b       	std	Y+19, r18	; 0x13
     362:	3c 8b       	std	Y+20, r19	; 0x14
     364:	4d 8b       	std	Y+21, r20	; 0x15
     366:	5e 8b       	std	Y+22, r21	; 0x16
     368:	6f 8b       	std	Y+23, r22	; 0x17
     36a:	78 8f       	std	Y+24, r23	; 0x18
     36c:	89 88       	ldd	r8, Y+17	; 0x11
     36e:	9a 88       	ldd	r9, Y+18	; 0x12
     370:	ab 88       	ldd	r10, Y+19	; 0x13
     372:	bc 88       	ldd	r11, Y+20	; 0x14
     374:	2d 89       	ldd	r18, Y+21	; 0x15
     376:	3e 89       	ldd	r19, Y+22	; 0x16
     378:	4f 89       	ldd	r20, Y+23	; 0x17
     37a:	58 8d       	ldd	r21, Y+24	; 0x18
     37c:	2d 8f       	std	Y+29, r18	; 0x1d
     37e:	3e 8f       	std	Y+30, r19	; 0x1e
     380:	4f 8f       	std	Y+31, r20	; 0x1f
     382:	58 a3       	std	Y+32, r21	; 0x20
     384:	fc 01       	movw	r30, r24
     386:	c0 80       	ld	r12, Z
     388:	d1 80       	ldd	r13, Z+1	; 0x01
     38a:	e2 80       	ldd	r14, Z+2	; 0x02
     38c:	f3 80       	ldd	r15, Z+3	; 0x03
     38e:	24 81       	ldd	r18, Z+4	; 0x04
     390:	35 81       	ldd	r19, Z+5	; 0x05
     392:	46 81       	ldd	r20, Z+6	; 0x06
     394:	57 81       	ldd	r21, Z+7	; 0x07
     396:	29 8f       	std	Y+25, r18	; 0x19
     398:	3a 8f       	std	Y+26, r19	; 0x1a
     39a:	4b 8f       	std	Y+27, r20	; 0x1b
     39c:	5c 8f       	std	Y+28, r21	; 0x1c
     39e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3a0:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3a2:	4f 8d       	ldd	r20, Y+31	; 0x1f
     3a4:	58 a1       	ldd	r21, Y+32	; 0x20
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     3ae:	2b 01       	movw	r4, r22
     3b0:	3c 01       	movw	r6, r24
     3b2:	a5 01       	movw	r20, r10
     3b4:	94 01       	movw	r18, r8
     3b6:	69 8d       	ldd	r22, Y+25	; 0x19
     3b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3be:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     3c2:	9b 01       	movw	r18, r22
     3c4:	ac 01       	movw	r20, r24
     3c6:	c3 01       	movw	r24, r6
     3c8:	b2 01       	movw	r22, r4
     3ca:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__addsf3>
     3ce:	2b 01       	movw	r4, r22
     3d0:	3c 01       	movw	r6, r24
     3d2:	a5 01       	movw	r20, r10
     3d4:	94 01       	movw	r18, r8
     3d6:	c7 01       	movw	r24, r14
     3d8:	b6 01       	movw	r22, r12
     3da:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     3de:	6b 01       	movw	r12, r22
     3e0:	7c 01       	movw	r14, r24
     3e2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3e4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3e6:	4f 8d       	ldd	r20, Y+31	; 0x1f
     3e8:	58 a1       	ldd	r21, Y+32	; 0x20
     3ea:	69 8d       	ldd	r22, Y+25	; 0x19
     3ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3f2:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     3f6:	9b 01       	movw	r18, r22
     3f8:	ac 01       	movw	r20, r24
     3fa:	c7 01       	movw	r24, r14
     3fc:	b6 01       	movw	r22, r12
     3fe:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__subsf3>
     402:	ab 01       	movw	r20, r22
     404:	bc 01       	movw	r22, r24
     406:	93 01       	movw	r18, r6
     408:	82 01       	movw	r16, r4
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     412:	88 e0       	ldi	r24, 0x08	; 8
     414:	fe 01       	movw	r30, r28
     416:	31 96       	adiw	r30, 0x01	; 1
     418:	de 01       	movw	r26, r28
     41a:	19 96       	adiw	r26, 0x09	; 9
     41c:	01 90       	ld	r0, Z+
     41e:	0d 92       	st	X+, r0
     420:	8a 95       	dec	r24
     422:	e1 f7       	brne	.-8      	; 0x41c <_ZN7Complex3mulES_+0xf0>
     424:	29 85       	ldd	r18, Y+9	; 0x09
     426:	3a 85       	ldd	r19, Y+10	; 0x0a
     428:	4b 85       	ldd	r20, Y+11	; 0x0b
     42a:	5c 85       	ldd	r21, Y+12	; 0x0c
     42c:	6d 85       	ldd	r22, Y+13	; 0x0d
     42e:	7e 85       	ldd	r23, Y+14	; 0x0e
     430:	8f 85       	ldd	r24, Y+15	; 0x0f
     432:	98 89       	ldd	r25, Y+16	; 0x10
     434:	a0 96       	adiw	r28, 0x20	; 32
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	bf 90       	pop	r11
     452:	af 90       	pop	r10
     454:	9f 90       	pop	r9
     456:	8f 90       	pop	r8
     458:	7f 90       	pop	r7
     45a:	6f 90       	pop	r6
     45c:	5f 90       	pop	r5
     45e:	4f 90       	pop	r4
     460:	08 95       	ret

00000462 <_ZN7Complex3argEv>:
     462:	fc 01       	movw	r30, r24
     464:	20 81       	ld	r18, Z
     466:	31 81       	ldd	r19, Z+1	; 0x01
     468:	42 81       	ldd	r20, Z+2	; 0x02
     46a:	53 81       	ldd	r21, Z+3	; 0x03
     46c:	64 81       	ldd	r22, Z+4	; 0x04
     46e:	75 81       	ldd	r23, Z+5	; 0x05
     470:	86 81       	ldd	r24, Z+6	; 0x06
     472:	97 81       	ldd	r25, Z+7	; 0x07
     474:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
     478:	0e 94 41 30 	call	0x6082	; 0x6082 <atan>
     47c:	08 95       	ret

0000047e <_ZN6EEPromC1Ev>:
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     47e:	85 e0       	ldi	r24, 0x05	; 5
     480:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     482:	81 b1       	in	r24, 0x01	; 1
     484:	8c 7f       	andi	r24, 0xFC	; 252
     486:	81 b9       	out	0x01, r24	; 1
     488:	08 95       	ret

0000048a <_ZN6EEProm4readEj>:
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     48a:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     48c:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     48e:	24 e8       	ldi	r18, 0x84	; 132
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     490:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     492:	06 b6       	in	r0, 0x36	; 54
     494:	07 fe       	sbrs	r0, 7
     496:	fd cf       	rjmp	.-6      	; 0x492 <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     498:	81 b1       	in	r24, 0x01	; 1
     49a:	88 7f       	andi	r24, 0xF8	; 248
     49c:	88 30       	cpi	r24, 0x08	; 8
     49e:	09 f0       	breq	.+2      	; 0x4a2 <_ZN6EEProm4readEj+0x18>
     4a0:	41 c0       	rjmp	.+130    	; 0x524 <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     4a2:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     4a4:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     4a6:	06 b6       	in	r0, 0x36	; 54
     4a8:	07 fe       	sbrs	r0, 7
     4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     4ac:	81 b1       	in	r24, 0x01	; 1
     4ae:	88 7f       	andi	r24, 0xF8	; 248
}

uint8_t EEProm::read(uint16_t address){
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
     4b0:	88 31       	cpi	r24, 0x18	; 24
     4b2:	71 f7       	brne	.-36     	; 0x490 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     4b4:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     4b6:	84 e8       	ldi	r24, 0x84	; 132
     4b8:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4ba:	06 b6       	in	r0, 0x36	; 54
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     4c0:	81 b1       	in	r24, 0x01	; 1
     4c2:	88 7f       	andi	r24, 0xF8	; 248
     4c4:	88 32       	cpi	r24, 0x28	; 40
     4c6:	81 f5       	brne	.+96     	; 0x528 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     4c8:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     4ca:	84 e8       	ldi	r24, 0x84	; 132
     4cc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4ce:	06 b6       	in	r0, 0x36	; 54
     4d0:	07 fe       	sbrs	r0, 7
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     4d4:	81 b1       	in	r24, 0x01	; 1
     4d6:	88 7f       	andi	r24, 0xF8	; 248
     4d8:	88 32       	cpi	r24, 0x28	; 40
     4da:	41 f5       	brne	.+80     	; 0x52c <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     4dc:	84 ea       	ldi	r24, 0xA4	; 164
     4de:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4e0:	06 b6       	in	r0, 0x36	; 54
     4e2:	07 fe       	sbrs	r0, 7
     4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     4e6:	81 b1       	in	r24, 0x01	; 1
     4e8:	88 7f       	andi	r24, 0xF8	; 248
     4ea:	80 31       	cpi	r24, 0x10	; 16
     4ec:	09 f5       	brne	.+66     	; 0x530 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     4ee:	81 ea       	ldi	r24, 0xA1	; 161
     4f0:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     4f2:	84 e8       	ldi	r24, 0x84	; 132
     4f4:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4f6:	06 b6       	in	r0, 0x36	; 54
     4f8:	07 fe       	sbrs	r0, 7
     4fa:	fd cf       	rjmp	.-6      	; 0x4f6 <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     4fc:	81 b1       	in	r24, 0x01	; 1
     4fe:	88 7f       	andi	r24, 0xF8	; 248
     500:	80 34       	cpi	r24, 0x40	; 64
     502:	c1 f4       	brne	.+48     	; 0x534 <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     504:	84 e8       	ldi	r24, 0x84	; 132
     506:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     508:	06 b6       	in	r0, 0x36	; 54
     50a:	07 fe       	sbrs	r0, 7
     50c:	fd cf       	rjmp	.-6      	; 0x508 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     50e:	81 b1       	in	r24, 0x01	; 1
     510:	88 7f       	andi	r24, 0xF8	; 248
     512:	88 35       	cpi	r24, 0x58	; 88
     514:	89 f4       	brne	.+34     	; 0x538 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     516:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     518:	94 e9       	ldi	r25, 0x94	; 148
     51a:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     51c:	06 b6       	in	r0, 0x36	; 54
     51e:	04 fc       	sbrc	r0, 4
     520:	fd cf       	rjmp	.-6      	; 0x51c <_ZN6EEProm4readEj+0x92>
     522:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     538:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     53a:	08 95       	ret

0000053c <_ZN6EEProm11count_linesEv>:
	}
	return eeprom_mem;*/
	return "";
}

int EEProm::count_lines(){
     53c:	6f 92       	push	r6
     53e:	7f 92       	push	r7
     540:	8f 92       	push	r8
     542:	9f 92       	push	r9
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	6c 97       	sbiw	r28, 0x1c	; 28
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	de bf       	out	0x3e, r29	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	cd bf       	out	0x3d, r28	; 61
     568:	5c 01       	movw	r10, r24
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
	bool all_data_read=false;
	
	for(int i=0;true;i++){
     56a:	e1 2c       	mov	r14, r1
     56c:	f1 2c       	mov	r15, r1
	return "";
}

int EEProm::count_lines(){
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
     56e:	c1 2c       	mov	r12, r1
     570:	d1 2c       	mov	r13, r1
     572:	81 2c       	mov	r8, r1
     574:	91 2c       	mov	r9, r1
     576:	8e 01       	movw	r16, r28
     578:	05 5e       	subi	r16, 0xE5	; 229
     57a:	1f 4f       	sbci	r17, 0xFF	; 255
			ctr++;
			for(int j=0;j<INSTR_WIDTH;j++){
				if(tdb[j]==0xFF) all_data_read=true;
				else all_data_read=false;
			}
			tdb_i=0;
     57c:	61 2c       	mov	r6, r1
     57e:	71 2c       	mov	r7, r1
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
	bool all_data_read=false;
	
	for(int i=0;true;i++){
		tdb[tdb_i]=read(i);
     580:	b7 01       	movw	r22, r14
     582:	c5 01       	movw	r24, r10
     584:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6EEProm4readEj>
     588:	f4 01       	movw	r30, r8
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	2c 0f       	add	r18, r28
     594:	3d 1f       	adc	r19, r29
     596:	e2 0f       	add	r30, r18
     598:	f3 1f       	adc	r31, r19
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	91 83       	std	Z+1, r25	; 0x01
     59e:	80 83       	st	Z, r24
		
		if(tdb_i>=INSTR_WIDTH){
     5a0:	3d e0       	ldi	r19, 0x0D	; 13
     5a2:	83 16       	cp	r8, r19
     5a4:	91 04       	cpc	r9, r1
     5a6:	74 f0       	brlt	.+28     	; 0x5c4 <_ZN6EEProm11count_linesEv+0x88>
			ctr++;
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	c8 1a       	sub	r12, r24
     5ac:	d8 0a       	sbc	r13, r24
     5ae:	fe 01       	movw	r30, r28
     5b0:	31 96       	adiw	r30, 0x01	; 1
			for(int j=0;j<INSTR_WIDTH;j++){
				if(tdb[j]==0xFF) all_data_read=true;
     5b2:	81 91       	ld	r24, Z+
     5b4:	91 91       	ld	r25, Z+
	for(int i=0;true;i++){
		tdb[tdb_i]=read(i);
		
		if(tdb_i>=INSTR_WIDTH){
			ctr++;
			for(int j=0;j<INSTR_WIDTH;j++){
     5b6:	e0 17       	cp	r30, r16
     5b8:	f1 07       	cpc	r31, r17
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <_ZN6EEProm11count_linesEv+0x76>
				if(tdb[j]==0xFF) all_data_read=true;
				else all_data_read=false;
			}
			tdb_i=0;
			if(all_data_read) return ctr;
     5bc:	8f 3f       	cpi	r24, 0xFF	; 255
     5be:	91 05       	cpc	r25, r1
     5c0:	29 f4       	brne	.+10     	; 0x5cc <_ZN6EEProm11count_linesEv+0x90>
     5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <_ZN6EEProm11count_linesEv+0x9c>
		}else tdb_i++;
     5c4:	2f ef       	ldi	r18, 0xFF	; 255
     5c6:	82 1a       	sub	r8, r18
     5c8:	92 0a       	sbc	r9, r18
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <_ZN6EEProm11count_linesEv+0x94>
			ctr++;
			for(int j=0;j<INSTR_WIDTH;j++){
				if(tdb[j]==0xFF) all_data_read=true;
				else all_data_read=false;
			}
			tdb_i=0;
     5cc:	86 2c       	mov	r8, r6
     5ce:	97 2c       	mov	r9, r7
int EEProm::count_lines(){
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
	bool all_data_read=false;
	
	for(int i=0;true;i++){
     5d0:	3f ef       	ldi	r19, 0xFF	; 255
     5d2:	e3 1a       	sub	r14, r19
     5d4:	f3 0a       	sbc	r15, r19
				else all_data_read=false;
			}
			tdb_i=0;
			if(all_data_read) return ctr;
		}else tdb_i++;
	}
     5d6:	d4 cf       	rjmp	.-88     	; 0x580 <_ZN6EEProm11count_linesEv+0x44>
	return ctr;
}
     5d8:	c6 01       	movw	r24, r12
     5da:	6c 96       	adiw	r28, 0x1c	; 28
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	bf 90       	pop	r11
     5f8:	af 90       	pop	r10
     5fa:	9f 90       	pop	r9
     5fc:	8f 90       	pop	r8
     5fe:	7f 90       	pop	r7
     600:	6f 90       	pop	r6
     602:	08 95       	ret

00000604 <_ZN4QEPU4FlagC1Ev>:
#include "qepu.h"

int8_t QEPU::Flag::flaglist[FLAG_COUNT];

QEPU::Flag::Flag(){
	flaglist[ALLOW_BRANCH_STACK]=HIGH;	
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 fc 00 	sts	0x00FC, r24
     60a:	08 95       	ret

0000060c <_ZN4QEPU4Flag7compareEii>:
}

void QEPU::Flag::compare(int data1,int data2){
	flaglist[CND_LWER]=(data1<data2)?HIGH:LOW;
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	86 17       	cp	r24, r22
     610:	97 07       	cpc	r25, r23
     612:	0c f0       	brlt	.+2      	; 0x616 <_ZN4QEPU4Flag7compareEii+0xa>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	20 93 f4 00 	sts	0x00F4, r18
	flaglist[CND_LWER_EQUAL]=(data1<=data2)?HIGH:LOW;
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	68 17       	cp	r22, r24
     61e:	79 07       	cpc	r23, r25
     620:	0c f4       	brge	.+2      	; 0x624 <_ZN4QEPU4Flag7compareEii+0x18>
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	20 93 f5 00 	sts	0x00F5, r18
	flaglist[CND_EQUAL]=(data1==data2)?HIGH:LOW;
     628:	21 e0       	ldi	r18, 0x01	; 1
     62a:	86 17       	cp	r24, r22
     62c:	97 07       	cpc	r25, r23
     62e:	09 f0       	breq	.+2      	; 0x632 <_ZN4QEPU4Flag7compareEii+0x26>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	20 93 f6 00 	sts	0x00F6, r18
	flaglist[CND_GRTER_EQUAL]=(data1>=data2)?HIGH:LOW;
     636:	21 e0       	ldi	r18, 0x01	; 1
     638:	86 17       	cp	r24, r22
     63a:	97 07       	cpc	r25, r23
     63c:	0c f4       	brge	.+2      	; 0x640 <_ZN4QEPU4Flag7compareEii+0x34>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	20 93 f7 00 	sts	0x00F7, r18
	flaglist[CND_GRTER]=(data1>data2)?HIGH:LOW;
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	68 17       	cp	r22, r24
     648:	79 07       	cpc	r23, r25
     64a:	0c f0       	brlt	.+2      	; 0x64e <_ZN4QEPU4Flag7compareEii+0x42>
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	20 93 f8 00 	sts	0x00F8, r18
	flaglist[CND_DIFF]=(data1!=data2)?HIGH:LOW;
     652:	21 e0       	ldi	r18, 0x01	; 1
     654:	86 17       	cp	r24, r22
     656:	97 07       	cpc	r25, r23
     658:	09 f4       	brne	.+2      	; 0x65c <_ZN4QEPU4Flag7compareEii+0x50>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	20 93 f9 00 	sts	0x00F9, r18
	flaglist[CND_ZERO]=(data1==LOW)?HIGH:LOW;
     660:	21 e0       	ldi	r18, 0x01	; 1
     662:	00 97       	sbiw	r24, 0x00	; 0
     664:	09 f0       	breq	.+2      	; 0x668 <_ZN4QEPU4Flag7compareEii+0x5c>
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	20 93 fa 00 	sts	0x00FA, r18
	flaglist[CND_NOT_ZERO]=(data1!=LOW)?HIGH:LOW;
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	89 2b       	or	r24, r25
     670:	09 f4       	brne	.+2      	; 0x674 <_ZN4QEPU4Flag7compareEii+0x68>
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	20 93 fb 00 	sts	0x00FB, r18
     678:	08 95       	ret

0000067a <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){}
     67a:	08 95       	ret

0000067c <_ZN5Gates5touchEd>:
		}
	}
}
/*TO DELETE LATER (END) */

int Gates::touch(double probability){
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	6a 01       	movw	r12, r20
     68a:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     68c:	0e 94 d6 35 	call	0x6bac	; 0x6bac <rand>
     690:	ec 01       	movw	r28, r24
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	3e ef       	ldi	r19, 0xFE	; 254
     696:	4f ef       	ldi	r20, 0xFF	; 255
     698:	56 e4       	ldi	r21, 0x46	; 70
     69a:	c7 01       	movw	r24, r14
     69c:	b6 01       	movw	r22, r12
     69e:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     6a2:	6b 01       	movw	r12, r22
     6a4:	7c 01       	movw	r14, r24
     6a6:	be 01       	movw	r22, r28
     6a8:	88 27       	eor	r24, r24
     6aa:	77 fd       	sbrc	r23, 7
     6ac:	80 95       	com	r24
     6ae:	98 2f       	mov	r25, r24
     6b0:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
     6b4:	9b 01       	movw	r18, r22
     6b6:	ac 01       	movw	r20, r24
     6b8:	c1 e0       	ldi	r28, 0x01	; 1
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
     6bc:	c7 01       	movw	r24, r14
     6be:	b6 01       	movw	r22, r12
     6c0:	0e 94 65 32 	call	0x64ca	; 0x64ca <__gesf2>
     6c4:	88 23       	and	r24, r24
     6c6:	14 f4       	brge	.+4      	; 0x6cc <_ZN5Gates5touchEd+0x50>
     6c8:	c0 e0       	ldi	r28, 0x00	; 0
     6ca:	d0 e0       	ldi	r29, 0x00	; 0
}
     6cc:	ce 01       	movw	r24, r28
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	df 90       	pop	r13
     6d8:	cf 90       	pop	r12
     6da:	08 95       	ret

000006dc <_ZN5Gates17reverse_kroneckerEP7Complexi>:

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     6dc:	2f 92       	push	r2
     6de:	3f 92       	push	r3
     6e0:	4f 92       	push	r4
     6e2:	5f 92       	push	r5
     6e4:	6f 92       	push	r6
     6e6:	7f 92       	push	r7
     6e8:	8f 92       	push	r8
     6ea:	9f 92       	push	r9
     6ec:	af 92       	push	r10
     6ee:	bf 92       	push	r11
     6f0:	cf 92       	push	r12
     6f2:	df 92       	push	r13
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	a4 97       	sbiw	r28, 0x24	; 36
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	8c 01       	movw	r16, r24
     712:	6b 01       	movw	r12, r22
     714:	5a 01       	movw	r10, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     716:	ba 01       	movw	r22, r20
     718:	88 27       	eor	r24, r24
     71a:	77 fd       	sbrc	r23, 7
     71c:	80 95       	com	r24
     71e:	98 2f       	mov	r25, r24
     720:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
     724:	0e 94 ab 32 	call	0x6556	; 0x6556 <log>
     728:	28 e1       	ldi	r18, 0x18	; 24
     72a:	32 e7       	ldi	r19, 0x72	; 114
     72c:	41 e3       	ldi	r20, 0x31	; 49
     72e:	5f e3       	ldi	r21, 0x3F	; 63
     730:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
     734:	2b 01       	movw	r4, r22
     736:	3c 01       	movw	r6, r24
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__addsf3>
     740:	0e 94 09 31 	call	0x6212	; 0x6212 <__fixsfsi>
     744:	69 a3       	std	Y+33, r22	; 0x21
     746:	7a a3       	std	Y+34, r23	; 0x22
     748:	8b a3       	std	Y+35, r24	; 0x23
     74a:	9c a3       	std	Y+36, r25	; 0x24
     74c:	29 a0       	ldd	r2, Y+33	; 0x21
     74e:	3a a0       	ldd	r3, Y+34	; 0x22
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
     750:	c1 01       	movw	r24, r2
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	0e 94 61 34 	call	0x68c2	; 0x68c2 <malloc>
     762:	4c 01       	movw	r8, r24
		
	for(int i=0;i<kron_size;i++)
     764:	1a 14       	cp	r1, r10
     766:	1b 04       	cpc	r1, r11
     768:	0c f0       	brlt	.+2      	; 0x76c <_ZN5Gates17reverse_kroneckerEP7Complexi+0x90>
     76a:	9d c0       	rjmp	.+314    	; 0x8a6 <__stack+0x47>
		if(kron[i].re==1){
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	40 e8       	ldi	r20, 0x80	; 128
     772:	5f e3       	ldi	r21, 0x3F	; 63
     774:	f6 01       	movw	r30, r12
     776:	60 81       	ld	r22, Z
     778:	71 81       	ldd	r23, Z+1	; 0x01
     77a:	82 81       	ldd	r24, Z+2	; 0x02
     77c:	93 81       	ldd	r25, Z+3	; 0x03
     77e:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__cmpsf2>
     782:	81 11       	cpse	r24, r1
     784:	87 c0       	rjmp	.+270    	; 0x894 <__stack+0x35>
     786:	11 c0       	rjmp	.+34     	; 0x7aa <_ZN5Gates17reverse_kroneckerEP7Complexi+0xce>
     788:	f8 e0       	ldi	r31, 0x08	; 8
     78a:	cf 0e       	add	r12, r31
     78c:	d1 1c       	adc	r13, r1
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e8       	ldi	r20, 0x80	; 128
     794:	5f e3       	ldi	r21, 0x3F	; 63
     796:	f6 01       	movw	r30, r12
     798:	60 81       	ld	r22, Z
     79a:	71 81       	ldd	r23, Z+1	; 0x01
     79c:	82 81       	ldd	r24, Z+2	; 0x02
     79e:	93 81       	ldd	r25, Z+3	; 0x03
     7a0:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__cmpsf2>
     7a4:	81 11       	cpse	r24, r1
     7a6:	78 c0       	rjmp	.+240    	; 0x898 <__stack+0x39>
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <_ZN5Gates17reverse_kroneckerEP7Complexi+0xd2>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     7aa:	e1 2c       	mov	r14, r1
     7ac:	f1 2c       	mov	r15, r1
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
     7ae:	c3 01       	movw	r24, r6
     7b0:	b2 01       	movw	r22, r4
     7b2:	0e 94 09 31 	call	0x6212	; 0x6212 <__fixsfsi>
     7b6:	ab 01       	movw	r20, r22
     7b8:	b7 01       	movw	r22, r14
     7ba:	c8 01       	movw	r24, r16
     7bc:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <_ZN5Utils10int2binstrEii>
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     7c0:	12 14       	cp	r1, r2
     7c2:	13 04       	cpc	r1, r3
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xec>
     7c6:	6f c0       	rjmp	.+222    	; 0x8a6 <__stack+0x47>
     7c8:	7c 01       	movw	r14, r24
     7ca:	54 01       	movw	r10, r8
     7cc:	64 01       	movw	r12, r8
     7ce:	f8 e0       	ldi	r31, 0x08	; 8
     7d0:	cf 0e       	add	r12, r31
     7d2:	d1 1c       	adc	r13, r1
     7d4:	49 a0       	ldd	r4, Y+33	; 0x21
     7d6:	5a a0       	ldd	r5, Y+34	; 0x22
     7d8:	48 0e       	add	r4, r24
     7da:	59 1e       	adc	r5, r25
				if(toBin[j]=='1'){
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     7dc:	68 94       	set
     7de:	77 24       	eor	r7, r7
     7e0:	73 f8       	bld	r7, 3
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
				if(toBin[j]=='1'){
     7e2:	f7 01       	movw	r30, r14
     7e4:	81 91       	ld	r24, Z+
     7e6:	7f 01       	movw	r14, r30
     7e8:	81 33       	cpi	r24, 0x31	; 49
     7ea:	29 f5       	brne	.+74     	; 0x836 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x15a>
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
     7ec:	00 e0       	ldi	r16, 0x00	; 0
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	98 01       	movw	r18, r16
     7f2:	b9 01       	movw	r22, r18
     7f4:	a8 01       	movw	r20, r16
     7f6:	ce 01       	movw	r24, r28
     7f8:	49 96       	adiw	r24, 0x19	; 25
     7fa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     7fe:	fe 01       	movw	r30, r28
     800:	79 96       	adiw	r30, 0x19	; 25
     802:	d5 01       	movw	r26, r10
     804:	87 2d       	mov	r24, r7
     806:	01 90       	ld	r0, Z+
     808:	0d 92       	st	X+, r0
     80a:	8a 95       	dec	r24
     80c:	e1 f7       	brne	.-8      	; 0x806 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x12a>
     80e:	00 e0       	ldi	r16, 0x00	; 0
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	98 01       	movw	r18, r16
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	60 e8       	ldi	r22, 0x80	; 128
     81a:	7f e3       	ldi	r23, 0x3F	; 63
     81c:	ce 01       	movw	r24, r28
     81e:	41 96       	adiw	r24, 0x11	; 17
     820:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     824:	fe 01       	movw	r30, r28
     826:	71 96       	adiw	r30, 0x11	; 17
     828:	d6 01       	movw	r26, r12
     82a:	87 2d       	mov	r24, r7
     82c:	01 90       	ld	r0, Z+
     82e:	0d 92       	st	X+, r0
     830:	8a 95       	dec	r24
     832:	e1 f7       	brne	.-8      	; 0x82c <_ZN5Gates17reverse_kroneckerEP7Complexi+0x150>
     834:	24 c0       	rjmp	.+72     	; 0x87e <__stack+0x1f>
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     836:	00 e0       	ldi	r16, 0x00	; 0
     838:	10 e0       	ldi	r17, 0x00	; 0
     83a:	98 01       	movw	r18, r16
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	60 e8       	ldi	r22, 0x80	; 128
     842:	7f e3       	ldi	r23, 0x3F	; 63
     844:	ce 01       	movw	r24, r28
     846:	09 96       	adiw	r24, 0x09	; 9
     848:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     84c:	fe 01       	movw	r30, r28
     84e:	39 96       	adiw	r30, 0x09	; 9
     850:	d5 01       	movw	r26, r10
     852:	87 2d       	mov	r24, r7
     854:	01 90       	ld	r0, Z+
     856:	0d 92       	st	X+, r0
     858:	8a 95       	dec	r24
     85a:	e1 f7       	brne	.-8      	; 0x854 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x178>
     85c:	00 e0       	ldi	r16, 0x00	; 0
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	98 01       	movw	r18, r16
     862:	b9 01       	movw	r22, r18
     864:	a8 01       	movw	r20, r16
     866:	ce 01       	movw	r24, r28
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     86e:	fe 01       	movw	r30, r28
     870:	31 96       	adiw	r30, 0x01	; 1
     872:	d6 01       	movw	r26, r12
     874:	87 2d       	mov	r24, r7
     876:	01 90       	ld	r0, Z+
     878:	0d 92       	st	X+, r0
     87a:	8a 95       	dec	r24
     87c:	e1 f7       	brne	.-8      	; 0x876 <__stack+0x17>
     87e:	f0 e1       	ldi	r31, 0x10	; 16
     880:	af 0e       	add	r10, r31
     882:	b1 1c       	adc	r11, r1
     884:	20 e1       	ldi	r18, 0x10	; 16
     886:	c2 0e       	add	r12, r18
     888:	d1 1c       	adc	r13, r1
		
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     88a:	e4 14       	cp	r14, r4
     88c:	f5 04       	cpc	r15, r5
     88e:	09 f0       	breq	.+2      	; 0x892 <__stack+0x33>
     890:	a8 cf       	rjmp	.-176    	; 0x7e2 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x106>
     892:	09 c0       	rjmp	.+18     	; 0x8a6 <__stack+0x47>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     894:	e1 2c       	mov	r14, r1
     896:	f1 2c       	mov	r15, r1
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	e8 1a       	sub	r14, r24
     89c:	f8 0a       	sbc	r15, r24
     89e:	ea 14       	cp	r14, r10
     8a0:	fb 04       	cpc	r15, r11
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <__stack+0x47>
     8a4:	71 cf       	rjmp	.-286    	; 0x788 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xac>
				index_rev_kro+=2;
			}
			break;
		}
	return reversed_kronecker;
}
     8a6:	c4 01       	movw	r24, r8
     8a8:	a4 96       	adiw	r28, 0x24	; 36
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	bf 90       	pop	r11
     8c6:	af 90       	pop	r10
     8c8:	9f 90       	pop	r9
     8ca:	8f 90       	pop	r8
     8cc:	7f 90       	pop	r7
     8ce:	6f 90       	pop	r6
     8d0:	5f 90       	pop	r5
     8d2:	4f 90       	pop	r4
     8d4:	3f 90       	pop	r3
     8d6:	2f 90       	pop	r2
     8d8:	08 95       	ret

000008da <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     8da:	2f 92       	push	r2
     8dc:	3f 92       	push	r3
     8de:	4f 92       	push	r4
     8e0:	5f 92       	push	r5
     8e2:	6f 92       	push	r6
     8e4:	7f 92       	push	r7
     8e6:	8f 92       	push	r8
     8e8:	9f 92       	push	r9
     8ea:	af 92       	push	r10
     8ec:	bf 92       	push	r11
     8ee:	cf 92       	push	r12
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	28 97       	sbiw	r28, 0x08	; 8
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	6c 01       	movw	r12, r24
     910:	3b 01       	movw	r6, r22
     912:	1a 01       	movw	r2, r20
     914:	3e 83       	std	Y+6, r19	; 0x06
     916:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     918:	41 30       	cpi	r20, 0x01	; 1
     91a:	51 05       	cpc	r21, r1
     91c:	09 f4       	brne	.+2      	; 0x920 <_ZN5Gates9kroneckerEP7Complexii+0x46>
     91e:	b8 c0       	rjmp	.+368    	; 0xa90 <_ZN5Gates9kroneckerEP7Complexii+0x1b6>
	int kron_size=utils.custom_pow(2,qb_count);
     920:	9a 01       	movw	r18, r20
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e4       	ldi	r23, 0x40	; 64
     92a:	0e 94 77 2f 	call	0x5eee	; 0x5eee <_ZN5Utils10custom_powEfi>
     92e:	0e 94 09 31 	call	0x6212	; 0x6212 <__fixsfsi>
     932:	7b 01       	movw	r14, r22
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     934:	fb 01       	movw	r30, r22
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	fa 83       	std	Y+2, r31	; 0x02
     944:	e9 83       	std	Y+1, r30	; 0x01
     946:	cf 01       	movw	r24, r30
     948:	0e 94 61 34 	call	0x68c2	; 0x68c2 <malloc>
     94c:	8b 83       	std	Y+3, r24	; 0x03
     94e:	9c 83       	std	Y+4, r25	; 0x04
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     950:	1e 14       	cp	r1, r14
     952:	1f 04       	cpc	r1, r15
     954:	0c f0       	brlt	.+2      	; 0x958 <_ZN5Gates9kroneckerEP7Complexii+0x7e>
     956:	4f c0       	rjmp	.+158    	; 0x9f6 <_ZN5Gates9kroneckerEP7Complexii+0x11c>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     958:	22 0c       	add	r2, r2
     95a:	33 1c       	adc	r3, r3
     95c:	08 2f       	mov	r16, r24
     95e:	19 2f       	mov	r17, r25
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     960:	81 2c       	mov	r8, r1
     962:	91 2c       	mov	r9, r1
	int kron_size=utils.custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
     964:	e2 e0       	ldi	r30, 0x02	; 2
     966:	f0 e0       	ldi	r31, 0x00	; 0
Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=utils.custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
     968:	41 2c       	mov	r4, r1
     96a:	51 2c       	mov	r5, r1
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     96c:	18 87       	std	Y+8, r17	; 0x08
     96e:	0f 83       	std	Y+7, r16	; 0x07
     970:	56 01       	movw	r10, r12
     972:	67 01       	movw	r12, r14
     974:	2e 16       	cp	r2, r30
     976:	3f 06       	cpc	r3, r31
     978:	29 f4       	brne	.+10     	; 0x984 <_ZN5Gates9kroneckerEP7Complexii+0xaa>
     97a:	ff ef       	ldi	r31, 0xFF	; 255
     97c:	4f 1a       	sub	r4, r31
     97e:	5f 0a       	sbc	r5, r31
     980:	e2 e0       	ldi	r30, 0x02	; 2
     982:	f0 e0       	ldi	r31, 0x00	; 0
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     984:	7f 01       	movw	r14, r30
     986:	2f ef       	ldi	r18, 0xFF	; 255
     988:	e2 1a       	sub	r14, r18
     98a:	f2 0a       	sbc	r15, r18
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	e6 0d       	add	r30, r6
     99a:	f7 1d       	adc	r31, r7
     99c:	00 81       	ld	r16, Z
     99e:	11 81       	ldd	r17, Z+1	; 0x01
     9a0:	22 81       	ldd	r18, Z+2	; 0x02
     9a2:	33 81       	ldd	r19, Z+3	; 0x03
     9a4:	44 81       	ldd	r20, Z+4	; 0x04
     9a6:	55 81       	ldd	r21, Z+5	; 0x05
     9a8:	66 81       	ldd	r22, Z+6	; 0x06
     9aa:	77 81       	ldd	r23, Z+7	; 0x07
     9ac:	c2 01       	movw	r24, r4
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	86 0d       	add	r24, r6
     9bc:	97 1d       	adc	r25, r7
     9be:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7Complex3mulES_>
     9c2:	ef 81       	ldd	r30, Y+7	; 0x07
     9c4:	f8 85       	ldd	r31, Y+8	; 0x08
     9c6:	20 83       	st	Z, r18
     9c8:	31 83       	std	Z+1, r19	; 0x01
     9ca:	42 83       	std	Z+2, r20	; 0x02
     9cc:	53 83       	std	Z+3, r21	; 0x03
     9ce:	64 83       	std	Z+4, r22	; 0x04
     9d0:	75 83       	std	Z+5, r23	; 0x05
     9d2:	86 83       	std	Z+6, r24	; 0x06
     9d4:	97 83       	std	Z+7, r25	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     9d6:	ff ef       	ldi	r31, 0xFF	; 255
     9d8:	8f 1a       	sub	r8, r31
     9da:	9f 0a       	sbc	r9, r31
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	28 5f       	subi	r18, 0xF8	; 248
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	38 87       	std	Y+8, r19	; 0x08
     9e6:	2f 83       	std	Y+7, r18	; 0x07
     9e8:	8c 14       	cp	r8, r12
     9ea:	9d 04       	cpc	r9, r13
     9ec:	11 f0       	breq	.+4      	; 0x9f2 <_ZN5Gates9kroneckerEP7Complexii+0x118>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     9ee:	f7 01       	movw	r30, r14
     9f0:	c1 cf       	rjmp	.-126    	; 0x974 <_ZN5Gates9kroneckerEP7Complexii+0x9a>
     9f2:	76 01       	movw	r14, r12
     9f4:	65 01       	movw	r12, r10
	}
	
	if(touch_enable){
     9f6:	8d 81       	ldd	r24, Y+5	; 0x05
     9f8:	9e 81       	ldd	r25, Y+6	; 0x06
     9fa:	89 2b       	or	r24, r25
     9fc:	a9 f5       	brne	.+106    	; 0xa68 <_ZN5Gates9kroneckerEP7Complexii+0x18e>
     9fe:	42 c0       	rjmp	.+132    	; 0xa84 <_ZN5Gates9kroneckerEP7Complexii+0x1aa>
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     a00:	0d 81       	ldd	r16, Y+5	; 0x05
     a02:	1e 81       	ldd	r17, Y+6	; 0x06
     a04:	f8 01       	movw	r30, r16
     a06:	40 81       	ld	r20, Z
     a08:	51 81       	ldd	r21, Z+1	; 0x01
     a0a:	62 81       	ldd	r22, Z+2	; 0x02
     a0c:	73 81       	ldd	r23, Z+3	; 0x03
     a0e:	c6 01       	movw	r24, r12
     a10:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN5Gates5touchEd>
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	d9 f4       	brne	.+54     	; 0xa4e <_ZN5Gates9kroneckerEP7Complexii+0x174>
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	9a 81       	ldd	r25, Y+2	; 0x02
     a1c:	88 0d       	add	r24, r8
     a1e:	99 1d       	adc	r25, r9
     a20:	f4 01       	movw	r30, r8
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     a22:	10 82       	st	Z, r1
     a24:	11 82       	std	Z+1, r1	; 0x01
     a26:	12 82       	std	Z+2, r1	; 0x02
     a28:	13 82       	std	Z+3, r1	; 0x03
     a2a:	14 82       	std	Z+4, r1	; 0x04
     a2c:	15 82       	std	Z+5, r1	; 0x05
     a2e:	16 82       	std	Z+6, r1	; 0x06
     a30:	17 82       	std	Z+7, r1	; 0x07
     a32:	38 96       	adiw	r30, 0x08	; 8
     a34:	e8 17       	cp	r30, r24
     a36:	f9 07       	cpc	r31, r25
     a38:	a1 f7       	brne	.-24     	; 0xa22 <_ZN5Gates9kroneckerEP7Complexii+0x148>
				kronvec[i].re=binary_touch;
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e8       	ldi	r26, 0x80	; 128
     a40:	bf e3       	ldi	r27, 0x3F	; 63
     a42:	f8 01       	movw	r30, r16
     a44:	80 83       	st	Z, r24
     a46:	91 83       	std	Z+1, r25	; 0x01
     a48:	a2 83       	std	Z+2, r26	; 0x02
     a4a:	b3 83       	std	Z+3, r27	; 0x03
     a4c:	1b c0       	rjmp	.+54     	; 0xa84 <_ZN5Gates9kroneckerEP7Complexii+0x1aa>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     a4e:	ff ef       	ldi	r31, 0xFF	; 255
     a50:	af 1a       	sub	r10, r31
     a52:	bf 0a       	sbc	r11, r31
     a54:	2d 81       	ldd	r18, Y+5	; 0x05
     a56:	3e 81       	ldd	r19, Y+6	; 0x06
     a58:	28 5f       	subi	r18, 0xF8	; 248
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	3e 83       	std	Y+6, r19	; 0x06
     a5e:	2d 83       	std	Y+5, r18	; 0x05
     a60:	ae 14       	cp	r10, r14
     a62:	bf 04       	cpc	r11, r15
     a64:	69 f6       	brne	.-102    	; 0xa00 <_ZN5Gates9kroneckerEP7Complexii+0x126>
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <_ZN5Gates9kroneckerEP7Complexii+0x196>
     a68:	4b 80       	ldd	r4, Y+3	; 0x03
     a6a:	5c 80       	ldd	r5, Y+4	; 0x04
     a6c:	21 2c       	mov	r2, r1
     a6e:	31 2c       	mov	r3, r1
     a70:	1e 14       	cp	r1, r14
     a72:	1f 04       	cpc	r1, r15
     a74:	ec f7       	brge	.-6      	; 0xa70 <_ZN5Gates9kroneckerEP7Complexii+0x196>
     a76:	84 2c       	mov	r8, r4
     a78:	95 2c       	mov	r9, r5
     a7a:	4d 82       	std	Y+5, r4	; 0x05
     a7c:	5e 82       	std	Y+6, r5	; 0x06
     a7e:	a2 2c       	mov	r10, r2
     a80:	b3 2c       	mov	r11, r3
     a82:	be cf       	rjmp	.-132    	; 0xa00 <_ZN5Gates9kroneckerEP7Complexii+0x126>
				kronvec[i].re=binary_touch;
				binary_touch=0;
				break;
			}
	}
	free(vec);
     a84:	c3 01       	movw	r24, r6
     a86:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
	return kronvec;
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	9c 81       	ldd	r25, Y+4	; 0x04
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <_ZN5Gates9kroneckerEP7Complexii+0x1ba>
		}
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     a90:	86 2f       	mov	r24, r22
     a92:	97 2d       	mov	r25, r7
				break;
			}
	}
	free(vec);
	return kronvec;
}
     a94:	28 96       	adiw	r28, 0x08	; 8
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	bf 90       	pop	r11
     ab2:	af 90       	pop	r10
     ab4:	9f 90       	pop	r9
     ab6:	8f 90       	pop	r8
     ab8:	7f 90       	pop	r7
     aba:	6f 90       	pop	r6
     abc:	5f 90       	pop	r5
     abe:	4f 90       	pop	r4
     ac0:	3f 90       	pop	r3
     ac2:	2f 90       	pop	r2
     ac4:	08 95       	ret

00000ac6 <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     ac6:	2f 92       	push	r2
     ac8:	3f 92       	push	r3
     aca:	4f 92       	push	r4
     acc:	5f 92       	push	r5
     ace:	6f 92       	push	r6
     ad0:	7f 92       	push	r7
     ad2:	8f 92       	push	r8
     ad4:	9f 92       	push	r9
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	29 97       	sbiw	r28, 0x09	; 9
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	99 87       	std	Y+9, r25	; 0x09
     afc:	88 87       	std	Y+8, r24	; 0x08
     afe:	7f 83       	std	Y+7, r23	; 0x07
     b00:	6e 83       	std	Y+6, r22	; 0x06
     b02:	a4 2e       	mov	r10, r20
     b04:	b5 2e       	mov	r11, r21
     b06:	c2 2e       	mov	r12, r18
     b08:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     b0a:	cb 01       	movw	r24, r22
     b0c:	82 95       	swap	r24
     b0e:	92 95       	swap	r25
     b10:	90 7f       	andi	r25, 0xF0	; 240
     b12:	98 27       	eor	r25, r24
     b14:	80 7f       	andi	r24, 0xF0	; 240
     b16:	98 27       	eor	r25, r24
     b18:	0e 94 61 34 	call	0x68c2	; 0x68c2 <malloc>
     b1c:	9d 83       	std	Y+5, r25	; 0x05
     b1e:	8c 83       	std	Y+4, r24	; 0x04
	if(vec==NULL){
     b20:	89 2b       	or	r24, r25
     b22:	51 f0       	breq	.+20     	; 0xb38 <_ZN5Gates8ampl2vecEiPiS0_+0x72>
		s.writestr("ERROR");
		while(1);
	}
	
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     b24:	8e 81       	ldd	r24, Y+6	; 0x06
     b26:	9f 81       	ldd	r25, Y+7	; 0x07
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	9b 83       	std	Y+3, r25	; 0x03
     b2e:	8a 83       	std	Y+2, r24	; 0x02
     b30:	18 16       	cp	r1, r24
     b32:	19 06       	cpc	r1, r25
     b34:	64 f0       	brlt	.+24     	; 0xb4e <_ZN5Gates8ampl2vecEiPiS0_+0x88>
     b36:	b1 c0       	rjmp	.+354    	; 0xc9a <_ZN5Gates8ampl2vecEiPiS0_+0x1d4>
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	if(vec==NULL){
		Serial s;
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <_ZN6SerialC1Ev>
		Utils u;
		s.writestr("ERROR");
     b40:	6a e6       	ldi	r22, 0x6A	; 106
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <_ZN6Serial8writestrEPc>
     b4c:	ff cf       	rjmp	.-2      	; 0xb4c <_ZN5Gates8ampl2vecEiPiS0_+0x86>
     b4e:	0c 81       	ldd	r16, Y+4	; 0x04
     b50:	1d 81       	ldd	r17, Y+5	; 0x05
     b52:	ea 2c       	mov	r14, r10
     b54:	fb 2c       	mov	r15, r11
     b56:	2c 2c       	mov	r2, r12
     b58:	3d 2c       	mov	r3, r13
		while(1);
	}
	
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     b5a:	c1 2c       	mov	r12, r1
     b5c:	d1 2c       	mov	r13, r1
     b5e:	57 01       	movw	r10, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     b60:	f7 01       	movw	r30, r14
     b62:	41 90       	ld	r4, Z+
     b64:	51 90       	ld	r5, Z+
     b66:	7f 01       	movw	r14, r30
     b68:	66 24       	eor	r6, r6
     b6a:	57 fc       	sbrc	r5, 7
     b6c:	60 94       	com	r6
     b6e:	76 2c       	mov	r7, r6
     b70:	c3 01       	movw	r24, r6
     b72:	b2 01       	movw	r22, r4
     b74:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
     b78:	2b ed       	ldi	r18, 0xDB	; 219
     b7a:	3f e0       	ldi	r19, 0x0F	; 15
     b7c:	49 e4       	ldi	r20, 0x49	; 73
     b7e:	50 e4       	ldi	r21, 0x40	; 64
     b80:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	44 eb       	ldi	r20, 0xB4	; 180
     b8a:	53 e4       	ldi	r21, 0x43	; 67
     b8c:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
     b90:	0e 94 6d 30 	call	0x60da	; 0x60da <cos>
     b94:	f8 01       	movw	r30, r16
     b96:	60 83       	st	Z, r22
     b98:	71 83       	std	Z+1, r23	; 0x01
     b9a:	82 83       	std	Z+2, r24	; 0x02
     b9c:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     b9e:	c3 01       	movw	r24, r6
     ba0:	b2 01       	movw	r22, r4
     ba2:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
     ba6:	2b ed       	ldi	r18, 0xDB	; 219
     ba8:	3f e0       	ldi	r19, 0x0F	; 15
     baa:	49 e4       	ldi	r20, 0x49	; 73
     bac:	50 e4       	ldi	r21, 0x40	; 64
     bae:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	44 eb       	ldi	r20, 0xB4	; 180
     bb8:	53 e4       	ldi	r21, 0x43	; 67
     bba:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
     bbe:	0e 94 81 33 	call	0x6702	; 0x6702 <sin>
     bc2:	2b 01       	movw	r4, r22
     bc4:	3c 01       	movw	r6, r24
     bc6:	41 01       	movw	r8, r2
     bc8:	f1 01       	movw	r30, r2
     bca:	61 91       	ld	r22, Z+
     bcc:	71 91       	ld	r23, Z+
     bce:	1f 01       	movw	r2, r30
     bd0:	88 27       	eor	r24, r24
     bd2:	77 fd       	sbrc	r23, 7
     bd4:	80 95       	com	r24
     bd6:	98 2f       	mov	r25, r24
     bd8:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
     bdc:	2b ed       	ldi	r18, 0xDB	; 219
     bde:	3f e0       	ldi	r19, 0x0F	; 15
     be0:	49 e4       	ldi	r20, 0x49	; 73
     be2:	50 e4       	ldi	r21, 0x40	; 64
     be4:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	44 e3       	ldi	r20, 0x34	; 52
     bee:	53 e4       	ldi	r21, 0x43	; 67
     bf0:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
     bf4:	0e 94 6d 30 	call	0x60da	; 0x60da <cos>
     bf8:	9b 01       	movw	r18, r22
     bfa:	ac 01       	movw	r20, r24
     bfc:	c3 01       	movw	r24, r6
     bfe:	b2 01       	movw	r22, r4
     c00:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     c04:	f8 01       	movw	r30, r16
     c06:	60 87       	std	Z+8, r22	; 0x08
     c08:	71 87       	std	Z+9, r23	; 0x09
     c0a:	82 87       	std	Z+10, r24	; 0x0a
     c0c:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index]*M_PI)/180);  // BETA IM
     c0e:	f5 01       	movw	r30, r10
     c10:	60 81       	ld	r22, Z
     c12:	71 81       	ldd	r23, Z+1	; 0x01
     c14:	88 27       	eor	r24, r24
     c16:	77 fd       	sbrc	r23, 7
     c18:	80 95       	com	r24
     c1a:	98 2f       	mov	r25, r24
     c1c:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
     c20:	2b ed       	ldi	r18, 0xDB	; 219
     c22:	3f e0       	ldi	r19, 0x0F	; 15
     c24:	49 e4       	ldi	r20, 0x49	; 73
     c26:	50 e4       	ldi	r21, 0x40	; 64
     c28:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	44 eb       	ldi	r20, 0xB4	; 180
     c32:	53 e4       	ldi	r21, 0x43	; 67
     c34:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
     c38:	0e 94 81 33 	call	0x6702	; 0x6702 <sin>
     c3c:	2b 01       	movw	r4, r22
     c3e:	3c 01       	movw	r6, r24
     c40:	f4 01       	movw	r30, r8
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	88 27       	eor	r24, r24
     c48:	77 fd       	sbrc	r23, 7
     c4a:	80 95       	com	r24
     c4c:	98 2f       	mov	r25, r24
     c4e:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
     c52:	2b ed       	ldi	r18, 0xDB	; 219
     c54:	3f e0       	ldi	r19, 0x0F	; 15
     c56:	49 e4       	ldi	r20, 0x49	; 73
     c58:	50 e4       	ldi	r21, 0x40	; 64
     c5a:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	44 e3       	ldi	r20, 0x34	; 52
     c64:	53 e4       	ldi	r21, 0x43	; 67
     c66:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
     c6a:	0e 94 81 33 	call	0x6702	; 0x6702 <sin>
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
     c72:	c3 01       	movw	r24, r6
     c74:	b2 01       	movw	r22, r4
     c76:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     c7a:	f8 01       	movw	r30, r16
     c7c:	64 87       	std	Z+12, r22	; 0x0c
     c7e:	75 87       	std	Z+13, r23	; 0x0d
     c80:	86 87       	std	Z+14, r24	; 0x0e
     c82:	97 87       	std	Z+15, r25	; 0x0f
		s.writestr("ERROR");
		while(1);
	}
	
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     c84:	f2 e0       	ldi	r31, 0x02	; 2
     c86:	cf 0e       	add	r12, r31
     c88:	d1 1c       	adc	r13, r1
     c8a:	00 5f       	subi	r16, 0xF0	; 240
     c8c:	1f 4f       	sbci	r17, 0xFF	; 255
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	9b 81       	ldd	r25, Y+3	; 0x03
     c92:	c8 16       	cp	r12, r24
     c94:	d9 06       	cpc	r13, r25
     c96:	0c f4       	brge	.+2      	; 0xc9a <_ZN5Gates8ampl2vecEiPiS0_+0x1d4>
     c98:	62 cf       	rjmp	.-316    	; 0xb5e <_ZN5Gates8ampl2vecEiPiS0_+0x98>
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index]*M_PI)/180);  // BETA IM
		thephi_index++;
	}
	print_states(qb_count*2,vec,"Before: ");
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     c9a:	21 e0       	ldi	r18, 0x01	; 1
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	4e 81       	ldd	r20, Y+6	; 0x06
     ca0:	5f 81       	ldd	r21, Y+7	; 0x07
     ca2:	6c 81       	ldd	r22, Y+4	; 0x04
     ca4:	7d 81       	ldd	r23, Y+5	; 0x05
     ca6:	88 85       	ldd	r24, Y+8	; 0x08
     ca8:	99 85       	ldd	r25, Y+9	; 0x09
     caa:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN5Gates9kroneckerEP7Complexii>
}
     cae:	29 96       	adiw	r28, 0x09	; 9
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	9f 90       	pop	r9
     cd0:	8f 90       	pop	r8
     cd2:	7f 90       	pop	r7
     cd4:	6f 90       	pop	r6
     cd6:	5f 90       	pop	r5
     cd8:	4f 90       	pop	r4
     cda:	3f 90       	pop	r3
     cdc:	2f 90       	pop	r2
     cde:	08 95       	ret

00000ce0 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     ce0:	8f 92       	push	r8
     ce2:	9f 92       	push	r9
     ce4:	af 92       	push	r10
     ce6:	bf 92       	push	r11
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
     cfa:	a6 2e       	mov	r10, r22
     cfc:	b7 2e       	mov	r11, r23
     cfe:	6a 01       	movw	r12, r20
	int kron_size=utils.custom_pow(2,qb_count);
     d00:	9a 01       	movw	r18, r20
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	70 e4       	ldi	r23, 0x40	; 64
     d0a:	0e 94 77 2f 	call	0x5eee	; 0x5eee <_ZN5Utils10custom_powEfi>
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     d0e:	22 e0       	ldi	r18, 0x02	; 2
     d10:	c2 16       	cp	r12, r18
     d12:	d1 04       	cpc	r13, r1
     d14:	54 f0       	brlt	.+20     	; 0xd2a <_ZN5Gates8vec2amplEP7Complexi+0x4a>
	}
	print_states(qb_count*2,vec,"Before: ");
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
}
int * Gates::vec2ampl(Complex * vec,int qb_count){
	int kron_size=utils.custom_pow(2,qb_count);
     d16:	0e 94 09 31 	call	0x6212	; 0x6212 <__fixsfsi>
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     d1a:	ab 01       	movw	r20, r22
     d1c:	6a 2d       	mov	r22, r10
     d1e:	7b 2d       	mov	r23, r11
     d20:	ce 01       	movw	r24, r28
     d22:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_ZN5Gates17reverse_kroneckerEP7Complexi>
     d26:	a8 2e       	mov	r10, r24
     d28:	b9 2e       	mov	r11, r25
	
	int* newthephi=(int*)malloc(sizeof(int)*(qb_count*2));
     d2a:	c6 01       	movw	r24, r12
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0e 94 61 34 	call	0x68c2	; 0x68c2 <malloc>
     d38:	88 2e       	mov	r8, r24
     d3a:	99 2e       	mov	r9, r25
	for(int i=0;i<qb_count*2;i++) if(i%2==0) newthephi[i]=(360*acos(vec[i].re))/M_PI; else newthephi[i]=(180*vec[i].arg())/M_PI;
     d3c:	cc 0c       	add	r12, r12
     d3e:	dd 1c       	adc	r13, r13
     d40:	1c 14       	cp	r1, r12
     d42:	1d 04       	cpc	r1, r13
     d44:	f4 f5       	brge	.+124    	; 0xdc2 <_ZN5Gates8vec2amplEP7Complexi+0xe2>
     d46:	ea 2c       	mov	r14, r10
     d48:	fb 2c       	mov	r15, r11
     d4a:	08 2f       	mov	r16, r24
     d4c:	19 2f       	mov	r17, r25
     d4e:	c0 e0       	ldi	r28, 0x00	; 0
     d50:	d0 e0       	ldi	r29, 0x00	; 0
     d52:	c0 fd       	sbrc	r28, 0
     d54:	19 c0       	rjmp	.+50     	; 0xd88 <_ZN5Gates8vec2amplEP7Complexi+0xa8>
     d56:	f7 01       	movw	r30, r14
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <acos>
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	44 eb       	ldi	r20, 0xB4	; 180
     d6a:	53 e4       	ldi	r21, 0x43	; 67
     d6c:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     d70:	2b ed       	ldi	r18, 0xDB	; 219
     d72:	3f e0       	ldi	r19, 0x0F	; 15
     d74:	49 e4       	ldi	r20, 0x49	; 73
     d76:	50 e4       	ldi	r21, 0x40	; 64
     d78:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
     d7c:	0e 94 09 31 	call	0x6212	; 0x6212 <__fixsfsi>
     d80:	f8 01       	movw	r30, r16
     d82:	71 83       	std	Z+1, r23	; 0x01
     d84:	60 83       	st	Z, r22
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <_ZN5Gates8vec2amplEP7Complexi+0xd0>
     d88:	c7 01       	movw	r24, r14
     d8a:	0e 94 31 02 	call	0x462	; 0x462 <_ZN7Complex3argEv>
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	44 e3       	ldi	r20, 0x34	; 52
     d94:	53 e4       	ldi	r21, 0x43	; 67
     d96:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
     d9a:	2b ed       	ldi	r18, 0xDB	; 219
     d9c:	3f e0       	ldi	r19, 0x0F	; 15
     d9e:	49 e4       	ldi	r20, 0x49	; 73
     da0:	50 e4       	ldi	r21, 0x40	; 64
     da2:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
     da6:	0e 94 09 31 	call	0x6212	; 0x6212 <__fixsfsi>
     daa:	f8 01       	movw	r30, r16
     dac:	71 83       	std	Z+1, r23	; 0x01
     dae:	60 83       	st	Z, r22
     db0:	21 96       	adiw	r28, 0x01	; 1
     db2:	f8 e0       	ldi	r31, 0x08	; 8
     db4:	ef 0e       	add	r14, r31
     db6:	f1 1c       	adc	r15, r1
     db8:	0e 5f       	subi	r16, 0xFE	; 254
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	cc 15       	cp	r28, r12
     dbe:	dd 05       	cpc	r29, r13
     dc0:	41 f6       	brne	.-112    	; 0xd52 <_ZN5Gates8vec2amplEP7Complexi+0x72>
	
	print_states(kron_size,vec,"After: ");
	free(vec);
     dc2:	8a 2d       	mov	r24, r10
     dc4:	9b 2d       	mov	r25, r11
     dc6:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
	return newthephi;
}
     dca:	88 2d       	mov	r24, r8
     dcc:	99 2d       	mov	r25, r9
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	af 90       	pop	r10
     de2:	9f 90       	pop	r9
     de4:	8f 90       	pop	r8
     de6:	08 95       	ret

00000de8 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     de8:	2f 92       	push	r2
     dea:	3f 92       	push	r3
     dec:	4f 92       	push	r4
     dee:	5f 92       	push	r5
     df0:	6f 92       	push	r6
     df2:	7f 92       	push	r7
     df4:	8f 92       	push	r8
     df6:	9f 92       	push	r9
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	60 97       	sbiw	r28, 0x10	; 16
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	4b 01       	movw	r8, r22
     e1e:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     e20:	80 e1       	ldi	r24, 0x10	; 16
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 61 34 	call	0x68c2	; 0x68c2 <malloc>
     e28:	38 2e       	mov	r3, r24
     e2a:	29 2e       	mov	r2, r25
     e2c:	c8 2e       	mov	r12, r24
     e2e:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     e30:	a1 2c       	mov	r10, r1
     e32:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e34:	24 01       	movw	r4, r8
     e36:	88 e0       	ldi	r24, 0x08	; 8
     e38:	48 0e       	add	r4, r24
     e3a:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     e3c:	ce 01       	movw	r24, r28
     e3e:	09 96       	adiw	r24, 0x09	; 9
     e40:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e44:	75 01       	movw	r14, r10
     e46:	ee 0c       	add	r14, r14
     e48:	ff 1c       	adc	r15, r15
     e4a:	ee 0c       	add	r14, r14
     e4c:	ff 1c       	adc	r15, r15
     e4e:	ee 0c       	add	r14, r14
     e50:	ff 1c       	adc	r15, r15
     e52:	e6 0c       	add	r14, r6
     e54:	f7 1c       	adc	r15, r7
     e56:	d7 01       	movw	r26, r14
     e58:	0c 91       	ld	r16, X
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	1c 91       	ld	r17, X
     e5e:	11 97       	sbiw	r26, 0x01	; 1
     e60:	12 96       	adiw	r26, 0x02	; 2
     e62:	2c 91       	ld	r18, X
     e64:	12 97       	sbiw	r26, 0x02	; 2
     e66:	13 96       	adiw	r26, 0x03	; 3
     e68:	3c 91       	ld	r19, X
     e6a:	13 97       	sbiw	r26, 0x03	; 3
     e6c:	14 96       	adiw	r26, 0x04	; 4
     e6e:	4c 91       	ld	r20, X
     e70:	14 97       	sbiw	r26, 0x04	; 4
     e72:	15 96       	adiw	r26, 0x05	; 5
     e74:	5c 91       	ld	r21, X
     e76:	15 97       	sbiw	r26, 0x05	; 5
     e78:	16 96       	adiw	r26, 0x06	; 6
     e7a:	6c 91       	ld	r22, X
     e7c:	16 97       	sbiw	r26, 0x06	; 6
     e7e:	17 96       	adiw	r26, 0x07	; 7
     e80:	7c 91       	ld	r23, X
     e82:	c4 01       	movw	r24, r8
     e84:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7Complex3mulES_>
     e88:	02 2f       	mov	r16, r18
     e8a:	13 2f       	mov	r17, r19
     e8c:	24 2f       	mov	r18, r20
     e8e:	35 2f       	mov	r19, r21
     e90:	46 2f       	mov	r20, r22
     e92:	57 2f       	mov	r21, r23
     e94:	68 2f       	mov	r22, r24
     e96:	79 2f       	mov	r23, r25
     e98:	ce 01       	movw	r24, r28
     e9a:	09 96       	adiw	r24, 0x09	; 9
     e9c:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Complex3addES_>
     ea0:	29 87       	std	Y+9, r18	; 0x09
     ea2:	3a 87       	std	Y+10, r19	; 0x0a
     ea4:	4b 87       	std	Y+11, r20	; 0x0b
     ea6:	5c 87       	std	Y+12, r21	; 0x0c
     ea8:	6d 87       	std	Y+13, r22	; 0x0d
     eaa:	7e 87       	std	Y+14, r23	; 0x0e
     eac:	8f 87       	std	Y+15, r24	; 0x0f
     eae:	98 8b       	std	Y+16, r25	; 0x10
     eb0:	f7 01       	movw	r30, r14
     eb2:	70 96       	adiw	r30, 0x10	; 16
     eb4:	d7 01       	movw	r26, r14
     eb6:	50 96       	adiw	r26, 0x10	; 16
     eb8:	0c 91       	ld	r16, X
     eba:	11 81       	ldd	r17, Z+1	; 0x01
     ebc:	22 81       	ldd	r18, Z+2	; 0x02
     ebe:	33 81       	ldd	r19, Z+3	; 0x03
     ec0:	44 81       	ldd	r20, Z+4	; 0x04
     ec2:	55 81       	ldd	r21, Z+5	; 0x05
     ec4:	66 81       	ldd	r22, Z+6	; 0x06
     ec6:	77 81       	ldd	r23, Z+7	; 0x07
     ec8:	c2 01       	movw	r24, r4
     eca:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7Complex3mulES_>
     ece:	02 2f       	mov	r16, r18
     ed0:	13 2f       	mov	r17, r19
     ed2:	24 2f       	mov	r18, r20
     ed4:	35 2f       	mov	r19, r21
     ed6:	46 2f       	mov	r20, r22
     ed8:	57 2f       	mov	r21, r23
     eda:	68 2f       	mov	r22, r24
     edc:	79 2f       	mov	r23, r25
     ede:	ce 01       	movw	r24, r28
     ee0:	09 96       	adiw	r24, 0x09	; 9
     ee2:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Complex3addES_>
     ee6:	29 87       	std	Y+9, r18	; 0x09
     ee8:	3a 87       	std	Y+10, r19	; 0x0a
     eea:	4b 87       	std	Y+11, r20	; 0x0b
     eec:	5c 87       	std	Y+12, r21	; 0x0c
     eee:	6d 87       	std	Y+13, r22	; 0x0d
     ef0:	7e 87       	std	Y+14, r23	; 0x0e
     ef2:	8f 87       	std	Y+15, r24	; 0x0f
     ef4:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     ef6:	89 85       	ldd	r24, Y+9	; 0x09
     ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
     efa:	ab 85       	ldd	r26, Y+11	; 0x0b
     efc:	bc 85       	ldd	r27, Y+12	; 0x0c
     efe:	f6 01       	movw	r30, r12
     f00:	80 83       	st	Z, r24
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	a2 83       	std	Z+2, r26	; 0x02
     f06:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     f08:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0c:	af 85       	ldd	r26, Y+15	; 0x0f
     f0e:	b8 89       	ldd	r27, Y+16	; 0x10
     f10:	84 83       	std	Z+4, r24	; 0x04
     f12:	95 83       	std	Z+5, r25	; 0x05
     f14:	a6 83       	std	Z+6, r26	; 0x06
     f16:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     f18:	ff ef       	ldi	r31, 0xFF	; 255
     f1a:	af 1a       	sub	r10, r31
     f1c:	bf 0a       	sbc	r11, r31
     f1e:	88 e0       	ldi	r24, 0x08	; 8
     f20:	c8 0e       	add	r12, r24
     f22:	d1 1c       	adc	r13, r1
     f24:	a2 e0       	ldi	r26, 0x02	; 2
     f26:	aa 16       	cp	r10, r26
     f28:	b1 04       	cpc	r11, r1
     f2a:	09 f0       	breq	.+2      	; 0xf2e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     f2c:	87 cf       	rjmp	.-242    	; 0xe3c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	free(q);
     f2e:	c4 01       	movw	r24, r8
     f30:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
	return result;
}
     f34:	83 2d       	mov	r24, r3
     f36:	92 2d       	mov	r25, r2
     f38:	60 96       	adiw	r28, 0x10	; 16
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	df 90       	pop	r13
     f52:	cf 90       	pop	r12
     f54:	bf 90       	pop	r11
     f56:	af 90       	pop	r10
     f58:	9f 90       	pop	r9
     f5a:	8f 90       	pop	r8
     f5c:	7f 90       	pop	r7
     f5e:	6f 90       	pop	r6
     f60:	5f 90       	pop	r5
     f62:	4f 90       	pop	r4
     f64:	3f 90       	pop	r3
     f66:	2f 90       	pop	r2
     f68:	08 95       	ret

00000f6a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     f6a:	2f 92       	push	r2
     f6c:	3f 92       	push	r3
     f6e:	4f 92       	push	r4
     f70:	5f 92       	push	r5
     f72:	6f 92       	push	r6
     f74:	7f 92       	push	r7
     f76:	8f 92       	push	r8
     f78:	9f 92       	push	r9
     f7a:	af 92       	push	r10
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	64 97       	sbiw	r28, 0x14	; 20
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	3b 01       	movw	r6, r22
     fa0:	e4 2e       	mov	r14, r20
     fa2:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     fa4:	80 e2       	ldi	r24, 0x20	; 32
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 61 34 	call	0x68c2	; 0x68c2 <malloc>
     fac:	8b 8b       	std	Y+19, r24	; 0x13
     fae:	9c 8b       	std	Y+20, r25	; 0x14
     fb0:	48 2e       	mov	r4, r24
     fb2:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     fb4:	81 2c       	mov	r8, r1
     fb6:	91 2c       	mov	r9, r1
     fb8:	e9 8a       	std	Y+17, r14	; 0x11
     fba:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     fbc:	21 2c       	mov	r2, r1
     fbe:	31 2c       	mov	r3, r1
     fc0:	ce 01       	movw	r24, r28
     fc2:	09 96       	adiw	r24, 0x09	; 9
     fc4:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN7ComplexC1Ev>
     fc8:	c9 88       	ldd	r12, Y+17	; 0x11
     fca:	da 88       	ldd	r13, Y+18	; 0x12
     fcc:	e2 2c       	mov	r14, r2
     fce:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     fd0:	54 01       	movw	r10, r8
     fd2:	aa 0c       	add	r10, r10
     fd4:	bb 1c       	adc	r11, r11
     fd6:	aa 0c       	add	r10, r10
     fd8:	bb 1c       	adc	r11, r11
     fda:	aa 0c       	add	r10, r10
     fdc:	bb 1c       	adc	r11, r11
     fde:	f5 01       	movw	r30, r10
     fe0:	ec 0d       	add	r30, r12
     fe2:	fd 1d       	adc	r31, r13
     fe4:	00 81       	ld	r16, Z
     fe6:	11 81       	ldd	r17, Z+1	; 0x01
     fe8:	22 81       	ldd	r18, Z+2	; 0x02
     fea:	33 81       	ldd	r19, Z+3	; 0x03
     fec:	44 81       	ldd	r20, Z+4	; 0x04
     fee:	55 81       	ldd	r21, Z+5	; 0x05
     ff0:	66 81       	ldd	r22, Z+6	; 0x06
     ff2:	77 81       	ldd	r23, Z+7	; 0x07
     ff4:	c3 01       	movw	r24, r6
     ff6:	8e 0d       	add	r24, r14
     ff8:	9f 1d       	adc	r25, r15
     ffa:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7Complex3mulES_>
     ffe:	29 83       	std	Y+1, r18	; 0x01
    1000:	3a 83       	std	Y+2, r19	; 0x02
    1002:	4b 83       	std	Y+3, r20	; 0x03
    1004:	5c 83       	std	Y+4, r21	; 0x04
    1006:	6d 83       	std	Y+5, r22	; 0x05
    1008:	7e 83       	std	Y+6, r23	; 0x06
    100a:	8f 83       	std	Y+7, r24	; 0x07
    100c:	98 87       	std	Y+8, r25	; 0x08
    100e:	02 2f       	mov	r16, r18
    1010:	13 2f       	mov	r17, r19
    1012:	24 2f       	mov	r18, r20
    1014:	35 2f       	mov	r19, r21
    1016:	46 2f       	mov	r20, r22
    1018:	57 2f       	mov	r21, r23
    101a:	68 2f       	mov	r22, r24
    101c:	79 2f       	mov	r23, r25
    101e:	ce 01       	movw	r24, r28
    1020:	09 96       	adiw	r24, 0x09	; 9
    1022:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Complex3addES_>
    1026:	29 87       	std	Y+9, r18	; 0x09
    1028:	3a 87       	std	Y+10, r19	; 0x0a
    102a:	4b 87       	std	Y+11, r20	; 0x0b
    102c:	5c 87       	std	Y+12, r21	; 0x0c
    102e:	6d 87       	std	Y+13, r22	; 0x0d
    1030:	7e 87       	std	Y+14, r23	; 0x0e
    1032:	8f 87       	std	Y+15, r24	; 0x0f
    1034:	98 8b       	std	Y+16, r25	; 0x10
    1036:	88 e0       	ldi	r24, 0x08	; 8
    1038:	e8 0e       	add	r14, r24
    103a:	f1 1c       	adc	r15, r1
    103c:	e0 e2       	ldi	r30, 0x20	; 32
    103e:	ce 0e       	add	r12, r30
    1040:	d1 1c       	adc	r13, r1
    1042:	f0 e2       	ldi	r31, 0x20	; 32
    1044:	ef 16       	cp	r14, r31
    1046:	f1 04       	cpc	r15, r1
    1048:	51 f6       	brne	.-108    	; 0xfde <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
    104a:	89 85       	ldd	r24, Y+9	; 0x09
    104c:	9a 85       	ldd	r25, Y+10	; 0x0a
    104e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1050:	bc 85       	ldd	r27, Y+12	; 0x0c
    1052:	f2 01       	movw	r30, r4
    1054:	80 83       	st	Z, r24
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	a2 83       	std	Z+2, r26	; 0x02
    105a:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    105c:	8d 85       	ldd	r24, Y+13	; 0x0d
    105e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1060:	af 85       	ldd	r26, Y+15	; 0x0f
    1062:	b8 89       	ldd	r27, Y+16	; 0x10
    1064:	84 83       	std	Z+4, r24	; 0x04
    1066:	95 83       	std	Z+5, r25	; 0x05
    1068:	a6 83       	std	Z+6, r26	; 0x06
    106a:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    106c:	ff ef       	ldi	r31, 0xFF	; 255
    106e:	8f 1a       	sub	r8, r31
    1070:	9f 0a       	sbc	r9, r31
    1072:	88 e0       	ldi	r24, 0x08	; 8
    1074:	48 0e       	add	r4, r24
    1076:	51 1c       	adc	r5, r1
    1078:	e4 e0       	ldi	r30, 0x04	; 4
    107a:	8e 16       	cp	r8, r30
    107c:	91 04       	cpc	r9, r1
    107e:	09 f0       	breq	.+2      	; 0x1082 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
    1080:	9f cf       	rjmp	.-194    	; 0xfc0 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    1082:	8b 89       	ldd	r24, Y+19	; 0x13
    1084:	9c 89       	ldd	r25, Y+20	; 0x14
    1086:	64 96       	adiw	r28, 0x14	; 20
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ff 90       	pop	r15
    109c:	ef 90       	pop	r14
    109e:	df 90       	pop	r13
    10a0:	cf 90       	pop	r12
    10a2:	bf 90       	pop	r11
    10a4:	af 90       	pop	r10
    10a6:	9f 90       	pop	r9
    10a8:	8f 90       	pop	r8
    10aa:	7f 90       	pop	r7
    10ac:	6f 90       	pop	r6
    10ae:	5f 90       	pop	r5
    10b0:	4f 90       	pop	r4
    10b2:	3f 90       	pop	r3
    10b4:	2f 90       	pop	r2
    10b6:	08 95       	ret

000010b8 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>:
Complex * Gates::multiply8x8(Complex *q,Complex matrix[8][8]){
    10b8:	2f 92       	push	r2
    10ba:	3f 92       	push	r3
    10bc:	4f 92       	push	r4
    10be:	5f 92       	push	r5
    10c0:	6f 92       	push	r6
    10c2:	7f 92       	push	r7
    10c4:	8f 92       	push	r8
    10c6:	9f 92       	push	r9
    10c8:	af 92       	push	r10
    10ca:	bf 92       	push	r11
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	62 97       	sbiw	r28, 0x12	; 18
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	4b 01       	movw	r8, r22
    10ee:	34 2e       	mov	r3, r20
    10f0:	25 2e       	mov	r2, r21
	int qb_size=8;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
    10f2:	80 e4       	ldi	r24, 0x40	; 64
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 61 34 	call	0x68c2	; 0x68c2 <malloc>
    10fa:	89 8b       	std	Y+17, r24	; 0x11
    10fc:	9a 8b       	std	Y+18, r25	; 0x12
    10fe:	48 2e       	mov	r4, r24
    1100:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
    1102:	61 2c       	mov	r6, r1
    1104:	71 2c       	mov	r7, r1
		Complex tmp;
    1106:	ce 01       	movw	r24, r28
    1108:	09 96       	adiw	r24, 0x09	; 9
    110a:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN7ComplexC1Ev>
    110e:	c3 2c       	mov	r12, r3
    1110:	d2 2c       	mov	r13, r2
    1112:	e1 2c       	mov	r14, r1
    1114:	f1 2c       	mov	r15, r1
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
    1116:	53 01       	movw	r10, r6
    1118:	aa 0c       	add	r10, r10
    111a:	bb 1c       	adc	r11, r11
    111c:	aa 0c       	add	r10, r10
    111e:	bb 1c       	adc	r11, r11
    1120:	aa 0c       	add	r10, r10
    1122:	bb 1c       	adc	r11, r11
    1124:	f5 01       	movw	r30, r10
    1126:	ec 0d       	add	r30, r12
    1128:	fd 1d       	adc	r31, r13
    112a:	00 81       	ld	r16, Z
    112c:	11 81       	ldd	r17, Z+1	; 0x01
    112e:	22 81       	ldd	r18, Z+2	; 0x02
    1130:	33 81       	ldd	r19, Z+3	; 0x03
    1132:	44 81       	ldd	r20, Z+4	; 0x04
    1134:	55 81       	ldd	r21, Z+5	; 0x05
    1136:	66 81       	ldd	r22, Z+6	; 0x06
    1138:	77 81       	ldd	r23, Z+7	; 0x07
    113a:	c4 01       	movw	r24, r8
    113c:	8e 0d       	add	r24, r14
    113e:	9f 1d       	adc	r25, r15
    1140:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7Complex3mulES_>
    1144:	29 83       	std	Y+1, r18	; 0x01
    1146:	3a 83       	std	Y+2, r19	; 0x02
    1148:	4b 83       	std	Y+3, r20	; 0x03
    114a:	5c 83       	std	Y+4, r21	; 0x04
    114c:	6d 83       	std	Y+5, r22	; 0x05
    114e:	7e 83       	std	Y+6, r23	; 0x06
    1150:	8f 83       	std	Y+7, r24	; 0x07
    1152:	98 87       	std	Y+8, r25	; 0x08
    1154:	02 2f       	mov	r16, r18
    1156:	13 2f       	mov	r17, r19
    1158:	24 2f       	mov	r18, r20
    115a:	35 2f       	mov	r19, r21
    115c:	46 2f       	mov	r20, r22
    115e:	57 2f       	mov	r21, r23
    1160:	68 2f       	mov	r22, r24
    1162:	79 2f       	mov	r23, r25
    1164:	ce 01       	movw	r24, r28
    1166:	09 96       	adiw	r24, 0x09	; 9
    1168:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Complex3addES_>
    116c:	29 87       	std	Y+9, r18	; 0x09
    116e:	3a 87       	std	Y+10, r19	; 0x0a
    1170:	4b 87       	std	Y+11, r20	; 0x0b
    1172:	5c 87       	std	Y+12, r21	; 0x0c
    1174:	6d 87       	std	Y+13, r22	; 0x0d
    1176:	7e 87       	std	Y+14, r23	; 0x0e
    1178:	8f 87       	std	Y+15, r24	; 0x0f
    117a:	98 8b       	std	Y+16, r25	; 0x10
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	e8 0e       	add	r14, r24
    1180:	f1 1c       	adc	r15, r1
    1182:	e0 e4       	ldi	r30, 0x40	; 64
    1184:	ce 0e       	add	r12, r30
    1186:	d1 1c       	adc	r13, r1
    1188:	f0 e4       	ldi	r31, 0x40	; 64
    118a:	ef 16       	cp	r14, r31
    118c:	f1 04       	cpc	r15, r1
    118e:	51 f6       	brne	.-108    	; 0x1124 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x6c>
		result[i].re=tmp.re;
    1190:	89 85       	ldd	r24, Y+9	; 0x09
    1192:	9a 85       	ldd	r25, Y+10	; 0x0a
    1194:	ab 85       	ldd	r26, Y+11	; 0x0b
    1196:	bc 85       	ldd	r27, Y+12	; 0x0c
    1198:	f2 01       	movw	r30, r4
    119a:	80 83       	st	Z, r24
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	a2 83       	std	Z+2, r26	; 0x02
    11a0:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    11a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a6:	af 85       	ldd	r26, Y+15	; 0x0f
    11a8:	b8 89       	ldd	r27, Y+16	; 0x10
    11aa:	84 83       	std	Z+4, r24	; 0x04
    11ac:	95 83       	std	Z+5, r25	; 0x05
    11ae:	a6 83       	std	Z+6, r26	; 0x06
    11b0:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply8x8(Complex *q,Complex matrix[8][8]){
	int qb_size=8;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    11b2:	ff ef       	ldi	r31, 0xFF	; 255
    11b4:	6f 1a       	sub	r6, r31
    11b6:	7f 0a       	sbc	r7, r31
    11b8:	88 e0       	ldi	r24, 0x08	; 8
    11ba:	48 0e       	add	r4, r24
    11bc:	51 1c       	adc	r5, r1
    11be:	e8 e0       	ldi	r30, 0x08	; 8
    11c0:	6e 16       	cp	r6, r30
    11c2:	71 04       	cpc	r7, r1
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x110>
    11c6:	9f cf       	rjmp	.-194    	; 0x1106 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x4e>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    11c8:	89 89       	ldd	r24, Y+17	; 0x11
    11ca:	9a 89       	ldd	r25, Y+18	; 0x12
    11cc:	62 96       	adiw	r28, 0x12	; 18
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	df 90       	pop	r13
    11e6:	cf 90       	pop	r12
    11e8:	bf 90       	pop	r11
    11ea:	af 90       	pop	r10
    11ec:	9f 90       	pop	r9
    11ee:	8f 90       	pop	r8
    11f0:	7f 90       	pop	r7
    11f2:	6f 90       	pop	r6
    11f4:	5f 90       	pop	r5
    11f6:	4f 90       	pop	r4
    11f8:	3f 90       	pop	r3
    11fa:	2f 90       	pop	r2
    11fc:	08 95       	ret

000011fe <_ZN5Gates1XEii>:

int * Gates::X(int theta,int phi){
    11fe:	af 92       	push	r10
    1200:	bf 92       	push	r11
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	a4 97       	sbiw	r28, 0x24	; 36
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	7c 01       	movw	r14, r24
    1224:	5b 01       	movw	r10, r22
    1226:	6a 01       	movw	r12, r20
	Complex x_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,0),Complex(1,0)},
													   {Complex(1,0),Complex(0,0)}};
    1228:	00 e0       	ldi	r16, 0x00	; 0
    122a:	10 e0       	ldi	r17, 0x00	; 0
    122c:	98 01       	movw	r18, r16
    122e:	b9 01       	movw	r22, r18
    1230:	a8 01       	movw	r20, r16
    1232:	ce 01       	movw	r24, r28
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    123a:	00 e0       	ldi	r16, 0x00	; 0
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	98 01       	movw	r18, r16
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	60 e8       	ldi	r22, 0x80	; 128
    1246:	7f e3       	ldi	r23, 0x3F	; 63
    1248:	ce 01       	movw	r24, r28
    124a:	09 96       	adiw	r24, 0x09	; 9
    124c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1250:	00 e0       	ldi	r16, 0x00	; 0
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	98 01       	movw	r18, r16
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	60 e8       	ldi	r22, 0x80	; 128
    125c:	7f e3       	ldi	r23, 0x3F	; 63
    125e:	ce 01       	movw	r24, r28
    1260:	41 96       	adiw	r24, 0x11	; 17
    1262:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1266:	00 e0       	ldi	r16, 0x00	; 0
    1268:	10 e0       	ldi	r17, 0x00	; 0
    126a:	98 01       	movw	r18, r16
    126c:	b9 01       	movw	r22, r18
    126e:	a8 01       	movw	r20, r16
    1270:	ce 01       	movw	r24, r28
    1272:	49 96       	adiw	r24, 0x19	; 25
    1274:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[1]={phi};
    1278:	bc a2       	std	Y+36, r11	; 0x24
    127a:	ab a2       	std	Y+35, r10	; 0x23
    127c:	da a2       	std	Y+34, r13	; 0x22
    127e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),x_matrix),QB_SIZE1);
    1280:	9e 01       	movw	r18, r28
    1282:	2f 5d       	subi	r18, 0xDF	; 223
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	ae 01       	movw	r20, r28
    1288:	4d 5d       	subi	r20, 0xDD	; 221
    128a:	5f 4f       	sbci	r21, 0xFF	; 255
    128c:	61 e0       	ldi	r22, 0x01	; 1
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	c7 01       	movw	r24, r14
    1292:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    1296:	ae 01       	movw	r20, r28
    1298:	4f 5f       	subi	r20, 0xFF	; 255
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	bc 01       	movw	r22, r24
    129e:	c7 01       	movw	r24, r14
    12a0:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	bc 01       	movw	r22, r24
    12aa:	c7 01       	movw	r24, r14
    12ac:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    12b0:	a4 96       	adiw	r28, 0x24	; 36
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	08 95       	ret

000012d2 <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	a4 97       	sbiw	r28, 0x24	; 36
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	7c 01       	movw	r14, r24
    12f8:	5b 01       	movw	r10, r22
    12fa:	6a 01       	movw	r12, r20
	Complex y_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,0),Complex(0,-1)},
													   {Complex(0,1),Complex(0,0)}};
    12fc:	00 e0       	ldi	r16, 0x00	; 0
    12fe:	10 e0       	ldi	r17, 0x00	; 0
    1300:	98 01       	movw	r18, r16
    1302:	b9 01       	movw	r22, r18
    1304:	a8 01       	movw	r20, r16
    1306:	ce 01       	movw	r24, r28
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    130e:	00 e0       	ldi	r16, 0x00	; 0
    1310:	10 e0       	ldi	r17, 0x00	; 0
    1312:	20 e8       	ldi	r18, 0x80	; 128
    1314:	3f eb       	ldi	r19, 0xBF	; 191
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	ba 01       	movw	r22, r20
    131c:	ce 01       	movw	r24, r28
    131e:	09 96       	adiw	r24, 0x09	; 9
    1320:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1324:	00 e0       	ldi	r16, 0x00	; 0
    1326:	10 e0       	ldi	r17, 0x00	; 0
    1328:	20 e8       	ldi	r18, 0x80	; 128
    132a:	3f e3       	ldi	r19, 0x3F	; 63
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	ba 01       	movw	r22, r20
    1332:	ce 01       	movw	r24, r28
    1334:	41 96       	adiw	r24, 0x11	; 17
    1336:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    133a:	00 e0       	ldi	r16, 0x00	; 0
    133c:	10 e0       	ldi	r17, 0x00	; 0
    133e:	98 01       	movw	r18, r16
    1340:	b9 01       	movw	r22, r18
    1342:	a8 01       	movw	r20, r16
    1344:	ce 01       	movw	r24, r28
    1346:	49 96       	adiw	r24, 0x19	; 25
    1348:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    134c:	bc a2       	std	Y+36, r11	; 0x24
    134e:	ab a2       	std	Y+35, r10	; 0x23
    1350:	da a2       	std	Y+34, r13	; 0x22
    1352:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),y_matrix),QB_SIZE1);
    1354:	9e 01       	movw	r18, r28
    1356:	2f 5d       	subi	r18, 0xDF	; 223
    1358:	3f 4f       	sbci	r19, 0xFF	; 255
    135a:	ae 01       	movw	r20, r28
    135c:	4d 5d       	subi	r20, 0xDD	; 221
    135e:	5f 4f       	sbci	r21, 0xFF	; 255
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	c7 01       	movw	r24, r14
    1366:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    136a:	ae 01       	movw	r20, r28
    136c:	4f 5f       	subi	r20, 0xFF	; 255
    136e:	5f 4f       	sbci	r21, 0xFF	; 255
    1370:	bc 01       	movw	r22, r24
    1372:	c7 01       	movw	r24, r14
    1374:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	bc 01       	movw	r22, r24
    137e:	c7 01       	movw	r24, r14
    1380:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1384:	a4 96       	adiw	r28, 0x24	; 36
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	bf 90       	pop	r11
    13a2:	af 90       	pop	r10
    13a4:	08 95       	ret

000013a6 <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    13a6:	af 92       	push	r10
    13a8:	bf 92       	push	r11
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	a4 97       	sbiw	r28, 0x24	; 36
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	7c 01       	movw	r14, r24
    13cc:	5b 01       	movw	r10, r22
    13ce:	6a 01       	movw	r12, r20
	Complex z_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(-1,0)}};
    13d0:	00 e0       	ldi	r16, 0x00	; 0
    13d2:	10 e0       	ldi	r17, 0x00	; 0
    13d4:	98 01       	movw	r18, r16
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	60 e8       	ldi	r22, 0x80	; 128
    13dc:	7f e3       	ldi	r23, 0x3F	; 63
    13de:	ce 01       	movw	r24, r28
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    13e6:	00 e0       	ldi	r16, 0x00	; 0
    13e8:	10 e0       	ldi	r17, 0x00	; 0
    13ea:	98 01       	movw	r18, r16
    13ec:	b9 01       	movw	r22, r18
    13ee:	a8 01       	movw	r20, r16
    13f0:	ce 01       	movw	r24, r28
    13f2:	09 96       	adiw	r24, 0x09	; 9
    13f4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    13f8:	00 e0       	ldi	r16, 0x00	; 0
    13fa:	10 e0       	ldi	r17, 0x00	; 0
    13fc:	98 01       	movw	r18, r16
    13fe:	b9 01       	movw	r22, r18
    1400:	a8 01       	movw	r20, r16
    1402:	ce 01       	movw	r24, r28
    1404:	41 96       	adiw	r24, 0x11	; 17
    1406:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    140a:	00 e0       	ldi	r16, 0x00	; 0
    140c:	10 e0       	ldi	r17, 0x00	; 0
    140e:	98 01       	movw	r18, r16
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	60 e8       	ldi	r22, 0x80	; 128
    1416:	7f eb       	ldi	r23, 0xBF	; 191
    1418:	ce 01       	movw	r24, r28
    141a:	49 96       	adiw	r24, 0x19	; 25
    141c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1420:	bc a2       	std	Y+36, r11	; 0x24
    1422:	ab a2       	std	Y+35, r10	; 0x23
    1424:	da a2       	std	Y+34, r13	; 0x22
    1426:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),z_matrix),QB_SIZE1);
    1428:	9e 01       	movw	r18, r28
    142a:	2f 5d       	subi	r18, 0xDF	; 223
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	ae 01       	movw	r20, r28
    1430:	4d 5d       	subi	r20, 0xDD	; 221
    1432:	5f 4f       	sbci	r21, 0xFF	; 255
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	c7 01       	movw	r24, r14
    143a:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    143e:	ae 01       	movw	r20, r28
    1440:	4f 5f       	subi	r20, 0xFF	; 255
    1442:	5f 4f       	sbci	r21, 0xFF	; 255
    1444:	bc 01       	movw	r22, r24
    1446:	c7 01       	movw	r24, r14
    1448:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	bc 01       	movw	r22, r24
    1452:	c7 01       	movw	r24, r14
    1454:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1458:	a4 96       	adiw	r28, 0x24	; 36
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	df 90       	pop	r13
    1472:	cf 90       	pop	r12
    1474:	bf 90       	pop	r11
    1476:	af 90       	pop	r10
    1478:	08 95       	ret

0000147a <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	a4 97       	sbiw	r28, 0x24	; 36
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	7c 01       	movw	r14, r24
    14a0:	5b 01       	movw	r10, r22
    14a2:	6a 01       	movw	r12, r20
	Complex h_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
													   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    14a4:	00 e0       	ldi	r16, 0x00	; 0
    14a6:	10 e0       	ldi	r17, 0x00	; 0
    14a8:	98 01       	movw	r18, r16
    14aa:	43 ef       	ldi	r20, 0xF3	; 243
    14ac:	54 e0       	ldi	r21, 0x04	; 4
    14ae:	65 e3       	ldi	r22, 0x35	; 53
    14b0:	7f e3       	ldi	r23, 0x3F	; 63
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    14ba:	00 e0       	ldi	r16, 0x00	; 0
    14bc:	10 e0       	ldi	r17, 0x00	; 0
    14be:	98 01       	movw	r18, r16
    14c0:	43 ef       	ldi	r20, 0xF3	; 243
    14c2:	54 e0       	ldi	r21, 0x04	; 4
    14c4:	65 e3       	ldi	r22, 0x35	; 53
    14c6:	7f e3       	ldi	r23, 0x3F	; 63
    14c8:	ce 01       	movw	r24, r28
    14ca:	09 96       	adiw	r24, 0x09	; 9
    14cc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    14d0:	00 e0       	ldi	r16, 0x00	; 0
    14d2:	10 e0       	ldi	r17, 0x00	; 0
    14d4:	98 01       	movw	r18, r16
    14d6:	43 ef       	ldi	r20, 0xF3	; 243
    14d8:	54 e0       	ldi	r21, 0x04	; 4
    14da:	65 e3       	ldi	r22, 0x35	; 53
    14dc:	7f e3       	ldi	r23, 0x3F	; 63
    14de:	ce 01       	movw	r24, r28
    14e0:	41 96       	adiw	r24, 0x11	; 17
    14e2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    14e6:	00 e0       	ldi	r16, 0x00	; 0
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	98 01       	movw	r18, r16
    14ec:	43 ef       	ldi	r20, 0xF3	; 243
    14ee:	54 e0       	ldi	r21, 0x04	; 4
    14f0:	65 e3       	ldi	r22, 0x35	; 53
    14f2:	7f eb       	ldi	r23, 0xBF	; 191
    14f4:	ce 01       	movw	r24, r28
    14f6:	49 96       	adiw	r24, 0x19	; 25
    14f8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    14fc:	bc a2       	std	Y+36, r11	; 0x24
    14fe:	ab a2       	std	Y+35, r10	; 0x23
    1500:	da a2       	std	Y+34, r13	; 0x22
    1502:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),h_matrix),QB_SIZE1);
    1504:	9e 01       	movw	r18, r28
    1506:	2f 5d       	subi	r18, 0xDF	; 223
    1508:	3f 4f       	sbci	r19, 0xFF	; 255
    150a:	ae 01       	movw	r20, r28
    150c:	4d 5d       	subi	r20, 0xDD	; 221
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	c7 01       	movw	r24, r14
    1516:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    151a:	ae 01       	movw	r20, r28
    151c:	4f 5f       	subi	r20, 0xFF	; 255
    151e:	5f 4f       	sbci	r21, 0xFF	; 255
    1520:	bc 01       	movw	r22, r24
    1522:	c7 01       	movw	r24, r14
    1524:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	bc 01       	movw	r22, r24
    152e:	c7 01       	movw	r24, r14
    1530:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1534:	a4 96       	adiw	r28, 0x24	; 36
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	08 95       	ret

00001556 <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    1556:	af 92       	push	r10
    1558:	bf 92       	push	r11
    155a:	cf 92       	push	r12
    155c:	df 92       	push	r13
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	a4 97       	sbiw	r28, 0x24	; 36
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	7c 01       	movw	r14, r24
    157c:	5b 01       	movw	r10, r22
    157e:	6a 01       	movw	r12, r20
	Complex s_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(0,1)}};
    1580:	00 e0       	ldi	r16, 0x00	; 0
    1582:	10 e0       	ldi	r17, 0x00	; 0
    1584:	98 01       	movw	r18, r16
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	60 e8       	ldi	r22, 0x80	; 128
    158c:	7f e3       	ldi	r23, 0x3F	; 63
    158e:	ce 01       	movw	r24, r28
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	10 e0       	ldi	r17, 0x00	; 0
    159a:	98 01       	movw	r18, r16
    159c:	b9 01       	movw	r22, r18
    159e:	a8 01       	movw	r20, r16
    15a0:	ce 01       	movw	r24, r28
    15a2:	09 96       	adiw	r24, 0x09	; 9
    15a4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    15a8:	00 e0       	ldi	r16, 0x00	; 0
    15aa:	10 e0       	ldi	r17, 0x00	; 0
    15ac:	98 01       	movw	r18, r16
    15ae:	b9 01       	movw	r22, r18
    15b0:	a8 01       	movw	r20, r16
    15b2:	ce 01       	movw	r24, r28
    15b4:	41 96       	adiw	r24, 0x11	; 17
    15b6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    15ba:	00 e0       	ldi	r16, 0x00	; 0
    15bc:	10 e0       	ldi	r17, 0x00	; 0
    15be:	20 e8       	ldi	r18, 0x80	; 128
    15c0:	3f e3       	ldi	r19, 0x3F	; 63
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	ba 01       	movw	r22, r20
    15c8:	ce 01       	movw	r24, r28
    15ca:	49 96       	adiw	r24, 0x19	; 25
    15cc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    15d0:	bc a2       	std	Y+36, r11	; 0x24
    15d2:	ab a2       	std	Y+35, r10	; 0x23
    15d4:	da a2       	std	Y+34, r13	; 0x22
    15d6:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),s_matrix),QB_SIZE1);
    15d8:	9e 01       	movw	r18, r28
    15da:	2f 5d       	subi	r18, 0xDF	; 223
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	ae 01       	movw	r20, r28
    15e0:	4d 5d       	subi	r20, 0xDD	; 221
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	61 e0       	ldi	r22, 0x01	; 1
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	c7 01       	movw	r24, r14
    15ea:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    15ee:	ae 01       	movw	r20, r28
    15f0:	4f 5f       	subi	r20, 0xFF	; 255
    15f2:	5f 4f       	sbci	r21, 0xFF	; 255
    15f4:	bc 01       	movw	r22, r24
    15f6:	c7 01       	movw	r24, r14
    15f8:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	bc 01       	movw	r22, r24
    1602:	c7 01       	movw	r24, r14
    1604:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1608:	a4 96       	adiw	r28, 0x24	; 36
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	df 90       	pop	r13
    1622:	cf 90       	pop	r12
    1624:	bf 90       	pop	r11
    1626:	af 90       	pop	r10
    1628:	08 95       	ret

0000162a <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    162a:	af 92       	push	r10
    162c:	bf 92       	push	r11
    162e:	cf 92       	push	r12
    1630:	df 92       	push	r13
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	a4 97       	sbiw	r28, 0x24	; 36
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	7c 01       	movw	r14, r24
    1650:	5b 01       	movw	r10, r22
    1652:	6a 01       	movw	r12, r20
	Complex t_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	10 e0       	ldi	r17, 0x00	; 0
    1658:	98 01       	movw	r18, r16
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	60 e8       	ldi	r22, 0x80	; 128
    1660:	7f e3       	ldi	r23, 0x3F	; 63
    1662:	ce 01       	movw	r24, r28
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    166a:	00 e0       	ldi	r16, 0x00	; 0
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	98 01       	movw	r18, r16
    1670:	b9 01       	movw	r22, r18
    1672:	a8 01       	movw	r20, r16
    1674:	ce 01       	movw	r24, r28
    1676:	09 96       	adiw	r24, 0x09	; 9
    1678:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    167c:	00 e0       	ldi	r16, 0x00	; 0
    167e:	10 e0       	ldi	r17, 0x00	; 0
    1680:	98 01       	movw	r18, r16
    1682:	b9 01       	movw	r22, r18
    1684:	a8 01       	movw	r20, r16
    1686:	ce 01       	movw	r24, r28
    1688:	41 96       	adiw	r24, 0x11	; 17
    168a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    168e:	03 ef       	ldi	r16, 0xF3	; 243
    1690:	14 e0       	ldi	r17, 0x04	; 4
    1692:	25 e3       	ldi	r18, 0x35	; 53
    1694:	3f e3       	ldi	r19, 0x3F	; 63
    1696:	b9 01       	movw	r22, r18
    1698:	a8 01       	movw	r20, r16
    169a:	ce 01       	movw	r24, r28
    169c:	49 96       	adiw	r24, 0x19	; 25
    169e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    16a2:	bc a2       	std	Y+36, r11	; 0x24
    16a4:	ab a2       	std	Y+35, r10	; 0x23
    16a6:	da a2       	std	Y+34, r13	; 0x22
    16a8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),t_matrix),QB_SIZE1);
    16aa:	9e 01       	movw	r18, r28
    16ac:	2f 5d       	subi	r18, 0xDF	; 223
    16ae:	3f 4f       	sbci	r19, 0xFF	; 255
    16b0:	ae 01       	movw	r20, r28
    16b2:	4d 5d       	subi	r20, 0xDD	; 221
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	c7 01       	movw	r24, r14
    16bc:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    16c0:	ae 01       	movw	r20, r28
    16c2:	4f 5f       	subi	r20, 0xFF	; 255
    16c4:	5f 4f       	sbci	r21, 0xFF	; 255
    16c6:	bc 01       	movw	r22, r24
    16c8:	c7 01       	movw	r24, r14
    16ca:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	50 e0       	ldi	r21, 0x00	; 0
    16d2:	bc 01       	movw	r22, r24
    16d4:	c7 01       	movw	r24, r14
    16d6:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    16da:	a4 96       	adiw	r28, 0x24	; 36
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	ff 90       	pop	r15
    16f0:	ef 90       	pop	r14
    16f2:	df 90       	pop	r13
    16f4:	cf 90       	pop	r12
    16f6:	bf 90       	pop	r11
    16f8:	af 90       	pop	r10
    16fa:	08 95       	ret

000016fc <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    16fc:	6f 92       	push	r6
    16fe:	7f 92       	push	r7
    1700:	8f 92       	push	r8
    1702:	9f 92       	push	r9
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	c8 58       	subi	r28, 0x88	; 136
    171e:	d1 09       	sbc	r29, r1
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	7c 01       	movw	r14, r24
    172c:	3b 01       	movw	r6, r22
    172e:	5a 01       	movw	r10, r20
    1730:	49 01       	movw	r8, r18
    1732:	68 01       	movw	r12, r16
	Complex cno_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1734:	00 e0       	ldi	r16, 0x00	; 0
    1736:	10 e0       	ldi	r17, 0x00	; 0
    1738:	98 01       	movw	r18, r16
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	50 e0       	ldi	r21, 0x00	; 0
    173e:	60 e8       	ldi	r22, 0x80	; 128
    1740:	7f e3       	ldi	r23, 0x3F	; 63
    1742:	ce 01       	movw	r24, r28
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    174a:	00 e0       	ldi	r16, 0x00	; 0
    174c:	10 e0       	ldi	r17, 0x00	; 0
    174e:	98 01       	movw	r18, r16
    1750:	b9 01       	movw	r22, r18
    1752:	a8 01       	movw	r20, r16
    1754:	ce 01       	movw	r24, r28
    1756:	09 96       	adiw	r24, 0x09	; 9
    1758:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    175c:	00 e0       	ldi	r16, 0x00	; 0
    175e:	10 e0       	ldi	r17, 0x00	; 0
    1760:	98 01       	movw	r18, r16
    1762:	b9 01       	movw	r22, r18
    1764:	a8 01       	movw	r20, r16
    1766:	ce 01       	movw	r24, r28
    1768:	41 96       	adiw	r24, 0x11	; 17
    176a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    176e:	00 e0       	ldi	r16, 0x00	; 0
    1770:	10 e0       	ldi	r17, 0x00	; 0
    1772:	98 01       	movw	r18, r16
    1774:	b9 01       	movw	r22, r18
    1776:	a8 01       	movw	r20, r16
    1778:	ce 01       	movw	r24, r28
    177a:	49 96       	adiw	r24, 0x19	; 25
    177c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1780:	00 e0       	ldi	r16, 0x00	; 0
    1782:	10 e0       	ldi	r17, 0x00	; 0
    1784:	98 01       	movw	r18, r16
    1786:	b9 01       	movw	r22, r18
    1788:	a8 01       	movw	r20, r16
    178a:	ce 01       	movw	r24, r28
    178c:	81 96       	adiw	r24, 0x21	; 33
    178e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1792:	00 e0       	ldi	r16, 0x00	; 0
    1794:	10 e0       	ldi	r17, 0x00	; 0
    1796:	98 01       	movw	r18, r16
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	60 e8       	ldi	r22, 0x80	; 128
    179e:	7f e3       	ldi	r23, 0x3F	; 63
    17a0:	ce 01       	movw	r24, r28
    17a2:	89 96       	adiw	r24, 0x29	; 41
    17a4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    17a8:	00 e0       	ldi	r16, 0x00	; 0
    17aa:	10 e0       	ldi	r17, 0x00	; 0
    17ac:	98 01       	movw	r18, r16
    17ae:	b9 01       	movw	r22, r18
    17b0:	a8 01       	movw	r20, r16
    17b2:	ce 01       	movw	r24, r28
    17b4:	c1 96       	adiw	r24, 0x31	; 49
    17b6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    17ba:	00 e0       	ldi	r16, 0x00	; 0
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	98 01       	movw	r18, r16
    17c0:	b9 01       	movw	r22, r18
    17c2:	a8 01       	movw	r20, r16
    17c4:	ce 01       	movw	r24, r28
    17c6:	c9 96       	adiw	r24, 0x39	; 57
    17c8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    17cc:	00 e0       	ldi	r16, 0x00	; 0
    17ce:	10 e0       	ldi	r17, 0x00	; 0
    17d0:	98 01       	movw	r18, r16
    17d2:	b9 01       	movw	r22, r18
    17d4:	a8 01       	movw	r20, r16
    17d6:	ce 01       	movw	r24, r28
    17d8:	8f 5b       	subi	r24, 0xBF	; 191
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    17e0:	00 e0       	ldi	r16, 0x00	; 0
    17e2:	10 e0       	ldi	r17, 0x00	; 0
    17e4:	98 01       	movw	r18, r16
    17e6:	b9 01       	movw	r22, r18
    17e8:	a8 01       	movw	r20, r16
    17ea:	ce 01       	movw	r24, r28
    17ec:	87 5b       	subi	r24, 0xB7	; 183
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    17f4:	00 e0       	ldi	r16, 0x00	; 0
    17f6:	10 e0       	ldi	r17, 0x00	; 0
    17f8:	98 01       	movw	r18, r16
    17fa:	b9 01       	movw	r22, r18
    17fc:	a8 01       	movw	r20, r16
    17fe:	ce 01       	movw	r24, r28
    1800:	8f 5a       	subi	r24, 0xAF	; 175
    1802:	9f 4f       	sbci	r25, 0xFF	; 255
    1804:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1808:	00 e0       	ldi	r16, 0x00	; 0
    180a:	10 e0       	ldi	r17, 0x00	; 0
    180c:	98 01       	movw	r18, r16
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	60 e8       	ldi	r22, 0x80	; 128
    1814:	7f e3       	ldi	r23, 0x3F	; 63
    1816:	ce 01       	movw	r24, r28
    1818:	87 5a       	subi	r24, 0xA7	; 167
    181a:	9f 4f       	sbci	r25, 0xFF	; 255
    181c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1820:	00 e0       	ldi	r16, 0x00	; 0
    1822:	10 e0       	ldi	r17, 0x00	; 0
    1824:	98 01       	movw	r18, r16
    1826:	b9 01       	movw	r22, r18
    1828:	a8 01       	movw	r20, r16
    182a:	ce 01       	movw	r24, r28
    182c:	8f 59       	subi	r24, 0x9F	; 159
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1834:	00 e0       	ldi	r16, 0x00	; 0
    1836:	10 e0       	ldi	r17, 0x00	; 0
    1838:	98 01       	movw	r18, r16
    183a:	b9 01       	movw	r22, r18
    183c:	a8 01       	movw	r20, r16
    183e:	ce 01       	movw	r24, r28
    1840:	87 59       	subi	r24, 0x97	; 151
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1848:	00 e0       	ldi	r16, 0x00	; 0
    184a:	10 e0       	ldi	r17, 0x00	; 0
    184c:	98 01       	movw	r18, r16
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	60 e8       	ldi	r22, 0x80	; 128
    1854:	7f e3       	ldi	r23, 0x3F	; 63
    1856:	ce 01       	movw	r24, r28
    1858:	8f 58       	subi	r24, 0x8F	; 143
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1860:	00 e0       	ldi	r16, 0x00	; 0
    1862:	10 e0       	ldi	r17, 0x00	; 0
    1864:	98 01       	movw	r18, r16
    1866:	b9 01       	movw	r22, r18
    1868:	a8 01       	movw	r20, r16
    186a:	ce 01       	movw	r24, r28
    186c:	87 58       	subi	r24, 0x87	; 135
    186e:	9f 4f       	sbci	r25, 0xFF	; 255
    1870:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};						
    1874:	cb 57       	subi	r28, 0x7B	; 123
    1876:	df 4f       	sbci	r29, 0xFF	; 255
    1878:	79 82       	std	Y+1, r7	; 0x01
    187a:	68 82       	st	Y, r6
    187c:	c5 58       	subi	r28, 0x85	; 133
    187e:	d0 40       	sbci	r29, 0x00	; 0
    1880:	c9 57       	subi	r28, 0x79	; 121
    1882:	df 4f       	sbci	r29, 0xFF	; 255
    1884:	99 82       	std	Y+1, r9	; 0x01
    1886:	88 82       	st	Y, r8
    1888:	c7 58       	subi	r28, 0x87	; 135
    188a:	d0 40       	sbci	r29, 0x00	; 0
    188c:	cf 57       	subi	r28, 0x7F	; 127
    188e:	df 4f       	sbci	r29, 0xFF	; 255
    1890:	b9 82       	std	Y+1, r11	; 0x01
    1892:	a8 82       	st	Y, r10
    1894:	c1 58       	subi	r28, 0x81	; 129
    1896:	d0 40       	sbci	r29, 0x00	; 0
    1898:	cd 57       	subi	r28, 0x7D	; 125
    189a:	df 4f       	sbci	r29, 0xFF	; 255
    189c:	d9 82       	std	Y+1, r13	; 0x01
    189e:	c8 82       	st	Y, r12
    18a0:	c3 58       	subi	r28, 0x83	; 131
    18a2:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),cno_matrix),QB_SIZE2);
    18a4:	9e 01       	movw	r18, r28
    18a6:	2f 57       	subi	r18, 0x7F	; 127
    18a8:	3f 4f       	sbci	r19, 0xFF	; 255
    18aa:	ae 01       	movw	r20, r28
    18ac:	4b 57       	subi	r20, 0x7B	; 123
    18ae:	5f 4f       	sbci	r21, 0xFF	; 255
    18b0:	62 e0       	ldi	r22, 0x02	; 2
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	c7 01       	movw	r24, r14
    18b6:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    18ba:	ae 01       	movw	r20, r28
    18bc:	4f 5f       	subi	r20, 0xFF	; 255
    18be:	5f 4f       	sbci	r21, 0xFF	; 255
    18c0:	bc 01       	movw	r22, r24
    18c2:	c7 01       	movw	r24, r14
    18c4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    18c8:	42 e0       	ldi	r20, 0x02	; 2
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	bc 01       	movw	r22, r24
    18ce:	c7 01       	movw	r24, r14
    18d0:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    18d4:	c8 57       	subi	r28, 0x78	; 120
    18d6:	df 4f       	sbci	r29, 0xFF	; 255
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	9f 90       	pop	r9
    18f8:	8f 90       	pop	r8
    18fa:	7f 90       	pop	r7
    18fc:	6f 90       	pop	r6
    18fe:	08 95       	ret

00001900 <_ZN5Gates3CSIEiiii>:
int * Gates::CSI(int theta1, int phi1, int theta2,int phi2){
    1900:	6f 92       	push	r6
    1902:	7f 92       	push	r7
    1904:	8f 92       	push	r8
    1906:	9f 92       	push	r9
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	c8 58       	subi	r28, 0x88	; 136
    1922:	d1 09       	sbc	r29, r1
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	7c 01       	movw	r14, r24
    1930:	3b 01       	movw	r6, r22
    1932:	5a 01       	movw	r10, r20
    1934:	49 01       	movw	r8, r18
    1936:	68 01       	movw	r12, r16
	Complex csi_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(-1,0)}};
    1938:	00 e0       	ldi	r16, 0x00	; 0
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	98 01       	movw	r18, r16
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	60 e8       	ldi	r22, 0x80	; 128
    1944:	7f e3       	ldi	r23, 0x3F	; 63
    1946:	ce 01       	movw	r24, r28
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    194e:	00 e0       	ldi	r16, 0x00	; 0
    1950:	10 e0       	ldi	r17, 0x00	; 0
    1952:	98 01       	movw	r18, r16
    1954:	b9 01       	movw	r22, r18
    1956:	a8 01       	movw	r20, r16
    1958:	ce 01       	movw	r24, r28
    195a:	09 96       	adiw	r24, 0x09	; 9
    195c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1960:	00 e0       	ldi	r16, 0x00	; 0
    1962:	10 e0       	ldi	r17, 0x00	; 0
    1964:	98 01       	movw	r18, r16
    1966:	b9 01       	movw	r22, r18
    1968:	a8 01       	movw	r20, r16
    196a:	ce 01       	movw	r24, r28
    196c:	41 96       	adiw	r24, 0x11	; 17
    196e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1972:	00 e0       	ldi	r16, 0x00	; 0
    1974:	10 e0       	ldi	r17, 0x00	; 0
    1976:	98 01       	movw	r18, r16
    1978:	b9 01       	movw	r22, r18
    197a:	a8 01       	movw	r20, r16
    197c:	ce 01       	movw	r24, r28
    197e:	49 96       	adiw	r24, 0x19	; 25
    1980:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1984:	00 e0       	ldi	r16, 0x00	; 0
    1986:	10 e0       	ldi	r17, 0x00	; 0
    1988:	98 01       	movw	r18, r16
    198a:	b9 01       	movw	r22, r18
    198c:	a8 01       	movw	r20, r16
    198e:	ce 01       	movw	r24, r28
    1990:	81 96       	adiw	r24, 0x21	; 33
    1992:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1996:	00 e0       	ldi	r16, 0x00	; 0
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	98 01       	movw	r18, r16
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	60 e8       	ldi	r22, 0x80	; 128
    19a2:	7f e3       	ldi	r23, 0x3F	; 63
    19a4:	ce 01       	movw	r24, r28
    19a6:	89 96       	adiw	r24, 0x29	; 41
    19a8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    19ac:	00 e0       	ldi	r16, 0x00	; 0
    19ae:	10 e0       	ldi	r17, 0x00	; 0
    19b0:	98 01       	movw	r18, r16
    19b2:	b9 01       	movw	r22, r18
    19b4:	a8 01       	movw	r20, r16
    19b6:	ce 01       	movw	r24, r28
    19b8:	c1 96       	adiw	r24, 0x31	; 49
    19ba:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    19be:	00 e0       	ldi	r16, 0x00	; 0
    19c0:	10 e0       	ldi	r17, 0x00	; 0
    19c2:	98 01       	movw	r18, r16
    19c4:	b9 01       	movw	r22, r18
    19c6:	a8 01       	movw	r20, r16
    19c8:	ce 01       	movw	r24, r28
    19ca:	c9 96       	adiw	r24, 0x39	; 57
    19cc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    19d0:	00 e0       	ldi	r16, 0x00	; 0
    19d2:	10 e0       	ldi	r17, 0x00	; 0
    19d4:	98 01       	movw	r18, r16
    19d6:	b9 01       	movw	r22, r18
    19d8:	a8 01       	movw	r20, r16
    19da:	ce 01       	movw	r24, r28
    19dc:	8f 5b       	subi	r24, 0xBF	; 191
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    19e4:	00 e0       	ldi	r16, 0x00	; 0
    19e6:	10 e0       	ldi	r17, 0x00	; 0
    19e8:	98 01       	movw	r18, r16
    19ea:	b9 01       	movw	r22, r18
    19ec:	a8 01       	movw	r20, r16
    19ee:	ce 01       	movw	r24, r28
    19f0:	87 5b       	subi	r24, 0xB7	; 183
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    19f8:	00 e0       	ldi	r16, 0x00	; 0
    19fa:	10 e0       	ldi	r17, 0x00	; 0
    19fc:	98 01       	movw	r18, r16
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	60 e8       	ldi	r22, 0x80	; 128
    1a04:	7f e3       	ldi	r23, 0x3F	; 63
    1a06:	ce 01       	movw	r24, r28
    1a08:	8f 5a       	subi	r24, 0xAF	; 175
    1a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1a10:	00 e0       	ldi	r16, 0x00	; 0
    1a12:	10 e0       	ldi	r17, 0x00	; 0
    1a14:	98 01       	movw	r18, r16
    1a16:	b9 01       	movw	r22, r18
    1a18:	a8 01       	movw	r20, r16
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	87 5a       	subi	r24, 0xA7	; 167
    1a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a20:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1a24:	00 e0       	ldi	r16, 0x00	; 0
    1a26:	10 e0       	ldi	r17, 0x00	; 0
    1a28:	98 01       	movw	r18, r16
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	a8 01       	movw	r20, r16
    1a2e:	ce 01       	movw	r24, r28
    1a30:	8f 59       	subi	r24, 0x9F	; 159
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1a38:	00 e0       	ldi	r16, 0x00	; 0
    1a3a:	10 e0       	ldi	r17, 0x00	; 0
    1a3c:	98 01       	movw	r18, r16
    1a3e:	b9 01       	movw	r22, r18
    1a40:	a8 01       	movw	r20, r16
    1a42:	ce 01       	movw	r24, r28
    1a44:	87 59       	subi	r24, 0x97	; 151
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1a4c:	00 e0       	ldi	r16, 0x00	; 0
    1a4e:	10 e0       	ldi	r17, 0x00	; 0
    1a50:	98 01       	movw	r18, r16
    1a52:	b9 01       	movw	r22, r18
    1a54:	a8 01       	movw	r20, r16
    1a56:	ce 01       	movw	r24, r28
    1a58:	8f 58       	subi	r24, 0x8F	; 143
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1a60:	00 e0       	ldi	r16, 0x00	; 0
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	98 01       	movw	r18, r16
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	60 e8       	ldi	r22, 0x80	; 128
    1a6c:	7f eb       	ldi	r23, 0xBF	; 191
    1a6e:	ce 01       	movw	r24, r28
    1a70:	87 58       	subi	r24, 0x87	; 135
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1a78:	cb 57       	subi	r28, 0x7B	; 123
    1a7a:	df 4f       	sbci	r29, 0xFF	; 255
    1a7c:	79 82       	std	Y+1, r7	; 0x01
    1a7e:	68 82       	st	Y, r6
    1a80:	c5 58       	subi	r28, 0x85	; 133
    1a82:	d0 40       	sbci	r29, 0x00	; 0
    1a84:	c9 57       	subi	r28, 0x79	; 121
    1a86:	df 4f       	sbci	r29, 0xFF	; 255
    1a88:	99 82       	std	Y+1, r9	; 0x01
    1a8a:	88 82       	st	Y, r8
    1a8c:	c7 58       	subi	r28, 0x87	; 135
    1a8e:	d0 40       	sbci	r29, 0x00	; 0
    1a90:	cf 57       	subi	r28, 0x7F	; 127
    1a92:	df 4f       	sbci	r29, 0xFF	; 255
    1a94:	b9 82       	std	Y+1, r11	; 0x01
    1a96:	a8 82       	st	Y, r10
    1a98:	c1 58       	subi	r28, 0x81	; 129
    1a9a:	d0 40       	sbci	r29, 0x00	; 0
    1a9c:	cd 57       	subi	r28, 0x7D	; 125
    1a9e:	df 4f       	sbci	r29, 0xFF	; 255
    1aa0:	d9 82       	std	Y+1, r13	; 0x01
    1aa2:	c8 82       	st	Y, r12
    1aa4:	c3 58       	subi	r28, 0x83	; 131
    1aa6:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),csi_matrix),QB_SIZE2);
    1aa8:	9e 01       	movw	r18, r28
    1aaa:	2f 57       	subi	r18, 0x7F	; 127
    1aac:	3f 4f       	sbci	r19, 0xFF	; 255
    1aae:	ae 01       	movw	r20, r28
    1ab0:	4b 57       	subi	r20, 0x7B	; 123
    1ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab4:	62 e0       	ldi	r22, 0x02	; 2
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	c7 01       	movw	r24, r14
    1aba:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    1abe:	ae 01       	movw	r20, r28
    1ac0:	4f 5f       	subi	r20, 0xFF	; 255
    1ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1acc:	42 e0       	ldi	r20, 0x02	; 2
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	c7 01       	movw	r24, r14
    1ad4:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1ad8:	c8 57       	subi	r28, 0x78	; 120
    1ada:	df 4f       	sbci	r29, 0xFF	; 255
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	ff 90       	pop	r15
    1af0:	ef 90       	pop	r14
    1af2:	df 90       	pop	r13
    1af4:	cf 90       	pop	r12
    1af6:	bf 90       	pop	r11
    1af8:	af 90       	pop	r10
    1afa:	9f 90       	pop	r9
    1afc:	8f 90       	pop	r8
    1afe:	7f 90       	pop	r7
    1b00:	6f 90       	pop	r6
    1b02:	08 95       	ret

00001b04 <_ZN5Gates3SWAEiiii>:
int * Gates::SWA(int theta1, int phi1, int theta2,int phi2){
    1b04:	6f 92       	push	r6
    1b06:	7f 92       	push	r7
    1b08:	8f 92       	push	r8
    1b0a:	9f 92       	push	r9
    1b0c:	af 92       	push	r10
    1b0e:	bf 92       	push	r11
    1b10:	cf 92       	push	r12
    1b12:	df 92       	push	r13
    1b14:	ef 92       	push	r14
    1b16:	ff 92       	push	r15
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	c8 58       	subi	r28, 0x88	; 136
    1b26:	d1 09       	sbc	r29, r1
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	7c 01       	movw	r14, r24
    1b34:	3b 01       	movw	r6, r22
    1b36:	5a 01       	movw	r10, r20
    1b38:	49 01       	movw	r8, r18
    1b3a:	68 01       	movw	r12, r16
	Complex swa_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    1b3c:	00 e0       	ldi	r16, 0x00	; 0
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
    1b40:	98 01       	movw	r18, r16
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	60 e8       	ldi	r22, 0x80	; 128
    1b48:	7f e3       	ldi	r23, 0x3F	; 63
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b52:	00 e0       	ldi	r16, 0x00	; 0
    1b54:	10 e0       	ldi	r17, 0x00	; 0
    1b56:	98 01       	movw	r18, r16
    1b58:	b9 01       	movw	r22, r18
    1b5a:	a8 01       	movw	r20, r16
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	09 96       	adiw	r24, 0x09	; 9
    1b60:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b64:	00 e0       	ldi	r16, 0x00	; 0
    1b66:	10 e0       	ldi	r17, 0x00	; 0
    1b68:	98 01       	movw	r18, r16
    1b6a:	b9 01       	movw	r22, r18
    1b6c:	a8 01       	movw	r20, r16
    1b6e:	ce 01       	movw	r24, r28
    1b70:	41 96       	adiw	r24, 0x11	; 17
    1b72:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b76:	00 e0       	ldi	r16, 0x00	; 0
    1b78:	10 e0       	ldi	r17, 0x00	; 0
    1b7a:	98 01       	movw	r18, r16
    1b7c:	b9 01       	movw	r22, r18
    1b7e:	a8 01       	movw	r20, r16
    1b80:	ce 01       	movw	r24, r28
    1b82:	49 96       	adiw	r24, 0x19	; 25
    1b84:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b88:	00 e0       	ldi	r16, 0x00	; 0
    1b8a:	10 e0       	ldi	r17, 0x00	; 0
    1b8c:	98 01       	movw	r18, r16
    1b8e:	b9 01       	movw	r22, r18
    1b90:	a8 01       	movw	r20, r16
    1b92:	ce 01       	movw	r24, r28
    1b94:	81 96       	adiw	r24, 0x21	; 33
    1b96:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b9a:	00 e0       	ldi	r16, 0x00	; 0
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
    1b9e:	98 01       	movw	r18, r16
    1ba0:	b9 01       	movw	r22, r18
    1ba2:	a8 01       	movw	r20, r16
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	89 96       	adiw	r24, 0x29	; 41
    1ba8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1bac:	00 e0       	ldi	r16, 0x00	; 0
    1bae:	10 e0       	ldi	r17, 0x00	; 0
    1bb0:	98 01       	movw	r18, r16
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	60 e8       	ldi	r22, 0x80	; 128
    1bb8:	7f e3       	ldi	r23, 0x3F	; 63
    1bba:	ce 01       	movw	r24, r28
    1bbc:	c1 96       	adiw	r24, 0x31	; 49
    1bbe:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1bc2:	00 e0       	ldi	r16, 0x00	; 0
    1bc4:	10 e0       	ldi	r17, 0x00	; 0
    1bc6:	98 01       	movw	r18, r16
    1bc8:	b9 01       	movw	r22, r18
    1bca:	a8 01       	movw	r20, r16
    1bcc:	ce 01       	movw	r24, r28
    1bce:	c9 96       	adiw	r24, 0x39	; 57
    1bd0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1bd4:	00 e0       	ldi	r16, 0x00	; 0
    1bd6:	10 e0       	ldi	r17, 0x00	; 0
    1bd8:	98 01       	movw	r18, r16
    1bda:	b9 01       	movw	r22, r18
    1bdc:	a8 01       	movw	r20, r16
    1bde:	ce 01       	movw	r24, r28
    1be0:	8f 5b       	subi	r24, 0xBF	; 191
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1be8:	00 e0       	ldi	r16, 0x00	; 0
    1bea:	10 e0       	ldi	r17, 0x00	; 0
    1bec:	98 01       	movw	r18, r16
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	60 e8       	ldi	r22, 0x80	; 128
    1bf4:	7f e3       	ldi	r23, 0x3F	; 63
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	87 5b       	subi	r24, 0xB7	; 183
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1c00:	00 e0       	ldi	r16, 0x00	; 0
    1c02:	10 e0       	ldi	r17, 0x00	; 0
    1c04:	98 01       	movw	r18, r16
    1c06:	b9 01       	movw	r22, r18
    1c08:	a8 01       	movw	r20, r16
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	8f 5a       	subi	r24, 0xAF	; 175
    1c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c10:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1c14:	00 e0       	ldi	r16, 0x00	; 0
    1c16:	10 e0       	ldi	r17, 0x00	; 0
    1c18:	98 01       	movw	r18, r16
    1c1a:	b9 01       	movw	r22, r18
    1c1c:	a8 01       	movw	r20, r16
    1c1e:	ce 01       	movw	r24, r28
    1c20:	87 5a       	subi	r24, 0xA7	; 167
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1c28:	00 e0       	ldi	r16, 0x00	; 0
    1c2a:	10 e0       	ldi	r17, 0x00	; 0
    1c2c:	98 01       	movw	r18, r16
    1c2e:	b9 01       	movw	r22, r18
    1c30:	a8 01       	movw	r20, r16
    1c32:	ce 01       	movw	r24, r28
    1c34:	8f 59       	subi	r24, 0x9F	; 159
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1c3c:	00 e0       	ldi	r16, 0x00	; 0
    1c3e:	10 e0       	ldi	r17, 0x00	; 0
    1c40:	98 01       	movw	r18, r16
    1c42:	b9 01       	movw	r22, r18
    1c44:	a8 01       	movw	r20, r16
    1c46:	ce 01       	movw	r24, r28
    1c48:	87 59       	subi	r24, 0x97	; 151
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1c50:	00 e0       	ldi	r16, 0x00	; 0
    1c52:	10 e0       	ldi	r17, 0x00	; 0
    1c54:	98 01       	movw	r18, r16
    1c56:	b9 01       	movw	r22, r18
    1c58:	a8 01       	movw	r20, r16
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	8f 58       	subi	r24, 0x8F	; 143
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1c64:	00 e0       	ldi	r16, 0x00	; 0
    1c66:	10 e0       	ldi	r17, 0x00	; 0
    1c68:	98 01       	movw	r18, r16
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	60 e8       	ldi	r22, 0x80	; 128
    1c70:	7f e3       	ldi	r23, 0x3F	; 63
    1c72:	ce 01       	movw	r24, r28
    1c74:	87 58       	subi	r24, 0x87	; 135
    1c76:	9f 4f       	sbci	r25, 0xFF	; 255
    1c78:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1c7c:	cb 57       	subi	r28, 0x7B	; 123
    1c7e:	df 4f       	sbci	r29, 0xFF	; 255
    1c80:	79 82       	std	Y+1, r7	; 0x01
    1c82:	68 82       	st	Y, r6
    1c84:	c5 58       	subi	r28, 0x85	; 133
    1c86:	d0 40       	sbci	r29, 0x00	; 0
    1c88:	c9 57       	subi	r28, 0x79	; 121
    1c8a:	df 4f       	sbci	r29, 0xFF	; 255
    1c8c:	99 82       	std	Y+1, r9	; 0x01
    1c8e:	88 82       	st	Y, r8
    1c90:	c7 58       	subi	r28, 0x87	; 135
    1c92:	d0 40       	sbci	r29, 0x00	; 0
    1c94:	cf 57       	subi	r28, 0x7F	; 127
    1c96:	df 4f       	sbci	r29, 0xFF	; 255
    1c98:	b9 82       	std	Y+1, r11	; 0x01
    1c9a:	a8 82       	st	Y, r10
    1c9c:	c1 58       	subi	r28, 0x81	; 129
    1c9e:	d0 40       	sbci	r29, 0x00	; 0
    1ca0:	cd 57       	subi	r28, 0x7D	; 125
    1ca2:	df 4f       	sbci	r29, 0xFF	; 255
    1ca4:	d9 82       	std	Y+1, r13	; 0x01
    1ca6:	c8 82       	st	Y, r12
    1ca8:	c3 58       	subi	r28, 0x83	; 131
    1caa:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swa_matrix),QB_SIZE2);	
    1cac:	9e 01       	movw	r18, r28
    1cae:	2f 57       	subi	r18, 0x7F	; 127
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	ae 01       	movw	r20, r28
    1cb4:	4b 57       	subi	r20, 0x7B	; 123
    1cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb8:	62 e0       	ldi	r22, 0x02	; 2
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	c7 01       	movw	r24, r14
    1cbe:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    1cc2:	ae 01       	movw	r20, r28
    1cc4:	4f 5f       	subi	r20, 0xFF	; 255
    1cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc8:	bc 01       	movw	r22, r24
    1cca:	c7 01       	movw	r24, r14
    1ccc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1cd0:	42 e0       	ldi	r20, 0x02	; 2
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	c7 01       	movw	r24, r14
    1cd8:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1cdc:	c8 57       	subi	r28, 0x78	; 120
    1cde:	df 4f       	sbci	r29, 0xFF	; 255
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	df 90       	pop	r13
    1cf8:	cf 90       	pop	r12
    1cfa:	bf 90       	pop	r11
    1cfc:	af 90       	pop	r10
    1cfe:	9f 90       	pop	r9
    1d00:	8f 90       	pop	r8
    1d02:	7f 90       	pop	r7
    1d04:	6f 90       	pop	r6
    1d06:	08 95       	ret

00001d08 <_ZN5Gates3INCEiiii>:
int * Gates::INC(int theta1, int phi1, int theta2,int phi2){
    1d08:	6f 92       	push	r6
    1d0a:	7f 92       	push	r7
    1d0c:	8f 92       	push	r8
    1d0e:	9f 92       	push	r9
    1d10:	af 92       	push	r10
    1d12:	bf 92       	push	r11
    1d14:	cf 92       	push	r12
    1d16:	df 92       	push	r13
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	c8 58       	subi	r28, 0x88	; 136
    1d2a:	d1 09       	sbc	r29, r1
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	7c 01       	movw	r14, r24
    1d38:	3b 01       	movw	r6, r22
    1d3a:	5a 01       	movw	r10, r20
    1d3c:	49 01       	movw	r8, r18
    1d3e:	68 01       	movw	r12, r16
	Complex inc_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)}};
    1d40:	00 e0       	ldi	r16, 0x00	; 0
    1d42:	10 e0       	ldi	r17, 0x00	; 0
    1d44:	98 01       	movw	r18, r16
    1d46:	b9 01       	movw	r22, r18
    1d48:	a8 01       	movw	r20, r16
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d52:	00 e0       	ldi	r16, 0x00	; 0
    1d54:	10 e0       	ldi	r17, 0x00	; 0
    1d56:	98 01       	movw	r18, r16
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	60 e8       	ldi	r22, 0x80	; 128
    1d5e:	7f e3       	ldi	r23, 0x3F	; 63
    1d60:	ce 01       	movw	r24, r28
    1d62:	09 96       	adiw	r24, 0x09	; 9
    1d64:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d68:	00 e0       	ldi	r16, 0x00	; 0
    1d6a:	10 e0       	ldi	r17, 0x00	; 0
    1d6c:	98 01       	movw	r18, r16
    1d6e:	b9 01       	movw	r22, r18
    1d70:	a8 01       	movw	r20, r16
    1d72:	ce 01       	movw	r24, r28
    1d74:	41 96       	adiw	r24, 0x11	; 17
    1d76:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d7a:	00 e0       	ldi	r16, 0x00	; 0
    1d7c:	10 e0       	ldi	r17, 0x00	; 0
    1d7e:	98 01       	movw	r18, r16
    1d80:	b9 01       	movw	r22, r18
    1d82:	a8 01       	movw	r20, r16
    1d84:	ce 01       	movw	r24, r28
    1d86:	49 96       	adiw	r24, 0x19	; 25
    1d88:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d8c:	00 e0       	ldi	r16, 0x00	; 0
    1d8e:	10 e0       	ldi	r17, 0x00	; 0
    1d90:	98 01       	movw	r18, r16
    1d92:	b9 01       	movw	r22, r18
    1d94:	a8 01       	movw	r20, r16
    1d96:	ce 01       	movw	r24, r28
    1d98:	81 96       	adiw	r24, 0x21	; 33
    1d9a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d9e:	00 e0       	ldi	r16, 0x00	; 0
    1da0:	10 e0       	ldi	r17, 0x00	; 0
    1da2:	98 01       	movw	r18, r16
    1da4:	b9 01       	movw	r22, r18
    1da6:	a8 01       	movw	r20, r16
    1da8:	ce 01       	movw	r24, r28
    1daa:	89 96       	adiw	r24, 0x29	; 41
    1dac:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1db0:	00 e0       	ldi	r16, 0x00	; 0
    1db2:	10 e0       	ldi	r17, 0x00	; 0
    1db4:	98 01       	movw	r18, r16
    1db6:	40 e0       	ldi	r20, 0x00	; 0
    1db8:	50 e0       	ldi	r21, 0x00	; 0
    1dba:	60 e8       	ldi	r22, 0x80	; 128
    1dbc:	7f e3       	ldi	r23, 0x3F	; 63
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	c1 96       	adiw	r24, 0x31	; 49
    1dc2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1dc6:	00 e0       	ldi	r16, 0x00	; 0
    1dc8:	10 e0       	ldi	r17, 0x00	; 0
    1dca:	98 01       	movw	r18, r16
    1dcc:	b9 01       	movw	r22, r18
    1dce:	a8 01       	movw	r20, r16
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	c9 96       	adiw	r24, 0x39	; 57
    1dd4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1dd8:	00 e0       	ldi	r16, 0x00	; 0
    1dda:	10 e0       	ldi	r17, 0x00	; 0
    1ddc:	98 01       	movw	r18, r16
    1dde:	b9 01       	movw	r22, r18
    1de0:	a8 01       	movw	r20, r16
    1de2:	ce 01       	movw	r24, r28
    1de4:	8f 5b       	subi	r24, 0xBF	; 191
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1dec:	00 e0       	ldi	r16, 0x00	; 0
    1dee:	10 e0       	ldi	r17, 0x00	; 0
    1df0:	98 01       	movw	r18, r16
    1df2:	b9 01       	movw	r22, r18
    1df4:	a8 01       	movw	r20, r16
    1df6:	ce 01       	movw	r24, r28
    1df8:	87 5b       	subi	r24, 0xB7	; 183
    1dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1e00:	00 e0       	ldi	r16, 0x00	; 0
    1e02:	10 e0       	ldi	r17, 0x00	; 0
    1e04:	98 01       	movw	r18, r16
    1e06:	b9 01       	movw	r22, r18
    1e08:	a8 01       	movw	r20, r16
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	8f 5a       	subi	r24, 0xAF	; 175
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1e14:	00 e0       	ldi	r16, 0x00	; 0
    1e16:	10 e0       	ldi	r17, 0x00	; 0
    1e18:	98 01       	movw	r18, r16
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	60 e8       	ldi	r22, 0x80	; 128
    1e20:	7f e3       	ldi	r23, 0x3F	; 63
    1e22:	ce 01       	movw	r24, r28
    1e24:	87 5a       	subi	r24, 0xA7	; 167
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1e2c:	00 e0       	ldi	r16, 0x00	; 0
    1e2e:	10 e0       	ldi	r17, 0x00	; 0
    1e30:	98 01       	movw	r18, r16
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	60 e8       	ldi	r22, 0x80	; 128
    1e38:	7f e3       	ldi	r23, 0x3F	; 63
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	8f 59       	subi	r24, 0x9F	; 159
    1e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e40:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1e44:	00 e0       	ldi	r16, 0x00	; 0
    1e46:	10 e0       	ldi	r17, 0x00	; 0
    1e48:	98 01       	movw	r18, r16
    1e4a:	b9 01       	movw	r22, r18
    1e4c:	a8 01       	movw	r20, r16
    1e4e:	ce 01       	movw	r24, r28
    1e50:	87 59       	subi	r24, 0x97	; 151
    1e52:	9f 4f       	sbci	r25, 0xFF	; 255
    1e54:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1e58:	00 e0       	ldi	r16, 0x00	; 0
    1e5a:	10 e0       	ldi	r17, 0x00	; 0
    1e5c:	98 01       	movw	r18, r16
    1e5e:	b9 01       	movw	r22, r18
    1e60:	a8 01       	movw	r20, r16
    1e62:	ce 01       	movw	r24, r28
    1e64:	8f 58       	subi	r24, 0x8F	; 143
    1e66:	9f 4f       	sbci	r25, 0xFF	; 255
    1e68:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1e6c:	00 e0       	ldi	r16, 0x00	; 0
    1e6e:	10 e0       	ldi	r17, 0x00	; 0
    1e70:	98 01       	movw	r18, r16
    1e72:	b9 01       	movw	r22, r18
    1e74:	a8 01       	movw	r20, r16
    1e76:	ce 01       	movw	r24, r28
    1e78:	87 58       	subi	r24, 0x87	; 135
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1e80:	cb 57       	subi	r28, 0x7B	; 123
    1e82:	df 4f       	sbci	r29, 0xFF	; 255
    1e84:	79 82       	std	Y+1, r7	; 0x01
    1e86:	68 82       	st	Y, r6
    1e88:	c5 58       	subi	r28, 0x85	; 133
    1e8a:	d0 40       	sbci	r29, 0x00	; 0
    1e8c:	c9 57       	subi	r28, 0x79	; 121
    1e8e:	df 4f       	sbci	r29, 0xFF	; 255
    1e90:	99 82       	std	Y+1, r9	; 0x01
    1e92:	88 82       	st	Y, r8
    1e94:	c7 58       	subi	r28, 0x87	; 135
    1e96:	d0 40       	sbci	r29, 0x00	; 0
    1e98:	cf 57       	subi	r28, 0x7F	; 127
    1e9a:	df 4f       	sbci	r29, 0xFF	; 255
    1e9c:	b9 82       	std	Y+1, r11	; 0x01
    1e9e:	a8 82       	st	Y, r10
    1ea0:	c1 58       	subi	r28, 0x81	; 129
    1ea2:	d0 40       	sbci	r29, 0x00	; 0
    1ea4:	cd 57       	subi	r28, 0x7D	; 125
    1ea6:	df 4f       	sbci	r29, 0xFF	; 255
    1ea8:	d9 82       	std	Y+1, r13	; 0x01
    1eaa:	c8 82       	st	Y, r12
    1eac:	c3 58       	subi	r28, 0x83	; 131
    1eae:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),inc_matrix),QB_SIZE2);
    1eb0:	9e 01       	movw	r18, r28
    1eb2:	2f 57       	subi	r18, 0x7F	; 127
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	ae 01       	movw	r20, r28
    1eb8:	4b 57       	subi	r20, 0x7B	; 123
    1eba:	5f 4f       	sbci	r21, 0xFF	; 255
    1ebc:	62 e0       	ldi	r22, 0x02	; 2
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	c7 01       	movw	r24, r14
    1ec2:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    1ec6:	ae 01       	movw	r20, r28
    1ec8:	4f 5f       	subi	r20, 0xFF	; 255
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	bc 01       	movw	r22, r24
    1ece:	c7 01       	movw	r24, r14
    1ed0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1ed4:	42 e0       	ldi	r20, 0x02	; 2
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	bc 01       	movw	r22, r24
    1eda:	c7 01       	movw	r24, r14
    1edc:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1ee0:	c8 57       	subi	r28, 0x78	; 120
    1ee2:	df 4f       	sbci	r29, 0xFF	; 255
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	df 90       	pop	r13
    1efc:	cf 90       	pop	r12
    1efe:	bf 90       	pop	r11
    1f00:	af 90       	pop	r10
    1f02:	9f 90       	pop	r9
    1f04:	8f 90       	pop	r8
    1f06:	7f 90       	pop	r7
    1f08:	6f 90       	pop	r6
    1f0a:	08 95       	ret

00001f0c <_ZN5Gates3DECEiiii>:
int * Gates::DEC(int theta1, int phi1, int theta2,int phi2){
    1f0c:	6f 92       	push	r6
    1f0e:	7f 92       	push	r7
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	c8 58       	subi	r28, 0x88	; 136
    1f2e:	d1 09       	sbc	r29, r1
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	7c 01       	movw	r14, r24
    1f3c:	3b 01       	movw	r6, r22
    1f3e:	5a 01       	movw	r10, r20
    1f40:	49 01       	movw	r8, r18
    1f42:	68 01       	movw	r12, r16
	Complex dec_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1f44:	00 e0       	ldi	r16, 0x00	; 0
    1f46:	10 e0       	ldi	r17, 0x00	; 0
    1f48:	98 01       	movw	r18, r16
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	a8 01       	movw	r20, r16
    1f4e:	ce 01       	movw	r24, r28
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1f56:	00 e0       	ldi	r16, 0x00	; 0
    1f58:	10 e0       	ldi	r17, 0x00	; 0
    1f5a:	98 01       	movw	r18, r16
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	a8 01       	movw	r20, r16
    1f60:	ce 01       	movw	r24, r28
    1f62:	09 96       	adiw	r24, 0x09	; 9
    1f64:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1f68:	00 e0       	ldi	r16, 0x00	; 0
    1f6a:	10 e0       	ldi	r17, 0x00	; 0
    1f6c:	98 01       	movw	r18, r16
    1f6e:	b9 01       	movw	r22, r18
    1f70:	a8 01       	movw	r20, r16
    1f72:	ce 01       	movw	r24, r28
    1f74:	41 96       	adiw	r24, 0x11	; 17
    1f76:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1f7a:	00 e0       	ldi	r16, 0x00	; 0
    1f7c:	10 e0       	ldi	r17, 0x00	; 0
    1f7e:	98 01       	movw	r18, r16
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	60 e8       	ldi	r22, 0x80	; 128
    1f86:	7f e3       	ldi	r23, 0x3F	; 63
    1f88:	ce 01       	movw	r24, r28
    1f8a:	49 96       	adiw	r24, 0x19	; 25
    1f8c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1f90:	00 e0       	ldi	r16, 0x00	; 0
    1f92:	10 e0       	ldi	r17, 0x00	; 0
    1f94:	98 01       	movw	r18, r16
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	60 e8       	ldi	r22, 0x80	; 128
    1f9c:	7f e3       	ldi	r23, 0x3F	; 63
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	81 96       	adiw	r24, 0x21	; 33
    1fa2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1fa6:	00 e0       	ldi	r16, 0x00	; 0
    1fa8:	10 e0       	ldi	r17, 0x00	; 0
    1faa:	98 01       	movw	r18, r16
    1fac:	b9 01       	movw	r22, r18
    1fae:	a8 01       	movw	r20, r16
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	89 96       	adiw	r24, 0x29	; 41
    1fb4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1fb8:	00 e0       	ldi	r16, 0x00	; 0
    1fba:	10 e0       	ldi	r17, 0x00	; 0
    1fbc:	98 01       	movw	r18, r16
    1fbe:	b9 01       	movw	r22, r18
    1fc0:	a8 01       	movw	r20, r16
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	c1 96       	adiw	r24, 0x31	; 49
    1fc6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1fca:	00 e0       	ldi	r16, 0x00	; 0
    1fcc:	10 e0       	ldi	r17, 0x00	; 0
    1fce:	98 01       	movw	r18, r16
    1fd0:	b9 01       	movw	r22, r18
    1fd2:	a8 01       	movw	r20, r16
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	c9 96       	adiw	r24, 0x39	; 57
    1fd8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1fdc:	00 e0       	ldi	r16, 0x00	; 0
    1fde:	10 e0       	ldi	r17, 0x00	; 0
    1fe0:	98 01       	movw	r18, r16
    1fe2:	b9 01       	movw	r22, r18
    1fe4:	a8 01       	movw	r20, r16
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	8f 5b       	subi	r24, 0xBF	; 191
    1fea:	9f 4f       	sbci	r25, 0xFF	; 255
    1fec:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1ff0:	00 e0       	ldi	r16, 0x00	; 0
    1ff2:	10 e0       	ldi	r17, 0x00	; 0
    1ff4:	98 01       	movw	r18, r16
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	50 e0       	ldi	r21, 0x00	; 0
    1ffa:	60 e8       	ldi	r22, 0x80	; 128
    1ffc:	7f e3       	ldi	r23, 0x3F	; 63
    1ffe:	ce 01       	movw	r24, r28
    2000:	87 5b       	subi	r24, 0xB7	; 183
    2002:	9f 4f       	sbci	r25, 0xFF	; 255
    2004:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2008:	00 e0       	ldi	r16, 0x00	; 0
    200a:	10 e0       	ldi	r17, 0x00	; 0
    200c:	98 01       	movw	r18, r16
    200e:	b9 01       	movw	r22, r18
    2010:	a8 01       	movw	r20, r16
    2012:	ce 01       	movw	r24, r28
    2014:	8f 5a       	subi	r24, 0xAF	; 175
    2016:	9f 4f       	sbci	r25, 0xFF	; 255
    2018:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    201c:	00 e0       	ldi	r16, 0x00	; 0
    201e:	10 e0       	ldi	r17, 0x00	; 0
    2020:	98 01       	movw	r18, r16
    2022:	b9 01       	movw	r22, r18
    2024:	a8 01       	movw	r20, r16
    2026:	ce 01       	movw	r24, r28
    2028:	87 5a       	subi	r24, 0xA7	; 167
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2030:	00 e0       	ldi	r16, 0x00	; 0
    2032:	10 e0       	ldi	r17, 0x00	; 0
    2034:	98 01       	movw	r18, r16
    2036:	b9 01       	movw	r22, r18
    2038:	a8 01       	movw	r20, r16
    203a:	ce 01       	movw	r24, r28
    203c:	8f 59       	subi	r24, 0x9F	; 159
    203e:	9f 4f       	sbci	r25, 0xFF	; 255
    2040:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2044:	00 e0       	ldi	r16, 0x00	; 0
    2046:	10 e0       	ldi	r17, 0x00	; 0
    2048:	98 01       	movw	r18, r16
    204a:	b9 01       	movw	r22, r18
    204c:	a8 01       	movw	r20, r16
    204e:	ce 01       	movw	r24, r28
    2050:	87 59       	subi	r24, 0x97	; 151
    2052:	9f 4f       	sbci	r25, 0xFF	; 255
    2054:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2058:	00 e0       	ldi	r16, 0x00	; 0
    205a:	10 e0       	ldi	r17, 0x00	; 0
    205c:	98 01       	movw	r18, r16
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	50 e0       	ldi	r21, 0x00	; 0
    2062:	60 e8       	ldi	r22, 0x80	; 128
    2064:	7f e3       	ldi	r23, 0x3F	; 63
    2066:	ce 01       	movw	r24, r28
    2068:	8f 58       	subi	r24, 0x8F	; 143
    206a:	9f 4f       	sbci	r25, 0xFF	; 255
    206c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2070:	00 e0       	ldi	r16, 0x00	; 0
    2072:	10 e0       	ldi	r17, 0x00	; 0
    2074:	98 01       	movw	r18, r16
    2076:	b9 01       	movw	r22, r18
    2078:	a8 01       	movw	r20, r16
    207a:	ce 01       	movw	r24, r28
    207c:	87 58       	subi	r24, 0x87	; 135
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2084:	cb 57       	subi	r28, 0x7B	; 123
    2086:	df 4f       	sbci	r29, 0xFF	; 255
    2088:	79 82       	std	Y+1, r7	; 0x01
    208a:	68 82       	st	Y, r6
    208c:	c5 58       	subi	r28, 0x85	; 133
    208e:	d0 40       	sbci	r29, 0x00	; 0
    2090:	c9 57       	subi	r28, 0x79	; 121
    2092:	df 4f       	sbci	r29, 0xFF	; 255
    2094:	99 82       	std	Y+1, r9	; 0x01
    2096:	88 82       	st	Y, r8
    2098:	c7 58       	subi	r28, 0x87	; 135
    209a:	d0 40       	sbci	r29, 0x00	; 0
    209c:	cf 57       	subi	r28, 0x7F	; 127
    209e:	df 4f       	sbci	r29, 0xFF	; 255
    20a0:	b9 82       	std	Y+1, r11	; 0x01
    20a2:	a8 82       	st	Y, r10
    20a4:	c1 58       	subi	r28, 0x81	; 129
    20a6:	d0 40       	sbci	r29, 0x00	; 0
    20a8:	cd 57       	subi	r28, 0x7D	; 125
    20aa:	df 4f       	sbci	r29, 0xFF	; 255
    20ac:	d9 82       	std	Y+1, r13	; 0x01
    20ae:	c8 82       	st	Y, r12
    20b0:	c3 58       	subi	r28, 0x83	; 131
    20b2:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    20b4:	9e 01       	movw	r18, r28
    20b6:	2f 57       	subi	r18, 0x7F	; 127
    20b8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ba:	ae 01       	movw	r20, r28
    20bc:	4b 57       	subi	r20, 0x7B	; 123
    20be:	5f 4f       	sbci	r21, 0xFF	; 255
    20c0:	62 e0       	ldi	r22, 0x02	; 2
    20c2:	70 e0       	ldi	r23, 0x00	; 0
    20c4:	c7 01       	movw	r24, r14
    20c6:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    20ca:	ae 01       	movw	r20, r28
    20cc:	4f 5f       	subi	r20, 0xFF	; 255
    20ce:	5f 4f       	sbci	r21, 0xFF	; 255
    20d0:	bc 01       	movw	r22, r24
    20d2:	c7 01       	movw	r24, r14
    20d4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    20d8:	42 e0       	ldi	r20, 0x02	; 2
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	bc 01       	movw	r22, r24
    20de:	c7 01       	movw	r24, r14
    20e0:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    20e4:	c8 57       	subi	r28, 0x78	; 120
    20e6:	df 4f       	sbci	r29, 0xFF	; 255
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	ff 90       	pop	r15
    20fc:	ef 90       	pop	r14
    20fe:	df 90       	pop	r13
    2100:	cf 90       	pop	r12
    2102:	bf 90       	pop	r11
    2104:	af 90       	pop	r10
    2106:	9f 90       	pop	r9
    2108:	8f 90       	pop	r8
    210a:	7f 90       	pop	r7
    210c:	6f 90       	pop	r6
    210e:	08 95       	ret

00002110 <_ZN5Gates3SWQEiiii>:
int * Gates::SWQ(int theta1, int phi1, int theta2,int phi2){
    2110:	6f 92       	push	r6
    2112:	7f 92       	push	r7
    2114:	8f 92       	push	r8
    2116:	9f 92       	push	r9
    2118:	af 92       	push	r10
    211a:	bf 92       	push	r11
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	c8 58       	subi	r28, 0x88	; 136
    2132:	d1 09       	sbc	r29, r1
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	7c 01       	movw	r14, r24
    2140:	3b 01       	movw	r6, r22
    2142:	5a 01       	movw	r10, r20
    2144:	49 01       	movw	r8, r18
    2146:	68 01       	movw	r12, r16
	Complex swq_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),   Complex(0,0),   Complex(0,0)},
	 												     {Complex(0,0),Complex(.5,.5), Complex(.5,-.5),Complex(0,0)},
													     {Complex(0,0),Complex(.5,-.5),Complex(.5,.5), Complex(0,0)},
													     {Complex(0,0),Complex(0,0),   Complex(0,0),   Complex(1,0)}};
    2148:	00 e0       	ldi	r16, 0x00	; 0
    214a:	10 e0       	ldi	r17, 0x00	; 0
    214c:	98 01       	movw	r18, r16
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	60 e8       	ldi	r22, 0x80	; 128
    2154:	7f e3       	ldi	r23, 0x3F	; 63
    2156:	ce 01       	movw	r24, r28
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    215e:	00 e0       	ldi	r16, 0x00	; 0
    2160:	10 e0       	ldi	r17, 0x00	; 0
    2162:	98 01       	movw	r18, r16
    2164:	b9 01       	movw	r22, r18
    2166:	a8 01       	movw	r20, r16
    2168:	ce 01       	movw	r24, r28
    216a:	09 96       	adiw	r24, 0x09	; 9
    216c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2170:	00 e0       	ldi	r16, 0x00	; 0
    2172:	10 e0       	ldi	r17, 0x00	; 0
    2174:	98 01       	movw	r18, r16
    2176:	b9 01       	movw	r22, r18
    2178:	a8 01       	movw	r20, r16
    217a:	ce 01       	movw	r24, r28
    217c:	41 96       	adiw	r24, 0x11	; 17
    217e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2182:	00 e0       	ldi	r16, 0x00	; 0
    2184:	10 e0       	ldi	r17, 0x00	; 0
    2186:	98 01       	movw	r18, r16
    2188:	b9 01       	movw	r22, r18
    218a:	a8 01       	movw	r20, r16
    218c:	ce 01       	movw	r24, r28
    218e:	49 96       	adiw	r24, 0x19	; 25
    2190:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2194:	00 e0       	ldi	r16, 0x00	; 0
    2196:	10 e0       	ldi	r17, 0x00	; 0
    2198:	98 01       	movw	r18, r16
    219a:	b9 01       	movw	r22, r18
    219c:	a8 01       	movw	r20, r16
    219e:	ce 01       	movw	r24, r28
    21a0:	81 96       	adiw	r24, 0x21	; 33
    21a2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    21a6:	00 e0       	ldi	r16, 0x00	; 0
    21a8:	10 e0       	ldi	r17, 0x00	; 0
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f e3       	ldi	r19, 0x3F	; 63
    21ae:	b9 01       	movw	r22, r18
    21b0:	a8 01       	movw	r20, r16
    21b2:	ce 01       	movw	r24, r28
    21b4:	89 96       	adiw	r24, 0x29	; 41
    21b6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    21ba:	00 e0       	ldi	r16, 0x00	; 0
    21bc:	10 e0       	ldi	r17, 0x00	; 0
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f eb       	ldi	r19, 0xBF	; 191
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	7f e3       	ldi	r23, 0x3F	; 63
    21ca:	ce 01       	movw	r24, r28
    21cc:	c1 96       	adiw	r24, 0x31	; 49
    21ce:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    21d2:	00 e0       	ldi	r16, 0x00	; 0
    21d4:	10 e0       	ldi	r17, 0x00	; 0
    21d6:	98 01       	movw	r18, r16
    21d8:	b9 01       	movw	r22, r18
    21da:	a8 01       	movw	r20, r16
    21dc:	ce 01       	movw	r24, r28
    21de:	c9 96       	adiw	r24, 0x39	; 57
    21e0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    21e4:	00 e0       	ldi	r16, 0x00	; 0
    21e6:	10 e0       	ldi	r17, 0x00	; 0
    21e8:	98 01       	movw	r18, r16
    21ea:	b9 01       	movw	r22, r18
    21ec:	a8 01       	movw	r20, r16
    21ee:	ce 01       	movw	r24, r28
    21f0:	8f 5b       	subi	r24, 0xBF	; 191
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    21f8:	00 e0       	ldi	r16, 0x00	; 0
    21fa:	10 e0       	ldi	r17, 0x00	; 0
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f eb       	ldi	r19, 0xBF	; 191
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	7f e3       	ldi	r23, 0x3F	; 63
    2208:	ce 01       	movw	r24, r28
    220a:	87 5b       	subi	r24, 0xB7	; 183
    220c:	9f 4f       	sbci	r25, 0xFF	; 255
    220e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2212:	00 e0       	ldi	r16, 0x00	; 0
    2214:	10 e0       	ldi	r17, 0x00	; 0
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	3f e3       	ldi	r19, 0x3F	; 63
    221a:	b9 01       	movw	r22, r18
    221c:	a8 01       	movw	r20, r16
    221e:	ce 01       	movw	r24, r28
    2220:	8f 5a       	subi	r24, 0xAF	; 175
    2222:	9f 4f       	sbci	r25, 0xFF	; 255
    2224:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2228:	00 e0       	ldi	r16, 0x00	; 0
    222a:	10 e0       	ldi	r17, 0x00	; 0
    222c:	98 01       	movw	r18, r16
    222e:	b9 01       	movw	r22, r18
    2230:	a8 01       	movw	r20, r16
    2232:	ce 01       	movw	r24, r28
    2234:	87 5a       	subi	r24, 0xA7	; 167
    2236:	9f 4f       	sbci	r25, 0xFF	; 255
    2238:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    223c:	00 e0       	ldi	r16, 0x00	; 0
    223e:	10 e0       	ldi	r17, 0x00	; 0
    2240:	98 01       	movw	r18, r16
    2242:	b9 01       	movw	r22, r18
    2244:	a8 01       	movw	r20, r16
    2246:	ce 01       	movw	r24, r28
    2248:	8f 59       	subi	r24, 0x9F	; 159
    224a:	9f 4f       	sbci	r25, 0xFF	; 255
    224c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2250:	00 e0       	ldi	r16, 0x00	; 0
    2252:	10 e0       	ldi	r17, 0x00	; 0
    2254:	98 01       	movw	r18, r16
    2256:	b9 01       	movw	r22, r18
    2258:	a8 01       	movw	r20, r16
    225a:	ce 01       	movw	r24, r28
    225c:	87 59       	subi	r24, 0x97	; 151
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2264:	00 e0       	ldi	r16, 0x00	; 0
    2266:	10 e0       	ldi	r17, 0x00	; 0
    2268:	98 01       	movw	r18, r16
    226a:	b9 01       	movw	r22, r18
    226c:	a8 01       	movw	r20, r16
    226e:	ce 01       	movw	r24, r28
    2270:	8f 58       	subi	r24, 0x8F	; 143
    2272:	9f 4f       	sbci	r25, 0xFF	; 255
    2274:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2278:	00 e0       	ldi	r16, 0x00	; 0
    227a:	10 e0       	ldi	r17, 0x00	; 0
    227c:	98 01       	movw	r18, r16
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	50 e0       	ldi	r21, 0x00	; 0
    2282:	60 e8       	ldi	r22, 0x80	; 128
    2284:	7f e3       	ldi	r23, 0x3F	; 63
    2286:	ce 01       	movw	r24, r28
    2288:	87 58       	subi	r24, 0x87	; 135
    228a:	9f 4f       	sbci	r25, 0xFF	; 255
    228c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2290:	cb 57       	subi	r28, 0x7B	; 123
    2292:	df 4f       	sbci	r29, 0xFF	; 255
    2294:	79 82       	std	Y+1, r7	; 0x01
    2296:	68 82       	st	Y, r6
    2298:	c5 58       	subi	r28, 0x85	; 133
    229a:	d0 40       	sbci	r29, 0x00	; 0
    229c:	c9 57       	subi	r28, 0x79	; 121
    229e:	df 4f       	sbci	r29, 0xFF	; 255
    22a0:	99 82       	std	Y+1, r9	; 0x01
    22a2:	88 82       	st	Y, r8
    22a4:	c7 58       	subi	r28, 0x87	; 135
    22a6:	d0 40       	sbci	r29, 0x00	; 0
    22a8:	cf 57       	subi	r28, 0x7F	; 127
    22aa:	df 4f       	sbci	r29, 0xFF	; 255
    22ac:	b9 82       	std	Y+1, r11	; 0x01
    22ae:	a8 82       	st	Y, r10
    22b0:	c1 58       	subi	r28, 0x81	; 129
    22b2:	d0 40       	sbci	r29, 0x00	; 0
    22b4:	cd 57       	subi	r28, 0x7D	; 125
    22b6:	df 4f       	sbci	r29, 0xFF	; 255
    22b8:	d9 82       	std	Y+1, r13	; 0x01
    22ba:	c8 82       	st	Y, r12
    22bc:	c3 58       	subi	r28, 0x83	; 131
    22be:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swq_matrix),QB_SIZE2);
    22c0:	9e 01       	movw	r18, r28
    22c2:	2f 57       	subi	r18, 0x7F	; 127
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	ae 01       	movw	r20, r28
    22c8:	4b 57       	subi	r20, 0x7B	; 123
    22ca:	5f 4f       	sbci	r21, 0xFF	; 255
    22cc:	62 e0       	ldi	r22, 0x02	; 2
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	c7 01       	movw	r24, r14
    22d2:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    22d6:	ae 01       	movw	r20, r28
    22d8:	4f 5f       	subi	r20, 0xFF	; 255
    22da:	5f 4f       	sbci	r21, 0xFF	; 255
    22dc:	bc 01       	movw	r22, r24
    22de:	c7 01       	movw	r24, r14
    22e0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    22e4:	42 e0       	ldi	r20, 0x02	; 2
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	bc 01       	movw	r22, r24
    22ea:	c7 01       	movw	r24, r14
    22ec:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    22f0:	c8 57       	subi	r28, 0x78	; 120
    22f2:	df 4f       	sbci	r29, 0xFF	; 255
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	ff 90       	pop	r15
    2308:	ef 90       	pop	r14
    230a:	df 90       	pop	r13
    230c:	cf 90       	pop	r12
    230e:	bf 90       	pop	r11
    2310:	af 90       	pop	r10
    2312:	9f 90       	pop	r9
    2314:	8f 90       	pop	r8
    2316:	7f 90       	pop	r7
    2318:	6f 90       	pop	r6
    231a:	08 95       	ret

0000231c <_ZN5Gates3SWIEiiii>:
int * Gates::SWI(int theta1, int phi1, int theta2,int phi2){
    231c:	6f 92       	push	r6
    231e:	7f 92       	push	r7
    2320:	8f 92       	push	r8
    2322:	9f 92       	push	r9
    2324:	af 92       	push	r10
    2326:	bf 92       	push	r11
    2328:	cf 92       	push	r12
    232a:	df 92       	push	r13
    232c:	ef 92       	push	r14
    232e:	ff 92       	push	r15
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	c8 58       	subi	r28, 0x88	; 136
    233e:	d1 09       	sbc	r29, r1
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	7c 01       	movw	r14, r24
    234c:	3b 01       	movw	r6, r22
    234e:	5a 01       	movw	r10, r20
    2350:	49 01       	movw	r8, r18
    2352:	68 01       	movw	r12, r16
	Complex dec_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,1),Complex(0,0)},
 													     {Complex(0,0),Complex(0,1),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    2354:	00 e0       	ldi	r16, 0x00	; 0
    2356:	10 e0       	ldi	r17, 0x00	; 0
    2358:	98 01       	movw	r18, r16
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	60 e8       	ldi	r22, 0x80	; 128
    2360:	7f e3       	ldi	r23, 0x3F	; 63
    2362:	ce 01       	movw	r24, r28
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    236a:	00 e0       	ldi	r16, 0x00	; 0
    236c:	10 e0       	ldi	r17, 0x00	; 0
    236e:	98 01       	movw	r18, r16
    2370:	b9 01       	movw	r22, r18
    2372:	a8 01       	movw	r20, r16
    2374:	ce 01       	movw	r24, r28
    2376:	09 96       	adiw	r24, 0x09	; 9
    2378:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    237c:	00 e0       	ldi	r16, 0x00	; 0
    237e:	10 e0       	ldi	r17, 0x00	; 0
    2380:	98 01       	movw	r18, r16
    2382:	b9 01       	movw	r22, r18
    2384:	a8 01       	movw	r20, r16
    2386:	ce 01       	movw	r24, r28
    2388:	41 96       	adiw	r24, 0x11	; 17
    238a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    238e:	00 e0       	ldi	r16, 0x00	; 0
    2390:	10 e0       	ldi	r17, 0x00	; 0
    2392:	98 01       	movw	r18, r16
    2394:	b9 01       	movw	r22, r18
    2396:	a8 01       	movw	r20, r16
    2398:	ce 01       	movw	r24, r28
    239a:	49 96       	adiw	r24, 0x19	; 25
    239c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    23a0:	00 e0       	ldi	r16, 0x00	; 0
    23a2:	10 e0       	ldi	r17, 0x00	; 0
    23a4:	98 01       	movw	r18, r16
    23a6:	b9 01       	movw	r22, r18
    23a8:	a8 01       	movw	r20, r16
    23aa:	ce 01       	movw	r24, r28
    23ac:	81 96       	adiw	r24, 0x21	; 33
    23ae:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    23b2:	00 e0       	ldi	r16, 0x00	; 0
    23b4:	10 e0       	ldi	r17, 0x00	; 0
    23b6:	98 01       	movw	r18, r16
    23b8:	b9 01       	movw	r22, r18
    23ba:	a8 01       	movw	r20, r16
    23bc:	ce 01       	movw	r24, r28
    23be:	89 96       	adiw	r24, 0x29	; 41
    23c0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    23c4:	00 e0       	ldi	r16, 0x00	; 0
    23c6:	10 e0       	ldi	r17, 0x00	; 0
    23c8:	20 e8       	ldi	r18, 0x80	; 128
    23ca:	3f e3       	ldi	r19, 0x3F	; 63
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	ba 01       	movw	r22, r20
    23d2:	ce 01       	movw	r24, r28
    23d4:	c1 96       	adiw	r24, 0x31	; 49
    23d6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    23da:	00 e0       	ldi	r16, 0x00	; 0
    23dc:	10 e0       	ldi	r17, 0x00	; 0
    23de:	98 01       	movw	r18, r16
    23e0:	b9 01       	movw	r22, r18
    23e2:	a8 01       	movw	r20, r16
    23e4:	ce 01       	movw	r24, r28
    23e6:	c9 96       	adiw	r24, 0x39	; 57
    23e8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    23ec:	00 e0       	ldi	r16, 0x00	; 0
    23ee:	10 e0       	ldi	r17, 0x00	; 0
    23f0:	98 01       	movw	r18, r16
    23f2:	b9 01       	movw	r22, r18
    23f4:	a8 01       	movw	r20, r16
    23f6:	ce 01       	movw	r24, r28
    23f8:	8f 5b       	subi	r24, 0xBF	; 191
    23fa:	9f 4f       	sbci	r25, 0xFF	; 255
    23fc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2400:	00 e0       	ldi	r16, 0x00	; 0
    2402:	10 e0       	ldi	r17, 0x00	; 0
    2404:	20 e8       	ldi	r18, 0x80	; 128
    2406:	3f e3       	ldi	r19, 0x3F	; 63
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	ba 01       	movw	r22, r20
    240e:	ce 01       	movw	r24, r28
    2410:	87 5b       	subi	r24, 0xB7	; 183
    2412:	9f 4f       	sbci	r25, 0xFF	; 255
    2414:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2418:	00 e0       	ldi	r16, 0x00	; 0
    241a:	10 e0       	ldi	r17, 0x00	; 0
    241c:	98 01       	movw	r18, r16
    241e:	b9 01       	movw	r22, r18
    2420:	a8 01       	movw	r20, r16
    2422:	ce 01       	movw	r24, r28
    2424:	8f 5a       	subi	r24, 0xAF	; 175
    2426:	9f 4f       	sbci	r25, 0xFF	; 255
    2428:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    242c:	00 e0       	ldi	r16, 0x00	; 0
    242e:	10 e0       	ldi	r17, 0x00	; 0
    2430:	98 01       	movw	r18, r16
    2432:	b9 01       	movw	r22, r18
    2434:	a8 01       	movw	r20, r16
    2436:	ce 01       	movw	r24, r28
    2438:	87 5a       	subi	r24, 0xA7	; 167
    243a:	9f 4f       	sbci	r25, 0xFF	; 255
    243c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2440:	00 e0       	ldi	r16, 0x00	; 0
    2442:	10 e0       	ldi	r17, 0x00	; 0
    2444:	98 01       	movw	r18, r16
    2446:	b9 01       	movw	r22, r18
    2448:	a8 01       	movw	r20, r16
    244a:	ce 01       	movw	r24, r28
    244c:	8f 59       	subi	r24, 0x9F	; 159
    244e:	9f 4f       	sbci	r25, 0xFF	; 255
    2450:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2454:	00 e0       	ldi	r16, 0x00	; 0
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	98 01       	movw	r18, r16
    245a:	b9 01       	movw	r22, r18
    245c:	a8 01       	movw	r20, r16
    245e:	ce 01       	movw	r24, r28
    2460:	87 59       	subi	r24, 0x97	; 151
    2462:	9f 4f       	sbci	r25, 0xFF	; 255
    2464:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2468:	00 e0       	ldi	r16, 0x00	; 0
    246a:	10 e0       	ldi	r17, 0x00	; 0
    246c:	98 01       	movw	r18, r16
    246e:	b9 01       	movw	r22, r18
    2470:	a8 01       	movw	r20, r16
    2472:	ce 01       	movw	r24, r28
    2474:	8f 58       	subi	r24, 0x8F	; 143
    2476:	9f 4f       	sbci	r25, 0xFF	; 255
    2478:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    247c:	00 e0       	ldi	r16, 0x00	; 0
    247e:	10 e0       	ldi	r17, 0x00	; 0
    2480:	98 01       	movw	r18, r16
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	50 e0       	ldi	r21, 0x00	; 0
    2486:	60 e8       	ldi	r22, 0x80	; 128
    2488:	7f e3       	ldi	r23, 0x3F	; 63
    248a:	ce 01       	movw	r24, r28
    248c:	87 58       	subi	r24, 0x87	; 135
    248e:	9f 4f       	sbci	r25, 0xFF	; 255
    2490:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2494:	cb 57       	subi	r28, 0x7B	; 123
    2496:	df 4f       	sbci	r29, 0xFF	; 255
    2498:	79 82       	std	Y+1, r7	; 0x01
    249a:	68 82       	st	Y, r6
    249c:	c5 58       	subi	r28, 0x85	; 133
    249e:	d0 40       	sbci	r29, 0x00	; 0
    24a0:	c9 57       	subi	r28, 0x79	; 121
    24a2:	df 4f       	sbci	r29, 0xFF	; 255
    24a4:	99 82       	std	Y+1, r9	; 0x01
    24a6:	88 82       	st	Y, r8
    24a8:	c7 58       	subi	r28, 0x87	; 135
    24aa:	d0 40       	sbci	r29, 0x00	; 0
    24ac:	cf 57       	subi	r28, 0x7F	; 127
    24ae:	df 4f       	sbci	r29, 0xFF	; 255
    24b0:	b9 82       	std	Y+1, r11	; 0x01
    24b2:	a8 82       	st	Y, r10
    24b4:	c1 58       	subi	r28, 0x81	; 129
    24b6:	d0 40       	sbci	r29, 0x00	; 0
    24b8:	cd 57       	subi	r28, 0x7D	; 125
    24ba:	df 4f       	sbci	r29, 0xFF	; 255
    24bc:	d9 82       	std	Y+1, r13	; 0x01
    24be:	c8 82       	st	Y, r12
    24c0:	c3 58       	subi	r28, 0x83	; 131
    24c2:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    24c4:	9e 01       	movw	r18, r28
    24c6:	2f 57       	subi	r18, 0x7F	; 127
    24c8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ca:	ae 01       	movw	r20, r28
    24cc:	4b 57       	subi	r20, 0x7B	; 123
    24ce:	5f 4f       	sbci	r21, 0xFF	; 255
    24d0:	62 e0       	ldi	r22, 0x02	; 2
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	c7 01       	movw	r24, r14
    24d6:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    24da:	ae 01       	movw	r20, r28
    24dc:	4f 5f       	subi	r20, 0xFF	; 255
    24de:	5f 4f       	sbci	r21, 0xFF	; 255
    24e0:	bc 01       	movw	r22, r24
    24e2:	c7 01       	movw	r24, r14
    24e4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    24e8:	42 e0       	ldi	r20, 0x02	; 2
    24ea:	50 e0       	ldi	r21, 0x00	; 0
    24ec:	bc 01       	movw	r22, r24
    24ee:	c7 01       	movw	r24, r14
    24f0:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    24f4:	c8 57       	subi	r28, 0x78	; 120
    24f6:	df 4f       	sbci	r29, 0xFF	; 255
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	1f 91       	pop	r17
    2508:	0f 91       	pop	r16
    250a:	ff 90       	pop	r15
    250c:	ef 90       	pop	r14
    250e:	df 90       	pop	r13
    2510:	cf 90       	pop	r12
    2512:	bf 90       	pop	r11
    2514:	af 90       	pop	r10
    2516:	9f 90       	pop	r9
    2518:	8f 90       	pop	r8
    251a:	7f 90       	pop	r7
    251c:	6f 90       	pop	r6
    251e:	08 95       	ret

00002520 <_ZN5Gates3ROXEiii>:
int * Gates::ROX(int theta,int phi,int delta){
    2520:	2f 92       	push	r2
    2522:	3f 92       	push	r3
    2524:	4f 92       	push	r4
    2526:	5f 92       	push	r5
    2528:	6f 92       	push	r6
    252a:	7f 92       	push	r7
    252c:	8f 92       	push	r8
    252e:	9f 92       	push	r9
    2530:	af 92       	push	r10
    2532:	bf 92       	push	r11
    2534:	cf 92       	push	r12
    2536:	df 92       	push	r13
    2538:	ef 92       	push	r14
    253a:	ff 92       	push	r15
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	a4 97       	sbiw	r28, 0x24	; 36
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	7c 01       	movw	r14, r24
    2556:	1b 01       	movw	r2, r22
    2558:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    255a:	b9 01       	movw	r22, r18
    255c:	88 27       	eor	r24, r24
    255e:	77 fd       	sbrc	r23, 7
    2560:	80 95       	com	r24
    2562:	98 2f       	mov	r25, r24
    2564:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
    2568:	2b ed       	ldi	r18, 0xDB	; 219
    256a:	3f e0       	ldi	r19, 0x0F	; 15
    256c:	49 e4       	ldi	r20, 0x49	; 73
    256e:	50 e4       	ldi	r21, 0x40	; 64
    2570:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	44 e3       	ldi	r20, 0x34	; 52
    257a:	53 e4       	ldi	r21, 0x43	; 67
    257c:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
	Complex rox_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0), Complex(0,-sin(delta_float/2))},
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e0       	ldi	r20, 0x00	; 0
    2586:	5f e3       	ldi	r21, 0x3F	; 63
    2588:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
    258c:	4b 01       	movw	r8, r22
    258e:	5c 01       	movw	r10, r24
    2590:	0e 94 6d 30 	call	0x60da	; 0x60da <cos>
    2594:	2b 01       	movw	r4, r22
    2596:	3c 01       	movw	r6, r24
														 {Complex(0,-sin(delta_float/2)),Complex(cos(delta_float/2),0)}};
    2598:	00 e0       	ldi	r16, 0x00	; 0
    259a:	10 e0       	ldi	r17, 0x00	; 0
    259c:	98 01       	movw	r18, r16
    259e:	ab 01       	movw	r20, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	ce 01       	movw	r24, r28
    25a4:	01 96       	adiw	r24, 0x01	; 1
    25a6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
}
int * Gates::ROX(int theta,int phi,int delta){
	float delta_float=(delta*M_PI)/180;
	Complex rox_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0), Complex(0,-sin(delta_float/2))},
    25aa:	c5 01       	movw	r24, r10
    25ac:	b4 01       	movw	r22, r8
    25ae:	0e 94 81 33 	call	0x6702	; 0x6702 <sin>
														 {Complex(0,-sin(delta_float/2)),Complex(cos(delta_float/2),0)}};
    25b2:	4b 01       	movw	r8, r22
    25b4:	5c 01       	movw	r10, r24
    25b6:	b7 fa       	bst	r11, 7
    25b8:	b0 94       	com	r11
    25ba:	b7 f8       	bld	r11, 7
    25bc:	b0 94       	com	r11
    25be:	95 01       	movw	r18, r10
    25c0:	84 01       	movw	r16, r8
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	ba 01       	movw	r22, r20
    25c8:	ce 01       	movw	r24, r28
    25ca:	09 96       	adiw	r24, 0x09	; 9
    25cc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    25d0:	95 01       	movw	r18, r10
    25d2:	84 01       	movw	r16, r8
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	ba 01       	movw	r22, r20
    25da:	ce 01       	movw	r24, r28
    25dc:	41 96       	adiw	r24, 0x11	; 17
    25de:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    25e2:	00 e0       	ldi	r16, 0x00	; 0
    25e4:	10 e0       	ldi	r17, 0x00	; 0
    25e6:	98 01       	movw	r18, r16
    25e8:	b3 01       	movw	r22, r6
    25ea:	a2 01       	movw	r20, r4
    25ec:	ce 01       	movw	r24, r28
    25ee:	49 96       	adiw	r24, 0x19	; 25
    25f0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    25f4:	3c a2       	std	Y+36, r3	; 0x24
    25f6:	2b a2       	std	Y+35, r2	; 0x23
    25f8:	da a2       	std	Y+34, r13	; 0x22
    25fa:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
    25fc:	9e 01       	movw	r18, r28
    25fe:	2f 5d       	subi	r18, 0xDF	; 223
    2600:	3f 4f       	sbci	r19, 0xFF	; 255
    2602:	ae 01       	movw	r20, r28
    2604:	4d 5d       	subi	r20, 0xDD	; 221
    2606:	5f 4f       	sbci	r21, 0xFF	; 255
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	c7 01       	movw	r24, r14
    260e:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    2612:	ae 01       	movw	r20, r28
    2614:	4f 5f       	subi	r20, 0xFF	; 255
    2616:	5f 4f       	sbci	r21, 0xFF	; 255
    2618:	bc 01       	movw	r22, r24
    261a:	c7 01       	movw	r24, r14
    261c:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	bc 01       	movw	r22, r24
    2626:	c7 01       	movw	r24, r14
    2628:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    262c:	a4 96       	adiw	r28, 0x24	; 36
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	ff 90       	pop	r15
    2642:	ef 90       	pop	r14
    2644:	df 90       	pop	r13
    2646:	cf 90       	pop	r12
    2648:	bf 90       	pop	r11
    264a:	af 90       	pop	r10
    264c:	9f 90       	pop	r9
    264e:	8f 90       	pop	r8
    2650:	7f 90       	pop	r7
    2652:	6f 90       	pop	r6
    2654:	5f 90       	pop	r5
    2656:	4f 90       	pop	r4
    2658:	3f 90       	pop	r3
    265a:	2f 90       	pop	r2
    265c:	08 95       	ret

0000265e <_ZN5Gates3ROYEiii>:
int * Gates::ROY(int theta,int phi,int delta){
    265e:	2f 92       	push	r2
    2660:	3f 92       	push	r3
    2662:	4f 92       	push	r4
    2664:	5f 92       	push	r5
    2666:	6f 92       	push	r6
    2668:	7f 92       	push	r7
    266a:	8f 92       	push	r8
    266c:	9f 92       	push	r9
    266e:	af 92       	push	r10
    2670:	bf 92       	push	r11
    2672:	cf 92       	push	r12
    2674:	df 92       	push	r13
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	a4 97       	sbiw	r28, 0x24	; 36
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	7c 01       	movw	r14, r24
    2694:	1b 01       	movw	r2, r22
    2696:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    2698:	b9 01       	movw	r22, r18
    269a:	88 27       	eor	r24, r24
    269c:	77 fd       	sbrc	r23, 7
    269e:	80 95       	com	r24
    26a0:	98 2f       	mov	r25, r24
    26a2:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
    26a6:	2b ed       	ldi	r18, 0xDB	; 219
    26a8:	3f e0       	ldi	r19, 0x0F	; 15
    26aa:	49 e4       	ldi	r20, 0x49	; 73
    26ac:	50 e4       	ldi	r21, 0x40	; 64
    26ae:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	44 e3       	ldi	r20, 0x34	; 52
    26b8:	53 e4       	ldi	r21, 0x43	; 67
    26ba:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0),Complex(-sin(delta_float/2),0)},
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
    26ca:	4b 01       	movw	r8, r22
    26cc:	5c 01       	movw	r10, r24
    26ce:	0e 94 6d 30 	call	0x60da	; 0x60da <cos>
    26d2:	2b 01       	movw	r4, r22
    26d4:	3c 01       	movw	r6, r24
														 {Complex(sin(delta_float/2),0),Complex(cos(delta_float/2),0)}};
    26d6:	00 e0       	ldi	r16, 0x00	; 0
    26d8:	10 e0       	ldi	r17, 0x00	; 0
    26da:	98 01       	movw	r18, r16
    26dc:	ab 01       	movw	r20, r22
    26de:	bc 01       	movw	r22, r24
    26e0:	ce 01       	movw	r24, r28
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
}
int * Gates::ROY(int theta,int phi,int delta){
	float delta_float=(delta*M_PI)/180;
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0),Complex(-sin(delta_float/2),0)},
    26e8:	c5 01       	movw	r24, r10
    26ea:	b4 01       	movw	r22, r8
    26ec:	0e 94 81 33 	call	0x6702	; 0x6702 <sin>
    26f0:	4b 01       	movw	r8, r22
    26f2:	5c 01       	movw	r10, r24
														 {Complex(sin(delta_float/2),0),Complex(cos(delta_float/2),0)}};
    26f4:	ab 01       	movw	r20, r22
    26f6:	bc 01       	movw	r22, r24
    26f8:	70 58       	subi	r23, 0x80	; 128
    26fa:	00 e0       	ldi	r16, 0x00	; 0
    26fc:	10 e0       	ldi	r17, 0x00	; 0
    26fe:	98 01       	movw	r18, r16
    2700:	ce 01       	movw	r24, r28
    2702:	09 96       	adiw	r24, 0x09	; 9
    2704:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2708:	00 e0       	ldi	r16, 0x00	; 0
    270a:	10 e0       	ldi	r17, 0x00	; 0
    270c:	98 01       	movw	r18, r16
    270e:	b5 01       	movw	r22, r10
    2710:	a4 01       	movw	r20, r8
    2712:	ce 01       	movw	r24, r28
    2714:	41 96       	adiw	r24, 0x11	; 17
    2716:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    271a:	00 e0       	ldi	r16, 0x00	; 0
    271c:	10 e0       	ldi	r17, 0x00	; 0
    271e:	98 01       	movw	r18, r16
    2720:	b3 01       	movw	r22, r6
    2722:	a2 01       	movw	r20, r4
    2724:	ce 01       	movw	r24, r28
    2726:	49 96       	adiw	r24, 0x19	; 25
    2728:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    272c:	3c a2       	std	Y+36, r3	; 0x24
    272e:	2b a2       	std	Y+35, r2	; 0x23
    2730:	da a2       	std	Y+34, r13	; 0x22
    2732:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    2734:	9e 01       	movw	r18, r28
    2736:	2f 5d       	subi	r18, 0xDF	; 223
    2738:	3f 4f       	sbci	r19, 0xFF	; 255
    273a:	ae 01       	movw	r20, r28
    273c:	4d 5d       	subi	r20, 0xDD	; 221
    273e:	5f 4f       	sbci	r21, 0xFF	; 255
    2740:	61 e0       	ldi	r22, 0x01	; 1
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	c7 01       	movw	r24, r14
    2746:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    274a:	ae 01       	movw	r20, r28
    274c:	4f 5f       	subi	r20, 0xFF	; 255
    274e:	5f 4f       	sbci	r21, 0xFF	; 255
    2750:	bc 01       	movw	r22, r24
    2752:	c7 01       	movw	r24, r14
    2754:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    2758:	41 e0       	ldi	r20, 0x01	; 1
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	bc 01       	movw	r22, r24
    275e:	c7 01       	movw	r24, r14
    2760:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    2764:	a4 96       	adiw	r28, 0x24	; 36
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	ff 90       	pop	r15
    277a:	ef 90       	pop	r14
    277c:	df 90       	pop	r13
    277e:	cf 90       	pop	r12
    2780:	bf 90       	pop	r11
    2782:	af 90       	pop	r10
    2784:	9f 90       	pop	r9
    2786:	8f 90       	pop	r8
    2788:	7f 90       	pop	r7
    278a:	6f 90       	pop	r6
    278c:	5f 90       	pop	r5
    278e:	4f 90       	pop	r4
    2790:	3f 90       	pop	r3
    2792:	2f 90       	pop	r2
    2794:	08 95       	ret

00002796 <_ZN5Gates3ROZEiii>:
int * Gates::ROZ(int theta,int phi,int delta){
    2796:	4f 92       	push	r4
    2798:	5f 92       	push	r5
    279a:	6f 92       	push	r6
    279c:	7f 92       	push	r7
    279e:	af 92       	push	r10
    27a0:	bf 92       	push	r11
    27a2:	cf 92       	push	r12
    27a4:	df 92       	push	r13
    27a6:	ef 92       	push	r14
    27a8:	ff 92       	push	r15
    27aa:	0f 93       	push	r16
    27ac:	1f 93       	push	r17
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	a4 97       	sbiw	r28, 0x24	; 36
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	7c 01       	movw	r14, r24
    27c4:	5b 01       	movw	r10, r22
    27c6:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    27c8:	b9 01       	movw	r22, r18
    27ca:	88 27       	eor	r24, r24
    27cc:	77 fd       	sbrc	r23, 7
    27ce:	80 95       	com	r24
    27d0:	98 2f       	mov	r25, r24
    27d2:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
    27d6:	2b ed       	ldi	r18, 0xDB	; 219
    27d8:	3f e0       	ldi	r19, 0x0F	; 15
    27da:	49 e4       	ldi	r20, 0x49	; 73
    27dc:	50 e4       	ldi	r21, 0x40	; 64
    27de:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	44 e3       	ldi	r20, 0x34	; 52
    27e8:	53 e4       	ldi	r21, 0x43	; 67
    27ea:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
    27ee:	2b 01       	movw	r4, r22
    27f0:	3c 01       	movw	r6, r24
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,exp(-delta_float/2)),Complex(0,0)},
    27f2:	90 58       	subi	r25, 0x80	; 128
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
    2800:	0e 94 dd 30 	call	0x61ba	; 0x61ba <exp>
    2804:	8b 01       	movw	r16, r22
    2806:	9c 01       	movw	r18, r24
														 {Complex(0,0),		  		     Complex(0,exp(delta_float/2))}};
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	ba 01       	movw	r22, r20
    280e:	ce 01       	movw	r24, r28
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2816:	00 e0       	ldi	r16, 0x00	; 0
    2818:	10 e0       	ldi	r17, 0x00	; 0
    281a:	98 01       	movw	r18, r16
    281c:	b9 01       	movw	r22, r18
    281e:	a8 01       	movw	r20, r16
    2820:	ce 01       	movw	r24, r28
    2822:	09 96       	adiw	r24, 0x09	; 9
    2824:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2828:	00 e0       	ldi	r16, 0x00	; 0
    282a:	10 e0       	ldi	r17, 0x00	; 0
    282c:	98 01       	movw	r18, r16
    282e:	b9 01       	movw	r22, r18
    2830:	a8 01       	movw	r20, r16
    2832:	ce 01       	movw	r24, r28
    2834:	41 96       	adiw	r24, 0x11	; 17
    2836:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e0       	ldi	r20, 0x00	; 0
    2840:	5f e3       	ldi	r21, 0x3F	; 63
    2842:	c3 01       	movw	r24, r6
    2844:	b2 01       	movw	r22, r4
    2846:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
    284a:	0e 94 dd 30 	call	0x61ba	; 0x61ba <exp>
    284e:	8b 01       	movw	r16, r22
    2850:	9c 01       	movw	r18, r24
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	ba 01       	movw	r22, r20
    2858:	ce 01       	movw	r24, r28
    285a:	49 96       	adiw	r24, 0x19	; 25
    285c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    2860:	bc a2       	std	Y+36, r11	; 0x24
    2862:	ab a2       	std	Y+35, r10	; 0x23
    2864:	da a2       	std	Y+34, r13	; 0x22
    2866:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    2868:	9e 01       	movw	r18, r28
    286a:	2f 5d       	subi	r18, 0xDF	; 223
    286c:	3f 4f       	sbci	r19, 0xFF	; 255
    286e:	ae 01       	movw	r20, r28
    2870:	4d 5d       	subi	r20, 0xDD	; 221
    2872:	5f 4f       	sbci	r21, 0xFF	; 255
    2874:	61 e0       	ldi	r22, 0x01	; 1
    2876:	70 e0       	ldi	r23, 0x00	; 0
    2878:	c7 01       	movw	r24, r14
    287a:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    287e:	ae 01       	movw	r20, r28
    2880:	4f 5f       	subi	r20, 0xFF	; 255
    2882:	5f 4f       	sbci	r21, 0xFF	; 255
    2884:	bc 01       	movw	r22, r24
    2886:	c7 01       	movw	r24, r14
    2888:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    288c:	41 e0       	ldi	r20, 0x01	; 1
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	bc 01       	movw	r22, r24
    2892:	c7 01       	movw	r24, r14
    2894:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    2898:	a4 96       	adiw	r28, 0x24	; 36
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	ff 90       	pop	r15
    28ae:	ef 90       	pop	r14
    28b0:	df 90       	pop	r13
    28b2:	cf 90       	pop	r12
    28b4:	bf 90       	pop	r11
    28b6:	af 90       	pop	r10
    28b8:	7f 90       	pop	r7
    28ba:	6f 90       	pop	r6
    28bc:	5f 90       	pop	r5
    28be:	4f 90       	pop	r4
    28c0:	08 95       	ret

000028c2 <_ZN5Gates3CSWEiiiiii>:
int * Gates::CSW(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3){
    28c2:	2f 92       	push	r2
    28c4:	3f 92       	push	r3
    28c6:	4f 92       	push	r4
    28c8:	5f 92       	push	r5
    28ca:	6f 92       	push	r6
    28cc:	7f 92       	push	r7
    28ce:	8f 92       	push	r8
    28d0:	9f 92       	push	r9
    28d2:	af 92       	push	r10
    28d4:	bf 92       	push	r11
    28d6:	cf 92       	push	r12
    28d8:	df 92       	push	r13
    28da:	ef 92       	push	r14
    28dc:	ff 92       	push	r15
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	cc 50       	subi	r28, 0x0C	; 12
    28ec:	d2 40       	sbci	r29, 0x02	; 2
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	5c 01       	movw	r10, r24
    28fa:	3b 01       	movw	r6, r22
    28fc:	2a 01       	movw	r4, r20
    28fe:	49 01       	movw	r8, r18
    2900:	18 01       	movw	r2, r16
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    2902:	00 e0       	ldi	r16, 0x00	; 0
    2904:	10 e0       	ldi	r17, 0x00	; 0
    2906:	98 01       	movw	r18, r16
    2908:	40 e0       	ldi	r20, 0x00	; 0
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	60 e8       	ldi	r22, 0x80	; 128
    290e:	7f e3       	ldi	r23, 0x3F	; 63
    2910:	ce 01       	movw	r24, r28
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2918:	00 e0       	ldi	r16, 0x00	; 0
    291a:	10 e0       	ldi	r17, 0x00	; 0
    291c:	98 01       	movw	r18, r16
    291e:	b9 01       	movw	r22, r18
    2920:	a8 01       	movw	r20, r16
    2922:	ce 01       	movw	r24, r28
    2924:	09 96       	adiw	r24, 0x09	; 9
    2926:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    292a:	00 e0       	ldi	r16, 0x00	; 0
    292c:	10 e0       	ldi	r17, 0x00	; 0
    292e:	98 01       	movw	r18, r16
    2930:	b9 01       	movw	r22, r18
    2932:	a8 01       	movw	r20, r16
    2934:	ce 01       	movw	r24, r28
    2936:	41 96       	adiw	r24, 0x11	; 17
    2938:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    293c:	00 e0       	ldi	r16, 0x00	; 0
    293e:	10 e0       	ldi	r17, 0x00	; 0
    2940:	98 01       	movw	r18, r16
    2942:	b9 01       	movw	r22, r18
    2944:	a8 01       	movw	r20, r16
    2946:	ce 01       	movw	r24, r28
    2948:	49 96       	adiw	r24, 0x19	; 25
    294a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    294e:	00 e0       	ldi	r16, 0x00	; 0
    2950:	10 e0       	ldi	r17, 0x00	; 0
    2952:	98 01       	movw	r18, r16
    2954:	b9 01       	movw	r22, r18
    2956:	a8 01       	movw	r20, r16
    2958:	ce 01       	movw	r24, r28
    295a:	81 96       	adiw	r24, 0x21	; 33
    295c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2960:	00 e0       	ldi	r16, 0x00	; 0
    2962:	10 e0       	ldi	r17, 0x00	; 0
    2964:	98 01       	movw	r18, r16
    2966:	b9 01       	movw	r22, r18
    2968:	a8 01       	movw	r20, r16
    296a:	ce 01       	movw	r24, r28
    296c:	89 96       	adiw	r24, 0x29	; 41
    296e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2972:	00 e0       	ldi	r16, 0x00	; 0
    2974:	10 e0       	ldi	r17, 0x00	; 0
    2976:	98 01       	movw	r18, r16
    2978:	b9 01       	movw	r22, r18
    297a:	a8 01       	movw	r20, r16
    297c:	ce 01       	movw	r24, r28
    297e:	c1 96       	adiw	r24, 0x31	; 49
    2980:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2984:	00 e0       	ldi	r16, 0x00	; 0
    2986:	10 e0       	ldi	r17, 0x00	; 0
    2988:	98 01       	movw	r18, r16
    298a:	b9 01       	movw	r22, r18
    298c:	a8 01       	movw	r20, r16
    298e:	ce 01       	movw	r24, r28
    2990:	c9 96       	adiw	r24, 0x39	; 57
    2992:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2996:	00 e0       	ldi	r16, 0x00	; 0
    2998:	10 e0       	ldi	r17, 0x00	; 0
    299a:	98 01       	movw	r18, r16
    299c:	b9 01       	movw	r22, r18
    299e:	a8 01       	movw	r20, r16
    29a0:	ce 01       	movw	r24, r28
    29a2:	8f 5b       	subi	r24, 0xBF	; 191
    29a4:	9f 4f       	sbci	r25, 0xFF	; 255
    29a6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    29aa:	00 e0       	ldi	r16, 0x00	; 0
    29ac:	10 e0       	ldi	r17, 0x00	; 0
    29ae:	98 01       	movw	r18, r16
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	60 e8       	ldi	r22, 0x80	; 128
    29b6:	7f e3       	ldi	r23, 0x3F	; 63
    29b8:	ce 01       	movw	r24, r28
    29ba:	87 5b       	subi	r24, 0xB7	; 183
    29bc:	9f 4f       	sbci	r25, 0xFF	; 255
    29be:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    29c2:	00 e0       	ldi	r16, 0x00	; 0
    29c4:	10 e0       	ldi	r17, 0x00	; 0
    29c6:	98 01       	movw	r18, r16
    29c8:	b9 01       	movw	r22, r18
    29ca:	a8 01       	movw	r20, r16
    29cc:	ce 01       	movw	r24, r28
    29ce:	8f 5a       	subi	r24, 0xAF	; 175
    29d0:	9f 4f       	sbci	r25, 0xFF	; 255
    29d2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    29d6:	00 e0       	ldi	r16, 0x00	; 0
    29d8:	10 e0       	ldi	r17, 0x00	; 0
    29da:	98 01       	movw	r18, r16
    29dc:	b9 01       	movw	r22, r18
    29de:	a8 01       	movw	r20, r16
    29e0:	ce 01       	movw	r24, r28
    29e2:	87 5a       	subi	r24, 0xA7	; 167
    29e4:	9f 4f       	sbci	r25, 0xFF	; 255
    29e6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    29ea:	00 e0       	ldi	r16, 0x00	; 0
    29ec:	10 e0       	ldi	r17, 0x00	; 0
    29ee:	98 01       	movw	r18, r16
    29f0:	b9 01       	movw	r22, r18
    29f2:	a8 01       	movw	r20, r16
    29f4:	ce 01       	movw	r24, r28
    29f6:	8f 59       	subi	r24, 0x9F	; 159
    29f8:	9f 4f       	sbci	r25, 0xFF	; 255
    29fa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    29fe:	00 e0       	ldi	r16, 0x00	; 0
    2a00:	10 e0       	ldi	r17, 0x00	; 0
    2a02:	98 01       	movw	r18, r16
    2a04:	b9 01       	movw	r22, r18
    2a06:	a8 01       	movw	r20, r16
    2a08:	ce 01       	movw	r24, r28
    2a0a:	87 59       	subi	r24, 0x97	; 151
    2a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a12:	00 e0       	ldi	r16, 0x00	; 0
    2a14:	10 e0       	ldi	r17, 0x00	; 0
    2a16:	98 01       	movw	r18, r16
    2a18:	b9 01       	movw	r22, r18
    2a1a:	a8 01       	movw	r20, r16
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	8f 58       	subi	r24, 0x8F	; 143
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a26:	00 e0       	ldi	r16, 0x00	; 0
    2a28:	10 e0       	ldi	r17, 0x00	; 0
    2a2a:	98 01       	movw	r18, r16
    2a2c:	b9 01       	movw	r22, r18
    2a2e:	a8 01       	movw	r20, r16
    2a30:	ce 01       	movw	r24, r28
    2a32:	87 58       	subi	r24, 0x87	; 135
    2a34:	9f 4f       	sbci	r25, 0xFF	; 255
    2a36:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a3a:	00 e0       	ldi	r16, 0x00	; 0
    2a3c:	10 e0       	ldi	r17, 0x00	; 0
    2a3e:	98 01       	movw	r18, r16
    2a40:	b9 01       	movw	r22, r18
    2a42:	a8 01       	movw	r20, r16
    2a44:	ce 01       	movw	r24, r28
    2a46:	8f 57       	subi	r24, 0x7F	; 127
    2a48:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a4e:	00 e0       	ldi	r16, 0x00	; 0
    2a50:	10 e0       	ldi	r17, 0x00	; 0
    2a52:	98 01       	movw	r18, r16
    2a54:	b9 01       	movw	r22, r18
    2a56:	a8 01       	movw	r20, r16
    2a58:	ce 01       	movw	r24, r28
    2a5a:	87 57       	subi	r24, 0x77	; 119
    2a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a62:	00 e0       	ldi	r16, 0x00	; 0
    2a64:	10 e0       	ldi	r17, 0x00	; 0
    2a66:	98 01       	movw	r18, r16
    2a68:	40 e0       	ldi	r20, 0x00	; 0
    2a6a:	50 e0       	ldi	r21, 0x00	; 0
    2a6c:	60 e8       	ldi	r22, 0x80	; 128
    2a6e:	7f e3       	ldi	r23, 0x3F	; 63
    2a70:	ce 01       	movw	r24, r28
    2a72:	8f 56       	subi	r24, 0x6F	; 111
    2a74:	9f 4f       	sbci	r25, 0xFF	; 255
    2a76:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a7a:	00 e0       	ldi	r16, 0x00	; 0
    2a7c:	10 e0       	ldi	r17, 0x00	; 0
    2a7e:	98 01       	movw	r18, r16
    2a80:	b9 01       	movw	r22, r18
    2a82:	a8 01       	movw	r20, r16
    2a84:	ce 01       	movw	r24, r28
    2a86:	87 56       	subi	r24, 0x67	; 103
    2a88:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a8e:	00 e0       	ldi	r16, 0x00	; 0
    2a90:	10 e0       	ldi	r17, 0x00	; 0
    2a92:	98 01       	movw	r18, r16
    2a94:	b9 01       	movw	r22, r18
    2a96:	a8 01       	movw	r20, r16
    2a98:	ce 01       	movw	r24, r28
    2a9a:	8f 55       	subi	r24, 0x5F	; 95
    2a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2aa2:	00 e0       	ldi	r16, 0x00	; 0
    2aa4:	10 e0       	ldi	r17, 0x00	; 0
    2aa6:	98 01       	movw	r18, r16
    2aa8:	b9 01       	movw	r22, r18
    2aaa:	a8 01       	movw	r20, r16
    2aac:	ce 01       	movw	r24, r28
    2aae:	87 55       	subi	r24, 0x57	; 87
    2ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2ab6:	00 e0       	ldi	r16, 0x00	; 0
    2ab8:	10 e0       	ldi	r17, 0x00	; 0
    2aba:	98 01       	movw	r18, r16
    2abc:	b9 01       	movw	r22, r18
    2abe:	a8 01       	movw	r20, r16
    2ac0:	ce 01       	movw	r24, r28
    2ac2:	8f 54       	subi	r24, 0x4F	; 79
    2ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2aca:	00 e0       	ldi	r16, 0x00	; 0
    2acc:	10 e0       	ldi	r17, 0x00	; 0
    2ace:	98 01       	movw	r18, r16
    2ad0:	b9 01       	movw	r22, r18
    2ad2:	a8 01       	movw	r20, r16
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	87 54       	subi	r24, 0x47	; 71
    2ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ada:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2ade:	00 e0       	ldi	r16, 0x00	; 0
    2ae0:	10 e0       	ldi	r17, 0x00	; 0
    2ae2:	98 01       	movw	r18, r16
    2ae4:	b9 01       	movw	r22, r18
    2ae6:	a8 01       	movw	r20, r16
    2ae8:	ce 01       	movw	r24, r28
    2aea:	8f 53       	subi	r24, 0x3F	; 63
    2aec:	9f 4f       	sbci	r25, 0xFF	; 255
    2aee:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2af2:	00 e0       	ldi	r16, 0x00	; 0
    2af4:	10 e0       	ldi	r17, 0x00	; 0
    2af6:	98 01       	movw	r18, r16
    2af8:	b9 01       	movw	r22, r18
    2afa:	a8 01       	movw	r20, r16
    2afc:	ce 01       	movw	r24, r28
    2afe:	87 53       	subi	r24, 0x37	; 55
    2b00:	9f 4f       	sbci	r25, 0xFF	; 255
    2b02:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b06:	00 e0       	ldi	r16, 0x00	; 0
    2b08:	10 e0       	ldi	r17, 0x00	; 0
    2b0a:	98 01       	movw	r18, r16
    2b0c:	b9 01       	movw	r22, r18
    2b0e:	a8 01       	movw	r20, r16
    2b10:	ce 01       	movw	r24, r28
    2b12:	8f 52       	subi	r24, 0x2F	; 47
    2b14:	9f 4f       	sbci	r25, 0xFF	; 255
    2b16:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b1a:	00 e0       	ldi	r16, 0x00	; 0
    2b1c:	10 e0       	ldi	r17, 0x00	; 0
    2b1e:	98 01       	movw	r18, r16
    2b20:	40 e0       	ldi	r20, 0x00	; 0
    2b22:	50 e0       	ldi	r21, 0x00	; 0
    2b24:	60 e8       	ldi	r22, 0x80	; 128
    2b26:	7f e3       	ldi	r23, 0x3F	; 63
    2b28:	ce 01       	movw	r24, r28
    2b2a:	87 52       	subi	r24, 0x27	; 39
    2b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b32:	00 e0       	ldi	r16, 0x00	; 0
    2b34:	10 e0       	ldi	r17, 0x00	; 0
    2b36:	98 01       	movw	r18, r16
    2b38:	b9 01       	movw	r22, r18
    2b3a:	a8 01       	movw	r20, r16
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	8f 51       	subi	r24, 0x1F	; 31
    2b40:	9f 4f       	sbci	r25, 0xFF	; 255
    2b42:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b46:	00 e0       	ldi	r16, 0x00	; 0
    2b48:	10 e0       	ldi	r17, 0x00	; 0
    2b4a:	98 01       	movw	r18, r16
    2b4c:	b9 01       	movw	r22, r18
    2b4e:	a8 01       	movw	r20, r16
    2b50:	ce 01       	movw	r24, r28
    2b52:	87 51       	subi	r24, 0x17	; 23
    2b54:	9f 4f       	sbci	r25, 0xFF	; 255
    2b56:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b5a:	00 e0       	ldi	r16, 0x00	; 0
    2b5c:	10 e0       	ldi	r17, 0x00	; 0
    2b5e:	98 01       	movw	r18, r16
    2b60:	b9 01       	movw	r22, r18
    2b62:	a8 01       	movw	r20, r16
    2b64:	ce 01       	movw	r24, r28
    2b66:	8f 50       	subi	r24, 0x0F	; 15
    2b68:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b6e:	00 e0       	ldi	r16, 0x00	; 0
    2b70:	10 e0       	ldi	r17, 0x00	; 0
    2b72:	98 01       	movw	r18, r16
    2b74:	b9 01       	movw	r22, r18
    2b76:	a8 01       	movw	r20, r16
    2b78:	ce 01       	movw	r24, r28
    2b7a:	87 50       	subi	r24, 0x07	; 7
    2b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b82:	00 e0       	ldi	r16, 0x00	; 0
    2b84:	10 e0       	ldi	r17, 0x00	; 0
    2b86:	98 01       	movw	r18, r16
    2b88:	b9 01       	movw	r22, r18
    2b8a:	a8 01       	movw	r20, r16
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	8f 5f       	subi	r24, 0xFF	; 255
    2b90:	9e 4f       	sbci	r25, 0xFE	; 254
    2b92:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b96:	00 e0       	ldi	r16, 0x00	; 0
    2b98:	10 e0       	ldi	r17, 0x00	; 0
    2b9a:	98 01       	movw	r18, r16
    2b9c:	b9 01       	movw	r22, r18
    2b9e:	a8 01       	movw	r20, r16
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	87 5f       	subi	r24, 0xF7	; 247
    2ba4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ba6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2baa:	00 e0       	ldi	r16, 0x00	; 0
    2bac:	10 e0       	ldi	r17, 0x00	; 0
    2bae:	98 01       	movw	r18, r16
    2bb0:	b9 01       	movw	r22, r18
    2bb2:	a8 01       	movw	r20, r16
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	8f 5e       	subi	r24, 0xEF	; 239
    2bb8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bba:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2bbe:	00 e0       	ldi	r16, 0x00	; 0
    2bc0:	10 e0       	ldi	r17, 0x00	; 0
    2bc2:	98 01       	movw	r18, r16
    2bc4:	b9 01       	movw	r22, r18
    2bc6:	a8 01       	movw	r20, r16
    2bc8:	ce 01       	movw	r24, r28
    2bca:	87 5e       	subi	r24, 0xE7	; 231
    2bcc:	9e 4f       	sbci	r25, 0xFE	; 254
    2bce:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2bd2:	00 e0       	ldi	r16, 0x00	; 0
    2bd4:	10 e0       	ldi	r17, 0x00	; 0
    2bd6:	98 01       	movw	r18, r16
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	50 e0       	ldi	r21, 0x00	; 0
    2bdc:	60 e8       	ldi	r22, 0x80	; 128
    2bde:	7f e3       	ldi	r23, 0x3F	; 63
    2be0:	ce 01       	movw	r24, r28
    2be2:	8f 5d       	subi	r24, 0xDF	; 223
    2be4:	9e 4f       	sbci	r25, 0xFE	; 254
    2be6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2bea:	00 e0       	ldi	r16, 0x00	; 0
    2bec:	10 e0       	ldi	r17, 0x00	; 0
    2bee:	98 01       	movw	r18, r16
    2bf0:	b9 01       	movw	r22, r18
    2bf2:	a8 01       	movw	r20, r16
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	87 5d       	subi	r24, 0xD7	; 215
    2bf8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bfa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2bfe:	00 e0       	ldi	r16, 0x00	; 0
    2c00:	10 e0       	ldi	r17, 0x00	; 0
    2c02:	98 01       	movw	r18, r16
    2c04:	b9 01       	movw	r22, r18
    2c06:	a8 01       	movw	r20, r16
    2c08:	ce 01       	movw	r24, r28
    2c0a:	8f 5c       	subi	r24, 0xCF	; 207
    2c0c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c0e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c12:	00 e0       	ldi	r16, 0x00	; 0
    2c14:	10 e0       	ldi	r17, 0x00	; 0
    2c16:	98 01       	movw	r18, r16
    2c18:	b9 01       	movw	r22, r18
    2c1a:	a8 01       	movw	r20, r16
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	87 5c       	subi	r24, 0xC7	; 199
    2c20:	9e 4f       	sbci	r25, 0xFE	; 254
    2c22:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c26:	00 e0       	ldi	r16, 0x00	; 0
    2c28:	10 e0       	ldi	r17, 0x00	; 0
    2c2a:	98 01       	movw	r18, r16
    2c2c:	b9 01       	movw	r22, r18
    2c2e:	a8 01       	movw	r20, r16
    2c30:	ce 01       	movw	r24, r28
    2c32:	8f 5b       	subi	r24, 0xBF	; 191
    2c34:	9e 4f       	sbci	r25, 0xFE	; 254
    2c36:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c3a:	00 e0       	ldi	r16, 0x00	; 0
    2c3c:	10 e0       	ldi	r17, 0x00	; 0
    2c3e:	98 01       	movw	r18, r16
    2c40:	b9 01       	movw	r22, r18
    2c42:	a8 01       	movw	r20, r16
    2c44:	ce 01       	movw	r24, r28
    2c46:	87 5b       	subi	r24, 0xB7	; 183
    2c48:	9e 4f       	sbci	r25, 0xFE	; 254
    2c4a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c4e:	00 e0       	ldi	r16, 0x00	; 0
    2c50:	10 e0       	ldi	r17, 0x00	; 0
    2c52:	98 01       	movw	r18, r16
    2c54:	b9 01       	movw	r22, r18
    2c56:	a8 01       	movw	r20, r16
    2c58:	ce 01       	movw	r24, r28
    2c5a:	8f 5a       	subi	r24, 0xAF	; 175
    2c5c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c5e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c62:	00 e0       	ldi	r16, 0x00	; 0
    2c64:	10 e0       	ldi	r17, 0x00	; 0
    2c66:	98 01       	movw	r18, r16
    2c68:	b9 01       	movw	r22, r18
    2c6a:	a8 01       	movw	r20, r16
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	87 5a       	subi	r24, 0xA7	; 167
    2c70:	9e 4f       	sbci	r25, 0xFE	; 254
    2c72:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c76:	00 e0       	ldi	r16, 0x00	; 0
    2c78:	10 e0       	ldi	r17, 0x00	; 0
    2c7a:	98 01       	movw	r18, r16
    2c7c:	b9 01       	movw	r22, r18
    2c7e:	a8 01       	movw	r20, r16
    2c80:	ce 01       	movw	r24, r28
    2c82:	8f 59       	subi	r24, 0x9F	; 159
    2c84:	9e 4f       	sbci	r25, 0xFE	; 254
    2c86:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c8a:	00 e0       	ldi	r16, 0x00	; 0
    2c8c:	10 e0       	ldi	r17, 0x00	; 0
    2c8e:	98 01       	movw	r18, r16
    2c90:	b9 01       	movw	r22, r18
    2c92:	a8 01       	movw	r20, r16
    2c94:	ce 01       	movw	r24, r28
    2c96:	87 59       	subi	r24, 0x97	; 151
    2c98:	9e 4f       	sbci	r25, 0xFE	; 254
    2c9a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c9e:	00 e0       	ldi	r16, 0x00	; 0
    2ca0:	10 e0       	ldi	r17, 0x00	; 0
    2ca2:	98 01       	movw	r18, r16
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	60 e8       	ldi	r22, 0x80	; 128
    2caa:	7f e3       	ldi	r23, 0x3F	; 63
    2cac:	ce 01       	movw	r24, r28
    2cae:	8f 58       	subi	r24, 0x8F	; 143
    2cb0:	9e 4f       	sbci	r25, 0xFE	; 254
    2cb2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2cb6:	00 e0       	ldi	r16, 0x00	; 0
    2cb8:	10 e0       	ldi	r17, 0x00	; 0
    2cba:	98 01       	movw	r18, r16
    2cbc:	b9 01       	movw	r22, r18
    2cbe:	a8 01       	movw	r20, r16
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	87 58       	subi	r24, 0x87	; 135
    2cc4:	9e 4f       	sbci	r25, 0xFE	; 254
    2cc6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2cca:	00 e0       	ldi	r16, 0x00	; 0
    2ccc:	10 e0       	ldi	r17, 0x00	; 0
    2cce:	98 01       	movw	r18, r16
    2cd0:	b9 01       	movw	r22, r18
    2cd2:	a8 01       	movw	r20, r16
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	8f 57       	subi	r24, 0x7F	; 127
    2cd8:	9e 4f       	sbci	r25, 0xFE	; 254
    2cda:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2cde:	00 e0       	ldi	r16, 0x00	; 0
    2ce0:	10 e0       	ldi	r17, 0x00	; 0
    2ce2:	98 01       	movw	r18, r16
    2ce4:	b9 01       	movw	r22, r18
    2ce6:	a8 01       	movw	r20, r16
    2ce8:	ce 01       	movw	r24, r28
    2cea:	87 57       	subi	r24, 0x77	; 119
    2cec:	9e 4f       	sbci	r25, 0xFE	; 254
    2cee:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2cf2:	00 e0       	ldi	r16, 0x00	; 0
    2cf4:	10 e0       	ldi	r17, 0x00	; 0
    2cf6:	98 01       	movw	r18, r16
    2cf8:	b9 01       	movw	r22, r18
    2cfa:	a8 01       	movw	r20, r16
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	8f 56       	subi	r24, 0x6F	; 111
    2d00:	9e 4f       	sbci	r25, 0xFE	; 254
    2d02:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d06:	00 e0       	ldi	r16, 0x00	; 0
    2d08:	10 e0       	ldi	r17, 0x00	; 0
    2d0a:	98 01       	movw	r18, r16
    2d0c:	b9 01       	movw	r22, r18
    2d0e:	a8 01       	movw	r20, r16
    2d10:	ce 01       	movw	r24, r28
    2d12:	87 56       	subi	r24, 0x67	; 103
    2d14:	9e 4f       	sbci	r25, 0xFE	; 254
    2d16:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d1a:	00 e0       	ldi	r16, 0x00	; 0
    2d1c:	10 e0       	ldi	r17, 0x00	; 0
    2d1e:	98 01       	movw	r18, r16
    2d20:	b9 01       	movw	r22, r18
    2d22:	a8 01       	movw	r20, r16
    2d24:	ce 01       	movw	r24, r28
    2d26:	8f 55       	subi	r24, 0x5F	; 95
    2d28:	9e 4f       	sbci	r25, 0xFE	; 254
    2d2a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d2e:	00 e0       	ldi	r16, 0x00	; 0
    2d30:	10 e0       	ldi	r17, 0x00	; 0
    2d32:	98 01       	movw	r18, r16
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	50 e0       	ldi	r21, 0x00	; 0
    2d38:	60 e8       	ldi	r22, 0x80	; 128
    2d3a:	7f e3       	ldi	r23, 0x3F	; 63
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	87 55       	subi	r24, 0x57	; 87
    2d40:	9e 4f       	sbci	r25, 0xFE	; 254
    2d42:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d46:	00 e0       	ldi	r16, 0x00	; 0
    2d48:	10 e0       	ldi	r17, 0x00	; 0
    2d4a:	98 01       	movw	r18, r16
    2d4c:	b9 01       	movw	r22, r18
    2d4e:	a8 01       	movw	r20, r16
    2d50:	ce 01       	movw	r24, r28
    2d52:	8f 54       	subi	r24, 0x4F	; 79
    2d54:	9e 4f       	sbci	r25, 0xFE	; 254
    2d56:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d5a:	00 e0       	ldi	r16, 0x00	; 0
    2d5c:	10 e0       	ldi	r17, 0x00	; 0
    2d5e:	98 01       	movw	r18, r16
    2d60:	b9 01       	movw	r22, r18
    2d62:	a8 01       	movw	r20, r16
    2d64:	ce 01       	movw	r24, r28
    2d66:	87 54       	subi	r24, 0x47	; 71
    2d68:	9e 4f       	sbci	r25, 0xFE	; 254
    2d6a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d6e:	00 e0       	ldi	r16, 0x00	; 0
    2d70:	10 e0       	ldi	r17, 0x00	; 0
    2d72:	98 01       	movw	r18, r16
    2d74:	b9 01       	movw	r22, r18
    2d76:	a8 01       	movw	r20, r16
    2d78:	ce 01       	movw	r24, r28
    2d7a:	8f 53       	subi	r24, 0x3F	; 63
    2d7c:	9e 4f       	sbci	r25, 0xFE	; 254
    2d7e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d82:	00 e0       	ldi	r16, 0x00	; 0
    2d84:	10 e0       	ldi	r17, 0x00	; 0
    2d86:	98 01       	movw	r18, r16
    2d88:	b9 01       	movw	r22, r18
    2d8a:	a8 01       	movw	r20, r16
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	87 53       	subi	r24, 0x37	; 55
    2d90:	9e 4f       	sbci	r25, 0xFE	; 254
    2d92:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d96:	00 e0       	ldi	r16, 0x00	; 0
    2d98:	10 e0       	ldi	r17, 0x00	; 0
    2d9a:	98 01       	movw	r18, r16
    2d9c:	b9 01       	movw	r22, r18
    2d9e:	a8 01       	movw	r20, r16
    2da0:	ce 01       	movw	r24, r28
    2da2:	8f 52       	subi	r24, 0x2F	; 47
    2da4:	9e 4f       	sbci	r25, 0xFE	; 254
    2da6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2daa:	00 e0       	ldi	r16, 0x00	; 0
    2dac:	10 e0       	ldi	r17, 0x00	; 0
    2dae:	98 01       	movw	r18, r16
    2db0:	b9 01       	movw	r22, r18
    2db2:	a8 01       	movw	r20, r16
    2db4:	ce 01       	movw	r24, r28
    2db6:	87 52       	subi	r24, 0x27	; 39
    2db8:	9e 4f       	sbci	r25, 0xFE	; 254
    2dba:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2dbe:	00 e0       	ldi	r16, 0x00	; 0
    2dc0:	10 e0       	ldi	r17, 0x00	; 0
    2dc2:	98 01       	movw	r18, r16
    2dc4:	b9 01       	movw	r22, r18
    2dc6:	a8 01       	movw	r20, r16
    2dc8:	ce 01       	movw	r24, r28
    2dca:	8f 51       	subi	r24, 0x1F	; 31
    2dcc:	9e 4f       	sbci	r25, 0xFE	; 254
    2dce:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2dd2:	00 e0       	ldi	r16, 0x00	; 0
    2dd4:	10 e0       	ldi	r17, 0x00	; 0
    2dd6:	98 01       	movw	r18, r16
    2dd8:	b9 01       	movw	r22, r18
    2dda:	a8 01       	movw	r20, r16
    2ddc:	ce 01       	movw	r24, r28
    2dde:	87 51       	subi	r24, 0x17	; 23
    2de0:	9e 4f       	sbci	r25, 0xFE	; 254
    2de2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2de6:	00 e0       	ldi	r16, 0x00	; 0
    2de8:	10 e0       	ldi	r17, 0x00	; 0
    2dea:	98 01       	movw	r18, r16
    2dec:	b9 01       	movw	r22, r18
    2dee:	a8 01       	movw	r20, r16
    2df0:	ce 01       	movw	r24, r28
    2df2:	8f 50       	subi	r24, 0x0F	; 15
    2df4:	9e 4f       	sbci	r25, 0xFE	; 254
    2df6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2dfa:	00 e0       	ldi	r16, 0x00	; 0
    2dfc:	10 e0       	ldi	r17, 0x00	; 0
    2dfe:	98 01       	movw	r18, r16
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	60 e8       	ldi	r22, 0x80	; 128
    2e06:	7f e3       	ldi	r23, 0x3F	; 63
    2e08:	ce 01       	movw	r24, r28
    2e0a:	87 50       	subi	r24, 0x07	; 7
    2e0c:	9e 4f       	sbci	r25, 0xFE	; 254
    2e0e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    2e12:	c9 5f       	subi	r28, 0xF9	; 249
    2e14:	dd 4f       	sbci	r29, 0xFD	; 253
    2e16:	79 82       	std	Y+1, r7	; 0x01
    2e18:	68 82       	st	Y, r6
    2e1a:	c7 50       	subi	r28, 0x07	; 7
    2e1c:	d2 40       	sbci	r29, 0x02	; 2
    2e1e:	c7 5f       	subi	r28, 0xF7	; 247
    2e20:	dd 4f       	sbci	r29, 0xFD	; 253
    2e22:	99 82       	std	Y+1, r9	; 0x01
    2e24:	88 82       	st	Y, r8
    2e26:	c9 50       	subi	r28, 0x09	; 9
    2e28:	d2 40       	sbci	r29, 0x02	; 2
    2e2a:	c5 5f       	subi	r28, 0xF5	; 245
    2e2c:	dd 4f       	sbci	r29, 0xFD	; 253
    2e2e:	f9 82       	std	Y+1, r15	; 0x01
    2e30:	e8 82       	st	Y, r14
    2e32:	cb 50       	subi	r28, 0x0B	; 11
    2e34:	d2 40       	sbci	r29, 0x02	; 2
    2e36:	cf 5f       	subi	r28, 0xFF	; 255
    2e38:	dd 4f       	sbci	r29, 0xFD	; 253
    2e3a:	59 82       	std	Y+1, r5	; 0x01
    2e3c:	48 82       	st	Y, r4
    2e3e:	c1 50       	subi	r28, 0x01	; 1
    2e40:	d2 40       	sbci	r29, 0x02	; 2
    2e42:	cd 5f       	subi	r28, 0xFD	; 253
    2e44:	dd 4f       	sbci	r29, 0xFD	; 253
    2e46:	39 82       	std	Y+1, r3	; 0x01
    2e48:	28 82       	st	Y, r2
    2e4a:	c3 50       	subi	r28, 0x03	; 3
    2e4c:	d2 40       	sbci	r29, 0x02	; 2
    2e4e:	cb 5f       	subi	r28, 0xFB	; 251
    2e50:	dd 4f       	sbci	r29, 0xFD	; 253
    2e52:	d9 82       	std	Y+1, r13	; 0x01
    2e54:	c8 82       	st	Y, r12
    2e56:	c5 50       	subi	r28, 0x05	; 5
    2e58:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),csw_matrix),QB_SIZE3);
    2e5a:	9e 01       	movw	r18, r28
    2e5c:	2f 5f       	subi	r18, 0xFF	; 255
    2e5e:	3d 4f       	sbci	r19, 0xFD	; 253
    2e60:	ae 01       	movw	r20, r28
    2e62:	49 5f       	subi	r20, 0xF9	; 249
    2e64:	5d 4f       	sbci	r21, 0xFD	; 253
    2e66:	63 e0       	ldi	r22, 0x03	; 3
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	c5 01       	movw	r24, r10
    2e6c:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    2e70:	ae 01       	movw	r20, r28
    2e72:	4f 5f       	subi	r20, 0xFF	; 255
    2e74:	5f 4f       	sbci	r21, 0xFF	; 255
    2e76:	bc 01       	movw	r22, r24
    2e78:	c5 01       	movw	r24, r10
    2e7a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    2e7e:	43 e0       	ldi	r20, 0x03	; 3
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	bc 01       	movw	r22, r24
    2e84:	c5 01       	movw	r24, r10
    2e86:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    2e8a:	c4 5f       	subi	r28, 0xF4	; 244
    2e8c:	dd 4f       	sbci	r29, 0xFD	; 253
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	df 90       	pop	r13
    2ea6:	cf 90       	pop	r12
    2ea8:	bf 90       	pop	r11
    2eaa:	af 90       	pop	r10
    2eac:	9f 90       	pop	r9
    2eae:	8f 90       	pop	r8
    2eb0:	7f 90       	pop	r7
    2eb2:	6f 90       	pop	r6
    2eb4:	5f 90       	pop	r5
    2eb6:	4f 90       	pop	r4
    2eb8:	3f 90       	pop	r3
    2eba:	2f 90       	pop	r2
    2ebc:	08 95       	ret

00002ebe <_ZN5Gates3TOFEiiiiii>:
int * Gates::TOF(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3){
    2ebe:	2f 92       	push	r2
    2ec0:	3f 92       	push	r3
    2ec2:	4f 92       	push	r4
    2ec4:	5f 92       	push	r5
    2ec6:	6f 92       	push	r6
    2ec8:	7f 92       	push	r7
    2eca:	8f 92       	push	r8
    2ecc:	9f 92       	push	r9
    2ece:	af 92       	push	r10
    2ed0:	bf 92       	push	r11
    2ed2:	cf 92       	push	r12
    2ed4:	df 92       	push	r13
    2ed6:	ef 92       	push	r14
    2ed8:	ff 92       	push	r15
    2eda:	0f 93       	push	r16
    2edc:	1f 93       	push	r17
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	cc 50       	subi	r28, 0x0C	; 12
    2ee8:	d2 40       	sbci	r29, 0x02	; 2
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	5c 01       	movw	r10, r24
    2ef6:	3b 01       	movw	r6, r22
    2ef8:	2a 01       	movw	r4, r20
    2efa:	49 01       	movw	r8, r18
    2efc:	18 01       	movw	r2, r16
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    2efe:	00 e0       	ldi	r16, 0x00	; 0
    2f00:	10 e0       	ldi	r17, 0x00	; 0
    2f02:	98 01       	movw	r18, r16
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	60 e8       	ldi	r22, 0x80	; 128
    2f0a:	7f e3       	ldi	r23, 0x3F	; 63
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	01 96       	adiw	r24, 0x01	; 1
    2f10:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f14:	00 e0       	ldi	r16, 0x00	; 0
    2f16:	10 e0       	ldi	r17, 0x00	; 0
    2f18:	98 01       	movw	r18, r16
    2f1a:	b9 01       	movw	r22, r18
    2f1c:	a8 01       	movw	r20, r16
    2f1e:	ce 01       	movw	r24, r28
    2f20:	09 96       	adiw	r24, 0x09	; 9
    2f22:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f26:	00 e0       	ldi	r16, 0x00	; 0
    2f28:	10 e0       	ldi	r17, 0x00	; 0
    2f2a:	98 01       	movw	r18, r16
    2f2c:	b9 01       	movw	r22, r18
    2f2e:	a8 01       	movw	r20, r16
    2f30:	ce 01       	movw	r24, r28
    2f32:	41 96       	adiw	r24, 0x11	; 17
    2f34:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f38:	00 e0       	ldi	r16, 0x00	; 0
    2f3a:	10 e0       	ldi	r17, 0x00	; 0
    2f3c:	98 01       	movw	r18, r16
    2f3e:	b9 01       	movw	r22, r18
    2f40:	a8 01       	movw	r20, r16
    2f42:	ce 01       	movw	r24, r28
    2f44:	49 96       	adiw	r24, 0x19	; 25
    2f46:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f4a:	00 e0       	ldi	r16, 0x00	; 0
    2f4c:	10 e0       	ldi	r17, 0x00	; 0
    2f4e:	98 01       	movw	r18, r16
    2f50:	b9 01       	movw	r22, r18
    2f52:	a8 01       	movw	r20, r16
    2f54:	ce 01       	movw	r24, r28
    2f56:	81 96       	adiw	r24, 0x21	; 33
    2f58:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f5c:	00 e0       	ldi	r16, 0x00	; 0
    2f5e:	10 e0       	ldi	r17, 0x00	; 0
    2f60:	98 01       	movw	r18, r16
    2f62:	b9 01       	movw	r22, r18
    2f64:	a8 01       	movw	r20, r16
    2f66:	ce 01       	movw	r24, r28
    2f68:	89 96       	adiw	r24, 0x29	; 41
    2f6a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f6e:	00 e0       	ldi	r16, 0x00	; 0
    2f70:	10 e0       	ldi	r17, 0x00	; 0
    2f72:	98 01       	movw	r18, r16
    2f74:	b9 01       	movw	r22, r18
    2f76:	a8 01       	movw	r20, r16
    2f78:	ce 01       	movw	r24, r28
    2f7a:	c1 96       	adiw	r24, 0x31	; 49
    2f7c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f80:	00 e0       	ldi	r16, 0x00	; 0
    2f82:	10 e0       	ldi	r17, 0x00	; 0
    2f84:	98 01       	movw	r18, r16
    2f86:	b9 01       	movw	r22, r18
    2f88:	a8 01       	movw	r20, r16
    2f8a:	ce 01       	movw	r24, r28
    2f8c:	c9 96       	adiw	r24, 0x39	; 57
    2f8e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f92:	00 e0       	ldi	r16, 0x00	; 0
    2f94:	10 e0       	ldi	r17, 0x00	; 0
    2f96:	98 01       	movw	r18, r16
    2f98:	b9 01       	movw	r22, r18
    2f9a:	a8 01       	movw	r20, r16
    2f9c:	ce 01       	movw	r24, r28
    2f9e:	8f 5b       	subi	r24, 0xBF	; 191
    2fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2fa6:	00 e0       	ldi	r16, 0x00	; 0
    2fa8:	10 e0       	ldi	r17, 0x00	; 0
    2faa:	98 01       	movw	r18, r16
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	50 e0       	ldi	r21, 0x00	; 0
    2fb0:	60 e8       	ldi	r22, 0x80	; 128
    2fb2:	7f e3       	ldi	r23, 0x3F	; 63
    2fb4:	ce 01       	movw	r24, r28
    2fb6:	87 5b       	subi	r24, 0xB7	; 183
    2fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fba:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2fbe:	00 e0       	ldi	r16, 0x00	; 0
    2fc0:	10 e0       	ldi	r17, 0x00	; 0
    2fc2:	98 01       	movw	r18, r16
    2fc4:	b9 01       	movw	r22, r18
    2fc6:	a8 01       	movw	r20, r16
    2fc8:	ce 01       	movw	r24, r28
    2fca:	8f 5a       	subi	r24, 0xAF	; 175
    2fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2fce:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2fd2:	00 e0       	ldi	r16, 0x00	; 0
    2fd4:	10 e0       	ldi	r17, 0x00	; 0
    2fd6:	98 01       	movw	r18, r16
    2fd8:	b9 01       	movw	r22, r18
    2fda:	a8 01       	movw	r20, r16
    2fdc:	ce 01       	movw	r24, r28
    2fde:	87 5a       	subi	r24, 0xA7	; 167
    2fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2fe6:	00 e0       	ldi	r16, 0x00	; 0
    2fe8:	10 e0       	ldi	r17, 0x00	; 0
    2fea:	98 01       	movw	r18, r16
    2fec:	b9 01       	movw	r22, r18
    2fee:	a8 01       	movw	r20, r16
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	8f 59       	subi	r24, 0x9F	; 159
    2ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2ffa:	00 e0       	ldi	r16, 0x00	; 0
    2ffc:	10 e0       	ldi	r17, 0x00	; 0
    2ffe:	98 01       	movw	r18, r16
    3000:	b9 01       	movw	r22, r18
    3002:	a8 01       	movw	r20, r16
    3004:	ce 01       	movw	r24, r28
    3006:	87 59       	subi	r24, 0x97	; 151
    3008:	9f 4f       	sbci	r25, 0xFF	; 255
    300a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    300e:	00 e0       	ldi	r16, 0x00	; 0
    3010:	10 e0       	ldi	r17, 0x00	; 0
    3012:	98 01       	movw	r18, r16
    3014:	b9 01       	movw	r22, r18
    3016:	a8 01       	movw	r20, r16
    3018:	ce 01       	movw	r24, r28
    301a:	8f 58       	subi	r24, 0x8F	; 143
    301c:	9f 4f       	sbci	r25, 0xFF	; 255
    301e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3022:	00 e0       	ldi	r16, 0x00	; 0
    3024:	10 e0       	ldi	r17, 0x00	; 0
    3026:	98 01       	movw	r18, r16
    3028:	b9 01       	movw	r22, r18
    302a:	a8 01       	movw	r20, r16
    302c:	ce 01       	movw	r24, r28
    302e:	87 58       	subi	r24, 0x87	; 135
    3030:	9f 4f       	sbci	r25, 0xFF	; 255
    3032:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3036:	00 e0       	ldi	r16, 0x00	; 0
    3038:	10 e0       	ldi	r17, 0x00	; 0
    303a:	98 01       	movw	r18, r16
    303c:	b9 01       	movw	r22, r18
    303e:	a8 01       	movw	r20, r16
    3040:	ce 01       	movw	r24, r28
    3042:	8f 57       	subi	r24, 0x7F	; 127
    3044:	9f 4f       	sbci	r25, 0xFF	; 255
    3046:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    304a:	00 e0       	ldi	r16, 0x00	; 0
    304c:	10 e0       	ldi	r17, 0x00	; 0
    304e:	98 01       	movw	r18, r16
    3050:	b9 01       	movw	r22, r18
    3052:	a8 01       	movw	r20, r16
    3054:	ce 01       	movw	r24, r28
    3056:	87 57       	subi	r24, 0x77	; 119
    3058:	9f 4f       	sbci	r25, 0xFF	; 255
    305a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    305e:	00 e0       	ldi	r16, 0x00	; 0
    3060:	10 e0       	ldi	r17, 0x00	; 0
    3062:	98 01       	movw	r18, r16
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	50 e0       	ldi	r21, 0x00	; 0
    3068:	60 e8       	ldi	r22, 0x80	; 128
    306a:	7f e3       	ldi	r23, 0x3F	; 63
    306c:	ce 01       	movw	r24, r28
    306e:	8f 56       	subi	r24, 0x6F	; 111
    3070:	9f 4f       	sbci	r25, 0xFF	; 255
    3072:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3076:	00 e0       	ldi	r16, 0x00	; 0
    3078:	10 e0       	ldi	r17, 0x00	; 0
    307a:	98 01       	movw	r18, r16
    307c:	b9 01       	movw	r22, r18
    307e:	a8 01       	movw	r20, r16
    3080:	ce 01       	movw	r24, r28
    3082:	87 56       	subi	r24, 0x67	; 103
    3084:	9f 4f       	sbci	r25, 0xFF	; 255
    3086:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    308a:	00 e0       	ldi	r16, 0x00	; 0
    308c:	10 e0       	ldi	r17, 0x00	; 0
    308e:	98 01       	movw	r18, r16
    3090:	b9 01       	movw	r22, r18
    3092:	a8 01       	movw	r20, r16
    3094:	ce 01       	movw	r24, r28
    3096:	8f 55       	subi	r24, 0x5F	; 95
    3098:	9f 4f       	sbci	r25, 0xFF	; 255
    309a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    309e:	00 e0       	ldi	r16, 0x00	; 0
    30a0:	10 e0       	ldi	r17, 0x00	; 0
    30a2:	98 01       	movw	r18, r16
    30a4:	b9 01       	movw	r22, r18
    30a6:	a8 01       	movw	r20, r16
    30a8:	ce 01       	movw	r24, r28
    30aa:	87 55       	subi	r24, 0x57	; 87
    30ac:	9f 4f       	sbci	r25, 0xFF	; 255
    30ae:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    30b2:	00 e0       	ldi	r16, 0x00	; 0
    30b4:	10 e0       	ldi	r17, 0x00	; 0
    30b6:	98 01       	movw	r18, r16
    30b8:	b9 01       	movw	r22, r18
    30ba:	a8 01       	movw	r20, r16
    30bc:	ce 01       	movw	r24, r28
    30be:	8f 54       	subi	r24, 0x4F	; 79
    30c0:	9f 4f       	sbci	r25, 0xFF	; 255
    30c2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    30c6:	00 e0       	ldi	r16, 0x00	; 0
    30c8:	10 e0       	ldi	r17, 0x00	; 0
    30ca:	98 01       	movw	r18, r16
    30cc:	b9 01       	movw	r22, r18
    30ce:	a8 01       	movw	r20, r16
    30d0:	ce 01       	movw	r24, r28
    30d2:	87 54       	subi	r24, 0x47	; 71
    30d4:	9f 4f       	sbci	r25, 0xFF	; 255
    30d6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    30da:	00 e0       	ldi	r16, 0x00	; 0
    30dc:	10 e0       	ldi	r17, 0x00	; 0
    30de:	98 01       	movw	r18, r16
    30e0:	b9 01       	movw	r22, r18
    30e2:	a8 01       	movw	r20, r16
    30e4:	ce 01       	movw	r24, r28
    30e6:	8f 53       	subi	r24, 0x3F	; 63
    30e8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ea:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    30ee:	00 e0       	ldi	r16, 0x00	; 0
    30f0:	10 e0       	ldi	r17, 0x00	; 0
    30f2:	98 01       	movw	r18, r16
    30f4:	b9 01       	movw	r22, r18
    30f6:	a8 01       	movw	r20, r16
    30f8:	ce 01       	movw	r24, r28
    30fa:	87 53       	subi	r24, 0x37	; 55
    30fc:	9f 4f       	sbci	r25, 0xFF	; 255
    30fe:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3102:	00 e0       	ldi	r16, 0x00	; 0
    3104:	10 e0       	ldi	r17, 0x00	; 0
    3106:	98 01       	movw	r18, r16
    3108:	b9 01       	movw	r22, r18
    310a:	a8 01       	movw	r20, r16
    310c:	ce 01       	movw	r24, r28
    310e:	8f 52       	subi	r24, 0x2F	; 47
    3110:	9f 4f       	sbci	r25, 0xFF	; 255
    3112:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3116:	00 e0       	ldi	r16, 0x00	; 0
    3118:	10 e0       	ldi	r17, 0x00	; 0
    311a:	98 01       	movw	r18, r16
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	60 e8       	ldi	r22, 0x80	; 128
    3122:	7f e3       	ldi	r23, 0x3F	; 63
    3124:	ce 01       	movw	r24, r28
    3126:	87 52       	subi	r24, 0x27	; 39
    3128:	9f 4f       	sbci	r25, 0xFF	; 255
    312a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    312e:	00 e0       	ldi	r16, 0x00	; 0
    3130:	10 e0       	ldi	r17, 0x00	; 0
    3132:	98 01       	movw	r18, r16
    3134:	b9 01       	movw	r22, r18
    3136:	a8 01       	movw	r20, r16
    3138:	ce 01       	movw	r24, r28
    313a:	8f 51       	subi	r24, 0x1F	; 31
    313c:	9f 4f       	sbci	r25, 0xFF	; 255
    313e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3142:	00 e0       	ldi	r16, 0x00	; 0
    3144:	10 e0       	ldi	r17, 0x00	; 0
    3146:	98 01       	movw	r18, r16
    3148:	b9 01       	movw	r22, r18
    314a:	a8 01       	movw	r20, r16
    314c:	ce 01       	movw	r24, r28
    314e:	87 51       	subi	r24, 0x17	; 23
    3150:	9f 4f       	sbci	r25, 0xFF	; 255
    3152:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3156:	00 e0       	ldi	r16, 0x00	; 0
    3158:	10 e0       	ldi	r17, 0x00	; 0
    315a:	98 01       	movw	r18, r16
    315c:	b9 01       	movw	r22, r18
    315e:	a8 01       	movw	r20, r16
    3160:	ce 01       	movw	r24, r28
    3162:	8f 50       	subi	r24, 0x0F	; 15
    3164:	9f 4f       	sbci	r25, 0xFF	; 255
    3166:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    316a:	00 e0       	ldi	r16, 0x00	; 0
    316c:	10 e0       	ldi	r17, 0x00	; 0
    316e:	98 01       	movw	r18, r16
    3170:	b9 01       	movw	r22, r18
    3172:	a8 01       	movw	r20, r16
    3174:	ce 01       	movw	r24, r28
    3176:	87 50       	subi	r24, 0x07	; 7
    3178:	9f 4f       	sbci	r25, 0xFF	; 255
    317a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    317e:	00 e0       	ldi	r16, 0x00	; 0
    3180:	10 e0       	ldi	r17, 0x00	; 0
    3182:	98 01       	movw	r18, r16
    3184:	b9 01       	movw	r22, r18
    3186:	a8 01       	movw	r20, r16
    3188:	ce 01       	movw	r24, r28
    318a:	8f 5f       	subi	r24, 0xFF	; 255
    318c:	9e 4f       	sbci	r25, 0xFE	; 254
    318e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3192:	00 e0       	ldi	r16, 0x00	; 0
    3194:	10 e0       	ldi	r17, 0x00	; 0
    3196:	98 01       	movw	r18, r16
    3198:	b9 01       	movw	r22, r18
    319a:	a8 01       	movw	r20, r16
    319c:	ce 01       	movw	r24, r28
    319e:	87 5f       	subi	r24, 0xF7	; 247
    31a0:	9e 4f       	sbci	r25, 0xFE	; 254
    31a2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    31a6:	00 e0       	ldi	r16, 0x00	; 0
    31a8:	10 e0       	ldi	r17, 0x00	; 0
    31aa:	98 01       	movw	r18, r16
    31ac:	b9 01       	movw	r22, r18
    31ae:	a8 01       	movw	r20, r16
    31b0:	ce 01       	movw	r24, r28
    31b2:	8f 5e       	subi	r24, 0xEF	; 239
    31b4:	9e 4f       	sbci	r25, 0xFE	; 254
    31b6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    31ba:	00 e0       	ldi	r16, 0x00	; 0
    31bc:	10 e0       	ldi	r17, 0x00	; 0
    31be:	98 01       	movw	r18, r16
    31c0:	b9 01       	movw	r22, r18
    31c2:	a8 01       	movw	r20, r16
    31c4:	ce 01       	movw	r24, r28
    31c6:	87 5e       	subi	r24, 0xE7	; 231
    31c8:	9e 4f       	sbci	r25, 0xFE	; 254
    31ca:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    31ce:	00 e0       	ldi	r16, 0x00	; 0
    31d0:	10 e0       	ldi	r17, 0x00	; 0
    31d2:	98 01       	movw	r18, r16
    31d4:	40 e0       	ldi	r20, 0x00	; 0
    31d6:	50 e0       	ldi	r21, 0x00	; 0
    31d8:	60 e8       	ldi	r22, 0x80	; 128
    31da:	7f e3       	ldi	r23, 0x3F	; 63
    31dc:	ce 01       	movw	r24, r28
    31de:	8f 5d       	subi	r24, 0xDF	; 223
    31e0:	9e 4f       	sbci	r25, 0xFE	; 254
    31e2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    31e6:	00 e0       	ldi	r16, 0x00	; 0
    31e8:	10 e0       	ldi	r17, 0x00	; 0
    31ea:	98 01       	movw	r18, r16
    31ec:	b9 01       	movw	r22, r18
    31ee:	a8 01       	movw	r20, r16
    31f0:	ce 01       	movw	r24, r28
    31f2:	87 5d       	subi	r24, 0xD7	; 215
    31f4:	9e 4f       	sbci	r25, 0xFE	; 254
    31f6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    31fa:	00 e0       	ldi	r16, 0x00	; 0
    31fc:	10 e0       	ldi	r17, 0x00	; 0
    31fe:	98 01       	movw	r18, r16
    3200:	b9 01       	movw	r22, r18
    3202:	a8 01       	movw	r20, r16
    3204:	ce 01       	movw	r24, r28
    3206:	8f 5c       	subi	r24, 0xCF	; 207
    3208:	9e 4f       	sbci	r25, 0xFE	; 254
    320a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    320e:	00 e0       	ldi	r16, 0x00	; 0
    3210:	10 e0       	ldi	r17, 0x00	; 0
    3212:	98 01       	movw	r18, r16
    3214:	b9 01       	movw	r22, r18
    3216:	a8 01       	movw	r20, r16
    3218:	ce 01       	movw	r24, r28
    321a:	87 5c       	subi	r24, 0xC7	; 199
    321c:	9e 4f       	sbci	r25, 0xFE	; 254
    321e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3222:	00 e0       	ldi	r16, 0x00	; 0
    3224:	10 e0       	ldi	r17, 0x00	; 0
    3226:	98 01       	movw	r18, r16
    3228:	b9 01       	movw	r22, r18
    322a:	a8 01       	movw	r20, r16
    322c:	ce 01       	movw	r24, r28
    322e:	8f 5b       	subi	r24, 0xBF	; 191
    3230:	9e 4f       	sbci	r25, 0xFE	; 254
    3232:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3236:	00 e0       	ldi	r16, 0x00	; 0
    3238:	10 e0       	ldi	r17, 0x00	; 0
    323a:	98 01       	movw	r18, r16
    323c:	b9 01       	movw	r22, r18
    323e:	a8 01       	movw	r20, r16
    3240:	ce 01       	movw	r24, r28
    3242:	87 5b       	subi	r24, 0xB7	; 183
    3244:	9e 4f       	sbci	r25, 0xFE	; 254
    3246:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    324a:	00 e0       	ldi	r16, 0x00	; 0
    324c:	10 e0       	ldi	r17, 0x00	; 0
    324e:	98 01       	movw	r18, r16
    3250:	b9 01       	movw	r22, r18
    3252:	a8 01       	movw	r20, r16
    3254:	ce 01       	movw	r24, r28
    3256:	8f 5a       	subi	r24, 0xAF	; 175
    3258:	9e 4f       	sbci	r25, 0xFE	; 254
    325a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    325e:	00 e0       	ldi	r16, 0x00	; 0
    3260:	10 e0       	ldi	r17, 0x00	; 0
    3262:	98 01       	movw	r18, r16
    3264:	b9 01       	movw	r22, r18
    3266:	a8 01       	movw	r20, r16
    3268:	ce 01       	movw	r24, r28
    326a:	87 5a       	subi	r24, 0xA7	; 167
    326c:	9e 4f       	sbci	r25, 0xFE	; 254
    326e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3272:	00 e0       	ldi	r16, 0x00	; 0
    3274:	10 e0       	ldi	r17, 0x00	; 0
    3276:	98 01       	movw	r18, r16
    3278:	b9 01       	movw	r22, r18
    327a:	a8 01       	movw	r20, r16
    327c:	ce 01       	movw	r24, r28
    327e:	8f 59       	subi	r24, 0x9F	; 159
    3280:	9e 4f       	sbci	r25, 0xFE	; 254
    3282:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3286:	00 e0       	ldi	r16, 0x00	; 0
    3288:	10 e0       	ldi	r17, 0x00	; 0
    328a:	98 01       	movw	r18, r16
    328c:	40 e0       	ldi	r20, 0x00	; 0
    328e:	50 e0       	ldi	r21, 0x00	; 0
    3290:	60 e8       	ldi	r22, 0x80	; 128
    3292:	7f e3       	ldi	r23, 0x3F	; 63
    3294:	ce 01       	movw	r24, r28
    3296:	87 59       	subi	r24, 0x97	; 151
    3298:	9e 4f       	sbci	r25, 0xFE	; 254
    329a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    329e:	00 e0       	ldi	r16, 0x00	; 0
    32a0:	10 e0       	ldi	r17, 0x00	; 0
    32a2:	98 01       	movw	r18, r16
    32a4:	b9 01       	movw	r22, r18
    32a6:	a8 01       	movw	r20, r16
    32a8:	ce 01       	movw	r24, r28
    32aa:	8f 58       	subi	r24, 0x8F	; 143
    32ac:	9e 4f       	sbci	r25, 0xFE	; 254
    32ae:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    32b2:	00 e0       	ldi	r16, 0x00	; 0
    32b4:	10 e0       	ldi	r17, 0x00	; 0
    32b6:	98 01       	movw	r18, r16
    32b8:	b9 01       	movw	r22, r18
    32ba:	a8 01       	movw	r20, r16
    32bc:	ce 01       	movw	r24, r28
    32be:	87 58       	subi	r24, 0x87	; 135
    32c0:	9e 4f       	sbci	r25, 0xFE	; 254
    32c2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    32c6:	00 e0       	ldi	r16, 0x00	; 0
    32c8:	10 e0       	ldi	r17, 0x00	; 0
    32ca:	98 01       	movw	r18, r16
    32cc:	b9 01       	movw	r22, r18
    32ce:	a8 01       	movw	r20, r16
    32d0:	ce 01       	movw	r24, r28
    32d2:	8f 57       	subi	r24, 0x7F	; 127
    32d4:	9e 4f       	sbci	r25, 0xFE	; 254
    32d6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    32da:	00 e0       	ldi	r16, 0x00	; 0
    32dc:	10 e0       	ldi	r17, 0x00	; 0
    32de:	98 01       	movw	r18, r16
    32e0:	b9 01       	movw	r22, r18
    32e2:	a8 01       	movw	r20, r16
    32e4:	ce 01       	movw	r24, r28
    32e6:	87 57       	subi	r24, 0x77	; 119
    32e8:	9e 4f       	sbci	r25, 0xFE	; 254
    32ea:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    32ee:	00 e0       	ldi	r16, 0x00	; 0
    32f0:	10 e0       	ldi	r17, 0x00	; 0
    32f2:	98 01       	movw	r18, r16
    32f4:	b9 01       	movw	r22, r18
    32f6:	a8 01       	movw	r20, r16
    32f8:	ce 01       	movw	r24, r28
    32fa:	8f 56       	subi	r24, 0x6F	; 111
    32fc:	9e 4f       	sbci	r25, 0xFE	; 254
    32fe:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3302:	00 e0       	ldi	r16, 0x00	; 0
    3304:	10 e0       	ldi	r17, 0x00	; 0
    3306:	98 01       	movw	r18, r16
    3308:	b9 01       	movw	r22, r18
    330a:	a8 01       	movw	r20, r16
    330c:	ce 01       	movw	r24, r28
    330e:	87 56       	subi	r24, 0x67	; 103
    3310:	9e 4f       	sbci	r25, 0xFE	; 254
    3312:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3316:	00 e0       	ldi	r16, 0x00	; 0
    3318:	10 e0       	ldi	r17, 0x00	; 0
    331a:	98 01       	movw	r18, r16
    331c:	b9 01       	movw	r22, r18
    331e:	a8 01       	movw	r20, r16
    3320:	ce 01       	movw	r24, r28
    3322:	8f 55       	subi	r24, 0x5F	; 95
    3324:	9e 4f       	sbci	r25, 0xFE	; 254
    3326:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    332a:	00 e0       	ldi	r16, 0x00	; 0
    332c:	10 e0       	ldi	r17, 0x00	; 0
    332e:	98 01       	movw	r18, r16
    3330:	b9 01       	movw	r22, r18
    3332:	a8 01       	movw	r20, r16
    3334:	ce 01       	movw	r24, r28
    3336:	87 55       	subi	r24, 0x57	; 87
    3338:	9e 4f       	sbci	r25, 0xFE	; 254
    333a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    333e:	00 e0       	ldi	r16, 0x00	; 0
    3340:	10 e0       	ldi	r17, 0x00	; 0
    3342:	98 01       	movw	r18, r16
    3344:	b9 01       	movw	r22, r18
    3346:	a8 01       	movw	r20, r16
    3348:	ce 01       	movw	r24, r28
    334a:	8f 54       	subi	r24, 0x4F	; 79
    334c:	9e 4f       	sbci	r25, 0xFE	; 254
    334e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3352:	00 e0       	ldi	r16, 0x00	; 0
    3354:	10 e0       	ldi	r17, 0x00	; 0
    3356:	98 01       	movw	r18, r16
    3358:	40 e0       	ldi	r20, 0x00	; 0
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	60 e8       	ldi	r22, 0x80	; 128
    335e:	7f e3       	ldi	r23, 0x3F	; 63
    3360:	ce 01       	movw	r24, r28
    3362:	87 54       	subi	r24, 0x47	; 71
    3364:	9e 4f       	sbci	r25, 0xFE	; 254
    3366:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    336a:	00 e0       	ldi	r16, 0x00	; 0
    336c:	10 e0       	ldi	r17, 0x00	; 0
    336e:	98 01       	movw	r18, r16
    3370:	b9 01       	movw	r22, r18
    3372:	a8 01       	movw	r20, r16
    3374:	ce 01       	movw	r24, r28
    3376:	8f 53       	subi	r24, 0x3F	; 63
    3378:	9e 4f       	sbci	r25, 0xFE	; 254
    337a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    337e:	00 e0       	ldi	r16, 0x00	; 0
    3380:	10 e0       	ldi	r17, 0x00	; 0
    3382:	98 01       	movw	r18, r16
    3384:	b9 01       	movw	r22, r18
    3386:	a8 01       	movw	r20, r16
    3388:	ce 01       	movw	r24, r28
    338a:	87 53       	subi	r24, 0x37	; 55
    338c:	9e 4f       	sbci	r25, 0xFE	; 254
    338e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3392:	00 e0       	ldi	r16, 0x00	; 0
    3394:	10 e0       	ldi	r17, 0x00	; 0
    3396:	98 01       	movw	r18, r16
    3398:	b9 01       	movw	r22, r18
    339a:	a8 01       	movw	r20, r16
    339c:	ce 01       	movw	r24, r28
    339e:	8f 52       	subi	r24, 0x2F	; 47
    33a0:	9e 4f       	sbci	r25, 0xFE	; 254
    33a2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    33a6:	00 e0       	ldi	r16, 0x00	; 0
    33a8:	10 e0       	ldi	r17, 0x00	; 0
    33aa:	98 01       	movw	r18, r16
    33ac:	b9 01       	movw	r22, r18
    33ae:	a8 01       	movw	r20, r16
    33b0:	ce 01       	movw	r24, r28
    33b2:	87 52       	subi	r24, 0x27	; 39
    33b4:	9e 4f       	sbci	r25, 0xFE	; 254
    33b6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    33ba:	00 e0       	ldi	r16, 0x00	; 0
    33bc:	10 e0       	ldi	r17, 0x00	; 0
    33be:	98 01       	movw	r18, r16
    33c0:	b9 01       	movw	r22, r18
    33c2:	a8 01       	movw	r20, r16
    33c4:	ce 01       	movw	r24, r28
    33c6:	8f 51       	subi	r24, 0x1F	; 31
    33c8:	9e 4f       	sbci	r25, 0xFE	; 254
    33ca:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    33ce:	00 e0       	ldi	r16, 0x00	; 0
    33d0:	10 e0       	ldi	r17, 0x00	; 0
    33d2:	98 01       	movw	r18, r16
    33d4:	b9 01       	movw	r22, r18
    33d6:	a8 01       	movw	r20, r16
    33d8:	ce 01       	movw	r24, r28
    33da:	87 51       	subi	r24, 0x17	; 23
    33dc:	9e 4f       	sbci	r25, 0xFE	; 254
    33de:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    33e2:	00 e0       	ldi	r16, 0x00	; 0
    33e4:	10 e0       	ldi	r17, 0x00	; 0
    33e6:	98 01       	movw	r18, r16
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	50 e0       	ldi	r21, 0x00	; 0
    33ec:	60 e8       	ldi	r22, 0x80	; 128
    33ee:	7f e3       	ldi	r23, 0x3F	; 63
    33f0:	ce 01       	movw	r24, r28
    33f2:	8f 50       	subi	r24, 0x0F	; 15
    33f4:	9e 4f       	sbci	r25, 0xFE	; 254
    33f6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    33fa:	00 e0       	ldi	r16, 0x00	; 0
    33fc:	10 e0       	ldi	r17, 0x00	; 0
    33fe:	98 01       	movw	r18, r16
    3400:	b9 01       	movw	r22, r18
    3402:	a8 01       	movw	r20, r16
    3404:	ce 01       	movw	r24, r28
    3406:	87 50       	subi	r24, 0x07	; 7
    3408:	9e 4f       	sbci	r25, 0xFE	; 254
    340a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    340e:	c9 5f       	subi	r28, 0xF9	; 249
    3410:	dd 4f       	sbci	r29, 0xFD	; 253
    3412:	79 82       	std	Y+1, r7	; 0x01
    3414:	68 82       	st	Y, r6
    3416:	c7 50       	subi	r28, 0x07	; 7
    3418:	d2 40       	sbci	r29, 0x02	; 2
    341a:	c7 5f       	subi	r28, 0xF7	; 247
    341c:	dd 4f       	sbci	r29, 0xFD	; 253
    341e:	99 82       	std	Y+1, r9	; 0x01
    3420:	88 82       	st	Y, r8
    3422:	c9 50       	subi	r28, 0x09	; 9
    3424:	d2 40       	sbci	r29, 0x02	; 2
    3426:	c5 5f       	subi	r28, 0xF5	; 245
    3428:	dd 4f       	sbci	r29, 0xFD	; 253
    342a:	f9 82       	std	Y+1, r15	; 0x01
    342c:	e8 82       	st	Y, r14
    342e:	cb 50       	subi	r28, 0x0B	; 11
    3430:	d2 40       	sbci	r29, 0x02	; 2
    3432:	cf 5f       	subi	r28, 0xFF	; 255
    3434:	dd 4f       	sbci	r29, 0xFD	; 253
    3436:	59 82       	std	Y+1, r5	; 0x01
    3438:	48 82       	st	Y, r4
    343a:	c1 50       	subi	r28, 0x01	; 1
    343c:	d2 40       	sbci	r29, 0x02	; 2
    343e:	cd 5f       	subi	r28, 0xFD	; 253
    3440:	dd 4f       	sbci	r29, 0xFD	; 253
    3442:	39 82       	std	Y+1, r3	; 0x01
    3444:	28 82       	st	Y, r2
    3446:	c3 50       	subi	r28, 0x03	; 3
    3448:	d2 40       	sbci	r29, 0x02	; 2
    344a:	cb 5f       	subi	r28, 0xFB	; 251
    344c:	dd 4f       	sbci	r29, 0xFD	; 253
    344e:	d9 82       	std	Y+1, r13	; 0x01
    3450:	c8 82       	st	Y, r12
    3452:	c5 50       	subi	r28, 0x05	; 5
    3454:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),tof_matrix),QB_SIZE3);
    3456:	9e 01       	movw	r18, r28
    3458:	2f 5f       	subi	r18, 0xFF	; 255
    345a:	3d 4f       	sbci	r19, 0xFD	; 253
    345c:	ae 01       	movw	r20, r28
    345e:	49 5f       	subi	r20, 0xF9	; 249
    3460:	5d 4f       	sbci	r21, 0xFD	; 253
    3462:	63 e0       	ldi	r22, 0x03	; 3
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	c5 01       	movw	r24, r10
    3468:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    346c:	ae 01       	movw	r20, r28
    346e:	4f 5f       	subi	r20, 0xFF	; 255
    3470:	5f 4f       	sbci	r21, 0xFF	; 255
    3472:	bc 01       	movw	r22, r24
    3474:	c5 01       	movw	r24, r10
    3476:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    347a:	43 e0       	ldi	r20, 0x03	; 3
    347c:	50 e0       	ldi	r21, 0x00	; 0
    347e:	bc 01       	movw	r22, r24
    3480:	c5 01       	movw	r24, r10
    3482:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
}
    3486:	c4 5f       	subi	r28, 0xF4	; 244
    3488:	dd 4f       	sbci	r29, 0xFD	; 253
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
    3494:	df 91       	pop	r29
    3496:	cf 91       	pop	r28
    3498:	1f 91       	pop	r17
    349a:	0f 91       	pop	r16
    349c:	ff 90       	pop	r15
    349e:	ef 90       	pop	r14
    34a0:	df 90       	pop	r13
    34a2:	cf 90       	pop	r12
    34a4:	bf 90       	pop	r11
    34a6:	af 90       	pop	r10
    34a8:	9f 90       	pop	r9
    34aa:	8f 90       	pop	r8
    34ac:	7f 90       	pop	r7
    34ae:	6f 90       	pop	r6
    34b0:	5f 90       	pop	r5
    34b2:	4f 90       	pop	r4
    34b4:	3f 90       	pop	r3
    34b6:	2f 90       	pop	r2
    34b8:	08 95       	ret

000034ba <_ZN5Gates3DEUEiiiiiii>:
int * Gates::DEU(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3,int delta){
    34ba:	2f 92       	push	r2
    34bc:	3f 92       	push	r3
    34be:	4f 92       	push	r4
    34c0:	5f 92       	push	r5
    34c2:	6f 92       	push	r6
    34c4:	7f 92       	push	r7
    34c6:	8f 92       	push	r8
    34c8:	9f 92       	push	r9
    34ca:	af 92       	push	r10
    34cc:	bf 92       	push	r11
    34ce:	cf 92       	push	r12
    34d0:	df 92       	push	r13
    34d2:	ef 92       	push	r14
    34d4:	ff 92       	push	r15
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	c4 51       	subi	r28, 0x14	; 20
    34e4:	d2 40       	sbci	r29, 0x02	; 2
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	c3 5f       	subi	r28, 0xF3	; 243
    34f2:	dd 4f       	sbci	r29, 0xFD	; 253
    34f4:	99 83       	std	Y+1, r25	; 0x01
    34f6:	88 83       	st	Y, r24
    34f8:	cd 50       	subi	r28, 0x0D	; 13
    34fa:	d2 40       	sbci	r29, 0x02	; 2
    34fc:	2b 01       	movw	r4, r22
    34fe:	c1 5f       	subi	r28, 0xF1	; 241
    3500:	dd 4f       	sbci	r29, 0xFD	; 253
    3502:	59 83       	std	Y+1, r21	; 0x01
    3504:	48 83       	st	Y, r20
    3506:	cf 50       	subi	r28, 0x0F	; 15
    3508:	d2 40       	sbci	r29, 0x02	; 2
    350a:	39 01       	movw	r6, r18
    350c:	cf 5e       	subi	r28, 0xEF	; 239
    350e:	dd 4f       	sbci	r29, 0xFD	; 253
    3510:	19 83       	std	Y+1, r17	; 0x01
    3512:	08 83       	st	Y, r16
    3514:	c1 51       	subi	r28, 0x11	; 17
    3516:	d2 40       	sbci	r29, 0x02	; 2
    3518:	17 01       	movw	r2, r14
    351a:	cd 5e       	subi	r28, 0xED	; 237
    351c:	dd 4f       	sbci	r29, 0xFD	; 253
    351e:	d9 82       	std	Y+1, r13	; 0x01
    3520:	c8 82       	st	Y, r12
    3522:	c3 51       	subi	r28, 0x13	; 19
    3524:	d2 40       	sbci	r29, 0x02	; 2
	float delta_float=(delta*M_PI)/180;
    3526:	b5 01       	movw	r22, r10
    3528:	88 27       	eor	r24, r24
    352a:	77 fd       	sbrc	r23, 7
    352c:	80 95       	com	r24
    352e:	98 2f       	mov	r25, r24
    3530:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
    3534:	2b ed       	ldi	r18, 0xDB	; 219
    3536:	3f e0       	ldi	r19, 0x0F	; 15
    3538:	49 e4       	ldi	r20, 0x49	; 73
    353a:	50 e4       	ldi	r21, 0x40	; 64
    353c:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	44 e3       	ldi	r20, 0x34	; 52
    3546:	53 e4       	ldi	r21, 0x43	; 67
    3548:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
    354c:	4b 01       	movw	r8, r22
    354e:	5c 01       	movw	r10, r24
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    3550:	00 e0       	ldi	r16, 0x00	; 0
    3552:	10 e0       	ldi	r17, 0x00	; 0
    3554:	98 01       	movw	r18, r16
    3556:	40 e0       	ldi	r20, 0x00	; 0
    3558:	50 e0       	ldi	r21, 0x00	; 0
    355a:	60 e8       	ldi	r22, 0x80	; 128
    355c:	7f e3       	ldi	r23, 0x3F	; 63
    355e:	ce 01       	movw	r24, r28
    3560:	01 96       	adiw	r24, 0x01	; 1
    3562:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3566:	00 e0       	ldi	r16, 0x00	; 0
    3568:	10 e0       	ldi	r17, 0x00	; 0
    356a:	98 01       	movw	r18, r16
    356c:	b9 01       	movw	r22, r18
    356e:	a8 01       	movw	r20, r16
    3570:	ce 01       	movw	r24, r28
    3572:	09 96       	adiw	r24, 0x09	; 9
    3574:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3578:	00 e0       	ldi	r16, 0x00	; 0
    357a:	10 e0       	ldi	r17, 0x00	; 0
    357c:	98 01       	movw	r18, r16
    357e:	b9 01       	movw	r22, r18
    3580:	a8 01       	movw	r20, r16
    3582:	ce 01       	movw	r24, r28
    3584:	41 96       	adiw	r24, 0x11	; 17
    3586:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    358a:	00 e0       	ldi	r16, 0x00	; 0
    358c:	10 e0       	ldi	r17, 0x00	; 0
    358e:	98 01       	movw	r18, r16
    3590:	b9 01       	movw	r22, r18
    3592:	a8 01       	movw	r20, r16
    3594:	ce 01       	movw	r24, r28
    3596:	49 96       	adiw	r24, 0x19	; 25
    3598:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    359c:	00 e0       	ldi	r16, 0x00	; 0
    359e:	10 e0       	ldi	r17, 0x00	; 0
    35a0:	98 01       	movw	r18, r16
    35a2:	b9 01       	movw	r22, r18
    35a4:	a8 01       	movw	r20, r16
    35a6:	ce 01       	movw	r24, r28
    35a8:	81 96       	adiw	r24, 0x21	; 33
    35aa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    35ae:	00 e0       	ldi	r16, 0x00	; 0
    35b0:	10 e0       	ldi	r17, 0x00	; 0
    35b2:	98 01       	movw	r18, r16
    35b4:	b9 01       	movw	r22, r18
    35b6:	a8 01       	movw	r20, r16
    35b8:	ce 01       	movw	r24, r28
    35ba:	89 96       	adiw	r24, 0x29	; 41
    35bc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    35c0:	00 e0       	ldi	r16, 0x00	; 0
    35c2:	10 e0       	ldi	r17, 0x00	; 0
    35c4:	98 01       	movw	r18, r16
    35c6:	b9 01       	movw	r22, r18
    35c8:	a8 01       	movw	r20, r16
    35ca:	ce 01       	movw	r24, r28
    35cc:	c1 96       	adiw	r24, 0x31	; 49
    35ce:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    35d2:	00 e0       	ldi	r16, 0x00	; 0
    35d4:	10 e0       	ldi	r17, 0x00	; 0
    35d6:	98 01       	movw	r18, r16
    35d8:	b9 01       	movw	r22, r18
    35da:	a8 01       	movw	r20, r16
    35dc:	ce 01       	movw	r24, r28
    35de:	c9 96       	adiw	r24, 0x39	; 57
    35e0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    35e4:	00 e0       	ldi	r16, 0x00	; 0
    35e6:	10 e0       	ldi	r17, 0x00	; 0
    35e8:	98 01       	movw	r18, r16
    35ea:	b9 01       	movw	r22, r18
    35ec:	a8 01       	movw	r20, r16
    35ee:	ce 01       	movw	r24, r28
    35f0:	8f 5b       	subi	r24, 0xBF	; 191
    35f2:	9f 4f       	sbci	r25, 0xFF	; 255
    35f4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    35f8:	00 e0       	ldi	r16, 0x00	; 0
    35fa:	10 e0       	ldi	r17, 0x00	; 0
    35fc:	98 01       	movw	r18, r16
    35fe:	40 e0       	ldi	r20, 0x00	; 0
    3600:	50 e0       	ldi	r21, 0x00	; 0
    3602:	60 e8       	ldi	r22, 0x80	; 128
    3604:	7f e3       	ldi	r23, 0x3F	; 63
    3606:	ce 01       	movw	r24, r28
    3608:	87 5b       	subi	r24, 0xB7	; 183
    360a:	9f 4f       	sbci	r25, 0xFF	; 255
    360c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3610:	00 e0       	ldi	r16, 0x00	; 0
    3612:	10 e0       	ldi	r17, 0x00	; 0
    3614:	98 01       	movw	r18, r16
    3616:	b9 01       	movw	r22, r18
    3618:	a8 01       	movw	r20, r16
    361a:	ce 01       	movw	r24, r28
    361c:	8f 5a       	subi	r24, 0xAF	; 175
    361e:	9f 4f       	sbci	r25, 0xFF	; 255
    3620:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3624:	00 e0       	ldi	r16, 0x00	; 0
    3626:	10 e0       	ldi	r17, 0x00	; 0
    3628:	98 01       	movw	r18, r16
    362a:	b9 01       	movw	r22, r18
    362c:	a8 01       	movw	r20, r16
    362e:	ce 01       	movw	r24, r28
    3630:	87 5a       	subi	r24, 0xA7	; 167
    3632:	9f 4f       	sbci	r25, 0xFF	; 255
    3634:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3638:	00 e0       	ldi	r16, 0x00	; 0
    363a:	10 e0       	ldi	r17, 0x00	; 0
    363c:	98 01       	movw	r18, r16
    363e:	b9 01       	movw	r22, r18
    3640:	a8 01       	movw	r20, r16
    3642:	ce 01       	movw	r24, r28
    3644:	8f 59       	subi	r24, 0x9F	; 159
    3646:	9f 4f       	sbci	r25, 0xFF	; 255
    3648:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    364c:	00 e0       	ldi	r16, 0x00	; 0
    364e:	10 e0       	ldi	r17, 0x00	; 0
    3650:	98 01       	movw	r18, r16
    3652:	b9 01       	movw	r22, r18
    3654:	a8 01       	movw	r20, r16
    3656:	ce 01       	movw	r24, r28
    3658:	87 59       	subi	r24, 0x97	; 151
    365a:	9f 4f       	sbci	r25, 0xFF	; 255
    365c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3660:	00 e0       	ldi	r16, 0x00	; 0
    3662:	10 e0       	ldi	r17, 0x00	; 0
    3664:	98 01       	movw	r18, r16
    3666:	b9 01       	movw	r22, r18
    3668:	a8 01       	movw	r20, r16
    366a:	ce 01       	movw	r24, r28
    366c:	8f 58       	subi	r24, 0x8F	; 143
    366e:	9f 4f       	sbci	r25, 0xFF	; 255
    3670:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3674:	00 e0       	ldi	r16, 0x00	; 0
    3676:	10 e0       	ldi	r17, 0x00	; 0
    3678:	98 01       	movw	r18, r16
    367a:	b9 01       	movw	r22, r18
    367c:	a8 01       	movw	r20, r16
    367e:	ce 01       	movw	r24, r28
    3680:	87 58       	subi	r24, 0x87	; 135
    3682:	9f 4f       	sbci	r25, 0xFF	; 255
    3684:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3688:	00 e0       	ldi	r16, 0x00	; 0
    368a:	10 e0       	ldi	r17, 0x00	; 0
    368c:	98 01       	movw	r18, r16
    368e:	b9 01       	movw	r22, r18
    3690:	a8 01       	movw	r20, r16
    3692:	ce 01       	movw	r24, r28
    3694:	8f 57       	subi	r24, 0x7F	; 127
    3696:	9f 4f       	sbci	r25, 0xFF	; 255
    3698:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    369c:	00 e0       	ldi	r16, 0x00	; 0
    369e:	10 e0       	ldi	r17, 0x00	; 0
    36a0:	98 01       	movw	r18, r16
    36a2:	b9 01       	movw	r22, r18
    36a4:	a8 01       	movw	r20, r16
    36a6:	ce 01       	movw	r24, r28
    36a8:	87 57       	subi	r24, 0x77	; 119
    36aa:	9f 4f       	sbci	r25, 0xFF	; 255
    36ac:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    36b0:	00 e0       	ldi	r16, 0x00	; 0
    36b2:	10 e0       	ldi	r17, 0x00	; 0
    36b4:	98 01       	movw	r18, r16
    36b6:	40 e0       	ldi	r20, 0x00	; 0
    36b8:	50 e0       	ldi	r21, 0x00	; 0
    36ba:	60 e8       	ldi	r22, 0x80	; 128
    36bc:	7f e3       	ldi	r23, 0x3F	; 63
    36be:	ce 01       	movw	r24, r28
    36c0:	8f 56       	subi	r24, 0x6F	; 111
    36c2:	9f 4f       	sbci	r25, 0xFF	; 255
    36c4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    36c8:	00 e0       	ldi	r16, 0x00	; 0
    36ca:	10 e0       	ldi	r17, 0x00	; 0
    36cc:	98 01       	movw	r18, r16
    36ce:	b9 01       	movw	r22, r18
    36d0:	a8 01       	movw	r20, r16
    36d2:	ce 01       	movw	r24, r28
    36d4:	87 56       	subi	r24, 0x67	; 103
    36d6:	9f 4f       	sbci	r25, 0xFF	; 255
    36d8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    36dc:	00 e0       	ldi	r16, 0x00	; 0
    36de:	10 e0       	ldi	r17, 0x00	; 0
    36e0:	98 01       	movw	r18, r16
    36e2:	b9 01       	movw	r22, r18
    36e4:	a8 01       	movw	r20, r16
    36e6:	ce 01       	movw	r24, r28
    36e8:	8f 55       	subi	r24, 0x5F	; 95
    36ea:	9f 4f       	sbci	r25, 0xFF	; 255
    36ec:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    36f0:	00 e0       	ldi	r16, 0x00	; 0
    36f2:	10 e0       	ldi	r17, 0x00	; 0
    36f4:	98 01       	movw	r18, r16
    36f6:	b9 01       	movw	r22, r18
    36f8:	a8 01       	movw	r20, r16
    36fa:	ce 01       	movw	r24, r28
    36fc:	87 55       	subi	r24, 0x57	; 87
    36fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3700:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3704:	00 e0       	ldi	r16, 0x00	; 0
    3706:	10 e0       	ldi	r17, 0x00	; 0
    3708:	98 01       	movw	r18, r16
    370a:	b9 01       	movw	r22, r18
    370c:	a8 01       	movw	r20, r16
    370e:	ce 01       	movw	r24, r28
    3710:	8f 54       	subi	r24, 0x4F	; 79
    3712:	9f 4f       	sbci	r25, 0xFF	; 255
    3714:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3718:	00 e0       	ldi	r16, 0x00	; 0
    371a:	10 e0       	ldi	r17, 0x00	; 0
    371c:	98 01       	movw	r18, r16
    371e:	b9 01       	movw	r22, r18
    3720:	a8 01       	movw	r20, r16
    3722:	ce 01       	movw	r24, r28
    3724:	87 54       	subi	r24, 0x47	; 71
    3726:	9f 4f       	sbci	r25, 0xFF	; 255
    3728:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    372c:	00 e0       	ldi	r16, 0x00	; 0
    372e:	10 e0       	ldi	r17, 0x00	; 0
    3730:	98 01       	movw	r18, r16
    3732:	b9 01       	movw	r22, r18
    3734:	a8 01       	movw	r20, r16
    3736:	ce 01       	movw	r24, r28
    3738:	8f 53       	subi	r24, 0x3F	; 63
    373a:	9f 4f       	sbci	r25, 0xFF	; 255
    373c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3740:	00 e0       	ldi	r16, 0x00	; 0
    3742:	10 e0       	ldi	r17, 0x00	; 0
    3744:	98 01       	movw	r18, r16
    3746:	b9 01       	movw	r22, r18
    3748:	a8 01       	movw	r20, r16
    374a:	ce 01       	movw	r24, r28
    374c:	87 53       	subi	r24, 0x37	; 55
    374e:	9f 4f       	sbci	r25, 0xFF	; 255
    3750:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3754:	00 e0       	ldi	r16, 0x00	; 0
    3756:	10 e0       	ldi	r17, 0x00	; 0
    3758:	98 01       	movw	r18, r16
    375a:	b9 01       	movw	r22, r18
    375c:	a8 01       	movw	r20, r16
    375e:	ce 01       	movw	r24, r28
    3760:	8f 52       	subi	r24, 0x2F	; 47
    3762:	9f 4f       	sbci	r25, 0xFF	; 255
    3764:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3768:	00 e0       	ldi	r16, 0x00	; 0
    376a:	10 e0       	ldi	r17, 0x00	; 0
    376c:	98 01       	movw	r18, r16
    376e:	40 e0       	ldi	r20, 0x00	; 0
    3770:	50 e0       	ldi	r21, 0x00	; 0
    3772:	60 e8       	ldi	r22, 0x80	; 128
    3774:	7f e3       	ldi	r23, 0x3F	; 63
    3776:	ce 01       	movw	r24, r28
    3778:	87 52       	subi	r24, 0x27	; 39
    377a:	9f 4f       	sbci	r25, 0xFF	; 255
    377c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3780:	00 e0       	ldi	r16, 0x00	; 0
    3782:	10 e0       	ldi	r17, 0x00	; 0
    3784:	98 01       	movw	r18, r16
    3786:	b9 01       	movw	r22, r18
    3788:	a8 01       	movw	r20, r16
    378a:	ce 01       	movw	r24, r28
    378c:	8f 51       	subi	r24, 0x1F	; 31
    378e:	9f 4f       	sbci	r25, 0xFF	; 255
    3790:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3794:	00 e0       	ldi	r16, 0x00	; 0
    3796:	10 e0       	ldi	r17, 0x00	; 0
    3798:	98 01       	movw	r18, r16
    379a:	b9 01       	movw	r22, r18
    379c:	a8 01       	movw	r20, r16
    379e:	ce 01       	movw	r24, r28
    37a0:	87 51       	subi	r24, 0x17	; 23
    37a2:	9f 4f       	sbci	r25, 0xFF	; 255
    37a4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    37a8:	00 e0       	ldi	r16, 0x00	; 0
    37aa:	10 e0       	ldi	r17, 0x00	; 0
    37ac:	98 01       	movw	r18, r16
    37ae:	b9 01       	movw	r22, r18
    37b0:	a8 01       	movw	r20, r16
    37b2:	ce 01       	movw	r24, r28
    37b4:	8f 50       	subi	r24, 0x0F	; 15
    37b6:	9f 4f       	sbci	r25, 0xFF	; 255
    37b8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    37bc:	00 e0       	ldi	r16, 0x00	; 0
    37be:	10 e0       	ldi	r17, 0x00	; 0
    37c0:	98 01       	movw	r18, r16
    37c2:	b9 01       	movw	r22, r18
    37c4:	a8 01       	movw	r20, r16
    37c6:	ce 01       	movw	r24, r28
    37c8:	87 50       	subi	r24, 0x07	; 7
    37ca:	9f 4f       	sbci	r25, 0xFF	; 255
    37cc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    37d0:	00 e0       	ldi	r16, 0x00	; 0
    37d2:	10 e0       	ldi	r17, 0x00	; 0
    37d4:	98 01       	movw	r18, r16
    37d6:	b9 01       	movw	r22, r18
    37d8:	a8 01       	movw	r20, r16
    37da:	ce 01       	movw	r24, r28
    37dc:	8f 5f       	subi	r24, 0xFF	; 255
    37de:	9e 4f       	sbci	r25, 0xFE	; 254
    37e0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    37e4:	00 e0       	ldi	r16, 0x00	; 0
    37e6:	10 e0       	ldi	r17, 0x00	; 0
    37e8:	98 01       	movw	r18, r16
    37ea:	b9 01       	movw	r22, r18
    37ec:	a8 01       	movw	r20, r16
    37ee:	ce 01       	movw	r24, r28
    37f0:	87 5f       	subi	r24, 0xF7	; 247
    37f2:	9e 4f       	sbci	r25, 0xFE	; 254
    37f4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    37f8:	00 e0       	ldi	r16, 0x00	; 0
    37fa:	10 e0       	ldi	r17, 0x00	; 0
    37fc:	98 01       	movw	r18, r16
    37fe:	b9 01       	movw	r22, r18
    3800:	a8 01       	movw	r20, r16
    3802:	ce 01       	movw	r24, r28
    3804:	8f 5e       	subi	r24, 0xEF	; 239
    3806:	9e 4f       	sbci	r25, 0xFE	; 254
    3808:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    380c:	00 e0       	ldi	r16, 0x00	; 0
    380e:	10 e0       	ldi	r17, 0x00	; 0
    3810:	98 01       	movw	r18, r16
    3812:	b9 01       	movw	r22, r18
    3814:	a8 01       	movw	r20, r16
    3816:	ce 01       	movw	r24, r28
    3818:	87 5e       	subi	r24, 0xE7	; 231
    381a:	9e 4f       	sbci	r25, 0xFE	; 254
    381c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3820:	00 e0       	ldi	r16, 0x00	; 0
    3822:	10 e0       	ldi	r17, 0x00	; 0
    3824:	98 01       	movw	r18, r16
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	60 e8       	ldi	r22, 0x80	; 128
    382c:	7f e3       	ldi	r23, 0x3F	; 63
    382e:	ce 01       	movw	r24, r28
    3830:	8f 5d       	subi	r24, 0xDF	; 223
    3832:	9e 4f       	sbci	r25, 0xFE	; 254
    3834:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3838:	00 e0       	ldi	r16, 0x00	; 0
    383a:	10 e0       	ldi	r17, 0x00	; 0
    383c:	98 01       	movw	r18, r16
    383e:	b9 01       	movw	r22, r18
    3840:	a8 01       	movw	r20, r16
    3842:	ce 01       	movw	r24, r28
    3844:	87 5d       	subi	r24, 0xD7	; 215
    3846:	9e 4f       	sbci	r25, 0xFE	; 254
    3848:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    384c:	00 e0       	ldi	r16, 0x00	; 0
    384e:	10 e0       	ldi	r17, 0x00	; 0
    3850:	98 01       	movw	r18, r16
    3852:	b9 01       	movw	r22, r18
    3854:	a8 01       	movw	r20, r16
    3856:	ce 01       	movw	r24, r28
    3858:	8f 5c       	subi	r24, 0xCF	; 207
    385a:	9e 4f       	sbci	r25, 0xFE	; 254
    385c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3860:	00 e0       	ldi	r16, 0x00	; 0
    3862:	10 e0       	ldi	r17, 0x00	; 0
    3864:	98 01       	movw	r18, r16
    3866:	b9 01       	movw	r22, r18
    3868:	a8 01       	movw	r20, r16
    386a:	ce 01       	movw	r24, r28
    386c:	87 5c       	subi	r24, 0xC7	; 199
    386e:	9e 4f       	sbci	r25, 0xFE	; 254
    3870:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3874:	00 e0       	ldi	r16, 0x00	; 0
    3876:	10 e0       	ldi	r17, 0x00	; 0
    3878:	98 01       	movw	r18, r16
    387a:	b9 01       	movw	r22, r18
    387c:	a8 01       	movw	r20, r16
    387e:	ce 01       	movw	r24, r28
    3880:	8f 5b       	subi	r24, 0xBF	; 191
    3882:	9e 4f       	sbci	r25, 0xFE	; 254
    3884:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3888:	00 e0       	ldi	r16, 0x00	; 0
    388a:	10 e0       	ldi	r17, 0x00	; 0
    388c:	98 01       	movw	r18, r16
    388e:	b9 01       	movw	r22, r18
    3890:	a8 01       	movw	r20, r16
    3892:	ce 01       	movw	r24, r28
    3894:	87 5b       	subi	r24, 0xB7	; 183
    3896:	9e 4f       	sbci	r25, 0xFE	; 254
    3898:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    389c:	00 e0       	ldi	r16, 0x00	; 0
    389e:	10 e0       	ldi	r17, 0x00	; 0
    38a0:	98 01       	movw	r18, r16
    38a2:	b9 01       	movw	r22, r18
    38a4:	a8 01       	movw	r20, r16
    38a6:	ce 01       	movw	r24, r28
    38a8:	8f 5a       	subi	r24, 0xAF	; 175
    38aa:	9e 4f       	sbci	r25, 0xFE	; 254
    38ac:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    38b0:	00 e0       	ldi	r16, 0x00	; 0
    38b2:	10 e0       	ldi	r17, 0x00	; 0
    38b4:	98 01       	movw	r18, r16
    38b6:	b9 01       	movw	r22, r18
    38b8:	a8 01       	movw	r20, r16
    38ba:	ce 01       	movw	r24, r28
    38bc:	87 5a       	subi	r24, 0xA7	; 167
    38be:	9e 4f       	sbci	r25, 0xFE	; 254
    38c0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    38c4:	00 e0       	ldi	r16, 0x00	; 0
    38c6:	10 e0       	ldi	r17, 0x00	; 0
    38c8:	98 01       	movw	r18, r16
    38ca:	b9 01       	movw	r22, r18
    38cc:	a8 01       	movw	r20, r16
    38ce:	ce 01       	movw	r24, r28
    38d0:	8f 59       	subi	r24, 0x9F	; 159
    38d2:	9e 4f       	sbci	r25, 0xFE	; 254
    38d4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    38d8:	00 e0       	ldi	r16, 0x00	; 0
    38da:	10 e0       	ldi	r17, 0x00	; 0
    38dc:	98 01       	movw	r18, r16
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	60 e8       	ldi	r22, 0x80	; 128
    38e4:	7f e3       	ldi	r23, 0x3F	; 63
    38e6:	ce 01       	movw	r24, r28
    38e8:	87 59       	subi	r24, 0x97	; 151
    38ea:	9e 4f       	sbci	r25, 0xFE	; 254
    38ec:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    38f0:	00 e0       	ldi	r16, 0x00	; 0
    38f2:	10 e0       	ldi	r17, 0x00	; 0
    38f4:	98 01       	movw	r18, r16
    38f6:	b9 01       	movw	r22, r18
    38f8:	a8 01       	movw	r20, r16
    38fa:	ce 01       	movw	r24, r28
    38fc:	8f 58       	subi	r24, 0x8F	; 143
    38fe:	9e 4f       	sbci	r25, 0xFE	; 254
    3900:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3904:	00 e0       	ldi	r16, 0x00	; 0
    3906:	10 e0       	ldi	r17, 0x00	; 0
    3908:	98 01       	movw	r18, r16
    390a:	b9 01       	movw	r22, r18
    390c:	a8 01       	movw	r20, r16
    390e:	ce 01       	movw	r24, r28
    3910:	87 58       	subi	r24, 0x87	; 135
    3912:	9e 4f       	sbci	r25, 0xFE	; 254
    3914:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3918:	00 e0       	ldi	r16, 0x00	; 0
    391a:	10 e0       	ldi	r17, 0x00	; 0
    391c:	98 01       	movw	r18, r16
    391e:	b9 01       	movw	r22, r18
    3920:	a8 01       	movw	r20, r16
    3922:	ce 01       	movw	r24, r28
    3924:	8f 57       	subi	r24, 0x7F	; 127
    3926:	9e 4f       	sbci	r25, 0xFE	; 254
    3928:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    392c:	00 e0       	ldi	r16, 0x00	; 0
    392e:	10 e0       	ldi	r17, 0x00	; 0
    3930:	98 01       	movw	r18, r16
    3932:	b9 01       	movw	r22, r18
    3934:	a8 01       	movw	r20, r16
    3936:	ce 01       	movw	r24, r28
    3938:	87 57       	subi	r24, 0x77	; 119
    393a:	9e 4f       	sbci	r25, 0xFE	; 254
    393c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3940:	00 e0       	ldi	r16, 0x00	; 0
    3942:	10 e0       	ldi	r17, 0x00	; 0
    3944:	98 01       	movw	r18, r16
    3946:	b9 01       	movw	r22, r18
    3948:	a8 01       	movw	r20, r16
    394a:	ce 01       	movw	r24, r28
    394c:	8f 56       	subi	r24, 0x6F	; 111
    394e:	9e 4f       	sbci	r25, 0xFE	; 254
    3950:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3954:	00 e0       	ldi	r16, 0x00	; 0
    3956:	10 e0       	ldi	r17, 0x00	; 0
    3958:	98 01       	movw	r18, r16
    395a:	b9 01       	movw	r22, r18
    395c:	a8 01       	movw	r20, r16
    395e:	ce 01       	movw	r24, r28
    3960:	87 56       	subi	r24, 0x67	; 103
    3962:	9e 4f       	sbci	r25, 0xFE	; 254
    3964:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3968:	00 e0       	ldi	r16, 0x00	; 0
    396a:	10 e0       	ldi	r17, 0x00	; 0
    396c:	98 01       	movw	r18, r16
    396e:	b9 01       	movw	r22, r18
    3970:	a8 01       	movw	r20, r16
    3972:	ce 01       	movw	r24, r28
    3974:	8f 55       	subi	r24, 0x5F	; 95
    3976:	9e 4f       	sbci	r25, 0xFE	; 254
    3978:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    397c:	00 e0       	ldi	r16, 0x00	; 0
    397e:	10 e0       	ldi	r17, 0x00	; 0
    3980:	98 01       	movw	r18, r16
    3982:	b9 01       	movw	r22, r18
    3984:	a8 01       	movw	r20, r16
    3986:	ce 01       	movw	r24, r28
    3988:	87 55       	subi	r24, 0x57	; 87
    398a:	9e 4f       	sbci	r25, 0xFE	; 254
    398c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
														  {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),               Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
    3990:	c5 01       	movw	r24, r10
    3992:	b4 01       	movw	r22, r8
    3994:	0e 94 6d 30 	call	0x60da	; 0x60da <cos>
    3998:	6b 01       	movw	r12, r22
    399a:	7c 01       	movw	r14, r24
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    399c:	8b 01       	movw	r16, r22
    399e:	9c 01       	movw	r18, r24
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	ba 01       	movw	r22, r20
    39a6:	ce 01       	movw	r24, r28
    39a8:	8f 54       	subi	r24, 0x4F	; 79
    39aa:	9e 4f       	sbci	r25, 0xFE	; 254
    39ac:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
														  {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),               Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
    39b0:	c5 01       	movw	r24, r10
    39b2:	b4 01       	movw	r22, r8
    39b4:	0e 94 81 33 	call	0x6702	; 0x6702 <sin>
    39b8:	4b 01       	movw	r8, r22
    39ba:	5c 01       	movw	r10, r24
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    39bc:	00 e0       	ldi	r16, 0x00	; 0
    39be:	10 e0       	ldi	r17, 0x00	; 0
    39c0:	98 01       	movw	r18, r16
    39c2:	ab 01       	movw	r20, r22
    39c4:	bc 01       	movw	r22, r24
    39c6:	ce 01       	movw	r24, r28
    39c8:	87 54       	subi	r24, 0x47	; 71
    39ca:	9e 4f       	sbci	r25, 0xFE	; 254
    39cc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    39d0:	00 e0       	ldi	r16, 0x00	; 0
    39d2:	10 e0       	ldi	r17, 0x00	; 0
    39d4:	98 01       	movw	r18, r16
    39d6:	b9 01       	movw	r22, r18
    39d8:	a8 01       	movw	r20, r16
    39da:	ce 01       	movw	r24, r28
    39dc:	8f 53       	subi	r24, 0x3F	; 63
    39de:	9e 4f       	sbci	r25, 0xFE	; 254
    39e0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    39e4:	00 e0       	ldi	r16, 0x00	; 0
    39e6:	10 e0       	ldi	r17, 0x00	; 0
    39e8:	98 01       	movw	r18, r16
    39ea:	b9 01       	movw	r22, r18
    39ec:	a8 01       	movw	r20, r16
    39ee:	ce 01       	movw	r24, r28
    39f0:	87 53       	subi	r24, 0x37	; 55
    39f2:	9e 4f       	sbci	r25, 0xFE	; 254
    39f4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    39f8:	00 e0       	ldi	r16, 0x00	; 0
    39fa:	10 e0       	ldi	r17, 0x00	; 0
    39fc:	98 01       	movw	r18, r16
    39fe:	b9 01       	movw	r22, r18
    3a00:	a8 01       	movw	r20, r16
    3a02:	ce 01       	movw	r24, r28
    3a04:	8f 52       	subi	r24, 0x2F	; 47
    3a06:	9e 4f       	sbci	r25, 0xFE	; 254
    3a08:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3a0c:	00 e0       	ldi	r16, 0x00	; 0
    3a0e:	10 e0       	ldi	r17, 0x00	; 0
    3a10:	98 01       	movw	r18, r16
    3a12:	b9 01       	movw	r22, r18
    3a14:	a8 01       	movw	r20, r16
    3a16:	ce 01       	movw	r24, r28
    3a18:	87 52       	subi	r24, 0x27	; 39
    3a1a:	9e 4f       	sbci	r25, 0xFE	; 254
    3a1c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3a20:	00 e0       	ldi	r16, 0x00	; 0
    3a22:	10 e0       	ldi	r17, 0x00	; 0
    3a24:	98 01       	movw	r18, r16
    3a26:	b9 01       	movw	r22, r18
    3a28:	a8 01       	movw	r20, r16
    3a2a:	ce 01       	movw	r24, r28
    3a2c:	8f 51       	subi	r24, 0x1F	; 31
    3a2e:	9e 4f       	sbci	r25, 0xFE	; 254
    3a30:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3a34:	00 e0       	ldi	r16, 0x00	; 0
    3a36:	10 e0       	ldi	r17, 0x00	; 0
    3a38:	98 01       	movw	r18, r16
    3a3a:	b9 01       	movw	r22, r18
    3a3c:	a8 01       	movw	r20, r16
    3a3e:	ce 01       	movw	r24, r28
    3a40:	87 51       	subi	r24, 0x17	; 23
    3a42:	9e 4f       	sbci	r25, 0xFE	; 254
    3a44:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3a48:	00 e0       	ldi	r16, 0x00	; 0
    3a4a:	10 e0       	ldi	r17, 0x00	; 0
    3a4c:	98 01       	movw	r18, r16
    3a4e:	b5 01       	movw	r22, r10
    3a50:	a4 01       	movw	r20, r8
    3a52:	ce 01       	movw	r24, r28
    3a54:	8f 50       	subi	r24, 0x0F	; 15
    3a56:	9e 4f       	sbci	r25, 0xFE	; 254
    3a58:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3a5c:	97 01       	movw	r18, r14
    3a5e:	86 01       	movw	r16, r12
    3a60:	40 e0       	ldi	r20, 0x00	; 0
    3a62:	50 e0       	ldi	r21, 0x00	; 0
    3a64:	ba 01       	movw	r22, r20
    3a66:	ce 01       	movw	r24, r28
    3a68:	87 50       	subi	r24, 0x07	; 7
    3a6a:	9e 4f       	sbci	r25, 0xFE	; 254
    3a6c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    3a70:	c9 5f       	subi	r28, 0xF9	; 249
    3a72:	dd 4f       	sbci	r29, 0xFD	; 253
    3a74:	59 82       	std	Y+1, r5	; 0x01
    3a76:	48 82       	st	Y, r4
    3a78:	c7 50       	subi	r28, 0x07	; 7
    3a7a:	d2 40       	sbci	r29, 0x02	; 2
    3a7c:	c7 5f       	subi	r28, 0xF7	; 247
    3a7e:	dd 4f       	sbci	r29, 0xFD	; 253
    3a80:	79 82       	std	Y+1, r7	; 0x01
    3a82:	68 82       	st	Y, r6
    3a84:	c9 50       	subi	r28, 0x09	; 9
    3a86:	d2 40       	sbci	r29, 0x02	; 2
    3a88:	c5 5f       	subi	r28, 0xF5	; 245
    3a8a:	dd 4f       	sbci	r29, 0xFD	; 253
    3a8c:	39 82       	std	Y+1, r3	; 0x01
    3a8e:	28 82       	st	Y, r2
    3a90:	cb 50       	subi	r28, 0x0B	; 11
    3a92:	d2 40       	sbci	r29, 0x02	; 2
    3a94:	c1 5f       	subi	r28, 0xF1	; 241
    3a96:	dd 4f       	sbci	r29, 0xFD	; 253
    3a98:	88 81       	ld	r24, Y
    3a9a:	99 81       	ldd	r25, Y+1	; 0x01
    3a9c:	cf 50       	subi	r28, 0x0F	; 15
    3a9e:	d2 40       	sbci	r29, 0x02	; 2
    3aa0:	cf 5f       	subi	r28, 0xFF	; 255
    3aa2:	dd 4f       	sbci	r29, 0xFD	; 253
    3aa4:	99 83       	std	Y+1, r25	; 0x01
    3aa6:	88 83       	st	Y, r24
    3aa8:	c1 50       	subi	r28, 0x01	; 1
    3aaa:	d2 40       	sbci	r29, 0x02	; 2
    3aac:	cf 5e       	subi	r28, 0xEF	; 239
    3aae:	dd 4f       	sbci	r29, 0xFD	; 253
    3ab0:	88 81       	ld	r24, Y
    3ab2:	99 81       	ldd	r25, Y+1	; 0x01
    3ab4:	c1 51       	subi	r28, 0x11	; 17
    3ab6:	d2 40       	sbci	r29, 0x02	; 2
    3ab8:	cd 5f       	subi	r28, 0xFD	; 253
    3aba:	dd 4f       	sbci	r29, 0xFD	; 253
    3abc:	99 83       	std	Y+1, r25	; 0x01
    3abe:	88 83       	st	Y, r24
    3ac0:	c3 50       	subi	r28, 0x03	; 3
    3ac2:	d2 40       	sbci	r29, 0x02	; 2
    3ac4:	cd 5e       	subi	r28, 0xED	; 237
    3ac6:	dd 4f       	sbci	r29, 0xFD	; 253
    3ac8:	88 81       	ld	r24, Y
    3aca:	99 81       	ldd	r25, Y+1	; 0x01
    3acc:	c3 51       	subi	r28, 0x13	; 19
    3ace:	d2 40       	sbci	r29, 0x02	; 2
    3ad0:	cb 5f       	subi	r28, 0xFB	; 251
    3ad2:	dd 4f       	sbci	r29, 0xFD	; 253
    3ad4:	99 83       	std	Y+1, r25	; 0x01
    3ad6:	88 83       	st	Y, r24
    3ad8:	c5 50       	subi	r28, 0x05	; 5
    3ada:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),deu_matrix),QB_SIZE3);	
    3adc:	9e 01       	movw	r18, r28
    3ade:	2f 5f       	subi	r18, 0xFF	; 255
    3ae0:	3d 4f       	sbci	r19, 0xFD	; 253
    3ae2:	ae 01       	movw	r20, r28
    3ae4:	49 5f       	subi	r20, 0xF9	; 249
    3ae6:	5d 4f       	sbci	r21, 0xFD	; 253
    3ae8:	63 e0       	ldi	r22, 0x03	; 3
    3aea:	70 e0       	ldi	r23, 0x00	; 0
    3aec:	c3 5f       	subi	r28, 0xF3	; 243
    3aee:	dd 4f       	sbci	r29, 0xFD	; 253
    3af0:	88 81       	ld	r24, Y
    3af2:	99 81       	ldd	r25, Y+1	; 0x01
    3af4:	cd 50       	subi	r28, 0x0D	; 13
    3af6:	d2 40       	sbci	r29, 0x02	; 2
    3af8:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN5Gates8ampl2vecEiPiS0_>
    3afc:	ae 01       	movw	r20, r28
    3afe:	4f 5f       	subi	r20, 0xFF	; 255
    3b00:	5f 4f       	sbci	r21, 0xFF	; 255
    3b02:	bc 01       	movw	r22, r24
    3b04:	c3 5f       	subi	r28, 0xF3	; 243
    3b06:	dd 4f       	sbci	r29, 0xFD	; 253
    3b08:	88 81       	ld	r24, Y
    3b0a:	99 81       	ldd	r25, Y+1	; 0x01
    3b0c:	cd 50       	subi	r28, 0x0D	; 13
    3b0e:	d2 40       	sbci	r29, 0x02	; 2
    3b10:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    3b14:	43 e0       	ldi	r20, 0x03	; 3
    3b16:	50 e0       	ldi	r21, 0x00	; 0
    3b18:	bc 01       	movw	r22, r24
    3b1a:	c3 5f       	subi	r28, 0xF3	; 243
    3b1c:	dd 4f       	sbci	r29, 0xFD	; 253
    3b1e:	88 81       	ld	r24, Y
    3b20:	99 81       	ldd	r25, Y+1	; 0x01
    3b22:	cd 50       	subi	r28, 0x0D	; 13
    3b24:	d2 40       	sbci	r29, 0x02	; 2
    3b26:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi>
    3b2a:	cc 5e       	subi	r28, 0xEC	; 236
    3b2c:	dd 4f       	sbci	r29, 0xFD	; 253
    3b2e:	0f b6       	in	r0, 0x3f	; 63
    3b30:	f8 94       	cli
    3b32:	de bf       	out	0x3e, r29	; 62
    3b34:	0f be       	out	0x3f, r0	; 63
    3b36:	cd bf       	out	0x3d, r28	; 61
    3b38:	df 91       	pop	r29
    3b3a:	cf 91       	pop	r28
    3b3c:	1f 91       	pop	r17
    3b3e:	0f 91       	pop	r16
    3b40:	ff 90       	pop	r15
    3b42:	ef 90       	pop	r14
    3b44:	df 90       	pop	r13
    3b46:	cf 90       	pop	r12
    3b48:	bf 90       	pop	r11
    3b4a:	af 90       	pop	r10
    3b4c:	9f 90       	pop	r9
    3b4e:	8f 90       	pop	r8
    3b50:	7f 90       	pop	r7
    3b52:	6f 90       	pop	r6
    3b54:	5f 90       	pop	r5
    3b56:	4f 90       	pop	r4
    3b58:	3f 90       	pop	r3
    3b5a:	2f 90       	pop	r2
    3b5c:	08 95       	ret

00003b5e <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){}

/*TO DELETE LATER (BEGIN) */
Serial s;
    3b5e:	8d ef       	ldi	r24, 0xFD	; 253
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <_ZN6SerialC1Ev>
    3b66:	08 95       	ret

00003b68 <_ZN4QEPU13interrupt_cpuEi>:
#include "qepu.h"

void QEPU::interrupt_cpu(int interrupt_type){
    3b68:	3f 92       	push	r3
    3b6a:	4f 92       	push	r4
    3b6c:	5f 92       	push	r5
    3b6e:	6f 92       	push	r6
    3b70:	7f 92       	push	r7
    3b72:	8f 92       	push	r8
    3b74:	9f 92       	push	r9
    3b76:	af 92       	push	r10
    3b78:	bf 92       	push	r11
    3b7a:	cf 92       	push	r12
    3b7c:	df 92       	push	r13
    3b7e:	ef 92       	push	r14
    3b80:	ff 92       	push	r15
    3b82:	0f 93       	push	r16
    3b84:	1f 93       	push	r17
    3b86:	cf 93       	push	r28
    3b88:	df 93       	push	r29
    3b8a:	00 d0       	rcall	.+0      	; 0x3b8c <_ZN4QEPU13interrupt_cpuEi+0x24>
    3b8c:	00 d0       	rcall	.+0      	; 0x3b8e <_ZN4QEPU13interrupt_cpuEi+0x26>
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
    3b92:	9a 83       	std	Y+2, r25	; 0x02
    3b94:	89 83       	std	Y+1, r24	; 0x01
    3b96:	4b 01       	movw	r8, r22
	//NEEDS RESERVED REGISTERS USED FOR ADDRESS POINTING -> ADDRESS SHOULD POINT TO A REGISTER ADDRESS,NOT SRAM
	//NEEDS RESERVED REGISTERS USED FOR DATA SAVING -> SHOULD SAVE ON A REGISTER,NOT SRAM
	int address_pointer_offset=0;
	int data_out_registerpointer=qmem.fetch_register(INT_RESERVED_ADDRESSPOINTER);
    3b98:	8c 01       	movw	r16, r24
    3b9a:	0f 5f       	subi	r16, 0xFF	; 255
    3b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9e:	60 e0       	ldi	r22, 0x00	; 0
    3ba0:	70 e0       	ldi	r23, 0x00	; 0
    3ba2:	c8 01       	movw	r24, r16
    3ba4:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <_ZN4QMEM14fetch_registerEi>
    3ba8:	2c 01       	movw	r4, r24
	int data_in_registerpointer=qmem.fetch_register(INT_RESERVED_ADDRESSDATASTORE);
    3baa:	61 e0       	ldi	r22, 0x01	; 1
    3bac:	70 e0       	ldi	r23, 0x00	; 0
    3bae:	c8 01       	movw	r24, r16
    3bb0:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <_ZN4QMEM14fetch_registerEi>
    3bb4:	5c 01       	movw	r10, r24
#include "qepu.h"

void QEPU::interrupt_cpu(int interrupt_type){
	//NEEDS RESERVED REGISTERS USED FOR ADDRESS POINTING -> ADDRESS SHOULD POINT TO A REGISTER ADDRESS,NOT SRAM
	//NEEDS RESERVED REGISTERS USED FOR DATA SAVING -> SHOULD SAVE ON A REGISTER,NOT SRAM
	int address_pointer_offset=0;
    3bb6:	1c 82       	std	Y+4, r1	; 0x04
    3bb8:	1b 82       	std	Y+3, r1	; 0x03
	int data_out_registerpointer=qmem.fetch_register(INT_RESERVED_ADDRESSPOINTER);
	int data_in_registerpointer=qmem.fetch_register(INT_RESERVED_ADDRESSDATASTORE);
	while(!interrupt_signal){
    3bba:	09 81       	ldd	r16, Y+1	; 0x01
    3bbc:	1a 81       	ldd	r17, Y+2	; 0x02
    3bbe:	03 52       	subi	r16, 0x23	; 35
    3bc0:	1f 4f       	sbci	r17, 0xFF	; 255
					sram.write(data_in_registerpointer+address_pointer_offset,char_echo);
					interrupt_done();
				}
				break;
			case INT_UART_IN_BUFF_NO_ECHO:{
					int char_noecho=serial.read();
    3bc2:	e9 80       	ldd	r14, Y+1	; 0x01
    3bc4:	fa 80       	ldd	r15, Y+2	; 0x02
    3bc6:	84 e0       	ldi	r24, 0x04	; 4
    3bc8:	e8 0e       	add	r14, r24
    3bca:	f1 1c       	adc	r15, r1
						interrupt_done();
						sram.write(data_in_registerpointer+address_pointer_offset,STRING_TERMINATOR);
					}else
						if(char_noecho==0x8 && address_pointer_offset>0) address_pointer_offset--;
						else{
							sram.write(data_in_registerpointer+address_pointer_offset,char_noecho);
    3bcc:	c9 80       	ldd	r12, Y+1	; 0x01
    3bce:	da 80       	ldd	r13, Y+2	; 0x02
    3bd0:	96 e0       	ldi	r25, 0x06	; 6
    3bd2:	c9 0e       	add	r12, r25
    3bd4:	d1 1c       	adc	r13, r1
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3bd6:	33 24       	eor	r3, r3
    3bd8:	33 94       	inc	r3
	//NEEDS RESERVED REGISTERS USED FOR ADDRESS POINTING -> ADDRESS SHOULD POINT TO A REGISTER ADDRESS,NOT SRAM
	//NEEDS RESERVED REGISTERS USED FOR DATA SAVING -> SHOULD SAVE ON A REGISTER,NOT SRAM
	int address_pointer_offset=0;
	int data_out_registerpointer=qmem.fetch_register(INT_RESERVED_ADDRESSPOINTER);
	int data_in_registerpointer=qmem.fetch_register(INT_RESERVED_ADDRESSDATASTORE);
	while(!interrupt_signal){
    3bda:	bd c0       	rjmp	.+378    	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
		switch(interrupt_type){
    3bdc:	a2 e0       	ldi	r26, 0x02	; 2
    3bde:	8a 16       	cp	r8, r26
    3be0:	91 04       	cpc	r9, r1
    3be2:	b1 f1       	breq	.+108    	; 0x3c50 <_ZN4QEPU13interrupt_cpuEi+0xe8>
    3be4:	44 f4       	brge	.+16     	; 0x3bf6 <_ZN4QEPU13interrupt_cpuEi+0x8e>
    3be6:	81 14       	cp	r8, r1
    3be8:	91 04       	cpc	r9, r1
    3bea:	89 f0       	breq	.+34     	; 0x3c0e <_ZN4QEPU13interrupt_cpuEi+0xa6>
    3bec:	e1 e0       	ldi	r30, 0x01	; 1
    3bee:	8e 16       	cp	r8, r30
    3bf0:	91 04       	cpc	r9, r1
    3bf2:	c1 f0       	breq	.+48     	; 0x3c24 <_ZN4QEPU13interrupt_cpuEi+0xbc>
    3bf4:	f3 cf       	rjmp	.-26     	; 0x3bdc <_ZN4QEPU13interrupt_cpuEi+0x74>
    3bf6:	f4 e0       	ldi	r31, 0x04	; 4
    3bf8:	8f 16       	cp	r8, r31
    3bfa:	91 04       	cpc	r9, r1
    3bfc:	09 f4       	brne	.+2      	; 0x3c00 <_ZN4QEPU13interrupt_cpuEi+0x98>
    3bfe:	4b c0       	rjmp	.+150    	; 0x3c96 <_ZN4QEPU13interrupt_cpuEi+0x12e>
    3c00:	b4 f1       	brlt	.+108    	; 0x3c6e <_ZN4QEPU13interrupt_cpuEi+0x106>
    3c02:	95 e0       	ldi	r25, 0x05	; 5
    3c04:	89 16       	cp	r8, r25
    3c06:	91 04       	cpc	r9, r1
    3c08:	09 f4       	brne	.+2      	; 0x3c0c <_ZN4QEPU13interrupt_cpuEi+0xa4>
    3c0a:	72 c0       	rjmp	.+228    	; 0x3cf0 <_ZN4QEPU13interrupt_cpuEi+0x188>
    3c0c:	e7 cf       	rjmp	.-50     	; 0x3bdc <_ZN4QEPU13interrupt_cpuEi+0x74>
			case INT_UART_OUT_CHAR:
				serial.write(sram.read(data_out_registerpointer));
    3c0e:	b2 01       	movw	r22, r4
    3c10:	c6 01       	movw	r24, r12
    3c12:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    3c16:	68 2f       	mov	r22, r24
    3c18:	c7 01       	movw	r24, r14
    3c1a:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <_ZN6Serial5writeEc>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3c1e:	d8 01       	movw	r26, r16
    3c20:	3c 92       	st	X, r3
    3c22:	99 c0       	rjmp	.+306    	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
				serial.write(sram.read(data_out_registerpointer));
				interrupt_done();
				break;
			case INT_UART_OUT_BUFFER:
				{
					int data_read=sram.read(data_out_registerpointer+address_pointer_offset);
    3c24:	6b 81       	ldd	r22, Y+3	; 0x03
    3c26:	7c 81       	ldd	r23, Y+4	; 0x04
    3c28:	64 0d       	add	r22, r4
    3c2a:	75 1d       	adc	r23, r5
    3c2c:	c6 01       	movw	r24, r12
    3c2e:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
					if(data_read==STRING_TERMINATOR) interrupt_done();
    3c32:	84 32       	cpi	r24, 0x24	; 36
    3c34:	19 f4       	brne	.+6      	; 0x3c3c <_ZN4QEPU13interrupt_cpuEi+0xd4>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3c36:	f8 01       	movw	r30, r16
    3c38:	30 82       	st	Z, r3
    3c3a:	8d c0       	rjmp	.+282    	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
			case INT_UART_OUT_BUFFER:
				{
					int data_read=sram.read(data_out_registerpointer+address_pointer_offset);
					if(data_read==STRING_TERMINATOR) interrupt_done();
					else{
						serial.write(data_read);
    3c3c:	68 2f       	mov	r22, r24
    3c3e:	c7 01       	movw	r24, r14
    3c40:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <_ZN6Serial5writeEc>
						address_pointer_offset++;
    3c44:	8b 81       	ldd	r24, Y+3	; 0x03
    3c46:	9c 81       	ldd	r25, Y+4	; 0x04
    3c48:	01 96       	adiw	r24, 0x01	; 1
    3c4a:	9c 83       	std	Y+4, r25	; 0x04
    3c4c:	8b 83       	std	Y+3, r24	; 0x03
    3c4e:	83 c0       	rjmp	.+262    	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
					}
				}
				break;
			case INT_UART_IN_CHAR_NO_ECHO:
				sram.write(data_in_registerpointer+address_pointer_offset,serial.read());
    3c50:	c7 01       	movw	r24, r14
    3c52:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <_ZN6Serial4readEv>
    3c56:	48 2f       	mov	r20, r24
    3c58:	50 e0       	ldi	r21, 0x00	; 0
    3c5a:	6b 81       	ldd	r22, Y+3	; 0x03
    3c5c:	7c 81       	ldd	r23, Y+4	; 0x04
    3c5e:	6a 0d       	add	r22, r10
    3c60:	7b 1d       	adc	r23, r11
    3c62:	c6 01       	movw	r24, r12
    3c64:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3c68:	d8 01       	movw	r26, r16
    3c6a:	3c 92       	st	X, r3
    3c6c:	74 c0       	rjmp	.+232    	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
			case INT_UART_IN_CHAR_NO_ECHO:
				sram.write(data_in_registerpointer+address_pointer_offset,serial.read());
				interrupt_done();
				break;
			case INT_UART_IN_CHAR_ECHO:{
					int char_echo=serial.read();
    3c6e:	c7 01       	movw	r24, r14
    3c70:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <_ZN6Serial4readEv>
    3c74:	78 2e       	mov	r7, r24
					serial.write(char_echo);
    3c76:	68 2f       	mov	r22, r24
    3c78:	c7 01       	movw	r24, r14
    3c7a:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <_ZN6Serial5writeEc>
			case INT_UART_IN_CHAR_NO_ECHO:
				sram.write(data_in_registerpointer+address_pointer_offset,serial.read());
				interrupt_done();
				break;
			case INT_UART_IN_CHAR_ECHO:{
					int char_echo=serial.read();
    3c7e:	47 2d       	mov	r20, r7
    3c80:	50 e0       	ldi	r21, 0x00	; 0
					serial.write(char_echo);
					sram.write(data_in_registerpointer+address_pointer_offset,char_echo);
    3c82:	6b 81       	ldd	r22, Y+3	; 0x03
    3c84:	7c 81       	ldd	r23, Y+4	; 0x04
    3c86:	6a 0d       	add	r22, r10
    3c88:	7b 1d       	adc	r23, r11
    3c8a:	c6 01       	movw	r24, r12
    3c8c:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3c90:	f8 01       	movw	r30, r16
    3c92:	30 82       	st	Z, r3
    3c94:	60 c0       	rjmp	.+192    	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
					sram.write(data_in_registerpointer+address_pointer_offset,char_echo);
					interrupt_done();
				}
				break;
			case INT_UART_IN_BUFF_NO_ECHO:{
					int char_noecho=serial.read();
    3c96:	c7 01       	movw	r24, r14
    3c98:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <_ZN6Serial4readEv>
    3c9c:	48 2f       	mov	r20, r24
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
					if(char_noecho==STRING_NEWLINE){
    3ca0:	4d 30       	cpi	r20, 0x0D	; 13
    3ca2:	51 05       	cpc	r21, r1
    3ca4:	61 f4       	brne	.+24     	; 0x3cbe <_ZN4QEPU13interrupt_cpuEi+0x156>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3ca6:	d8 01       	movw	r26, r16
    3ca8:	3c 92       	st	X, r3
				break;
			case INT_UART_IN_BUFF_NO_ECHO:{
					int char_noecho=serial.read();
					if(char_noecho==STRING_NEWLINE){
						interrupt_done();
						sram.write(data_in_registerpointer+address_pointer_offset,STRING_TERMINATOR);
    3caa:	44 e2       	ldi	r20, 0x24	; 36
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	6b 81       	ldd	r22, Y+3	; 0x03
    3cb0:	7c 81       	ldd	r23, Y+4	; 0x04
    3cb2:	6a 0d       	add	r22, r10
    3cb4:	7b 1d       	adc	r23, r11
    3cb6:	c6 01       	movw	r24, r12
    3cb8:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
    3cbc:	4c c0       	rjmp	.+152    	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
					}else
						if(char_noecho==0x8 && address_pointer_offset>0) address_pointer_offset--;
    3cbe:	48 30       	cpi	r20, 0x08	; 8
    3cc0:	51 05       	cpc	r21, r1
    3cc2:	49 f4       	brne	.+18     	; 0x3cd6 <_ZN4QEPU13interrupt_cpuEi+0x16e>
    3cc4:	eb 81       	ldd	r30, Y+3	; 0x03
    3cc6:	fc 81       	ldd	r31, Y+4	; 0x04
    3cc8:	1e 16       	cp	r1, r30
    3cca:	1f 06       	cpc	r1, r31
    3ccc:	24 f4       	brge	.+8      	; 0x3cd6 <_ZN4QEPU13interrupt_cpuEi+0x16e>
    3cce:	31 97       	sbiw	r30, 0x01	; 1
    3cd0:	fc 83       	std	Y+4, r31	; 0x04
    3cd2:	eb 83       	std	Y+3, r30	; 0x03
    3cd4:	40 c0       	rjmp	.+128    	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
						else{
							sram.write(data_in_registerpointer+address_pointer_offset,char_noecho);
    3cd6:	6b 81       	ldd	r22, Y+3	; 0x03
    3cd8:	7c 81       	ldd	r23, Y+4	; 0x04
    3cda:	6a 0d       	add	r22, r10
    3cdc:	7b 1d       	adc	r23, r11
    3cde:	c6 01       	movw	r24, r12
    3ce0:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
							address_pointer_offset++;
    3ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce8:	01 96       	adiw	r24, 0x01	; 1
    3cea:	9c 83       	std	Y+4, r25	; 0x04
    3cec:	8b 83       	std	Y+3, r24	; 0x03
    3cee:	33 c0       	rjmp	.+102    	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
						}
				}
				break;
			case INT_UART_IN_BUFF_ECHO:{
					int char_echo=serial.read();
    3cf0:	c7 01       	movw	r24, r14
    3cf2:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <_ZN6Serial4readEv>
    3cf6:	68 2e       	mov	r6, r24
    3cf8:	71 2c       	mov	r7, r1
					serial.write(char_echo);
    3cfa:	68 2f       	mov	r22, r24
    3cfc:	c7 01       	movw	r24, r14
    3cfe:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <_ZN6Serial5writeEc>
					if(char_echo==STRING_NEWLINE){
    3d02:	9d e0       	ldi	r25, 0x0D	; 13
    3d04:	69 16       	cp	r6, r25
    3d06:	71 04       	cpc	r7, r1
    3d08:	61 f4       	brne	.+24     	; 0x3d22 <_ZN4QEPU13interrupt_cpuEi+0x1ba>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3d0a:	d8 01       	movw	r26, r16
    3d0c:	3c 92       	st	X, r3
			case INT_UART_IN_BUFF_ECHO:{
					int char_echo=serial.read();
					serial.write(char_echo);
					if(char_echo==STRING_NEWLINE){
						interrupt_done();
						sram.write(data_in_registerpointer+address_pointer_offset,STRING_TERMINATOR);
    3d0e:	44 e2       	ldi	r20, 0x24	; 36
    3d10:	50 e0       	ldi	r21, 0x00	; 0
    3d12:	6b 81       	ldd	r22, Y+3	; 0x03
    3d14:	7c 81       	ldd	r23, Y+4	; 0x04
    3d16:	6a 0d       	add	r22, r10
    3d18:	7b 1d       	adc	r23, r11
    3d1a:	c6 01       	movw	r24, r12
    3d1c:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
    3d20:	1a c0       	rjmp	.+52     	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
					}else 
						if(char_echo==0x8 && address_pointer_offset>0) address_pointer_offset--;
    3d22:	b8 e0       	ldi	r27, 0x08	; 8
    3d24:	6b 16       	cp	r6, r27
    3d26:	71 04       	cpc	r7, r1
    3d28:	49 f4       	brne	.+18     	; 0x3d3c <_ZN4QEPU13interrupt_cpuEi+0x1d4>
    3d2a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d2c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d2e:	1e 16       	cp	r1, r30
    3d30:	1f 06       	cpc	r1, r31
    3d32:	24 f4       	brge	.+8      	; 0x3d3c <_ZN4QEPU13interrupt_cpuEi+0x1d4>
    3d34:	31 97       	sbiw	r30, 0x01	; 1
    3d36:	fc 83       	std	Y+4, r31	; 0x04
    3d38:	eb 83       	std	Y+3, r30	; 0x03
    3d3a:	0d c0       	rjmp	.+26     	; 0x3d56 <_ZN4QEPU13interrupt_cpuEi+0x1ee>
						else{
							sram.write(data_in_registerpointer+address_pointer_offset,char_echo);
    3d3c:	6b 81       	ldd	r22, Y+3	; 0x03
    3d3e:	7c 81       	ldd	r23, Y+4	; 0x04
    3d40:	6a 0d       	add	r22, r10
    3d42:	7b 1d       	adc	r23, r11
    3d44:	a3 01       	movw	r20, r6
    3d46:	c6 01       	movw	r24, r12
    3d48:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
							address_pointer_offset++;
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d50:	01 96       	adiw	r24, 0x01	; 1
    3d52:	9c 83       	std	Y+4, r25	; 0x04
    3d54:	8b 83       	std	Y+3, r24	; 0x03
	//NEEDS RESERVED REGISTERS USED FOR ADDRESS POINTING -> ADDRESS SHOULD POINT TO A REGISTER ADDRESS,NOT SRAM
	//NEEDS RESERVED REGISTERS USED FOR DATA SAVING -> SHOULD SAVE ON A REGISTER,NOT SRAM
	int address_pointer_offset=0;
	int data_out_registerpointer=qmem.fetch_register(INT_RESERVED_ADDRESSPOINTER);
	int data_in_registerpointer=qmem.fetch_register(INT_RESERVED_ADDRESSDATASTORE);
	while(!interrupt_signal){
    3d56:	d8 01       	movw	r26, r16
    3d58:	8c 91       	ld	r24, X
    3d5a:	88 23       	and	r24, r24
    3d5c:	09 f4       	brne	.+2      	; 0x3d60 <_ZN4QEPU13interrupt_cpuEi+0x1f8>
    3d5e:	3e cf       	rjmp	.-388    	; 0x3bdc <_ZN4QEPU13interrupt_cpuEi+0x74>
						}
				}
				break;
		}
	}
	interrupt_signal=false;
    3d60:	e9 81       	ldd	r30, Y+1	; 0x01
    3d62:	fa 81       	ldd	r31, Y+2	; 0x02
    3d64:	e3 52       	subi	r30, 0x23	; 35
    3d66:	ff 4f       	sbci	r31, 0xFF	; 255
    3d68:	10 82       	st	Z, r1
}
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	df 91       	pop	r29
    3d74:	cf 91       	pop	r28
    3d76:	1f 91       	pop	r17
    3d78:	0f 91       	pop	r16
    3d7a:	ff 90       	pop	r15
    3d7c:	ef 90       	pop	r14
    3d7e:	df 90       	pop	r13
    3d80:	cf 90       	pop	r12
    3d82:	bf 90       	pop	r11
    3d84:	af 90       	pop	r10
    3d86:	9f 90       	pop	r9
    3d88:	8f 90       	pop	r8
    3d8a:	7f 90       	pop	r7
    3d8c:	6f 90       	pop	r6
    3d8e:	5f 90       	pop	r5
    3d90:	4f 90       	pop	r4
    3d92:	3f 90       	pop	r3
    3d94:	08 95       	ret

00003d96 <_ZN4QEPU9JumpstackC1Ev>:
#include "qepu.h"

QEPU::Jumpstack::Jumpstack():newest_address_index(0){
    3d96:	fc 01       	movw	r30, r24
    3d98:	11 82       	std	Z+1, r1	; 0x01
    3d9a:	10 82       	st	Z, r1
    3d9c:	08 95       	ret

00003d9e <_ZN4QEPU9Jumpstack4pushEi>:
	
}
void QEPU::Jumpstack::push(int newaddress){
	addresses_toreturn[newest_address_index]=newaddress;
    3d9e:	fc 01       	movw	r30, r24
    3da0:	20 81       	ld	r18, Z
    3da2:	31 81       	ldd	r19, Z+1	; 0x01
    3da4:	2f 5f       	subi	r18, 0xFF	; 255
    3da6:	3f 4f       	sbci	r19, 0xFF	; 255
    3da8:	f9 01       	movw	r30, r18
    3daa:	ee 0f       	add	r30, r30
    3dac:	ff 1f       	adc	r31, r31
    3dae:	e8 0f       	add	r30, r24
    3db0:	f9 1f       	adc	r31, r25
    3db2:	71 83       	std	Z+1, r23	; 0x01
    3db4:	60 83       	st	Z, r22
	newest_address_index++;
    3db6:	fc 01       	movw	r30, r24
    3db8:	31 83       	std	Z+1, r19	; 0x01
    3dba:	20 83       	st	Z, r18
    3dbc:	08 95       	ret

00003dbe <_ZN4QEPU9Jumpstack3popEv>:
}
int QEPU::Jumpstack::pop(){
	if(newest_address_index<=0) return MAX_THEORETICAL_PC;
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	20 81       	ld	r18, Z
    3dc2:	31 81       	ldd	r19, Z+1	; 0x01
    3dc4:	12 16       	cp	r1, r18
    3dc6:	13 06       	cpc	r1, r19
    3dc8:	8c f4       	brge	.+34     	; 0x3dec <_ZN4QEPU9Jumpstack3popEv+0x2e>
	int address_returning=addresses_toreturn[newest_address_index-1];
    3dca:	21 50       	subi	r18, 0x01	; 1
    3dcc:	31 09       	sbc	r19, r1
    3dce:	f9 01       	movw	r30, r18
    3dd0:	ee 0f       	add	r30, r30
    3dd2:	ff 1f       	adc	r31, r31
    3dd4:	e8 0f       	add	r30, r24
    3dd6:	f9 1f       	adc	r31, r25
    3dd8:	52 81       	ldd	r21, Z+2	; 0x02
    3dda:	43 81       	ldd	r20, Z+3	; 0x03
	addresses_toreturn[newest_address_index-1]=0;
    3ddc:	13 82       	std	Z+3, r1	; 0x03
    3dde:	12 82       	std	Z+2, r1	; 0x02
	newest_address_index--;
    3de0:	fc 01       	movw	r30, r24
    3de2:	31 83       	std	Z+1, r19	; 0x01
    3de4:	20 83       	st	Z, r18
	return address_returning;
    3de6:	85 2f       	mov	r24, r21
    3de8:	94 2f       	mov	r25, r20
    3dea:	08 95       	ret
void QEPU::Jumpstack::push(int newaddress){
	addresses_toreturn[newest_address_index]=newaddress;
	newest_address_index++;
}
int QEPU::Jumpstack::pop(){
	if(newest_address_index<=0) return MAX_THEORETICAL_PC;
    3dec:	80 e4       	ldi	r24, 0x40	; 64
    3dee:	92 e4       	ldi	r25, 0x42	; 66
	int address_returning=addresses_toreturn[newest_address_index-1];
	addresses_toreturn[newest_address_index-1]=0;
	newest_address_index--;
	return address_returning;
}
    3df0:	08 95       	ret

00003df2 <_ZN4QEPU10setup_seedEv>:

//SETUP SEED FOR RAND():
uint16_t EEMEM randinit;

void QEPU::setup_seed(){
	srand(eeprom_read_word(&randinit));
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	0e 94 26 39 	call	0x724c	; 0x724c <__eerd_word_m32>
    3dfa:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <srand>
	eeprom_write_word(&randinit,rand()%10000);
    3dfe:	0e 94 d6 35 	call	0x6bac	; 0x6bac <rand>
    3e02:	60 e1       	ldi	r22, 0x10	; 16
    3e04:	77 e2       	ldi	r23, 0x27	; 39
    3e06:	0e 94 f2 33 	call	0x67e4	; 0x67e4 <__divmodhi4>
    3e0a:	bc 01       	movw	r22, r24
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	0e 94 2c 39 	call	0x7258	; 0x7258 <__eewr_word_m32>
    3e14:	08 95       	ret

00003e16 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){serial.writestr("INITIALIZING . . . ");setup_seed();program_counter=0;program_counter_maximum=0;}
    3e16:	0f 93       	push	r16
    3e18:	1f 93       	push	r17
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	ec 01       	movw	r28, r24
    3e20:	0e 94 02 03 	call	0x604	; 0x604 <_ZN4QEPU4FlagC1Ev>
    3e24:	ce 01       	movw	r24, r28
    3e26:	01 96       	adiw	r24, 0x01	; 1
    3e28:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN4QMEMC1Ev>
    3e2c:	8e 01       	movw	r16, r28
    3e2e:	0c 5f       	subi	r16, 0xFC	; 252
    3e30:	1f 4f       	sbci	r17, 0xFF	; 255
    3e32:	c8 01       	movw	r24, r16
    3e34:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <_ZN6SerialC1Ev>
    3e38:	ce 01       	movw	r24, r28
    3e3a:	05 96       	adiw	r24, 0x05	; 5
    3e3c:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6EEPromC1Ev>
    3e40:	ce 01       	movw	r24, r28
    3e42:	06 96       	adiw	r24, 0x06	; 6
    3e44:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <_ZN4SRAMC1Ev>
    3e48:	ce 01       	movw	r24, r28
    3e4a:	0d 96       	adiw	r24, 0x0d	; 13
    3e4c:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN5GatesC1Ev>
    3e50:	ce 01       	movw	r24, r28
    3e52:	0e 96       	adiw	r24, 0x0e	; 14
    3e54:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <_ZN4QEPU9JumpstackC1Ev>
    3e58:	60 e7       	ldi	r22, 0x70	; 112
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	c8 01       	movw	r24, r16
    3e5e:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <_ZN6Serial8writestrEPc>
    3e62:	ce 01       	movw	r24, r28
    3e64:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_ZN4QEPU10setup_seedEv>
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e7 52       	subi	r30, 0x27	; 39
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	11 82       	std	Z+1, r1	; 0x01
    3e70:	10 82       	st	Z, r1
    3e72:	c5 52       	subi	r28, 0x25	; 37
    3e74:	df 4f       	sbci	r29, 0xFF	; 255
    3e76:	19 82       	std	Y+1, r1	; 0x01
    3e78:	18 82       	st	Y, r1
    3e7a:	df 91       	pop	r29
    3e7c:	cf 91       	pop	r28
    3e7e:	1f 91       	pop	r17
    3e80:	0f 91       	pop	r16
    3e82:	08 95       	ret

00003e84 <_ZN4QEPU7executeEilll>:
	serial.writestrln("");
	serial.writestr("The execution of the program has finished");
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2,int32_t op3){
    3e84:	2f 92       	push	r2
    3e86:	3f 92       	push	r3
    3e88:	4f 92       	push	r4
    3e8a:	5f 92       	push	r5
    3e8c:	6f 92       	push	r6
    3e8e:	7f 92       	push	r7
    3e90:	8f 92       	push	r8
    3e92:	9f 92       	push	r9
    3e94:	af 92       	push	r10
    3e96:	bf 92       	push	r11
    3e98:	cf 92       	push	r12
    3e9a:	df 92       	push	r13
    3e9c:	ef 92       	push	r14
    3e9e:	ff 92       	push	r15
    3ea0:	0f 93       	push	r16
    3ea2:	1f 93       	push	r17
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
    3eac:	2c 97       	sbiw	r28, 0x0c	; 12
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	f8 94       	cli
    3eb2:	de bf       	out	0x3e, r29	; 62
    3eb4:	0f be       	out	0x3f, r0	; 63
    3eb6:	cd bf       	out	0x3d, r28	; 61
    3eb8:	4c 01       	movw	r8, r24
    3eba:	29 01       	movw	r4, r18
    3ebc:	3a 01       	movw	r6, r20
    3ebe:	e9 82       	std	Y+1, r14	; 0x01
    3ec0:	fa 82       	std	Y+2, r15	; 0x02
    3ec2:	0b 83       	std	Y+3, r16	; 0x03
    3ec4:	1c 83       	std	Y+4, r17	; 0x04
    3ec6:	ad 82       	std	Y+5, r10	; 0x05
    3ec8:	be 82       	std	Y+6, r11	; 0x06
    3eca:	cf 82       	std	Y+7, r12	; 0x07
    3ecc:	d8 86       	std	Y+8, r13	; 0x08
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    3ece:	fb 01       	movw	r30, r22
    3ed0:	31 97       	sbiw	r30, 0x01	; 1
    3ed2:	e1 35       	cpi	r30, 0x51	; 81
    3ed4:	f1 05       	cpc	r31, r1
    3ed6:	10 f0       	brcs	.+4      	; 0x3edc <_ZN4QEPU7executeEilll+0x58>
    3ed8:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
    3edc:	e6 5d       	subi	r30, 0xD6	; 214
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	0c 94 25 34 	jmp	0x684a	; 0x684a <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOQ (move qubit) */
			qmem.write(op1,THE,qmem.read(op2,THE,false));
    3ee4:	2f ef       	ldi	r18, 0xFF	; 255
    3ee6:	82 1a       	sub	r8, r18
    3ee8:	92 0a       	sbc	r9, r18
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	40 e0       	ldi	r20, 0x00	; 0
    3eee:	50 e0       	ldi	r21, 0x00	; 0
    3ef0:	69 81       	ldd	r22, Y+1	; 0x01
    3ef2:	7a 81       	ldd	r23, Y+2	; 0x02
    3ef4:	c4 01       	movw	r24, r8
    3ef6:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    3efa:	9c 01       	movw	r18, r24
    3efc:	40 e0       	ldi	r20, 0x00	; 0
    3efe:	50 e0       	ldi	r21, 0x00	; 0
    3f00:	b2 01       	movw	r22, r4
    3f02:	c4 01       	movw	r24, r8
    3f04:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op1,PHI,qmem.read(op2,PHI,false));
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	41 e0       	ldi	r20, 0x01	; 1
    3f0c:	50 e0       	ldi	r21, 0x00	; 0
    3f0e:	69 81       	ldd	r22, Y+1	; 0x01
    3f10:	7a 81       	ldd	r23, Y+2	; 0x02
    3f12:	c4 01       	movw	r24, r8
    3f14:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    3f18:	9c 01       	movw	r18, r24
    3f1a:	41 e0       	ldi	r20, 0x01	; 1
    3f1c:	50 e0       	ldi	r21, 0x00	; 0
    3f1e:	b2 01       	movw	r22, r4
    3f20:	c4 01       	movw	r24, r8
    3f22:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			break;
    3f26:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x02: /*MOR (move register)*/
			qmem.set_register(op1,qmem.fetch_register(op1)); // TOUCH ITSELF 1ST
    3f2a:	3f ef       	ldi	r19, 0xFF	; 255
    3f2c:	83 1a       	sub	r8, r19
    3f2e:	93 0a       	sbc	r9, r19
    3f30:	b2 01       	movw	r22, r4
    3f32:	c4 01       	movw	r24, r8
    3f34:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <_ZN4QMEM14fetch_registerEi>
    3f38:	ac 01       	movw	r20, r24
    3f3a:	b2 01       	movw	r22, r4
    3f3c:	c4 01       	movw	r24, r8
    3f3e:	0e 94 76 2d 	call	0x5aec	; 0x5aec <_ZN4QMEM12set_registerEii>
			qmem.set_register(op1,qmem.fetch_register(op2)); // MOVE TO THE NEW REGISTER (IF IT NEEDS TO BE UNTOUCHED IT NEEDS TO USE MATRICES INSTEAD)
    3f42:	69 81       	ldd	r22, Y+1	; 0x01
    3f44:	7a 81       	ldd	r23, Y+2	; 0x02
    3f46:	c4 01       	movw	r24, r8
    3f48:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <_ZN4QMEM14fetch_registerEi>
    3f4c:	ac 01       	movw	r20, r24
    3f4e:	b2 01       	movw	r22, r4
    3f50:	c4 01       	movw	r24, r8
    3f52:	0e 94 76 2d 	call	0x5aec	; 0x5aec <_ZN4QMEM12set_registerEii>
			break;
    3f56:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x03: /*MOM (move memory)*/
			sram.write(op1,sram.read(op2));
    3f5a:	86 e0       	ldi	r24, 0x06	; 6
    3f5c:	88 0e       	add	r8, r24
    3f5e:	91 1c       	adc	r9, r1
    3f60:	69 81       	ldd	r22, Y+1	; 0x01
    3f62:	7a 81       	ldd	r23, Y+2	; 0x02
    3f64:	c4 01       	movw	r24, r8
    3f66:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    3f6a:	48 2f       	mov	r20, r24
    3f6c:	55 27       	eor	r21, r21
    3f6e:	47 fd       	sbrc	r20, 7
    3f70:	50 95       	com	r21
    3f72:	b2 01       	movw	r22, r4
    3f74:	c4 01       	movw	r24, r8
    3f76:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    3f7a:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x04: /*STR (store)*/
			sram.write(op1,qmem.fetch_register(op2));
    3f7e:	69 81       	ldd	r22, Y+1	; 0x01
    3f80:	7a 81       	ldd	r23, Y+2	; 0x02
    3f82:	01 96       	adiw	r24, 0x01	; 1
    3f84:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <_ZN4QMEM14fetch_registerEi>
    3f88:	ac 01       	movw	r20, r24
    3f8a:	b2 01       	movw	r22, r4
    3f8c:	c4 01       	movw	r24, r8
    3f8e:	06 96       	adiw	r24, 0x06	; 6
    3f90:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    3f94:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x05: /*LOD (load)*/
			qmem.set_register(op1,sram.read(op2));
    3f98:	69 81       	ldd	r22, Y+1	; 0x01
    3f9a:	7a 81       	ldd	r23, Y+2	; 0x02
    3f9c:	06 96       	adiw	r24, 0x06	; 6
    3f9e:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    3fa2:	48 2f       	mov	r20, r24
    3fa4:	55 27       	eor	r21, r21
    3fa6:	47 fd       	sbrc	r20, 7
    3fa8:	50 95       	com	r21
    3faa:	b2 01       	movw	r22, r4
    3fac:	c4 01       	movw	r24, r8
    3fae:	01 96       	adiw	r24, 0x01	; 1
    3fb0:	0e 94 76 2d 	call	0x5aec	; 0x5aec <_ZN4QMEM12set_registerEii>
			break;
    3fb4:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x06: /*CRW (Constant Ram Write)*/
			sram.write(op1,op2);
    3fb8:	49 81       	ldd	r20, Y+1	; 0x01
    3fba:	5a 81       	ldd	r21, Y+2	; 0x02
    3fbc:	b2 01       	movw	r22, r4
    3fbe:	06 96       	adiw	r24, 0x06	; 6
    3fc0:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    3fc4:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x07: /*CQW* (Constant Qubit Write)*/
			qmem.set_register(op1,op2);
    3fc8:	49 81       	ldd	r20, Y+1	; 0x01
    3fca:	5a 81       	ldd	r21, Y+2	; 0x02
    3fcc:	b2 01       	movw	r22, r4
    3fce:	01 96       	adiw	r24, 0x01	; 1
    3fd0:	0e 94 76 2d 	call	0x5aec	; 0x5aec <_ZN4QMEM12set_registerEii>
			break;
    3fd4:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x08: /*POP (pop)*/
			qmem.set_register(op1,sram.pop());
    3fd8:	06 96       	adiw	r24, 0x06	; 6
    3fda:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <_ZN4SRAM3popEv>
    3fde:	ac 01       	movw	r20, r24
    3fe0:	b2 01       	movw	r22, r4
    3fe2:	c4 01       	movw	r24, r8
    3fe4:	01 96       	adiw	r24, 0x01	; 1
    3fe6:	0e 94 76 2d 	call	0x5aec	; 0x5aec <_ZN4QMEM12set_registerEii>
			break;
    3fea:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x09: /*PSH (push)*/
			sram.push(qmem.fetch_register(op1));
    3fee:	b9 01       	movw	r22, r18
    3ff0:	01 96       	adiw	r24, 0x01	; 1
    3ff2:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <_ZN4QMEM14fetch_registerEi>
    3ff6:	bc 01       	movw	r22, r24
    3ff8:	c4 01       	movw	r24, r8
    3ffa:	06 96       	adiw	r24, 0x06	; 6
    3ffc:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <_ZN4SRAM4pushEi>
			break;
    4000:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x0A: /*CMT (constantmovtheta)*/
			qmem.write(op1,THE,op2);
    4004:	29 81       	ldd	r18, Y+1	; 0x01
    4006:	3a 81       	ldd	r19, Y+2	; 0x02
    4008:	40 e0       	ldi	r20, 0x00	; 0
    400a:	50 e0       	ldi	r21, 0x00	; 0
    400c:	b2 01       	movw	r22, r4
    400e:	01 96       	adiw	r24, 0x01	; 1
    4010:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			break;
    4014:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x0B: /*CMP (constantmovphi)*/
			qmem.write(op1,PHI,op2);
    4018:	29 81       	ldd	r18, Y+1	; 0x01
    401a:	3a 81       	ldd	r19, Y+2	; 0x02
    401c:	41 e0       	ldi	r20, 0x01	; 1
    401e:	50 e0       	ldi	r21, 0x00	; 0
    4020:	b2 01       	movw	r22, r4
    4022:	01 96       	adiw	r24, 0x01	; 1
    4024:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			break;
    4028:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x0C: /*CME (compare)*/
			flags.compare(qmem.fetch_register(op1),qmem.fetch_register(op2));
    402c:	9f ef       	ldi	r25, 0xFF	; 255
    402e:	89 1a       	sub	r8, r25
    4030:	99 0a       	sbc	r9, r25
    4032:	69 81       	ldd	r22, Y+1	; 0x01
    4034:	7a 81       	ldd	r23, Y+2	; 0x02
    4036:	c4 01       	movw	r24, r8
    4038:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <_ZN4QMEM14fetch_registerEi>
    403c:	8c 01       	movw	r16, r24
    403e:	b2 01       	movw	r22, r4
    4040:	c4 01       	movw	r24, r8
    4042:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <_ZN4QMEM14fetch_registerEi>
    4046:	b8 01       	movw	r22, r16
    4048:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN4QEPU4Flag7compareEii>
			break;
    404c:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x0D: /*SEF (SET FLAG)*/
			flags.flaglist[op1]=op2;
    4050:	f9 01       	movw	r30, r18
    4052:	ec 50       	subi	r30, 0x0C	; 12
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	a9 81       	ldd	r26, Y+1	; 0x01
    4058:	a0 83       	st	Z, r26
			break;
    405a:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x0E: /*GEF (GET FLAG)*/
			sram.write(op1,flags.flaglist[op2]);
    405e:	e9 81       	ldd	r30, Y+1	; 0x01
    4060:	fa 81       	ldd	r31, Y+2	; 0x02
    4062:	ec 50       	subi	r30, 0x0C	; 12
    4064:	ff 4f       	sbci	r31, 0xFF	; 255
    4066:	40 81       	ld	r20, Z
    4068:	55 27       	eor	r21, r21
    406a:	47 fd       	sbrc	r20, 7
    406c:	50 95       	com	r21
    406e:	b2 01       	movw	r22, r4
    4070:	06 96       	adiw	r24, 0x06	; 6
    4072:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4076:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		/*IMPLEMENT CONDICIONAL/INCONDICIONAL BRANCHES HERE*/
		case 0x0F: /*BES (branch enable stack)*/
			flags.flaglist[ALLOW_BRANCH_STACK]=op1;
    407a:	20 93 fc 00 	sts	0x00FC, r18
			break;
    407e:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x10: /*BLW (branch if lower (with jumpstack))*/
			if(flags.flaglist[CND_LWER]){
    4082:	80 91 f4 00 	lds	r24, 0x00F4
    4086:	88 23       	and	r24, r24
    4088:	11 f4       	brne	.+4      	; 0x408e <_ZN4QEPU7executeEilll+0x20a>
    408a:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
				jumpstack.push(program_counter+1);
    408e:	84 01       	movw	r16, r8
    4090:	07 52       	subi	r16, 0x27	; 39
    4092:	1f 4f       	sbci	r17, 0xFF	; 255
    4094:	f8 01       	movw	r30, r16
    4096:	60 81       	ld	r22, Z
    4098:	71 81       	ldd	r23, Z+1	; 0x01
    409a:	6f 5f       	subi	r22, 0xFF	; 255
    409c:	7f 4f       	sbci	r23, 0xFF	; 255
    409e:	c4 01       	movw	r24, r8
    40a0:	0e 96       	adiw	r24, 0x0e	; 14
    40a2:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN4QEPU9Jumpstack4pushEi>
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    40a6:	f1 e0       	ldi	r31, 0x01	; 1
    40a8:	4f 1a       	sub	r4, r31
    40aa:	51 08       	sbc	r5, r1
    40ac:	d8 01       	movw	r26, r16
    40ae:	4d 92       	st	X+, r4
    40b0:	5c 92       	st	X, r5
    40b2:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
				jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x11: /*BLE (branch if lower or equal (with jumpstack))*/
			if(flags.flaglist[CND_LWER_EQUAL]){
    40b6:	80 91 f5 00 	lds	r24, 0x00F5
    40ba:	88 23       	and	r24, r24
    40bc:	11 f4       	brne	.+4      	; 0x40c2 <_ZN4QEPU7executeEilll+0x23e>
    40be:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    40c2:	80 91 fc 00 	lds	r24, 0x00FC
    40c6:	88 23       	and	r24, r24
    40c8:	59 f0       	breq	.+22     	; 0x40e0 <_ZN4QEPU7executeEilll+0x25c>
					jumpstack.push(program_counter+1);
    40ca:	f4 01       	movw	r30, r8
    40cc:	e7 52       	subi	r30, 0x27	; 39
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	60 81       	ld	r22, Z
    40d2:	71 81       	ldd	r23, Z+1	; 0x01
    40d4:	6f 5f       	subi	r22, 0xFF	; 255
    40d6:	7f 4f       	sbci	r23, 0xFF	; 255
    40d8:	c4 01       	movw	r24, r8
    40da:	0e 96       	adiw	r24, 0x0e	; 14
    40dc:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN4QEPU9Jumpstack4pushEi>
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    40e0:	f4 01       	movw	r30, r8
    40e2:	e7 52       	subi	r30, 0x27	; 39
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	b1 e0       	ldi	r27, 0x01	; 1
    40e8:	4b 1a       	sub	r4, r27
    40ea:	51 08       	sbc	r5, r1
    40ec:	51 82       	std	Z+1, r5	; 0x01
    40ee:	40 82       	st	Z, r4
    40f0:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x12: /*BEQ (branch if equal) (with jumpstack)*/
			if(flags.flaglist[CND_EQUAL]){
    40f4:	80 91 f6 00 	lds	r24, 0x00F6
    40f8:	88 23       	and	r24, r24
    40fa:	11 f4       	brne	.+4      	; 0x4100 <_ZN4QEPU7executeEilll+0x27c>
    40fc:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4100:	80 91 fc 00 	lds	r24, 0x00FC
    4104:	88 23       	and	r24, r24
    4106:	59 f0       	breq	.+22     	; 0x411e <_ZN4QEPU7executeEilll+0x29a>
					jumpstack.push(program_counter+1);
    4108:	f4 01       	movw	r30, r8
    410a:	e7 52       	subi	r30, 0x27	; 39
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	60 81       	ld	r22, Z
    4110:	71 81       	ldd	r23, Z+1	; 0x01
    4112:	6f 5f       	subi	r22, 0xFF	; 255
    4114:	7f 4f       	sbci	r23, 0xFF	; 255
    4116:	c4 01       	movw	r24, r8
    4118:	0e 96       	adiw	r24, 0x0e	; 14
    411a:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN4QEPU9Jumpstack4pushEi>
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    411e:	f4 01       	movw	r30, r8
    4120:	e7 52       	subi	r30, 0x27	; 39
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	21 e0       	ldi	r18, 0x01	; 1
    4126:	42 1a       	sub	r4, r18
    4128:	51 08       	sbc	r5, r1
    412a:	51 82       	std	Z+1, r5	; 0x01
    412c:	40 82       	st	Z, r4
    412e:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x13: /*BGE (branch if greater or equal (with jumpstack))*/
			if(flags.flaglist[CND_GRTER_EQUAL]){
    4132:	80 91 f7 00 	lds	r24, 0x00F7
    4136:	88 23       	and	r24, r24
    4138:	11 f4       	brne	.+4      	; 0x413e <_ZN4QEPU7executeEilll+0x2ba>
    413a:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    413e:	80 91 fc 00 	lds	r24, 0x00FC
    4142:	88 23       	and	r24, r24
    4144:	59 f0       	breq	.+22     	; 0x415c <_ZN4QEPU7executeEilll+0x2d8>
					jumpstack.push(program_counter+1);
    4146:	f4 01       	movw	r30, r8
    4148:	e7 52       	subi	r30, 0x27	; 39
    414a:	ff 4f       	sbci	r31, 0xFF	; 255
    414c:	60 81       	ld	r22, Z
    414e:	71 81       	ldd	r23, Z+1	; 0x01
    4150:	6f 5f       	subi	r22, 0xFF	; 255
    4152:	7f 4f       	sbci	r23, 0xFF	; 255
    4154:	c4 01       	movw	r24, r8
    4156:	0e 96       	adiw	r24, 0x0e	; 14
    4158:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN4QEPU9Jumpstack4pushEi>
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    415c:	f4 01       	movw	r30, r8
    415e:	e7 52       	subi	r30, 0x27	; 39
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	31 e0       	ldi	r19, 0x01	; 1
    4164:	43 1a       	sub	r4, r19
    4166:	51 08       	sbc	r5, r1
    4168:	51 82       	std	Z+1, r5	; 0x01
    416a:	40 82       	st	Z, r4
    416c:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x14: /*BGR (branch if greater (with jumpstack))*/
			if(flags.flaglist[CND_GRTER]){
    4170:	80 91 f8 00 	lds	r24, 0x00F8
    4174:	88 23       	and	r24, r24
    4176:	11 f4       	brne	.+4      	; 0x417c <_ZN4QEPU7executeEilll+0x2f8>
    4178:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    417c:	80 91 fc 00 	lds	r24, 0x00FC
    4180:	88 23       	and	r24, r24
    4182:	59 f0       	breq	.+22     	; 0x419a <_ZN4QEPU7executeEilll+0x316>
					jumpstack.push(program_counter+1);
    4184:	f4 01       	movw	r30, r8
    4186:	e7 52       	subi	r30, 0x27	; 39
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	60 81       	ld	r22, Z
    418c:	71 81       	ldd	r23, Z+1	; 0x01
    418e:	6f 5f       	subi	r22, 0xFF	; 255
    4190:	7f 4f       	sbci	r23, 0xFF	; 255
    4192:	c4 01       	movw	r24, r8
    4194:	0e 96       	adiw	r24, 0x0e	; 14
    4196:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN4QEPU9Jumpstack4pushEi>
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    419a:	f4 01       	movw	r30, r8
    419c:	e7 52       	subi	r30, 0x27	; 39
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	48 1a       	sub	r4, r24
    41a4:	51 08       	sbc	r5, r1
    41a6:	51 82       	std	Z+1, r5	; 0x01
    41a8:	40 82       	st	Z, r4
    41aa:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x15: /*BDI (branch if different (with jumpstack))*/
			if(flags.flaglist[CND_DIFF]){
    41ae:	80 91 f9 00 	lds	r24, 0x00F9
    41b2:	88 23       	and	r24, r24
    41b4:	11 f4       	brne	.+4      	; 0x41ba <_ZN4QEPU7executeEilll+0x336>
    41b6:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    41ba:	80 91 fc 00 	lds	r24, 0x00FC
    41be:	88 23       	and	r24, r24
    41c0:	59 f0       	breq	.+22     	; 0x41d8 <_ZN4QEPU7executeEilll+0x354>
					jumpstack.push(program_counter+1);
    41c2:	f4 01       	movw	r30, r8
    41c4:	e7 52       	subi	r30, 0x27	; 39
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	60 81       	ld	r22, Z
    41ca:	71 81       	ldd	r23, Z+1	; 0x01
    41cc:	6f 5f       	subi	r22, 0xFF	; 255
    41ce:	7f 4f       	sbci	r23, 0xFF	; 255
    41d0:	c4 01       	movw	r24, r8
    41d2:	0e 96       	adiw	r24, 0x0e	; 14
    41d4:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN4QEPU9Jumpstack4pushEi>
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    41d8:	f4 01       	movw	r30, r8
    41da:	e7 52       	subi	r30, 0x27	; 39
    41dc:	ff 4f       	sbci	r31, 0xFF	; 255
    41de:	91 e0       	ldi	r25, 0x01	; 1
    41e0:	49 1a       	sub	r4, r25
    41e2:	51 08       	sbc	r5, r1
    41e4:	51 82       	std	Z+1, r5	; 0x01
    41e6:	40 82       	st	Z, r4
    41e8:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x16: /*BZE (branch if register(op1)=0 (zero) (with jumpstack))*/
			if(flags.flaglist[CND_ZERO]){
    41ec:	80 91 fa 00 	lds	r24, 0x00FA
    41f0:	88 23       	and	r24, r24
    41f2:	11 f4       	brne	.+4      	; 0x41f8 <_ZN4QEPU7executeEilll+0x374>
    41f4:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    41f8:	80 91 fc 00 	lds	r24, 0x00FC
    41fc:	88 23       	and	r24, r24
    41fe:	59 f0       	breq	.+22     	; 0x4216 <_ZN4QEPU7executeEilll+0x392>
					jumpstack.push(program_counter+1);
    4200:	f4 01       	movw	r30, r8
    4202:	e7 52       	subi	r30, 0x27	; 39
    4204:	ff 4f       	sbci	r31, 0xFF	; 255
    4206:	60 81       	ld	r22, Z
    4208:	71 81       	ldd	r23, Z+1	; 0x01
    420a:	6f 5f       	subi	r22, 0xFF	; 255
    420c:	7f 4f       	sbci	r23, 0xFF	; 255
    420e:	c4 01       	movw	r24, r8
    4210:	0e 96       	adiw	r24, 0x0e	; 14
    4212:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN4QEPU9Jumpstack4pushEi>
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4216:	f4 01       	movw	r30, r8
    4218:	e7 52       	subi	r30, 0x27	; 39
    421a:	ff 4f       	sbci	r31, 0xFF	; 255
    421c:	a1 e0       	ldi	r26, 0x01	; 1
    421e:	4a 1a       	sub	r4, r26
    4220:	51 08       	sbc	r5, r1
    4222:	51 82       	std	Z+1, r5	; 0x01
    4224:	40 82       	st	Z, r4
    4226:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x17: /*BNZ (branch if register(op1)!=0 (not zero) (with jumpstack))*/
			if(flags.flaglist[CND_NOT_ZERO]){
    422a:	80 91 fb 00 	lds	r24, 0x00FB
    422e:	88 23       	and	r24, r24
    4230:	11 f4       	brne	.+4      	; 0x4236 <_ZN4QEPU7executeEilll+0x3b2>
    4232:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4236:	80 91 fc 00 	lds	r24, 0x00FC
    423a:	88 23       	and	r24, r24
    423c:	59 f0       	breq	.+22     	; 0x4254 <_ZN4QEPU7executeEilll+0x3d0>
					jumpstack.push(program_counter+1);
    423e:	f4 01       	movw	r30, r8
    4240:	e7 52       	subi	r30, 0x27	; 39
    4242:	ff 4f       	sbci	r31, 0xFF	; 255
    4244:	60 81       	ld	r22, Z
    4246:	71 81       	ldd	r23, Z+1	; 0x01
    4248:	6f 5f       	subi	r22, 0xFF	; 255
    424a:	7f 4f       	sbci	r23, 0xFF	; 255
    424c:	c4 01       	movw	r24, r8
    424e:	0e 96       	adiw	r24, 0x0e	; 14
    4250:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN4QEPU9Jumpstack4pushEi>
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4254:	f4 01       	movw	r30, r8
    4256:	e7 52       	subi	r30, 0x27	; 39
    4258:	ff 4f       	sbci	r31, 0xFF	; 255
    425a:	b1 e0       	ldi	r27, 0x01	; 1
    425c:	4b 1a       	sub	r4, r27
    425e:	51 08       	sbc	r5, r1
    4260:	51 82       	std	Z+1, r5	; 0x01
    4262:	40 82       	st	Z, r4
    4264:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x18: /*CALL (incondicional branch WITH jumpstack)*/
			jumpstack.push(program_counter+1);
    4268:	8c 01       	movw	r16, r24
    426a:	07 52       	subi	r16, 0x27	; 39
    426c:	1f 4f       	sbci	r17, 0xFF	; 255
    426e:	f8 01       	movw	r30, r16
    4270:	60 81       	ld	r22, Z
    4272:	71 81       	ldd	r23, Z+1	; 0x01
    4274:	6f 5f       	subi	r22, 0xFF	; 255
    4276:	7f 4f       	sbci	r23, 0xFF	; 255
    4278:	0e 96       	adiw	r24, 0x0e	; 14
    427a:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <_ZN4QEPU9Jumpstack4pushEi>
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    427e:	f1 e0       	ldi	r31, 0x01	; 1
    4280:	4f 1a       	sub	r4, r31
    4282:	51 08       	sbc	r5, r1
    4284:	d8 01       	movw	r26, r16
    4286:	4d 92       	st	X+, r4
    4288:	5c 92       	st	X, r5
    428a:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x18: /*CALL (incondicional branch WITH jumpstack)*/
			jumpstack.push(program_counter+1);
			set_programcounter(op1);
			break;
		case 0x19: /*RET (return)*/
			set_programcounter(jumpstack.pop());
    428e:	0e 96       	adiw	r24, 0x0e	; 14
    4290:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_ZN4QEPU9Jumpstack3popEv>
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4294:	f4 01       	movw	r30, r8
    4296:	e7 52       	subi	r30, 0x27	; 39
    4298:	ff 4f       	sbci	r31, 0xFF	; 255
    429a:	01 97       	sbiw	r24, 0x01	; 1
    429c:	91 83       	std	Z+1, r25	; 0x01
    429e:	80 83       	st	Z, r24
    42a0:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
    42a4:	fc 01       	movw	r30, r24
    42a6:	e7 52       	subi	r30, 0x27	; 39
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	b1 e0       	ldi	r27, 0x01	; 1
    42ac:	4b 1a       	sub	r4, r27
    42ae:	51 08       	sbc	r5, r1
    42b0:	51 82       	std	Z+1, r5	; 0x01
    42b2:	40 82       	st	Z, r4
    42b4:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x1A: /*JMP (jump (incondicional branch WITHOUT jumpstack))*/
			set_programcounter(op1);
			break;
		/*IMPLEMENT LOGIC AND ARITHMETIC (CLASSICAL) CALCULATIONS HERE*/
		case 0x1B: /*ADD*/
			sram.write(op1,sram.read(op2)+sram.read(op3));
    42b8:	e6 e0       	ldi	r30, 0x06	; 6
    42ba:	8e 0e       	add	r8, r30
    42bc:	91 1c       	adc	r9, r1
    42be:	69 81       	ldd	r22, Y+1	; 0x01
    42c0:	7a 81       	ldd	r23, Y+2	; 0x02
    42c2:	c4 01       	movw	r24, r8
    42c4:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    42c8:	18 2f       	mov	r17, r24
    42ca:	6d 81       	ldd	r22, Y+5	; 0x05
    42cc:	7e 81       	ldd	r23, Y+6	; 0x06
    42ce:	c4 01       	movw	r24, r8
    42d0:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    42d4:	48 2f       	mov	r20, r24
    42d6:	55 27       	eor	r21, r21
    42d8:	47 fd       	sbrc	r20, 7
    42da:	50 95       	com	r21
    42dc:	41 0f       	add	r20, r17
    42de:	51 1d       	adc	r21, r1
    42e0:	17 fd       	sbrc	r17, 7
    42e2:	5a 95       	dec	r21
    42e4:	b2 01       	movw	r22, r4
    42e6:	c4 01       	movw	r24, r8
    42e8:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    42ec:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x1C: /*ADD RK (add reg const)*/
			sram.write(op1,sram.read(op2)+op3);
    42f0:	f6 e0       	ldi	r31, 0x06	; 6
    42f2:	8f 0e       	add	r8, r31
    42f4:	91 1c       	adc	r9, r1
    42f6:	69 81       	ldd	r22, Y+1	; 0x01
    42f8:	7a 81       	ldd	r23, Y+2	; 0x02
    42fa:	c4 01       	movw	r24, r8
    42fc:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4300:	48 2f       	mov	r20, r24
    4302:	55 27       	eor	r21, r21
    4304:	47 fd       	sbrc	r20, 7
    4306:	50 95       	com	r21
    4308:	2d 81       	ldd	r18, Y+5	; 0x05
    430a:	3e 81       	ldd	r19, Y+6	; 0x06
    430c:	42 0f       	add	r20, r18
    430e:	53 1f       	adc	r21, r19
    4310:	b2 01       	movw	r22, r4
    4312:	c4 01       	movw	r24, r8
    4314:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4318:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x1D: /*SUB*/
			sram.write(op1,sram.read(op2)-sram.read(op3));
    431c:	36 e0       	ldi	r19, 0x06	; 6
    431e:	83 0e       	add	r8, r19
    4320:	91 1c       	adc	r9, r1
    4322:	69 81       	ldd	r22, Y+1	; 0x01
    4324:	7a 81       	ldd	r23, Y+2	; 0x02
    4326:	c4 01       	movw	r24, r8
    4328:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    432c:	18 2f       	mov	r17, r24
    432e:	6d 81       	ldd	r22, Y+5	; 0x05
    4330:	7e 81       	ldd	r23, Y+6	; 0x06
    4332:	c4 01       	movw	r24, r8
    4334:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4338:	41 2f       	mov	r20, r17
    433a:	55 27       	eor	r21, r21
    433c:	47 fd       	sbrc	r20, 7
    433e:	50 95       	com	r21
    4340:	48 1b       	sub	r20, r24
    4342:	51 09       	sbc	r21, r1
    4344:	87 fd       	sbrc	r24, 7
    4346:	53 95       	inc	r21
    4348:	b2 01       	movw	r22, r4
    434a:	c4 01       	movw	r24, r8
    434c:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4350:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x1E: /*SUB RK (sub reg const)*/
			sram.write(op1,sram.read(op2)-op3);
    4354:	86 e0       	ldi	r24, 0x06	; 6
    4356:	88 0e       	add	r8, r24
    4358:	91 1c       	adc	r9, r1
    435a:	69 81       	ldd	r22, Y+1	; 0x01
    435c:	7a 81       	ldd	r23, Y+2	; 0x02
    435e:	c4 01       	movw	r24, r8
    4360:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4364:	48 2f       	mov	r20, r24
    4366:	55 27       	eor	r21, r21
    4368:	47 fd       	sbrc	r20, 7
    436a:	50 95       	com	r21
    436c:	ad 81       	ldd	r26, Y+5	; 0x05
    436e:	be 81       	ldd	r27, Y+6	; 0x06
    4370:	4a 1b       	sub	r20, r26
    4372:	5b 0b       	sbc	r21, r27
    4374:	b2 01       	movw	r22, r4
    4376:	c4 01       	movw	r24, r8
    4378:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    437c:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x1F: /*SUB KR (sub const reg)*/
			sram.write(op1,op2-sram.read(op3));
    4380:	b6 e0       	ldi	r27, 0x06	; 6
    4382:	8b 0e       	add	r8, r27
    4384:	91 1c       	adc	r9, r1
    4386:	6d 81       	ldd	r22, Y+5	; 0x05
    4388:	7e 81       	ldd	r23, Y+6	; 0x06
    438a:	c4 01       	movw	r24, r8
    438c:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4390:	99 27       	eor	r25, r25
    4392:	87 fd       	sbrc	r24, 7
    4394:	90 95       	com	r25
    4396:	49 81       	ldd	r20, Y+1	; 0x01
    4398:	5a 81       	ldd	r21, Y+2	; 0x02
    439a:	48 1b       	sub	r20, r24
    439c:	59 0b       	sbc	r21, r25
    439e:	b2 01       	movw	r22, r4
    43a0:	c4 01       	movw	r24, r8
    43a2:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    43a6:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x20: /*MUL*/
			sram.write(op1,sram.read(op2)*sram.read(op3));
    43aa:	e6 e0       	ldi	r30, 0x06	; 6
    43ac:	8e 0e       	add	r8, r30
    43ae:	91 1c       	adc	r9, r1
    43b0:	69 81       	ldd	r22, Y+1	; 0x01
    43b2:	7a 81       	ldd	r23, Y+2	; 0x02
    43b4:	c4 01       	movw	r24, r8
    43b6:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    43ba:	18 2f       	mov	r17, r24
    43bc:	6d 81       	ldd	r22, Y+5	; 0x05
    43be:	7e 81       	ldd	r23, Y+6	; 0x06
    43c0:	c4 01       	movw	r24, r8
    43c2:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    43c6:	18 02       	muls	r17, r24
    43c8:	a0 01       	movw	r20, r0
    43ca:	11 24       	eor	r1, r1
    43cc:	b2 01       	movw	r22, r4
    43ce:	c4 01       	movw	r24, r8
    43d0:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    43d4:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x21: /*MUL RK (mul reg const)*/
			sram.write(op1,sram.read(op2)*op3);
    43d8:	f6 e0       	ldi	r31, 0x06	; 6
    43da:	8f 0e       	add	r8, r31
    43dc:	91 1c       	adc	r9, r1
    43de:	69 81       	ldd	r22, Y+1	; 0x01
    43e0:	7a 81       	ldd	r23, Y+2	; 0x02
    43e2:	c4 01       	movw	r24, r8
    43e4:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    43e8:	99 27       	eor	r25, r25
    43ea:	87 fd       	sbrc	r24, 7
    43ec:	90 95       	com	r25
    43ee:	2d 81       	ldd	r18, Y+5	; 0x05
    43f0:	3e 81       	ldd	r19, Y+6	; 0x06
    43f2:	82 9f       	mul	r24, r18
    43f4:	a0 01       	movw	r20, r0
    43f6:	83 9f       	mul	r24, r19
    43f8:	50 0d       	add	r21, r0
    43fa:	92 9f       	mul	r25, r18
    43fc:	50 0d       	add	r21, r0
    43fe:	11 24       	eor	r1, r1
    4400:	b2 01       	movw	r22, r4
    4402:	c4 01       	movw	r24, r8
    4404:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4408:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x22: /*DIV*/
			sram.write(op1,sram.read(op2)/sram.read(op3));
    440c:	36 e0       	ldi	r19, 0x06	; 6
    440e:	83 0e       	add	r8, r19
    4410:	91 1c       	adc	r9, r1
    4412:	69 81       	ldd	r22, Y+1	; 0x01
    4414:	7a 81       	ldd	r23, Y+2	; 0x02
    4416:	c4 01       	movw	r24, r8
    4418:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    441c:	18 2f       	mov	r17, r24
    441e:	6d 81       	ldd	r22, Y+5	; 0x05
    4420:	7e 81       	ldd	r23, Y+6	; 0x06
    4422:	c4 01       	movw	r24, r8
    4424:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4428:	68 2f       	mov	r22, r24
    442a:	81 2f       	mov	r24, r17
    442c:	99 27       	eor	r25, r25
    442e:	87 fd       	sbrc	r24, 7
    4430:	90 95       	com	r25
    4432:	77 27       	eor	r23, r23
    4434:	67 fd       	sbrc	r22, 7
    4436:	70 95       	com	r23
    4438:	0e 94 f2 33 	call	0x67e4	; 0x67e4 <__divmodhi4>
    443c:	ab 01       	movw	r20, r22
    443e:	b2 01       	movw	r22, r4
    4440:	c4 01       	movw	r24, r8
    4442:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4446:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x23: /*DIV RK (div reg const)*/
			sram.write(op1,sram.read(op2)/op3);
    444a:	86 e0       	ldi	r24, 0x06	; 6
    444c:	88 0e       	add	r8, r24
    444e:	91 1c       	adc	r9, r1
    4450:	69 81       	ldd	r22, Y+1	; 0x01
    4452:	7a 81       	ldd	r23, Y+2	; 0x02
    4454:	c4 01       	movw	r24, r8
    4456:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    445a:	68 2f       	mov	r22, r24
    445c:	77 27       	eor	r23, r23
    445e:	67 fd       	sbrc	r22, 7
    4460:	70 95       	com	r23
    4462:	87 2f       	mov	r24, r23
    4464:	97 2f       	mov	r25, r23
    4466:	2d 81       	ldd	r18, Y+5	; 0x05
    4468:	3e 81       	ldd	r19, Y+6	; 0x06
    446a:	4f 81       	ldd	r20, Y+7	; 0x07
    446c:	58 85       	ldd	r21, Y+8	; 0x08
    446e:	0e 94 06 34 	call	0x680c	; 0x680c <__divmodsi4>
    4472:	a9 01       	movw	r20, r18
    4474:	b2 01       	movw	r22, r4
    4476:	c4 01       	movw	r24, r8
    4478:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    447c:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x24: /*DIV KR (div const reg)*/
			sram.write(op1,op2/sram.read(op3));
    4480:	96 e0       	ldi	r25, 0x06	; 6
    4482:	89 0e       	add	r8, r25
    4484:	91 1c       	adc	r9, r1
    4486:	6d 81       	ldd	r22, Y+5	; 0x05
    4488:	7e 81       	ldd	r23, Y+6	; 0x06
    448a:	c4 01       	movw	r24, r8
    448c:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4490:	28 2f       	mov	r18, r24
    4492:	33 27       	eor	r19, r19
    4494:	27 fd       	sbrc	r18, 7
    4496:	30 95       	com	r19
    4498:	43 2f       	mov	r20, r19
    449a:	53 2f       	mov	r21, r19
    449c:	69 81       	ldd	r22, Y+1	; 0x01
    449e:	7a 81       	ldd	r23, Y+2	; 0x02
    44a0:	8b 81       	ldd	r24, Y+3	; 0x03
    44a2:	9c 81       	ldd	r25, Y+4	; 0x04
    44a4:	0e 94 06 34 	call	0x680c	; 0x680c <__divmodsi4>
    44a8:	a9 01       	movw	r20, r18
    44aa:	b2 01       	movw	r22, r4
    44ac:	c4 01       	movw	r24, r8
    44ae:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    44b2:	f0 c7       	rjmp	.+4064   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x25: /*AND*/
			sram.write(op1,sram.read(op2)&sram.read(op3));
    44b4:	a6 e0       	ldi	r26, 0x06	; 6
    44b6:	8a 0e       	add	r8, r26
    44b8:	91 1c       	adc	r9, r1
    44ba:	69 81       	ldd	r22, Y+1	; 0x01
    44bc:	7a 81       	ldd	r23, Y+2	; 0x02
    44be:	c4 01       	movw	r24, r8
    44c0:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    44c4:	18 2f       	mov	r17, r24
    44c6:	6d 81       	ldd	r22, Y+5	; 0x05
    44c8:	7e 81       	ldd	r23, Y+6	; 0x06
    44ca:	c4 01       	movw	r24, r8
    44cc:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    44d0:	81 23       	and	r24, r17
    44d2:	48 2f       	mov	r20, r24
    44d4:	55 27       	eor	r21, r21
    44d6:	47 fd       	sbrc	r20, 7
    44d8:	50 95       	com	r21
    44da:	b2 01       	movw	r22, r4
    44dc:	c4 01       	movw	r24, r8
    44de:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    44e2:	d8 c7       	rjmp	.+4016   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x26: /*AND RK (and reg const)*/
			sram.write(op1,sram.read(op2)&op3);
    44e4:	b6 e0       	ldi	r27, 0x06	; 6
    44e6:	8b 0e       	add	r8, r27
    44e8:	91 1c       	adc	r9, r1
    44ea:	69 81       	ldd	r22, Y+1	; 0x01
    44ec:	7a 81       	ldd	r23, Y+2	; 0x02
    44ee:	c4 01       	movw	r24, r8
    44f0:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    44f4:	48 2f       	mov	r20, r24
    44f6:	55 27       	eor	r21, r21
    44f8:	47 fd       	sbrc	r20, 7
    44fa:	50 95       	com	r21
    44fc:	ed 81       	ldd	r30, Y+5	; 0x05
    44fe:	fe 81       	ldd	r31, Y+6	; 0x06
    4500:	4e 23       	and	r20, r30
    4502:	5f 23       	and	r21, r31
    4504:	b2 01       	movw	r22, r4
    4506:	c4 01       	movw	r24, r8
    4508:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    450c:	c3 c7       	rjmp	.+3974   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x27: /*AND KR (and const reg)*/
			sram.write(op1,op2&sram.read(op3));
    450e:	f6 e0       	ldi	r31, 0x06	; 6
    4510:	8f 0e       	add	r8, r31
    4512:	91 1c       	adc	r9, r1
    4514:	6d 81       	ldd	r22, Y+5	; 0x05
    4516:	7e 81       	ldd	r23, Y+6	; 0x06
    4518:	c4 01       	movw	r24, r8
    451a:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    451e:	48 2f       	mov	r20, r24
    4520:	55 27       	eor	r21, r21
    4522:	47 fd       	sbrc	r20, 7
    4524:	50 95       	com	r21
    4526:	29 81       	ldd	r18, Y+1	; 0x01
    4528:	3a 81       	ldd	r19, Y+2	; 0x02
    452a:	42 23       	and	r20, r18
    452c:	53 23       	and	r21, r19
    452e:	b2 01       	movw	r22, r4
    4530:	c4 01       	movw	r24, r8
    4532:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4536:	ae c7       	rjmp	.+3932   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x28: /*OR*/
			sram.write(op1,sram.read(op2)|sram.read(op3));
    4538:	36 e0       	ldi	r19, 0x06	; 6
    453a:	83 0e       	add	r8, r19
    453c:	91 1c       	adc	r9, r1
    453e:	69 81       	ldd	r22, Y+1	; 0x01
    4540:	7a 81       	ldd	r23, Y+2	; 0x02
    4542:	c4 01       	movw	r24, r8
    4544:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4548:	18 2f       	mov	r17, r24
    454a:	6d 81       	ldd	r22, Y+5	; 0x05
    454c:	7e 81       	ldd	r23, Y+6	; 0x06
    454e:	c4 01       	movw	r24, r8
    4550:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4554:	81 2b       	or	r24, r17
    4556:	48 2f       	mov	r20, r24
    4558:	55 27       	eor	r21, r21
    455a:	47 fd       	sbrc	r20, 7
    455c:	50 95       	com	r21
    455e:	b2 01       	movw	r22, r4
    4560:	c4 01       	movw	r24, r8
    4562:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4566:	96 c7       	rjmp	.+3884   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x29: /*OR RK (or reg const)*/
			sram.write(op1,sram.read(op2)|op3);
    4568:	86 e0       	ldi	r24, 0x06	; 6
    456a:	88 0e       	add	r8, r24
    456c:	91 1c       	adc	r9, r1
    456e:	69 81       	ldd	r22, Y+1	; 0x01
    4570:	7a 81       	ldd	r23, Y+2	; 0x02
    4572:	c4 01       	movw	r24, r8
    4574:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4578:	48 2f       	mov	r20, r24
    457a:	55 27       	eor	r21, r21
    457c:	47 fd       	sbrc	r20, 7
    457e:	50 95       	com	r21
    4580:	ad 81       	ldd	r26, Y+5	; 0x05
    4582:	be 81       	ldd	r27, Y+6	; 0x06
    4584:	4a 2b       	or	r20, r26
    4586:	5b 2b       	or	r21, r27
    4588:	b2 01       	movw	r22, r4
    458a:	c4 01       	movw	r24, r8
    458c:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4590:	81 c7       	rjmp	.+3842   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x2A: /*OR KR (or const reg)*/
			sram.write(op1,op2|sram.read(op3));
    4592:	b6 e0       	ldi	r27, 0x06	; 6
    4594:	8b 0e       	add	r8, r27
    4596:	91 1c       	adc	r9, r1
    4598:	6d 81       	ldd	r22, Y+5	; 0x05
    459a:	7e 81       	ldd	r23, Y+6	; 0x06
    459c:	c4 01       	movw	r24, r8
    459e:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    45a2:	48 2f       	mov	r20, r24
    45a4:	55 27       	eor	r21, r21
    45a6:	47 fd       	sbrc	r20, 7
    45a8:	50 95       	com	r21
    45aa:	e9 81       	ldd	r30, Y+1	; 0x01
    45ac:	fa 81       	ldd	r31, Y+2	; 0x02
    45ae:	4e 2b       	or	r20, r30
    45b0:	5f 2b       	or	r21, r31
    45b2:	b2 01       	movw	r22, r4
    45b4:	c4 01       	movw	r24, r8
    45b6:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    45ba:	6c c7       	rjmp	.+3800   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x2B: /*NOR*/
			sram.write(op1,~(sram.read(op2)|sram.read(op3)));
    45bc:	f6 e0       	ldi	r31, 0x06	; 6
    45be:	8f 0e       	add	r8, r31
    45c0:	91 1c       	adc	r9, r1
    45c2:	69 81       	ldd	r22, Y+1	; 0x01
    45c4:	7a 81       	ldd	r23, Y+2	; 0x02
    45c6:	c4 01       	movw	r24, r8
    45c8:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    45cc:	18 2f       	mov	r17, r24
    45ce:	6d 81       	ldd	r22, Y+5	; 0x05
    45d0:	7e 81       	ldd	r23, Y+6	; 0x06
    45d2:	c4 01       	movw	r24, r8
    45d4:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    45d8:	81 2b       	or	r24, r17
    45da:	48 2f       	mov	r20, r24
    45dc:	55 27       	eor	r21, r21
    45de:	47 fd       	sbrc	r20, 7
    45e0:	50 95       	com	r21
    45e2:	40 95       	com	r20
    45e4:	50 95       	com	r21
    45e6:	b2 01       	movw	r22, r4
    45e8:	c4 01       	movw	r24, r8
    45ea:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    45ee:	52 c7       	rjmp	.+3748   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x2C: /*NOR RK (nor reg const)*/
			sram.write(op1,~(sram.read(op2)|op3));
    45f0:	26 e0       	ldi	r18, 0x06	; 6
    45f2:	82 0e       	add	r8, r18
    45f4:	91 1c       	adc	r9, r1
    45f6:	69 81       	ldd	r22, Y+1	; 0x01
    45f8:	7a 81       	ldd	r23, Y+2	; 0x02
    45fa:	c4 01       	movw	r24, r8
    45fc:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4600:	48 2f       	mov	r20, r24
    4602:	55 27       	eor	r21, r21
    4604:	47 fd       	sbrc	r20, 7
    4606:	50 95       	com	r21
    4608:	8d 81       	ldd	r24, Y+5	; 0x05
    460a:	9e 81       	ldd	r25, Y+6	; 0x06
    460c:	48 2b       	or	r20, r24
    460e:	59 2b       	or	r21, r25
    4610:	40 95       	com	r20
    4612:	50 95       	com	r21
    4614:	b2 01       	movw	r22, r4
    4616:	c4 01       	movw	r24, r8
    4618:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    461c:	3b c7       	rjmp	.+3702   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x2D: /*NOR KR (nor const reg)*/
			sram.write(op1,~(op2|sram.read(op3)));
    461e:	96 e0       	ldi	r25, 0x06	; 6
    4620:	89 0e       	add	r8, r25
    4622:	91 1c       	adc	r9, r1
    4624:	6d 81       	ldd	r22, Y+5	; 0x05
    4626:	7e 81       	ldd	r23, Y+6	; 0x06
    4628:	c4 01       	movw	r24, r8
    462a:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    462e:	48 2f       	mov	r20, r24
    4630:	55 27       	eor	r21, r21
    4632:	47 fd       	sbrc	r20, 7
    4634:	50 95       	com	r21
    4636:	a9 81       	ldd	r26, Y+1	; 0x01
    4638:	ba 81       	ldd	r27, Y+2	; 0x02
    463a:	4a 2b       	or	r20, r26
    463c:	5b 2b       	or	r21, r27
    463e:	40 95       	com	r20
    4640:	50 95       	com	r21
    4642:	b2 01       	movw	r22, r4
    4644:	c4 01       	movw	r24, r8
    4646:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    464a:	24 c7       	rjmp	.+3656   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x2E: /*XOR*/
			sram.write(op1,sram.read(op2)^sram.read(op3));
    464c:	b6 e0       	ldi	r27, 0x06	; 6
    464e:	8b 0e       	add	r8, r27
    4650:	91 1c       	adc	r9, r1
    4652:	69 81       	ldd	r22, Y+1	; 0x01
    4654:	7a 81       	ldd	r23, Y+2	; 0x02
    4656:	c4 01       	movw	r24, r8
    4658:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    465c:	18 2f       	mov	r17, r24
    465e:	6d 81       	ldd	r22, Y+5	; 0x05
    4660:	7e 81       	ldd	r23, Y+6	; 0x06
    4662:	c4 01       	movw	r24, r8
    4664:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4668:	81 27       	eor	r24, r17
    466a:	48 2f       	mov	r20, r24
    466c:	55 27       	eor	r21, r21
    466e:	47 fd       	sbrc	r20, 7
    4670:	50 95       	com	r21
    4672:	b2 01       	movw	r22, r4
    4674:	c4 01       	movw	r24, r8
    4676:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    467a:	0c c7       	rjmp	.+3608   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x2F: /*XOR RK (xor reg const)*/
			sram.write(op1,sram.read(op2)^op3);
    467c:	e6 e0       	ldi	r30, 0x06	; 6
    467e:	8e 0e       	add	r8, r30
    4680:	91 1c       	adc	r9, r1
    4682:	69 81       	ldd	r22, Y+1	; 0x01
    4684:	7a 81       	ldd	r23, Y+2	; 0x02
    4686:	c4 01       	movw	r24, r8
    4688:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    468c:	48 2f       	mov	r20, r24
    468e:	55 27       	eor	r21, r21
    4690:	47 fd       	sbrc	r20, 7
    4692:	50 95       	com	r21
    4694:	2d 81       	ldd	r18, Y+5	; 0x05
    4696:	3e 81       	ldd	r19, Y+6	; 0x06
    4698:	42 27       	eor	r20, r18
    469a:	53 27       	eor	r21, r19
    469c:	b2 01       	movw	r22, r4
    469e:	c4 01       	movw	r24, r8
    46a0:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    46a4:	f7 c6       	rjmp	.+3566   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x30: /*XOR KR (xor const reg)*/
			sram.write(op1,op2^sram.read(op3));
    46a6:	36 e0       	ldi	r19, 0x06	; 6
    46a8:	83 0e       	add	r8, r19
    46aa:	91 1c       	adc	r9, r1
    46ac:	6d 81       	ldd	r22, Y+5	; 0x05
    46ae:	7e 81       	ldd	r23, Y+6	; 0x06
    46b0:	c4 01       	movw	r24, r8
    46b2:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    46b6:	48 2f       	mov	r20, r24
    46b8:	55 27       	eor	r21, r21
    46ba:	47 fd       	sbrc	r20, 7
    46bc:	50 95       	com	r21
    46be:	89 81       	ldd	r24, Y+1	; 0x01
    46c0:	9a 81       	ldd	r25, Y+2	; 0x02
    46c2:	48 27       	eor	r20, r24
    46c4:	59 27       	eor	r21, r25
    46c6:	b2 01       	movw	r22, r4
    46c8:	c4 01       	movw	r24, r8
    46ca:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    46ce:	e2 c6       	rjmp	.+3524   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x31: /*NAN*/
			sram.write(op1,~(sram.read(op2)&sram.read(op3)));
    46d0:	96 e0       	ldi	r25, 0x06	; 6
    46d2:	89 0e       	add	r8, r25
    46d4:	91 1c       	adc	r9, r1
    46d6:	69 81       	ldd	r22, Y+1	; 0x01
    46d8:	7a 81       	ldd	r23, Y+2	; 0x02
    46da:	c4 01       	movw	r24, r8
    46dc:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    46e0:	18 2f       	mov	r17, r24
    46e2:	6d 81       	ldd	r22, Y+5	; 0x05
    46e4:	7e 81       	ldd	r23, Y+6	; 0x06
    46e6:	c4 01       	movw	r24, r8
    46e8:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    46ec:	81 23       	and	r24, r17
    46ee:	48 2f       	mov	r20, r24
    46f0:	55 27       	eor	r21, r21
    46f2:	47 fd       	sbrc	r20, 7
    46f4:	50 95       	com	r21
    46f6:	40 95       	com	r20
    46f8:	50 95       	com	r21
    46fa:	b2 01       	movw	r22, r4
    46fc:	c4 01       	movw	r24, r8
    46fe:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4702:	c8 c6       	rjmp	.+3472   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x32: /*NAN RK (nand reg const)*/
			sram.write(op1,~(sram.read(op2)&op3));
    4704:	a6 e0       	ldi	r26, 0x06	; 6
    4706:	8a 0e       	add	r8, r26
    4708:	91 1c       	adc	r9, r1
    470a:	69 81       	ldd	r22, Y+1	; 0x01
    470c:	7a 81       	ldd	r23, Y+2	; 0x02
    470e:	c4 01       	movw	r24, r8
    4710:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4714:	48 2f       	mov	r20, r24
    4716:	55 27       	eor	r21, r21
    4718:	47 fd       	sbrc	r20, 7
    471a:	50 95       	com	r21
    471c:	ed 81       	ldd	r30, Y+5	; 0x05
    471e:	fe 81       	ldd	r31, Y+6	; 0x06
    4720:	4e 23       	and	r20, r30
    4722:	5f 23       	and	r21, r31
    4724:	40 95       	com	r20
    4726:	50 95       	com	r21
    4728:	b2 01       	movw	r22, r4
    472a:	c4 01       	movw	r24, r8
    472c:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4730:	b1 c6       	rjmp	.+3426   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x33: /*NAN KR (nand const reg)*/
			sram.write(op1,~(op2&sram.read(op3)));
    4732:	f6 e0       	ldi	r31, 0x06	; 6
    4734:	8f 0e       	add	r8, r31
    4736:	91 1c       	adc	r9, r1
    4738:	6d 81       	ldd	r22, Y+5	; 0x05
    473a:	7e 81       	ldd	r23, Y+6	; 0x06
    473c:	c4 01       	movw	r24, r8
    473e:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4742:	48 2f       	mov	r20, r24
    4744:	55 27       	eor	r21, r21
    4746:	47 fd       	sbrc	r20, 7
    4748:	50 95       	com	r21
    474a:	29 81       	ldd	r18, Y+1	; 0x01
    474c:	3a 81       	ldd	r19, Y+2	; 0x02
    474e:	42 23       	and	r20, r18
    4750:	53 23       	and	r21, r19
    4752:	40 95       	com	r20
    4754:	50 95       	com	r21
    4756:	b2 01       	movw	r22, r4
    4758:	c4 01       	movw	r24, r8
    475a:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    475e:	9a c6       	rjmp	.+3380   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x34: /*NOT*/
			sram.write(op1,~sram.read(op2));
    4760:	36 e0       	ldi	r19, 0x06	; 6
    4762:	83 0e       	add	r8, r19
    4764:	91 1c       	adc	r9, r1
    4766:	69 81       	ldd	r22, Y+1	; 0x01
    4768:	7a 81       	ldd	r23, Y+2	; 0x02
    476a:	c4 01       	movw	r24, r8
    476c:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4770:	48 2f       	mov	r20, r24
    4772:	55 27       	eor	r21, r21
    4774:	47 fd       	sbrc	r20, 7
    4776:	50 95       	com	r21
    4778:	40 95       	com	r20
    477a:	50 95       	com	r21
    477c:	b2 01       	movw	r22, r4
    477e:	c4 01       	movw	r24, r8
    4780:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4784:	87 c6       	rjmp	.+3342   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x35: /*SHL*/
			sram.write(op1,sram.read(op2)<<sram.read(op3));
    4786:	86 e0       	ldi	r24, 0x06	; 6
    4788:	88 0e       	add	r8, r24
    478a:	91 1c       	adc	r9, r1
    478c:	69 81       	ldd	r22, Y+1	; 0x01
    478e:	7a 81       	ldd	r23, Y+2	; 0x02
    4790:	c4 01       	movw	r24, r8
    4792:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4796:	18 2f       	mov	r17, r24
    4798:	6d 81       	ldd	r22, Y+5	; 0x05
    479a:	7e 81       	ldd	r23, Y+6	; 0x06
    479c:	c4 01       	movw	r24, r8
    479e:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    47a2:	21 2f       	mov	r18, r17
    47a4:	33 27       	eor	r19, r19
    47a6:	27 fd       	sbrc	r18, 7
    47a8:	30 95       	com	r19
    47aa:	a9 01       	movw	r20, r18
    47ac:	02 c0       	rjmp	.+4      	; 0x47b2 <_ZN4QEPU7executeEilll+0x92e>
    47ae:	44 0f       	add	r20, r20
    47b0:	55 1f       	adc	r21, r21
    47b2:	8a 95       	dec	r24
    47b4:	e2 f7       	brpl	.-8      	; 0x47ae <_ZN4QEPU7executeEilll+0x92a>
    47b6:	b2 01       	movw	r22, r4
    47b8:	c4 01       	movw	r24, r8
    47ba:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    47be:	6a c6       	rjmp	.+3284   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x36: /*SHL RK (shl reg const)*/
			sram.write(op1,sram.read(op2)<<op3);
    47c0:	96 e0       	ldi	r25, 0x06	; 6
    47c2:	89 0e       	add	r8, r25
    47c4:	91 1c       	adc	r9, r1
    47c6:	69 81       	ldd	r22, Y+1	; 0x01
    47c8:	7a 81       	ldd	r23, Y+2	; 0x02
    47ca:	c4 01       	movw	r24, r8
    47cc:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    47d0:	48 2f       	mov	r20, r24
    47d2:	55 27       	eor	r21, r21
    47d4:	47 fd       	sbrc	r20, 7
    47d6:	50 95       	com	r21
    47d8:	0d 80       	ldd	r0, Y+5	; 0x05
    47da:	02 c0       	rjmp	.+4      	; 0x47e0 <_ZN4QEPU7executeEilll+0x95c>
    47dc:	44 0f       	add	r20, r20
    47de:	55 1f       	adc	r21, r21
    47e0:	0a 94       	dec	r0
    47e2:	e2 f7       	brpl	.-8      	; 0x47dc <_ZN4QEPU7executeEilll+0x958>
    47e4:	b2 01       	movw	r22, r4
    47e6:	c4 01       	movw	r24, r8
    47e8:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    47ec:	53 c6       	rjmp	.+3238   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x37: /*SHL KR (shl const reg)*/
			sram.write(op1,op2<<sram.read(op2));
    47ee:	a6 e0       	ldi	r26, 0x06	; 6
    47f0:	8a 0e       	add	r8, r26
    47f2:	91 1c       	adc	r9, r1
    47f4:	69 81       	ldd	r22, Y+1	; 0x01
    47f6:	7a 81       	ldd	r23, Y+2	; 0x02
    47f8:	c4 01       	movw	r24, r8
    47fa:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    47fe:	49 81       	ldd	r20, Y+1	; 0x01
    4800:	5a 81       	ldd	r21, Y+2	; 0x02
    4802:	6b 81       	ldd	r22, Y+3	; 0x03
    4804:	7c 81       	ldd	r23, Y+4	; 0x04
    4806:	04 c0       	rjmp	.+8      	; 0x4810 <_ZN4QEPU7executeEilll+0x98c>
    4808:	44 0f       	add	r20, r20
    480a:	55 1f       	adc	r21, r21
    480c:	66 1f       	adc	r22, r22
    480e:	77 1f       	adc	r23, r23
    4810:	8a 95       	dec	r24
    4812:	d2 f7       	brpl	.-12     	; 0x4808 <_ZN4QEPU7executeEilll+0x984>
    4814:	b2 01       	movw	r22, r4
    4816:	c4 01       	movw	r24, r8
    4818:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    481c:	3b c6       	rjmp	.+3190   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x38: /*SHR*/
			sram.write(op1,sram.read(op2)>>sram.read(op3));
    481e:	b6 e0       	ldi	r27, 0x06	; 6
    4820:	8b 0e       	add	r8, r27
    4822:	91 1c       	adc	r9, r1
    4824:	69 81       	ldd	r22, Y+1	; 0x01
    4826:	7a 81       	ldd	r23, Y+2	; 0x02
    4828:	c4 01       	movw	r24, r8
    482a:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    482e:	18 2f       	mov	r17, r24
    4830:	6d 81       	ldd	r22, Y+5	; 0x05
    4832:	7e 81       	ldd	r23, Y+6	; 0x06
    4834:	c4 01       	movw	r24, r8
    4836:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    483a:	21 2f       	mov	r18, r17
    483c:	33 27       	eor	r19, r19
    483e:	27 fd       	sbrc	r18, 7
    4840:	30 95       	com	r19
    4842:	a9 01       	movw	r20, r18
    4844:	02 c0       	rjmp	.+4      	; 0x484a <_ZN4QEPU7executeEilll+0x9c6>
    4846:	55 95       	asr	r21
    4848:	47 95       	ror	r20
    484a:	8a 95       	dec	r24
    484c:	e2 f7       	brpl	.-8      	; 0x4846 <_ZN4QEPU7executeEilll+0x9c2>
    484e:	b2 01       	movw	r22, r4
    4850:	c4 01       	movw	r24, r8
    4852:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4856:	1e c6       	rjmp	.+3132   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x39: /*SHR RK (shr reg const)*/
			sram.write(op1,sram.read(op2)>>op3);
    4858:	e6 e0       	ldi	r30, 0x06	; 6
    485a:	8e 0e       	add	r8, r30
    485c:	91 1c       	adc	r9, r1
    485e:	69 81       	ldd	r22, Y+1	; 0x01
    4860:	7a 81       	ldd	r23, Y+2	; 0x02
    4862:	c4 01       	movw	r24, r8
    4864:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4868:	48 2f       	mov	r20, r24
    486a:	55 27       	eor	r21, r21
    486c:	47 fd       	sbrc	r20, 7
    486e:	50 95       	com	r21
    4870:	0d 80       	ldd	r0, Y+5	; 0x05
    4872:	02 c0       	rjmp	.+4      	; 0x4878 <_ZN4QEPU7executeEilll+0x9f4>
    4874:	55 95       	asr	r21
    4876:	47 95       	ror	r20
    4878:	0a 94       	dec	r0
    487a:	e2 f7       	brpl	.-8      	; 0x4874 <_ZN4QEPU7executeEilll+0x9f0>
    487c:	b2 01       	movw	r22, r4
    487e:	c4 01       	movw	r24, r8
    4880:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    4884:	07 c6       	rjmp	.+3086   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x3A: /*SHR KR (shr const reg)*/
			sram.write(op1,op2>>sram.read(op2));
    4886:	f6 e0       	ldi	r31, 0x06	; 6
    4888:	8f 0e       	add	r8, r31
    488a:	91 1c       	adc	r9, r1
    488c:	69 81       	ldd	r22, Y+1	; 0x01
    488e:	7a 81       	ldd	r23, Y+2	; 0x02
    4890:	c4 01       	movw	r24, r8
    4892:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    4896:	49 81       	ldd	r20, Y+1	; 0x01
    4898:	5a 81       	ldd	r21, Y+2	; 0x02
    489a:	6b 81       	ldd	r22, Y+3	; 0x03
    489c:	7c 81       	ldd	r23, Y+4	; 0x04
    489e:	04 c0       	rjmp	.+8      	; 0x48a8 <_ZN4QEPU7executeEilll+0xa24>
    48a0:	75 95       	asr	r23
    48a2:	67 95       	ror	r22
    48a4:	57 95       	ror	r21
    48a6:	47 95       	ror	r20
    48a8:	8a 95       	dec	r24
    48aa:	d2 f7       	brpl	.-12     	; 0x48a0 <_ZN4QEPU7executeEilll+0xa1c>
    48ac:	b2 01       	movw	r22, r4
    48ae:	c4 01       	movw	r24, r8
    48b0:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
			break;
    48b4:	ef c5       	rjmp	.+3038   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x3B: /*INT (interrupt)*/ //NEEDS TABLE SYSTEM
			interrupt_cpu(op1);
    48b6:	b9 01       	movw	r22, r18
    48b8:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <_ZN4QEPU13interrupt_cpuEi>
			break;
    48bc:	eb c5       	rjmp	.+3030   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x3C: /*DLY (delay)*/
			utils.delay(op1);
    48be:	b9 01       	movw	r22, r18
    48c0:	88 52       	subi	r24, 0x28	; 40
    48c2:	9f 4f       	sbci	r25, 0xFF	; 255
    48c4:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <_ZN5Utils5delayEi>
			break;
    48c8:	e5 c5       	rjmp	.+3018   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x3D: /*NOP (nop) - DOES NOTHING*/ 
			break;
		case 0x3E: /*HLT (halt)*/ 
			program_counter=program_counter_maximum;
    48ca:	fc 01       	movw	r30, r24
    48cc:	e7 52       	subi	r30, 0x27	; 39
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	dc 01       	movw	r26, r24
    48d2:	a5 52       	subi	r26, 0x25	; 37
    48d4:	bf 4f       	sbci	r27, 0xFF	; 255
    48d6:	8d 91       	ld	r24, X+
    48d8:	9c 91       	ld	r25, X
    48da:	91 83       	std	Z+1, r25	; 0x01
    48dc:	80 83       	st	Z, r24
			break;
    48de:	da c5       	rjmp	.+2996   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x3F: // X GATE
		{
			int * newthephi=gates.X(qmem.read(op1,THE,false),qmem.read(op1,PHI,false));
    48e0:	7c 01       	movw	r14, r24
    48e2:	2f ef       	ldi	r18, 0xFF	; 255
    48e4:	e2 1a       	sub	r14, r18
    48e6:	f2 0a       	sbc	r15, r18
    48e8:	20 e0       	ldi	r18, 0x00	; 0
    48ea:	41 e0       	ldi	r20, 0x01	; 1
    48ec:	50 e0       	ldi	r21, 0x00	; 0
    48ee:	b2 01       	movw	r22, r4
    48f0:	c7 01       	movw	r24, r14
    48f2:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    48f6:	8c 01       	movw	r16, r24
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	40 e0       	ldi	r20, 0x00	; 0
    48fc:	50 e0       	ldi	r21, 0x00	; 0
    48fe:	b2 01       	movw	r22, r4
    4900:	c7 01       	movw	r24, r14
    4902:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4906:	a8 01       	movw	r20, r16
    4908:	bc 01       	movw	r22, r24
    490a:	c4 01       	movw	r24, r8
    490c:	0d 96       	adiw	r24, 0x0d	; 13
    490e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN5Gates1XEii>
    4912:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]);qmem.write(op1,PHI,newthephi[1]);
    4914:	dc 01       	movw	r26, r24
    4916:	2d 91       	ld	r18, X+
    4918:	3c 91       	ld	r19, X
    491a:	40 e0       	ldi	r20, 0x00	; 0
    491c:	50 e0       	ldi	r21, 0x00	; 0
    491e:	b2 01       	movw	r22, r4
    4920:	c7 01       	movw	r24, r14
    4922:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4926:	f8 01       	movw	r30, r16
    4928:	22 81       	ldd	r18, Z+2	; 0x02
    492a:	33 81       	ldd	r19, Z+3	; 0x03
    492c:	41 e0       	ldi	r20, 0x01	; 1
    492e:	50 e0       	ldi	r21, 0x00	; 0
    4930:	b2 01       	movw	r22, r4
    4932:	c7 01       	movw	r24, r14
    4934:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4938:	c8 01       	movw	r24, r16
    493a:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    493e:	aa c5       	rjmp	.+2900   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x40: // Y GATE
		{
			int * newthephi=gates.Y(qmem.read(op1,THE,false),qmem.read(op1,PHI,false));
    4940:	7c 01       	movw	r14, r24
    4942:	ff ef       	ldi	r31, 0xFF	; 255
    4944:	ef 1a       	sub	r14, r31
    4946:	ff 0a       	sbc	r15, r31
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	41 e0       	ldi	r20, 0x01	; 1
    494c:	50 e0       	ldi	r21, 0x00	; 0
    494e:	b2 01       	movw	r22, r4
    4950:	c7 01       	movw	r24, r14
    4952:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4956:	8c 01       	movw	r16, r24
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	40 e0       	ldi	r20, 0x00	; 0
    495c:	50 e0       	ldi	r21, 0x00	; 0
    495e:	b2 01       	movw	r22, r4
    4960:	c7 01       	movw	r24, r14
    4962:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4966:	a8 01       	movw	r20, r16
    4968:	bc 01       	movw	r22, r24
    496a:	c4 01       	movw	r24, r8
    496c:	0d 96       	adiw	r24, 0x0d	; 13
    496e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN5Gates1YEii>
    4972:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]);qmem.write(op1,PHI,newthephi[1]);
    4974:	dc 01       	movw	r26, r24
    4976:	2d 91       	ld	r18, X+
    4978:	3c 91       	ld	r19, X
    497a:	40 e0       	ldi	r20, 0x00	; 0
    497c:	50 e0       	ldi	r21, 0x00	; 0
    497e:	b2 01       	movw	r22, r4
    4980:	c7 01       	movw	r24, r14
    4982:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4986:	f8 01       	movw	r30, r16
    4988:	22 81       	ldd	r18, Z+2	; 0x02
    498a:	33 81       	ldd	r19, Z+3	; 0x03
    498c:	41 e0       	ldi	r20, 0x01	; 1
    498e:	50 e0       	ldi	r21, 0x00	; 0
    4990:	b2 01       	movw	r22, r4
    4992:	c7 01       	movw	r24, r14
    4994:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4998:	c8 01       	movw	r24, r16
    499a:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    499e:	7a c5       	rjmp	.+2804   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x41: // Z GATE
		{
			int * newthephi=gates.Z(qmem.read(op1,THE,false),qmem.read(op1,PHI,false));
    49a0:	7c 01       	movw	r14, r24
    49a2:	ff ef       	ldi	r31, 0xFF	; 255
    49a4:	ef 1a       	sub	r14, r31
    49a6:	ff 0a       	sbc	r15, r31
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	41 e0       	ldi	r20, 0x01	; 1
    49ac:	50 e0       	ldi	r21, 0x00	; 0
    49ae:	b2 01       	movw	r22, r4
    49b0:	c7 01       	movw	r24, r14
    49b2:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    49b6:	8c 01       	movw	r16, r24
    49b8:	20 e0       	ldi	r18, 0x00	; 0
    49ba:	40 e0       	ldi	r20, 0x00	; 0
    49bc:	50 e0       	ldi	r21, 0x00	; 0
    49be:	b2 01       	movw	r22, r4
    49c0:	c7 01       	movw	r24, r14
    49c2:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    49c6:	a8 01       	movw	r20, r16
    49c8:	bc 01       	movw	r22, r24
    49ca:	c4 01       	movw	r24, r8
    49cc:	0d 96       	adiw	r24, 0x0d	; 13
    49ce:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_ZN5Gates1ZEii>
    49d2:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]);qmem.write(op1,PHI,newthephi[1]);
    49d4:	dc 01       	movw	r26, r24
    49d6:	2d 91       	ld	r18, X+
    49d8:	3c 91       	ld	r19, X
    49da:	40 e0       	ldi	r20, 0x00	; 0
    49dc:	50 e0       	ldi	r21, 0x00	; 0
    49de:	b2 01       	movw	r22, r4
    49e0:	c7 01       	movw	r24, r14
    49e2:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    49e6:	f8 01       	movw	r30, r16
    49e8:	22 81       	ldd	r18, Z+2	; 0x02
    49ea:	33 81       	ldd	r19, Z+3	; 0x03
    49ec:	41 e0       	ldi	r20, 0x01	; 1
    49ee:	50 e0       	ldi	r21, 0x00	; 0
    49f0:	b2 01       	movw	r22, r4
    49f2:	c7 01       	movw	r24, r14
    49f4:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    49f8:	c8 01       	movw	r24, r16
    49fa:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    49fe:	4a c5       	rjmp	.+2708   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x42: // H GATE
		{
			int * newthephi=gates.H(qmem.read(op1,THE,false),qmem.read(op1,PHI,false));
    4a00:	7c 01       	movw	r14, r24
    4a02:	ff ef       	ldi	r31, 0xFF	; 255
    4a04:	ef 1a       	sub	r14, r31
    4a06:	ff 0a       	sbc	r15, r31
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	41 e0       	ldi	r20, 0x01	; 1
    4a0c:	50 e0       	ldi	r21, 0x00	; 0
    4a0e:	b2 01       	movw	r22, r4
    4a10:	c7 01       	movw	r24, r14
    4a12:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4a16:	8c 01       	movw	r16, r24
    4a18:	20 e0       	ldi	r18, 0x00	; 0
    4a1a:	40 e0       	ldi	r20, 0x00	; 0
    4a1c:	50 e0       	ldi	r21, 0x00	; 0
    4a1e:	b2 01       	movw	r22, r4
    4a20:	c7 01       	movw	r24, r14
    4a22:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4a26:	a8 01       	movw	r20, r16
    4a28:	bc 01       	movw	r22, r24
    4a2a:	c4 01       	movw	r24, r8
    4a2c:	0d 96       	adiw	r24, 0x0d	; 13
    4a2e:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN5Gates1HEii>
    4a32:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]);qmem.write(op1,PHI,newthephi[1]);
    4a34:	dc 01       	movw	r26, r24
    4a36:	2d 91       	ld	r18, X+
    4a38:	3c 91       	ld	r19, X
    4a3a:	40 e0       	ldi	r20, 0x00	; 0
    4a3c:	50 e0       	ldi	r21, 0x00	; 0
    4a3e:	b2 01       	movw	r22, r4
    4a40:	c7 01       	movw	r24, r14
    4a42:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4a46:	f8 01       	movw	r30, r16
    4a48:	22 81       	ldd	r18, Z+2	; 0x02
    4a4a:	33 81       	ldd	r19, Z+3	; 0x03
    4a4c:	41 e0       	ldi	r20, 0x01	; 1
    4a4e:	50 e0       	ldi	r21, 0x00	; 0
    4a50:	b2 01       	movw	r22, r4
    4a52:	c7 01       	movw	r24, r14
    4a54:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4a58:	c8 01       	movw	r24, r16
    4a5a:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4a5e:	1a c5       	rjmp	.+2612   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x43: // S GATE
		{
			int * newthephi=gates.S(qmem.read(op1,THE,false),qmem.read(op1,PHI,false));
    4a60:	7c 01       	movw	r14, r24
    4a62:	ff ef       	ldi	r31, 0xFF	; 255
    4a64:	ef 1a       	sub	r14, r31
    4a66:	ff 0a       	sbc	r15, r31
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	41 e0       	ldi	r20, 0x01	; 1
    4a6c:	50 e0       	ldi	r21, 0x00	; 0
    4a6e:	b2 01       	movw	r22, r4
    4a70:	c7 01       	movw	r24, r14
    4a72:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4a76:	8c 01       	movw	r16, r24
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	40 e0       	ldi	r20, 0x00	; 0
    4a7c:	50 e0       	ldi	r21, 0x00	; 0
    4a7e:	b2 01       	movw	r22, r4
    4a80:	c7 01       	movw	r24, r14
    4a82:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4a86:	a8 01       	movw	r20, r16
    4a88:	bc 01       	movw	r22, r24
    4a8a:	c4 01       	movw	r24, r8
    4a8c:	0d 96       	adiw	r24, 0x0d	; 13
    4a8e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN5Gates1SEii>
    4a92:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]);qmem.write(op1,PHI,newthephi[1]);
    4a94:	dc 01       	movw	r26, r24
    4a96:	2d 91       	ld	r18, X+
    4a98:	3c 91       	ld	r19, X
    4a9a:	40 e0       	ldi	r20, 0x00	; 0
    4a9c:	50 e0       	ldi	r21, 0x00	; 0
    4a9e:	b2 01       	movw	r22, r4
    4aa0:	c7 01       	movw	r24, r14
    4aa2:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4aa6:	f8 01       	movw	r30, r16
    4aa8:	22 81       	ldd	r18, Z+2	; 0x02
    4aaa:	33 81       	ldd	r19, Z+3	; 0x03
    4aac:	41 e0       	ldi	r20, 0x01	; 1
    4aae:	50 e0       	ldi	r21, 0x00	; 0
    4ab0:	b2 01       	movw	r22, r4
    4ab2:	c7 01       	movw	r24, r14
    4ab4:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4ab8:	c8 01       	movw	r24, r16
    4aba:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4abe:	ea c4       	rjmp	.+2516   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x44: // T GATE
		{
			int * newthephi=gates.T(qmem.read(op1,THE,false),qmem.read(op1,PHI,false));
    4ac0:	7c 01       	movw	r14, r24
    4ac2:	ff ef       	ldi	r31, 0xFF	; 255
    4ac4:	ef 1a       	sub	r14, r31
    4ac6:	ff 0a       	sbc	r15, r31
    4ac8:	20 e0       	ldi	r18, 0x00	; 0
    4aca:	41 e0       	ldi	r20, 0x01	; 1
    4acc:	50 e0       	ldi	r21, 0x00	; 0
    4ace:	b2 01       	movw	r22, r4
    4ad0:	c7 01       	movw	r24, r14
    4ad2:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4ad6:	8c 01       	movw	r16, r24
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	40 e0       	ldi	r20, 0x00	; 0
    4adc:	50 e0       	ldi	r21, 0x00	; 0
    4ade:	b2 01       	movw	r22, r4
    4ae0:	c7 01       	movw	r24, r14
    4ae2:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4ae6:	a8 01       	movw	r20, r16
    4ae8:	bc 01       	movw	r22, r24
    4aea:	c4 01       	movw	r24, r8
    4aec:	0d 96       	adiw	r24, 0x0d	; 13
    4aee:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN5Gates1TEii>
    4af2:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]);qmem.write(op1,PHI,newthephi[1]);
    4af4:	dc 01       	movw	r26, r24
    4af6:	2d 91       	ld	r18, X+
    4af8:	3c 91       	ld	r19, X
    4afa:	40 e0       	ldi	r20, 0x00	; 0
    4afc:	50 e0       	ldi	r21, 0x00	; 0
    4afe:	b2 01       	movw	r22, r4
    4b00:	c7 01       	movw	r24, r14
    4b02:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4b06:	f8 01       	movw	r30, r16
    4b08:	22 81       	ldd	r18, Z+2	; 0x02
    4b0a:	33 81       	ldd	r19, Z+3	; 0x03
    4b0c:	41 e0       	ldi	r20, 0x01	; 1
    4b0e:	50 e0       	ldi	r21, 0x00	; 0
    4b10:	b2 01       	movw	r22, r4
    4b12:	c7 01       	movw	r24, r14
    4b14:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4b18:	c8 01       	movw	r24, r16
    4b1a:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4b1e:	ba c4       	rjmp	.+2420   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x45: // ROTATE X GATE
		{
			int * newthephi=gates.ROX(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),op2);
    4b20:	7c 01       	movw	r14, r24
    4b22:	ff ef       	ldi	r31, 0xFF	; 255
    4b24:	ef 1a       	sub	r14, r31
    4b26:	ff 0a       	sbc	r15, r31
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	41 e0       	ldi	r20, 0x01	; 1
    4b2c:	50 e0       	ldi	r21, 0x00	; 0
    4b2e:	b2 01       	movw	r22, r4
    4b30:	c7 01       	movw	r24, r14
    4b32:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4b36:	8c 01       	movw	r16, r24
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	40 e0       	ldi	r20, 0x00	; 0
    4b3c:	50 e0       	ldi	r21, 0x00	; 0
    4b3e:	b2 01       	movw	r22, r4
    4b40:	c7 01       	movw	r24, r14
    4b42:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4b46:	29 81       	ldd	r18, Y+1	; 0x01
    4b48:	3a 81       	ldd	r19, Y+2	; 0x02
    4b4a:	a8 01       	movw	r20, r16
    4b4c:	bc 01       	movw	r22, r24
    4b4e:	c4 01       	movw	r24, r8
    4b50:	0d 96       	adiw	r24, 0x0d	; 13
    4b52:	0e 94 90 12 	call	0x2520	; 0x2520 <_ZN5Gates3ROXEiii>
    4b56:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    4b58:	dc 01       	movw	r26, r24
    4b5a:	2d 91       	ld	r18, X+
    4b5c:	3c 91       	ld	r19, X
    4b5e:	40 e0       	ldi	r20, 0x00	; 0
    4b60:	50 e0       	ldi	r21, 0x00	; 0
    4b62:	b2 01       	movw	r22, r4
    4b64:	c7 01       	movw	r24, r14
    4b66:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4b6a:	f8 01       	movw	r30, r16
    4b6c:	22 81       	ldd	r18, Z+2	; 0x02
    4b6e:	33 81       	ldd	r19, Z+3	; 0x03
    4b70:	41 e0       	ldi	r20, 0x01	; 1
    4b72:	50 e0       	ldi	r21, 0x00	; 0
    4b74:	b2 01       	movw	r22, r4
    4b76:	c7 01       	movw	r24, r14
    4b78:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4b7c:	c8 01       	movw	r24, r16
    4b7e:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4b82:	88 c4       	rjmp	.+2320   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x46: // ROTATE Y GATE
		{
			int * newthephi=gates.ROY(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),op2);
    4b84:	7c 01       	movw	r14, r24
    4b86:	ff ef       	ldi	r31, 0xFF	; 255
    4b88:	ef 1a       	sub	r14, r31
    4b8a:	ff 0a       	sbc	r15, r31
    4b8c:	20 e0       	ldi	r18, 0x00	; 0
    4b8e:	41 e0       	ldi	r20, 0x01	; 1
    4b90:	50 e0       	ldi	r21, 0x00	; 0
    4b92:	b2 01       	movw	r22, r4
    4b94:	c7 01       	movw	r24, r14
    4b96:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4b9a:	8c 01       	movw	r16, r24
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	40 e0       	ldi	r20, 0x00	; 0
    4ba0:	50 e0       	ldi	r21, 0x00	; 0
    4ba2:	b2 01       	movw	r22, r4
    4ba4:	c7 01       	movw	r24, r14
    4ba6:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4baa:	29 81       	ldd	r18, Y+1	; 0x01
    4bac:	3a 81       	ldd	r19, Y+2	; 0x02
    4bae:	a8 01       	movw	r20, r16
    4bb0:	bc 01       	movw	r22, r24
    4bb2:	c4 01       	movw	r24, r8
    4bb4:	0d 96       	adiw	r24, 0x0d	; 13
    4bb6:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN5Gates3ROYEiii>
    4bba:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	2d 91       	ld	r18, X+
    4bc0:	3c 91       	ld	r19, X
    4bc2:	40 e0       	ldi	r20, 0x00	; 0
    4bc4:	50 e0       	ldi	r21, 0x00	; 0
    4bc6:	b2 01       	movw	r22, r4
    4bc8:	c7 01       	movw	r24, r14
    4bca:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4bce:	f8 01       	movw	r30, r16
    4bd0:	22 81       	ldd	r18, Z+2	; 0x02
    4bd2:	33 81       	ldd	r19, Z+3	; 0x03
    4bd4:	41 e0       	ldi	r20, 0x01	; 1
    4bd6:	50 e0       	ldi	r21, 0x00	; 0
    4bd8:	b2 01       	movw	r22, r4
    4bda:	c7 01       	movw	r24, r14
    4bdc:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4be0:	c8 01       	movw	r24, r16
    4be2:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4be6:	56 c4       	rjmp	.+2220   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x47: // ROTATE Z GATE
		{
			int * newthephi=gates.ROZ(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),op2);
    4be8:	7c 01       	movw	r14, r24
    4bea:	ff ef       	ldi	r31, 0xFF	; 255
    4bec:	ef 1a       	sub	r14, r31
    4bee:	ff 0a       	sbc	r15, r31
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	41 e0       	ldi	r20, 0x01	; 1
    4bf4:	50 e0       	ldi	r21, 0x00	; 0
    4bf6:	b2 01       	movw	r22, r4
    4bf8:	c7 01       	movw	r24, r14
    4bfa:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4bfe:	8c 01       	movw	r16, r24
    4c00:	20 e0       	ldi	r18, 0x00	; 0
    4c02:	40 e0       	ldi	r20, 0x00	; 0
    4c04:	50 e0       	ldi	r21, 0x00	; 0
    4c06:	b2 01       	movw	r22, r4
    4c08:	c7 01       	movw	r24, r14
    4c0a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4c0e:	29 81       	ldd	r18, Y+1	; 0x01
    4c10:	3a 81       	ldd	r19, Y+2	; 0x02
    4c12:	a8 01       	movw	r20, r16
    4c14:	bc 01       	movw	r22, r24
    4c16:	c4 01       	movw	r24, r8
    4c18:	0d 96       	adiw	r24, 0x0d	; 13
    4c1a:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN5Gates3ROZEiii>
    4c1e:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    4c20:	dc 01       	movw	r26, r24
    4c22:	2d 91       	ld	r18, X+
    4c24:	3c 91       	ld	r19, X
    4c26:	40 e0       	ldi	r20, 0x00	; 0
    4c28:	50 e0       	ldi	r21, 0x00	; 0
    4c2a:	b2 01       	movw	r22, r4
    4c2c:	c7 01       	movw	r24, r14
    4c2e:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4c32:	f8 01       	movw	r30, r16
    4c34:	22 81       	ldd	r18, Z+2	; 0x02
    4c36:	33 81       	ldd	r19, Z+3	; 0x03
    4c38:	41 e0       	ldi	r20, 0x01	; 1
    4c3a:	50 e0       	ldi	r21, 0x00	; 0
    4c3c:	b2 01       	movw	r22, r4
    4c3e:	c7 01       	movw	r24, r14
    4c40:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4c44:	c8 01       	movw	r24, r16
    4c46:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4c4a:	24 c4       	rjmp	.+2120   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		//2 QUBIT GATES -
		case 0x48: // CNOT GATE
		{
			int * newthephi=gates.CNO(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),qmem.read(op2,THE,false),qmem.read(op2,PHI,false));
    4c4c:	5c 01       	movw	r10, r24
    4c4e:	ff ef       	ldi	r31, 0xFF	; 255
    4c50:	af 1a       	sub	r10, r31
    4c52:	bf 0a       	sbc	r11, r31
    4c54:	20 e0       	ldi	r18, 0x00	; 0
    4c56:	41 e0       	ldi	r20, 0x01	; 1
    4c58:	50 e0       	ldi	r21, 0x00	; 0
    4c5a:	69 81       	ldd	r22, Y+1	; 0x01
    4c5c:	7a 81       	ldd	r23, Y+2	; 0x02
    4c5e:	c5 01       	movw	r24, r10
    4c60:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4c64:	8c 01       	movw	r16, r24
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	40 e0       	ldi	r20, 0x00	; 0
    4c6a:	50 e0       	ldi	r21, 0x00	; 0
    4c6c:	69 81       	ldd	r22, Y+1	; 0x01
    4c6e:	7a 81       	ldd	r23, Y+2	; 0x02
    4c70:	c5 01       	movw	r24, r10
    4c72:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4c76:	7c 01       	movw	r14, r24
    4c78:	20 e0       	ldi	r18, 0x00	; 0
    4c7a:	41 e0       	ldi	r20, 0x01	; 1
    4c7c:	50 e0       	ldi	r21, 0x00	; 0
    4c7e:	b2 01       	movw	r22, r4
    4c80:	c5 01       	movw	r24, r10
    4c82:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4c86:	6c 01       	movw	r12, r24
    4c88:	20 e0       	ldi	r18, 0x00	; 0
    4c8a:	40 e0       	ldi	r20, 0x00	; 0
    4c8c:	50 e0       	ldi	r21, 0x00	; 0
    4c8e:	b2 01       	movw	r22, r4
    4c90:	c5 01       	movw	r24, r10
    4c92:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4c96:	97 01       	movw	r18, r14
    4c98:	a6 01       	movw	r20, r12
    4c9a:	bc 01       	movw	r22, r24
    4c9c:	c4 01       	movw	r24, r8
    4c9e:	0d 96       	adiw	r24, 0x0d	; 13
    4ca0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_ZN5Gates3CNOEiiii>
    4ca4:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	2d 91       	ld	r18, X+
    4caa:	3c 91       	ld	r19, X
    4cac:	40 e0       	ldi	r20, 0x00	; 0
    4cae:	50 e0       	ldi	r21, 0x00	; 0
    4cb0:	b2 01       	movw	r22, r4
    4cb2:	c5 01       	movw	r24, r10
    4cb4:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4cb8:	f8 01       	movw	r30, r16
    4cba:	22 81       	ldd	r18, Z+2	; 0x02
    4cbc:	33 81       	ldd	r19, Z+3	; 0x03
    4cbe:	41 e0       	ldi	r20, 0x01	; 1
    4cc0:	50 e0       	ldi	r21, 0x00	; 0
    4cc2:	b2 01       	movw	r22, r4
    4cc4:	c5 01       	movw	r24, r10
    4cc6:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op2,THE,newthephi[2]); qmem.write(op2,PHI,newthephi[3]);
    4cca:	d8 01       	movw	r26, r16
    4ccc:	14 96       	adiw	r26, 0x04	; 4
    4cce:	2d 91       	ld	r18, X+
    4cd0:	3c 91       	ld	r19, X
    4cd2:	15 97       	sbiw	r26, 0x05	; 5
    4cd4:	40 e0       	ldi	r20, 0x00	; 0
    4cd6:	50 e0       	ldi	r21, 0x00	; 0
    4cd8:	69 81       	ldd	r22, Y+1	; 0x01
    4cda:	7a 81       	ldd	r23, Y+2	; 0x02
    4cdc:	c5 01       	movw	r24, r10
    4cde:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4ce2:	f8 01       	movw	r30, r16
    4ce4:	26 81       	ldd	r18, Z+6	; 0x06
    4ce6:	37 81       	ldd	r19, Z+7	; 0x07
    4ce8:	41 e0       	ldi	r20, 0x01	; 1
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	69 81       	ldd	r22, Y+1	; 0x01
    4cee:	7a 81       	ldd	r23, Y+2	; 0x02
    4cf0:	c5 01       	movw	r24, r10
    4cf2:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4cf6:	c8 01       	movw	r24, r16
    4cf8:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4cfc:	cb c3       	rjmp	.+1942   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x49: // CSIGN GATE
		{
			int * newthephi=gates.CSI(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),qmem.read(op2,THE,false),qmem.read(op2,PHI,false));
    4cfe:	5c 01       	movw	r10, r24
    4d00:	ff ef       	ldi	r31, 0xFF	; 255
    4d02:	af 1a       	sub	r10, r31
    4d04:	bf 0a       	sbc	r11, r31
    4d06:	20 e0       	ldi	r18, 0x00	; 0
    4d08:	41 e0       	ldi	r20, 0x01	; 1
    4d0a:	50 e0       	ldi	r21, 0x00	; 0
    4d0c:	69 81       	ldd	r22, Y+1	; 0x01
    4d0e:	7a 81       	ldd	r23, Y+2	; 0x02
    4d10:	c5 01       	movw	r24, r10
    4d12:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4d16:	8c 01       	movw	r16, r24
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	40 e0       	ldi	r20, 0x00	; 0
    4d1c:	50 e0       	ldi	r21, 0x00	; 0
    4d1e:	69 81       	ldd	r22, Y+1	; 0x01
    4d20:	7a 81       	ldd	r23, Y+2	; 0x02
    4d22:	c5 01       	movw	r24, r10
    4d24:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4d28:	7c 01       	movw	r14, r24
    4d2a:	20 e0       	ldi	r18, 0x00	; 0
    4d2c:	41 e0       	ldi	r20, 0x01	; 1
    4d2e:	50 e0       	ldi	r21, 0x00	; 0
    4d30:	b2 01       	movw	r22, r4
    4d32:	c5 01       	movw	r24, r10
    4d34:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4d38:	6c 01       	movw	r12, r24
    4d3a:	20 e0       	ldi	r18, 0x00	; 0
    4d3c:	40 e0       	ldi	r20, 0x00	; 0
    4d3e:	50 e0       	ldi	r21, 0x00	; 0
    4d40:	b2 01       	movw	r22, r4
    4d42:	c5 01       	movw	r24, r10
    4d44:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4d48:	97 01       	movw	r18, r14
    4d4a:	a6 01       	movw	r20, r12
    4d4c:	bc 01       	movw	r22, r24
    4d4e:	c4 01       	movw	r24, r8
    4d50:	0d 96       	adiw	r24, 0x0d	; 13
    4d52:	0e 94 80 0c 	call	0x1900	; 0x1900 <_ZN5Gates3CSIEiiii>
    4d56:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    4d58:	dc 01       	movw	r26, r24
    4d5a:	2d 91       	ld	r18, X+
    4d5c:	3c 91       	ld	r19, X
    4d5e:	40 e0       	ldi	r20, 0x00	; 0
    4d60:	50 e0       	ldi	r21, 0x00	; 0
    4d62:	b2 01       	movw	r22, r4
    4d64:	c5 01       	movw	r24, r10
    4d66:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4d6a:	f8 01       	movw	r30, r16
    4d6c:	22 81       	ldd	r18, Z+2	; 0x02
    4d6e:	33 81       	ldd	r19, Z+3	; 0x03
    4d70:	41 e0       	ldi	r20, 0x01	; 1
    4d72:	50 e0       	ldi	r21, 0x00	; 0
    4d74:	b2 01       	movw	r22, r4
    4d76:	c5 01       	movw	r24, r10
    4d78:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op2,THE,newthephi[2]); qmem.write(op2,PHI,newthephi[3]);
    4d7c:	d8 01       	movw	r26, r16
    4d7e:	14 96       	adiw	r26, 0x04	; 4
    4d80:	2d 91       	ld	r18, X+
    4d82:	3c 91       	ld	r19, X
    4d84:	15 97       	sbiw	r26, 0x05	; 5
    4d86:	40 e0       	ldi	r20, 0x00	; 0
    4d88:	50 e0       	ldi	r21, 0x00	; 0
    4d8a:	69 81       	ldd	r22, Y+1	; 0x01
    4d8c:	7a 81       	ldd	r23, Y+2	; 0x02
    4d8e:	c5 01       	movw	r24, r10
    4d90:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4d94:	f8 01       	movw	r30, r16
    4d96:	26 81       	ldd	r18, Z+6	; 0x06
    4d98:	37 81       	ldd	r19, Z+7	; 0x07
    4d9a:	41 e0       	ldi	r20, 0x01	; 1
    4d9c:	50 e0       	ldi	r21, 0x00	; 0
    4d9e:	69 81       	ldd	r22, Y+1	; 0x01
    4da0:	7a 81       	ldd	r23, Y+2	; 0x02
    4da2:	c5 01       	movw	r24, r10
    4da4:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4da8:	c8 01       	movw	r24, r16
    4daa:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4dae:	72 c3       	rjmp	.+1764   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x4A: // SWAP GATE
		{
			int * newthephi=gates.SWA(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),qmem.read(op2,THE,false),qmem.read(op2,PHI,false));
    4db0:	5c 01       	movw	r10, r24
    4db2:	ff ef       	ldi	r31, 0xFF	; 255
    4db4:	af 1a       	sub	r10, r31
    4db6:	bf 0a       	sbc	r11, r31
    4db8:	20 e0       	ldi	r18, 0x00	; 0
    4dba:	41 e0       	ldi	r20, 0x01	; 1
    4dbc:	50 e0       	ldi	r21, 0x00	; 0
    4dbe:	69 81       	ldd	r22, Y+1	; 0x01
    4dc0:	7a 81       	ldd	r23, Y+2	; 0x02
    4dc2:	c5 01       	movw	r24, r10
    4dc4:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4dc8:	8c 01       	movw	r16, r24
    4dca:	20 e0       	ldi	r18, 0x00	; 0
    4dcc:	40 e0       	ldi	r20, 0x00	; 0
    4dce:	50 e0       	ldi	r21, 0x00	; 0
    4dd0:	69 81       	ldd	r22, Y+1	; 0x01
    4dd2:	7a 81       	ldd	r23, Y+2	; 0x02
    4dd4:	c5 01       	movw	r24, r10
    4dd6:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4dda:	7c 01       	movw	r14, r24
    4ddc:	20 e0       	ldi	r18, 0x00	; 0
    4dde:	41 e0       	ldi	r20, 0x01	; 1
    4de0:	50 e0       	ldi	r21, 0x00	; 0
    4de2:	b2 01       	movw	r22, r4
    4de4:	c5 01       	movw	r24, r10
    4de6:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4dea:	6c 01       	movw	r12, r24
    4dec:	20 e0       	ldi	r18, 0x00	; 0
    4dee:	40 e0       	ldi	r20, 0x00	; 0
    4df0:	50 e0       	ldi	r21, 0x00	; 0
    4df2:	b2 01       	movw	r22, r4
    4df4:	c5 01       	movw	r24, r10
    4df6:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4dfa:	97 01       	movw	r18, r14
    4dfc:	a6 01       	movw	r20, r12
    4dfe:	bc 01       	movw	r22, r24
    4e00:	c4 01       	movw	r24, r8
    4e02:	0d 96       	adiw	r24, 0x0d	; 13
    4e04:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <_ZN5Gates3SWAEiiii>
    4e08:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    4e0a:	dc 01       	movw	r26, r24
    4e0c:	2d 91       	ld	r18, X+
    4e0e:	3c 91       	ld	r19, X
    4e10:	40 e0       	ldi	r20, 0x00	; 0
    4e12:	50 e0       	ldi	r21, 0x00	; 0
    4e14:	b2 01       	movw	r22, r4
    4e16:	c5 01       	movw	r24, r10
    4e18:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4e1c:	f8 01       	movw	r30, r16
    4e1e:	22 81       	ldd	r18, Z+2	; 0x02
    4e20:	33 81       	ldd	r19, Z+3	; 0x03
    4e22:	41 e0       	ldi	r20, 0x01	; 1
    4e24:	50 e0       	ldi	r21, 0x00	; 0
    4e26:	b2 01       	movw	r22, r4
    4e28:	c5 01       	movw	r24, r10
    4e2a:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op2,THE,newthephi[2]); qmem.write(op2,PHI,newthephi[3]);
    4e2e:	d8 01       	movw	r26, r16
    4e30:	14 96       	adiw	r26, 0x04	; 4
    4e32:	2d 91       	ld	r18, X+
    4e34:	3c 91       	ld	r19, X
    4e36:	15 97       	sbiw	r26, 0x05	; 5
    4e38:	40 e0       	ldi	r20, 0x00	; 0
    4e3a:	50 e0       	ldi	r21, 0x00	; 0
    4e3c:	69 81       	ldd	r22, Y+1	; 0x01
    4e3e:	7a 81       	ldd	r23, Y+2	; 0x02
    4e40:	c5 01       	movw	r24, r10
    4e42:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4e46:	f8 01       	movw	r30, r16
    4e48:	26 81       	ldd	r18, Z+6	; 0x06
    4e4a:	37 81       	ldd	r19, Z+7	; 0x07
    4e4c:	41 e0       	ldi	r20, 0x01	; 1
    4e4e:	50 e0       	ldi	r21, 0x00	; 0
    4e50:	69 81       	ldd	r22, Y+1	; 0x01
    4e52:	7a 81       	ldd	r23, Y+2	; 0x02
    4e54:	c5 01       	movw	r24, r10
    4e56:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4e5a:	c8 01       	movw	r24, r16
    4e5c:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4e60:	19 c3       	rjmp	.+1586   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x4B: // INCREMENT GATE
		{
			int * newthephi=gates.INC(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),qmem.read(op2,THE,false),qmem.read(op2,PHI,false));
    4e62:	5c 01       	movw	r10, r24
    4e64:	ff ef       	ldi	r31, 0xFF	; 255
    4e66:	af 1a       	sub	r10, r31
    4e68:	bf 0a       	sbc	r11, r31
    4e6a:	20 e0       	ldi	r18, 0x00	; 0
    4e6c:	41 e0       	ldi	r20, 0x01	; 1
    4e6e:	50 e0       	ldi	r21, 0x00	; 0
    4e70:	69 81       	ldd	r22, Y+1	; 0x01
    4e72:	7a 81       	ldd	r23, Y+2	; 0x02
    4e74:	c5 01       	movw	r24, r10
    4e76:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4e7a:	8c 01       	movw	r16, r24
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	40 e0       	ldi	r20, 0x00	; 0
    4e80:	50 e0       	ldi	r21, 0x00	; 0
    4e82:	69 81       	ldd	r22, Y+1	; 0x01
    4e84:	7a 81       	ldd	r23, Y+2	; 0x02
    4e86:	c5 01       	movw	r24, r10
    4e88:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4e8c:	7c 01       	movw	r14, r24
    4e8e:	20 e0       	ldi	r18, 0x00	; 0
    4e90:	41 e0       	ldi	r20, 0x01	; 1
    4e92:	50 e0       	ldi	r21, 0x00	; 0
    4e94:	b2 01       	movw	r22, r4
    4e96:	c5 01       	movw	r24, r10
    4e98:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4e9c:	6c 01       	movw	r12, r24
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	40 e0       	ldi	r20, 0x00	; 0
    4ea2:	50 e0       	ldi	r21, 0x00	; 0
    4ea4:	b2 01       	movw	r22, r4
    4ea6:	c5 01       	movw	r24, r10
    4ea8:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4eac:	97 01       	movw	r18, r14
    4eae:	a6 01       	movw	r20, r12
    4eb0:	bc 01       	movw	r22, r24
    4eb2:	c4 01       	movw	r24, r8
    4eb4:	0d 96       	adiw	r24, 0x0d	; 13
    4eb6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN5Gates3INCEiiii>
    4eba:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    4ebc:	dc 01       	movw	r26, r24
    4ebe:	2d 91       	ld	r18, X+
    4ec0:	3c 91       	ld	r19, X
    4ec2:	40 e0       	ldi	r20, 0x00	; 0
    4ec4:	50 e0       	ldi	r21, 0x00	; 0
    4ec6:	b2 01       	movw	r22, r4
    4ec8:	c5 01       	movw	r24, r10
    4eca:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4ece:	f8 01       	movw	r30, r16
    4ed0:	22 81       	ldd	r18, Z+2	; 0x02
    4ed2:	33 81       	ldd	r19, Z+3	; 0x03
    4ed4:	41 e0       	ldi	r20, 0x01	; 1
    4ed6:	50 e0       	ldi	r21, 0x00	; 0
    4ed8:	b2 01       	movw	r22, r4
    4eda:	c5 01       	movw	r24, r10
    4edc:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op2,THE,newthephi[2]); qmem.write(op2,PHI,newthephi[3]);
    4ee0:	d8 01       	movw	r26, r16
    4ee2:	14 96       	adiw	r26, 0x04	; 4
    4ee4:	2d 91       	ld	r18, X+
    4ee6:	3c 91       	ld	r19, X
    4ee8:	15 97       	sbiw	r26, 0x05	; 5
    4eea:	40 e0       	ldi	r20, 0x00	; 0
    4eec:	50 e0       	ldi	r21, 0x00	; 0
    4eee:	69 81       	ldd	r22, Y+1	; 0x01
    4ef0:	7a 81       	ldd	r23, Y+2	; 0x02
    4ef2:	c5 01       	movw	r24, r10
    4ef4:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4ef8:	f8 01       	movw	r30, r16
    4efa:	26 81       	ldd	r18, Z+6	; 0x06
    4efc:	37 81       	ldd	r19, Z+7	; 0x07
    4efe:	41 e0       	ldi	r20, 0x01	; 1
    4f00:	50 e0       	ldi	r21, 0x00	; 0
    4f02:	69 81       	ldd	r22, Y+1	; 0x01
    4f04:	7a 81       	ldd	r23, Y+2	; 0x02
    4f06:	c5 01       	movw	r24, r10
    4f08:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4f0c:	c8 01       	movw	r24, r16
    4f0e:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4f12:	c0 c2       	rjmp	.+1408   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x4C: // DECREMENT GATE
		{
			int * newthephi=gates.DEC(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),qmem.read(op2,THE,false),qmem.read(op2,PHI,false));
    4f14:	5c 01       	movw	r10, r24
    4f16:	ff ef       	ldi	r31, 0xFF	; 255
    4f18:	af 1a       	sub	r10, r31
    4f1a:	bf 0a       	sbc	r11, r31
    4f1c:	20 e0       	ldi	r18, 0x00	; 0
    4f1e:	41 e0       	ldi	r20, 0x01	; 1
    4f20:	50 e0       	ldi	r21, 0x00	; 0
    4f22:	69 81       	ldd	r22, Y+1	; 0x01
    4f24:	7a 81       	ldd	r23, Y+2	; 0x02
    4f26:	c5 01       	movw	r24, r10
    4f28:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4f2c:	8c 01       	movw	r16, r24
    4f2e:	20 e0       	ldi	r18, 0x00	; 0
    4f30:	40 e0       	ldi	r20, 0x00	; 0
    4f32:	50 e0       	ldi	r21, 0x00	; 0
    4f34:	69 81       	ldd	r22, Y+1	; 0x01
    4f36:	7a 81       	ldd	r23, Y+2	; 0x02
    4f38:	c5 01       	movw	r24, r10
    4f3a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4f3e:	7c 01       	movw	r14, r24
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	41 e0       	ldi	r20, 0x01	; 1
    4f44:	50 e0       	ldi	r21, 0x00	; 0
    4f46:	b2 01       	movw	r22, r4
    4f48:	c5 01       	movw	r24, r10
    4f4a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4f4e:	6c 01       	movw	r12, r24
    4f50:	20 e0       	ldi	r18, 0x00	; 0
    4f52:	40 e0       	ldi	r20, 0x00	; 0
    4f54:	50 e0       	ldi	r21, 0x00	; 0
    4f56:	b2 01       	movw	r22, r4
    4f58:	c5 01       	movw	r24, r10
    4f5a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4f5e:	97 01       	movw	r18, r14
    4f60:	a6 01       	movw	r20, r12
    4f62:	bc 01       	movw	r22, r24
    4f64:	c4 01       	movw	r24, r8
    4f66:	0d 96       	adiw	r24, 0x0d	; 13
    4f68:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN5Gates3DECEiiii>
    4f6c:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    4f6e:	dc 01       	movw	r26, r24
    4f70:	2d 91       	ld	r18, X+
    4f72:	3c 91       	ld	r19, X
    4f74:	40 e0       	ldi	r20, 0x00	; 0
    4f76:	50 e0       	ldi	r21, 0x00	; 0
    4f78:	b2 01       	movw	r22, r4
    4f7a:	c5 01       	movw	r24, r10
    4f7c:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4f80:	f8 01       	movw	r30, r16
    4f82:	22 81       	ldd	r18, Z+2	; 0x02
    4f84:	33 81       	ldd	r19, Z+3	; 0x03
    4f86:	41 e0       	ldi	r20, 0x01	; 1
    4f88:	50 e0       	ldi	r21, 0x00	; 0
    4f8a:	b2 01       	movw	r22, r4
    4f8c:	c5 01       	movw	r24, r10
    4f8e:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op2,THE,newthephi[2]); qmem.write(op2,PHI,newthephi[3]);
    4f92:	d8 01       	movw	r26, r16
    4f94:	14 96       	adiw	r26, 0x04	; 4
    4f96:	2d 91       	ld	r18, X+
    4f98:	3c 91       	ld	r19, X
    4f9a:	15 97       	sbiw	r26, 0x05	; 5
    4f9c:	40 e0       	ldi	r20, 0x00	; 0
    4f9e:	50 e0       	ldi	r21, 0x00	; 0
    4fa0:	69 81       	ldd	r22, Y+1	; 0x01
    4fa2:	7a 81       	ldd	r23, Y+2	; 0x02
    4fa4:	c5 01       	movw	r24, r10
    4fa6:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    4faa:	f8 01       	movw	r30, r16
    4fac:	26 81       	ldd	r18, Z+6	; 0x06
    4fae:	37 81       	ldd	r19, Z+7	; 0x07
    4fb0:	41 e0       	ldi	r20, 0x01	; 1
    4fb2:	50 e0       	ldi	r21, 0x00	; 0
    4fb4:	69 81       	ldd	r22, Y+1	; 0x01
    4fb6:	7a 81       	ldd	r23, Y+2	; 0x02
    4fb8:	c5 01       	movw	r24, r10
    4fba:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    4fbe:	c8 01       	movw	r24, r16
    4fc0:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    4fc4:	67 c2       	rjmp	.+1230   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x4D: // SWAGSQ GATE
		{
			int * newthephi=gates.SWQ(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),qmem.read(op2,THE,false),qmem.read(op2,PHI,false));
    4fc6:	5c 01       	movw	r10, r24
    4fc8:	ff ef       	ldi	r31, 0xFF	; 255
    4fca:	af 1a       	sub	r10, r31
    4fcc:	bf 0a       	sbc	r11, r31
    4fce:	20 e0       	ldi	r18, 0x00	; 0
    4fd0:	41 e0       	ldi	r20, 0x01	; 1
    4fd2:	50 e0       	ldi	r21, 0x00	; 0
    4fd4:	69 81       	ldd	r22, Y+1	; 0x01
    4fd6:	7a 81       	ldd	r23, Y+2	; 0x02
    4fd8:	c5 01       	movw	r24, r10
    4fda:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4fde:	8c 01       	movw	r16, r24
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	40 e0       	ldi	r20, 0x00	; 0
    4fe4:	50 e0       	ldi	r21, 0x00	; 0
    4fe6:	69 81       	ldd	r22, Y+1	; 0x01
    4fe8:	7a 81       	ldd	r23, Y+2	; 0x02
    4fea:	c5 01       	movw	r24, r10
    4fec:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    4ff0:	7c 01       	movw	r14, r24
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	41 e0       	ldi	r20, 0x01	; 1
    4ff6:	50 e0       	ldi	r21, 0x00	; 0
    4ff8:	b2 01       	movw	r22, r4
    4ffa:	c5 01       	movw	r24, r10
    4ffc:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    5000:	6c 01       	movw	r12, r24
    5002:	20 e0       	ldi	r18, 0x00	; 0
    5004:	40 e0       	ldi	r20, 0x00	; 0
    5006:	50 e0       	ldi	r21, 0x00	; 0
    5008:	b2 01       	movw	r22, r4
    500a:	c5 01       	movw	r24, r10
    500c:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    5010:	97 01       	movw	r18, r14
    5012:	a6 01       	movw	r20, r12
    5014:	bc 01       	movw	r22, r24
    5016:	c4 01       	movw	r24, r8
    5018:	0d 96       	adiw	r24, 0x0d	; 13
    501a:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN5Gates3SWQEiiii>
    501e:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    5020:	dc 01       	movw	r26, r24
    5022:	2d 91       	ld	r18, X+
    5024:	3c 91       	ld	r19, X
    5026:	40 e0       	ldi	r20, 0x00	; 0
    5028:	50 e0       	ldi	r21, 0x00	; 0
    502a:	b2 01       	movw	r22, r4
    502c:	c5 01       	movw	r24, r10
    502e:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    5032:	f8 01       	movw	r30, r16
    5034:	22 81       	ldd	r18, Z+2	; 0x02
    5036:	33 81       	ldd	r19, Z+3	; 0x03
    5038:	41 e0       	ldi	r20, 0x01	; 1
    503a:	50 e0       	ldi	r21, 0x00	; 0
    503c:	b2 01       	movw	r22, r4
    503e:	c5 01       	movw	r24, r10
    5040:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op2,THE,newthephi[2]); qmem.write(op2,PHI,newthephi[3]);
    5044:	d8 01       	movw	r26, r16
    5046:	14 96       	adiw	r26, 0x04	; 4
    5048:	2d 91       	ld	r18, X+
    504a:	3c 91       	ld	r19, X
    504c:	15 97       	sbiw	r26, 0x05	; 5
    504e:	40 e0       	ldi	r20, 0x00	; 0
    5050:	50 e0       	ldi	r21, 0x00	; 0
    5052:	69 81       	ldd	r22, Y+1	; 0x01
    5054:	7a 81       	ldd	r23, Y+2	; 0x02
    5056:	c5 01       	movw	r24, r10
    5058:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    505c:	f8 01       	movw	r30, r16
    505e:	26 81       	ldd	r18, Z+6	; 0x06
    5060:	37 81       	ldd	r19, Z+7	; 0x07
    5062:	41 e0       	ldi	r20, 0x01	; 1
    5064:	50 e0       	ldi	r21, 0x00	; 0
    5066:	69 81       	ldd	r22, Y+1	; 0x01
    5068:	7a 81       	ldd	r23, Y+2	; 0x02
    506a:	c5 01       	movw	r24, r10
    506c:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    5070:	c8 01       	movw	r24, r16
    5072:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    5076:	0e c2       	rjmp	.+1052   	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x4E: // SWAPI GATE
		{
			int * newthephi=gates.SWI(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),qmem.read(op2,THE,false),qmem.read(op2,PHI,false));
    5078:	5c 01       	movw	r10, r24
    507a:	ff ef       	ldi	r31, 0xFF	; 255
    507c:	af 1a       	sub	r10, r31
    507e:	bf 0a       	sbc	r11, r31
    5080:	20 e0       	ldi	r18, 0x00	; 0
    5082:	41 e0       	ldi	r20, 0x01	; 1
    5084:	50 e0       	ldi	r21, 0x00	; 0
    5086:	69 81       	ldd	r22, Y+1	; 0x01
    5088:	7a 81       	ldd	r23, Y+2	; 0x02
    508a:	c5 01       	movw	r24, r10
    508c:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    5090:	8c 01       	movw	r16, r24
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	40 e0       	ldi	r20, 0x00	; 0
    5096:	50 e0       	ldi	r21, 0x00	; 0
    5098:	69 81       	ldd	r22, Y+1	; 0x01
    509a:	7a 81       	ldd	r23, Y+2	; 0x02
    509c:	c5 01       	movw	r24, r10
    509e:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    50a2:	7c 01       	movw	r14, r24
    50a4:	20 e0       	ldi	r18, 0x00	; 0
    50a6:	41 e0       	ldi	r20, 0x01	; 1
    50a8:	50 e0       	ldi	r21, 0x00	; 0
    50aa:	b2 01       	movw	r22, r4
    50ac:	c5 01       	movw	r24, r10
    50ae:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    50b2:	6c 01       	movw	r12, r24
    50b4:	20 e0       	ldi	r18, 0x00	; 0
    50b6:	40 e0       	ldi	r20, 0x00	; 0
    50b8:	50 e0       	ldi	r21, 0x00	; 0
    50ba:	b2 01       	movw	r22, r4
    50bc:	c5 01       	movw	r24, r10
    50be:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    50c2:	97 01       	movw	r18, r14
    50c4:	a6 01       	movw	r20, r12
    50c6:	bc 01       	movw	r22, r24
    50c8:	c4 01       	movw	r24, r8
    50ca:	0d 96       	adiw	r24, 0x0d	; 13
    50cc:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN5Gates3SWIEiiii>
    50d0:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    50d2:	dc 01       	movw	r26, r24
    50d4:	2d 91       	ld	r18, X+
    50d6:	3c 91       	ld	r19, X
    50d8:	40 e0       	ldi	r20, 0x00	; 0
    50da:	50 e0       	ldi	r21, 0x00	; 0
    50dc:	b2 01       	movw	r22, r4
    50de:	c5 01       	movw	r24, r10
    50e0:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    50e4:	f8 01       	movw	r30, r16
    50e6:	22 81       	ldd	r18, Z+2	; 0x02
    50e8:	33 81       	ldd	r19, Z+3	; 0x03
    50ea:	41 e0       	ldi	r20, 0x01	; 1
    50ec:	50 e0       	ldi	r21, 0x00	; 0
    50ee:	b2 01       	movw	r22, r4
    50f0:	c5 01       	movw	r24, r10
    50f2:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op2,THE,newthephi[2]); qmem.write(op2,PHI,newthephi[3]);
    50f6:	d8 01       	movw	r26, r16
    50f8:	14 96       	adiw	r26, 0x04	; 4
    50fa:	2d 91       	ld	r18, X+
    50fc:	3c 91       	ld	r19, X
    50fe:	15 97       	sbiw	r26, 0x05	; 5
    5100:	40 e0       	ldi	r20, 0x00	; 0
    5102:	50 e0       	ldi	r21, 0x00	; 0
    5104:	69 81       	ldd	r22, Y+1	; 0x01
    5106:	7a 81       	ldd	r23, Y+2	; 0x02
    5108:	c5 01       	movw	r24, r10
    510a:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    510e:	f8 01       	movw	r30, r16
    5110:	26 81       	ldd	r18, Z+6	; 0x06
    5112:	37 81       	ldd	r19, Z+7	; 0x07
    5114:	41 e0       	ldi	r20, 0x01	; 1
    5116:	50 e0       	ldi	r21, 0x00	; 0
    5118:	69 81       	ldd	r22, Y+1	; 0x01
    511a:	7a 81       	ldd	r23, Y+2	; 0x02
    511c:	c5 01       	movw	r24, r10
    511e:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    5122:	c8 01       	movw	r24, r16
    5124:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    5128:	b5 c1       	rjmp	.+874    	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		//3 QUBIT GATES -
		case 0x4F: // CONTROL SWAP GATE
		{
			int * newthephi=gates.CSW(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),qmem.read(op2,THE,false),qmem.read(op2,PHI,false),qmem.read(op3,THE,false),qmem.read(op3,PHI,false));
    512a:	9c 01       	movw	r18, r24
    512c:	2f 5f       	subi	r18, 0xFF	; 255
    512e:	3f 4f       	sbci	r19, 0xFF	; 255
    5130:	3a 87       	std	Y+10, r19	; 0x0a
    5132:	29 87       	std	Y+9, r18	; 0x09
    5134:	20 e0       	ldi	r18, 0x00	; 0
    5136:	41 e0       	ldi	r20, 0x01	; 1
    5138:	50 e0       	ldi	r21, 0x00	; 0
    513a:	6d 81       	ldd	r22, Y+5	; 0x05
    513c:	7e 81       	ldd	r23, Y+6	; 0x06
    513e:	89 85       	ldd	r24, Y+9	; 0x09
    5140:	9a 85       	ldd	r25, Y+10	; 0x0a
    5142:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    5146:	6c 01       	movw	r12, r24
    5148:	20 e0       	ldi	r18, 0x00	; 0
    514a:	40 e0       	ldi	r20, 0x00	; 0
    514c:	50 e0       	ldi	r21, 0x00	; 0
    514e:	6d 81       	ldd	r22, Y+5	; 0x05
    5150:	7e 81       	ldd	r23, Y+6	; 0x06
    5152:	89 85       	ldd	r24, Y+9	; 0x09
    5154:	9a 85       	ldd	r25, Y+10	; 0x0a
    5156:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    515a:	7c 01       	movw	r14, r24
    515c:	20 e0       	ldi	r18, 0x00	; 0
    515e:	41 e0       	ldi	r20, 0x01	; 1
    5160:	50 e0       	ldi	r21, 0x00	; 0
    5162:	69 81       	ldd	r22, Y+1	; 0x01
    5164:	7a 81       	ldd	r23, Y+2	; 0x02
    5166:	89 85       	ldd	r24, Y+9	; 0x09
    5168:	9a 85       	ldd	r25, Y+10	; 0x0a
    516a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    516e:	8c 01       	movw	r16, r24
    5170:	20 e0       	ldi	r18, 0x00	; 0
    5172:	40 e0       	ldi	r20, 0x00	; 0
    5174:	50 e0       	ldi	r21, 0x00	; 0
    5176:	69 81       	ldd	r22, Y+1	; 0x01
    5178:	7a 81       	ldd	r23, Y+2	; 0x02
    517a:	89 85       	ldd	r24, Y+9	; 0x09
    517c:	9a 85       	ldd	r25, Y+10	; 0x0a
    517e:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    5182:	1c 01       	movw	r2, r24
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	41 e0       	ldi	r20, 0x01	; 1
    5188:	50 e0       	ldi	r21, 0x00	; 0
    518a:	b2 01       	movw	r22, r4
    518c:	89 85       	ldd	r24, Y+9	; 0x09
    518e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5190:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    5194:	5c 01       	movw	r10, r24
    5196:	20 e0       	ldi	r18, 0x00	; 0
    5198:	40 e0       	ldi	r20, 0x00	; 0
    519a:	50 e0       	ldi	r21, 0x00	; 0
    519c:	b2 01       	movw	r22, r4
    519e:	89 85       	ldd	r24, Y+9	; 0x09
    51a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51a2:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    51a6:	91 01       	movw	r18, r2
    51a8:	a5 01       	movw	r20, r10
    51aa:	bc 01       	movw	r22, r24
    51ac:	c4 01       	movw	r24, r8
    51ae:	0d 96       	adiw	r24, 0x0d	; 13
    51b0:	0e 94 61 14 	call	0x28c2	; 0x28c2 <_ZN5Gates3CSWEiiiiii>
    51b4:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    51b6:	dc 01       	movw	r26, r24
    51b8:	2d 91       	ld	r18, X+
    51ba:	3c 91       	ld	r19, X
    51bc:	40 e0       	ldi	r20, 0x00	; 0
    51be:	50 e0       	ldi	r21, 0x00	; 0
    51c0:	b2 01       	movw	r22, r4
    51c2:	89 85       	ldd	r24, Y+9	; 0x09
    51c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    51c6:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    51ca:	f8 01       	movw	r30, r16
    51cc:	22 81       	ldd	r18, Z+2	; 0x02
    51ce:	33 81       	ldd	r19, Z+3	; 0x03
    51d0:	41 e0       	ldi	r20, 0x01	; 1
    51d2:	50 e0       	ldi	r21, 0x00	; 0
    51d4:	b2 01       	movw	r22, r4
    51d6:	89 85       	ldd	r24, Y+9	; 0x09
    51d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    51da:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op2,THE,newthephi[2]); qmem.write(op2,PHI,newthephi[3]);
    51de:	d8 01       	movw	r26, r16
    51e0:	14 96       	adiw	r26, 0x04	; 4
    51e2:	2d 91       	ld	r18, X+
    51e4:	3c 91       	ld	r19, X
    51e6:	15 97       	sbiw	r26, 0x05	; 5
    51e8:	40 e0       	ldi	r20, 0x00	; 0
    51ea:	50 e0       	ldi	r21, 0x00	; 0
    51ec:	69 81       	ldd	r22, Y+1	; 0x01
    51ee:	7a 81       	ldd	r23, Y+2	; 0x02
    51f0:	89 85       	ldd	r24, Y+9	; 0x09
    51f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    51f4:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    51f8:	f8 01       	movw	r30, r16
    51fa:	26 81       	ldd	r18, Z+6	; 0x06
    51fc:	37 81       	ldd	r19, Z+7	; 0x07
    51fe:	41 e0       	ldi	r20, 0x01	; 1
    5200:	50 e0       	ldi	r21, 0x00	; 0
    5202:	69 81       	ldd	r22, Y+1	; 0x01
    5204:	7a 81       	ldd	r23, Y+2	; 0x02
    5206:	89 85       	ldd	r24, Y+9	; 0x09
    5208:	9a 85       	ldd	r25, Y+10	; 0x0a
    520a:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op3,THE,newthephi[4]); qmem.write(op3,PHI,newthephi[5]);
    520e:	d8 01       	movw	r26, r16
    5210:	18 96       	adiw	r26, 0x08	; 8
    5212:	2d 91       	ld	r18, X+
    5214:	3c 91       	ld	r19, X
    5216:	19 97       	sbiw	r26, 0x09	; 9
    5218:	40 e0       	ldi	r20, 0x00	; 0
    521a:	50 e0       	ldi	r21, 0x00	; 0
    521c:	6d 81       	ldd	r22, Y+5	; 0x05
    521e:	7e 81       	ldd	r23, Y+6	; 0x06
    5220:	89 85       	ldd	r24, Y+9	; 0x09
    5222:	9a 85       	ldd	r25, Y+10	; 0x0a
    5224:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    5228:	f8 01       	movw	r30, r16
    522a:	22 85       	ldd	r18, Z+10	; 0x0a
    522c:	33 85       	ldd	r19, Z+11	; 0x0b
    522e:	41 e0       	ldi	r20, 0x01	; 1
    5230:	50 e0       	ldi	r21, 0x00	; 0
    5232:	6d 81       	ldd	r22, Y+5	; 0x05
    5234:	7e 81       	ldd	r23, Y+6	; 0x06
    5236:	89 85       	ldd	r24, Y+9	; 0x09
    5238:	9a 85       	ldd	r25, Y+10	; 0x0a
    523a:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    523e:	c8 01       	movw	r24, r16
    5240:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    5244:	27 c1       	rjmp	.+590    	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x50: // TOFFOLI GATE
		{
			int * newthephi=gates.TOF(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),qmem.read(op2,THE,false),qmem.read(op2,PHI,false),qmem.read(op3,THE,false),qmem.read(op3,PHI,false));
    5246:	9c 01       	movw	r18, r24
    5248:	2f 5f       	subi	r18, 0xFF	; 255
    524a:	3f 4f       	sbci	r19, 0xFF	; 255
    524c:	3a 87       	std	Y+10, r19	; 0x0a
    524e:	29 87       	std	Y+9, r18	; 0x09
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	41 e0       	ldi	r20, 0x01	; 1
    5254:	50 e0       	ldi	r21, 0x00	; 0
    5256:	6d 81       	ldd	r22, Y+5	; 0x05
    5258:	7e 81       	ldd	r23, Y+6	; 0x06
    525a:	89 85       	ldd	r24, Y+9	; 0x09
    525c:	9a 85       	ldd	r25, Y+10	; 0x0a
    525e:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    5262:	6c 01       	movw	r12, r24
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	40 e0       	ldi	r20, 0x00	; 0
    5268:	50 e0       	ldi	r21, 0x00	; 0
    526a:	6d 81       	ldd	r22, Y+5	; 0x05
    526c:	7e 81       	ldd	r23, Y+6	; 0x06
    526e:	89 85       	ldd	r24, Y+9	; 0x09
    5270:	9a 85       	ldd	r25, Y+10	; 0x0a
    5272:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    5276:	7c 01       	movw	r14, r24
    5278:	20 e0       	ldi	r18, 0x00	; 0
    527a:	41 e0       	ldi	r20, 0x01	; 1
    527c:	50 e0       	ldi	r21, 0x00	; 0
    527e:	69 81       	ldd	r22, Y+1	; 0x01
    5280:	7a 81       	ldd	r23, Y+2	; 0x02
    5282:	89 85       	ldd	r24, Y+9	; 0x09
    5284:	9a 85       	ldd	r25, Y+10	; 0x0a
    5286:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    528a:	8c 01       	movw	r16, r24
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	40 e0       	ldi	r20, 0x00	; 0
    5290:	50 e0       	ldi	r21, 0x00	; 0
    5292:	69 81       	ldd	r22, Y+1	; 0x01
    5294:	7a 81       	ldd	r23, Y+2	; 0x02
    5296:	89 85       	ldd	r24, Y+9	; 0x09
    5298:	9a 85       	ldd	r25, Y+10	; 0x0a
    529a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    529e:	1c 01       	movw	r2, r24
    52a0:	20 e0       	ldi	r18, 0x00	; 0
    52a2:	41 e0       	ldi	r20, 0x01	; 1
    52a4:	50 e0       	ldi	r21, 0x00	; 0
    52a6:	b2 01       	movw	r22, r4
    52a8:	89 85       	ldd	r24, Y+9	; 0x09
    52aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ac:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    52b0:	5c 01       	movw	r10, r24
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	40 e0       	ldi	r20, 0x00	; 0
    52b6:	50 e0       	ldi	r21, 0x00	; 0
    52b8:	b2 01       	movw	r22, r4
    52ba:	89 85       	ldd	r24, Y+9	; 0x09
    52bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    52be:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    52c2:	91 01       	movw	r18, r2
    52c4:	a5 01       	movw	r20, r10
    52c6:	bc 01       	movw	r22, r24
    52c8:	c4 01       	movw	r24, r8
    52ca:	0d 96       	adiw	r24, 0x0d	; 13
    52cc:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <_ZN5Gates3TOFEiiiiii>
    52d0:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    52d2:	dc 01       	movw	r26, r24
    52d4:	2d 91       	ld	r18, X+
    52d6:	3c 91       	ld	r19, X
    52d8:	40 e0       	ldi	r20, 0x00	; 0
    52da:	50 e0       	ldi	r21, 0x00	; 0
    52dc:	b2 01       	movw	r22, r4
    52de:	89 85       	ldd	r24, Y+9	; 0x09
    52e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e2:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    52e6:	f8 01       	movw	r30, r16
    52e8:	22 81       	ldd	r18, Z+2	; 0x02
    52ea:	33 81       	ldd	r19, Z+3	; 0x03
    52ec:	41 e0       	ldi	r20, 0x01	; 1
    52ee:	50 e0       	ldi	r21, 0x00	; 0
    52f0:	b2 01       	movw	r22, r4
    52f2:	89 85       	ldd	r24, Y+9	; 0x09
    52f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    52f6:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op2,THE,newthephi[2]); qmem.write(op2,PHI,newthephi[3]);
    52fa:	d8 01       	movw	r26, r16
    52fc:	14 96       	adiw	r26, 0x04	; 4
    52fe:	2d 91       	ld	r18, X+
    5300:	3c 91       	ld	r19, X
    5302:	15 97       	sbiw	r26, 0x05	; 5
    5304:	40 e0       	ldi	r20, 0x00	; 0
    5306:	50 e0       	ldi	r21, 0x00	; 0
    5308:	69 81       	ldd	r22, Y+1	; 0x01
    530a:	7a 81       	ldd	r23, Y+2	; 0x02
    530c:	89 85       	ldd	r24, Y+9	; 0x09
    530e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5310:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    5314:	f8 01       	movw	r30, r16
    5316:	26 81       	ldd	r18, Z+6	; 0x06
    5318:	37 81       	ldd	r19, Z+7	; 0x07
    531a:	41 e0       	ldi	r20, 0x01	; 1
    531c:	50 e0       	ldi	r21, 0x00	; 0
    531e:	69 81       	ldd	r22, Y+1	; 0x01
    5320:	7a 81       	ldd	r23, Y+2	; 0x02
    5322:	89 85       	ldd	r24, Y+9	; 0x09
    5324:	9a 85       	ldd	r25, Y+10	; 0x0a
    5326:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op3,THE,newthephi[4]); qmem.write(op3,PHI,newthephi[5]);
    532a:	d8 01       	movw	r26, r16
    532c:	18 96       	adiw	r26, 0x08	; 8
    532e:	2d 91       	ld	r18, X+
    5330:	3c 91       	ld	r19, X
    5332:	19 97       	sbiw	r26, 0x09	; 9
    5334:	40 e0       	ldi	r20, 0x00	; 0
    5336:	50 e0       	ldi	r21, 0x00	; 0
    5338:	6d 81       	ldd	r22, Y+5	; 0x05
    533a:	7e 81       	ldd	r23, Y+6	; 0x06
    533c:	89 85       	ldd	r24, Y+9	; 0x09
    533e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5340:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    5344:	f8 01       	movw	r30, r16
    5346:	22 85       	ldd	r18, Z+10	; 0x0a
    5348:	33 85       	ldd	r19, Z+11	; 0x0b
    534a:	41 e0       	ldi	r20, 0x01	; 1
    534c:	50 e0       	ldi	r21, 0x00	; 0
    534e:	6d 81       	ldd	r22, Y+5	; 0x05
    5350:	7e 81       	ldd	r23, Y+6	; 0x06
    5352:	89 85       	ldd	r24, Y+9	; 0x09
    5354:	9a 85       	ldd	r25, Y+10	; 0x0a
    5356:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    535a:	c8 01       	movw	r24, r16
    535c:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		}
		break;
    5360:	99 c0       	rjmp	.+306    	; 0x5494 <_ZN4QEPU7executeEilll+0x1610>
		case 0x51: // DEUTSCH GATE
		{
			int * newthephi=gates.DEU(qmem.read(op1,THE,false),qmem.read(op1,PHI,false),qmem.read(op2,THE,false),qmem.read(op2,PHI,false),qmem.read(op3,THE,false),qmem.read(op3,PHI,false),qmem.read(0,THE,false));
    5362:	9c 01       	movw	r18, r24
    5364:	2f 5f       	subi	r18, 0xFF	; 255
    5366:	3f 4f       	sbci	r19, 0xFF	; 255
    5368:	3c 87       	std	Y+12, r19	; 0x0c
    536a:	2b 87       	std	Y+11, r18	; 0x0b
    536c:	20 e0       	ldi	r18, 0x00	; 0
    536e:	40 e0       	ldi	r20, 0x00	; 0
    5370:	50 e0       	ldi	r21, 0x00	; 0
    5372:	60 e0       	ldi	r22, 0x00	; 0
    5374:	70 e0       	ldi	r23, 0x00	; 0
    5376:	8b 85       	ldd	r24, Y+11	; 0x0b
    5378:	9c 85       	ldd	r25, Y+12	; 0x0c
    537a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    537e:	5c 01       	movw	r10, r24
    5380:	20 e0       	ldi	r18, 0x00	; 0
    5382:	41 e0       	ldi	r20, 0x01	; 1
    5384:	50 e0       	ldi	r21, 0x00	; 0
    5386:	6d 81       	ldd	r22, Y+5	; 0x05
    5388:	7e 81       	ldd	r23, Y+6	; 0x06
    538a:	8b 85       	ldd	r24, Y+11	; 0x0b
    538c:	9c 85       	ldd	r25, Y+12	; 0x0c
    538e:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    5392:	6c 01       	movw	r12, r24
    5394:	20 e0       	ldi	r18, 0x00	; 0
    5396:	40 e0       	ldi	r20, 0x00	; 0
    5398:	50 e0       	ldi	r21, 0x00	; 0
    539a:	6d 81       	ldd	r22, Y+5	; 0x05
    539c:	7e 81       	ldd	r23, Y+6	; 0x06
    539e:	8b 85       	ldd	r24, Y+11	; 0x0b
    53a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    53a2:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    53a6:	7c 01       	movw	r14, r24
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	41 e0       	ldi	r20, 0x01	; 1
    53ac:	50 e0       	ldi	r21, 0x00	; 0
    53ae:	69 81       	ldd	r22, Y+1	; 0x01
    53b0:	7a 81       	ldd	r23, Y+2	; 0x02
    53b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    53b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    53b6:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    53ba:	8c 01       	movw	r16, r24
    53bc:	20 e0       	ldi	r18, 0x00	; 0
    53be:	40 e0       	ldi	r20, 0x00	; 0
    53c0:	50 e0       	ldi	r21, 0x00	; 0
    53c2:	69 81       	ldd	r22, Y+1	; 0x01
    53c4:	7a 81       	ldd	r23, Y+2	; 0x02
    53c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    53c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    53ca:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    53ce:	9a 87       	std	Y+10, r25	; 0x0a
    53d0:	89 87       	std	Y+9, r24	; 0x09
    53d2:	20 e0       	ldi	r18, 0x00	; 0
    53d4:	41 e0       	ldi	r20, 0x01	; 1
    53d6:	50 e0       	ldi	r21, 0x00	; 0
    53d8:	b2 01       	movw	r22, r4
    53da:	8b 85       	ldd	r24, Y+11	; 0x0b
    53dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    53de:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    53e2:	1c 01       	movw	r2, r24
    53e4:	20 e0       	ldi	r18, 0x00	; 0
    53e6:	40 e0       	ldi	r20, 0x00	; 0
    53e8:	50 e0       	ldi	r21, 0x00	; 0
    53ea:	b2 01       	movw	r22, r4
    53ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    53ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    53f0:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    53f4:	29 85       	ldd	r18, Y+9	; 0x09
    53f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    53f8:	a1 01       	movw	r20, r2
    53fa:	bc 01       	movw	r22, r24
    53fc:	c4 01       	movw	r24, r8
    53fe:	0d 96       	adiw	r24, 0x0d	; 13
    5400:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <_ZN5Gates3DEUEiiiiiii>
    5404:	8c 01       	movw	r16, r24
			qmem.write(op1,THE,newthephi[0]); qmem.write(op1,PHI,newthephi[1]);
    5406:	dc 01       	movw	r26, r24
    5408:	2d 91       	ld	r18, X+
    540a:	3c 91       	ld	r19, X
    540c:	40 e0       	ldi	r20, 0x00	; 0
    540e:	50 e0       	ldi	r21, 0x00	; 0
    5410:	b2 01       	movw	r22, r4
    5412:	8b 85       	ldd	r24, Y+11	; 0x0b
    5414:	9c 85       	ldd	r25, Y+12	; 0x0c
    5416:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    541a:	f8 01       	movw	r30, r16
    541c:	22 81       	ldd	r18, Z+2	; 0x02
    541e:	33 81       	ldd	r19, Z+3	; 0x03
    5420:	41 e0       	ldi	r20, 0x01	; 1
    5422:	50 e0       	ldi	r21, 0x00	; 0
    5424:	b2 01       	movw	r22, r4
    5426:	8b 85       	ldd	r24, Y+11	; 0x0b
    5428:	9c 85       	ldd	r25, Y+12	; 0x0c
    542a:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op2,THE,newthephi[2]); qmem.write(op2,PHI,newthephi[3]);
    542e:	d8 01       	movw	r26, r16
    5430:	14 96       	adiw	r26, 0x04	; 4
    5432:	2d 91       	ld	r18, X+
    5434:	3c 91       	ld	r19, X
    5436:	15 97       	sbiw	r26, 0x05	; 5
    5438:	40 e0       	ldi	r20, 0x00	; 0
    543a:	50 e0       	ldi	r21, 0x00	; 0
    543c:	69 81       	ldd	r22, Y+1	; 0x01
    543e:	7a 81       	ldd	r23, Y+2	; 0x02
    5440:	8b 85       	ldd	r24, Y+11	; 0x0b
    5442:	9c 85       	ldd	r25, Y+12	; 0x0c
    5444:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    5448:	f8 01       	movw	r30, r16
    544a:	26 81       	ldd	r18, Z+6	; 0x06
    544c:	37 81       	ldd	r19, Z+7	; 0x07
    544e:	41 e0       	ldi	r20, 0x01	; 1
    5450:	50 e0       	ldi	r21, 0x00	; 0
    5452:	69 81       	ldd	r22, Y+1	; 0x01
    5454:	7a 81       	ldd	r23, Y+2	; 0x02
    5456:	8b 85       	ldd	r24, Y+11	; 0x0b
    5458:	9c 85       	ldd	r25, Y+12	; 0x0c
    545a:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			qmem.write(op3,THE,newthephi[4]); qmem.write(op3,PHI,newthephi[5]);
    545e:	d8 01       	movw	r26, r16
    5460:	18 96       	adiw	r26, 0x08	; 8
    5462:	2d 91       	ld	r18, X+
    5464:	3c 91       	ld	r19, X
    5466:	19 97       	sbiw	r26, 0x09	; 9
    5468:	40 e0       	ldi	r20, 0x00	; 0
    546a:	50 e0       	ldi	r21, 0x00	; 0
    546c:	6d 81       	ldd	r22, Y+5	; 0x05
    546e:	7e 81       	ldd	r23, Y+6	; 0x06
    5470:	8b 85       	ldd	r24, Y+11	; 0x0b
    5472:	9c 85       	ldd	r25, Y+12	; 0x0c
    5474:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    5478:	f8 01       	movw	r30, r16
    547a:	22 85       	ldd	r18, Z+10	; 0x0a
    547c:	33 85       	ldd	r19, Z+11	; 0x0b
    547e:	41 e0       	ldi	r20, 0x01	; 1
    5480:	50 e0       	ldi	r21, 0x00	; 0
    5482:	6d 81       	ldd	r22, Y+5	; 0x05
    5484:	7e 81       	ldd	r23, Y+6	; 0x06
    5486:	8b 85       	ldd	r24, Y+11	; 0x0b
    5488:	9c 85       	ldd	r25, Y+12	; 0x0c
    548a:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
			free(newthephi);
    548e:	c8 01       	movw	r24, r16
    5490:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <free>
		serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
		serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
		serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
		serial.writestrln("");
	}
    5494:	2c 96       	adiw	r28, 0x0c	; 12
    5496:	0f b6       	in	r0, 0x3f	; 63
    5498:	f8 94       	cli
    549a:	de bf       	out	0x3e, r29	; 62
    549c:	0f be       	out	0x3f, r0	; 63
    549e:	cd bf       	out	0x3d, r28	; 61
    54a0:	df 91       	pop	r29
    54a2:	cf 91       	pop	r28
    54a4:	1f 91       	pop	r17
    54a6:	0f 91       	pop	r16
    54a8:	ff 90       	pop	r15
    54aa:	ef 90       	pop	r14
    54ac:	df 90       	pop	r13
    54ae:	cf 90       	pop	r12
    54b0:	bf 90       	pop	r11
    54b2:	af 90       	pop	r10
    54b4:	9f 90       	pop	r9
    54b6:	8f 90       	pop	r8
    54b8:	7f 90       	pop	r7
    54ba:	6f 90       	pop	r6
    54bc:	5f 90       	pop	r5
    54be:	4f 90       	pop	r4
    54c0:	3f 90       	pop	r3
    54c2:	2f 90       	pop	r2
    54c4:	08 95       	ret

000054c6 <_ZN4QEPU3runEv>:

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
}

void QEPU::run(){
    54c6:	2f 92       	push	r2
    54c8:	3f 92       	push	r3
    54ca:	4f 92       	push	r4
    54cc:	5f 92       	push	r5
    54ce:	6f 92       	push	r6
    54d0:	7f 92       	push	r7
    54d2:	8f 92       	push	r8
    54d4:	9f 92       	push	r9
    54d6:	af 92       	push	r10
    54d8:	bf 92       	push	r11
    54da:	cf 92       	push	r12
    54dc:	df 92       	push	r13
    54de:	ef 92       	push	r14
    54e0:	ff 92       	push	r15
    54e2:	0f 93       	push	r16
    54e4:	1f 93       	push	r17
    54e6:	cf 93       	push	r28
    54e8:	df 93       	push	r29
    54ea:	cd b7       	in	r28, 0x3d	; 61
    54ec:	de b7       	in	r29, 0x3e	; 62
    54ee:	ab 97       	sbiw	r28, 0x2b	; 43
    54f0:	0f b6       	in	r0, 0x3f	; 63
    54f2:	f8 94       	cli
    54f4:	de bf       	out	0x3e, r29	; 62
    54f6:	0f be       	out	0x3f, r0	; 63
    54f8:	cd bf       	out	0x3d, r28	; 61
    54fa:	99 a3       	std	Y+33, r25	; 0x21
    54fc:	88 a3       	std	Y+32, r24	; 0x20
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
    54fe:	04 96       	adiw	r24, 0x04	; 4
    5500:	9b a7       	std	Y+43, r25	; 0x2b
    5502:	8a a7       	std	Y+42, r24	; 0x2a
    5504:	64 e8       	ldi	r22, 0x84	; 132
    5506:	70 e0       	ldi	r23, 0x00	; 0
    5508:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <_ZN6Serial10writestrlnEPc>
    550c:	68 ee       	ldi	r22, 0xE8	; 232
    550e:	70 e0       	ldi	r23, 0x00	; 0
    5510:	8a a5       	ldd	r24, Y+42	; 0x2a
    5512:	9b a5       	ldd	r25, Y+43	; 0x2b
    5514:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <_ZN6Serial10writestrlnEPc>
	
	int line_width=INSTR_WIDTH;
	program_counter_maximum=eeprom.count_lines();
    5518:	68 a0       	ldd	r6, Y+32	; 0x20
    551a:	79 a0       	ldd	r7, Y+33	; 0x21
    551c:	25 e0       	ldi	r18, 0x05	; 5
    551e:	62 0e       	add	r6, r18
    5520:	71 1c       	adc	r7, r1
    5522:	c3 01       	movw	r24, r6
    5524:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN6EEProm11count_linesEv>
    5528:	e8 a1       	ldd	r30, Y+32	; 0x20
    552a:	f9 a1       	ldd	r31, Y+33	; 0x21
    552c:	e5 52       	subi	r30, 0x25	; 37
    552e:	ff 4f       	sbci	r31, 0xFF	; 255
    5530:	91 83       	std	Z+1, r25	; 0x01
    5532:	80 83       	st	Z, r24
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    5534:	e8 a1       	ldd	r30, Y+32	; 0x20
    5536:	f9 a1       	ldd	r31, Y+33	; 0x21
    5538:	e7 52       	subi	r30, 0x27	; 39
    553a:	ff 4f       	sbci	r31, 0xFF	; 255
    553c:	11 82       	std	Z+1, r1	; 0x01
    553e:	10 82       	st	Z, r1
    5540:	18 16       	cp	r1, r24
    5542:	19 06       	cpc	r1, r25
    5544:	0c f0       	brlt	.+2      	; 0x5548 <_ZN4QEPU3runEv+0x82>
    5546:	c7 c0       	rjmp	.+398    	; 0x56d6 <_ZN4QEPU3runEv+0x210>
    5548:	80 e0       	ldi	r24, 0x00	; 0
    554a:	90 e0       	ldi	r25, 0x00	; 0
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
    554c:	1e 01       	movw	r2, r28
    554e:	3f e0       	ldi	r19, 0x0F	; 15
    5550:	23 0e       	add	r2, r19
    5552:	31 1c       	adc	r3, r1
    5554:	0f 2e       	mov	r0, r31
    5556:	fe e8       	ldi	r31, 0x8E	; 142
    5558:	8f 2e       	mov	r8, r31
    555a:	f0 e0       	ldi	r31, 0x00	; 0
    555c:	9f 2e       	mov	r9, r31
    555e:	f0 2d       	mov	r31, r0
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
    5560:	2e 01       	movw	r4, r28
    5562:	e8 e0       	ldi	r30, 0x08	; 8
    5564:	4e 0e       	add	r4, r30
    5566:	51 1c       	adc	r5, r1
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
    5568:	9e 01       	movw	r18, r28
    556a:	2f 5f       	subi	r18, 0xFF	; 255
    556c:	3f 4f       	sbci	r19, 0xFF	; 255
    556e:	3f 8b       	std	Y+23, r19	; 0x17
    5570:	2e 8b       	std	Y+22, r18	; 0x16
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
    5572:	2c a2       	std	Y+36, r2	; 0x24
    5574:	3d a2       	std	Y+37, r3	; 0x25
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
    5576:	4e a2       	std	Y+38, r4	; 0x26
    5578:	5f a2       	std	Y+39, r5	; 0x27
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
    557a:	3e 89       	ldd	r19, Y+22	; 0x16
    557c:	38 a7       	std	Y+40, r19	; 0x28
    557e:	ef 89       	ldd	r30, Y+23	; 0x17
    5580:	e9 a7       	std	Y+41, r30	; 0x29
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
	
	int line_width=INSTR_WIDTH;
	program_counter_maximum=eeprom.count_lines();
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    5582:	28 a1       	ldd	r18, Y+32	; 0x20
    5584:	39 a1       	ldd	r19, Y+33	; 0x21
    5586:	27 52       	subi	r18, 0x27	; 39
    5588:	3f 4f       	sbci	r19, 0xFF	; 255
    558a:	39 8f       	std	Y+25, r19	; 0x19
    558c:	28 8f       	std	Y+24, r18	; 0x18
    558e:	e8 a1       	ldd	r30, Y+32	; 0x20
    5590:	f9 a1       	ldd	r31, Y+33	; 0x21
    5592:	e5 52       	subi	r30, 0x25	; 37
    5594:	ff 4f       	sbci	r31, 0xFF	; 255
    5596:	fb a3       	std	Y+35, r31	; 0x23
    5598:	ea a3       	std	Y+34, r30	; 0x22
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
    559a:	fd e0       	ldi	r31, 0x0D	; 13
    559c:	f8 9f       	mul	r31, r24
    559e:	50 01       	movw	r10, r0
    55a0:	f9 9f       	mul	r31, r25
    55a2:	b0 0c       	add	r11, r0
    55a4:	11 24       	eor	r1, r1
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
    55a6:	1f 86       	std	Y+15, r1	; 0x0f
    55a8:	18 8a       	std	Y+16, r1	; 0x10
    55aa:	19 8a       	std	Y+17, r1	; 0x11
    55ac:	1a 8a       	std	Y+18, r1	; 0x12
    55ae:	1b 8a       	std	Y+19, r1	; 0x13
    55b0:	1c 8a       	std	Y+20, r1	; 0x14
    55b2:	1d 8a       	std	Y+21, r1	; 0x15
    55b4:	18 86       	std	Y+8, r1	; 0x08
    55b6:	19 86       	std	Y+9, r1	; 0x09
    55b8:	1a 86       	std	Y+10, r1	; 0x0a
    55ba:	1b 86       	std	Y+11, r1	; 0x0b
    55bc:	1c 86       	std	Y+12, r1	; 0x0c
    55be:	1d 86       	std	Y+13, r1	; 0x0d
    55c0:	1e 86       	std	Y+14, r1	; 0x0e
    55c2:	19 82       	std	Y+1, r1	; 0x01
    55c4:	1a 82       	std	Y+2, r1	; 0x02
    55c6:	1b 82       	std	Y+3, r1	; 0x03
    55c8:	1c 82       	std	Y+4, r1	; 0x04
    55ca:	1d 82       	std	Y+5, r1	; 0x05
    55cc:	1e 82       	std	Y+6, r1	; 0x06
    55ce:	1f 82       	std	Y+7, r1	; 0x07
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
    55d0:	b5 01       	movw	r22, r10
    55d2:	c3 01       	movw	r24, r6
    55d4:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6EEProm4readEj>
    55d8:	28 2f       	mov	r18, r24
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	3b 8f       	std	Y+27, r19	; 0x1b
    55de:	2a 8f       	std	Y+26, r18	; 0x1a
    55e0:	65 01       	movw	r12, r10
    55e2:	3f ef       	ldi	r19, 0xFF	; 255
    55e4:	c3 1a       	sub	r12, r19
    55e6:	d3 0a       	sbc	r13, r19
    55e8:	85 e0       	ldi	r24, 0x05	; 5
    55ea:	a8 0e       	add	r10, r24
    55ec:	b1 1c       	adc	r11, r1
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
    55ee:	b6 01       	movw	r22, r12
    55f0:	c3 01       	movw	r24, r6
    55f2:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6EEProm4readEj>
    55f6:	1f 92       	push	r1
    55f8:	8f 93       	push	r24
    55fa:	3f 92       	push	r3
    55fc:	2f 92       	push	r2
    55fe:	9f 92       	push	r9
    5600:	8f 92       	push	r8
    5602:	3f 92       	push	r3
    5604:	2f 92       	push	r2
    5606:	0e 94 32 37 	call	0x6e64	; 0x6e64 <sprintf>
    560a:	b6 01       	movw	r22, r12
    560c:	6c 5f       	subi	r22, 0xFC	; 252
    560e:	7f 4f       	sbci	r23, 0xFF	; 255
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
    5610:	c3 01       	movw	r24, r6
    5612:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6EEProm4readEj>
    5616:	1f 92       	push	r1
    5618:	8f 93       	push	r24
    561a:	5f 92       	push	r5
    561c:	4f 92       	push	r4
    561e:	9f 92       	push	r9
    5620:	8f 92       	push	r8
    5622:	5f 92       	push	r5
    5624:	4f 92       	push	r4
    5626:	0e 94 32 37 	call	0x6e64	; 0x6e64 <sprintf>
    562a:	b6 01       	movw	r22, r12
    562c:	68 5f       	subi	r22, 0xF8	; 248
    562e:	7f 4f       	sbci	r23, 0xFF	; 255
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
    5630:	c3 01       	movw	r24, r6
    5632:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6EEProm4readEj>
    5636:	1f 92       	push	r1
    5638:	8f 93       	push	r24
    563a:	9f 89       	ldd	r25, Y+23	; 0x17
    563c:	9f 93       	push	r25
    563e:	ee 89       	ldd	r30, Y+22	; 0x16
    5640:	ef 93       	push	r30
    5642:	9f 92       	push	r9
    5644:	8f 92       	push	r8
    5646:	9f 93       	push	r25
    5648:	ef 93       	push	r30
    564a:	0e 94 32 37 	call	0x6e64	; 0x6e64 <sprintf>
    564e:	ff ef       	ldi	r31, 0xFF	; 255
    5650:	cf 1a       	sub	r12, r31
    5652:	df 0a       	sbc	r13, r31
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    5654:	0f b6       	in	r0, 0x3f	; 63
    5656:	f8 94       	cli
    5658:	de bf       	out	0x3e, r29	; 62
    565a:	0f be       	out	0x3f, r0	; 63
    565c:	cd bf       	out	0x3d, r28	; 61
    565e:	ca 14       	cp	r12, r10
    5660:	db 04       	cpc	r13, r11
    5662:	29 f6       	brne	.-118    	; 0x55ee <_ZN4QEPU3runEv+0x128>
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
		}
		//EXECUTE:
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16),strtol(op3s,NULL,16)); //INSTRUCTION DECODE AND EXECUTE
    5664:	40 e1       	ldi	r20, 0x10	; 16
    5666:	50 e0       	ldi	r21, 0x00	; 0
    5668:	60 e0       	ldi	r22, 0x00	; 0
    566a:	70 e0       	ldi	r23, 0x00	; 0
    566c:	88 a5       	ldd	r24, Y+40	; 0x28
    566e:	99 a5       	ldd	r25, Y+41	; 0x29
    5670:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <strtol>
    5674:	5b 01       	movw	r10, r22
    5676:	6c 01       	movw	r12, r24
    5678:	40 e1       	ldi	r20, 0x10	; 16
    567a:	50 e0       	ldi	r21, 0x00	; 0
    567c:	60 e0       	ldi	r22, 0x00	; 0
    567e:	70 e0       	ldi	r23, 0x00	; 0
    5680:	8e a1       	ldd	r24, Y+38	; 0x26
    5682:	9f a1       	ldd	r25, Y+39	; 0x27
    5684:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <strtol>
    5688:	6c 8f       	std	Y+28, r22	; 0x1c
    568a:	7d 8f       	std	Y+29, r23	; 0x1d
    568c:	8e 8f       	std	Y+30, r24	; 0x1e
    568e:	9f 8f       	std	Y+31, r25	; 0x1f
    5690:	40 e1       	ldi	r20, 0x10	; 16
    5692:	50 e0       	ldi	r21, 0x00	; 0
    5694:	60 e0       	ldi	r22, 0x00	; 0
    5696:	70 e0       	ldi	r23, 0x00	; 0
    5698:	8c a1       	ldd	r24, Y+36	; 0x24
    569a:	9d a1       	ldd	r25, Y+37	; 0x25
    569c:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <strtol>
    56a0:	9b 01       	movw	r18, r22
    56a2:	ac 01       	movw	r20, r24
    56a4:	ec 8c       	ldd	r14, Y+28	; 0x1c
    56a6:	fd 8c       	ldd	r15, Y+29	; 0x1d
    56a8:	0e 8d       	ldd	r16, Y+30	; 0x1e
    56aa:	1f 8d       	ldd	r17, Y+31	; 0x1f
    56ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    56ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    56b0:	88 a1       	ldd	r24, Y+32	; 0x20
    56b2:	99 a1       	ldd	r25, Y+33	; 0x21
    56b4:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <_ZN4QEPU7executeEilll>
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
	
	int line_width=INSTR_WIDTH;
	program_counter_maximum=eeprom.count_lines();
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    56b8:	e8 8d       	ldd	r30, Y+24	; 0x18
    56ba:	f9 8d       	ldd	r31, Y+25	; 0x19
    56bc:	80 81       	ld	r24, Z
    56be:	91 81       	ldd	r25, Z+1	; 0x01
    56c0:	01 96       	adiw	r24, 0x01	; 1
    56c2:	91 83       	std	Z+1, r25	; 0x01
    56c4:	80 83       	st	Z, r24
    56c6:	ea a1       	ldd	r30, Y+34	; 0x22
    56c8:	fb a1       	ldd	r31, Y+35	; 0x23
    56ca:	20 81       	ld	r18, Z
    56cc:	31 81       	ldd	r19, Z+1	; 0x01
    56ce:	82 17       	cp	r24, r18
    56d0:	93 07       	cpc	r25, r19
    56d2:	0c f4       	brge	.+2      	; 0x56d6 <_ZN4QEPU3runEv+0x210>
    56d4:	62 cf       	rjmp	.-316    	; 0x559a <_ZN4QEPU3runEv+0xd4>
	if(SHOW_LAST_STATE){
		dumpmem(QUBIT_COUNT);
		serial.writestrln("");
		sram.dumpmem(5);
	}
	serial.writestrln("");
    56d6:	68 ee       	ldi	r22, 0xE8	; 232
    56d8:	70 e0       	ldi	r23, 0x00	; 0
    56da:	8a a5       	ldd	r24, Y+42	; 0x2a
    56dc:	9b a5       	ldd	r25, Y+43	; 0x2b
    56de:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <_ZN6Serial10writestrlnEPc>
	serial.writestr("The execution of the program has finished");
    56e2:	63 e9       	ldi	r22, 0x93	; 147
    56e4:	70 e0       	ldi	r23, 0x00	; 0
    56e6:	8a a5       	ldd	r24, Y+42	; 0x2a
    56e8:	9b a5       	ldd	r25, Y+43	; 0x2b
    56ea:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <_ZN6Serial8writestrEPc>
	#pragma endregion
}
    56ee:	ab 96       	adiw	r28, 0x2b	; 43
    56f0:	0f b6       	in	r0, 0x3f	; 63
    56f2:	f8 94       	cli
    56f4:	de bf       	out	0x3e, r29	; 62
    56f6:	0f be       	out	0x3f, r0	; 63
    56f8:	cd bf       	out	0x3d, r28	; 61
    56fa:	df 91       	pop	r29
    56fc:	cf 91       	pop	r28
    56fe:	1f 91       	pop	r17
    5700:	0f 91       	pop	r16
    5702:	ff 90       	pop	r15
    5704:	ef 90       	pop	r14
    5706:	df 90       	pop	r13
    5708:	cf 90       	pop	r12
    570a:	bf 90       	pop	r11
    570c:	af 90       	pop	r10
    570e:	9f 90       	pop	r9
    5710:	8f 90       	pop	r8
    5712:	7f 90       	pop	r7
    5714:	6f 90       	pop	r6
    5716:	5f 90       	pop	r5
    5718:	4f 90       	pop	r4
    571a:	3f 90       	pop	r3
    571c:	2f 90       	pop	r2
    571e:	08 95       	ret

00005720 <main>:
#include "qepu.h"
int main(void){
    5720:	cf 93       	push	r28
    5722:	df 93       	push	r29
    5724:	cd b7       	in	r28, 0x3d	; 61
    5726:	de b7       	in	r29, 0x3e	; 62
    5728:	ce 5d       	subi	r28, 0xDE	; 222
    572a:	d1 09       	sbc	r29, r1
    572c:	0f b6       	in	r0, 0x3f	; 63
    572e:	f8 94       	cli
    5730:	de bf       	out	0x3e, r29	; 62
    5732:	0f be       	out	0x3f, r0	; 63
    5734:	cd bf       	out	0x3d, r28	; 61
	QEPU qepu;
    5736:	ce 01       	movw	r24, r28
    5738:	01 96       	adiw	r24, 0x01	; 1
    573a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN4QEPUC1Ev>
	qepu.run();
    573e:	ce 01       	movw	r24, r28
    5740:	01 96       	adiw	r24, 0x01	; 1
    5742:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <_ZN4QEPU3runEv>
    5746:	ff cf       	rjmp	.-2      	; 0x5746 <main+0x26>

00005748 <_ZN4QMEMC1Ev>:
#include "qmem.h"
QMEM::QMEM(){CTRL_QB_DIR=OUTPUT;}
    5748:	cf 93       	push	r28
    574a:	df 93       	push	r29
    574c:	ec 01       	movw	r28, r24
    574e:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN5GatesC1Ev>
    5752:	ce 01       	movw	r24, r28
    5754:	01 96       	adiw	r24, 0x01	; 1
    5756:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <_ZN6SerialC1Ev>
    575a:	8f ef       	ldi	r24, 0xFF	; 255
    575c:	8a bb       	out	0x1a, r24	; 26
    575e:	df 91       	pop	r29
    5760:	cf 91       	pop	r28
    5762:	08 95       	ret

00005764 <_ZN4QMEM14setbuffctrlpinEii>:
void QMEM::setdatapin(int pin,int state){
	BUS_OUT&=~(1<<pin); // CLEAR PIN
	BUS_OUT|=(state<<pin); // SET PIN
}
void QMEM::setbuffctrlpin(int pin,int state){
	CTRL_BUFF&=~(1<<pin); // CLEAR PIN
    5764:	75 b3       	in	r23, 0x15	; 21
    5766:	21 e0       	ldi	r18, 0x01	; 1
    5768:	30 e0       	ldi	r19, 0x00	; 0
    576a:	c9 01       	movw	r24, r18
    576c:	06 2e       	mov	r0, r22
    576e:	02 c0       	rjmp	.+4      	; 0x5774 <_ZN4QMEM14setbuffctrlpinEii+0x10>
    5770:	88 0f       	add	r24, r24
    5772:	99 1f       	adc	r25, r25
    5774:	0a 94       	dec	r0
    5776:	e2 f7       	brpl	.-8      	; 0x5770 <_ZN4QMEM14setbuffctrlpinEii+0xc>
    5778:	80 95       	com	r24
    577a:	87 23       	and	r24, r23
    577c:	85 bb       	out	0x15, r24	; 21
	CTRL_BUFF|=(state<<pin); // SET PIN
    577e:	85 b3       	in	r24, 0x15	; 21
    5780:	02 c0       	rjmp	.+4      	; 0x5786 <_ZN4QMEM14setbuffctrlpinEii+0x22>
    5782:	44 0f       	add	r20, r20
    5784:	55 1f       	adc	r21, r21
    5786:	6a 95       	dec	r22
    5788:	e2 f7       	brpl	.-8      	; 0x5782 <_ZN4QMEM14setbuffctrlpinEii+0x1e>
    578a:	48 2b       	or	r20, r24
    578c:	45 bb       	out	0x15, r20	; 21
    578e:	08 95       	ret

00005790 <_ZN4QMEM14deselect_qubitEv>:
	//TODO: TOUCH QUBIT
	
	return deg_read;
}
void QMEM::deselect_qubit(){
	CTRL_BUFF_DIR=OUTPUT;
    5790:	2f ef       	ldi	r18, 0xFF	; 255
    5792:	24 bb       	out	0x14, r18	; 20
	setbuffctrlpin(EO_AB,LOW);
    5794:	40 e0       	ldi	r20, 0x00	; 0
    5796:	50 e0       	ldi	r21, 0x00	; 0
    5798:	64 e0       	ldi	r22, 0x04	; 4
    579a:	70 e0       	ldi	r23, 0x00	; 0
    579c:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN4QMEM14setbuffctrlpinEii>
    57a0:	08 95       	ret

000057a2 <_ZN4QMEM12select_qubitEi>:
}
void QMEM::select_qubit(int index){
    57a2:	af 92       	push	r10
    57a4:	bf 92       	push	r11
    57a6:	cf 92       	push	r12
    57a8:	df 92       	push	r13
    57aa:	ef 92       	push	r14
    57ac:	ff 92       	push	r15
    57ae:	0f 93       	push	r16
    57b0:	1f 93       	push	r17
    57b2:	cf 93       	push	r28
    57b4:	df 93       	push	r29
    57b6:	00 d0       	rcall	.+0      	; 0x57b8 <_ZN4QMEM12select_qubitEi+0x16>
    57b8:	00 d0       	rcall	.+0      	; 0x57ba <_ZN4QMEM12select_qubitEi+0x18>
    57ba:	00 d0       	rcall	.+0      	; 0x57bc <_ZN4QMEM12select_qubitEi+0x1a>
    57bc:	cd b7       	in	r28, 0x3d	; 61
    57be:	de b7       	in	r29, 0x3e	; 62
    57c0:	8c 01       	movw	r16, r24
	int address_buffer[ADDRESS_BUFFER_SIZE];
	int mask_bit_addressbuff=0b1111;
	for(int i=0;i<ADDRESS_BUFFER_SIZE;i++){
		address_buffer[i]=(index&mask_bit_addressbuff)>>(4*i);
    57c2:	cb 01       	movw	r24, r22
    57c4:	8f 70       	andi	r24, 0x0F	; 15
    57c6:	99 27       	eor	r25, r25
    57c8:	9a 83       	std	Y+2, r25	; 0x02
    57ca:	89 83       	std	Y+1, r24	; 0x01
    57cc:	cb 01       	movw	r24, r22
    57ce:	80 7f       	andi	r24, 0xF0	; 240
    57d0:	99 27       	eor	r25, r25
    57d2:	95 95       	asr	r25
    57d4:	87 95       	ror	r24
    57d6:	95 95       	asr	r25
    57d8:	87 95       	ror	r24
    57da:	95 95       	asr	r25
    57dc:	87 95       	ror	r24
    57de:	95 95       	asr	r25
    57e0:	87 95       	ror	r24
    57e2:	9c 83       	std	Y+4, r25	; 0x04
    57e4:	8b 83       	std	Y+3, r24	; 0x03
    57e6:	66 27       	eor	r22, r22
    57e8:	7f 70       	andi	r23, 0x0F	; 15
    57ea:	87 2f       	mov	r24, r23
    57ec:	88 0f       	add	r24, r24
    57ee:	88 0b       	sbc	r24, r24
    57f0:	7d 83       	std	Y+5, r23	; 0x05
    57f2:	8e 83       	std	Y+6, r24	; 0x06
		mask_bit_addressbuff<<=4;
	}
	CTRL_QB_DIR=OUTPUT;
    57f4:	8f ef       	ldi	r24, 0xFF	; 255
    57f6:	8a bb       	out	0x1a, r24	; 26
	CTRL_BUFF_DIR=OUTPUT;
    57f8:	84 bb       	out	0x14, r24	; 20
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QMEM::setctrl(int bin){
	CTRL_QB=bin;
    57fa:	89 81       	ldd	r24, Y+1	; 0x01
    57fc:	8b bb       	out	0x1b, r24	; 27
	}
	CTRL_QB_DIR=OUTPUT;
	CTRL_BUFF_DIR=OUTPUT;
	
	setctrl(address_buffer[0]);
	setbuffctrlpin(IN_ABBUFFER_START,HIGH);
    57fe:	41 e0       	ldi	r20, 0x01	; 1
    5800:	50 e0       	ldi	r21, 0x00	; 0
    5802:	62 e0       	ldi	r22, 0x02	; 2
    5804:	70 e0       	ldi	r23, 0x00	; 0
    5806:	c8 01       	movw	r24, r16
    5808:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN4QMEM14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    580c:	41 e0       	ldi	r20, 0x01	; 1
    580e:	50 e0       	ldi	r21, 0x00	; 0
    5810:	63 e0       	ldi	r22, 0x03	; 3
    5812:	70 e0       	ldi	r23, 0x00	; 0
    5814:	c8 01       	movw	r24, r16
    5816:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN4QMEM14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    581a:	40 e0       	ldi	r20, 0x00	; 0
    581c:	50 e0       	ldi	r21, 0x00	; 0
    581e:	63 e0       	ldi	r22, 0x03	; 3
    5820:	70 e0       	ldi	r23, 0x00	; 0
    5822:	c8 01       	movw	r24, r16
    5824:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN4QMEM14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_START,LOW);
    5828:	40 e0       	ldi	r20, 0x00	; 0
    582a:	50 e0       	ldi	r21, 0x00	; 0
    582c:	62 e0       	ldi	r22, 0x02	; 2
    582e:	70 e0       	ldi	r23, 0x00	; 0
    5830:	c8 01       	movw	r24, r16
    5832:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN4QMEM14setbuffctrlpinEii>
	utils.delay(ADDRESS_WRITE_DELAY);
    5836:	68 01       	movw	r12, r16
    5838:	82 e0       	ldi	r24, 0x02	; 2
    583a:	c8 0e       	add	r12, r24
    583c:	d1 1c       	adc	r13, r1
    583e:	60 e0       	ldi	r22, 0x00	; 0
    5840:	70 e0       	ldi	r23, 0x00	; 0
    5842:	c6 01       	movw	r24, r12
    5844:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <_ZN5Utils5delayEi>
    5848:	7e 01       	movw	r14, r28
    584a:	93 e0       	ldi	r25, 0x03	; 3
    584c:	e9 0e       	add	r14, r25
    584e:	f1 1c       	adc	r15, r1
    5850:	5e 01       	movw	r10, r28
    5852:	e7 e0       	ldi	r30, 0x07	; 7
    5854:	ae 0e       	add	r10, r30
    5856:	b1 1c       	adc	r11, r1
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    5858:	41 e0       	ldi	r20, 0x01	; 1
    585a:	50 e0       	ldi	r21, 0x00	; 0
    585c:	63 e0       	ldi	r22, 0x03	; 3
    585e:	70 e0       	ldi	r23, 0x00	; 0
    5860:	c8 01       	movw	r24, r16
    5862:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN4QMEM14setbuffctrlpinEii>
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    5866:	40 e0       	ldi	r20, 0x00	; 0
    5868:	50 e0       	ldi	r21, 0x00	; 0
    586a:	63 e0       	ldi	r22, 0x03	; 3
    586c:	70 e0       	ldi	r23, 0x00	; 0
    586e:	c8 01       	movw	r24, r16
    5870:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN4QMEM14setbuffctrlpinEii>
		setctrl(address_buffer[i]);
    5874:	f7 01       	movw	r30, r14
    5876:	80 81       	ld	r24, Z
    5878:	f2 e0       	ldi	r31, 0x02	; 2
    587a:	ef 0e       	add	r14, r31
    587c:	f1 1c       	adc	r15, r1
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QMEM::setctrl(int bin){
	CTRL_QB=bin;
    587e:	8b bb       	out	0x1b, r24	; 27
	utils.delay(ADDRESS_WRITE_DELAY);
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
		setctrl(address_buffer[i]);
		utils.delay(ADDRESS_WRITE_DELAY);
    5880:	60 e0       	ldi	r22, 0x00	; 0
    5882:	70 e0       	ldi	r23, 0x00	; 0
    5884:	c6 01       	movw	r24, r12
    5886:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <_ZN5Utils5delayEi>
	setbuffctrlpin(IN_ABBUFFER_START,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(IN_ABBUFFER_START,LOW);
	utils.delay(ADDRESS_WRITE_DELAY);
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
    588a:	ea 14       	cp	r14, r10
    588c:	fb 04       	cpc	r15, r11
    588e:	21 f7       	brne	.-56     	; 0x5858 <_ZN4QMEM12select_qubitEi+0xb6>
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
		setctrl(address_buffer[i]);
		utils.delay(ADDRESS_WRITE_DELAY);
	}
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    5890:	41 e0       	ldi	r20, 0x01	; 1
    5892:	50 e0       	ldi	r21, 0x00	; 0
    5894:	63 e0       	ldi	r22, 0x03	; 3
    5896:	70 e0       	ldi	r23, 0x00	; 0
    5898:	c8 01       	movw	r24, r16
    589a:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN4QMEM14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    589e:	40 e0       	ldi	r20, 0x00	; 0
    58a0:	50 e0       	ldi	r21, 0x00	; 0
    58a2:	63 e0       	ldi	r22, 0x03	; 3
    58a4:	70 e0       	ldi	r23, 0x00	; 0
    58a6:	c8 01       	movw	r24, r16
    58a8:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN4QMEM14setbuffctrlpinEii>
	setbuffctrlpin(EO_AB,HIGH);
    58ac:	41 e0       	ldi	r20, 0x01	; 1
    58ae:	50 e0       	ldi	r21, 0x00	; 0
    58b0:	64 e0       	ldi	r22, 0x04	; 4
    58b2:	70 e0       	ldi	r23, 0x00	; 0
    58b4:	c8 01       	movw	r24, r16
    58b6:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN4QMEM14setbuffctrlpinEii>
}
    58ba:	26 96       	adiw	r28, 0x06	; 6
    58bc:	0f b6       	in	r0, 0x3f	; 63
    58be:	f8 94       	cli
    58c0:	de bf       	out	0x3e, r29	; 62
    58c2:	0f be       	out	0x3f, r0	; 63
    58c4:	cd bf       	out	0x3d, r28	; 61
    58c6:	df 91       	pop	r29
    58c8:	cf 91       	pop	r28
    58ca:	1f 91       	pop	r17
    58cc:	0f 91       	pop	r16
    58ce:	ff 90       	pop	r15
    58d0:	ef 90       	pop	r14
    58d2:	df 90       	pop	r13
    58d4:	cf 90       	pop	r12
    58d6:	bf 90       	pop	r11
    58d8:	af 90       	pop	r10
    58da:	08 95       	ret

000058dc <_ZN4QMEM10setctrlpinEii>:
void QMEM::setbuffctrlpin(int pin,int state){
	CTRL_BUFF&=~(1<<pin); // CLEAR PIN
	CTRL_BUFF|=(state<<pin); // SET PIN
}
void QMEM::setctrlpin(int pin,int state){
	CTRL_QB&=~(1<<pin); // CLEAR PIN
    58dc:	7b b3       	in	r23, 0x1b	; 27
    58de:	21 e0       	ldi	r18, 0x01	; 1
    58e0:	30 e0       	ldi	r19, 0x00	; 0
    58e2:	c9 01       	movw	r24, r18
    58e4:	06 2e       	mov	r0, r22
    58e6:	02 c0       	rjmp	.+4      	; 0x58ec <_ZN4QMEM10setctrlpinEii+0x10>
    58e8:	88 0f       	add	r24, r24
    58ea:	99 1f       	adc	r25, r25
    58ec:	0a 94       	dec	r0
    58ee:	e2 f7       	brpl	.-8      	; 0x58e8 <_ZN4QMEM10setctrlpinEii+0xc>
    58f0:	80 95       	com	r24
    58f2:	87 23       	and	r24, r23
    58f4:	8b bb       	out	0x1b, r24	; 27
	CTRL_QB|=(state<<pin); // SET PIN
    58f6:	8b b3       	in	r24, 0x1b	; 27
    58f8:	02 c0       	rjmp	.+4      	; 0x58fe <_ZN4QMEM10setctrlpinEii+0x22>
    58fa:	44 0f       	add	r20, r20
    58fc:	55 1f       	adc	r21, r21
    58fe:	6a 95       	dec	r22
    5900:	e2 f7       	brpl	.-8      	; 0x58fa <_ZN4QMEM10setctrlpinEii+0x1e>
    5902:	48 2b       	or	r20, r24
    5904:	4b bb       	out	0x1b, r20	; 27
    5906:	08 95       	ret

00005908 <_ZN4QMEM5writeEiii>:
void QMEM::close_bus(){
	setctrl(0); // CLOSE ALL CONTROLS
	deselect_qubit(); // DESELECT ALL QUBITS
	bus_write(LOW);
}
void QMEM::write(int index,int dim,int deg){
    5908:	ff 92       	push	r15
    590a:	0f 93       	push	r16
    590c:	1f 93       	push	r17
    590e:	cf 93       	push	r28
    5910:	df 93       	push	r29
    5912:	ec 01       	movw	r28, r24
    5914:	8a 01       	movw	r16, r20
	BUS_DIR=OUTPUT;
    5916:	ff 24       	eor	r15, r15
    5918:	fa 94       	dec	r15
    591a:	f7 ba       	out	0x17, r15	; 23
#include "qmem.h"
QMEM::QMEM(){CTRL_QB_DIR=OUTPUT;}
void QMEM::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    591c:	f7 ba       	out	0x17, r15	; 23
	BUS_OUT=data;
    591e:	28 bb       	out	0x18, r18	; 24
}
void QMEM::write(int index,int dim,int deg){
	BUS_DIR=OUTPUT;
	
	bus_write(deg);
	select_qubit(index);
    5920:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <_ZN4QMEM12select_qubitEi>
	setctrlpin(DIM_SEL,dim);
    5924:	a8 01       	movw	r20, r16
    5926:	64 e0       	ldi	r22, 0x04	; 4
    5928:	70 e0       	ldi	r23, 0x00	; 0
    592a:	ce 01       	movw	r24, r28
    592c:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN4QMEM10setctrlpinEii>
	setctrlpin(WRITE_QB,HIGH); // CLOCK UP LOAD
    5930:	41 e0       	ldi	r20, 0x01	; 1
    5932:	50 e0       	ldi	r21, 0x00	; 0
    5934:	66 e0       	ldi	r22, 0x06	; 6
    5936:	70 e0       	ldi	r23, 0x00	; 0
    5938:	ce 01       	movw	r24, r28
    593a:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN4QMEM10setctrlpinEii>
	setctrlpin(WRITE_QB,LOW); // CLOCK DOWN LOAD
    593e:	40 e0       	ldi	r20, 0x00	; 0
    5940:	50 e0       	ldi	r21, 0x00	; 0
    5942:	66 e0       	ldi	r22, 0x06	; 6
    5944:	70 e0       	ldi	r23, 0x00	; 0
    5946:	ce 01       	movw	r24, r28
    5948:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN4QMEM10setctrlpinEii>
#include "qmem.h"
QMEM::QMEM(){CTRL_QB_DIR=OUTPUT;}
void QMEM::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    594c:	f7 ba       	out	0x17, r15	; 23
	BUS_OUT=data;
    594e:	18 ba       	out	0x18, r1	; 24
	select_qubit(index);
	setctrlpin(DIM_SEL,dim);
	setctrlpin(WRITE_QB,HIGH); // CLOCK UP LOAD
	setctrlpin(WRITE_QB,LOW); // CLOCK DOWN LOAD
	bus_write(LOW);
	deselect_qubit();
    5950:	ce 01       	movw	r24, r28
    5952:	0e 94 c8 2b 	call	0x5790	; 0x5790 <_ZN4QMEM14deselect_qubitEv>
}
    5956:	df 91       	pop	r29
    5958:	cf 91       	pop	r28
    595a:	1f 91       	pop	r17
    595c:	0f 91       	pop	r16
    595e:	ff 90       	pop	r15
    5960:	08 95       	ret

00005962 <_ZN4QMEM4readEiib>:
int QMEM::read(int index,int dim,bool freeze_bus){
    5962:	ff 92       	push	r15
    5964:	0f 93       	push	r16
    5966:	1f 93       	push	r17
    5968:	cf 93       	push	r28
    596a:	df 93       	push	r29
    596c:	ec 01       	movw	r28, r24
    596e:	8a 01       	movw	r16, r20
    5970:	f2 2e       	mov	r15, r18
	BUS_DIR=INPUT;
    5972:	17 ba       	out	0x17, r1	; 23
	
	select_qubit(index);
    5974:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <_ZN4QMEM12select_qubitEi>
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    5978:	41 e0       	ldi	r20, 0x01	; 1
    597a:	50 e0       	ldi	r21, 0x00	; 0
    597c:	65 e0       	ldi	r22, 0x05	; 5
    597e:	70 e0       	ldi	r23, 0x00	; 0
    5980:	ce 01       	movw	r24, r28
    5982:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN4QMEM10setctrlpinEii>
	setctrlpin(4,dim);
    5986:	a8 01       	movw	r20, r16
    5988:	64 e0       	ldi	r22, 0x04	; 4
    598a:	70 e0       	ldi	r23, 0x00	; 0
    598c:	ce 01       	movw	r24, r28
    598e:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN4QMEM10setctrlpinEii>
	int deg_read=BUS_IN; // READ INPUT
    5992:	06 b3       	in	r16, 0x16	; 22
    5994:	10 e0       	ldi	r17, 0x00	; 0
	//CLOSE ALL AND GATES
	BUS_DIR=OUTPUT;
    5996:	8f ef       	ldi	r24, 0xFF	; 255
    5998:	87 bb       	out	0x17, r24	; 23
	if(!freeze_bus){
    599a:	f1 10       	cpse	r15, r1
    599c:	04 c0       	rjmp	.+8      	; 0x59a6 <_ZN4QMEM4readEiib+0x44>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QMEM::setctrl(int bin){
	CTRL_QB=bin;
    599e:	1b ba       	out	0x1b, r1	; 27
	int deg_read=BUS_IN; // READ INPUT
	//CLOSE ALL AND GATES
	BUS_DIR=OUTPUT;
	if(!freeze_bus){
		setctrl(0); // CLOSE ALL CONTROLS
		deselect_qubit();
    59a0:	ce 01       	movw	r24, r28
    59a2:	0e 94 c8 2b 	call	0x5790	; 0x5790 <_ZN4QMEM14deselect_qubitEv>
	}
	//TODO: TOUCH QUBIT
	
	return deg_read;
}
    59a6:	c8 01       	movw	r24, r16
    59a8:	df 91       	pop	r29
    59aa:	cf 91       	pop	r28
    59ac:	1f 91       	pop	r17
    59ae:	0f 91       	pop	r16
    59b0:	ff 90       	pop	r15
    59b2:	08 95       	ret

000059b4 <_ZN4QMEM7measureEi>:
}
void QMEM::setctrlpin(int pin,int state){
	CTRL_QB&=~(1<<pin); // CLEAR PIN
	CTRL_QB|=(state<<pin); // SET PIN
}
int QMEM::measure(int amplitude){
    59b4:	cf 93       	push	r28
    59b6:	df 93       	push	r29
    59b8:	ec 01       	movw	r28, r24
	return gates.touch(utils.custom_pow(sin(amplitude*M_PI/360),2));
    59ba:	88 27       	eor	r24, r24
    59bc:	77 fd       	sbrc	r23, 7
    59be:	80 95       	com	r24
    59c0:	98 2f       	mov	r25, r24
    59c2:	0e 94 3c 31 	call	0x6278	; 0x6278 <__floatsisf>
    59c6:	2b ed       	ldi	r18, 0xDB	; 219
    59c8:	3f e0       	ldi	r19, 0x0F	; 15
    59ca:	49 e4       	ldi	r20, 0x49	; 73
    59cc:	50 e4       	ldi	r21, 0x40	; 64
    59ce:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
    59d2:	20 e0       	ldi	r18, 0x00	; 0
    59d4:	30 e0       	ldi	r19, 0x00	; 0
    59d6:	44 eb       	ldi	r20, 0xB4	; 180
    59d8:	53 e4       	ldi	r21, 0x43	; 67
    59da:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__divsf3>
    59de:	0e 94 81 33 	call	0x6702	; 0x6702 <sin>
    59e2:	ab 01       	movw	r20, r22
    59e4:	bc 01       	movw	r22, r24
    59e6:	22 e0       	ldi	r18, 0x02	; 2
    59e8:	30 e0       	ldi	r19, 0x00	; 0
    59ea:	ce 01       	movw	r24, r28
    59ec:	02 96       	adiw	r24, 0x02	; 2
    59ee:	0e 94 77 2f 	call	0x5eee	; 0x5eee <_ZN5Utils10custom_powEfi>
    59f2:	ab 01       	movw	r20, r22
    59f4:	bc 01       	movw	r22, r24
    59f6:	ce 01       	movw	r24, r28
    59f8:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN5Gates5touchEd>
}
    59fc:	df 91       	pop	r29
    59fe:	cf 91       	pop	r28
    5a00:	08 95       	ret

00005a02 <_ZN4QMEM14fetch_registerEi>:

int QMEM::fetch_register(int address){
    5a02:	8f 92       	push	r8
    5a04:	9f 92       	push	r9
    5a06:	af 92       	push	r10
    5a08:	bf 92       	push	r11
    5a0a:	cf 92       	push	r12
    5a0c:	df 92       	push	r13
    5a0e:	ef 92       	push	r14
    5a10:	ff 92       	push	r15
    5a12:	0f 93       	push	r16
    5a14:	1f 93       	push	r17
    5a16:	cf 93       	push	r28
    5a18:	df 93       	push	r29
    5a1a:	cd b7       	in	r28, 0x3d	; 61
    5a1c:	de b7       	in	r29, 0x3e	; 62
    5a1e:	29 97       	sbiw	r28, 0x09	; 9
    5a20:	0f b6       	in	r0, 0x3f	; 63
    5a22:	f8 94       	cli
    5a24:	de bf       	out	0x3e, r29	; 62
    5a26:	0f be       	out	0x3f, r0	; 63
    5a28:	cd bf       	out	0x3d, r28	; 61
    5a2a:	5c 01       	movw	r10, r24
	char data_fetched[BUS_WIDTH+1]="";
    5a2c:	19 82       	std	Y+1, r1	; 0x01
    5a2e:	1a 82       	std	Y+2, r1	; 0x02
    5a30:	1b 82       	std	Y+3, r1	; 0x03
    5a32:	1c 82       	std	Y+4, r1	; 0x04
    5a34:	fe 01       	movw	r30, r28
    5a36:	35 96       	adiw	r30, 0x05	; 5
    5a38:	85 e0       	ldi	r24, 0x05	; 5
    5a3a:	df 01       	movw	r26, r30
    5a3c:	1d 92       	st	X+, r1
    5a3e:	8a 95       	dec	r24
    5a40:	e9 f7       	brne	.-6      	; 0x5a3c <_ZN4QMEM14fetch_registerEi+0x3a>
	int address_offset=address*BUS_WIDTH;
    5a42:	4b 01       	movw	r8, r22
    5a44:	88 0c       	add	r8, r8
    5a46:	99 1c       	adc	r9, r9
    5a48:	88 0c       	add	r8, r8
    5a4a:	99 1c       	adc	r9, r9
    5a4c:	88 0c       	add	r8, r8
    5a4e:	99 1c       	adc	r9, r9
	for(int i=0;i<BUS_WIDTH;i++)
    5a50:	e1 2c       	mov	r14, r1
    5a52:	f1 2c       	mov	r15, r1
		sprintf(data_fetched,"%s%d",data_fetched,measure(read(address_offset+i,THE,false)));
    5a54:	8e 01       	movw	r16, r28
    5a56:	0f 5f       	subi	r16, 0xFF	; 255
    5a58:	1f 4f       	sbci	r17, 0xFF	; 255
    5a5a:	0f 2e       	mov	r0, r31
    5a5c:	fd eb       	ldi	r31, 0xBD	; 189
    5a5e:	cf 2e       	mov	r12, r31
    5a60:	f0 e0       	ldi	r31, 0x00	; 0
    5a62:	df 2e       	mov	r13, r31
    5a64:	f0 2d       	mov	r31, r0
    5a66:	b7 01       	movw	r22, r14
    5a68:	68 0d       	add	r22, r8
    5a6a:	79 1d       	adc	r23, r9
    5a6c:	20 e0       	ldi	r18, 0x00	; 0
    5a6e:	40 e0       	ldi	r20, 0x00	; 0
    5a70:	50 e0       	ldi	r21, 0x00	; 0
    5a72:	c5 01       	movw	r24, r10
    5a74:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN4QMEM4readEiib>
    5a78:	bc 01       	movw	r22, r24
    5a7a:	c5 01       	movw	r24, r10
    5a7c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <_ZN4QMEM7measureEi>
    5a80:	9f 93       	push	r25
    5a82:	8f 93       	push	r24
    5a84:	1f 93       	push	r17
    5a86:	0f 93       	push	r16
    5a88:	df 92       	push	r13
    5a8a:	cf 92       	push	r12
    5a8c:	1f 93       	push	r17
    5a8e:	0f 93       	push	r16
    5a90:	0e 94 32 37 	call	0x6e64	; 0x6e64 <sprintf>
}

int QMEM::fetch_register(int address){
	char data_fetched[BUS_WIDTH+1]="";
	int address_offset=address*BUS_WIDTH;
	for(int i=0;i<BUS_WIDTH;i++)
    5a94:	bf ef       	ldi	r27, 0xFF	; 255
    5a96:	eb 1a       	sub	r14, r27
    5a98:	fb 0a       	sbc	r15, r27
    5a9a:	0f b6       	in	r0, 0x3f	; 63
    5a9c:	f8 94       	cli
    5a9e:	de bf       	out	0x3e, r29	; 62
    5aa0:	0f be       	out	0x3f, r0	; 63
    5aa2:	cd bf       	out	0x3d, r28	; 61
    5aa4:	98 e0       	ldi	r25, 0x08	; 8
    5aa6:	e9 16       	cp	r14, r25
    5aa8:	f1 04       	cpc	r15, r1
    5aaa:	e9 f6       	brne	.-70     	; 0x5a66 <_ZN4QMEM14fetch_registerEi+0x64>
		sprintf(data_fetched,"%s%d",data_fetched,measure(read(address_offset+i,THE,false)));
	
	strrev(data_fetched);
    5aac:	ce 01       	movw	r24, r28
    5aae:	01 96       	adiw	r24, 0x01	; 1
    5ab0:	0e 94 22 37 	call	0x6e44	; 0x6e44 <strrev>
	return strtol(data_fetched,NULL,2);
    5ab4:	42 e0       	ldi	r20, 0x02	; 2
    5ab6:	50 e0       	ldi	r21, 0x00	; 0
    5ab8:	60 e0       	ldi	r22, 0x00	; 0
    5aba:	70 e0       	ldi	r23, 0x00	; 0
    5abc:	ce 01       	movw	r24, r28
    5abe:	01 96       	adiw	r24, 0x01	; 1
    5ac0:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <strtol>
}
    5ac4:	cb 01       	movw	r24, r22
    5ac6:	29 96       	adiw	r28, 0x09	; 9
    5ac8:	0f b6       	in	r0, 0x3f	; 63
    5aca:	f8 94       	cli
    5acc:	de bf       	out	0x3e, r29	; 62
    5ace:	0f be       	out	0x3f, r0	; 63
    5ad0:	cd bf       	out	0x3d, r28	; 61
    5ad2:	df 91       	pop	r29
    5ad4:	cf 91       	pop	r28
    5ad6:	1f 91       	pop	r17
    5ad8:	0f 91       	pop	r16
    5ada:	ff 90       	pop	r15
    5adc:	ef 90       	pop	r14
    5ade:	df 90       	pop	r13
    5ae0:	cf 90       	pop	r12
    5ae2:	bf 90       	pop	r11
    5ae4:	af 90       	pop	r10
    5ae6:	9f 90       	pop	r9
    5ae8:	8f 90       	pop	r8
    5aea:	08 95       	ret

00005aec <_ZN4QMEM12set_registerEii>:

void QMEM::set_register(int address,int data){
    5aec:	cf 92       	push	r12
    5aee:	df 92       	push	r13
    5af0:	ef 92       	push	r14
    5af2:	ff 92       	push	r15
    5af4:	0f 93       	push	r16
    5af6:	1f 93       	push	r17
    5af8:	cf 93       	push	r28
    5afa:	df 93       	push	r29
    5afc:	6c 01       	movw	r12, r24
    5afe:	8b 01       	movw	r16, r22
    5b00:	ba 01       	movw	r22, r20
	char* data_str=utils.int2binstr(data,BUS_WIDTH);
    5b02:	48 e0       	ldi	r20, 0x08	; 8
    5b04:	50 e0       	ldi	r21, 0x00	; 0
    5b06:	02 96       	adiw	r24, 0x02	; 2
    5b08:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <_ZN5Utils10int2binstrEii>
    5b0c:	d8 2f       	mov	r29, r24
    5b0e:	c9 2f       	mov	r28, r25
	strrev(data_str);
    5b10:	0e 94 22 37 	call	0x6e44	; 0x6e44 <strrev>
    5b14:	ed 2e       	mov	r14, r29
    5b16:	fc 2e       	mov	r15, r28
	int address_offset=address*BUS_WIDTH;
    5b18:	00 0f       	add	r16, r16
    5b1a:	11 1f       	adc	r17, r17
    5b1c:	00 0f       	add	r16, r16
    5b1e:	11 1f       	adc	r17, r17
    5b20:	00 0f       	add	r16, r16
    5b22:	11 1f       	adc	r17, r17
	
	for(int i=0;i<BUS_WIDTH;i++)
    5b24:	c0 e0       	ldi	r28, 0x00	; 0
    5b26:	d0 e0       	ldi	r29, 0x00	; 0
		if(data_str[i]=='1') write(address_offset+i,THE,180);
    5b28:	f7 01       	movw	r30, r14
    5b2a:	81 91       	ld	r24, Z+
    5b2c:	7f 01       	movw	r14, r30
    5b2e:	81 33       	cpi	r24, 0x31	; 49
    5b30:	49 f4       	brne	.+18     	; 0x5b44 <_ZN4QMEM12set_registerEii+0x58>
    5b32:	24 eb       	ldi	r18, 0xB4	; 180
    5b34:	30 e0       	ldi	r19, 0x00	; 0
    5b36:	40 e0       	ldi	r20, 0x00	; 0
    5b38:	50 e0       	ldi	r21, 0x00	; 0
    5b3a:	b8 01       	movw	r22, r16
    5b3c:	c6 01       	movw	r24, r12
    5b3e:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
    5b42:	08 c0       	rjmp	.+16     	; 0x5b54 <_ZN4QMEM12set_registerEii+0x68>
		else write(address_offset+i,THE,0);
    5b44:	20 e0       	ldi	r18, 0x00	; 0
    5b46:	30 e0       	ldi	r19, 0x00	; 0
    5b48:	40 e0       	ldi	r20, 0x00	; 0
    5b4a:	50 e0       	ldi	r21, 0x00	; 0
    5b4c:	b8 01       	movw	r22, r16
    5b4e:	c6 01       	movw	r24, r12
    5b50:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN4QMEM5writeEiii>
void QMEM::set_register(int address,int data){
	char* data_str=utils.int2binstr(data,BUS_WIDTH);
	strrev(data_str);
	int address_offset=address*BUS_WIDTH;
	
	for(int i=0;i<BUS_WIDTH;i++)
    5b54:	21 96       	adiw	r28, 0x01	; 1
    5b56:	0f 5f       	subi	r16, 0xFF	; 255
    5b58:	1f 4f       	sbci	r17, 0xFF	; 255
    5b5a:	c8 30       	cpi	r28, 0x08	; 8
    5b5c:	d1 05       	cpc	r29, r1
    5b5e:	21 f7       	brne	.-56     	; 0x5b28 <_ZN4QMEM12set_registerEii+0x3c>
		if(data_str[i]=='1') write(address_offset+i,THE,180);
		else write(address_offset+i,THE,0);
}
    5b60:	df 91       	pop	r29
    5b62:	cf 91       	pop	r28
    5b64:	1f 91       	pop	r17
    5b66:	0f 91       	pop	r16
    5b68:	ff 90       	pop	r15
    5b6a:	ef 90       	pop	r14
    5b6c:	df 90       	pop	r13
    5b6e:	cf 90       	pop	r12
    5b70:	08 95       	ret

00005b72 <_ZN4SRAM4initEv>:
#include "sram.h"

SRAM::SRAM(){
	init();
}
void SRAM::init(){
    5b72:	fc 01       	movw	r30, r24
	CTRLMEM_DIR=OUTPUT;
    5b74:	8f ef       	ldi	r24, 0xFF	; 255
    5b76:	84 bb       	out	0x14, r24	; 20
	stack_head_offset=MEMORY_HEAD_PERMISSION_OFFSET+HEAD_PROGRAMMER_OFFSET;
    5b78:	84 e1       	ldi	r24, 0x14	; 20
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	91 83       	std	Z+1, r25	; 0x01
    5b7e:	80 83       	st	Z, r24
	stack_tail_offset=ADDRESS_MAX-MEMORY_TAIL_PERMISSION_OFFSET-TAIL_PROGRAMMER_OFFSET;
    5b80:	80 e0       	ldi	r24, 0x00	; 0
    5b82:	91 e0       	ldi	r25, 0x01	; 1
    5b84:	95 83       	std	Z+5, r25	; 0x05
    5b86:	84 83       	std	Z+4, r24	; 0x04
	memory_restrictedaccess_allowed=false;
    5b88:	16 82       	std	Z+6, r1	; 0x06
    5b8a:	08 95       	ret

00005b8c <_ZN4SRAMC1Ev>:
#include "sram.h"

SRAM::SRAM(){
    5b8c:	cf 93       	push	r28
    5b8e:	df 93       	push	r29
    5b90:	ec 01       	movw	r28, r24
    5b92:	03 96       	adiw	r24, 0x03	; 3
    5b94:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <_ZN6SerialC1Ev>
	init();
    5b98:	ce 01       	movw	r24, r28
    5b9a:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <_ZN4SRAM4initEv>
}
    5b9e:	df 91       	pop	r29
    5ba0:	cf 91       	pop	r28
    5ba2:	08 95       	ret

00005ba4 <_ZN4SRAM11set_addressEi>:
	stack_tail_offset=ADDRESS_MAX-MEMORY_TAIL_PERMISSION_OFFSET-TAIL_PROGRAMMER_OFFSET;
	memory_restrictedaccess_allowed=false;
}

void SRAM::set_address(int address){
	MEM_ADDRESS_DIR=OUTPUT;
    5ba4:	2f ef       	ldi	r18, 0xFF	; 255
    5ba6:	2a bb       	out	0x1a, r18	; 26
	if(!memory_restrictedaccess_allowed)
    5ba8:	fc 01       	movw	r30, r24
    5baa:	26 81       	ldd	r18, Z+6	; 0x06
    5bac:	21 11       	cpse	r18, r1
    5bae:	0f c0       	rjmp	.+30     	; 0x5bce <_ZN4SRAM11set_addressEi+0x2a>
		if(address+stack_head_offset>stack_tail_offset)MEM_ADDRESS=stack_tail_offset;
    5bb0:	20 81       	ld	r18, Z
    5bb2:	31 81       	ldd	r19, Z+1	; 0x01
    5bb4:	84 81       	ldd	r24, Z+4	; 0x04
    5bb6:	95 81       	ldd	r25, Z+5	; 0x05
    5bb8:	a9 01       	movw	r20, r18
    5bba:	46 0f       	add	r20, r22
    5bbc:	57 1f       	adc	r21, r23
    5bbe:	84 17       	cp	r24, r20
    5bc0:	95 07       	cpc	r25, r21
    5bc2:	14 f4       	brge	.+4      	; 0x5bc8 <_ZN4SRAM11set_addressEi+0x24>
    5bc4:	8b bb       	out	0x1b, r24	; 27
    5bc6:	08 95       	ret
		else MEM_ADDRESS=address+stack_head_offset;
    5bc8:	62 0f       	add	r22, r18
    5bca:	6b bb       	out	0x1b, r22	; 27
    5bcc:	08 95       	ret
	else MEM_ADDRESS=address;
    5bce:	6b bb       	out	0x1b, r22	; 27
    5bd0:	08 95       	ret

00005bd2 <_ZN4SRAM10setctrlpinEii>:
void SRAM::bus_write(int data){
	BUS_DIR=OUTPUT;
	BUS_OUT=data;
}
void SRAM::setctrlpin(int pin,int state){
	CTRLMEM&=~(1<<pin); // CLEAR PIN
    5bd2:	75 b3       	in	r23, 0x15	; 21
    5bd4:	21 e0       	ldi	r18, 0x01	; 1
    5bd6:	30 e0       	ldi	r19, 0x00	; 0
    5bd8:	c9 01       	movw	r24, r18
    5bda:	06 2e       	mov	r0, r22
    5bdc:	02 c0       	rjmp	.+4      	; 0x5be2 <_ZN4SRAM10setctrlpinEii+0x10>
    5bde:	88 0f       	add	r24, r24
    5be0:	99 1f       	adc	r25, r25
    5be2:	0a 94       	dec	r0
    5be4:	e2 f7       	brpl	.-8      	; 0x5bde <_ZN4SRAM10setctrlpinEii+0xc>
    5be6:	80 95       	com	r24
    5be8:	87 23       	and	r24, r23
    5bea:	85 bb       	out	0x15, r24	; 21
	CTRLMEM|=(state<<pin); // SET PIN
    5bec:	85 b3       	in	r24, 0x15	; 21
    5bee:	02 c0       	rjmp	.+4      	; 0x5bf4 <_ZN4SRAM10setctrlpinEii+0x22>
    5bf0:	44 0f       	add	r20, r20
    5bf2:	55 1f       	adc	r21, r21
    5bf4:	6a 95       	dec	r22
    5bf6:	e2 f7       	brpl	.-8      	; 0x5bf0 <_ZN4SRAM10setctrlpinEii+0x1e>
    5bf8:	48 2b       	or	r20, r24
    5bfa:	45 bb       	out	0x15, r20	; 21
    5bfc:	08 95       	ret

00005bfe <_ZN4SRAM17memory_managementEv>:
		serial.writestrln(mem_debug_str);
	}
}

void SRAM::memory_management(){
	if(stack_head_offset>stack_tail_offset || stack_head_offset<0 || stack_head_offset>ADDRESS_MAX || stack_tail_offset<0 || stack_tail_offset>ADDRESS_MAX){
    5bfe:	fc 01       	movw	r30, r24
    5c00:	20 81       	ld	r18, Z
    5c02:	31 81       	ldd	r19, Z+1	; 0x01
    5c04:	44 81       	ldd	r20, Z+4	; 0x04
    5c06:	55 81       	ldd	r21, Z+5	; 0x05
    5c08:	42 17       	cp	r20, r18
    5c0a:	53 07       	cpc	r21, r19
    5c0c:	34 f0       	brlt	.+12     	; 0x5c1a <_ZN4SRAM17memory_managementEv+0x1c>
    5c0e:	21 30       	cpi	r18, 0x01	; 1
    5c10:	31 40       	sbci	r19, 0x01	; 1
    5c12:	18 f4       	brcc	.+6      	; 0x5c1a <_ZN4SRAM17memory_managementEv+0x1c>
    5c14:	41 30       	cpi	r20, 0x01	; 1
    5c16:	51 40       	sbci	r21, 0x01	; 1
    5c18:	10 f0       	brcs	.+4      	; 0x5c1e <_ZN4SRAM17memory_managementEv+0x20>
		init(); //RESTORE STACK POINTERS TO DEFAULT
    5c1a:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <_ZN4SRAM4initEv>
    5c1e:	08 95       	ret

00005c20 <_ZN4SRAM4readEi>:
		if(address+stack_head_offset>stack_tail_offset)MEM_ADDRESS=stack_tail_offset;
		else MEM_ADDRESS=address+stack_head_offset;
	else MEM_ADDRESS=address;
}

int8_t SRAM::read(int address){
    5c20:	0f 93       	push	r16
    5c22:	1f 93       	push	r17
    5c24:	cf 93       	push	r28
    5c26:	df 93       	push	r29
    5c28:	ec 01       	movw	r28, r24
    5c2a:	8b 01       	movw	r16, r22
	memory_management();
    5c2c:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <_ZN4SRAM17memory_managementEv>
	set_address(address);
    5c30:	b8 01       	movw	r22, r16
    5c32:	ce 01       	movw	r24, r28
    5c34:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <_ZN4SRAM11set_addressEi>
	BUS_DIR=INPUT;
    5c38:	17 ba       	out	0x17, r1	; 23
	setctrlpin(MRE,HIGH);
    5c3a:	41 e0       	ldi	r20, 0x01	; 1
    5c3c:	50 e0       	ldi	r21, 0x00	; 0
    5c3e:	66 e0       	ldi	r22, 0x06	; 6
    5c40:	70 e0       	ldi	r23, 0x00	; 0
    5c42:	ce 01       	movw	r24, r28
    5c44:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <_ZN4SRAM10setctrlpinEii>
	int bus_data=BUS_IN;
    5c48:	16 b3       	in	r17, 0x16	; 22
	setctrlpin(MRE,LOW);
    5c4a:	40 e0       	ldi	r20, 0x00	; 0
    5c4c:	50 e0       	ldi	r21, 0x00	; 0
    5c4e:	66 e0       	ldi	r22, 0x06	; 6
    5c50:	70 e0       	ldi	r23, 0x00	; 0
    5c52:	ce 01       	movw	r24, r28
    5c54:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <_ZN4SRAM10setctrlpinEii>
	BUS_DIR=OUTPUT;
    5c58:	8f ef       	ldi	r24, 0xFF	; 255
    5c5a:	87 bb       	out	0x17, r24	; 23
	MEM_ADDRESS=LOW;
    5c5c:	1b ba       	out	0x1b, r1	; 27
	return bus_data;
}
    5c5e:	81 2f       	mov	r24, r17
    5c60:	df 91       	pop	r29
    5c62:	cf 91       	pop	r28
    5c64:	1f 91       	pop	r17
    5c66:	0f 91       	pop	r16
    5c68:	08 95       	ret

00005c6a <_ZN4SRAM9read_sramEv>:
	}else{
		stack_head_offset--;
		write(0,register_data);
	}
}
int* SRAM::read_sram(){
    5c6a:	cf 92       	push	r12
    5c6c:	df 92       	push	r13
    5c6e:	ef 92       	push	r14
    5c70:	ff 92       	push	r15
    5c72:	0f 93       	push	r16
    5c74:	1f 93       	push	r17
    5c76:	cf 93       	push	r28
    5c78:	df 93       	push	r29
    5c7a:	cd b7       	in	r28, 0x3d	; 61
    5c7c:	de b7       	in	r29, 0x3e	; 62
    5c7e:	d2 50       	subi	r29, 0x02	; 2
    5c80:	0f b6       	in	r0, 0x3f	; 63
    5c82:	f8 94       	cli
    5c84:	de bf       	out	0x3e, r29	; 62
    5c86:	0f be       	out	0x3f, r0	; 63
    5c88:	cd bf       	out	0x3d, r28	; 61
    5c8a:	7c 01       	movw	r14, r24
	int ram_memory[ADDRESS_MAX];
	for(int i=stack_head_offset;i<stack_tail_offset;i++) ram_memory[i]=read(i);
    5c8c:	fc 01       	movw	r30, r24
    5c8e:	00 81       	ld	r16, Z
    5c90:	11 81       	ldd	r17, Z+1	; 0x01
    5c92:	84 81       	ldd	r24, Z+4	; 0x04
    5c94:	95 81       	ldd	r25, Z+5	; 0x05
    5c96:	08 17       	cp	r16, r24
    5c98:	19 07       	cpc	r17, r25
    5c9a:	e4 f4       	brge	.+56     	; 0x5cd4 <_ZN4SRAM9read_sramEv+0x6a>
    5c9c:	68 01       	movw	r12, r16
    5c9e:	cc 0c       	add	r12, r12
    5ca0:	dd 1c       	adc	r13, r13
    5ca2:	81 e0       	ldi	r24, 0x01	; 1
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	8c 0f       	add	r24, r28
    5ca8:	9d 1f       	adc	r25, r29
    5caa:	c8 0e       	add	r12, r24
    5cac:	d9 1e       	adc	r13, r25
    5cae:	b8 01       	movw	r22, r16
    5cb0:	c7 01       	movw	r24, r14
    5cb2:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
    5cb6:	99 27       	eor	r25, r25
    5cb8:	87 fd       	sbrc	r24, 7
    5cba:	90 95       	com	r25
    5cbc:	f6 01       	movw	r30, r12
    5cbe:	81 93       	st	Z+, r24
    5cc0:	91 93       	st	Z+, r25
    5cc2:	6f 01       	movw	r12, r30
    5cc4:	0f 5f       	subi	r16, 0xFF	; 255
    5cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cc8:	f7 01       	movw	r30, r14
    5cca:	84 81       	ldd	r24, Z+4	; 0x04
    5ccc:	95 81       	ldd	r25, Z+5	; 0x05
    5cce:	08 17       	cp	r16, r24
    5cd0:	19 07       	cpc	r17, r25
    5cd2:	6c f3       	brlt	.-38     	; 0x5cae <_ZN4SRAM9read_sramEv+0x44>
	return ram_memory;
}
    5cd4:	ce 01       	movw	r24, r28
    5cd6:	01 96       	adiw	r24, 0x01	; 1
    5cd8:	de 5f       	subi	r29, 0xFE	; 254
    5cda:	0f b6       	in	r0, 0x3f	; 63
    5cdc:	f8 94       	cli
    5cde:	de bf       	out	0x3e, r29	; 62
    5ce0:	0f be       	out	0x3f, r0	; 63
    5ce2:	cd bf       	out	0x3d, r28	; 61
    5ce4:	df 91       	pop	r29
    5ce6:	cf 91       	pop	r28
    5ce8:	1f 91       	pop	r17
    5cea:	0f 91       	pop	r16
    5cec:	ff 90       	pop	r15
    5cee:	ef 90       	pop	r14
    5cf0:	df 90       	pop	r13
    5cf2:	cf 90       	pop	r12
    5cf4:	08 95       	ret

00005cf6 <_ZN4SRAM5writeEii>:
	setctrlpin(MRE,LOW);
	BUS_DIR=OUTPUT;
	MEM_ADDRESS=LOW;
	return bus_data;
}
void SRAM::write(int address,int data){
    5cf6:	ff 92       	push	r15
    5cf8:	0f 93       	push	r16
    5cfa:	1f 93       	push	r17
    5cfc:	cf 93       	push	r28
    5cfe:	df 93       	push	r29
    5d00:	ec 01       	movw	r28, r24
    5d02:	8b 01       	movw	r16, r22
    5d04:	f4 2e       	mov	r15, r20
	memory_management();
    5d06:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <_ZN4SRAM17memory_managementEv>
	set_address(address);
    5d0a:	b8 01       	movw	r22, r16
    5d0c:	ce 01       	movw	r24, r28
    5d0e:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <_ZN4SRAM11set_addressEi>
	setctrlpin(MWR,LOW);
	MEM_ADDRESS=LOW;
	bus_write(LOW);
}
void SRAM::bus_write(int data){
	BUS_DIR=OUTPUT;
    5d12:	1f ef       	ldi	r17, 0xFF	; 255
    5d14:	17 bb       	out	0x17, r17	; 23
	BUS_OUT=data;
    5d16:	f8 ba       	out	0x18, r15	; 24
}
void SRAM::write(int address,int data){
	memory_management();
	set_address(address);
	bus_write(data);
	setctrlpin(MWR,HIGH);
    5d18:	41 e0       	ldi	r20, 0x01	; 1
    5d1a:	50 e0       	ldi	r21, 0x00	; 0
    5d1c:	65 e0       	ldi	r22, 0x05	; 5
    5d1e:	70 e0       	ldi	r23, 0x00	; 0
    5d20:	ce 01       	movw	r24, r28
    5d22:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <_ZN4SRAM10setctrlpinEii>
	setctrlpin(MWR,LOW);
    5d26:	40 e0       	ldi	r20, 0x00	; 0
    5d28:	50 e0       	ldi	r21, 0x00	; 0
    5d2a:	65 e0       	ldi	r22, 0x05	; 5
    5d2c:	70 e0       	ldi	r23, 0x00	; 0
    5d2e:	ce 01       	movw	r24, r28
    5d30:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <_ZN4SRAM10setctrlpinEii>
	MEM_ADDRESS=LOW;
    5d34:	1b ba       	out	0x1b, r1	; 27
	bus_write(LOW);
}
void SRAM::bus_write(int data){
	BUS_DIR=OUTPUT;
    5d36:	17 bb       	out	0x17, r17	; 23
	BUS_OUT=data;
    5d38:	18 ba       	out	0x18, r1	; 24
	bus_write(data);
	setctrlpin(MWR,HIGH);
	setctrlpin(MWR,LOW);
	MEM_ADDRESS=LOW;
	bus_write(LOW);
}
    5d3a:	df 91       	pop	r29
    5d3c:	cf 91       	pop	r28
    5d3e:	1f 91       	pop	r17
    5d40:	0f 91       	pop	r16
    5d42:	ff 90       	pop	r15
    5d44:	08 95       	ret

00005d46 <_ZN4SRAM3popEv>:
}
void SRAM::setctrlpin(int pin,int state){
	CTRLMEM&=~(1<<pin); // CLEAR PIN
	CTRLMEM|=(state<<pin); // SET PIN
}
int SRAM::pop(){
    5d46:	cf 93       	push	r28
    5d48:	df 93       	push	r29
    5d4a:	ec 01       	movw	r28, r24
	memory_management();
    5d4c:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <_ZN4SRAM17memory_managementEv>
	int popped_number=read(0);
    5d50:	60 e0       	ldi	r22, 0x00	; 0
    5d52:	70 e0       	ldi	r23, 0x00	; 0
    5d54:	ce 01       	movw	r24, r28
    5d56:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4readEi>
	stack_head_offset++;
    5d5a:	28 81       	ld	r18, Y
    5d5c:	39 81       	ldd	r19, Y+1	; 0x01
    5d5e:	2f 5f       	subi	r18, 0xFF	; 255
    5d60:	3f 4f       	sbci	r19, 0xFF	; 255
    5d62:	39 83       	std	Y+1, r19	; 0x01
    5d64:	28 83       	st	Y, r18
	if(stack_head_offset>stack_tail_offset) return 0;
    5d66:	4c 81       	ldd	r20, Y+4	; 0x04
    5d68:	5d 81       	ldd	r21, Y+5	; 0x05
    5d6a:	42 17       	cp	r20, r18
    5d6c:	53 07       	cpc	r21, r19
    5d6e:	24 f0       	brlt	.+8      	; 0x5d78 <_ZN4SRAM3popEv+0x32>
	CTRLMEM&=~(1<<pin); // CLEAR PIN
	CTRLMEM|=(state<<pin); // SET PIN
}
int SRAM::pop(){
	memory_management();
	int popped_number=read(0);
    5d70:	99 27       	eor	r25, r25
    5d72:	87 fd       	sbrc	r24, 7
    5d74:	90 95       	com	r25
	stack_head_offset++;
	if(stack_head_offset>stack_tail_offset) return 0;
	else return popped_number;
    5d76:	02 c0       	rjmp	.+4      	; 0x5d7c <_ZN4SRAM3popEv+0x36>
}
int SRAM::pop(){
	memory_management();
	int popped_number=read(0);
	stack_head_offset++;
	if(stack_head_offset>stack_tail_offset) return 0;
    5d78:	80 e0       	ldi	r24, 0x00	; 0
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
	else return popped_number;
}
    5d7c:	df 91       	pop	r29
    5d7e:	cf 91       	pop	r28
    5d80:	08 95       	ret

00005d82 <_ZN4SRAM4pushEi>:
void SRAM::push(int register_data){
    5d82:	ef 92       	push	r14
    5d84:	ff 92       	push	r15
    5d86:	0f 93       	push	r16
    5d88:	1f 93       	push	r17
    5d8a:	cf 93       	push	r28
    5d8c:	df 93       	push	r29
    5d8e:	8c 01       	movw	r16, r24
    5d90:	eb 01       	movw	r28, r22
	memory_management();
    5d92:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <_ZN4SRAM17memory_managementEv>
	if(stack_head_offset<=MEMORY_HEAD_PERMISSION_OFFSET){ //PUSH EVERY OTHER ELEMENT FORWARD ****
    5d96:	f8 01       	movw	r30, r16
    5d98:	80 81       	ld	r24, Z
    5d9a:	91 81       	ldd	r25, Z+1	; 0x01
    5d9c:	18 16       	cp	r1, r24
    5d9e:	19 06       	cpc	r1, r25
    5da0:	5c f1       	brlt	.+86     	; 0x5df8 <_ZN4SRAM4pushEi+0x76>
		int *ram_memory=utils.arrint_shiftright(read_sram(),register_data,stack_tail_offset-stack_head_offset);
    5da2:	e4 80       	ldd	r14, Z+4	; 0x04
    5da4:	f5 80       	ldd	r15, Z+5	; 0x05
    5da6:	e8 1a       	sub	r14, r24
    5da8:	f9 0a       	sbc	r15, r25
    5daa:	c8 01       	movw	r24, r16
    5dac:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN4SRAM9read_sramEv>
    5db0:	97 01       	movw	r18, r14
    5db2:	ae 01       	movw	r20, r28
    5db4:	bc 01       	movw	r22, r24
    5db6:	c8 01       	movw	r24, r16
    5db8:	02 96       	adiw	r24, 0x02	; 2
    5dba:	0e 94 a1 2f 	call	0x5f42	; 0x5f42 <_ZN5Utils17arrint_shiftrightEPiii>
		for(int i=stack_head_offset;i<stack_tail_offset;i++) write(i,ram_memory[i]);
    5dbe:	f8 01       	movw	r30, r16
    5dc0:	c0 81       	ld	r28, Z
    5dc2:	d1 81       	ldd	r29, Z+1	; 0x01
    5dc4:	24 81       	ldd	r18, Z+4	; 0x04
    5dc6:	35 81       	ldd	r19, Z+5	; 0x05
    5dc8:	c2 17       	cp	r28, r18
    5dca:	d3 07       	cpc	r29, r19
    5dcc:	fc f4       	brge	.+62     	; 0x5e0c <_ZN4SRAM4pushEi+0x8a>
    5dce:	7e 01       	movw	r14, r28
    5dd0:	ee 0c       	add	r14, r14
    5dd2:	ff 1c       	adc	r15, r15
    5dd4:	e8 0e       	add	r14, r24
    5dd6:	f9 1e       	adc	r15, r25
    5dd8:	f7 01       	movw	r30, r14
    5dda:	41 91       	ld	r20, Z+
    5ddc:	51 91       	ld	r21, Z+
    5dde:	7f 01       	movw	r14, r30
    5de0:	be 01       	movw	r22, r28
    5de2:	c8 01       	movw	r24, r16
    5de4:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
    5de8:	21 96       	adiw	r28, 0x01	; 1
    5dea:	f8 01       	movw	r30, r16
    5dec:	84 81       	ldd	r24, Z+4	; 0x04
    5dee:	95 81       	ldd	r25, Z+5	; 0x05
    5df0:	c8 17       	cp	r28, r24
    5df2:	d9 07       	cpc	r29, r25
    5df4:	8c f3       	brlt	.-30     	; 0x5dd8 <_ZN4SRAM4pushEi+0x56>
    5df6:	0a c0       	rjmp	.+20     	; 0x5e0c <_ZN4SRAM4pushEi+0x8a>
	}else{
		stack_head_offset--;
    5df8:	01 97       	sbiw	r24, 0x01	; 1
    5dfa:	f8 01       	movw	r30, r16
    5dfc:	91 83       	std	Z+1, r25	; 0x01
    5dfe:	80 83       	st	Z, r24
		write(0,register_data);
    5e00:	ae 01       	movw	r20, r28
    5e02:	60 e0       	ldi	r22, 0x00	; 0
    5e04:	70 e0       	ldi	r23, 0x00	; 0
    5e06:	c8 01       	movw	r24, r16
    5e08:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN4SRAM5writeEii>
	}
}
    5e0c:	df 91       	pop	r29
    5e0e:	cf 91       	pop	r28
    5e10:	1f 91       	pop	r17
    5e12:	0f 91       	pop	r16
    5e14:	ff 90       	pop	r15
    5e16:	ef 90       	pop	r14
    5e18:	08 95       	ret

00005e1a <_ZN6SerialC1Ev>:
    5e1a:	83 e3       	ldi	r24, 0x33	; 51
    5e1c:	89 b9       	out	0x09, r24	; 9
    5e1e:	10 bc       	out	0x20, r1	; 32
    5e20:	86 e8       	ldi	r24, 0x86	; 134
    5e22:	80 bd       	out	0x20, r24	; 32
    5e24:	88 e1       	ldi	r24, 0x18	; 24
    5e26:	8a b9       	out	0x0a, r24	; 10
    5e28:	08 95       	ret

00005e2a <_ZN6Serial4readEv>:
    5e2a:	5f 9b       	sbis	0x0b, 7	; 11
    5e2c:	fe cf       	rjmp	.-4      	; 0x5e2a <_ZN6Serial4readEv>
    5e2e:	8c b1       	in	r24, 0x0c	; 12
    5e30:	08 95       	ret

00005e32 <_ZN6Serial5writeEc>:
    5e32:	5d 9b       	sbis	0x0b, 5	; 11
    5e34:	fe cf       	rjmp	.-4      	; 0x5e32 <_ZN6Serial5writeEc>
    5e36:	6c b9       	out	0x0c, r22	; 12
    5e38:	08 95       	ret

00005e3a <_ZN6Serial8writestrEPc>:
    5e3a:	0f 93       	push	r16
    5e3c:	1f 93       	push	r17
    5e3e:	cf 93       	push	r28
    5e40:	df 93       	push	r29
    5e42:	8c 01       	movw	r16, r24
    5e44:	eb 01       	movw	r28, r22
    5e46:	68 81       	ld	r22, Y
    5e48:	66 23       	and	r22, r22
    5e4a:	39 f0       	breq	.+14     	; 0x5e5a <_ZN6Serial8writestrEPc+0x20>
    5e4c:	21 96       	adiw	r28, 0x01	; 1
    5e4e:	c8 01       	movw	r24, r16
    5e50:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <_ZN6Serial5writeEc>
    5e54:	69 91       	ld	r22, Y+
    5e56:	61 11       	cpse	r22, r1
    5e58:	fa cf       	rjmp	.-12     	; 0x5e4e <_ZN6Serial8writestrEPc+0x14>
    5e5a:	df 91       	pop	r29
    5e5c:	cf 91       	pop	r28
    5e5e:	1f 91       	pop	r17
    5e60:	0f 91       	pop	r16
    5e62:	08 95       	ret

00005e64 <_ZN6Serial10writestrlnEPc>:
    5e64:	cf 93       	push	r28
    5e66:	df 93       	push	r29
    5e68:	ec 01       	movw	r28, r24
    5e6a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <_ZN6Serial8writestrEPc>
    5e6e:	6d e0       	ldi	r22, 0x0D	; 13
    5e70:	ce 01       	movw	r24, r28
    5e72:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <_ZN6Serial5writeEc>
    5e76:	df 91       	pop	r29
    5e78:	cf 91       	pop	r28
    5e7a:	08 95       	ret

00005e7c <_ZN5Utils10int2binstrEii>:
#include "utils.h"

char * Utils::int2binstr(int num,int strlength){
    5e7c:	0f 93       	push	r16
    5e7e:	1f 93       	push	r17
    5e80:	cf 93       	push	r28
    5e82:	df 93       	push	r29
    5e84:	06 2f       	mov	r16, r22
    5e86:	17 2f       	mov	r17, r23
    5e88:	ea 01       	movw	r28, r20
	char * str = (char*)malloc(strlength + 1);
    5e8a:	ca 01       	movw	r24, r20
    5e8c:	01 96       	adiw	r24, 0x01	; 1
    5e8e:	0e 94 61 34 	call	0x68c2	; 0x68c2 <malloc>
	if(!str) return NULL;
    5e92:	00 97       	sbiw	r24, 0x00	; 0
    5e94:	b9 f0       	breq	.+46     	; 0x5ec4 <_ZN5Utils10int2binstrEii+0x48>
	str[strlength] = 0;
    5e96:	fc 01       	movw	r30, r24
    5e98:	ec 0f       	add	r30, r28
    5e9a:	fd 1f       	adc	r31, r29
    5e9c:	10 82       	st	Z, r1

	// type punning because signed shift is implementation-defined
	unsigned u = *(unsigned *)&num;
    5e9e:	20 2f       	mov	r18, r16
    5ea0:	31 2f       	mov	r19, r17
	for(; strlength--; u >>= 1)
    5ea2:	be 01       	movw	r22, r28
    5ea4:	61 50       	subi	r22, 0x01	; 1
    5ea6:	71 09       	sbc	r23, r1
    5ea8:	cd 2b       	or	r28, r29
    5eaa:	71 f0       	breq	.+28     	; 0x5ec8 <_ZN5Utils10int2binstrEii+0x4c>
	str[strlength] = u & 1 ? '1' : '0';
    5eac:	20 ff       	sbrs	r18, 0
    5eae:	02 c0       	rjmp	.+4      	; 0x5eb4 <_ZN5Utils10int2binstrEii+0x38>
    5eb0:	41 e3       	ldi	r20, 0x31	; 49
    5eb2:	01 c0       	rjmp	.+2      	; 0x5eb6 <_ZN5Utils10int2binstrEii+0x3a>
    5eb4:	40 e3       	ldi	r20, 0x30	; 48
    5eb6:	42 93       	st	-Z, r20
	if(!str) return NULL;
	str[strlength] = 0;

	// type punning because signed shift is implementation-defined
	unsigned u = *(unsigned *)&num;
	for(; strlength--; u >>= 1)
    5eb8:	36 95       	lsr	r19
    5eba:	27 95       	ror	r18
    5ebc:	61 50       	subi	r22, 0x01	; 1
    5ebe:	71 09       	sbc	r23, r1
    5ec0:	a8 f7       	brcc	.-22     	; 0x5eac <_ZN5Utils10int2binstrEii+0x30>
    5ec2:	02 c0       	rjmp	.+4      	; 0x5ec8 <_ZN5Utils10int2binstrEii+0x4c>
#include "utils.h"

char * Utils::int2binstr(int num,int strlength){
	char * str = (char*)malloc(strlength + 1);
	if(!str) return NULL;
    5ec4:	80 e0       	ldi	r24, 0x00	; 0
    5ec6:	90 e0       	ldi	r25, 0x00	; 0
	unsigned u = *(unsigned *)&num;
	for(; strlength--; u >>= 1)
	str[strlength] = u & 1 ? '1' : '0';

	return str;
}
    5ec8:	df 91       	pop	r29
    5eca:	cf 91       	pop	r28
    5ecc:	1f 91       	pop	r17
    5ece:	0f 91       	pop	r16
    5ed0:	08 95       	ret

00005ed2 <_ZN5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    5ed2:	61 15       	cp	r22, r1
    5ed4:	71 05       	cpc	r23, r1
    5ed6:	51 f0       	breq	.+20     	; 0x5eec <_ZN5Utils5delayEi+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5ed8:	86 e6       	ldi	r24, 0x66	; 102
    5eda:	9e e0       	ldi	r25, 0x0E	; 14
    5edc:	01 97       	sbiw	r24, 0x01	; 1
    5ede:	f1 f7       	brne	.-4      	; 0x5edc <_ZN5Utils5delayEi+0xa>
    5ee0:	00 00       	nop
    5ee2:	61 50       	subi	r22, 0x01	; 1
    5ee4:	71 09       	sbc	r23, r1
    5ee6:	61 15       	cp	r22, r1
    5ee8:	71 05       	cpc	r23, r1
    5eea:	b1 f7       	brne	.-20     	; 0x5ed8 <_ZN5Utils5delayEi+0x6>
}
    5eec:	08 95       	ret

00005eee <_ZN5Utils10custom_powEfi>:
float Utils::custom_pow(float base,int exp){
    5eee:	cf 92       	push	r12
    5ef0:	df 92       	push	r13
    5ef2:	ef 92       	push	r14
    5ef4:	ff 92       	push	r15
    5ef6:	0f 93       	push	r16
    5ef8:	1f 93       	push	r17
    5efa:	cf 93       	push	r28
    5efc:	df 93       	push	r29
    5efe:	6a 01       	movw	r12, r20
    5f00:	7b 01       	movw	r14, r22
    5f02:	89 01       	movw	r16, r18
	float result=1; for(int i=0;i<exp;i++) result*=base;
    5f04:	12 16       	cp	r1, r18
    5f06:	13 06       	cpc	r1, r19
    5f08:	7c f4       	brge	.+30     	; 0x5f28 <_ZN5Utils10custom_powEfi+0x3a>
    5f0a:	c0 e0       	ldi	r28, 0x00	; 0
    5f0c:	d0 e0       	ldi	r29, 0x00	; 0
    5f0e:	60 e0       	ldi	r22, 0x00	; 0
    5f10:	70 e0       	ldi	r23, 0x00	; 0
    5f12:	80 e8       	ldi	r24, 0x80	; 128
    5f14:	9f e3       	ldi	r25, 0x3F	; 63
    5f16:	a7 01       	movw	r20, r14
    5f18:	96 01       	movw	r18, r12
    5f1a:	0e 94 1e 33 	call	0x663c	; 0x663c <__mulsf3>
    5f1e:	21 96       	adiw	r28, 0x01	; 1
    5f20:	c0 17       	cp	r28, r16
    5f22:	d1 07       	cpc	r29, r17
    5f24:	c1 f7       	brne	.-16     	; 0x5f16 <_ZN5Utils10custom_powEfi+0x28>
    5f26:	04 c0       	rjmp	.+8      	; 0x5f30 <_ZN5Utils10custom_powEfi+0x42>
    5f28:	60 e0       	ldi	r22, 0x00	; 0
    5f2a:	70 e0       	ldi	r23, 0x00	; 0
    5f2c:	80 e8       	ldi	r24, 0x80	; 128
    5f2e:	9f e3       	ldi	r25, 0x3F	; 63
	return result;
}
    5f30:	df 91       	pop	r29
    5f32:	cf 91       	pop	r28
    5f34:	1f 91       	pop	r17
    5f36:	0f 91       	pop	r16
    5f38:	ff 90       	pop	r15
    5f3a:	ef 90       	pop	r14
    5f3c:	df 90       	pop	r13
    5f3e:	cf 90       	pop	r12
    5f40:	08 95       	ret

00005f42 <_ZN5Utils17arrint_shiftrightEPiii>:
int * Utils::arrint_shiftright(int * arr,int newelem,int array_length){
    5f42:	cf 92       	push	r12
    5f44:	df 92       	push	r13
    5f46:	ef 92       	push	r14
    5f48:	ff 92       	push	r15
    5f4a:	0f 93       	push	r16
    5f4c:	1f 93       	push	r17
    5f4e:	cf 93       	push	r28
    5f50:	df 93       	push	r29
    5f52:	7b 01       	movw	r14, r22
    5f54:	6a 01       	movw	r12, r20
    5f56:	e9 01       	movw	r28, r18
	int * new_array=(int*)malloc(sizeof(int)*array_length);
    5f58:	89 01       	movw	r16, r18
    5f5a:	00 0f       	add	r16, r16
    5f5c:	11 1f       	adc	r17, r17
    5f5e:	c8 01       	movw	r24, r16
    5f60:	0e 94 61 34 	call	0x68c2	; 0x68c2 <malloc>
	int new_array_index=0;
	new_array[0]=newelem;
    5f64:	fc 01       	movw	r30, r24
    5f66:	d1 82       	std	Z+1, r13	; 0x01
    5f68:	c0 82       	st	Z, r12
	for(int i=0;i<array_length;i++) new_array[++new_array_index]=arr[i];
    5f6a:	1c 16       	cp	r1, r28
    5f6c:	1d 06       	cpc	r1, r29
    5f6e:	6c f4       	brge	.+26     	; 0x5f8a <_ZN5Utils17arrint_shiftrightEPiii+0x48>
    5f70:	f7 01       	movw	r30, r14
    5f72:	dc 01       	movw	r26, r24
    5f74:	12 96       	adiw	r26, 0x02	; 2
    5f76:	b7 01       	movw	r22, r14
    5f78:	60 0f       	add	r22, r16
    5f7a:	71 1f       	adc	r23, r17
    5f7c:	21 91       	ld	r18, Z+
    5f7e:	31 91       	ld	r19, Z+
    5f80:	2d 93       	st	X+, r18
    5f82:	3d 93       	st	X+, r19
    5f84:	e6 17       	cp	r30, r22
    5f86:	f7 07       	cpc	r31, r23
    5f88:	c9 f7       	brne	.-14     	; 0x5f7c <_ZN5Utils17arrint_shiftrightEPiii+0x3a>
	return new_array;
    5f8a:	df 91       	pop	r29
    5f8c:	cf 91       	pop	r28
    5f8e:	1f 91       	pop	r17
    5f90:	0f 91       	pop	r16
    5f92:	ff 90       	pop	r15
    5f94:	ef 90       	pop	r14
    5f96:	df 90       	pop	r13
    5f98:	cf 90       	pop	r12
    5f9a:	08 95       	ret

00005f9c <acos>:
    5f9c:	9f 93       	push	r25
    5f9e:	9f 77       	andi	r25, 0x7F	; 127
    5fa0:	a6 d1       	rcall	.+844    	; 0x62ee <__fp_arccos>
    5fa2:	0f 90       	pop	r0
    5fa4:	00 20       	and	r0, r0
    5fa6:	3a f4       	brpl	.+14     	; 0x5fb6 <acos+0x1a>
    5fa8:	90 58       	subi	r25, 0x80	; 128
    5faa:	a2 ea       	ldi	r26, 0xA2	; 162
    5fac:	2a ed       	ldi	r18, 0xDA	; 218
    5fae:	3f e0       	ldi	r19, 0x0F	; 15
    5fb0:	49 e4       	ldi	r20, 0x49	; 73
    5fb2:	50 e4       	ldi	r21, 0x40	; 64
    5fb4:	13 d0       	rcall	.+38     	; 0x5fdc <__addsf3x>
    5fb6:	3e c2       	rjmp	.+1148   	; 0x6434 <__fp_round>

00005fb8 <__subsf3>:
    5fb8:	50 58       	subi	r21, 0x80	; 128

00005fba <__addsf3>:
    5fba:	bb 27       	eor	r27, r27
    5fbc:	aa 27       	eor	r26, r26
    5fbe:	0e d0       	rcall	.+28     	; 0x5fdc <__addsf3x>
    5fc0:	39 c2       	rjmp	.+1138   	; 0x6434 <__fp_round>
    5fc2:	02 d2       	rcall	.+1028   	; 0x63c8 <__fp_pscA>
    5fc4:	30 f0       	brcs	.+12     	; 0x5fd2 <__addsf3+0x18>
    5fc6:	07 d2       	rcall	.+1038   	; 0x63d6 <__fp_pscB>
    5fc8:	20 f0       	brcs	.+8      	; 0x5fd2 <__addsf3+0x18>
    5fca:	31 f4       	brne	.+12     	; 0x5fd8 <__addsf3+0x1e>
    5fcc:	9f 3f       	cpi	r25, 0xFF	; 255
    5fce:	11 f4       	brne	.+4      	; 0x5fd4 <__addsf3+0x1a>
    5fd0:	1e f4       	brtc	.+6      	; 0x5fd8 <__addsf3+0x1e>
    5fd2:	d2 c1       	rjmp	.+932    	; 0x6378 <__fp_nan>
    5fd4:	0e f4       	brtc	.+2      	; 0x5fd8 <__addsf3+0x1e>
    5fd6:	e0 95       	com	r30
    5fd8:	e7 fb       	bst	r30, 7
    5fda:	c8 c1       	rjmp	.+912    	; 0x636c <__fp_inf>

00005fdc <__addsf3x>:
    5fdc:	e9 2f       	mov	r30, r25
    5fde:	4c d2       	rcall	.+1176   	; 0x6478 <__fp_split3>
    5fe0:	80 f3       	brcs	.-32     	; 0x5fc2 <__addsf3+0x8>
    5fe2:	ba 17       	cp	r27, r26
    5fe4:	62 07       	cpc	r22, r18
    5fe6:	73 07       	cpc	r23, r19
    5fe8:	84 07       	cpc	r24, r20
    5fea:	95 07       	cpc	r25, r21
    5fec:	18 f0       	brcs	.+6      	; 0x5ff4 <__addsf3x+0x18>
    5fee:	71 f4       	brne	.+28     	; 0x600c <__addsf3x+0x30>
    5ff0:	9e f5       	brtc	.+102    	; 0x6058 <__addsf3x+0x7c>
    5ff2:	64 c2       	rjmp	.+1224   	; 0x64bc <__fp_zero>
    5ff4:	0e f4       	brtc	.+2      	; 0x5ff8 <__addsf3x+0x1c>
    5ff6:	e0 95       	com	r30
    5ff8:	0b 2e       	mov	r0, r27
    5ffa:	ba 2f       	mov	r27, r26
    5ffc:	a0 2d       	mov	r26, r0
    5ffe:	0b 01       	movw	r0, r22
    6000:	b9 01       	movw	r22, r18
    6002:	90 01       	movw	r18, r0
    6004:	0c 01       	movw	r0, r24
    6006:	ca 01       	movw	r24, r20
    6008:	a0 01       	movw	r20, r0
    600a:	11 24       	eor	r1, r1
    600c:	ff 27       	eor	r31, r31
    600e:	59 1b       	sub	r21, r25
    6010:	99 f0       	breq	.+38     	; 0x6038 <__addsf3x+0x5c>
    6012:	59 3f       	cpi	r21, 0xF9	; 249
    6014:	50 f4       	brcc	.+20     	; 0x602a <__addsf3x+0x4e>
    6016:	50 3e       	cpi	r21, 0xE0	; 224
    6018:	68 f1       	brcs	.+90     	; 0x6074 <__addsf3x+0x98>
    601a:	1a 16       	cp	r1, r26
    601c:	f0 40       	sbci	r31, 0x00	; 0
    601e:	a2 2f       	mov	r26, r18
    6020:	23 2f       	mov	r18, r19
    6022:	34 2f       	mov	r19, r20
    6024:	44 27       	eor	r20, r20
    6026:	58 5f       	subi	r21, 0xF8	; 248
    6028:	f3 cf       	rjmp	.-26     	; 0x6010 <__addsf3x+0x34>
    602a:	46 95       	lsr	r20
    602c:	37 95       	ror	r19
    602e:	27 95       	ror	r18
    6030:	a7 95       	ror	r26
    6032:	f0 40       	sbci	r31, 0x00	; 0
    6034:	53 95       	inc	r21
    6036:	c9 f7       	brne	.-14     	; 0x602a <__addsf3x+0x4e>
    6038:	7e f4       	brtc	.+30     	; 0x6058 <__addsf3x+0x7c>
    603a:	1f 16       	cp	r1, r31
    603c:	ba 0b       	sbc	r27, r26
    603e:	62 0b       	sbc	r22, r18
    6040:	73 0b       	sbc	r23, r19
    6042:	84 0b       	sbc	r24, r20
    6044:	ba f0       	brmi	.+46     	; 0x6074 <__addsf3x+0x98>
    6046:	91 50       	subi	r25, 0x01	; 1
    6048:	a1 f0       	breq	.+40     	; 0x6072 <__addsf3x+0x96>
    604a:	ff 0f       	add	r31, r31
    604c:	bb 1f       	adc	r27, r27
    604e:	66 1f       	adc	r22, r22
    6050:	77 1f       	adc	r23, r23
    6052:	88 1f       	adc	r24, r24
    6054:	c2 f7       	brpl	.-16     	; 0x6046 <__addsf3x+0x6a>
    6056:	0e c0       	rjmp	.+28     	; 0x6074 <__addsf3x+0x98>
    6058:	ba 0f       	add	r27, r26
    605a:	62 1f       	adc	r22, r18
    605c:	73 1f       	adc	r23, r19
    605e:	84 1f       	adc	r24, r20
    6060:	48 f4       	brcc	.+18     	; 0x6074 <__addsf3x+0x98>
    6062:	87 95       	ror	r24
    6064:	77 95       	ror	r23
    6066:	67 95       	ror	r22
    6068:	b7 95       	ror	r27
    606a:	f7 95       	ror	r31
    606c:	9e 3f       	cpi	r25, 0xFE	; 254
    606e:	08 f0       	brcs	.+2      	; 0x6072 <__addsf3x+0x96>
    6070:	b3 cf       	rjmp	.-154    	; 0x5fd8 <__addsf3+0x1e>
    6072:	93 95       	inc	r25
    6074:	88 0f       	add	r24, r24
    6076:	08 f0       	brcs	.+2      	; 0x607a <__addsf3x+0x9e>
    6078:	99 27       	eor	r25, r25
    607a:	ee 0f       	add	r30, r30
    607c:	97 95       	ror	r25
    607e:	87 95       	ror	r24
    6080:	08 95       	ret

00006082 <atan>:
    6082:	df 93       	push	r29
    6084:	dd 27       	eor	r29, r29
    6086:	b9 2f       	mov	r27, r25
    6088:	bf 77       	andi	r27, 0x7F	; 127
    608a:	40 e8       	ldi	r20, 0x80	; 128
    608c:	5f e3       	ldi	r21, 0x3F	; 63
    608e:	16 16       	cp	r1, r22
    6090:	17 06       	cpc	r1, r23
    6092:	48 07       	cpc	r20, r24
    6094:	5b 07       	cpc	r21, r27
    6096:	10 f4       	brcc	.+4      	; 0x609c <atan+0x1a>
    6098:	d9 2f       	mov	r29, r25
    609a:	1b d2       	rcall	.+1078   	; 0x64d2 <inverse>
    609c:	9f 93       	push	r25
    609e:	8f 93       	push	r24
    60a0:	7f 93       	push	r23
    60a2:	6f 93       	push	r22
    60a4:	76 d3       	rcall	.+1772   	; 0x6792 <square>
    60a6:	e6 ef       	ldi	r30, 0xF6	; 246
    60a8:	f0 e0       	ldi	r31, 0x00	; 0
    60aa:	69 d1       	rcall	.+722    	; 0x637e <__fp_powser>
    60ac:	c3 d1       	rcall	.+902    	; 0x6434 <__fp_round>
    60ae:	2f 91       	pop	r18
    60b0:	3f 91       	pop	r19
    60b2:	4f 91       	pop	r20
    60b4:	5f 91       	pop	r21
    60b6:	ce d2       	rcall	.+1436   	; 0x6654 <__mulsf3x>
    60b8:	dd 23       	and	r29, r29
    60ba:	49 f0       	breq	.+18     	; 0x60ce <atan+0x4c>
    60bc:	90 58       	subi	r25, 0x80	; 128
    60be:	a2 ea       	ldi	r26, 0xA2	; 162
    60c0:	2a ed       	ldi	r18, 0xDA	; 218
    60c2:	3f e0       	ldi	r19, 0x0F	; 15
    60c4:	49 ec       	ldi	r20, 0xC9	; 201
    60c6:	5f e3       	ldi	r21, 0x3F	; 63
    60c8:	d0 78       	andi	r29, 0x80	; 128
    60ca:	5d 27       	eor	r21, r29
    60cc:	87 df       	rcall	.-242    	; 0x5fdc <__addsf3x>
    60ce:	df 91       	pop	r29
    60d0:	b1 c1       	rjmp	.+866    	; 0x6434 <__fp_round>

000060d2 <__cmpsf2>:
    60d2:	28 d1       	rcall	.+592    	; 0x6324 <__fp_cmp>
    60d4:	08 f4       	brcc	.+2      	; 0x60d8 <__cmpsf2+0x6>
    60d6:	81 e0       	ldi	r24, 0x01	; 1
    60d8:	08 95       	ret

000060da <cos>:
    60da:	85 d1       	rcall	.+778    	; 0x63e6 <__fp_rempio2>
    60dc:	e3 95       	inc	r30
    60de:	bb c1       	rjmp	.+886    	; 0x6456 <__fp_sinus>

000060e0 <__divsf3>:
    60e0:	0c d0       	rcall	.+24     	; 0x60fa <__divsf3x>
    60e2:	a8 c1       	rjmp	.+848    	; 0x6434 <__fp_round>
    60e4:	78 d1       	rcall	.+752    	; 0x63d6 <__fp_pscB>
    60e6:	40 f0       	brcs	.+16     	; 0x60f8 <__divsf3+0x18>
    60e8:	6f d1       	rcall	.+734    	; 0x63c8 <__fp_pscA>
    60ea:	30 f0       	brcs	.+12     	; 0x60f8 <__divsf3+0x18>
    60ec:	21 f4       	brne	.+8      	; 0x60f6 <__divsf3+0x16>
    60ee:	5f 3f       	cpi	r21, 0xFF	; 255
    60f0:	19 f0       	breq	.+6      	; 0x60f8 <__divsf3+0x18>
    60f2:	3c c1       	rjmp	.+632    	; 0x636c <__fp_inf>
    60f4:	51 11       	cpse	r21, r1
    60f6:	e3 c1       	rjmp	.+966    	; 0x64be <__fp_szero>
    60f8:	3f c1       	rjmp	.+638    	; 0x6378 <__fp_nan>

000060fa <__divsf3x>:
    60fa:	be d1       	rcall	.+892    	; 0x6478 <__fp_split3>
    60fc:	98 f3       	brcs	.-26     	; 0x60e4 <__divsf3+0x4>

000060fe <__divsf3_pse>:
    60fe:	99 23       	and	r25, r25
    6100:	c9 f3       	breq	.-14     	; 0x60f4 <__divsf3+0x14>
    6102:	55 23       	and	r21, r21
    6104:	b1 f3       	breq	.-20     	; 0x60f2 <__divsf3+0x12>
    6106:	95 1b       	sub	r25, r21
    6108:	55 0b       	sbc	r21, r21
    610a:	bb 27       	eor	r27, r27
    610c:	aa 27       	eor	r26, r26
    610e:	62 17       	cp	r22, r18
    6110:	73 07       	cpc	r23, r19
    6112:	84 07       	cpc	r24, r20
    6114:	38 f0       	brcs	.+14     	; 0x6124 <__divsf3_pse+0x26>
    6116:	9f 5f       	subi	r25, 0xFF	; 255
    6118:	5f 4f       	sbci	r21, 0xFF	; 255
    611a:	22 0f       	add	r18, r18
    611c:	33 1f       	adc	r19, r19
    611e:	44 1f       	adc	r20, r20
    6120:	aa 1f       	adc	r26, r26
    6122:	a9 f3       	breq	.-22     	; 0x610e <__divsf3_pse+0x10>
    6124:	33 d0       	rcall	.+102    	; 0x618c <__divsf3_pse+0x8e>
    6126:	0e 2e       	mov	r0, r30
    6128:	3a f0       	brmi	.+14     	; 0x6138 <__divsf3_pse+0x3a>
    612a:	e0 e8       	ldi	r30, 0x80	; 128
    612c:	30 d0       	rcall	.+96     	; 0x618e <__divsf3_pse+0x90>
    612e:	91 50       	subi	r25, 0x01	; 1
    6130:	50 40       	sbci	r21, 0x00	; 0
    6132:	e6 95       	lsr	r30
    6134:	00 1c       	adc	r0, r0
    6136:	ca f7       	brpl	.-14     	; 0x612a <__divsf3_pse+0x2c>
    6138:	29 d0       	rcall	.+82     	; 0x618c <__divsf3_pse+0x8e>
    613a:	fe 2f       	mov	r31, r30
    613c:	27 d0       	rcall	.+78     	; 0x618c <__divsf3_pse+0x8e>
    613e:	66 0f       	add	r22, r22
    6140:	77 1f       	adc	r23, r23
    6142:	88 1f       	adc	r24, r24
    6144:	bb 1f       	adc	r27, r27
    6146:	26 17       	cp	r18, r22
    6148:	37 07       	cpc	r19, r23
    614a:	48 07       	cpc	r20, r24
    614c:	ab 07       	cpc	r26, r27
    614e:	b0 e8       	ldi	r27, 0x80	; 128
    6150:	09 f0       	breq	.+2      	; 0x6154 <__divsf3_pse+0x56>
    6152:	bb 0b       	sbc	r27, r27
    6154:	80 2d       	mov	r24, r0
    6156:	bf 01       	movw	r22, r30
    6158:	ff 27       	eor	r31, r31
    615a:	93 58       	subi	r25, 0x83	; 131
    615c:	5f 4f       	sbci	r21, 0xFF	; 255
    615e:	2a f0       	brmi	.+10     	; 0x616a <__divsf3_pse+0x6c>
    6160:	9e 3f       	cpi	r25, 0xFE	; 254
    6162:	51 05       	cpc	r21, r1
    6164:	68 f0       	brcs	.+26     	; 0x6180 <__divsf3_pse+0x82>
    6166:	02 c1       	rjmp	.+516    	; 0x636c <__fp_inf>
    6168:	aa c1       	rjmp	.+852    	; 0x64be <__fp_szero>
    616a:	5f 3f       	cpi	r21, 0xFF	; 255
    616c:	ec f3       	brlt	.-6      	; 0x6168 <__divsf3_pse+0x6a>
    616e:	98 3e       	cpi	r25, 0xE8	; 232
    6170:	dc f3       	brlt	.-10     	; 0x6168 <__divsf3_pse+0x6a>
    6172:	86 95       	lsr	r24
    6174:	77 95       	ror	r23
    6176:	67 95       	ror	r22
    6178:	b7 95       	ror	r27
    617a:	f7 95       	ror	r31
    617c:	9f 5f       	subi	r25, 0xFF	; 255
    617e:	c9 f7       	brne	.-14     	; 0x6172 <__divsf3_pse+0x74>
    6180:	88 0f       	add	r24, r24
    6182:	91 1d       	adc	r25, r1
    6184:	96 95       	lsr	r25
    6186:	87 95       	ror	r24
    6188:	97 f9       	bld	r25, 7
    618a:	08 95       	ret
    618c:	e1 e0       	ldi	r30, 0x01	; 1
    618e:	66 0f       	add	r22, r22
    6190:	77 1f       	adc	r23, r23
    6192:	88 1f       	adc	r24, r24
    6194:	bb 1f       	adc	r27, r27
    6196:	62 17       	cp	r22, r18
    6198:	73 07       	cpc	r23, r19
    619a:	84 07       	cpc	r24, r20
    619c:	ba 07       	cpc	r27, r26
    619e:	20 f0       	brcs	.+8      	; 0x61a8 <__divsf3_pse+0xaa>
    61a0:	62 1b       	sub	r22, r18
    61a2:	73 0b       	sbc	r23, r19
    61a4:	84 0b       	sbc	r24, r20
    61a6:	ba 0b       	sbc	r27, r26
    61a8:	ee 1f       	adc	r30, r30
    61aa:	88 f7       	brcc	.-30     	; 0x618e <__divsf3_pse+0x90>
    61ac:	e0 95       	com	r30
    61ae:	08 95       	ret
    61b0:	19 f4       	brne	.+6      	; 0x61b8 <__divsf3_pse+0xba>
    61b2:	0e f0       	brts	.+2      	; 0x61b6 <__divsf3_pse+0xb8>
    61b4:	db c0       	rjmp	.+438    	; 0x636c <__fp_inf>
    61b6:	82 c1       	rjmp	.+772    	; 0x64bc <__fp_zero>
    61b8:	df c0       	rjmp	.+446    	; 0x6378 <__fp_nan>

000061ba <exp>:
    61ba:	66 d1       	rcall	.+716    	; 0x6488 <__fp_splitA>
    61bc:	c8 f3       	brcs	.-14     	; 0x61b0 <__divsf3_pse+0xb2>
    61be:	96 38       	cpi	r25, 0x86	; 134
    61c0:	c0 f7       	brcc	.-16     	; 0x61b2 <__divsf3_pse+0xb4>
    61c2:	07 f8       	bld	r0, 7
    61c4:	0f 92       	push	r0
    61c6:	e8 94       	clt
    61c8:	2b e3       	ldi	r18, 0x3B	; 59
    61ca:	3a ea       	ldi	r19, 0xAA	; 170
    61cc:	48 eb       	ldi	r20, 0xB8	; 184
    61ce:	5f e7       	ldi	r21, 0x7F	; 127
    61d0:	43 d2       	rcall	.+1158   	; 0x6658 <__mulsf3_pse>
    61d2:	0f 92       	push	r0
    61d4:	0f 92       	push	r0
    61d6:	0f 92       	push	r0
    61d8:	4d b7       	in	r20, 0x3d	; 61
    61da:	5e b7       	in	r21, 0x3e	; 62
    61dc:	0f 92       	push	r0
    61de:	fb d1       	rcall	.+1014   	; 0x65d6 <modf>
    61e0:	e3 e2       	ldi	r30, 0x23	; 35
    61e2:	f1 e0       	ldi	r31, 0x01	; 1
    61e4:	cc d0       	rcall	.+408    	; 0x637e <__fp_powser>
    61e6:	4f 91       	pop	r20
    61e8:	5f 91       	pop	r21
    61ea:	ef 91       	pop	r30
    61ec:	ff 91       	pop	r31
    61ee:	e5 95       	asr	r30
    61f0:	ee 1f       	adc	r30, r30
    61f2:	ff 1f       	adc	r31, r31
    61f4:	49 f0       	breq	.+18     	; 0x6208 <exp+0x4e>
    61f6:	fe 57       	subi	r31, 0x7E	; 126
    61f8:	e0 68       	ori	r30, 0x80	; 128
    61fa:	44 27       	eor	r20, r20
    61fc:	ee 0f       	add	r30, r30
    61fe:	44 1f       	adc	r20, r20
    6200:	fa 95       	dec	r31
    6202:	e1 f7       	brne	.-8      	; 0x61fc <exp+0x42>
    6204:	41 95       	neg	r20
    6206:	55 0b       	sbc	r21, r21
    6208:	6d d1       	rcall	.+730    	; 0x64e4 <ldexp>
    620a:	0f 90       	pop	r0
    620c:	07 fe       	sbrs	r0, 7
    620e:	61 c1       	rjmp	.+706    	; 0x64d2 <inverse>
    6210:	08 95       	ret

00006212 <__fixsfsi>:
    6212:	04 d0       	rcall	.+8      	; 0x621c <__fixunssfsi>
    6214:	68 94       	set
    6216:	b1 11       	cpse	r27, r1
    6218:	52 c1       	rjmp	.+676    	; 0x64be <__fp_szero>
    621a:	08 95       	ret

0000621c <__fixunssfsi>:
    621c:	35 d1       	rcall	.+618    	; 0x6488 <__fp_splitA>
    621e:	88 f0       	brcs	.+34     	; 0x6242 <__fixunssfsi+0x26>
    6220:	9f 57       	subi	r25, 0x7F	; 127
    6222:	90 f0       	brcs	.+36     	; 0x6248 <__fixunssfsi+0x2c>
    6224:	b9 2f       	mov	r27, r25
    6226:	99 27       	eor	r25, r25
    6228:	b7 51       	subi	r27, 0x17	; 23
    622a:	a0 f0       	brcs	.+40     	; 0x6254 <__fixunssfsi+0x38>
    622c:	d1 f0       	breq	.+52     	; 0x6262 <__fixunssfsi+0x46>
    622e:	66 0f       	add	r22, r22
    6230:	77 1f       	adc	r23, r23
    6232:	88 1f       	adc	r24, r24
    6234:	99 1f       	adc	r25, r25
    6236:	1a f0       	brmi	.+6      	; 0x623e <__fixunssfsi+0x22>
    6238:	ba 95       	dec	r27
    623a:	c9 f7       	brne	.-14     	; 0x622e <__fixunssfsi+0x12>
    623c:	12 c0       	rjmp	.+36     	; 0x6262 <__fixunssfsi+0x46>
    623e:	b1 30       	cpi	r27, 0x01	; 1
    6240:	81 f0       	breq	.+32     	; 0x6262 <__fixunssfsi+0x46>
    6242:	3c d1       	rcall	.+632    	; 0x64bc <__fp_zero>
    6244:	b1 e0       	ldi	r27, 0x01	; 1
    6246:	08 95       	ret
    6248:	39 c1       	rjmp	.+626    	; 0x64bc <__fp_zero>
    624a:	67 2f       	mov	r22, r23
    624c:	78 2f       	mov	r23, r24
    624e:	88 27       	eor	r24, r24
    6250:	b8 5f       	subi	r27, 0xF8	; 248
    6252:	39 f0       	breq	.+14     	; 0x6262 <__fixunssfsi+0x46>
    6254:	b9 3f       	cpi	r27, 0xF9	; 249
    6256:	cc f3       	brlt	.-14     	; 0x624a <__fixunssfsi+0x2e>
    6258:	86 95       	lsr	r24
    625a:	77 95       	ror	r23
    625c:	67 95       	ror	r22
    625e:	b3 95       	inc	r27
    6260:	d9 f7       	brne	.-10     	; 0x6258 <__fixunssfsi+0x3c>
    6262:	3e f4       	brtc	.+14     	; 0x6272 <__fixunssfsi+0x56>
    6264:	90 95       	com	r25
    6266:	80 95       	com	r24
    6268:	70 95       	com	r23
    626a:	61 95       	neg	r22
    626c:	7f 4f       	sbci	r23, 0xFF	; 255
    626e:	8f 4f       	sbci	r24, 0xFF	; 255
    6270:	9f 4f       	sbci	r25, 0xFF	; 255
    6272:	08 95       	ret

00006274 <__floatunsisf>:
    6274:	e8 94       	clt
    6276:	09 c0       	rjmp	.+18     	; 0x628a <__floatsisf+0x12>

00006278 <__floatsisf>:
    6278:	97 fb       	bst	r25, 7
    627a:	3e f4       	brtc	.+14     	; 0x628a <__floatsisf+0x12>
    627c:	90 95       	com	r25
    627e:	80 95       	com	r24
    6280:	70 95       	com	r23
    6282:	61 95       	neg	r22
    6284:	7f 4f       	sbci	r23, 0xFF	; 255
    6286:	8f 4f       	sbci	r24, 0xFF	; 255
    6288:	9f 4f       	sbci	r25, 0xFF	; 255
    628a:	99 23       	and	r25, r25
    628c:	a9 f0       	breq	.+42     	; 0x62b8 <__floatsisf+0x40>
    628e:	f9 2f       	mov	r31, r25
    6290:	96 e9       	ldi	r25, 0x96	; 150
    6292:	bb 27       	eor	r27, r27
    6294:	93 95       	inc	r25
    6296:	f6 95       	lsr	r31
    6298:	87 95       	ror	r24
    629a:	77 95       	ror	r23
    629c:	67 95       	ror	r22
    629e:	b7 95       	ror	r27
    62a0:	f1 11       	cpse	r31, r1
    62a2:	f8 cf       	rjmp	.-16     	; 0x6294 <__floatsisf+0x1c>
    62a4:	fa f4       	brpl	.+62     	; 0x62e4 <__floatsisf+0x6c>
    62a6:	bb 0f       	add	r27, r27
    62a8:	11 f4       	brne	.+4      	; 0x62ae <__floatsisf+0x36>
    62aa:	60 ff       	sbrs	r22, 0
    62ac:	1b c0       	rjmp	.+54     	; 0x62e4 <__floatsisf+0x6c>
    62ae:	6f 5f       	subi	r22, 0xFF	; 255
    62b0:	7f 4f       	sbci	r23, 0xFF	; 255
    62b2:	8f 4f       	sbci	r24, 0xFF	; 255
    62b4:	9f 4f       	sbci	r25, 0xFF	; 255
    62b6:	16 c0       	rjmp	.+44     	; 0x62e4 <__floatsisf+0x6c>
    62b8:	88 23       	and	r24, r24
    62ba:	11 f0       	breq	.+4      	; 0x62c0 <__floatsisf+0x48>
    62bc:	96 e9       	ldi	r25, 0x96	; 150
    62be:	11 c0       	rjmp	.+34     	; 0x62e2 <__floatsisf+0x6a>
    62c0:	77 23       	and	r23, r23
    62c2:	21 f0       	breq	.+8      	; 0x62cc <__floatsisf+0x54>
    62c4:	9e e8       	ldi	r25, 0x8E	; 142
    62c6:	87 2f       	mov	r24, r23
    62c8:	76 2f       	mov	r23, r22
    62ca:	05 c0       	rjmp	.+10     	; 0x62d6 <__floatsisf+0x5e>
    62cc:	66 23       	and	r22, r22
    62ce:	71 f0       	breq	.+28     	; 0x62ec <__floatsisf+0x74>
    62d0:	96 e8       	ldi	r25, 0x86	; 134
    62d2:	86 2f       	mov	r24, r22
    62d4:	70 e0       	ldi	r23, 0x00	; 0
    62d6:	60 e0       	ldi	r22, 0x00	; 0
    62d8:	2a f0       	brmi	.+10     	; 0x62e4 <__floatsisf+0x6c>
    62da:	9a 95       	dec	r25
    62dc:	66 0f       	add	r22, r22
    62de:	77 1f       	adc	r23, r23
    62e0:	88 1f       	adc	r24, r24
    62e2:	da f7       	brpl	.-10     	; 0x62da <__floatsisf+0x62>
    62e4:	88 0f       	add	r24, r24
    62e6:	96 95       	lsr	r25
    62e8:	87 95       	ror	r24
    62ea:	97 f9       	bld	r25, 7
    62ec:	08 95       	ret

000062ee <__fp_arccos>:
    62ee:	df 93       	push	r29
    62f0:	cf 93       	push	r28
    62f2:	1f 93       	push	r17
    62f4:	0f 93       	push	r16
    62f6:	8b 01       	movw	r16, r22
    62f8:	ec 01       	movw	r28, r24
    62fa:	eb e4       	ldi	r30, 0x4B	; 75
    62fc:	f1 e0       	ldi	r31, 0x01	; 1
    62fe:	3f d0       	rcall	.+126    	; 0x637e <__fp_powser>
    6300:	99 d0       	rcall	.+306    	; 0x6434 <__fp_round>
    6302:	98 01       	movw	r18, r16
    6304:	ae 01       	movw	r20, r28
    6306:	8b 01       	movw	r16, r22
    6308:	ec 01       	movw	r28, r24
    630a:	60 e0       	ldi	r22, 0x00	; 0
    630c:	70 e0       	ldi	r23, 0x00	; 0
    630e:	80 e8       	ldi	r24, 0x80	; 128
    6310:	9f e3       	ldi	r25, 0x3F	; 63
    6312:	52 de       	rcall	.-860    	; 0x5fb8 <__subsf3>
    6314:	00 d2       	rcall	.+1024   	; 0x6716 <sqrt>
    6316:	98 01       	movw	r18, r16
    6318:	ae 01       	movw	r20, r28
    631a:	0f 91       	pop	r16
    631c:	1f 91       	pop	r17
    631e:	cf 91       	pop	r28
    6320:	df 91       	pop	r29
    6322:	98 c1       	rjmp	.+816    	; 0x6654 <__mulsf3x>

00006324 <__fp_cmp>:
    6324:	99 0f       	add	r25, r25
    6326:	00 08       	sbc	r0, r0
    6328:	55 0f       	add	r21, r21
    632a:	aa 0b       	sbc	r26, r26
    632c:	e0 e8       	ldi	r30, 0x80	; 128
    632e:	fe ef       	ldi	r31, 0xFE	; 254
    6330:	16 16       	cp	r1, r22
    6332:	17 06       	cpc	r1, r23
    6334:	e8 07       	cpc	r30, r24
    6336:	f9 07       	cpc	r31, r25
    6338:	c0 f0       	brcs	.+48     	; 0x636a <__fp_cmp+0x46>
    633a:	12 16       	cp	r1, r18
    633c:	13 06       	cpc	r1, r19
    633e:	e4 07       	cpc	r30, r20
    6340:	f5 07       	cpc	r31, r21
    6342:	98 f0       	brcs	.+38     	; 0x636a <__fp_cmp+0x46>
    6344:	62 1b       	sub	r22, r18
    6346:	73 0b       	sbc	r23, r19
    6348:	84 0b       	sbc	r24, r20
    634a:	95 0b       	sbc	r25, r21
    634c:	39 f4       	brne	.+14     	; 0x635c <__fp_cmp+0x38>
    634e:	0a 26       	eor	r0, r26
    6350:	61 f0       	breq	.+24     	; 0x636a <__fp_cmp+0x46>
    6352:	23 2b       	or	r18, r19
    6354:	24 2b       	or	r18, r20
    6356:	25 2b       	or	r18, r21
    6358:	21 f4       	brne	.+8      	; 0x6362 <__fp_cmp+0x3e>
    635a:	08 95       	ret
    635c:	0a 26       	eor	r0, r26
    635e:	09 f4       	brne	.+2      	; 0x6362 <__fp_cmp+0x3e>
    6360:	a1 40       	sbci	r26, 0x01	; 1
    6362:	a6 95       	lsr	r26
    6364:	8f ef       	ldi	r24, 0xFF	; 255
    6366:	81 1d       	adc	r24, r1
    6368:	81 1d       	adc	r24, r1
    636a:	08 95       	ret

0000636c <__fp_inf>:
    636c:	97 f9       	bld	r25, 7
    636e:	9f 67       	ori	r25, 0x7F	; 127
    6370:	80 e8       	ldi	r24, 0x80	; 128
    6372:	70 e0       	ldi	r23, 0x00	; 0
    6374:	60 e0       	ldi	r22, 0x00	; 0
    6376:	08 95       	ret

00006378 <__fp_nan>:
    6378:	9f ef       	ldi	r25, 0xFF	; 255
    637a:	80 ec       	ldi	r24, 0xC0	; 192
    637c:	08 95       	ret

0000637e <__fp_powser>:
    637e:	df 93       	push	r29
    6380:	cf 93       	push	r28
    6382:	1f 93       	push	r17
    6384:	0f 93       	push	r16
    6386:	ff 92       	push	r15
    6388:	ef 92       	push	r14
    638a:	df 92       	push	r13
    638c:	7b 01       	movw	r14, r22
    638e:	8c 01       	movw	r16, r24
    6390:	68 94       	set
    6392:	05 c0       	rjmp	.+10     	; 0x639e <__fp_powser+0x20>
    6394:	da 2e       	mov	r13, r26
    6396:	ef 01       	movw	r28, r30
    6398:	5d d1       	rcall	.+698    	; 0x6654 <__mulsf3x>
    639a:	fe 01       	movw	r30, r28
    639c:	e8 94       	clt
    639e:	a5 91       	lpm	r26, Z+
    63a0:	25 91       	lpm	r18, Z+
    63a2:	35 91       	lpm	r19, Z+
    63a4:	45 91       	lpm	r20, Z+
    63a6:	55 91       	lpm	r21, Z+
    63a8:	ae f3       	brts	.-22     	; 0x6394 <__fp_powser+0x16>
    63aa:	ef 01       	movw	r28, r30
    63ac:	17 de       	rcall	.-978    	; 0x5fdc <__addsf3x>
    63ae:	fe 01       	movw	r30, r28
    63b0:	97 01       	movw	r18, r14
    63b2:	a8 01       	movw	r20, r16
    63b4:	da 94       	dec	r13
    63b6:	79 f7       	brne	.-34     	; 0x6396 <__fp_powser+0x18>
    63b8:	df 90       	pop	r13
    63ba:	ef 90       	pop	r14
    63bc:	ff 90       	pop	r15
    63be:	0f 91       	pop	r16
    63c0:	1f 91       	pop	r17
    63c2:	cf 91       	pop	r28
    63c4:	df 91       	pop	r29
    63c6:	08 95       	ret

000063c8 <__fp_pscA>:
    63c8:	00 24       	eor	r0, r0
    63ca:	0a 94       	dec	r0
    63cc:	16 16       	cp	r1, r22
    63ce:	17 06       	cpc	r1, r23
    63d0:	18 06       	cpc	r1, r24
    63d2:	09 06       	cpc	r0, r25
    63d4:	08 95       	ret

000063d6 <__fp_pscB>:
    63d6:	00 24       	eor	r0, r0
    63d8:	0a 94       	dec	r0
    63da:	12 16       	cp	r1, r18
    63dc:	13 06       	cpc	r1, r19
    63de:	14 06       	cpc	r1, r20
    63e0:	05 06       	cpc	r0, r21
    63e2:	08 95       	ret
    63e4:	c9 cf       	rjmp	.-110    	; 0x6378 <__fp_nan>

000063e6 <__fp_rempio2>:
    63e6:	50 d0       	rcall	.+160    	; 0x6488 <__fp_splitA>
    63e8:	e8 f3       	brcs	.-6      	; 0x63e4 <__fp_pscB+0xe>
    63ea:	e8 94       	clt
    63ec:	e0 e0       	ldi	r30, 0x00	; 0
    63ee:	bb 27       	eor	r27, r27
    63f0:	9f 57       	subi	r25, 0x7F	; 127
    63f2:	f0 f0       	brcs	.+60     	; 0x6430 <__fp_rempio2+0x4a>
    63f4:	2a ed       	ldi	r18, 0xDA	; 218
    63f6:	3f e0       	ldi	r19, 0x0F	; 15
    63f8:	49 ec       	ldi	r20, 0xC9	; 201
    63fa:	06 c0       	rjmp	.+12     	; 0x6408 <__fp_rempio2+0x22>
    63fc:	ee 0f       	add	r30, r30
    63fe:	bb 0f       	add	r27, r27
    6400:	66 1f       	adc	r22, r22
    6402:	77 1f       	adc	r23, r23
    6404:	88 1f       	adc	r24, r24
    6406:	28 f0       	brcs	.+10     	; 0x6412 <__fp_rempio2+0x2c>
    6408:	b2 3a       	cpi	r27, 0xA2	; 162
    640a:	62 07       	cpc	r22, r18
    640c:	73 07       	cpc	r23, r19
    640e:	84 07       	cpc	r24, r20
    6410:	28 f0       	brcs	.+10     	; 0x641c <__fp_rempio2+0x36>
    6412:	b2 5a       	subi	r27, 0xA2	; 162
    6414:	62 0b       	sbc	r22, r18
    6416:	73 0b       	sbc	r23, r19
    6418:	84 0b       	sbc	r24, r20
    641a:	e3 95       	inc	r30
    641c:	9a 95       	dec	r25
    641e:	72 f7       	brpl	.-36     	; 0x63fc <__fp_rempio2+0x16>
    6420:	80 38       	cpi	r24, 0x80	; 128
    6422:	30 f4       	brcc	.+12     	; 0x6430 <__fp_rempio2+0x4a>
    6424:	9a 95       	dec	r25
    6426:	bb 0f       	add	r27, r27
    6428:	66 1f       	adc	r22, r22
    642a:	77 1f       	adc	r23, r23
    642c:	88 1f       	adc	r24, r24
    642e:	d2 f7       	brpl	.-12     	; 0x6424 <__fp_rempio2+0x3e>
    6430:	90 48       	sbci	r25, 0x80	; 128
    6432:	b4 c1       	rjmp	.+872    	; 0x679c <__fp_mpack_finite>

00006434 <__fp_round>:
    6434:	09 2e       	mov	r0, r25
    6436:	03 94       	inc	r0
    6438:	00 0c       	add	r0, r0
    643a:	11 f4       	brne	.+4      	; 0x6440 <__fp_round+0xc>
    643c:	88 23       	and	r24, r24
    643e:	52 f0       	brmi	.+20     	; 0x6454 <__fp_round+0x20>
    6440:	bb 0f       	add	r27, r27
    6442:	40 f4       	brcc	.+16     	; 0x6454 <__fp_round+0x20>
    6444:	bf 2b       	or	r27, r31
    6446:	11 f4       	brne	.+4      	; 0x644c <__fp_round+0x18>
    6448:	60 ff       	sbrs	r22, 0
    644a:	04 c0       	rjmp	.+8      	; 0x6454 <__fp_round+0x20>
    644c:	6f 5f       	subi	r22, 0xFF	; 255
    644e:	7f 4f       	sbci	r23, 0xFF	; 255
    6450:	8f 4f       	sbci	r24, 0xFF	; 255
    6452:	9f 4f       	sbci	r25, 0xFF	; 255
    6454:	08 95       	ret

00006456 <__fp_sinus>:
    6456:	ef 93       	push	r30
    6458:	e0 ff       	sbrs	r30, 0
    645a:	06 c0       	rjmp	.+12     	; 0x6468 <__fp_sinus+0x12>
    645c:	a2 ea       	ldi	r26, 0xA2	; 162
    645e:	2a ed       	ldi	r18, 0xDA	; 218
    6460:	3f e0       	ldi	r19, 0x0F	; 15
    6462:	49 ec       	ldi	r20, 0xC9	; 201
    6464:	5f eb       	ldi	r21, 0xBF	; 191
    6466:	ba dd       	rcall	.-1164   	; 0x5fdc <__addsf3x>
    6468:	e5 df       	rcall	.-54     	; 0x6434 <__fp_round>
    646a:	0f 90       	pop	r0
    646c:	03 94       	inc	r0
    646e:	01 fc       	sbrc	r0, 1
    6470:	90 58       	subi	r25, 0x80	; 128
    6472:	e3 e7       	ldi	r30, 0x73	; 115
    6474:	f1 e0       	ldi	r31, 0x01	; 1
    6476:	a5 c1       	rjmp	.+842    	; 0x67c2 <__fp_powsodd>

00006478 <__fp_split3>:
    6478:	57 fd       	sbrc	r21, 7
    647a:	90 58       	subi	r25, 0x80	; 128
    647c:	44 0f       	add	r20, r20
    647e:	55 1f       	adc	r21, r21
    6480:	59 f0       	breq	.+22     	; 0x6498 <__fp_splitA+0x10>
    6482:	5f 3f       	cpi	r21, 0xFF	; 255
    6484:	71 f0       	breq	.+28     	; 0x64a2 <__fp_splitA+0x1a>
    6486:	47 95       	ror	r20

00006488 <__fp_splitA>:
    6488:	88 0f       	add	r24, r24
    648a:	97 fb       	bst	r25, 7
    648c:	99 1f       	adc	r25, r25
    648e:	61 f0       	breq	.+24     	; 0x64a8 <__fp_splitA+0x20>
    6490:	9f 3f       	cpi	r25, 0xFF	; 255
    6492:	79 f0       	breq	.+30     	; 0x64b2 <__fp_splitA+0x2a>
    6494:	87 95       	ror	r24
    6496:	08 95       	ret
    6498:	12 16       	cp	r1, r18
    649a:	13 06       	cpc	r1, r19
    649c:	14 06       	cpc	r1, r20
    649e:	55 1f       	adc	r21, r21
    64a0:	f2 cf       	rjmp	.-28     	; 0x6486 <__fp_split3+0xe>
    64a2:	46 95       	lsr	r20
    64a4:	f1 df       	rcall	.-30     	; 0x6488 <__fp_splitA>
    64a6:	08 c0       	rjmp	.+16     	; 0x64b8 <__fp_splitA+0x30>
    64a8:	16 16       	cp	r1, r22
    64aa:	17 06       	cpc	r1, r23
    64ac:	18 06       	cpc	r1, r24
    64ae:	99 1f       	adc	r25, r25
    64b0:	f1 cf       	rjmp	.-30     	; 0x6494 <__fp_splitA+0xc>
    64b2:	86 95       	lsr	r24
    64b4:	71 05       	cpc	r23, r1
    64b6:	61 05       	cpc	r22, r1
    64b8:	08 94       	sec
    64ba:	08 95       	ret

000064bc <__fp_zero>:
    64bc:	e8 94       	clt

000064be <__fp_szero>:
    64be:	bb 27       	eor	r27, r27
    64c0:	66 27       	eor	r22, r22
    64c2:	77 27       	eor	r23, r23
    64c4:	cb 01       	movw	r24, r22
    64c6:	97 f9       	bld	r25, 7
    64c8:	08 95       	ret

000064ca <__gesf2>:
    64ca:	2c df       	rcall	.-424    	; 0x6324 <__fp_cmp>
    64cc:	08 f4       	brcc	.+2      	; 0x64d0 <__gesf2+0x6>
    64ce:	8f ef       	ldi	r24, 0xFF	; 255
    64d0:	08 95       	ret

000064d2 <inverse>:
    64d2:	9b 01       	movw	r18, r22
    64d4:	ac 01       	movw	r20, r24
    64d6:	60 e0       	ldi	r22, 0x00	; 0
    64d8:	70 e0       	ldi	r23, 0x00	; 0
    64da:	80 e8       	ldi	r24, 0x80	; 128
    64dc:	9f e3       	ldi	r25, 0x3F	; 63
    64de:	00 ce       	rjmp	.-1024   	; 0x60e0 <__divsf3>
    64e0:	45 cf       	rjmp	.-374    	; 0x636c <__fp_inf>
    64e2:	5a c1       	rjmp	.+692    	; 0x6798 <__fp_mpack>

000064e4 <ldexp>:
    64e4:	d1 df       	rcall	.-94     	; 0x6488 <__fp_splitA>
    64e6:	e8 f3       	brcs	.-6      	; 0x64e2 <inverse+0x10>
    64e8:	99 23       	and	r25, r25
    64ea:	d9 f3       	breq	.-10     	; 0x64e2 <inverse+0x10>
    64ec:	94 0f       	add	r25, r20
    64ee:	51 1d       	adc	r21, r1
    64f0:	bb f3       	brvs	.-18     	; 0x64e0 <inverse+0xe>
    64f2:	91 50       	subi	r25, 0x01	; 1
    64f4:	50 40       	sbci	r21, 0x00	; 0
    64f6:	94 f0       	brlt	.+36     	; 0x651c <ldexp+0x38>
    64f8:	59 f0       	breq	.+22     	; 0x6510 <ldexp+0x2c>
    64fa:	88 23       	and	r24, r24
    64fc:	32 f0       	brmi	.+12     	; 0x650a <ldexp+0x26>
    64fe:	66 0f       	add	r22, r22
    6500:	77 1f       	adc	r23, r23
    6502:	88 1f       	adc	r24, r24
    6504:	91 50       	subi	r25, 0x01	; 1
    6506:	50 40       	sbci	r21, 0x00	; 0
    6508:	c1 f7       	brne	.-16     	; 0x64fa <ldexp+0x16>
    650a:	9e 3f       	cpi	r25, 0xFE	; 254
    650c:	51 05       	cpc	r21, r1
    650e:	44 f7       	brge	.-48     	; 0x64e0 <inverse+0xe>
    6510:	88 0f       	add	r24, r24
    6512:	91 1d       	adc	r25, r1
    6514:	96 95       	lsr	r25
    6516:	87 95       	ror	r24
    6518:	97 f9       	bld	r25, 7
    651a:	08 95       	ret
    651c:	5f 3f       	cpi	r21, 0xFF	; 255
    651e:	ac f0       	brlt	.+42     	; 0x654a <ldexp+0x66>
    6520:	98 3e       	cpi	r25, 0xE8	; 232
    6522:	9c f0       	brlt	.+38     	; 0x654a <ldexp+0x66>
    6524:	bb 27       	eor	r27, r27
    6526:	86 95       	lsr	r24
    6528:	77 95       	ror	r23
    652a:	67 95       	ror	r22
    652c:	b7 95       	ror	r27
    652e:	08 f4       	brcc	.+2      	; 0x6532 <ldexp+0x4e>
    6530:	b1 60       	ori	r27, 0x01	; 1
    6532:	93 95       	inc	r25
    6534:	c1 f7       	brne	.-16     	; 0x6526 <ldexp+0x42>
    6536:	bb 0f       	add	r27, r27
    6538:	58 f7       	brcc	.-42     	; 0x6510 <ldexp+0x2c>
    653a:	11 f4       	brne	.+4      	; 0x6540 <ldexp+0x5c>
    653c:	60 ff       	sbrs	r22, 0
    653e:	e8 cf       	rjmp	.-48     	; 0x6510 <ldexp+0x2c>
    6540:	6f 5f       	subi	r22, 0xFF	; 255
    6542:	7f 4f       	sbci	r23, 0xFF	; 255
    6544:	8f 4f       	sbci	r24, 0xFF	; 255
    6546:	9f 4f       	sbci	r25, 0xFF	; 255
    6548:	e3 cf       	rjmp	.-58     	; 0x6510 <ldexp+0x2c>
    654a:	b9 cf       	rjmp	.-142    	; 0x64be <__fp_szero>
    654c:	0e f0       	brts	.+2      	; 0x6550 <ldexp+0x6c>
    654e:	24 c1       	rjmp	.+584    	; 0x6798 <__fp_mpack>
    6550:	13 cf       	rjmp	.-474    	; 0x6378 <__fp_nan>
    6552:	68 94       	set
    6554:	0b cf       	rjmp	.-490    	; 0x636c <__fp_inf>

00006556 <log>:
    6556:	98 df       	rcall	.-208    	; 0x6488 <__fp_splitA>
    6558:	c8 f3       	brcs	.-14     	; 0x654c <ldexp+0x68>
    655a:	99 23       	and	r25, r25
    655c:	d1 f3       	breq	.-12     	; 0x6552 <ldexp+0x6e>
    655e:	c6 f3       	brts	.-16     	; 0x6550 <ldexp+0x6c>
    6560:	df 93       	push	r29
    6562:	cf 93       	push	r28
    6564:	1f 93       	push	r17
    6566:	0f 93       	push	r16
    6568:	ff 92       	push	r15
    656a:	c9 2f       	mov	r28, r25
    656c:	dd 27       	eor	r29, r29
    656e:	88 23       	and	r24, r24
    6570:	2a f0       	brmi	.+10     	; 0x657c <log+0x26>
    6572:	21 97       	sbiw	r28, 0x01	; 1
    6574:	66 0f       	add	r22, r22
    6576:	77 1f       	adc	r23, r23
    6578:	88 1f       	adc	r24, r24
    657a:	da f7       	brpl	.-10     	; 0x6572 <log+0x1c>
    657c:	20 e0       	ldi	r18, 0x00	; 0
    657e:	30 e0       	ldi	r19, 0x00	; 0
    6580:	40 e8       	ldi	r20, 0x80	; 128
    6582:	5f eb       	ldi	r21, 0xBF	; 191
    6584:	9f e3       	ldi	r25, 0x3F	; 63
    6586:	88 39       	cpi	r24, 0x98	; 152
    6588:	20 f0       	brcs	.+8      	; 0x6592 <log+0x3c>
    658a:	80 3e       	cpi	r24, 0xE0	; 224
    658c:	30 f0       	brcs	.+12     	; 0x659a <log+0x44>
    658e:	21 96       	adiw	r28, 0x01	; 1
    6590:	8f 77       	andi	r24, 0x7F	; 127
    6592:	13 dd       	rcall	.-1498   	; 0x5fba <__addsf3>
    6594:	e1 e9       	ldi	r30, 0x91	; 145
    6596:	f1 e0       	ldi	r31, 0x01	; 1
    6598:	03 c0       	rjmp	.+6      	; 0x65a0 <log+0x4a>
    659a:	0f dd       	rcall	.-1506   	; 0x5fba <__addsf3>
    659c:	ee eb       	ldi	r30, 0xBE	; 190
    659e:	f1 e0       	ldi	r31, 0x01	; 1
    65a0:	ee de       	rcall	.-548    	; 0x637e <__fp_powser>
    65a2:	8b 01       	movw	r16, r22
    65a4:	be 01       	movw	r22, r28
    65a6:	ec 01       	movw	r28, r24
    65a8:	fb 2e       	mov	r15, r27
    65aa:	6f 57       	subi	r22, 0x7F	; 127
    65ac:	71 09       	sbc	r23, r1
    65ae:	75 95       	asr	r23
    65b0:	77 1f       	adc	r23, r23
    65b2:	88 0b       	sbc	r24, r24
    65b4:	99 0b       	sbc	r25, r25
    65b6:	60 de       	rcall	.-832    	; 0x6278 <__floatsisf>
    65b8:	28 e1       	ldi	r18, 0x18	; 24
    65ba:	32 e7       	ldi	r19, 0x72	; 114
    65bc:	41 e3       	ldi	r20, 0x31	; 49
    65be:	5f e3       	ldi	r21, 0x3F	; 63
    65c0:	49 d0       	rcall	.+146    	; 0x6654 <__mulsf3x>
    65c2:	af 2d       	mov	r26, r15
    65c4:	98 01       	movw	r18, r16
    65c6:	ae 01       	movw	r20, r28
    65c8:	ff 90       	pop	r15
    65ca:	0f 91       	pop	r16
    65cc:	1f 91       	pop	r17
    65ce:	cf 91       	pop	r28
    65d0:	df 91       	pop	r29
    65d2:	04 dd       	rcall	.-1528   	; 0x5fdc <__addsf3x>
    65d4:	2f cf       	rjmp	.-418    	; 0x6434 <__fp_round>

000065d6 <modf>:
    65d6:	fa 01       	movw	r30, r20
    65d8:	dc 01       	movw	r26, r24
    65da:	aa 0f       	add	r26, r26
    65dc:	bb 1f       	adc	r27, r27
    65de:	9b 01       	movw	r18, r22
    65e0:	ac 01       	movw	r20, r24
    65e2:	bf 57       	subi	r27, 0x7F	; 127
    65e4:	28 f4       	brcc	.+10     	; 0x65f0 <modf+0x1a>
    65e6:	22 27       	eor	r18, r18
    65e8:	33 27       	eor	r19, r19
    65ea:	44 27       	eor	r20, r20
    65ec:	50 78       	andi	r21, 0x80	; 128
    65ee:	1f c0       	rjmp	.+62     	; 0x662e <modf+0x58>
    65f0:	b7 51       	subi	r27, 0x17	; 23
    65f2:	88 f4       	brcc	.+34     	; 0x6616 <modf+0x40>
    65f4:	ab 2f       	mov	r26, r27
    65f6:	00 24       	eor	r0, r0
    65f8:	46 95       	lsr	r20
    65fa:	37 95       	ror	r19
    65fc:	27 95       	ror	r18
    65fe:	01 1c       	adc	r0, r1
    6600:	a3 95       	inc	r26
    6602:	d2 f3       	brmi	.-12     	; 0x65f8 <modf+0x22>
    6604:	00 20       	and	r0, r0
    6606:	69 f0       	breq	.+26     	; 0x6622 <modf+0x4c>
    6608:	22 0f       	add	r18, r18
    660a:	33 1f       	adc	r19, r19
    660c:	44 1f       	adc	r20, r20
    660e:	b3 95       	inc	r27
    6610:	da f3       	brmi	.-10     	; 0x6608 <modf+0x32>
    6612:	0d d0       	rcall	.+26     	; 0x662e <modf+0x58>
    6614:	d1 cc       	rjmp	.-1630   	; 0x5fb8 <__subsf3>
    6616:	61 30       	cpi	r22, 0x01	; 1
    6618:	71 05       	cpc	r23, r1
    661a:	a0 e8       	ldi	r26, 0x80	; 128
    661c:	8a 07       	cpc	r24, r26
    661e:	b9 46       	sbci	r27, 0x69	; 105
    6620:	30 f4       	brcc	.+12     	; 0x662e <modf+0x58>
    6622:	9b 01       	movw	r18, r22
    6624:	ac 01       	movw	r20, r24
    6626:	66 27       	eor	r22, r22
    6628:	77 27       	eor	r23, r23
    662a:	88 27       	eor	r24, r24
    662c:	90 78       	andi	r25, 0x80	; 128
    662e:	30 96       	adiw	r30, 0x00	; 0
    6630:	21 f0       	breq	.+8      	; 0x663a <modf+0x64>
    6632:	20 83       	st	Z, r18
    6634:	31 83       	std	Z+1, r19	; 0x01
    6636:	42 83       	std	Z+2, r20	; 0x02
    6638:	53 83       	std	Z+3, r21	; 0x03
    663a:	08 95       	ret

0000663c <__mulsf3>:
    663c:	0b d0       	rcall	.+22     	; 0x6654 <__mulsf3x>
    663e:	fa ce       	rjmp	.-524    	; 0x6434 <__fp_round>
    6640:	c3 de       	rcall	.-634    	; 0x63c8 <__fp_pscA>
    6642:	28 f0       	brcs	.+10     	; 0x664e <__mulsf3+0x12>
    6644:	c8 de       	rcall	.-624    	; 0x63d6 <__fp_pscB>
    6646:	18 f0       	brcs	.+6      	; 0x664e <__mulsf3+0x12>
    6648:	95 23       	and	r25, r21
    664a:	09 f0       	breq	.+2      	; 0x664e <__mulsf3+0x12>
    664c:	8f ce       	rjmp	.-738    	; 0x636c <__fp_inf>
    664e:	94 ce       	rjmp	.-728    	; 0x6378 <__fp_nan>
    6650:	11 24       	eor	r1, r1
    6652:	35 cf       	rjmp	.-406    	; 0x64be <__fp_szero>

00006654 <__mulsf3x>:
    6654:	11 df       	rcall	.-478    	; 0x6478 <__fp_split3>
    6656:	a0 f3       	brcs	.-24     	; 0x6640 <__mulsf3+0x4>

00006658 <__mulsf3_pse>:
    6658:	95 9f       	mul	r25, r21
    665a:	d1 f3       	breq	.-12     	; 0x6650 <__mulsf3+0x14>
    665c:	95 0f       	add	r25, r21
    665e:	50 e0       	ldi	r21, 0x00	; 0
    6660:	55 1f       	adc	r21, r21
    6662:	62 9f       	mul	r22, r18
    6664:	f0 01       	movw	r30, r0
    6666:	72 9f       	mul	r23, r18
    6668:	bb 27       	eor	r27, r27
    666a:	f0 0d       	add	r31, r0
    666c:	b1 1d       	adc	r27, r1
    666e:	63 9f       	mul	r22, r19
    6670:	aa 27       	eor	r26, r26
    6672:	f0 0d       	add	r31, r0
    6674:	b1 1d       	adc	r27, r1
    6676:	aa 1f       	adc	r26, r26
    6678:	64 9f       	mul	r22, r20
    667a:	66 27       	eor	r22, r22
    667c:	b0 0d       	add	r27, r0
    667e:	a1 1d       	adc	r26, r1
    6680:	66 1f       	adc	r22, r22
    6682:	82 9f       	mul	r24, r18
    6684:	22 27       	eor	r18, r18
    6686:	b0 0d       	add	r27, r0
    6688:	a1 1d       	adc	r26, r1
    668a:	62 1f       	adc	r22, r18
    668c:	73 9f       	mul	r23, r19
    668e:	b0 0d       	add	r27, r0
    6690:	a1 1d       	adc	r26, r1
    6692:	62 1f       	adc	r22, r18
    6694:	83 9f       	mul	r24, r19
    6696:	a0 0d       	add	r26, r0
    6698:	61 1d       	adc	r22, r1
    669a:	22 1f       	adc	r18, r18
    669c:	74 9f       	mul	r23, r20
    669e:	33 27       	eor	r19, r19
    66a0:	a0 0d       	add	r26, r0
    66a2:	61 1d       	adc	r22, r1
    66a4:	23 1f       	adc	r18, r19
    66a6:	84 9f       	mul	r24, r20
    66a8:	60 0d       	add	r22, r0
    66aa:	21 1d       	adc	r18, r1
    66ac:	82 2f       	mov	r24, r18
    66ae:	76 2f       	mov	r23, r22
    66b0:	6a 2f       	mov	r22, r26
    66b2:	11 24       	eor	r1, r1
    66b4:	9f 57       	subi	r25, 0x7F	; 127
    66b6:	50 40       	sbci	r21, 0x00	; 0
    66b8:	8a f0       	brmi	.+34     	; 0x66dc <__mulsf3_pse+0x84>
    66ba:	e1 f0       	breq	.+56     	; 0x66f4 <__mulsf3_pse+0x9c>
    66bc:	88 23       	and	r24, r24
    66be:	4a f0       	brmi	.+18     	; 0x66d2 <__mulsf3_pse+0x7a>
    66c0:	ee 0f       	add	r30, r30
    66c2:	ff 1f       	adc	r31, r31
    66c4:	bb 1f       	adc	r27, r27
    66c6:	66 1f       	adc	r22, r22
    66c8:	77 1f       	adc	r23, r23
    66ca:	88 1f       	adc	r24, r24
    66cc:	91 50       	subi	r25, 0x01	; 1
    66ce:	50 40       	sbci	r21, 0x00	; 0
    66d0:	a9 f7       	brne	.-22     	; 0x66bc <__mulsf3_pse+0x64>
    66d2:	9e 3f       	cpi	r25, 0xFE	; 254
    66d4:	51 05       	cpc	r21, r1
    66d6:	70 f0       	brcs	.+28     	; 0x66f4 <__mulsf3_pse+0x9c>
    66d8:	49 ce       	rjmp	.-878    	; 0x636c <__fp_inf>
    66da:	f1 ce       	rjmp	.-542    	; 0x64be <__fp_szero>
    66dc:	5f 3f       	cpi	r21, 0xFF	; 255
    66de:	ec f3       	brlt	.-6      	; 0x66da <__mulsf3_pse+0x82>
    66e0:	98 3e       	cpi	r25, 0xE8	; 232
    66e2:	dc f3       	brlt	.-10     	; 0x66da <__mulsf3_pse+0x82>
    66e4:	86 95       	lsr	r24
    66e6:	77 95       	ror	r23
    66e8:	67 95       	ror	r22
    66ea:	b7 95       	ror	r27
    66ec:	f7 95       	ror	r31
    66ee:	e7 95       	ror	r30
    66f0:	9f 5f       	subi	r25, 0xFF	; 255
    66f2:	c1 f7       	brne	.-16     	; 0x66e4 <__mulsf3_pse+0x8c>
    66f4:	fe 2b       	or	r31, r30
    66f6:	88 0f       	add	r24, r24
    66f8:	91 1d       	adc	r25, r1
    66fa:	96 95       	lsr	r25
    66fc:	87 95       	ror	r24
    66fe:	97 f9       	bld	r25, 7
    6700:	08 95       	ret

00006702 <sin>:
    6702:	9f 93       	push	r25
    6704:	70 de       	rcall	.-800    	; 0x63e6 <__fp_rempio2>
    6706:	0f 90       	pop	r0
    6708:	07 fc       	sbrc	r0, 7
    670a:	ee 5f       	subi	r30, 0xFE	; 254
    670c:	a4 ce       	rjmp	.-696    	; 0x6456 <__fp_sinus>
    670e:	11 f4       	brne	.+4      	; 0x6714 <sin+0x12>
    6710:	0e f4       	brtc	.+2      	; 0x6714 <sin+0x12>
    6712:	32 ce       	rjmp	.-924    	; 0x6378 <__fp_nan>
    6714:	41 c0       	rjmp	.+130    	; 0x6798 <__fp_mpack>

00006716 <sqrt>:
    6716:	b8 de       	rcall	.-656    	; 0x6488 <__fp_splitA>
    6718:	d0 f3       	brcs	.-12     	; 0x670e <sin+0xc>
    671a:	99 23       	and	r25, r25
    671c:	d9 f3       	breq	.-10     	; 0x6714 <sin+0x12>
    671e:	ce f3       	brts	.-14     	; 0x6712 <sin+0x10>
    6720:	9f 57       	subi	r25, 0x7F	; 127
    6722:	55 0b       	sbc	r21, r21
    6724:	87 ff       	sbrs	r24, 7
    6726:	46 d0       	rcall	.+140    	; 0x67b4 <__fp_norm2>
    6728:	00 24       	eor	r0, r0
    672a:	a0 e6       	ldi	r26, 0x60	; 96
    672c:	40 ea       	ldi	r20, 0xA0	; 160
    672e:	90 01       	movw	r18, r0
    6730:	80 58       	subi	r24, 0x80	; 128
    6732:	56 95       	lsr	r21
    6734:	97 95       	ror	r25
    6736:	28 f4       	brcc	.+10     	; 0x6742 <sqrt+0x2c>
    6738:	80 5c       	subi	r24, 0xC0	; 192
    673a:	66 0f       	add	r22, r22
    673c:	77 1f       	adc	r23, r23
    673e:	88 1f       	adc	r24, r24
    6740:	20 f0       	brcs	.+8      	; 0x674a <sqrt+0x34>
    6742:	26 17       	cp	r18, r22
    6744:	37 07       	cpc	r19, r23
    6746:	48 07       	cpc	r20, r24
    6748:	30 f4       	brcc	.+12     	; 0x6756 <sqrt+0x40>
    674a:	62 1b       	sub	r22, r18
    674c:	73 0b       	sbc	r23, r19
    674e:	84 0b       	sbc	r24, r20
    6750:	20 29       	or	r18, r0
    6752:	31 29       	or	r19, r1
    6754:	4a 2b       	or	r20, r26
    6756:	a6 95       	lsr	r26
    6758:	17 94       	ror	r1
    675a:	07 94       	ror	r0
    675c:	20 25       	eor	r18, r0
    675e:	31 25       	eor	r19, r1
    6760:	4a 27       	eor	r20, r26
    6762:	58 f7       	brcc	.-42     	; 0x673a <sqrt+0x24>
    6764:	66 0f       	add	r22, r22
    6766:	77 1f       	adc	r23, r23
    6768:	88 1f       	adc	r24, r24
    676a:	20 f0       	brcs	.+8      	; 0x6774 <sqrt+0x5e>
    676c:	26 17       	cp	r18, r22
    676e:	37 07       	cpc	r19, r23
    6770:	48 07       	cpc	r20, r24
    6772:	30 f4       	brcc	.+12     	; 0x6780 <sqrt+0x6a>
    6774:	62 0b       	sbc	r22, r18
    6776:	73 0b       	sbc	r23, r19
    6778:	84 0b       	sbc	r24, r20
    677a:	20 0d       	add	r18, r0
    677c:	31 1d       	adc	r19, r1
    677e:	41 1d       	adc	r20, r1
    6780:	a0 95       	com	r26
    6782:	81 f7       	brne	.-32     	; 0x6764 <sqrt+0x4e>
    6784:	b9 01       	movw	r22, r18
    6786:	84 2f       	mov	r24, r20
    6788:	91 58       	subi	r25, 0x81	; 129
    678a:	88 0f       	add	r24, r24
    678c:	96 95       	lsr	r25
    678e:	87 95       	ror	r24
    6790:	08 95       	ret

00006792 <square>:
    6792:	9b 01       	movw	r18, r22
    6794:	ac 01       	movw	r20, r24
    6796:	52 cf       	rjmp	.-348    	; 0x663c <__mulsf3>

00006798 <__fp_mpack>:
    6798:	9f 3f       	cpi	r25, 0xFF	; 255
    679a:	31 f0       	breq	.+12     	; 0x67a8 <__fp_mpack_finite+0xc>

0000679c <__fp_mpack_finite>:
    679c:	91 50       	subi	r25, 0x01	; 1
    679e:	20 f4       	brcc	.+8      	; 0x67a8 <__fp_mpack_finite+0xc>
    67a0:	87 95       	ror	r24
    67a2:	77 95       	ror	r23
    67a4:	67 95       	ror	r22
    67a6:	b7 95       	ror	r27
    67a8:	88 0f       	add	r24, r24
    67aa:	91 1d       	adc	r25, r1
    67ac:	96 95       	lsr	r25
    67ae:	87 95       	ror	r24
    67b0:	97 f9       	bld	r25, 7
    67b2:	08 95       	ret

000067b4 <__fp_norm2>:
    67b4:	91 50       	subi	r25, 0x01	; 1
    67b6:	50 40       	sbci	r21, 0x00	; 0
    67b8:	66 0f       	add	r22, r22
    67ba:	77 1f       	adc	r23, r23
    67bc:	88 1f       	adc	r24, r24
    67be:	d2 f7       	brpl	.-12     	; 0x67b4 <__fp_norm2>
    67c0:	08 95       	ret

000067c2 <__fp_powsodd>:
    67c2:	9f 93       	push	r25
    67c4:	8f 93       	push	r24
    67c6:	7f 93       	push	r23
    67c8:	6f 93       	push	r22
    67ca:	ff 93       	push	r31
    67cc:	ef 93       	push	r30
    67ce:	9b 01       	movw	r18, r22
    67d0:	ac 01       	movw	r20, r24
    67d2:	34 df       	rcall	.-408    	; 0x663c <__mulsf3>
    67d4:	ef 91       	pop	r30
    67d6:	ff 91       	pop	r31
    67d8:	d2 dd       	rcall	.-1116   	; 0x637e <__fp_powser>
    67da:	2f 91       	pop	r18
    67dc:	3f 91       	pop	r19
    67de:	4f 91       	pop	r20
    67e0:	5f 91       	pop	r21
    67e2:	2c cf       	rjmp	.-424    	; 0x663c <__mulsf3>

000067e4 <__divmodhi4>:
    67e4:	97 fb       	bst	r25, 7
    67e6:	07 2e       	mov	r0, r23
    67e8:	16 f4       	brtc	.+4      	; 0x67ee <__divmodhi4+0xa>
    67ea:	00 94       	com	r0
    67ec:	07 d0       	rcall	.+14     	; 0x67fc <__divmodhi4_neg1>
    67ee:	77 fd       	sbrc	r23, 7
    67f0:	09 d0       	rcall	.+18     	; 0x6804 <__divmodhi4_neg2>
    67f2:	0e 94 2b 34 	call	0x6856	; 0x6856 <__udivmodhi4>
    67f6:	07 fc       	sbrc	r0, 7
    67f8:	05 d0       	rcall	.+10     	; 0x6804 <__divmodhi4_neg2>
    67fa:	3e f4       	brtc	.+14     	; 0x680a <__divmodhi4_exit>

000067fc <__divmodhi4_neg1>:
    67fc:	90 95       	com	r25
    67fe:	81 95       	neg	r24
    6800:	9f 4f       	sbci	r25, 0xFF	; 255
    6802:	08 95       	ret

00006804 <__divmodhi4_neg2>:
    6804:	70 95       	com	r23
    6806:	61 95       	neg	r22
    6808:	7f 4f       	sbci	r23, 0xFF	; 255

0000680a <__divmodhi4_exit>:
    680a:	08 95       	ret

0000680c <__divmodsi4>:
    680c:	05 2e       	mov	r0, r21
    680e:	97 fb       	bst	r25, 7
    6810:	1e f4       	brtc	.+6      	; 0x6818 <__divmodsi4+0xc>
    6812:	00 94       	com	r0
    6814:	0e 94 1d 34 	call	0x683a	; 0x683a <__negsi2>
    6818:	57 fd       	sbrc	r21, 7
    681a:	07 d0       	rcall	.+14     	; 0x682a <__divmodsi4_neg2>
    681c:	0e 94 3f 34 	call	0x687e	; 0x687e <__udivmodsi4>
    6820:	07 fc       	sbrc	r0, 7
    6822:	03 d0       	rcall	.+6      	; 0x682a <__divmodsi4_neg2>
    6824:	4e f4       	brtc	.+18     	; 0x6838 <__divmodsi4_exit>
    6826:	0c 94 1d 34 	jmp	0x683a	; 0x683a <__negsi2>

0000682a <__divmodsi4_neg2>:
    682a:	50 95       	com	r21
    682c:	40 95       	com	r20
    682e:	30 95       	com	r19
    6830:	21 95       	neg	r18
    6832:	3f 4f       	sbci	r19, 0xFF	; 255
    6834:	4f 4f       	sbci	r20, 0xFF	; 255
    6836:	5f 4f       	sbci	r21, 0xFF	; 255

00006838 <__divmodsi4_exit>:
    6838:	08 95       	ret

0000683a <__negsi2>:
    683a:	90 95       	com	r25
    683c:	80 95       	com	r24
    683e:	70 95       	com	r23
    6840:	61 95       	neg	r22
    6842:	7f 4f       	sbci	r23, 0xFF	; 255
    6844:	8f 4f       	sbci	r24, 0xFF	; 255
    6846:	9f 4f       	sbci	r25, 0xFF	; 255
    6848:	08 95       	ret

0000684a <__tablejump2__>:
    684a:	ee 0f       	add	r30, r30
    684c:	ff 1f       	adc	r31, r31

0000684e <__tablejump__>:
    684e:	05 90       	lpm	r0, Z+
    6850:	f4 91       	lpm	r31, Z
    6852:	e0 2d       	mov	r30, r0
    6854:	09 94       	ijmp

00006856 <__udivmodhi4>:
    6856:	aa 1b       	sub	r26, r26
    6858:	bb 1b       	sub	r27, r27
    685a:	51 e1       	ldi	r21, 0x11	; 17
    685c:	07 c0       	rjmp	.+14     	; 0x686c <__udivmodhi4_ep>

0000685e <__udivmodhi4_loop>:
    685e:	aa 1f       	adc	r26, r26
    6860:	bb 1f       	adc	r27, r27
    6862:	a6 17       	cp	r26, r22
    6864:	b7 07       	cpc	r27, r23
    6866:	10 f0       	brcs	.+4      	; 0x686c <__udivmodhi4_ep>
    6868:	a6 1b       	sub	r26, r22
    686a:	b7 0b       	sbc	r27, r23

0000686c <__udivmodhi4_ep>:
    686c:	88 1f       	adc	r24, r24
    686e:	99 1f       	adc	r25, r25
    6870:	5a 95       	dec	r21
    6872:	a9 f7       	brne	.-22     	; 0x685e <__udivmodhi4_loop>
    6874:	80 95       	com	r24
    6876:	90 95       	com	r25
    6878:	bc 01       	movw	r22, r24
    687a:	cd 01       	movw	r24, r26
    687c:	08 95       	ret

0000687e <__udivmodsi4>:
    687e:	a1 e2       	ldi	r26, 0x21	; 33
    6880:	1a 2e       	mov	r1, r26
    6882:	aa 1b       	sub	r26, r26
    6884:	bb 1b       	sub	r27, r27
    6886:	fd 01       	movw	r30, r26
    6888:	0d c0       	rjmp	.+26     	; 0x68a4 <__udivmodsi4_ep>

0000688a <__udivmodsi4_loop>:
    688a:	aa 1f       	adc	r26, r26
    688c:	bb 1f       	adc	r27, r27
    688e:	ee 1f       	adc	r30, r30
    6890:	ff 1f       	adc	r31, r31
    6892:	a2 17       	cp	r26, r18
    6894:	b3 07       	cpc	r27, r19
    6896:	e4 07       	cpc	r30, r20
    6898:	f5 07       	cpc	r31, r21
    689a:	20 f0       	brcs	.+8      	; 0x68a4 <__udivmodsi4_ep>
    689c:	a2 1b       	sub	r26, r18
    689e:	b3 0b       	sbc	r27, r19
    68a0:	e4 0b       	sbc	r30, r20
    68a2:	f5 0b       	sbc	r31, r21

000068a4 <__udivmodsi4_ep>:
    68a4:	66 1f       	adc	r22, r22
    68a6:	77 1f       	adc	r23, r23
    68a8:	88 1f       	adc	r24, r24
    68aa:	99 1f       	adc	r25, r25
    68ac:	1a 94       	dec	r1
    68ae:	69 f7       	brne	.-38     	; 0x688a <__udivmodsi4_loop>
    68b0:	60 95       	com	r22
    68b2:	70 95       	com	r23
    68b4:	80 95       	com	r24
    68b6:	90 95       	com	r25
    68b8:	9b 01       	movw	r18, r22
    68ba:	ac 01       	movw	r20, r24
    68bc:	bd 01       	movw	r22, r26
    68be:	cf 01       	movw	r24, r30
    68c0:	08 95       	ret

000068c2 <malloc>:
    68c2:	cf 93       	push	r28
    68c4:	df 93       	push	r29
    68c6:	82 30       	cpi	r24, 0x02	; 2
    68c8:	91 05       	cpc	r25, r1
    68ca:	10 f4       	brcc	.+4      	; 0x68d0 <malloc+0xe>
    68cc:	82 e0       	ldi	r24, 0x02	; 2
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	e0 91 00 01 	lds	r30, 0x0100
    68d4:	f0 91 01 01 	lds	r31, 0x0101
    68d8:	20 e0       	ldi	r18, 0x00	; 0
    68da:	30 e0       	ldi	r19, 0x00	; 0
    68dc:	a0 e0       	ldi	r26, 0x00	; 0
    68de:	b0 e0       	ldi	r27, 0x00	; 0
    68e0:	30 97       	sbiw	r30, 0x00	; 0
    68e2:	39 f1       	breq	.+78     	; 0x6932 <malloc+0x70>
    68e4:	40 81       	ld	r20, Z
    68e6:	51 81       	ldd	r21, Z+1	; 0x01
    68e8:	48 17       	cp	r20, r24
    68ea:	59 07       	cpc	r21, r25
    68ec:	b8 f0       	brcs	.+46     	; 0x691c <malloc+0x5a>
    68ee:	48 17       	cp	r20, r24
    68f0:	59 07       	cpc	r21, r25
    68f2:	71 f4       	brne	.+28     	; 0x6910 <malloc+0x4e>
    68f4:	82 81       	ldd	r24, Z+2	; 0x02
    68f6:	93 81       	ldd	r25, Z+3	; 0x03
    68f8:	10 97       	sbiw	r26, 0x00	; 0
    68fa:	29 f0       	breq	.+10     	; 0x6906 <malloc+0x44>
    68fc:	13 96       	adiw	r26, 0x03	; 3
    68fe:	9c 93       	st	X, r25
    6900:	8e 93       	st	-X, r24
    6902:	12 97       	sbiw	r26, 0x02	; 2
    6904:	2c c0       	rjmp	.+88     	; 0x695e <malloc+0x9c>
    6906:	90 93 01 01 	sts	0x0101, r25
    690a:	80 93 00 01 	sts	0x0100, r24
    690e:	27 c0       	rjmp	.+78     	; 0x695e <malloc+0x9c>
    6910:	21 15       	cp	r18, r1
    6912:	31 05       	cpc	r19, r1
    6914:	31 f0       	breq	.+12     	; 0x6922 <malloc+0x60>
    6916:	42 17       	cp	r20, r18
    6918:	53 07       	cpc	r21, r19
    691a:	18 f0       	brcs	.+6      	; 0x6922 <malloc+0x60>
    691c:	a9 01       	movw	r20, r18
    691e:	db 01       	movw	r26, r22
    6920:	01 c0       	rjmp	.+2      	; 0x6924 <malloc+0x62>
    6922:	ef 01       	movw	r28, r30
    6924:	9a 01       	movw	r18, r20
    6926:	bd 01       	movw	r22, r26
    6928:	df 01       	movw	r26, r30
    692a:	02 80       	ldd	r0, Z+2	; 0x02
    692c:	f3 81       	ldd	r31, Z+3	; 0x03
    692e:	e0 2d       	mov	r30, r0
    6930:	d7 cf       	rjmp	.-82     	; 0x68e0 <malloc+0x1e>
    6932:	21 15       	cp	r18, r1
    6934:	31 05       	cpc	r19, r1
    6936:	f9 f0       	breq	.+62     	; 0x6976 <malloc+0xb4>
    6938:	28 1b       	sub	r18, r24
    693a:	39 0b       	sbc	r19, r25
    693c:	24 30       	cpi	r18, 0x04	; 4
    693e:	31 05       	cpc	r19, r1
    6940:	80 f4       	brcc	.+32     	; 0x6962 <malloc+0xa0>
    6942:	8a 81       	ldd	r24, Y+2	; 0x02
    6944:	9b 81       	ldd	r25, Y+3	; 0x03
    6946:	61 15       	cp	r22, r1
    6948:	71 05       	cpc	r23, r1
    694a:	21 f0       	breq	.+8      	; 0x6954 <malloc+0x92>
    694c:	fb 01       	movw	r30, r22
    694e:	93 83       	std	Z+3, r25	; 0x03
    6950:	82 83       	std	Z+2, r24	; 0x02
    6952:	04 c0       	rjmp	.+8      	; 0x695c <malloc+0x9a>
    6954:	90 93 01 01 	sts	0x0101, r25
    6958:	80 93 00 01 	sts	0x0100, r24
    695c:	fe 01       	movw	r30, r28
    695e:	32 96       	adiw	r30, 0x02	; 2
    6960:	44 c0       	rjmp	.+136    	; 0x69ea <malloc+0x128>
    6962:	fe 01       	movw	r30, r28
    6964:	e2 0f       	add	r30, r18
    6966:	f3 1f       	adc	r31, r19
    6968:	81 93       	st	Z+, r24
    696a:	91 93       	st	Z+, r25
    696c:	22 50       	subi	r18, 0x02	; 2
    696e:	31 09       	sbc	r19, r1
    6970:	39 83       	std	Y+1, r19	; 0x01
    6972:	28 83       	st	Y, r18
    6974:	3a c0       	rjmp	.+116    	; 0x69ea <malloc+0x128>
    6976:	20 91 fe 00 	lds	r18, 0x00FE
    697a:	30 91 ff 00 	lds	r19, 0x00FF
    697e:	23 2b       	or	r18, r19
    6980:	41 f4       	brne	.+16     	; 0x6992 <malloc+0xd0>
    6982:	20 91 62 00 	lds	r18, 0x0062
    6986:	30 91 63 00 	lds	r19, 0x0063
    698a:	30 93 ff 00 	sts	0x00FF, r19
    698e:	20 93 fe 00 	sts	0x00FE, r18
    6992:	20 91 60 00 	lds	r18, 0x0060
    6996:	30 91 61 00 	lds	r19, 0x0061
    699a:	21 15       	cp	r18, r1
    699c:	31 05       	cpc	r19, r1
    699e:	41 f4       	brne	.+16     	; 0x69b0 <malloc+0xee>
    69a0:	2d b7       	in	r18, 0x3d	; 61
    69a2:	3e b7       	in	r19, 0x3e	; 62
    69a4:	40 91 64 00 	lds	r20, 0x0064
    69a8:	50 91 65 00 	lds	r21, 0x0065
    69ac:	24 1b       	sub	r18, r20
    69ae:	35 0b       	sbc	r19, r21
    69b0:	e0 91 fe 00 	lds	r30, 0x00FE
    69b4:	f0 91 ff 00 	lds	r31, 0x00FF
    69b8:	e2 17       	cp	r30, r18
    69ba:	f3 07       	cpc	r31, r19
    69bc:	a0 f4       	brcc	.+40     	; 0x69e6 <malloc+0x124>
    69be:	2e 1b       	sub	r18, r30
    69c0:	3f 0b       	sbc	r19, r31
    69c2:	28 17       	cp	r18, r24
    69c4:	39 07       	cpc	r19, r25
    69c6:	78 f0       	brcs	.+30     	; 0x69e6 <malloc+0x124>
    69c8:	ac 01       	movw	r20, r24
    69ca:	4e 5f       	subi	r20, 0xFE	; 254
    69cc:	5f 4f       	sbci	r21, 0xFF	; 255
    69ce:	24 17       	cp	r18, r20
    69d0:	35 07       	cpc	r19, r21
    69d2:	48 f0       	brcs	.+18     	; 0x69e6 <malloc+0x124>
    69d4:	4e 0f       	add	r20, r30
    69d6:	5f 1f       	adc	r21, r31
    69d8:	50 93 ff 00 	sts	0x00FF, r21
    69dc:	40 93 fe 00 	sts	0x00FE, r20
    69e0:	81 93       	st	Z+, r24
    69e2:	91 93       	st	Z+, r25
    69e4:	02 c0       	rjmp	.+4      	; 0x69ea <malloc+0x128>
    69e6:	e0 e0       	ldi	r30, 0x00	; 0
    69e8:	f0 e0       	ldi	r31, 0x00	; 0
    69ea:	cf 01       	movw	r24, r30
    69ec:	df 91       	pop	r29
    69ee:	cf 91       	pop	r28
    69f0:	08 95       	ret

000069f2 <free>:
    69f2:	cf 93       	push	r28
    69f4:	df 93       	push	r29
    69f6:	00 97       	sbiw	r24, 0x00	; 0
    69f8:	09 f4       	brne	.+2      	; 0x69fc <free+0xa>
    69fa:	87 c0       	rjmp	.+270    	; 0x6b0a <free+0x118>
    69fc:	fc 01       	movw	r30, r24
    69fe:	32 97       	sbiw	r30, 0x02	; 2
    6a00:	13 82       	std	Z+3, r1	; 0x03
    6a02:	12 82       	std	Z+2, r1	; 0x02
    6a04:	c0 91 00 01 	lds	r28, 0x0100
    6a08:	d0 91 01 01 	lds	r29, 0x0101
    6a0c:	20 97       	sbiw	r28, 0x00	; 0
    6a0e:	81 f4       	brne	.+32     	; 0x6a30 <free+0x3e>
    6a10:	20 81       	ld	r18, Z
    6a12:	31 81       	ldd	r19, Z+1	; 0x01
    6a14:	28 0f       	add	r18, r24
    6a16:	39 1f       	adc	r19, r25
    6a18:	80 91 fe 00 	lds	r24, 0x00FE
    6a1c:	90 91 ff 00 	lds	r25, 0x00FF
    6a20:	82 17       	cp	r24, r18
    6a22:	93 07       	cpc	r25, r19
    6a24:	79 f5       	brne	.+94     	; 0x6a84 <free+0x92>
    6a26:	f0 93 ff 00 	sts	0x00FF, r31
    6a2a:	e0 93 fe 00 	sts	0x00FE, r30
    6a2e:	6d c0       	rjmp	.+218    	; 0x6b0a <free+0x118>
    6a30:	de 01       	movw	r26, r28
    6a32:	20 e0       	ldi	r18, 0x00	; 0
    6a34:	30 e0       	ldi	r19, 0x00	; 0
    6a36:	ae 17       	cp	r26, r30
    6a38:	bf 07       	cpc	r27, r31
    6a3a:	50 f4       	brcc	.+20     	; 0x6a50 <free+0x5e>
    6a3c:	12 96       	adiw	r26, 0x02	; 2
    6a3e:	4d 91       	ld	r20, X+
    6a40:	5c 91       	ld	r21, X
    6a42:	13 97       	sbiw	r26, 0x03	; 3
    6a44:	9d 01       	movw	r18, r26
    6a46:	41 15       	cp	r20, r1
    6a48:	51 05       	cpc	r21, r1
    6a4a:	09 f1       	breq	.+66     	; 0x6a8e <free+0x9c>
    6a4c:	da 01       	movw	r26, r20
    6a4e:	f3 cf       	rjmp	.-26     	; 0x6a36 <free+0x44>
    6a50:	b3 83       	std	Z+3, r27	; 0x03
    6a52:	a2 83       	std	Z+2, r26	; 0x02
    6a54:	40 81       	ld	r20, Z
    6a56:	51 81       	ldd	r21, Z+1	; 0x01
    6a58:	84 0f       	add	r24, r20
    6a5a:	95 1f       	adc	r25, r21
    6a5c:	8a 17       	cp	r24, r26
    6a5e:	9b 07       	cpc	r25, r27
    6a60:	71 f4       	brne	.+28     	; 0x6a7e <free+0x8c>
    6a62:	8d 91       	ld	r24, X+
    6a64:	9c 91       	ld	r25, X
    6a66:	11 97       	sbiw	r26, 0x01	; 1
    6a68:	84 0f       	add	r24, r20
    6a6a:	95 1f       	adc	r25, r21
    6a6c:	02 96       	adiw	r24, 0x02	; 2
    6a6e:	91 83       	std	Z+1, r25	; 0x01
    6a70:	80 83       	st	Z, r24
    6a72:	12 96       	adiw	r26, 0x02	; 2
    6a74:	8d 91       	ld	r24, X+
    6a76:	9c 91       	ld	r25, X
    6a78:	13 97       	sbiw	r26, 0x03	; 3
    6a7a:	93 83       	std	Z+3, r25	; 0x03
    6a7c:	82 83       	std	Z+2, r24	; 0x02
    6a7e:	21 15       	cp	r18, r1
    6a80:	31 05       	cpc	r19, r1
    6a82:	29 f4       	brne	.+10     	; 0x6a8e <free+0x9c>
    6a84:	f0 93 01 01 	sts	0x0101, r31
    6a88:	e0 93 00 01 	sts	0x0100, r30
    6a8c:	3e c0       	rjmp	.+124    	; 0x6b0a <free+0x118>
    6a8e:	d9 01       	movw	r26, r18
    6a90:	13 96       	adiw	r26, 0x03	; 3
    6a92:	fc 93       	st	X, r31
    6a94:	ee 93       	st	-X, r30
    6a96:	12 97       	sbiw	r26, 0x02	; 2
    6a98:	4d 91       	ld	r20, X+
    6a9a:	5d 91       	ld	r21, X+
    6a9c:	a4 0f       	add	r26, r20
    6a9e:	b5 1f       	adc	r27, r21
    6aa0:	ea 17       	cp	r30, r26
    6aa2:	fb 07       	cpc	r31, r27
    6aa4:	79 f4       	brne	.+30     	; 0x6ac4 <free+0xd2>
    6aa6:	80 81       	ld	r24, Z
    6aa8:	91 81       	ldd	r25, Z+1	; 0x01
    6aaa:	84 0f       	add	r24, r20
    6aac:	95 1f       	adc	r25, r21
    6aae:	02 96       	adiw	r24, 0x02	; 2
    6ab0:	d9 01       	movw	r26, r18
    6ab2:	11 96       	adiw	r26, 0x01	; 1
    6ab4:	9c 93       	st	X, r25
    6ab6:	8e 93       	st	-X, r24
    6ab8:	82 81       	ldd	r24, Z+2	; 0x02
    6aba:	93 81       	ldd	r25, Z+3	; 0x03
    6abc:	13 96       	adiw	r26, 0x03	; 3
    6abe:	9c 93       	st	X, r25
    6ac0:	8e 93       	st	-X, r24
    6ac2:	12 97       	sbiw	r26, 0x02	; 2
    6ac4:	e0 e0       	ldi	r30, 0x00	; 0
    6ac6:	f0 e0       	ldi	r31, 0x00	; 0
    6ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    6aca:	9b 81       	ldd	r25, Y+3	; 0x03
    6acc:	00 97       	sbiw	r24, 0x00	; 0
    6ace:	19 f0       	breq	.+6      	; 0x6ad6 <free+0xe4>
    6ad0:	fe 01       	movw	r30, r28
    6ad2:	ec 01       	movw	r28, r24
    6ad4:	f9 cf       	rjmp	.-14     	; 0x6ac8 <free+0xd6>
    6ad6:	ce 01       	movw	r24, r28
    6ad8:	02 96       	adiw	r24, 0x02	; 2
    6ada:	28 81       	ld	r18, Y
    6adc:	39 81       	ldd	r19, Y+1	; 0x01
    6ade:	82 0f       	add	r24, r18
    6ae0:	93 1f       	adc	r25, r19
    6ae2:	20 91 fe 00 	lds	r18, 0x00FE
    6ae6:	30 91 ff 00 	lds	r19, 0x00FF
    6aea:	28 17       	cp	r18, r24
    6aec:	39 07       	cpc	r19, r25
    6aee:	69 f4       	brne	.+26     	; 0x6b0a <free+0x118>
    6af0:	30 97       	sbiw	r30, 0x00	; 0
    6af2:	29 f4       	brne	.+10     	; 0x6afe <free+0x10c>
    6af4:	10 92 01 01 	sts	0x0101, r1
    6af8:	10 92 00 01 	sts	0x0100, r1
    6afc:	02 c0       	rjmp	.+4      	; 0x6b02 <free+0x110>
    6afe:	13 82       	std	Z+3, r1	; 0x03
    6b00:	12 82       	std	Z+2, r1	; 0x02
    6b02:	d0 93 ff 00 	sts	0x00FF, r29
    6b06:	c0 93 fe 00 	sts	0x00FE, r28
    6b0a:	df 91       	pop	r29
    6b0c:	cf 91       	pop	r28
    6b0e:	08 95       	ret

00006b10 <do_rand>:
    6b10:	8f 92       	push	r8
    6b12:	9f 92       	push	r9
    6b14:	af 92       	push	r10
    6b16:	bf 92       	push	r11
    6b18:	cf 92       	push	r12
    6b1a:	df 92       	push	r13
    6b1c:	ef 92       	push	r14
    6b1e:	ff 92       	push	r15
    6b20:	cf 93       	push	r28
    6b22:	df 93       	push	r29
    6b24:	ec 01       	movw	r28, r24
    6b26:	68 81       	ld	r22, Y
    6b28:	79 81       	ldd	r23, Y+1	; 0x01
    6b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    6b2e:	61 15       	cp	r22, r1
    6b30:	71 05       	cpc	r23, r1
    6b32:	81 05       	cpc	r24, r1
    6b34:	91 05       	cpc	r25, r1
    6b36:	21 f4       	brne	.+8      	; 0x6b40 <do_rand+0x30>
    6b38:	64 e2       	ldi	r22, 0x24	; 36
    6b3a:	79 ed       	ldi	r23, 0xD9	; 217
    6b3c:	8b e5       	ldi	r24, 0x5B	; 91
    6b3e:	97 e0       	ldi	r25, 0x07	; 7
    6b40:	2d e1       	ldi	r18, 0x1D	; 29
    6b42:	33 ef       	ldi	r19, 0xF3	; 243
    6b44:	41 e0       	ldi	r20, 0x01	; 1
    6b46:	50 e0       	ldi	r21, 0x00	; 0
    6b48:	0e 94 06 34 	call	0x680c	; 0x680c <__divmodsi4>
    6b4c:	49 01       	movw	r8, r18
    6b4e:	5a 01       	movw	r10, r20
    6b50:	9b 01       	movw	r18, r22
    6b52:	ac 01       	movw	r20, r24
    6b54:	a7 ea       	ldi	r26, 0xA7	; 167
    6b56:	b1 e4       	ldi	r27, 0x41	; 65
    6b58:	0e 94 07 3a 	call	0x740e	; 0x740e <__muluhisi3>
    6b5c:	6b 01       	movw	r12, r22
    6b5e:	7c 01       	movw	r14, r24
    6b60:	ac ee       	ldi	r26, 0xEC	; 236
    6b62:	b4 ef       	ldi	r27, 0xF4	; 244
    6b64:	a5 01       	movw	r20, r10
    6b66:	94 01       	movw	r18, r8
    6b68:	0e 94 15 3a 	call	0x742a	; 0x742a <__mulohisi3>
    6b6c:	c6 0e       	add	r12, r22
    6b6e:	d7 1e       	adc	r13, r23
    6b70:	e8 1e       	adc	r14, r24
    6b72:	f9 1e       	adc	r15, r25
    6b74:	f7 fe       	sbrs	r15, 7
    6b76:	06 c0       	rjmp	.+12     	; 0x6b84 <do_rand+0x74>
    6b78:	81 e0       	ldi	r24, 0x01	; 1
    6b7a:	c8 1a       	sub	r12, r24
    6b7c:	d1 08       	sbc	r13, r1
    6b7e:	e1 08       	sbc	r14, r1
    6b80:	80 e8       	ldi	r24, 0x80	; 128
    6b82:	f8 0a       	sbc	r15, r24
    6b84:	c8 82       	st	Y, r12
    6b86:	d9 82       	std	Y+1, r13	; 0x01
    6b88:	ea 82       	std	Y+2, r14	; 0x02
    6b8a:	fb 82       	std	Y+3, r15	; 0x03
    6b8c:	c6 01       	movw	r24, r12
    6b8e:	9f 77       	andi	r25, 0x7F	; 127
    6b90:	df 91       	pop	r29
    6b92:	cf 91       	pop	r28
    6b94:	ff 90       	pop	r15
    6b96:	ef 90       	pop	r14
    6b98:	df 90       	pop	r13
    6b9a:	cf 90       	pop	r12
    6b9c:	bf 90       	pop	r11
    6b9e:	af 90       	pop	r10
    6ba0:	9f 90       	pop	r9
    6ba2:	8f 90       	pop	r8
    6ba4:	08 95       	ret

00006ba6 <rand_r>:
    6ba6:	0e 94 88 35 	call	0x6b10	; 0x6b10 <do_rand>
    6baa:	08 95       	ret

00006bac <rand>:
    6bac:	86 e6       	ldi	r24, 0x66	; 102
    6bae:	90 e0       	ldi	r25, 0x00	; 0
    6bb0:	0e 94 88 35 	call	0x6b10	; 0x6b10 <do_rand>
    6bb4:	08 95       	ret

00006bb6 <srand>:
    6bb6:	a0 e0       	ldi	r26, 0x00	; 0
    6bb8:	b0 e0       	ldi	r27, 0x00	; 0
    6bba:	80 93 66 00 	sts	0x0066, r24
    6bbe:	90 93 67 00 	sts	0x0067, r25
    6bc2:	a0 93 68 00 	sts	0x0068, r26
    6bc6:	b0 93 69 00 	sts	0x0069, r27
    6bca:	08 95       	ret

00006bcc <strtol>:
    6bcc:	2f 92       	push	r2
    6bce:	3f 92       	push	r3
    6bd0:	5f 92       	push	r5
    6bd2:	6f 92       	push	r6
    6bd4:	7f 92       	push	r7
    6bd6:	8f 92       	push	r8
    6bd8:	9f 92       	push	r9
    6bda:	af 92       	push	r10
    6bdc:	bf 92       	push	r11
    6bde:	cf 92       	push	r12
    6be0:	df 92       	push	r13
    6be2:	ef 92       	push	r14
    6be4:	ff 92       	push	r15
    6be6:	0f 93       	push	r16
    6be8:	1f 93       	push	r17
    6bea:	cf 93       	push	r28
    6bec:	df 93       	push	r29
    6bee:	8b 01       	movw	r16, r22
    6bf0:	ea 01       	movw	r28, r20
    6bf2:	61 15       	cp	r22, r1
    6bf4:	71 05       	cpc	r23, r1
    6bf6:	21 f0       	breq	.+8      	; 0x6c00 <strtol+0x34>
    6bf8:	db 01       	movw	r26, r22
    6bfa:	8c 93       	st	X, r24
    6bfc:	11 96       	adiw	r26, 0x01	; 1
    6bfe:	9c 93       	st	X, r25
    6c00:	20 97       	sbiw	r28, 0x00	; 0
    6c02:	39 f0       	breq	.+14     	; 0x6c12 <strtol+0x46>
    6c04:	9e 01       	movw	r18, r28
    6c06:	22 50       	subi	r18, 0x02	; 2
    6c08:	31 09       	sbc	r19, r1
    6c0a:	23 32       	cpi	r18, 0x23	; 35
    6c0c:	31 05       	cpc	r19, r1
    6c0e:	08 f0       	brcs	.+2      	; 0x6c12 <strtol+0x46>
    6c10:	fb c0       	rjmp	.+502    	; 0x6e08 <strtol+0x23c>
    6c12:	7c 01       	movw	r14, r24
    6c14:	67 01       	movw	r12, r14
    6c16:	bf ef       	ldi	r27, 0xFF	; 255
    6c18:	cb 1a       	sub	r12, r27
    6c1a:	db 0a       	sbc	r13, r27
    6c1c:	56 01       	movw	r10, r12
    6c1e:	f7 01       	movw	r30, r14
    6c20:	60 80       	ld	r6, Z
    6c22:	86 2d       	mov	r24, r6
    6c24:	90 e0       	ldi	r25, 0x00	; 0
    6c26:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <isspace>
    6c2a:	89 2b       	or	r24, r25
    6c2c:	11 f0       	breq	.+4      	; 0x6c32 <strtol+0x66>
    6c2e:	76 01       	movw	r14, r12
    6c30:	f1 cf       	rjmp	.-30     	; 0x6c14 <strtol+0x48>
    6c32:	fd e2       	ldi	r31, 0x2D	; 45
    6c34:	6f 12       	cpse	r6, r31
    6c36:	0a c0       	rjmp	.+20     	; 0x6c4c <strtol+0x80>
    6c38:	57 01       	movw	r10, r14
    6c3a:	82 e0       	ldi	r24, 0x02	; 2
    6c3c:	a8 0e       	add	r10, r24
    6c3e:	b1 1c       	adc	r11, r1
    6c40:	d7 01       	movw	r26, r14
    6c42:	11 96       	adiw	r26, 0x01	; 1
    6c44:	6c 90       	ld	r6, X
    6c46:	77 24       	eor	r7, r7
    6c48:	73 94       	inc	r7
    6c4a:	0b c0       	rjmp	.+22     	; 0x6c62 <strtol+0x96>
    6c4c:	bb e2       	ldi	r27, 0x2B	; 43
    6c4e:	6b 12       	cpse	r6, r27
    6c50:	07 c0       	rjmp	.+14     	; 0x6c60 <strtol+0x94>
    6c52:	57 01       	movw	r10, r14
    6c54:	e2 e0       	ldi	r30, 0x02	; 2
    6c56:	ae 0e       	add	r10, r30
    6c58:	b1 1c       	adc	r11, r1
    6c5a:	d7 01       	movw	r26, r14
    6c5c:	11 96       	adiw	r26, 0x01	; 1
    6c5e:	6c 90       	ld	r6, X
    6c60:	71 2c       	mov	r7, r1
    6c62:	ce 01       	movw	r24, r28
    6c64:	8f 7e       	andi	r24, 0xEF	; 239
    6c66:	89 2b       	or	r24, r25
    6c68:	89 f4       	brne	.+34     	; 0x6c8c <strtol+0xc0>
    6c6a:	b0 e3       	ldi	r27, 0x30	; 48
    6c6c:	6b 12       	cpse	r6, r27
    6c6e:	22 c0       	rjmp	.+68     	; 0x6cb4 <strtol+0xe8>
    6c70:	f5 01       	movw	r30, r10
    6c72:	80 81       	ld	r24, Z
    6c74:	8f 7d       	andi	r24, 0xDF	; 223
    6c76:	88 35       	cpi	r24, 0x58	; 88
    6c78:	41 f5       	brne	.+80     	; 0x6cca <strtol+0xfe>
    6c7a:	61 80       	ldd	r6, Z+1	; 0x01
    6c7c:	f2 e0       	ldi	r31, 0x02	; 2
    6c7e:	af 0e       	add	r10, r31
    6c80:	b1 1c       	adc	r11, r1
    6c82:	87 2d       	mov	r24, r7
    6c84:	82 60       	ori	r24, 0x02	; 2
    6c86:	78 2e       	mov	r7, r24
    6c88:	c0 e1       	ldi	r28, 0x10	; 16
    6c8a:	d0 e0       	ldi	r29, 0x00	; 0
    6c8c:	c8 30       	cpi	r28, 0x08	; 8
    6c8e:	d1 05       	cpc	r29, r1
    6c90:	f1 f0       	breq	.+60     	; 0x6cce <strtol+0x102>
    6c92:	4c f4       	brge	.+18     	; 0x6ca6 <strtol+0xda>
    6c94:	c2 30       	cpi	r28, 0x02	; 2
    6c96:	d1 05       	cpc	r29, r1
    6c98:	11 f5       	brne	.+68     	; 0x6cde <strtol+0x112>
    6c9a:	c1 2c       	mov	r12, r1
    6c9c:	d1 2c       	mov	r13, r1
    6c9e:	e1 2c       	mov	r14, r1
    6ca0:	b0 e4       	ldi	r27, 0x40	; 64
    6ca2:	fb 2e       	mov	r15, r27
    6ca4:	2f c0       	rjmp	.+94     	; 0x6d04 <strtol+0x138>
    6ca6:	ca 30       	cpi	r28, 0x0A	; 10
    6ca8:	d1 05       	cpc	r29, r1
    6caa:	31 f0       	breq	.+12     	; 0x6cb8 <strtol+0xec>
    6cac:	c0 31       	cpi	r28, 0x10	; 16
    6cae:	d1 05       	cpc	r29, r1
    6cb0:	21 f1       	breq	.+72     	; 0x6cfa <strtol+0x12e>
    6cb2:	15 c0       	rjmp	.+42     	; 0x6cde <strtol+0x112>
    6cb4:	20 97       	sbiw	r28, 0x00	; 0
    6cb6:	51 f7       	brne	.-44     	; 0x6c8c <strtol+0xc0>
    6cb8:	ca e0       	ldi	r28, 0x0A	; 10
    6cba:	d0 e0       	ldi	r29, 0x00	; 0
    6cbc:	ac ec       	ldi	r26, 0xCC	; 204
    6cbe:	ca 2e       	mov	r12, r26
    6cc0:	dc 2c       	mov	r13, r12
    6cc2:	ec 2c       	mov	r14, r12
    6cc4:	ac e0       	ldi	r26, 0x0C	; 12
    6cc6:	fa 2e       	mov	r15, r26
    6cc8:	1d c0       	rjmp	.+58     	; 0x6d04 <strtol+0x138>
    6cca:	20 97       	sbiw	r28, 0x00	; 0
    6ccc:	f9 f6       	brne	.-66     	; 0x6c8c <strtol+0xc0>
    6cce:	c8 e0       	ldi	r28, 0x08	; 8
    6cd0:	d0 e0       	ldi	r29, 0x00	; 0
    6cd2:	c1 2c       	mov	r12, r1
    6cd4:	d1 2c       	mov	r13, r1
    6cd6:	e1 2c       	mov	r14, r1
    6cd8:	f0 e1       	ldi	r31, 0x10	; 16
    6cda:	ff 2e       	mov	r15, r31
    6cdc:	13 c0       	rjmp	.+38     	; 0x6d04 <strtol+0x138>
    6cde:	60 e0       	ldi	r22, 0x00	; 0
    6ce0:	70 e0       	ldi	r23, 0x00	; 0
    6ce2:	80 e0       	ldi	r24, 0x00	; 0
    6ce4:	90 e8       	ldi	r25, 0x80	; 128
    6ce6:	9e 01       	movw	r18, r28
    6ce8:	44 27       	eor	r20, r20
    6cea:	37 fd       	sbrc	r19, 7
    6cec:	40 95       	com	r20
    6cee:	54 2f       	mov	r21, r20
    6cf0:	0e 94 3f 34 	call	0x687e	; 0x687e <__udivmodsi4>
    6cf4:	69 01       	movw	r12, r18
    6cf6:	7a 01       	movw	r14, r20
    6cf8:	05 c0       	rjmp	.+10     	; 0x6d04 <strtol+0x138>
    6cfa:	c1 2c       	mov	r12, r1
    6cfc:	d1 2c       	mov	r13, r1
    6cfe:	e1 2c       	mov	r14, r1
    6d00:	e8 e0       	ldi	r30, 0x08	; 8
    6d02:	fe 2e       	mov	r15, r30
    6d04:	f5 01       	movw	r30, r10
    6d06:	60 e0       	ldi	r22, 0x00	; 0
    6d08:	20 e0       	ldi	r18, 0x00	; 0
    6d0a:	30 e0       	ldi	r19, 0x00	; 0
    6d0c:	a9 01       	movw	r20, r18
    6d0e:	4e 01       	movw	r8, r28
    6d10:	aa 24       	eor	r10, r10
    6d12:	97 fc       	sbrc	r9, 7
    6d14:	a0 94       	com	r10
    6d16:	ba 2c       	mov	r11, r10
    6d18:	1f 01       	movw	r2, r30
    6d1a:	70 ed       	ldi	r23, 0xD0	; 208
    6d1c:	57 2e       	mov	r5, r23
    6d1e:	56 0c       	add	r5, r6
    6d20:	a9 e0       	ldi	r26, 0x09	; 9
    6d22:	a5 15       	cp	r26, r5
    6d24:	70 f4       	brcc	.+28     	; 0x6d42 <strtol+0x176>
    6d26:	8f eb       	ldi	r24, 0xBF	; 191
    6d28:	86 0d       	add	r24, r6
    6d2a:	8a 31       	cpi	r24, 0x1A	; 26
    6d2c:	18 f4       	brcc	.+6      	; 0x6d34 <strtol+0x168>
    6d2e:	99 ec       	ldi	r25, 0xC9	; 201
    6d30:	59 2e       	mov	r5, r25
    6d32:	06 c0       	rjmp	.+12     	; 0x6d40 <strtol+0x174>
    6d34:	8f e9       	ldi	r24, 0x9F	; 159
    6d36:	86 0d       	add	r24, r6
    6d38:	8a 31       	cpi	r24, 0x1A	; 26
    6d3a:	30 f5       	brcc	.+76     	; 0x6d88 <strtol+0x1bc>
    6d3c:	89 ea       	ldi	r24, 0xA9	; 169
    6d3e:	58 2e       	mov	r5, r24
    6d40:	56 0c       	add	r5, r6
    6d42:	85 2d       	mov	r24, r5
    6d44:	90 e0       	ldi	r25, 0x00	; 0
    6d46:	8c 17       	cp	r24, r28
    6d48:	9d 07       	cpc	r25, r29
    6d4a:	f4 f4       	brge	.+60     	; 0x6d88 <strtol+0x1bc>
    6d4c:	67 fd       	sbrc	r22, 7
    6d4e:	18 c0       	rjmp	.+48     	; 0x6d80 <strtol+0x1b4>
    6d50:	c2 16       	cp	r12, r18
    6d52:	d3 06       	cpc	r13, r19
    6d54:	e4 06       	cpc	r14, r20
    6d56:	f5 06       	cpc	r15, r21
    6d58:	80 f0       	brcs	.+32     	; 0x6d7a <strtol+0x1ae>
    6d5a:	c5 01       	movw	r24, r10
    6d5c:	b4 01       	movw	r22, r8
    6d5e:	0e 94 f7 39 	call	0x73ee	; 0x73ee <__mulsi3>
    6d62:	9b 01       	movw	r18, r22
    6d64:	ac 01       	movw	r20, r24
    6d66:	25 0d       	add	r18, r5
    6d68:	31 1d       	adc	r19, r1
    6d6a:	41 1d       	adc	r20, r1
    6d6c:	51 1d       	adc	r21, r1
    6d6e:	21 30       	cpi	r18, 0x01	; 1
    6d70:	31 05       	cpc	r19, r1
    6d72:	41 05       	cpc	r20, r1
    6d74:	b0 e8       	ldi	r27, 0x80	; 128
    6d76:	5b 07       	cpc	r21, r27
    6d78:	10 f0       	brcs	.+4      	; 0x6d7e <strtol+0x1b2>
    6d7a:	6f ef       	ldi	r22, 0xFF	; 255
    6d7c:	01 c0       	rjmp	.+2      	; 0x6d80 <strtol+0x1b4>
    6d7e:	61 e0       	ldi	r22, 0x01	; 1
    6d80:	31 96       	adiw	r30, 0x01	; 1
    6d82:	d1 01       	movw	r26, r2
    6d84:	6c 90       	ld	r6, X
    6d86:	c8 cf       	rjmp	.-112    	; 0x6d18 <strtol+0x14c>
    6d88:	87 2d       	mov	r24, r7
    6d8a:	81 70       	andi	r24, 0x01	; 1
    6d8c:	01 15       	cp	r16, r1
    6d8e:	11 05       	cpc	r17, r1
    6d90:	71 f0       	breq	.+28     	; 0x6dae <strtol+0x1e2>
    6d92:	66 23       	and	r22, r22
    6d94:	29 f0       	breq	.+10     	; 0x6da0 <strtol+0x1d4>
    6d96:	31 97       	sbiw	r30, 0x01	; 1
    6d98:	d8 01       	movw	r26, r16
    6d9a:	ed 93       	st	X+, r30
    6d9c:	fc 93       	st	X, r31
    6d9e:	07 c0       	rjmp	.+14     	; 0x6dae <strtol+0x1e2>
    6da0:	71 fe       	sbrs	r7, 1
    6da2:	19 c0       	rjmp	.+50     	; 0x6dd6 <strtol+0x20a>
    6da4:	32 97       	sbiw	r30, 0x02	; 2
    6da6:	d8 01       	movw	r26, r16
    6da8:	ed 93       	st	X+, r30
    6daa:	fc 93       	st	X, r31
    6dac:	14 c0       	rjmp	.+40     	; 0x6dd6 <strtol+0x20a>
    6dae:	67 ff       	sbrs	r22, 7
    6db0:	12 c0       	rjmp	.+36     	; 0x6dd6 <strtol+0x20a>
    6db2:	88 23       	and	r24, r24
    6db4:	29 f0       	breq	.+10     	; 0x6dc0 <strtol+0x1f4>
    6db6:	20 e0       	ldi	r18, 0x00	; 0
    6db8:	30 e0       	ldi	r19, 0x00	; 0
    6dba:	40 e0       	ldi	r20, 0x00	; 0
    6dbc:	50 e8       	ldi	r21, 0x80	; 128
    6dbe:	04 c0       	rjmp	.+8      	; 0x6dc8 <strtol+0x1fc>
    6dc0:	2f ef       	ldi	r18, 0xFF	; 255
    6dc2:	3f ef       	ldi	r19, 0xFF	; 255
    6dc4:	4f ef       	ldi	r20, 0xFF	; 255
    6dc6:	5f e7       	ldi	r21, 0x7F	; 127
    6dc8:	82 e2       	ldi	r24, 0x22	; 34
    6dca:	90 e0       	ldi	r25, 0x00	; 0
    6dcc:	90 93 03 01 	sts	0x0103, r25
    6dd0:	80 93 02 01 	sts	0x0102, r24
    6dd4:	16 c0       	rjmp	.+44     	; 0x6e02 <strtol+0x236>
    6dd6:	88 23       	and	r24, r24
    6dd8:	41 f0       	breq	.+16     	; 0x6dea <strtol+0x21e>
    6dda:	50 95       	com	r21
    6ddc:	40 95       	com	r20
    6dde:	30 95       	com	r19
    6de0:	21 95       	neg	r18
    6de2:	3f 4f       	sbci	r19, 0xFF	; 255
    6de4:	4f 4f       	sbci	r20, 0xFF	; 255
    6de6:	5f 4f       	sbci	r21, 0xFF	; 255
    6de8:	0c c0       	rjmp	.+24     	; 0x6e02 <strtol+0x236>
    6dea:	57 ff       	sbrs	r21, 7
    6dec:	0a c0       	rjmp	.+20     	; 0x6e02 <strtol+0x236>
    6dee:	82 e2       	ldi	r24, 0x22	; 34
    6df0:	90 e0       	ldi	r25, 0x00	; 0
    6df2:	90 93 03 01 	sts	0x0103, r25
    6df6:	80 93 02 01 	sts	0x0102, r24
    6dfa:	2f ef       	ldi	r18, 0xFF	; 255
    6dfc:	3f ef       	ldi	r19, 0xFF	; 255
    6dfe:	4f ef       	ldi	r20, 0xFF	; 255
    6e00:	5f e7       	ldi	r21, 0x7F	; 127
    6e02:	b9 01       	movw	r22, r18
    6e04:	ca 01       	movw	r24, r20
    6e06:	04 c0       	rjmp	.+8      	; 0x6e10 <strtol+0x244>
    6e08:	60 e0       	ldi	r22, 0x00	; 0
    6e0a:	70 e0       	ldi	r23, 0x00	; 0
    6e0c:	80 e0       	ldi	r24, 0x00	; 0
    6e0e:	90 e0       	ldi	r25, 0x00	; 0
    6e10:	df 91       	pop	r29
    6e12:	cf 91       	pop	r28
    6e14:	1f 91       	pop	r17
    6e16:	0f 91       	pop	r16
    6e18:	ff 90       	pop	r15
    6e1a:	ef 90       	pop	r14
    6e1c:	df 90       	pop	r13
    6e1e:	cf 90       	pop	r12
    6e20:	bf 90       	pop	r11
    6e22:	af 90       	pop	r10
    6e24:	9f 90       	pop	r9
    6e26:	8f 90       	pop	r8
    6e28:	7f 90       	pop	r7
    6e2a:	6f 90       	pop	r6
    6e2c:	5f 90       	pop	r5
    6e2e:	3f 90       	pop	r3
    6e30:	2f 90       	pop	r2
    6e32:	08 95       	ret

00006e34 <isspace>:
    6e34:	91 11       	cpse	r25, r1
    6e36:	15 c2       	rjmp	.+1066   	; 0x7262 <__ctype_isfalse>
    6e38:	80 32       	cpi	r24, 0x20	; 32
    6e3a:	19 f0       	breq	.+6      	; 0x6e42 <isspace+0xe>
    6e3c:	89 50       	subi	r24, 0x09	; 9
    6e3e:	85 50       	subi	r24, 0x05	; 5
    6e40:	d0 f7       	brcc	.-12     	; 0x6e36 <isspace+0x2>
    6e42:	08 95       	ret

00006e44 <strrev>:
    6e44:	dc 01       	movw	r26, r24
    6e46:	fc 01       	movw	r30, r24
    6e48:	67 2f       	mov	r22, r23
    6e4a:	71 91       	ld	r23, Z+
    6e4c:	77 23       	and	r23, r23
    6e4e:	e1 f7       	brne	.-8      	; 0x6e48 <strrev+0x4>
    6e50:	32 97       	sbiw	r30, 0x02	; 2
    6e52:	04 c0       	rjmp	.+8      	; 0x6e5c <strrev+0x18>
    6e54:	7c 91       	ld	r23, X
    6e56:	6d 93       	st	X+, r22
    6e58:	70 83       	st	Z, r23
    6e5a:	62 91       	ld	r22, -Z
    6e5c:	ae 17       	cp	r26, r30
    6e5e:	bf 07       	cpc	r27, r31
    6e60:	c8 f3       	brcs	.-14     	; 0x6e54 <strrev+0x10>
    6e62:	08 95       	ret

00006e64 <sprintf>:
    6e64:	ae e0       	ldi	r26, 0x0E	; 14
    6e66:	b0 e0       	ldi	r27, 0x00	; 0
    6e68:	e8 e3       	ldi	r30, 0x38	; 56
    6e6a:	f7 e3       	ldi	r31, 0x37	; 55
    6e6c:	0c 94 28 3a 	jmp	0x7450	; 0x7450 <__prologue_saves__+0x1c>
    6e70:	0d 89       	ldd	r16, Y+21	; 0x15
    6e72:	1e 89       	ldd	r17, Y+22	; 0x16
    6e74:	86 e0       	ldi	r24, 0x06	; 6
    6e76:	8c 83       	std	Y+4, r24	; 0x04
    6e78:	1a 83       	std	Y+2, r17	; 0x02
    6e7a:	09 83       	std	Y+1, r16	; 0x01
    6e7c:	8f ef       	ldi	r24, 0xFF	; 255
    6e7e:	9f e7       	ldi	r25, 0x7F	; 127
    6e80:	9e 83       	std	Y+6, r25	; 0x06
    6e82:	8d 83       	std	Y+5, r24	; 0x05
    6e84:	ae 01       	movw	r20, r28
    6e86:	47 5e       	subi	r20, 0xE7	; 231
    6e88:	5f 4f       	sbci	r21, 0xFF	; 255
    6e8a:	6f 89       	ldd	r22, Y+23	; 0x17
    6e8c:	78 8d       	ldd	r23, Y+24	; 0x18
    6e8e:	ce 01       	movw	r24, r28
    6e90:	01 96       	adiw	r24, 0x01	; 1
    6e92:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <vfprintf>
    6e96:	ef 81       	ldd	r30, Y+7	; 0x07
    6e98:	f8 85       	ldd	r31, Y+8	; 0x08
    6e9a:	e0 0f       	add	r30, r16
    6e9c:	f1 1f       	adc	r31, r17
    6e9e:	10 82       	st	Z, r1
    6ea0:	2e 96       	adiw	r28, 0x0e	; 14
    6ea2:	e4 e0       	ldi	r30, 0x04	; 4
    6ea4:	0c 94 44 3a 	jmp	0x7488	; 0x7488 <__epilogue_restores__+0x1c>

00006ea8 <vfprintf>:
    6ea8:	ac e0       	ldi	r26, 0x0C	; 12
    6eaa:	b0 e0       	ldi	r27, 0x00	; 0
    6eac:	ea e5       	ldi	r30, 0x5A	; 90
    6eae:	f7 e3       	ldi	r31, 0x37	; 55
    6eb0:	0c 94 1a 3a 	jmp	0x7434	; 0x7434 <__prologue_saves__>
    6eb4:	7c 01       	movw	r14, r24
    6eb6:	6b 01       	movw	r12, r22
    6eb8:	8a 01       	movw	r16, r20
    6eba:	fc 01       	movw	r30, r24
    6ebc:	17 82       	std	Z+7, r1	; 0x07
    6ebe:	16 82       	std	Z+6, r1	; 0x06
    6ec0:	83 81       	ldd	r24, Z+3	; 0x03
    6ec2:	81 ff       	sbrs	r24, 1
    6ec4:	bd c1       	rjmp	.+890    	; 0x7240 <vfprintf+0x398>
    6ec6:	ce 01       	movw	r24, r28
    6ec8:	01 96       	adiw	r24, 0x01	; 1
    6eca:	4c 01       	movw	r8, r24
    6ecc:	f7 01       	movw	r30, r14
    6ece:	93 81       	ldd	r25, Z+3	; 0x03
    6ed0:	f6 01       	movw	r30, r12
    6ed2:	93 fd       	sbrc	r25, 3
    6ed4:	85 91       	lpm	r24, Z+
    6ed6:	93 ff       	sbrs	r25, 3
    6ed8:	81 91       	ld	r24, Z+
    6eda:	6f 01       	movw	r12, r30
    6edc:	88 23       	and	r24, r24
    6ede:	09 f4       	brne	.+2      	; 0x6ee2 <vfprintf+0x3a>
    6ee0:	ab c1       	rjmp	.+854    	; 0x7238 <vfprintf+0x390>
    6ee2:	85 32       	cpi	r24, 0x25	; 37
    6ee4:	39 f4       	brne	.+14     	; 0x6ef4 <vfprintf+0x4c>
    6ee6:	93 fd       	sbrc	r25, 3
    6ee8:	85 91       	lpm	r24, Z+
    6eea:	93 ff       	sbrs	r25, 3
    6eec:	81 91       	ld	r24, Z+
    6eee:	6f 01       	movw	r12, r30
    6ef0:	85 32       	cpi	r24, 0x25	; 37
    6ef2:	29 f4       	brne	.+10     	; 0x6efe <vfprintf+0x56>
    6ef4:	b7 01       	movw	r22, r14
    6ef6:	90 e0       	ldi	r25, 0x00	; 0
    6ef8:	0e 94 4a 39 	call	0x7294	; 0x7294 <fputc>
    6efc:	e7 cf       	rjmp	.-50     	; 0x6ecc <vfprintf+0x24>
    6efe:	51 2c       	mov	r5, r1
    6f00:	31 2c       	mov	r3, r1
    6f02:	20 e0       	ldi	r18, 0x00	; 0
    6f04:	20 32       	cpi	r18, 0x20	; 32
    6f06:	a0 f4       	brcc	.+40     	; 0x6f30 <vfprintf+0x88>
    6f08:	8b 32       	cpi	r24, 0x2B	; 43
    6f0a:	69 f0       	breq	.+26     	; 0x6f26 <vfprintf+0x7e>
    6f0c:	30 f4       	brcc	.+12     	; 0x6f1a <vfprintf+0x72>
    6f0e:	80 32       	cpi	r24, 0x20	; 32
    6f10:	59 f0       	breq	.+22     	; 0x6f28 <vfprintf+0x80>
    6f12:	83 32       	cpi	r24, 0x23	; 35
    6f14:	69 f4       	brne	.+26     	; 0x6f30 <vfprintf+0x88>
    6f16:	20 61       	ori	r18, 0x10	; 16
    6f18:	2c c0       	rjmp	.+88     	; 0x6f72 <vfprintf+0xca>
    6f1a:	8d 32       	cpi	r24, 0x2D	; 45
    6f1c:	39 f0       	breq	.+14     	; 0x6f2c <vfprintf+0x84>
    6f1e:	80 33       	cpi	r24, 0x30	; 48
    6f20:	39 f4       	brne	.+14     	; 0x6f30 <vfprintf+0x88>
    6f22:	21 60       	ori	r18, 0x01	; 1
    6f24:	26 c0       	rjmp	.+76     	; 0x6f72 <vfprintf+0xca>
    6f26:	22 60       	ori	r18, 0x02	; 2
    6f28:	24 60       	ori	r18, 0x04	; 4
    6f2a:	23 c0       	rjmp	.+70     	; 0x6f72 <vfprintf+0xca>
    6f2c:	28 60       	ori	r18, 0x08	; 8
    6f2e:	21 c0       	rjmp	.+66     	; 0x6f72 <vfprintf+0xca>
    6f30:	27 fd       	sbrc	r18, 7
    6f32:	27 c0       	rjmp	.+78     	; 0x6f82 <vfprintf+0xda>
    6f34:	30 ed       	ldi	r19, 0xD0	; 208
    6f36:	38 0f       	add	r19, r24
    6f38:	3a 30       	cpi	r19, 0x0A	; 10
    6f3a:	78 f4       	brcc	.+30     	; 0x6f5a <vfprintf+0xb2>
    6f3c:	26 ff       	sbrs	r18, 6
    6f3e:	06 c0       	rjmp	.+12     	; 0x6f4c <vfprintf+0xa4>
    6f40:	fa e0       	ldi	r31, 0x0A	; 10
    6f42:	5f 9e       	mul	r5, r31
    6f44:	30 0d       	add	r19, r0
    6f46:	11 24       	eor	r1, r1
    6f48:	53 2e       	mov	r5, r19
    6f4a:	13 c0       	rjmp	.+38     	; 0x6f72 <vfprintf+0xca>
    6f4c:	8a e0       	ldi	r24, 0x0A	; 10
    6f4e:	38 9e       	mul	r3, r24
    6f50:	30 0d       	add	r19, r0
    6f52:	11 24       	eor	r1, r1
    6f54:	33 2e       	mov	r3, r19
    6f56:	20 62       	ori	r18, 0x20	; 32
    6f58:	0c c0       	rjmp	.+24     	; 0x6f72 <vfprintf+0xca>
    6f5a:	8e 32       	cpi	r24, 0x2E	; 46
    6f5c:	21 f4       	brne	.+8      	; 0x6f66 <vfprintf+0xbe>
    6f5e:	26 fd       	sbrc	r18, 6
    6f60:	6b c1       	rjmp	.+726    	; 0x7238 <vfprintf+0x390>
    6f62:	20 64       	ori	r18, 0x40	; 64
    6f64:	06 c0       	rjmp	.+12     	; 0x6f72 <vfprintf+0xca>
    6f66:	8c 36       	cpi	r24, 0x6C	; 108
    6f68:	11 f4       	brne	.+4      	; 0x6f6e <vfprintf+0xc6>
    6f6a:	20 68       	ori	r18, 0x80	; 128
    6f6c:	02 c0       	rjmp	.+4      	; 0x6f72 <vfprintf+0xca>
    6f6e:	88 36       	cpi	r24, 0x68	; 104
    6f70:	41 f4       	brne	.+16     	; 0x6f82 <vfprintf+0xda>
    6f72:	f6 01       	movw	r30, r12
    6f74:	93 fd       	sbrc	r25, 3
    6f76:	85 91       	lpm	r24, Z+
    6f78:	93 ff       	sbrs	r25, 3
    6f7a:	81 91       	ld	r24, Z+
    6f7c:	6f 01       	movw	r12, r30
    6f7e:	81 11       	cpse	r24, r1
    6f80:	c1 cf       	rjmp	.-126    	; 0x6f04 <vfprintf+0x5c>
    6f82:	98 2f       	mov	r25, r24
    6f84:	9f 7d       	andi	r25, 0xDF	; 223
    6f86:	95 54       	subi	r25, 0x45	; 69
    6f88:	93 30       	cpi	r25, 0x03	; 3
    6f8a:	28 f4       	brcc	.+10     	; 0x6f96 <vfprintf+0xee>
    6f8c:	0c 5f       	subi	r16, 0xFC	; 252
    6f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f90:	ff e3       	ldi	r31, 0x3F	; 63
    6f92:	f9 83       	std	Y+1, r31	; 0x01
    6f94:	0d c0       	rjmp	.+26     	; 0x6fb0 <vfprintf+0x108>
    6f96:	83 36       	cpi	r24, 0x63	; 99
    6f98:	31 f0       	breq	.+12     	; 0x6fa6 <vfprintf+0xfe>
    6f9a:	83 37       	cpi	r24, 0x73	; 115
    6f9c:	71 f0       	breq	.+28     	; 0x6fba <vfprintf+0x112>
    6f9e:	83 35       	cpi	r24, 0x53	; 83
    6fa0:	09 f0       	breq	.+2      	; 0x6fa4 <vfprintf+0xfc>
    6fa2:	5b c0       	rjmp	.+182    	; 0x705a <vfprintf+0x1b2>
    6fa4:	22 c0       	rjmp	.+68     	; 0x6fea <vfprintf+0x142>
    6fa6:	f8 01       	movw	r30, r16
    6fa8:	80 81       	ld	r24, Z
    6faa:	89 83       	std	Y+1, r24	; 0x01
    6fac:	0e 5f       	subi	r16, 0xFE	; 254
    6fae:	1f 4f       	sbci	r17, 0xFF	; 255
    6fb0:	44 24       	eor	r4, r4
    6fb2:	43 94       	inc	r4
    6fb4:	51 2c       	mov	r5, r1
    6fb6:	54 01       	movw	r10, r8
    6fb8:	15 c0       	rjmp	.+42     	; 0x6fe4 <vfprintf+0x13c>
    6fba:	38 01       	movw	r6, r16
    6fbc:	f2 e0       	ldi	r31, 0x02	; 2
    6fbe:	6f 0e       	add	r6, r31
    6fc0:	71 1c       	adc	r7, r1
    6fc2:	f8 01       	movw	r30, r16
    6fc4:	a0 80       	ld	r10, Z
    6fc6:	b1 80       	ldd	r11, Z+1	; 0x01
    6fc8:	26 ff       	sbrs	r18, 6
    6fca:	03 c0       	rjmp	.+6      	; 0x6fd2 <vfprintf+0x12a>
    6fcc:	65 2d       	mov	r22, r5
    6fce:	70 e0       	ldi	r23, 0x00	; 0
    6fd0:	02 c0       	rjmp	.+4      	; 0x6fd6 <vfprintf+0x12e>
    6fd2:	6f ef       	ldi	r22, 0xFF	; 255
    6fd4:	7f ef       	ldi	r23, 0xFF	; 255
    6fd6:	c5 01       	movw	r24, r10
    6fd8:	2c 87       	std	Y+12, r18	; 0x0c
    6fda:	0e 94 3f 39 	call	0x727e	; 0x727e <strnlen>
    6fde:	2c 01       	movw	r4, r24
    6fe0:	83 01       	movw	r16, r6
    6fe2:	2c 85       	ldd	r18, Y+12	; 0x0c
    6fe4:	2f 77       	andi	r18, 0x7F	; 127
    6fe6:	22 2e       	mov	r2, r18
    6fe8:	17 c0       	rjmp	.+46     	; 0x7018 <vfprintf+0x170>
    6fea:	38 01       	movw	r6, r16
    6fec:	f2 e0       	ldi	r31, 0x02	; 2
    6fee:	6f 0e       	add	r6, r31
    6ff0:	71 1c       	adc	r7, r1
    6ff2:	f8 01       	movw	r30, r16
    6ff4:	a0 80       	ld	r10, Z
    6ff6:	b1 80       	ldd	r11, Z+1	; 0x01
    6ff8:	26 ff       	sbrs	r18, 6
    6ffa:	03 c0       	rjmp	.+6      	; 0x7002 <vfprintf+0x15a>
    6ffc:	65 2d       	mov	r22, r5
    6ffe:	70 e0       	ldi	r23, 0x00	; 0
    7000:	02 c0       	rjmp	.+4      	; 0x7006 <vfprintf+0x15e>
    7002:	6f ef       	ldi	r22, 0xFF	; 255
    7004:	7f ef       	ldi	r23, 0xFF	; 255
    7006:	c5 01       	movw	r24, r10
    7008:	2c 87       	std	Y+12, r18	; 0x0c
    700a:	0e 94 34 39 	call	0x7268	; 0x7268 <strnlen_P>
    700e:	2c 01       	movw	r4, r24
    7010:	2c 85       	ldd	r18, Y+12	; 0x0c
    7012:	20 68       	ori	r18, 0x80	; 128
    7014:	22 2e       	mov	r2, r18
    7016:	83 01       	movw	r16, r6
    7018:	23 fc       	sbrc	r2, 3
    701a:	1b c0       	rjmp	.+54     	; 0x7052 <vfprintf+0x1aa>
    701c:	83 2d       	mov	r24, r3
    701e:	90 e0       	ldi	r25, 0x00	; 0
    7020:	48 16       	cp	r4, r24
    7022:	59 06       	cpc	r5, r25
    7024:	b0 f4       	brcc	.+44     	; 0x7052 <vfprintf+0x1aa>
    7026:	b7 01       	movw	r22, r14
    7028:	80 e2       	ldi	r24, 0x20	; 32
    702a:	90 e0       	ldi	r25, 0x00	; 0
    702c:	0e 94 4a 39 	call	0x7294	; 0x7294 <fputc>
    7030:	3a 94       	dec	r3
    7032:	f4 cf       	rjmp	.-24     	; 0x701c <vfprintf+0x174>
    7034:	f5 01       	movw	r30, r10
    7036:	27 fc       	sbrc	r2, 7
    7038:	85 91       	lpm	r24, Z+
    703a:	27 fe       	sbrs	r2, 7
    703c:	81 91       	ld	r24, Z+
    703e:	5f 01       	movw	r10, r30
    7040:	b7 01       	movw	r22, r14
    7042:	90 e0       	ldi	r25, 0x00	; 0
    7044:	0e 94 4a 39 	call	0x7294	; 0x7294 <fputc>
    7048:	31 10       	cpse	r3, r1
    704a:	3a 94       	dec	r3
    704c:	f1 e0       	ldi	r31, 0x01	; 1
    704e:	4f 1a       	sub	r4, r31
    7050:	51 08       	sbc	r5, r1
    7052:	41 14       	cp	r4, r1
    7054:	51 04       	cpc	r5, r1
    7056:	71 f7       	brne	.-36     	; 0x7034 <vfprintf+0x18c>
    7058:	e5 c0       	rjmp	.+458    	; 0x7224 <vfprintf+0x37c>
    705a:	84 36       	cpi	r24, 0x64	; 100
    705c:	11 f0       	breq	.+4      	; 0x7062 <vfprintf+0x1ba>
    705e:	89 36       	cpi	r24, 0x69	; 105
    7060:	39 f5       	brne	.+78     	; 0x70b0 <vfprintf+0x208>
    7062:	f8 01       	movw	r30, r16
    7064:	27 ff       	sbrs	r18, 7
    7066:	07 c0       	rjmp	.+14     	; 0x7076 <vfprintf+0x1ce>
    7068:	60 81       	ld	r22, Z
    706a:	71 81       	ldd	r23, Z+1	; 0x01
    706c:	82 81       	ldd	r24, Z+2	; 0x02
    706e:	93 81       	ldd	r25, Z+3	; 0x03
    7070:	0c 5f       	subi	r16, 0xFC	; 252
    7072:	1f 4f       	sbci	r17, 0xFF	; 255
    7074:	08 c0       	rjmp	.+16     	; 0x7086 <vfprintf+0x1de>
    7076:	60 81       	ld	r22, Z
    7078:	71 81       	ldd	r23, Z+1	; 0x01
    707a:	88 27       	eor	r24, r24
    707c:	77 fd       	sbrc	r23, 7
    707e:	80 95       	com	r24
    7080:	98 2f       	mov	r25, r24
    7082:	0e 5f       	subi	r16, 0xFE	; 254
    7084:	1f 4f       	sbci	r17, 0xFF	; 255
    7086:	2f 76       	andi	r18, 0x6F	; 111
    7088:	b2 2e       	mov	r11, r18
    708a:	97 ff       	sbrs	r25, 7
    708c:	09 c0       	rjmp	.+18     	; 0x70a0 <vfprintf+0x1f8>
    708e:	90 95       	com	r25
    7090:	80 95       	com	r24
    7092:	70 95       	com	r23
    7094:	61 95       	neg	r22
    7096:	7f 4f       	sbci	r23, 0xFF	; 255
    7098:	8f 4f       	sbci	r24, 0xFF	; 255
    709a:	9f 4f       	sbci	r25, 0xFF	; 255
    709c:	20 68       	ori	r18, 0x80	; 128
    709e:	b2 2e       	mov	r11, r18
    70a0:	2a e0       	ldi	r18, 0x0A	; 10
    70a2:	30 e0       	ldi	r19, 0x00	; 0
    70a4:	a4 01       	movw	r20, r8
    70a6:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <__ultoa_invert>
    70aa:	a8 2e       	mov	r10, r24
    70ac:	a8 18       	sub	r10, r8
    70ae:	44 c0       	rjmp	.+136    	; 0x7138 <vfprintf+0x290>
    70b0:	85 37       	cpi	r24, 0x75	; 117
    70b2:	29 f4       	brne	.+10     	; 0x70be <vfprintf+0x216>
    70b4:	2f 7e       	andi	r18, 0xEF	; 239
    70b6:	b2 2e       	mov	r11, r18
    70b8:	2a e0       	ldi	r18, 0x0A	; 10
    70ba:	30 e0       	ldi	r19, 0x00	; 0
    70bc:	25 c0       	rjmp	.+74     	; 0x7108 <vfprintf+0x260>
    70be:	f2 2f       	mov	r31, r18
    70c0:	f9 7f       	andi	r31, 0xF9	; 249
    70c2:	bf 2e       	mov	r11, r31
    70c4:	8f 36       	cpi	r24, 0x6F	; 111
    70c6:	c1 f0       	breq	.+48     	; 0x70f8 <vfprintf+0x250>
    70c8:	18 f4       	brcc	.+6      	; 0x70d0 <vfprintf+0x228>
    70ca:	88 35       	cpi	r24, 0x58	; 88
    70cc:	79 f0       	breq	.+30     	; 0x70ec <vfprintf+0x244>
    70ce:	b4 c0       	rjmp	.+360    	; 0x7238 <vfprintf+0x390>
    70d0:	80 37       	cpi	r24, 0x70	; 112
    70d2:	19 f0       	breq	.+6      	; 0x70da <vfprintf+0x232>
    70d4:	88 37       	cpi	r24, 0x78	; 120
    70d6:	21 f0       	breq	.+8      	; 0x70e0 <vfprintf+0x238>
    70d8:	af c0       	rjmp	.+350    	; 0x7238 <vfprintf+0x390>
    70da:	2f 2f       	mov	r18, r31
    70dc:	20 61       	ori	r18, 0x10	; 16
    70de:	b2 2e       	mov	r11, r18
    70e0:	b4 fe       	sbrs	r11, 4
    70e2:	0d c0       	rjmp	.+26     	; 0x70fe <vfprintf+0x256>
    70e4:	8b 2d       	mov	r24, r11
    70e6:	84 60       	ori	r24, 0x04	; 4
    70e8:	b8 2e       	mov	r11, r24
    70ea:	09 c0       	rjmp	.+18     	; 0x70fe <vfprintf+0x256>
    70ec:	24 ff       	sbrs	r18, 4
    70ee:	0a c0       	rjmp	.+20     	; 0x7104 <vfprintf+0x25c>
    70f0:	9f 2f       	mov	r25, r31
    70f2:	96 60       	ori	r25, 0x06	; 6
    70f4:	b9 2e       	mov	r11, r25
    70f6:	06 c0       	rjmp	.+12     	; 0x7104 <vfprintf+0x25c>
    70f8:	28 e0       	ldi	r18, 0x08	; 8
    70fa:	30 e0       	ldi	r19, 0x00	; 0
    70fc:	05 c0       	rjmp	.+10     	; 0x7108 <vfprintf+0x260>
    70fe:	20 e1       	ldi	r18, 0x10	; 16
    7100:	30 e0       	ldi	r19, 0x00	; 0
    7102:	02 c0       	rjmp	.+4      	; 0x7108 <vfprintf+0x260>
    7104:	20 e1       	ldi	r18, 0x10	; 16
    7106:	32 e0       	ldi	r19, 0x02	; 2
    7108:	f8 01       	movw	r30, r16
    710a:	b7 fe       	sbrs	r11, 7
    710c:	07 c0       	rjmp	.+14     	; 0x711c <vfprintf+0x274>
    710e:	60 81       	ld	r22, Z
    7110:	71 81       	ldd	r23, Z+1	; 0x01
    7112:	82 81       	ldd	r24, Z+2	; 0x02
    7114:	93 81       	ldd	r25, Z+3	; 0x03
    7116:	0c 5f       	subi	r16, 0xFC	; 252
    7118:	1f 4f       	sbci	r17, 0xFF	; 255
    711a:	06 c0       	rjmp	.+12     	; 0x7128 <vfprintf+0x280>
    711c:	60 81       	ld	r22, Z
    711e:	71 81       	ldd	r23, Z+1	; 0x01
    7120:	80 e0       	ldi	r24, 0x00	; 0
    7122:	90 e0       	ldi	r25, 0x00	; 0
    7124:	0e 5f       	subi	r16, 0xFE	; 254
    7126:	1f 4f       	sbci	r17, 0xFF	; 255
    7128:	a4 01       	movw	r20, r8
    712a:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <__ultoa_invert>
    712e:	a8 2e       	mov	r10, r24
    7130:	a8 18       	sub	r10, r8
    7132:	fb 2d       	mov	r31, r11
    7134:	ff 77       	andi	r31, 0x7F	; 127
    7136:	bf 2e       	mov	r11, r31
    7138:	b6 fe       	sbrs	r11, 6
    713a:	0b c0       	rjmp	.+22     	; 0x7152 <vfprintf+0x2aa>
    713c:	2b 2d       	mov	r18, r11
    713e:	2e 7f       	andi	r18, 0xFE	; 254
    7140:	a5 14       	cp	r10, r5
    7142:	50 f4       	brcc	.+20     	; 0x7158 <vfprintf+0x2b0>
    7144:	b4 fe       	sbrs	r11, 4
    7146:	0a c0       	rjmp	.+20     	; 0x715c <vfprintf+0x2b4>
    7148:	b2 fc       	sbrc	r11, 2
    714a:	08 c0       	rjmp	.+16     	; 0x715c <vfprintf+0x2b4>
    714c:	2b 2d       	mov	r18, r11
    714e:	2e 7e       	andi	r18, 0xEE	; 238
    7150:	05 c0       	rjmp	.+10     	; 0x715c <vfprintf+0x2b4>
    7152:	7a 2c       	mov	r7, r10
    7154:	2b 2d       	mov	r18, r11
    7156:	03 c0       	rjmp	.+6      	; 0x715e <vfprintf+0x2b6>
    7158:	7a 2c       	mov	r7, r10
    715a:	01 c0       	rjmp	.+2      	; 0x715e <vfprintf+0x2b6>
    715c:	75 2c       	mov	r7, r5
    715e:	24 ff       	sbrs	r18, 4
    7160:	0d c0       	rjmp	.+26     	; 0x717c <vfprintf+0x2d4>
    7162:	fe 01       	movw	r30, r28
    7164:	ea 0d       	add	r30, r10
    7166:	f1 1d       	adc	r31, r1
    7168:	80 81       	ld	r24, Z
    716a:	80 33       	cpi	r24, 0x30	; 48
    716c:	11 f4       	brne	.+4      	; 0x7172 <vfprintf+0x2ca>
    716e:	29 7e       	andi	r18, 0xE9	; 233
    7170:	09 c0       	rjmp	.+18     	; 0x7184 <vfprintf+0x2dc>
    7172:	22 ff       	sbrs	r18, 2
    7174:	06 c0       	rjmp	.+12     	; 0x7182 <vfprintf+0x2da>
    7176:	73 94       	inc	r7
    7178:	73 94       	inc	r7
    717a:	04 c0       	rjmp	.+8      	; 0x7184 <vfprintf+0x2dc>
    717c:	82 2f       	mov	r24, r18
    717e:	86 78       	andi	r24, 0x86	; 134
    7180:	09 f0       	breq	.+2      	; 0x7184 <vfprintf+0x2dc>
    7182:	73 94       	inc	r7
    7184:	23 fd       	sbrc	r18, 3
    7186:	13 c0       	rjmp	.+38     	; 0x71ae <vfprintf+0x306>
    7188:	20 ff       	sbrs	r18, 0
    718a:	06 c0       	rjmp	.+12     	; 0x7198 <vfprintf+0x2f0>
    718c:	5a 2c       	mov	r5, r10
    718e:	73 14       	cp	r7, r3
    7190:	18 f4       	brcc	.+6      	; 0x7198 <vfprintf+0x2f0>
    7192:	53 0c       	add	r5, r3
    7194:	57 18       	sub	r5, r7
    7196:	73 2c       	mov	r7, r3
    7198:	73 14       	cp	r7, r3
    719a:	68 f4       	brcc	.+26     	; 0x71b6 <vfprintf+0x30e>
    719c:	b7 01       	movw	r22, r14
    719e:	80 e2       	ldi	r24, 0x20	; 32
    71a0:	90 e0       	ldi	r25, 0x00	; 0
    71a2:	2c 87       	std	Y+12, r18	; 0x0c
    71a4:	0e 94 4a 39 	call	0x7294	; 0x7294 <fputc>
    71a8:	73 94       	inc	r7
    71aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    71ac:	f5 cf       	rjmp	.-22     	; 0x7198 <vfprintf+0x2f0>
    71ae:	73 14       	cp	r7, r3
    71b0:	10 f4       	brcc	.+4      	; 0x71b6 <vfprintf+0x30e>
    71b2:	37 18       	sub	r3, r7
    71b4:	01 c0       	rjmp	.+2      	; 0x71b8 <vfprintf+0x310>
    71b6:	31 2c       	mov	r3, r1
    71b8:	24 ff       	sbrs	r18, 4
    71ba:	12 c0       	rjmp	.+36     	; 0x71e0 <vfprintf+0x338>
    71bc:	b7 01       	movw	r22, r14
    71be:	80 e3       	ldi	r24, 0x30	; 48
    71c0:	90 e0       	ldi	r25, 0x00	; 0
    71c2:	2c 87       	std	Y+12, r18	; 0x0c
    71c4:	0e 94 4a 39 	call	0x7294	; 0x7294 <fputc>
    71c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    71ca:	22 ff       	sbrs	r18, 2
    71cc:	17 c0       	rjmp	.+46     	; 0x71fc <vfprintf+0x354>
    71ce:	21 ff       	sbrs	r18, 1
    71d0:	03 c0       	rjmp	.+6      	; 0x71d8 <vfprintf+0x330>
    71d2:	88 e5       	ldi	r24, 0x58	; 88
    71d4:	90 e0       	ldi	r25, 0x00	; 0
    71d6:	02 c0       	rjmp	.+4      	; 0x71dc <vfprintf+0x334>
    71d8:	88 e7       	ldi	r24, 0x78	; 120
    71da:	90 e0       	ldi	r25, 0x00	; 0
    71dc:	b7 01       	movw	r22, r14
    71de:	0c c0       	rjmp	.+24     	; 0x71f8 <vfprintf+0x350>
    71e0:	82 2f       	mov	r24, r18
    71e2:	86 78       	andi	r24, 0x86	; 134
    71e4:	59 f0       	breq	.+22     	; 0x71fc <vfprintf+0x354>
    71e6:	21 fd       	sbrc	r18, 1
    71e8:	02 c0       	rjmp	.+4      	; 0x71ee <vfprintf+0x346>
    71ea:	80 e2       	ldi	r24, 0x20	; 32
    71ec:	01 c0       	rjmp	.+2      	; 0x71f0 <vfprintf+0x348>
    71ee:	8b e2       	ldi	r24, 0x2B	; 43
    71f0:	27 fd       	sbrc	r18, 7
    71f2:	8d e2       	ldi	r24, 0x2D	; 45
    71f4:	b7 01       	movw	r22, r14
    71f6:	90 e0       	ldi	r25, 0x00	; 0
    71f8:	0e 94 4a 39 	call	0x7294	; 0x7294 <fputc>
    71fc:	a5 14       	cp	r10, r5
    71fe:	38 f4       	brcc	.+14     	; 0x720e <vfprintf+0x366>
    7200:	b7 01       	movw	r22, r14
    7202:	80 e3       	ldi	r24, 0x30	; 48
    7204:	90 e0       	ldi	r25, 0x00	; 0
    7206:	0e 94 4a 39 	call	0x7294	; 0x7294 <fputc>
    720a:	5a 94       	dec	r5
    720c:	f7 cf       	rjmp	.-18     	; 0x71fc <vfprintf+0x354>
    720e:	aa 94       	dec	r10
    7210:	f4 01       	movw	r30, r8
    7212:	ea 0d       	add	r30, r10
    7214:	f1 1d       	adc	r31, r1
    7216:	80 81       	ld	r24, Z
    7218:	b7 01       	movw	r22, r14
    721a:	90 e0       	ldi	r25, 0x00	; 0
    721c:	0e 94 4a 39 	call	0x7294	; 0x7294 <fputc>
    7220:	a1 10       	cpse	r10, r1
    7222:	f5 cf       	rjmp	.-22     	; 0x720e <vfprintf+0x366>
    7224:	33 20       	and	r3, r3
    7226:	09 f4       	brne	.+2      	; 0x722a <vfprintf+0x382>
    7228:	51 ce       	rjmp	.-862    	; 0x6ecc <vfprintf+0x24>
    722a:	b7 01       	movw	r22, r14
    722c:	80 e2       	ldi	r24, 0x20	; 32
    722e:	90 e0       	ldi	r25, 0x00	; 0
    7230:	0e 94 4a 39 	call	0x7294	; 0x7294 <fputc>
    7234:	3a 94       	dec	r3
    7236:	f6 cf       	rjmp	.-20     	; 0x7224 <vfprintf+0x37c>
    7238:	f7 01       	movw	r30, r14
    723a:	86 81       	ldd	r24, Z+6	; 0x06
    723c:	97 81       	ldd	r25, Z+7	; 0x07
    723e:	02 c0       	rjmp	.+4      	; 0x7244 <vfprintf+0x39c>
    7240:	8f ef       	ldi	r24, 0xFF	; 255
    7242:	9f ef       	ldi	r25, 0xFF	; 255
    7244:	2c 96       	adiw	r28, 0x0c	; 12
    7246:	e2 e1       	ldi	r30, 0x12	; 18
    7248:	0c 94 36 3a 	jmp	0x746c	; 0x746c <__epilogue_restores__>

0000724c <__eerd_word_m32>:
    724c:	a8 e1       	ldi	r26, 0x18	; 24
    724e:	b0 e0       	ldi	r27, 0x00	; 0
    7250:	42 e0       	ldi	r20, 0x02	; 2
    7252:	50 e0       	ldi	r21, 0x00	; 0
    7254:	0c 94 dc 39 	jmp	0x73b8	; 0x73b8 <__eerd_blraw_m32>

00007258 <__eewr_word_m32>:
    7258:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__eewr_byte_m32>
    725c:	27 2f       	mov	r18, r23
    725e:	0c 94 eb 39 	jmp	0x73d6	; 0x73d6 <__eewr_r18_m32>

00007262 <__ctype_isfalse>:
    7262:	99 27       	eor	r25, r25
    7264:	88 27       	eor	r24, r24

00007266 <__ctype_istrue>:
    7266:	08 95       	ret

00007268 <strnlen_P>:
    7268:	fc 01       	movw	r30, r24
    726a:	05 90       	lpm	r0, Z+
    726c:	61 50       	subi	r22, 0x01	; 1
    726e:	70 40       	sbci	r23, 0x00	; 0
    7270:	01 10       	cpse	r0, r1
    7272:	d8 f7       	brcc	.-10     	; 0x726a <strnlen_P+0x2>
    7274:	80 95       	com	r24
    7276:	90 95       	com	r25
    7278:	8e 0f       	add	r24, r30
    727a:	9f 1f       	adc	r25, r31
    727c:	08 95       	ret

0000727e <strnlen>:
    727e:	fc 01       	movw	r30, r24
    7280:	61 50       	subi	r22, 0x01	; 1
    7282:	70 40       	sbci	r23, 0x00	; 0
    7284:	01 90       	ld	r0, Z+
    7286:	01 10       	cpse	r0, r1
    7288:	d8 f7       	brcc	.-10     	; 0x7280 <strnlen+0x2>
    728a:	80 95       	com	r24
    728c:	90 95       	com	r25
    728e:	8e 0f       	add	r24, r30
    7290:	9f 1f       	adc	r25, r31
    7292:	08 95       	ret

00007294 <fputc>:
    7294:	0f 93       	push	r16
    7296:	1f 93       	push	r17
    7298:	cf 93       	push	r28
    729a:	df 93       	push	r29
    729c:	18 2f       	mov	r17, r24
    729e:	09 2f       	mov	r16, r25
    72a0:	eb 01       	movw	r28, r22
    72a2:	8b 81       	ldd	r24, Y+3	; 0x03
    72a4:	81 fd       	sbrc	r24, 1
    72a6:	03 c0       	rjmp	.+6      	; 0x72ae <fputc+0x1a>
    72a8:	8f ef       	ldi	r24, 0xFF	; 255
    72aa:	9f ef       	ldi	r25, 0xFF	; 255
    72ac:	20 c0       	rjmp	.+64     	; 0x72ee <fputc+0x5a>
    72ae:	82 ff       	sbrs	r24, 2
    72b0:	10 c0       	rjmp	.+32     	; 0x72d2 <fputc+0x3e>
    72b2:	4e 81       	ldd	r20, Y+6	; 0x06
    72b4:	5f 81       	ldd	r21, Y+7	; 0x07
    72b6:	2c 81       	ldd	r18, Y+4	; 0x04
    72b8:	3d 81       	ldd	r19, Y+5	; 0x05
    72ba:	42 17       	cp	r20, r18
    72bc:	53 07       	cpc	r21, r19
    72be:	7c f4       	brge	.+30     	; 0x72de <fputc+0x4a>
    72c0:	e8 81       	ld	r30, Y
    72c2:	f9 81       	ldd	r31, Y+1	; 0x01
    72c4:	9f 01       	movw	r18, r30
    72c6:	2f 5f       	subi	r18, 0xFF	; 255
    72c8:	3f 4f       	sbci	r19, 0xFF	; 255
    72ca:	39 83       	std	Y+1, r19	; 0x01
    72cc:	28 83       	st	Y, r18
    72ce:	10 83       	st	Z, r17
    72d0:	06 c0       	rjmp	.+12     	; 0x72de <fputc+0x4a>
    72d2:	e8 85       	ldd	r30, Y+8	; 0x08
    72d4:	f9 85       	ldd	r31, Y+9	; 0x09
    72d6:	81 2f       	mov	r24, r17
    72d8:	09 95       	icall
    72da:	89 2b       	or	r24, r25
    72dc:	29 f7       	brne	.-54     	; 0x72a8 <fputc+0x14>
    72de:	2e 81       	ldd	r18, Y+6	; 0x06
    72e0:	3f 81       	ldd	r19, Y+7	; 0x07
    72e2:	2f 5f       	subi	r18, 0xFF	; 255
    72e4:	3f 4f       	sbci	r19, 0xFF	; 255
    72e6:	3f 83       	std	Y+7, r19	; 0x07
    72e8:	2e 83       	std	Y+6, r18	; 0x06
    72ea:	81 2f       	mov	r24, r17
    72ec:	90 2f       	mov	r25, r16
    72ee:	df 91       	pop	r29
    72f0:	cf 91       	pop	r28
    72f2:	1f 91       	pop	r17
    72f4:	0f 91       	pop	r16
    72f6:	08 95       	ret

000072f8 <__ultoa_invert>:
    72f8:	fa 01       	movw	r30, r20
    72fa:	aa 27       	eor	r26, r26
    72fc:	28 30       	cpi	r18, 0x08	; 8
    72fe:	51 f1       	breq	.+84     	; 0x7354 <__ultoa_invert+0x5c>
    7300:	20 31       	cpi	r18, 0x10	; 16
    7302:	81 f1       	breq	.+96     	; 0x7364 <__ultoa_invert+0x6c>
    7304:	e8 94       	clt
    7306:	6f 93       	push	r22
    7308:	6e 7f       	andi	r22, 0xFE	; 254
    730a:	6e 5f       	subi	r22, 0xFE	; 254
    730c:	7f 4f       	sbci	r23, 0xFF	; 255
    730e:	8f 4f       	sbci	r24, 0xFF	; 255
    7310:	9f 4f       	sbci	r25, 0xFF	; 255
    7312:	af 4f       	sbci	r26, 0xFF	; 255
    7314:	b1 e0       	ldi	r27, 0x01	; 1
    7316:	3e d0       	rcall	.+124    	; 0x7394 <__ultoa_invert+0x9c>
    7318:	b4 e0       	ldi	r27, 0x04	; 4
    731a:	3c d0       	rcall	.+120    	; 0x7394 <__ultoa_invert+0x9c>
    731c:	67 0f       	add	r22, r23
    731e:	78 1f       	adc	r23, r24
    7320:	89 1f       	adc	r24, r25
    7322:	9a 1f       	adc	r25, r26
    7324:	a1 1d       	adc	r26, r1
    7326:	68 0f       	add	r22, r24
    7328:	79 1f       	adc	r23, r25
    732a:	8a 1f       	adc	r24, r26
    732c:	91 1d       	adc	r25, r1
    732e:	a1 1d       	adc	r26, r1
    7330:	6a 0f       	add	r22, r26
    7332:	71 1d       	adc	r23, r1
    7334:	81 1d       	adc	r24, r1
    7336:	91 1d       	adc	r25, r1
    7338:	a1 1d       	adc	r26, r1
    733a:	20 d0       	rcall	.+64     	; 0x737c <__ultoa_invert+0x84>
    733c:	09 f4       	brne	.+2      	; 0x7340 <__ultoa_invert+0x48>
    733e:	68 94       	set
    7340:	3f 91       	pop	r19
    7342:	2a e0       	ldi	r18, 0x0A	; 10
    7344:	26 9f       	mul	r18, r22
    7346:	11 24       	eor	r1, r1
    7348:	30 19       	sub	r19, r0
    734a:	30 5d       	subi	r19, 0xD0	; 208
    734c:	31 93       	st	Z+, r19
    734e:	de f6       	brtc	.-74     	; 0x7306 <__ultoa_invert+0xe>
    7350:	cf 01       	movw	r24, r30
    7352:	08 95       	ret
    7354:	46 2f       	mov	r20, r22
    7356:	47 70       	andi	r20, 0x07	; 7
    7358:	40 5d       	subi	r20, 0xD0	; 208
    735a:	41 93       	st	Z+, r20
    735c:	b3 e0       	ldi	r27, 0x03	; 3
    735e:	0f d0       	rcall	.+30     	; 0x737e <__ultoa_invert+0x86>
    7360:	c9 f7       	brne	.-14     	; 0x7354 <__ultoa_invert+0x5c>
    7362:	f6 cf       	rjmp	.-20     	; 0x7350 <__ultoa_invert+0x58>
    7364:	46 2f       	mov	r20, r22
    7366:	4f 70       	andi	r20, 0x0F	; 15
    7368:	40 5d       	subi	r20, 0xD0	; 208
    736a:	4a 33       	cpi	r20, 0x3A	; 58
    736c:	18 f0       	brcs	.+6      	; 0x7374 <__ultoa_invert+0x7c>
    736e:	49 5d       	subi	r20, 0xD9	; 217
    7370:	31 fd       	sbrc	r19, 1
    7372:	40 52       	subi	r20, 0x20	; 32
    7374:	41 93       	st	Z+, r20
    7376:	02 d0       	rcall	.+4      	; 0x737c <__ultoa_invert+0x84>
    7378:	a9 f7       	brne	.-22     	; 0x7364 <__ultoa_invert+0x6c>
    737a:	ea cf       	rjmp	.-44     	; 0x7350 <__ultoa_invert+0x58>
    737c:	b4 e0       	ldi	r27, 0x04	; 4
    737e:	a6 95       	lsr	r26
    7380:	97 95       	ror	r25
    7382:	87 95       	ror	r24
    7384:	77 95       	ror	r23
    7386:	67 95       	ror	r22
    7388:	ba 95       	dec	r27
    738a:	c9 f7       	brne	.-14     	; 0x737e <__ultoa_invert+0x86>
    738c:	00 97       	sbiw	r24, 0x00	; 0
    738e:	61 05       	cpc	r22, r1
    7390:	71 05       	cpc	r23, r1
    7392:	08 95       	ret
    7394:	9b 01       	movw	r18, r22
    7396:	ac 01       	movw	r20, r24
    7398:	0a 2e       	mov	r0, r26
    739a:	06 94       	lsr	r0
    739c:	57 95       	ror	r21
    739e:	47 95       	ror	r20
    73a0:	37 95       	ror	r19
    73a2:	27 95       	ror	r18
    73a4:	ba 95       	dec	r27
    73a6:	c9 f7       	brne	.-14     	; 0x739a <__ultoa_invert+0xa2>
    73a8:	62 0f       	add	r22, r18
    73aa:	73 1f       	adc	r23, r19
    73ac:	84 1f       	adc	r24, r20
    73ae:	95 1f       	adc	r25, r21
    73b0:	a0 1d       	adc	r26, r0
    73b2:	08 95       	ret

000073b4 <__eerd_block_m32>:
    73b4:	dc 01       	movw	r26, r24
    73b6:	cb 01       	movw	r24, r22

000073b8 <__eerd_blraw_m32>:
    73b8:	fc 01       	movw	r30, r24
    73ba:	e1 99       	sbic	0x1c, 1	; 28
    73bc:	fe cf       	rjmp	.-4      	; 0x73ba <__eerd_blraw_m32+0x2>
    73be:	06 c0       	rjmp	.+12     	; 0x73cc <__eerd_blraw_m32+0x14>
    73c0:	ff bb       	out	0x1f, r31	; 31
    73c2:	ee bb       	out	0x1e, r30	; 30
    73c4:	e0 9a       	sbi	0x1c, 0	; 28
    73c6:	31 96       	adiw	r30, 0x01	; 1
    73c8:	0d b2       	in	r0, 0x1d	; 29
    73ca:	0d 92       	st	X+, r0
    73cc:	41 50       	subi	r20, 0x01	; 1
    73ce:	50 40       	sbci	r21, 0x00	; 0
    73d0:	b8 f7       	brcc	.-18     	; 0x73c0 <__eerd_blraw_m32+0x8>
    73d2:	08 95       	ret

000073d4 <__eewr_byte_m32>:
    73d4:	26 2f       	mov	r18, r22

000073d6 <__eewr_r18_m32>:
    73d6:	e1 99       	sbic	0x1c, 1	; 28
    73d8:	fe cf       	rjmp	.-4      	; 0x73d6 <__eewr_r18_m32>
    73da:	9f bb       	out	0x1f, r25	; 31
    73dc:	8e bb       	out	0x1e, r24	; 30
    73de:	2d bb       	out	0x1d, r18	; 29
    73e0:	0f b6       	in	r0, 0x3f	; 63
    73e2:	f8 94       	cli
    73e4:	e2 9a       	sbi	0x1c, 2	; 28
    73e6:	e1 9a       	sbi	0x1c, 1	; 28
    73e8:	0f be       	out	0x3f, r0	; 63
    73ea:	01 96       	adiw	r24, 0x01	; 1
    73ec:	08 95       	ret

000073ee <__mulsi3>:
    73ee:	db 01       	movw	r26, r22
    73f0:	8f 93       	push	r24
    73f2:	9f 93       	push	r25
    73f4:	0e 94 07 3a 	call	0x740e	; 0x740e <__muluhisi3>
    73f8:	bf 91       	pop	r27
    73fa:	af 91       	pop	r26
    73fc:	a2 9f       	mul	r26, r18
    73fe:	80 0d       	add	r24, r0
    7400:	91 1d       	adc	r25, r1
    7402:	a3 9f       	mul	r26, r19
    7404:	90 0d       	add	r25, r0
    7406:	b2 9f       	mul	r27, r18
    7408:	90 0d       	add	r25, r0
    740a:	11 24       	eor	r1, r1
    740c:	08 95       	ret

0000740e <__muluhisi3>:
    740e:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <__umulhisi3>
    7412:	a5 9f       	mul	r26, r21
    7414:	90 0d       	add	r25, r0
    7416:	b4 9f       	mul	r27, r20
    7418:	90 0d       	add	r25, r0
    741a:	a4 9f       	mul	r26, r20
    741c:	80 0d       	add	r24, r0
    741e:	91 1d       	adc	r25, r1
    7420:	11 24       	eor	r1, r1
    7422:	08 95       	ret

00007424 <__mulshisi3>:
    7424:	b7 ff       	sbrs	r27, 7
    7426:	0c 94 07 3a 	jmp	0x740e	; 0x740e <__muluhisi3>

0000742a <__mulohisi3>:
    742a:	0e 94 07 3a 	call	0x740e	; 0x740e <__muluhisi3>
    742e:	82 1b       	sub	r24, r18
    7430:	93 0b       	sbc	r25, r19
    7432:	08 95       	ret

00007434 <__prologue_saves__>:
    7434:	2f 92       	push	r2
    7436:	3f 92       	push	r3
    7438:	4f 92       	push	r4
    743a:	5f 92       	push	r5
    743c:	6f 92       	push	r6
    743e:	7f 92       	push	r7
    7440:	8f 92       	push	r8
    7442:	9f 92       	push	r9
    7444:	af 92       	push	r10
    7446:	bf 92       	push	r11
    7448:	cf 92       	push	r12
    744a:	df 92       	push	r13
    744c:	ef 92       	push	r14
    744e:	ff 92       	push	r15
    7450:	0f 93       	push	r16
    7452:	1f 93       	push	r17
    7454:	cf 93       	push	r28
    7456:	df 93       	push	r29
    7458:	cd b7       	in	r28, 0x3d	; 61
    745a:	de b7       	in	r29, 0x3e	; 62
    745c:	ca 1b       	sub	r28, r26
    745e:	db 0b       	sbc	r29, r27
    7460:	0f b6       	in	r0, 0x3f	; 63
    7462:	f8 94       	cli
    7464:	de bf       	out	0x3e, r29	; 62
    7466:	0f be       	out	0x3f, r0	; 63
    7468:	cd bf       	out	0x3d, r28	; 61
    746a:	09 94       	ijmp

0000746c <__epilogue_restores__>:
    746c:	2a 88       	ldd	r2, Y+18	; 0x12
    746e:	39 88       	ldd	r3, Y+17	; 0x11
    7470:	48 88       	ldd	r4, Y+16	; 0x10
    7472:	5f 84       	ldd	r5, Y+15	; 0x0f
    7474:	6e 84       	ldd	r6, Y+14	; 0x0e
    7476:	7d 84       	ldd	r7, Y+13	; 0x0d
    7478:	8c 84       	ldd	r8, Y+12	; 0x0c
    747a:	9b 84       	ldd	r9, Y+11	; 0x0b
    747c:	aa 84       	ldd	r10, Y+10	; 0x0a
    747e:	b9 84       	ldd	r11, Y+9	; 0x09
    7480:	c8 84       	ldd	r12, Y+8	; 0x08
    7482:	df 80       	ldd	r13, Y+7	; 0x07
    7484:	ee 80       	ldd	r14, Y+6	; 0x06
    7486:	fd 80       	ldd	r15, Y+5	; 0x05
    7488:	0c 81       	ldd	r16, Y+4	; 0x04
    748a:	1b 81       	ldd	r17, Y+3	; 0x03
    748c:	aa 81       	ldd	r26, Y+2	; 0x02
    748e:	b9 81       	ldd	r27, Y+1	; 0x01
    7490:	ce 0f       	add	r28, r30
    7492:	d1 1d       	adc	r29, r1
    7494:	0f b6       	in	r0, 0x3f	; 63
    7496:	f8 94       	cli
    7498:	de bf       	out	0x3e, r29	; 62
    749a:	0f be       	out	0x3f, r0	; 63
    749c:	cd bf       	out	0x3d, r28	; 61
    749e:	ed 01       	movw	r28, r26
    74a0:	08 95       	ret

000074a2 <__umulhisi3>:
    74a2:	a2 9f       	mul	r26, r18
    74a4:	b0 01       	movw	r22, r0
    74a6:	b3 9f       	mul	r27, r19
    74a8:	c0 01       	movw	r24, r0
    74aa:	a3 9f       	mul	r26, r19
    74ac:	70 0d       	add	r23, r0
    74ae:	81 1d       	adc	r24, r1
    74b0:	11 24       	eor	r1, r1
    74b2:	91 1d       	adc	r25, r1
    74b4:	b2 9f       	mul	r27, r18
    74b6:	70 0d       	add	r23, r0
    74b8:	81 1d       	adc	r24, r1
    74ba:	11 24       	eor	r1, r1
    74bc:	91 1d       	adc	r25, r1
    74be:	08 95       	ret

000074c0 <_exit>:
    74c0:	f8 94       	cli

000074c2 <__stop_program>:
    74c2:	ff cf       	rjmp	.-2      	; 0x74c2 <__stop_program>
