
QEPU_Project_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000736e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  0000736e  00007422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000ee  008000ee  000074b0  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000074b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000074b2  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  0000750e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013377  00000000  00000000  00007926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d56  00000000  00000000  0001ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000180e  00000000  00000000  0001c9f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000157c  00000000  00000000  0001e204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001247  00000000  00000000  0001f780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000720e  00000000  00000000  000209c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  00027bd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	65 21       	and	r22, r5
      56:	85 21       	and	r24, r5
      58:	9a 21       	and	r25, r10
      5a:	ac 21       	and	r26, r12
      5c:	b9 21       	and	r27, r9
      5e:	c9 21       	and	r28, r9
      60:	d2 21       	and	r29, r2
      62:	da 21       	and	r29, r10
      64:	e5 21       	and	r30, r5
      66:	f0 21       	and	r31, r0
      68:	fa 21       	and	r31, r10
      6a:	04 22       	and	r0, r20
      6c:	13 22       	and	r1, r19
      6e:	1a 22       	and	r1, r26
      70:	29 22       	and	r2, r25
      72:	2d 22       	and	r2, r29
      74:	48 22       	and	r4, r24
      76:	67 22       	and	r6, r23
      78:	86 22       	and	r8, r22
      7a:	a5 22       	and	r10, r21
      7c:	c4 22       	and	r12, r20
      7e:	e3 22       	and	r14, r19
      80:	02 23       	and	r16, r18
      82:	21 23       	and	r18, r17
      84:	36 23       	and	r19, r22
      86:	42 23       	and	r20, r18
      88:	4c 23       	and	r20, r28
      8a:	68 23       	and	r22, r24
      8c:	7e 23       	and	r23, r30
      8e:	9a 23       	and	r25, r26
      90:	b0 23       	and	r27, r16
      92:	c4 23       	and	r28, r20
      94:	db 23       	and	r29, r27
      96:	f4 23       	and	r31, r20
      98:	12 24       	eor	r1, r2
      9a:	2c 24       	eor	r2, r12
      9c:	46 24       	eor	r4, r6
      9e:	5e 24       	eor	r5, r14
      a0:	73 24       	eor	r7, r3
      a2:	88 24       	eor	r8, r8
      a4:	a0 24       	eor	r10, r0
      a6:	b5 24       	eor	r11, r5
      a8:	ca 24       	eor	r12, r10
      aa:	e4 24       	eor	r14, r4
      ac:	fb 24       	eor	r15, r11
      ae:	12 25       	eor	r17, r2
      b0:	2a 25       	eor	r18, r10
      b2:	3f 25       	eor	r19, r15
      b4:	54 25       	eor	r21, r4
      b6:	6e 25       	eor	r22, r14
      b8:	85 25       	eor	r24, r5
      ba:	9c 25       	eor	r25, r12
      bc:	af 25       	eor	r26, r15
      be:	cc 25       	eor	r28, r12
      c0:	e3 25       	eor	r30, r3
      c2:	fb 25       	eor	r31, r11
      c4:	18 26       	eor	r1, r24
      c6:	2f 26       	eor	r2, r31
      c8:	47 26       	eor	r4, r23
      ca:	4c 26       	eor	r4, r28
      cc:	b1 2b       	or	r27, r17
      ce:	53 26       	eor	r5, r19
      d0:	5e 26       	eor	r5, r30
      d2:	89 26       	eor	r8, r25
      d4:	b4 26       	eor	r11, r20
      d6:	df 26       	eor	r13, r31
      d8:	0a 27       	eor	r16, r26
      da:	35 27       	eor	r19, r21
      dc:	60 27       	eor	r22, r16
      de:	8d 27       	eor	r24, r29
      e0:	ba 27       	eor	r27, r26
      e2:	e7 27       	eor	r30, r23
      e4:	3b 28       	or	r3, r11
      e6:	8f 28       	or	r8, r15
      e8:	e3 28       	or	r14, r3
      ea:	37 29       	or	r19, r7
      ec:	8b 29       	or	r24, r11
      ee:	df 29       	or	r29, r15
      f0:	33 2a       	or	r3, r19
      f2:	af 2a       	or	r10, r31
      f4:	2b 2b       	or	r18, r27
      f6:	08 4a       	sbci	r16, 0xA8	; 168
      f8:	d7 3b       	cpi	r29, 0xB7	; 183
      fa:	3b ce       	rjmp	.-906    	; 0xfffffd72 <__eeprom_end+0xff7efd70>
      fc:	01 6e       	ori	r16, 0xE1	; 225
      fe:	84 bc       	out	0x24, r8	; 36
     100:	bf fd       	.word	0xfdbf	; ????
     102:	c1 2f       	mov	r28, r17
     104:	3d 6c       	ori	r19, 0xCD	; 205
     106:	74 31       	cpi	r23, 0x14	; 20
     108:	9a bd       	out	0x2a, r25	; 42
     10a:	56 83       	std	Z+6, r21	; 0x06
     10c:	3d da       	rcall	.-2950   	; 0xfffff588 <__eeprom_end+0xff7ef586>
     10e:	3d 00       	.word	0x003d	; ????
     110:	c7 7f       	andi	r28, 0xF7	; 247
     112:	11 be       	out	0x31, r1	; 49
     114:	d9 e4       	ldi	r29, 0x49	; 73
     116:	bb 4c       	sbci	r27, 0xCB	; 203
     118:	3e 91       	ld	r19, -X
     11a:	6b aa       	std	Y+51, r6	; 0x33
     11c:	aa be       	out	0x3a, r10	; 58
     11e:	00 00       	nop
     120:	00 80       	ld	r0, Z
     122:	3f 07       	cpc	r19, r31
     124:	63 42       	sbci	r22, 0x23	; 35
     126:	36 b7       	in	r19, 0x36	; 54
     128:	9b d8       	rcall	.-3786   	; 0xfffff260 <__eeprom_end+0xff7ef25e>
     12a:	a7 1a       	sub	r10, r23
     12c:	39 68       	ori	r19, 0x89	; 137
     12e:	56 18       	sub	r5, r6
     130:	ae ba       	out	0x1e, r10	; 30
     132:	ab 55       	subi	r26, 0x5B	; 91
     134:	8c 1d       	adc	r24, r12
     136:	3c b7       	in	r19, 0x3c	; 60
     138:	cc 57       	subi	r28, 0x7C	; 124
     13a:	63 bd       	out	0x23, r22	; 35
     13c:	6d ed       	ldi	r22, 0xDD	; 221
     13e:	fd 75       	andi	r31, 0x5D	; 93
     140:	3e f6       	brtc	.-114    	; 0xd0 <__SREG__+0x91>
     142:	17 72       	andi	r17, 0x27	; 39
     144:	31 bf       	out	0x31, r19	; 49
     146:	00 00       	nop
     148:	00 80       	ld	r0, Z
     14a:	3f 07       	cpc	r19, r31
     14c:	2c 7a       	andi	r18, 0xAC	; 172
     14e:	a5 ba       	out	0x15, r10	; 21
     150:	6c c5       	rjmp	.+2776   	; 0xc2a <_ZN5Gates8ampl2vecEiPiS0_+0x15e>
     152:	90 da       	rcall	.-2784   	; 0xfffff674 <__eeprom_end+0xff7ef672>
     154:	3b 93       	.word	0x933b	; ????
     156:	65 fc       	sbrc	r6, 5
     158:	8b bc       	out	0x2b, r8	; 43
     15a:	53 f8       	bld	r5, 3
     15c:	10 fd       	sbrc	r17, 0
     15e:	3c 56       	subi	r19, 0x6C	; 108
     160:	92 83       	std	Z+2, r25	; 0x02
     162:	4d bd       	out	0x2d, r20	; 45
     164:	87 9d       	mul	r24, r7
     166:	3a b6       	in	r3, 0x3a	; 58
     168:	3d cb       	rjmp	.-2438   	; 0xfffff7e4 <__eeprom_end+0xff7ef7e2>
     16a:	c9 bf       	out	0x39, r28	; 57
     16c:	5b be       	out	0x3b, r5	; 59
     16e:	73 da       	rcall	.-2842   	; 0xfffff656 <__eeprom_end+0xff7ef654>
     170:	0f c9       	rjmp	.-3554   	; 0xfffff390 <__eeprom_end+0xff7ef38e>
     172:	3f 05       	cpc	r19, r15
     174:	a8 4c       	sbci	r26, 0xC8	; 200
     176:	cd b2       	in	r12, 0x1d	; 29
     178:	d4 4e       	sbci	r29, 0xE4	; 228
     17a:	b9 38       	cpi	r27, 0x89	; 137
     17c:	36 a9       	ldd	r19, Z+54	; 0x36
     17e:	02 0c       	add	r0, r2
     180:	50 b9       	out	0x00, r21	; 0
     182:	91 86       	std	Z+9, r9	; 0x09
     184:	88 08       	sbc	r8, r8
     186:	3c a6       	std	Y+44, r3	; 0x2c
     188:	aa aa       	std	Y+50, r10	; 0x32
     18a:	2a be       	out	0x3a, r2	; 58
     18c:	00 00       	nop
     18e:	00 80       	ld	r0, Z
     190:	3f 08       	sbc	r3, r15
     192:	00 00       	nop
     194:	00 be       	out	0x30, r0	; 48
     196:	92 24       	eor	r9, r2
     198:	49 12       	cpse	r4, r25
     19a:	3e ab       	std	Y+54, r19	; 0x36
     19c:	aa aa       	std	Y+50, r10	; 0x32
     19e:	2a be       	out	0x3a, r2	; 58
     1a0:	cd cc       	rjmp	.-1638   	; 0xfffffb3c <__eeprom_end+0xff7efb3a>
     1a2:	cc 4c       	sbci	r28, 0xCC	; 204
     1a4:	3e 00       	.word	0x003e	; ????
     1a6:	00 00       	nop
     1a8:	80 be       	out	0x30, r8	; 48
     1aa:	ab aa       	std	Y+51, r10	; 0x33
     1ac:	aa aa       	std	Y+50, r10	; 0x32
     1ae:	3e 00       	.word	0x003e	; ????
     1b0:	00 00       	nop
     1b2:	00 bf       	out	0x30, r16	; 48
     1b4:	00 00       	nop
     1b6:	00 80       	ld	r0, Z
     1b8:	3f 00       	.word	0x003f	; ????
     1ba:	00 00       	nop
     1bc:	00 00       	nop
     1be:	08 41       	sbci	r16, 0x18	; 24
     1c0:	78 d3       	rcall	.+1776   	; 0x8b2 <__stack+0x53>
     1c2:	bb 43       	sbci	r27, 0x3B	; 59
     1c4:	87 d1       	rcall	.+782    	; 0x4d4 <_ZN6EEProm4readEj+0x4a>
     1c6:	13 3d       	cpi	r17, 0xD3	; 211
     1c8:	19 0e       	add	r1, r25
     1ca:	3c c3       	rjmp	.+1656   	; 0x844 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x168>
     1cc:	bd 42       	sbci	r27, 0x2D	; 45
     1ce:	82 ad       	ldd	r24, Z+58	; 0x3a
     1d0:	2b 3e       	cpi	r18, 0xEB	; 235
     1d2:	68 ec       	ldi	r22, 0xC8	; 200
     1d4:	82 76       	andi	r24, 0x62	; 98
     1d6:	be d9       	rcall	.-3204   	; 0xfffff554 <__eeprom_end+0xff7ef552>
     1d8:	8f e1       	ldi	r24, 0x1F	; 31
     1da:	a9 3e       	cpi	r26, 0xE9	; 233
     1dc:	4c 80       	ldd	r4, Y+4	; 0x04
     1de:	ef ff       	.word	0xffef	; ????
     1e0:	be 01       	movw	r22, r28
     1e2:	c4 ff       	sbrs	r28, 4
     1e4:	7f 3f       	cpi	r23, 0xFF	; 255
     1e6:	00 00       	nop
     1e8:	00 00       	nop
	...

000001ec <__ctors_start>:
     1ec:	9e 1d       	adc	r25, r14

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf e5       	ldi	r28, 0x5F	; 95
     1f4:	d8 e0       	ldi	r29, 0x08	; 8
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	10 e0       	ldi	r17, 0x00	; 0
     1fc:	a0 e6       	ldi	r26, 0x60	; 96
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	ee e6       	ldi	r30, 0x6E	; 110
     202:	f3 e7       	ldi	r31, 0x73	; 115
     204:	02 c0       	rjmp	.+4      	; 0x20a <__do_copy_data+0x10>
     206:	05 90       	lpm	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	ae 3e       	cpi	r26, 0xEE	; 238
     20c:	b1 07       	cpc	r27, r17
     20e:	d9 f7       	brne	.-10     	; 0x206 <__do_copy_data+0xc>

00000210 <__do_clear_bss>:
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	ae ee       	ldi	r26, 0xEE	; 238
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	01 c0       	rjmp	.+2      	; 0x21a <.do_clear_bss_start>

00000218 <.do_clear_bss_loop>:
     218:	1d 92       	st	X+, r1

0000021a <.do_clear_bss_start>:
     21a:	ae 3f       	cpi	r26, 0xFE	; 254
     21c:	b2 07       	cpc	r27, r18
     21e:	e1 f7       	brne	.-8      	; 0x218 <.do_clear_bss_loop>

00000220 <__do_global_ctors>:
     220:	11 e0       	ldi	r17, 0x01	; 1
     222:	ce ee       	ldi	r28, 0xEE	; 238
     224:	d1 e0       	ldi	r29, 0x01	; 1
     226:	04 c0       	rjmp	.+8      	; 0x230 <__do_global_ctors+0x10>
     228:	22 97       	sbiw	r28, 0x02	; 2
     22a:	fe 01       	movw	r30, r28
     22c:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <__tablejump__>
     230:	cc 3e       	cpi	r28, 0xEC	; 236
     232:	d1 07       	cpc	r29, r17
     234:	c9 f7       	brne	.-14     	; 0x228 <__do_global_ctors+0x8>
     236:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <main>
     23a:	0c 94 b5 39 	jmp	0x736a	; 0x736a <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <_ZN7ComplexC1Eff>:
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	fc 01       	movw	r30, r24
     248:	40 83       	st	Z, r20
     24a:	51 83       	std	Z+1, r21	; 0x01
     24c:	62 83       	std	Z+2, r22	; 0x02
     24e:	73 83       	std	Z+3, r23	; 0x03
     250:	04 83       	std	Z+4, r16	; 0x04
     252:	15 83       	std	Z+5, r17	; 0x05
     254:	26 83       	std	Z+6, r18	; 0x06
     256:	37 83       	std	Z+7, r19	; 0x07
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	08 95       	ret

0000025e <_ZN7ComplexC1Ev>:
     25e:	fc 01       	movw	r30, r24
     260:	10 82       	st	Z, r1
     262:	11 82       	std	Z+1, r1	; 0x01
     264:	12 82       	std	Z+2, r1	; 0x02
     266:	13 82       	std	Z+3, r1	; 0x03
     268:	14 82       	std	Z+4, r1	; 0x04
     26a:	15 82       	std	Z+5, r1	; 0x05
     26c:	16 82       	std	Z+6, r1	; 0x06
     26e:	17 82       	std	Z+7, r1	; 0x07
     270:	08 95       	ret

00000272 <_ZN7Complex3addES_>:
     272:	af 92       	push	r10
     274:	bf 92       	push	r11
     276:	cf 92       	push	r12
     278:	df 92       	push	r13
     27a:	ef 92       	push	r14
     27c:	ff 92       	push	r15
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	68 97       	sbiw	r28, 0x18	; 24
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
     296:	5c 01       	movw	r10, r24
     298:	09 8b       	std	Y+17, r16	; 0x11
     29a:	1a 8b       	std	Y+18, r17	; 0x12
     29c:	2b 8b       	std	Y+19, r18	; 0x13
     29e:	3c 8b       	std	Y+20, r19	; 0x14
     2a0:	4d 8b       	std	Y+21, r20	; 0x15
     2a2:	5e 8b       	std	Y+22, r21	; 0x16
     2a4:	6f 8b       	std	Y+23, r22	; 0x17
     2a6:	78 8f       	std	Y+24, r23	; 0x18
     2a8:	2d 89       	ldd	r18, Y+21	; 0x15
     2aa:	3e 89       	ldd	r19, Y+22	; 0x16
     2ac:	4f 89       	ldd	r20, Y+23	; 0x17
     2ae:	58 8d       	ldd	r21, Y+24	; 0x18
     2b0:	fc 01       	movw	r30, r24
     2b2:	64 81       	ldd	r22, Z+4	; 0x04
     2b4:	75 81       	ldd	r23, Z+5	; 0x05
     2b6:	86 81       	ldd	r24, Z+6	; 0x06
     2b8:	97 81       	ldd	r25, Z+7	; 0x07
     2ba:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <__addsf3>
     2be:	6b 01       	movw	r12, r22
     2c0:	7c 01       	movw	r14, r24
     2c2:	29 89       	ldd	r18, Y+17	; 0x11
     2c4:	3a 89       	ldd	r19, Y+18	; 0x12
     2c6:	4b 89       	ldd	r20, Y+19	; 0x13
     2c8:	5c 89       	ldd	r21, Y+20	; 0x14
     2ca:	f5 01       	movw	r30, r10
     2cc:	60 81       	ld	r22, Z
     2ce:	71 81       	ldd	r23, Z+1	; 0x01
     2d0:	82 81       	ldd	r24, Z+2	; 0x02
     2d2:	93 81       	ldd	r25, Z+3	; 0x03
     2d4:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <__addsf3>
     2d8:	ab 01       	movw	r20, r22
     2da:	bc 01       	movw	r22, r24
     2dc:	97 01       	movw	r18, r14
     2de:	86 01       	movw	r16, r12
     2e0:	ce 01       	movw	r24, r28
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     2e8:	88 e0       	ldi	r24, 0x08	; 8
     2ea:	fe 01       	movw	r30, r28
     2ec:	31 96       	adiw	r30, 0x01	; 1
     2ee:	de 01       	movw	r26, r28
     2f0:	19 96       	adiw	r26, 0x09	; 9
     2f2:	01 90       	ld	r0, Z+
     2f4:	0d 92       	st	X+, r0
     2f6:	8a 95       	dec	r24
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <_ZN7Complex3addES_+0x80>
     2fa:	29 85       	ldd	r18, Y+9	; 0x09
     2fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     2fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     300:	5c 85       	ldd	r21, Y+12	; 0x0c
     302:	6d 85       	ldd	r22, Y+13	; 0x0d
     304:	7e 85       	ldd	r23, Y+14	; 0x0e
     306:	8f 85       	ldd	r24, Y+15	; 0x0f
     308:	98 89       	ldd	r25, Y+16	; 0x10
     30a:	68 96       	adiw	r28, 0x18	; 24
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	cf 90       	pop	r12
     326:	bf 90       	pop	r11
     328:	af 90       	pop	r10
     32a:	08 95       	ret

0000032c <_ZN7Complex3mulES_>:
     32c:	4f 92       	push	r4
     32e:	5f 92       	push	r5
     330:	6f 92       	push	r6
     332:	7f 92       	push	r7
     334:	8f 92       	push	r8
     336:	9f 92       	push	r9
     338:	af 92       	push	r10
     33a:	bf 92       	push	r11
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	a0 97       	sbiw	r28, 0x20	; 32
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	09 8b       	std	Y+17, r16	; 0x11
     35e:	1a 8b       	std	Y+18, r17	; 0x12
     360:	2b 8b       	std	Y+19, r18	; 0x13
     362:	3c 8b       	std	Y+20, r19	; 0x14
     364:	4d 8b       	std	Y+21, r20	; 0x15
     366:	5e 8b       	std	Y+22, r21	; 0x16
     368:	6f 8b       	std	Y+23, r22	; 0x17
     36a:	78 8f       	std	Y+24, r23	; 0x18
     36c:	89 88       	ldd	r8, Y+17	; 0x11
     36e:	9a 88       	ldd	r9, Y+18	; 0x12
     370:	ab 88       	ldd	r10, Y+19	; 0x13
     372:	bc 88       	ldd	r11, Y+20	; 0x14
     374:	2d 89       	ldd	r18, Y+21	; 0x15
     376:	3e 89       	ldd	r19, Y+22	; 0x16
     378:	4f 89       	ldd	r20, Y+23	; 0x17
     37a:	58 8d       	ldd	r21, Y+24	; 0x18
     37c:	2d 8f       	std	Y+29, r18	; 0x1d
     37e:	3e 8f       	std	Y+30, r19	; 0x1e
     380:	4f 8f       	std	Y+31, r20	; 0x1f
     382:	58 a3       	std	Y+32, r21	; 0x20
     384:	fc 01       	movw	r30, r24
     386:	c0 80       	ld	r12, Z
     388:	d1 80       	ldd	r13, Z+1	; 0x01
     38a:	e2 80       	ldd	r14, Z+2	; 0x02
     38c:	f3 80       	ldd	r15, Z+3	; 0x03
     38e:	24 81       	ldd	r18, Z+4	; 0x04
     390:	35 81       	ldd	r19, Z+5	; 0x05
     392:	46 81       	ldd	r20, Z+6	; 0x06
     394:	57 81       	ldd	r21, Z+7	; 0x07
     396:	29 8f       	std	Y+25, r18	; 0x19
     398:	3a 8f       	std	Y+26, r19	; 0x1a
     39a:	4b 8f       	std	Y+27, r20	; 0x1b
     39c:	5c 8f       	std	Y+28, r21	; 0x1c
     39e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3a0:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3a2:	4f 8d       	ldd	r20, Y+31	; 0x1f
     3a4:	58 a1       	ldd	r21, Y+32	; 0x20
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     3ae:	2b 01       	movw	r4, r22
     3b0:	3c 01       	movw	r6, r24
     3b2:	a5 01       	movw	r20, r10
     3b4:	94 01       	movw	r18, r8
     3b6:	69 8d       	ldd	r22, Y+25	; 0x19
     3b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3be:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     3c2:	9b 01       	movw	r18, r22
     3c4:	ac 01       	movw	r20, r24
     3c6:	c3 01       	movw	r24, r6
     3c8:	b2 01       	movw	r22, r4
     3ca:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <__addsf3>
     3ce:	2b 01       	movw	r4, r22
     3d0:	3c 01       	movw	r6, r24
     3d2:	a5 01       	movw	r20, r10
     3d4:	94 01       	movw	r18, r8
     3d6:	c7 01       	movw	r24, r14
     3d8:	b6 01       	movw	r22, r12
     3da:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     3de:	6b 01       	movw	r12, r22
     3e0:	7c 01       	movw	r14, r24
     3e2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3e4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3e6:	4f 8d       	ldd	r20, Y+31	; 0x1f
     3e8:	58 a1       	ldd	r21, Y+32	; 0x20
     3ea:	69 8d       	ldd	r22, Y+25	; 0x19
     3ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3f2:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     3f6:	9b 01       	movw	r18, r22
     3f8:	ac 01       	movw	r20, r24
     3fa:	c7 01       	movw	r24, r14
     3fc:	b6 01       	movw	r22, r12
     3fe:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <__subsf3>
     402:	ab 01       	movw	r20, r22
     404:	bc 01       	movw	r22, r24
     406:	93 01       	movw	r18, r6
     408:	82 01       	movw	r16, r4
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     412:	88 e0       	ldi	r24, 0x08	; 8
     414:	fe 01       	movw	r30, r28
     416:	31 96       	adiw	r30, 0x01	; 1
     418:	de 01       	movw	r26, r28
     41a:	19 96       	adiw	r26, 0x09	; 9
     41c:	01 90       	ld	r0, Z+
     41e:	0d 92       	st	X+, r0
     420:	8a 95       	dec	r24
     422:	e1 f7       	brne	.-8      	; 0x41c <_ZN7Complex3mulES_+0xf0>
     424:	29 85       	ldd	r18, Y+9	; 0x09
     426:	3a 85       	ldd	r19, Y+10	; 0x0a
     428:	4b 85       	ldd	r20, Y+11	; 0x0b
     42a:	5c 85       	ldd	r21, Y+12	; 0x0c
     42c:	6d 85       	ldd	r22, Y+13	; 0x0d
     42e:	7e 85       	ldd	r23, Y+14	; 0x0e
     430:	8f 85       	ldd	r24, Y+15	; 0x0f
     432:	98 89       	ldd	r25, Y+16	; 0x10
     434:	a0 96       	adiw	r28, 0x20	; 32
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	bf 90       	pop	r11
     452:	af 90       	pop	r10
     454:	9f 90       	pop	r9
     456:	8f 90       	pop	r8
     458:	7f 90       	pop	r7
     45a:	6f 90       	pop	r6
     45c:	5f 90       	pop	r5
     45e:	4f 90       	pop	r4
     460:	08 95       	ret

00000462 <_ZN7Complex3argEv>:
     462:	fc 01       	movw	r30, r24
     464:	20 81       	ld	r18, Z
     466:	31 81       	ldd	r19, Z+1	; 0x01
     468:	42 81       	ldd	r20, Z+2	; 0x02
     46a:	53 81       	ldd	r21, Z+3	; 0x03
     46c:	64 81       	ldd	r22, Z+4	; 0x04
     46e:	75 81       	ldd	r23, Z+5	; 0x05
     470:	86 81       	ldd	r24, Z+6	; 0x06
     472:	97 81       	ldd	r25, Z+7	; 0x07
     474:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
     478:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <atan>
     47c:	08 95       	ret

0000047e <_ZN6EEPromC1Ev>:
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     47e:	85 e0       	ldi	r24, 0x05	; 5
     480:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     482:	81 b1       	in	r24, 0x01	; 1
     484:	8c 7f       	andi	r24, 0xFC	; 252
     486:	81 b9       	out	0x01, r24	; 1
     488:	08 95       	ret

0000048a <_ZN6EEProm4readEj>:
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     48a:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     48c:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     48e:	24 e8       	ldi	r18, 0x84	; 132
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     490:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     492:	06 b6       	in	r0, 0x36	; 54
     494:	07 fe       	sbrs	r0, 7
     496:	fd cf       	rjmp	.-6      	; 0x492 <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     498:	81 b1       	in	r24, 0x01	; 1
     49a:	88 7f       	andi	r24, 0xF8	; 248
     49c:	88 30       	cpi	r24, 0x08	; 8
     49e:	09 f0       	breq	.+2      	; 0x4a2 <_ZN6EEProm4readEj+0x18>
     4a0:	41 c0       	rjmp	.+130    	; 0x524 <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     4a2:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     4a4:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     4a6:	06 b6       	in	r0, 0x36	; 54
     4a8:	07 fe       	sbrs	r0, 7
     4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     4ac:	81 b1       	in	r24, 0x01	; 1
     4ae:	88 7f       	andi	r24, 0xF8	; 248
}

uint8_t EEProm::read(uint16_t address){
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
     4b0:	88 31       	cpi	r24, 0x18	; 24
     4b2:	71 f7       	brne	.-36     	; 0x490 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     4b4:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     4b6:	84 e8       	ldi	r24, 0x84	; 132
     4b8:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4ba:	06 b6       	in	r0, 0x36	; 54
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     4c0:	81 b1       	in	r24, 0x01	; 1
     4c2:	88 7f       	andi	r24, 0xF8	; 248
     4c4:	88 32       	cpi	r24, 0x28	; 40
     4c6:	81 f5       	brne	.+96     	; 0x528 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     4c8:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     4ca:	84 e8       	ldi	r24, 0x84	; 132
     4cc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4ce:	06 b6       	in	r0, 0x36	; 54
     4d0:	07 fe       	sbrs	r0, 7
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     4d4:	81 b1       	in	r24, 0x01	; 1
     4d6:	88 7f       	andi	r24, 0xF8	; 248
     4d8:	88 32       	cpi	r24, 0x28	; 40
     4da:	41 f5       	brne	.+80     	; 0x52c <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     4dc:	84 ea       	ldi	r24, 0xA4	; 164
     4de:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4e0:	06 b6       	in	r0, 0x36	; 54
     4e2:	07 fe       	sbrs	r0, 7
     4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     4e6:	81 b1       	in	r24, 0x01	; 1
     4e8:	88 7f       	andi	r24, 0xF8	; 248
     4ea:	80 31       	cpi	r24, 0x10	; 16
     4ec:	09 f5       	brne	.+66     	; 0x530 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     4ee:	81 ea       	ldi	r24, 0xA1	; 161
     4f0:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     4f2:	84 e8       	ldi	r24, 0x84	; 132
     4f4:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4f6:	06 b6       	in	r0, 0x36	; 54
     4f8:	07 fe       	sbrs	r0, 7
     4fa:	fd cf       	rjmp	.-6      	; 0x4f6 <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     4fc:	81 b1       	in	r24, 0x01	; 1
     4fe:	88 7f       	andi	r24, 0xF8	; 248
     500:	80 34       	cpi	r24, 0x40	; 64
     502:	c1 f4       	brne	.+48     	; 0x534 <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     504:	84 e8       	ldi	r24, 0x84	; 132
     506:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     508:	06 b6       	in	r0, 0x36	; 54
     50a:	07 fe       	sbrs	r0, 7
     50c:	fd cf       	rjmp	.-6      	; 0x508 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     50e:	81 b1       	in	r24, 0x01	; 1
     510:	88 7f       	andi	r24, 0xF8	; 248
     512:	88 35       	cpi	r24, 0x58	; 88
     514:	89 f4       	brne	.+34     	; 0x538 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     516:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     518:	94 e9       	ldi	r25, 0x94	; 148
     51a:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     51c:	06 b6       	in	r0, 0x36	; 54
     51e:	04 fc       	sbrc	r0, 4
     520:	fd cf       	rjmp	.-6      	; 0x51c <_ZN6EEProm4readEj+0x92>
     522:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     538:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     53a:	08 95       	ret

0000053c <_ZN6EEProm11count_linesEv>:
	}
	return eeprom_mem;*/
	return "";
}

int EEProm::count_lines(){
     53c:	6f 92       	push	r6
     53e:	7f 92       	push	r7
     540:	8f 92       	push	r8
     542:	9f 92       	push	r9
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	6c 97       	sbiw	r28, 0x1c	; 28
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	de bf       	out	0x3e, r29	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	cd bf       	out	0x3d, r28	; 61
     568:	5c 01       	movw	r10, r24
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
	bool all_data_read=false;
	
	for(int i=0;true;i++){
     56a:	e1 2c       	mov	r14, r1
     56c:	f1 2c       	mov	r15, r1
	return "";
}

int EEProm::count_lines(){
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
     56e:	c1 2c       	mov	r12, r1
     570:	d1 2c       	mov	r13, r1
     572:	81 2c       	mov	r8, r1
     574:	91 2c       	mov	r9, r1
     576:	8e 01       	movw	r16, r28
     578:	05 5e       	subi	r16, 0xE5	; 229
     57a:	1f 4f       	sbci	r17, 0xFF	; 255
			ctr++;
			for(int j=0;j<INSTR_WIDTH;j++){
				if(tdb[j]==0xFF) all_data_read=true;
				else all_data_read=false;
			}
			tdb_i=0;
     57c:	61 2c       	mov	r6, r1
     57e:	71 2c       	mov	r7, r1
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
	bool all_data_read=false;
	
	for(int i=0;true;i++){
		tdb[tdb_i]=read(i);
     580:	b7 01       	movw	r22, r14
     582:	c5 01       	movw	r24, r10
     584:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6EEProm4readEj>
     588:	f4 01       	movw	r30, r8
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	2c 0f       	add	r18, r28
     594:	3d 1f       	adc	r19, r29
     596:	e2 0f       	add	r30, r18
     598:	f3 1f       	adc	r31, r19
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	91 83       	std	Z+1, r25	; 0x01
     59e:	80 83       	st	Z, r24
		
		if(tdb_i>=INSTR_WIDTH){
     5a0:	3d e0       	ldi	r19, 0x0D	; 13
     5a2:	83 16       	cp	r8, r19
     5a4:	91 04       	cpc	r9, r1
     5a6:	74 f0       	brlt	.+28     	; 0x5c4 <_ZN6EEProm11count_linesEv+0x88>
			ctr++;
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	c8 1a       	sub	r12, r24
     5ac:	d8 0a       	sbc	r13, r24
     5ae:	fe 01       	movw	r30, r28
     5b0:	31 96       	adiw	r30, 0x01	; 1
			for(int j=0;j<INSTR_WIDTH;j++){
				if(tdb[j]==0xFF) all_data_read=true;
     5b2:	81 91       	ld	r24, Z+
     5b4:	91 91       	ld	r25, Z+
	for(int i=0;true;i++){
		tdb[tdb_i]=read(i);
		
		if(tdb_i>=INSTR_WIDTH){
			ctr++;
			for(int j=0;j<INSTR_WIDTH;j++){
     5b6:	e0 17       	cp	r30, r16
     5b8:	f1 07       	cpc	r31, r17
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <_ZN6EEProm11count_linesEv+0x76>
				if(tdb[j]==0xFF) all_data_read=true;
				else all_data_read=false;
			}
			tdb_i=0;
			if(all_data_read) return ctr;
     5bc:	8f 3f       	cpi	r24, 0xFF	; 255
     5be:	91 05       	cpc	r25, r1
     5c0:	29 f4       	brne	.+10     	; 0x5cc <_ZN6EEProm11count_linesEv+0x90>
     5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <_ZN6EEProm11count_linesEv+0x9c>
		}else tdb_i++;
     5c4:	2f ef       	ldi	r18, 0xFF	; 255
     5c6:	82 1a       	sub	r8, r18
     5c8:	92 0a       	sbc	r9, r18
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <_ZN6EEProm11count_linesEv+0x94>
			ctr++;
			for(int j=0;j<INSTR_WIDTH;j++){
				if(tdb[j]==0xFF) all_data_read=true;
				else all_data_read=false;
			}
			tdb_i=0;
     5cc:	86 2c       	mov	r8, r6
     5ce:	97 2c       	mov	r9, r7
int EEProm::count_lines(){
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
	bool all_data_read=false;
	
	for(int i=0;true;i++){
     5d0:	3f ef       	ldi	r19, 0xFF	; 255
     5d2:	e3 1a       	sub	r14, r19
     5d4:	f3 0a       	sbc	r15, r19
				else all_data_read=false;
			}
			tdb_i=0;
			if(all_data_read) return ctr;
		}else tdb_i++;
	}
     5d6:	d4 cf       	rjmp	.-88     	; 0x580 <_ZN6EEProm11count_linesEv+0x44>
	return ctr;
}
     5d8:	c6 01       	movw	r24, r12
     5da:	6c 96       	adiw	r28, 0x1c	; 28
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	bf 90       	pop	r11
     5f8:	af 90       	pop	r10
     5fa:	9f 90       	pop	r9
     5fc:	8f 90       	pop	r8
     5fe:	7f 90       	pop	r7
     600:	6f 90       	pop	r6
     602:	08 95       	ret

00000604 <_ZN4QEPU4FlagC1Ev>:
#include "qepu.h"

int8_t QEPU::Flag::flaglist[FLAG_COUNT];

QEPU::Flag::Flag(){
	flaglist[ALLOW_BRANCH_STACK]=HIGH;	
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 f6 00 	sts	0x00F6, r24
     60a:	08 95       	ret

0000060c <_ZN4QEPU4Flag7compareEii>:
}

void QEPU::Flag::compare(int data1,int data2){
	flaglist[CND_LWER]=(data1<data2)?HIGH:LOW;
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	86 17       	cp	r24, r22
     610:	97 07       	cpc	r25, r23
     612:	0c f0       	brlt	.+2      	; 0x616 <_ZN4QEPU4Flag7compareEii+0xa>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	20 93 ee 00 	sts	0x00EE, r18
	flaglist[CND_LWER_EQUAL]=(data1<=data2)?HIGH:LOW;
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	68 17       	cp	r22, r24
     61e:	79 07       	cpc	r23, r25
     620:	0c f4       	brge	.+2      	; 0x624 <_ZN4QEPU4Flag7compareEii+0x18>
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	20 93 ef 00 	sts	0x00EF, r18
	flaglist[CND_EQUAL]=(data1==data2)?HIGH:LOW;
     628:	21 e0       	ldi	r18, 0x01	; 1
     62a:	86 17       	cp	r24, r22
     62c:	97 07       	cpc	r25, r23
     62e:	09 f0       	breq	.+2      	; 0x632 <_ZN4QEPU4Flag7compareEii+0x26>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	20 93 f0 00 	sts	0x00F0, r18
	flaglist[CND_GRTER_EQUAL]=(data1>=data2)?HIGH:LOW;
     636:	21 e0       	ldi	r18, 0x01	; 1
     638:	86 17       	cp	r24, r22
     63a:	97 07       	cpc	r25, r23
     63c:	0c f4       	brge	.+2      	; 0x640 <_ZN4QEPU4Flag7compareEii+0x34>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	20 93 f1 00 	sts	0x00F1, r18
	flaglist[CND_GRTER]=(data1>data2)?HIGH:LOW;
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	68 17       	cp	r22, r24
     648:	79 07       	cpc	r23, r25
     64a:	0c f0       	brlt	.+2      	; 0x64e <_ZN4QEPU4Flag7compareEii+0x42>
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	20 93 f2 00 	sts	0x00F2, r18
	flaglist[CND_DIFF]=(data1!=data2)?HIGH:LOW;
     652:	21 e0       	ldi	r18, 0x01	; 1
     654:	86 17       	cp	r24, r22
     656:	97 07       	cpc	r25, r23
     658:	09 f4       	brne	.+2      	; 0x65c <_ZN4QEPU4Flag7compareEii+0x50>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	20 93 f3 00 	sts	0x00F3, r18
	flaglist[CND_ZERO]=(data1==LOW)?HIGH:LOW;
     660:	21 e0       	ldi	r18, 0x01	; 1
     662:	00 97       	sbiw	r24, 0x00	; 0
     664:	09 f0       	breq	.+2      	; 0x668 <_ZN4QEPU4Flag7compareEii+0x5c>
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	20 93 f4 00 	sts	0x00F4, r18
	flaglist[CND_NOT_ZERO]=(data1!=LOW)?HIGH:LOW;
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	89 2b       	or	r24, r25
     670:	09 f4       	brne	.+2      	; 0x674 <_ZN4QEPU4Flag7compareEii+0x68>
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	20 93 f5 00 	sts	0x00F5, r18
     678:	08 95       	ret

0000067a <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){}
     67a:	08 95       	ret

0000067c <_ZN5Gates5touchEd>:
		}
	}
}
/*TO DELETE LATER (END) */

int Gates::touch(double probability){
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	6a 01       	movw	r12, r20
     68a:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     68c:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <rand>
     690:	ec 01       	movw	r28, r24
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	3e ef       	ldi	r19, 0xFE	; 254
     696:	4f ef       	ldi	r20, 0xFF	; 255
     698:	56 e4       	ldi	r21, 0x46	; 70
     69a:	c7 01       	movw	r24, r14
     69c:	b6 01       	movw	r22, r12
     69e:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     6a2:	6b 01       	movw	r12, r22
     6a4:	7c 01       	movw	r14, r24
     6a6:	be 01       	movw	r22, r28
     6a8:	88 27       	eor	r24, r24
     6aa:	77 fd       	sbrc	r23, 7
     6ac:	80 95       	com	r24
     6ae:	98 2f       	mov	r25, r24
     6b0:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
     6b4:	9b 01       	movw	r18, r22
     6b6:	ac 01       	movw	r20, r24
     6b8:	c1 e0       	ldi	r28, 0x01	; 1
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
     6bc:	c7 01       	movw	r24, r14
     6be:	b6 01       	movw	r22, r12
     6c0:	0e 94 ba 31 	call	0x6374	; 0x6374 <__gesf2>
     6c4:	88 23       	and	r24, r24
     6c6:	14 f4       	brge	.+4      	; 0x6cc <_ZN5Gates5touchEd+0x50>
     6c8:	c0 e0       	ldi	r28, 0x00	; 0
     6ca:	d0 e0       	ldi	r29, 0x00	; 0
}
     6cc:	ce 01       	movw	r24, r28
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	df 90       	pop	r13
     6d8:	cf 90       	pop	r12
     6da:	08 95       	ret

000006dc <_ZN5Gates17reverse_kroneckerEP7Complexi>:

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     6dc:	2f 92       	push	r2
     6de:	3f 92       	push	r3
     6e0:	4f 92       	push	r4
     6e2:	5f 92       	push	r5
     6e4:	6f 92       	push	r6
     6e6:	7f 92       	push	r7
     6e8:	8f 92       	push	r8
     6ea:	9f 92       	push	r9
     6ec:	af 92       	push	r10
     6ee:	bf 92       	push	r11
     6f0:	cf 92       	push	r12
     6f2:	df 92       	push	r13
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	a4 97       	sbiw	r28, 0x24	; 36
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	8c 01       	movw	r16, r24
     712:	6b 01       	movw	r12, r22
     714:	5a 01       	movw	r10, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     716:	ba 01       	movw	r22, r20
     718:	88 27       	eor	r24, r24
     71a:	77 fd       	sbrc	r23, 7
     71c:	80 95       	com	r24
     71e:	98 2f       	mov	r25, r24
     720:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
     724:	0e 94 00 32 	call	0x6400	; 0x6400 <log>
     728:	28 e1       	ldi	r18, 0x18	; 24
     72a:	32 e7       	ldi	r19, 0x72	; 114
     72c:	41 e3       	ldi	r20, 0x31	; 49
     72e:	5f e3       	ldi	r21, 0x3F	; 63
     730:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
     734:	2b 01       	movw	r4, r22
     736:	3c 01       	movw	r6, r24
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <__addsf3>
     740:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__fixsfsi>
     744:	69 a3       	std	Y+33, r22	; 0x21
     746:	7a a3       	std	Y+34, r23	; 0x22
     748:	8b a3       	std	Y+35, r24	; 0x23
     74a:	9c a3       	std	Y+36, r25	; 0x24
     74c:	29 a0       	ldd	r2, Y+33	; 0x21
     74e:	3a a0       	ldd	r3, Y+34	; 0x22
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
     750:	c1 01       	movw	r24, r2
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	0e 94 b6 33 	call	0x676c	; 0x676c <malloc>
     762:	4c 01       	movw	r8, r24
		
	for(int i=0;i<kron_size;i++)
     764:	1a 14       	cp	r1, r10
     766:	1b 04       	cpc	r1, r11
     768:	0c f0       	brlt	.+2      	; 0x76c <_ZN5Gates17reverse_kroneckerEP7Complexi+0x90>
     76a:	9d c0       	rjmp	.+314    	; 0x8a6 <__stack+0x47>
		if(kron[i].re==1){
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	40 e8       	ldi	r20, 0x80	; 128
     772:	5f e3       	ldi	r21, 0x3F	; 63
     774:	f6 01       	movw	r30, r12
     776:	60 81       	ld	r22, Z
     778:	71 81       	ldd	r23, Z+1	; 0x01
     77a:	82 81       	ldd	r24, Z+2	; 0x02
     77c:	93 81       	ldd	r25, Z+3	; 0x03
     77e:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
     782:	81 11       	cpse	r24, r1
     784:	87 c0       	rjmp	.+270    	; 0x894 <__stack+0x35>
     786:	11 c0       	rjmp	.+34     	; 0x7aa <_ZN5Gates17reverse_kroneckerEP7Complexi+0xce>
     788:	f8 e0       	ldi	r31, 0x08	; 8
     78a:	cf 0e       	add	r12, r31
     78c:	d1 1c       	adc	r13, r1
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e8       	ldi	r20, 0x80	; 128
     794:	5f e3       	ldi	r21, 0x3F	; 63
     796:	f6 01       	movw	r30, r12
     798:	60 81       	ld	r22, Z
     79a:	71 81       	ldd	r23, Z+1	; 0x01
     79c:	82 81       	ldd	r24, Z+2	; 0x02
     79e:	93 81       	ldd	r25, Z+3	; 0x03
     7a0:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
     7a4:	81 11       	cpse	r24, r1
     7a6:	78 c0       	rjmp	.+240    	; 0x898 <__stack+0x39>
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <_ZN5Gates17reverse_kroneckerEP7Complexi+0xd2>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     7aa:	e1 2c       	mov	r14, r1
     7ac:	f1 2c       	mov	r15, r1
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
     7ae:	c3 01       	movw	r24, r6
     7b0:	b2 01       	movw	r22, r4
     7b2:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__fixsfsi>
     7b6:	ab 01       	movw	r20, r22
     7b8:	b7 01       	movw	r22, r14
     7ba:	c8 01       	movw	r24, r16
     7bc:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <_ZN5Utils10int2binstrEii>
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     7c0:	12 14       	cp	r1, r2
     7c2:	13 04       	cpc	r1, r3
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xec>
     7c6:	6f c0       	rjmp	.+222    	; 0x8a6 <__stack+0x47>
     7c8:	7c 01       	movw	r14, r24
     7ca:	54 01       	movw	r10, r8
     7cc:	64 01       	movw	r12, r8
     7ce:	f8 e0       	ldi	r31, 0x08	; 8
     7d0:	cf 0e       	add	r12, r31
     7d2:	d1 1c       	adc	r13, r1
     7d4:	49 a0       	ldd	r4, Y+33	; 0x21
     7d6:	5a a0       	ldd	r5, Y+34	; 0x22
     7d8:	48 0e       	add	r4, r24
     7da:	59 1e       	adc	r5, r25
				if(toBin[j]=='1'){
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     7dc:	68 94       	set
     7de:	77 24       	eor	r7, r7
     7e0:	73 f8       	bld	r7, 3
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
				if(toBin[j]=='1'){
     7e2:	f7 01       	movw	r30, r14
     7e4:	81 91       	ld	r24, Z+
     7e6:	7f 01       	movw	r14, r30
     7e8:	81 33       	cpi	r24, 0x31	; 49
     7ea:	29 f5       	brne	.+74     	; 0x836 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x15a>
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
     7ec:	00 e0       	ldi	r16, 0x00	; 0
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	98 01       	movw	r18, r16
     7f2:	b9 01       	movw	r22, r18
     7f4:	a8 01       	movw	r20, r16
     7f6:	ce 01       	movw	r24, r28
     7f8:	49 96       	adiw	r24, 0x19	; 25
     7fa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     7fe:	fe 01       	movw	r30, r28
     800:	79 96       	adiw	r30, 0x19	; 25
     802:	d5 01       	movw	r26, r10
     804:	87 2d       	mov	r24, r7
     806:	01 90       	ld	r0, Z+
     808:	0d 92       	st	X+, r0
     80a:	8a 95       	dec	r24
     80c:	e1 f7       	brne	.-8      	; 0x806 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x12a>
     80e:	00 e0       	ldi	r16, 0x00	; 0
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	98 01       	movw	r18, r16
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	60 e8       	ldi	r22, 0x80	; 128
     81a:	7f e3       	ldi	r23, 0x3F	; 63
     81c:	ce 01       	movw	r24, r28
     81e:	41 96       	adiw	r24, 0x11	; 17
     820:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     824:	fe 01       	movw	r30, r28
     826:	71 96       	adiw	r30, 0x11	; 17
     828:	d6 01       	movw	r26, r12
     82a:	87 2d       	mov	r24, r7
     82c:	01 90       	ld	r0, Z+
     82e:	0d 92       	st	X+, r0
     830:	8a 95       	dec	r24
     832:	e1 f7       	brne	.-8      	; 0x82c <_ZN5Gates17reverse_kroneckerEP7Complexi+0x150>
     834:	24 c0       	rjmp	.+72     	; 0x87e <__stack+0x1f>
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     836:	00 e0       	ldi	r16, 0x00	; 0
     838:	10 e0       	ldi	r17, 0x00	; 0
     83a:	98 01       	movw	r18, r16
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	60 e8       	ldi	r22, 0x80	; 128
     842:	7f e3       	ldi	r23, 0x3F	; 63
     844:	ce 01       	movw	r24, r28
     846:	09 96       	adiw	r24, 0x09	; 9
     848:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     84c:	fe 01       	movw	r30, r28
     84e:	39 96       	adiw	r30, 0x09	; 9
     850:	d5 01       	movw	r26, r10
     852:	87 2d       	mov	r24, r7
     854:	01 90       	ld	r0, Z+
     856:	0d 92       	st	X+, r0
     858:	8a 95       	dec	r24
     85a:	e1 f7       	brne	.-8      	; 0x854 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x178>
     85c:	00 e0       	ldi	r16, 0x00	; 0
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	98 01       	movw	r18, r16
     862:	b9 01       	movw	r22, r18
     864:	a8 01       	movw	r20, r16
     866:	ce 01       	movw	r24, r28
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
     86e:	fe 01       	movw	r30, r28
     870:	31 96       	adiw	r30, 0x01	; 1
     872:	d6 01       	movw	r26, r12
     874:	87 2d       	mov	r24, r7
     876:	01 90       	ld	r0, Z+
     878:	0d 92       	st	X+, r0
     87a:	8a 95       	dec	r24
     87c:	e1 f7       	brne	.-8      	; 0x876 <__stack+0x17>
     87e:	f0 e1       	ldi	r31, 0x10	; 16
     880:	af 0e       	add	r10, r31
     882:	b1 1c       	adc	r11, r1
     884:	20 e1       	ldi	r18, 0x10	; 16
     886:	c2 0e       	add	r12, r18
     888:	d1 1c       	adc	r13, r1
		
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     88a:	e4 14       	cp	r14, r4
     88c:	f5 04       	cpc	r15, r5
     88e:	09 f0       	breq	.+2      	; 0x892 <__stack+0x33>
     890:	a8 cf       	rjmp	.-176    	; 0x7e2 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x106>
     892:	09 c0       	rjmp	.+18     	; 0x8a6 <__stack+0x47>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     894:	e1 2c       	mov	r14, r1
     896:	f1 2c       	mov	r15, r1
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	e8 1a       	sub	r14, r24
     89c:	f8 0a       	sbc	r15, r24
     89e:	ea 14       	cp	r14, r10
     8a0:	fb 04       	cpc	r15, r11
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <__stack+0x47>
     8a4:	71 cf       	rjmp	.-286    	; 0x788 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xac>
				index_rev_kro+=2;
			}
			break;
		}
	return reversed_kronecker;
}
     8a6:	c4 01       	movw	r24, r8
     8a8:	a4 96       	adiw	r28, 0x24	; 36
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	bf 90       	pop	r11
     8c6:	af 90       	pop	r10
     8c8:	9f 90       	pop	r9
     8ca:	8f 90       	pop	r8
     8cc:	7f 90       	pop	r7
     8ce:	6f 90       	pop	r6
     8d0:	5f 90       	pop	r5
     8d2:	4f 90       	pop	r4
     8d4:	3f 90       	pop	r3
     8d6:	2f 90       	pop	r2
     8d8:	08 95       	ret

000008da <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     8da:	2f 92       	push	r2
     8dc:	3f 92       	push	r3
     8de:	4f 92       	push	r4
     8e0:	5f 92       	push	r5
     8e2:	6f 92       	push	r6
     8e4:	7f 92       	push	r7
     8e6:	8f 92       	push	r8
     8e8:	9f 92       	push	r9
     8ea:	af 92       	push	r10
     8ec:	bf 92       	push	r11
     8ee:	cf 92       	push	r12
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	28 97       	sbiw	r28, 0x08	; 8
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	7c 01       	movw	r14, r24
     910:	5b 01       	movw	r10, r22
     912:	8a 01       	movw	r16, r20
     914:	3e 83       	std	Y+6, r19	; 0x06
     916:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     918:	41 30       	cpi	r20, 0x01	; 1
     91a:	51 05       	cpc	r21, r1
     91c:	09 f4       	brne	.+2      	; 0x920 <_ZN5Gates9kroneckerEP7Complexii+0x46>
     91e:	bb c0       	rjmp	.+374    	; 0xa96 <_ZN5Gates9kroneckerEP7Complexii+0x1bc>
	int kron_size=utils.custom_pow(2,qb_count);
     920:	9a 01       	movw	r18, r20
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e4       	ldi	r23, 0x40	; 64
     92a:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <_ZN5Utils10custom_powEfi>
     92e:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__fixsfsi>
     932:	78 87       	std	Y+8, r23	; 0x08
     934:	6f 83       	std	Y+7, r22	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     936:	9b 01       	movw	r18, r22
     938:	22 0f       	add	r18, r18
     93a:	33 1f       	adc	r19, r19
     93c:	22 0f       	add	r18, r18
     93e:	33 1f       	adc	r19, r19
     940:	22 0f       	add	r18, r18
     942:	33 1f       	adc	r19, r19
     944:	3c 83       	std	Y+4, r19	; 0x04
     946:	2b 83       	std	Y+3, r18	; 0x03
     948:	c9 01       	movw	r24, r18
     94a:	0e 94 b6 33 	call	0x676c	; 0x676c <malloc>
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	9a 83       	std	Y+2, r25	; 0x02
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     952:	8f 81       	ldd	r24, Y+7	; 0x07
     954:	98 85       	ldd	r25, Y+8	; 0x08
     956:	18 16       	cp	r1, r24
     958:	19 06       	cpc	r1, r25
     95a:	0c f0       	brlt	.+2      	; 0x95e <_ZN5Gates9kroneckerEP7Complexii+0x84>
     95c:	53 c0       	rjmp	.+166    	; 0xa04 <_ZN5Gates9kroneckerEP7Complexii+0x12a>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     95e:	18 01       	movw	r2, r16
     960:	22 0c       	add	r2, r2
     962:	33 1c       	adc	r3, r3
     964:	c9 80       	ldd	r12, Y+1	; 0x01
     966:	da 80       	ldd	r13, Y+2	; 0x02
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     968:	61 2c       	mov	r6, r1
     96a:	71 2c       	mov	r7, r1
	int kron_size=utils.custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
     96c:	e2 e0       	ldi	r30, 0x02	; 2
     96e:	f0 e0       	ldi	r31, 0x00	; 0
Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=utils.custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
     970:	41 2c       	mov	r4, r1
     972:	51 2c       	mov	r5, r1
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     974:	c6 01       	movw	r24, r12
     976:	cf 80       	ldd	r12, Y+7	; 0x07
     978:	d8 84       	ldd	r13, Y+8	; 0x08
     97a:	47 01       	movw	r8, r14
     97c:	98 87       	std	Y+8, r25	; 0x08
     97e:	8f 83       	std	Y+7, r24	; 0x07
     980:	2e 16       	cp	r2, r30
     982:	3f 06       	cpc	r3, r31
     984:	29 f4       	brne	.+10     	; 0x990 <_ZN5Gates9kroneckerEP7Complexii+0xb6>
     986:	9f ef       	ldi	r25, 0xFF	; 255
     988:	49 1a       	sub	r4, r25
     98a:	59 0a       	sbc	r5, r25
     98c:	e2 e0       	ldi	r30, 0x02	; 2
     98e:	f0 e0       	ldi	r31, 0x00	; 0
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     990:	7f 01       	movw	r14, r30
     992:	2f ef       	ldi	r18, 0xFF	; 255
     994:	e2 1a       	sub	r14, r18
     996:	f2 0a       	sbc	r15, r18
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	ea 0d       	add	r30, r10
     9a6:	fb 1d       	adc	r31, r11
     9a8:	00 81       	ld	r16, Z
     9aa:	11 81       	ldd	r17, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	33 81       	ldd	r19, Z+3	; 0x03
     9b0:	44 81       	ldd	r20, Z+4	; 0x04
     9b2:	55 81       	ldd	r21, Z+5	; 0x05
     9b4:	66 81       	ldd	r22, Z+6	; 0x06
     9b6:	77 81       	ldd	r23, Z+7	; 0x07
     9b8:	c2 01       	movw	r24, r4
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	8a 0d       	add	r24, r10
     9c8:	9b 1d       	adc	r25, r11
     9ca:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7Complex3mulES_>
     9ce:	ef 81       	ldd	r30, Y+7	; 0x07
     9d0:	f8 85       	ldd	r31, Y+8	; 0x08
     9d2:	20 83       	st	Z, r18
     9d4:	31 83       	std	Z+1, r19	; 0x01
     9d6:	42 83       	std	Z+2, r20	; 0x02
     9d8:	53 83       	std	Z+3, r21	; 0x03
     9da:	64 83       	std	Z+4, r22	; 0x04
     9dc:	75 83       	std	Z+5, r23	; 0x05
     9de:	86 83       	std	Z+6, r24	; 0x06
     9e0:	97 83       	std	Z+7, r25	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     9e2:	ff ef       	ldi	r31, 0xFF	; 255
     9e4:	6f 1a       	sub	r6, r31
     9e6:	7f 0a       	sbc	r7, r31
     9e8:	2f 81       	ldd	r18, Y+7	; 0x07
     9ea:	38 85       	ldd	r19, Y+8	; 0x08
     9ec:	28 5f       	subi	r18, 0xF8	; 248
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	38 87       	std	Y+8, r19	; 0x08
     9f2:	2f 83       	std	Y+7, r18	; 0x07
     9f4:	6c 14       	cp	r6, r12
     9f6:	7d 04       	cpc	r7, r13
     9f8:	11 f0       	breq	.+4      	; 0x9fe <_ZN5Gates9kroneckerEP7Complexii+0x124>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     9fa:	f7 01       	movw	r30, r14
     9fc:	c1 cf       	rjmp	.-126    	; 0x980 <_ZN5Gates9kroneckerEP7Complexii+0xa6>
     9fe:	d8 86       	std	Y+8, r13	; 0x08
     a00:	cf 82       	std	Y+7, r12	; 0x07
     a02:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     a04:	8d 81       	ldd	r24, Y+5	; 0x05
     a06:	9e 81       	ldd	r25, Y+6	; 0x06
     a08:	89 2b       	or	r24, r25
     a0a:	a9 f5       	brne	.+106    	; 0xa76 <_ZN5Gates9kroneckerEP7Complexii+0x19c>
				kronvec[i].re=binary_touch;
				binary_touch=0;
				break;
			}
	}
	return kronvec;
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	9a 81       	ldd	r25, Y+2	; 0x02
     a10:	44 c0       	rjmp	.+136    	; 0xa9a <_ZN5Gates9kroneckerEP7Complexii+0x1c0>
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     a12:	51 01       	movw	r10, r2
     a14:	f1 01       	movw	r30, r2
     a16:	40 81       	ld	r20, Z
     a18:	51 81       	ldd	r21, Z+1	; 0x01
     a1a:	62 81       	ldd	r22, Z+2	; 0x02
     a1c:	73 81       	ldd	r23, Z+3	; 0x03
     a1e:	c7 01       	movw	r24, r14
     a20:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN5Gates5touchEd>
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	e9 f4       	brne	.+58     	; 0xa62 <_ZN5Gates9kroneckerEP7Complexii+0x188>
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	9c 81       	ldd	r25, Y+4	; 0x04
     a2c:	86 0d       	add	r24, r6
     a2e:	97 1d       	adc	r25, r7
     a30:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     a32:	10 82       	st	Z, r1
     a34:	11 82       	std	Z+1, r1	; 0x01
     a36:	12 82       	std	Z+2, r1	; 0x02
     a38:	13 82       	std	Z+3, r1	; 0x03
     a3a:	14 82       	std	Z+4, r1	; 0x04
     a3c:	15 82       	std	Z+5, r1	; 0x05
     a3e:	16 82       	std	Z+6, r1	; 0x06
     a40:	17 82       	std	Z+7, r1	; 0x07
     a42:	38 96       	adiw	r30, 0x08	; 8
     a44:	e8 17       	cp	r30, r24
     a46:	f9 07       	cpc	r31, r25
     a48:	a1 f7       	brne	.-24     	; 0xa32 <_ZN5Gates9kroneckerEP7Complexii+0x158>
				kronvec[i].re=binary_touch;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	a0 e8       	ldi	r26, 0x80	; 128
     a50:	bf e3       	ldi	r27, 0x3F	; 63
     a52:	f5 01       	movw	r30, r10
     a54:	80 83       	st	Z, r24
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	a2 83       	std	Z+2, r26	; 0x02
     a5a:	b3 83       	std	Z+3, r27	; 0x03
				binary_touch=0;
				break;
			}
	}
	return kronvec;
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
     a5e:	9a 81       	ldd	r25, Y+2	; 0x02
     a60:	1c c0       	rjmp	.+56     	; 0xa9a <_ZN5Gates9kroneckerEP7Complexii+0x1c0>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     a62:	ff ef       	ldi	r31, 0xFF	; 255
     a64:	cf 1a       	sub	r12, r31
     a66:	df 0a       	sbc	r13, r31
     a68:	28 e0       	ldi	r18, 0x08	; 8
     a6a:	22 0e       	add	r2, r18
     a6c:	31 1c       	adc	r3, r1
     a6e:	c8 14       	cp	r12, r8
     a70:	d9 04       	cpc	r13, r9
     a72:	79 f6       	brne	.-98     	; 0xa12 <_ZN5Gates9kroneckerEP7Complexii+0x138>
     a74:	06 c0       	rjmp	.+12     	; 0xa82 <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
     a76:	49 80       	ldd	r4, Y+1	; 0x01
     a78:	5a 80       	ldd	r5, Y+2	; 0x02
     a7a:	00 e0       	ldi	r16, 0x00	; 0
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	8f 80       	ldd	r8, Y+7	; 0x07
     a80:	98 84       	ldd	r9, Y+8	; 0x08
     a82:	18 14       	cp	r1, r8
     a84:	19 04       	cpc	r1, r9
     a86:	ec f7       	brge	.-6      	; 0xa82 <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
     a88:	64 2c       	mov	r6, r4
     a8a:	75 2c       	mov	r7, r5
     a8c:	24 2c       	mov	r2, r4
     a8e:	35 2c       	mov	r3, r5
     a90:	c0 2e       	mov	r12, r16
     a92:	d1 2e       	mov	r13, r17
     a94:	be cf       	rjmp	.-132    	; 0xa12 <_ZN5Gates9kroneckerEP7Complexii+0x138>
		}
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     a96:	86 2f       	mov	r24, r22
     a98:	9b 2d       	mov	r25, r11
				binary_touch=0;
				break;
			}
	}
	return kronvec;
}
     a9a:	28 96       	adiw	r28, 0x08	; 8
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	bf 90       	pop	r11
     ab8:	af 90       	pop	r10
     aba:	9f 90       	pop	r9
     abc:	8f 90       	pop	r8
     abe:	7f 90       	pop	r7
     ac0:	6f 90       	pop	r6
     ac2:	5f 90       	pop	r5
     ac4:	4f 90       	pop	r4
     ac6:	3f 90       	pop	r3
     ac8:	2f 90       	pop	r2
     aca:	08 95       	ret

00000acc <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     acc:	2f 92       	push	r2
     ace:	3f 92       	push	r3
     ad0:	4f 92       	push	r4
     ad2:	5f 92       	push	r5
     ad4:	6f 92       	push	r6
     ad6:	7f 92       	push	r7
     ad8:	8f 92       	push	r8
     ada:	9f 92       	push	r9
     adc:	af 92       	push	r10
     ade:	bf 92       	push	r11
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	28 97       	sbiw	r28, 0x08	; 8
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	9e 83       	std	Y+6, r25	; 0x06
     b02:	8d 83       	std	Y+5, r24	; 0x05
     b04:	7a 83       	std	Y+2, r23	; 0x02
     b06:	69 83       	std	Y+1, r22	; 0x01
     b08:	04 2f       	mov	r16, r20
     b0a:	15 2f       	mov	r17, r21
     b0c:	c2 2e       	mov	r12, r18
     b0e:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     b10:	cb 01       	movw	r24, r22
     b12:	82 95       	swap	r24
     b14:	92 95       	swap	r25
     b16:	90 7f       	andi	r25, 0xF0	; 240
     b18:	98 27       	eor	r25, r24
     b1a:	80 7f       	andi	r24, 0xF0	; 240
     b1c:	98 27       	eor	r25, r24
     b1e:	0e 94 b6 33 	call	0x676c	; 0x676c <malloc>
     b22:	8b 83       	std	Y+3, r24	; 0x03
     b24:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     b26:	29 80       	ldd	r2, Y+1	; 0x01
     b28:	3a 80       	ldd	r3, Y+2	; 0x02
     b2a:	22 0c       	add	r2, r2
     b2c:	33 1c       	adc	r3, r3
     b2e:	12 14       	cp	r1, r2
     b30:	13 04       	cpc	r1, r3
     b32:	0c f0       	brlt	.+2      	; 0xb36 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     b34:	ac c0       	rjmp	.+344    	; 0xc8e <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     b36:	a8 2e       	mov	r10, r24
     b38:	b9 2e       	mov	r11, r25
     b3a:	e0 2e       	mov	r14, r16
     b3c:	f1 2e       	mov	r15, r17
     b3e:	0c 2d       	mov	r16, r12
     b40:	1d 2d       	mov	r17, r13
     b42:	81 2c       	mov	r8, r1
     b44:	91 2c       	mov	r9, r1
     b46:	b8 86       	std	Y+8, r11	; 0x08
     b48:	af 82       	std	Y+7, r10	; 0x07
     b4a:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     b4c:	f7 01       	movw	r30, r14
     b4e:	41 90       	ld	r4, Z+
     b50:	51 90       	ld	r5, Z+
     b52:	7f 01       	movw	r14, r30
     b54:	66 24       	eor	r6, r6
     b56:	57 fc       	sbrc	r5, 7
     b58:	60 94       	com	r6
     b5a:	76 2c       	mov	r7, r6
     b5c:	c3 01       	movw	r24, r6
     b5e:	b2 01       	movw	r22, r4
     b60:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
     b64:	2b ed       	ldi	r18, 0xDB	; 219
     b66:	3f e0       	ldi	r19, 0x0F	; 15
     b68:	49 e4       	ldi	r20, 0x49	; 73
     b6a:	50 e4       	ldi	r21, 0x40	; 64
     b6c:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	44 eb       	ldi	r20, 0xB4	; 180
     b76:	53 e4       	ldi	r21, 0x43	; 67
     b78:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
     b7c:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <cos>
     b80:	ef 81       	ldd	r30, Y+7	; 0x07
     b82:	f8 85       	ldd	r31, Y+8	; 0x08
     b84:	60 83       	st	Z, r22
     b86:	71 83       	std	Z+1, r23	; 0x01
     b88:	82 83       	std	Z+2, r24	; 0x02
     b8a:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     b8c:	c3 01       	movw	r24, r6
     b8e:	b2 01       	movw	r22, r4
     b90:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
     b94:	2b ed       	ldi	r18, 0xDB	; 219
     b96:	3f e0       	ldi	r19, 0x0F	; 15
     b98:	49 e4       	ldi	r20, 0x49	; 73
     b9a:	50 e4       	ldi	r21, 0x40	; 64
     b9c:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	44 eb       	ldi	r20, 0xB4	; 180
     ba6:	53 e4       	ldi	r21, 0x43	; 67
     ba8:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
     bac:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sin>
     bb0:	2b 01       	movw	r4, r22
     bb2:	3c 01       	movw	r6, r24
     bb4:	58 01       	movw	r10, r16
     bb6:	f8 01       	movw	r30, r16
     bb8:	61 91       	ld	r22, Z+
     bba:	71 91       	ld	r23, Z+
     bbc:	8f 01       	movw	r16, r30
     bbe:	88 27       	eor	r24, r24
     bc0:	77 fd       	sbrc	r23, 7
     bc2:	80 95       	com	r24
     bc4:	98 2f       	mov	r25, r24
     bc6:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
     bca:	2b ed       	ldi	r18, 0xDB	; 219
     bcc:	3f e0       	ldi	r19, 0x0F	; 15
     bce:	49 e4       	ldi	r20, 0x49	; 73
     bd0:	50 e4       	ldi	r21, 0x40	; 64
     bd2:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	44 e3       	ldi	r20, 0x34	; 52
     bdc:	53 e4       	ldi	r21, 0x43	; 67
     bde:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
     be2:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <cos>
     be6:	9b 01       	movw	r18, r22
     be8:	ac 01       	movw	r20, r24
     bea:	c3 01       	movw	r24, r6
     bec:	b2 01       	movw	r22, r4
     bee:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     bf2:	ef 81       	ldd	r30, Y+7	; 0x07
     bf4:	f8 85       	ldd	r31, Y+8	; 0x08
     bf6:	60 87       	std	Z+8, r22	; 0x08
     bf8:	71 87       	std	Z+9, r23	; 0x09
     bfa:	82 87       	std	Z+10, r24	; 0x0a
     bfc:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index]*M_PI)/180);  // BETA IM
     bfe:	f6 01       	movw	r30, r12
     c00:	60 81       	ld	r22, Z
     c02:	71 81       	ldd	r23, Z+1	; 0x01
     c04:	88 27       	eor	r24, r24
     c06:	77 fd       	sbrc	r23, 7
     c08:	80 95       	com	r24
     c0a:	98 2f       	mov	r25, r24
     c0c:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
     c10:	2b ed       	ldi	r18, 0xDB	; 219
     c12:	3f e0       	ldi	r19, 0x0F	; 15
     c14:	49 e4       	ldi	r20, 0x49	; 73
     c16:	50 e4       	ldi	r21, 0x40	; 64
     c18:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	44 eb       	ldi	r20, 0xB4	; 180
     c22:	53 e4       	ldi	r21, 0x43	; 67
     c24:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
     c28:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sin>
     c2c:	2b 01       	movw	r4, r22
     c2e:	3c 01       	movw	r6, r24
     c30:	f5 01       	movw	r30, r10
     c32:	60 81       	ld	r22, Z
     c34:	71 81       	ldd	r23, Z+1	; 0x01
     c36:	88 27       	eor	r24, r24
     c38:	77 fd       	sbrc	r23, 7
     c3a:	80 95       	com	r24
     c3c:	98 2f       	mov	r25, r24
     c3e:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
     c42:	2b ed       	ldi	r18, 0xDB	; 219
     c44:	3f e0       	ldi	r19, 0x0F	; 15
     c46:	49 e4       	ldi	r20, 0x49	; 73
     c48:	50 e4       	ldi	r21, 0x40	; 64
     c4a:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	44 e3       	ldi	r20, 0x34	; 52
     c54:	53 e4       	ldi	r21, 0x43	; 67
     c56:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
     c5a:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sin>
     c5e:	9b 01       	movw	r18, r22
     c60:	ac 01       	movw	r20, r24
     c62:	c3 01       	movw	r24, r6
     c64:	b2 01       	movw	r22, r4
     c66:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     c6a:	ef 81       	ldd	r30, Y+7	; 0x07
     c6c:	f8 85       	ldd	r31, Y+8	; 0x08
     c6e:	64 87       	std	Z+12, r22	; 0x0c
     c70:	75 87       	std	Z+13, r23	; 0x0d
     c72:	86 87       	std	Z+14, r24	; 0x0e
     c74:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     c76:	f2 e0       	ldi	r31, 0x02	; 2
     c78:	8f 0e       	add	r8, r31
     c7a:	91 1c       	adc	r9, r1
     c7c:	8f 81       	ldd	r24, Y+7	; 0x07
     c7e:	98 85       	ldd	r25, Y+8	; 0x08
     c80:	40 96       	adiw	r24, 0x10	; 16
     c82:	98 87       	std	Y+8, r25	; 0x08
     c84:	8f 83       	std	Y+7, r24	; 0x07
     c86:	82 14       	cp	r8, r2
     c88:	93 04       	cpc	r9, r3
     c8a:	0c f4       	brge	.+2      	; 0xc8e <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     c8c:	5e cf       	rjmp	.-324    	; 0xb4a <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index]*M_PI)/180);  // BETA IM
		thephi_index++;
	}
	print_states(qb_count*2,vec,"Before: ");
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	49 81       	ldd	r20, Y+1	; 0x01
     c94:	5a 81       	ldd	r21, Y+2	; 0x02
     c96:	6b 81       	ldd	r22, Y+3	; 0x03
     c98:	7c 81       	ldd	r23, Y+4	; 0x04
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN5Gates9kroneckerEP7Complexii>
}
     ca2:	28 96       	adiw	r28, 0x08	; 8
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	bf 90       	pop	r11
     cc0:	af 90       	pop	r10
     cc2:	9f 90       	pop	r9
     cc4:	8f 90       	pop	r8
     cc6:	7f 90       	pop	r7
     cc8:	6f 90       	pop	r6
     cca:	5f 90       	pop	r5
     ccc:	4f 90       	pop	r4
     cce:	3f 90       	pop	r3
     cd0:	2f 90       	pop	r2
     cd2:	08 95       	ret

00000cd4 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     cd4:	af 92       	push	r10
     cd6:	bf 92       	push	r11
     cd8:	cf 92       	push	r12
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
     cea:	06 2f       	mov	r16, r22
     cec:	17 2f       	mov	r17, r23
     cee:	6a 01       	movw	r12, r20
	int kron_size=utils.custom_pow(2,qb_count);
     cf0:	9a 01       	movw	r18, r20
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e4       	ldi	r23, 0x40	; 64
     cfa:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <_ZN5Utils10custom_powEfi>
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     cfe:	22 e0       	ldi	r18, 0x02	; 2
     d00:	c2 16       	cp	r12, r18
     d02:	d1 04       	cpc	r13, r1
     d04:	54 f0       	brlt	.+20     	; 0xd1a <_ZN5Gates8vec2amplEP7Complexi+0x46>
	}
	print_states(qb_count*2,vec,"Before: ");
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
}
int * Gates::vec2ampl(Complex * vec,int qb_count){
	int kron_size=utils.custom_pow(2,qb_count);
     d06:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__fixsfsi>
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     d0a:	ab 01       	movw	r20, r22
     d0c:	60 2f       	mov	r22, r16
     d0e:	71 2f       	mov	r23, r17
     d10:	ce 01       	movw	r24, r28
     d12:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_ZN5Gates17reverse_kroneckerEP7Complexi>
     d16:	08 2f       	mov	r16, r24
     d18:	19 2f       	mov	r17, r25
	
	int* newthephi=(int*)malloc(sizeof(int)*(qb_count*2));
     d1a:	c6 01       	movw	r24, r12
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0e 94 b6 33 	call	0x676c	; 0x676c <malloc>
     d28:	a8 2e       	mov	r10, r24
     d2a:	b9 2e       	mov	r11, r25
	for(int i=0;i<qb_count*2;i++) if(i%2==0) newthephi[i]=(360*acos(vec[i].re))/M_PI; else newthephi[i]=(180*vec[i].arg())/M_PI;
     d2c:	cc 0c       	add	r12, r12
     d2e:	dd 1c       	adc	r13, r13
     d30:	1c 14       	cp	r1, r12
     d32:	1d 04       	cpc	r1, r13
     d34:	f4 f5       	brge	.+124    	; 0xdb2 <_ZN5Gates8vec2amplEP7Complexi+0xde>
     d36:	e0 2e       	mov	r14, r16
     d38:	f1 2e       	mov	r15, r17
     d3a:	08 2f       	mov	r16, r24
     d3c:	19 2f       	mov	r17, r25
     d3e:	c0 e0       	ldi	r28, 0x00	; 0
     d40:	d0 e0       	ldi	r29, 0x00	; 0
     d42:	c0 fd       	sbrc	r28, 0
     d44:	19 c0       	rjmp	.+50     	; 0xd78 <_ZN5Gates8vec2amplEP7Complexi+0xa4>
     d46:	f7 01       	movw	r30, r14
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <acos>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	44 eb       	ldi	r20, 0xB4	; 180
     d5a:	53 e4       	ldi	r21, 0x43	; 67
     d5c:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     d60:	2b ed       	ldi	r18, 0xDB	; 219
     d62:	3f e0       	ldi	r19, 0x0F	; 15
     d64:	49 e4       	ldi	r20, 0x49	; 73
     d66:	50 e4       	ldi	r21, 0x40	; 64
     d68:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
     d6c:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__fixsfsi>
     d70:	f8 01       	movw	r30, r16
     d72:	71 83       	std	Z+1, r23	; 0x01
     d74:	60 83       	st	Z, r22
     d76:	14 c0       	rjmp	.+40     	; 0xda0 <_ZN5Gates8vec2amplEP7Complexi+0xcc>
     d78:	c7 01       	movw	r24, r14
     d7a:	0e 94 31 02 	call	0x462	; 0x462 <_ZN7Complex3argEv>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	44 e3       	ldi	r20, 0x34	; 52
     d84:	53 e4       	ldi	r21, 0x43	; 67
     d86:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
     d8a:	2b ed       	ldi	r18, 0xDB	; 219
     d8c:	3f e0       	ldi	r19, 0x0F	; 15
     d8e:	49 e4       	ldi	r20, 0x49	; 73
     d90:	50 e4       	ldi	r21, 0x40	; 64
     d92:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
     d96:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__fixsfsi>
     d9a:	f8 01       	movw	r30, r16
     d9c:	71 83       	std	Z+1, r23	; 0x01
     d9e:	60 83       	st	Z, r22
     da0:	21 96       	adiw	r28, 0x01	; 1
     da2:	f8 e0       	ldi	r31, 0x08	; 8
     da4:	ef 0e       	add	r14, r31
     da6:	f1 1c       	adc	r15, r1
     da8:	0e 5f       	subi	r16, 0xFE	; 254
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	cc 15       	cp	r28, r12
     dae:	dd 05       	cpc	r29, r13
     db0:	41 f6       	brne	.-112    	; 0xd42 <_ZN5Gates8vec2amplEP7Complexi+0x6e>
	
	print_states(kron_size,vec,"After: ");
	return newthephi;
}
     db2:	8a 2d       	mov	r24, r10
     db4:	9b 2d       	mov	r25, r11
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	bf 90       	pop	r11
     dc8:	af 90       	pop	r10
     dca:	08 95       	ret

00000dcc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     dcc:	2f 92       	push	r2
     dce:	3f 92       	push	r3
     dd0:	4f 92       	push	r4
     dd2:	5f 92       	push	r5
     dd4:	6f 92       	push	r6
     dd6:	7f 92       	push	r7
     dd8:	8f 92       	push	r8
     dda:	9f 92       	push	r9
     ddc:	af 92       	push	r10
     dde:	bf 92       	push	r11
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	60 97       	sbiw	r28, 0x10	; 16
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	4b 01       	movw	r8, r22
     e02:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     e04:	80 e1       	ldi	r24, 0x10	; 16
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 b6 33 	call	0x676c	; 0x676c <malloc>
     e0c:	38 2e       	mov	r3, r24
     e0e:	29 2e       	mov	r2, r25
     e10:	c8 2e       	mov	r12, r24
     e12:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     e14:	a1 2c       	mov	r10, r1
     e16:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e18:	24 01       	movw	r4, r8
     e1a:	88 e0       	ldi	r24, 0x08	; 8
     e1c:	48 0e       	add	r4, r24
     e1e:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     e20:	ce 01       	movw	r24, r28
     e22:	09 96       	adiw	r24, 0x09	; 9
     e24:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e28:	75 01       	movw	r14, r10
     e2a:	ee 0c       	add	r14, r14
     e2c:	ff 1c       	adc	r15, r15
     e2e:	ee 0c       	add	r14, r14
     e30:	ff 1c       	adc	r15, r15
     e32:	ee 0c       	add	r14, r14
     e34:	ff 1c       	adc	r15, r15
     e36:	e6 0c       	add	r14, r6
     e38:	f7 1c       	adc	r15, r7
     e3a:	d7 01       	movw	r26, r14
     e3c:	0c 91       	ld	r16, X
     e3e:	11 96       	adiw	r26, 0x01	; 1
     e40:	1c 91       	ld	r17, X
     e42:	11 97       	sbiw	r26, 0x01	; 1
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	2c 91       	ld	r18, X
     e48:	12 97       	sbiw	r26, 0x02	; 2
     e4a:	13 96       	adiw	r26, 0x03	; 3
     e4c:	3c 91       	ld	r19, X
     e4e:	13 97       	sbiw	r26, 0x03	; 3
     e50:	14 96       	adiw	r26, 0x04	; 4
     e52:	4c 91       	ld	r20, X
     e54:	14 97       	sbiw	r26, 0x04	; 4
     e56:	15 96       	adiw	r26, 0x05	; 5
     e58:	5c 91       	ld	r21, X
     e5a:	15 97       	sbiw	r26, 0x05	; 5
     e5c:	16 96       	adiw	r26, 0x06	; 6
     e5e:	6c 91       	ld	r22, X
     e60:	16 97       	sbiw	r26, 0x06	; 6
     e62:	17 96       	adiw	r26, 0x07	; 7
     e64:	7c 91       	ld	r23, X
     e66:	c4 01       	movw	r24, r8
     e68:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7Complex3mulES_>
     e6c:	02 2f       	mov	r16, r18
     e6e:	13 2f       	mov	r17, r19
     e70:	24 2f       	mov	r18, r20
     e72:	35 2f       	mov	r19, r21
     e74:	46 2f       	mov	r20, r22
     e76:	57 2f       	mov	r21, r23
     e78:	68 2f       	mov	r22, r24
     e7a:	79 2f       	mov	r23, r25
     e7c:	ce 01       	movw	r24, r28
     e7e:	09 96       	adiw	r24, 0x09	; 9
     e80:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Complex3addES_>
     e84:	29 87       	std	Y+9, r18	; 0x09
     e86:	3a 87       	std	Y+10, r19	; 0x0a
     e88:	4b 87       	std	Y+11, r20	; 0x0b
     e8a:	5c 87       	std	Y+12, r21	; 0x0c
     e8c:	6d 87       	std	Y+13, r22	; 0x0d
     e8e:	7e 87       	std	Y+14, r23	; 0x0e
     e90:	8f 87       	std	Y+15, r24	; 0x0f
     e92:	98 8b       	std	Y+16, r25	; 0x10
     e94:	f7 01       	movw	r30, r14
     e96:	70 96       	adiw	r30, 0x10	; 16
     e98:	d7 01       	movw	r26, r14
     e9a:	50 96       	adiw	r26, 0x10	; 16
     e9c:	0c 91       	ld	r16, X
     e9e:	11 81       	ldd	r17, Z+1	; 0x01
     ea0:	22 81       	ldd	r18, Z+2	; 0x02
     ea2:	33 81       	ldd	r19, Z+3	; 0x03
     ea4:	44 81       	ldd	r20, Z+4	; 0x04
     ea6:	55 81       	ldd	r21, Z+5	; 0x05
     ea8:	66 81       	ldd	r22, Z+6	; 0x06
     eaa:	77 81       	ldd	r23, Z+7	; 0x07
     eac:	c2 01       	movw	r24, r4
     eae:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7Complex3mulES_>
     eb2:	02 2f       	mov	r16, r18
     eb4:	13 2f       	mov	r17, r19
     eb6:	24 2f       	mov	r18, r20
     eb8:	35 2f       	mov	r19, r21
     eba:	46 2f       	mov	r20, r22
     ebc:	57 2f       	mov	r21, r23
     ebe:	68 2f       	mov	r22, r24
     ec0:	79 2f       	mov	r23, r25
     ec2:	ce 01       	movw	r24, r28
     ec4:	09 96       	adiw	r24, 0x09	; 9
     ec6:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Complex3addES_>
     eca:	29 87       	std	Y+9, r18	; 0x09
     ecc:	3a 87       	std	Y+10, r19	; 0x0a
     ece:	4b 87       	std	Y+11, r20	; 0x0b
     ed0:	5c 87       	std	Y+12, r21	; 0x0c
     ed2:	6d 87       	std	Y+13, r22	; 0x0d
     ed4:	7e 87       	std	Y+14, r23	; 0x0e
     ed6:	8f 87       	std	Y+15, r24	; 0x0f
     ed8:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ede:	ab 85       	ldd	r26, Y+11	; 0x0b
     ee0:	bc 85       	ldd	r27, Y+12	; 0x0c
     ee2:	f6 01       	movw	r30, r12
     ee4:	80 83       	st	Z, r24
     ee6:	91 83       	std	Z+1, r25	; 0x01
     ee8:	a2 83       	std	Z+2, r26	; 0x02
     eea:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     eec:	8d 85       	ldd	r24, Y+13	; 0x0d
     eee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef0:	af 85       	ldd	r26, Y+15	; 0x0f
     ef2:	b8 89       	ldd	r27, Y+16	; 0x10
     ef4:	84 83       	std	Z+4, r24	; 0x04
     ef6:	95 83       	std	Z+5, r25	; 0x05
     ef8:	a6 83       	std	Z+6, r26	; 0x06
     efa:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     efc:	ff ef       	ldi	r31, 0xFF	; 255
     efe:	af 1a       	sub	r10, r31
     f00:	bf 0a       	sbc	r11, r31
     f02:	88 e0       	ldi	r24, 0x08	; 8
     f04:	c8 0e       	add	r12, r24
     f06:	d1 1c       	adc	r13, r1
     f08:	a2 e0       	ldi	r26, 0x02	; 2
     f0a:	aa 16       	cp	r10, r26
     f0c:	b1 04       	cpc	r11, r1
     f0e:	09 f0       	breq	.+2      	; 0xf12 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     f10:	87 cf       	rjmp	.-242    	; 0xe20 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     f12:	83 2d       	mov	r24, r3
     f14:	92 2d       	mov	r25, r2
     f16:	60 96       	adiw	r28, 0x10	; 16
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	bf 90       	pop	r11
     f34:	af 90       	pop	r10
     f36:	9f 90       	pop	r9
     f38:	8f 90       	pop	r8
     f3a:	7f 90       	pop	r7
     f3c:	6f 90       	pop	r6
     f3e:	5f 90       	pop	r5
     f40:	4f 90       	pop	r4
     f42:	3f 90       	pop	r3
     f44:	2f 90       	pop	r2
     f46:	08 95       	ret

00000f48 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     f48:	2f 92       	push	r2
     f4a:	3f 92       	push	r3
     f4c:	4f 92       	push	r4
     f4e:	5f 92       	push	r5
     f50:	6f 92       	push	r6
     f52:	7f 92       	push	r7
     f54:	8f 92       	push	r8
     f56:	9f 92       	push	r9
     f58:	af 92       	push	r10
     f5a:	bf 92       	push	r11
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	64 97       	sbiw	r28, 0x14	; 20
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	3b 01       	movw	r6, r22
     f7e:	e4 2e       	mov	r14, r20
     f80:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     f82:	80 e2       	ldi	r24, 0x20	; 32
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 b6 33 	call	0x676c	; 0x676c <malloc>
     f8a:	8b 8b       	std	Y+19, r24	; 0x13
     f8c:	9c 8b       	std	Y+20, r25	; 0x14
     f8e:	48 2e       	mov	r4, r24
     f90:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     f92:	81 2c       	mov	r8, r1
     f94:	91 2c       	mov	r9, r1
     f96:	e9 8a       	std	Y+17, r14	; 0x11
     f98:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     f9a:	21 2c       	mov	r2, r1
     f9c:	31 2c       	mov	r3, r1
     f9e:	ce 01       	movw	r24, r28
     fa0:	09 96       	adiw	r24, 0x09	; 9
     fa2:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN7ComplexC1Ev>
     fa6:	c9 88       	ldd	r12, Y+17	; 0x11
     fa8:	da 88       	ldd	r13, Y+18	; 0x12
     faa:	e2 2c       	mov	r14, r2
     fac:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     fae:	54 01       	movw	r10, r8
     fb0:	aa 0c       	add	r10, r10
     fb2:	bb 1c       	adc	r11, r11
     fb4:	aa 0c       	add	r10, r10
     fb6:	bb 1c       	adc	r11, r11
     fb8:	aa 0c       	add	r10, r10
     fba:	bb 1c       	adc	r11, r11
     fbc:	f5 01       	movw	r30, r10
     fbe:	ec 0d       	add	r30, r12
     fc0:	fd 1d       	adc	r31, r13
     fc2:	00 81       	ld	r16, Z
     fc4:	11 81       	ldd	r17, Z+1	; 0x01
     fc6:	22 81       	ldd	r18, Z+2	; 0x02
     fc8:	33 81       	ldd	r19, Z+3	; 0x03
     fca:	44 81       	ldd	r20, Z+4	; 0x04
     fcc:	55 81       	ldd	r21, Z+5	; 0x05
     fce:	66 81       	ldd	r22, Z+6	; 0x06
     fd0:	77 81       	ldd	r23, Z+7	; 0x07
     fd2:	c3 01       	movw	r24, r6
     fd4:	8e 0d       	add	r24, r14
     fd6:	9f 1d       	adc	r25, r15
     fd8:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7Complex3mulES_>
     fdc:	29 83       	std	Y+1, r18	; 0x01
     fde:	3a 83       	std	Y+2, r19	; 0x02
     fe0:	4b 83       	std	Y+3, r20	; 0x03
     fe2:	5c 83       	std	Y+4, r21	; 0x04
     fe4:	6d 83       	std	Y+5, r22	; 0x05
     fe6:	7e 83       	std	Y+6, r23	; 0x06
     fe8:	8f 83       	std	Y+7, r24	; 0x07
     fea:	98 87       	std	Y+8, r25	; 0x08
     fec:	02 2f       	mov	r16, r18
     fee:	13 2f       	mov	r17, r19
     ff0:	24 2f       	mov	r18, r20
     ff2:	35 2f       	mov	r19, r21
     ff4:	46 2f       	mov	r20, r22
     ff6:	57 2f       	mov	r21, r23
     ff8:	68 2f       	mov	r22, r24
     ffa:	79 2f       	mov	r23, r25
     ffc:	ce 01       	movw	r24, r28
     ffe:	09 96       	adiw	r24, 0x09	; 9
    1000:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Complex3addES_>
    1004:	29 87       	std	Y+9, r18	; 0x09
    1006:	3a 87       	std	Y+10, r19	; 0x0a
    1008:	4b 87       	std	Y+11, r20	; 0x0b
    100a:	5c 87       	std	Y+12, r21	; 0x0c
    100c:	6d 87       	std	Y+13, r22	; 0x0d
    100e:	7e 87       	std	Y+14, r23	; 0x0e
    1010:	8f 87       	std	Y+15, r24	; 0x0f
    1012:	98 8b       	std	Y+16, r25	; 0x10
    1014:	88 e0       	ldi	r24, 0x08	; 8
    1016:	e8 0e       	add	r14, r24
    1018:	f1 1c       	adc	r15, r1
    101a:	e0 e2       	ldi	r30, 0x20	; 32
    101c:	ce 0e       	add	r12, r30
    101e:	d1 1c       	adc	r13, r1
    1020:	f0 e2       	ldi	r31, 0x20	; 32
    1022:	ef 16       	cp	r14, r31
    1024:	f1 04       	cpc	r15, r1
    1026:	51 f6       	brne	.-108    	; 0xfbc <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
    1028:	89 85       	ldd	r24, Y+9	; 0x09
    102a:	9a 85       	ldd	r25, Y+10	; 0x0a
    102c:	ab 85       	ldd	r26, Y+11	; 0x0b
    102e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1030:	f2 01       	movw	r30, r4
    1032:	80 83       	st	Z, r24
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	a2 83       	std	Z+2, r26	; 0x02
    1038:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    103a:	8d 85       	ldd	r24, Y+13	; 0x0d
    103c:	9e 85       	ldd	r25, Y+14	; 0x0e
    103e:	af 85       	ldd	r26, Y+15	; 0x0f
    1040:	b8 89       	ldd	r27, Y+16	; 0x10
    1042:	84 83       	std	Z+4, r24	; 0x04
    1044:	95 83       	std	Z+5, r25	; 0x05
    1046:	a6 83       	std	Z+6, r26	; 0x06
    1048:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    104a:	ff ef       	ldi	r31, 0xFF	; 255
    104c:	8f 1a       	sub	r8, r31
    104e:	9f 0a       	sbc	r9, r31
    1050:	88 e0       	ldi	r24, 0x08	; 8
    1052:	48 0e       	add	r4, r24
    1054:	51 1c       	adc	r5, r1
    1056:	e4 e0       	ldi	r30, 0x04	; 4
    1058:	8e 16       	cp	r8, r30
    105a:	91 04       	cpc	r9, r1
    105c:	09 f0       	breq	.+2      	; 0x1060 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
    105e:	9f cf       	rjmp	.-194    	; 0xf9e <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    1060:	8b 89       	ldd	r24, Y+19	; 0x13
    1062:	9c 89       	ldd	r25, Y+20	; 0x14
    1064:	64 96       	adiw	r28, 0x14	; 20
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	bf 90       	pop	r11
    1082:	af 90       	pop	r10
    1084:	9f 90       	pop	r9
    1086:	8f 90       	pop	r8
    1088:	7f 90       	pop	r7
    108a:	6f 90       	pop	r6
    108c:	5f 90       	pop	r5
    108e:	4f 90       	pop	r4
    1090:	3f 90       	pop	r3
    1092:	2f 90       	pop	r2
    1094:	08 95       	ret

00001096 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>:
Complex * Gates::multiply8x8(Complex *q,Complex matrix[8][8]){
    1096:	2f 92       	push	r2
    1098:	3f 92       	push	r3
    109a:	4f 92       	push	r4
    109c:	5f 92       	push	r5
    109e:	6f 92       	push	r6
    10a0:	7f 92       	push	r7
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	62 97       	sbiw	r28, 0x12	; 18
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	4b 01       	movw	r8, r22
    10cc:	34 2e       	mov	r3, r20
    10ce:	25 2e       	mov	r2, r21
	int qb_size=8;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
    10d0:	80 e4       	ldi	r24, 0x40	; 64
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 b6 33 	call	0x676c	; 0x676c <malloc>
    10d8:	89 8b       	std	Y+17, r24	; 0x11
    10da:	9a 8b       	std	Y+18, r25	; 0x12
    10dc:	48 2e       	mov	r4, r24
    10de:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
    10e0:	61 2c       	mov	r6, r1
    10e2:	71 2c       	mov	r7, r1
		Complex tmp;
    10e4:	ce 01       	movw	r24, r28
    10e6:	09 96       	adiw	r24, 0x09	; 9
    10e8:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN7ComplexC1Ev>
    10ec:	c3 2c       	mov	r12, r3
    10ee:	d2 2c       	mov	r13, r2
    10f0:	e1 2c       	mov	r14, r1
    10f2:	f1 2c       	mov	r15, r1
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
    10f4:	53 01       	movw	r10, r6
    10f6:	aa 0c       	add	r10, r10
    10f8:	bb 1c       	adc	r11, r11
    10fa:	aa 0c       	add	r10, r10
    10fc:	bb 1c       	adc	r11, r11
    10fe:	aa 0c       	add	r10, r10
    1100:	bb 1c       	adc	r11, r11
    1102:	f5 01       	movw	r30, r10
    1104:	ec 0d       	add	r30, r12
    1106:	fd 1d       	adc	r31, r13
    1108:	00 81       	ld	r16, Z
    110a:	11 81       	ldd	r17, Z+1	; 0x01
    110c:	22 81       	ldd	r18, Z+2	; 0x02
    110e:	33 81       	ldd	r19, Z+3	; 0x03
    1110:	44 81       	ldd	r20, Z+4	; 0x04
    1112:	55 81       	ldd	r21, Z+5	; 0x05
    1114:	66 81       	ldd	r22, Z+6	; 0x06
    1116:	77 81       	ldd	r23, Z+7	; 0x07
    1118:	c4 01       	movw	r24, r8
    111a:	8e 0d       	add	r24, r14
    111c:	9f 1d       	adc	r25, r15
    111e:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7Complex3mulES_>
    1122:	29 83       	std	Y+1, r18	; 0x01
    1124:	3a 83       	std	Y+2, r19	; 0x02
    1126:	4b 83       	std	Y+3, r20	; 0x03
    1128:	5c 83       	std	Y+4, r21	; 0x04
    112a:	6d 83       	std	Y+5, r22	; 0x05
    112c:	7e 83       	std	Y+6, r23	; 0x06
    112e:	8f 83       	std	Y+7, r24	; 0x07
    1130:	98 87       	std	Y+8, r25	; 0x08
    1132:	02 2f       	mov	r16, r18
    1134:	13 2f       	mov	r17, r19
    1136:	24 2f       	mov	r18, r20
    1138:	35 2f       	mov	r19, r21
    113a:	46 2f       	mov	r20, r22
    113c:	57 2f       	mov	r21, r23
    113e:	68 2f       	mov	r22, r24
    1140:	79 2f       	mov	r23, r25
    1142:	ce 01       	movw	r24, r28
    1144:	09 96       	adiw	r24, 0x09	; 9
    1146:	0e 94 39 01 	call	0x272	; 0x272 <_ZN7Complex3addES_>
    114a:	29 87       	std	Y+9, r18	; 0x09
    114c:	3a 87       	std	Y+10, r19	; 0x0a
    114e:	4b 87       	std	Y+11, r20	; 0x0b
    1150:	5c 87       	std	Y+12, r21	; 0x0c
    1152:	6d 87       	std	Y+13, r22	; 0x0d
    1154:	7e 87       	std	Y+14, r23	; 0x0e
    1156:	8f 87       	std	Y+15, r24	; 0x0f
    1158:	98 8b       	std	Y+16, r25	; 0x10
    115a:	88 e0       	ldi	r24, 0x08	; 8
    115c:	e8 0e       	add	r14, r24
    115e:	f1 1c       	adc	r15, r1
    1160:	e0 e4       	ldi	r30, 0x40	; 64
    1162:	ce 0e       	add	r12, r30
    1164:	d1 1c       	adc	r13, r1
    1166:	f0 e4       	ldi	r31, 0x40	; 64
    1168:	ef 16       	cp	r14, r31
    116a:	f1 04       	cpc	r15, r1
    116c:	51 f6       	brne	.-108    	; 0x1102 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x6c>
		result[i].re=tmp.re;
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	ab 85       	ldd	r26, Y+11	; 0x0b
    1174:	bc 85       	ldd	r27, Y+12	; 0x0c
    1176:	f2 01       	movw	r30, r4
    1178:	80 83       	st	Z, r24
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	a2 83       	std	Z+2, r26	; 0x02
    117e:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    1180:	8d 85       	ldd	r24, Y+13	; 0x0d
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	af 85       	ldd	r26, Y+15	; 0x0f
    1186:	b8 89       	ldd	r27, Y+16	; 0x10
    1188:	84 83       	std	Z+4, r24	; 0x04
    118a:	95 83       	std	Z+5, r25	; 0x05
    118c:	a6 83       	std	Z+6, r26	; 0x06
    118e:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply8x8(Complex *q,Complex matrix[8][8]){
	int qb_size=8;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    1190:	ff ef       	ldi	r31, 0xFF	; 255
    1192:	6f 1a       	sub	r6, r31
    1194:	7f 0a       	sbc	r7, r31
    1196:	88 e0       	ldi	r24, 0x08	; 8
    1198:	48 0e       	add	r4, r24
    119a:	51 1c       	adc	r5, r1
    119c:	e8 e0       	ldi	r30, 0x08	; 8
    119e:	6e 16       	cp	r6, r30
    11a0:	71 04       	cpc	r7, r1
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x110>
    11a4:	9f cf       	rjmp	.-194    	; 0x10e4 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x4e>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    11a6:	89 89       	ldd	r24, Y+17	; 0x11
    11a8:	9a 89       	ldd	r25, Y+18	; 0x12
    11aa:	62 96       	adiw	r28, 0x12	; 18
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	cf 90       	pop	r12
    11c6:	bf 90       	pop	r11
    11c8:	af 90       	pop	r10
    11ca:	9f 90       	pop	r9
    11cc:	8f 90       	pop	r8
    11ce:	7f 90       	pop	r7
    11d0:	6f 90       	pop	r6
    11d2:	5f 90       	pop	r5
    11d4:	4f 90       	pop	r4
    11d6:	3f 90       	pop	r3
    11d8:	2f 90       	pop	r2
    11da:	08 95       	ret

000011dc <_ZN5Gates1XEii>:

int * Gates::X(int theta,int phi){
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	a4 97       	sbiw	r28, 0x24	; 36
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	7c 01       	movw	r14, r24
    1202:	5b 01       	movw	r10, r22
    1204:	6a 01       	movw	r12, r20
	Complex x_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,0),Complex(1,0)},
													   {Complex(1,0),Complex(0,0)}};
    1206:	00 e0       	ldi	r16, 0x00	; 0
    1208:	10 e0       	ldi	r17, 0x00	; 0
    120a:	98 01       	movw	r18, r16
    120c:	b9 01       	movw	r22, r18
    120e:	a8 01       	movw	r20, r16
    1210:	ce 01       	movw	r24, r28
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1218:	00 e0       	ldi	r16, 0x00	; 0
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	98 01       	movw	r18, r16
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	60 e8       	ldi	r22, 0x80	; 128
    1224:	7f e3       	ldi	r23, 0x3F	; 63
    1226:	ce 01       	movw	r24, r28
    1228:	09 96       	adiw	r24, 0x09	; 9
    122a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    122e:	00 e0       	ldi	r16, 0x00	; 0
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	98 01       	movw	r18, r16
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	50 e0       	ldi	r21, 0x00	; 0
    1238:	60 e8       	ldi	r22, 0x80	; 128
    123a:	7f e3       	ldi	r23, 0x3F	; 63
    123c:	ce 01       	movw	r24, r28
    123e:	41 96       	adiw	r24, 0x11	; 17
    1240:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1244:	00 e0       	ldi	r16, 0x00	; 0
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	98 01       	movw	r18, r16
    124a:	b9 01       	movw	r22, r18
    124c:	a8 01       	movw	r20, r16
    124e:	ce 01       	movw	r24, r28
    1250:	49 96       	adiw	r24, 0x19	; 25
    1252:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[1]={phi};
    1256:	bc a2       	std	Y+36, r11	; 0x24
    1258:	ab a2       	std	Y+35, r10	; 0x23
    125a:	da a2       	std	Y+34, r13	; 0x22
    125c:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),x_matrix),QB_SIZE1);
    125e:	9e 01       	movw	r18, r28
    1260:	2f 5d       	subi	r18, 0xDF	; 223
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	ae 01       	movw	r20, r28
    1266:	4d 5d       	subi	r20, 0xDD	; 221
    1268:	5f 4f       	sbci	r21, 0xFF	; 255
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	c7 01       	movw	r24, r14
    1270:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    1274:	ae 01       	movw	r20, r28
    1276:	4f 5f       	subi	r20, 0xFF	; 255
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	bc 01       	movw	r22, r24
    127c:	c7 01       	movw	r24, r14
    127e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	bc 01       	movw	r22, r24
    1288:	c7 01       	movw	r24, r14
    128a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    128e:	a4 96       	adiw	r28, 0x24	; 36
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	bf 90       	pop	r11
    12ac:	af 90       	pop	r10
    12ae:	08 95       	ret

000012b0 <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    12b0:	af 92       	push	r10
    12b2:	bf 92       	push	r11
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	a4 97       	sbiw	r28, 0x24	; 36
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	7c 01       	movw	r14, r24
    12d6:	5b 01       	movw	r10, r22
    12d8:	6a 01       	movw	r12, r20
	Complex y_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,0),Complex(0,-1)},
													   {Complex(0,1),Complex(0,0)}};
    12da:	00 e0       	ldi	r16, 0x00	; 0
    12dc:	10 e0       	ldi	r17, 0x00	; 0
    12de:	98 01       	movw	r18, r16
    12e0:	b9 01       	movw	r22, r18
    12e2:	a8 01       	movw	r20, r16
    12e4:	ce 01       	movw	r24, r28
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    12ec:	00 e0       	ldi	r16, 0x00	; 0
    12ee:	10 e0       	ldi	r17, 0x00	; 0
    12f0:	20 e8       	ldi	r18, 0x80	; 128
    12f2:	3f eb       	ldi	r19, 0xBF	; 191
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	ba 01       	movw	r22, r20
    12fa:	ce 01       	movw	r24, r28
    12fc:	09 96       	adiw	r24, 0x09	; 9
    12fe:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1302:	00 e0       	ldi	r16, 0x00	; 0
    1304:	10 e0       	ldi	r17, 0x00	; 0
    1306:	20 e8       	ldi	r18, 0x80	; 128
    1308:	3f e3       	ldi	r19, 0x3F	; 63
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	ba 01       	movw	r22, r20
    1310:	ce 01       	movw	r24, r28
    1312:	41 96       	adiw	r24, 0x11	; 17
    1314:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1318:	00 e0       	ldi	r16, 0x00	; 0
    131a:	10 e0       	ldi	r17, 0x00	; 0
    131c:	98 01       	movw	r18, r16
    131e:	b9 01       	movw	r22, r18
    1320:	a8 01       	movw	r20, r16
    1322:	ce 01       	movw	r24, r28
    1324:	49 96       	adiw	r24, 0x19	; 25
    1326:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    132a:	bc a2       	std	Y+36, r11	; 0x24
    132c:	ab a2       	std	Y+35, r10	; 0x23
    132e:	da a2       	std	Y+34, r13	; 0x22
    1330:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),y_matrix),QB_SIZE1);
    1332:	9e 01       	movw	r18, r28
    1334:	2f 5d       	subi	r18, 0xDF	; 223
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	ae 01       	movw	r20, r28
    133a:	4d 5d       	subi	r20, 0xDD	; 221
    133c:	5f 4f       	sbci	r21, 0xFF	; 255
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	c7 01       	movw	r24, r14
    1344:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    1348:	ae 01       	movw	r20, r28
    134a:	4f 5f       	subi	r20, 0xFF	; 255
    134c:	5f 4f       	sbci	r21, 0xFF	; 255
    134e:	bc 01       	movw	r22, r24
    1350:	c7 01       	movw	r24, r14
    1352:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1356:	41 e0       	ldi	r20, 0x01	; 1
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	bc 01       	movw	r22, r24
    135c:	c7 01       	movw	r24, r14
    135e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1362:	a4 96       	adiw	r28, 0x24	; 36
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	bf 90       	pop	r11
    1380:	af 90       	pop	r10
    1382:	08 95       	ret

00001384 <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    1384:	af 92       	push	r10
    1386:	bf 92       	push	r11
    1388:	cf 92       	push	r12
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	a4 97       	sbiw	r28, 0x24	; 36
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	7c 01       	movw	r14, r24
    13aa:	5b 01       	movw	r10, r22
    13ac:	6a 01       	movw	r12, r20
	Complex z_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(-1,0)}};
    13ae:	00 e0       	ldi	r16, 0x00	; 0
    13b0:	10 e0       	ldi	r17, 0x00	; 0
    13b2:	98 01       	movw	r18, r16
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	60 e8       	ldi	r22, 0x80	; 128
    13ba:	7f e3       	ldi	r23, 0x3F	; 63
    13bc:	ce 01       	movw	r24, r28
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    13c4:	00 e0       	ldi	r16, 0x00	; 0
    13c6:	10 e0       	ldi	r17, 0x00	; 0
    13c8:	98 01       	movw	r18, r16
    13ca:	b9 01       	movw	r22, r18
    13cc:	a8 01       	movw	r20, r16
    13ce:	ce 01       	movw	r24, r28
    13d0:	09 96       	adiw	r24, 0x09	; 9
    13d2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    13d6:	00 e0       	ldi	r16, 0x00	; 0
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	98 01       	movw	r18, r16
    13dc:	b9 01       	movw	r22, r18
    13de:	a8 01       	movw	r20, r16
    13e0:	ce 01       	movw	r24, r28
    13e2:	41 96       	adiw	r24, 0x11	; 17
    13e4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    13e8:	00 e0       	ldi	r16, 0x00	; 0
    13ea:	10 e0       	ldi	r17, 0x00	; 0
    13ec:	98 01       	movw	r18, r16
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	60 e8       	ldi	r22, 0x80	; 128
    13f4:	7f eb       	ldi	r23, 0xBF	; 191
    13f6:	ce 01       	movw	r24, r28
    13f8:	49 96       	adiw	r24, 0x19	; 25
    13fa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    13fe:	bc a2       	std	Y+36, r11	; 0x24
    1400:	ab a2       	std	Y+35, r10	; 0x23
    1402:	da a2       	std	Y+34, r13	; 0x22
    1404:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),z_matrix),QB_SIZE1);
    1406:	9e 01       	movw	r18, r28
    1408:	2f 5d       	subi	r18, 0xDF	; 223
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	ae 01       	movw	r20, r28
    140e:	4d 5d       	subi	r20, 0xDD	; 221
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	c7 01       	movw	r24, r14
    1418:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    141c:	ae 01       	movw	r20, r28
    141e:	4f 5f       	subi	r20, 0xFF	; 255
    1420:	5f 4f       	sbci	r21, 0xFF	; 255
    1422:	bc 01       	movw	r22, r24
    1424:	c7 01       	movw	r24, r14
    1426:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	bc 01       	movw	r22, r24
    1430:	c7 01       	movw	r24, r14
    1432:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1436:	a4 96       	adiw	r28, 0x24	; 36
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	ff 90       	pop	r15
    144c:	ef 90       	pop	r14
    144e:	df 90       	pop	r13
    1450:	cf 90       	pop	r12
    1452:	bf 90       	pop	r11
    1454:	af 90       	pop	r10
    1456:	08 95       	ret

00001458 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    1458:	af 92       	push	r10
    145a:	bf 92       	push	r11
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	a4 97       	sbiw	r28, 0x24	; 36
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	7c 01       	movw	r14, r24
    147e:	5b 01       	movw	r10, r22
    1480:	6a 01       	movw	r12, r20
	Complex h_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
													   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    1482:	00 e0       	ldi	r16, 0x00	; 0
    1484:	10 e0       	ldi	r17, 0x00	; 0
    1486:	98 01       	movw	r18, r16
    1488:	43 ef       	ldi	r20, 0xF3	; 243
    148a:	54 e0       	ldi	r21, 0x04	; 4
    148c:	65 e3       	ldi	r22, 0x35	; 53
    148e:	7f e3       	ldi	r23, 0x3F	; 63
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	10 e0       	ldi	r17, 0x00	; 0
    149c:	98 01       	movw	r18, r16
    149e:	43 ef       	ldi	r20, 0xF3	; 243
    14a0:	54 e0       	ldi	r21, 0x04	; 4
    14a2:	65 e3       	ldi	r22, 0x35	; 53
    14a4:	7f e3       	ldi	r23, 0x3F	; 63
    14a6:	ce 01       	movw	r24, r28
    14a8:	09 96       	adiw	r24, 0x09	; 9
    14aa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    14ae:	00 e0       	ldi	r16, 0x00	; 0
    14b0:	10 e0       	ldi	r17, 0x00	; 0
    14b2:	98 01       	movw	r18, r16
    14b4:	43 ef       	ldi	r20, 0xF3	; 243
    14b6:	54 e0       	ldi	r21, 0x04	; 4
    14b8:	65 e3       	ldi	r22, 0x35	; 53
    14ba:	7f e3       	ldi	r23, 0x3F	; 63
    14bc:	ce 01       	movw	r24, r28
    14be:	41 96       	adiw	r24, 0x11	; 17
    14c0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    14c4:	00 e0       	ldi	r16, 0x00	; 0
    14c6:	10 e0       	ldi	r17, 0x00	; 0
    14c8:	98 01       	movw	r18, r16
    14ca:	43 ef       	ldi	r20, 0xF3	; 243
    14cc:	54 e0       	ldi	r21, 0x04	; 4
    14ce:	65 e3       	ldi	r22, 0x35	; 53
    14d0:	7f eb       	ldi	r23, 0xBF	; 191
    14d2:	ce 01       	movw	r24, r28
    14d4:	49 96       	adiw	r24, 0x19	; 25
    14d6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    14da:	bc a2       	std	Y+36, r11	; 0x24
    14dc:	ab a2       	std	Y+35, r10	; 0x23
    14de:	da a2       	std	Y+34, r13	; 0x22
    14e0:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),h_matrix),QB_SIZE1);
    14e2:	9e 01       	movw	r18, r28
    14e4:	2f 5d       	subi	r18, 0xDF	; 223
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	ae 01       	movw	r20, r28
    14ea:	4d 5d       	subi	r20, 0xDD	; 221
    14ec:	5f 4f       	sbci	r21, 0xFF	; 255
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	c7 01       	movw	r24, r14
    14f4:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    14f8:	ae 01       	movw	r20, r28
    14fa:	4f 5f       	subi	r20, 0xFF	; 255
    14fc:	5f 4f       	sbci	r21, 0xFF	; 255
    14fe:	bc 01       	movw	r22, r24
    1500:	c7 01       	movw	r24, r14
    1502:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1506:	41 e0       	ldi	r20, 0x01	; 1
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	bc 01       	movw	r22, r24
    150c:	c7 01       	movw	r24, r14
    150e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1512:	a4 96       	adiw	r28, 0x24	; 36
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	ff 90       	pop	r15
    1528:	ef 90       	pop	r14
    152a:	df 90       	pop	r13
    152c:	cf 90       	pop	r12
    152e:	bf 90       	pop	r11
    1530:	af 90       	pop	r10
    1532:	08 95       	ret

00001534 <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    1534:	af 92       	push	r10
    1536:	bf 92       	push	r11
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	a4 97       	sbiw	r28, 0x24	; 36
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	7c 01       	movw	r14, r24
    155a:	5b 01       	movw	r10, r22
    155c:	6a 01       	movw	r12, r20
	Complex s_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(0,1)}};
    155e:	00 e0       	ldi	r16, 0x00	; 0
    1560:	10 e0       	ldi	r17, 0x00	; 0
    1562:	98 01       	movw	r18, r16
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	60 e8       	ldi	r22, 0x80	; 128
    156a:	7f e3       	ldi	r23, 0x3F	; 63
    156c:	ce 01       	movw	r24, r28
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1574:	00 e0       	ldi	r16, 0x00	; 0
    1576:	10 e0       	ldi	r17, 0x00	; 0
    1578:	98 01       	movw	r18, r16
    157a:	b9 01       	movw	r22, r18
    157c:	a8 01       	movw	r20, r16
    157e:	ce 01       	movw	r24, r28
    1580:	09 96       	adiw	r24, 0x09	; 9
    1582:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1586:	00 e0       	ldi	r16, 0x00	; 0
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	98 01       	movw	r18, r16
    158c:	b9 01       	movw	r22, r18
    158e:	a8 01       	movw	r20, r16
    1590:	ce 01       	movw	r24, r28
    1592:	41 96       	adiw	r24, 0x11	; 17
    1594:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1598:	00 e0       	ldi	r16, 0x00	; 0
    159a:	10 e0       	ldi	r17, 0x00	; 0
    159c:	20 e8       	ldi	r18, 0x80	; 128
    159e:	3f e3       	ldi	r19, 0x3F	; 63
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	ba 01       	movw	r22, r20
    15a6:	ce 01       	movw	r24, r28
    15a8:	49 96       	adiw	r24, 0x19	; 25
    15aa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    15ae:	bc a2       	std	Y+36, r11	; 0x24
    15b0:	ab a2       	std	Y+35, r10	; 0x23
    15b2:	da a2       	std	Y+34, r13	; 0x22
    15b4:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),s_matrix),QB_SIZE1);
    15b6:	9e 01       	movw	r18, r28
    15b8:	2f 5d       	subi	r18, 0xDF	; 223
    15ba:	3f 4f       	sbci	r19, 0xFF	; 255
    15bc:	ae 01       	movw	r20, r28
    15be:	4d 5d       	subi	r20, 0xDD	; 221
    15c0:	5f 4f       	sbci	r21, 0xFF	; 255
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	c7 01       	movw	r24, r14
    15c8:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    15cc:	ae 01       	movw	r20, r28
    15ce:	4f 5f       	subi	r20, 0xFF	; 255
    15d0:	5f 4f       	sbci	r21, 0xFF	; 255
    15d2:	bc 01       	movw	r22, r24
    15d4:	c7 01       	movw	r24, r14
    15d6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	bc 01       	movw	r22, r24
    15e0:	c7 01       	movw	r24, r14
    15e2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    15e6:	a4 96       	adiw	r28, 0x24	; 36
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	df 90       	pop	r13
    1600:	cf 90       	pop	r12
    1602:	bf 90       	pop	r11
    1604:	af 90       	pop	r10
    1606:	08 95       	ret

00001608 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    1608:	af 92       	push	r10
    160a:	bf 92       	push	r11
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	a4 97       	sbiw	r28, 0x24	; 36
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	7c 01       	movw	r14, r24
    162e:	5b 01       	movw	r10, r22
    1630:	6a 01       	movw	r12, r20
	Complex t_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    1632:	00 e0       	ldi	r16, 0x00	; 0
    1634:	10 e0       	ldi	r17, 0x00	; 0
    1636:	98 01       	movw	r18, r16
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	60 e8       	ldi	r22, 0x80	; 128
    163e:	7f e3       	ldi	r23, 0x3F	; 63
    1640:	ce 01       	movw	r24, r28
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	10 e0       	ldi	r17, 0x00	; 0
    164c:	98 01       	movw	r18, r16
    164e:	b9 01       	movw	r22, r18
    1650:	a8 01       	movw	r20, r16
    1652:	ce 01       	movw	r24, r28
    1654:	09 96       	adiw	r24, 0x09	; 9
    1656:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    165a:	00 e0       	ldi	r16, 0x00	; 0
    165c:	10 e0       	ldi	r17, 0x00	; 0
    165e:	98 01       	movw	r18, r16
    1660:	b9 01       	movw	r22, r18
    1662:	a8 01       	movw	r20, r16
    1664:	ce 01       	movw	r24, r28
    1666:	41 96       	adiw	r24, 0x11	; 17
    1668:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    166c:	03 ef       	ldi	r16, 0xF3	; 243
    166e:	14 e0       	ldi	r17, 0x04	; 4
    1670:	25 e3       	ldi	r18, 0x35	; 53
    1672:	3f e3       	ldi	r19, 0x3F	; 63
    1674:	b9 01       	movw	r22, r18
    1676:	a8 01       	movw	r20, r16
    1678:	ce 01       	movw	r24, r28
    167a:	49 96       	adiw	r24, 0x19	; 25
    167c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1680:	bc a2       	std	Y+36, r11	; 0x24
    1682:	ab a2       	std	Y+35, r10	; 0x23
    1684:	da a2       	std	Y+34, r13	; 0x22
    1686:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),t_matrix),QB_SIZE1);
    1688:	9e 01       	movw	r18, r28
    168a:	2f 5d       	subi	r18, 0xDF	; 223
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	ae 01       	movw	r20, r28
    1690:	4d 5d       	subi	r20, 0xDD	; 221
    1692:	5f 4f       	sbci	r21, 0xFF	; 255
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	c7 01       	movw	r24, r14
    169a:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    169e:	ae 01       	movw	r20, r28
    16a0:	4f 5f       	subi	r20, 0xFF	; 255
    16a2:	5f 4f       	sbci	r21, 0xFF	; 255
    16a4:	bc 01       	movw	r22, r24
    16a6:	c7 01       	movw	r24, r14
    16a8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	bc 01       	movw	r22, r24
    16b2:	c7 01       	movw	r24, r14
    16b4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    16b8:	a4 96       	adiw	r28, 0x24	; 36
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	bf 90       	pop	r11
    16d6:	af 90       	pop	r10
    16d8:	08 95       	ret

000016da <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    16da:	6f 92       	push	r6
    16dc:	7f 92       	push	r7
    16de:	8f 92       	push	r8
    16e0:	9f 92       	push	r9
    16e2:	af 92       	push	r10
    16e4:	bf 92       	push	r11
    16e6:	cf 92       	push	r12
    16e8:	df 92       	push	r13
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	c8 58       	subi	r28, 0x88	; 136
    16fc:	d1 09       	sbc	r29, r1
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	7c 01       	movw	r14, r24
    170a:	3b 01       	movw	r6, r22
    170c:	5a 01       	movw	r10, r20
    170e:	49 01       	movw	r8, r18
    1710:	68 01       	movw	r12, r16
	Complex cno_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1712:	00 e0       	ldi	r16, 0x00	; 0
    1714:	10 e0       	ldi	r17, 0x00	; 0
    1716:	98 01       	movw	r18, r16
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	60 e8       	ldi	r22, 0x80	; 128
    171e:	7f e3       	ldi	r23, 0x3F	; 63
    1720:	ce 01       	movw	r24, r28
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1728:	00 e0       	ldi	r16, 0x00	; 0
    172a:	10 e0       	ldi	r17, 0x00	; 0
    172c:	98 01       	movw	r18, r16
    172e:	b9 01       	movw	r22, r18
    1730:	a8 01       	movw	r20, r16
    1732:	ce 01       	movw	r24, r28
    1734:	09 96       	adiw	r24, 0x09	; 9
    1736:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    173a:	00 e0       	ldi	r16, 0x00	; 0
    173c:	10 e0       	ldi	r17, 0x00	; 0
    173e:	98 01       	movw	r18, r16
    1740:	b9 01       	movw	r22, r18
    1742:	a8 01       	movw	r20, r16
    1744:	ce 01       	movw	r24, r28
    1746:	41 96       	adiw	r24, 0x11	; 17
    1748:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    174c:	00 e0       	ldi	r16, 0x00	; 0
    174e:	10 e0       	ldi	r17, 0x00	; 0
    1750:	98 01       	movw	r18, r16
    1752:	b9 01       	movw	r22, r18
    1754:	a8 01       	movw	r20, r16
    1756:	ce 01       	movw	r24, r28
    1758:	49 96       	adiw	r24, 0x19	; 25
    175a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    175e:	00 e0       	ldi	r16, 0x00	; 0
    1760:	10 e0       	ldi	r17, 0x00	; 0
    1762:	98 01       	movw	r18, r16
    1764:	b9 01       	movw	r22, r18
    1766:	a8 01       	movw	r20, r16
    1768:	ce 01       	movw	r24, r28
    176a:	81 96       	adiw	r24, 0x21	; 33
    176c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1770:	00 e0       	ldi	r16, 0x00	; 0
    1772:	10 e0       	ldi	r17, 0x00	; 0
    1774:	98 01       	movw	r18, r16
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	60 e8       	ldi	r22, 0x80	; 128
    177c:	7f e3       	ldi	r23, 0x3F	; 63
    177e:	ce 01       	movw	r24, r28
    1780:	89 96       	adiw	r24, 0x29	; 41
    1782:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1786:	00 e0       	ldi	r16, 0x00	; 0
    1788:	10 e0       	ldi	r17, 0x00	; 0
    178a:	98 01       	movw	r18, r16
    178c:	b9 01       	movw	r22, r18
    178e:	a8 01       	movw	r20, r16
    1790:	ce 01       	movw	r24, r28
    1792:	c1 96       	adiw	r24, 0x31	; 49
    1794:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1798:	00 e0       	ldi	r16, 0x00	; 0
    179a:	10 e0       	ldi	r17, 0x00	; 0
    179c:	98 01       	movw	r18, r16
    179e:	b9 01       	movw	r22, r18
    17a0:	a8 01       	movw	r20, r16
    17a2:	ce 01       	movw	r24, r28
    17a4:	c9 96       	adiw	r24, 0x39	; 57
    17a6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    17aa:	00 e0       	ldi	r16, 0x00	; 0
    17ac:	10 e0       	ldi	r17, 0x00	; 0
    17ae:	98 01       	movw	r18, r16
    17b0:	b9 01       	movw	r22, r18
    17b2:	a8 01       	movw	r20, r16
    17b4:	ce 01       	movw	r24, r28
    17b6:	8f 5b       	subi	r24, 0xBF	; 191
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    17be:	00 e0       	ldi	r16, 0x00	; 0
    17c0:	10 e0       	ldi	r17, 0x00	; 0
    17c2:	98 01       	movw	r18, r16
    17c4:	b9 01       	movw	r22, r18
    17c6:	a8 01       	movw	r20, r16
    17c8:	ce 01       	movw	r24, r28
    17ca:	87 5b       	subi	r24, 0xB7	; 183
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    17d2:	00 e0       	ldi	r16, 0x00	; 0
    17d4:	10 e0       	ldi	r17, 0x00	; 0
    17d6:	98 01       	movw	r18, r16
    17d8:	b9 01       	movw	r22, r18
    17da:	a8 01       	movw	r20, r16
    17dc:	ce 01       	movw	r24, r28
    17de:	8f 5a       	subi	r24, 0xAF	; 175
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    17e6:	00 e0       	ldi	r16, 0x00	; 0
    17e8:	10 e0       	ldi	r17, 0x00	; 0
    17ea:	98 01       	movw	r18, r16
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	60 e8       	ldi	r22, 0x80	; 128
    17f2:	7f e3       	ldi	r23, 0x3F	; 63
    17f4:	ce 01       	movw	r24, r28
    17f6:	87 5a       	subi	r24, 0xA7	; 167
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    17fe:	00 e0       	ldi	r16, 0x00	; 0
    1800:	10 e0       	ldi	r17, 0x00	; 0
    1802:	98 01       	movw	r18, r16
    1804:	b9 01       	movw	r22, r18
    1806:	a8 01       	movw	r20, r16
    1808:	ce 01       	movw	r24, r28
    180a:	8f 59       	subi	r24, 0x9F	; 159
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1812:	00 e0       	ldi	r16, 0x00	; 0
    1814:	10 e0       	ldi	r17, 0x00	; 0
    1816:	98 01       	movw	r18, r16
    1818:	b9 01       	movw	r22, r18
    181a:	a8 01       	movw	r20, r16
    181c:	ce 01       	movw	r24, r28
    181e:	87 59       	subi	r24, 0x97	; 151
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1826:	00 e0       	ldi	r16, 0x00	; 0
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	98 01       	movw	r18, r16
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	60 e8       	ldi	r22, 0x80	; 128
    1832:	7f e3       	ldi	r23, 0x3F	; 63
    1834:	ce 01       	movw	r24, r28
    1836:	8f 58       	subi	r24, 0x8F	; 143
    1838:	9f 4f       	sbci	r25, 0xFF	; 255
    183a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    183e:	00 e0       	ldi	r16, 0x00	; 0
    1840:	10 e0       	ldi	r17, 0x00	; 0
    1842:	98 01       	movw	r18, r16
    1844:	b9 01       	movw	r22, r18
    1846:	a8 01       	movw	r20, r16
    1848:	ce 01       	movw	r24, r28
    184a:	87 58       	subi	r24, 0x87	; 135
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};						
    1852:	cb 57       	subi	r28, 0x7B	; 123
    1854:	df 4f       	sbci	r29, 0xFF	; 255
    1856:	79 82       	std	Y+1, r7	; 0x01
    1858:	68 82       	st	Y, r6
    185a:	c5 58       	subi	r28, 0x85	; 133
    185c:	d0 40       	sbci	r29, 0x00	; 0
    185e:	c9 57       	subi	r28, 0x79	; 121
    1860:	df 4f       	sbci	r29, 0xFF	; 255
    1862:	99 82       	std	Y+1, r9	; 0x01
    1864:	88 82       	st	Y, r8
    1866:	c7 58       	subi	r28, 0x87	; 135
    1868:	d0 40       	sbci	r29, 0x00	; 0
    186a:	cf 57       	subi	r28, 0x7F	; 127
    186c:	df 4f       	sbci	r29, 0xFF	; 255
    186e:	b9 82       	std	Y+1, r11	; 0x01
    1870:	a8 82       	st	Y, r10
    1872:	c1 58       	subi	r28, 0x81	; 129
    1874:	d0 40       	sbci	r29, 0x00	; 0
    1876:	cd 57       	subi	r28, 0x7D	; 125
    1878:	df 4f       	sbci	r29, 0xFF	; 255
    187a:	d9 82       	std	Y+1, r13	; 0x01
    187c:	c8 82       	st	Y, r12
    187e:	c3 58       	subi	r28, 0x83	; 131
    1880:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),cno_matrix),QB_SIZE2);
    1882:	9e 01       	movw	r18, r28
    1884:	2f 57       	subi	r18, 0x7F	; 127
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	ae 01       	movw	r20, r28
    188a:	4b 57       	subi	r20, 0x7B	; 123
    188c:	5f 4f       	sbci	r21, 0xFF	; 255
    188e:	62 e0       	ldi	r22, 0x02	; 2
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	c7 01       	movw	r24, r14
    1894:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    1898:	ae 01       	movw	r20, r28
    189a:	4f 5f       	subi	r20, 0xFF	; 255
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	bc 01       	movw	r22, r24
    18a0:	c7 01       	movw	r24, r14
    18a2:	0e 94 a4 07 	call	0xf48	; 0xf48 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    18a6:	42 e0       	ldi	r20, 0x02	; 2
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	bc 01       	movw	r22, r24
    18ac:	c7 01       	movw	r24, r14
    18ae:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    18b2:	c8 57       	subi	r28, 0x78	; 120
    18b4:	df 4f       	sbci	r29, 0xFF	; 255
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	bf 90       	pop	r11
    18d2:	af 90       	pop	r10
    18d4:	9f 90       	pop	r9
    18d6:	8f 90       	pop	r8
    18d8:	7f 90       	pop	r7
    18da:	6f 90       	pop	r6
    18dc:	08 95       	ret

000018de <_ZN5Gates3CSIEiiii>:
int * Gates::CSI(int theta1, int phi1, int theta2,int phi2){
    18de:	6f 92       	push	r6
    18e0:	7f 92       	push	r7
    18e2:	8f 92       	push	r8
    18e4:	9f 92       	push	r9
    18e6:	af 92       	push	r10
    18e8:	bf 92       	push	r11
    18ea:	cf 92       	push	r12
    18ec:	df 92       	push	r13
    18ee:	ef 92       	push	r14
    18f0:	ff 92       	push	r15
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	c8 58       	subi	r28, 0x88	; 136
    1900:	d1 09       	sbc	r29, r1
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	7c 01       	movw	r14, r24
    190e:	3b 01       	movw	r6, r22
    1910:	5a 01       	movw	r10, r20
    1912:	49 01       	movw	r8, r18
    1914:	68 01       	movw	r12, r16
	Complex csi_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(-1,0)}};
    1916:	00 e0       	ldi	r16, 0x00	; 0
    1918:	10 e0       	ldi	r17, 0x00	; 0
    191a:	98 01       	movw	r18, r16
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	60 e8       	ldi	r22, 0x80	; 128
    1922:	7f e3       	ldi	r23, 0x3F	; 63
    1924:	ce 01       	movw	r24, r28
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    192c:	00 e0       	ldi	r16, 0x00	; 0
    192e:	10 e0       	ldi	r17, 0x00	; 0
    1930:	98 01       	movw	r18, r16
    1932:	b9 01       	movw	r22, r18
    1934:	a8 01       	movw	r20, r16
    1936:	ce 01       	movw	r24, r28
    1938:	09 96       	adiw	r24, 0x09	; 9
    193a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    193e:	00 e0       	ldi	r16, 0x00	; 0
    1940:	10 e0       	ldi	r17, 0x00	; 0
    1942:	98 01       	movw	r18, r16
    1944:	b9 01       	movw	r22, r18
    1946:	a8 01       	movw	r20, r16
    1948:	ce 01       	movw	r24, r28
    194a:	41 96       	adiw	r24, 0x11	; 17
    194c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1950:	00 e0       	ldi	r16, 0x00	; 0
    1952:	10 e0       	ldi	r17, 0x00	; 0
    1954:	98 01       	movw	r18, r16
    1956:	b9 01       	movw	r22, r18
    1958:	a8 01       	movw	r20, r16
    195a:	ce 01       	movw	r24, r28
    195c:	49 96       	adiw	r24, 0x19	; 25
    195e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1962:	00 e0       	ldi	r16, 0x00	; 0
    1964:	10 e0       	ldi	r17, 0x00	; 0
    1966:	98 01       	movw	r18, r16
    1968:	b9 01       	movw	r22, r18
    196a:	a8 01       	movw	r20, r16
    196c:	ce 01       	movw	r24, r28
    196e:	81 96       	adiw	r24, 0x21	; 33
    1970:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1974:	00 e0       	ldi	r16, 0x00	; 0
    1976:	10 e0       	ldi	r17, 0x00	; 0
    1978:	98 01       	movw	r18, r16
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	60 e8       	ldi	r22, 0x80	; 128
    1980:	7f e3       	ldi	r23, 0x3F	; 63
    1982:	ce 01       	movw	r24, r28
    1984:	89 96       	adiw	r24, 0x29	; 41
    1986:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    198a:	00 e0       	ldi	r16, 0x00	; 0
    198c:	10 e0       	ldi	r17, 0x00	; 0
    198e:	98 01       	movw	r18, r16
    1990:	b9 01       	movw	r22, r18
    1992:	a8 01       	movw	r20, r16
    1994:	ce 01       	movw	r24, r28
    1996:	c1 96       	adiw	r24, 0x31	; 49
    1998:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    199c:	00 e0       	ldi	r16, 0x00	; 0
    199e:	10 e0       	ldi	r17, 0x00	; 0
    19a0:	98 01       	movw	r18, r16
    19a2:	b9 01       	movw	r22, r18
    19a4:	a8 01       	movw	r20, r16
    19a6:	ce 01       	movw	r24, r28
    19a8:	c9 96       	adiw	r24, 0x39	; 57
    19aa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    19ae:	00 e0       	ldi	r16, 0x00	; 0
    19b0:	10 e0       	ldi	r17, 0x00	; 0
    19b2:	98 01       	movw	r18, r16
    19b4:	b9 01       	movw	r22, r18
    19b6:	a8 01       	movw	r20, r16
    19b8:	ce 01       	movw	r24, r28
    19ba:	8f 5b       	subi	r24, 0xBF	; 191
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    19c2:	00 e0       	ldi	r16, 0x00	; 0
    19c4:	10 e0       	ldi	r17, 0x00	; 0
    19c6:	98 01       	movw	r18, r16
    19c8:	b9 01       	movw	r22, r18
    19ca:	a8 01       	movw	r20, r16
    19cc:	ce 01       	movw	r24, r28
    19ce:	87 5b       	subi	r24, 0xB7	; 183
    19d0:	9f 4f       	sbci	r25, 0xFF	; 255
    19d2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    19d6:	00 e0       	ldi	r16, 0x00	; 0
    19d8:	10 e0       	ldi	r17, 0x00	; 0
    19da:	98 01       	movw	r18, r16
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	60 e8       	ldi	r22, 0x80	; 128
    19e2:	7f e3       	ldi	r23, 0x3F	; 63
    19e4:	ce 01       	movw	r24, r28
    19e6:	8f 5a       	subi	r24, 0xAF	; 175
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    19ee:	00 e0       	ldi	r16, 0x00	; 0
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	98 01       	movw	r18, r16
    19f4:	b9 01       	movw	r22, r18
    19f6:	a8 01       	movw	r20, r16
    19f8:	ce 01       	movw	r24, r28
    19fa:	87 5a       	subi	r24, 0xA7	; 167
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1a02:	00 e0       	ldi	r16, 0x00	; 0
    1a04:	10 e0       	ldi	r17, 0x00	; 0
    1a06:	98 01       	movw	r18, r16
    1a08:	b9 01       	movw	r22, r18
    1a0a:	a8 01       	movw	r20, r16
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	8f 59       	subi	r24, 0x9F	; 159
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1a16:	00 e0       	ldi	r16, 0x00	; 0
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	98 01       	movw	r18, r16
    1a1c:	b9 01       	movw	r22, r18
    1a1e:	a8 01       	movw	r20, r16
    1a20:	ce 01       	movw	r24, r28
    1a22:	87 59       	subi	r24, 0x97	; 151
    1a24:	9f 4f       	sbci	r25, 0xFF	; 255
    1a26:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1a2a:	00 e0       	ldi	r16, 0x00	; 0
    1a2c:	10 e0       	ldi	r17, 0x00	; 0
    1a2e:	98 01       	movw	r18, r16
    1a30:	b9 01       	movw	r22, r18
    1a32:	a8 01       	movw	r20, r16
    1a34:	ce 01       	movw	r24, r28
    1a36:	8f 58       	subi	r24, 0x8F	; 143
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1a3e:	00 e0       	ldi	r16, 0x00	; 0
    1a40:	10 e0       	ldi	r17, 0x00	; 0
    1a42:	98 01       	movw	r18, r16
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	60 e8       	ldi	r22, 0x80	; 128
    1a4a:	7f eb       	ldi	r23, 0xBF	; 191
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	87 58       	subi	r24, 0x87	; 135
    1a50:	9f 4f       	sbci	r25, 0xFF	; 255
    1a52:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1a56:	cb 57       	subi	r28, 0x7B	; 123
    1a58:	df 4f       	sbci	r29, 0xFF	; 255
    1a5a:	79 82       	std	Y+1, r7	; 0x01
    1a5c:	68 82       	st	Y, r6
    1a5e:	c5 58       	subi	r28, 0x85	; 133
    1a60:	d0 40       	sbci	r29, 0x00	; 0
    1a62:	c9 57       	subi	r28, 0x79	; 121
    1a64:	df 4f       	sbci	r29, 0xFF	; 255
    1a66:	99 82       	std	Y+1, r9	; 0x01
    1a68:	88 82       	st	Y, r8
    1a6a:	c7 58       	subi	r28, 0x87	; 135
    1a6c:	d0 40       	sbci	r29, 0x00	; 0
    1a6e:	cf 57       	subi	r28, 0x7F	; 127
    1a70:	df 4f       	sbci	r29, 0xFF	; 255
    1a72:	b9 82       	std	Y+1, r11	; 0x01
    1a74:	a8 82       	st	Y, r10
    1a76:	c1 58       	subi	r28, 0x81	; 129
    1a78:	d0 40       	sbci	r29, 0x00	; 0
    1a7a:	cd 57       	subi	r28, 0x7D	; 125
    1a7c:	df 4f       	sbci	r29, 0xFF	; 255
    1a7e:	d9 82       	std	Y+1, r13	; 0x01
    1a80:	c8 82       	st	Y, r12
    1a82:	c3 58       	subi	r28, 0x83	; 131
    1a84:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),csi_matrix),QB_SIZE2);
    1a86:	9e 01       	movw	r18, r28
    1a88:	2f 57       	subi	r18, 0x7F	; 127
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	ae 01       	movw	r20, r28
    1a8e:	4b 57       	subi	r20, 0x7B	; 123
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255
    1a92:	62 e0       	ldi	r22, 0x02	; 2
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	c7 01       	movw	r24, r14
    1a98:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    1a9c:	ae 01       	movw	r20, r28
    1a9e:	4f 5f       	subi	r20, 0xFF	; 255
    1aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	c7 01       	movw	r24, r14
    1aa6:	0e 94 a4 07 	call	0xf48	; 0xf48 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1aaa:	42 e0       	ldi	r20, 0x02	; 2
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	bc 01       	movw	r22, r24
    1ab0:	c7 01       	movw	r24, r14
    1ab2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1ab6:	c8 57       	subi	r28, 0x78	; 120
    1ab8:	df 4f       	sbci	r29, 0xFF	; 255
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	08 95       	ret

00001ae2 <_ZN5Gates3SWAEiiii>:
int * Gates::SWA(int theta1, int phi1, int theta2,int phi2){
    1ae2:	6f 92       	push	r6
    1ae4:	7f 92       	push	r7
    1ae6:	8f 92       	push	r8
    1ae8:	9f 92       	push	r9
    1aea:	af 92       	push	r10
    1aec:	bf 92       	push	r11
    1aee:	cf 92       	push	r12
    1af0:	df 92       	push	r13
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	c8 58       	subi	r28, 0x88	; 136
    1b04:	d1 09       	sbc	r29, r1
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	7c 01       	movw	r14, r24
    1b12:	3b 01       	movw	r6, r22
    1b14:	5a 01       	movw	r10, r20
    1b16:	49 01       	movw	r8, r18
    1b18:	68 01       	movw	r12, r16
	Complex swa_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    1b1a:	00 e0       	ldi	r16, 0x00	; 0
    1b1c:	10 e0       	ldi	r17, 0x00	; 0
    1b1e:	98 01       	movw	r18, r16
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	60 e8       	ldi	r22, 0x80	; 128
    1b26:	7f e3       	ldi	r23, 0x3F	; 63
    1b28:	ce 01       	movw	r24, r28
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b30:	00 e0       	ldi	r16, 0x00	; 0
    1b32:	10 e0       	ldi	r17, 0x00	; 0
    1b34:	98 01       	movw	r18, r16
    1b36:	b9 01       	movw	r22, r18
    1b38:	a8 01       	movw	r20, r16
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	09 96       	adiw	r24, 0x09	; 9
    1b3e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b42:	00 e0       	ldi	r16, 0x00	; 0
    1b44:	10 e0       	ldi	r17, 0x00	; 0
    1b46:	98 01       	movw	r18, r16
    1b48:	b9 01       	movw	r22, r18
    1b4a:	a8 01       	movw	r20, r16
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	41 96       	adiw	r24, 0x11	; 17
    1b50:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b54:	00 e0       	ldi	r16, 0x00	; 0
    1b56:	10 e0       	ldi	r17, 0x00	; 0
    1b58:	98 01       	movw	r18, r16
    1b5a:	b9 01       	movw	r22, r18
    1b5c:	a8 01       	movw	r20, r16
    1b5e:	ce 01       	movw	r24, r28
    1b60:	49 96       	adiw	r24, 0x19	; 25
    1b62:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b66:	00 e0       	ldi	r16, 0x00	; 0
    1b68:	10 e0       	ldi	r17, 0x00	; 0
    1b6a:	98 01       	movw	r18, r16
    1b6c:	b9 01       	movw	r22, r18
    1b6e:	a8 01       	movw	r20, r16
    1b70:	ce 01       	movw	r24, r28
    1b72:	81 96       	adiw	r24, 0x21	; 33
    1b74:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b78:	00 e0       	ldi	r16, 0x00	; 0
    1b7a:	10 e0       	ldi	r17, 0x00	; 0
    1b7c:	98 01       	movw	r18, r16
    1b7e:	b9 01       	movw	r22, r18
    1b80:	a8 01       	movw	r20, r16
    1b82:	ce 01       	movw	r24, r28
    1b84:	89 96       	adiw	r24, 0x29	; 41
    1b86:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1b8a:	00 e0       	ldi	r16, 0x00	; 0
    1b8c:	10 e0       	ldi	r17, 0x00	; 0
    1b8e:	98 01       	movw	r18, r16
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	60 e8       	ldi	r22, 0x80	; 128
    1b96:	7f e3       	ldi	r23, 0x3F	; 63
    1b98:	ce 01       	movw	r24, r28
    1b9a:	c1 96       	adiw	r24, 0x31	; 49
    1b9c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1ba0:	00 e0       	ldi	r16, 0x00	; 0
    1ba2:	10 e0       	ldi	r17, 0x00	; 0
    1ba4:	98 01       	movw	r18, r16
    1ba6:	b9 01       	movw	r22, r18
    1ba8:	a8 01       	movw	r20, r16
    1baa:	ce 01       	movw	r24, r28
    1bac:	c9 96       	adiw	r24, 0x39	; 57
    1bae:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1bb2:	00 e0       	ldi	r16, 0x00	; 0
    1bb4:	10 e0       	ldi	r17, 0x00	; 0
    1bb6:	98 01       	movw	r18, r16
    1bb8:	b9 01       	movw	r22, r18
    1bba:	a8 01       	movw	r20, r16
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	8f 5b       	subi	r24, 0xBF	; 191
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1bc6:	00 e0       	ldi	r16, 0x00	; 0
    1bc8:	10 e0       	ldi	r17, 0x00	; 0
    1bca:	98 01       	movw	r18, r16
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	60 e8       	ldi	r22, 0x80	; 128
    1bd2:	7f e3       	ldi	r23, 0x3F	; 63
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	87 5b       	subi	r24, 0xB7	; 183
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bda:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1bde:	00 e0       	ldi	r16, 0x00	; 0
    1be0:	10 e0       	ldi	r17, 0x00	; 0
    1be2:	98 01       	movw	r18, r16
    1be4:	b9 01       	movw	r22, r18
    1be6:	a8 01       	movw	r20, r16
    1be8:	ce 01       	movw	r24, r28
    1bea:	8f 5a       	subi	r24, 0xAF	; 175
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1bf2:	00 e0       	ldi	r16, 0x00	; 0
    1bf4:	10 e0       	ldi	r17, 0x00	; 0
    1bf6:	98 01       	movw	r18, r16
    1bf8:	b9 01       	movw	r22, r18
    1bfa:	a8 01       	movw	r20, r16
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	87 5a       	subi	r24, 0xA7	; 167
    1c00:	9f 4f       	sbci	r25, 0xFF	; 255
    1c02:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1c06:	00 e0       	ldi	r16, 0x00	; 0
    1c08:	10 e0       	ldi	r17, 0x00	; 0
    1c0a:	98 01       	movw	r18, r16
    1c0c:	b9 01       	movw	r22, r18
    1c0e:	a8 01       	movw	r20, r16
    1c10:	ce 01       	movw	r24, r28
    1c12:	8f 59       	subi	r24, 0x9F	; 159
    1c14:	9f 4f       	sbci	r25, 0xFF	; 255
    1c16:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1c1a:	00 e0       	ldi	r16, 0x00	; 0
    1c1c:	10 e0       	ldi	r17, 0x00	; 0
    1c1e:	98 01       	movw	r18, r16
    1c20:	b9 01       	movw	r22, r18
    1c22:	a8 01       	movw	r20, r16
    1c24:	ce 01       	movw	r24, r28
    1c26:	87 59       	subi	r24, 0x97	; 151
    1c28:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1c2e:	00 e0       	ldi	r16, 0x00	; 0
    1c30:	10 e0       	ldi	r17, 0x00	; 0
    1c32:	98 01       	movw	r18, r16
    1c34:	b9 01       	movw	r22, r18
    1c36:	a8 01       	movw	r20, r16
    1c38:	ce 01       	movw	r24, r28
    1c3a:	8f 58       	subi	r24, 0x8F	; 143
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1c42:	00 e0       	ldi	r16, 0x00	; 0
    1c44:	10 e0       	ldi	r17, 0x00	; 0
    1c46:	98 01       	movw	r18, r16
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	60 e8       	ldi	r22, 0x80	; 128
    1c4e:	7f e3       	ldi	r23, 0x3F	; 63
    1c50:	ce 01       	movw	r24, r28
    1c52:	87 58       	subi	r24, 0x87	; 135
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1c5a:	cb 57       	subi	r28, 0x7B	; 123
    1c5c:	df 4f       	sbci	r29, 0xFF	; 255
    1c5e:	79 82       	std	Y+1, r7	; 0x01
    1c60:	68 82       	st	Y, r6
    1c62:	c5 58       	subi	r28, 0x85	; 133
    1c64:	d0 40       	sbci	r29, 0x00	; 0
    1c66:	c9 57       	subi	r28, 0x79	; 121
    1c68:	df 4f       	sbci	r29, 0xFF	; 255
    1c6a:	99 82       	std	Y+1, r9	; 0x01
    1c6c:	88 82       	st	Y, r8
    1c6e:	c7 58       	subi	r28, 0x87	; 135
    1c70:	d0 40       	sbci	r29, 0x00	; 0
    1c72:	cf 57       	subi	r28, 0x7F	; 127
    1c74:	df 4f       	sbci	r29, 0xFF	; 255
    1c76:	b9 82       	std	Y+1, r11	; 0x01
    1c78:	a8 82       	st	Y, r10
    1c7a:	c1 58       	subi	r28, 0x81	; 129
    1c7c:	d0 40       	sbci	r29, 0x00	; 0
    1c7e:	cd 57       	subi	r28, 0x7D	; 125
    1c80:	df 4f       	sbci	r29, 0xFF	; 255
    1c82:	d9 82       	std	Y+1, r13	; 0x01
    1c84:	c8 82       	st	Y, r12
    1c86:	c3 58       	subi	r28, 0x83	; 131
    1c88:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swa_matrix),QB_SIZE2);	
    1c8a:	9e 01       	movw	r18, r28
    1c8c:	2f 57       	subi	r18, 0x7F	; 127
    1c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c90:	ae 01       	movw	r20, r28
    1c92:	4b 57       	subi	r20, 0x7B	; 123
    1c94:	5f 4f       	sbci	r21, 0xFF	; 255
    1c96:	62 e0       	ldi	r22, 0x02	; 2
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	c7 01       	movw	r24, r14
    1c9c:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    1ca0:	ae 01       	movw	r20, r28
    1ca2:	4f 5f       	subi	r20, 0xFF	; 255
    1ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	c7 01       	movw	r24, r14
    1caa:	0e 94 a4 07 	call	0xf48	; 0xf48 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1cae:	42 e0       	ldi	r20, 0x02	; 2
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	c7 01       	movw	r24, r14
    1cb6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1cba:	c8 57       	subi	r28, 0x78	; 120
    1cbc:	df 4f       	sbci	r29, 0xFF	; 255
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	ff 90       	pop	r15
    1cd2:	ef 90       	pop	r14
    1cd4:	df 90       	pop	r13
    1cd6:	cf 90       	pop	r12
    1cd8:	bf 90       	pop	r11
    1cda:	af 90       	pop	r10
    1cdc:	9f 90       	pop	r9
    1cde:	8f 90       	pop	r8
    1ce0:	7f 90       	pop	r7
    1ce2:	6f 90       	pop	r6
    1ce4:	08 95       	ret

00001ce6 <_ZN5Gates3INCEiiii>:
int * Gates::INC(int theta1, int phi1, int theta2,int phi2){
    1ce6:	6f 92       	push	r6
    1ce8:	7f 92       	push	r7
    1cea:	8f 92       	push	r8
    1cec:	9f 92       	push	r9
    1cee:	af 92       	push	r10
    1cf0:	bf 92       	push	r11
    1cf2:	cf 92       	push	r12
    1cf4:	df 92       	push	r13
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	c8 58       	subi	r28, 0x88	; 136
    1d08:	d1 09       	sbc	r29, r1
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	7c 01       	movw	r14, r24
    1d16:	3b 01       	movw	r6, r22
    1d18:	5a 01       	movw	r10, r20
    1d1a:	49 01       	movw	r8, r18
    1d1c:	68 01       	movw	r12, r16
	Complex inc_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)}};
    1d1e:	00 e0       	ldi	r16, 0x00	; 0
    1d20:	10 e0       	ldi	r17, 0x00	; 0
    1d22:	98 01       	movw	r18, r16
    1d24:	b9 01       	movw	r22, r18
    1d26:	a8 01       	movw	r20, r16
    1d28:	ce 01       	movw	r24, r28
    1d2a:	01 96       	adiw	r24, 0x01	; 1
    1d2c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d30:	00 e0       	ldi	r16, 0x00	; 0
    1d32:	10 e0       	ldi	r17, 0x00	; 0
    1d34:	98 01       	movw	r18, r16
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	60 e8       	ldi	r22, 0x80	; 128
    1d3c:	7f e3       	ldi	r23, 0x3F	; 63
    1d3e:	ce 01       	movw	r24, r28
    1d40:	09 96       	adiw	r24, 0x09	; 9
    1d42:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d46:	00 e0       	ldi	r16, 0x00	; 0
    1d48:	10 e0       	ldi	r17, 0x00	; 0
    1d4a:	98 01       	movw	r18, r16
    1d4c:	b9 01       	movw	r22, r18
    1d4e:	a8 01       	movw	r20, r16
    1d50:	ce 01       	movw	r24, r28
    1d52:	41 96       	adiw	r24, 0x11	; 17
    1d54:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d58:	00 e0       	ldi	r16, 0x00	; 0
    1d5a:	10 e0       	ldi	r17, 0x00	; 0
    1d5c:	98 01       	movw	r18, r16
    1d5e:	b9 01       	movw	r22, r18
    1d60:	a8 01       	movw	r20, r16
    1d62:	ce 01       	movw	r24, r28
    1d64:	49 96       	adiw	r24, 0x19	; 25
    1d66:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d6a:	00 e0       	ldi	r16, 0x00	; 0
    1d6c:	10 e0       	ldi	r17, 0x00	; 0
    1d6e:	98 01       	movw	r18, r16
    1d70:	b9 01       	movw	r22, r18
    1d72:	a8 01       	movw	r20, r16
    1d74:	ce 01       	movw	r24, r28
    1d76:	81 96       	adiw	r24, 0x21	; 33
    1d78:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d7c:	00 e0       	ldi	r16, 0x00	; 0
    1d7e:	10 e0       	ldi	r17, 0x00	; 0
    1d80:	98 01       	movw	r18, r16
    1d82:	b9 01       	movw	r22, r18
    1d84:	a8 01       	movw	r20, r16
    1d86:	ce 01       	movw	r24, r28
    1d88:	89 96       	adiw	r24, 0x29	; 41
    1d8a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1d8e:	00 e0       	ldi	r16, 0x00	; 0
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	98 01       	movw	r18, r16
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	60 e8       	ldi	r22, 0x80	; 128
    1d9a:	7f e3       	ldi	r23, 0x3F	; 63
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	c1 96       	adiw	r24, 0x31	; 49
    1da0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1da4:	00 e0       	ldi	r16, 0x00	; 0
    1da6:	10 e0       	ldi	r17, 0x00	; 0
    1da8:	98 01       	movw	r18, r16
    1daa:	b9 01       	movw	r22, r18
    1dac:	a8 01       	movw	r20, r16
    1dae:	ce 01       	movw	r24, r28
    1db0:	c9 96       	adiw	r24, 0x39	; 57
    1db2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1db6:	00 e0       	ldi	r16, 0x00	; 0
    1db8:	10 e0       	ldi	r17, 0x00	; 0
    1dba:	98 01       	movw	r18, r16
    1dbc:	b9 01       	movw	r22, r18
    1dbe:	a8 01       	movw	r20, r16
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	8f 5b       	subi	r24, 0xBF	; 191
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1dca:	00 e0       	ldi	r16, 0x00	; 0
    1dcc:	10 e0       	ldi	r17, 0x00	; 0
    1dce:	98 01       	movw	r18, r16
    1dd0:	b9 01       	movw	r22, r18
    1dd2:	a8 01       	movw	r20, r16
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	87 5b       	subi	r24, 0xB7	; 183
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1dde:	00 e0       	ldi	r16, 0x00	; 0
    1de0:	10 e0       	ldi	r17, 0x00	; 0
    1de2:	98 01       	movw	r18, r16
    1de4:	b9 01       	movw	r22, r18
    1de6:	a8 01       	movw	r20, r16
    1de8:	ce 01       	movw	r24, r28
    1dea:	8f 5a       	subi	r24, 0xAF	; 175
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1df2:	00 e0       	ldi	r16, 0x00	; 0
    1df4:	10 e0       	ldi	r17, 0x00	; 0
    1df6:	98 01       	movw	r18, r16
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	60 e8       	ldi	r22, 0x80	; 128
    1dfe:	7f e3       	ldi	r23, 0x3F	; 63
    1e00:	ce 01       	movw	r24, r28
    1e02:	87 5a       	subi	r24, 0xA7	; 167
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1e0a:	00 e0       	ldi	r16, 0x00	; 0
    1e0c:	10 e0       	ldi	r17, 0x00	; 0
    1e0e:	98 01       	movw	r18, r16
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	60 e8       	ldi	r22, 0x80	; 128
    1e16:	7f e3       	ldi	r23, 0x3F	; 63
    1e18:	ce 01       	movw	r24, r28
    1e1a:	8f 59       	subi	r24, 0x9F	; 159
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1e22:	00 e0       	ldi	r16, 0x00	; 0
    1e24:	10 e0       	ldi	r17, 0x00	; 0
    1e26:	98 01       	movw	r18, r16
    1e28:	b9 01       	movw	r22, r18
    1e2a:	a8 01       	movw	r20, r16
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	87 59       	subi	r24, 0x97	; 151
    1e30:	9f 4f       	sbci	r25, 0xFF	; 255
    1e32:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1e36:	00 e0       	ldi	r16, 0x00	; 0
    1e38:	10 e0       	ldi	r17, 0x00	; 0
    1e3a:	98 01       	movw	r18, r16
    1e3c:	b9 01       	movw	r22, r18
    1e3e:	a8 01       	movw	r20, r16
    1e40:	ce 01       	movw	r24, r28
    1e42:	8f 58       	subi	r24, 0x8F	; 143
    1e44:	9f 4f       	sbci	r25, 0xFF	; 255
    1e46:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1e4a:	00 e0       	ldi	r16, 0x00	; 0
    1e4c:	10 e0       	ldi	r17, 0x00	; 0
    1e4e:	98 01       	movw	r18, r16
    1e50:	b9 01       	movw	r22, r18
    1e52:	a8 01       	movw	r20, r16
    1e54:	ce 01       	movw	r24, r28
    1e56:	87 58       	subi	r24, 0x87	; 135
    1e58:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1e5e:	cb 57       	subi	r28, 0x7B	; 123
    1e60:	df 4f       	sbci	r29, 0xFF	; 255
    1e62:	79 82       	std	Y+1, r7	; 0x01
    1e64:	68 82       	st	Y, r6
    1e66:	c5 58       	subi	r28, 0x85	; 133
    1e68:	d0 40       	sbci	r29, 0x00	; 0
    1e6a:	c9 57       	subi	r28, 0x79	; 121
    1e6c:	df 4f       	sbci	r29, 0xFF	; 255
    1e6e:	99 82       	std	Y+1, r9	; 0x01
    1e70:	88 82       	st	Y, r8
    1e72:	c7 58       	subi	r28, 0x87	; 135
    1e74:	d0 40       	sbci	r29, 0x00	; 0
    1e76:	cf 57       	subi	r28, 0x7F	; 127
    1e78:	df 4f       	sbci	r29, 0xFF	; 255
    1e7a:	b9 82       	std	Y+1, r11	; 0x01
    1e7c:	a8 82       	st	Y, r10
    1e7e:	c1 58       	subi	r28, 0x81	; 129
    1e80:	d0 40       	sbci	r29, 0x00	; 0
    1e82:	cd 57       	subi	r28, 0x7D	; 125
    1e84:	df 4f       	sbci	r29, 0xFF	; 255
    1e86:	d9 82       	std	Y+1, r13	; 0x01
    1e88:	c8 82       	st	Y, r12
    1e8a:	c3 58       	subi	r28, 0x83	; 131
    1e8c:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),inc_matrix),QB_SIZE2);
    1e8e:	9e 01       	movw	r18, r28
    1e90:	2f 57       	subi	r18, 0x7F	; 127
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	ae 01       	movw	r20, r28
    1e96:	4b 57       	subi	r20, 0x7B	; 123
    1e98:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9a:	62 e0       	ldi	r22, 0x02	; 2
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	c7 01       	movw	r24, r14
    1ea0:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    1ea4:	ae 01       	movw	r20, r28
    1ea6:	4f 5f       	subi	r20, 0xFF	; 255
    1ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eaa:	bc 01       	movw	r22, r24
    1eac:	c7 01       	movw	r24, r14
    1eae:	0e 94 a4 07 	call	0xf48	; 0xf48 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1eb2:	42 e0       	ldi	r20, 0x02	; 2
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	c7 01       	movw	r24, r14
    1eba:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1ebe:	c8 57       	subi	r28, 0x78	; 120
    1ec0:	df 4f       	sbci	r29, 0xFF	; 255
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	1f 91       	pop	r17
    1ed2:	0f 91       	pop	r16
    1ed4:	ff 90       	pop	r15
    1ed6:	ef 90       	pop	r14
    1ed8:	df 90       	pop	r13
    1eda:	cf 90       	pop	r12
    1edc:	bf 90       	pop	r11
    1ede:	af 90       	pop	r10
    1ee0:	9f 90       	pop	r9
    1ee2:	8f 90       	pop	r8
    1ee4:	7f 90       	pop	r7
    1ee6:	6f 90       	pop	r6
    1ee8:	08 95       	ret

00001eea <_ZN5Gates3DECEiiii>:
int * Gates::DEC(int theta1, int phi1, int theta2,int phi2){
    1eea:	6f 92       	push	r6
    1eec:	7f 92       	push	r7
    1eee:	8f 92       	push	r8
    1ef0:	9f 92       	push	r9
    1ef2:	af 92       	push	r10
    1ef4:	bf 92       	push	r11
    1ef6:	cf 92       	push	r12
    1ef8:	df 92       	push	r13
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	c8 58       	subi	r28, 0x88	; 136
    1f0c:	d1 09       	sbc	r29, r1
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	7c 01       	movw	r14, r24
    1f1a:	3b 01       	movw	r6, r22
    1f1c:	5a 01       	movw	r10, r20
    1f1e:	49 01       	movw	r8, r18
    1f20:	68 01       	movw	r12, r16
	Complex dec_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1f22:	00 e0       	ldi	r16, 0x00	; 0
    1f24:	10 e0       	ldi	r17, 0x00	; 0
    1f26:	98 01       	movw	r18, r16
    1f28:	b9 01       	movw	r22, r18
    1f2a:	a8 01       	movw	r20, r16
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1f34:	00 e0       	ldi	r16, 0x00	; 0
    1f36:	10 e0       	ldi	r17, 0x00	; 0
    1f38:	98 01       	movw	r18, r16
    1f3a:	b9 01       	movw	r22, r18
    1f3c:	a8 01       	movw	r20, r16
    1f3e:	ce 01       	movw	r24, r28
    1f40:	09 96       	adiw	r24, 0x09	; 9
    1f42:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1f46:	00 e0       	ldi	r16, 0x00	; 0
    1f48:	10 e0       	ldi	r17, 0x00	; 0
    1f4a:	98 01       	movw	r18, r16
    1f4c:	b9 01       	movw	r22, r18
    1f4e:	a8 01       	movw	r20, r16
    1f50:	ce 01       	movw	r24, r28
    1f52:	41 96       	adiw	r24, 0x11	; 17
    1f54:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1f58:	00 e0       	ldi	r16, 0x00	; 0
    1f5a:	10 e0       	ldi	r17, 0x00	; 0
    1f5c:	98 01       	movw	r18, r16
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	60 e8       	ldi	r22, 0x80	; 128
    1f64:	7f e3       	ldi	r23, 0x3F	; 63
    1f66:	ce 01       	movw	r24, r28
    1f68:	49 96       	adiw	r24, 0x19	; 25
    1f6a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1f6e:	00 e0       	ldi	r16, 0x00	; 0
    1f70:	10 e0       	ldi	r17, 0x00	; 0
    1f72:	98 01       	movw	r18, r16
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	60 e8       	ldi	r22, 0x80	; 128
    1f7a:	7f e3       	ldi	r23, 0x3F	; 63
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	81 96       	adiw	r24, 0x21	; 33
    1f80:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1f84:	00 e0       	ldi	r16, 0x00	; 0
    1f86:	10 e0       	ldi	r17, 0x00	; 0
    1f88:	98 01       	movw	r18, r16
    1f8a:	b9 01       	movw	r22, r18
    1f8c:	a8 01       	movw	r20, r16
    1f8e:	ce 01       	movw	r24, r28
    1f90:	89 96       	adiw	r24, 0x29	; 41
    1f92:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1f96:	00 e0       	ldi	r16, 0x00	; 0
    1f98:	10 e0       	ldi	r17, 0x00	; 0
    1f9a:	98 01       	movw	r18, r16
    1f9c:	b9 01       	movw	r22, r18
    1f9e:	a8 01       	movw	r20, r16
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	c1 96       	adiw	r24, 0x31	; 49
    1fa4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1fa8:	00 e0       	ldi	r16, 0x00	; 0
    1faa:	10 e0       	ldi	r17, 0x00	; 0
    1fac:	98 01       	movw	r18, r16
    1fae:	b9 01       	movw	r22, r18
    1fb0:	a8 01       	movw	r20, r16
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	c9 96       	adiw	r24, 0x39	; 57
    1fb6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1fba:	00 e0       	ldi	r16, 0x00	; 0
    1fbc:	10 e0       	ldi	r17, 0x00	; 0
    1fbe:	98 01       	movw	r18, r16
    1fc0:	b9 01       	movw	r22, r18
    1fc2:	a8 01       	movw	r20, r16
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	8f 5b       	subi	r24, 0xBF	; 191
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1fce:	00 e0       	ldi	r16, 0x00	; 0
    1fd0:	10 e0       	ldi	r17, 0x00	; 0
    1fd2:	98 01       	movw	r18, r16
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	60 e8       	ldi	r22, 0x80	; 128
    1fda:	7f e3       	ldi	r23, 0x3F	; 63
    1fdc:	ce 01       	movw	r24, r28
    1fde:	87 5b       	subi	r24, 0xB7	; 183
    1fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1fe6:	00 e0       	ldi	r16, 0x00	; 0
    1fe8:	10 e0       	ldi	r17, 0x00	; 0
    1fea:	98 01       	movw	r18, r16
    1fec:	b9 01       	movw	r22, r18
    1fee:	a8 01       	movw	r20, r16
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	8f 5a       	subi	r24, 0xAF	; 175
    1ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    1ffa:	00 e0       	ldi	r16, 0x00	; 0
    1ffc:	10 e0       	ldi	r17, 0x00	; 0
    1ffe:	98 01       	movw	r18, r16
    2000:	b9 01       	movw	r22, r18
    2002:	a8 01       	movw	r20, r16
    2004:	ce 01       	movw	r24, r28
    2006:	87 5a       	subi	r24, 0xA7	; 167
    2008:	9f 4f       	sbci	r25, 0xFF	; 255
    200a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    200e:	00 e0       	ldi	r16, 0x00	; 0
    2010:	10 e0       	ldi	r17, 0x00	; 0
    2012:	98 01       	movw	r18, r16
    2014:	b9 01       	movw	r22, r18
    2016:	a8 01       	movw	r20, r16
    2018:	ce 01       	movw	r24, r28
    201a:	8f 59       	subi	r24, 0x9F	; 159
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2022:	00 e0       	ldi	r16, 0x00	; 0
    2024:	10 e0       	ldi	r17, 0x00	; 0
    2026:	98 01       	movw	r18, r16
    2028:	b9 01       	movw	r22, r18
    202a:	a8 01       	movw	r20, r16
    202c:	ce 01       	movw	r24, r28
    202e:	87 59       	subi	r24, 0x97	; 151
    2030:	9f 4f       	sbci	r25, 0xFF	; 255
    2032:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2036:	00 e0       	ldi	r16, 0x00	; 0
    2038:	10 e0       	ldi	r17, 0x00	; 0
    203a:	98 01       	movw	r18, r16
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	60 e8       	ldi	r22, 0x80	; 128
    2042:	7f e3       	ldi	r23, 0x3F	; 63
    2044:	ce 01       	movw	r24, r28
    2046:	8f 58       	subi	r24, 0x8F	; 143
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    204e:	00 e0       	ldi	r16, 0x00	; 0
    2050:	10 e0       	ldi	r17, 0x00	; 0
    2052:	98 01       	movw	r18, r16
    2054:	b9 01       	movw	r22, r18
    2056:	a8 01       	movw	r20, r16
    2058:	ce 01       	movw	r24, r28
    205a:	87 58       	subi	r24, 0x87	; 135
    205c:	9f 4f       	sbci	r25, 0xFF	; 255
    205e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2062:	cb 57       	subi	r28, 0x7B	; 123
    2064:	df 4f       	sbci	r29, 0xFF	; 255
    2066:	79 82       	std	Y+1, r7	; 0x01
    2068:	68 82       	st	Y, r6
    206a:	c5 58       	subi	r28, 0x85	; 133
    206c:	d0 40       	sbci	r29, 0x00	; 0
    206e:	c9 57       	subi	r28, 0x79	; 121
    2070:	df 4f       	sbci	r29, 0xFF	; 255
    2072:	99 82       	std	Y+1, r9	; 0x01
    2074:	88 82       	st	Y, r8
    2076:	c7 58       	subi	r28, 0x87	; 135
    2078:	d0 40       	sbci	r29, 0x00	; 0
    207a:	cf 57       	subi	r28, 0x7F	; 127
    207c:	df 4f       	sbci	r29, 0xFF	; 255
    207e:	b9 82       	std	Y+1, r11	; 0x01
    2080:	a8 82       	st	Y, r10
    2082:	c1 58       	subi	r28, 0x81	; 129
    2084:	d0 40       	sbci	r29, 0x00	; 0
    2086:	cd 57       	subi	r28, 0x7D	; 125
    2088:	df 4f       	sbci	r29, 0xFF	; 255
    208a:	d9 82       	std	Y+1, r13	; 0x01
    208c:	c8 82       	st	Y, r12
    208e:	c3 58       	subi	r28, 0x83	; 131
    2090:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    2092:	9e 01       	movw	r18, r28
    2094:	2f 57       	subi	r18, 0x7F	; 127
    2096:	3f 4f       	sbci	r19, 0xFF	; 255
    2098:	ae 01       	movw	r20, r28
    209a:	4b 57       	subi	r20, 0x7B	; 123
    209c:	5f 4f       	sbci	r21, 0xFF	; 255
    209e:	62 e0       	ldi	r22, 0x02	; 2
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	c7 01       	movw	r24, r14
    20a4:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    20a8:	ae 01       	movw	r20, r28
    20aa:	4f 5f       	subi	r20, 0xFF	; 255
    20ac:	5f 4f       	sbci	r21, 0xFF	; 255
    20ae:	bc 01       	movw	r22, r24
    20b0:	c7 01       	movw	r24, r14
    20b2:	0e 94 a4 07 	call	0xf48	; 0xf48 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    20b6:	42 e0       	ldi	r20, 0x02	; 2
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	bc 01       	movw	r22, r24
    20bc:	c7 01       	movw	r24, r14
    20be:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    20c2:	c8 57       	subi	r28, 0x78	; 120
    20c4:	df 4f       	sbci	r29, 0xFF	; 255
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	df 90       	pop	r13
    20de:	cf 90       	pop	r12
    20e0:	bf 90       	pop	r11
    20e2:	af 90       	pop	r10
    20e4:	9f 90       	pop	r9
    20e6:	8f 90       	pop	r8
    20e8:	7f 90       	pop	r7
    20ea:	6f 90       	pop	r6
    20ec:	08 95       	ret

000020ee <_ZN5Gates3SWQEiiii>:
int * Gates::SWQ(int theta1, int phi1, int theta2,int phi2){
    20ee:	6f 92       	push	r6
    20f0:	7f 92       	push	r7
    20f2:	8f 92       	push	r8
    20f4:	9f 92       	push	r9
    20f6:	af 92       	push	r10
    20f8:	bf 92       	push	r11
    20fa:	cf 92       	push	r12
    20fc:	df 92       	push	r13
    20fe:	ef 92       	push	r14
    2100:	ff 92       	push	r15
    2102:	0f 93       	push	r16
    2104:	1f 93       	push	r17
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	c8 58       	subi	r28, 0x88	; 136
    2110:	d1 09       	sbc	r29, r1
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	7c 01       	movw	r14, r24
    211e:	3b 01       	movw	r6, r22
    2120:	5a 01       	movw	r10, r20
    2122:	49 01       	movw	r8, r18
    2124:	68 01       	movw	r12, r16
	Complex swq_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),   Complex(0,0),   Complex(0,0)},
	 												     {Complex(0,0),Complex(.5,.5), Complex(.5,-.5),Complex(0,0)},
													     {Complex(0,0),Complex(.5,-.5),Complex(.5,.5), Complex(0,0)},
													     {Complex(0,0),Complex(0,0),   Complex(0,0),   Complex(1,0)}};
    2126:	00 e0       	ldi	r16, 0x00	; 0
    2128:	10 e0       	ldi	r17, 0x00	; 0
    212a:	98 01       	movw	r18, r16
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	60 e8       	ldi	r22, 0x80	; 128
    2132:	7f e3       	ldi	r23, 0x3F	; 63
    2134:	ce 01       	movw	r24, r28
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    213c:	00 e0       	ldi	r16, 0x00	; 0
    213e:	10 e0       	ldi	r17, 0x00	; 0
    2140:	98 01       	movw	r18, r16
    2142:	b9 01       	movw	r22, r18
    2144:	a8 01       	movw	r20, r16
    2146:	ce 01       	movw	r24, r28
    2148:	09 96       	adiw	r24, 0x09	; 9
    214a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    214e:	00 e0       	ldi	r16, 0x00	; 0
    2150:	10 e0       	ldi	r17, 0x00	; 0
    2152:	98 01       	movw	r18, r16
    2154:	b9 01       	movw	r22, r18
    2156:	a8 01       	movw	r20, r16
    2158:	ce 01       	movw	r24, r28
    215a:	41 96       	adiw	r24, 0x11	; 17
    215c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2160:	00 e0       	ldi	r16, 0x00	; 0
    2162:	10 e0       	ldi	r17, 0x00	; 0
    2164:	98 01       	movw	r18, r16
    2166:	b9 01       	movw	r22, r18
    2168:	a8 01       	movw	r20, r16
    216a:	ce 01       	movw	r24, r28
    216c:	49 96       	adiw	r24, 0x19	; 25
    216e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2172:	00 e0       	ldi	r16, 0x00	; 0
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	98 01       	movw	r18, r16
    2178:	b9 01       	movw	r22, r18
    217a:	a8 01       	movw	r20, r16
    217c:	ce 01       	movw	r24, r28
    217e:	81 96       	adiw	r24, 0x21	; 33
    2180:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2184:	00 e0       	ldi	r16, 0x00	; 0
    2186:	10 e0       	ldi	r17, 0x00	; 0
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f e3       	ldi	r19, 0x3F	; 63
    218c:	b9 01       	movw	r22, r18
    218e:	a8 01       	movw	r20, r16
    2190:	ce 01       	movw	r24, r28
    2192:	89 96       	adiw	r24, 0x29	; 41
    2194:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2198:	00 e0       	ldi	r16, 0x00	; 0
    219a:	10 e0       	ldi	r17, 0x00	; 0
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	3f eb       	ldi	r19, 0xBF	; 191
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	7f e3       	ldi	r23, 0x3F	; 63
    21a8:	ce 01       	movw	r24, r28
    21aa:	c1 96       	adiw	r24, 0x31	; 49
    21ac:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    21b0:	00 e0       	ldi	r16, 0x00	; 0
    21b2:	10 e0       	ldi	r17, 0x00	; 0
    21b4:	98 01       	movw	r18, r16
    21b6:	b9 01       	movw	r22, r18
    21b8:	a8 01       	movw	r20, r16
    21ba:	ce 01       	movw	r24, r28
    21bc:	c9 96       	adiw	r24, 0x39	; 57
    21be:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    21c2:	00 e0       	ldi	r16, 0x00	; 0
    21c4:	10 e0       	ldi	r17, 0x00	; 0
    21c6:	98 01       	movw	r18, r16
    21c8:	b9 01       	movw	r22, r18
    21ca:	a8 01       	movw	r20, r16
    21cc:	ce 01       	movw	r24, r28
    21ce:	8f 5b       	subi	r24, 0xBF	; 191
    21d0:	9f 4f       	sbci	r25, 0xFF	; 255
    21d2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    21d6:	00 e0       	ldi	r16, 0x00	; 0
    21d8:	10 e0       	ldi	r17, 0x00	; 0
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f eb       	ldi	r19, 0xBF	; 191
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	7f e3       	ldi	r23, 0x3F	; 63
    21e6:	ce 01       	movw	r24, r28
    21e8:	87 5b       	subi	r24, 0xB7	; 183
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    21f0:	00 e0       	ldi	r16, 0x00	; 0
    21f2:	10 e0       	ldi	r17, 0x00	; 0
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	3f e3       	ldi	r19, 0x3F	; 63
    21f8:	b9 01       	movw	r22, r18
    21fa:	a8 01       	movw	r20, r16
    21fc:	ce 01       	movw	r24, r28
    21fe:	8f 5a       	subi	r24, 0xAF	; 175
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2206:	00 e0       	ldi	r16, 0x00	; 0
    2208:	10 e0       	ldi	r17, 0x00	; 0
    220a:	98 01       	movw	r18, r16
    220c:	b9 01       	movw	r22, r18
    220e:	a8 01       	movw	r20, r16
    2210:	ce 01       	movw	r24, r28
    2212:	87 5a       	subi	r24, 0xA7	; 167
    2214:	9f 4f       	sbci	r25, 0xFF	; 255
    2216:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    221a:	00 e0       	ldi	r16, 0x00	; 0
    221c:	10 e0       	ldi	r17, 0x00	; 0
    221e:	98 01       	movw	r18, r16
    2220:	b9 01       	movw	r22, r18
    2222:	a8 01       	movw	r20, r16
    2224:	ce 01       	movw	r24, r28
    2226:	8f 59       	subi	r24, 0x9F	; 159
    2228:	9f 4f       	sbci	r25, 0xFF	; 255
    222a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    222e:	00 e0       	ldi	r16, 0x00	; 0
    2230:	10 e0       	ldi	r17, 0x00	; 0
    2232:	98 01       	movw	r18, r16
    2234:	b9 01       	movw	r22, r18
    2236:	a8 01       	movw	r20, r16
    2238:	ce 01       	movw	r24, r28
    223a:	87 59       	subi	r24, 0x97	; 151
    223c:	9f 4f       	sbci	r25, 0xFF	; 255
    223e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2242:	00 e0       	ldi	r16, 0x00	; 0
    2244:	10 e0       	ldi	r17, 0x00	; 0
    2246:	98 01       	movw	r18, r16
    2248:	b9 01       	movw	r22, r18
    224a:	a8 01       	movw	r20, r16
    224c:	ce 01       	movw	r24, r28
    224e:	8f 58       	subi	r24, 0x8F	; 143
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2256:	00 e0       	ldi	r16, 0x00	; 0
    2258:	10 e0       	ldi	r17, 0x00	; 0
    225a:	98 01       	movw	r18, r16
    225c:	40 e0       	ldi	r20, 0x00	; 0
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	60 e8       	ldi	r22, 0x80	; 128
    2262:	7f e3       	ldi	r23, 0x3F	; 63
    2264:	ce 01       	movw	r24, r28
    2266:	87 58       	subi	r24, 0x87	; 135
    2268:	9f 4f       	sbci	r25, 0xFF	; 255
    226a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    226e:	cb 57       	subi	r28, 0x7B	; 123
    2270:	df 4f       	sbci	r29, 0xFF	; 255
    2272:	79 82       	std	Y+1, r7	; 0x01
    2274:	68 82       	st	Y, r6
    2276:	c5 58       	subi	r28, 0x85	; 133
    2278:	d0 40       	sbci	r29, 0x00	; 0
    227a:	c9 57       	subi	r28, 0x79	; 121
    227c:	df 4f       	sbci	r29, 0xFF	; 255
    227e:	99 82       	std	Y+1, r9	; 0x01
    2280:	88 82       	st	Y, r8
    2282:	c7 58       	subi	r28, 0x87	; 135
    2284:	d0 40       	sbci	r29, 0x00	; 0
    2286:	cf 57       	subi	r28, 0x7F	; 127
    2288:	df 4f       	sbci	r29, 0xFF	; 255
    228a:	b9 82       	std	Y+1, r11	; 0x01
    228c:	a8 82       	st	Y, r10
    228e:	c1 58       	subi	r28, 0x81	; 129
    2290:	d0 40       	sbci	r29, 0x00	; 0
    2292:	cd 57       	subi	r28, 0x7D	; 125
    2294:	df 4f       	sbci	r29, 0xFF	; 255
    2296:	d9 82       	std	Y+1, r13	; 0x01
    2298:	c8 82       	st	Y, r12
    229a:	c3 58       	subi	r28, 0x83	; 131
    229c:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swq_matrix),QB_SIZE2);
    229e:	9e 01       	movw	r18, r28
    22a0:	2f 57       	subi	r18, 0x7F	; 127
    22a2:	3f 4f       	sbci	r19, 0xFF	; 255
    22a4:	ae 01       	movw	r20, r28
    22a6:	4b 57       	subi	r20, 0x7B	; 123
    22a8:	5f 4f       	sbci	r21, 0xFF	; 255
    22aa:	62 e0       	ldi	r22, 0x02	; 2
    22ac:	70 e0       	ldi	r23, 0x00	; 0
    22ae:	c7 01       	movw	r24, r14
    22b0:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    22b4:	ae 01       	movw	r20, r28
    22b6:	4f 5f       	subi	r20, 0xFF	; 255
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ba:	bc 01       	movw	r22, r24
    22bc:	c7 01       	movw	r24, r14
    22be:	0e 94 a4 07 	call	0xf48	; 0xf48 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    22c2:	42 e0       	ldi	r20, 0x02	; 2
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	bc 01       	movw	r22, r24
    22c8:	c7 01       	movw	r24, r14
    22ca:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    22ce:	c8 57       	subi	r28, 0x78	; 120
    22d0:	df 4f       	sbci	r29, 0xFF	; 255
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	df 90       	pop	r13
    22ea:	cf 90       	pop	r12
    22ec:	bf 90       	pop	r11
    22ee:	af 90       	pop	r10
    22f0:	9f 90       	pop	r9
    22f2:	8f 90       	pop	r8
    22f4:	7f 90       	pop	r7
    22f6:	6f 90       	pop	r6
    22f8:	08 95       	ret

000022fa <_ZN5Gates3SWIEiiii>:
int * Gates::SWI(int theta1, int phi1, int theta2,int phi2){
    22fa:	6f 92       	push	r6
    22fc:	7f 92       	push	r7
    22fe:	8f 92       	push	r8
    2300:	9f 92       	push	r9
    2302:	af 92       	push	r10
    2304:	bf 92       	push	r11
    2306:	cf 92       	push	r12
    2308:	df 92       	push	r13
    230a:	ef 92       	push	r14
    230c:	ff 92       	push	r15
    230e:	0f 93       	push	r16
    2310:	1f 93       	push	r17
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	c8 58       	subi	r28, 0x88	; 136
    231c:	d1 09       	sbc	r29, r1
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	7c 01       	movw	r14, r24
    232a:	3b 01       	movw	r6, r22
    232c:	5a 01       	movw	r10, r20
    232e:	49 01       	movw	r8, r18
    2330:	68 01       	movw	r12, r16
	Complex dec_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,1),Complex(0,0)},
 													     {Complex(0,0),Complex(0,1),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    2332:	00 e0       	ldi	r16, 0x00	; 0
    2334:	10 e0       	ldi	r17, 0x00	; 0
    2336:	98 01       	movw	r18, r16
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	60 e8       	ldi	r22, 0x80	; 128
    233e:	7f e3       	ldi	r23, 0x3F	; 63
    2340:	ce 01       	movw	r24, r28
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2348:	00 e0       	ldi	r16, 0x00	; 0
    234a:	10 e0       	ldi	r17, 0x00	; 0
    234c:	98 01       	movw	r18, r16
    234e:	b9 01       	movw	r22, r18
    2350:	a8 01       	movw	r20, r16
    2352:	ce 01       	movw	r24, r28
    2354:	09 96       	adiw	r24, 0x09	; 9
    2356:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    235a:	00 e0       	ldi	r16, 0x00	; 0
    235c:	10 e0       	ldi	r17, 0x00	; 0
    235e:	98 01       	movw	r18, r16
    2360:	b9 01       	movw	r22, r18
    2362:	a8 01       	movw	r20, r16
    2364:	ce 01       	movw	r24, r28
    2366:	41 96       	adiw	r24, 0x11	; 17
    2368:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    236c:	00 e0       	ldi	r16, 0x00	; 0
    236e:	10 e0       	ldi	r17, 0x00	; 0
    2370:	98 01       	movw	r18, r16
    2372:	b9 01       	movw	r22, r18
    2374:	a8 01       	movw	r20, r16
    2376:	ce 01       	movw	r24, r28
    2378:	49 96       	adiw	r24, 0x19	; 25
    237a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    237e:	00 e0       	ldi	r16, 0x00	; 0
    2380:	10 e0       	ldi	r17, 0x00	; 0
    2382:	98 01       	movw	r18, r16
    2384:	b9 01       	movw	r22, r18
    2386:	a8 01       	movw	r20, r16
    2388:	ce 01       	movw	r24, r28
    238a:	81 96       	adiw	r24, 0x21	; 33
    238c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2390:	00 e0       	ldi	r16, 0x00	; 0
    2392:	10 e0       	ldi	r17, 0x00	; 0
    2394:	98 01       	movw	r18, r16
    2396:	b9 01       	movw	r22, r18
    2398:	a8 01       	movw	r20, r16
    239a:	ce 01       	movw	r24, r28
    239c:	89 96       	adiw	r24, 0x29	; 41
    239e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    23a2:	00 e0       	ldi	r16, 0x00	; 0
    23a4:	10 e0       	ldi	r17, 0x00	; 0
    23a6:	20 e8       	ldi	r18, 0x80	; 128
    23a8:	3f e3       	ldi	r19, 0x3F	; 63
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	ba 01       	movw	r22, r20
    23b0:	ce 01       	movw	r24, r28
    23b2:	c1 96       	adiw	r24, 0x31	; 49
    23b4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    23b8:	00 e0       	ldi	r16, 0x00	; 0
    23ba:	10 e0       	ldi	r17, 0x00	; 0
    23bc:	98 01       	movw	r18, r16
    23be:	b9 01       	movw	r22, r18
    23c0:	a8 01       	movw	r20, r16
    23c2:	ce 01       	movw	r24, r28
    23c4:	c9 96       	adiw	r24, 0x39	; 57
    23c6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    23ca:	00 e0       	ldi	r16, 0x00	; 0
    23cc:	10 e0       	ldi	r17, 0x00	; 0
    23ce:	98 01       	movw	r18, r16
    23d0:	b9 01       	movw	r22, r18
    23d2:	a8 01       	movw	r20, r16
    23d4:	ce 01       	movw	r24, r28
    23d6:	8f 5b       	subi	r24, 0xBF	; 191
    23d8:	9f 4f       	sbci	r25, 0xFF	; 255
    23da:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    23de:	00 e0       	ldi	r16, 0x00	; 0
    23e0:	10 e0       	ldi	r17, 0x00	; 0
    23e2:	20 e8       	ldi	r18, 0x80	; 128
    23e4:	3f e3       	ldi	r19, 0x3F	; 63
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	ba 01       	movw	r22, r20
    23ec:	ce 01       	movw	r24, r28
    23ee:	87 5b       	subi	r24, 0xB7	; 183
    23f0:	9f 4f       	sbci	r25, 0xFF	; 255
    23f2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    23f6:	00 e0       	ldi	r16, 0x00	; 0
    23f8:	10 e0       	ldi	r17, 0x00	; 0
    23fa:	98 01       	movw	r18, r16
    23fc:	b9 01       	movw	r22, r18
    23fe:	a8 01       	movw	r20, r16
    2400:	ce 01       	movw	r24, r28
    2402:	8f 5a       	subi	r24, 0xAF	; 175
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    240a:	00 e0       	ldi	r16, 0x00	; 0
    240c:	10 e0       	ldi	r17, 0x00	; 0
    240e:	98 01       	movw	r18, r16
    2410:	b9 01       	movw	r22, r18
    2412:	a8 01       	movw	r20, r16
    2414:	ce 01       	movw	r24, r28
    2416:	87 5a       	subi	r24, 0xA7	; 167
    2418:	9f 4f       	sbci	r25, 0xFF	; 255
    241a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    241e:	00 e0       	ldi	r16, 0x00	; 0
    2420:	10 e0       	ldi	r17, 0x00	; 0
    2422:	98 01       	movw	r18, r16
    2424:	b9 01       	movw	r22, r18
    2426:	a8 01       	movw	r20, r16
    2428:	ce 01       	movw	r24, r28
    242a:	8f 59       	subi	r24, 0x9F	; 159
    242c:	9f 4f       	sbci	r25, 0xFF	; 255
    242e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2432:	00 e0       	ldi	r16, 0x00	; 0
    2434:	10 e0       	ldi	r17, 0x00	; 0
    2436:	98 01       	movw	r18, r16
    2438:	b9 01       	movw	r22, r18
    243a:	a8 01       	movw	r20, r16
    243c:	ce 01       	movw	r24, r28
    243e:	87 59       	subi	r24, 0x97	; 151
    2440:	9f 4f       	sbci	r25, 0xFF	; 255
    2442:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2446:	00 e0       	ldi	r16, 0x00	; 0
    2448:	10 e0       	ldi	r17, 0x00	; 0
    244a:	98 01       	movw	r18, r16
    244c:	b9 01       	movw	r22, r18
    244e:	a8 01       	movw	r20, r16
    2450:	ce 01       	movw	r24, r28
    2452:	8f 58       	subi	r24, 0x8F	; 143
    2454:	9f 4f       	sbci	r25, 0xFF	; 255
    2456:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    245a:	00 e0       	ldi	r16, 0x00	; 0
    245c:	10 e0       	ldi	r17, 0x00	; 0
    245e:	98 01       	movw	r18, r16
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	60 e8       	ldi	r22, 0x80	; 128
    2466:	7f e3       	ldi	r23, 0x3F	; 63
    2468:	ce 01       	movw	r24, r28
    246a:	87 58       	subi	r24, 0x87	; 135
    246c:	9f 4f       	sbci	r25, 0xFF	; 255
    246e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2472:	cb 57       	subi	r28, 0x7B	; 123
    2474:	df 4f       	sbci	r29, 0xFF	; 255
    2476:	79 82       	std	Y+1, r7	; 0x01
    2478:	68 82       	st	Y, r6
    247a:	c5 58       	subi	r28, 0x85	; 133
    247c:	d0 40       	sbci	r29, 0x00	; 0
    247e:	c9 57       	subi	r28, 0x79	; 121
    2480:	df 4f       	sbci	r29, 0xFF	; 255
    2482:	99 82       	std	Y+1, r9	; 0x01
    2484:	88 82       	st	Y, r8
    2486:	c7 58       	subi	r28, 0x87	; 135
    2488:	d0 40       	sbci	r29, 0x00	; 0
    248a:	cf 57       	subi	r28, 0x7F	; 127
    248c:	df 4f       	sbci	r29, 0xFF	; 255
    248e:	b9 82       	std	Y+1, r11	; 0x01
    2490:	a8 82       	st	Y, r10
    2492:	c1 58       	subi	r28, 0x81	; 129
    2494:	d0 40       	sbci	r29, 0x00	; 0
    2496:	cd 57       	subi	r28, 0x7D	; 125
    2498:	df 4f       	sbci	r29, 0xFF	; 255
    249a:	d9 82       	std	Y+1, r13	; 0x01
    249c:	c8 82       	st	Y, r12
    249e:	c3 58       	subi	r28, 0x83	; 131
    24a0:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    24a2:	9e 01       	movw	r18, r28
    24a4:	2f 57       	subi	r18, 0x7F	; 127
    24a6:	3f 4f       	sbci	r19, 0xFF	; 255
    24a8:	ae 01       	movw	r20, r28
    24aa:	4b 57       	subi	r20, 0x7B	; 123
    24ac:	5f 4f       	sbci	r21, 0xFF	; 255
    24ae:	62 e0       	ldi	r22, 0x02	; 2
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	c7 01       	movw	r24, r14
    24b4:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    24b8:	ae 01       	movw	r20, r28
    24ba:	4f 5f       	subi	r20, 0xFF	; 255
    24bc:	5f 4f       	sbci	r21, 0xFF	; 255
    24be:	bc 01       	movw	r22, r24
    24c0:	c7 01       	movw	r24, r14
    24c2:	0e 94 a4 07 	call	0xf48	; 0xf48 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    24c6:	42 e0       	ldi	r20, 0x02	; 2
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	bc 01       	movw	r22, r24
    24cc:	c7 01       	movw	r24, r14
    24ce:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    24d2:	c8 57       	subi	r28, 0x78	; 120
    24d4:	df 4f       	sbci	r29, 0xFF	; 255
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	ff 90       	pop	r15
    24ea:	ef 90       	pop	r14
    24ec:	df 90       	pop	r13
    24ee:	cf 90       	pop	r12
    24f0:	bf 90       	pop	r11
    24f2:	af 90       	pop	r10
    24f4:	9f 90       	pop	r9
    24f6:	8f 90       	pop	r8
    24f8:	7f 90       	pop	r7
    24fa:	6f 90       	pop	r6
    24fc:	08 95       	ret

000024fe <_ZN5Gates3ROXEiii>:
int * Gates::ROX(int theta,int phi,int delta){
    24fe:	2f 92       	push	r2
    2500:	3f 92       	push	r3
    2502:	4f 92       	push	r4
    2504:	5f 92       	push	r5
    2506:	6f 92       	push	r6
    2508:	7f 92       	push	r7
    250a:	8f 92       	push	r8
    250c:	9f 92       	push	r9
    250e:	af 92       	push	r10
    2510:	bf 92       	push	r11
    2512:	cf 92       	push	r12
    2514:	df 92       	push	r13
    2516:	ef 92       	push	r14
    2518:	ff 92       	push	r15
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	a4 97       	sbiw	r28, 0x24	; 36
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	7c 01       	movw	r14, r24
    2534:	1b 01       	movw	r2, r22
    2536:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    2538:	b9 01       	movw	r22, r18
    253a:	88 27       	eor	r24, r24
    253c:	77 fd       	sbrc	r23, 7
    253e:	80 95       	com	r24
    2540:	98 2f       	mov	r25, r24
    2542:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
    2546:	2b ed       	ldi	r18, 0xDB	; 219
    2548:	3f e0       	ldi	r19, 0x0F	; 15
    254a:	49 e4       	ldi	r20, 0x49	; 73
    254c:	50 e4       	ldi	r21, 0x40	; 64
    254e:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	44 e3       	ldi	r20, 0x34	; 52
    2558:	53 e4       	ldi	r21, 0x43	; 67
    255a:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
	Complex rox_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0), Complex(0,-sin(delta_float/2))},
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
    256a:	4b 01       	movw	r8, r22
    256c:	5c 01       	movw	r10, r24
    256e:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <cos>
    2572:	2b 01       	movw	r4, r22
    2574:	3c 01       	movw	r6, r24
														 {Complex(0,-sin(delta_float/2)),Complex(cos(delta_float/2),0)}};
    2576:	00 e0       	ldi	r16, 0x00	; 0
    2578:	10 e0       	ldi	r17, 0x00	; 0
    257a:	98 01       	movw	r18, r16
    257c:	ab 01       	movw	r20, r22
    257e:	bc 01       	movw	r22, r24
    2580:	ce 01       	movw	r24, r28
    2582:	01 96       	adiw	r24, 0x01	; 1
    2584:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
}
int * Gates::ROX(int theta,int phi,int delta){
	float delta_float=(delta*M_PI)/180;
	Complex rox_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0), Complex(0,-sin(delta_float/2))},
    2588:	c5 01       	movw	r24, r10
    258a:	b4 01       	movw	r22, r8
    258c:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sin>
														 {Complex(0,-sin(delta_float/2)),Complex(cos(delta_float/2),0)}};
    2590:	4b 01       	movw	r8, r22
    2592:	5c 01       	movw	r10, r24
    2594:	b7 fa       	bst	r11, 7
    2596:	b0 94       	com	r11
    2598:	b7 f8       	bld	r11, 7
    259a:	b0 94       	com	r11
    259c:	95 01       	movw	r18, r10
    259e:	84 01       	movw	r16, r8
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	ba 01       	movw	r22, r20
    25a6:	ce 01       	movw	r24, r28
    25a8:	09 96       	adiw	r24, 0x09	; 9
    25aa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    25ae:	95 01       	movw	r18, r10
    25b0:	84 01       	movw	r16, r8
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	ba 01       	movw	r22, r20
    25b8:	ce 01       	movw	r24, r28
    25ba:	41 96       	adiw	r24, 0x11	; 17
    25bc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    25c0:	00 e0       	ldi	r16, 0x00	; 0
    25c2:	10 e0       	ldi	r17, 0x00	; 0
    25c4:	98 01       	movw	r18, r16
    25c6:	b3 01       	movw	r22, r6
    25c8:	a2 01       	movw	r20, r4
    25ca:	ce 01       	movw	r24, r28
    25cc:	49 96       	adiw	r24, 0x19	; 25
    25ce:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    25d2:	3c a2       	std	Y+36, r3	; 0x24
    25d4:	2b a2       	std	Y+35, r2	; 0x23
    25d6:	da a2       	std	Y+34, r13	; 0x22
    25d8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
    25da:	9e 01       	movw	r18, r28
    25dc:	2f 5d       	subi	r18, 0xDF	; 223
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	ae 01       	movw	r20, r28
    25e2:	4d 5d       	subi	r20, 0xDD	; 221
    25e4:	5f 4f       	sbci	r21, 0xFF	; 255
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	c7 01       	movw	r24, r14
    25ec:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    25f0:	ae 01       	movw	r20, r28
    25f2:	4f 5f       	subi	r20, 0xFF	; 255
    25f4:	5f 4f       	sbci	r21, 0xFF	; 255
    25f6:	bc 01       	movw	r22, r24
    25f8:	c7 01       	movw	r24, r14
    25fa:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	bc 01       	movw	r22, r24
    2604:	c7 01       	movw	r24, r14
    2606:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    260a:	a4 96       	adiw	r28, 0x24	; 36
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	ff 90       	pop	r15
    2620:	ef 90       	pop	r14
    2622:	df 90       	pop	r13
    2624:	cf 90       	pop	r12
    2626:	bf 90       	pop	r11
    2628:	af 90       	pop	r10
    262a:	9f 90       	pop	r9
    262c:	8f 90       	pop	r8
    262e:	7f 90       	pop	r7
    2630:	6f 90       	pop	r6
    2632:	5f 90       	pop	r5
    2634:	4f 90       	pop	r4
    2636:	3f 90       	pop	r3
    2638:	2f 90       	pop	r2
    263a:	08 95       	ret

0000263c <_ZN5Gates3ROYEiii>:
int * Gates::ROY(int theta,int phi,int delta){
    263c:	2f 92       	push	r2
    263e:	3f 92       	push	r3
    2640:	4f 92       	push	r4
    2642:	5f 92       	push	r5
    2644:	6f 92       	push	r6
    2646:	7f 92       	push	r7
    2648:	8f 92       	push	r8
    264a:	9f 92       	push	r9
    264c:	af 92       	push	r10
    264e:	bf 92       	push	r11
    2650:	cf 92       	push	r12
    2652:	df 92       	push	r13
    2654:	ef 92       	push	r14
    2656:	ff 92       	push	r15
    2658:	0f 93       	push	r16
    265a:	1f 93       	push	r17
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	a4 97       	sbiw	r28, 0x24	; 36
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	7c 01       	movw	r14, r24
    2672:	1b 01       	movw	r2, r22
    2674:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    2676:	b9 01       	movw	r22, r18
    2678:	88 27       	eor	r24, r24
    267a:	77 fd       	sbrc	r23, 7
    267c:	80 95       	com	r24
    267e:	98 2f       	mov	r25, r24
    2680:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
    2684:	2b ed       	ldi	r18, 0xDB	; 219
    2686:	3f e0       	ldi	r19, 0x0F	; 15
    2688:	49 e4       	ldi	r20, 0x49	; 73
    268a:	50 e4       	ldi	r21, 0x40	; 64
    268c:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	44 e3       	ldi	r20, 0x34	; 52
    2696:	53 e4       	ldi	r21, 0x43	; 67
    2698:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0),Complex(-sin(delta_float/2),0)},
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	5f e3       	ldi	r21, 0x3F	; 63
    26a4:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
    26a8:	4b 01       	movw	r8, r22
    26aa:	5c 01       	movw	r10, r24
    26ac:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <cos>
    26b0:	2b 01       	movw	r4, r22
    26b2:	3c 01       	movw	r6, r24
														 {Complex(sin(delta_float/2),0),Complex(cos(delta_float/2),0)}};
    26b4:	00 e0       	ldi	r16, 0x00	; 0
    26b6:	10 e0       	ldi	r17, 0x00	; 0
    26b8:	98 01       	movw	r18, r16
    26ba:	ab 01       	movw	r20, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	ce 01       	movw	r24, r28
    26c0:	01 96       	adiw	r24, 0x01	; 1
    26c2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
}
int * Gates::ROY(int theta,int phi,int delta){
	float delta_float=(delta*M_PI)/180;
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0),Complex(-sin(delta_float/2),0)},
    26c6:	c5 01       	movw	r24, r10
    26c8:	b4 01       	movw	r22, r8
    26ca:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sin>
    26ce:	4b 01       	movw	r8, r22
    26d0:	5c 01       	movw	r10, r24
														 {Complex(sin(delta_float/2),0),Complex(cos(delta_float/2),0)}};
    26d2:	ab 01       	movw	r20, r22
    26d4:	bc 01       	movw	r22, r24
    26d6:	70 58       	subi	r23, 0x80	; 128
    26d8:	00 e0       	ldi	r16, 0x00	; 0
    26da:	10 e0       	ldi	r17, 0x00	; 0
    26dc:	98 01       	movw	r18, r16
    26de:	ce 01       	movw	r24, r28
    26e0:	09 96       	adiw	r24, 0x09	; 9
    26e2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    26e6:	00 e0       	ldi	r16, 0x00	; 0
    26e8:	10 e0       	ldi	r17, 0x00	; 0
    26ea:	98 01       	movw	r18, r16
    26ec:	b5 01       	movw	r22, r10
    26ee:	a4 01       	movw	r20, r8
    26f0:	ce 01       	movw	r24, r28
    26f2:	41 96       	adiw	r24, 0x11	; 17
    26f4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    26f8:	00 e0       	ldi	r16, 0x00	; 0
    26fa:	10 e0       	ldi	r17, 0x00	; 0
    26fc:	98 01       	movw	r18, r16
    26fe:	b3 01       	movw	r22, r6
    2700:	a2 01       	movw	r20, r4
    2702:	ce 01       	movw	r24, r28
    2704:	49 96       	adiw	r24, 0x19	; 25
    2706:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    270a:	3c a2       	std	Y+36, r3	; 0x24
    270c:	2b a2       	std	Y+35, r2	; 0x23
    270e:	da a2       	std	Y+34, r13	; 0x22
    2710:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    2712:	9e 01       	movw	r18, r28
    2714:	2f 5d       	subi	r18, 0xDF	; 223
    2716:	3f 4f       	sbci	r19, 0xFF	; 255
    2718:	ae 01       	movw	r20, r28
    271a:	4d 5d       	subi	r20, 0xDD	; 221
    271c:	5f 4f       	sbci	r21, 0xFF	; 255
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	70 e0       	ldi	r23, 0x00	; 0
    2722:	c7 01       	movw	r24, r14
    2724:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    2728:	ae 01       	movw	r20, r28
    272a:	4f 5f       	subi	r20, 0xFF	; 255
    272c:	5f 4f       	sbci	r21, 0xFF	; 255
    272e:	bc 01       	movw	r22, r24
    2730:	c7 01       	movw	r24, r14
    2732:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	bc 01       	movw	r22, r24
    273c:	c7 01       	movw	r24, r14
    273e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    2742:	a4 96       	adiw	r28, 0x24	; 36
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	df 90       	pop	r13
    275c:	cf 90       	pop	r12
    275e:	bf 90       	pop	r11
    2760:	af 90       	pop	r10
    2762:	9f 90       	pop	r9
    2764:	8f 90       	pop	r8
    2766:	7f 90       	pop	r7
    2768:	6f 90       	pop	r6
    276a:	5f 90       	pop	r5
    276c:	4f 90       	pop	r4
    276e:	3f 90       	pop	r3
    2770:	2f 90       	pop	r2
    2772:	08 95       	ret

00002774 <_ZN5Gates3ROZEiii>:
int * Gates::ROZ(int theta,int phi,int delta){
    2774:	4f 92       	push	r4
    2776:	5f 92       	push	r5
    2778:	6f 92       	push	r6
    277a:	7f 92       	push	r7
    277c:	af 92       	push	r10
    277e:	bf 92       	push	r11
    2780:	cf 92       	push	r12
    2782:	df 92       	push	r13
    2784:	ef 92       	push	r14
    2786:	ff 92       	push	r15
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	a4 97       	sbiw	r28, 0x24	; 36
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	7c 01       	movw	r14, r24
    27a2:	5b 01       	movw	r10, r22
    27a4:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    27a6:	b9 01       	movw	r22, r18
    27a8:	88 27       	eor	r24, r24
    27aa:	77 fd       	sbrc	r23, 7
    27ac:	80 95       	com	r24
    27ae:	98 2f       	mov	r25, r24
    27b0:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
    27b4:	2b ed       	ldi	r18, 0xDB	; 219
    27b6:	3f e0       	ldi	r19, 0x0F	; 15
    27b8:	49 e4       	ldi	r20, 0x49	; 73
    27ba:	50 e4       	ldi	r21, 0x40	; 64
    27bc:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	44 e3       	ldi	r20, 0x34	; 52
    27c6:	53 e4       	ldi	r21, 0x43	; 67
    27c8:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
    27cc:	2b 01       	movw	r4, r22
    27ce:	3c 01       	movw	r6, r24
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,exp(-delta_float/2)),Complex(0,0)},
    27d0:	90 58       	subi	r25, 0x80	; 128
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
    27de:	0e 94 32 30 	call	0x6064	; 0x6064 <exp>
    27e2:	8b 01       	movw	r16, r22
    27e4:	9c 01       	movw	r18, r24
														 {Complex(0,0),		  		     Complex(0,exp(delta_float/2))}};
    27e6:	40 e0       	ldi	r20, 0x00	; 0
    27e8:	50 e0       	ldi	r21, 0x00	; 0
    27ea:	ba 01       	movw	r22, r20
    27ec:	ce 01       	movw	r24, r28
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    27f4:	00 e0       	ldi	r16, 0x00	; 0
    27f6:	10 e0       	ldi	r17, 0x00	; 0
    27f8:	98 01       	movw	r18, r16
    27fa:	b9 01       	movw	r22, r18
    27fc:	a8 01       	movw	r20, r16
    27fe:	ce 01       	movw	r24, r28
    2800:	09 96       	adiw	r24, 0x09	; 9
    2802:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2806:	00 e0       	ldi	r16, 0x00	; 0
    2808:	10 e0       	ldi	r17, 0x00	; 0
    280a:	98 01       	movw	r18, r16
    280c:	b9 01       	movw	r22, r18
    280e:	a8 01       	movw	r20, r16
    2810:	ce 01       	movw	r24, r28
    2812:	41 96       	adiw	r24, 0x11	; 17
    2814:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	c3 01       	movw	r24, r6
    2822:	b2 01       	movw	r22, r4
    2824:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
    2828:	0e 94 32 30 	call	0x6064	; 0x6064 <exp>
    282c:	8b 01       	movw	r16, r22
    282e:	9c 01       	movw	r18, r24
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	50 e0       	ldi	r21, 0x00	; 0
    2834:	ba 01       	movw	r22, r20
    2836:	ce 01       	movw	r24, r28
    2838:	49 96       	adiw	r24, 0x19	; 25
    283a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    283e:	bc a2       	std	Y+36, r11	; 0x24
    2840:	ab a2       	std	Y+35, r10	; 0x23
    2842:	da a2       	std	Y+34, r13	; 0x22
    2844:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    2846:	9e 01       	movw	r18, r28
    2848:	2f 5d       	subi	r18, 0xDF	; 223
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	ae 01       	movw	r20, r28
    284e:	4d 5d       	subi	r20, 0xDD	; 221
    2850:	5f 4f       	sbci	r21, 0xFF	; 255
    2852:	61 e0       	ldi	r22, 0x01	; 1
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	c7 01       	movw	r24, r14
    2858:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    285c:	ae 01       	movw	r20, r28
    285e:	4f 5f       	subi	r20, 0xFF	; 255
    2860:	5f 4f       	sbci	r21, 0xFF	; 255
    2862:	bc 01       	movw	r22, r24
    2864:	c7 01       	movw	r24, r14
    2866:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    286a:	41 e0       	ldi	r20, 0x01	; 1
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	bc 01       	movw	r22, r24
    2870:	c7 01       	movw	r24, r14
    2872:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    2876:	a4 96       	adiw	r28, 0x24	; 36
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	1f 91       	pop	r17
    2888:	0f 91       	pop	r16
    288a:	ff 90       	pop	r15
    288c:	ef 90       	pop	r14
    288e:	df 90       	pop	r13
    2890:	cf 90       	pop	r12
    2892:	bf 90       	pop	r11
    2894:	af 90       	pop	r10
    2896:	7f 90       	pop	r7
    2898:	6f 90       	pop	r6
    289a:	5f 90       	pop	r5
    289c:	4f 90       	pop	r4
    289e:	08 95       	ret

000028a0 <_ZN5Gates3CSWEiiiiii>:
int * Gates::CSW(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3){
    28a0:	2f 92       	push	r2
    28a2:	3f 92       	push	r3
    28a4:	4f 92       	push	r4
    28a6:	5f 92       	push	r5
    28a8:	6f 92       	push	r6
    28aa:	7f 92       	push	r7
    28ac:	8f 92       	push	r8
    28ae:	9f 92       	push	r9
    28b0:	af 92       	push	r10
    28b2:	bf 92       	push	r11
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	cc 50       	subi	r28, 0x0C	; 12
    28ca:	d2 40       	sbci	r29, 0x02	; 2
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	5c 01       	movw	r10, r24
    28d8:	3b 01       	movw	r6, r22
    28da:	2a 01       	movw	r4, r20
    28dc:	49 01       	movw	r8, r18
    28de:	18 01       	movw	r2, r16
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    28e0:	00 e0       	ldi	r16, 0x00	; 0
    28e2:	10 e0       	ldi	r17, 0x00	; 0
    28e4:	98 01       	movw	r18, r16
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	50 e0       	ldi	r21, 0x00	; 0
    28ea:	60 e8       	ldi	r22, 0x80	; 128
    28ec:	7f e3       	ldi	r23, 0x3F	; 63
    28ee:	ce 01       	movw	r24, r28
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    28f6:	00 e0       	ldi	r16, 0x00	; 0
    28f8:	10 e0       	ldi	r17, 0x00	; 0
    28fa:	98 01       	movw	r18, r16
    28fc:	b9 01       	movw	r22, r18
    28fe:	a8 01       	movw	r20, r16
    2900:	ce 01       	movw	r24, r28
    2902:	09 96       	adiw	r24, 0x09	; 9
    2904:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2908:	00 e0       	ldi	r16, 0x00	; 0
    290a:	10 e0       	ldi	r17, 0x00	; 0
    290c:	98 01       	movw	r18, r16
    290e:	b9 01       	movw	r22, r18
    2910:	a8 01       	movw	r20, r16
    2912:	ce 01       	movw	r24, r28
    2914:	41 96       	adiw	r24, 0x11	; 17
    2916:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    291a:	00 e0       	ldi	r16, 0x00	; 0
    291c:	10 e0       	ldi	r17, 0x00	; 0
    291e:	98 01       	movw	r18, r16
    2920:	b9 01       	movw	r22, r18
    2922:	a8 01       	movw	r20, r16
    2924:	ce 01       	movw	r24, r28
    2926:	49 96       	adiw	r24, 0x19	; 25
    2928:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    292c:	00 e0       	ldi	r16, 0x00	; 0
    292e:	10 e0       	ldi	r17, 0x00	; 0
    2930:	98 01       	movw	r18, r16
    2932:	b9 01       	movw	r22, r18
    2934:	a8 01       	movw	r20, r16
    2936:	ce 01       	movw	r24, r28
    2938:	81 96       	adiw	r24, 0x21	; 33
    293a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    293e:	00 e0       	ldi	r16, 0x00	; 0
    2940:	10 e0       	ldi	r17, 0x00	; 0
    2942:	98 01       	movw	r18, r16
    2944:	b9 01       	movw	r22, r18
    2946:	a8 01       	movw	r20, r16
    2948:	ce 01       	movw	r24, r28
    294a:	89 96       	adiw	r24, 0x29	; 41
    294c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2950:	00 e0       	ldi	r16, 0x00	; 0
    2952:	10 e0       	ldi	r17, 0x00	; 0
    2954:	98 01       	movw	r18, r16
    2956:	b9 01       	movw	r22, r18
    2958:	a8 01       	movw	r20, r16
    295a:	ce 01       	movw	r24, r28
    295c:	c1 96       	adiw	r24, 0x31	; 49
    295e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2962:	00 e0       	ldi	r16, 0x00	; 0
    2964:	10 e0       	ldi	r17, 0x00	; 0
    2966:	98 01       	movw	r18, r16
    2968:	b9 01       	movw	r22, r18
    296a:	a8 01       	movw	r20, r16
    296c:	ce 01       	movw	r24, r28
    296e:	c9 96       	adiw	r24, 0x39	; 57
    2970:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2974:	00 e0       	ldi	r16, 0x00	; 0
    2976:	10 e0       	ldi	r17, 0x00	; 0
    2978:	98 01       	movw	r18, r16
    297a:	b9 01       	movw	r22, r18
    297c:	a8 01       	movw	r20, r16
    297e:	ce 01       	movw	r24, r28
    2980:	8f 5b       	subi	r24, 0xBF	; 191
    2982:	9f 4f       	sbci	r25, 0xFF	; 255
    2984:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2988:	00 e0       	ldi	r16, 0x00	; 0
    298a:	10 e0       	ldi	r17, 0x00	; 0
    298c:	98 01       	movw	r18, r16
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	60 e8       	ldi	r22, 0x80	; 128
    2994:	7f e3       	ldi	r23, 0x3F	; 63
    2996:	ce 01       	movw	r24, r28
    2998:	87 5b       	subi	r24, 0xB7	; 183
    299a:	9f 4f       	sbci	r25, 0xFF	; 255
    299c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    29a0:	00 e0       	ldi	r16, 0x00	; 0
    29a2:	10 e0       	ldi	r17, 0x00	; 0
    29a4:	98 01       	movw	r18, r16
    29a6:	b9 01       	movw	r22, r18
    29a8:	a8 01       	movw	r20, r16
    29aa:	ce 01       	movw	r24, r28
    29ac:	8f 5a       	subi	r24, 0xAF	; 175
    29ae:	9f 4f       	sbci	r25, 0xFF	; 255
    29b0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    29b4:	00 e0       	ldi	r16, 0x00	; 0
    29b6:	10 e0       	ldi	r17, 0x00	; 0
    29b8:	98 01       	movw	r18, r16
    29ba:	b9 01       	movw	r22, r18
    29bc:	a8 01       	movw	r20, r16
    29be:	ce 01       	movw	r24, r28
    29c0:	87 5a       	subi	r24, 0xA7	; 167
    29c2:	9f 4f       	sbci	r25, 0xFF	; 255
    29c4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    29c8:	00 e0       	ldi	r16, 0x00	; 0
    29ca:	10 e0       	ldi	r17, 0x00	; 0
    29cc:	98 01       	movw	r18, r16
    29ce:	b9 01       	movw	r22, r18
    29d0:	a8 01       	movw	r20, r16
    29d2:	ce 01       	movw	r24, r28
    29d4:	8f 59       	subi	r24, 0x9F	; 159
    29d6:	9f 4f       	sbci	r25, 0xFF	; 255
    29d8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    29dc:	00 e0       	ldi	r16, 0x00	; 0
    29de:	10 e0       	ldi	r17, 0x00	; 0
    29e0:	98 01       	movw	r18, r16
    29e2:	b9 01       	movw	r22, r18
    29e4:	a8 01       	movw	r20, r16
    29e6:	ce 01       	movw	r24, r28
    29e8:	87 59       	subi	r24, 0x97	; 151
    29ea:	9f 4f       	sbci	r25, 0xFF	; 255
    29ec:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    29f0:	00 e0       	ldi	r16, 0x00	; 0
    29f2:	10 e0       	ldi	r17, 0x00	; 0
    29f4:	98 01       	movw	r18, r16
    29f6:	b9 01       	movw	r22, r18
    29f8:	a8 01       	movw	r20, r16
    29fa:	ce 01       	movw	r24, r28
    29fc:	8f 58       	subi	r24, 0x8F	; 143
    29fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2a00:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a04:	00 e0       	ldi	r16, 0x00	; 0
    2a06:	10 e0       	ldi	r17, 0x00	; 0
    2a08:	98 01       	movw	r18, r16
    2a0a:	b9 01       	movw	r22, r18
    2a0c:	a8 01       	movw	r20, r16
    2a0e:	ce 01       	movw	r24, r28
    2a10:	87 58       	subi	r24, 0x87	; 135
    2a12:	9f 4f       	sbci	r25, 0xFF	; 255
    2a14:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a18:	00 e0       	ldi	r16, 0x00	; 0
    2a1a:	10 e0       	ldi	r17, 0x00	; 0
    2a1c:	98 01       	movw	r18, r16
    2a1e:	b9 01       	movw	r22, r18
    2a20:	a8 01       	movw	r20, r16
    2a22:	ce 01       	movw	r24, r28
    2a24:	8f 57       	subi	r24, 0x7F	; 127
    2a26:	9f 4f       	sbci	r25, 0xFF	; 255
    2a28:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a2c:	00 e0       	ldi	r16, 0x00	; 0
    2a2e:	10 e0       	ldi	r17, 0x00	; 0
    2a30:	98 01       	movw	r18, r16
    2a32:	b9 01       	movw	r22, r18
    2a34:	a8 01       	movw	r20, r16
    2a36:	ce 01       	movw	r24, r28
    2a38:	87 57       	subi	r24, 0x77	; 119
    2a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a40:	00 e0       	ldi	r16, 0x00	; 0
    2a42:	10 e0       	ldi	r17, 0x00	; 0
    2a44:	98 01       	movw	r18, r16
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	60 e8       	ldi	r22, 0x80	; 128
    2a4c:	7f e3       	ldi	r23, 0x3F	; 63
    2a4e:	ce 01       	movw	r24, r28
    2a50:	8f 56       	subi	r24, 0x6F	; 111
    2a52:	9f 4f       	sbci	r25, 0xFF	; 255
    2a54:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a58:	00 e0       	ldi	r16, 0x00	; 0
    2a5a:	10 e0       	ldi	r17, 0x00	; 0
    2a5c:	98 01       	movw	r18, r16
    2a5e:	b9 01       	movw	r22, r18
    2a60:	a8 01       	movw	r20, r16
    2a62:	ce 01       	movw	r24, r28
    2a64:	87 56       	subi	r24, 0x67	; 103
    2a66:	9f 4f       	sbci	r25, 0xFF	; 255
    2a68:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a6c:	00 e0       	ldi	r16, 0x00	; 0
    2a6e:	10 e0       	ldi	r17, 0x00	; 0
    2a70:	98 01       	movw	r18, r16
    2a72:	b9 01       	movw	r22, r18
    2a74:	a8 01       	movw	r20, r16
    2a76:	ce 01       	movw	r24, r28
    2a78:	8f 55       	subi	r24, 0x5F	; 95
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a80:	00 e0       	ldi	r16, 0x00	; 0
    2a82:	10 e0       	ldi	r17, 0x00	; 0
    2a84:	98 01       	movw	r18, r16
    2a86:	b9 01       	movw	r22, r18
    2a88:	a8 01       	movw	r20, r16
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	87 55       	subi	r24, 0x57	; 87
    2a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a90:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2a94:	00 e0       	ldi	r16, 0x00	; 0
    2a96:	10 e0       	ldi	r17, 0x00	; 0
    2a98:	98 01       	movw	r18, r16
    2a9a:	b9 01       	movw	r22, r18
    2a9c:	a8 01       	movw	r20, r16
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	8f 54       	subi	r24, 0x4F	; 79
    2aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2aa8:	00 e0       	ldi	r16, 0x00	; 0
    2aaa:	10 e0       	ldi	r17, 0x00	; 0
    2aac:	98 01       	movw	r18, r16
    2aae:	b9 01       	movw	r22, r18
    2ab0:	a8 01       	movw	r20, r16
    2ab2:	ce 01       	movw	r24, r28
    2ab4:	87 54       	subi	r24, 0x47	; 71
    2ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2abc:	00 e0       	ldi	r16, 0x00	; 0
    2abe:	10 e0       	ldi	r17, 0x00	; 0
    2ac0:	98 01       	movw	r18, r16
    2ac2:	b9 01       	movw	r22, r18
    2ac4:	a8 01       	movw	r20, r16
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	8f 53       	subi	r24, 0x3F	; 63
    2aca:	9f 4f       	sbci	r25, 0xFF	; 255
    2acc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2ad0:	00 e0       	ldi	r16, 0x00	; 0
    2ad2:	10 e0       	ldi	r17, 0x00	; 0
    2ad4:	98 01       	movw	r18, r16
    2ad6:	b9 01       	movw	r22, r18
    2ad8:	a8 01       	movw	r20, r16
    2ada:	ce 01       	movw	r24, r28
    2adc:	87 53       	subi	r24, 0x37	; 55
    2ade:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2ae4:	00 e0       	ldi	r16, 0x00	; 0
    2ae6:	10 e0       	ldi	r17, 0x00	; 0
    2ae8:	98 01       	movw	r18, r16
    2aea:	b9 01       	movw	r22, r18
    2aec:	a8 01       	movw	r20, r16
    2aee:	ce 01       	movw	r24, r28
    2af0:	8f 52       	subi	r24, 0x2F	; 47
    2af2:	9f 4f       	sbci	r25, 0xFF	; 255
    2af4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2af8:	00 e0       	ldi	r16, 0x00	; 0
    2afa:	10 e0       	ldi	r17, 0x00	; 0
    2afc:	98 01       	movw	r18, r16
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	50 e0       	ldi	r21, 0x00	; 0
    2b02:	60 e8       	ldi	r22, 0x80	; 128
    2b04:	7f e3       	ldi	r23, 0x3F	; 63
    2b06:	ce 01       	movw	r24, r28
    2b08:	87 52       	subi	r24, 0x27	; 39
    2b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b10:	00 e0       	ldi	r16, 0x00	; 0
    2b12:	10 e0       	ldi	r17, 0x00	; 0
    2b14:	98 01       	movw	r18, r16
    2b16:	b9 01       	movw	r22, r18
    2b18:	a8 01       	movw	r20, r16
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	8f 51       	subi	r24, 0x1F	; 31
    2b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b20:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b24:	00 e0       	ldi	r16, 0x00	; 0
    2b26:	10 e0       	ldi	r17, 0x00	; 0
    2b28:	98 01       	movw	r18, r16
    2b2a:	b9 01       	movw	r22, r18
    2b2c:	a8 01       	movw	r20, r16
    2b2e:	ce 01       	movw	r24, r28
    2b30:	87 51       	subi	r24, 0x17	; 23
    2b32:	9f 4f       	sbci	r25, 0xFF	; 255
    2b34:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b38:	00 e0       	ldi	r16, 0x00	; 0
    2b3a:	10 e0       	ldi	r17, 0x00	; 0
    2b3c:	98 01       	movw	r18, r16
    2b3e:	b9 01       	movw	r22, r18
    2b40:	a8 01       	movw	r20, r16
    2b42:	ce 01       	movw	r24, r28
    2b44:	8f 50       	subi	r24, 0x0F	; 15
    2b46:	9f 4f       	sbci	r25, 0xFF	; 255
    2b48:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b4c:	00 e0       	ldi	r16, 0x00	; 0
    2b4e:	10 e0       	ldi	r17, 0x00	; 0
    2b50:	98 01       	movw	r18, r16
    2b52:	b9 01       	movw	r22, r18
    2b54:	a8 01       	movw	r20, r16
    2b56:	ce 01       	movw	r24, r28
    2b58:	87 50       	subi	r24, 0x07	; 7
    2b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b60:	00 e0       	ldi	r16, 0x00	; 0
    2b62:	10 e0       	ldi	r17, 0x00	; 0
    2b64:	98 01       	movw	r18, r16
    2b66:	b9 01       	movw	r22, r18
    2b68:	a8 01       	movw	r20, r16
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	8f 5f       	subi	r24, 0xFF	; 255
    2b6e:	9e 4f       	sbci	r25, 0xFE	; 254
    2b70:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b74:	00 e0       	ldi	r16, 0x00	; 0
    2b76:	10 e0       	ldi	r17, 0x00	; 0
    2b78:	98 01       	movw	r18, r16
    2b7a:	b9 01       	movw	r22, r18
    2b7c:	a8 01       	movw	r20, r16
    2b7e:	ce 01       	movw	r24, r28
    2b80:	87 5f       	subi	r24, 0xF7	; 247
    2b82:	9e 4f       	sbci	r25, 0xFE	; 254
    2b84:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b88:	00 e0       	ldi	r16, 0x00	; 0
    2b8a:	10 e0       	ldi	r17, 0x00	; 0
    2b8c:	98 01       	movw	r18, r16
    2b8e:	b9 01       	movw	r22, r18
    2b90:	a8 01       	movw	r20, r16
    2b92:	ce 01       	movw	r24, r28
    2b94:	8f 5e       	subi	r24, 0xEF	; 239
    2b96:	9e 4f       	sbci	r25, 0xFE	; 254
    2b98:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2b9c:	00 e0       	ldi	r16, 0x00	; 0
    2b9e:	10 e0       	ldi	r17, 0x00	; 0
    2ba0:	98 01       	movw	r18, r16
    2ba2:	b9 01       	movw	r22, r18
    2ba4:	a8 01       	movw	r20, r16
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	87 5e       	subi	r24, 0xE7	; 231
    2baa:	9e 4f       	sbci	r25, 0xFE	; 254
    2bac:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2bb0:	00 e0       	ldi	r16, 0x00	; 0
    2bb2:	10 e0       	ldi	r17, 0x00	; 0
    2bb4:	98 01       	movw	r18, r16
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	60 e8       	ldi	r22, 0x80	; 128
    2bbc:	7f e3       	ldi	r23, 0x3F	; 63
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	8f 5d       	subi	r24, 0xDF	; 223
    2bc2:	9e 4f       	sbci	r25, 0xFE	; 254
    2bc4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2bc8:	00 e0       	ldi	r16, 0x00	; 0
    2bca:	10 e0       	ldi	r17, 0x00	; 0
    2bcc:	98 01       	movw	r18, r16
    2bce:	b9 01       	movw	r22, r18
    2bd0:	a8 01       	movw	r20, r16
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	87 5d       	subi	r24, 0xD7	; 215
    2bd6:	9e 4f       	sbci	r25, 0xFE	; 254
    2bd8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2bdc:	00 e0       	ldi	r16, 0x00	; 0
    2bde:	10 e0       	ldi	r17, 0x00	; 0
    2be0:	98 01       	movw	r18, r16
    2be2:	b9 01       	movw	r22, r18
    2be4:	a8 01       	movw	r20, r16
    2be6:	ce 01       	movw	r24, r28
    2be8:	8f 5c       	subi	r24, 0xCF	; 207
    2bea:	9e 4f       	sbci	r25, 0xFE	; 254
    2bec:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2bf0:	00 e0       	ldi	r16, 0x00	; 0
    2bf2:	10 e0       	ldi	r17, 0x00	; 0
    2bf4:	98 01       	movw	r18, r16
    2bf6:	b9 01       	movw	r22, r18
    2bf8:	a8 01       	movw	r20, r16
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	87 5c       	subi	r24, 0xC7	; 199
    2bfe:	9e 4f       	sbci	r25, 0xFE	; 254
    2c00:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c04:	00 e0       	ldi	r16, 0x00	; 0
    2c06:	10 e0       	ldi	r17, 0x00	; 0
    2c08:	98 01       	movw	r18, r16
    2c0a:	b9 01       	movw	r22, r18
    2c0c:	a8 01       	movw	r20, r16
    2c0e:	ce 01       	movw	r24, r28
    2c10:	8f 5b       	subi	r24, 0xBF	; 191
    2c12:	9e 4f       	sbci	r25, 0xFE	; 254
    2c14:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c18:	00 e0       	ldi	r16, 0x00	; 0
    2c1a:	10 e0       	ldi	r17, 0x00	; 0
    2c1c:	98 01       	movw	r18, r16
    2c1e:	b9 01       	movw	r22, r18
    2c20:	a8 01       	movw	r20, r16
    2c22:	ce 01       	movw	r24, r28
    2c24:	87 5b       	subi	r24, 0xB7	; 183
    2c26:	9e 4f       	sbci	r25, 0xFE	; 254
    2c28:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c2c:	00 e0       	ldi	r16, 0x00	; 0
    2c2e:	10 e0       	ldi	r17, 0x00	; 0
    2c30:	98 01       	movw	r18, r16
    2c32:	b9 01       	movw	r22, r18
    2c34:	a8 01       	movw	r20, r16
    2c36:	ce 01       	movw	r24, r28
    2c38:	8f 5a       	subi	r24, 0xAF	; 175
    2c3a:	9e 4f       	sbci	r25, 0xFE	; 254
    2c3c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c40:	00 e0       	ldi	r16, 0x00	; 0
    2c42:	10 e0       	ldi	r17, 0x00	; 0
    2c44:	98 01       	movw	r18, r16
    2c46:	b9 01       	movw	r22, r18
    2c48:	a8 01       	movw	r20, r16
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	87 5a       	subi	r24, 0xA7	; 167
    2c4e:	9e 4f       	sbci	r25, 0xFE	; 254
    2c50:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c54:	00 e0       	ldi	r16, 0x00	; 0
    2c56:	10 e0       	ldi	r17, 0x00	; 0
    2c58:	98 01       	movw	r18, r16
    2c5a:	b9 01       	movw	r22, r18
    2c5c:	a8 01       	movw	r20, r16
    2c5e:	ce 01       	movw	r24, r28
    2c60:	8f 59       	subi	r24, 0x9F	; 159
    2c62:	9e 4f       	sbci	r25, 0xFE	; 254
    2c64:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c68:	00 e0       	ldi	r16, 0x00	; 0
    2c6a:	10 e0       	ldi	r17, 0x00	; 0
    2c6c:	98 01       	movw	r18, r16
    2c6e:	b9 01       	movw	r22, r18
    2c70:	a8 01       	movw	r20, r16
    2c72:	ce 01       	movw	r24, r28
    2c74:	87 59       	subi	r24, 0x97	; 151
    2c76:	9e 4f       	sbci	r25, 0xFE	; 254
    2c78:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c7c:	00 e0       	ldi	r16, 0x00	; 0
    2c7e:	10 e0       	ldi	r17, 0x00	; 0
    2c80:	98 01       	movw	r18, r16
    2c82:	40 e0       	ldi	r20, 0x00	; 0
    2c84:	50 e0       	ldi	r21, 0x00	; 0
    2c86:	60 e8       	ldi	r22, 0x80	; 128
    2c88:	7f e3       	ldi	r23, 0x3F	; 63
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	8f 58       	subi	r24, 0x8F	; 143
    2c8e:	9e 4f       	sbci	r25, 0xFE	; 254
    2c90:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2c94:	00 e0       	ldi	r16, 0x00	; 0
    2c96:	10 e0       	ldi	r17, 0x00	; 0
    2c98:	98 01       	movw	r18, r16
    2c9a:	b9 01       	movw	r22, r18
    2c9c:	a8 01       	movw	r20, r16
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	87 58       	subi	r24, 0x87	; 135
    2ca2:	9e 4f       	sbci	r25, 0xFE	; 254
    2ca4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2ca8:	00 e0       	ldi	r16, 0x00	; 0
    2caa:	10 e0       	ldi	r17, 0x00	; 0
    2cac:	98 01       	movw	r18, r16
    2cae:	b9 01       	movw	r22, r18
    2cb0:	a8 01       	movw	r20, r16
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	8f 57       	subi	r24, 0x7F	; 127
    2cb6:	9e 4f       	sbci	r25, 0xFE	; 254
    2cb8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2cbc:	00 e0       	ldi	r16, 0x00	; 0
    2cbe:	10 e0       	ldi	r17, 0x00	; 0
    2cc0:	98 01       	movw	r18, r16
    2cc2:	b9 01       	movw	r22, r18
    2cc4:	a8 01       	movw	r20, r16
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	87 57       	subi	r24, 0x77	; 119
    2cca:	9e 4f       	sbci	r25, 0xFE	; 254
    2ccc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2cd0:	00 e0       	ldi	r16, 0x00	; 0
    2cd2:	10 e0       	ldi	r17, 0x00	; 0
    2cd4:	98 01       	movw	r18, r16
    2cd6:	b9 01       	movw	r22, r18
    2cd8:	a8 01       	movw	r20, r16
    2cda:	ce 01       	movw	r24, r28
    2cdc:	8f 56       	subi	r24, 0x6F	; 111
    2cde:	9e 4f       	sbci	r25, 0xFE	; 254
    2ce0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2ce4:	00 e0       	ldi	r16, 0x00	; 0
    2ce6:	10 e0       	ldi	r17, 0x00	; 0
    2ce8:	98 01       	movw	r18, r16
    2cea:	b9 01       	movw	r22, r18
    2cec:	a8 01       	movw	r20, r16
    2cee:	ce 01       	movw	r24, r28
    2cf0:	87 56       	subi	r24, 0x67	; 103
    2cf2:	9e 4f       	sbci	r25, 0xFE	; 254
    2cf4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2cf8:	00 e0       	ldi	r16, 0x00	; 0
    2cfa:	10 e0       	ldi	r17, 0x00	; 0
    2cfc:	98 01       	movw	r18, r16
    2cfe:	b9 01       	movw	r22, r18
    2d00:	a8 01       	movw	r20, r16
    2d02:	ce 01       	movw	r24, r28
    2d04:	8f 55       	subi	r24, 0x5F	; 95
    2d06:	9e 4f       	sbci	r25, 0xFE	; 254
    2d08:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d0c:	00 e0       	ldi	r16, 0x00	; 0
    2d0e:	10 e0       	ldi	r17, 0x00	; 0
    2d10:	98 01       	movw	r18, r16
    2d12:	40 e0       	ldi	r20, 0x00	; 0
    2d14:	50 e0       	ldi	r21, 0x00	; 0
    2d16:	60 e8       	ldi	r22, 0x80	; 128
    2d18:	7f e3       	ldi	r23, 0x3F	; 63
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	87 55       	subi	r24, 0x57	; 87
    2d1e:	9e 4f       	sbci	r25, 0xFE	; 254
    2d20:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d24:	00 e0       	ldi	r16, 0x00	; 0
    2d26:	10 e0       	ldi	r17, 0x00	; 0
    2d28:	98 01       	movw	r18, r16
    2d2a:	b9 01       	movw	r22, r18
    2d2c:	a8 01       	movw	r20, r16
    2d2e:	ce 01       	movw	r24, r28
    2d30:	8f 54       	subi	r24, 0x4F	; 79
    2d32:	9e 4f       	sbci	r25, 0xFE	; 254
    2d34:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d38:	00 e0       	ldi	r16, 0x00	; 0
    2d3a:	10 e0       	ldi	r17, 0x00	; 0
    2d3c:	98 01       	movw	r18, r16
    2d3e:	b9 01       	movw	r22, r18
    2d40:	a8 01       	movw	r20, r16
    2d42:	ce 01       	movw	r24, r28
    2d44:	87 54       	subi	r24, 0x47	; 71
    2d46:	9e 4f       	sbci	r25, 0xFE	; 254
    2d48:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d4c:	00 e0       	ldi	r16, 0x00	; 0
    2d4e:	10 e0       	ldi	r17, 0x00	; 0
    2d50:	98 01       	movw	r18, r16
    2d52:	b9 01       	movw	r22, r18
    2d54:	a8 01       	movw	r20, r16
    2d56:	ce 01       	movw	r24, r28
    2d58:	8f 53       	subi	r24, 0x3F	; 63
    2d5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d5c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d60:	00 e0       	ldi	r16, 0x00	; 0
    2d62:	10 e0       	ldi	r17, 0x00	; 0
    2d64:	98 01       	movw	r18, r16
    2d66:	b9 01       	movw	r22, r18
    2d68:	a8 01       	movw	r20, r16
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	87 53       	subi	r24, 0x37	; 55
    2d6e:	9e 4f       	sbci	r25, 0xFE	; 254
    2d70:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d74:	00 e0       	ldi	r16, 0x00	; 0
    2d76:	10 e0       	ldi	r17, 0x00	; 0
    2d78:	98 01       	movw	r18, r16
    2d7a:	b9 01       	movw	r22, r18
    2d7c:	a8 01       	movw	r20, r16
    2d7e:	ce 01       	movw	r24, r28
    2d80:	8f 52       	subi	r24, 0x2F	; 47
    2d82:	9e 4f       	sbci	r25, 0xFE	; 254
    2d84:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d88:	00 e0       	ldi	r16, 0x00	; 0
    2d8a:	10 e0       	ldi	r17, 0x00	; 0
    2d8c:	98 01       	movw	r18, r16
    2d8e:	b9 01       	movw	r22, r18
    2d90:	a8 01       	movw	r20, r16
    2d92:	ce 01       	movw	r24, r28
    2d94:	87 52       	subi	r24, 0x27	; 39
    2d96:	9e 4f       	sbci	r25, 0xFE	; 254
    2d98:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2d9c:	00 e0       	ldi	r16, 0x00	; 0
    2d9e:	10 e0       	ldi	r17, 0x00	; 0
    2da0:	98 01       	movw	r18, r16
    2da2:	b9 01       	movw	r22, r18
    2da4:	a8 01       	movw	r20, r16
    2da6:	ce 01       	movw	r24, r28
    2da8:	8f 51       	subi	r24, 0x1F	; 31
    2daa:	9e 4f       	sbci	r25, 0xFE	; 254
    2dac:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2db0:	00 e0       	ldi	r16, 0x00	; 0
    2db2:	10 e0       	ldi	r17, 0x00	; 0
    2db4:	98 01       	movw	r18, r16
    2db6:	b9 01       	movw	r22, r18
    2db8:	a8 01       	movw	r20, r16
    2dba:	ce 01       	movw	r24, r28
    2dbc:	87 51       	subi	r24, 0x17	; 23
    2dbe:	9e 4f       	sbci	r25, 0xFE	; 254
    2dc0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2dc4:	00 e0       	ldi	r16, 0x00	; 0
    2dc6:	10 e0       	ldi	r17, 0x00	; 0
    2dc8:	98 01       	movw	r18, r16
    2dca:	b9 01       	movw	r22, r18
    2dcc:	a8 01       	movw	r20, r16
    2dce:	ce 01       	movw	r24, r28
    2dd0:	8f 50       	subi	r24, 0x0F	; 15
    2dd2:	9e 4f       	sbci	r25, 0xFE	; 254
    2dd4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2dd8:	00 e0       	ldi	r16, 0x00	; 0
    2dda:	10 e0       	ldi	r17, 0x00	; 0
    2ddc:	98 01       	movw	r18, r16
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	50 e0       	ldi	r21, 0x00	; 0
    2de2:	60 e8       	ldi	r22, 0x80	; 128
    2de4:	7f e3       	ldi	r23, 0x3F	; 63
    2de6:	ce 01       	movw	r24, r28
    2de8:	87 50       	subi	r24, 0x07	; 7
    2dea:	9e 4f       	sbci	r25, 0xFE	; 254
    2dec:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    2df0:	c9 5f       	subi	r28, 0xF9	; 249
    2df2:	dd 4f       	sbci	r29, 0xFD	; 253
    2df4:	79 82       	std	Y+1, r7	; 0x01
    2df6:	68 82       	st	Y, r6
    2df8:	c7 50       	subi	r28, 0x07	; 7
    2dfa:	d2 40       	sbci	r29, 0x02	; 2
    2dfc:	c7 5f       	subi	r28, 0xF7	; 247
    2dfe:	dd 4f       	sbci	r29, 0xFD	; 253
    2e00:	99 82       	std	Y+1, r9	; 0x01
    2e02:	88 82       	st	Y, r8
    2e04:	c9 50       	subi	r28, 0x09	; 9
    2e06:	d2 40       	sbci	r29, 0x02	; 2
    2e08:	c5 5f       	subi	r28, 0xF5	; 245
    2e0a:	dd 4f       	sbci	r29, 0xFD	; 253
    2e0c:	f9 82       	std	Y+1, r15	; 0x01
    2e0e:	e8 82       	st	Y, r14
    2e10:	cb 50       	subi	r28, 0x0B	; 11
    2e12:	d2 40       	sbci	r29, 0x02	; 2
    2e14:	cf 5f       	subi	r28, 0xFF	; 255
    2e16:	dd 4f       	sbci	r29, 0xFD	; 253
    2e18:	59 82       	std	Y+1, r5	; 0x01
    2e1a:	48 82       	st	Y, r4
    2e1c:	c1 50       	subi	r28, 0x01	; 1
    2e1e:	d2 40       	sbci	r29, 0x02	; 2
    2e20:	cd 5f       	subi	r28, 0xFD	; 253
    2e22:	dd 4f       	sbci	r29, 0xFD	; 253
    2e24:	39 82       	std	Y+1, r3	; 0x01
    2e26:	28 82       	st	Y, r2
    2e28:	c3 50       	subi	r28, 0x03	; 3
    2e2a:	d2 40       	sbci	r29, 0x02	; 2
    2e2c:	cb 5f       	subi	r28, 0xFB	; 251
    2e2e:	dd 4f       	sbci	r29, 0xFD	; 253
    2e30:	d9 82       	std	Y+1, r13	; 0x01
    2e32:	c8 82       	st	Y, r12
    2e34:	c5 50       	subi	r28, 0x05	; 5
    2e36:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),csw_matrix),QB_SIZE3);
    2e38:	9e 01       	movw	r18, r28
    2e3a:	2f 5f       	subi	r18, 0xFF	; 255
    2e3c:	3d 4f       	sbci	r19, 0xFD	; 253
    2e3e:	ae 01       	movw	r20, r28
    2e40:	49 5f       	subi	r20, 0xF9	; 249
    2e42:	5d 4f       	sbci	r21, 0xFD	; 253
    2e44:	63 e0       	ldi	r22, 0x03	; 3
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	c5 01       	movw	r24, r10
    2e4a:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    2e4e:	ae 01       	movw	r20, r28
    2e50:	4f 5f       	subi	r20, 0xFF	; 255
    2e52:	5f 4f       	sbci	r21, 0xFF	; 255
    2e54:	bc 01       	movw	r22, r24
    2e56:	c5 01       	movw	r24, r10
    2e58:	0e 94 4b 08 	call	0x1096	; 0x1096 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    2e5c:	43 e0       	ldi	r20, 0x03	; 3
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
    2e60:	bc 01       	movw	r22, r24
    2e62:	c5 01       	movw	r24, r10
    2e64:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    2e68:	c4 5f       	subi	r28, 0xF4	; 244
    2e6a:	dd 4f       	sbci	r29, 0xFD	; 253
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	1f 91       	pop	r17
    2e7c:	0f 91       	pop	r16
    2e7e:	ff 90       	pop	r15
    2e80:	ef 90       	pop	r14
    2e82:	df 90       	pop	r13
    2e84:	cf 90       	pop	r12
    2e86:	bf 90       	pop	r11
    2e88:	af 90       	pop	r10
    2e8a:	9f 90       	pop	r9
    2e8c:	8f 90       	pop	r8
    2e8e:	7f 90       	pop	r7
    2e90:	6f 90       	pop	r6
    2e92:	5f 90       	pop	r5
    2e94:	4f 90       	pop	r4
    2e96:	3f 90       	pop	r3
    2e98:	2f 90       	pop	r2
    2e9a:	08 95       	ret

00002e9c <_ZN5Gates3TOFEiiiiii>:
int * Gates::TOF(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3){
    2e9c:	2f 92       	push	r2
    2e9e:	3f 92       	push	r3
    2ea0:	4f 92       	push	r4
    2ea2:	5f 92       	push	r5
    2ea4:	6f 92       	push	r6
    2ea6:	7f 92       	push	r7
    2ea8:	8f 92       	push	r8
    2eaa:	9f 92       	push	r9
    2eac:	af 92       	push	r10
    2eae:	bf 92       	push	r11
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	cc 50       	subi	r28, 0x0C	; 12
    2ec6:	d2 40       	sbci	r29, 0x02	; 2
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	5c 01       	movw	r10, r24
    2ed4:	3b 01       	movw	r6, r22
    2ed6:	2a 01       	movw	r4, r20
    2ed8:	49 01       	movw	r8, r18
    2eda:	18 01       	movw	r2, r16
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    2edc:	00 e0       	ldi	r16, 0x00	; 0
    2ede:	10 e0       	ldi	r17, 0x00	; 0
    2ee0:	98 01       	movw	r18, r16
    2ee2:	40 e0       	ldi	r20, 0x00	; 0
    2ee4:	50 e0       	ldi	r21, 0x00	; 0
    2ee6:	60 e8       	ldi	r22, 0x80	; 128
    2ee8:	7f e3       	ldi	r23, 0x3F	; 63
    2eea:	ce 01       	movw	r24, r28
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2ef2:	00 e0       	ldi	r16, 0x00	; 0
    2ef4:	10 e0       	ldi	r17, 0x00	; 0
    2ef6:	98 01       	movw	r18, r16
    2ef8:	b9 01       	movw	r22, r18
    2efa:	a8 01       	movw	r20, r16
    2efc:	ce 01       	movw	r24, r28
    2efe:	09 96       	adiw	r24, 0x09	; 9
    2f00:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f04:	00 e0       	ldi	r16, 0x00	; 0
    2f06:	10 e0       	ldi	r17, 0x00	; 0
    2f08:	98 01       	movw	r18, r16
    2f0a:	b9 01       	movw	r22, r18
    2f0c:	a8 01       	movw	r20, r16
    2f0e:	ce 01       	movw	r24, r28
    2f10:	41 96       	adiw	r24, 0x11	; 17
    2f12:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f16:	00 e0       	ldi	r16, 0x00	; 0
    2f18:	10 e0       	ldi	r17, 0x00	; 0
    2f1a:	98 01       	movw	r18, r16
    2f1c:	b9 01       	movw	r22, r18
    2f1e:	a8 01       	movw	r20, r16
    2f20:	ce 01       	movw	r24, r28
    2f22:	49 96       	adiw	r24, 0x19	; 25
    2f24:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f28:	00 e0       	ldi	r16, 0x00	; 0
    2f2a:	10 e0       	ldi	r17, 0x00	; 0
    2f2c:	98 01       	movw	r18, r16
    2f2e:	b9 01       	movw	r22, r18
    2f30:	a8 01       	movw	r20, r16
    2f32:	ce 01       	movw	r24, r28
    2f34:	81 96       	adiw	r24, 0x21	; 33
    2f36:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f3a:	00 e0       	ldi	r16, 0x00	; 0
    2f3c:	10 e0       	ldi	r17, 0x00	; 0
    2f3e:	98 01       	movw	r18, r16
    2f40:	b9 01       	movw	r22, r18
    2f42:	a8 01       	movw	r20, r16
    2f44:	ce 01       	movw	r24, r28
    2f46:	89 96       	adiw	r24, 0x29	; 41
    2f48:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f4c:	00 e0       	ldi	r16, 0x00	; 0
    2f4e:	10 e0       	ldi	r17, 0x00	; 0
    2f50:	98 01       	movw	r18, r16
    2f52:	b9 01       	movw	r22, r18
    2f54:	a8 01       	movw	r20, r16
    2f56:	ce 01       	movw	r24, r28
    2f58:	c1 96       	adiw	r24, 0x31	; 49
    2f5a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f5e:	00 e0       	ldi	r16, 0x00	; 0
    2f60:	10 e0       	ldi	r17, 0x00	; 0
    2f62:	98 01       	movw	r18, r16
    2f64:	b9 01       	movw	r22, r18
    2f66:	a8 01       	movw	r20, r16
    2f68:	ce 01       	movw	r24, r28
    2f6a:	c9 96       	adiw	r24, 0x39	; 57
    2f6c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f70:	00 e0       	ldi	r16, 0x00	; 0
    2f72:	10 e0       	ldi	r17, 0x00	; 0
    2f74:	98 01       	movw	r18, r16
    2f76:	b9 01       	movw	r22, r18
    2f78:	a8 01       	movw	r20, r16
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	8f 5b       	subi	r24, 0xBF	; 191
    2f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f80:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f84:	00 e0       	ldi	r16, 0x00	; 0
    2f86:	10 e0       	ldi	r17, 0x00	; 0
    2f88:	98 01       	movw	r18, r16
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	60 e8       	ldi	r22, 0x80	; 128
    2f90:	7f e3       	ldi	r23, 0x3F	; 63
    2f92:	ce 01       	movw	r24, r28
    2f94:	87 5b       	subi	r24, 0xB7	; 183
    2f96:	9f 4f       	sbci	r25, 0xFF	; 255
    2f98:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2f9c:	00 e0       	ldi	r16, 0x00	; 0
    2f9e:	10 e0       	ldi	r17, 0x00	; 0
    2fa0:	98 01       	movw	r18, r16
    2fa2:	b9 01       	movw	r22, r18
    2fa4:	a8 01       	movw	r20, r16
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	8f 5a       	subi	r24, 0xAF	; 175
    2faa:	9f 4f       	sbci	r25, 0xFF	; 255
    2fac:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2fb0:	00 e0       	ldi	r16, 0x00	; 0
    2fb2:	10 e0       	ldi	r17, 0x00	; 0
    2fb4:	98 01       	movw	r18, r16
    2fb6:	b9 01       	movw	r22, r18
    2fb8:	a8 01       	movw	r20, r16
    2fba:	ce 01       	movw	r24, r28
    2fbc:	87 5a       	subi	r24, 0xA7	; 167
    2fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2fc4:	00 e0       	ldi	r16, 0x00	; 0
    2fc6:	10 e0       	ldi	r17, 0x00	; 0
    2fc8:	98 01       	movw	r18, r16
    2fca:	b9 01       	movw	r22, r18
    2fcc:	a8 01       	movw	r20, r16
    2fce:	ce 01       	movw	r24, r28
    2fd0:	8f 59       	subi	r24, 0x9F	; 159
    2fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2fd8:	00 e0       	ldi	r16, 0x00	; 0
    2fda:	10 e0       	ldi	r17, 0x00	; 0
    2fdc:	98 01       	movw	r18, r16
    2fde:	b9 01       	movw	r22, r18
    2fe0:	a8 01       	movw	r20, r16
    2fe2:	ce 01       	movw	r24, r28
    2fe4:	87 59       	subi	r24, 0x97	; 151
    2fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    2fec:	00 e0       	ldi	r16, 0x00	; 0
    2fee:	10 e0       	ldi	r17, 0x00	; 0
    2ff0:	98 01       	movw	r18, r16
    2ff2:	b9 01       	movw	r22, r18
    2ff4:	a8 01       	movw	r20, r16
    2ff6:	ce 01       	movw	r24, r28
    2ff8:	8f 58       	subi	r24, 0x8F	; 143
    2ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3000:	00 e0       	ldi	r16, 0x00	; 0
    3002:	10 e0       	ldi	r17, 0x00	; 0
    3004:	98 01       	movw	r18, r16
    3006:	b9 01       	movw	r22, r18
    3008:	a8 01       	movw	r20, r16
    300a:	ce 01       	movw	r24, r28
    300c:	87 58       	subi	r24, 0x87	; 135
    300e:	9f 4f       	sbci	r25, 0xFF	; 255
    3010:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3014:	00 e0       	ldi	r16, 0x00	; 0
    3016:	10 e0       	ldi	r17, 0x00	; 0
    3018:	98 01       	movw	r18, r16
    301a:	b9 01       	movw	r22, r18
    301c:	a8 01       	movw	r20, r16
    301e:	ce 01       	movw	r24, r28
    3020:	8f 57       	subi	r24, 0x7F	; 127
    3022:	9f 4f       	sbci	r25, 0xFF	; 255
    3024:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3028:	00 e0       	ldi	r16, 0x00	; 0
    302a:	10 e0       	ldi	r17, 0x00	; 0
    302c:	98 01       	movw	r18, r16
    302e:	b9 01       	movw	r22, r18
    3030:	a8 01       	movw	r20, r16
    3032:	ce 01       	movw	r24, r28
    3034:	87 57       	subi	r24, 0x77	; 119
    3036:	9f 4f       	sbci	r25, 0xFF	; 255
    3038:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    303c:	00 e0       	ldi	r16, 0x00	; 0
    303e:	10 e0       	ldi	r17, 0x00	; 0
    3040:	98 01       	movw	r18, r16
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	50 e0       	ldi	r21, 0x00	; 0
    3046:	60 e8       	ldi	r22, 0x80	; 128
    3048:	7f e3       	ldi	r23, 0x3F	; 63
    304a:	ce 01       	movw	r24, r28
    304c:	8f 56       	subi	r24, 0x6F	; 111
    304e:	9f 4f       	sbci	r25, 0xFF	; 255
    3050:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3054:	00 e0       	ldi	r16, 0x00	; 0
    3056:	10 e0       	ldi	r17, 0x00	; 0
    3058:	98 01       	movw	r18, r16
    305a:	b9 01       	movw	r22, r18
    305c:	a8 01       	movw	r20, r16
    305e:	ce 01       	movw	r24, r28
    3060:	87 56       	subi	r24, 0x67	; 103
    3062:	9f 4f       	sbci	r25, 0xFF	; 255
    3064:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3068:	00 e0       	ldi	r16, 0x00	; 0
    306a:	10 e0       	ldi	r17, 0x00	; 0
    306c:	98 01       	movw	r18, r16
    306e:	b9 01       	movw	r22, r18
    3070:	a8 01       	movw	r20, r16
    3072:	ce 01       	movw	r24, r28
    3074:	8f 55       	subi	r24, 0x5F	; 95
    3076:	9f 4f       	sbci	r25, 0xFF	; 255
    3078:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    307c:	00 e0       	ldi	r16, 0x00	; 0
    307e:	10 e0       	ldi	r17, 0x00	; 0
    3080:	98 01       	movw	r18, r16
    3082:	b9 01       	movw	r22, r18
    3084:	a8 01       	movw	r20, r16
    3086:	ce 01       	movw	r24, r28
    3088:	87 55       	subi	r24, 0x57	; 87
    308a:	9f 4f       	sbci	r25, 0xFF	; 255
    308c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3090:	00 e0       	ldi	r16, 0x00	; 0
    3092:	10 e0       	ldi	r17, 0x00	; 0
    3094:	98 01       	movw	r18, r16
    3096:	b9 01       	movw	r22, r18
    3098:	a8 01       	movw	r20, r16
    309a:	ce 01       	movw	r24, r28
    309c:	8f 54       	subi	r24, 0x4F	; 79
    309e:	9f 4f       	sbci	r25, 0xFF	; 255
    30a0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    30a4:	00 e0       	ldi	r16, 0x00	; 0
    30a6:	10 e0       	ldi	r17, 0x00	; 0
    30a8:	98 01       	movw	r18, r16
    30aa:	b9 01       	movw	r22, r18
    30ac:	a8 01       	movw	r20, r16
    30ae:	ce 01       	movw	r24, r28
    30b0:	87 54       	subi	r24, 0x47	; 71
    30b2:	9f 4f       	sbci	r25, 0xFF	; 255
    30b4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    30b8:	00 e0       	ldi	r16, 0x00	; 0
    30ba:	10 e0       	ldi	r17, 0x00	; 0
    30bc:	98 01       	movw	r18, r16
    30be:	b9 01       	movw	r22, r18
    30c0:	a8 01       	movw	r20, r16
    30c2:	ce 01       	movw	r24, r28
    30c4:	8f 53       	subi	r24, 0x3F	; 63
    30c6:	9f 4f       	sbci	r25, 0xFF	; 255
    30c8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    30cc:	00 e0       	ldi	r16, 0x00	; 0
    30ce:	10 e0       	ldi	r17, 0x00	; 0
    30d0:	98 01       	movw	r18, r16
    30d2:	b9 01       	movw	r22, r18
    30d4:	a8 01       	movw	r20, r16
    30d6:	ce 01       	movw	r24, r28
    30d8:	87 53       	subi	r24, 0x37	; 55
    30da:	9f 4f       	sbci	r25, 0xFF	; 255
    30dc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    30e0:	00 e0       	ldi	r16, 0x00	; 0
    30e2:	10 e0       	ldi	r17, 0x00	; 0
    30e4:	98 01       	movw	r18, r16
    30e6:	b9 01       	movw	r22, r18
    30e8:	a8 01       	movw	r20, r16
    30ea:	ce 01       	movw	r24, r28
    30ec:	8f 52       	subi	r24, 0x2F	; 47
    30ee:	9f 4f       	sbci	r25, 0xFF	; 255
    30f0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    30f4:	00 e0       	ldi	r16, 0x00	; 0
    30f6:	10 e0       	ldi	r17, 0x00	; 0
    30f8:	98 01       	movw	r18, r16
    30fa:	40 e0       	ldi	r20, 0x00	; 0
    30fc:	50 e0       	ldi	r21, 0x00	; 0
    30fe:	60 e8       	ldi	r22, 0x80	; 128
    3100:	7f e3       	ldi	r23, 0x3F	; 63
    3102:	ce 01       	movw	r24, r28
    3104:	87 52       	subi	r24, 0x27	; 39
    3106:	9f 4f       	sbci	r25, 0xFF	; 255
    3108:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    310c:	00 e0       	ldi	r16, 0x00	; 0
    310e:	10 e0       	ldi	r17, 0x00	; 0
    3110:	98 01       	movw	r18, r16
    3112:	b9 01       	movw	r22, r18
    3114:	a8 01       	movw	r20, r16
    3116:	ce 01       	movw	r24, r28
    3118:	8f 51       	subi	r24, 0x1F	; 31
    311a:	9f 4f       	sbci	r25, 0xFF	; 255
    311c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3120:	00 e0       	ldi	r16, 0x00	; 0
    3122:	10 e0       	ldi	r17, 0x00	; 0
    3124:	98 01       	movw	r18, r16
    3126:	b9 01       	movw	r22, r18
    3128:	a8 01       	movw	r20, r16
    312a:	ce 01       	movw	r24, r28
    312c:	87 51       	subi	r24, 0x17	; 23
    312e:	9f 4f       	sbci	r25, 0xFF	; 255
    3130:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3134:	00 e0       	ldi	r16, 0x00	; 0
    3136:	10 e0       	ldi	r17, 0x00	; 0
    3138:	98 01       	movw	r18, r16
    313a:	b9 01       	movw	r22, r18
    313c:	a8 01       	movw	r20, r16
    313e:	ce 01       	movw	r24, r28
    3140:	8f 50       	subi	r24, 0x0F	; 15
    3142:	9f 4f       	sbci	r25, 0xFF	; 255
    3144:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3148:	00 e0       	ldi	r16, 0x00	; 0
    314a:	10 e0       	ldi	r17, 0x00	; 0
    314c:	98 01       	movw	r18, r16
    314e:	b9 01       	movw	r22, r18
    3150:	a8 01       	movw	r20, r16
    3152:	ce 01       	movw	r24, r28
    3154:	87 50       	subi	r24, 0x07	; 7
    3156:	9f 4f       	sbci	r25, 0xFF	; 255
    3158:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    315c:	00 e0       	ldi	r16, 0x00	; 0
    315e:	10 e0       	ldi	r17, 0x00	; 0
    3160:	98 01       	movw	r18, r16
    3162:	b9 01       	movw	r22, r18
    3164:	a8 01       	movw	r20, r16
    3166:	ce 01       	movw	r24, r28
    3168:	8f 5f       	subi	r24, 0xFF	; 255
    316a:	9e 4f       	sbci	r25, 0xFE	; 254
    316c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3170:	00 e0       	ldi	r16, 0x00	; 0
    3172:	10 e0       	ldi	r17, 0x00	; 0
    3174:	98 01       	movw	r18, r16
    3176:	b9 01       	movw	r22, r18
    3178:	a8 01       	movw	r20, r16
    317a:	ce 01       	movw	r24, r28
    317c:	87 5f       	subi	r24, 0xF7	; 247
    317e:	9e 4f       	sbci	r25, 0xFE	; 254
    3180:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3184:	00 e0       	ldi	r16, 0x00	; 0
    3186:	10 e0       	ldi	r17, 0x00	; 0
    3188:	98 01       	movw	r18, r16
    318a:	b9 01       	movw	r22, r18
    318c:	a8 01       	movw	r20, r16
    318e:	ce 01       	movw	r24, r28
    3190:	8f 5e       	subi	r24, 0xEF	; 239
    3192:	9e 4f       	sbci	r25, 0xFE	; 254
    3194:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3198:	00 e0       	ldi	r16, 0x00	; 0
    319a:	10 e0       	ldi	r17, 0x00	; 0
    319c:	98 01       	movw	r18, r16
    319e:	b9 01       	movw	r22, r18
    31a0:	a8 01       	movw	r20, r16
    31a2:	ce 01       	movw	r24, r28
    31a4:	87 5e       	subi	r24, 0xE7	; 231
    31a6:	9e 4f       	sbci	r25, 0xFE	; 254
    31a8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    31ac:	00 e0       	ldi	r16, 0x00	; 0
    31ae:	10 e0       	ldi	r17, 0x00	; 0
    31b0:	98 01       	movw	r18, r16
    31b2:	40 e0       	ldi	r20, 0x00	; 0
    31b4:	50 e0       	ldi	r21, 0x00	; 0
    31b6:	60 e8       	ldi	r22, 0x80	; 128
    31b8:	7f e3       	ldi	r23, 0x3F	; 63
    31ba:	ce 01       	movw	r24, r28
    31bc:	8f 5d       	subi	r24, 0xDF	; 223
    31be:	9e 4f       	sbci	r25, 0xFE	; 254
    31c0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    31c4:	00 e0       	ldi	r16, 0x00	; 0
    31c6:	10 e0       	ldi	r17, 0x00	; 0
    31c8:	98 01       	movw	r18, r16
    31ca:	b9 01       	movw	r22, r18
    31cc:	a8 01       	movw	r20, r16
    31ce:	ce 01       	movw	r24, r28
    31d0:	87 5d       	subi	r24, 0xD7	; 215
    31d2:	9e 4f       	sbci	r25, 0xFE	; 254
    31d4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    31d8:	00 e0       	ldi	r16, 0x00	; 0
    31da:	10 e0       	ldi	r17, 0x00	; 0
    31dc:	98 01       	movw	r18, r16
    31de:	b9 01       	movw	r22, r18
    31e0:	a8 01       	movw	r20, r16
    31e2:	ce 01       	movw	r24, r28
    31e4:	8f 5c       	subi	r24, 0xCF	; 207
    31e6:	9e 4f       	sbci	r25, 0xFE	; 254
    31e8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    31ec:	00 e0       	ldi	r16, 0x00	; 0
    31ee:	10 e0       	ldi	r17, 0x00	; 0
    31f0:	98 01       	movw	r18, r16
    31f2:	b9 01       	movw	r22, r18
    31f4:	a8 01       	movw	r20, r16
    31f6:	ce 01       	movw	r24, r28
    31f8:	87 5c       	subi	r24, 0xC7	; 199
    31fa:	9e 4f       	sbci	r25, 0xFE	; 254
    31fc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3200:	00 e0       	ldi	r16, 0x00	; 0
    3202:	10 e0       	ldi	r17, 0x00	; 0
    3204:	98 01       	movw	r18, r16
    3206:	b9 01       	movw	r22, r18
    3208:	a8 01       	movw	r20, r16
    320a:	ce 01       	movw	r24, r28
    320c:	8f 5b       	subi	r24, 0xBF	; 191
    320e:	9e 4f       	sbci	r25, 0xFE	; 254
    3210:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3214:	00 e0       	ldi	r16, 0x00	; 0
    3216:	10 e0       	ldi	r17, 0x00	; 0
    3218:	98 01       	movw	r18, r16
    321a:	b9 01       	movw	r22, r18
    321c:	a8 01       	movw	r20, r16
    321e:	ce 01       	movw	r24, r28
    3220:	87 5b       	subi	r24, 0xB7	; 183
    3222:	9e 4f       	sbci	r25, 0xFE	; 254
    3224:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3228:	00 e0       	ldi	r16, 0x00	; 0
    322a:	10 e0       	ldi	r17, 0x00	; 0
    322c:	98 01       	movw	r18, r16
    322e:	b9 01       	movw	r22, r18
    3230:	a8 01       	movw	r20, r16
    3232:	ce 01       	movw	r24, r28
    3234:	8f 5a       	subi	r24, 0xAF	; 175
    3236:	9e 4f       	sbci	r25, 0xFE	; 254
    3238:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    323c:	00 e0       	ldi	r16, 0x00	; 0
    323e:	10 e0       	ldi	r17, 0x00	; 0
    3240:	98 01       	movw	r18, r16
    3242:	b9 01       	movw	r22, r18
    3244:	a8 01       	movw	r20, r16
    3246:	ce 01       	movw	r24, r28
    3248:	87 5a       	subi	r24, 0xA7	; 167
    324a:	9e 4f       	sbci	r25, 0xFE	; 254
    324c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3250:	00 e0       	ldi	r16, 0x00	; 0
    3252:	10 e0       	ldi	r17, 0x00	; 0
    3254:	98 01       	movw	r18, r16
    3256:	b9 01       	movw	r22, r18
    3258:	a8 01       	movw	r20, r16
    325a:	ce 01       	movw	r24, r28
    325c:	8f 59       	subi	r24, 0x9F	; 159
    325e:	9e 4f       	sbci	r25, 0xFE	; 254
    3260:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3264:	00 e0       	ldi	r16, 0x00	; 0
    3266:	10 e0       	ldi	r17, 0x00	; 0
    3268:	98 01       	movw	r18, r16
    326a:	40 e0       	ldi	r20, 0x00	; 0
    326c:	50 e0       	ldi	r21, 0x00	; 0
    326e:	60 e8       	ldi	r22, 0x80	; 128
    3270:	7f e3       	ldi	r23, 0x3F	; 63
    3272:	ce 01       	movw	r24, r28
    3274:	87 59       	subi	r24, 0x97	; 151
    3276:	9e 4f       	sbci	r25, 0xFE	; 254
    3278:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    327c:	00 e0       	ldi	r16, 0x00	; 0
    327e:	10 e0       	ldi	r17, 0x00	; 0
    3280:	98 01       	movw	r18, r16
    3282:	b9 01       	movw	r22, r18
    3284:	a8 01       	movw	r20, r16
    3286:	ce 01       	movw	r24, r28
    3288:	8f 58       	subi	r24, 0x8F	; 143
    328a:	9e 4f       	sbci	r25, 0xFE	; 254
    328c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3290:	00 e0       	ldi	r16, 0x00	; 0
    3292:	10 e0       	ldi	r17, 0x00	; 0
    3294:	98 01       	movw	r18, r16
    3296:	b9 01       	movw	r22, r18
    3298:	a8 01       	movw	r20, r16
    329a:	ce 01       	movw	r24, r28
    329c:	87 58       	subi	r24, 0x87	; 135
    329e:	9e 4f       	sbci	r25, 0xFE	; 254
    32a0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    32a4:	00 e0       	ldi	r16, 0x00	; 0
    32a6:	10 e0       	ldi	r17, 0x00	; 0
    32a8:	98 01       	movw	r18, r16
    32aa:	b9 01       	movw	r22, r18
    32ac:	a8 01       	movw	r20, r16
    32ae:	ce 01       	movw	r24, r28
    32b0:	8f 57       	subi	r24, 0x7F	; 127
    32b2:	9e 4f       	sbci	r25, 0xFE	; 254
    32b4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    32b8:	00 e0       	ldi	r16, 0x00	; 0
    32ba:	10 e0       	ldi	r17, 0x00	; 0
    32bc:	98 01       	movw	r18, r16
    32be:	b9 01       	movw	r22, r18
    32c0:	a8 01       	movw	r20, r16
    32c2:	ce 01       	movw	r24, r28
    32c4:	87 57       	subi	r24, 0x77	; 119
    32c6:	9e 4f       	sbci	r25, 0xFE	; 254
    32c8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    32cc:	00 e0       	ldi	r16, 0x00	; 0
    32ce:	10 e0       	ldi	r17, 0x00	; 0
    32d0:	98 01       	movw	r18, r16
    32d2:	b9 01       	movw	r22, r18
    32d4:	a8 01       	movw	r20, r16
    32d6:	ce 01       	movw	r24, r28
    32d8:	8f 56       	subi	r24, 0x6F	; 111
    32da:	9e 4f       	sbci	r25, 0xFE	; 254
    32dc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    32e0:	00 e0       	ldi	r16, 0x00	; 0
    32e2:	10 e0       	ldi	r17, 0x00	; 0
    32e4:	98 01       	movw	r18, r16
    32e6:	b9 01       	movw	r22, r18
    32e8:	a8 01       	movw	r20, r16
    32ea:	ce 01       	movw	r24, r28
    32ec:	87 56       	subi	r24, 0x67	; 103
    32ee:	9e 4f       	sbci	r25, 0xFE	; 254
    32f0:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    32f4:	00 e0       	ldi	r16, 0x00	; 0
    32f6:	10 e0       	ldi	r17, 0x00	; 0
    32f8:	98 01       	movw	r18, r16
    32fa:	b9 01       	movw	r22, r18
    32fc:	a8 01       	movw	r20, r16
    32fe:	ce 01       	movw	r24, r28
    3300:	8f 55       	subi	r24, 0x5F	; 95
    3302:	9e 4f       	sbci	r25, 0xFE	; 254
    3304:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3308:	00 e0       	ldi	r16, 0x00	; 0
    330a:	10 e0       	ldi	r17, 0x00	; 0
    330c:	98 01       	movw	r18, r16
    330e:	b9 01       	movw	r22, r18
    3310:	a8 01       	movw	r20, r16
    3312:	ce 01       	movw	r24, r28
    3314:	87 55       	subi	r24, 0x57	; 87
    3316:	9e 4f       	sbci	r25, 0xFE	; 254
    3318:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    331c:	00 e0       	ldi	r16, 0x00	; 0
    331e:	10 e0       	ldi	r17, 0x00	; 0
    3320:	98 01       	movw	r18, r16
    3322:	b9 01       	movw	r22, r18
    3324:	a8 01       	movw	r20, r16
    3326:	ce 01       	movw	r24, r28
    3328:	8f 54       	subi	r24, 0x4F	; 79
    332a:	9e 4f       	sbci	r25, 0xFE	; 254
    332c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3330:	00 e0       	ldi	r16, 0x00	; 0
    3332:	10 e0       	ldi	r17, 0x00	; 0
    3334:	98 01       	movw	r18, r16
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	50 e0       	ldi	r21, 0x00	; 0
    333a:	60 e8       	ldi	r22, 0x80	; 128
    333c:	7f e3       	ldi	r23, 0x3F	; 63
    333e:	ce 01       	movw	r24, r28
    3340:	87 54       	subi	r24, 0x47	; 71
    3342:	9e 4f       	sbci	r25, 0xFE	; 254
    3344:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3348:	00 e0       	ldi	r16, 0x00	; 0
    334a:	10 e0       	ldi	r17, 0x00	; 0
    334c:	98 01       	movw	r18, r16
    334e:	b9 01       	movw	r22, r18
    3350:	a8 01       	movw	r20, r16
    3352:	ce 01       	movw	r24, r28
    3354:	8f 53       	subi	r24, 0x3F	; 63
    3356:	9e 4f       	sbci	r25, 0xFE	; 254
    3358:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    335c:	00 e0       	ldi	r16, 0x00	; 0
    335e:	10 e0       	ldi	r17, 0x00	; 0
    3360:	98 01       	movw	r18, r16
    3362:	b9 01       	movw	r22, r18
    3364:	a8 01       	movw	r20, r16
    3366:	ce 01       	movw	r24, r28
    3368:	87 53       	subi	r24, 0x37	; 55
    336a:	9e 4f       	sbci	r25, 0xFE	; 254
    336c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3370:	00 e0       	ldi	r16, 0x00	; 0
    3372:	10 e0       	ldi	r17, 0x00	; 0
    3374:	98 01       	movw	r18, r16
    3376:	b9 01       	movw	r22, r18
    3378:	a8 01       	movw	r20, r16
    337a:	ce 01       	movw	r24, r28
    337c:	8f 52       	subi	r24, 0x2F	; 47
    337e:	9e 4f       	sbci	r25, 0xFE	; 254
    3380:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3384:	00 e0       	ldi	r16, 0x00	; 0
    3386:	10 e0       	ldi	r17, 0x00	; 0
    3388:	98 01       	movw	r18, r16
    338a:	b9 01       	movw	r22, r18
    338c:	a8 01       	movw	r20, r16
    338e:	ce 01       	movw	r24, r28
    3390:	87 52       	subi	r24, 0x27	; 39
    3392:	9e 4f       	sbci	r25, 0xFE	; 254
    3394:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3398:	00 e0       	ldi	r16, 0x00	; 0
    339a:	10 e0       	ldi	r17, 0x00	; 0
    339c:	98 01       	movw	r18, r16
    339e:	b9 01       	movw	r22, r18
    33a0:	a8 01       	movw	r20, r16
    33a2:	ce 01       	movw	r24, r28
    33a4:	8f 51       	subi	r24, 0x1F	; 31
    33a6:	9e 4f       	sbci	r25, 0xFE	; 254
    33a8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    33ac:	00 e0       	ldi	r16, 0x00	; 0
    33ae:	10 e0       	ldi	r17, 0x00	; 0
    33b0:	98 01       	movw	r18, r16
    33b2:	b9 01       	movw	r22, r18
    33b4:	a8 01       	movw	r20, r16
    33b6:	ce 01       	movw	r24, r28
    33b8:	87 51       	subi	r24, 0x17	; 23
    33ba:	9e 4f       	sbci	r25, 0xFE	; 254
    33bc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    33c0:	00 e0       	ldi	r16, 0x00	; 0
    33c2:	10 e0       	ldi	r17, 0x00	; 0
    33c4:	98 01       	movw	r18, r16
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	60 e8       	ldi	r22, 0x80	; 128
    33cc:	7f e3       	ldi	r23, 0x3F	; 63
    33ce:	ce 01       	movw	r24, r28
    33d0:	8f 50       	subi	r24, 0x0F	; 15
    33d2:	9e 4f       	sbci	r25, 0xFE	; 254
    33d4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    33d8:	00 e0       	ldi	r16, 0x00	; 0
    33da:	10 e0       	ldi	r17, 0x00	; 0
    33dc:	98 01       	movw	r18, r16
    33de:	b9 01       	movw	r22, r18
    33e0:	a8 01       	movw	r20, r16
    33e2:	ce 01       	movw	r24, r28
    33e4:	87 50       	subi	r24, 0x07	; 7
    33e6:	9e 4f       	sbci	r25, 0xFE	; 254
    33e8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    33ec:	c9 5f       	subi	r28, 0xF9	; 249
    33ee:	dd 4f       	sbci	r29, 0xFD	; 253
    33f0:	79 82       	std	Y+1, r7	; 0x01
    33f2:	68 82       	st	Y, r6
    33f4:	c7 50       	subi	r28, 0x07	; 7
    33f6:	d2 40       	sbci	r29, 0x02	; 2
    33f8:	c7 5f       	subi	r28, 0xF7	; 247
    33fa:	dd 4f       	sbci	r29, 0xFD	; 253
    33fc:	99 82       	std	Y+1, r9	; 0x01
    33fe:	88 82       	st	Y, r8
    3400:	c9 50       	subi	r28, 0x09	; 9
    3402:	d2 40       	sbci	r29, 0x02	; 2
    3404:	c5 5f       	subi	r28, 0xF5	; 245
    3406:	dd 4f       	sbci	r29, 0xFD	; 253
    3408:	f9 82       	std	Y+1, r15	; 0x01
    340a:	e8 82       	st	Y, r14
    340c:	cb 50       	subi	r28, 0x0B	; 11
    340e:	d2 40       	sbci	r29, 0x02	; 2
    3410:	cf 5f       	subi	r28, 0xFF	; 255
    3412:	dd 4f       	sbci	r29, 0xFD	; 253
    3414:	59 82       	std	Y+1, r5	; 0x01
    3416:	48 82       	st	Y, r4
    3418:	c1 50       	subi	r28, 0x01	; 1
    341a:	d2 40       	sbci	r29, 0x02	; 2
    341c:	cd 5f       	subi	r28, 0xFD	; 253
    341e:	dd 4f       	sbci	r29, 0xFD	; 253
    3420:	39 82       	std	Y+1, r3	; 0x01
    3422:	28 82       	st	Y, r2
    3424:	c3 50       	subi	r28, 0x03	; 3
    3426:	d2 40       	sbci	r29, 0x02	; 2
    3428:	cb 5f       	subi	r28, 0xFB	; 251
    342a:	dd 4f       	sbci	r29, 0xFD	; 253
    342c:	d9 82       	std	Y+1, r13	; 0x01
    342e:	c8 82       	st	Y, r12
    3430:	c5 50       	subi	r28, 0x05	; 5
    3432:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),tof_matrix),QB_SIZE3);
    3434:	9e 01       	movw	r18, r28
    3436:	2f 5f       	subi	r18, 0xFF	; 255
    3438:	3d 4f       	sbci	r19, 0xFD	; 253
    343a:	ae 01       	movw	r20, r28
    343c:	49 5f       	subi	r20, 0xF9	; 249
    343e:	5d 4f       	sbci	r21, 0xFD	; 253
    3440:	63 e0       	ldi	r22, 0x03	; 3
    3442:	70 e0       	ldi	r23, 0x00	; 0
    3444:	c5 01       	movw	r24, r10
    3446:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    344a:	ae 01       	movw	r20, r28
    344c:	4f 5f       	subi	r20, 0xFF	; 255
    344e:	5f 4f       	sbci	r21, 0xFF	; 255
    3450:	bc 01       	movw	r22, r24
    3452:	c5 01       	movw	r24, r10
    3454:	0e 94 4b 08 	call	0x1096	; 0x1096 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    3458:	43 e0       	ldi	r20, 0x03	; 3
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	bc 01       	movw	r22, r24
    345e:	c5 01       	movw	r24, r10
    3460:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
}
    3464:	c4 5f       	subi	r28, 0xF4	; 244
    3466:	dd 4f       	sbci	r29, 0xFD	; 253
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	df 91       	pop	r29
    3474:	cf 91       	pop	r28
    3476:	1f 91       	pop	r17
    3478:	0f 91       	pop	r16
    347a:	ff 90       	pop	r15
    347c:	ef 90       	pop	r14
    347e:	df 90       	pop	r13
    3480:	cf 90       	pop	r12
    3482:	bf 90       	pop	r11
    3484:	af 90       	pop	r10
    3486:	9f 90       	pop	r9
    3488:	8f 90       	pop	r8
    348a:	7f 90       	pop	r7
    348c:	6f 90       	pop	r6
    348e:	5f 90       	pop	r5
    3490:	4f 90       	pop	r4
    3492:	3f 90       	pop	r3
    3494:	2f 90       	pop	r2
    3496:	08 95       	ret

00003498 <_ZN5Gates3DEUEiiiiiii>:
int * Gates::DEU(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3,int delta){
    3498:	2f 92       	push	r2
    349a:	3f 92       	push	r3
    349c:	4f 92       	push	r4
    349e:	5f 92       	push	r5
    34a0:	6f 92       	push	r6
    34a2:	7f 92       	push	r7
    34a4:	8f 92       	push	r8
    34a6:	9f 92       	push	r9
    34a8:	af 92       	push	r10
    34aa:	bf 92       	push	r11
    34ac:	cf 92       	push	r12
    34ae:	df 92       	push	r13
    34b0:	ef 92       	push	r14
    34b2:	ff 92       	push	r15
    34b4:	0f 93       	push	r16
    34b6:	1f 93       	push	r17
    34b8:	cf 93       	push	r28
    34ba:	df 93       	push	r29
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	c4 51       	subi	r28, 0x14	; 20
    34c2:	d2 40       	sbci	r29, 0x02	; 2
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	c3 5f       	subi	r28, 0xF3	; 243
    34d0:	dd 4f       	sbci	r29, 0xFD	; 253
    34d2:	99 83       	std	Y+1, r25	; 0x01
    34d4:	88 83       	st	Y, r24
    34d6:	cd 50       	subi	r28, 0x0D	; 13
    34d8:	d2 40       	sbci	r29, 0x02	; 2
    34da:	2b 01       	movw	r4, r22
    34dc:	c1 5f       	subi	r28, 0xF1	; 241
    34de:	dd 4f       	sbci	r29, 0xFD	; 253
    34e0:	59 83       	std	Y+1, r21	; 0x01
    34e2:	48 83       	st	Y, r20
    34e4:	cf 50       	subi	r28, 0x0F	; 15
    34e6:	d2 40       	sbci	r29, 0x02	; 2
    34e8:	39 01       	movw	r6, r18
    34ea:	cf 5e       	subi	r28, 0xEF	; 239
    34ec:	dd 4f       	sbci	r29, 0xFD	; 253
    34ee:	19 83       	std	Y+1, r17	; 0x01
    34f0:	08 83       	st	Y, r16
    34f2:	c1 51       	subi	r28, 0x11	; 17
    34f4:	d2 40       	sbci	r29, 0x02	; 2
    34f6:	17 01       	movw	r2, r14
    34f8:	cd 5e       	subi	r28, 0xED	; 237
    34fa:	dd 4f       	sbci	r29, 0xFD	; 253
    34fc:	d9 82       	std	Y+1, r13	; 0x01
    34fe:	c8 82       	st	Y, r12
    3500:	c3 51       	subi	r28, 0x13	; 19
    3502:	d2 40       	sbci	r29, 0x02	; 2
	float delta_float=(delta*M_PI)/180;
    3504:	b5 01       	movw	r22, r10
    3506:	88 27       	eor	r24, r24
    3508:	77 fd       	sbrc	r23, 7
    350a:	80 95       	com	r24
    350c:	98 2f       	mov	r25, r24
    350e:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
    3512:	2b ed       	ldi	r18, 0xDB	; 219
    3514:	3f e0       	ldi	r19, 0x0F	; 15
    3516:	49 e4       	ldi	r20, 0x49	; 73
    3518:	50 e4       	ldi	r21, 0x40	; 64
    351a:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	44 e3       	ldi	r20, 0x34	; 52
    3524:	53 e4       	ldi	r21, 0x43	; 67
    3526:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
    352a:	4b 01       	movw	r8, r22
    352c:	5c 01       	movw	r10, r24
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    352e:	00 e0       	ldi	r16, 0x00	; 0
    3530:	10 e0       	ldi	r17, 0x00	; 0
    3532:	98 01       	movw	r18, r16
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	60 e8       	ldi	r22, 0x80	; 128
    353a:	7f e3       	ldi	r23, 0x3F	; 63
    353c:	ce 01       	movw	r24, r28
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3544:	00 e0       	ldi	r16, 0x00	; 0
    3546:	10 e0       	ldi	r17, 0x00	; 0
    3548:	98 01       	movw	r18, r16
    354a:	b9 01       	movw	r22, r18
    354c:	a8 01       	movw	r20, r16
    354e:	ce 01       	movw	r24, r28
    3550:	09 96       	adiw	r24, 0x09	; 9
    3552:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3556:	00 e0       	ldi	r16, 0x00	; 0
    3558:	10 e0       	ldi	r17, 0x00	; 0
    355a:	98 01       	movw	r18, r16
    355c:	b9 01       	movw	r22, r18
    355e:	a8 01       	movw	r20, r16
    3560:	ce 01       	movw	r24, r28
    3562:	41 96       	adiw	r24, 0x11	; 17
    3564:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3568:	00 e0       	ldi	r16, 0x00	; 0
    356a:	10 e0       	ldi	r17, 0x00	; 0
    356c:	98 01       	movw	r18, r16
    356e:	b9 01       	movw	r22, r18
    3570:	a8 01       	movw	r20, r16
    3572:	ce 01       	movw	r24, r28
    3574:	49 96       	adiw	r24, 0x19	; 25
    3576:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    357a:	00 e0       	ldi	r16, 0x00	; 0
    357c:	10 e0       	ldi	r17, 0x00	; 0
    357e:	98 01       	movw	r18, r16
    3580:	b9 01       	movw	r22, r18
    3582:	a8 01       	movw	r20, r16
    3584:	ce 01       	movw	r24, r28
    3586:	81 96       	adiw	r24, 0x21	; 33
    3588:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    358c:	00 e0       	ldi	r16, 0x00	; 0
    358e:	10 e0       	ldi	r17, 0x00	; 0
    3590:	98 01       	movw	r18, r16
    3592:	b9 01       	movw	r22, r18
    3594:	a8 01       	movw	r20, r16
    3596:	ce 01       	movw	r24, r28
    3598:	89 96       	adiw	r24, 0x29	; 41
    359a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    359e:	00 e0       	ldi	r16, 0x00	; 0
    35a0:	10 e0       	ldi	r17, 0x00	; 0
    35a2:	98 01       	movw	r18, r16
    35a4:	b9 01       	movw	r22, r18
    35a6:	a8 01       	movw	r20, r16
    35a8:	ce 01       	movw	r24, r28
    35aa:	c1 96       	adiw	r24, 0x31	; 49
    35ac:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    35b0:	00 e0       	ldi	r16, 0x00	; 0
    35b2:	10 e0       	ldi	r17, 0x00	; 0
    35b4:	98 01       	movw	r18, r16
    35b6:	b9 01       	movw	r22, r18
    35b8:	a8 01       	movw	r20, r16
    35ba:	ce 01       	movw	r24, r28
    35bc:	c9 96       	adiw	r24, 0x39	; 57
    35be:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    35c2:	00 e0       	ldi	r16, 0x00	; 0
    35c4:	10 e0       	ldi	r17, 0x00	; 0
    35c6:	98 01       	movw	r18, r16
    35c8:	b9 01       	movw	r22, r18
    35ca:	a8 01       	movw	r20, r16
    35cc:	ce 01       	movw	r24, r28
    35ce:	8f 5b       	subi	r24, 0xBF	; 191
    35d0:	9f 4f       	sbci	r25, 0xFF	; 255
    35d2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    35d6:	00 e0       	ldi	r16, 0x00	; 0
    35d8:	10 e0       	ldi	r17, 0x00	; 0
    35da:	98 01       	movw	r18, r16
    35dc:	40 e0       	ldi	r20, 0x00	; 0
    35de:	50 e0       	ldi	r21, 0x00	; 0
    35e0:	60 e8       	ldi	r22, 0x80	; 128
    35e2:	7f e3       	ldi	r23, 0x3F	; 63
    35e4:	ce 01       	movw	r24, r28
    35e6:	87 5b       	subi	r24, 0xB7	; 183
    35e8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ea:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    35ee:	00 e0       	ldi	r16, 0x00	; 0
    35f0:	10 e0       	ldi	r17, 0x00	; 0
    35f2:	98 01       	movw	r18, r16
    35f4:	b9 01       	movw	r22, r18
    35f6:	a8 01       	movw	r20, r16
    35f8:	ce 01       	movw	r24, r28
    35fa:	8f 5a       	subi	r24, 0xAF	; 175
    35fc:	9f 4f       	sbci	r25, 0xFF	; 255
    35fe:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3602:	00 e0       	ldi	r16, 0x00	; 0
    3604:	10 e0       	ldi	r17, 0x00	; 0
    3606:	98 01       	movw	r18, r16
    3608:	b9 01       	movw	r22, r18
    360a:	a8 01       	movw	r20, r16
    360c:	ce 01       	movw	r24, r28
    360e:	87 5a       	subi	r24, 0xA7	; 167
    3610:	9f 4f       	sbci	r25, 0xFF	; 255
    3612:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3616:	00 e0       	ldi	r16, 0x00	; 0
    3618:	10 e0       	ldi	r17, 0x00	; 0
    361a:	98 01       	movw	r18, r16
    361c:	b9 01       	movw	r22, r18
    361e:	a8 01       	movw	r20, r16
    3620:	ce 01       	movw	r24, r28
    3622:	8f 59       	subi	r24, 0x9F	; 159
    3624:	9f 4f       	sbci	r25, 0xFF	; 255
    3626:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    362a:	00 e0       	ldi	r16, 0x00	; 0
    362c:	10 e0       	ldi	r17, 0x00	; 0
    362e:	98 01       	movw	r18, r16
    3630:	b9 01       	movw	r22, r18
    3632:	a8 01       	movw	r20, r16
    3634:	ce 01       	movw	r24, r28
    3636:	87 59       	subi	r24, 0x97	; 151
    3638:	9f 4f       	sbci	r25, 0xFF	; 255
    363a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    363e:	00 e0       	ldi	r16, 0x00	; 0
    3640:	10 e0       	ldi	r17, 0x00	; 0
    3642:	98 01       	movw	r18, r16
    3644:	b9 01       	movw	r22, r18
    3646:	a8 01       	movw	r20, r16
    3648:	ce 01       	movw	r24, r28
    364a:	8f 58       	subi	r24, 0x8F	; 143
    364c:	9f 4f       	sbci	r25, 0xFF	; 255
    364e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3652:	00 e0       	ldi	r16, 0x00	; 0
    3654:	10 e0       	ldi	r17, 0x00	; 0
    3656:	98 01       	movw	r18, r16
    3658:	b9 01       	movw	r22, r18
    365a:	a8 01       	movw	r20, r16
    365c:	ce 01       	movw	r24, r28
    365e:	87 58       	subi	r24, 0x87	; 135
    3660:	9f 4f       	sbci	r25, 0xFF	; 255
    3662:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3666:	00 e0       	ldi	r16, 0x00	; 0
    3668:	10 e0       	ldi	r17, 0x00	; 0
    366a:	98 01       	movw	r18, r16
    366c:	b9 01       	movw	r22, r18
    366e:	a8 01       	movw	r20, r16
    3670:	ce 01       	movw	r24, r28
    3672:	8f 57       	subi	r24, 0x7F	; 127
    3674:	9f 4f       	sbci	r25, 0xFF	; 255
    3676:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    367a:	00 e0       	ldi	r16, 0x00	; 0
    367c:	10 e0       	ldi	r17, 0x00	; 0
    367e:	98 01       	movw	r18, r16
    3680:	b9 01       	movw	r22, r18
    3682:	a8 01       	movw	r20, r16
    3684:	ce 01       	movw	r24, r28
    3686:	87 57       	subi	r24, 0x77	; 119
    3688:	9f 4f       	sbci	r25, 0xFF	; 255
    368a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    368e:	00 e0       	ldi	r16, 0x00	; 0
    3690:	10 e0       	ldi	r17, 0x00	; 0
    3692:	98 01       	movw	r18, r16
    3694:	40 e0       	ldi	r20, 0x00	; 0
    3696:	50 e0       	ldi	r21, 0x00	; 0
    3698:	60 e8       	ldi	r22, 0x80	; 128
    369a:	7f e3       	ldi	r23, 0x3F	; 63
    369c:	ce 01       	movw	r24, r28
    369e:	8f 56       	subi	r24, 0x6F	; 111
    36a0:	9f 4f       	sbci	r25, 0xFF	; 255
    36a2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    36a6:	00 e0       	ldi	r16, 0x00	; 0
    36a8:	10 e0       	ldi	r17, 0x00	; 0
    36aa:	98 01       	movw	r18, r16
    36ac:	b9 01       	movw	r22, r18
    36ae:	a8 01       	movw	r20, r16
    36b0:	ce 01       	movw	r24, r28
    36b2:	87 56       	subi	r24, 0x67	; 103
    36b4:	9f 4f       	sbci	r25, 0xFF	; 255
    36b6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    36ba:	00 e0       	ldi	r16, 0x00	; 0
    36bc:	10 e0       	ldi	r17, 0x00	; 0
    36be:	98 01       	movw	r18, r16
    36c0:	b9 01       	movw	r22, r18
    36c2:	a8 01       	movw	r20, r16
    36c4:	ce 01       	movw	r24, r28
    36c6:	8f 55       	subi	r24, 0x5F	; 95
    36c8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ca:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    36ce:	00 e0       	ldi	r16, 0x00	; 0
    36d0:	10 e0       	ldi	r17, 0x00	; 0
    36d2:	98 01       	movw	r18, r16
    36d4:	b9 01       	movw	r22, r18
    36d6:	a8 01       	movw	r20, r16
    36d8:	ce 01       	movw	r24, r28
    36da:	87 55       	subi	r24, 0x57	; 87
    36dc:	9f 4f       	sbci	r25, 0xFF	; 255
    36de:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    36e2:	00 e0       	ldi	r16, 0x00	; 0
    36e4:	10 e0       	ldi	r17, 0x00	; 0
    36e6:	98 01       	movw	r18, r16
    36e8:	b9 01       	movw	r22, r18
    36ea:	a8 01       	movw	r20, r16
    36ec:	ce 01       	movw	r24, r28
    36ee:	8f 54       	subi	r24, 0x4F	; 79
    36f0:	9f 4f       	sbci	r25, 0xFF	; 255
    36f2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    36f6:	00 e0       	ldi	r16, 0x00	; 0
    36f8:	10 e0       	ldi	r17, 0x00	; 0
    36fa:	98 01       	movw	r18, r16
    36fc:	b9 01       	movw	r22, r18
    36fe:	a8 01       	movw	r20, r16
    3700:	ce 01       	movw	r24, r28
    3702:	87 54       	subi	r24, 0x47	; 71
    3704:	9f 4f       	sbci	r25, 0xFF	; 255
    3706:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    370a:	00 e0       	ldi	r16, 0x00	; 0
    370c:	10 e0       	ldi	r17, 0x00	; 0
    370e:	98 01       	movw	r18, r16
    3710:	b9 01       	movw	r22, r18
    3712:	a8 01       	movw	r20, r16
    3714:	ce 01       	movw	r24, r28
    3716:	8f 53       	subi	r24, 0x3F	; 63
    3718:	9f 4f       	sbci	r25, 0xFF	; 255
    371a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    371e:	00 e0       	ldi	r16, 0x00	; 0
    3720:	10 e0       	ldi	r17, 0x00	; 0
    3722:	98 01       	movw	r18, r16
    3724:	b9 01       	movw	r22, r18
    3726:	a8 01       	movw	r20, r16
    3728:	ce 01       	movw	r24, r28
    372a:	87 53       	subi	r24, 0x37	; 55
    372c:	9f 4f       	sbci	r25, 0xFF	; 255
    372e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3732:	00 e0       	ldi	r16, 0x00	; 0
    3734:	10 e0       	ldi	r17, 0x00	; 0
    3736:	98 01       	movw	r18, r16
    3738:	b9 01       	movw	r22, r18
    373a:	a8 01       	movw	r20, r16
    373c:	ce 01       	movw	r24, r28
    373e:	8f 52       	subi	r24, 0x2F	; 47
    3740:	9f 4f       	sbci	r25, 0xFF	; 255
    3742:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3746:	00 e0       	ldi	r16, 0x00	; 0
    3748:	10 e0       	ldi	r17, 0x00	; 0
    374a:	98 01       	movw	r18, r16
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	60 e8       	ldi	r22, 0x80	; 128
    3752:	7f e3       	ldi	r23, 0x3F	; 63
    3754:	ce 01       	movw	r24, r28
    3756:	87 52       	subi	r24, 0x27	; 39
    3758:	9f 4f       	sbci	r25, 0xFF	; 255
    375a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    375e:	00 e0       	ldi	r16, 0x00	; 0
    3760:	10 e0       	ldi	r17, 0x00	; 0
    3762:	98 01       	movw	r18, r16
    3764:	b9 01       	movw	r22, r18
    3766:	a8 01       	movw	r20, r16
    3768:	ce 01       	movw	r24, r28
    376a:	8f 51       	subi	r24, 0x1F	; 31
    376c:	9f 4f       	sbci	r25, 0xFF	; 255
    376e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3772:	00 e0       	ldi	r16, 0x00	; 0
    3774:	10 e0       	ldi	r17, 0x00	; 0
    3776:	98 01       	movw	r18, r16
    3778:	b9 01       	movw	r22, r18
    377a:	a8 01       	movw	r20, r16
    377c:	ce 01       	movw	r24, r28
    377e:	87 51       	subi	r24, 0x17	; 23
    3780:	9f 4f       	sbci	r25, 0xFF	; 255
    3782:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3786:	00 e0       	ldi	r16, 0x00	; 0
    3788:	10 e0       	ldi	r17, 0x00	; 0
    378a:	98 01       	movw	r18, r16
    378c:	b9 01       	movw	r22, r18
    378e:	a8 01       	movw	r20, r16
    3790:	ce 01       	movw	r24, r28
    3792:	8f 50       	subi	r24, 0x0F	; 15
    3794:	9f 4f       	sbci	r25, 0xFF	; 255
    3796:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    379a:	00 e0       	ldi	r16, 0x00	; 0
    379c:	10 e0       	ldi	r17, 0x00	; 0
    379e:	98 01       	movw	r18, r16
    37a0:	b9 01       	movw	r22, r18
    37a2:	a8 01       	movw	r20, r16
    37a4:	ce 01       	movw	r24, r28
    37a6:	87 50       	subi	r24, 0x07	; 7
    37a8:	9f 4f       	sbci	r25, 0xFF	; 255
    37aa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    37ae:	00 e0       	ldi	r16, 0x00	; 0
    37b0:	10 e0       	ldi	r17, 0x00	; 0
    37b2:	98 01       	movw	r18, r16
    37b4:	b9 01       	movw	r22, r18
    37b6:	a8 01       	movw	r20, r16
    37b8:	ce 01       	movw	r24, r28
    37ba:	8f 5f       	subi	r24, 0xFF	; 255
    37bc:	9e 4f       	sbci	r25, 0xFE	; 254
    37be:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    37c2:	00 e0       	ldi	r16, 0x00	; 0
    37c4:	10 e0       	ldi	r17, 0x00	; 0
    37c6:	98 01       	movw	r18, r16
    37c8:	b9 01       	movw	r22, r18
    37ca:	a8 01       	movw	r20, r16
    37cc:	ce 01       	movw	r24, r28
    37ce:	87 5f       	subi	r24, 0xF7	; 247
    37d0:	9e 4f       	sbci	r25, 0xFE	; 254
    37d2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    37d6:	00 e0       	ldi	r16, 0x00	; 0
    37d8:	10 e0       	ldi	r17, 0x00	; 0
    37da:	98 01       	movw	r18, r16
    37dc:	b9 01       	movw	r22, r18
    37de:	a8 01       	movw	r20, r16
    37e0:	ce 01       	movw	r24, r28
    37e2:	8f 5e       	subi	r24, 0xEF	; 239
    37e4:	9e 4f       	sbci	r25, 0xFE	; 254
    37e6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    37ea:	00 e0       	ldi	r16, 0x00	; 0
    37ec:	10 e0       	ldi	r17, 0x00	; 0
    37ee:	98 01       	movw	r18, r16
    37f0:	b9 01       	movw	r22, r18
    37f2:	a8 01       	movw	r20, r16
    37f4:	ce 01       	movw	r24, r28
    37f6:	87 5e       	subi	r24, 0xE7	; 231
    37f8:	9e 4f       	sbci	r25, 0xFE	; 254
    37fa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    37fe:	00 e0       	ldi	r16, 0x00	; 0
    3800:	10 e0       	ldi	r17, 0x00	; 0
    3802:	98 01       	movw	r18, r16
    3804:	40 e0       	ldi	r20, 0x00	; 0
    3806:	50 e0       	ldi	r21, 0x00	; 0
    3808:	60 e8       	ldi	r22, 0x80	; 128
    380a:	7f e3       	ldi	r23, 0x3F	; 63
    380c:	ce 01       	movw	r24, r28
    380e:	8f 5d       	subi	r24, 0xDF	; 223
    3810:	9e 4f       	sbci	r25, 0xFE	; 254
    3812:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3816:	00 e0       	ldi	r16, 0x00	; 0
    3818:	10 e0       	ldi	r17, 0x00	; 0
    381a:	98 01       	movw	r18, r16
    381c:	b9 01       	movw	r22, r18
    381e:	a8 01       	movw	r20, r16
    3820:	ce 01       	movw	r24, r28
    3822:	87 5d       	subi	r24, 0xD7	; 215
    3824:	9e 4f       	sbci	r25, 0xFE	; 254
    3826:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    382a:	00 e0       	ldi	r16, 0x00	; 0
    382c:	10 e0       	ldi	r17, 0x00	; 0
    382e:	98 01       	movw	r18, r16
    3830:	b9 01       	movw	r22, r18
    3832:	a8 01       	movw	r20, r16
    3834:	ce 01       	movw	r24, r28
    3836:	8f 5c       	subi	r24, 0xCF	; 207
    3838:	9e 4f       	sbci	r25, 0xFE	; 254
    383a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    383e:	00 e0       	ldi	r16, 0x00	; 0
    3840:	10 e0       	ldi	r17, 0x00	; 0
    3842:	98 01       	movw	r18, r16
    3844:	b9 01       	movw	r22, r18
    3846:	a8 01       	movw	r20, r16
    3848:	ce 01       	movw	r24, r28
    384a:	87 5c       	subi	r24, 0xC7	; 199
    384c:	9e 4f       	sbci	r25, 0xFE	; 254
    384e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3852:	00 e0       	ldi	r16, 0x00	; 0
    3854:	10 e0       	ldi	r17, 0x00	; 0
    3856:	98 01       	movw	r18, r16
    3858:	b9 01       	movw	r22, r18
    385a:	a8 01       	movw	r20, r16
    385c:	ce 01       	movw	r24, r28
    385e:	8f 5b       	subi	r24, 0xBF	; 191
    3860:	9e 4f       	sbci	r25, 0xFE	; 254
    3862:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3866:	00 e0       	ldi	r16, 0x00	; 0
    3868:	10 e0       	ldi	r17, 0x00	; 0
    386a:	98 01       	movw	r18, r16
    386c:	b9 01       	movw	r22, r18
    386e:	a8 01       	movw	r20, r16
    3870:	ce 01       	movw	r24, r28
    3872:	87 5b       	subi	r24, 0xB7	; 183
    3874:	9e 4f       	sbci	r25, 0xFE	; 254
    3876:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    387a:	00 e0       	ldi	r16, 0x00	; 0
    387c:	10 e0       	ldi	r17, 0x00	; 0
    387e:	98 01       	movw	r18, r16
    3880:	b9 01       	movw	r22, r18
    3882:	a8 01       	movw	r20, r16
    3884:	ce 01       	movw	r24, r28
    3886:	8f 5a       	subi	r24, 0xAF	; 175
    3888:	9e 4f       	sbci	r25, 0xFE	; 254
    388a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    388e:	00 e0       	ldi	r16, 0x00	; 0
    3890:	10 e0       	ldi	r17, 0x00	; 0
    3892:	98 01       	movw	r18, r16
    3894:	b9 01       	movw	r22, r18
    3896:	a8 01       	movw	r20, r16
    3898:	ce 01       	movw	r24, r28
    389a:	87 5a       	subi	r24, 0xA7	; 167
    389c:	9e 4f       	sbci	r25, 0xFE	; 254
    389e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    38a2:	00 e0       	ldi	r16, 0x00	; 0
    38a4:	10 e0       	ldi	r17, 0x00	; 0
    38a6:	98 01       	movw	r18, r16
    38a8:	b9 01       	movw	r22, r18
    38aa:	a8 01       	movw	r20, r16
    38ac:	ce 01       	movw	r24, r28
    38ae:	8f 59       	subi	r24, 0x9F	; 159
    38b0:	9e 4f       	sbci	r25, 0xFE	; 254
    38b2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    38b6:	00 e0       	ldi	r16, 0x00	; 0
    38b8:	10 e0       	ldi	r17, 0x00	; 0
    38ba:	98 01       	movw	r18, r16
    38bc:	40 e0       	ldi	r20, 0x00	; 0
    38be:	50 e0       	ldi	r21, 0x00	; 0
    38c0:	60 e8       	ldi	r22, 0x80	; 128
    38c2:	7f e3       	ldi	r23, 0x3F	; 63
    38c4:	ce 01       	movw	r24, r28
    38c6:	87 59       	subi	r24, 0x97	; 151
    38c8:	9e 4f       	sbci	r25, 0xFE	; 254
    38ca:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    38ce:	00 e0       	ldi	r16, 0x00	; 0
    38d0:	10 e0       	ldi	r17, 0x00	; 0
    38d2:	98 01       	movw	r18, r16
    38d4:	b9 01       	movw	r22, r18
    38d6:	a8 01       	movw	r20, r16
    38d8:	ce 01       	movw	r24, r28
    38da:	8f 58       	subi	r24, 0x8F	; 143
    38dc:	9e 4f       	sbci	r25, 0xFE	; 254
    38de:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    38e2:	00 e0       	ldi	r16, 0x00	; 0
    38e4:	10 e0       	ldi	r17, 0x00	; 0
    38e6:	98 01       	movw	r18, r16
    38e8:	b9 01       	movw	r22, r18
    38ea:	a8 01       	movw	r20, r16
    38ec:	ce 01       	movw	r24, r28
    38ee:	87 58       	subi	r24, 0x87	; 135
    38f0:	9e 4f       	sbci	r25, 0xFE	; 254
    38f2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    38f6:	00 e0       	ldi	r16, 0x00	; 0
    38f8:	10 e0       	ldi	r17, 0x00	; 0
    38fa:	98 01       	movw	r18, r16
    38fc:	b9 01       	movw	r22, r18
    38fe:	a8 01       	movw	r20, r16
    3900:	ce 01       	movw	r24, r28
    3902:	8f 57       	subi	r24, 0x7F	; 127
    3904:	9e 4f       	sbci	r25, 0xFE	; 254
    3906:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    390a:	00 e0       	ldi	r16, 0x00	; 0
    390c:	10 e0       	ldi	r17, 0x00	; 0
    390e:	98 01       	movw	r18, r16
    3910:	b9 01       	movw	r22, r18
    3912:	a8 01       	movw	r20, r16
    3914:	ce 01       	movw	r24, r28
    3916:	87 57       	subi	r24, 0x77	; 119
    3918:	9e 4f       	sbci	r25, 0xFE	; 254
    391a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    391e:	00 e0       	ldi	r16, 0x00	; 0
    3920:	10 e0       	ldi	r17, 0x00	; 0
    3922:	98 01       	movw	r18, r16
    3924:	b9 01       	movw	r22, r18
    3926:	a8 01       	movw	r20, r16
    3928:	ce 01       	movw	r24, r28
    392a:	8f 56       	subi	r24, 0x6F	; 111
    392c:	9e 4f       	sbci	r25, 0xFE	; 254
    392e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3932:	00 e0       	ldi	r16, 0x00	; 0
    3934:	10 e0       	ldi	r17, 0x00	; 0
    3936:	98 01       	movw	r18, r16
    3938:	b9 01       	movw	r22, r18
    393a:	a8 01       	movw	r20, r16
    393c:	ce 01       	movw	r24, r28
    393e:	87 56       	subi	r24, 0x67	; 103
    3940:	9e 4f       	sbci	r25, 0xFE	; 254
    3942:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3946:	00 e0       	ldi	r16, 0x00	; 0
    3948:	10 e0       	ldi	r17, 0x00	; 0
    394a:	98 01       	movw	r18, r16
    394c:	b9 01       	movw	r22, r18
    394e:	a8 01       	movw	r20, r16
    3950:	ce 01       	movw	r24, r28
    3952:	8f 55       	subi	r24, 0x5F	; 95
    3954:	9e 4f       	sbci	r25, 0xFE	; 254
    3956:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    395a:	00 e0       	ldi	r16, 0x00	; 0
    395c:	10 e0       	ldi	r17, 0x00	; 0
    395e:	98 01       	movw	r18, r16
    3960:	b9 01       	movw	r22, r18
    3962:	a8 01       	movw	r20, r16
    3964:	ce 01       	movw	r24, r28
    3966:	87 55       	subi	r24, 0x57	; 87
    3968:	9e 4f       	sbci	r25, 0xFE	; 254
    396a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
														  {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),               Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
    396e:	c5 01       	movw	r24, r10
    3970:	b4 01       	movw	r22, r8
    3972:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <cos>
    3976:	6b 01       	movw	r12, r22
    3978:	7c 01       	movw	r14, r24
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    397a:	8b 01       	movw	r16, r22
    397c:	9c 01       	movw	r18, r24
    397e:	40 e0       	ldi	r20, 0x00	; 0
    3980:	50 e0       	ldi	r21, 0x00	; 0
    3982:	ba 01       	movw	r22, r20
    3984:	ce 01       	movw	r24, r28
    3986:	8f 54       	subi	r24, 0x4F	; 79
    3988:	9e 4f       	sbci	r25, 0xFE	; 254
    398a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
														  {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),               Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
    398e:	c5 01       	movw	r24, r10
    3990:	b4 01       	movw	r22, r8
    3992:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sin>
    3996:	4b 01       	movw	r8, r22
    3998:	5c 01       	movw	r10, r24
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    399a:	00 e0       	ldi	r16, 0x00	; 0
    399c:	10 e0       	ldi	r17, 0x00	; 0
    399e:	98 01       	movw	r18, r16
    39a0:	ab 01       	movw	r20, r22
    39a2:	bc 01       	movw	r22, r24
    39a4:	ce 01       	movw	r24, r28
    39a6:	87 54       	subi	r24, 0x47	; 71
    39a8:	9e 4f       	sbci	r25, 0xFE	; 254
    39aa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    39ae:	00 e0       	ldi	r16, 0x00	; 0
    39b0:	10 e0       	ldi	r17, 0x00	; 0
    39b2:	98 01       	movw	r18, r16
    39b4:	b9 01       	movw	r22, r18
    39b6:	a8 01       	movw	r20, r16
    39b8:	ce 01       	movw	r24, r28
    39ba:	8f 53       	subi	r24, 0x3F	; 63
    39bc:	9e 4f       	sbci	r25, 0xFE	; 254
    39be:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    39c2:	00 e0       	ldi	r16, 0x00	; 0
    39c4:	10 e0       	ldi	r17, 0x00	; 0
    39c6:	98 01       	movw	r18, r16
    39c8:	b9 01       	movw	r22, r18
    39ca:	a8 01       	movw	r20, r16
    39cc:	ce 01       	movw	r24, r28
    39ce:	87 53       	subi	r24, 0x37	; 55
    39d0:	9e 4f       	sbci	r25, 0xFE	; 254
    39d2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    39d6:	00 e0       	ldi	r16, 0x00	; 0
    39d8:	10 e0       	ldi	r17, 0x00	; 0
    39da:	98 01       	movw	r18, r16
    39dc:	b9 01       	movw	r22, r18
    39de:	a8 01       	movw	r20, r16
    39e0:	ce 01       	movw	r24, r28
    39e2:	8f 52       	subi	r24, 0x2F	; 47
    39e4:	9e 4f       	sbci	r25, 0xFE	; 254
    39e6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    39ea:	00 e0       	ldi	r16, 0x00	; 0
    39ec:	10 e0       	ldi	r17, 0x00	; 0
    39ee:	98 01       	movw	r18, r16
    39f0:	b9 01       	movw	r22, r18
    39f2:	a8 01       	movw	r20, r16
    39f4:	ce 01       	movw	r24, r28
    39f6:	87 52       	subi	r24, 0x27	; 39
    39f8:	9e 4f       	sbci	r25, 0xFE	; 254
    39fa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    39fe:	00 e0       	ldi	r16, 0x00	; 0
    3a00:	10 e0       	ldi	r17, 0x00	; 0
    3a02:	98 01       	movw	r18, r16
    3a04:	b9 01       	movw	r22, r18
    3a06:	a8 01       	movw	r20, r16
    3a08:	ce 01       	movw	r24, r28
    3a0a:	8f 51       	subi	r24, 0x1F	; 31
    3a0c:	9e 4f       	sbci	r25, 0xFE	; 254
    3a0e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3a12:	00 e0       	ldi	r16, 0x00	; 0
    3a14:	10 e0       	ldi	r17, 0x00	; 0
    3a16:	98 01       	movw	r18, r16
    3a18:	b9 01       	movw	r22, r18
    3a1a:	a8 01       	movw	r20, r16
    3a1c:	ce 01       	movw	r24, r28
    3a1e:	87 51       	subi	r24, 0x17	; 23
    3a20:	9e 4f       	sbci	r25, 0xFE	; 254
    3a22:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3a26:	00 e0       	ldi	r16, 0x00	; 0
    3a28:	10 e0       	ldi	r17, 0x00	; 0
    3a2a:	98 01       	movw	r18, r16
    3a2c:	b5 01       	movw	r22, r10
    3a2e:	a4 01       	movw	r20, r8
    3a30:	ce 01       	movw	r24, r28
    3a32:	8f 50       	subi	r24, 0x0F	; 15
    3a34:	9e 4f       	sbci	r25, 0xFE	; 254
    3a36:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
    3a3a:	97 01       	movw	r18, r14
    3a3c:	86 01       	movw	r16, r12
    3a3e:	40 e0       	ldi	r20, 0x00	; 0
    3a40:	50 e0       	ldi	r21, 0x00	; 0
    3a42:	ba 01       	movw	r22, r20
    3a44:	ce 01       	movw	r24, r28
    3a46:	87 50       	subi	r24, 0x07	; 7
    3a48:	9e 4f       	sbci	r25, 0xFE	; 254
    3a4a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    3a4e:	c9 5f       	subi	r28, 0xF9	; 249
    3a50:	dd 4f       	sbci	r29, 0xFD	; 253
    3a52:	59 82       	std	Y+1, r5	; 0x01
    3a54:	48 82       	st	Y, r4
    3a56:	c7 50       	subi	r28, 0x07	; 7
    3a58:	d2 40       	sbci	r29, 0x02	; 2
    3a5a:	c7 5f       	subi	r28, 0xF7	; 247
    3a5c:	dd 4f       	sbci	r29, 0xFD	; 253
    3a5e:	79 82       	std	Y+1, r7	; 0x01
    3a60:	68 82       	st	Y, r6
    3a62:	c9 50       	subi	r28, 0x09	; 9
    3a64:	d2 40       	sbci	r29, 0x02	; 2
    3a66:	c5 5f       	subi	r28, 0xF5	; 245
    3a68:	dd 4f       	sbci	r29, 0xFD	; 253
    3a6a:	39 82       	std	Y+1, r3	; 0x01
    3a6c:	28 82       	st	Y, r2
    3a6e:	cb 50       	subi	r28, 0x0B	; 11
    3a70:	d2 40       	sbci	r29, 0x02	; 2
    3a72:	c1 5f       	subi	r28, 0xF1	; 241
    3a74:	dd 4f       	sbci	r29, 0xFD	; 253
    3a76:	88 81       	ld	r24, Y
    3a78:	99 81       	ldd	r25, Y+1	; 0x01
    3a7a:	cf 50       	subi	r28, 0x0F	; 15
    3a7c:	d2 40       	sbci	r29, 0x02	; 2
    3a7e:	cf 5f       	subi	r28, 0xFF	; 255
    3a80:	dd 4f       	sbci	r29, 0xFD	; 253
    3a82:	99 83       	std	Y+1, r25	; 0x01
    3a84:	88 83       	st	Y, r24
    3a86:	c1 50       	subi	r28, 0x01	; 1
    3a88:	d2 40       	sbci	r29, 0x02	; 2
    3a8a:	cf 5e       	subi	r28, 0xEF	; 239
    3a8c:	dd 4f       	sbci	r29, 0xFD	; 253
    3a8e:	88 81       	ld	r24, Y
    3a90:	99 81       	ldd	r25, Y+1	; 0x01
    3a92:	c1 51       	subi	r28, 0x11	; 17
    3a94:	d2 40       	sbci	r29, 0x02	; 2
    3a96:	cd 5f       	subi	r28, 0xFD	; 253
    3a98:	dd 4f       	sbci	r29, 0xFD	; 253
    3a9a:	99 83       	std	Y+1, r25	; 0x01
    3a9c:	88 83       	st	Y, r24
    3a9e:	c3 50       	subi	r28, 0x03	; 3
    3aa0:	d2 40       	sbci	r29, 0x02	; 2
    3aa2:	cd 5e       	subi	r28, 0xED	; 237
    3aa4:	dd 4f       	sbci	r29, 0xFD	; 253
    3aa6:	88 81       	ld	r24, Y
    3aa8:	99 81       	ldd	r25, Y+1	; 0x01
    3aaa:	c3 51       	subi	r28, 0x13	; 19
    3aac:	d2 40       	sbci	r29, 0x02	; 2
    3aae:	cb 5f       	subi	r28, 0xFB	; 251
    3ab0:	dd 4f       	sbci	r29, 0xFD	; 253
    3ab2:	99 83       	std	Y+1, r25	; 0x01
    3ab4:	88 83       	st	Y, r24
    3ab6:	c5 50       	subi	r28, 0x05	; 5
    3ab8:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),deu_matrix),QB_SIZE3);	
    3aba:	9e 01       	movw	r18, r28
    3abc:	2f 5f       	subi	r18, 0xFF	; 255
    3abe:	3d 4f       	sbci	r19, 0xFD	; 253
    3ac0:	ae 01       	movw	r20, r28
    3ac2:	49 5f       	subi	r20, 0xF9	; 249
    3ac4:	5d 4f       	sbci	r21, 0xFD	; 253
    3ac6:	63 e0       	ldi	r22, 0x03	; 3
    3ac8:	70 e0       	ldi	r23, 0x00	; 0
    3aca:	c3 5f       	subi	r28, 0xF3	; 243
    3acc:	dd 4f       	sbci	r29, 0xFD	; 253
    3ace:	88 81       	ld	r24, Y
    3ad0:	99 81       	ldd	r25, Y+1	; 0x01
    3ad2:	cd 50       	subi	r28, 0x0D	; 13
    3ad4:	d2 40       	sbci	r29, 0x02	; 2
    3ad6:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_>
    3ada:	ae 01       	movw	r20, r28
    3adc:	4f 5f       	subi	r20, 0xFF	; 255
    3ade:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	c3 5f       	subi	r28, 0xF3	; 243
    3ae4:	dd 4f       	sbci	r29, 0xFD	; 253
    3ae6:	88 81       	ld	r24, Y
    3ae8:	99 81       	ldd	r25, Y+1	; 0x01
    3aea:	cd 50       	subi	r28, 0x0D	; 13
    3aec:	d2 40       	sbci	r29, 0x02	; 2
    3aee:	0e 94 4b 08 	call	0x1096	; 0x1096 <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    3af2:	43 e0       	ldi	r20, 0x03	; 3
    3af4:	50 e0       	ldi	r21, 0x00	; 0
    3af6:	bc 01       	movw	r22, r24
    3af8:	c3 5f       	subi	r28, 0xF3	; 243
    3afa:	dd 4f       	sbci	r29, 0xFD	; 253
    3afc:	88 81       	ld	r24, Y
    3afe:	99 81       	ldd	r25, Y+1	; 0x01
    3b00:	cd 50       	subi	r28, 0x0D	; 13
    3b02:	d2 40       	sbci	r29, 0x02	; 2
    3b04:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN5Gates8vec2amplEP7Complexi>
    3b08:	cc 5e       	subi	r28, 0xEC	; 236
    3b0a:	dd 4f       	sbci	r29, 0xFD	; 253
    3b0c:	0f b6       	in	r0, 0x3f	; 63
    3b0e:	f8 94       	cli
    3b10:	de bf       	out	0x3e, r29	; 62
    3b12:	0f be       	out	0x3f, r0	; 63
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	df 91       	pop	r29
    3b18:	cf 91       	pop	r28
    3b1a:	1f 91       	pop	r17
    3b1c:	0f 91       	pop	r16
    3b1e:	ff 90       	pop	r15
    3b20:	ef 90       	pop	r14
    3b22:	df 90       	pop	r13
    3b24:	cf 90       	pop	r12
    3b26:	bf 90       	pop	r11
    3b28:	af 90       	pop	r10
    3b2a:	9f 90       	pop	r9
    3b2c:	8f 90       	pop	r8
    3b2e:	7f 90       	pop	r7
    3b30:	6f 90       	pop	r6
    3b32:	5f 90       	pop	r5
    3b34:	4f 90       	pop	r4
    3b36:	3f 90       	pop	r3
    3b38:	2f 90       	pop	r2
    3b3a:	08 95       	ret

00003b3c <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){}

/*TO DELETE LATER (BEGIN) */
Serial s;
    3b3c:	87 ef       	ldi	r24, 0xF7	; 247
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <_ZN6SerialC1Ev>
    3b44:	08 95       	ret

00003b46 <_ZN4QEPU13interrupt_cpuEi>:
#include "qepu.h"

void QEPU::interrupt_cpu(int interrupt_type){
    3b46:	5f 92       	push	r5
    3b48:	6f 92       	push	r6
    3b4a:	7f 92       	push	r7
    3b4c:	8f 92       	push	r8
    3b4e:	9f 92       	push	r9
    3b50:	af 92       	push	r10
    3b52:	bf 92       	push	r11
    3b54:	cf 92       	push	r12
    3b56:	df 92       	push	r13
    3b58:	ef 92       	push	r14
    3b5a:	ff 92       	push	r15
    3b5c:	0f 93       	push	r16
    3b5e:	1f 93       	push	r17
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	6c 01       	movw	r12, r24
    3b66:	4b 01       	movw	r8, r22
	//NEEDS RESERVED REGISTERS USED FOR ADDRESS POINTING -> ADDRESS SHOULD POINT TO A REGISTER ADDRESS,NOT SRAM
	//NEEDS RESERVED REGISTERS USED FOR DATA SAVING -> SHOULD SAVE ON A REGISTER,NOT SRAM
	int address_pointer_offset=0;
    3b68:	c0 e0       	ldi	r28, 0x00	; 0
    3b6a:	d0 e0       	ldi	r29, 0x00	; 0
	while(!interrupt_signal){
    3b6c:	8c 01       	movw	r16, r24
    3b6e:	06 52       	subi	r16, 0x26	; 38
    3b70:	1f 4f       	sbci	r17, 0xFF	; 255
					sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_echo);
					interrupt_done();
				}
				break;
			case INT_UART_IN_BUFF_NO_ECHO:{
					int char_noecho=serial.read();
    3b72:	7c 01       	movw	r14, r24
    3b74:	8f ef       	ldi	r24, 0xFF	; 255
    3b76:	e8 1a       	sub	r14, r24
    3b78:	f8 0a       	sbc	r15, r24
						interrupt_done();
						sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,STRING_TERMINATOR);
					}else
						if(char_noecho==0x8 && address_pointer_offset>0) address_pointer_offset--;
						else{
							sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_noecho);
    3b7a:	56 01       	movw	r10, r12
    3b7c:	e3 e0       	ldi	r30, 0x03	; 3
    3b7e:	ae 0e       	add	r10, r30
    3b80:	b1 1c       	adc	r11, r1
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3b82:	55 24       	eor	r5, r5
    3b84:	53 94       	inc	r5

void QEPU::interrupt_cpu(int interrupt_type){
	//NEEDS RESERVED REGISTERS USED FOR ADDRESS POINTING -> ADDRESS SHOULD POINT TO A REGISTER ADDRESS,NOT SRAM
	//NEEDS RESERVED REGISTERS USED FOR DATA SAVING -> SHOULD SAVE ON A REGISTER,NOT SRAM
	int address_pointer_offset=0;
	while(!interrupt_signal){
    3b86:	cf c0       	rjmp	.+414    	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
		switch(interrupt_type){
    3b88:	f2 e0       	ldi	r31, 0x02	; 2
    3b8a:	8f 16       	cp	r8, r31
    3b8c:	91 04       	cpc	r9, r1
    3b8e:	e1 f1       	breq	.+120    	; 0x3c08 <_ZN4QEPU13interrupt_cpuEi+0xc2>
    3b90:	44 f4       	brge	.+16     	; 0x3ba2 <_ZN4QEPU13interrupt_cpuEi+0x5c>
    3b92:	81 14       	cp	r8, r1
    3b94:	91 04       	cpc	r9, r1
    3b96:	91 f0       	breq	.+36     	; 0x3bbc <_ZN4QEPU13interrupt_cpuEi+0x76>
    3b98:	e1 e0       	ldi	r30, 0x01	; 1
    3b9a:	8e 16       	cp	r8, r30
    3b9c:	91 04       	cpc	r9, r1
    3b9e:	f1 f0       	breq	.+60     	; 0x3bdc <_ZN4QEPU13interrupt_cpuEi+0x96>
    3ba0:	f3 cf       	rjmp	.-26     	; 0x3b88 <_ZN4QEPU13interrupt_cpuEi+0x42>
    3ba2:	f4 e0       	ldi	r31, 0x04	; 4
    3ba4:	8f 16       	cp	r8, r31
    3ba6:	91 04       	cpc	r9, r1
    3ba8:	09 f4       	brne	.+2      	; 0x3bac <_ZN4QEPU13interrupt_cpuEi+0x66>
    3baa:	5a c0       	rjmp	.+180    	; 0x3c60 <_ZN4QEPU13interrupt_cpuEi+0x11a>
    3bac:	0c f4       	brge	.+2      	; 0x3bb0 <_ZN4QEPU13interrupt_cpuEi+0x6a>
    3bae:	40 c0       	rjmp	.+128    	; 0x3c30 <_ZN4QEPU13interrupt_cpuEi+0xea>
    3bb0:	e5 e0       	ldi	r30, 0x05	; 5
    3bb2:	8e 16       	cp	r8, r30
    3bb4:	91 04       	cpc	r9, r1
    3bb6:	09 f4       	brne	.+2      	; 0x3bba <_ZN4QEPU13interrupt_cpuEi+0x74>
    3bb8:	83 c0       	rjmp	.+262    	; 0x3cc0 <_ZN4QEPU13interrupt_cpuEi+0x17a>
    3bba:	e6 cf       	rjmp	.-52     	; 0x3b88 <_ZN4QEPU13interrupt_cpuEi+0x42>
			case INT_UART_OUT_CHAR:
				serial.write(sram.read(fetch_register(INT_RESERVED_ADDRESSPOINTER)));
    3bbc:	60 e0       	ldi	r22, 0x00	; 0
    3bbe:	70 e0       	ldi	r23, 0x00	; 0
    3bc0:	c6 01       	movw	r24, r12
    3bc2:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    3bc6:	bc 01       	movw	r22, r24
    3bc8:	c5 01       	movw	r24, r10
    3bca:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    3bce:	68 2f       	mov	r22, r24
    3bd0:	c7 01       	movw	r24, r14
    3bd2:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <_ZN6Serial5writeEc>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3bd6:	f8 01       	movw	r30, r16
    3bd8:	50 82       	st	Z, r5
    3bda:	a5 c0       	rjmp	.+330    	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
				serial.write(sram.read(fetch_register(INT_RESERVED_ADDRESSPOINTER)));
				interrupt_done();
				break;
			case INT_UART_OUT_BUFFER:
				{
					int data_read=sram.read(fetch_register(INT_RESERVED_ADDRESSPOINTER)+address_pointer_offset);
    3bdc:	60 e0       	ldi	r22, 0x00	; 0
    3bde:	70 e0       	ldi	r23, 0x00	; 0
    3be0:	c6 01       	movw	r24, r12
    3be2:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    3be6:	bc 01       	movw	r22, r24
    3be8:	6c 0f       	add	r22, r28
    3bea:	7d 1f       	adc	r23, r29
    3bec:	c5 01       	movw	r24, r10
    3bee:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
					if(data_read==STRING_TERMINATOR) interrupt_done();
    3bf2:	84 32       	cpi	r24, 0x24	; 36
    3bf4:	19 f4       	brne	.+6      	; 0x3bfc <_ZN4QEPU13interrupt_cpuEi+0xb6>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3bf6:	f8 01       	movw	r30, r16
    3bf8:	50 82       	st	Z, r5
    3bfa:	95 c0       	rjmp	.+298    	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
			case INT_UART_OUT_BUFFER:
				{
					int data_read=sram.read(fetch_register(INT_RESERVED_ADDRESSPOINTER)+address_pointer_offset);
					if(data_read==STRING_TERMINATOR) interrupt_done();
					else{
						serial.write(data_read);
    3bfc:	68 2f       	mov	r22, r24
    3bfe:	c7 01       	movw	r24, r14
    3c00:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <_ZN6Serial5writeEc>
						address_pointer_offset++;
    3c04:	21 96       	adiw	r28, 0x01	; 1
    3c06:	8f c0       	rjmp	.+286    	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
					}
				}
				break;
			case INT_UART_IN_CHAR_NO_ECHO:
				sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,serial.read());
    3c08:	c7 01       	movw	r24, r14
    3c0a:	0e 94 6a 2e 	call	0x5cd4	; 0x5cd4 <_ZN6Serial4readEv>
    3c0e:	78 2e       	mov	r7, r24
    3c10:	61 e0       	ldi	r22, 0x01	; 1
    3c12:	70 e0       	ldi	r23, 0x00	; 0
    3c14:	c6 01       	movw	r24, r12
    3c16:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    3c1a:	47 2d       	mov	r20, r7
    3c1c:	50 e0       	ldi	r21, 0x00	; 0
    3c1e:	bc 01       	movw	r22, r24
    3c20:	6c 0f       	add	r22, r28
    3c22:	7d 1f       	adc	r23, r29
    3c24:	c5 01       	movw	r24, r10
    3c26:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3c2a:	f8 01       	movw	r30, r16
    3c2c:	50 82       	st	Z, r5
    3c2e:	7b c0       	rjmp	.+246    	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
			case INT_UART_IN_CHAR_NO_ECHO:
				sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,serial.read());
				interrupt_done();
				break;
			case INT_UART_IN_CHAR_ECHO:{
					int char_echo=serial.read();
    3c30:	c7 01       	movw	r24, r14
    3c32:	0e 94 6a 2e 	call	0x5cd4	; 0x5cd4 <_ZN6Serial4readEv>
    3c36:	78 2e       	mov	r7, r24
					serial.write(char_echo);
    3c38:	68 2f       	mov	r22, r24
    3c3a:	c7 01       	movw	r24, r14
    3c3c:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <_ZN6Serial5writeEc>
					sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_echo);
    3c40:	61 e0       	ldi	r22, 0x01	; 1
    3c42:	70 e0       	ldi	r23, 0x00	; 0
    3c44:	c6 01       	movw	r24, r12
    3c46:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
			case INT_UART_IN_CHAR_NO_ECHO:
				sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,serial.read());
				interrupt_done();
				break;
			case INT_UART_IN_CHAR_ECHO:{
					int char_echo=serial.read();
    3c4a:	47 2d       	mov	r20, r7
    3c4c:	50 e0       	ldi	r21, 0x00	; 0
					serial.write(char_echo);
					sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_echo);
    3c4e:	be 01       	movw	r22, r28
    3c50:	68 0f       	add	r22, r24
    3c52:	79 1f       	adc	r23, r25
    3c54:	c5 01       	movw	r24, r10
    3c56:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3c5a:	f8 01       	movw	r30, r16
    3c5c:	50 82       	st	Z, r5
    3c5e:	63 c0       	rjmp	.+198    	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
					sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_echo);
					interrupt_done();
				}
				break;
			case INT_UART_IN_BUFF_NO_ECHO:{
					int char_noecho=serial.read();
    3c60:	c7 01       	movw	r24, r14
    3c62:	0e 94 6a 2e 	call	0x5cd4	; 0x5cd4 <_ZN6Serial4readEv>
    3c66:	68 2e       	mov	r6, r24
    3c68:	71 2c       	mov	r7, r1
					if(char_noecho==STRING_NEWLINE){
    3c6a:	fd e0       	ldi	r31, 0x0D	; 13
    3c6c:	6f 16       	cp	r6, r31
    3c6e:	71 04       	cpc	r7, r1
    3c70:	81 f4       	brne	.+32     	; 0x3c92 <_ZN4QEPU13interrupt_cpuEi+0x14c>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3c72:	f8 01       	movw	r30, r16
    3c74:	50 82       	st	Z, r5
				break;
			case INT_UART_IN_BUFF_NO_ECHO:{
					int char_noecho=serial.read();
					if(char_noecho==STRING_NEWLINE){
						interrupt_done();
						sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,STRING_TERMINATOR);
    3c76:	61 e0       	ldi	r22, 0x01	; 1
    3c78:	70 e0       	ldi	r23, 0x00	; 0
    3c7a:	c6 01       	movw	r24, r12
    3c7c:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    3c80:	be 01       	movw	r22, r28
    3c82:	68 0f       	add	r22, r24
    3c84:	79 1f       	adc	r23, r25
    3c86:	44 e2       	ldi	r20, 0x24	; 36
    3c88:	50 e0       	ldi	r21, 0x00	; 0
    3c8a:	c5 01       	movw	r24, r10
    3c8c:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
    3c90:	4a c0       	rjmp	.+148    	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
					}else
						if(char_noecho==0x8 && address_pointer_offset>0) address_pointer_offset--;
    3c92:	f8 e0       	ldi	r31, 0x08	; 8
    3c94:	6f 16       	cp	r6, r31
    3c96:	71 04       	cpc	r7, r1
    3c98:	29 f4       	brne	.+10     	; 0x3ca4 <_ZN4QEPU13interrupt_cpuEi+0x15e>
    3c9a:	1c 16       	cp	r1, r28
    3c9c:	1d 06       	cpc	r1, r29
    3c9e:	14 f4       	brge	.+4      	; 0x3ca4 <_ZN4QEPU13interrupt_cpuEi+0x15e>
    3ca0:	21 97       	sbiw	r28, 0x01	; 1
    3ca2:	41 c0       	rjmp	.+130    	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
						else{
							sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_noecho);
    3ca4:	61 e0       	ldi	r22, 0x01	; 1
    3ca6:	70 e0       	ldi	r23, 0x00	; 0
    3ca8:	c6 01       	movw	r24, r12
    3caa:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    3cae:	be 01       	movw	r22, r28
    3cb0:	68 0f       	add	r22, r24
    3cb2:	79 1f       	adc	r23, r25
    3cb4:	a3 01       	movw	r20, r6
    3cb6:	c5 01       	movw	r24, r10
    3cb8:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
							address_pointer_offset++;
    3cbc:	21 96       	adiw	r28, 0x01	; 1
    3cbe:	33 c0       	rjmp	.+102    	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
						}
				}
				break;
			case INT_UART_IN_BUFF_ECHO:{
					int char_echo=serial.read();
    3cc0:	c7 01       	movw	r24, r14
    3cc2:	0e 94 6a 2e 	call	0x5cd4	; 0x5cd4 <_ZN6Serial4readEv>
    3cc6:	68 2e       	mov	r6, r24
    3cc8:	71 2c       	mov	r7, r1
					serial.write(char_echo);
    3cca:	68 2f       	mov	r22, r24
    3ccc:	c7 01       	movw	r24, r14
    3cce:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <_ZN6Serial5writeEc>
					if(char_echo==STRING_NEWLINE){
    3cd2:	8d e0       	ldi	r24, 0x0D	; 13
    3cd4:	68 16       	cp	r6, r24
    3cd6:	71 04       	cpc	r7, r1
    3cd8:	81 f4       	brne	.+32     	; 0x3cfa <_ZN4QEPU13interrupt_cpuEi+0x1b4>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3cda:	f8 01       	movw	r30, r16
    3cdc:	50 82       	st	Z, r5
			case INT_UART_IN_BUFF_ECHO:{
					int char_echo=serial.read();
					serial.write(char_echo);
					if(char_echo==STRING_NEWLINE){
						interrupt_done();
						sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,STRING_TERMINATOR);
    3cde:	61 e0       	ldi	r22, 0x01	; 1
    3ce0:	70 e0       	ldi	r23, 0x00	; 0
    3ce2:	c6 01       	movw	r24, r12
    3ce4:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    3ce8:	be 01       	movw	r22, r28
    3cea:	68 0f       	add	r22, r24
    3cec:	79 1f       	adc	r23, r25
    3cee:	44 e2       	ldi	r20, 0x24	; 36
    3cf0:	50 e0       	ldi	r21, 0x00	; 0
    3cf2:	c5 01       	movw	r24, r10
    3cf4:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
    3cf8:	16 c0       	rjmp	.+44     	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
					}else 
						if(char_echo==0x8 && address_pointer_offset>0) address_pointer_offset--;
    3cfa:	f8 e0       	ldi	r31, 0x08	; 8
    3cfc:	6f 16       	cp	r6, r31
    3cfe:	71 04       	cpc	r7, r1
    3d00:	29 f4       	brne	.+10     	; 0x3d0c <_ZN4QEPU13interrupt_cpuEi+0x1c6>
    3d02:	1c 16       	cp	r1, r28
    3d04:	1d 06       	cpc	r1, r29
    3d06:	14 f4       	brge	.+4      	; 0x3d0c <_ZN4QEPU13interrupt_cpuEi+0x1c6>
    3d08:	21 97       	sbiw	r28, 0x01	; 1
    3d0a:	0d c0       	rjmp	.+26     	; 0x3d26 <_ZN4QEPU13interrupt_cpuEi+0x1e0>
						else{
							sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_echo);
    3d0c:	61 e0       	ldi	r22, 0x01	; 1
    3d0e:	70 e0       	ldi	r23, 0x00	; 0
    3d10:	c6 01       	movw	r24, r12
    3d12:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    3d16:	be 01       	movw	r22, r28
    3d18:	68 0f       	add	r22, r24
    3d1a:	79 1f       	adc	r23, r25
    3d1c:	a3 01       	movw	r20, r6
    3d1e:	c5 01       	movw	r24, r10
    3d20:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
							address_pointer_offset++;
    3d24:	21 96       	adiw	r28, 0x01	; 1

void QEPU::interrupt_cpu(int interrupt_type){
	//NEEDS RESERVED REGISTERS USED FOR ADDRESS POINTING -> ADDRESS SHOULD POINT TO A REGISTER ADDRESS,NOT SRAM
	//NEEDS RESERVED REGISTERS USED FOR DATA SAVING -> SHOULD SAVE ON A REGISTER,NOT SRAM
	int address_pointer_offset=0;
	while(!interrupt_signal){
    3d26:	f8 01       	movw	r30, r16
    3d28:	80 81       	ld	r24, Z
    3d2a:	88 23       	and	r24, r24
    3d2c:	09 f4       	brne	.+2      	; 0x3d30 <_ZN4QEPU13interrupt_cpuEi+0x1ea>
    3d2e:	2c cf       	rjmp	.-424    	; 0x3b88 <_ZN4QEPU13interrupt_cpuEi+0x42>
						}
				}
				break;
		}
	}
	interrupt_signal=false;
    3d30:	f6 01       	movw	r30, r12
    3d32:	e6 52       	subi	r30, 0x26	; 38
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	10 82       	st	Z, r1
}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	1f 91       	pop	r17
    3d3e:	0f 91       	pop	r16
    3d40:	ff 90       	pop	r15
    3d42:	ef 90       	pop	r14
    3d44:	df 90       	pop	r13
    3d46:	cf 90       	pop	r12
    3d48:	bf 90       	pop	r11
    3d4a:	af 90       	pop	r10
    3d4c:	9f 90       	pop	r9
    3d4e:	8f 90       	pop	r8
    3d50:	7f 90       	pop	r7
    3d52:	6f 90       	pop	r6
    3d54:	5f 90       	pop	r5
    3d56:	08 95       	ret

00003d58 <_ZN4QEPU9JumpstackC1Ev>:
#include "qepu.h"

QEPU::Jumpstack::Jumpstack():newest_address_index(0){
    3d58:	fc 01       	movw	r30, r24
    3d5a:	11 82       	std	Z+1, r1	; 0x01
    3d5c:	10 82       	st	Z, r1
    3d5e:	08 95       	ret

00003d60 <_ZN4QEPU9Jumpstack4pushEi>:
	
}
void QEPU::Jumpstack::push(int newaddress){
	addresses_toreturn[newest_address_index]=newaddress;
    3d60:	fc 01       	movw	r30, r24
    3d62:	20 81       	ld	r18, Z
    3d64:	31 81       	ldd	r19, Z+1	; 0x01
    3d66:	2f 5f       	subi	r18, 0xFF	; 255
    3d68:	3f 4f       	sbci	r19, 0xFF	; 255
    3d6a:	f9 01       	movw	r30, r18
    3d6c:	ee 0f       	add	r30, r30
    3d6e:	ff 1f       	adc	r31, r31
    3d70:	e8 0f       	add	r30, r24
    3d72:	f9 1f       	adc	r31, r25
    3d74:	71 83       	std	Z+1, r23	; 0x01
    3d76:	60 83       	st	Z, r22
	newest_address_index++;
    3d78:	fc 01       	movw	r30, r24
    3d7a:	31 83       	std	Z+1, r19	; 0x01
    3d7c:	20 83       	st	Z, r18
    3d7e:	08 95       	ret

00003d80 <_ZN4QEPU9Jumpstack3popEv>:
}
int QEPU::Jumpstack::pop(){
    3d80:	fc 01       	movw	r30, r24
	if(newest_address_index<=0) return 0;
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	18 16       	cp	r1, r24
    3d88:	19 06       	cpc	r1, r25
    3d8a:	ac f4       	brge	.+42     	; 0x3db6 <_ZN4QEPU9Jumpstack3popEv+0x36>
	int address_returning=addresses_toreturn[newest_address_index-1];
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	dc 01       	movw	r26, r24
    3d90:	aa 0f       	add	r26, r26
    3d92:	bb 1f       	adc	r27, r27
    3d94:	ae 0f       	add	r26, r30
    3d96:	bf 1f       	adc	r27, r31
    3d98:	12 96       	adiw	r26, 0x02	; 2
    3d9a:	3c 91       	ld	r19, X
    3d9c:	12 97       	sbiw	r26, 0x02	; 2
    3d9e:	13 96       	adiw	r26, 0x03	; 3
    3da0:	2c 91       	ld	r18, X
    3da2:	13 97       	sbiw	r26, 0x03	; 3
	addresses_toreturn[newest_address_index-1]=0;
    3da4:	13 96       	adiw	r26, 0x03	; 3
    3da6:	1c 92       	st	X, r1
    3da8:	1e 92       	st	-X, r1
    3daa:	12 97       	sbiw	r26, 0x02	; 2
	newest_address_index--;
    3dac:	91 83       	std	Z+1, r25	; 0x01
    3dae:	80 83       	st	Z, r24
	return address_returning;
    3db0:	83 2f       	mov	r24, r19
    3db2:	92 2f       	mov	r25, r18
    3db4:	08 95       	ret
void QEPU::Jumpstack::push(int newaddress){
	addresses_toreturn[newest_address_index]=newaddress;
	newest_address_index++;
}
int QEPU::Jumpstack::pop(){
	if(newest_address_index<=0) return 0;
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	90 e0       	ldi	r25, 0x00	; 0
	int address_returning=addresses_toreturn[newest_address_index-1];
	addresses_toreturn[newest_address_index-1]=0;
	newest_address_index--;
	return address_returning;
}
    3dba:	08 95       	ret

00003dbc <_ZN4QEPU10setup_seedEv>:

//SETUP SEED FOR RAND():
uint16_t EEMEM randinit;

void QEPU::setup_seed(){
	srand(eeprom_read_word(&randinit));
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <__eerd_word_m32>
    3dc4:	0e 94 30 35 	call	0x6a60	; 0x6a60 <srand>
	eeprom_write_word(&randinit,rand()%10000);
    3dc8:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <rand>
    3dcc:	60 e1       	ldi	r22, 0x10	; 16
    3dce:	77 e2       	ldi	r23, 0x27	; 39
    3dd0:	0e 94 47 33 	call	0x668e	; 0x668e <__divmodhi4>
    3dd4:	bc 01       	movw	r22, r24
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	0e 94 81 38 	call	0x7102	; 0x7102 <__eewr_word_m32>
    3dde:	08 95       	ret

00003de0 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){serial.writestr("INITIALIZING . . . ");setup_seed();CTRL_QB_DIR=OUTPUT;program_counter=0;program_counter_maximum=0;}
    3de0:	0f 93       	push	r16
    3de2:	1f 93       	push	r17
    3de4:	cf 93       	push	r28
    3de6:	df 93       	push	r29
    3de8:	ec 01       	movw	r28, r24
    3dea:	0e 94 02 03 	call	0x604	; 0x604 <_ZN4QEPU4FlagC1Ev>
    3dee:	8e 01       	movw	r16, r28
    3df0:	0f 5f       	subi	r16, 0xFF	; 255
    3df2:	1f 4f       	sbci	r17, 0xFF	; 255
    3df4:	c8 01       	movw	r24, r16
    3df6:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <_ZN6SerialC1Ev>
    3dfa:	ce 01       	movw	r24, r28
    3dfc:	02 96       	adiw	r24, 0x02	; 2
    3dfe:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6EEPromC1Ev>
    3e02:	ce 01       	movw	r24, r28
    3e04:	03 96       	adiw	r24, 0x03	; 3
    3e06:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <_ZN4SRAMC1Ev>
    3e0a:	ce 01       	movw	r24, r28
    3e0c:	0a 96       	adiw	r24, 0x0a	; 10
    3e0e:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN5GatesC1Ev>
    3e12:	ce 01       	movw	r24, r28
    3e14:	0b 96       	adiw	r24, 0x0b	; 11
    3e16:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <_ZN4QEPU9JumpstackC1Ev>
    3e1a:	6a e6       	ldi	r22, 0x6A	; 106
    3e1c:	70 e0       	ldi	r23, 0x00	; 0
    3e1e:	c8 01       	movw	r24, r16
    3e20:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <_ZN6Serial8writestrEPc>
    3e24:	ce 01       	movw	r24, r28
    3e26:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <_ZN4QEPU10setup_seedEv>
    3e2a:	8f ef       	ldi	r24, 0xFF	; 255
    3e2c:	8a bb       	out	0x1a, r24	; 26
    3e2e:	fe 01       	movw	r30, r28
    3e30:	ea 52       	subi	r30, 0x2A	; 42
    3e32:	ff 4f       	sbci	r31, 0xFF	; 255
    3e34:	11 82       	std	Z+1, r1	; 0x01
    3e36:	10 82       	st	Z, r1
    3e38:	c8 52       	subi	r28, 0x28	; 40
    3e3a:	df 4f       	sbci	r29, 0xFF	; 255
    3e3c:	19 82       	std	Y+1, r1	; 0x01
    3e3e:	18 82       	st	Y, r1
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	1f 91       	pop	r17
    3e46:	0f 91       	pop	r16
    3e48:	08 95       	ret

00003e4a <_ZN4QEPU14setbuffctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	BUS_OUT&=~(1<<pin); // CLEAR PIN
	BUS_OUT|=(state<<pin); // SET PIN
}
void QEPU::setbuffctrlpin(int pin,int state){
	CTRL_BUFF&=~(1<<pin); // CLEAR PIN
    3e4a:	75 b3       	in	r23, 0x15	; 21
    3e4c:	21 e0       	ldi	r18, 0x01	; 1
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	c9 01       	movw	r24, r18
    3e52:	06 2e       	mov	r0, r22
    3e54:	02 c0       	rjmp	.+4      	; 0x3e5a <_ZN4QEPU14setbuffctrlpinEii+0x10>
    3e56:	88 0f       	add	r24, r24
    3e58:	99 1f       	adc	r25, r25
    3e5a:	0a 94       	dec	r0
    3e5c:	e2 f7       	brpl	.-8      	; 0x3e56 <_ZN4QEPU14setbuffctrlpinEii+0xc>
    3e5e:	80 95       	com	r24
    3e60:	87 23       	and	r24, r23
    3e62:	85 bb       	out	0x15, r24	; 21
	CTRL_BUFF|=(state<<pin); // SET PIN
    3e64:	85 b3       	in	r24, 0x15	; 21
    3e66:	02 c0       	rjmp	.+4      	; 0x3e6c <_ZN4QEPU14setbuffctrlpinEii+0x22>
    3e68:	44 0f       	add	r20, r20
    3e6a:	55 1f       	adc	r21, r21
    3e6c:	6a 95       	dec	r22
    3e6e:	e2 f7       	brpl	.-8      	; 0x3e68 <_ZN4QEPU14setbuffctrlpinEii+0x1e>
    3e70:	48 2b       	or	r20, r24
    3e72:	45 bb       	out	0x15, r20	; 21
    3e74:	08 95       	ret

00003e76 <_ZN4QEPU14deselect_qubitEv>:
	//TODO: TOUCH QUBIT
	
	return deg_read;
}
void QEPU::deselect_qubit(){
	CTRL_BUFF_DIR=OUTPUT;
    3e76:	2f ef       	ldi	r18, 0xFF	; 255
    3e78:	24 bb       	out	0x14, r18	; 20
	setbuffctrlpin(EO_AB,LOW);
    3e7a:	40 e0       	ldi	r20, 0x00	; 0
    3e7c:	50 e0       	ldi	r21, 0x00	; 0
    3e7e:	64 e0       	ldi	r22, 0x04	; 4
    3e80:	70 e0       	ldi	r23, 0x00	; 0
    3e82:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN4QEPU14setbuffctrlpinEii>
    3e86:	08 95       	ret

00003e88 <_ZN4QEPU12select_qubitEi>:
}
void QEPU::select_qubit(int index){
    3e88:	af 92       	push	r10
    3e8a:	bf 92       	push	r11
    3e8c:	cf 92       	push	r12
    3e8e:	df 92       	push	r13
    3e90:	ef 92       	push	r14
    3e92:	ff 92       	push	r15
    3e94:	0f 93       	push	r16
    3e96:	1f 93       	push	r17
    3e98:	cf 93       	push	r28
    3e9a:	df 93       	push	r29
    3e9c:	00 d0       	rcall	.+0      	; 0x3e9e <_ZN4QEPU12select_qubitEi+0x16>
    3e9e:	00 d0       	rcall	.+0      	; 0x3ea0 <_ZN4QEPU12select_qubitEi+0x18>
    3ea0:	00 d0       	rcall	.+0      	; 0x3ea2 <_ZN4QEPU12select_qubitEi+0x1a>
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	8c 01       	movw	r16, r24
	int address_buffer[ADDRESS_BUFFER_SIZE];
	int mask_bit_addressbuff=0b1111;
	for(int i=0;i<ADDRESS_BUFFER_SIZE;i++){
		address_buffer[i]=(index&mask_bit_addressbuff)>>(4*i);
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	8f 70       	andi	r24, 0x0F	; 15
    3eac:	99 27       	eor	r25, r25
    3eae:	9a 83       	std	Y+2, r25	; 0x02
    3eb0:	89 83       	std	Y+1, r24	; 0x01
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	80 7f       	andi	r24, 0xF0	; 240
    3eb6:	99 27       	eor	r25, r25
    3eb8:	95 95       	asr	r25
    3eba:	87 95       	ror	r24
    3ebc:	95 95       	asr	r25
    3ebe:	87 95       	ror	r24
    3ec0:	95 95       	asr	r25
    3ec2:	87 95       	ror	r24
    3ec4:	95 95       	asr	r25
    3ec6:	87 95       	ror	r24
    3ec8:	9c 83       	std	Y+4, r25	; 0x04
    3eca:	8b 83       	std	Y+3, r24	; 0x03
    3ecc:	66 27       	eor	r22, r22
    3ece:	7f 70       	andi	r23, 0x0F	; 15
    3ed0:	87 2f       	mov	r24, r23
    3ed2:	88 0f       	add	r24, r24
    3ed4:	88 0b       	sbc	r24, r24
    3ed6:	7d 83       	std	Y+5, r23	; 0x05
    3ed8:	8e 83       	std	Y+6, r24	; 0x06
		mask_bit_addressbuff<<=4;
	}
	CTRL_QB_DIR=OUTPUT;
    3eda:	8f ef       	ldi	r24, 0xFF	; 255
    3edc:	8a bb       	out	0x1a, r24	; 26
	CTRL_BUFF_DIR=OUTPUT;
    3ede:	84 bb       	out	0x14, r24	; 20
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
    3ee2:	8b bb       	out	0x1b, r24	; 27
	}
	CTRL_QB_DIR=OUTPUT;
	CTRL_BUFF_DIR=OUTPUT;
	
	setctrl(address_buffer[0]);
	setbuffctrlpin(IN_ABBUFFER_START,HIGH);
    3ee4:	41 e0       	ldi	r20, 0x01	; 1
    3ee6:	50 e0       	ldi	r21, 0x00	; 0
    3ee8:	62 e0       	ldi	r22, 0x02	; 2
    3eea:	70 e0       	ldi	r23, 0x00	; 0
    3eec:	c8 01       	movw	r24, r16
    3eee:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    3ef2:	41 e0       	ldi	r20, 0x01	; 1
    3ef4:	50 e0       	ldi	r21, 0x00	; 0
    3ef6:	63 e0       	ldi	r22, 0x03	; 3
    3ef8:	70 e0       	ldi	r23, 0x00	; 0
    3efa:	c8 01       	movw	r24, r16
    3efc:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    3f00:	40 e0       	ldi	r20, 0x00	; 0
    3f02:	50 e0       	ldi	r21, 0x00	; 0
    3f04:	63 e0       	ldi	r22, 0x03	; 3
    3f06:	70 e0       	ldi	r23, 0x00	; 0
    3f08:	c8 01       	movw	r24, r16
    3f0a:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_START,LOW);
    3f0e:	40 e0       	ldi	r20, 0x00	; 0
    3f10:	50 e0       	ldi	r21, 0x00	; 0
    3f12:	62 e0       	ldi	r22, 0x02	; 2
    3f14:	70 e0       	ldi	r23, 0x00	; 0
    3f16:	c8 01       	movw	r24, r16
    3f18:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN4QEPU14setbuffctrlpinEii>
	utils.delay(ADDRESS_WRITE_DELAY);
    3f1c:	68 01       	movw	r12, r16
    3f1e:	85 ed       	ldi	r24, 0xD5	; 213
    3f20:	c8 0e       	add	r12, r24
    3f22:	d1 1c       	adc	r13, r1
    3f24:	61 e0       	ldi	r22, 0x01	; 1
    3f26:	70 e0       	ldi	r23, 0x00	; 0
    3f28:	c6 01       	movw	r24, r12
    3f2a:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <_ZN5Utils5delayEi>
    3f2e:	7e 01       	movw	r14, r28
    3f30:	93 e0       	ldi	r25, 0x03	; 3
    3f32:	e9 0e       	add	r14, r25
    3f34:	f1 1c       	adc	r15, r1
    3f36:	5e 01       	movw	r10, r28
    3f38:	e7 e0       	ldi	r30, 0x07	; 7
    3f3a:	ae 0e       	add	r10, r30
    3f3c:	b1 1c       	adc	r11, r1
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    3f3e:	41 e0       	ldi	r20, 0x01	; 1
    3f40:	50 e0       	ldi	r21, 0x00	; 0
    3f42:	63 e0       	ldi	r22, 0x03	; 3
    3f44:	70 e0       	ldi	r23, 0x00	; 0
    3f46:	c8 01       	movw	r24, r16
    3f48:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN4QEPU14setbuffctrlpinEii>
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    3f4c:	40 e0       	ldi	r20, 0x00	; 0
    3f4e:	50 e0       	ldi	r21, 0x00	; 0
    3f50:	63 e0       	ldi	r22, 0x03	; 3
    3f52:	70 e0       	ldi	r23, 0x00	; 0
    3f54:	c8 01       	movw	r24, r16
    3f56:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN4QEPU14setbuffctrlpinEii>
		setctrl(address_buffer[i]);
    3f5a:	f7 01       	movw	r30, r14
    3f5c:	80 81       	ld	r24, Z
    3f5e:	f2 e0       	ldi	r31, 0x02	; 2
    3f60:	ef 0e       	add	r14, r31
    3f62:	f1 1c       	adc	r15, r1
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    3f64:	8b bb       	out	0x1b, r24	; 27
	utils.delay(ADDRESS_WRITE_DELAY);
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
		setctrl(address_buffer[i]);
		utils.delay(ADDRESS_WRITE_DELAY);
    3f66:	61 e0       	ldi	r22, 0x01	; 1
    3f68:	70 e0       	ldi	r23, 0x00	; 0
    3f6a:	c6 01       	movw	r24, r12
    3f6c:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <_ZN5Utils5delayEi>
	setbuffctrlpin(IN_ABBUFFER_START,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(IN_ABBUFFER_START,LOW);
	utils.delay(ADDRESS_WRITE_DELAY);
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
    3f70:	ea 14       	cp	r14, r10
    3f72:	fb 04       	cpc	r15, r11
    3f74:	21 f7       	brne	.-56     	; 0x3f3e <_ZN4QEPU12select_qubitEi+0xb6>
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
		setctrl(address_buffer[i]);
		utils.delay(ADDRESS_WRITE_DELAY);
	}
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    3f76:	41 e0       	ldi	r20, 0x01	; 1
    3f78:	50 e0       	ldi	r21, 0x00	; 0
    3f7a:	63 e0       	ldi	r22, 0x03	; 3
    3f7c:	70 e0       	ldi	r23, 0x00	; 0
    3f7e:	c8 01       	movw	r24, r16
    3f80:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    3f84:	40 e0       	ldi	r20, 0x00	; 0
    3f86:	50 e0       	ldi	r21, 0x00	; 0
    3f88:	63 e0       	ldi	r22, 0x03	; 3
    3f8a:	70 e0       	ldi	r23, 0x00	; 0
    3f8c:	c8 01       	movw	r24, r16
    3f8e:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(EO_AB,HIGH);
    3f92:	41 e0       	ldi	r20, 0x01	; 1
    3f94:	50 e0       	ldi	r21, 0x00	; 0
    3f96:	64 e0       	ldi	r22, 0x04	; 4
    3f98:	70 e0       	ldi	r23, 0x00	; 0
    3f9a:	c8 01       	movw	r24, r16
    3f9c:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN4QEPU14setbuffctrlpinEii>
}
    3fa0:	26 96       	adiw	r28, 0x06	; 6
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	df 91       	pop	r29
    3fae:	cf 91       	pop	r28
    3fb0:	1f 91       	pop	r17
    3fb2:	0f 91       	pop	r16
    3fb4:	ff 90       	pop	r15
    3fb6:	ef 90       	pop	r14
    3fb8:	df 90       	pop	r13
    3fba:	cf 90       	pop	r12
    3fbc:	bf 90       	pop	r11
    3fbe:	af 90       	pop	r10
    3fc0:	08 95       	ret

00003fc2 <_ZN4QEPU10setctrlpinEii>:
void QEPU::setbuffctrlpin(int pin,int state){
	CTRL_BUFF&=~(1<<pin); // CLEAR PIN
	CTRL_BUFF|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	CTRL_QB&=~(1<<pin); // CLEAR PIN
    3fc2:	7b b3       	in	r23, 0x1b	; 27
    3fc4:	21 e0       	ldi	r18, 0x01	; 1
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	c9 01       	movw	r24, r18
    3fca:	06 2e       	mov	r0, r22
    3fcc:	02 c0       	rjmp	.+4      	; 0x3fd2 <_ZN4QEPU10setctrlpinEii+0x10>
    3fce:	88 0f       	add	r24, r24
    3fd0:	99 1f       	adc	r25, r25
    3fd2:	0a 94       	dec	r0
    3fd4:	e2 f7       	brpl	.-8      	; 0x3fce <_ZN4QEPU10setctrlpinEii+0xc>
    3fd6:	80 95       	com	r24
    3fd8:	87 23       	and	r24, r23
    3fda:	8b bb       	out	0x1b, r24	; 27
	CTRL_QB|=(state<<pin); // SET PIN
    3fdc:	8b b3       	in	r24, 0x1b	; 27
    3fde:	02 c0       	rjmp	.+4      	; 0x3fe4 <_ZN4QEPU10setctrlpinEii+0x22>
    3fe0:	44 0f       	add	r20, r20
    3fe2:	55 1f       	adc	r21, r21
    3fe4:	6a 95       	dec	r22
    3fe6:	e2 f7       	brpl	.-8      	; 0x3fe0 <_ZN4QEPU10setctrlpinEii+0x1e>
    3fe8:	48 2b       	or	r20, r24
    3fea:	4b bb       	out	0x1b, r20	; 27
    3fec:	08 95       	ret

00003fee <_ZN4QEPU5writeEiii>:
void QEPU::close_bus(){
	setctrl(0); // CLOSE ALL CONTROLS
	deselect_qubit(); // DESELECT ALL QUBITS
	bus_write(LOW);
}
void QEPU::write(int index,int dim,int deg){
    3fee:	ff 92       	push	r15
    3ff0:	0f 93       	push	r16
    3ff2:	1f 93       	push	r17
    3ff4:	cf 93       	push	r28
    3ff6:	df 93       	push	r29
    3ff8:	ec 01       	movw	r28, r24
    3ffa:	8a 01       	movw	r16, r20
	BUS_DIR=OUTPUT;
    3ffc:	ff 24       	eor	r15, r15
    3ffe:	fa 94       	dec	r15
    4000:	f7 ba       	out	0x17, r15	; 23
	eeprom_write_word(&randinit,rand()%10000);
}

//QUBIT MEMORY HANDLING:
void QEPU::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    4002:	f7 ba       	out	0x17, r15	; 23
	BUS_OUT=data;
    4004:	28 bb       	out	0x18, r18	; 24
}
void QEPU::write(int index,int dim,int deg){
	BUS_DIR=OUTPUT;
	
	bus_write(deg);
	select_qubit(index);
    4006:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU12select_qubitEi>
	setctrlpin(DIM_SEL,dim);
    400a:	a8 01       	movw	r20, r16
    400c:	64 e0       	ldi	r22, 0x04	; 4
    400e:	70 e0       	ldi	r23, 0x00	; 0
    4010:	ce 01       	movw	r24, r28
    4012:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(WRITE_QB,HIGH); // CLOCK UP LOAD
    4016:	41 e0       	ldi	r20, 0x01	; 1
    4018:	50 e0       	ldi	r21, 0x00	; 0
    401a:	66 e0       	ldi	r22, 0x06	; 6
    401c:	70 e0       	ldi	r23, 0x00	; 0
    401e:	ce 01       	movw	r24, r28
    4020:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(WRITE_QB,LOW); // CLOCK DOWN LOAD
    4024:	40 e0       	ldi	r20, 0x00	; 0
    4026:	50 e0       	ldi	r21, 0x00	; 0
    4028:	66 e0       	ldi	r22, 0x06	; 6
    402a:	70 e0       	ldi	r23, 0x00	; 0
    402c:	ce 01       	movw	r24, r28
    402e:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <_ZN4QEPU10setctrlpinEii>
	eeprom_write_word(&randinit,rand()%10000);
}

//QUBIT MEMORY HANDLING:
void QEPU::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    4032:	f7 ba       	out	0x17, r15	; 23
	BUS_OUT=data;
    4034:	18 ba       	out	0x18, r1	; 24
	select_qubit(index);
	setctrlpin(DIM_SEL,dim);
	setctrlpin(WRITE_QB,HIGH); // CLOCK UP LOAD
	setctrlpin(WRITE_QB,LOW); // CLOCK DOWN LOAD
	bus_write(LOW);
	deselect_qubit();
    4036:	ce 01       	movw	r24, r28
    4038:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_ZN4QEPU14deselect_qubitEv>
}
    403c:	df 91       	pop	r29
    403e:	cf 91       	pop	r28
    4040:	1f 91       	pop	r17
    4042:	0f 91       	pop	r16
    4044:	ff 90       	pop	r15
    4046:	08 95       	ret

00004048 <_ZN4QEPU4readEiib>:
int QEPU::read(int index,int dim,bool freeze_bus){
    4048:	ff 92       	push	r15
    404a:	0f 93       	push	r16
    404c:	1f 93       	push	r17
    404e:	cf 93       	push	r28
    4050:	df 93       	push	r29
    4052:	ec 01       	movw	r28, r24
    4054:	8a 01       	movw	r16, r20
    4056:	f2 2e       	mov	r15, r18
	BUS_DIR=INPUT;
    4058:	17 ba       	out	0x17, r1	; 23
	
	select_qubit(index);
    405a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN4QEPU12select_qubitEi>
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    405e:	41 e0       	ldi	r20, 0x01	; 1
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	65 e0       	ldi	r22, 0x05	; 5
    4064:	70 e0       	ldi	r23, 0x00	; 0
    4066:	ce 01       	movw	r24, r28
    4068:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    406c:	a8 01       	movw	r20, r16
    406e:	64 e0       	ldi	r22, 0x04	; 4
    4070:	70 e0       	ldi	r23, 0x00	; 0
    4072:	ce 01       	movw	r24, r28
    4074:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <_ZN4QEPU10setctrlpinEii>
	int deg_read=BUS_IN; // READ INPUT
    4078:	06 b3       	in	r16, 0x16	; 22
    407a:	10 e0       	ldi	r17, 0x00	; 0
	//CLOSE ALL AND GATES
	BUS_DIR=OUTPUT;
    407c:	8f ef       	ldi	r24, 0xFF	; 255
    407e:	87 bb       	out	0x17, r24	; 23
	if(!freeze_bus){
    4080:	f1 10       	cpse	r15, r1
    4082:	04 c0       	rjmp	.+8      	; 0x408c <_ZN4QEPU4readEiib+0x44>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    4084:	1b ba       	out	0x1b, r1	; 27
	int deg_read=BUS_IN; // READ INPUT
	//CLOSE ALL AND GATES
	BUS_DIR=OUTPUT;
	if(!freeze_bus){
		setctrl(0); // CLOSE ALL CONTROLS
		deselect_qubit();
    4086:	ce 01       	movw	r24, r28
    4088:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_ZN4QEPU14deselect_qubitEv>
	}
	//TODO: TOUCH QUBIT
	
	return deg_read;
}
    408c:	c8 01       	movw	r24, r16
    408e:	df 91       	pop	r29
    4090:	cf 91       	pop	r28
    4092:	1f 91       	pop	r17
    4094:	0f 91       	pop	r16
    4096:	ff 90       	pop	r15
    4098:	08 95       	ret

0000409a <_ZN4QEPU7measureEi>:
}
void QEPU::setctrlpin(int pin,int state){
	CTRL_QB&=~(1<<pin); // CLEAR PIN
	CTRL_QB|=(state<<pin); // SET PIN
}
int QEPU::measure(int amplitude){
    409a:	cf 93       	push	r28
    409c:	df 93       	push	r29
    409e:	ec 01       	movw	r28, r24
	return gates.touch(utils.custom_pow(sin(amplitude*M_PI/360),2));
    40a0:	88 27       	eor	r24, r24
    40a2:	77 fd       	sbrc	r23, 7
    40a4:	80 95       	com	r24
    40a6:	98 2f       	mov	r25, r24
    40a8:	0e 94 91 30 	call	0x6122	; 0x6122 <__floatsisf>
    40ac:	2b ed       	ldi	r18, 0xDB	; 219
    40ae:	3f e0       	ldi	r19, 0x0F	; 15
    40b0:	49 e4       	ldi	r20, 0x49	; 73
    40b2:	50 e4       	ldi	r21, 0x40	; 64
    40b4:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	44 eb       	ldi	r20, 0xB4	; 180
    40be:	53 e4       	ldi	r21, 0x43	; 67
    40c0:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__divsf3>
    40c4:	0e 94 d6 32 	call	0x65ac	; 0x65ac <sin>
    40c8:	ab 01       	movw	r20, r22
    40ca:	bc 01       	movw	r22, r24
    40cc:	22 e0       	ldi	r18, 0x02	; 2
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	ce 01       	movw	r24, r28
    40d2:	8b 52       	subi	r24, 0x2B	; 43
    40d4:	9f 4f       	sbci	r25, 0xFF	; 255
    40d6:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <_ZN5Utils10custom_powEfi>
    40da:	ab 01       	movw	r20, r22
    40dc:	bc 01       	movw	r22, r24
    40de:	ce 01       	movw	r24, r28
    40e0:	0a 96       	adiw	r24, 0x0a	; 10
    40e2:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN5Gates5touchEd>
}
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	08 95       	ret

000040ec <_ZN4QEPU14fetch_registerEi>:

int QEPU::fetch_register(int address){
    40ec:	8f 92       	push	r8
    40ee:	9f 92       	push	r9
    40f0:	af 92       	push	r10
    40f2:	bf 92       	push	r11
    40f4:	cf 92       	push	r12
    40f6:	df 92       	push	r13
    40f8:	ef 92       	push	r14
    40fa:	ff 92       	push	r15
    40fc:	0f 93       	push	r16
    40fe:	1f 93       	push	r17
    4100:	cf 93       	push	r28
    4102:	df 93       	push	r29
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
    4108:	29 97       	sbiw	r28, 0x09	; 9
    410a:	0f b6       	in	r0, 0x3f	; 63
    410c:	f8 94       	cli
    410e:	de bf       	out	0x3e, r29	; 62
    4110:	0f be       	out	0x3f, r0	; 63
    4112:	cd bf       	out	0x3d, r28	; 61
    4114:	5c 01       	movw	r10, r24
	char data_fetched[BUS_WIDTH+1]="";
    4116:	19 82       	std	Y+1, r1	; 0x01
    4118:	1a 82       	std	Y+2, r1	; 0x02
    411a:	1b 82       	std	Y+3, r1	; 0x03
    411c:	1c 82       	std	Y+4, r1	; 0x04
    411e:	fe 01       	movw	r30, r28
    4120:	35 96       	adiw	r30, 0x05	; 5
    4122:	85 e0       	ldi	r24, 0x05	; 5
    4124:	df 01       	movw	r26, r30
    4126:	1d 92       	st	X+, r1
    4128:	8a 95       	dec	r24
    412a:	e9 f7       	brne	.-6      	; 0x4126 <_ZN4QEPU14fetch_registerEi+0x3a>
	int address_offset=address*BUS_WIDTH;
    412c:	4b 01       	movw	r8, r22
    412e:	88 0c       	add	r8, r8
    4130:	99 1c       	adc	r9, r9
    4132:	88 0c       	add	r8, r8
    4134:	99 1c       	adc	r9, r9
    4136:	88 0c       	add	r8, r8
    4138:	99 1c       	adc	r9, r9
	for(int i=0;i<BUS_WIDTH;i++)
    413a:	e1 2c       	mov	r14, r1
    413c:	f1 2c       	mov	r15, r1
		sprintf(data_fetched,"%s%d",data_fetched,measure(read(address_offset+i,THE,false)));
    413e:	8e 01       	movw	r16, r28
    4140:	0f 5f       	subi	r16, 0xFF	; 255
    4142:	1f 4f       	sbci	r17, 0xFF	; 255
    4144:	0f 2e       	mov	r0, r31
    4146:	fe e7       	ldi	r31, 0x7E	; 126
    4148:	cf 2e       	mov	r12, r31
    414a:	f0 e0       	ldi	r31, 0x00	; 0
    414c:	df 2e       	mov	r13, r31
    414e:	f0 2d       	mov	r31, r0
    4150:	b7 01       	movw	r22, r14
    4152:	68 0d       	add	r22, r8
    4154:	79 1d       	adc	r23, r9
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	40 e0       	ldi	r20, 0x00	; 0
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	c5 01       	movw	r24, r10
    415e:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4162:	bc 01       	movw	r22, r24
    4164:	c5 01       	movw	r24, r10
    4166:	0e 94 4d 20 	call	0x409a	; 0x409a <_ZN4QEPU7measureEi>
    416a:	9f 93       	push	r25
    416c:	8f 93       	push	r24
    416e:	1f 93       	push	r17
    4170:	0f 93       	push	r16
    4172:	df 92       	push	r13
    4174:	cf 92       	push	r12
    4176:	1f 93       	push	r17
    4178:	0f 93       	push	r16
    417a:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <sprintf>
}

int QEPU::fetch_register(int address){
	char data_fetched[BUS_WIDTH+1]="";
	int address_offset=address*BUS_WIDTH;
	for(int i=0;i<BUS_WIDTH;i++)
    417e:	bf ef       	ldi	r27, 0xFF	; 255
    4180:	eb 1a       	sub	r14, r27
    4182:	fb 0a       	sbc	r15, r27
    4184:	0f b6       	in	r0, 0x3f	; 63
    4186:	f8 94       	cli
    4188:	de bf       	out	0x3e, r29	; 62
    418a:	0f be       	out	0x3f, r0	; 63
    418c:	cd bf       	out	0x3d, r28	; 61
    418e:	98 e0       	ldi	r25, 0x08	; 8
    4190:	e9 16       	cp	r14, r25
    4192:	f1 04       	cpc	r15, r1
    4194:	e9 f6       	brne	.-70     	; 0x4150 <_ZN4QEPU14fetch_registerEi+0x64>
		sprintf(data_fetched,"%s%d",data_fetched,measure(read(address_offset+i,THE,false)));
	
	strrev(data_fetched);
    4196:	ce 01       	movw	r24, r28
    4198:	01 96       	adiw	r24, 0x01	; 1
    419a:	0e 94 77 36 	call	0x6cee	; 0x6cee <strrev>
	return strtol(data_fetched,NULL,2);
    419e:	42 e0       	ldi	r20, 0x02	; 2
    41a0:	50 e0       	ldi	r21, 0x00	; 0
    41a2:	60 e0       	ldi	r22, 0x00	; 0
    41a4:	70 e0       	ldi	r23, 0x00	; 0
    41a6:	ce 01       	movw	r24, r28
    41a8:	01 96       	adiw	r24, 0x01	; 1
    41aa:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <strtol>
}
    41ae:	cb 01       	movw	r24, r22
    41b0:	29 96       	adiw	r28, 0x09	; 9
    41b2:	0f b6       	in	r0, 0x3f	; 63
    41b4:	f8 94       	cli
    41b6:	de bf       	out	0x3e, r29	; 62
    41b8:	0f be       	out	0x3f, r0	; 63
    41ba:	cd bf       	out	0x3d, r28	; 61
    41bc:	df 91       	pop	r29
    41be:	cf 91       	pop	r28
    41c0:	1f 91       	pop	r17
    41c2:	0f 91       	pop	r16
    41c4:	ff 90       	pop	r15
    41c6:	ef 90       	pop	r14
    41c8:	df 90       	pop	r13
    41ca:	cf 90       	pop	r12
    41cc:	bf 90       	pop	r11
    41ce:	af 90       	pop	r10
    41d0:	9f 90       	pop	r9
    41d2:	8f 90       	pop	r8
    41d4:	08 95       	ret

000041d6 <_ZN4QEPU12set_registerEii>:

void QEPU::set_register(int address,int data){
    41d6:	cf 92       	push	r12
    41d8:	df 92       	push	r13
    41da:	ef 92       	push	r14
    41dc:	ff 92       	push	r15
    41de:	0f 93       	push	r16
    41e0:	1f 93       	push	r17
    41e2:	cf 93       	push	r28
    41e4:	df 93       	push	r29
    41e6:	6c 01       	movw	r12, r24
    41e8:	8b 01       	movw	r16, r22
    41ea:	ba 01       	movw	r22, r20
	char* data_str=utils.int2binstr(data,BUS_WIDTH);
    41ec:	48 e0       	ldi	r20, 0x08	; 8
    41ee:	50 e0       	ldi	r21, 0x00	; 0
    41f0:	8b 52       	subi	r24, 0x2B	; 43
    41f2:	9f 4f       	sbci	r25, 0xFF	; 255
    41f4:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <_ZN5Utils10int2binstrEii>
    41f8:	d8 2f       	mov	r29, r24
    41fa:	c9 2f       	mov	r28, r25
	strrev(data_str);
    41fc:	0e 94 77 36 	call	0x6cee	; 0x6cee <strrev>
    4200:	ed 2e       	mov	r14, r29
    4202:	fc 2e       	mov	r15, r28
	int address_offset=address*BUS_WIDTH;
    4204:	00 0f       	add	r16, r16
    4206:	11 1f       	adc	r17, r17
    4208:	00 0f       	add	r16, r16
    420a:	11 1f       	adc	r17, r17
    420c:	00 0f       	add	r16, r16
    420e:	11 1f       	adc	r17, r17
	
	for(int i=0;i<BUS_WIDTH;i++)
    4210:	c0 e0       	ldi	r28, 0x00	; 0
    4212:	d0 e0       	ldi	r29, 0x00	; 0
		if(data_str[i]=='1') write(address_offset+i,THE,180);
    4214:	f7 01       	movw	r30, r14
    4216:	81 91       	ld	r24, Z+
    4218:	7f 01       	movw	r14, r30
    421a:	81 33       	cpi	r24, 0x31	; 49
    421c:	49 f4       	brne	.+18     	; 0x4230 <_ZN4QEPU12set_registerEii+0x5a>
    421e:	24 eb       	ldi	r18, 0xB4	; 180
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	40 e0       	ldi	r20, 0x00	; 0
    4224:	50 e0       	ldi	r21, 0x00	; 0
    4226:	b8 01       	movw	r22, r16
    4228:	c6 01       	movw	r24, r12
    422a:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    422e:	08 c0       	rjmp	.+16     	; 0x4240 <_ZN4QEPU12set_registerEii+0x6a>
		else write(address_offset+i,THE,0);
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	40 e0       	ldi	r20, 0x00	; 0
    4236:	50 e0       	ldi	r21, 0x00	; 0
    4238:	b8 01       	movw	r22, r16
    423a:	c6 01       	movw	r24, r12
    423c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
void QEPU::set_register(int address,int data){
	char* data_str=utils.int2binstr(data,BUS_WIDTH);
	strrev(data_str);
	int address_offset=address*BUS_WIDTH;
	
	for(int i=0;i<BUS_WIDTH;i++)
    4240:	21 96       	adiw	r28, 0x01	; 1
    4242:	0f 5f       	subi	r16, 0xFF	; 255
    4244:	1f 4f       	sbci	r17, 0xFF	; 255
    4246:	c8 30       	cpi	r28, 0x08	; 8
    4248:	d1 05       	cpc	r29, r1
    424a:	21 f7       	brne	.-56     	; 0x4214 <_ZN4QEPU12set_registerEii+0x3e>
		if(data_str[i]=='1') write(address_offset+i,THE,180);
		else write(address_offset+i,THE,0);
}
    424c:	df 91       	pop	r29
    424e:	cf 91       	pop	r28
    4250:	1f 91       	pop	r17
    4252:	0f 91       	pop	r16
    4254:	ff 90       	pop	r15
    4256:	ef 90       	pop	r14
    4258:	df 90       	pop	r13
    425a:	cf 90       	pop	r12
    425c:	08 95       	ret

0000425e <_ZN4QEPU7executeEilll>:
	serial.writestrln("");
	serial.writestr("The execution of the program has finished");
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2,int32_t op3){
    425e:	2f 92       	push	r2
    4260:	3f 92       	push	r3
    4262:	4f 92       	push	r4
    4264:	5f 92       	push	r5
    4266:	6f 92       	push	r6
    4268:	7f 92       	push	r7
    426a:	8f 92       	push	r8
    426c:	9f 92       	push	r9
    426e:	af 92       	push	r10
    4270:	bf 92       	push	r11
    4272:	cf 92       	push	r12
    4274:	df 92       	push	r13
    4276:	ef 92       	push	r14
    4278:	ff 92       	push	r15
    427a:	0f 93       	push	r16
    427c:	1f 93       	push	r17
    427e:	cf 93       	push	r28
    4280:	df 93       	push	r29
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	2a 97       	sbiw	r28, 0x0a	; 10
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
    4292:	4c 01       	movw	r8, r24
    4294:	1b 01       	movw	r2, r22
    4296:	29 01       	movw	r4, r18
    4298:	3a 01       	movw	r6, r20
    429a:	e9 82       	std	Y+1, r14	; 0x01
    429c:	fa 82       	std	Y+2, r15	; 0x02
    429e:	0b 83       	std	Y+3, r16	; 0x03
    42a0:	1c 83       	std	Y+4, r17	; 0x04
    42a2:	ad 82       	std	Y+5, r10	; 0x05
    42a4:	be 82       	std	Y+6, r11	; 0x06
    42a6:	cf 82       	std	Y+7, r12	; 0x07
    42a8:	d8 86       	std	Y+8, r13	; 0x08
	int * newthephi=(int*)malloc(sizeof(int)*MAX_NEWTHEPHI);
    42aa:	8c e0       	ldi	r24, 0x0C	; 12
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	0e 94 b6 33 	call	0x676c	; 0x676c <malloc>
    42b2:	8c 01       	movw	r16, r24
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    42b4:	f1 01       	movw	r30, r2
    42b6:	31 97       	sbiw	r30, 0x01	; 1
    42b8:	e1 35       	cpi	r30, 0x51	; 81
    42ba:	f1 05       	cpc	r31, r1
    42bc:	10 f0       	brcs	.+4      	; 0x42c2 <_ZN4QEPU7executeEilll+0x64>
    42be:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
    42c2:	e6 5d       	subi	r30, 0xD6	; 214
    42c4:	ff 4f       	sbci	r31, 0xFF	; 255
    42c6:	0c 94 7a 33 	jmp	0x66f4	; 0x66f4 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOQ (move qubit) */
			write(op1,THE,read(op2,THE,false));
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	40 e0       	ldi	r20, 0x00	; 0
    42ce:	50 e0       	ldi	r21, 0x00	; 0
    42d0:	69 81       	ldd	r22, Y+1	; 0x01
    42d2:	7a 81       	ldd	r23, Y+2	; 0x02
    42d4:	c4 01       	movw	r24, r8
    42d6:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    42da:	9c 01       	movw	r18, r24
    42dc:	40 e0       	ldi	r20, 0x00	; 0
    42de:	50 e0       	ldi	r21, 0x00	; 0
    42e0:	b2 01       	movw	r22, r4
    42e2:	c4 01       	movw	r24, r8
    42e4:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI,false));
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	41 e0       	ldi	r20, 0x01	; 1
    42ec:	50 e0       	ldi	r21, 0x00	; 0
    42ee:	69 81       	ldd	r22, Y+1	; 0x01
    42f0:	7a 81       	ldd	r23, Y+2	; 0x02
    42f2:	c4 01       	movw	r24, r8
    42f4:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    42f8:	9c 01       	movw	r18, r24
    42fa:	41 e0       	ldi	r20, 0x01	; 1
    42fc:	50 e0       	ldi	r21, 0x00	; 0
    42fe:	b2 01       	movw	r22, r4
    4300:	c4 01       	movw	r24, r8
    4302:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4306:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x02: /*MOR (move register)*/
			set_register(op1,fetch_register(op1)); // TOUCH ITSELF 1ST
    430a:	b2 01       	movw	r22, r4
    430c:	c4 01       	movw	r24, r8
    430e:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    4312:	ac 01       	movw	r20, r24
    4314:	b2 01       	movw	r22, r4
    4316:	c4 01       	movw	r24, r8
    4318:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN4QEPU12set_registerEii>
			set_register(op1,fetch_register(op2)); // MOVE TO THE NEW REGISTER (IF IT NEEDS TO BE UNTOUCHED IT NEEDS TO USE MATRICES INSTEAD)
    431c:	69 81       	ldd	r22, Y+1	; 0x01
    431e:	7a 81       	ldd	r23, Y+2	; 0x02
    4320:	c4 01       	movw	r24, r8
    4322:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    4326:	ac 01       	movw	r20, r24
    4328:	b2 01       	movw	r22, r4
    432a:	c4 01       	movw	r24, r8
    432c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN4QEPU12set_registerEii>
			break;
    4330:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x03: /*MOM (move memory)*/
			sram.write(op1,sram.read(op2));
    4334:	23 e0       	ldi	r18, 0x03	; 3
    4336:	82 0e       	add	r8, r18
    4338:	91 1c       	adc	r9, r1
    433a:	69 81       	ldd	r22, Y+1	; 0x01
    433c:	7a 81       	ldd	r23, Y+2	; 0x02
    433e:	c4 01       	movw	r24, r8
    4340:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4344:	48 2f       	mov	r20, r24
    4346:	55 27       	eor	r21, r21
    4348:	47 fd       	sbrc	r20, 7
    434a:	50 95       	com	r21
    434c:	b2 01       	movw	r22, r4
    434e:	c4 01       	movw	r24, r8
    4350:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4354:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x04: /*STR (store)*/
			sram.write(op1,fetch_register(op2));
    4358:	69 81       	ldd	r22, Y+1	; 0x01
    435a:	7a 81       	ldd	r23, Y+2	; 0x02
    435c:	c4 01       	movw	r24, r8
    435e:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    4362:	ac 01       	movw	r20, r24
    4364:	b2 01       	movw	r22, r4
    4366:	c4 01       	movw	r24, r8
    4368:	03 96       	adiw	r24, 0x03	; 3
    436a:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    436e:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x05: /*LOD (load)*/
			set_register(op1,sram.read(op2));
    4372:	69 81       	ldd	r22, Y+1	; 0x01
    4374:	7a 81       	ldd	r23, Y+2	; 0x02
    4376:	c4 01       	movw	r24, r8
    4378:	03 96       	adiw	r24, 0x03	; 3
    437a:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    437e:	48 2f       	mov	r20, r24
    4380:	55 27       	eor	r21, r21
    4382:	47 fd       	sbrc	r20, 7
    4384:	50 95       	com	r21
    4386:	b2 01       	movw	r22, r4
    4388:	c4 01       	movw	r24, r8
    438a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN4QEPU12set_registerEii>
			break;
    438e:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x06: /*CRW (Constant Ram Write)*/
			sram.write(op1,op2);
    4392:	49 81       	ldd	r20, Y+1	; 0x01
    4394:	5a 81       	ldd	r21, Y+2	; 0x02
    4396:	b2 01       	movw	r22, r4
    4398:	c4 01       	movw	r24, r8
    439a:	03 96       	adiw	r24, 0x03	; 3
    439c:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    43a0:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x07: /*CQW* (Constant Qubit Write)*/
			set_register(op1,op2);
    43a4:	49 81       	ldd	r20, Y+1	; 0x01
    43a6:	5a 81       	ldd	r21, Y+2	; 0x02
    43a8:	b2 01       	movw	r22, r4
    43aa:	c4 01       	movw	r24, r8
    43ac:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN4QEPU12set_registerEii>
			break;
    43b0:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x08: /*POP (pop)*/
			set_register(op1,sram.pop());
    43b4:	c4 01       	movw	r24, r8
    43b6:	03 96       	adiw	r24, 0x03	; 3
    43b8:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <_ZN4SRAM3popEv>
    43bc:	ac 01       	movw	r20, r24
    43be:	b2 01       	movw	r22, r4
    43c0:	c4 01       	movw	r24, r8
    43c2:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN4QEPU12set_registerEii>
			break;
    43c6:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x09: /*PSH (push)*/
			sram.push(fetch_register(op1));
    43ca:	b2 01       	movw	r22, r4
    43cc:	c4 01       	movw	r24, r8
    43ce:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    43d2:	bc 01       	movw	r22, r24
    43d4:	c4 01       	movw	r24, r8
    43d6:	03 96       	adiw	r24, 0x03	; 3
    43d8:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <_ZN4SRAM4pushEi>
			break;
    43dc:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x0A: /*CMT (constantmovtheta)*/
			write(op1,THE,op2);
    43e0:	29 81       	ldd	r18, Y+1	; 0x01
    43e2:	3a 81       	ldd	r19, Y+2	; 0x02
    43e4:	40 e0       	ldi	r20, 0x00	; 0
    43e6:	50 e0       	ldi	r21, 0x00	; 0
    43e8:	b2 01       	movw	r22, r4
    43ea:	c4 01       	movw	r24, r8
    43ec:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    43f0:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x0B: /*CMP (constantmovphi)*/
			write(op1,PHI,op2);
    43f4:	29 81       	ldd	r18, Y+1	; 0x01
    43f6:	3a 81       	ldd	r19, Y+2	; 0x02
    43f8:	41 e0       	ldi	r20, 0x01	; 1
    43fa:	50 e0       	ldi	r21, 0x00	; 0
    43fc:	b2 01       	movw	r22, r4
    43fe:	c4 01       	movw	r24, r8
    4400:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4404:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x0C: /*CME (compare)*/
			flags.compare(fetch_register(op1),fetch_register(op2));
    4408:	69 81       	ldd	r22, Y+1	; 0x01
    440a:	7a 81       	ldd	r23, Y+2	; 0x02
    440c:	c4 01       	movw	r24, r8
    440e:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    4412:	7c 01       	movw	r14, r24
    4414:	b2 01       	movw	r22, r4
    4416:	c4 01       	movw	r24, r8
    4418:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN4QEPU14fetch_registerEi>
    441c:	b7 01       	movw	r22, r14
    441e:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN4QEPU4Flag7compareEii>
			break;
    4422:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x0D: /*SEF (SET FLAG)*/
			flags.flaglist[op1]=op2;
    4426:	f2 01       	movw	r30, r4
    4428:	e2 51       	subi	r30, 0x12	; 18
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	39 81       	ldd	r19, Y+1	; 0x01
    442e:	30 83       	st	Z, r19
			break;
    4430:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x0E: /*GEF (GET FLAG)*/
			sram.write(op1,flags.flaglist[op2]);
    4434:	e9 81       	ldd	r30, Y+1	; 0x01
    4436:	fa 81       	ldd	r31, Y+2	; 0x02
    4438:	e2 51       	subi	r30, 0x12	; 18
    443a:	ff 4f       	sbci	r31, 0xFF	; 255
    443c:	40 81       	ld	r20, Z
    443e:	55 27       	eor	r21, r21
    4440:	47 fd       	sbrc	r20, 7
    4442:	50 95       	com	r21
    4444:	b2 01       	movw	r22, r4
    4446:	c4 01       	movw	r24, r8
    4448:	03 96       	adiw	r24, 0x03	; 3
    444a:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    444e:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		/*IMPLEMENT CONDICIONAL/INCONDICIONAL BRANCHES HERE*/
		case 0x0F: /*BES (branch enable stack)*/
			flags.flaglist[ALLOW_BRANCH_STACK]=op1;
    4452:	40 92 f6 00 	sts	0x00F6, r4
			break;
    4456:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x10: /*BLW (branch if lower (with jumpstack))*/
			if(flags.flaglist[CND_LWER]){
    445a:	80 91 ee 00 	lds	r24, 0x00EE
    445e:	88 23       	and	r24, r24
    4460:	11 f4       	brne	.+4      	; 0x4466 <_ZN4QEPU7executeEilll+0x208>
    4462:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
				jumpstack.push(program_counter+1);
    4466:	74 01       	movw	r14, r8
    4468:	86 ed       	ldi	r24, 0xD6	; 214
    446a:	e8 0e       	add	r14, r24
    446c:	f1 1c       	adc	r15, r1
    446e:	d7 01       	movw	r26, r14
    4470:	6d 91       	ld	r22, X+
    4472:	7c 91       	ld	r23, X
    4474:	6f 5f       	subi	r22, 0xFF	; 255
    4476:	7f 4f       	sbci	r23, 0xFF	; 255
    4478:	c4 01       	movw	r24, r8
    447a:	0b 96       	adiw	r24, 0x0b	; 11
    447c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4480:	b1 e0       	ldi	r27, 0x01	; 1
    4482:	4b 1a       	sub	r4, r27
    4484:	51 08       	sbc	r5, r1
    4486:	f7 01       	movw	r30, r14
    4488:	51 82       	std	Z+1, r5	; 0x01
    448a:	40 82       	st	Z, r4
    448c:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
				jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x11: /*BLE (branch if lower or equal (with jumpstack))*/
			if(flags.flaglist[CND_LWER_EQUAL]){
    4490:	80 91 ef 00 	lds	r24, 0x00EF
    4494:	88 23       	and	r24, r24
    4496:	11 f4       	brne	.+4      	; 0x449c <_ZN4QEPU7executeEilll+0x23e>
    4498:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    449c:	80 91 f6 00 	lds	r24, 0x00F6
    44a0:	88 23       	and	r24, r24
    44a2:	59 f0       	breq	.+22     	; 0x44ba <_ZN4QEPU7executeEilll+0x25c>
					jumpstack.push(program_counter+1);
    44a4:	f4 01       	movw	r30, r8
    44a6:	ea 52       	subi	r30, 0x2A	; 42
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	60 81       	ld	r22, Z
    44ac:	71 81       	ldd	r23, Z+1	; 0x01
    44ae:	6f 5f       	subi	r22, 0xFF	; 255
    44b0:	7f 4f       	sbci	r23, 0xFF	; 255
    44b2:	c4 01       	movw	r24, r8
    44b4:	0b 96       	adiw	r24, 0x0b	; 11
    44b6:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    44ba:	f4 01       	movw	r30, r8
    44bc:	ea 52       	subi	r30, 0x2A	; 42
    44be:	ff 4f       	sbci	r31, 0xFF	; 255
    44c0:	21 e0       	ldi	r18, 0x01	; 1
    44c2:	42 1a       	sub	r4, r18
    44c4:	51 08       	sbc	r5, r1
    44c6:	51 82       	std	Z+1, r5	; 0x01
    44c8:	40 82       	st	Z, r4
    44ca:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x12: /*BEQ (branch if equal) (with jumpstack)*/
			if(flags.flaglist[CND_EQUAL]){
    44ce:	80 91 f0 00 	lds	r24, 0x00F0
    44d2:	88 23       	and	r24, r24
    44d4:	11 f4       	brne	.+4      	; 0x44da <_ZN4QEPU7executeEilll+0x27c>
    44d6:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    44da:	80 91 f6 00 	lds	r24, 0x00F6
    44de:	88 23       	and	r24, r24
    44e0:	59 f0       	breq	.+22     	; 0x44f8 <_ZN4QEPU7executeEilll+0x29a>
					jumpstack.push(program_counter+1);
    44e2:	f4 01       	movw	r30, r8
    44e4:	ea 52       	subi	r30, 0x2A	; 42
    44e6:	ff 4f       	sbci	r31, 0xFF	; 255
    44e8:	60 81       	ld	r22, Z
    44ea:	71 81       	ldd	r23, Z+1	; 0x01
    44ec:	6f 5f       	subi	r22, 0xFF	; 255
    44ee:	7f 4f       	sbci	r23, 0xFF	; 255
    44f0:	c4 01       	movw	r24, r8
    44f2:	0b 96       	adiw	r24, 0x0b	; 11
    44f4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    44f8:	f4 01       	movw	r30, r8
    44fa:	ea 52       	subi	r30, 0x2A	; 42
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	31 e0       	ldi	r19, 0x01	; 1
    4500:	43 1a       	sub	r4, r19
    4502:	51 08       	sbc	r5, r1
    4504:	51 82       	std	Z+1, r5	; 0x01
    4506:	40 82       	st	Z, r4
    4508:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x13: /*BGE (branch if greater or equal (with jumpstack))*/
			if(flags.flaglist[CND_GRTER_EQUAL]){
    450c:	80 91 f1 00 	lds	r24, 0x00F1
    4510:	88 23       	and	r24, r24
    4512:	11 f4       	brne	.+4      	; 0x4518 <_ZN4QEPU7executeEilll+0x2ba>
    4514:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4518:	80 91 f6 00 	lds	r24, 0x00F6
    451c:	88 23       	and	r24, r24
    451e:	59 f0       	breq	.+22     	; 0x4536 <_ZN4QEPU7executeEilll+0x2d8>
					jumpstack.push(program_counter+1);
    4520:	f4 01       	movw	r30, r8
    4522:	ea 52       	subi	r30, 0x2A	; 42
    4524:	ff 4f       	sbci	r31, 0xFF	; 255
    4526:	60 81       	ld	r22, Z
    4528:	71 81       	ldd	r23, Z+1	; 0x01
    452a:	6f 5f       	subi	r22, 0xFF	; 255
    452c:	7f 4f       	sbci	r23, 0xFF	; 255
    452e:	c4 01       	movw	r24, r8
    4530:	0b 96       	adiw	r24, 0x0b	; 11
    4532:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4536:	f4 01       	movw	r30, r8
    4538:	ea 52       	subi	r30, 0x2A	; 42
    453a:	ff 4f       	sbci	r31, 0xFF	; 255
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	48 1a       	sub	r4, r24
    4540:	51 08       	sbc	r5, r1
    4542:	51 82       	std	Z+1, r5	; 0x01
    4544:	40 82       	st	Z, r4
    4546:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x14: /*BGR (branch if greater (with jumpstack))*/
			if(flags.flaglist[CND_GRTER]){
    454a:	80 91 f2 00 	lds	r24, 0x00F2
    454e:	88 23       	and	r24, r24
    4550:	11 f4       	brne	.+4      	; 0x4556 <_ZN4QEPU7executeEilll+0x2f8>
    4552:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4556:	80 91 f6 00 	lds	r24, 0x00F6
    455a:	88 23       	and	r24, r24
    455c:	59 f0       	breq	.+22     	; 0x4574 <_ZN4QEPU7executeEilll+0x316>
					jumpstack.push(program_counter+1);
    455e:	f4 01       	movw	r30, r8
    4560:	ea 52       	subi	r30, 0x2A	; 42
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	60 81       	ld	r22, Z
    4566:	71 81       	ldd	r23, Z+1	; 0x01
    4568:	6f 5f       	subi	r22, 0xFF	; 255
    456a:	7f 4f       	sbci	r23, 0xFF	; 255
    456c:	c4 01       	movw	r24, r8
    456e:	0b 96       	adiw	r24, 0x0b	; 11
    4570:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4574:	f4 01       	movw	r30, r8
    4576:	ea 52       	subi	r30, 0x2A	; 42
    4578:	ff 4f       	sbci	r31, 0xFF	; 255
    457a:	91 e0       	ldi	r25, 0x01	; 1
    457c:	49 1a       	sub	r4, r25
    457e:	51 08       	sbc	r5, r1
    4580:	51 82       	std	Z+1, r5	; 0x01
    4582:	40 82       	st	Z, r4
    4584:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x15: /*BDI (branch if different (with jumpstack))*/
			if(flags.flaglist[CND_DIFF]){
    4588:	80 91 f3 00 	lds	r24, 0x00F3
    458c:	88 23       	and	r24, r24
    458e:	11 f4       	brne	.+4      	; 0x4594 <_ZN4QEPU7executeEilll+0x336>
    4590:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4594:	80 91 f6 00 	lds	r24, 0x00F6
    4598:	88 23       	and	r24, r24
    459a:	59 f0       	breq	.+22     	; 0x45b2 <_ZN4QEPU7executeEilll+0x354>
					jumpstack.push(program_counter+1);
    459c:	f4 01       	movw	r30, r8
    459e:	ea 52       	subi	r30, 0x2A	; 42
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	60 81       	ld	r22, Z
    45a4:	71 81       	ldd	r23, Z+1	; 0x01
    45a6:	6f 5f       	subi	r22, 0xFF	; 255
    45a8:	7f 4f       	sbci	r23, 0xFF	; 255
    45aa:	c4 01       	movw	r24, r8
    45ac:	0b 96       	adiw	r24, 0x0b	; 11
    45ae:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    45b2:	f4 01       	movw	r30, r8
    45b4:	ea 52       	subi	r30, 0x2A	; 42
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	a1 e0       	ldi	r26, 0x01	; 1
    45ba:	4a 1a       	sub	r4, r26
    45bc:	51 08       	sbc	r5, r1
    45be:	51 82       	std	Z+1, r5	; 0x01
    45c0:	40 82       	st	Z, r4
    45c2:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x16: /*BZE (branch if register(op1)=0 (zero) (with jumpstack))*/
			if(flags.flaglist[CND_ZERO]){
    45c6:	80 91 f4 00 	lds	r24, 0x00F4
    45ca:	88 23       	and	r24, r24
    45cc:	11 f4       	brne	.+4      	; 0x45d2 <_ZN4QEPU7executeEilll+0x374>
    45ce:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    45d2:	80 91 f6 00 	lds	r24, 0x00F6
    45d6:	88 23       	and	r24, r24
    45d8:	59 f0       	breq	.+22     	; 0x45f0 <_ZN4QEPU7executeEilll+0x392>
					jumpstack.push(program_counter+1);
    45da:	f4 01       	movw	r30, r8
    45dc:	ea 52       	subi	r30, 0x2A	; 42
    45de:	ff 4f       	sbci	r31, 0xFF	; 255
    45e0:	60 81       	ld	r22, Z
    45e2:	71 81       	ldd	r23, Z+1	; 0x01
    45e4:	6f 5f       	subi	r22, 0xFF	; 255
    45e6:	7f 4f       	sbci	r23, 0xFF	; 255
    45e8:	c4 01       	movw	r24, r8
    45ea:	0b 96       	adiw	r24, 0x0b	; 11
    45ec:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    45f0:	f4 01       	movw	r30, r8
    45f2:	ea 52       	subi	r30, 0x2A	; 42
    45f4:	ff 4f       	sbci	r31, 0xFF	; 255
    45f6:	b1 e0       	ldi	r27, 0x01	; 1
    45f8:	4b 1a       	sub	r4, r27
    45fa:	51 08       	sbc	r5, r1
    45fc:	51 82       	std	Z+1, r5	; 0x01
    45fe:	40 82       	st	Z, r4
    4600:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x17: /*BNZ (branch if register(op1)!=0 (not zero) (with jumpstack))*/
			if(flags.flaglist[CND_NOT_ZERO]){
    4604:	80 91 f5 00 	lds	r24, 0x00F5
    4608:	88 23       	and	r24, r24
    460a:	11 f4       	brne	.+4      	; 0x4610 <_ZN4QEPU7executeEilll+0x3b2>
    460c:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4610:	80 91 f6 00 	lds	r24, 0x00F6
    4614:	88 23       	and	r24, r24
    4616:	59 f0       	breq	.+22     	; 0x462e <_ZN4QEPU7executeEilll+0x3d0>
					jumpstack.push(program_counter+1);
    4618:	f4 01       	movw	r30, r8
    461a:	ea 52       	subi	r30, 0x2A	; 42
    461c:	ff 4f       	sbci	r31, 0xFF	; 255
    461e:	60 81       	ld	r22, Z
    4620:	71 81       	ldd	r23, Z+1	; 0x01
    4622:	6f 5f       	subi	r22, 0xFF	; 255
    4624:	7f 4f       	sbci	r23, 0xFF	; 255
    4626:	c4 01       	movw	r24, r8
    4628:	0b 96       	adiw	r24, 0x0b	; 11
    462a:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    462e:	f4 01       	movw	r30, r8
    4630:	ea 52       	subi	r30, 0x2A	; 42
    4632:	ff 4f       	sbci	r31, 0xFF	; 255
    4634:	21 e0       	ldi	r18, 0x01	; 1
    4636:	42 1a       	sub	r4, r18
    4638:	51 08       	sbc	r5, r1
    463a:	51 82       	std	Z+1, r5	; 0x01
    463c:	40 82       	st	Z, r4
    463e:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x18: /*CALL (incondicional branch WITH jumpstack)*/
			jumpstack.push(program_counter+1);
    4642:	74 01       	movw	r14, r8
    4644:	36 ed       	ldi	r19, 0xD6	; 214
    4646:	e3 0e       	add	r14, r19
    4648:	f1 1c       	adc	r15, r1
    464a:	d7 01       	movw	r26, r14
    464c:	6d 91       	ld	r22, X+
    464e:	7c 91       	ld	r23, X
    4650:	6f 5f       	subi	r22, 0xFF	; 255
    4652:	7f 4f       	sbci	r23, 0xFF	; 255
    4654:	c4 01       	movw	r24, r8
    4656:	0b 96       	adiw	r24, 0x0b	; 11
    4658:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    465c:	b1 e0       	ldi	r27, 0x01	; 1
    465e:	4b 1a       	sub	r4, r27
    4660:	51 08       	sbc	r5, r1
    4662:	f7 01       	movw	r30, r14
    4664:	51 82       	std	Z+1, r5	; 0x01
    4666:	40 82       	st	Z, r4
    4668:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x18: /*CALL (incondicional branch WITH jumpstack)*/
			jumpstack.push(program_counter+1);
			set_programcounter(op1);
			break;
		case 0x19: /*RET (return)*/
			set_programcounter(jumpstack.pop());
    466c:	c4 01       	movw	r24, r8
    466e:	0b 96       	adiw	r24, 0x0b	; 11
    4670:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <_ZN4QEPU9Jumpstack3popEv>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4674:	f4 01       	movw	r30, r8
    4676:	ea 52       	subi	r30, 0x2A	; 42
    4678:	ff 4f       	sbci	r31, 0xFF	; 255
    467a:	01 97       	sbiw	r24, 0x01	; 1
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
    4684:	f4 01       	movw	r30, r8
    4686:	ea 52       	subi	r30, 0x2A	; 42
    4688:	ff 4f       	sbci	r31, 0xFF	; 255
    468a:	21 e0       	ldi	r18, 0x01	; 1
    468c:	42 1a       	sub	r4, r18
    468e:	51 08       	sbc	r5, r1
    4690:	51 82       	std	Z+1, r5	; 0x01
    4692:	40 82       	st	Z, r4
    4694:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x1A: /*JMP (jump (incondicional branch WITHOUT jumpstack))*/
			set_programcounter(op1);
			break;
		/*IMPLEMENT LOGIC AND ARITHMETIC (CLASSICAL) CALCULATIONS HERE*/
		case 0x1B: /*ADD*/
			sram.write(op1,sram.read(op2)+sram.read(op3));
    4698:	33 e0       	ldi	r19, 0x03	; 3
    469a:	83 0e       	add	r8, r19
    469c:	91 1c       	adc	r9, r1
    469e:	69 81       	ldd	r22, Y+1	; 0x01
    46a0:	7a 81       	ldd	r23, Y+2	; 0x02
    46a2:	c4 01       	movw	r24, r8
    46a4:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    46a8:	f8 2e       	mov	r15, r24
    46aa:	6d 81       	ldd	r22, Y+5	; 0x05
    46ac:	7e 81       	ldd	r23, Y+6	; 0x06
    46ae:	c4 01       	movw	r24, r8
    46b0:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    46b4:	48 2f       	mov	r20, r24
    46b6:	55 27       	eor	r21, r21
    46b8:	47 fd       	sbrc	r20, 7
    46ba:	50 95       	com	r21
    46bc:	4f 0d       	add	r20, r15
    46be:	51 1d       	adc	r21, r1
    46c0:	f7 fc       	sbrc	r15, 7
    46c2:	5a 95       	dec	r21
    46c4:	b2 01       	movw	r22, r4
    46c6:	c4 01       	movw	r24, r8
    46c8:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    46cc:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x1C: /*ADD RK (add reg const)*/
			sram.write(op1,sram.read(op2)+op3);
    46d0:	83 e0       	ldi	r24, 0x03	; 3
    46d2:	88 0e       	add	r8, r24
    46d4:	91 1c       	adc	r9, r1
    46d6:	69 81       	ldd	r22, Y+1	; 0x01
    46d8:	7a 81       	ldd	r23, Y+2	; 0x02
    46da:	c4 01       	movw	r24, r8
    46dc:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    46e0:	48 2f       	mov	r20, r24
    46e2:	55 27       	eor	r21, r21
    46e4:	47 fd       	sbrc	r20, 7
    46e6:	50 95       	com	r21
    46e8:	ad 81       	ldd	r26, Y+5	; 0x05
    46ea:	be 81       	ldd	r27, Y+6	; 0x06
    46ec:	4a 0f       	add	r20, r26
    46ee:	5b 1f       	adc	r21, r27
    46f0:	b2 01       	movw	r22, r4
    46f2:	c4 01       	movw	r24, r8
    46f4:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    46f8:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x1D: /*SUB*/
			sram.write(op1,sram.read(op2)-sram.read(op3));
    46fc:	b3 e0       	ldi	r27, 0x03	; 3
    46fe:	8b 0e       	add	r8, r27
    4700:	91 1c       	adc	r9, r1
    4702:	69 81       	ldd	r22, Y+1	; 0x01
    4704:	7a 81       	ldd	r23, Y+2	; 0x02
    4706:	c4 01       	movw	r24, r8
    4708:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    470c:	f8 2e       	mov	r15, r24
    470e:	6d 81       	ldd	r22, Y+5	; 0x05
    4710:	7e 81       	ldd	r23, Y+6	; 0x06
    4712:	c4 01       	movw	r24, r8
    4714:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4718:	4f 2d       	mov	r20, r15
    471a:	55 27       	eor	r21, r21
    471c:	47 fd       	sbrc	r20, 7
    471e:	50 95       	com	r21
    4720:	48 1b       	sub	r20, r24
    4722:	51 09       	sbc	r21, r1
    4724:	87 fd       	sbrc	r24, 7
    4726:	53 95       	inc	r21
    4728:	b2 01       	movw	r22, r4
    472a:	c4 01       	movw	r24, r8
    472c:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4730:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x1E: /*SUB RK (sub reg const)*/
			sram.write(op1,sram.read(op2)-op3);
    4734:	e3 e0       	ldi	r30, 0x03	; 3
    4736:	8e 0e       	add	r8, r30
    4738:	91 1c       	adc	r9, r1
    473a:	69 81       	ldd	r22, Y+1	; 0x01
    473c:	7a 81       	ldd	r23, Y+2	; 0x02
    473e:	c4 01       	movw	r24, r8
    4740:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4744:	48 2f       	mov	r20, r24
    4746:	55 27       	eor	r21, r21
    4748:	47 fd       	sbrc	r20, 7
    474a:	50 95       	com	r21
    474c:	2d 81       	ldd	r18, Y+5	; 0x05
    474e:	3e 81       	ldd	r19, Y+6	; 0x06
    4750:	42 1b       	sub	r20, r18
    4752:	53 0b       	sbc	r21, r19
    4754:	b2 01       	movw	r22, r4
    4756:	c4 01       	movw	r24, r8
    4758:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    475c:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x1F: /*SUB KR (sub const reg)*/
			sram.write(op1,op2-sram.read(op3));
    4760:	33 e0       	ldi	r19, 0x03	; 3
    4762:	83 0e       	add	r8, r19
    4764:	91 1c       	adc	r9, r1
    4766:	6d 81       	ldd	r22, Y+5	; 0x05
    4768:	7e 81       	ldd	r23, Y+6	; 0x06
    476a:	c4 01       	movw	r24, r8
    476c:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4770:	99 27       	eor	r25, r25
    4772:	87 fd       	sbrc	r24, 7
    4774:	90 95       	com	r25
    4776:	49 81       	ldd	r20, Y+1	; 0x01
    4778:	5a 81       	ldd	r21, Y+2	; 0x02
    477a:	48 1b       	sub	r20, r24
    477c:	59 0b       	sbc	r21, r25
    477e:	b2 01       	movw	r22, r4
    4780:	c4 01       	movw	r24, r8
    4782:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4786:	ed c7       	rjmp	.+4058   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x20: /*MUL*/
			sram.write(op1,sram.read(op2)*sram.read(op3));
    4788:	83 e0       	ldi	r24, 0x03	; 3
    478a:	88 0e       	add	r8, r24
    478c:	91 1c       	adc	r9, r1
    478e:	69 81       	ldd	r22, Y+1	; 0x01
    4790:	7a 81       	ldd	r23, Y+2	; 0x02
    4792:	c4 01       	movw	r24, r8
    4794:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4798:	f8 2e       	mov	r15, r24
    479a:	6d 81       	ldd	r22, Y+5	; 0x05
    479c:	7e 81       	ldd	r23, Y+6	; 0x06
    479e:	c4 01       	movw	r24, r8
    47a0:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    47a4:	9f 2d       	mov	r25, r15
    47a6:	98 02       	muls	r25, r24
    47a8:	a0 01       	movw	r20, r0
    47aa:	11 24       	eor	r1, r1
    47ac:	b2 01       	movw	r22, r4
    47ae:	c4 01       	movw	r24, r8
    47b0:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    47b4:	d6 c7       	rjmp	.+4012   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x21: /*MUL RK (mul reg const)*/
			sram.write(op1,sram.read(op2)*op3);
    47b6:	a3 e0       	ldi	r26, 0x03	; 3
    47b8:	8a 0e       	add	r8, r26
    47ba:	91 1c       	adc	r9, r1
    47bc:	69 81       	ldd	r22, Y+1	; 0x01
    47be:	7a 81       	ldd	r23, Y+2	; 0x02
    47c0:	c4 01       	movw	r24, r8
    47c2:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    47c6:	99 27       	eor	r25, r25
    47c8:	87 fd       	sbrc	r24, 7
    47ca:	90 95       	com	r25
    47cc:	ed 81       	ldd	r30, Y+5	; 0x05
    47ce:	fe 81       	ldd	r31, Y+6	; 0x06
    47d0:	8e 9f       	mul	r24, r30
    47d2:	a0 01       	movw	r20, r0
    47d4:	8f 9f       	mul	r24, r31
    47d6:	50 0d       	add	r21, r0
    47d8:	9e 9f       	mul	r25, r30
    47da:	50 0d       	add	r21, r0
    47dc:	11 24       	eor	r1, r1
    47de:	b2 01       	movw	r22, r4
    47e0:	c4 01       	movw	r24, r8
    47e2:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    47e6:	bd c7       	rjmp	.+3962   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x22: /*DIV*/
			sram.write(op1,sram.read(op2)/sram.read(op3));
    47e8:	f3 e0       	ldi	r31, 0x03	; 3
    47ea:	8f 0e       	add	r8, r31
    47ec:	91 1c       	adc	r9, r1
    47ee:	69 81       	ldd	r22, Y+1	; 0x01
    47f0:	7a 81       	ldd	r23, Y+2	; 0x02
    47f2:	c4 01       	movw	r24, r8
    47f4:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    47f8:	f8 2e       	mov	r15, r24
    47fa:	6d 81       	ldd	r22, Y+5	; 0x05
    47fc:	7e 81       	ldd	r23, Y+6	; 0x06
    47fe:	c4 01       	movw	r24, r8
    4800:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4804:	68 2f       	mov	r22, r24
    4806:	8f 2d       	mov	r24, r15
    4808:	99 27       	eor	r25, r25
    480a:	87 fd       	sbrc	r24, 7
    480c:	90 95       	com	r25
    480e:	77 27       	eor	r23, r23
    4810:	67 fd       	sbrc	r22, 7
    4812:	70 95       	com	r23
    4814:	0e 94 47 33 	call	0x668e	; 0x668e <__divmodhi4>
    4818:	ab 01       	movw	r20, r22
    481a:	b2 01       	movw	r22, r4
    481c:	c4 01       	movw	r24, r8
    481e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4822:	9f c7       	rjmp	.+3902   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x23: /*DIV RK (div reg const)*/
			sram.write(op1,sram.read(op2)/op3);
    4824:	23 e0       	ldi	r18, 0x03	; 3
    4826:	82 0e       	add	r8, r18
    4828:	91 1c       	adc	r9, r1
    482a:	69 81       	ldd	r22, Y+1	; 0x01
    482c:	7a 81       	ldd	r23, Y+2	; 0x02
    482e:	c4 01       	movw	r24, r8
    4830:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4834:	68 2f       	mov	r22, r24
    4836:	77 27       	eor	r23, r23
    4838:	67 fd       	sbrc	r22, 7
    483a:	70 95       	com	r23
    483c:	87 2f       	mov	r24, r23
    483e:	97 2f       	mov	r25, r23
    4840:	2d 81       	ldd	r18, Y+5	; 0x05
    4842:	3e 81       	ldd	r19, Y+6	; 0x06
    4844:	4f 81       	ldd	r20, Y+7	; 0x07
    4846:	58 85       	ldd	r21, Y+8	; 0x08
    4848:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__divmodsi4>
    484c:	a9 01       	movw	r20, r18
    484e:	b2 01       	movw	r22, r4
    4850:	c4 01       	movw	r24, r8
    4852:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4856:	85 c7       	rjmp	.+3850   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x24: /*DIV KR (div const reg)*/
			sram.write(op1,op2/sram.read(op3));
    4858:	33 e0       	ldi	r19, 0x03	; 3
    485a:	83 0e       	add	r8, r19
    485c:	91 1c       	adc	r9, r1
    485e:	6d 81       	ldd	r22, Y+5	; 0x05
    4860:	7e 81       	ldd	r23, Y+6	; 0x06
    4862:	c4 01       	movw	r24, r8
    4864:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4868:	28 2f       	mov	r18, r24
    486a:	33 27       	eor	r19, r19
    486c:	27 fd       	sbrc	r18, 7
    486e:	30 95       	com	r19
    4870:	43 2f       	mov	r20, r19
    4872:	53 2f       	mov	r21, r19
    4874:	69 81       	ldd	r22, Y+1	; 0x01
    4876:	7a 81       	ldd	r23, Y+2	; 0x02
    4878:	8b 81       	ldd	r24, Y+3	; 0x03
    487a:	9c 81       	ldd	r25, Y+4	; 0x04
    487c:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__divmodsi4>
    4880:	a9 01       	movw	r20, r18
    4882:	b2 01       	movw	r22, r4
    4884:	c4 01       	movw	r24, r8
    4886:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    488a:	6b c7       	rjmp	.+3798   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x25: /*AND*/
			sram.write(op1,sram.read(op2)&sram.read(op3));
    488c:	83 e0       	ldi	r24, 0x03	; 3
    488e:	88 0e       	add	r8, r24
    4890:	91 1c       	adc	r9, r1
    4892:	69 81       	ldd	r22, Y+1	; 0x01
    4894:	7a 81       	ldd	r23, Y+2	; 0x02
    4896:	c4 01       	movw	r24, r8
    4898:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    489c:	f8 2e       	mov	r15, r24
    489e:	6d 81       	ldd	r22, Y+5	; 0x05
    48a0:	7e 81       	ldd	r23, Y+6	; 0x06
    48a2:	c4 01       	movw	r24, r8
    48a4:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    48a8:	8f 21       	and	r24, r15
    48aa:	48 2f       	mov	r20, r24
    48ac:	55 27       	eor	r21, r21
    48ae:	47 fd       	sbrc	r20, 7
    48b0:	50 95       	com	r21
    48b2:	b2 01       	movw	r22, r4
    48b4:	c4 01       	movw	r24, r8
    48b6:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    48ba:	53 c7       	rjmp	.+3750   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x26: /*AND RK (and reg const)*/
			sram.write(op1,sram.read(op2)&op3);
    48bc:	93 e0       	ldi	r25, 0x03	; 3
    48be:	89 0e       	add	r8, r25
    48c0:	91 1c       	adc	r9, r1
    48c2:	69 81       	ldd	r22, Y+1	; 0x01
    48c4:	7a 81       	ldd	r23, Y+2	; 0x02
    48c6:	c4 01       	movw	r24, r8
    48c8:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    48cc:	48 2f       	mov	r20, r24
    48ce:	55 27       	eor	r21, r21
    48d0:	47 fd       	sbrc	r20, 7
    48d2:	50 95       	com	r21
    48d4:	ad 81       	ldd	r26, Y+5	; 0x05
    48d6:	be 81       	ldd	r27, Y+6	; 0x06
    48d8:	4a 23       	and	r20, r26
    48da:	5b 23       	and	r21, r27
    48dc:	b2 01       	movw	r22, r4
    48de:	c4 01       	movw	r24, r8
    48e0:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    48e4:	3e c7       	rjmp	.+3708   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x27: /*AND KR (and const reg)*/
			sram.write(op1,op2&sram.read(op3));
    48e6:	b3 e0       	ldi	r27, 0x03	; 3
    48e8:	8b 0e       	add	r8, r27
    48ea:	91 1c       	adc	r9, r1
    48ec:	6d 81       	ldd	r22, Y+5	; 0x05
    48ee:	7e 81       	ldd	r23, Y+6	; 0x06
    48f0:	c4 01       	movw	r24, r8
    48f2:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    48f6:	48 2f       	mov	r20, r24
    48f8:	55 27       	eor	r21, r21
    48fa:	47 fd       	sbrc	r20, 7
    48fc:	50 95       	com	r21
    48fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4900:	fa 81       	ldd	r31, Y+2	; 0x02
    4902:	4e 23       	and	r20, r30
    4904:	5f 23       	and	r21, r31
    4906:	b2 01       	movw	r22, r4
    4908:	c4 01       	movw	r24, r8
    490a:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    490e:	29 c7       	rjmp	.+3666   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x28: /*OR*/
			sram.write(op1,sram.read(op2)|sram.read(op3));
    4910:	f3 e0       	ldi	r31, 0x03	; 3
    4912:	8f 0e       	add	r8, r31
    4914:	91 1c       	adc	r9, r1
    4916:	69 81       	ldd	r22, Y+1	; 0x01
    4918:	7a 81       	ldd	r23, Y+2	; 0x02
    491a:	c4 01       	movw	r24, r8
    491c:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4920:	f8 2e       	mov	r15, r24
    4922:	6d 81       	ldd	r22, Y+5	; 0x05
    4924:	7e 81       	ldd	r23, Y+6	; 0x06
    4926:	c4 01       	movw	r24, r8
    4928:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    492c:	8f 29       	or	r24, r15
    492e:	48 2f       	mov	r20, r24
    4930:	55 27       	eor	r21, r21
    4932:	47 fd       	sbrc	r20, 7
    4934:	50 95       	com	r21
    4936:	b2 01       	movw	r22, r4
    4938:	c4 01       	movw	r24, r8
    493a:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    493e:	11 c7       	rjmp	.+3618   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x29: /*OR RK (or reg const)*/
			sram.write(op1,sram.read(op2)|op3);
    4940:	23 e0       	ldi	r18, 0x03	; 3
    4942:	82 0e       	add	r8, r18
    4944:	91 1c       	adc	r9, r1
    4946:	69 81       	ldd	r22, Y+1	; 0x01
    4948:	7a 81       	ldd	r23, Y+2	; 0x02
    494a:	c4 01       	movw	r24, r8
    494c:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4950:	48 2f       	mov	r20, r24
    4952:	55 27       	eor	r21, r21
    4954:	47 fd       	sbrc	r20, 7
    4956:	50 95       	com	r21
    4958:	8d 81       	ldd	r24, Y+5	; 0x05
    495a:	9e 81       	ldd	r25, Y+6	; 0x06
    495c:	48 2b       	or	r20, r24
    495e:	59 2b       	or	r21, r25
    4960:	b2 01       	movw	r22, r4
    4962:	c4 01       	movw	r24, r8
    4964:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4968:	fc c6       	rjmp	.+3576   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x2A: /*OR KR (or const reg)*/
			sram.write(op1,op2|sram.read(op3));
    496a:	93 e0       	ldi	r25, 0x03	; 3
    496c:	89 0e       	add	r8, r25
    496e:	91 1c       	adc	r9, r1
    4970:	6d 81       	ldd	r22, Y+5	; 0x05
    4972:	7e 81       	ldd	r23, Y+6	; 0x06
    4974:	c4 01       	movw	r24, r8
    4976:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    497a:	48 2f       	mov	r20, r24
    497c:	55 27       	eor	r21, r21
    497e:	47 fd       	sbrc	r20, 7
    4980:	50 95       	com	r21
    4982:	a9 81       	ldd	r26, Y+1	; 0x01
    4984:	ba 81       	ldd	r27, Y+2	; 0x02
    4986:	4a 2b       	or	r20, r26
    4988:	5b 2b       	or	r21, r27
    498a:	b2 01       	movw	r22, r4
    498c:	c4 01       	movw	r24, r8
    498e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4992:	e7 c6       	rjmp	.+3534   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x2B: /*NOR*/
			sram.write(op1,~(sram.read(op2)|sram.read(op3)));
    4994:	b3 e0       	ldi	r27, 0x03	; 3
    4996:	8b 0e       	add	r8, r27
    4998:	91 1c       	adc	r9, r1
    499a:	69 81       	ldd	r22, Y+1	; 0x01
    499c:	7a 81       	ldd	r23, Y+2	; 0x02
    499e:	c4 01       	movw	r24, r8
    49a0:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    49a4:	f8 2e       	mov	r15, r24
    49a6:	6d 81       	ldd	r22, Y+5	; 0x05
    49a8:	7e 81       	ldd	r23, Y+6	; 0x06
    49aa:	c4 01       	movw	r24, r8
    49ac:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    49b0:	8f 29       	or	r24, r15
    49b2:	48 2f       	mov	r20, r24
    49b4:	55 27       	eor	r21, r21
    49b6:	47 fd       	sbrc	r20, 7
    49b8:	50 95       	com	r21
    49ba:	40 95       	com	r20
    49bc:	50 95       	com	r21
    49be:	b2 01       	movw	r22, r4
    49c0:	c4 01       	movw	r24, r8
    49c2:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    49c6:	cd c6       	rjmp	.+3482   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x2C: /*NOR RK (nor reg const)*/
			sram.write(op1,~(sram.read(op2)|op3));
    49c8:	e3 e0       	ldi	r30, 0x03	; 3
    49ca:	8e 0e       	add	r8, r30
    49cc:	91 1c       	adc	r9, r1
    49ce:	69 81       	ldd	r22, Y+1	; 0x01
    49d0:	7a 81       	ldd	r23, Y+2	; 0x02
    49d2:	c4 01       	movw	r24, r8
    49d4:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    49d8:	48 2f       	mov	r20, r24
    49da:	55 27       	eor	r21, r21
    49dc:	47 fd       	sbrc	r20, 7
    49de:	50 95       	com	r21
    49e0:	2d 81       	ldd	r18, Y+5	; 0x05
    49e2:	3e 81       	ldd	r19, Y+6	; 0x06
    49e4:	42 2b       	or	r20, r18
    49e6:	53 2b       	or	r21, r19
    49e8:	40 95       	com	r20
    49ea:	50 95       	com	r21
    49ec:	b2 01       	movw	r22, r4
    49ee:	c4 01       	movw	r24, r8
    49f0:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    49f4:	b6 c6       	rjmp	.+3436   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x2D: /*NOR KR (nor const reg)*/
			sram.write(op1,~(op2|sram.read(op3)));
    49f6:	33 e0       	ldi	r19, 0x03	; 3
    49f8:	83 0e       	add	r8, r19
    49fa:	91 1c       	adc	r9, r1
    49fc:	6d 81       	ldd	r22, Y+5	; 0x05
    49fe:	7e 81       	ldd	r23, Y+6	; 0x06
    4a00:	c4 01       	movw	r24, r8
    4a02:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4a06:	48 2f       	mov	r20, r24
    4a08:	55 27       	eor	r21, r21
    4a0a:	47 fd       	sbrc	r20, 7
    4a0c:	50 95       	com	r21
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	9a 81       	ldd	r25, Y+2	; 0x02
    4a12:	48 2b       	or	r20, r24
    4a14:	59 2b       	or	r21, r25
    4a16:	40 95       	com	r20
    4a18:	50 95       	com	r21
    4a1a:	b2 01       	movw	r22, r4
    4a1c:	c4 01       	movw	r24, r8
    4a1e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4a22:	9f c6       	rjmp	.+3390   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x2E: /*XOR*/
			sram.write(op1,sram.read(op2)^sram.read(op3));
    4a24:	93 e0       	ldi	r25, 0x03	; 3
    4a26:	89 0e       	add	r8, r25
    4a28:	91 1c       	adc	r9, r1
    4a2a:	69 81       	ldd	r22, Y+1	; 0x01
    4a2c:	7a 81       	ldd	r23, Y+2	; 0x02
    4a2e:	c4 01       	movw	r24, r8
    4a30:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4a34:	f8 2e       	mov	r15, r24
    4a36:	6d 81       	ldd	r22, Y+5	; 0x05
    4a38:	7e 81       	ldd	r23, Y+6	; 0x06
    4a3a:	c4 01       	movw	r24, r8
    4a3c:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4a40:	8f 25       	eor	r24, r15
    4a42:	48 2f       	mov	r20, r24
    4a44:	55 27       	eor	r21, r21
    4a46:	47 fd       	sbrc	r20, 7
    4a48:	50 95       	com	r21
    4a4a:	b2 01       	movw	r22, r4
    4a4c:	c4 01       	movw	r24, r8
    4a4e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4a52:	87 c6       	rjmp	.+3342   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x2F: /*XOR RK (xor reg const)*/
			sram.write(op1,sram.read(op2)^op3);
    4a54:	a3 e0       	ldi	r26, 0x03	; 3
    4a56:	8a 0e       	add	r8, r26
    4a58:	91 1c       	adc	r9, r1
    4a5a:	69 81       	ldd	r22, Y+1	; 0x01
    4a5c:	7a 81       	ldd	r23, Y+2	; 0x02
    4a5e:	c4 01       	movw	r24, r8
    4a60:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4a64:	48 2f       	mov	r20, r24
    4a66:	55 27       	eor	r21, r21
    4a68:	47 fd       	sbrc	r20, 7
    4a6a:	50 95       	com	r21
    4a6c:	ed 81       	ldd	r30, Y+5	; 0x05
    4a6e:	fe 81       	ldd	r31, Y+6	; 0x06
    4a70:	4e 27       	eor	r20, r30
    4a72:	5f 27       	eor	r21, r31
    4a74:	b2 01       	movw	r22, r4
    4a76:	c4 01       	movw	r24, r8
    4a78:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4a7c:	72 c6       	rjmp	.+3300   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x30: /*XOR KR (xor const reg)*/
			sram.write(op1,op2^sram.read(op3));
    4a7e:	f3 e0       	ldi	r31, 0x03	; 3
    4a80:	8f 0e       	add	r8, r31
    4a82:	91 1c       	adc	r9, r1
    4a84:	6d 81       	ldd	r22, Y+5	; 0x05
    4a86:	7e 81       	ldd	r23, Y+6	; 0x06
    4a88:	c4 01       	movw	r24, r8
    4a8a:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4a8e:	48 2f       	mov	r20, r24
    4a90:	55 27       	eor	r21, r21
    4a92:	47 fd       	sbrc	r20, 7
    4a94:	50 95       	com	r21
    4a96:	29 81       	ldd	r18, Y+1	; 0x01
    4a98:	3a 81       	ldd	r19, Y+2	; 0x02
    4a9a:	42 27       	eor	r20, r18
    4a9c:	53 27       	eor	r21, r19
    4a9e:	b2 01       	movw	r22, r4
    4aa0:	c4 01       	movw	r24, r8
    4aa2:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4aa6:	5d c6       	rjmp	.+3258   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x31: /*NAN*/
			sram.write(op1,~(sram.read(op2)&sram.read(op3)));
    4aa8:	33 e0       	ldi	r19, 0x03	; 3
    4aaa:	83 0e       	add	r8, r19
    4aac:	91 1c       	adc	r9, r1
    4aae:	69 81       	ldd	r22, Y+1	; 0x01
    4ab0:	7a 81       	ldd	r23, Y+2	; 0x02
    4ab2:	c4 01       	movw	r24, r8
    4ab4:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4ab8:	f8 2e       	mov	r15, r24
    4aba:	6d 81       	ldd	r22, Y+5	; 0x05
    4abc:	7e 81       	ldd	r23, Y+6	; 0x06
    4abe:	c4 01       	movw	r24, r8
    4ac0:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4ac4:	8f 21       	and	r24, r15
    4ac6:	48 2f       	mov	r20, r24
    4ac8:	55 27       	eor	r21, r21
    4aca:	47 fd       	sbrc	r20, 7
    4acc:	50 95       	com	r21
    4ace:	40 95       	com	r20
    4ad0:	50 95       	com	r21
    4ad2:	b2 01       	movw	r22, r4
    4ad4:	c4 01       	movw	r24, r8
    4ad6:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4ada:	43 c6       	rjmp	.+3206   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x32: /*NAN RK (nand reg const)*/
			sram.write(op1,~(sram.read(op2)&op3));
    4adc:	83 e0       	ldi	r24, 0x03	; 3
    4ade:	88 0e       	add	r8, r24
    4ae0:	91 1c       	adc	r9, r1
    4ae2:	69 81       	ldd	r22, Y+1	; 0x01
    4ae4:	7a 81       	ldd	r23, Y+2	; 0x02
    4ae6:	c4 01       	movw	r24, r8
    4ae8:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4aec:	48 2f       	mov	r20, r24
    4aee:	55 27       	eor	r21, r21
    4af0:	47 fd       	sbrc	r20, 7
    4af2:	50 95       	com	r21
    4af4:	ad 81       	ldd	r26, Y+5	; 0x05
    4af6:	be 81       	ldd	r27, Y+6	; 0x06
    4af8:	4a 23       	and	r20, r26
    4afa:	5b 23       	and	r21, r27
    4afc:	40 95       	com	r20
    4afe:	50 95       	com	r21
    4b00:	b2 01       	movw	r22, r4
    4b02:	c4 01       	movw	r24, r8
    4b04:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4b08:	2c c6       	rjmp	.+3160   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x33: /*NAN KR (nand const reg)*/
			sram.write(op1,~(op2&sram.read(op3)));
    4b0a:	b3 e0       	ldi	r27, 0x03	; 3
    4b0c:	8b 0e       	add	r8, r27
    4b0e:	91 1c       	adc	r9, r1
    4b10:	6d 81       	ldd	r22, Y+5	; 0x05
    4b12:	7e 81       	ldd	r23, Y+6	; 0x06
    4b14:	c4 01       	movw	r24, r8
    4b16:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4b1a:	48 2f       	mov	r20, r24
    4b1c:	55 27       	eor	r21, r21
    4b1e:	47 fd       	sbrc	r20, 7
    4b20:	50 95       	com	r21
    4b22:	e9 81       	ldd	r30, Y+1	; 0x01
    4b24:	fa 81       	ldd	r31, Y+2	; 0x02
    4b26:	4e 23       	and	r20, r30
    4b28:	5f 23       	and	r21, r31
    4b2a:	40 95       	com	r20
    4b2c:	50 95       	com	r21
    4b2e:	b2 01       	movw	r22, r4
    4b30:	c4 01       	movw	r24, r8
    4b32:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4b36:	15 c6       	rjmp	.+3114   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x34: /*NOT*/
			sram.write(op1,~sram.read(op2));
    4b38:	f3 e0       	ldi	r31, 0x03	; 3
    4b3a:	8f 0e       	add	r8, r31
    4b3c:	91 1c       	adc	r9, r1
    4b3e:	69 81       	ldd	r22, Y+1	; 0x01
    4b40:	7a 81       	ldd	r23, Y+2	; 0x02
    4b42:	c4 01       	movw	r24, r8
    4b44:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4b48:	48 2f       	mov	r20, r24
    4b4a:	55 27       	eor	r21, r21
    4b4c:	47 fd       	sbrc	r20, 7
    4b4e:	50 95       	com	r21
    4b50:	40 95       	com	r20
    4b52:	50 95       	com	r21
    4b54:	b2 01       	movw	r22, r4
    4b56:	c4 01       	movw	r24, r8
    4b58:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4b5c:	02 c6       	rjmp	.+3076   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x35: /*SHL*/
			sram.write(op1,sram.read(op2)<<sram.read(op3));
    4b5e:	23 e0       	ldi	r18, 0x03	; 3
    4b60:	82 0e       	add	r8, r18
    4b62:	91 1c       	adc	r9, r1
    4b64:	69 81       	ldd	r22, Y+1	; 0x01
    4b66:	7a 81       	ldd	r23, Y+2	; 0x02
    4b68:	c4 01       	movw	r24, r8
    4b6a:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4b6e:	f8 2e       	mov	r15, r24
    4b70:	6d 81       	ldd	r22, Y+5	; 0x05
    4b72:	7e 81       	ldd	r23, Y+6	; 0x06
    4b74:	c4 01       	movw	r24, r8
    4b76:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4b7a:	2f 2d       	mov	r18, r15
    4b7c:	33 27       	eor	r19, r19
    4b7e:	27 fd       	sbrc	r18, 7
    4b80:	30 95       	com	r19
    4b82:	a9 01       	movw	r20, r18
    4b84:	02 c0       	rjmp	.+4      	; 0x4b8a <_ZN4QEPU7executeEilll+0x92c>
    4b86:	44 0f       	add	r20, r20
    4b88:	55 1f       	adc	r21, r21
    4b8a:	8a 95       	dec	r24
    4b8c:	e2 f7       	brpl	.-8      	; 0x4b86 <_ZN4QEPU7executeEilll+0x928>
    4b8e:	b2 01       	movw	r22, r4
    4b90:	c4 01       	movw	r24, r8
    4b92:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4b96:	e5 c5       	rjmp	.+3018   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x36: /*SHL RK (shl reg const)*/
			sram.write(op1,sram.read(op2)<<op3);
    4b98:	33 e0       	ldi	r19, 0x03	; 3
    4b9a:	83 0e       	add	r8, r19
    4b9c:	91 1c       	adc	r9, r1
    4b9e:	69 81       	ldd	r22, Y+1	; 0x01
    4ba0:	7a 81       	ldd	r23, Y+2	; 0x02
    4ba2:	c4 01       	movw	r24, r8
    4ba4:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4ba8:	48 2f       	mov	r20, r24
    4baa:	55 27       	eor	r21, r21
    4bac:	47 fd       	sbrc	r20, 7
    4bae:	50 95       	com	r21
    4bb0:	0d 80       	ldd	r0, Y+5	; 0x05
    4bb2:	02 c0       	rjmp	.+4      	; 0x4bb8 <_ZN4QEPU7executeEilll+0x95a>
    4bb4:	44 0f       	add	r20, r20
    4bb6:	55 1f       	adc	r21, r21
    4bb8:	0a 94       	dec	r0
    4bba:	e2 f7       	brpl	.-8      	; 0x4bb4 <_ZN4QEPU7executeEilll+0x956>
    4bbc:	b2 01       	movw	r22, r4
    4bbe:	c4 01       	movw	r24, r8
    4bc0:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4bc4:	ce c5       	rjmp	.+2972   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x37: /*SHL KR (shl const reg)*/
			sram.write(op1,op2<<sram.read(op2));
    4bc6:	83 e0       	ldi	r24, 0x03	; 3
    4bc8:	88 0e       	add	r8, r24
    4bca:	91 1c       	adc	r9, r1
    4bcc:	69 81       	ldd	r22, Y+1	; 0x01
    4bce:	7a 81       	ldd	r23, Y+2	; 0x02
    4bd0:	c4 01       	movw	r24, r8
    4bd2:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4bd6:	49 81       	ldd	r20, Y+1	; 0x01
    4bd8:	5a 81       	ldd	r21, Y+2	; 0x02
    4bda:	6b 81       	ldd	r22, Y+3	; 0x03
    4bdc:	7c 81       	ldd	r23, Y+4	; 0x04
    4bde:	04 c0       	rjmp	.+8      	; 0x4be8 <_ZN4QEPU7executeEilll+0x98a>
    4be0:	44 0f       	add	r20, r20
    4be2:	55 1f       	adc	r21, r21
    4be4:	66 1f       	adc	r22, r22
    4be6:	77 1f       	adc	r23, r23
    4be8:	8a 95       	dec	r24
    4bea:	d2 f7       	brpl	.-12     	; 0x4be0 <_ZN4QEPU7executeEilll+0x982>
    4bec:	b2 01       	movw	r22, r4
    4bee:	c4 01       	movw	r24, r8
    4bf0:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4bf4:	b6 c5       	rjmp	.+2924   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x38: /*SHR*/
			sram.write(op1,sram.read(op2)>>sram.read(op3));
    4bf6:	93 e0       	ldi	r25, 0x03	; 3
    4bf8:	89 0e       	add	r8, r25
    4bfa:	91 1c       	adc	r9, r1
    4bfc:	69 81       	ldd	r22, Y+1	; 0x01
    4bfe:	7a 81       	ldd	r23, Y+2	; 0x02
    4c00:	c4 01       	movw	r24, r8
    4c02:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4c06:	f8 2e       	mov	r15, r24
    4c08:	6d 81       	ldd	r22, Y+5	; 0x05
    4c0a:	7e 81       	ldd	r23, Y+6	; 0x06
    4c0c:	c4 01       	movw	r24, r8
    4c0e:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4c12:	2f 2d       	mov	r18, r15
    4c14:	33 27       	eor	r19, r19
    4c16:	27 fd       	sbrc	r18, 7
    4c18:	30 95       	com	r19
    4c1a:	a9 01       	movw	r20, r18
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <_ZN4QEPU7executeEilll+0x9c4>
    4c1e:	55 95       	asr	r21
    4c20:	47 95       	ror	r20
    4c22:	8a 95       	dec	r24
    4c24:	e2 f7       	brpl	.-8      	; 0x4c1e <_ZN4QEPU7executeEilll+0x9c0>
    4c26:	b2 01       	movw	r22, r4
    4c28:	c4 01       	movw	r24, r8
    4c2a:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4c2e:	99 c5       	rjmp	.+2866   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x39: /*SHR RK (shr reg const)*/
			sram.write(op1,sram.read(op2)>>op3);
    4c30:	a3 e0       	ldi	r26, 0x03	; 3
    4c32:	8a 0e       	add	r8, r26
    4c34:	91 1c       	adc	r9, r1
    4c36:	69 81       	ldd	r22, Y+1	; 0x01
    4c38:	7a 81       	ldd	r23, Y+2	; 0x02
    4c3a:	c4 01       	movw	r24, r8
    4c3c:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4c40:	48 2f       	mov	r20, r24
    4c42:	55 27       	eor	r21, r21
    4c44:	47 fd       	sbrc	r20, 7
    4c46:	50 95       	com	r21
    4c48:	0d 80       	ldd	r0, Y+5	; 0x05
    4c4a:	02 c0       	rjmp	.+4      	; 0x4c50 <_ZN4QEPU7executeEilll+0x9f2>
    4c4c:	55 95       	asr	r21
    4c4e:	47 95       	ror	r20
    4c50:	0a 94       	dec	r0
    4c52:	e2 f7       	brpl	.-8      	; 0x4c4c <_ZN4QEPU7executeEilll+0x9ee>
    4c54:	b2 01       	movw	r22, r4
    4c56:	c4 01       	movw	r24, r8
    4c58:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4c5c:	82 c5       	rjmp	.+2820   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x3A: /*SHR KR (shr const reg)*/
			sram.write(op1,op2>>sram.read(op2));
    4c5e:	b3 e0       	ldi	r27, 0x03	; 3
    4c60:	8b 0e       	add	r8, r27
    4c62:	91 1c       	adc	r9, r1
    4c64:	69 81       	ldd	r22, Y+1	; 0x01
    4c66:	7a 81       	ldd	r23, Y+2	; 0x02
    4c68:	c4 01       	movw	r24, r8
    4c6a:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    4c6e:	49 81       	ldd	r20, Y+1	; 0x01
    4c70:	5a 81       	ldd	r21, Y+2	; 0x02
    4c72:	6b 81       	ldd	r22, Y+3	; 0x03
    4c74:	7c 81       	ldd	r23, Y+4	; 0x04
    4c76:	04 c0       	rjmp	.+8      	; 0x4c80 <_ZN4QEPU7executeEilll+0xa22>
    4c78:	75 95       	asr	r23
    4c7a:	67 95       	ror	r22
    4c7c:	57 95       	ror	r21
    4c7e:	47 95       	ror	r20
    4c80:	8a 95       	dec	r24
    4c82:	d2 f7       	brpl	.-12     	; 0x4c78 <_ZN4QEPU7executeEilll+0xa1a>
    4c84:	b2 01       	movw	r22, r4
    4c86:	c4 01       	movw	r24, r8
    4c88:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
			break;
    4c8c:	6a c5       	rjmp	.+2772   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x3B: /*INT (interrupt)*/ //NEEDS TABLE SYSTEM
			interrupt_cpu(op1);
    4c8e:	b2 01       	movw	r22, r4
    4c90:	c4 01       	movw	r24, r8
    4c92:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <_ZN4QEPU13interrupt_cpuEi>
			break;
    4c96:	65 c5       	rjmp	.+2762   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x3C: /*DLY (delay)*/
			utils.delay(op1);
    4c98:	b2 01       	movw	r22, r4
    4c9a:	c4 01       	movw	r24, r8
    4c9c:	8b 52       	subi	r24, 0x2B	; 43
    4c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca0:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <_ZN5Utils5delayEi>
			break;
    4ca4:	5e c5       	rjmp	.+2748   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x3D: /*NOP (nop) - DOES NOTHING*/ 
			break;
		case 0x3E: /*HLT (halt)*/ 
			program_counter=program_counter_maximum;
    4ca6:	f4 01       	movw	r30, r8
    4ca8:	ea 52       	subi	r30, 0x2A	; 42
    4caa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cac:	d4 01       	movw	r26, r8
    4cae:	a8 52       	subi	r26, 0x28	; 40
    4cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb2:	8d 91       	ld	r24, X+
    4cb4:	9c 91       	ld	r25, X
    4cb6:	91 83       	std	Z+1, r25	; 0x01
    4cb8:	80 83       	st	Z, r24
			break;
    4cba:	53 c5       	rjmp	.+2726   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x3F: // X GATE
			newthephi=gates.X(read(op1,THE,false),read(op1,PHI,false));
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	41 e0       	ldi	r20, 0x01	; 1
    4cc0:	50 e0       	ldi	r21, 0x00	; 0
    4cc2:	b2 01       	movw	r22, r4
    4cc4:	c4 01       	movw	r24, r8
    4cc6:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4cca:	8c 01       	movw	r16, r24
    4ccc:	20 e0       	ldi	r18, 0x00	; 0
    4cce:	40 e0       	ldi	r20, 0x00	; 0
    4cd0:	50 e0       	ldi	r21, 0x00	; 0
    4cd2:	b2 01       	movw	r22, r4
    4cd4:	c4 01       	movw	r24, r8
    4cd6:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4cda:	a8 01       	movw	r20, r16
    4cdc:	bc 01       	movw	r22, r24
    4cde:	c4 01       	movw	r24, r8
    4ce0:	0a 96       	adiw	r24, 0x0a	; 10
    4ce2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <_ZN5Gates1XEii>
    4ce6:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4ce8:	fc 01       	movw	r30, r24
    4cea:	20 81       	ld	r18, Z
    4cec:	31 81       	ldd	r19, Z+1	; 0x01
    4cee:	40 e0       	ldi	r20, 0x00	; 0
    4cf0:	50 e0       	ldi	r21, 0x00	; 0
    4cf2:	b2 01       	movw	r22, r4
    4cf4:	c4 01       	movw	r24, r8
    4cf6:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    4cfa:	d8 01       	movw	r26, r16
    4cfc:	12 96       	adiw	r26, 0x02	; 2
    4cfe:	2d 91       	ld	r18, X+
    4d00:	3c 91       	ld	r19, X
    4d02:	13 97       	sbiw	r26, 0x03	; 3
    4d04:	41 e0       	ldi	r20, 0x01	; 1
    4d06:	50 e0       	ldi	r21, 0x00	; 0
    4d08:	b2 01       	movw	r22, r4
    4d0a:	c4 01       	movw	r24, r8
    4d0c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4d10:	28 c5       	rjmp	.+2640   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x40: // Y GATE
			newthephi=gates.Y(read(op1,THE,false),read(op1,PHI,false));
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	41 e0       	ldi	r20, 0x01	; 1
    4d16:	50 e0       	ldi	r21, 0x00	; 0
    4d18:	b2 01       	movw	r22, r4
    4d1a:	c4 01       	movw	r24, r8
    4d1c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4d20:	8c 01       	movw	r16, r24
    4d22:	20 e0       	ldi	r18, 0x00	; 0
    4d24:	40 e0       	ldi	r20, 0x00	; 0
    4d26:	50 e0       	ldi	r21, 0x00	; 0
    4d28:	b2 01       	movw	r22, r4
    4d2a:	c4 01       	movw	r24, r8
    4d2c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4d30:	a8 01       	movw	r20, r16
    4d32:	bc 01       	movw	r22, r24
    4d34:	c4 01       	movw	r24, r8
    4d36:	0a 96       	adiw	r24, 0x0a	; 10
    4d38:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Gates1YEii>
    4d3c:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4d3e:	fc 01       	movw	r30, r24
    4d40:	20 81       	ld	r18, Z
    4d42:	31 81       	ldd	r19, Z+1	; 0x01
    4d44:	40 e0       	ldi	r20, 0x00	; 0
    4d46:	50 e0       	ldi	r21, 0x00	; 0
    4d48:	b2 01       	movw	r22, r4
    4d4a:	c4 01       	movw	r24, r8
    4d4c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    4d50:	d8 01       	movw	r26, r16
    4d52:	12 96       	adiw	r26, 0x02	; 2
    4d54:	2d 91       	ld	r18, X+
    4d56:	3c 91       	ld	r19, X
    4d58:	13 97       	sbiw	r26, 0x03	; 3
    4d5a:	41 e0       	ldi	r20, 0x01	; 1
    4d5c:	50 e0       	ldi	r21, 0x00	; 0
    4d5e:	b2 01       	movw	r22, r4
    4d60:	c4 01       	movw	r24, r8
    4d62:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4d66:	fd c4       	rjmp	.+2554   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x41: // Z GATE
			newthephi=gates.Z(read(op1,THE,false),read(op1,PHI,false));
    4d68:	20 e0       	ldi	r18, 0x00	; 0
    4d6a:	41 e0       	ldi	r20, 0x01	; 1
    4d6c:	50 e0       	ldi	r21, 0x00	; 0
    4d6e:	b2 01       	movw	r22, r4
    4d70:	c4 01       	movw	r24, r8
    4d72:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4d76:	8c 01       	movw	r16, r24
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	40 e0       	ldi	r20, 0x00	; 0
    4d7c:	50 e0       	ldi	r21, 0x00	; 0
    4d7e:	b2 01       	movw	r22, r4
    4d80:	c4 01       	movw	r24, r8
    4d82:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4d86:	a8 01       	movw	r20, r16
    4d88:	bc 01       	movw	r22, r24
    4d8a:	c4 01       	movw	r24, r8
    4d8c:	0a 96       	adiw	r24, 0x0a	; 10
    4d8e:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN5Gates1ZEii>
    4d92:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4d94:	fc 01       	movw	r30, r24
    4d96:	20 81       	ld	r18, Z
    4d98:	31 81       	ldd	r19, Z+1	; 0x01
    4d9a:	40 e0       	ldi	r20, 0x00	; 0
    4d9c:	50 e0       	ldi	r21, 0x00	; 0
    4d9e:	b2 01       	movw	r22, r4
    4da0:	c4 01       	movw	r24, r8
    4da2:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    4da6:	d8 01       	movw	r26, r16
    4da8:	12 96       	adiw	r26, 0x02	; 2
    4daa:	2d 91       	ld	r18, X+
    4dac:	3c 91       	ld	r19, X
    4dae:	13 97       	sbiw	r26, 0x03	; 3
    4db0:	41 e0       	ldi	r20, 0x01	; 1
    4db2:	50 e0       	ldi	r21, 0x00	; 0
    4db4:	b2 01       	movw	r22, r4
    4db6:	c4 01       	movw	r24, r8
    4db8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4dbc:	d2 c4       	rjmp	.+2468   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x42: // H GATE
			newthephi=gates.H(read(op1,THE,false),read(op1,PHI,false));
    4dbe:	20 e0       	ldi	r18, 0x00	; 0
    4dc0:	41 e0       	ldi	r20, 0x01	; 1
    4dc2:	50 e0       	ldi	r21, 0x00	; 0
    4dc4:	b2 01       	movw	r22, r4
    4dc6:	c4 01       	movw	r24, r8
    4dc8:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4dcc:	8c 01       	movw	r16, r24
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	40 e0       	ldi	r20, 0x00	; 0
    4dd2:	50 e0       	ldi	r21, 0x00	; 0
    4dd4:	b2 01       	movw	r22, r4
    4dd6:	c4 01       	movw	r24, r8
    4dd8:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4ddc:	a8 01       	movw	r20, r16
    4dde:	bc 01       	movw	r22, r24
    4de0:	c4 01       	movw	r24, r8
    4de2:	0a 96       	adiw	r24, 0x0a	; 10
    4de4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN5Gates1HEii>
    4de8:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4dea:	fc 01       	movw	r30, r24
    4dec:	20 81       	ld	r18, Z
    4dee:	31 81       	ldd	r19, Z+1	; 0x01
    4df0:	40 e0       	ldi	r20, 0x00	; 0
    4df2:	50 e0       	ldi	r21, 0x00	; 0
    4df4:	b2 01       	movw	r22, r4
    4df6:	c4 01       	movw	r24, r8
    4df8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    4dfc:	d8 01       	movw	r26, r16
    4dfe:	12 96       	adiw	r26, 0x02	; 2
    4e00:	2d 91       	ld	r18, X+
    4e02:	3c 91       	ld	r19, X
    4e04:	13 97       	sbiw	r26, 0x03	; 3
    4e06:	41 e0       	ldi	r20, 0x01	; 1
    4e08:	50 e0       	ldi	r21, 0x00	; 0
    4e0a:	b2 01       	movw	r22, r4
    4e0c:	c4 01       	movw	r24, r8
    4e0e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4e12:	a7 c4       	rjmp	.+2382   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x43: // S GATE
			newthephi=gates.S(read(op1,THE,false),read(op1,PHI,false));
    4e14:	20 e0       	ldi	r18, 0x00	; 0
    4e16:	41 e0       	ldi	r20, 0x01	; 1
    4e18:	50 e0       	ldi	r21, 0x00	; 0
    4e1a:	b2 01       	movw	r22, r4
    4e1c:	c4 01       	movw	r24, r8
    4e1e:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4e22:	8c 01       	movw	r16, r24
    4e24:	20 e0       	ldi	r18, 0x00	; 0
    4e26:	40 e0       	ldi	r20, 0x00	; 0
    4e28:	50 e0       	ldi	r21, 0x00	; 0
    4e2a:	b2 01       	movw	r22, r4
    4e2c:	c4 01       	movw	r24, r8
    4e2e:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4e32:	a8 01       	movw	r20, r16
    4e34:	bc 01       	movw	r22, r24
    4e36:	c4 01       	movw	r24, r8
    4e38:	0a 96       	adiw	r24, 0x0a	; 10
    4e3a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN5Gates1SEii>
    4e3e:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4e40:	fc 01       	movw	r30, r24
    4e42:	20 81       	ld	r18, Z
    4e44:	31 81       	ldd	r19, Z+1	; 0x01
    4e46:	40 e0       	ldi	r20, 0x00	; 0
    4e48:	50 e0       	ldi	r21, 0x00	; 0
    4e4a:	b2 01       	movw	r22, r4
    4e4c:	c4 01       	movw	r24, r8
    4e4e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    4e52:	d8 01       	movw	r26, r16
    4e54:	12 96       	adiw	r26, 0x02	; 2
    4e56:	2d 91       	ld	r18, X+
    4e58:	3c 91       	ld	r19, X
    4e5a:	13 97       	sbiw	r26, 0x03	; 3
    4e5c:	41 e0       	ldi	r20, 0x01	; 1
    4e5e:	50 e0       	ldi	r21, 0x00	; 0
    4e60:	b2 01       	movw	r22, r4
    4e62:	c4 01       	movw	r24, r8
    4e64:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4e68:	7c c4       	rjmp	.+2296   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x44: // T GATE
			newthephi=gates.T(read(op1,THE,false),read(op1,PHI,false));
    4e6a:	20 e0       	ldi	r18, 0x00	; 0
    4e6c:	41 e0       	ldi	r20, 0x01	; 1
    4e6e:	50 e0       	ldi	r21, 0x00	; 0
    4e70:	b2 01       	movw	r22, r4
    4e72:	c4 01       	movw	r24, r8
    4e74:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4e78:	8c 01       	movw	r16, r24
    4e7a:	20 e0       	ldi	r18, 0x00	; 0
    4e7c:	40 e0       	ldi	r20, 0x00	; 0
    4e7e:	50 e0       	ldi	r21, 0x00	; 0
    4e80:	b2 01       	movw	r22, r4
    4e82:	c4 01       	movw	r24, r8
    4e84:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4e88:	a8 01       	movw	r20, r16
    4e8a:	bc 01       	movw	r22, r24
    4e8c:	c4 01       	movw	r24, r8
    4e8e:	0a 96       	adiw	r24, 0x0a	; 10
    4e90:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN5Gates1TEii>
    4e94:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4e96:	fc 01       	movw	r30, r24
    4e98:	20 81       	ld	r18, Z
    4e9a:	31 81       	ldd	r19, Z+1	; 0x01
    4e9c:	40 e0       	ldi	r20, 0x00	; 0
    4e9e:	50 e0       	ldi	r21, 0x00	; 0
    4ea0:	b2 01       	movw	r22, r4
    4ea2:	c4 01       	movw	r24, r8
    4ea4:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    4ea8:	d8 01       	movw	r26, r16
    4eaa:	12 96       	adiw	r26, 0x02	; 2
    4eac:	2d 91       	ld	r18, X+
    4eae:	3c 91       	ld	r19, X
    4eb0:	13 97       	sbiw	r26, 0x03	; 3
    4eb2:	41 e0       	ldi	r20, 0x01	; 1
    4eb4:	50 e0       	ldi	r21, 0x00	; 0
    4eb6:	b2 01       	movw	r22, r4
    4eb8:	c4 01       	movw	r24, r8
    4eba:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4ebe:	51 c4       	rjmp	.+2210   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x45: // ROTATE X GATE
			newthephi=gates.ROX(read(op1,THE,false),read(op1,PHI,false),op2);
    4ec0:	20 e0       	ldi	r18, 0x00	; 0
    4ec2:	41 e0       	ldi	r20, 0x01	; 1
    4ec4:	50 e0       	ldi	r21, 0x00	; 0
    4ec6:	b2 01       	movw	r22, r4
    4ec8:	c4 01       	movw	r24, r8
    4eca:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4ece:	8c 01       	movw	r16, r24
    4ed0:	20 e0       	ldi	r18, 0x00	; 0
    4ed2:	40 e0       	ldi	r20, 0x00	; 0
    4ed4:	50 e0       	ldi	r21, 0x00	; 0
    4ed6:	b2 01       	movw	r22, r4
    4ed8:	c4 01       	movw	r24, r8
    4eda:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4ede:	29 81       	ldd	r18, Y+1	; 0x01
    4ee0:	3a 81       	ldd	r19, Y+2	; 0x02
    4ee2:	a8 01       	movw	r20, r16
    4ee4:	bc 01       	movw	r22, r24
    4ee6:	c4 01       	movw	r24, r8
    4ee8:	0a 96       	adiw	r24, 0x0a	; 10
    4eea:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN5Gates3ROXEiii>
    4eee:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4ef0:	fc 01       	movw	r30, r24
    4ef2:	20 81       	ld	r18, Z
    4ef4:	31 81       	ldd	r19, Z+1	; 0x01
    4ef6:	40 e0       	ldi	r20, 0x00	; 0
    4ef8:	50 e0       	ldi	r21, 0x00	; 0
    4efa:	b2 01       	movw	r22, r4
    4efc:	c4 01       	movw	r24, r8
    4efe:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    4f02:	d8 01       	movw	r26, r16
    4f04:	12 96       	adiw	r26, 0x02	; 2
    4f06:	2d 91       	ld	r18, X+
    4f08:	3c 91       	ld	r19, X
    4f0a:	13 97       	sbiw	r26, 0x03	; 3
    4f0c:	41 e0       	ldi	r20, 0x01	; 1
    4f0e:	50 e0       	ldi	r21, 0x00	; 0
    4f10:	b2 01       	movw	r22, r4
    4f12:	c4 01       	movw	r24, r8
    4f14:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4f18:	24 c4       	rjmp	.+2120   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x46: // ROTATE Y GATE
			newthephi=gates.ROY(read(op1,THE,false),read(op1,PHI,false),op2);
    4f1a:	20 e0       	ldi	r18, 0x00	; 0
    4f1c:	41 e0       	ldi	r20, 0x01	; 1
    4f1e:	50 e0       	ldi	r21, 0x00	; 0
    4f20:	b2 01       	movw	r22, r4
    4f22:	c4 01       	movw	r24, r8
    4f24:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4f28:	8c 01       	movw	r16, r24
    4f2a:	20 e0       	ldi	r18, 0x00	; 0
    4f2c:	40 e0       	ldi	r20, 0x00	; 0
    4f2e:	50 e0       	ldi	r21, 0x00	; 0
    4f30:	b2 01       	movw	r22, r4
    4f32:	c4 01       	movw	r24, r8
    4f34:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4f38:	29 81       	ldd	r18, Y+1	; 0x01
    4f3a:	3a 81       	ldd	r19, Y+2	; 0x02
    4f3c:	a8 01       	movw	r20, r16
    4f3e:	bc 01       	movw	r22, r24
    4f40:	c4 01       	movw	r24, r8
    4f42:	0a 96       	adiw	r24, 0x0a	; 10
    4f44:	0e 94 1e 13 	call	0x263c	; 0x263c <_ZN5Gates3ROYEiii>
    4f48:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4f4a:	fc 01       	movw	r30, r24
    4f4c:	20 81       	ld	r18, Z
    4f4e:	31 81       	ldd	r19, Z+1	; 0x01
    4f50:	40 e0       	ldi	r20, 0x00	; 0
    4f52:	50 e0       	ldi	r21, 0x00	; 0
    4f54:	b2 01       	movw	r22, r4
    4f56:	c4 01       	movw	r24, r8
    4f58:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    4f5c:	d8 01       	movw	r26, r16
    4f5e:	12 96       	adiw	r26, 0x02	; 2
    4f60:	2d 91       	ld	r18, X+
    4f62:	3c 91       	ld	r19, X
    4f64:	13 97       	sbiw	r26, 0x03	; 3
    4f66:	41 e0       	ldi	r20, 0x01	; 1
    4f68:	50 e0       	ldi	r21, 0x00	; 0
    4f6a:	b2 01       	movw	r22, r4
    4f6c:	c4 01       	movw	r24, r8
    4f6e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4f72:	f7 c3       	rjmp	.+2030   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x47: // ROTATE Z GATE
			newthephi=gates.ROZ(read(op1,THE,false),read(op1,PHI,false),op2);
    4f74:	20 e0       	ldi	r18, 0x00	; 0
    4f76:	41 e0       	ldi	r20, 0x01	; 1
    4f78:	50 e0       	ldi	r21, 0x00	; 0
    4f7a:	b2 01       	movw	r22, r4
    4f7c:	c4 01       	movw	r24, r8
    4f7e:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4f82:	8c 01       	movw	r16, r24
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	40 e0       	ldi	r20, 0x00	; 0
    4f88:	50 e0       	ldi	r21, 0x00	; 0
    4f8a:	b2 01       	movw	r22, r4
    4f8c:	c4 01       	movw	r24, r8
    4f8e:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4f92:	29 81       	ldd	r18, Y+1	; 0x01
    4f94:	3a 81       	ldd	r19, Y+2	; 0x02
    4f96:	a8 01       	movw	r20, r16
    4f98:	bc 01       	movw	r22, r24
    4f9a:	c4 01       	movw	r24, r8
    4f9c:	0a 96       	adiw	r24, 0x0a	; 10
    4f9e:	0e 94 ba 13 	call	0x2774	; 0x2774 <_ZN5Gates3ROZEiii>
    4fa2:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4fa4:	fc 01       	movw	r30, r24
    4fa6:	20 81       	ld	r18, Z
    4fa8:	31 81       	ldd	r19, Z+1	; 0x01
    4faa:	40 e0       	ldi	r20, 0x00	; 0
    4fac:	50 e0       	ldi	r21, 0x00	; 0
    4fae:	b2 01       	movw	r22, r4
    4fb0:	c4 01       	movw	r24, r8
    4fb2:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    4fb6:	d8 01       	movw	r26, r16
    4fb8:	12 96       	adiw	r26, 0x02	; 2
    4fba:	2d 91       	ld	r18, X+
    4fbc:	3c 91       	ld	r19, X
    4fbe:	13 97       	sbiw	r26, 0x03	; 3
    4fc0:	41 e0       	ldi	r20, 0x01	; 1
    4fc2:	50 e0       	ldi	r21, 0x00	; 0
    4fc4:	b2 01       	movw	r22, r4
    4fc6:	c4 01       	movw	r24, r8
    4fc8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    4fcc:	ca c3       	rjmp	.+1940   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		//2 QUBIT GATES -
		case 0x48: // CNOT GATE
			newthephi=gates.CNO(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4fce:	20 e0       	ldi	r18, 0x00	; 0
    4fd0:	41 e0       	ldi	r20, 0x01	; 1
    4fd2:	50 e0       	ldi	r21, 0x00	; 0
    4fd4:	69 81       	ldd	r22, Y+1	; 0x01
    4fd6:	7a 81       	ldd	r23, Y+2	; 0x02
    4fd8:	c4 01       	movw	r24, r8
    4fda:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4fde:	8c 01       	movw	r16, r24
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	40 e0       	ldi	r20, 0x00	; 0
    4fe4:	50 e0       	ldi	r21, 0x00	; 0
    4fe6:	69 81       	ldd	r22, Y+1	; 0x01
    4fe8:	7a 81       	ldd	r23, Y+2	; 0x02
    4fea:	c4 01       	movw	r24, r8
    4fec:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    4ff0:	6c 01       	movw	r12, r24
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	41 e0       	ldi	r20, 0x01	; 1
    4ff6:	50 e0       	ldi	r21, 0x00	; 0
    4ff8:	b2 01       	movw	r22, r4
    4ffa:	c4 01       	movw	r24, r8
    4ffc:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5000:	7c 01       	movw	r14, r24
    5002:	20 e0       	ldi	r18, 0x00	; 0
    5004:	40 e0       	ldi	r20, 0x00	; 0
    5006:	50 e0       	ldi	r21, 0x00	; 0
    5008:	b2 01       	movw	r22, r4
    500a:	c4 01       	movw	r24, r8
    500c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5010:	96 01       	movw	r18, r12
    5012:	a7 01       	movw	r20, r14
    5014:	bc 01       	movw	r22, r24
    5016:	c4 01       	movw	r24, r8
    5018:	0a 96       	adiw	r24, 0x0a	; 10
    501a:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN5Gates3CNOEiiii>
    501e:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5020:	fc 01       	movw	r30, r24
    5022:	20 81       	ld	r18, Z
    5024:	31 81       	ldd	r19, Z+1	; 0x01
    5026:	40 e0       	ldi	r20, 0x00	; 0
    5028:	50 e0       	ldi	r21, 0x00	; 0
    502a:	b2 01       	movw	r22, r4
    502c:	c4 01       	movw	r24, r8
    502e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    5032:	d8 01       	movw	r26, r16
    5034:	12 96       	adiw	r26, 0x02	; 2
    5036:	2d 91       	ld	r18, X+
    5038:	3c 91       	ld	r19, X
    503a:	13 97       	sbiw	r26, 0x03	; 3
    503c:	41 e0       	ldi	r20, 0x01	; 1
    503e:	50 e0       	ldi	r21, 0x00	; 0
    5040:	b2 01       	movw	r22, r4
    5042:	c4 01       	movw	r24, r8
    5044:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    5048:	f8 01       	movw	r30, r16
    504a:	24 81       	ldd	r18, Z+4	; 0x04
    504c:	35 81       	ldd	r19, Z+5	; 0x05
    504e:	40 e0       	ldi	r20, 0x00	; 0
    5050:	50 e0       	ldi	r21, 0x00	; 0
    5052:	69 81       	ldd	r22, Y+1	; 0x01
    5054:	7a 81       	ldd	r23, Y+2	; 0x02
    5056:	c4 01       	movw	r24, r8
    5058:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    505c:	d8 01       	movw	r26, r16
    505e:	16 96       	adiw	r26, 0x06	; 6
    5060:	2d 91       	ld	r18, X+
    5062:	3c 91       	ld	r19, X
    5064:	17 97       	sbiw	r26, 0x07	; 7
    5066:	41 e0       	ldi	r20, 0x01	; 1
    5068:	50 e0       	ldi	r21, 0x00	; 0
    506a:	69 81       	ldd	r22, Y+1	; 0x01
    506c:	7a 81       	ldd	r23, Y+2	; 0x02
    506e:	c4 01       	movw	r24, r8
    5070:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    5074:	76 c3       	rjmp	.+1772   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x49: // CSIGN GATE
			newthephi=gates.CSI(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	41 e0       	ldi	r20, 0x01	; 1
    507a:	50 e0       	ldi	r21, 0x00	; 0
    507c:	69 81       	ldd	r22, Y+1	; 0x01
    507e:	7a 81       	ldd	r23, Y+2	; 0x02
    5080:	c4 01       	movw	r24, r8
    5082:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5086:	8c 01       	movw	r16, r24
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	40 e0       	ldi	r20, 0x00	; 0
    508c:	50 e0       	ldi	r21, 0x00	; 0
    508e:	69 81       	ldd	r22, Y+1	; 0x01
    5090:	7a 81       	ldd	r23, Y+2	; 0x02
    5092:	c4 01       	movw	r24, r8
    5094:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5098:	6c 01       	movw	r12, r24
    509a:	20 e0       	ldi	r18, 0x00	; 0
    509c:	41 e0       	ldi	r20, 0x01	; 1
    509e:	50 e0       	ldi	r21, 0x00	; 0
    50a0:	b2 01       	movw	r22, r4
    50a2:	c4 01       	movw	r24, r8
    50a4:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    50a8:	7c 01       	movw	r14, r24
    50aa:	20 e0       	ldi	r18, 0x00	; 0
    50ac:	40 e0       	ldi	r20, 0x00	; 0
    50ae:	50 e0       	ldi	r21, 0x00	; 0
    50b0:	b2 01       	movw	r22, r4
    50b2:	c4 01       	movw	r24, r8
    50b4:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    50b8:	96 01       	movw	r18, r12
    50ba:	a7 01       	movw	r20, r14
    50bc:	bc 01       	movw	r22, r24
    50be:	c4 01       	movw	r24, r8
    50c0:	0a 96       	adiw	r24, 0x0a	; 10
    50c2:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN5Gates3CSIEiiii>
    50c6:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    50c8:	fc 01       	movw	r30, r24
    50ca:	20 81       	ld	r18, Z
    50cc:	31 81       	ldd	r19, Z+1	; 0x01
    50ce:	40 e0       	ldi	r20, 0x00	; 0
    50d0:	50 e0       	ldi	r21, 0x00	; 0
    50d2:	b2 01       	movw	r22, r4
    50d4:	c4 01       	movw	r24, r8
    50d6:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    50da:	d8 01       	movw	r26, r16
    50dc:	12 96       	adiw	r26, 0x02	; 2
    50de:	2d 91       	ld	r18, X+
    50e0:	3c 91       	ld	r19, X
    50e2:	13 97       	sbiw	r26, 0x03	; 3
    50e4:	41 e0       	ldi	r20, 0x01	; 1
    50e6:	50 e0       	ldi	r21, 0x00	; 0
    50e8:	b2 01       	movw	r22, r4
    50ea:	c4 01       	movw	r24, r8
    50ec:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    50f0:	f8 01       	movw	r30, r16
    50f2:	24 81       	ldd	r18, Z+4	; 0x04
    50f4:	35 81       	ldd	r19, Z+5	; 0x05
    50f6:	40 e0       	ldi	r20, 0x00	; 0
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	69 81       	ldd	r22, Y+1	; 0x01
    50fc:	7a 81       	ldd	r23, Y+2	; 0x02
    50fe:	c4 01       	movw	r24, r8
    5100:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    5104:	d8 01       	movw	r26, r16
    5106:	16 96       	adiw	r26, 0x06	; 6
    5108:	2d 91       	ld	r18, X+
    510a:	3c 91       	ld	r19, X
    510c:	17 97       	sbiw	r26, 0x07	; 7
    510e:	41 e0       	ldi	r20, 0x01	; 1
    5110:	50 e0       	ldi	r21, 0x00	; 0
    5112:	69 81       	ldd	r22, Y+1	; 0x01
    5114:	7a 81       	ldd	r23, Y+2	; 0x02
    5116:	c4 01       	movw	r24, r8
    5118:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    511c:	22 c3       	rjmp	.+1604   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x4A: // SWAP GATE
			newthephi=gates.SWA(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    511e:	20 e0       	ldi	r18, 0x00	; 0
    5120:	41 e0       	ldi	r20, 0x01	; 1
    5122:	50 e0       	ldi	r21, 0x00	; 0
    5124:	69 81       	ldd	r22, Y+1	; 0x01
    5126:	7a 81       	ldd	r23, Y+2	; 0x02
    5128:	c4 01       	movw	r24, r8
    512a:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    512e:	8c 01       	movw	r16, r24
    5130:	20 e0       	ldi	r18, 0x00	; 0
    5132:	40 e0       	ldi	r20, 0x00	; 0
    5134:	50 e0       	ldi	r21, 0x00	; 0
    5136:	69 81       	ldd	r22, Y+1	; 0x01
    5138:	7a 81       	ldd	r23, Y+2	; 0x02
    513a:	c4 01       	movw	r24, r8
    513c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5140:	6c 01       	movw	r12, r24
    5142:	20 e0       	ldi	r18, 0x00	; 0
    5144:	41 e0       	ldi	r20, 0x01	; 1
    5146:	50 e0       	ldi	r21, 0x00	; 0
    5148:	b2 01       	movw	r22, r4
    514a:	c4 01       	movw	r24, r8
    514c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5150:	7c 01       	movw	r14, r24
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	40 e0       	ldi	r20, 0x00	; 0
    5156:	50 e0       	ldi	r21, 0x00	; 0
    5158:	b2 01       	movw	r22, r4
    515a:	c4 01       	movw	r24, r8
    515c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5160:	96 01       	movw	r18, r12
    5162:	a7 01       	movw	r20, r14
    5164:	bc 01       	movw	r22, r24
    5166:	c4 01       	movw	r24, r8
    5168:	0a 96       	adiw	r24, 0x0a	; 10
    516a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <_ZN5Gates3SWAEiiii>
    516e:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5170:	fc 01       	movw	r30, r24
    5172:	20 81       	ld	r18, Z
    5174:	31 81       	ldd	r19, Z+1	; 0x01
    5176:	40 e0       	ldi	r20, 0x00	; 0
    5178:	50 e0       	ldi	r21, 0x00	; 0
    517a:	b2 01       	movw	r22, r4
    517c:	c4 01       	movw	r24, r8
    517e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    5182:	d8 01       	movw	r26, r16
    5184:	12 96       	adiw	r26, 0x02	; 2
    5186:	2d 91       	ld	r18, X+
    5188:	3c 91       	ld	r19, X
    518a:	13 97       	sbiw	r26, 0x03	; 3
    518c:	41 e0       	ldi	r20, 0x01	; 1
    518e:	50 e0       	ldi	r21, 0x00	; 0
    5190:	b2 01       	movw	r22, r4
    5192:	c4 01       	movw	r24, r8
    5194:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    5198:	f8 01       	movw	r30, r16
    519a:	24 81       	ldd	r18, Z+4	; 0x04
    519c:	35 81       	ldd	r19, Z+5	; 0x05
    519e:	40 e0       	ldi	r20, 0x00	; 0
    51a0:	50 e0       	ldi	r21, 0x00	; 0
    51a2:	69 81       	ldd	r22, Y+1	; 0x01
    51a4:	7a 81       	ldd	r23, Y+2	; 0x02
    51a6:	c4 01       	movw	r24, r8
    51a8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    51ac:	d8 01       	movw	r26, r16
    51ae:	16 96       	adiw	r26, 0x06	; 6
    51b0:	2d 91       	ld	r18, X+
    51b2:	3c 91       	ld	r19, X
    51b4:	17 97       	sbiw	r26, 0x07	; 7
    51b6:	41 e0       	ldi	r20, 0x01	; 1
    51b8:	50 e0       	ldi	r21, 0x00	; 0
    51ba:	69 81       	ldd	r22, Y+1	; 0x01
    51bc:	7a 81       	ldd	r23, Y+2	; 0x02
    51be:	c4 01       	movw	r24, r8
    51c0:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    51c4:	ce c2       	rjmp	.+1436   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x4B: // INCREMENT GATE
			newthephi=gates.INC(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	41 e0       	ldi	r20, 0x01	; 1
    51ca:	50 e0       	ldi	r21, 0x00	; 0
    51cc:	69 81       	ldd	r22, Y+1	; 0x01
    51ce:	7a 81       	ldd	r23, Y+2	; 0x02
    51d0:	c4 01       	movw	r24, r8
    51d2:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    51d6:	8c 01       	movw	r16, r24
    51d8:	20 e0       	ldi	r18, 0x00	; 0
    51da:	40 e0       	ldi	r20, 0x00	; 0
    51dc:	50 e0       	ldi	r21, 0x00	; 0
    51de:	69 81       	ldd	r22, Y+1	; 0x01
    51e0:	7a 81       	ldd	r23, Y+2	; 0x02
    51e2:	c4 01       	movw	r24, r8
    51e4:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    51e8:	6c 01       	movw	r12, r24
    51ea:	20 e0       	ldi	r18, 0x00	; 0
    51ec:	41 e0       	ldi	r20, 0x01	; 1
    51ee:	50 e0       	ldi	r21, 0x00	; 0
    51f0:	b2 01       	movw	r22, r4
    51f2:	c4 01       	movw	r24, r8
    51f4:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    51f8:	7c 01       	movw	r14, r24
    51fa:	20 e0       	ldi	r18, 0x00	; 0
    51fc:	40 e0       	ldi	r20, 0x00	; 0
    51fe:	50 e0       	ldi	r21, 0x00	; 0
    5200:	b2 01       	movw	r22, r4
    5202:	c4 01       	movw	r24, r8
    5204:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5208:	96 01       	movw	r18, r12
    520a:	a7 01       	movw	r20, r14
    520c:	bc 01       	movw	r22, r24
    520e:	c4 01       	movw	r24, r8
    5210:	0a 96       	adiw	r24, 0x0a	; 10
    5212:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <_ZN5Gates3INCEiiii>
    5216:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5218:	fc 01       	movw	r30, r24
    521a:	20 81       	ld	r18, Z
    521c:	31 81       	ldd	r19, Z+1	; 0x01
    521e:	40 e0       	ldi	r20, 0x00	; 0
    5220:	50 e0       	ldi	r21, 0x00	; 0
    5222:	b2 01       	movw	r22, r4
    5224:	c4 01       	movw	r24, r8
    5226:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    522a:	d8 01       	movw	r26, r16
    522c:	12 96       	adiw	r26, 0x02	; 2
    522e:	2d 91       	ld	r18, X+
    5230:	3c 91       	ld	r19, X
    5232:	13 97       	sbiw	r26, 0x03	; 3
    5234:	41 e0       	ldi	r20, 0x01	; 1
    5236:	50 e0       	ldi	r21, 0x00	; 0
    5238:	b2 01       	movw	r22, r4
    523a:	c4 01       	movw	r24, r8
    523c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    5240:	f8 01       	movw	r30, r16
    5242:	24 81       	ldd	r18, Z+4	; 0x04
    5244:	35 81       	ldd	r19, Z+5	; 0x05
    5246:	40 e0       	ldi	r20, 0x00	; 0
    5248:	50 e0       	ldi	r21, 0x00	; 0
    524a:	69 81       	ldd	r22, Y+1	; 0x01
    524c:	7a 81       	ldd	r23, Y+2	; 0x02
    524e:	c4 01       	movw	r24, r8
    5250:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    5254:	d8 01       	movw	r26, r16
    5256:	16 96       	adiw	r26, 0x06	; 6
    5258:	2d 91       	ld	r18, X+
    525a:	3c 91       	ld	r19, X
    525c:	17 97       	sbiw	r26, 0x07	; 7
    525e:	41 e0       	ldi	r20, 0x01	; 1
    5260:	50 e0       	ldi	r21, 0x00	; 0
    5262:	69 81       	ldd	r22, Y+1	; 0x01
    5264:	7a 81       	ldd	r23, Y+2	; 0x02
    5266:	c4 01       	movw	r24, r8
    5268:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    526c:	7a c2       	rjmp	.+1268   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x4C: // DECREMENT GATE
			newthephi=gates.DEC(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	41 e0       	ldi	r20, 0x01	; 1
    5272:	50 e0       	ldi	r21, 0x00	; 0
    5274:	69 81       	ldd	r22, Y+1	; 0x01
    5276:	7a 81       	ldd	r23, Y+2	; 0x02
    5278:	c4 01       	movw	r24, r8
    527a:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    527e:	8c 01       	movw	r16, r24
    5280:	20 e0       	ldi	r18, 0x00	; 0
    5282:	40 e0       	ldi	r20, 0x00	; 0
    5284:	50 e0       	ldi	r21, 0x00	; 0
    5286:	69 81       	ldd	r22, Y+1	; 0x01
    5288:	7a 81       	ldd	r23, Y+2	; 0x02
    528a:	c4 01       	movw	r24, r8
    528c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5290:	6c 01       	movw	r12, r24
    5292:	20 e0       	ldi	r18, 0x00	; 0
    5294:	41 e0       	ldi	r20, 0x01	; 1
    5296:	50 e0       	ldi	r21, 0x00	; 0
    5298:	b2 01       	movw	r22, r4
    529a:	c4 01       	movw	r24, r8
    529c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    52a0:	7c 01       	movw	r14, r24
    52a2:	20 e0       	ldi	r18, 0x00	; 0
    52a4:	40 e0       	ldi	r20, 0x00	; 0
    52a6:	50 e0       	ldi	r21, 0x00	; 0
    52a8:	b2 01       	movw	r22, r4
    52aa:	c4 01       	movw	r24, r8
    52ac:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    52b0:	96 01       	movw	r18, r12
    52b2:	a7 01       	movw	r20, r14
    52b4:	bc 01       	movw	r22, r24
    52b6:	c4 01       	movw	r24, r8
    52b8:	0a 96       	adiw	r24, 0x0a	; 10
    52ba:	0e 94 75 0f 	call	0x1eea	; 0x1eea <_ZN5Gates3DECEiiii>
    52be:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    52c0:	fc 01       	movw	r30, r24
    52c2:	20 81       	ld	r18, Z
    52c4:	31 81       	ldd	r19, Z+1	; 0x01
    52c6:	40 e0       	ldi	r20, 0x00	; 0
    52c8:	50 e0       	ldi	r21, 0x00	; 0
    52ca:	b2 01       	movw	r22, r4
    52cc:	c4 01       	movw	r24, r8
    52ce:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    52d2:	d8 01       	movw	r26, r16
    52d4:	12 96       	adiw	r26, 0x02	; 2
    52d6:	2d 91       	ld	r18, X+
    52d8:	3c 91       	ld	r19, X
    52da:	13 97       	sbiw	r26, 0x03	; 3
    52dc:	41 e0       	ldi	r20, 0x01	; 1
    52de:	50 e0       	ldi	r21, 0x00	; 0
    52e0:	b2 01       	movw	r22, r4
    52e2:	c4 01       	movw	r24, r8
    52e4:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    52e8:	f8 01       	movw	r30, r16
    52ea:	24 81       	ldd	r18, Z+4	; 0x04
    52ec:	35 81       	ldd	r19, Z+5	; 0x05
    52ee:	40 e0       	ldi	r20, 0x00	; 0
    52f0:	50 e0       	ldi	r21, 0x00	; 0
    52f2:	69 81       	ldd	r22, Y+1	; 0x01
    52f4:	7a 81       	ldd	r23, Y+2	; 0x02
    52f6:	c4 01       	movw	r24, r8
    52f8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    52fc:	d8 01       	movw	r26, r16
    52fe:	16 96       	adiw	r26, 0x06	; 6
    5300:	2d 91       	ld	r18, X+
    5302:	3c 91       	ld	r19, X
    5304:	17 97       	sbiw	r26, 0x07	; 7
    5306:	41 e0       	ldi	r20, 0x01	; 1
    5308:	50 e0       	ldi	r21, 0x00	; 0
    530a:	69 81       	ldd	r22, Y+1	; 0x01
    530c:	7a 81       	ldd	r23, Y+2	; 0x02
    530e:	c4 01       	movw	r24, r8
    5310:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    5314:	26 c2       	rjmp	.+1100   	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x4D: // SWAGSQ GATE
			newthephi=gates.SWQ(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    5316:	20 e0       	ldi	r18, 0x00	; 0
    5318:	41 e0       	ldi	r20, 0x01	; 1
    531a:	50 e0       	ldi	r21, 0x00	; 0
    531c:	69 81       	ldd	r22, Y+1	; 0x01
    531e:	7a 81       	ldd	r23, Y+2	; 0x02
    5320:	c4 01       	movw	r24, r8
    5322:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5326:	8c 01       	movw	r16, r24
    5328:	20 e0       	ldi	r18, 0x00	; 0
    532a:	40 e0       	ldi	r20, 0x00	; 0
    532c:	50 e0       	ldi	r21, 0x00	; 0
    532e:	69 81       	ldd	r22, Y+1	; 0x01
    5330:	7a 81       	ldd	r23, Y+2	; 0x02
    5332:	c4 01       	movw	r24, r8
    5334:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5338:	6c 01       	movw	r12, r24
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	41 e0       	ldi	r20, 0x01	; 1
    533e:	50 e0       	ldi	r21, 0x00	; 0
    5340:	b2 01       	movw	r22, r4
    5342:	c4 01       	movw	r24, r8
    5344:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5348:	7c 01       	movw	r14, r24
    534a:	20 e0       	ldi	r18, 0x00	; 0
    534c:	40 e0       	ldi	r20, 0x00	; 0
    534e:	50 e0       	ldi	r21, 0x00	; 0
    5350:	b2 01       	movw	r22, r4
    5352:	c4 01       	movw	r24, r8
    5354:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5358:	96 01       	movw	r18, r12
    535a:	a7 01       	movw	r20, r14
    535c:	bc 01       	movw	r22, r24
    535e:	c4 01       	movw	r24, r8
    5360:	0a 96       	adiw	r24, 0x0a	; 10
    5362:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN5Gates3SWQEiiii>
    5366:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5368:	fc 01       	movw	r30, r24
    536a:	20 81       	ld	r18, Z
    536c:	31 81       	ldd	r19, Z+1	; 0x01
    536e:	40 e0       	ldi	r20, 0x00	; 0
    5370:	50 e0       	ldi	r21, 0x00	; 0
    5372:	b2 01       	movw	r22, r4
    5374:	c4 01       	movw	r24, r8
    5376:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    537a:	d8 01       	movw	r26, r16
    537c:	12 96       	adiw	r26, 0x02	; 2
    537e:	2d 91       	ld	r18, X+
    5380:	3c 91       	ld	r19, X
    5382:	13 97       	sbiw	r26, 0x03	; 3
    5384:	41 e0       	ldi	r20, 0x01	; 1
    5386:	50 e0       	ldi	r21, 0x00	; 0
    5388:	b2 01       	movw	r22, r4
    538a:	c4 01       	movw	r24, r8
    538c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    5390:	f8 01       	movw	r30, r16
    5392:	24 81       	ldd	r18, Z+4	; 0x04
    5394:	35 81       	ldd	r19, Z+5	; 0x05
    5396:	40 e0       	ldi	r20, 0x00	; 0
    5398:	50 e0       	ldi	r21, 0x00	; 0
    539a:	69 81       	ldd	r22, Y+1	; 0x01
    539c:	7a 81       	ldd	r23, Y+2	; 0x02
    539e:	c4 01       	movw	r24, r8
    53a0:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    53a4:	d8 01       	movw	r26, r16
    53a6:	16 96       	adiw	r26, 0x06	; 6
    53a8:	2d 91       	ld	r18, X+
    53aa:	3c 91       	ld	r19, X
    53ac:	17 97       	sbiw	r26, 0x07	; 7
    53ae:	41 e0       	ldi	r20, 0x01	; 1
    53b0:	50 e0       	ldi	r21, 0x00	; 0
    53b2:	69 81       	ldd	r22, Y+1	; 0x01
    53b4:	7a 81       	ldd	r23, Y+2	; 0x02
    53b6:	c4 01       	movw	r24, r8
    53b8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    53bc:	d2 c1       	rjmp	.+932    	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x4E: // SWAPI GATE
			newthephi=gates.SWI(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    53be:	20 e0       	ldi	r18, 0x00	; 0
    53c0:	41 e0       	ldi	r20, 0x01	; 1
    53c2:	50 e0       	ldi	r21, 0x00	; 0
    53c4:	69 81       	ldd	r22, Y+1	; 0x01
    53c6:	7a 81       	ldd	r23, Y+2	; 0x02
    53c8:	c4 01       	movw	r24, r8
    53ca:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    53ce:	8c 01       	movw	r16, r24
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	40 e0       	ldi	r20, 0x00	; 0
    53d4:	50 e0       	ldi	r21, 0x00	; 0
    53d6:	69 81       	ldd	r22, Y+1	; 0x01
    53d8:	7a 81       	ldd	r23, Y+2	; 0x02
    53da:	c4 01       	movw	r24, r8
    53dc:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    53e0:	6c 01       	movw	r12, r24
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	41 e0       	ldi	r20, 0x01	; 1
    53e6:	50 e0       	ldi	r21, 0x00	; 0
    53e8:	b2 01       	movw	r22, r4
    53ea:	c4 01       	movw	r24, r8
    53ec:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    53f0:	7c 01       	movw	r14, r24
    53f2:	20 e0       	ldi	r18, 0x00	; 0
    53f4:	40 e0       	ldi	r20, 0x00	; 0
    53f6:	50 e0       	ldi	r21, 0x00	; 0
    53f8:	b2 01       	movw	r22, r4
    53fa:	c4 01       	movw	r24, r8
    53fc:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5400:	96 01       	movw	r18, r12
    5402:	a7 01       	movw	r20, r14
    5404:	bc 01       	movw	r22, r24
    5406:	c4 01       	movw	r24, r8
    5408:	0a 96       	adiw	r24, 0x0a	; 10
    540a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <_ZN5Gates3SWIEiiii>
    540e:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5410:	fc 01       	movw	r30, r24
    5412:	20 81       	ld	r18, Z
    5414:	31 81       	ldd	r19, Z+1	; 0x01
    5416:	40 e0       	ldi	r20, 0x00	; 0
    5418:	50 e0       	ldi	r21, 0x00	; 0
    541a:	b2 01       	movw	r22, r4
    541c:	c4 01       	movw	r24, r8
    541e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    5422:	d8 01       	movw	r26, r16
    5424:	12 96       	adiw	r26, 0x02	; 2
    5426:	2d 91       	ld	r18, X+
    5428:	3c 91       	ld	r19, X
    542a:	13 97       	sbiw	r26, 0x03	; 3
    542c:	41 e0       	ldi	r20, 0x01	; 1
    542e:	50 e0       	ldi	r21, 0x00	; 0
    5430:	b2 01       	movw	r22, r4
    5432:	c4 01       	movw	r24, r8
    5434:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    5438:	f8 01       	movw	r30, r16
    543a:	24 81       	ldd	r18, Z+4	; 0x04
    543c:	35 81       	ldd	r19, Z+5	; 0x05
    543e:	40 e0       	ldi	r20, 0x00	; 0
    5440:	50 e0       	ldi	r21, 0x00	; 0
    5442:	69 81       	ldd	r22, Y+1	; 0x01
    5444:	7a 81       	ldd	r23, Y+2	; 0x02
    5446:	c4 01       	movw	r24, r8
    5448:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    544c:	d8 01       	movw	r26, r16
    544e:	16 96       	adiw	r26, 0x06	; 6
    5450:	2d 91       	ld	r18, X+
    5452:	3c 91       	ld	r19, X
    5454:	17 97       	sbiw	r26, 0x07	; 7
    5456:	41 e0       	ldi	r20, 0x01	; 1
    5458:	50 e0       	ldi	r21, 0x00	; 0
    545a:	69 81       	ldd	r22, Y+1	; 0x01
    545c:	7a 81       	ldd	r23, Y+2	; 0x02
    545e:	c4 01       	movw	r24, r8
    5460:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    5464:	7e c1       	rjmp	.+764    	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		//3 QUBIT GATES -
		case 0x4F: // CONTROL SWAP GATE
			newthephi=gates.CSW(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false));
    5466:	20 e0       	ldi	r18, 0x00	; 0
    5468:	41 e0       	ldi	r20, 0x01	; 1
    546a:	50 e0       	ldi	r21, 0x00	; 0
    546c:	6d 81       	ldd	r22, Y+5	; 0x05
    546e:	7e 81       	ldd	r23, Y+6	; 0x06
    5470:	c4 01       	movw	r24, r8
    5472:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5476:	6c 01       	movw	r12, r24
    5478:	20 e0       	ldi	r18, 0x00	; 0
    547a:	40 e0       	ldi	r20, 0x00	; 0
    547c:	50 e0       	ldi	r21, 0x00	; 0
    547e:	6d 81       	ldd	r22, Y+5	; 0x05
    5480:	7e 81       	ldd	r23, Y+6	; 0x06
    5482:	c4 01       	movw	r24, r8
    5484:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5488:	7c 01       	movw	r14, r24
    548a:	20 e0       	ldi	r18, 0x00	; 0
    548c:	41 e0       	ldi	r20, 0x01	; 1
    548e:	50 e0       	ldi	r21, 0x00	; 0
    5490:	69 81       	ldd	r22, Y+1	; 0x01
    5492:	7a 81       	ldd	r23, Y+2	; 0x02
    5494:	c4 01       	movw	r24, r8
    5496:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    549a:	8c 01       	movw	r16, r24
    549c:	20 e0       	ldi	r18, 0x00	; 0
    549e:	40 e0       	ldi	r20, 0x00	; 0
    54a0:	50 e0       	ldi	r21, 0x00	; 0
    54a2:	69 81       	ldd	r22, Y+1	; 0x01
    54a4:	7a 81       	ldd	r23, Y+2	; 0x02
    54a6:	c4 01       	movw	r24, r8
    54a8:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    54ac:	1c 01       	movw	r2, r24
    54ae:	20 e0       	ldi	r18, 0x00	; 0
    54b0:	41 e0       	ldi	r20, 0x01	; 1
    54b2:	50 e0       	ldi	r21, 0x00	; 0
    54b4:	b2 01       	movw	r22, r4
    54b6:	c4 01       	movw	r24, r8
    54b8:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    54bc:	5c 01       	movw	r10, r24
    54be:	20 e0       	ldi	r18, 0x00	; 0
    54c0:	40 e0       	ldi	r20, 0x00	; 0
    54c2:	50 e0       	ldi	r21, 0x00	; 0
    54c4:	b2 01       	movw	r22, r4
    54c6:	c4 01       	movw	r24, r8
    54c8:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    54cc:	91 01       	movw	r18, r2
    54ce:	a5 01       	movw	r20, r10
    54d0:	bc 01       	movw	r22, r24
    54d2:	c4 01       	movw	r24, r8
    54d4:	0a 96       	adiw	r24, 0x0a	; 10
    54d6:	0e 94 50 14 	call	0x28a0	; 0x28a0 <_ZN5Gates3CSWEiiiiii>
    54da:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    54dc:	fc 01       	movw	r30, r24
    54de:	20 81       	ld	r18, Z
    54e0:	31 81       	ldd	r19, Z+1	; 0x01
    54e2:	40 e0       	ldi	r20, 0x00	; 0
    54e4:	50 e0       	ldi	r21, 0x00	; 0
    54e6:	b2 01       	movw	r22, r4
    54e8:	c4 01       	movw	r24, r8
    54ea:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    54ee:	d8 01       	movw	r26, r16
    54f0:	12 96       	adiw	r26, 0x02	; 2
    54f2:	2d 91       	ld	r18, X+
    54f4:	3c 91       	ld	r19, X
    54f6:	13 97       	sbiw	r26, 0x03	; 3
    54f8:	41 e0       	ldi	r20, 0x01	; 1
    54fa:	50 e0       	ldi	r21, 0x00	; 0
    54fc:	b2 01       	movw	r22, r4
    54fe:	c4 01       	movw	r24, r8
    5500:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    5504:	f8 01       	movw	r30, r16
    5506:	24 81       	ldd	r18, Z+4	; 0x04
    5508:	35 81       	ldd	r19, Z+5	; 0x05
    550a:	40 e0       	ldi	r20, 0x00	; 0
    550c:	50 e0       	ldi	r21, 0x00	; 0
    550e:	69 81       	ldd	r22, Y+1	; 0x01
    5510:	7a 81       	ldd	r23, Y+2	; 0x02
    5512:	c4 01       	movw	r24, r8
    5514:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    5518:	d8 01       	movw	r26, r16
    551a:	16 96       	adiw	r26, 0x06	; 6
    551c:	2d 91       	ld	r18, X+
    551e:	3c 91       	ld	r19, X
    5520:	17 97       	sbiw	r26, 0x07	; 7
    5522:	41 e0       	ldi	r20, 0x01	; 1
    5524:	50 e0       	ldi	r21, 0x00	; 0
    5526:	69 81       	ldd	r22, Y+1	; 0x01
    5528:	7a 81       	ldd	r23, Y+2	; 0x02
    552a:	c4 01       	movw	r24, r8
    552c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    5530:	f8 01       	movw	r30, r16
    5532:	20 85       	ldd	r18, Z+8	; 0x08
    5534:	31 85       	ldd	r19, Z+9	; 0x09
    5536:	40 e0       	ldi	r20, 0x00	; 0
    5538:	50 e0       	ldi	r21, 0x00	; 0
    553a:	6d 81       	ldd	r22, Y+5	; 0x05
    553c:	7e 81       	ldd	r23, Y+6	; 0x06
    553e:	c4 01       	movw	r24, r8
    5540:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    5544:	d8 01       	movw	r26, r16
    5546:	1a 96       	adiw	r26, 0x0a	; 10
    5548:	2d 91       	ld	r18, X+
    554a:	3c 91       	ld	r19, X
    554c:	1b 97       	sbiw	r26, 0x0b	; 11
    554e:	41 e0       	ldi	r20, 0x01	; 1
    5550:	50 e0       	ldi	r21, 0x00	; 0
    5552:	6d 81       	ldd	r22, Y+5	; 0x05
    5554:	7e 81       	ldd	r23, Y+6	; 0x06
    5556:	c4 01       	movw	r24, r8
    5558:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    555c:	02 c1       	rjmp	.+516    	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x50: // TOFFOLI GATE
			newthephi=gates.TOF(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false));
    555e:	20 e0       	ldi	r18, 0x00	; 0
    5560:	41 e0       	ldi	r20, 0x01	; 1
    5562:	50 e0       	ldi	r21, 0x00	; 0
    5564:	6d 81       	ldd	r22, Y+5	; 0x05
    5566:	7e 81       	ldd	r23, Y+6	; 0x06
    5568:	c4 01       	movw	r24, r8
    556a:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    556e:	6c 01       	movw	r12, r24
    5570:	20 e0       	ldi	r18, 0x00	; 0
    5572:	40 e0       	ldi	r20, 0x00	; 0
    5574:	50 e0       	ldi	r21, 0x00	; 0
    5576:	6d 81       	ldd	r22, Y+5	; 0x05
    5578:	7e 81       	ldd	r23, Y+6	; 0x06
    557a:	c4 01       	movw	r24, r8
    557c:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5580:	7c 01       	movw	r14, r24
    5582:	20 e0       	ldi	r18, 0x00	; 0
    5584:	41 e0       	ldi	r20, 0x01	; 1
    5586:	50 e0       	ldi	r21, 0x00	; 0
    5588:	69 81       	ldd	r22, Y+1	; 0x01
    558a:	7a 81       	ldd	r23, Y+2	; 0x02
    558c:	c4 01       	movw	r24, r8
    558e:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5592:	8c 01       	movw	r16, r24
    5594:	20 e0       	ldi	r18, 0x00	; 0
    5596:	40 e0       	ldi	r20, 0x00	; 0
    5598:	50 e0       	ldi	r21, 0x00	; 0
    559a:	69 81       	ldd	r22, Y+1	; 0x01
    559c:	7a 81       	ldd	r23, Y+2	; 0x02
    559e:	c4 01       	movw	r24, r8
    55a0:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    55a4:	1c 01       	movw	r2, r24
    55a6:	20 e0       	ldi	r18, 0x00	; 0
    55a8:	41 e0       	ldi	r20, 0x01	; 1
    55aa:	50 e0       	ldi	r21, 0x00	; 0
    55ac:	b2 01       	movw	r22, r4
    55ae:	c4 01       	movw	r24, r8
    55b0:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    55b4:	5c 01       	movw	r10, r24
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	40 e0       	ldi	r20, 0x00	; 0
    55ba:	50 e0       	ldi	r21, 0x00	; 0
    55bc:	b2 01       	movw	r22, r4
    55be:	c4 01       	movw	r24, r8
    55c0:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    55c4:	91 01       	movw	r18, r2
    55c6:	a5 01       	movw	r20, r10
    55c8:	bc 01       	movw	r22, r24
    55ca:	c4 01       	movw	r24, r8
    55cc:	0a 96       	adiw	r24, 0x0a	; 10
    55ce:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <_ZN5Gates3TOFEiiiiii>
    55d2:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    55d4:	fc 01       	movw	r30, r24
    55d6:	20 81       	ld	r18, Z
    55d8:	31 81       	ldd	r19, Z+1	; 0x01
    55da:	40 e0       	ldi	r20, 0x00	; 0
    55dc:	50 e0       	ldi	r21, 0x00	; 0
    55de:	b2 01       	movw	r22, r4
    55e0:	c4 01       	movw	r24, r8
    55e2:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    55e6:	d8 01       	movw	r26, r16
    55e8:	12 96       	adiw	r26, 0x02	; 2
    55ea:	2d 91       	ld	r18, X+
    55ec:	3c 91       	ld	r19, X
    55ee:	13 97       	sbiw	r26, 0x03	; 3
    55f0:	41 e0       	ldi	r20, 0x01	; 1
    55f2:	50 e0       	ldi	r21, 0x00	; 0
    55f4:	b2 01       	movw	r22, r4
    55f6:	c4 01       	movw	r24, r8
    55f8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    55fc:	f8 01       	movw	r30, r16
    55fe:	24 81       	ldd	r18, Z+4	; 0x04
    5600:	35 81       	ldd	r19, Z+5	; 0x05
    5602:	40 e0       	ldi	r20, 0x00	; 0
    5604:	50 e0       	ldi	r21, 0x00	; 0
    5606:	69 81       	ldd	r22, Y+1	; 0x01
    5608:	7a 81       	ldd	r23, Y+2	; 0x02
    560a:	c4 01       	movw	r24, r8
    560c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    5610:	d8 01       	movw	r26, r16
    5612:	16 96       	adiw	r26, 0x06	; 6
    5614:	2d 91       	ld	r18, X+
    5616:	3c 91       	ld	r19, X
    5618:	17 97       	sbiw	r26, 0x07	; 7
    561a:	41 e0       	ldi	r20, 0x01	; 1
    561c:	50 e0       	ldi	r21, 0x00	; 0
    561e:	69 81       	ldd	r22, Y+1	; 0x01
    5620:	7a 81       	ldd	r23, Y+2	; 0x02
    5622:	c4 01       	movw	r24, r8
    5624:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    5628:	f8 01       	movw	r30, r16
    562a:	20 85       	ldd	r18, Z+8	; 0x08
    562c:	31 85       	ldd	r19, Z+9	; 0x09
    562e:	40 e0       	ldi	r20, 0x00	; 0
    5630:	50 e0       	ldi	r21, 0x00	; 0
    5632:	6d 81       	ldd	r22, Y+5	; 0x05
    5634:	7e 81       	ldd	r23, Y+6	; 0x06
    5636:	c4 01       	movw	r24, r8
    5638:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    563c:	d8 01       	movw	r26, r16
    563e:	1a 96       	adiw	r26, 0x0a	; 10
    5640:	2d 91       	ld	r18, X+
    5642:	3c 91       	ld	r19, X
    5644:	1b 97       	sbiw	r26, 0x0b	; 11
    5646:	41 e0       	ldi	r20, 0x01	; 1
    5648:	50 e0       	ldi	r21, 0x00	; 0
    564a:	6d 81       	ldd	r22, Y+5	; 0x05
    564c:	7e 81       	ldd	r23, Y+6	; 0x06
    564e:	c4 01       	movw	r24, r8
    5650:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			break;
    5654:	86 c0       	rjmp	.+268    	; 0x5762 <_ZN4QEPU7executeEilll+0x1504>
		case 0x51: // DEUTSCH GATE
			newthephi=gates.DEU(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false),read(0,THE,false));
    5656:	20 e0       	ldi	r18, 0x00	; 0
    5658:	40 e0       	ldi	r20, 0x00	; 0
    565a:	50 e0       	ldi	r21, 0x00	; 0
    565c:	60 e0       	ldi	r22, 0x00	; 0
    565e:	70 e0       	ldi	r23, 0x00	; 0
    5660:	c4 01       	movw	r24, r8
    5662:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5666:	5c 01       	movw	r10, r24
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	41 e0       	ldi	r20, 0x01	; 1
    566c:	50 e0       	ldi	r21, 0x00	; 0
    566e:	6d 81       	ldd	r22, Y+5	; 0x05
    5670:	7e 81       	ldd	r23, Y+6	; 0x06
    5672:	c4 01       	movw	r24, r8
    5674:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    5678:	6c 01       	movw	r12, r24
    567a:	20 e0       	ldi	r18, 0x00	; 0
    567c:	40 e0       	ldi	r20, 0x00	; 0
    567e:	50 e0       	ldi	r21, 0x00	; 0
    5680:	6d 81       	ldd	r22, Y+5	; 0x05
    5682:	7e 81       	ldd	r23, Y+6	; 0x06
    5684:	c4 01       	movw	r24, r8
    5686:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    568a:	7c 01       	movw	r14, r24
    568c:	20 e0       	ldi	r18, 0x00	; 0
    568e:	41 e0       	ldi	r20, 0x01	; 1
    5690:	50 e0       	ldi	r21, 0x00	; 0
    5692:	69 81       	ldd	r22, Y+1	; 0x01
    5694:	7a 81       	ldd	r23, Y+2	; 0x02
    5696:	c4 01       	movw	r24, r8
    5698:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    569c:	8c 01       	movw	r16, r24
    569e:	20 e0       	ldi	r18, 0x00	; 0
    56a0:	40 e0       	ldi	r20, 0x00	; 0
    56a2:	50 e0       	ldi	r21, 0x00	; 0
    56a4:	69 81       	ldd	r22, Y+1	; 0x01
    56a6:	7a 81       	ldd	r23, Y+2	; 0x02
    56a8:	c4 01       	movw	r24, r8
    56aa:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    56ae:	1c 01       	movw	r2, r24
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	41 e0       	ldi	r20, 0x01	; 1
    56b4:	50 e0       	ldi	r21, 0x00	; 0
    56b6:	b2 01       	movw	r22, r4
    56b8:	c4 01       	movw	r24, r8
    56ba:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    56be:	9a 87       	std	Y+10, r25	; 0x0a
    56c0:	89 87       	std	Y+9, r24	; 0x09
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	40 e0       	ldi	r20, 0x00	; 0
    56c6:	50 e0       	ldi	r21, 0x00	; 0
    56c8:	b2 01       	movw	r22, r4
    56ca:	c4 01       	movw	r24, r8
    56cc:	0e 94 24 20 	call	0x4048	; 0x4048 <_ZN4QEPU4readEiib>
    56d0:	91 01       	movw	r18, r2
    56d2:	49 85       	ldd	r20, Y+9	; 0x09
    56d4:	5a 85       	ldd	r21, Y+10	; 0x0a
    56d6:	bc 01       	movw	r22, r24
    56d8:	c4 01       	movw	r24, r8
    56da:	0a 96       	adiw	r24, 0x0a	; 10
    56dc:	0e 94 4c 1a 	call	0x3498	; 0x3498 <_ZN5Gates3DEUEiiiiiii>
    56e0:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    56e2:	fc 01       	movw	r30, r24
    56e4:	20 81       	ld	r18, Z
    56e6:	31 81       	ldd	r19, Z+1	; 0x01
    56e8:	40 e0       	ldi	r20, 0x00	; 0
    56ea:	50 e0       	ldi	r21, 0x00	; 0
    56ec:	b2 01       	movw	r22, r4
    56ee:	c4 01       	movw	r24, r8
    56f0:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    56f4:	d8 01       	movw	r26, r16
    56f6:	12 96       	adiw	r26, 0x02	; 2
    56f8:	2d 91       	ld	r18, X+
    56fa:	3c 91       	ld	r19, X
    56fc:	13 97       	sbiw	r26, 0x03	; 3
    56fe:	41 e0       	ldi	r20, 0x01	; 1
    5700:	50 e0       	ldi	r21, 0x00	; 0
    5702:	b2 01       	movw	r22, r4
    5704:	c4 01       	movw	r24, r8
    5706:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    570a:	f8 01       	movw	r30, r16
    570c:	24 81       	ldd	r18, Z+4	; 0x04
    570e:	35 81       	ldd	r19, Z+5	; 0x05
    5710:	40 e0       	ldi	r20, 0x00	; 0
    5712:	50 e0       	ldi	r21, 0x00	; 0
    5714:	69 81       	ldd	r22, Y+1	; 0x01
    5716:	7a 81       	ldd	r23, Y+2	; 0x02
    5718:	c4 01       	movw	r24, r8
    571a:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    571e:	d8 01       	movw	r26, r16
    5720:	16 96       	adiw	r26, 0x06	; 6
    5722:	2d 91       	ld	r18, X+
    5724:	3c 91       	ld	r19, X
    5726:	17 97       	sbiw	r26, 0x07	; 7
    5728:	41 e0       	ldi	r20, 0x01	; 1
    572a:	50 e0       	ldi	r21, 0x00	; 0
    572c:	69 81       	ldd	r22, Y+1	; 0x01
    572e:	7a 81       	ldd	r23, Y+2	; 0x02
    5730:	c4 01       	movw	r24, r8
    5732:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    5736:	f8 01       	movw	r30, r16
    5738:	20 85       	ldd	r18, Z+8	; 0x08
    573a:	31 85       	ldd	r19, Z+9	; 0x09
    573c:	40 e0       	ldi	r20, 0x00	; 0
    573e:	50 e0       	ldi	r21, 0x00	; 0
    5740:	6d 81       	ldd	r22, Y+5	; 0x05
    5742:	7e 81       	ldd	r23, Y+6	; 0x06
    5744:	c4 01       	movw	r24, r8
    5746:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
    574a:	d8 01       	movw	r26, r16
    574c:	1a 96       	adiw	r26, 0x0a	; 10
    574e:	2d 91       	ld	r18, X+
    5750:	3c 91       	ld	r19, X
    5752:	1b 97       	sbiw	r26, 0x0b	; 11
    5754:	41 e0       	ldi	r20, 0x01	; 1
    5756:	50 e0       	ldi	r21, 0x00	; 0
    5758:	6d 81       	ldd	r22, Y+5	; 0x05
    575a:	7e 81       	ldd	r23, Y+6	; 0x06
    575c:	c4 01       	movw	r24, r8
    575e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <_ZN4QEPU5writeEiii>
		serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
		serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
		serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
		serial.writestrln("");
	}
	free(newthephi);	
    5762:	c8 01       	movw	r24, r16
    5764:	0e 94 4e 34 	call	0x689c	; 0x689c <free>
    5768:	2a 96       	adiw	r28, 0x0a	; 10
    576a:	0f b6       	in	r0, 0x3f	; 63
    576c:	f8 94       	cli
    576e:	de bf       	out	0x3e, r29	; 62
    5770:	0f be       	out	0x3f, r0	; 63
    5772:	cd bf       	out	0x3d, r28	; 61
    5774:	df 91       	pop	r29
    5776:	cf 91       	pop	r28
    5778:	1f 91       	pop	r17
    577a:	0f 91       	pop	r16
    577c:	ff 90       	pop	r15
    577e:	ef 90       	pop	r14
    5780:	df 90       	pop	r13
    5782:	cf 90       	pop	r12
    5784:	bf 90       	pop	r11
    5786:	af 90       	pop	r10
    5788:	9f 90       	pop	r9
    578a:	8f 90       	pop	r8
    578c:	7f 90       	pop	r7
    578e:	6f 90       	pop	r6
    5790:	5f 90       	pop	r5
    5792:	4f 90       	pop	r4
    5794:	3f 90       	pop	r3
    5796:	2f 90       	pop	r2
    5798:	08 95       	ret

0000579a <_ZN4QEPU3runEv>:

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
}

void QEPU::run(){
    579a:	2f 92       	push	r2
    579c:	3f 92       	push	r3
    579e:	4f 92       	push	r4
    57a0:	5f 92       	push	r5
    57a2:	6f 92       	push	r6
    57a4:	7f 92       	push	r7
    57a6:	8f 92       	push	r8
    57a8:	9f 92       	push	r9
    57aa:	af 92       	push	r10
    57ac:	bf 92       	push	r11
    57ae:	cf 92       	push	r12
    57b0:	df 92       	push	r13
    57b2:	ef 92       	push	r14
    57b4:	ff 92       	push	r15
    57b6:	0f 93       	push	r16
    57b8:	1f 93       	push	r17
    57ba:	cf 93       	push	r28
    57bc:	df 93       	push	r29
    57be:	cd b7       	in	r28, 0x3d	; 61
    57c0:	de b7       	in	r29, 0x3e	; 62
    57c2:	ab 97       	sbiw	r28, 0x2b	; 43
    57c4:	0f b6       	in	r0, 0x3f	; 63
    57c6:	f8 94       	cli
    57c8:	de bf       	out	0x3e, r29	; 62
    57ca:	0f be       	out	0x3f, r0	; 63
    57cc:	cd bf       	out	0x3d, r28	; 61
    57ce:	99 a3       	std	Y+33, r25	; 0x21
    57d0:	88 a3       	std	Y+32, r24	; 0x20
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
    57d2:	01 96       	adiw	r24, 0x01	; 1
    57d4:	9b a7       	std	Y+43, r25	; 0x2b
    57d6:	8a a7       	std	Y+42, r24	; 0x2a
    57d8:	64 eb       	ldi	r22, 0xB4	; 180
    57da:	70 e0       	ldi	r23, 0x00	; 0
    57dc:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <_ZN6Serial10writestrlnEPc>
    57e0:	69 ea       	ldi	r22, 0xA9	; 169
    57e2:	70 e0       	ldi	r23, 0x00	; 0
    57e4:	8a a5       	ldd	r24, Y+42	; 0x2a
    57e6:	9b a5       	ldd	r25, Y+43	; 0x2b
    57e8:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <_ZN6Serial10writestrlnEPc>
	
	int line_width=INSTR_WIDTH;
	program_counter_maximum=eeprom.count_lines();
    57ec:	68 a0       	ldd	r6, Y+32	; 0x20
    57ee:	79 a0       	ldd	r7, Y+33	; 0x21
    57f0:	22 e0       	ldi	r18, 0x02	; 2
    57f2:	62 0e       	add	r6, r18
    57f4:	71 1c       	adc	r7, r1
    57f6:	c3 01       	movw	r24, r6
    57f8:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN6EEProm11count_linesEv>
    57fc:	e8 a1       	ldd	r30, Y+32	; 0x20
    57fe:	f9 a1       	ldd	r31, Y+33	; 0x21
    5800:	e8 52       	subi	r30, 0x28	; 40
    5802:	ff 4f       	sbci	r31, 0xFF	; 255
    5804:	91 83       	std	Z+1, r25	; 0x01
    5806:	80 83       	st	Z, r24
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    5808:	e8 a1       	ldd	r30, Y+32	; 0x20
    580a:	f9 a1       	ldd	r31, Y+33	; 0x21
    580c:	ea 52       	subi	r30, 0x2A	; 42
    580e:	ff 4f       	sbci	r31, 0xFF	; 255
    5810:	11 82       	std	Z+1, r1	; 0x01
    5812:	10 82       	st	Z, r1
    5814:	18 16       	cp	r1, r24
    5816:	19 06       	cpc	r1, r25
    5818:	0c f0       	brlt	.+2      	; 0x581c <_ZN4QEPU3runEv+0x82>
    581a:	c7 c0       	rjmp	.+398    	; 0x59aa <_ZN4QEPU3runEv+0x210>
    581c:	80 e0       	ldi	r24, 0x00	; 0
    581e:	90 e0       	ldi	r25, 0x00	; 0
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
    5820:	1e 01       	movw	r2, r28
    5822:	3f e0       	ldi	r19, 0x0F	; 15
    5824:	23 0e       	add	r2, r19
    5826:	31 1c       	adc	r3, r1
    5828:	0f 2e       	mov	r0, r31
    582a:	fe eb       	ldi	r31, 0xBE	; 190
    582c:	8f 2e       	mov	r8, r31
    582e:	f0 e0       	ldi	r31, 0x00	; 0
    5830:	9f 2e       	mov	r9, r31
    5832:	f0 2d       	mov	r31, r0
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
    5834:	2e 01       	movw	r4, r28
    5836:	e8 e0       	ldi	r30, 0x08	; 8
    5838:	4e 0e       	add	r4, r30
    583a:	51 1c       	adc	r5, r1
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
    583c:	9e 01       	movw	r18, r28
    583e:	2f 5f       	subi	r18, 0xFF	; 255
    5840:	3f 4f       	sbci	r19, 0xFF	; 255
    5842:	3f 8b       	std	Y+23, r19	; 0x17
    5844:	2e 8b       	std	Y+22, r18	; 0x16
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
    5846:	2c a2       	std	Y+36, r2	; 0x24
    5848:	3d a2       	std	Y+37, r3	; 0x25
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
    584a:	4e a2       	std	Y+38, r4	; 0x26
    584c:	5f a2       	std	Y+39, r5	; 0x27
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
    584e:	3e 89       	ldd	r19, Y+22	; 0x16
    5850:	38 a7       	std	Y+40, r19	; 0x28
    5852:	ef 89       	ldd	r30, Y+23	; 0x17
    5854:	e9 a7       	std	Y+41, r30	; 0x29
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
	
	int line_width=INSTR_WIDTH;
	program_counter_maximum=eeprom.count_lines();
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    5856:	28 a1       	ldd	r18, Y+32	; 0x20
    5858:	39 a1       	ldd	r19, Y+33	; 0x21
    585a:	2a 52       	subi	r18, 0x2A	; 42
    585c:	3f 4f       	sbci	r19, 0xFF	; 255
    585e:	39 8f       	std	Y+25, r19	; 0x19
    5860:	28 8f       	std	Y+24, r18	; 0x18
    5862:	e8 a1       	ldd	r30, Y+32	; 0x20
    5864:	f9 a1       	ldd	r31, Y+33	; 0x21
    5866:	e8 52       	subi	r30, 0x28	; 40
    5868:	ff 4f       	sbci	r31, 0xFF	; 255
    586a:	fb a3       	std	Y+35, r31	; 0x23
    586c:	ea a3       	std	Y+34, r30	; 0x22
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
    586e:	fd e0       	ldi	r31, 0x0D	; 13
    5870:	f8 9f       	mul	r31, r24
    5872:	50 01       	movw	r10, r0
    5874:	f9 9f       	mul	r31, r25
    5876:	b0 0c       	add	r11, r0
    5878:	11 24       	eor	r1, r1
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
    587a:	1f 86       	std	Y+15, r1	; 0x0f
    587c:	18 8a       	std	Y+16, r1	; 0x10
    587e:	19 8a       	std	Y+17, r1	; 0x11
    5880:	1a 8a       	std	Y+18, r1	; 0x12
    5882:	1b 8a       	std	Y+19, r1	; 0x13
    5884:	1c 8a       	std	Y+20, r1	; 0x14
    5886:	1d 8a       	std	Y+21, r1	; 0x15
    5888:	18 86       	std	Y+8, r1	; 0x08
    588a:	19 86       	std	Y+9, r1	; 0x09
    588c:	1a 86       	std	Y+10, r1	; 0x0a
    588e:	1b 86       	std	Y+11, r1	; 0x0b
    5890:	1c 86       	std	Y+12, r1	; 0x0c
    5892:	1d 86       	std	Y+13, r1	; 0x0d
    5894:	1e 86       	std	Y+14, r1	; 0x0e
    5896:	19 82       	std	Y+1, r1	; 0x01
    5898:	1a 82       	std	Y+2, r1	; 0x02
    589a:	1b 82       	std	Y+3, r1	; 0x03
    589c:	1c 82       	std	Y+4, r1	; 0x04
    589e:	1d 82       	std	Y+5, r1	; 0x05
    58a0:	1e 82       	std	Y+6, r1	; 0x06
    58a2:	1f 82       	std	Y+7, r1	; 0x07
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
    58a4:	b5 01       	movw	r22, r10
    58a6:	c3 01       	movw	r24, r6
    58a8:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6EEProm4readEj>
    58ac:	28 2f       	mov	r18, r24
    58ae:	30 e0       	ldi	r19, 0x00	; 0
    58b0:	3b 8f       	std	Y+27, r19	; 0x1b
    58b2:	2a 8f       	std	Y+26, r18	; 0x1a
    58b4:	65 01       	movw	r12, r10
    58b6:	3f ef       	ldi	r19, 0xFF	; 255
    58b8:	c3 1a       	sub	r12, r19
    58ba:	d3 0a       	sbc	r13, r19
    58bc:	85 e0       	ldi	r24, 0x05	; 5
    58be:	a8 0e       	add	r10, r24
    58c0:	b1 1c       	adc	r11, r1
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
    58c2:	b6 01       	movw	r22, r12
    58c4:	c3 01       	movw	r24, r6
    58c6:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6EEProm4readEj>
    58ca:	1f 92       	push	r1
    58cc:	8f 93       	push	r24
    58ce:	3f 92       	push	r3
    58d0:	2f 92       	push	r2
    58d2:	9f 92       	push	r9
    58d4:	8f 92       	push	r8
    58d6:	3f 92       	push	r3
    58d8:	2f 92       	push	r2
    58da:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <sprintf>
    58de:	b6 01       	movw	r22, r12
    58e0:	6c 5f       	subi	r22, 0xFC	; 252
    58e2:	7f 4f       	sbci	r23, 0xFF	; 255
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
    58e4:	c3 01       	movw	r24, r6
    58e6:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6EEProm4readEj>
    58ea:	1f 92       	push	r1
    58ec:	8f 93       	push	r24
    58ee:	5f 92       	push	r5
    58f0:	4f 92       	push	r4
    58f2:	9f 92       	push	r9
    58f4:	8f 92       	push	r8
    58f6:	5f 92       	push	r5
    58f8:	4f 92       	push	r4
    58fa:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <sprintf>
    58fe:	b6 01       	movw	r22, r12
    5900:	68 5f       	subi	r22, 0xF8	; 248
    5902:	7f 4f       	sbci	r23, 0xFF	; 255
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
    5904:	c3 01       	movw	r24, r6
    5906:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6EEProm4readEj>
    590a:	1f 92       	push	r1
    590c:	8f 93       	push	r24
    590e:	9f 89       	ldd	r25, Y+23	; 0x17
    5910:	9f 93       	push	r25
    5912:	ee 89       	ldd	r30, Y+22	; 0x16
    5914:	ef 93       	push	r30
    5916:	9f 92       	push	r9
    5918:	8f 92       	push	r8
    591a:	9f 93       	push	r25
    591c:	ef 93       	push	r30
    591e:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <sprintf>
    5922:	ff ef       	ldi	r31, 0xFF	; 255
    5924:	cf 1a       	sub	r12, r31
    5926:	df 0a       	sbc	r13, r31
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    5928:	0f b6       	in	r0, 0x3f	; 63
    592a:	f8 94       	cli
    592c:	de bf       	out	0x3e, r29	; 62
    592e:	0f be       	out	0x3f, r0	; 63
    5930:	cd bf       	out	0x3d, r28	; 61
    5932:	ca 14       	cp	r12, r10
    5934:	db 04       	cpc	r13, r11
    5936:	29 f6       	brne	.-118    	; 0x58c2 <_ZN4QEPU3runEv+0x128>
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
		}
		//EXECUTE:
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16),strtol(op3s,NULL,16)); //INSTRUCTION DECODE AND EXECUTE
    5938:	40 e1       	ldi	r20, 0x10	; 16
    593a:	50 e0       	ldi	r21, 0x00	; 0
    593c:	60 e0       	ldi	r22, 0x00	; 0
    593e:	70 e0       	ldi	r23, 0x00	; 0
    5940:	88 a5       	ldd	r24, Y+40	; 0x28
    5942:	99 a5       	ldd	r25, Y+41	; 0x29
    5944:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <strtol>
    5948:	5b 01       	movw	r10, r22
    594a:	6c 01       	movw	r12, r24
    594c:	40 e1       	ldi	r20, 0x10	; 16
    594e:	50 e0       	ldi	r21, 0x00	; 0
    5950:	60 e0       	ldi	r22, 0x00	; 0
    5952:	70 e0       	ldi	r23, 0x00	; 0
    5954:	8e a1       	ldd	r24, Y+38	; 0x26
    5956:	9f a1       	ldd	r25, Y+39	; 0x27
    5958:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <strtol>
    595c:	6c 8f       	std	Y+28, r22	; 0x1c
    595e:	7d 8f       	std	Y+29, r23	; 0x1d
    5960:	8e 8f       	std	Y+30, r24	; 0x1e
    5962:	9f 8f       	std	Y+31, r25	; 0x1f
    5964:	40 e1       	ldi	r20, 0x10	; 16
    5966:	50 e0       	ldi	r21, 0x00	; 0
    5968:	60 e0       	ldi	r22, 0x00	; 0
    596a:	70 e0       	ldi	r23, 0x00	; 0
    596c:	8c a1       	ldd	r24, Y+36	; 0x24
    596e:	9d a1       	ldd	r25, Y+37	; 0x25
    5970:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <strtol>
    5974:	9b 01       	movw	r18, r22
    5976:	ac 01       	movw	r20, r24
    5978:	ec 8c       	ldd	r14, Y+28	; 0x1c
    597a:	fd 8c       	ldd	r15, Y+29	; 0x1d
    597c:	0e 8d       	ldd	r16, Y+30	; 0x1e
    597e:	1f 8d       	ldd	r17, Y+31	; 0x1f
    5980:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5982:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5984:	88 a1       	ldd	r24, Y+32	; 0x20
    5986:	99 a1       	ldd	r25, Y+33	; 0x21
    5988:	0e 94 2f 21 	call	0x425e	; 0x425e <_ZN4QEPU7executeEilll>
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
	
	int line_width=INSTR_WIDTH;
	program_counter_maximum=eeprom.count_lines();
	for(program_counter=0;program_counter<program_counter_maximum;program_counter++){
    598c:	e8 8d       	ldd	r30, Y+24	; 0x18
    598e:	f9 8d       	ldd	r31, Y+25	; 0x19
    5990:	80 81       	ld	r24, Z
    5992:	91 81       	ldd	r25, Z+1	; 0x01
    5994:	01 96       	adiw	r24, 0x01	; 1
    5996:	91 83       	std	Z+1, r25	; 0x01
    5998:	80 83       	st	Z, r24
    599a:	ea a1       	ldd	r30, Y+34	; 0x22
    599c:	fb a1       	ldd	r31, Y+35	; 0x23
    599e:	20 81       	ld	r18, Z
    59a0:	31 81       	ldd	r19, Z+1	; 0x01
    59a2:	82 17       	cp	r24, r18
    59a4:	93 07       	cpc	r25, r19
    59a6:	0c f4       	brge	.+2      	; 0x59aa <_ZN4QEPU3runEv+0x210>
    59a8:	62 cf       	rjmp	.-316    	; 0x586e <_ZN4QEPU3runEv+0xd4>
	if(SHOW_LAST_STATE){
		dumpmem(QUBIT_COUNT);
		serial.writestrln("");
		sram.dumpmem(5);
	}
	serial.writestrln("");
    59aa:	69 ea       	ldi	r22, 0xA9	; 169
    59ac:	70 e0       	ldi	r23, 0x00	; 0
    59ae:	8a a5       	ldd	r24, Y+42	; 0x2a
    59b0:	9b a5       	ldd	r25, Y+43	; 0x2b
    59b2:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <_ZN6Serial10writestrlnEPc>
	serial.writestr("The execution of the program has finished");
    59b6:	63 ec       	ldi	r22, 0xC3	; 195
    59b8:	70 e0       	ldi	r23, 0x00	; 0
    59ba:	8a a5       	ldd	r24, Y+42	; 0x2a
    59bc:	9b a5       	ldd	r25, Y+43	; 0x2b
    59be:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <_ZN6Serial8writestrEPc>
	#pragma endregion
}
    59c2:	ab 96       	adiw	r28, 0x2b	; 43
    59c4:	0f b6       	in	r0, 0x3f	; 63
    59c6:	f8 94       	cli
    59c8:	de bf       	out	0x3e, r29	; 62
    59ca:	0f be       	out	0x3f, r0	; 63
    59cc:	cd bf       	out	0x3d, r28	; 61
    59ce:	df 91       	pop	r29
    59d0:	cf 91       	pop	r28
    59d2:	1f 91       	pop	r17
    59d4:	0f 91       	pop	r16
    59d6:	ff 90       	pop	r15
    59d8:	ef 90       	pop	r14
    59da:	df 90       	pop	r13
    59dc:	cf 90       	pop	r12
    59de:	bf 90       	pop	r11
    59e0:	af 90       	pop	r10
    59e2:	9f 90       	pop	r9
    59e4:	8f 90       	pop	r8
    59e6:	7f 90       	pop	r7
    59e8:	6f 90       	pop	r6
    59ea:	5f 90       	pop	r5
    59ec:	4f 90       	pop	r4
    59ee:	3f 90       	pop	r3
    59f0:	2f 90       	pop	r2
    59f2:	08 95       	ret

000059f4 <main>:
#include "qepu.h"
int main(void){
    59f4:	cf 93       	push	r28
    59f6:	df 93       	push	r29
    59f8:	cd b7       	in	r28, 0x3d	; 61
    59fa:	de b7       	in	r29, 0x3e	; 62
    59fc:	cb 5d       	subi	r28, 0xDB	; 219
    59fe:	d1 09       	sbc	r29, r1
    5a00:	0f b6       	in	r0, 0x3f	; 63
    5a02:	f8 94       	cli
    5a04:	de bf       	out	0x3e, r29	; 62
    5a06:	0f be       	out	0x3f, r0	; 63
    5a08:	cd bf       	out	0x3d, r28	; 61
	QEPU qepu;
    5a0a:	ce 01       	movw	r24, r28
    5a0c:	01 96       	adiw	r24, 0x01	; 1
    5a0e:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <_ZN4QEPUC1Ev>
	qepu.run();
    5a12:	ce 01       	movw	r24, r28
    5a14:	01 96       	adiw	r24, 0x01	; 1
    5a16:	0e 94 cd 2b 	call	0x579a	; 0x579a <_ZN4QEPU3runEv>
    5a1a:	ff cf       	rjmp	.-2      	; 0x5a1a <main+0x26>

00005a1c <_ZN4SRAM4initEv>:
#include "sram.h"

SRAM::SRAM(){
	init();
}
void SRAM::init(){
    5a1c:	fc 01       	movw	r30, r24
	CTRLMEM_DIR=OUTPUT;
    5a1e:	8f ef       	ldi	r24, 0xFF	; 255
    5a20:	84 bb       	out	0x14, r24	; 20
	stack_head_offset=MEMORY_HEAD_PERMISSION_OFFSET+HEAD_PROGRAMMER_OFFSET;
    5a22:	84 e1       	ldi	r24, 0x14	; 20
    5a24:	90 e0       	ldi	r25, 0x00	; 0
    5a26:	91 83       	std	Z+1, r25	; 0x01
    5a28:	80 83       	st	Z, r24
	stack_tail_offset=ADDRESS_MAX-MEMORY_TAIL_PERMISSION_OFFSET-TAIL_PROGRAMMER_OFFSET;
    5a2a:	88 e3       	ldi	r24, 0x38	; 56
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	95 83       	std	Z+5, r25	; 0x05
    5a30:	84 83       	std	Z+4, r24	; 0x04
	memory_restrictedaccess_allowed=false;
    5a32:	16 82       	std	Z+6, r1	; 0x06
    5a34:	08 95       	ret

00005a36 <_ZN4SRAMC1Ev>:
#include "sram.h"

SRAM::SRAM(){
    5a36:	cf 93       	push	r28
    5a38:	df 93       	push	r29
    5a3a:	ec 01       	movw	r28, r24
    5a3c:	03 96       	adiw	r24, 0x03	; 3
    5a3e:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <_ZN6SerialC1Ev>
	init();
    5a42:	ce 01       	movw	r24, r28
    5a44:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <_ZN4SRAM4initEv>
}
    5a48:	df 91       	pop	r29
    5a4a:	cf 91       	pop	r28
    5a4c:	08 95       	ret

00005a4e <_ZN4SRAM11set_addressEi>:
	stack_tail_offset=ADDRESS_MAX-MEMORY_TAIL_PERMISSION_OFFSET-TAIL_PROGRAMMER_OFFSET;
	memory_restrictedaccess_allowed=false;
}

void SRAM::set_address(int address){
	MEM_ADDRESS_DIR=OUTPUT;
    5a4e:	2f ef       	ldi	r18, 0xFF	; 255
    5a50:	2a bb       	out	0x1a, r18	; 26
	if(!memory_restrictedaccess_allowed)
    5a52:	fc 01       	movw	r30, r24
    5a54:	26 81       	ldd	r18, Z+6	; 0x06
    5a56:	21 11       	cpse	r18, r1
    5a58:	0f c0       	rjmp	.+30     	; 0x5a78 <_ZN4SRAM11set_addressEi+0x2a>
		if(address+stack_head_offset>stack_tail_offset)MEM_ADDRESS=stack_tail_offset;
    5a5a:	20 81       	ld	r18, Z
    5a5c:	31 81       	ldd	r19, Z+1	; 0x01
    5a5e:	84 81       	ldd	r24, Z+4	; 0x04
    5a60:	95 81       	ldd	r25, Z+5	; 0x05
    5a62:	a9 01       	movw	r20, r18
    5a64:	46 0f       	add	r20, r22
    5a66:	57 1f       	adc	r21, r23
    5a68:	84 17       	cp	r24, r20
    5a6a:	95 07       	cpc	r25, r21
    5a6c:	14 f4       	brge	.+4      	; 0x5a72 <_ZN4SRAM11set_addressEi+0x24>
    5a6e:	8b bb       	out	0x1b, r24	; 27
    5a70:	08 95       	ret
		else MEM_ADDRESS=address+stack_head_offset;
    5a72:	62 0f       	add	r22, r18
    5a74:	6b bb       	out	0x1b, r22	; 27
    5a76:	08 95       	ret
	else MEM_ADDRESS=address;
    5a78:	6b bb       	out	0x1b, r22	; 27
    5a7a:	08 95       	ret

00005a7c <_ZN4SRAM10setctrlpinEii>:
void SRAM::bus_write(int data){
	BUS_DIR=OUTPUT;
	BUS_OUT=data;
}
void SRAM::setctrlpin(int pin,int state){
	CTRLMEM&=~(1<<pin); // CLEAR PIN
    5a7c:	75 b3       	in	r23, 0x15	; 21
    5a7e:	21 e0       	ldi	r18, 0x01	; 1
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	c9 01       	movw	r24, r18
    5a84:	06 2e       	mov	r0, r22
    5a86:	02 c0       	rjmp	.+4      	; 0x5a8c <_ZN4SRAM10setctrlpinEii+0x10>
    5a88:	88 0f       	add	r24, r24
    5a8a:	99 1f       	adc	r25, r25
    5a8c:	0a 94       	dec	r0
    5a8e:	e2 f7       	brpl	.-8      	; 0x5a88 <_ZN4SRAM10setctrlpinEii+0xc>
    5a90:	80 95       	com	r24
    5a92:	87 23       	and	r24, r23
    5a94:	85 bb       	out	0x15, r24	; 21
	CTRLMEM|=(state<<pin); // SET PIN
    5a96:	85 b3       	in	r24, 0x15	; 21
    5a98:	02 c0       	rjmp	.+4      	; 0x5a9e <_ZN4SRAM10setctrlpinEii+0x22>
    5a9a:	44 0f       	add	r20, r20
    5a9c:	55 1f       	adc	r21, r21
    5a9e:	6a 95       	dec	r22
    5aa0:	e2 f7       	brpl	.-8      	; 0x5a9a <_ZN4SRAM10setctrlpinEii+0x1e>
    5aa2:	48 2b       	or	r20, r24
    5aa4:	45 bb       	out	0x15, r20	; 21
    5aa6:	08 95       	ret

00005aa8 <_ZN4SRAM17memory_managementEv>:
		serial.writestrln(mem_debug_str);
	}
}

void SRAM::memory_management(){
	if(stack_head_offset>stack_tail_offset || stack_head_offset<0 || stack_head_offset>ADDRESS_MAX || stack_tail_offset<0 || stack_tail_offset>ADDRESS_MAX){
    5aa8:	fc 01       	movw	r30, r24
    5aaa:	20 81       	ld	r18, Z
    5aac:	31 81       	ldd	r19, Z+1	; 0x01
    5aae:	44 81       	ldd	r20, Z+4	; 0x04
    5ab0:	55 81       	ldd	r21, Z+5	; 0x05
    5ab2:	42 17       	cp	r20, r18
    5ab4:	53 07       	cpc	r21, r19
    5ab6:	34 f0       	brlt	.+12     	; 0x5ac4 <_ZN4SRAM17memory_managementEv+0x1c>
    5ab8:	21 30       	cpi	r18, 0x01	; 1
    5aba:	31 40       	sbci	r19, 0x01	; 1
    5abc:	18 f4       	brcc	.+6      	; 0x5ac4 <_ZN4SRAM17memory_managementEv+0x1c>
    5abe:	41 30       	cpi	r20, 0x01	; 1
    5ac0:	51 40       	sbci	r21, 0x01	; 1
    5ac2:	10 f0       	brcs	.+4      	; 0x5ac8 <_ZN4SRAM17memory_managementEv+0x20>
		init(); //RESTORE STACK POINTERS TO DEFAULT
    5ac4:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <_ZN4SRAM4initEv>
    5ac8:	08 95       	ret

00005aca <_ZN4SRAM4readEi>:
		if(address+stack_head_offset>stack_tail_offset)MEM_ADDRESS=stack_tail_offset;
		else MEM_ADDRESS=address+stack_head_offset;
	else MEM_ADDRESS=address;
}

int8_t SRAM::read(int address){
    5aca:	0f 93       	push	r16
    5acc:	1f 93       	push	r17
    5ace:	cf 93       	push	r28
    5ad0:	df 93       	push	r29
    5ad2:	ec 01       	movw	r28, r24
    5ad4:	8b 01       	movw	r16, r22
	memory_management();
    5ad6:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN4SRAM17memory_managementEv>
	set_address(address);
    5ada:	b8 01       	movw	r22, r16
    5adc:	ce 01       	movw	r24, r28
    5ade:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <_ZN4SRAM11set_addressEi>
	BUS_DIR=INPUT;
    5ae2:	17 ba       	out	0x17, r1	; 23
	setctrlpin(MRE,HIGH);
    5ae4:	41 e0       	ldi	r20, 0x01	; 1
    5ae6:	50 e0       	ldi	r21, 0x00	; 0
    5ae8:	66 e0       	ldi	r22, 0x06	; 6
    5aea:	70 e0       	ldi	r23, 0x00	; 0
    5aec:	ce 01       	movw	r24, r28
    5aee:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <_ZN4SRAM10setctrlpinEii>
	int bus_data=BUS_IN;
    5af2:	16 b3       	in	r17, 0x16	; 22
	setctrlpin(MRE,LOW);
    5af4:	40 e0       	ldi	r20, 0x00	; 0
    5af6:	50 e0       	ldi	r21, 0x00	; 0
    5af8:	66 e0       	ldi	r22, 0x06	; 6
    5afa:	70 e0       	ldi	r23, 0x00	; 0
    5afc:	ce 01       	movw	r24, r28
    5afe:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <_ZN4SRAM10setctrlpinEii>
	BUS_DIR=OUTPUT;
    5b02:	8f ef       	ldi	r24, 0xFF	; 255
    5b04:	87 bb       	out	0x17, r24	; 23
	MEM_ADDRESS=LOW;
    5b06:	1b ba       	out	0x1b, r1	; 27
	return bus_data;
}
    5b08:	81 2f       	mov	r24, r17
    5b0a:	df 91       	pop	r29
    5b0c:	cf 91       	pop	r28
    5b0e:	1f 91       	pop	r17
    5b10:	0f 91       	pop	r16
    5b12:	08 95       	ret

00005b14 <_ZN4SRAM9read_sramEv>:
	}else{
		stack_head_offset--;
		write(0,register_data);
	}
}
int* SRAM::read_sram(){
    5b14:	cf 92       	push	r12
    5b16:	df 92       	push	r13
    5b18:	ef 92       	push	r14
    5b1a:	ff 92       	push	r15
    5b1c:	0f 93       	push	r16
    5b1e:	1f 93       	push	r17
    5b20:	cf 93       	push	r28
    5b22:	df 93       	push	r29
    5b24:	cd b7       	in	r28, 0x3d	; 61
    5b26:	de b7       	in	r29, 0x3e	; 62
    5b28:	d2 50       	subi	r29, 0x02	; 2
    5b2a:	0f b6       	in	r0, 0x3f	; 63
    5b2c:	f8 94       	cli
    5b2e:	de bf       	out	0x3e, r29	; 62
    5b30:	0f be       	out	0x3f, r0	; 63
    5b32:	cd bf       	out	0x3d, r28	; 61
    5b34:	7c 01       	movw	r14, r24
	int ram_memory[ADDRESS_MAX];
	for(int i=stack_head_offset;i<stack_tail_offset;i++) ram_memory[i]=read(i);
    5b36:	fc 01       	movw	r30, r24
    5b38:	00 81       	ld	r16, Z
    5b3a:	11 81       	ldd	r17, Z+1	; 0x01
    5b3c:	84 81       	ldd	r24, Z+4	; 0x04
    5b3e:	95 81       	ldd	r25, Z+5	; 0x05
    5b40:	08 17       	cp	r16, r24
    5b42:	19 07       	cpc	r17, r25
    5b44:	e4 f4       	brge	.+56     	; 0x5b7e <_ZN4SRAM9read_sramEv+0x6a>
    5b46:	68 01       	movw	r12, r16
    5b48:	cc 0c       	add	r12, r12
    5b4a:	dd 1c       	adc	r13, r13
    5b4c:	81 e0       	ldi	r24, 0x01	; 1
    5b4e:	90 e0       	ldi	r25, 0x00	; 0
    5b50:	8c 0f       	add	r24, r28
    5b52:	9d 1f       	adc	r25, r29
    5b54:	c8 0e       	add	r12, r24
    5b56:	d9 1e       	adc	r13, r25
    5b58:	b8 01       	movw	r22, r16
    5b5a:	c7 01       	movw	r24, r14
    5b5c:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
    5b60:	99 27       	eor	r25, r25
    5b62:	87 fd       	sbrc	r24, 7
    5b64:	90 95       	com	r25
    5b66:	f6 01       	movw	r30, r12
    5b68:	81 93       	st	Z+, r24
    5b6a:	91 93       	st	Z+, r25
    5b6c:	6f 01       	movw	r12, r30
    5b6e:	0f 5f       	subi	r16, 0xFF	; 255
    5b70:	1f 4f       	sbci	r17, 0xFF	; 255
    5b72:	f7 01       	movw	r30, r14
    5b74:	84 81       	ldd	r24, Z+4	; 0x04
    5b76:	95 81       	ldd	r25, Z+5	; 0x05
    5b78:	08 17       	cp	r16, r24
    5b7a:	19 07       	cpc	r17, r25
    5b7c:	6c f3       	brlt	.-38     	; 0x5b58 <_ZN4SRAM9read_sramEv+0x44>
	return ram_memory;
}
    5b7e:	ce 01       	movw	r24, r28
    5b80:	01 96       	adiw	r24, 0x01	; 1
    5b82:	de 5f       	subi	r29, 0xFE	; 254
    5b84:	0f b6       	in	r0, 0x3f	; 63
    5b86:	f8 94       	cli
    5b88:	de bf       	out	0x3e, r29	; 62
    5b8a:	0f be       	out	0x3f, r0	; 63
    5b8c:	cd bf       	out	0x3d, r28	; 61
    5b8e:	df 91       	pop	r29
    5b90:	cf 91       	pop	r28
    5b92:	1f 91       	pop	r17
    5b94:	0f 91       	pop	r16
    5b96:	ff 90       	pop	r15
    5b98:	ef 90       	pop	r14
    5b9a:	df 90       	pop	r13
    5b9c:	cf 90       	pop	r12
    5b9e:	08 95       	ret

00005ba0 <_ZN4SRAM5writeEii>:
	setctrlpin(MRE,LOW);
	BUS_DIR=OUTPUT;
	MEM_ADDRESS=LOW;
	return bus_data;
}
void SRAM::write(int address,int data){
    5ba0:	ff 92       	push	r15
    5ba2:	0f 93       	push	r16
    5ba4:	1f 93       	push	r17
    5ba6:	cf 93       	push	r28
    5ba8:	df 93       	push	r29
    5baa:	ec 01       	movw	r28, r24
    5bac:	8b 01       	movw	r16, r22
    5bae:	f4 2e       	mov	r15, r20
	memory_management();
    5bb0:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN4SRAM17memory_managementEv>
	set_address(address);
    5bb4:	b8 01       	movw	r22, r16
    5bb6:	ce 01       	movw	r24, r28
    5bb8:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <_ZN4SRAM11set_addressEi>
	setctrlpin(MWR,LOW);
	MEM_ADDRESS=LOW;
	bus_write(LOW);
}
void SRAM::bus_write(int data){
	BUS_DIR=OUTPUT;
    5bbc:	1f ef       	ldi	r17, 0xFF	; 255
    5bbe:	17 bb       	out	0x17, r17	; 23
	BUS_OUT=data;
    5bc0:	f8 ba       	out	0x18, r15	; 24
}
void SRAM::write(int address,int data){
	memory_management();
	set_address(address);
	bus_write(data);
	setctrlpin(MWR,HIGH);
    5bc2:	41 e0       	ldi	r20, 0x01	; 1
    5bc4:	50 e0       	ldi	r21, 0x00	; 0
    5bc6:	65 e0       	ldi	r22, 0x05	; 5
    5bc8:	70 e0       	ldi	r23, 0x00	; 0
    5bca:	ce 01       	movw	r24, r28
    5bcc:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <_ZN4SRAM10setctrlpinEii>
	setctrlpin(MWR,LOW);
    5bd0:	40 e0       	ldi	r20, 0x00	; 0
    5bd2:	50 e0       	ldi	r21, 0x00	; 0
    5bd4:	65 e0       	ldi	r22, 0x05	; 5
    5bd6:	70 e0       	ldi	r23, 0x00	; 0
    5bd8:	ce 01       	movw	r24, r28
    5bda:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <_ZN4SRAM10setctrlpinEii>
	MEM_ADDRESS=LOW;
    5bde:	1b ba       	out	0x1b, r1	; 27
	bus_write(LOW);
}
void SRAM::bus_write(int data){
	BUS_DIR=OUTPUT;
    5be0:	17 bb       	out	0x17, r17	; 23
	BUS_OUT=data;
    5be2:	18 ba       	out	0x18, r1	; 24
	bus_write(data);
	setctrlpin(MWR,HIGH);
	setctrlpin(MWR,LOW);
	MEM_ADDRESS=LOW;
	bus_write(LOW);
}
    5be4:	df 91       	pop	r29
    5be6:	cf 91       	pop	r28
    5be8:	1f 91       	pop	r17
    5bea:	0f 91       	pop	r16
    5bec:	ff 90       	pop	r15
    5bee:	08 95       	ret

00005bf0 <_ZN4SRAM3popEv>:
}
void SRAM::setctrlpin(int pin,int state){
	CTRLMEM&=~(1<<pin); // CLEAR PIN
	CTRLMEM|=(state<<pin); // SET PIN
}
int SRAM::pop(){
    5bf0:	cf 93       	push	r28
    5bf2:	df 93       	push	r29
    5bf4:	ec 01       	movw	r28, r24
	memory_management();
    5bf6:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN4SRAM17memory_managementEv>
	int popped_number=read(0);
    5bfa:	60 e0       	ldi	r22, 0x00	; 0
    5bfc:	70 e0       	ldi	r23, 0x00	; 0
    5bfe:	ce 01       	movw	r24, r28
    5c00:	0e 94 65 2d 	call	0x5aca	; 0x5aca <_ZN4SRAM4readEi>
	stack_head_offset++;
    5c04:	28 81       	ld	r18, Y
    5c06:	39 81       	ldd	r19, Y+1	; 0x01
    5c08:	2f 5f       	subi	r18, 0xFF	; 255
    5c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c0c:	39 83       	std	Y+1, r19	; 0x01
    5c0e:	28 83       	st	Y, r18
	if(stack_head_offset>stack_tail_offset) return 0;
    5c10:	4c 81       	ldd	r20, Y+4	; 0x04
    5c12:	5d 81       	ldd	r21, Y+5	; 0x05
    5c14:	42 17       	cp	r20, r18
    5c16:	53 07       	cpc	r21, r19
    5c18:	24 f0       	brlt	.+8      	; 0x5c22 <_ZN4SRAM3popEv+0x32>
	CTRLMEM&=~(1<<pin); // CLEAR PIN
	CTRLMEM|=(state<<pin); // SET PIN
}
int SRAM::pop(){
	memory_management();
	int popped_number=read(0);
    5c1a:	99 27       	eor	r25, r25
    5c1c:	87 fd       	sbrc	r24, 7
    5c1e:	90 95       	com	r25
	stack_head_offset++;
	if(stack_head_offset>stack_tail_offset) return 0;
	else return popped_number;
    5c20:	02 c0       	rjmp	.+4      	; 0x5c26 <_ZN4SRAM3popEv+0x36>
}
int SRAM::pop(){
	memory_management();
	int popped_number=read(0);
	stack_head_offset++;
	if(stack_head_offset>stack_tail_offset) return 0;
    5c22:	80 e0       	ldi	r24, 0x00	; 0
    5c24:	90 e0       	ldi	r25, 0x00	; 0
	else return popped_number;
}
    5c26:	df 91       	pop	r29
    5c28:	cf 91       	pop	r28
    5c2a:	08 95       	ret

00005c2c <_ZN4SRAM4pushEi>:
void SRAM::push(int register_data){
    5c2c:	ef 92       	push	r14
    5c2e:	ff 92       	push	r15
    5c30:	0f 93       	push	r16
    5c32:	1f 93       	push	r17
    5c34:	cf 93       	push	r28
    5c36:	df 93       	push	r29
    5c38:	8c 01       	movw	r16, r24
    5c3a:	eb 01       	movw	r28, r22
	memory_management();
    5c3c:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN4SRAM17memory_managementEv>
	if(stack_head_offset<=MEMORY_HEAD_PERMISSION_OFFSET){ //PUSH EVERY OTHER ELEMENT FORWARD ****
    5c40:	f8 01       	movw	r30, r16
    5c42:	80 81       	ld	r24, Z
    5c44:	91 81       	ldd	r25, Z+1	; 0x01
    5c46:	18 16       	cp	r1, r24
    5c48:	19 06       	cpc	r1, r25
    5c4a:	5c f1       	brlt	.+86     	; 0x5ca2 <_ZN4SRAM4pushEi+0x76>
		int *ram_memory=utils.arrint_shiftright(read_sram(),register_data,stack_tail_offset-stack_head_offset);
    5c4c:	e4 80       	ldd	r14, Z+4	; 0x04
    5c4e:	f5 80       	ldd	r15, Z+5	; 0x05
    5c50:	e8 1a       	sub	r14, r24
    5c52:	f9 0a       	sbc	r15, r25
    5c54:	c8 01       	movw	r24, r16
    5c56:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_ZN4SRAM9read_sramEv>
    5c5a:	97 01       	movw	r18, r14
    5c5c:	ae 01       	movw	r20, r28
    5c5e:	bc 01       	movw	r22, r24
    5c60:	c8 01       	movw	r24, r16
    5c62:	02 96       	adiw	r24, 0x02	; 2
    5c64:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <_ZN5Utils17arrint_shiftrightEPiii>
		for(int i=stack_head_offset;i<stack_tail_offset;i++) write(i,ram_memory[i]);
    5c68:	f8 01       	movw	r30, r16
    5c6a:	c0 81       	ld	r28, Z
    5c6c:	d1 81       	ldd	r29, Z+1	; 0x01
    5c6e:	24 81       	ldd	r18, Z+4	; 0x04
    5c70:	35 81       	ldd	r19, Z+5	; 0x05
    5c72:	c2 17       	cp	r28, r18
    5c74:	d3 07       	cpc	r29, r19
    5c76:	fc f4       	brge	.+62     	; 0x5cb6 <_ZN4SRAM4pushEi+0x8a>
    5c78:	7e 01       	movw	r14, r28
    5c7a:	ee 0c       	add	r14, r14
    5c7c:	ff 1c       	adc	r15, r15
    5c7e:	e8 0e       	add	r14, r24
    5c80:	f9 1e       	adc	r15, r25
    5c82:	f7 01       	movw	r30, r14
    5c84:	41 91       	ld	r20, Z+
    5c86:	51 91       	ld	r21, Z+
    5c88:	7f 01       	movw	r14, r30
    5c8a:	be 01       	movw	r22, r28
    5c8c:	c8 01       	movw	r24, r16
    5c8e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
    5c92:	21 96       	adiw	r28, 0x01	; 1
    5c94:	f8 01       	movw	r30, r16
    5c96:	84 81       	ldd	r24, Z+4	; 0x04
    5c98:	95 81       	ldd	r25, Z+5	; 0x05
    5c9a:	c8 17       	cp	r28, r24
    5c9c:	d9 07       	cpc	r29, r25
    5c9e:	8c f3       	brlt	.-30     	; 0x5c82 <_ZN4SRAM4pushEi+0x56>
    5ca0:	0a c0       	rjmp	.+20     	; 0x5cb6 <_ZN4SRAM4pushEi+0x8a>
	}else{
		stack_head_offset--;
    5ca2:	01 97       	sbiw	r24, 0x01	; 1
    5ca4:	f8 01       	movw	r30, r16
    5ca6:	91 83       	std	Z+1, r25	; 0x01
    5ca8:	80 83       	st	Z, r24
		write(0,register_data);
    5caa:	ae 01       	movw	r20, r28
    5cac:	60 e0       	ldi	r22, 0x00	; 0
    5cae:	70 e0       	ldi	r23, 0x00	; 0
    5cb0:	c8 01       	movw	r24, r16
    5cb2:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_ZN4SRAM5writeEii>
	}
}
    5cb6:	df 91       	pop	r29
    5cb8:	cf 91       	pop	r28
    5cba:	1f 91       	pop	r17
    5cbc:	0f 91       	pop	r16
    5cbe:	ff 90       	pop	r15
    5cc0:	ef 90       	pop	r14
    5cc2:	08 95       	ret

00005cc4 <_ZN6SerialC1Ev>:
    5cc4:	83 e3       	ldi	r24, 0x33	; 51
    5cc6:	89 b9       	out	0x09, r24	; 9
    5cc8:	10 bc       	out	0x20, r1	; 32
    5cca:	86 e8       	ldi	r24, 0x86	; 134
    5ccc:	80 bd       	out	0x20, r24	; 32
    5cce:	88 e1       	ldi	r24, 0x18	; 24
    5cd0:	8a b9       	out	0x0a, r24	; 10
    5cd2:	08 95       	ret

00005cd4 <_ZN6Serial4readEv>:
    5cd4:	5f 9b       	sbis	0x0b, 7	; 11
    5cd6:	fe cf       	rjmp	.-4      	; 0x5cd4 <_ZN6Serial4readEv>
    5cd8:	8c b1       	in	r24, 0x0c	; 12
    5cda:	08 95       	ret

00005cdc <_ZN6Serial5writeEc>:
    5cdc:	5d 9b       	sbis	0x0b, 5	; 11
    5cde:	fe cf       	rjmp	.-4      	; 0x5cdc <_ZN6Serial5writeEc>
    5ce0:	6c b9       	out	0x0c, r22	; 12
    5ce2:	08 95       	ret

00005ce4 <_ZN6Serial8writestrEPc>:
    5ce4:	0f 93       	push	r16
    5ce6:	1f 93       	push	r17
    5ce8:	cf 93       	push	r28
    5cea:	df 93       	push	r29
    5cec:	8c 01       	movw	r16, r24
    5cee:	eb 01       	movw	r28, r22
    5cf0:	68 81       	ld	r22, Y
    5cf2:	66 23       	and	r22, r22
    5cf4:	39 f0       	breq	.+14     	; 0x5d04 <_ZN6Serial8writestrEPc+0x20>
    5cf6:	21 96       	adiw	r28, 0x01	; 1
    5cf8:	c8 01       	movw	r24, r16
    5cfa:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <_ZN6Serial5writeEc>
    5cfe:	69 91       	ld	r22, Y+
    5d00:	61 11       	cpse	r22, r1
    5d02:	fa cf       	rjmp	.-12     	; 0x5cf8 <_ZN6Serial8writestrEPc+0x14>
    5d04:	df 91       	pop	r29
    5d06:	cf 91       	pop	r28
    5d08:	1f 91       	pop	r17
    5d0a:	0f 91       	pop	r16
    5d0c:	08 95       	ret

00005d0e <_ZN6Serial10writestrlnEPc>:
    5d0e:	cf 93       	push	r28
    5d10:	df 93       	push	r29
    5d12:	ec 01       	movw	r28, r24
    5d14:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <_ZN6Serial8writestrEPc>
    5d18:	6d e0       	ldi	r22, 0x0D	; 13
    5d1a:	ce 01       	movw	r24, r28
    5d1c:	0e 94 6e 2e 	call	0x5cdc	; 0x5cdc <_ZN6Serial5writeEc>
    5d20:	df 91       	pop	r29
    5d22:	cf 91       	pop	r28
    5d24:	08 95       	ret

00005d26 <_ZN5Utils10int2binstrEii>:
#include "utils.h"

char * Utils::int2binstr(int num,int strlength){
    5d26:	0f 93       	push	r16
    5d28:	1f 93       	push	r17
    5d2a:	cf 93       	push	r28
    5d2c:	df 93       	push	r29
    5d2e:	06 2f       	mov	r16, r22
    5d30:	17 2f       	mov	r17, r23
    5d32:	ea 01       	movw	r28, r20
	char * str = (char*)malloc(strlength + 1);
    5d34:	ca 01       	movw	r24, r20
    5d36:	01 96       	adiw	r24, 0x01	; 1
    5d38:	0e 94 b6 33 	call	0x676c	; 0x676c <malloc>
	if(!str) return NULL;
    5d3c:	00 97       	sbiw	r24, 0x00	; 0
    5d3e:	b9 f0       	breq	.+46     	; 0x5d6e <_ZN5Utils10int2binstrEii+0x48>
	str[strlength] = 0;
    5d40:	fc 01       	movw	r30, r24
    5d42:	ec 0f       	add	r30, r28
    5d44:	fd 1f       	adc	r31, r29
    5d46:	10 82       	st	Z, r1

	// type punning because signed shift is implementation-defined
	unsigned u = *(unsigned *)&num;
    5d48:	20 2f       	mov	r18, r16
    5d4a:	31 2f       	mov	r19, r17
	for(; strlength--; u >>= 1)
    5d4c:	be 01       	movw	r22, r28
    5d4e:	61 50       	subi	r22, 0x01	; 1
    5d50:	71 09       	sbc	r23, r1
    5d52:	cd 2b       	or	r28, r29
    5d54:	71 f0       	breq	.+28     	; 0x5d72 <_ZN5Utils10int2binstrEii+0x4c>
	str[strlength] = u & 1 ? '1' : '0';
    5d56:	20 ff       	sbrs	r18, 0
    5d58:	02 c0       	rjmp	.+4      	; 0x5d5e <_ZN5Utils10int2binstrEii+0x38>
    5d5a:	41 e3       	ldi	r20, 0x31	; 49
    5d5c:	01 c0       	rjmp	.+2      	; 0x5d60 <_ZN5Utils10int2binstrEii+0x3a>
    5d5e:	40 e3       	ldi	r20, 0x30	; 48
    5d60:	42 93       	st	-Z, r20
	if(!str) return NULL;
	str[strlength] = 0;

	// type punning because signed shift is implementation-defined
	unsigned u = *(unsigned *)&num;
	for(; strlength--; u >>= 1)
    5d62:	36 95       	lsr	r19
    5d64:	27 95       	ror	r18
    5d66:	61 50       	subi	r22, 0x01	; 1
    5d68:	71 09       	sbc	r23, r1
    5d6a:	a8 f7       	brcc	.-22     	; 0x5d56 <_ZN5Utils10int2binstrEii+0x30>
    5d6c:	02 c0       	rjmp	.+4      	; 0x5d72 <_ZN5Utils10int2binstrEii+0x4c>
#include "utils.h"

char * Utils::int2binstr(int num,int strlength){
	char * str = (char*)malloc(strlength + 1);
	if(!str) return NULL;
    5d6e:	80 e0       	ldi	r24, 0x00	; 0
    5d70:	90 e0       	ldi	r25, 0x00	; 0
	unsigned u = *(unsigned *)&num;
	for(; strlength--; u >>= 1)
	str[strlength] = u & 1 ? '1' : '0';

	return str;
}
    5d72:	df 91       	pop	r29
    5d74:	cf 91       	pop	r28
    5d76:	1f 91       	pop	r17
    5d78:	0f 91       	pop	r16
    5d7a:	08 95       	ret

00005d7c <_ZN5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    5d7c:	61 15       	cp	r22, r1
    5d7e:	71 05       	cpc	r23, r1
    5d80:	51 f0       	breq	.+20     	; 0x5d96 <_ZN5Utils5delayEi+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5d82:	86 e6       	ldi	r24, 0x66	; 102
    5d84:	9e e0       	ldi	r25, 0x0E	; 14
    5d86:	01 97       	sbiw	r24, 0x01	; 1
    5d88:	f1 f7       	brne	.-4      	; 0x5d86 <_ZN5Utils5delayEi+0xa>
    5d8a:	00 00       	nop
    5d8c:	61 50       	subi	r22, 0x01	; 1
    5d8e:	71 09       	sbc	r23, r1
    5d90:	61 15       	cp	r22, r1
    5d92:	71 05       	cpc	r23, r1
    5d94:	b1 f7       	brne	.-20     	; 0x5d82 <_ZN5Utils5delayEi+0x6>
}
    5d96:	08 95       	ret

00005d98 <_ZN5Utils10custom_powEfi>:
float Utils::custom_pow(float base,int exp){
    5d98:	cf 92       	push	r12
    5d9a:	df 92       	push	r13
    5d9c:	ef 92       	push	r14
    5d9e:	ff 92       	push	r15
    5da0:	0f 93       	push	r16
    5da2:	1f 93       	push	r17
    5da4:	cf 93       	push	r28
    5da6:	df 93       	push	r29
    5da8:	6a 01       	movw	r12, r20
    5daa:	7b 01       	movw	r14, r22
    5dac:	89 01       	movw	r16, r18
	float result=1; for(int i=0;i<exp;i++) result*=base;
    5dae:	12 16       	cp	r1, r18
    5db0:	13 06       	cpc	r1, r19
    5db2:	7c f4       	brge	.+30     	; 0x5dd2 <_ZN5Utils10custom_powEfi+0x3a>
    5db4:	c0 e0       	ldi	r28, 0x00	; 0
    5db6:	d0 e0       	ldi	r29, 0x00	; 0
    5db8:	60 e0       	ldi	r22, 0x00	; 0
    5dba:	70 e0       	ldi	r23, 0x00	; 0
    5dbc:	80 e8       	ldi	r24, 0x80	; 128
    5dbe:	9f e3       	ldi	r25, 0x3F	; 63
    5dc0:	a7 01       	movw	r20, r14
    5dc2:	96 01       	movw	r18, r12
    5dc4:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__mulsf3>
    5dc8:	21 96       	adiw	r28, 0x01	; 1
    5dca:	c0 17       	cp	r28, r16
    5dcc:	d1 07       	cpc	r29, r17
    5dce:	c1 f7       	brne	.-16     	; 0x5dc0 <_ZN5Utils10custom_powEfi+0x28>
    5dd0:	04 c0       	rjmp	.+8      	; 0x5dda <_ZN5Utils10custom_powEfi+0x42>
    5dd2:	60 e0       	ldi	r22, 0x00	; 0
    5dd4:	70 e0       	ldi	r23, 0x00	; 0
    5dd6:	80 e8       	ldi	r24, 0x80	; 128
    5dd8:	9f e3       	ldi	r25, 0x3F	; 63
	return result;
}
    5dda:	df 91       	pop	r29
    5ddc:	cf 91       	pop	r28
    5dde:	1f 91       	pop	r17
    5de0:	0f 91       	pop	r16
    5de2:	ff 90       	pop	r15
    5de4:	ef 90       	pop	r14
    5de6:	df 90       	pop	r13
    5de8:	cf 90       	pop	r12
    5dea:	08 95       	ret

00005dec <_ZN5Utils17arrint_shiftrightEPiii>:
int * Utils::arrint_shiftright(int * arr,int newelem,int array_length){
    5dec:	cf 92       	push	r12
    5dee:	df 92       	push	r13
    5df0:	ef 92       	push	r14
    5df2:	ff 92       	push	r15
    5df4:	0f 93       	push	r16
    5df6:	1f 93       	push	r17
    5df8:	cf 93       	push	r28
    5dfa:	df 93       	push	r29
    5dfc:	7b 01       	movw	r14, r22
    5dfe:	6a 01       	movw	r12, r20
    5e00:	e9 01       	movw	r28, r18
	int * new_array=(int*)malloc(sizeof(int)*array_length);
    5e02:	89 01       	movw	r16, r18
    5e04:	00 0f       	add	r16, r16
    5e06:	11 1f       	adc	r17, r17
    5e08:	c8 01       	movw	r24, r16
    5e0a:	0e 94 b6 33 	call	0x676c	; 0x676c <malloc>
	int new_array_index=0;
	new_array[0]=newelem;
    5e0e:	fc 01       	movw	r30, r24
    5e10:	d1 82       	std	Z+1, r13	; 0x01
    5e12:	c0 82       	st	Z, r12
	for(int i=0;i<array_length;i++) new_array[++new_array_index]=arr[i];
    5e14:	1c 16       	cp	r1, r28
    5e16:	1d 06       	cpc	r1, r29
    5e18:	6c f4       	brge	.+26     	; 0x5e34 <_ZN5Utils17arrint_shiftrightEPiii+0x48>
    5e1a:	f7 01       	movw	r30, r14
    5e1c:	dc 01       	movw	r26, r24
    5e1e:	12 96       	adiw	r26, 0x02	; 2
    5e20:	b7 01       	movw	r22, r14
    5e22:	60 0f       	add	r22, r16
    5e24:	71 1f       	adc	r23, r17
    5e26:	21 91       	ld	r18, Z+
    5e28:	31 91       	ld	r19, Z+
    5e2a:	2d 93       	st	X+, r18
    5e2c:	3d 93       	st	X+, r19
    5e2e:	e6 17       	cp	r30, r22
    5e30:	f7 07       	cpc	r31, r23
    5e32:	c9 f7       	brne	.-14     	; 0x5e26 <_ZN5Utils17arrint_shiftrightEPiii+0x3a>
	return new_array;
    5e34:	df 91       	pop	r29
    5e36:	cf 91       	pop	r28
    5e38:	1f 91       	pop	r17
    5e3a:	0f 91       	pop	r16
    5e3c:	ff 90       	pop	r15
    5e3e:	ef 90       	pop	r14
    5e40:	df 90       	pop	r13
    5e42:	cf 90       	pop	r12
    5e44:	08 95       	ret

00005e46 <acos>:
    5e46:	9f 93       	push	r25
    5e48:	9f 77       	andi	r25, 0x7F	; 127
    5e4a:	a6 d1       	rcall	.+844    	; 0x6198 <__fp_arccos>
    5e4c:	0f 90       	pop	r0
    5e4e:	00 20       	and	r0, r0
    5e50:	3a f4       	brpl	.+14     	; 0x5e60 <acos+0x1a>
    5e52:	90 58       	subi	r25, 0x80	; 128
    5e54:	a2 ea       	ldi	r26, 0xA2	; 162
    5e56:	2a ed       	ldi	r18, 0xDA	; 218
    5e58:	3f e0       	ldi	r19, 0x0F	; 15
    5e5a:	49 e4       	ldi	r20, 0x49	; 73
    5e5c:	50 e4       	ldi	r21, 0x40	; 64
    5e5e:	13 d0       	rcall	.+38     	; 0x5e86 <__addsf3x>
    5e60:	3e c2       	rjmp	.+1148   	; 0x62de <__fp_round>

00005e62 <__subsf3>:
    5e62:	50 58       	subi	r21, 0x80	; 128

00005e64 <__addsf3>:
    5e64:	bb 27       	eor	r27, r27
    5e66:	aa 27       	eor	r26, r26
    5e68:	0e d0       	rcall	.+28     	; 0x5e86 <__addsf3x>
    5e6a:	39 c2       	rjmp	.+1138   	; 0x62de <__fp_round>
    5e6c:	02 d2       	rcall	.+1028   	; 0x6272 <__fp_pscA>
    5e6e:	30 f0       	brcs	.+12     	; 0x5e7c <__addsf3+0x18>
    5e70:	07 d2       	rcall	.+1038   	; 0x6280 <__fp_pscB>
    5e72:	20 f0       	brcs	.+8      	; 0x5e7c <__addsf3+0x18>
    5e74:	31 f4       	brne	.+12     	; 0x5e82 <__addsf3+0x1e>
    5e76:	9f 3f       	cpi	r25, 0xFF	; 255
    5e78:	11 f4       	brne	.+4      	; 0x5e7e <__addsf3+0x1a>
    5e7a:	1e f4       	brtc	.+6      	; 0x5e82 <__addsf3+0x1e>
    5e7c:	d2 c1       	rjmp	.+932    	; 0x6222 <__fp_nan>
    5e7e:	0e f4       	brtc	.+2      	; 0x5e82 <__addsf3+0x1e>
    5e80:	e0 95       	com	r30
    5e82:	e7 fb       	bst	r30, 7
    5e84:	c8 c1       	rjmp	.+912    	; 0x6216 <__fp_inf>

00005e86 <__addsf3x>:
    5e86:	e9 2f       	mov	r30, r25
    5e88:	4c d2       	rcall	.+1176   	; 0x6322 <__fp_split3>
    5e8a:	80 f3       	brcs	.-32     	; 0x5e6c <__addsf3+0x8>
    5e8c:	ba 17       	cp	r27, r26
    5e8e:	62 07       	cpc	r22, r18
    5e90:	73 07       	cpc	r23, r19
    5e92:	84 07       	cpc	r24, r20
    5e94:	95 07       	cpc	r25, r21
    5e96:	18 f0       	brcs	.+6      	; 0x5e9e <__addsf3x+0x18>
    5e98:	71 f4       	brne	.+28     	; 0x5eb6 <__addsf3x+0x30>
    5e9a:	9e f5       	brtc	.+102    	; 0x5f02 <__addsf3x+0x7c>
    5e9c:	64 c2       	rjmp	.+1224   	; 0x6366 <__fp_zero>
    5e9e:	0e f4       	brtc	.+2      	; 0x5ea2 <__addsf3x+0x1c>
    5ea0:	e0 95       	com	r30
    5ea2:	0b 2e       	mov	r0, r27
    5ea4:	ba 2f       	mov	r27, r26
    5ea6:	a0 2d       	mov	r26, r0
    5ea8:	0b 01       	movw	r0, r22
    5eaa:	b9 01       	movw	r22, r18
    5eac:	90 01       	movw	r18, r0
    5eae:	0c 01       	movw	r0, r24
    5eb0:	ca 01       	movw	r24, r20
    5eb2:	a0 01       	movw	r20, r0
    5eb4:	11 24       	eor	r1, r1
    5eb6:	ff 27       	eor	r31, r31
    5eb8:	59 1b       	sub	r21, r25
    5eba:	99 f0       	breq	.+38     	; 0x5ee2 <__addsf3x+0x5c>
    5ebc:	59 3f       	cpi	r21, 0xF9	; 249
    5ebe:	50 f4       	brcc	.+20     	; 0x5ed4 <__addsf3x+0x4e>
    5ec0:	50 3e       	cpi	r21, 0xE0	; 224
    5ec2:	68 f1       	brcs	.+90     	; 0x5f1e <__addsf3x+0x98>
    5ec4:	1a 16       	cp	r1, r26
    5ec6:	f0 40       	sbci	r31, 0x00	; 0
    5ec8:	a2 2f       	mov	r26, r18
    5eca:	23 2f       	mov	r18, r19
    5ecc:	34 2f       	mov	r19, r20
    5ece:	44 27       	eor	r20, r20
    5ed0:	58 5f       	subi	r21, 0xF8	; 248
    5ed2:	f3 cf       	rjmp	.-26     	; 0x5eba <__addsf3x+0x34>
    5ed4:	46 95       	lsr	r20
    5ed6:	37 95       	ror	r19
    5ed8:	27 95       	ror	r18
    5eda:	a7 95       	ror	r26
    5edc:	f0 40       	sbci	r31, 0x00	; 0
    5ede:	53 95       	inc	r21
    5ee0:	c9 f7       	brne	.-14     	; 0x5ed4 <__addsf3x+0x4e>
    5ee2:	7e f4       	brtc	.+30     	; 0x5f02 <__addsf3x+0x7c>
    5ee4:	1f 16       	cp	r1, r31
    5ee6:	ba 0b       	sbc	r27, r26
    5ee8:	62 0b       	sbc	r22, r18
    5eea:	73 0b       	sbc	r23, r19
    5eec:	84 0b       	sbc	r24, r20
    5eee:	ba f0       	brmi	.+46     	; 0x5f1e <__addsf3x+0x98>
    5ef0:	91 50       	subi	r25, 0x01	; 1
    5ef2:	a1 f0       	breq	.+40     	; 0x5f1c <__addsf3x+0x96>
    5ef4:	ff 0f       	add	r31, r31
    5ef6:	bb 1f       	adc	r27, r27
    5ef8:	66 1f       	adc	r22, r22
    5efa:	77 1f       	adc	r23, r23
    5efc:	88 1f       	adc	r24, r24
    5efe:	c2 f7       	brpl	.-16     	; 0x5ef0 <__addsf3x+0x6a>
    5f00:	0e c0       	rjmp	.+28     	; 0x5f1e <__addsf3x+0x98>
    5f02:	ba 0f       	add	r27, r26
    5f04:	62 1f       	adc	r22, r18
    5f06:	73 1f       	adc	r23, r19
    5f08:	84 1f       	adc	r24, r20
    5f0a:	48 f4       	brcc	.+18     	; 0x5f1e <__addsf3x+0x98>
    5f0c:	87 95       	ror	r24
    5f0e:	77 95       	ror	r23
    5f10:	67 95       	ror	r22
    5f12:	b7 95       	ror	r27
    5f14:	f7 95       	ror	r31
    5f16:	9e 3f       	cpi	r25, 0xFE	; 254
    5f18:	08 f0       	brcs	.+2      	; 0x5f1c <__addsf3x+0x96>
    5f1a:	b3 cf       	rjmp	.-154    	; 0x5e82 <__addsf3+0x1e>
    5f1c:	93 95       	inc	r25
    5f1e:	88 0f       	add	r24, r24
    5f20:	08 f0       	brcs	.+2      	; 0x5f24 <__addsf3x+0x9e>
    5f22:	99 27       	eor	r25, r25
    5f24:	ee 0f       	add	r30, r30
    5f26:	97 95       	ror	r25
    5f28:	87 95       	ror	r24
    5f2a:	08 95       	ret

00005f2c <atan>:
    5f2c:	df 93       	push	r29
    5f2e:	dd 27       	eor	r29, r29
    5f30:	b9 2f       	mov	r27, r25
    5f32:	bf 77       	andi	r27, 0x7F	; 127
    5f34:	40 e8       	ldi	r20, 0x80	; 128
    5f36:	5f e3       	ldi	r21, 0x3F	; 63
    5f38:	16 16       	cp	r1, r22
    5f3a:	17 06       	cpc	r1, r23
    5f3c:	48 07       	cpc	r20, r24
    5f3e:	5b 07       	cpc	r21, r27
    5f40:	10 f4       	brcc	.+4      	; 0x5f46 <atan+0x1a>
    5f42:	d9 2f       	mov	r29, r25
    5f44:	1b d2       	rcall	.+1078   	; 0x637c <inverse>
    5f46:	9f 93       	push	r25
    5f48:	8f 93       	push	r24
    5f4a:	7f 93       	push	r23
    5f4c:	6f 93       	push	r22
    5f4e:	76 d3       	rcall	.+1772   	; 0x663c <square>
    5f50:	e6 ef       	ldi	r30, 0xF6	; 246
    5f52:	f0 e0       	ldi	r31, 0x00	; 0
    5f54:	69 d1       	rcall	.+722    	; 0x6228 <__fp_powser>
    5f56:	c3 d1       	rcall	.+902    	; 0x62de <__fp_round>
    5f58:	2f 91       	pop	r18
    5f5a:	3f 91       	pop	r19
    5f5c:	4f 91       	pop	r20
    5f5e:	5f 91       	pop	r21
    5f60:	ce d2       	rcall	.+1436   	; 0x64fe <__mulsf3x>
    5f62:	dd 23       	and	r29, r29
    5f64:	49 f0       	breq	.+18     	; 0x5f78 <atan+0x4c>
    5f66:	90 58       	subi	r25, 0x80	; 128
    5f68:	a2 ea       	ldi	r26, 0xA2	; 162
    5f6a:	2a ed       	ldi	r18, 0xDA	; 218
    5f6c:	3f e0       	ldi	r19, 0x0F	; 15
    5f6e:	49 ec       	ldi	r20, 0xC9	; 201
    5f70:	5f e3       	ldi	r21, 0x3F	; 63
    5f72:	d0 78       	andi	r29, 0x80	; 128
    5f74:	5d 27       	eor	r21, r29
    5f76:	87 df       	rcall	.-242    	; 0x5e86 <__addsf3x>
    5f78:	df 91       	pop	r29
    5f7a:	b1 c1       	rjmp	.+866    	; 0x62de <__fp_round>

00005f7c <__cmpsf2>:
    5f7c:	28 d1       	rcall	.+592    	; 0x61ce <__fp_cmp>
    5f7e:	08 f4       	brcc	.+2      	; 0x5f82 <__cmpsf2+0x6>
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	08 95       	ret

00005f84 <cos>:
    5f84:	85 d1       	rcall	.+778    	; 0x6290 <__fp_rempio2>
    5f86:	e3 95       	inc	r30
    5f88:	bb c1       	rjmp	.+886    	; 0x6300 <__fp_sinus>

00005f8a <__divsf3>:
    5f8a:	0c d0       	rcall	.+24     	; 0x5fa4 <__divsf3x>
    5f8c:	a8 c1       	rjmp	.+848    	; 0x62de <__fp_round>
    5f8e:	78 d1       	rcall	.+752    	; 0x6280 <__fp_pscB>
    5f90:	40 f0       	brcs	.+16     	; 0x5fa2 <__divsf3+0x18>
    5f92:	6f d1       	rcall	.+734    	; 0x6272 <__fp_pscA>
    5f94:	30 f0       	brcs	.+12     	; 0x5fa2 <__divsf3+0x18>
    5f96:	21 f4       	brne	.+8      	; 0x5fa0 <__divsf3+0x16>
    5f98:	5f 3f       	cpi	r21, 0xFF	; 255
    5f9a:	19 f0       	breq	.+6      	; 0x5fa2 <__divsf3+0x18>
    5f9c:	3c c1       	rjmp	.+632    	; 0x6216 <__fp_inf>
    5f9e:	51 11       	cpse	r21, r1
    5fa0:	e3 c1       	rjmp	.+966    	; 0x6368 <__fp_szero>
    5fa2:	3f c1       	rjmp	.+638    	; 0x6222 <__fp_nan>

00005fa4 <__divsf3x>:
    5fa4:	be d1       	rcall	.+892    	; 0x6322 <__fp_split3>
    5fa6:	98 f3       	brcs	.-26     	; 0x5f8e <__divsf3+0x4>

00005fa8 <__divsf3_pse>:
    5fa8:	99 23       	and	r25, r25
    5faa:	c9 f3       	breq	.-14     	; 0x5f9e <__divsf3+0x14>
    5fac:	55 23       	and	r21, r21
    5fae:	b1 f3       	breq	.-20     	; 0x5f9c <__divsf3+0x12>
    5fb0:	95 1b       	sub	r25, r21
    5fb2:	55 0b       	sbc	r21, r21
    5fb4:	bb 27       	eor	r27, r27
    5fb6:	aa 27       	eor	r26, r26
    5fb8:	62 17       	cp	r22, r18
    5fba:	73 07       	cpc	r23, r19
    5fbc:	84 07       	cpc	r24, r20
    5fbe:	38 f0       	brcs	.+14     	; 0x5fce <__divsf3_pse+0x26>
    5fc0:	9f 5f       	subi	r25, 0xFF	; 255
    5fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    5fc4:	22 0f       	add	r18, r18
    5fc6:	33 1f       	adc	r19, r19
    5fc8:	44 1f       	adc	r20, r20
    5fca:	aa 1f       	adc	r26, r26
    5fcc:	a9 f3       	breq	.-22     	; 0x5fb8 <__divsf3_pse+0x10>
    5fce:	33 d0       	rcall	.+102    	; 0x6036 <__divsf3_pse+0x8e>
    5fd0:	0e 2e       	mov	r0, r30
    5fd2:	3a f0       	brmi	.+14     	; 0x5fe2 <__divsf3_pse+0x3a>
    5fd4:	e0 e8       	ldi	r30, 0x80	; 128
    5fd6:	30 d0       	rcall	.+96     	; 0x6038 <__divsf3_pse+0x90>
    5fd8:	91 50       	subi	r25, 0x01	; 1
    5fda:	50 40       	sbci	r21, 0x00	; 0
    5fdc:	e6 95       	lsr	r30
    5fde:	00 1c       	adc	r0, r0
    5fe0:	ca f7       	brpl	.-14     	; 0x5fd4 <__divsf3_pse+0x2c>
    5fe2:	29 d0       	rcall	.+82     	; 0x6036 <__divsf3_pse+0x8e>
    5fe4:	fe 2f       	mov	r31, r30
    5fe6:	27 d0       	rcall	.+78     	; 0x6036 <__divsf3_pse+0x8e>
    5fe8:	66 0f       	add	r22, r22
    5fea:	77 1f       	adc	r23, r23
    5fec:	88 1f       	adc	r24, r24
    5fee:	bb 1f       	adc	r27, r27
    5ff0:	26 17       	cp	r18, r22
    5ff2:	37 07       	cpc	r19, r23
    5ff4:	48 07       	cpc	r20, r24
    5ff6:	ab 07       	cpc	r26, r27
    5ff8:	b0 e8       	ldi	r27, 0x80	; 128
    5ffa:	09 f0       	breq	.+2      	; 0x5ffe <__divsf3_pse+0x56>
    5ffc:	bb 0b       	sbc	r27, r27
    5ffe:	80 2d       	mov	r24, r0
    6000:	bf 01       	movw	r22, r30
    6002:	ff 27       	eor	r31, r31
    6004:	93 58       	subi	r25, 0x83	; 131
    6006:	5f 4f       	sbci	r21, 0xFF	; 255
    6008:	2a f0       	brmi	.+10     	; 0x6014 <__divsf3_pse+0x6c>
    600a:	9e 3f       	cpi	r25, 0xFE	; 254
    600c:	51 05       	cpc	r21, r1
    600e:	68 f0       	brcs	.+26     	; 0x602a <__divsf3_pse+0x82>
    6010:	02 c1       	rjmp	.+516    	; 0x6216 <__fp_inf>
    6012:	aa c1       	rjmp	.+852    	; 0x6368 <__fp_szero>
    6014:	5f 3f       	cpi	r21, 0xFF	; 255
    6016:	ec f3       	brlt	.-6      	; 0x6012 <__divsf3_pse+0x6a>
    6018:	98 3e       	cpi	r25, 0xE8	; 232
    601a:	dc f3       	brlt	.-10     	; 0x6012 <__divsf3_pse+0x6a>
    601c:	86 95       	lsr	r24
    601e:	77 95       	ror	r23
    6020:	67 95       	ror	r22
    6022:	b7 95       	ror	r27
    6024:	f7 95       	ror	r31
    6026:	9f 5f       	subi	r25, 0xFF	; 255
    6028:	c9 f7       	brne	.-14     	; 0x601c <__divsf3_pse+0x74>
    602a:	88 0f       	add	r24, r24
    602c:	91 1d       	adc	r25, r1
    602e:	96 95       	lsr	r25
    6030:	87 95       	ror	r24
    6032:	97 f9       	bld	r25, 7
    6034:	08 95       	ret
    6036:	e1 e0       	ldi	r30, 0x01	; 1
    6038:	66 0f       	add	r22, r22
    603a:	77 1f       	adc	r23, r23
    603c:	88 1f       	adc	r24, r24
    603e:	bb 1f       	adc	r27, r27
    6040:	62 17       	cp	r22, r18
    6042:	73 07       	cpc	r23, r19
    6044:	84 07       	cpc	r24, r20
    6046:	ba 07       	cpc	r27, r26
    6048:	20 f0       	brcs	.+8      	; 0x6052 <__divsf3_pse+0xaa>
    604a:	62 1b       	sub	r22, r18
    604c:	73 0b       	sbc	r23, r19
    604e:	84 0b       	sbc	r24, r20
    6050:	ba 0b       	sbc	r27, r26
    6052:	ee 1f       	adc	r30, r30
    6054:	88 f7       	brcc	.-30     	; 0x6038 <__divsf3_pse+0x90>
    6056:	e0 95       	com	r30
    6058:	08 95       	ret
    605a:	19 f4       	brne	.+6      	; 0x6062 <__divsf3_pse+0xba>
    605c:	0e f0       	brts	.+2      	; 0x6060 <__divsf3_pse+0xb8>
    605e:	db c0       	rjmp	.+438    	; 0x6216 <__fp_inf>
    6060:	82 c1       	rjmp	.+772    	; 0x6366 <__fp_zero>
    6062:	df c0       	rjmp	.+446    	; 0x6222 <__fp_nan>

00006064 <exp>:
    6064:	66 d1       	rcall	.+716    	; 0x6332 <__fp_splitA>
    6066:	c8 f3       	brcs	.-14     	; 0x605a <__divsf3_pse+0xb2>
    6068:	96 38       	cpi	r25, 0x86	; 134
    606a:	c0 f7       	brcc	.-16     	; 0x605c <__divsf3_pse+0xb4>
    606c:	07 f8       	bld	r0, 7
    606e:	0f 92       	push	r0
    6070:	e8 94       	clt
    6072:	2b e3       	ldi	r18, 0x3B	; 59
    6074:	3a ea       	ldi	r19, 0xAA	; 170
    6076:	48 eb       	ldi	r20, 0xB8	; 184
    6078:	5f e7       	ldi	r21, 0x7F	; 127
    607a:	43 d2       	rcall	.+1158   	; 0x6502 <__mulsf3_pse>
    607c:	0f 92       	push	r0
    607e:	0f 92       	push	r0
    6080:	0f 92       	push	r0
    6082:	4d b7       	in	r20, 0x3d	; 61
    6084:	5e b7       	in	r21, 0x3e	; 62
    6086:	0f 92       	push	r0
    6088:	fb d1       	rcall	.+1014   	; 0x6480 <modf>
    608a:	e3 e2       	ldi	r30, 0x23	; 35
    608c:	f1 e0       	ldi	r31, 0x01	; 1
    608e:	cc d0       	rcall	.+408    	; 0x6228 <__fp_powser>
    6090:	4f 91       	pop	r20
    6092:	5f 91       	pop	r21
    6094:	ef 91       	pop	r30
    6096:	ff 91       	pop	r31
    6098:	e5 95       	asr	r30
    609a:	ee 1f       	adc	r30, r30
    609c:	ff 1f       	adc	r31, r31
    609e:	49 f0       	breq	.+18     	; 0x60b2 <exp+0x4e>
    60a0:	fe 57       	subi	r31, 0x7E	; 126
    60a2:	e0 68       	ori	r30, 0x80	; 128
    60a4:	44 27       	eor	r20, r20
    60a6:	ee 0f       	add	r30, r30
    60a8:	44 1f       	adc	r20, r20
    60aa:	fa 95       	dec	r31
    60ac:	e1 f7       	brne	.-8      	; 0x60a6 <exp+0x42>
    60ae:	41 95       	neg	r20
    60b0:	55 0b       	sbc	r21, r21
    60b2:	6d d1       	rcall	.+730    	; 0x638e <ldexp>
    60b4:	0f 90       	pop	r0
    60b6:	07 fe       	sbrs	r0, 7
    60b8:	61 c1       	rjmp	.+706    	; 0x637c <inverse>
    60ba:	08 95       	ret

000060bc <__fixsfsi>:
    60bc:	04 d0       	rcall	.+8      	; 0x60c6 <__fixunssfsi>
    60be:	68 94       	set
    60c0:	b1 11       	cpse	r27, r1
    60c2:	52 c1       	rjmp	.+676    	; 0x6368 <__fp_szero>
    60c4:	08 95       	ret

000060c6 <__fixunssfsi>:
    60c6:	35 d1       	rcall	.+618    	; 0x6332 <__fp_splitA>
    60c8:	88 f0       	brcs	.+34     	; 0x60ec <__fixunssfsi+0x26>
    60ca:	9f 57       	subi	r25, 0x7F	; 127
    60cc:	90 f0       	brcs	.+36     	; 0x60f2 <__fixunssfsi+0x2c>
    60ce:	b9 2f       	mov	r27, r25
    60d0:	99 27       	eor	r25, r25
    60d2:	b7 51       	subi	r27, 0x17	; 23
    60d4:	a0 f0       	brcs	.+40     	; 0x60fe <__fixunssfsi+0x38>
    60d6:	d1 f0       	breq	.+52     	; 0x610c <__fixunssfsi+0x46>
    60d8:	66 0f       	add	r22, r22
    60da:	77 1f       	adc	r23, r23
    60dc:	88 1f       	adc	r24, r24
    60de:	99 1f       	adc	r25, r25
    60e0:	1a f0       	brmi	.+6      	; 0x60e8 <__fixunssfsi+0x22>
    60e2:	ba 95       	dec	r27
    60e4:	c9 f7       	brne	.-14     	; 0x60d8 <__fixunssfsi+0x12>
    60e6:	12 c0       	rjmp	.+36     	; 0x610c <__fixunssfsi+0x46>
    60e8:	b1 30       	cpi	r27, 0x01	; 1
    60ea:	81 f0       	breq	.+32     	; 0x610c <__fixunssfsi+0x46>
    60ec:	3c d1       	rcall	.+632    	; 0x6366 <__fp_zero>
    60ee:	b1 e0       	ldi	r27, 0x01	; 1
    60f0:	08 95       	ret
    60f2:	39 c1       	rjmp	.+626    	; 0x6366 <__fp_zero>
    60f4:	67 2f       	mov	r22, r23
    60f6:	78 2f       	mov	r23, r24
    60f8:	88 27       	eor	r24, r24
    60fa:	b8 5f       	subi	r27, 0xF8	; 248
    60fc:	39 f0       	breq	.+14     	; 0x610c <__fixunssfsi+0x46>
    60fe:	b9 3f       	cpi	r27, 0xF9	; 249
    6100:	cc f3       	brlt	.-14     	; 0x60f4 <__fixunssfsi+0x2e>
    6102:	86 95       	lsr	r24
    6104:	77 95       	ror	r23
    6106:	67 95       	ror	r22
    6108:	b3 95       	inc	r27
    610a:	d9 f7       	brne	.-10     	; 0x6102 <__fixunssfsi+0x3c>
    610c:	3e f4       	brtc	.+14     	; 0x611c <__fixunssfsi+0x56>
    610e:	90 95       	com	r25
    6110:	80 95       	com	r24
    6112:	70 95       	com	r23
    6114:	61 95       	neg	r22
    6116:	7f 4f       	sbci	r23, 0xFF	; 255
    6118:	8f 4f       	sbci	r24, 0xFF	; 255
    611a:	9f 4f       	sbci	r25, 0xFF	; 255
    611c:	08 95       	ret

0000611e <__floatunsisf>:
    611e:	e8 94       	clt
    6120:	09 c0       	rjmp	.+18     	; 0x6134 <__floatsisf+0x12>

00006122 <__floatsisf>:
    6122:	97 fb       	bst	r25, 7
    6124:	3e f4       	brtc	.+14     	; 0x6134 <__floatsisf+0x12>
    6126:	90 95       	com	r25
    6128:	80 95       	com	r24
    612a:	70 95       	com	r23
    612c:	61 95       	neg	r22
    612e:	7f 4f       	sbci	r23, 0xFF	; 255
    6130:	8f 4f       	sbci	r24, 0xFF	; 255
    6132:	9f 4f       	sbci	r25, 0xFF	; 255
    6134:	99 23       	and	r25, r25
    6136:	a9 f0       	breq	.+42     	; 0x6162 <__floatsisf+0x40>
    6138:	f9 2f       	mov	r31, r25
    613a:	96 e9       	ldi	r25, 0x96	; 150
    613c:	bb 27       	eor	r27, r27
    613e:	93 95       	inc	r25
    6140:	f6 95       	lsr	r31
    6142:	87 95       	ror	r24
    6144:	77 95       	ror	r23
    6146:	67 95       	ror	r22
    6148:	b7 95       	ror	r27
    614a:	f1 11       	cpse	r31, r1
    614c:	f8 cf       	rjmp	.-16     	; 0x613e <__floatsisf+0x1c>
    614e:	fa f4       	brpl	.+62     	; 0x618e <__floatsisf+0x6c>
    6150:	bb 0f       	add	r27, r27
    6152:	11 f4       	brne	.+4      	; 0x6158 <__floatsisf+0x36>
    6154:	60 ff       	sbrs	r22, 0
    6156:	1b c0       	rjmp	.+54     	; 0x618e <__floatsisf+0x6c>
    6158:	6f 5f       	subi	r22, 0xFF	; 255
    615a:	7f 4f       	sbci	r23, 0xFF	; 255
    615c:	8f 4f       	sbci	r24, 0xFF	; 255
    615e:	9f 4f       	sbci	r25, 0xFF	; 255
    6160:	16 c0       	rjmp	.+44     	; 0x618e <__floatsisf+0x6c>
    6162:	88 23       	and	r24, r24
    6164:	11 f0       	breq	.+4      	; 0x616a <__floatsisf+0x48>
    6166:	96 e9       	ldi	r25, 0x96	; 150
    6168:	11 c0       	rjmp	.+34     	; 0x618c <__floatsisf+0x6a>
    616a:	77 23       	and	r23, r23
    616c:	21 f0       	breq	.+8      	; 0x6176 <__floatsisf+0x54>
    616e:	9e e8       	ldi	r25, 0x8E	; 142
    6170:	87 2f       	mov	r24, r23
    6172:	76 2f       	mov	r23, r22
    6174:	05 c0       	rjmp	.+10     	; 0x6180 <__floatsisf+0x5e>
    6176:	66 23       	and	r22, r22
    6178:	71 f0       	breq	.+28     	; 0x6196 <__floatsisf+0x74>
    617a:	96 e8       	ldi	r25, 0x86	; 134
    617c:	86 2f       	mov	r24, r22
    617e:	70 e0       	ldi	r23, 0x00	; 0
    6180:	60 e0       	ldi	r22, 0x00	; 0
    6182:	2a f0       	brmi	.+10     	; 0x618e <__floatsisf+0x6c>
    6184:	9a 95       	dec	r25
    6186:	66 0f       	add	r22, r22
    6188:	77 1f       	adc	r23, r23
    618a:	88 1f       	adc	r24, r24
    618c:	da f7       	brpl	.-10     	; 0x6184 <__floatsisf+0x62>
    618e:	88 0f       	add	r24, r24
    6190:	96 95       	lsr	r25
    6192:	87 95       	ror	r24
    6194:	97 f9       	bld	r25, 7
    6196:	08 95       	ret

00006198 <__fp_arccos>:
    6198:	df 93       	push	r29
    619a:	cf 93       	push	r28
    619c:	1f 93       	push	r17
    619e:	0f 93       	push	r16
    61a0:	8b 01       	movw	r16, r22
    61a2:	ec 01       	movw	r28, r24
    61a4:	eb e4       	ldi	r30, 0x4B	; 75
    61a6:	f1 e0       	ldi	r31, 0x01	; 1
    61a8:	3f d0       	rcall	.+126    	; 0x6228 <__fp_powser>
    61aa:	99 d0       	rcall	.+306    	; 0x62de <__fp_round>
    61ac:	98 01       	movw	r18, r16
    61ae:	ae 01       	movw	r20, r28
    61b0:	8b 01       	movw	r16, r22
    61b2:	ec 01       	movw	r28, r24
    61b4:	60 e0       	ldi	r22, 0x00	; 0
    61b6:	70 e0       	ldi	r23, 0x00	; 0
    61b8:	80 e8       	ldi	r24, 0x80	; 128
    61ba:	9f e3       	ldi	r25, 0x3F	; 63
    61bc:	52 de       	rcall	.-860    	; 0x5e62 <__subsf3>
    61be:	00 d2       	rcall	.+1024   	; 0x65c0 <sqrt>
    61c0:	98 01       	movw	r18, r16
    61c2:	ae 01       	movw	r20, r28
    61c4:	0f 91       	pop	r16
    61c6:	1f 91       	pop	r17
    61c8:	cf 91       	pop	r28
    61ca:	df 91       	pop	r29
    61cc:	98 c1       	rjmp	.+816    	; 0x64fe <__mulsf3x>

000061ce <__fp_cmp>:
    61ce:	99 0f       	add	r25, r25
    61d0:	00 08       	sbc	r0, r0
    61d2:	55 0f       	add	r21, r21
    61d4:	aa 0b       	sbc	r26, r26
    61d6:	e0 e8       	ldi	r30, 0x80	; 128
    61d8:	fe ef       	ldi	r31, 0xFE	; 254
    61da:	16 16       	cp	r1, r22
    61dc:	17 06       	cpc	r1, r23
    61de:	e8 07       	cpc	r30, r24
    61e0:	f9 07       	cpc	r31, r25
    61e2:	c0 f0       	brcs	.+48     	; 0x6214 <__fp_cmp+0x46>
    61e4:	12 16       	cp	r1, r18
    61e6:	13 06       	cpc	r1, r19
    61e8:	e4 07       	cpc	r30, r20
    61ea:	f5 07       	cpc	r31, r21
    61ec:	98 f0       	brcs	.+38     	; 0x6214 <__fp_cmp+0x46>
    61ee:	62 1b       	sub	r22, r18
    61f0:	73 0b       	sbc	r23, r19
    61f2:	84 0b       	sbc	r24, r20
    61f4:	95 0b       	sbc	r25, r21
    61f6:	39 f4       	brne	.+14     	; 0x6206 <__fp_cmp+0x38>
    61f8:	0a 26       	eor	r0, r26
    61fa:	61 f0       	breq	.+24     	; 0x6214 <__fp_cmp+0x46>
    61fc:	23 2b       	or	r18, r19
    61fe:	24 2b       	or	r18, r20
    6200:	25 2b       	or	r18, r21
    6202:	21 f4       	brne	.+8      	; 0x620c <__fp_cmp+0x3e>
    6204:	08 95       	ret
    6206:	0a 26       	eor	r0, r26
    6208:	09 f4       	brne	.+2      	; 0x620c <__fp_cmp+0x3e>
    620a:	a1 40       	sbci	r26, 0x01	; 1
    620c:	a6 95       	lsr	r26
    620e:	8f ef       	ldi	r24, 0xFF	; 255
    6210:	81 1d       	adc	r24, r1
    6212:	81 1d       	adc	r24, r1
    6214:	08 95       	ret

00006216 <__fp_inf>:
    6216:	97 f9       	bld	r25, 7
    6218:	9f 67       	ori	r25, 0x7F	; 127
    621a:	80 e8       	ldi	r24, 0x80	; 128
    621c:	70 e0       	ldi	r23, 0x00	; 0
    621e:	60 e0       	ldi	r22, 0x00	; 0
    6220:	08 95       	ret

00006222 <__fp_nan>:
    6222:	9f ef       	ldi	r25, 0xFF	; 255
    6224:	80 ec       	ldi	r24, 0xC0	; 192
    6226:	08 95       	ret

00006228 <__fp_powser>:
    6228:	df 93       	push	r29
    622a:	cf 93       	push	r28
    622c:	1f 93       	push	r17
    622e:	0f 93       	push	r16
    6230:	ff 92       	push	r15
    6232:	ef 92       	push	r14
    6234:	df 92       	push	r13
    6236:	7b 01       	movw	r14, r22
    6238:	8c 01       	movw	r16, r24
    623a:	68 94       	set
    623c:	05 c0       	rjmp	.+10     	; 0x6248 <__fp_powser+0x20>
    623e:	da 2e       	mov	r13, r26
    6240:	ef 01       	movw	r28, r30
    6242:	5d d1       	rcall	.+698    	; 0x64fe <__mulsf3x>
    6244:	fe 01       	movw	r30, r28
    6246:	e8 94       	clt
    6248:	a5 91       	lpm	r26, Z+
    624a:	25 91       	lpm	r18, Z+
    624c:	35 91       	lpm	r19, Z+
    624e:	45 91       	lpm	r20, Z+
    6250:	55 91       	lpm	r21, Z+
    6252:	ae f3       	brts	.-22     	; 0x623e <__fp_powser+0x16>
    6254:	ef 01       	movw	r28, r30
    6256:	17 de       	rcall	.-978    	; 0x5e86 <__addsf3x>
    6258:	fe 01       	movw	r30, r28
    625a:	97 01       	movw	r18, r14
    625c:	a8 01       	movw	r20, r16
    625e:	da 94       	dec	r13
    6260:	79 f7       	brne	.-34     	; 0x6240 <__fp_powser+0x18>
    6262:	df 90       	pop	r13
    6264:	ef 90       	pop	r14
    6266:	ff 90       	pop	r15
    6268:	0f 91       	pop	r16
    626a:	1f 91       	pop	r17
    626c:	cf 91       	pop	r28
    626e:	df 91       	pop	r29
    6270:	08 95       	ret

00006272 <__fp_pscA>:
    6272:	00 24       	eor	r0, r0
    6274:	0a 94       	dec	r0
    6276:	16 16       	cp	r1, r22
    6278:	17 06       	cpc	r1, r23
    627a:	18 06       	cpc	r1, r24
    627c:	09 06       	cpc	r0, r25
    627e:	08 95       	ret

00006280 <__fp_pscB>:
    6280:	00 24       	eor	r0, r0
    6282:	0a 94       	dec	r0
    6284:	12 16       	cp	r1, r18
    6286:	13 06       	cpc	r1, r19
    6288:	14 06       	cpc	r1, r20
    628a:	05 06       	cpc	r0, r21
    628c:	08 95       	ret
    628e:	c9 cf       	rjmp	.-110    	; 0x6222 <__fp_nan>

00006290 <__fp_rempio2>:
    6290:	50 d0       	rcall	.+160    	; 0x6332 <__fp_splitA>
    6292:	e8 f3       	brcs	.-6      	; 0x628e <__fp_pscB+0xe>
    6294:	e8 94       	clt
    6296:	e0 e0       	ldi	r30, 0x00	; 0
    6298:	bb 27       	eor	r27, r27
    629a:	9f 57       	subi	r25, 0x7F	; 127
    629c:	f0 f0       	brcs	.+60     	; 0x62da <__fp_rempio2+0x4a>
    629e:	2a ed       	ldi	r18, 0xDA	; 218
    62a0:	3f e0       	ldi	r19, 0x0F	; 15
    62a2:	49 ec       	ldi	r20, 0xC9	; 201
    62a4:	06 c0       	rjmp	.+12     	; 0x62b2 <__fp_rempio2+0x22>
    62a6:	ee 0f       	add	r30, r30
    62a8:	bb 0f       	add	r27, r27
    62aa:	66 1f       	adc	r22, r22
    62ac:	77 1f       	adc	r23, r23
    62ae:	88 1f       	adc	r24, r24
    62b0:	28 f0       	brcs	.+10     	; 0x62bc <__fp_rempio2+0x2c>
    62b2:	b2 3a       	cpi	r27, 0xA2	; 162
    62b4:	62 07       	cpc	r22, r18
    62b6:	73 07       	cpc	r23, r19
    62b8:	84 07       	cpc	r24, r20
    62ba:	28 f0       	brcs	.+10     	; 0x62c6 <__fp_rempio2+0x36>
    62bc:	b2 5a       	subi	r27, 0xA2	; 162
    62be:	62 0b       	sbc	r22, r18
    62c0:	73 0b       	sbc	r23, r19
    62c2:	84 0b       	sbc	r24, r20
    62c4:	e3 95       	inc	r30
    62c6:	9a 95       	dec	r25
    62c8:	72 f7       	brpl	.-36     	; 0x62a6 <__fp_rempio2+0x16>
    62ca:	80 38       	cpi	r24, 0x80	; 128
    62cc:	30 f4       	brcc	.+12     	; 0x62da <__fp_rempio2+0x4a>
    62ce:	9a 95       	dec	r25
    62d0:	bb 0f       	add	r27, r27
    62d2:	66 1f       	adc	r22, r22
    62d4:	77 1f       	adc	r23, r23
    62d6:	88 1f       	adc	r24, r24
    62d8:	d2 f7       	brpl	.-12     	; 0x62ce <__fp_rempio2+0x3e>
    62da:	90 48       	sbci	r25, 0x80	; 128
    62dc:	b4 c1       	rjmp	.+872    	; 0x6646 <__fp_mpack_finite>

000062de <__fp_round>:
    62de:	09 2e       	mov	r0, r25
    62e0:	03 94       	inc	r0
    62e2:	00 0c       	add	r0, r0
    62e4:	11 f4       	brne	.+4      	; 0x62ea <__fp_round+0xc>
    62e6:	88 23       	and	r24, r24
    62e8:	52 f0       	brmi	.+20     	; 0x62fe <__fp_round+0x20>
    62ea:	bb 0f       	add	r27, r27
    62ec:	40 f4       	brcc	.+16     	; 0x62fe <__fp_round+0x20>
    62ee:	bf 2b       	or	r27, r31
    62f0:	11 f4       	brne	.+4      	; 0x62f6 <__fp_round+0x18>
    62f2:	60 ff       	sbrs	r22, 0
    62f4:	04 c0       	rjmp	.+8      	; 0x62fe <__fp_round+0x20>
    62f6:	6f 5f       	subi	r22, 0xFF	; 255
    62f8:	7f 4f       	sbci	r23, 0xFF	; 255
    62fa:	8f 4f       	sbci	r24, 0xFF	; 255
    62fc:	9f 4f       	sbci	r25, 0xFF	; 255
    62fe:	08 95       	ret

00006300 <__fp_sinus>:
    6300:	ef 93       	push	r30
    6302:	e0 ff       	sbrs	r30, 0
    6304:	06 c0       	rjmp	.+12     	; 0x6312 <__fp_sinus+0x12>
    6306:	a2 ea       	ldi	r26, 0xA2	; 162
    6308:	2a ed       	ldi	r18, 0xDA	; 218
    630a:	3f e0       	ldi	r19, 0x0F	; 15
    630c:	49 ec       	ldi	r20, 0xC9	; 201
    630e:	5f eb       	ldi	r21, 0xBF	; 191
    6310:	ba dd       	rcall	.-1164   	; 0x5e86 <__addsf3x>
    6312:	e5 df       	rcall	.-54     	; 0x62de <__fp_round>
    6314:	0f 90       	pop	r0
    6316:	03 94       	inc	r0
    6318:	01 fc       	sbrc	r0, 1
    631a:	90 58       	subi	r25, 0x80	; 128
    631c:	e3 e7       	ldi	r30, 0x73	; 115
    631e:	f1 e0       	ldi	r31, 0x01	; 1
    6320:	a5 c1       	rjmp	.+842    	; 0x666c <__fp_powsodd>

00006322 <__fp_split3>:
    6322:	57 fd       	sbrc	r21, 7
    6324:	90 58       	subi	r25, 0x80	; 128
    6326:	44 0f       	add	r20, r20
    6328:	55 1f       	adc	r21, r21
    632a:	59 f0       	breq	.+22     	; 0x6342 <__fp_splitA+0x10>
    632c:	5f 3f       	cpi	r21, 0xFF	; 255
    632e:	71 f0       	breq	.+28     	; 0x634c <__fp_splitA+0x1a>
    6330:	47 95       	ror	r20

00006332 <__fp_splitA>:
    6332:	88 0f       	add	r24, r24
    6334:	97 fb       	bst	r25, 7
    6336:	99 1f       	adc	r25, r25
    6338:	61 f0       	breq	.+24     	; 0x6352 <__fp_splitA+0x20>
    633a:	9f 3f       	cpi	r25, 0xFF	; 255
    633c:	79 f0       	breq	.+30     	; 0x635c <__fp_splitA+0x2a>
    633e:	87 95       	ror	r24
    6340:	08 95       	ret
    6342:	12 16       	cp	r1, r18
    6344:	13 06       	cpc	r1, r19
    6346:	14 06       	cpc	r1, r20
    6348:	55 1f       	adc	r21, r21
    634a:	f2 cf       	rjmp	.-28     	; 0x6330 <__fp_split3+0xe>
    634c:	46 95       	lsr	r20
    634e:	f1 df       	rcall	.-30     	; 0x6332 <__fp_splitA>
    6350:	08 c0       	rjmp	.+16     	; 0x6362 <__fp_splitA+0x30>
    6352:	16 16       	cp	r1, r22
    6354:	17 06       	cpc	r1, r23
    6356:	18 06       	cpc	r1, r24
    6358:	99 1f       	adc	r25, r25
    635a:	f1 cf       	rjmp	.-30     	; 0x633e <__fp_splitA+0xc>
    635c:	86 95       	lsr	r24
    635e:	71 05       	cpc	r23, r1
    6360:	61 05       	cpc	r22, r1
    6362:	08 94       	sec
    6364:	08 95       	ret

00006366 <__fp_zero>:
    6366:	e8 94       	clt

00006368 <__fp_szero>:
    6368:	bb 27       	eor	r27, r27
    636a:	66 27       	eor	r22, r22
    636c:	77 27       	eor	r23, r23
    636e:	cb 01       	movw	r24, r22
    6370:	97 f9       	bld	r25, 7
    6372:	08 95       	ret

00006374 <__gesf2>:
    6374:	2c df       	rcall	.-424    	; 0x61ce <__fp_cmp>
    6376:	08 f4       	brcc	.+2      	; 0x637a <__gesf2+0x6>
    6378:	8f ef       	ldi	r24, 0xFF	; 255
    637a:	08 95       	ret

0000637c <inverse>:
    637c:	9b 01       	movw	r18, r22
    637e:	ac 01       	movw	r20, r24
    6380:	60 e0       	ldi	r22, 0x00	; 0
    6382:	70 e0       	ldi	r23, 0x00	; 0
    6384:	80 e8       	ldi	r24, 0x80	; 128
    6386:	9f e3       	ldi	r25, 0x3F	; 63
    6388:	00 ce       	rjmp	.-1024   	; 0x5f8a <__divsf3>
    638a:	45 cf       	rjmp	.-374    	; 0x6216 <__fp_inf>
    638c:	5a c1       	rjmp	.+692    	; 0x6642 <__fp_mpack>

0000638e <ldexp>:
    638e:	d1 df       	rcall	.-94     	; 0x6332 <__fp_splitA>
    6390:	e8 f3       	brcs	.-6      	; 0x638c <inverse+0x10>
    6392:	99 23       	and	r25, r25
    6394:	d9 f3       	breq	.-10     	; 0x638c <inverse+0x10>
    6396:	94 0f       	add	r25, r20
    6398:	51 1d       	adc	r21, r1
    639a:	bb f3       	brvs	.-18     	; 0x638a <inverse+0xe>
    639c:	91 50       	subi	r25, 0x01	; 1
    639e:	50 40       	sbci	r21, 0x00	; 0
    63a0:	94 f0       	brlt	.+36     	; 0x63c6 <ldexp+0x38>
    63a2:	59 f0       	breq	.+22     	; 0x63ba <ldexp+0x2c>
    63a4:	88 23       	and	r24, r24
    63a6:	32 f0       	brmi	.+12     	; 0x63b4 <ldexp+0x26>
    63a8:	66 0f       	add	r22, r22
    63aa:	77 1f       	adc	r23, r23
    63ac:	88 1f       	adc	r24, r24
    63ae:	91 50       	subi	r25, 0x01	; 1
    63b0:	50 40       	sbci	r21, 0x00	; 0
    63b2:	c1 f7       	brne	.-16     	; 0x63a4 <ldexp+0x16>
    63b4:	9e 3f       	cpi	r25, 0xFE	; 254
    63b6:	51 05       	cpc	r21, r1
    63b8:	44 f7       	brge	.-48     	; 0x638a <inverse+0xe>
    63ba:	88 0f       	add	r24, r24
    63bc:	91 1d       	adc	r25, r1
    63be:	96 95       	lsr	r25
    63c0:	87 95       	ror	r24
    63c2:	97 f9       	bld	r25, 7
    63c4:	08 95       	ret
    63c6:	5f 3f       	cpi	r21, 0xFF	; 255
    63c8:	ac f0       	brlt	.+42     	; 0x63f4 <ldexp+0x66>
    63ca:	98 3e       	cpi	r25, 0xE8	; 232
    63cc:	9c f0       	brlt	.+38     	; 0x63f4 <ldexp+0x66>
    63ce:	bb 27       	eor	r27, r27
    63d0:	86 95       	lsr	r24
    63d2:	77 95       	ror	r23
    63d4:	67 95       	ror	r22
    63d6:	b7 95       	ror	r27
    63d8:	08 f4       	brcc	.+2      	; 0x63dc <ldexp+0x4e>
    63da:	b1 60       	ori	r27, 0x01	; 1
    63dc:	93 95       	inc	r25
    63de:	c1 f7       	brne	.-16     	; 0x63d0 <ldexp+0x42>
    63e0:	bb 0f       	add	r27, r27
    63e2:	58 f7       	brcc	.-42     	; 0x63ba <ldexp+0x2c>
    63e4:	11 f4       	brne	.+4      	; 0x63ea <ldexp+0x5c>
    63e6:	60 ff       	sbrs	r22, 0
    63e8:	e8 cf       	rjmp	.-48     	; 0x63ba <ldexp+0x2c>
    63ea:	6f 5f       	subi	r22, 0xFF	; 255
    63ec:	7f 4f       	sbci	r23, 0xFF	; 255
    63ee:	8f 4f       	sbci	r24, 0xFF	; 255
    63f0:	9f 4f       	sbci	r25, 0xFF	; 255
    63f2:	e3 cf       	rjmp	.-58     	; 0x63ba <ldexp+0x2c>
    63f4:	b9 cf       	rjmp	.-142    	; 0x6368 <__fp_szero>
    63f6:	0e f0       	brts	.+2      	; 0x63fa <ldexp+0x6c>
    63f8:	24 c1       	rjmp	.+584    	; 0x6642 <__fp_mpack>
    63fa:	13 cf       	rjmp	.-474    	; 0x6222 <__fp_nan>
    63fc:	68 94       	set
    63fe:	0b cf       	rjmp	.-490    	; 0x6216 <__fp_inf>

00006400 <log>:
    6400:	98 df       	rcall	.-208    	; 0x6332 <__fp_splitA>
    6402:	c8 f3       	brcs	.-14     	; 0x63f6 <ldexp+0x68>
    6404:	99 23       	and	r25, r25
    6406:	d1 f3       	breq	.-12     	; 0x63fc <ldexp+0x6e>
    6408:	c6 f3       	brts	.-16     	; 0x63fa <ldexp+0x6c>
    640a:	df 93       	push	r29
    640c:	cf 93       	push	r28
    640e:	1f 93       	push	r17
    6410:	0f 93       	push	r16
    6412:	ff 92       	push	r15
    6414:	c9 2f       	mov	r28, r25
    6416:	dd 27       	eor	r29, r29
    6418:	88 23       	and	r24, r24
    641a:	2a f0       	brmi	.+10     	; 0x6426 <log+0x26>
    641c:	21 97       	sbiw	r28, 0x01	; 1
    641e:	66 0f       	add	r22, r22
    6420:	77 1f       	adc	r23, r23
    6422:	88 1f       	adc	r24, r24
    6424:	da f7       	brpl	.-10     	; 0x641c <log+0x1c>
    6426:	20 e0       	ldi	r18, 0x00	; 0
    6428:	30 e0       	ldi	r19, 0x00	; 0
    642a:	40 e8       	ldi	r20, 0x80	; 128
    642c:	5f eb       	ldi	r21, 0xBF	; 191
    642e:	9f e3       	ldi	r25, 0x3F	; 63
    6430:	88 39       	cpi	r24, 0x98	; 152
    6432:	20 f0       	brcs	.+8      	; 0x643c <log+0x3c>
    6434:	80 3e       	cpi	r24, 0xE0	; 224
    6436:	30 f0       	brcs	.+12     	; 0x6444 <log+0x44>
    6438:	21 96       	adiw	r28, 0x01	; 1
    643a:	8f 77       	andi	r24, 0x7F	; 127
    643c:	13 dd       	rcall	.-1498   	; 0x5e64 <__addsf3>
    643e:	e1 e9       	ldi	r30, 0x91	; 145
    6440:	f1 e0       	ldi	r31, 0x01	; 1
    6442:	03 c0       	rjmp	.+6      	; 0x644a <log+0x4a>
    6444:	0f dd       	rcall	.-1506   	; 0x5e64 <__addsf3>
    6446:	ee eb       	ldi	r30, 0xBE	; 190
    6448:	f1 e0       	ldi	r31, 0x01	; 1
    644a:	ee de       	rcall	.-548    	; 0x6228 <__fp_powser>
    644c:	8b 01       	movw	r16, r22
    644e:	be 01       	movw	r22, r28
    6450:	ec 01       	movw	r28, r24
    6452:	fb 2e       	mov	r15, r27
    6454:	6f 57       	subi	r22, 0x7F	; 127
    6456:	71 09       	sbc	r23, r1
    6458:	75 95       	asr	r23
    645a:	77 1f       	adc	r23, r23
    645c:	88 0b       	sbc	r24, r24
    645e:	99 0b       	sbc	r25, r25
    6460:	60 de       	rcall	.-832    	; 0x6122 <__floatsisf>
    6462:	28 e1       	ldi	r18, 0x18	; 24
    6464:	32 e7       	ldi	r19, 0x72	; 114
    6466:	41 e3       	ldi	r20, 0x31	; 49
    6468:	5f e3       	ldi	r21, 0x3F	; 63
    646a:	49 d0       	rcall	.+146    	; 0x64fe <__mulsf3x>
    646c:	af 2d       	mov	r26, r15
    646e:	98 01       	movw	r18, r16
    6470:	ae 01       	movw	r20, r28
    6472:	ff 90       	pop	r15
    6474:	0f 91       	pop	r16
    6476:	1f 91       	pop	r17
    6478:	cf 91       	pop	r28
    647a:	df 91       	pop	r29
    647c:	04 dd       	rcall	.-1528   	; 0x5e86 <__addsf3x>
    647e:	2f cf       	rjmp	.-418    	; 0x62de <__fp_round>

00006480 <modf>:
    6480:	fa 01       	movw	r30, r20
    6482:	dc 01       	movw	r26, r24
    6484:	aa 0f       	add	r26, r26
    6486:	bb 1f       	adc	r27, r27
    6488:	9b 01       	movw	r18, r22
    648a:	ac 01       	movw	r20, r24
    648c:	bf 57       	subi	r27, 0x7F	; 127
    648e:	28 f4       	brcc	.+10     	; 0x649a <modf+0x1a>
    6490:	22 27       	eor	r18, r18
    6492:	33 27       	eor	r19, r19
    6494:	44 27       	eor	r20, r20
    6496:	50 78       	andi	r21, 0x80	; 128
    6498:	1f c0       	rjmp	.+62     	; 0x64d8 <modf+0x58>
    649a:	b7 51       	subi	r27, 0x17	; 23
    649c:	88 f4       	brcc	.+34     	; 0x64c0 <modf+0x40>
    649e:	ab 2f       	mov	r26, r27
    64a0:	00 24       	eor	r0, r0
    64a2:	46 95       	lsr	r20
    64a4:	37 95       	ror	r19
    64a6:	27 95       	ror	r18
    64a8:	01 1c       	adc	r0, r1
    64aa:	a3 95       	inc	r26
    64ac:	d2 f3       	brmi	.-12     	; 0x64a2 <modf+0x22>
    64ae:	00 20       	and	r0, r0
    64b0:	69 f0       	breq	.+26     	; 0x64cc <modf+0x4c>
    64b2:	22 0f       	add	r18, r18
    64b4:	33 1f       	adc	r19, r19
    64b6:	44 1f       	adc	r20, r20
    64b8:	b3 95       	inc	r27
    64ba:	da f3       	brmi	.-10     	; 0x64b2 <modf+0x32>
    64bc:	0d d0       	rcall	.+26     	; 0x64d8 <modf+0x58>
    64be:	d1 cc       	rjmp	.-1630   	; 0x5e62 <__subsf3>
    64c0:	61 30       	cpi	r22, 0x01	; 1
    64c2:	71 05       	cpc	r23, r1
    64c4:	a0 e8       	ldi	r26, 0x80	; 128
    64c6:	8a 07       	cpc	r24, r26
    64c8:	b9 46       	sbci	r27, 0x69	; 105
    64ca:	30 f4       	brcc	.+12     	; 0x64d8 <modf+0x58>
    64cc:	9b 01       	movw	r18, r22
    64ce:	ac 01       	movw	r20, r24
    64d0:	66 27       	eor	r22, r22
    64d2:	77 27       	eor	r23, r23
    64d4:	88 27       	eor	r24, r24
    64d6:	90 78       	andi	r25, 0x80	; 128
    64d8:	30 96       	adiw	r30, 0x00	; 0
    64da:	21 f0       	breq	.+8      	; 0x64e4 <modf+0x64>
    64dc:	20 83       	st	Z, r18
    64de:	31 83       	std	Z+1, r19	; 0x01
    64e0:	42 83       	std	Z+2, r20	; 0x02
    64e2:	53 83       	std	Z+3, r21	; 0x03
    64e4:	08 95       	ret

000064e6 <__mulsf3>:
    64e6:	0b d0       	rcall	.+22     	; 0x64fe <__mulsf3x>
    64e8:	fa ce       	rjmp	.-524    	; 0x62de <__fp_round>
    64ea:	c3 de       	rcall	.-634    	; 0x6272 <__fp_pscA>
    64ec:	28 f0       	brcs	.+10     	; 0x64f8 <__mulsf3+0x12>
    64ee:	c8 de       	rcall	.-624    	; 0x6280 <__fp_pscB>
    64f0:	18 f0       	brcs	.+6      	; 0x64f8 <__mulsf3+0x12>
    64f2:	95 23       	and	r25, r21
    64f4:	09 f0       	breq	.+2      	; 0x64f8 <__mulsf3+0x12>
    64f6:	8f ce       	rjmp	.-738    	; 0x6216 <__fp_inf>
    64f8:	94 ce       	rjmp	.-728    	; 0x6222 <__fp_nan>
    64fa:	11 24       	eor	r1, r1
    64fc:	35 cf       	rjmp	.-406    	; 0x6368 <__fp_szero>

000064fe <__mulsf3x>:
    64fe:	11 df       	rcall	.-478    	; 0x6322 <__fp_split3>
    6500:	a0 f3       	brcs	.-24     	; 0x64ea <__mulsf3+0x4>

00006502 <__mulsf3_pse>:
    6502:	95 9f       	mul	r25, r21
    6504:	d1 f3       	breq	.-12     	; 0x64fa <__mulsf3+0x14>
    6506:	95 0f       	add	r25, r21
    6508:	50 e0       	ldi	r21, 0x00	; 0
    650a:	55 1f       	adc	r21, r21
    650c:	62 9f       	mul	r22, r18
    650e:	f0 01       	movw	r30, r0
    6510:	72 9f       	mul	r23, r18
    6512:	bb 27       	eor	r27, r27
    6514:	f0 0d       	add	r31, r0
    6516:	b1 1d       	adc	r27, r1
    6518:	63 9f       	mul	r22, r19
    651a:	aa 27       	eor	r26, r26
    651c:	f0 0d       	add	r31, r0
    651e:	b1 1d       	adc	r27, r1
    6520:	aa 1f       	adc	r26, r26
    6522:	64 9f       	mul	r22, r20
    6524:	66 27       	eor	r22, r22
    6526:	b0 0d       	add	r27, r0
    6528:	a1 1d       	adc	r26, r1
    652a:	66 1f       	adc	r22, r22
    652c:	82 9f       	mul	r24, r18
    652e:	22 27       	eor	r18, r18
    6530:	b0 0d       	add	r27, r0
    6532:	a1 1d       	adc	r26, r1
    6534:	62 1f       	adc	r22, r18
    6536:	73 9f       	mul	r23, r19
    6538:	b0 0d       	add	r27, r0
    653a:	a1 1d       	adc	r26, r1
    653c:	62 1f       	adc	r22, r18
    653e:	83 9f       	mul	r24, r19
    6540:	a0 0d       	add	r26, r0
    6542:	61 1d       	adc	r22, r1
    6544:	22 1f       	adc	r18, r18
    6546:	74 9f       	mul	r23, r20
    6548:	33 27       	eor	r19, r19
    654a:	a0 0d       	add	r26, r0
    654c:	61 1d       	adc	r22, r1
    654e:	23 1f       	adc	r18, r19
    6550:	84 9f       	mul	r24, r20
    6552:	60 0d       	add	r22, r0
    6554:	21 1d       	adc	r18, r1
    6556:	82 2f       	mov	r24, r18
    6558:	76 2f       	mov	r23, r22
    655a:	6a 2f       	mov	r22, r26
    655c:	11 24       	eor	r1, r1
    655e:	9f 57       	subi	r25, 0x7F	; 127
    6560:	50 40       	sbci	r21, 0x00	; 0
    6562:	8a f0       	brmi	.+34     	; 0x6586 <__mulsf3_pse+0x84>
    6564:	e1 f0       	breq	.+56     	; 0x659e <__mulsf3_pse+0x9c>
    6566:	88 23       	and	r24, r24
    6568:	4a f0       	brmi	.+18     	; 0x657c <__mulsf3_pse+0x7a>
    656a:	ee 0f       	add	r30, r30
    656c:	ff 1f       	adc	r31, r31
    656e:	bb 1f       	adc	r27, r27
    6570:	66 1f       	adc	r22, r22
    6572:	77 1f       	adc	r23, r23
    6574:	88 1f       	adc	r24, r24
    6576:	91 50       	subi	r25, 0x01	; 1
    6578:	50 40       	sbci	r21, 0x00	; 0
    657a:	a9 f7       	brne	.-22     	; 0x6566 <__mulsf3_pse+0x64>
    657c:	9e 3f       	cpi	r25, 0xFE	; 254
    657e:	51 05       	cpc	r21, r1
    6580:	70 f0       	brcs	.+28     	; 0x659e <__mulsf3_pse+0x9c>
    6582:	49 ce       	rjmp	.-878    	; 0x6216 <__fp_inf>
    6584:	f1 ce       	rjmp	.-542    	; 0x6368 <__fp_szero>
    6586:	5f 3f       	cpi	r21, 0xFF	; 255
    6588:	ec f3       	brlt	.-6      	; 0x6584 <__mulsf3_pse+0x82>
    658a:	98 3e       	cpi	r25, 0xE8	; 232
    658c:	dc f3       	brlt	.-10     	; 0x6584 <__mulsf3_pse+0x82>
    658e:	86 95       	lsr	r24
    6590:	77 95       	ror	r23
    6592:	67 95       	ror	r22
    6594:	b7 95       	ror	r27
    6596:	f7 95       	ror	r31
    6598:	e7 95       	ror	r30
    659a:	9f 5f       	subi	r25, 0xFF	; 255
    659c:	c1 f7       	brne	.-16     	; 0x658e <__mulsf3_pse+0x8c>
    659e:	fe 2b       	or	r31, r30
    65a0:	88 0f       	add	r24, r24
    65a2:	91 1d       	adc	r25, r1
    65a4:	96 95       	lsr	r25
    65a6:	87 95       	ror	r24
    65a8:	97 f9       	bld	r25, 7
    65aa:	08 95       	ret

000065ac <sin>:
    65ac:	9f 93       	push	r25
    65ae:	70 de       	rcall	.-800    	; 0x6290 <__fp_rempio2>
    65b0:	0f 90       	pop	r0
    65b2:	07 fc       	sbrc	r0, 7
    65b4:	ee 5f       	subi	r30, 0xFE	; 254
    65b6:	a4 ce       	rjmp	.-696    	; 0x6300 <__fp_sinus>
    65b8:	11 f4       	brne	.+4      	; 0x65be <sin+0x12>
    65ba:	0e f4       	brtc	.+2      	; 0x65be <sin+0x12>
    65bc:	32 ce       	rjmp	.-924    	; 0x6222 <__fp_nan>
    65be:	41 c0       	rjmp	.+130    	; 0x6642 <__fp_mpack>

000065c0 <sqrt>:
    65c0:	b8 de       	rcall	.-656    	; 0x6332 <__fp_splitA>
    65c2:	d0 f3       	brcs	.-12     	; 0x65b8 <sin+0xc>
    65c4:	99 23       	and	r25, r25
    65c6:	d9 f3       	breq	.-10     	; 0x65be <sin+0x12>
    65c8:	ce f3       	brts	.-14     	; 0x65bc <sin+0x10>
    65ca:	9f 57       	subi	r25, 0x7F	; 127
    65cc:	55 0b       	sbc	r21, r21
    65ce:	87 ff       	sbrs	r24, 7
    65d0:	46 d0       	rcall	.+140    	; 0x665e <__fp_norm2>
    65d2:	00 24       	eor	r0, r0
    65d4:	a0 e6       	ldi	r26, 0x60	; 96
    65d6:	40 ea       	ldi	r20, 0xA0	; 160
    65d8:	90 01       	movw	r18, r0
    65da:	80 58       	subi	r24, 0x80	; 128
    65dc:	56 95       	lsr	r21
    65de:	97 95       	ror	r25
    65e0:	28 f4       	brcc	.+10     	; 0x65ec <sqrt+0x2c>
    65e2:	80 5c       	subi	r24, 0xC0	; 192
    65e4:	66 0f       	add	r22, r22
    65e6:	77 1f       	adc	r23, r23
    65e8:	88 1f       	adc	r24, r24
    65ea:	20 f0       	brcs	.+8      	; 0x65f4 <sqrt+0x34>
    65ec:	26 17       	cp	r18, r22
    65ee:	37 07       	cpc	r19, r23
    65f0:	48 07       	cpc	r20, r24
    65f2:	30 f4       	brcc	.+12     	; 0x6600 <sqrt+0x40>
    65f4:	62 1b       	sub	r22, r18
    65f6:	73 0b       	sbc	r23, r19
    65f8:	84 0b       	sbc	r24, r20
    65fa:	20 29       	or	r18, r0
    65fc:	31 29       	or	r19, r1
    65fe:	4a 2b       	or	r20, r26
    6600:	a6 95       	lsr	r26
    6602:	17 94       	ror	r1
    6604:	07 94       	ror	r0
    6606:	20 25       	eor	r18, r0
    6608:	31 25       	eor	r19, r1
    660a:	4a 27       	eor	r20, r26
    660c:	58 f7       	brcc	.-42     	; 0x65e4 <sqrt+0x24>
    660e:	66 0f       	add	r22, r22
    6610:	77 1f       	adc	r23, r23
    6612:	88 1f       	adc	r24, r24
    6614:	20 f0       	brcs	.+8      	; 0x661e <sqrt+0x5e>
    6616:	26 17       	cp	r18, r22
    6618:	37 07       	cpc	r19, r23
    661a:	48 07       	cpc	r20, r24
    661c:	30 f4       	brcc	.+12     	; 0x662a <sqrt+0x6a>
    661e:	62 0b       	sbc	r22, r18
    6620:	73 0b       	sbc	r23, r19
    6622:	84 0b       	sbc	r24, r20
    6624:	20 0d       	add	r18, r0
    6626:	31 1d       	adc	r19, r1
    6628:	41 1d       	adc	r20, r1
    662a:	a0 95       	com	r26
    662c:	81 f7       	brne	.-32     	; 0x660e <sqrt+0x4e>
    662e:	b9 01       	movw	r22, r18
    6630:	84 2f       	mov	r24, r20
    6632:	91 58       	subi	r25, 0x81	; 129
    6634:	88 0f       	add	r24, r24
    6636:	96 95       	lsr	r25
    6638:	87 95       	ror	r24
    663a:	08 95       	ret

0000663c <square>:
    663c:	9b 01       	movw	r18, r22
    663e:	ac 01       	movw	r20, r24
    6640:	52 cf       	rjmp	.-348    	; 0x64e6 <__mulsf3>

00006642 <__fp_mpack>:
    6642:	9f 3f       	cpi	r25, 0xFF	; 255
    6644:	31 f0       	breq	.+12     	; 0x6652 <__fp_mpack_finite+0xc>

00006646 <__fp_mpack_finite>:
    6646:	91 50       	subi	r25, 0x01	; 1
    6648:	20 f4       	brcc	.+8      	; 0x6652 <__fp_mpack_finite+0xc>
    664a:	87 95       	ror	r24
    664c:	77 95       	ror	r23
    664e:	67 95       	ror	r22
    6650:	b7 95       	ror	r27
    6652:	88 0f       	add	r24, r24
    6654:	91 1d       	adc	r25, r1
    6656:	96 95       	lsr	r25
    6658:	87 95       	ror	r24
    665a:	97 f9       	bld	r25, 7
    665c:	08 95       	ret

0000665e <__fp_norm2>:
    665e:	91 50       	subi	r25, 0x01	; 1
    6660:	50 40       	sbci	r21, 0x00	; 0
    6662:	66 0f       	add	r22, r22
    6664:	77 1f       	adc	r23, r23
    6666:	88 1f       	adc	r24, r24
    6668:	d2 f7       	brpl	.-12     	; 0x665e <__fp_norm2>
    666a:	08 95       	ret

0000666c <__fp_powsodd>:
    666c:	9f 93       	push	r25
    666e:	8f 93       	push	r24
    6670:	7f 93       	push	r23
    6672:	6f 93       	push	r22
    6674:	ff 93       	push	r31
    6676:	ef 93       	push	r30
    6678:	9b 01       	movw	r18, r22
    667a:	ac 01       	movw	r20, r24
    667c:	34 df       	rcall	.-408    	; 0x64e6 <__mulsf3>
    667e:	ef 91       	pop	r30
    6680:	ff 91       	pop	r31
    6682:	d2 dd       	rcall	.-1116   	; 0x6228 <__fp_powser>
    6684:	2f 91       	pop	r18
    6686:	3f 91       	pop	r19
    6688:	4f 91       	pop	r20
    668a:	5f 91       	pop	r21
    668c:	2c cf       	rjmp	.-424    	; 0x64e6 <__mulsf3>

0000668e <__divmodhi4>:
    668e:	97 fb       	bst	r25, 7
    6690:	07 2e       	mov	r0, r23
    6692:	16 f4       	brtc	.+4      	; 0x6698 <__divmodhi4+0xa>
    6694:	00 94       	com	r0
    6696:	07 d0       	rcall	.+14     	; 0x66a6 <__divmodhi4_neg1>
    6698:	77 fd       	sbrc	r23, 7
    669a:	09 d0       	rcall	.+18     	; 0x66ae <__divmodhi4_neg2>
    669c:	0e 94 80 33 	call	0x6700	; 0x6700 <__udivmodhi4>
    66a0:	07 fc       	sbrc	r0, 7
    66a2:	05 d0       	rcall	.+10     	; 0x66ae <__divmodhi4_neg2>
    66a4:	3e f4       	brtc	.+14     	; 0x66b4 <__divmodhi4_exit>

000066a6 <__divmodhi4_neg1>:
    66a6:	90 95       	com	r25
    66a8:	81 95       	neg	r24
    66aa:	9f 4f       	sbci	r25, 0xFF	; 255
    66ac:	08 95       	ret

000066ae <__divmodhi4_neg2>:
    66ae:	70 95       	com	r23
    66b0:	61 95       	neg	r22
    66b2:	7f 4f       	sbci	r23, 0xFF	; 255

000066b4 <__divmodhi4_exit>:
    66b4:	08 95       	ret

000066b6 <__divmodsi4>:
    66b6:	05 2e       	mov	r0, r21
    66b8:	97 fb       	bst	r25, 7
    66ba:	1e f4       	brtc	.+6      	; 0x66c2 <__divmodsi4+0xc>
    66bc:	00 94       	com	r0
    66be:	0e 94 72 33 	call	0x66e4	; 0x66e4 <__negsi2>
    66c2:	57 fd       	sbrc	r21, 7
    66c4:	07 d0       	rcall	.+14     	; 0x66d4 <__divmodsi4_neg2>
    66c6:	0e 94 94 33 	call	0x6728	; 0x6728 <__udivmodsi4>
    66ca:	07 fc       	sbrc	r0, 7
    66cc:	03 d0       	rcall	.+6      	; 0x66d4 <__divmodsi4_neg2>
    66ce:	4e f4       	brtc	.+18     	; 0x66e2 <__divmodsi4_exit>
    66d0:	0c 94 72 33 	jmp	0x66e4	; 0x66e4 <__negsi2>

000066d4 <__divmodsi4_neg2>:
    66d4:	50 95       	com	r21
    66d6:	40 95       	com	r20
    66d8:	30 95       	com	r19
    66da:	21 95       	neg	r18
    66dc:	3f 4f       	sbci	r19, 0xFF	; 255
    66de:	4f 4f       	sbci	r20, 0xFF	; 255
    66e0:	5f 4f       	sbci	r21, 0xFF	; 255

000066e2 <__divmodsi4_exit>:
    66e2:	08 95       	ret

000066e4 <__negsi2>:
    66e4:	90 95       	com	r25
    66e6:	80 95       	com	r24
    66e8:	70 95       	com	r23
    66ea:	61 95       	neg	r22
    66ec:	7f 4f       	sbci	r23, 0xFF	; 255
    66ee:	8f 4f       	sbci	r24, 0xFF	; 255
    66f0:	9f 4f       	sbci	r25, 0xFF	; 255
    66f2:	08 95       	ret

000066f4 <__tablejump2__>:
    66f4:	ee 0f       	add	r30, r30
    66f6:	ff 1f       	adc	r31, r31

000066f8 <__tablejump__>:
    66f8:	05 90       	lpm	r0, Z+
    66fa:	f4 91       	lpm	r31, Z
    66fc:	e0 2d       	mov	r30, r0
    66fe:	09 94       	ijmp

00006700 <__udivmodhi4>:
    6700:	aa 1b       	sub	r26, r26
    6702:	bb 1b       	sub	r27, r27
    6704:	51 e1       	ldi	r21, 0x11	; 17
    6706:	07 c0       	rjmp	.+14     	; 0x6716 <__udivmodhi4_ep>

00006708 <__udivmodhi4_loop>:
    6708:	aa 1f       	adc	r26, r26
    670a:	bb 1f       	adc	r27, r27
    670c:	a6 17       	cp	r26, r22
    670e:	b7 07       	cpc	r27, r23
    6710:	10 f0       	brcs	.+4      	; 0x6716 <__udivmodhi4_ep>
    6712:	a6 1b       	sub	r26, r22
    6714:	b7 0b       	sbc	r27, r23

00006716 <__udivmodhi4_ep>:
    6716:	88 1f       	adc	r24, r24
    6718:	99 1f       	adc	r25, r25
    671a:	5a 95       	dec	r21
    671c:	a9 f7       	brne	.-22     	; 0x6708 <__udivmodhi4_loop>
    671e:	80 95       	com	r24
    6720:	90 95       	com	r25
    6722:	bc 01       	movw	r22, r24
    6724:	cd 01       	movw	r24, r26
    6726:	08 95       	ret

00006728 <__udivmodsi4>:
    6728:	a1 e2       	ldi	r26, 0x21	; 33
    672a:	1a 2e       	mov	r1, r26
    672c:	aa 1b       	sub	r26, r26
    672e:	bb 1b       	sub	r27, r27
    6730:	fd 01       	movw	r30, r26
    6732:	0d c0       	rjmp	.+26     	; 0x674e <__udivmodsi4_ep>

00006734 <__udivmodsi4_loop>:
    6734:	aa 1f       	adc	r26, r26
    6736:	bb 1f       	adc	r27, r27
    6738:	ee 1f       	adc	r30, r30
    673a:	ff 1f       	adc	r31, r31
    673c:	a2 17       	cp	r26, r18
    673e:	b3 07       	cpc	r27, r19
    6740:	e4 07       	cpc	r30, r20
    6742:	f5 07       	cpc	r31, r21
    6744:	20 f0       	brcs	.+8      	; 0x674e <__udivmodsi4_ep>
    6746:	a2 1b       	sub	r26, r18
    6748:	b3 0b       	sbc	r27, r19
    674a:	e4 0b       	sbc	r30, r20
    674c:	f5 0b       	sbc	r31, r21

0000674e <__udivmodsi4_ep>:
    674e:	66 1f       	adc	r22, r22
    6750:	77 1f       	adc	r23, r23
    6752:	88 1f       	adc	r24, r24
    6754:	99 1f       	adc	r25, r25
    6756:	1a 94       	dec	r1
    6758:	69 f7       	brne	.-38     	; 0x6734 <__udivmodsi4_loop>
    675a:	60 95       	com	r22
    675c:	70 95       	com	r23
    675e:	80 95       	com	r24
    6760:	90 95       	com	r25
    6762:	9b 01       	movw	r18, r22
    6764:	ac 01       	movw	r20, r24
    6766:	bd 01       	movw	r22, r26
    6768:	cf 01       	movw	r24, r30
    676a:	08 95       	ret

0000676c <malloc>:
    676c:	cf 93       	push	r28
    676e:	df 93       	push	r29
    6770:	82 30       	cpi	r24, 0x02	; 2
    6772:	91 05       	cpc	r25, r1
    6774:	10 f4       	brcc	.+4      	; 0x677a <malloc+0xe>
    6776:	82 e0       	ldi	r24, 0x02	; 2
    6778:	90 e0       	ldi	r25, 0x00	; 0
    677a:	e0 91 fa 00 	lds	r30, 0x00FA
    677e:	f0 91 fb 00 	lds	r31, 0x00FB
    6782:	20 e0       	ldi	r18, 0x00	; 0
    6784:	30 e0       	ldi	r19, 0x00	; 0
    6786:	a0 e0       	ldi	r26, 0x00	; 0
    6788:	b0 e0       	ldi	r27, 0x00	; 0
    678a:	30 97       	sbiw	r30, 0x00	; 0
    678c:	39 f1       	breq	.+78     	; 0x67dc <malloc+0x70>
    678e:	40 81       	ld	r20, Z
    6790:	51 81       	ldd	r21, Z+1	; 0x01
    6792:	48 17       	cp	r20, r24
    6794:	59 07       	cpc	r21, r25
    6796:	b8 f0       	brcs	.+46     	; 0x67c6 <malloc+0x5a>
    6798:	48 17       	cp	r20, r24
    679a:	59 07       	cpc	r21, r25
    679c:	71 f4       	brne	.+28     	; 0x67ba <malloc+0x4e>
    679e:	82 81       	ldd	r24, Z+2	; 0x02
    67a0:	93 81       	ldd	r25, Z+3	; 0x03
    67a2:	10 97       	sbiw	r26, 0x00	; 0
    67a4:	29 f0       	breq	.+10     	; 0x67b0 <malloc+0x44>
    67a6:	13 96       	adiw	r26, 0x03	; 3
    67a8:	9c 93       	st	X, r25
    67aa:	8e 93       	st	-X, r24
    67ac:	12 97       	sbiw	r26, 0x02	; 2
    67ae:	2c c0       	rjmp	.+88     	; 0x6808 <malloc+0x9c>
    67b0:	90 93 fb 00 	sts	0x00FB, r25
    67b4:	80 93 fa 00 	sts	0x00FA, r24
    67b8:	27 c0       	rjmp	.+78     	; 0x6808 <malloc+0x9c>
    67ba:	21 15       	cp	r18, r1
    67bc:	31 05       	cpc	r19, r1
    67be:	31 f0       	breq	.+12     	; 0x67cc <malloc+0x60>
    67c0:	42 17       	cp	r20, r18
    67c2:	53 07       	cpc	r21, r19
    67c4:	18 f0       	brcs	.+6      	; 0x67cc <malloc+0x60>
    67c6:	a9 01       	movw	r20, r18
    67c8:	db 01       	movw	r26, r22
    67ca:	01 c0       	rjmp	.+2      	; 0x67ce <malloc+0x62>
    67cc:	ef 01       	movw	r28, r30
    67ce:	9a 01       	movw	r18, r20
    67d0:	bd 01       	movw	r22, r26
    67d2:	df 01       	movw	r26, r30
    67d4:	02 80       	ldd	r0, Z+2	; 0x02
    67d6:	f3 81       	ldd	r31, Z+3	; 0x03
    67d8:	e0 2d       	mov	r30, r0
    67da:	d7 cf       	rjmp	.-82     	; 0x678a <malloc+0x1e>
    67dc:	21 15       	cp	r18, r1
    67de:	31 05       	cpc	r19, r1
    67e0:	f9 f0       	breq	.+62     	; 0x6820 <malloc+0xb4>
    67e2:	28 1b       	sub	r18, r24
    67e4:	39 0b       	sbc	r19, r25
    67e6:	24 30       	cpi	r18, 0x04	; 4
    67e8:	31 05       	cpc	r19, r1
    67ea:	80 f4       	brcc	.+32     	; 0x680c <malloc+0xa0>
    67ec:	8a 81       	ldd	r24, Y+2	; 0x02
    67ee:	9b 81       	ldd	r25, Y+3	; 0x03
    67f0:	61 15       	cp	r22, r1
    67f2:	71 05       	cpc	r23, r1
    67f4:	21 f0       	breq	.+8      	; 0x67fe <malloc+0x92>
    67f6:	fb 01       	movw	r30, r22
    67f8:	93 83       	std	Z+3, r25	; 0x03
    67fa:	82 83       	std	Z+2, r24	; 0x02
    67fc:	04 c0       	rjmp	.+8      	; 0x6806 <malloc+0x9a>
    67fe:	90 93 fb 00 	sts	0x00FB, r25
    6802:	80 93 fa 00 	sts	0x00FA, r24
    6806:	fe 01       	movw	r30, r28
    6808:	32 96       	adiw	r30, 0x02	; 2
    680a:	44 c0       	rjmp	.+136    	; 0x6894 <malloc+0x128>
    680c:	fe 01       	movw	r30, r28
    680e:	e2 0f       	add	r30, r18
    6810:	f3 1f       	adc	r31, r19
    6812:	81 93       	st	Z+, r24
    6814:	91 93       	st	Z+, r25
    6816:	22 50       	subi	r18, 0x02	; 2
    6818:	31 09       	sbc	r19, r1
    681a:	39 83       	std	Y+1, r19	; 0x01
    681c:	28 83       	st	Y, r18
    681e:	3a c0       	rjmp	.+116    	; 0x6894 <malloc+0x128>
    6820:	20 91 f8 00 	lds	r18, 0x00F8
    6824:	30 91 f9 00 	lds	r19, 0x00F9
    6828:	23 2b       	or	r18, r19
    682a:	41 f4       	brne	.+16     	; 0x683c <malloc+0xd0>
    682c:	20 91 62 00 	lds	r18, 0x0062
    6830:	30 91 63 00 	lds	r19, 0x0063
    6834:	30 93 f9 00 	sts	0x00F9, r19
    6838:	20 93 f8 00 	sts	0x00F8, r18
    683c:	20 91 60 00 	lds	r18, 0x0060
    6840:	30 91 61 00 	lds	r19, 0x0061
    6844:	21 15       	cp	r18, r1
    6846:	31 05       	cpc	r19, r1
    6848:	41 f4       	brne	.+16     	; 0x685a <malloc+0xee>
    684a:	2d b7       	in	r18, 0x3d	; 61
    684c:	3e b7       	in	r19, 0x3e	; 62
    684e:	40 91 64 00 	lds	r20, 0x0064
    6852:	50 91 65 00 	lds	r21, 0x0065
    6856:	24 1b       	sub	r18, r20
    6858:	35 0b       	sbc	r19, r21
    685a:	e0 91 f8 00 	lds	r30, 0x00F8
    685e:	f0 91 f9 00 	lds	r31, 0x00F9
    6862:	e2 17       	cp	r30, r18
    6864:	f3 07       	cpc	r31, r19
    6866:	a0 f4       	brcc	.+40     	; 0x6890 <malloc+0x124>
    6868:	2e 1b       	sub	r18, r30
    686a:	3f 0b       	sbc	r19, r31
    686c:	28 17       	cp	r18, r24
    686e:	39 07       	cpc	r19, r25
    6870:	78 f0       	brcs	.+30     	; 0x6890 <malloc+0x124>
    6872:	ac 01       	movw	r20, r24
    6874:	4e 5f       	subi	r20, 0xFE	; 254
    6876:	5f 4f       	sbci	r21, 0xFF	; 255
    6878:	24 17       	cp	r18, r20
    687a:	35 07       	cpc	r19, r21
    687c:	48 f0       	brcs	.+18     	; 0x6890 <malloc+0x124>
    687e:	4e 0f       	add	r20, r30
    6880:	5f 1f       	adc	r21, r31
    6882:	50 93 f9 00 	sts	0x00F9, r21
    6886:	40 93 f8 00 	sts	0x00F8, r20
    688a:	81 93       	st	Z+, r24
    688c:	91 93       	st	Z+, r25
    688e:	02 c0       	rjmp	.+4      	; 0x6894 <malloc+0x128>
    6890:	e0 e0       	ldi	r30, 0x00	; 0
    6892:	f0 e0       	ldi	r31, 0x00	; 0
    6894:	cf 01       	movw	r24, r30
    6896:	df 91       	pop	r29
    6898:	cf 91       	pop	r28
    689a:	08 95       	ret

0000689c <free>:
    689c:	cf 93       	push	r28
    689e:	df 93       	push	r29
    68a0:	00 97       	sbiw	r24, 0x00	; 0
    68a2:	09 f4       	brne	.+2      	; 0x68a6 <free+0xa>
    68a4:	87 c0       	rjmp	.+270    	; 0x69b4 <free+0x118>
    68a6:	fc 01       	movw	r30, r24
    68a8:	32 97       	sbiw	r30, 0x02	; 2
    68aa:	13 82       	std	Z+3, r1	; 0x03
    68ac:	12 82       	std	Z+2, r1	; 0x02
    68ae:	c0 91 fa 00 	lds	r28, 0x00FA
    68b2:	d0 91 fb 00 	lds	r29, 0x00FB
    68b6:	20 97       	sbiw	r28, 0x00	; 0
    68b8:	81 f4       	brne	.+32     	; 0x68da <free+0x3e>
    68ba:	20 81       	ld	r18, Z
    68bc:	31 81       	ldd	r19, Z+1	; 0x01
    68be:	28 0f       	add	r18, r24
    68c0:	39 1f       	adc	r19, r25
    68c2:	80 91 f8 00 	lds	r24, 0x00F8
    68c6:	90 91 f9 00 	lds	r25, 0x00F9
    68ca:	82 17       	cp	r24, r18
    68cc:	93 07       	cpc	r25, r19
    68ce:	79 f5       	brne	.+94     	; 0x692e <free+0x92>
    68d0:	f0 93 f9 00 	sts	0x00F9, r31
    68d4:	e0 93 f8 00 	sts	0x00F8, r30
    68d8:	6d c0       	rjmp	.+218    	; 0x69b4 <free+0x118>
    68da:	de 01       	movw	r26, r28
    68dc:	20 e0       	ldi	r18, 0x00	; 0
    68de:	30 e0       	ldi	r19, 0x00	; 0
    68e0:	ae 17       	cp	r26, r30
    68e2:	bf 07       	cpc	r27, r31
    68e4:	50 f4       	brcc	.+20     	; 0x68fa <free+0x5e>
    68e6:	12 96       	adiw	r26, 0x02	; 2
    68e8:	4d 91       	ld	r20, X+
    68ea:	5c 91       	ld	r21, X
    68ec:	13 97       	sbiw	r26, 0x03	; 3
    68ee:	9d 01       	movw	r18, r26
    68f0:	41 15       	cp	r20, r1
    68f2:	51 05       	cpc	r21, r1
    68f4:	09 f1       	breq	.+66     	; 0x6938 <free+0x9c>
    68f6:	da 01       	movw	r26, r20
    68f8:	f3 cf       	rjmp	.-26     	; 0x68e0 <free+0x44>
    68fa:	b3 83       	std	Z+3, r27	; 0x03
    68fc:	a2 83       	std	Z+2, r26	; 0x02
    68fe:	40 81       	ld	r20, Z
    6900:	51 81       	ldd	r21, Z+1	; 0x01
    6902:	84 0f       	add	r24, r20
    6904:	95 1f       	adc	r25, r21
    6906:	8a 17       	cp	r24, r26
    6908:	9b 07       	cpc	r25, r27
    690a:	71 f4       	brne	.+28     	; 0x6928 <free+0x8c>
    690c:	8d 91       	ld	r24, X+
    690e:	9c 91       	ld	r25, X
    6910:	11 97       	sbiw	r26, 0x01	; 1
    6912:	84 0f       	add	r24, r20
    6914:	95 1f       	adc	r25, r21
    6916:	02 96       	adiw	r24, 0x02	; 2
    6918:	91 83       	std	Z+1, r25	; 0x01
    691a:	80 83       	st	Z, r24
    691c:	12 96       	adiw	r26, 0x02	; 2
    691e:	8d 91       	ld	r24, X+
    6920:	9c 91       	ld	r25, X
    6922:	13 97       	sbiw	r26, 0x03	; 3
    6924:	93 83       	std	Z+3, r25	; 0x03
    6926:	82 83       	std	Z+2, r24	; 0x02
    6928:	21 15       	cp	r18, r1
    692a:	31 05       	cpc	r19, r1
    692c:	29 f4       	brne	.+10     	; 0x6938 <free+0x9c>
    692e:	f0 93 fb 00 	sts	0x00FB, r31
    6932:	e0 93 fa 00 	sts	0x00FA, r30
    6936:	3e c0       	rjmp	.+124    	; 0x69b4 <free+0x118>
    6938:	d9 01       	movw	r26, r18
    693a:	13 96       	adiw	r26, 0x03	; 3
    693c:	fc 93       	st	X, r31
    693e:	ee 93       	st	-X, r30
    6940:	12 97       	sbiw	r26, 0x02	; 2
    6942:	4d 91       	ld	r20, X+
    6944:	5d 91       	ld	r21, X+
    6946:	a4 0f       	add	r26, r20
    6948:	b5 1f       	adc	r27, r21
    694a:	ea 17       	cp	r30, r26
    694c:	fb 07       	cpc	r31, r27
    694e:	79 f4       	brne	.+30     	; 0x696e <free+0xd2>
    6950:	80 81       	ld	r24, Z
    6952:	91 81       	ldd	r25, Z+1	; 0x01
    6954:	84 0f       	add	r24, r20
    6956:	95 1f       	adc	r25, r21
    6958:	02 96       	adiw	r24, 0x02	; 2
    695a:	d9 01       	movw	r26, r18
    695c:	11 96       	adiw	r26, 0x01	; 1
    695e:	9c 93       	st	X, r25
    6960:	8e 93       	st	-X, r24
    6962:	82 81       	ldd	r24, Z+2	; 0x02
    6964:	93 81       	ldd	r25, Z+3	; 0x03
    6966:	13 96       	adiw	r26, 0x03	; 3
    6968:	9c 93       	st	X, r25
    696a:	8e 93       	st	-X, r24
    696c:	12 97       	sbiw	r26, 0x02	; 2
    696e:	e0 e0       	ldi	r30, 0x00	; 0
    6970:	f0 e0       	ldi	r31, 0x00	; 0
    6972:	8a 81       	ldd	r24, Y+2	; 0x02
    6974:	9b 81       	ldd	r25, Y+3	; 0x03
    6976:	00 97       	sbiw	r24, 0x00	; 0
    6978:	19 f0       	breq	.+6      	; 0x6980 <free+0xe4>
    697a:	fe 01       	movw	r30, r28
    697c:	ec 01       	movw	r28, r24
    697e:	f9 cf       	rjmp	.-14     	; 0x6972 <free+0xd6>
    6980:	ce 01       	movw	r24, r28
    6982:	02 96       	adiw	r24, 0x02	; 2
    6984:	28 81       	ld	r18, Y
    6986:	39 81       	ldd	r19, Y+1	; 0x01
    6988:	82 0f       	add	r24, r18
    698a:	93 1f       	adc	r25, r19
    698c:	20 91 f8 00 	lds	r18, 0x00F8
    6990:	30 91 f9 00 	lds	r19, 0x00F9
    6994:	28 17       	cp	r18, r24
    6996:	39 07       	cpc	r19, r25
    6998:	69 f4       	brne	.+26     	; 0x69b4 <free+0x118>
    699a:	30 97       	sbiw	r30, 0x00	; 0
    699c:	29 f4       	brne	.+10     	; 0x69a8 <free+0x10c>
    699e:	10 92 fb 00 	sts	0x00FB, r1
    69a2:	10 92 fa 00 	sts	0x00FA, r1
    69a6:	02 c0       	rjmp	.+4      	; 0x69ac <free+0x110>
    69a8:	13 82       	std	Z+3, r1	; 0x03
    69aa:	12 82       	std	Z+2, r1	; 0x02
    69ac:	d0 93 f9 00 	sts	0x00F9, r29
    69b0:	c0 93 f8 00 	sts	0x00F8, r28
    69b4:	df 91       	pop	r29
    69b6:	cf 91       	pop	r28
    69b8:	08 95       	ret

000069ba <do_rand>:
    69ba:	8f 92       	push	r8
    69bc:	9f 92       	push	r9
    69be:	af 92       	push	r10
    69c0:	bf 92       	push	r11
    69c2:	cf 92       	push	r12
    69c4:	df 92       	push	r13
    69c6:	ef 92       	push	r14
    69c8:	ff 92       	push	r15
    69ca:	cf 93       	push	r28
    69cc:	df 93       	push	r29
    69ce:	ec 01       	movw	r28, r24
    69d0:	68 81       	ld	r22, Y
    69d2:	79 81       	ldd	r23, Y+1	; 0x01
    69d4:	8a 81       	ldd	r24, Y+2	; 0x02
    69d6:	9b 81       	ldd	r25, Y+3	; 0x03
    69d8:	61 15       	cp	r22, r1
    69da:	71 05       	cpc	r23, r1
    69dc:	81 05       	cpc	r24, r1
    69de:	91 05       	cpc	r25, r1
    69e0:	21 f4       	brne	.+8      	; 0x69ea <do_rand+0x30>
    69e2:	64 e2       	ldi	r22, 0x24	; 36
    69e4:	79 ed       	ldi	r23, 0xD9	; 217
    69e6:	8b e5       	ldi	r24, 0x5B	; 91
    69e8:	97 e0       	ldi	r25, 0x07	; 7
    69ea:	2d e1       	ldi	r18, 0x1D	; 29
    69ec:	33 ef       	ldi	r19, 0xF3	; 243
    69ee:	41 e0       	ldi	r20, 0x01	; 1
    69f0:	50 e0       	ldi	r21, 0x00	; 0
    69f2:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__divmodsi4>
    69f6:	49 01       	movw	r8, r18
    69f8:	5a 01       	movw	r10, r20
    69fa:	9b 01       	movw	r18, r22
    69fc:	ac 01       	movw	r20, r24
    69fe:	a7 ea       	ldi	r26, 0xA7	; 167
    6a00:	b1 e4       	ldi	r27, 0x41	; 65
    6a02:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <__muluhisi3>
    6a06:	6b 01       	movw	r12, r22
    6a08:	7c 01       	movw	r14, r24
    6a0a:	ac ee       	ldi	r26, 0xEC	; 236
    6a0c:	b4 ef       	ldi	r27, 0xF4	; 244
    6a0e:	a5 01       	movw	r20, r10
    6a10:	94 01       	movw	r18, r8
    6a12:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <__mulohisi3>
    6a16:	c6 0e       	add	r12, r22
    6a18:	d7 1e       	adc	r13, r23
    6a1a:	e8 1e       	adc	r14, r24
    6a1c:	f9 1e       	adc	r15, r25
    6a1e:	f7 fe       	sbrs	r15, 7
    6a20:	06 c0       	rjmp	.+12     	; 0x6a2e <do_rand+0x74>
    6a22:	81 e0       	ldi	r24, 0x01	; 1
    6a24:	c8 1a       	sub	r12, r24
    6a26:	d1 08       	sbc	r13, r1
    6a28:	e1 08       	sbc	r14, r1
    6a2a:	80 e8       	ldi	r24, 0x80	; 128
    6a2c:	f8 0a       	sbc	r15, r24
    6a2e:	c8 82       	st	Y, r12
    6a30:	d9 82       	std	Y+1, r13	; 0x01
    6a32:	ea 82       	std	Y+2, r14	; 0x02
    6a34:	fb 82       	std	Y+3, r15	; 0x03
    6a36:	c6 01       	movw	r24, r12
    6a38:	9f 77       	andi	r25, 0x7F	; 127
    6a3a:	df 91       	pop	r29
    6a3c:	cf 91       	pop	r28
    6a3e:	ff 90       	pop	r15
    6a40:	ef 90       	pop	r14
    6a42:	df 90       	pop	r13
    6a44:	cf 90       	pop	r12
    6a46:	bf 90       	pop	r11
    6a48:	af 90       	pop	r10
    6a4a:	9f 90       	pop	r9
    6a4c:	8f 90       	pop	r8
    6a4e:	08 95       	ret

00006a50 <rand_r>:
    6a50:	0e 94 dd 34 	call	0x69ba	; 0x69ba <do_rand>
    6a54:	08 95       	ret

00006a56 <rand>:
    6a56:	86 e6       	ldi	r24, 0x66	; 102
    6a58:	90 e0       	ldi	r25, 0x00	; 0
    6a5a:	0e 94 dd 34 	call	0x69ba	; 0x69ba <do_rand>
    6a5e:	08 95       	ret

00006a60 <srand>:
    6a60:	a0 e0       	ldi	r26, 0x00	; 0
    6a62:	b0 e0       	ldi	r27, 0x00	; 0
    6a64:	80 93 66 00 	sts	0x0066, r24
    6a68:	90 93 67 00 	sts	0x0067, r25
    6a6c:	a0 93 68 00 	sts	0x0068, r26
    6a70:	b0 93 69 00 	sts	0x0069, r27
    6a74:	08 95       	ret

00006a76 <strtol>:
    6a76:	2f 92       	push	r2
    6a78:	3f 92       	push	r3
    6a7a:	5f 92       	push	r5
    6a7c:	6f 92       	push	r6
    6a7e:	7f 92       	push	r7
    6a80:	8f 92       	push	r8
    6a82:	9f 92       	push	r9
    6a84:	af 92       	push	r10
    6a86:	bf 92       	push	r11
    6a88:	cf 92       	push	r12
    6a8a:	df 92       	push	r13
    6a8c:	ef 92       	push	r14
    6a8e:	ff 92       	push	r15
    6a90:	0f 93       	push	r16
    6a92:	1f 93       	push	r17
    6a94:	cf 93       	push	r28
    6a96:	df 93       	push	r29
    6a98:	8b 01       	movw	r16, r22
    6a9a:	ea 01       	movw	r28, r20
    6a9c:	61 15       	cp	r22, r1
    6a9e:	71 05       	cpc	r23, r1
    6aa0:	21 f0       	breq	.+8      	; 0x6aaa <strtol+0x34>
    6aa2:	db 01       	movw	r26, r22
    6aa4:	8c 93       	st	X, r24
    6aa6:	11 96       	adiw	r26, 0x01	; 1
    6aa8:	9c 93       	st	X, r25
    6aaa:	20 97       	sbiw	r28, 0x00	; 0
    6aac:	39 f0       	breq	.+14     	; 0x6abc <strtol+0x46>
    6aae:	9e 01       	movw	r18, r28
    6ab0:	22 50       	subi	r18, 0x02	; 2
    6ab2:	31 09       	sbc	r19, r1
    6ab4:	23 32       	cpi	r18, 0x23	; 35
    6ab6:	31 05       	cpc	r19, r1
    6ab8:	08 f0       	brcs	.+2      	; 0x6abc <strtol+0x46>
    6aba:	fb c0       	rjmp	.+502    	; 0x6cb2 <strtol+0x23c>
    6abc:	7c 01       	movw	r14, r24
    6abe:	67 01       	movw	r12, r14
    6ac0:	bf ef       	ldi	r27, 0xFF	; 255
    6ac2:	cb 1a       	sub	r12, r27
    6ac4:	db 0a       	sbc	r13, r27
    6ac6:	56 01       	movw	r10, r12
    6ac8:	f7 01       	movw	r30, r14
    6aca:	60 80       	ld	r6, Z
    6acc:	86 2d       	mov	r24, r6
    6ace:	90 e0       	ldi	r25, 0x00	; 0
    6ad0:	0e 94 6f 36 	call	0x6cde	; 0x6cde <isspace>
    6ad4:	89 2b       	or	r24, r25
    6ad6:	11 f0       	breq	.+4      	; 0x6adc <strtol+0x66>
    6ad8:	76 01       	movw	r14, r12
    6ada:	f1 cf       	rjmp	.-30     	; 0x6abe <strtol+0x48>
    6adc:	fd e2       	ldi	r31, 0x2D	; 45
    6ade:	6f 12       	cpse	r6, r31
    6ae0:	0a c0       	rjmp	.+20     	; 0x6af6 <strtol+0x80>
    6ae2:	57 01       	movw	r10, r14
    6ae4:	82 e0       	ldi	r24, 0x02	; 2
    6ae6:	a8 0e       	add	r10, r24
    6ae8:	b1 1c       	adc	r11, r1
    6aea:	d7 01       	movw	r26, r14
    6aec:	11 96       	adiw	r26, 0x01	; 1
    6aee:	6c 90       	ld	r6, X
    6af0:	77 24       	eor	r7, r7
    6af2:	73 94       	inc	r7
    6af4:	0b c0       	rjmp	.+22     	; 0x6b0c <strtol+0x96>
    6af6:	bb e2       	ldi	r27, 0x2B	; 43
    6af8:	6b 12       	cpse	r6, r27
    6afa:	07 c0       	rjmp	.+14     	; 0x6b0a <strtol+0x94>
    6afc:	57 01       	movw	r10, r14
    6afe:	e2 e0       	ldi	r30, 0x02	; 2
    6b00:	ae 0e       	add	r10, r30
    6b02:	b1 1c       	adc	r11, r1
    6b04:	d7 01       	movw	r26, r14
    6b06:	11 96       	adiw	r26, 0x01	; 1
    6b08:	6c 90       	ld	r6, X
    6b0a:	71 2c       	mov	r7, r1
    6b0c:	ce 01       	movw	r24, r28
    6b0e:	8f 7e       	andi	r24, 0xEF	; 239
    6b10:	89 2b       	or	r24, r25
    6b12:	89 f4       	brne	.+34     	; 0x6b36 <strtol+0xc0>
    6b14:	b0 e3       	ldi	r27, 0x30	; 48
    6b16:	6b 12       	cpse	r6, r27
    6b18:	22 c0       	rjmp	.+68     	; 0x6b5e <strtol+0xe8>
    6b1a:	f5 01       	movw	r30, r10
    6b1c:	80 81       	ld	r24, Z
    6b1e:	8f 7d       	andi	r24, 0xDF	; 223
    6b20:	88 35       	cpi	r24, 0x58	; 88
    6b22:	41 f5       	brne	.+80     	; 0x6b74 <strtol+0xfe>
    6b24:	61 80       	ldd	r6, Z+1	; 0x01
    6b26:	f2 e0       	ldi	r31, 0x02	; 2
    6b28:	af 0e       	add	r10, r31
    6b2a:	b1 1c       	adc	r11, r1
    6b2c:	87 2d       	mov	r24, r7
    6b2e:	82 60       	ori	r24, 0x02	; 2
    6b30:	78 2e       	mov	r7, r24
    6b32:	c0 e1       	ldi	r28, 0x10	; 16
    6b34:	d0 e0       	ldi	r29, 0x00	; 0
    6b36:	c8 30       	cpi	r28, 0x08	; 8
    6b38:	d1 05       	cpc	r29, r1
    6b3a:	f1 f0       	breq	.+60     	; 0x6b78 <strtol+0x102>
    6b3c:	4c f4       	brge	.+18     	; 0x6b50 <strtol+0xda>
    6b3e:	c2 30       	cpi	r28, 0x02	; 2
    6b40:	d1 05       	cpc	r29, r1
    6b42:	11 f5       	brne	.+68     	; 0x6b88 <strtol+0x112>
    6b44:	c1 2c       	mov	r12, r1
    6b46:	d1 2c       	mov	r13, r1
    6b48:	e1 2c       	mov	r14, r1
    6b4a:	b0 e4       	ldi	r27, 0x40	; 64
    6b4c:	fb 2e       	mov	r15, r27
    6b4e:	2f c0       	rjmp	.+94     	; 0x6bae <strtol+0x138>
    6b50:	ca 30       	cpi	r28, 0x0A	; 10
    6b52:	d1 05       	cpc	r29, r1
    6b54:	31 f0       	breq	.+12     	; 0x6b62 <strtol+0xec>
    6b56:	c0 31       	cpi	r28, 0x10	; 16
    6b58:	d1 05       	cpc	r29, r1
    6b5a:	21 f1       	breq	.+72     	; 0x6ba4 <strtol+0x12e>
    6b5c:	15 c0       	rjmp	.+42     	; 0x6b88 <strtol+0x112>
    6b5e:	20 97       	sbiw	r28, 0x00	; 0
    6b60:	51 f7       	brne	.-44     	; 0x6b36 <strtol+0xc0>
    6b62:	ca e0       	ldi	r28, 0x0A	; 10
    6b64:	d0 e0       	ldi	r29, 0x00	; 0
    6b66:	ac ec       	ldi	r26, 0xCC	; 204
    6b68:	ca 2e       	mov	r12, r26
    6b6a:	dc 2c       	mov	r13, r12
    6b6c:	ec 2c       	mov	r14, r12
    6b6e:	ac e0       	ldi	r26, 0x0C	; 12
    6b70:	fa 2e       	mov	r15, r26
    6b72:	1d c0       	rjmp	.+58     	; 0x6bae <strtol+0x138>
    6b74:	20 97       	sbiw	r28, 0x00	; 0
    6b76:	f9 f6       	brne	.-66     	; 0x6b36 <strtol+0xc0>
    6b78:	c8 e0       	ldi	r28, 0x08	; 8
    6b7a:	d0 e0       	ldi	r29, 0x00	; 0
    6b7c:	c1 2c       	mov	r12, r1
    6b7e:	d1 2c       	mov	r13, r1
    6b80:	e1 2c       	mov	r14, r1
    6b82:	f0 e1       	ldi	r31, 0x10	; 16
    6b84:	ff 2e       	mov	r15, r31
    6b86:	13 c0       	rjmp	.+38     	; 0x6bae <strtol+0x138>
    6b88:	60 e0       	ldi	r22, 0x00	; 0
    6b8a:	70 e0       	ldi	r23, 0x00	; 0
    6b8c:	80 e0       	ldi	r24, 0x00	; 0
    6b8e:	90 e8       	ldi	r25, 0x80	; 128
    6b90:	9e 01       	movw	r18, r28
    6b92:	44 27       	eor	r20, r20
    6b94:	37 fd       	sbrc	r19, 7
    6b96:	40 95       	com	r20
    6b98:	54 2f       	mov	r21, r20
    6b9a:	0e 94 94 33 	call	0x6728	; 0x6728 <__udivmodsi4>
    6b9e:	69 01       	movw	r12, r18
    6ba0:	7a 01       	movw	r14, r20
    6ba2:	05 c0       	rjmp	.+10     	; 0x6bae <strtol+0x138>
    6ba4:	c1 2c       	mov	r12, r1
    6ba6:	d1 2c       	mov	r13, r1
    6ba8:	e1 2c       	mov	r14, r1
    6baa:	e8 e0       	ldi	r30, 0x08	; 8
    6bac:	fe 2e       	mov	r15, r30
    6bae:	f5 01       	movw	r30, r10
    6bb0:	60 e0       	ldi	r22, 0x00	; 0
    6bb2:	20 e0       	ldi	r18, 0x00	; 0
    6bb4:	30 e0       	ldi	r19, 0x00	; 0
    6bb6:	a9 01       	movw	r20, r18
    6bb8:	4e 01       	movw	r8, r28
    6bba:	aa 24       	eor	r10, r10
    6bbc:	97 fc       	sbrc	r9, 7
    6bbe:	a0 94       	com	r10
    6bc0:	ba 2c       	mov	r11, r10
    6bc2:	1f 01       	movw	r2, r30
    6bc4:	70 ed       	ldi	r23, 0xD0	; 208
    6bc6:	57 2e       	mov	r5, r23
    6bc8:	56 0c       	add	r5, r6
    6bca:	a9 e0       	ldi	r26, 0x09	; 9
    6bcc:	a5 15       	cp	r26, r5
    6bce:	70 f4       	brcc	.+28     	; 0x6bec <strtol+0x176>
    6bd0:	8f eb       	ldi	r24, 0xBF	; 191
    6bd2:	86 0d       	add	r24, r6
    6bd4:	8a 31       	cpi	r24, 0x1A	; 26
    6bd6:	18 f4       	brcc	.+6      	; 0x6bde <strtol+0x168>
    6bd8:	99 ec       	ldi	r25, 0xC9	; 201
    6bda:	59 2e       	mov	r5, r25
    6bdc:	06 c0       	rjmp	.+12     	; 0x6bea <strtol+0x174>
    6bde:	8f e9       	ldi	r24, 0x9F	; 159
    6be0:	86 0d       	add	r24, r6
    6be2:	8a 31       	cpi	r24, 0x1A	; 26
    6be4:	30 f5       	brcc	.+76     	; 0x6c32 <strtol+0x1bc>
    6be6:	89 ea       	ldi	r24, 0xA9	; 169
    6be8:	58 2e       	mov	r5, r24
    6bea:	56 0c       	add	r5, r6
    6bec:	85 2d       	mov	r24, r5
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	8c 17       	cp	r24, r28
    6bf2:	9d 07       	cpc	r25, r29
    6bf4:	f4 f4       	brge	.+60     	; 0x6c32 <strtol+0x1bc>
    6bf6:	67 fd       	sbrc	r22, 7
    6bf8:	18 c0       	rjmp	.+48     	; 0x6c2a <strtol+0x1b4>
    6bfa:	c2 16       	cp	r12, r18
    6bfc:	d3 06       	cpc	r13, r19
    6bfe:	e4 06       	cpc	r14, r20
    6c00:	f5 06       	cpc	r15, r21
    6c02:	80 f0       	brcs	.+32     	; 0x6c24 <strtol+0x1ae>
    6c04:	c5 01       	movw	r24, r10
    6c06:	b4 01       	movw	r22, r8
    6c08:	0e 94 4c 39 	call	0x7298	; 0x7298 <__mulsi3>
    6c0c:	9b 01       	movw	r18, r22
    6c0e:	ac 01       	movw	r20, r24
    6c10:	25 0d       	add	r18, r5
    6c12:	31 1d       	adc	r19, r1
    6c14:	41 1d       	adc	r20, r1
    6c16:	51 1d       	adc	r21, r1
    6c18:	21 30       	cpi	r18, 0x01	; 1
    6c1a:	31 05       	cpc	r19, r1
    6c1c:	41 05       	cpc	r20, r1
    6c1e:	b0 e8       	ldi	r27, 0x80	; 128
    6c20:	5b 07       	cpc	r21, r27
    6c22:	10 f0       	brcs	.+4      	; 0x6c28 <strtol+0x1b2>
    6c24:	6f ef       	ldi	r22, 0xFF	; 255
    6c26:	01 c0       	rjmp	.+2      	; 0x6c2a <strtol+0x1b4>
    6c28:	61 e0       	ldi	r22, 0x01	; 1
    6c2a:	31 96       	adiw	r30, 0x01	; 1
    6c2c:	d1 01       	movw	r26, r2
    6c2e:	6c 90       	ld	r6, X
    6c30:	c8 cf       	rjmp	.-112    	; 0x6bc2 <strtol+0x14c>
    6c32:	87 2d       	mov	r24, r7
    6c34:	81 70       	andi	r24, 0x01	; 1
    6c36:	01 15       	cp	r16, r1
    6c38:	11 05       	cpc	r17, r1
    6c3a:	71 f0       	breq	.+28     	; 0x6c58 <strtol+0x1e2>
    6c3c:	66 23       	and	r22, r22
    6c3e:	29 f0       	breq	.+10     	; 0x6c4a <strtol+0x1d4>
    6c40:	31 97       	sbiw	r30, 0x01	; 1
    6c42:	d8 01       	movw	r26, r16
    6c44:	ed 93       	st	X+, r30
    6c46:	fc 93       	st	X, r31
    6c48:	07 c0       	rjmp	.+14     	; 0x6c58 <strtol+0x1e2>
    6c4a:	71 fe       	sbrs	r7, 1
    6c4c:	19 c0       	rjmp	.+50     	; 0x6c80 <strtol+0x20a>
    6c4e:	32 97       	sbiw	r30, 0x02	; 2
    6c50:	d8 01       	movw	r26, r16
    6c52:	ed 93       	st	X+, r30
    6c54:	fc 93       	st	X, r31
    6c56:	14 c0       	rjmp	.+40     	; 0x6c80 <strtol+0x20a>
    6c58:	67 ff       	sbrs	r22, 7
    6c5a:	12 c0       	rjmp	.+36     	; 0x6c80 <strtol+0x20a>
    6c5c:	88 23       	and	r24, r24
    6c5e:	29 f0       	breq	.+10     	; 0x6c6a <strtol+0x1f4>
    6c60:	20 e0       	ldi	r18, 0x00	; 0
    6c62:	30 e0       	ldi	r19, 0x00	; 0
    6c64:	40 e0       	ldi	r20, 0x00	; 0
    6c66:	50 e8       	ldi	r21, 0x80	; 128
    6c68:	04 c0       	rjmp	.+8      	; 0x6c72 <strtol+0x1fc>
    6c6a:	2f ef       	ldi	r18, 0xFF	; 255
    6c6c:	3f ef       	ldi	r19, 0xFF	; 255
    6c6e:	4f ef       	ldi	r20, 0xFF	; 255
    6c70:	5f e7       	ldi	r21, 0x7F	; 127
    6c72:	82 e2       	ldi	r24, 0x22	; 34
    6c74:	90 e0       	ldi	r25, 0x00	; 0
    6c76:	90 93 fd 00 	sts	0x00FD, r25
    6c7a:	80 93 fc 00 	sts	0x00FC, r24
    6c7e:	16 c0       	rjmp	.+44     	; 0x6cac <strtol+0x236>
    6c80:	88 23       	and	r24, r24
    6c82:	41 f0       	breq	.+16     	; 0x6c94 <strtol+0x21e>
    6c84:	50 95       	com	r21
    6c86:	40 95       	com	r20
    6c88:	30 95       	com	r19
    6c8a:	21 95       	neg	r18
    6c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c8e:	4f 4f       	sbci	r20, 0xFF	; 255
    6c90:	5f 4f       	sbci	r21, 0xFF	; 255
    6c92:	0c c0       	rjmp	.+24     	; 0x6cac <strtol+0x236>
    6c94:	57 ff       	sbrs	r21, 7
    6c96:	0a c0       	rjmp	.+20     	; 0x6cac <strtol+0x236>
    6c98:	82 e2       	ldi	r24, 0x22	; 34
    6c9a:	90 e0       	ldi	r25, 0x00	; 0
    6c9c:	90 93 fd 00 	sts	0x00FD, r25
    6ca0:	80 93 fc 00 	sts	0x00FC, r24
    6ca4:	2f ef       	ldi	r18, 0xFF	; 255
    6ca6:	3f ef       	ldi	r19, 0xFF	; 255
    6ca8:	4f ef       	ldi	r20, 0xFF	; 255
    6caa:	5f e7       	ldi	r21, 0x7F	; 127
    6cac:	b9 01       	movw	r22, r18
    6cae:	ca 01       	movw	r24, r20
    6cb0:	04 c0       	rjmp	.+8      	; 0x6cba <strtol+0x244>
    6cb2:	60 e0       	ldi	r22, 0x00	; 0
    6cb4:	70 e0       	ldi	r23, 0x00	; 0
    6cb6:	80 e0       	ldi	r24, 0x00	; 0
    6cb8:	90 e0       	ldi	r25, 0x00	; 0
    6cba:	df 91       	pop	r29
    6cbc:	cf 91       	pop	r28
    6cbe:	1f 91       	pop	r17
    6cc0:	0f 91       	pop	r16
    6cc2:	ff 90       	pop	r15
    6cc4:	ef 90       	pop	r14
    6cc6:	df 90       	pop	r13
    6cc8:	cf 90       	pop	r12
    6cca:	bf 90       	pop	r11
    6ccc:	af 90       	pop	r10
    6cce:	9f 90       	pop	r9
    6cd0:	8f 90       	pop	r8
    6cd2:	7f 90       	pop	r7
    6cd4:	6f 90       	pop	r6
    6cd6:	5f 90       	pop	r5
    6cd8:	3f 90       	pop	r3
    6cda:	2f 90       	pop	r2
    6cdc:	08 95       	ret

00006cde <isspace>:
    6cde:	91 11       	cpse	r25, r1
    6ce0:	15 c2       	rjmp	.+1066   	; 0x710c <__ctype_isfalse>
    6ce2:	80 32       	cpi	r24, 0x20	; 32
    6ce4:	19 f0       	breq	.+6      	; 0x6cec <isspace+0xe>
    6ce6:	89 50       	subi	r24, 0x09	; 9
    6ce8:	85 50       	subi	r24, 0x05	; 5
    6cea:	d0 f7       	brcc	.-12     	; 0x6ce0 <isspace+0x2>
    6cec:	08 95       	ret

00006cee <strrev>:
    6cee:	dc 01       	movw	r26, r24
    6cf0:	fc 01       	movw	r30, r24
    6cf2:	67 2f       	mov	r22, r23
    6cf4:	71 91       	ld	r23, Z+
    6cf6:	77 23       	and	r23, r23
    6cf8:	e1 f7       	brne	.-8      	; 0x6cf2 <strrev+0x4>
    6cfa:	32 97       	sbiw	r30, 0x02	; 2
    6cfc:	04 c0       	rjmp	.+8      	; 0x6d06 <strrev+0x18>
    6cfe:	7c 91       	ld	r23, X
    6d00:	6d 93       	st	X+, r22
    6d02:	70 83       	st	Z, r23
    6d04:	62 91       	ld	r22, -Z
    6d06:	ae 17       	cp	r26, r30
    6d08:	bf 07       	cpc	r27, r31
    6d0a:	c8 f3       	brcs	.-14     	; 0x6cfe <strrev+0x10>
    6d0c:	08 95       	ret

00006d0e <sprintf>:
    6d0e:	ae e0       	ldi	r26, 0x0E	; 14
    6d10:	b0 e0       	ldi	r27, 0x00	; 0
    6d12:	ed e8       	ldi	r30, 0x8D	; 141
    6d14:	f6 e3       	ldi	r31, 0x36	; 54
    6d16:	0c 94 7d 39 	jmp	0x72fa	; 0x72fa <__prologue_saves__+0x1c>
    6d1a:	0d 89       	ldd	r16, Y+21	; 0x15
    6d1c:	1e 89       	ldd	r17, Y+22	; 0x16
    6d1e:	86 e0       	ldi	r24, 0x06	; 6
    6d20:	8c 83       	std	Y+4, r24	; 0x04
    6d22:	1a 83       	std	Y+2, r17	; 0x02
    6d24:	09 83       	std	Y+1, r16	; 0x01
    6d26:	8f ef       	ldi	r24, 0xFF	; 255
    6d28:	9f e7       	ldi	r25, 0x7F	; 127
    6d2a:	9e 83       	std	Y+6, r25	; 0x06
    6d2c:	8d 83       	std	Y+5, r24	; 0x05
    6d2e:	ae 01       	movw	r20, r28
    6d30:	47 5e       	subi	r20, 0xE7	; 231
    6d32:	5f 4f       	sbci	r21, 0xFF	; 255
    6d34:	6f 89       	ldd	r22, Y+23	; 0x17
    6d36:	78 8d       	ldd	r23, Y+24	; 0x18
    6d38:	ce 01       	movw	r24, r28
    6d3a:	01 96       	adiw	r24, 0x01	; 1
    6d3c:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <vfprintf>
    6d40:	ef 81       	ldd	r30, Y+7	; 0x07
    6d42:	f8 85       	ldd	r31, Y+8	; 0x08
    6d44:	e0 0f       	add	r30, r16
    6d46:	f1 1f       	adc	r31, r17
    6d48:	10 82       	st	Z, r1
    6d4a:	2e 96       	adiw	r28, 0x0e	; 14
    6d4c:	e4 e0       	ldi	r30, 0x04	; 4
    6d4e:	0c 94 99 39 	jmp	0x7332	; 0x7332 <__epilogue_restores__+0x1c>

00006d52 <vfprintf>:
    6d52:	ac e0       	ldi	r26, 0x0C	; 12
    6d54:	b0 e0       	ldi	r27, 0x00	; 0
    6d56:	ef ea       	ldi	r30, 0xAF	; 175
    6d58:	f6 e3       	ldi	r31, 0x36	; 54
    6d5a:	0c 94 6f 39 	jmp	0x72de	; 0x72de <__prologue_saves__>
    6d5e:	7c 01       	movw	r14, r24
    6d60:	6b 01       	movw	r12, r22
    6d62:	8a 01       	movw	r16, r20
    6d64:	fc 01       	movw	r30, r24
    6d66:	17 82       	std	Z+7, r1	; 0x07
    6d68:	16 82       	std	Z+6, r1	; 0x06
    6d6a:	83 81       	ldd	r24, Z+3	; 0x03
    6d6c:	81 ff       	sbrs	r24, 1
    6d6e:	bd c1       	rjmp	.+890    	; 0x70ea <vfprintf+0x398>
    6d70:	ce 01       	movw	r24, r28
    6d72:	01 96       	adiw	r24, 0x01	; 1
    6d74:	4c 01       	movw	r8, r24
    6d76:	f7 01       	movw	r30, r14
    6d78:	93 81       	ldd	r25, Z+3	; 0x03
    6d7a:	f6 01       	movw	r30, r12
    6d7c:	93 fd       	sbrc	r25, 3
    6d7e:	85 91       	lpm	r24, Z+
    6d80:	93 ff       	sbrs	r25, 3
    6d82:	81 91       	ld	r24, Z+
    6d84:	6f 01       	movw	r12, r30
    6d86:	88 23       	and	r24, r24
    6d88:	09 f4       	brne	.+2      	; 0x6d8c <vfprintf+0x3a>
    6d8a:	ab c1       	rjmp	.+854    	; 0x70e2 <vfprintf+0x390>
    6d8c:	85 32       	cpi	r24, 0x25	; 37
    6d8e:	39 f4       	brne	.+14     	; 0x6d9e <vfprintf+0x4c>
    6d90:	93 fd       	sbrc	r25, 3
    6d92:	85 91       	lpm	r24, Z+
    6d94:	93 ff       	sbrs	r25, 3
    6d96:	81 91       	ld	r24, Z+
    6d98:	6f 01       	movw	r12, r30
    6d9a:	85 32       	cpi	r24, 0x25	; 37
    6d9c:	29 f4       	brne	.+10     	; 0x6da8 <vfprintf+0x56>
    6d9e:	b7 01       	movw	r22, r14
    6da0:	90 e0       	ldi	r25, 0x00	; 0
    6da2:	0e 94 9f 38 	call	0x713e	; 0x713e <fputc>
    6da6:	e7 cf       	rjmp	.-50     	; 0x6d76 <vfprintf+0x24>
    6da8:	51 2c       	mov	r5, r1
    6daa:	31 2c       	mov	r3, r1
    6dac:	20 e0       	ldi	r18, 0x00	; 0
    6dae:	20 32       	cpi	r18, 0x20	; 32
    6db0:	a0 f4       	brcc	.+40     	; 0x6dda <vfprintf+0x88>
    6db2:	8b 32       	cpi	r24, 0x2B	; 43
    6db4:	69 f0       	breq	.+26     	; 0x6dd0 <vfprintf+0x7e>
    6db6:	30 f4       	brcc	.+12     	; 0x6dc4 <vfprintf+0x72>
    6db8:	80 32       	cpi	r24, 0x20	; 32
    6dba:	59 f0       	breq	.+22     	; 0x6dd2 <vfprintf+0x80>
    6dbc:	83 32       	cpi	r24, 0x23	; 35
    6dbe:	69 f4       	brne	.+26     	; 0x6dda <vfprintf+0x88>
    6dc0:	20 61       	ori	r18, 0x10	; 16
    6dc2:	2c c0       	rjmp	.+88     	; 0x6e1c <vfprintf+0xca>
    6dc4:	8d 32       	cpi	r24, 0x2D	; 45
    6dc6:	39 f0       	breq	.+14     	; 0x6dd6 <vfprintf+0x84>
    6dc8:	80 33       	cpi	r24, 0x30	; 48
    6dca:	39 f4       	brne	.+14     	; 0x6dda <vfprintf+0x88>
    6dcc:	21 60       	ori	r18, 0x01	; 1
    6dce:	26 c0       	rjmp	.+76     	; 0x6e1c <vfprintf+0xca>
    6dd0:	22 60       	ori	r18, 0x02	; 2
    6dd2:	24 60       	ori	r18, 0x04	; 4
    6dd4:	23 c0       	rjmp	.+70     	; 0x6e1c <vfprintf+0xca>
    6dd6:	28 60       	ori	r18, 0x08	; 8
    6dd8:	21 c0       	rjmp	.+66     	; 0x6e1c <vfprintf+0xca>
    6dda:	27 fd       	sbrc	r18, 7
    6ddc:	27 c0       	rjmp	.+78     	; 0x6e2c <vfprintf+0xda>
    6dde:	30 ed       	ldi	r19, 0xD0	; 208
    6de0:	38 0f       	add	r19, r24
    6de2:	3a 30       	cpi	r19, 0x0A	; 10
    6de4:	78 f4       	brcc	.+30     	; 0x6e04 <vfprintf+0xb2>
    6de6:	26 ff       	sbrs	r18, 6
    6de8:	06 c0       	rjmp	.+12     	; 0x6df6 <vfprintf+0xa4>
    6dea:	fa e0       	ldi	r31, 0x0A	; 10
    6dec:	5f 9e       	mul	r5, r31
    6dee:	30 0d       	add	r19, r0
    6df0:	11 24       	eor	r1, r1
    6df2:	53 2e       	mov	r5, r19
    6df4:	13 c0       	rjmp	.+38     	; 0x6e1c <vfprintf+0xca>
    6df6:	8a e0       	ldi	r24, 0x0A	; 10
    6df8:	38 9e       	mul	r3, r24
    6dfa:	30 0d       	add	r19, r0
    6dfc:	11 24       	eor	r1, r1
    6dfe:	33 2e       	mov	r3, r19
    6e00:	20 62       	ori	r18, 0x20	; 32
    6e02:	0c c0       	rjmp	.+24     	; 0x6e1c <vfprintf+0xca>
    6e04:	8e 32       	cpi	r24, 0x2E	; 46
    6e06:	21 f4       	brne	.+8      	; 0x6e10 <vfprintf+0xbe>
    6e08:	26 fd       	sbrc	r18, 6
    6e0a:	6b c1       	rjmp	.+726    	; 0x70e2 <vfprintf+0x390>
    6e0c:	20 64       	ori	r18, 0x40	; 64
    6e0e:	06 c0       	rjmp	.+12     	; 0x6e1c <vfprintf+0xca>
    6e10:	8c 36       	cpi	r24, 0x6C	; 108
    6e12:	11 f4       	brne	.+4      	; 0x6e18 <vfprintf+0xc6>
    6e14:	20 68       	ori	r18, 0x80	; 128
    6e16:	02 c0       	rjmp	.+4      	; 0x6e1c <vfprintf+0xca>
    6e18:	88 36       	cpi	r24, 0x68	; 104
    6e1a:	41 f4       	brne	.+16     	; 0x6e2c <vfprintf+0xda>
    6e1c:	f6 01       	movw	r30, r12
    6e1e:	93 fd       	sbrc	r25, 3
    6e20:	85 91       	lpm	r24, Z+
    6e22:	93 ff       	sbrs	r25, 3
    6e24:	81 91       	ld	r24, Z+
    6e26:	6f 01       	movw	r12, r30
    6e28:	81 11       	cpse	r24, r1
    6e2a:	c1 cf       	rjmp	.-126    	; 0x6dae <vfprintf+0x5c>
    6e2c:	98 2f       	mov	r25, r24
    6e2e:	9f 7d       	andi	r25, 0xDF	; 223
    6e30:	95 54       	subi	r25, 0x45	; 69
    6e32:	93 30       	cpi	r25, 0x03	; 3
    6e34:	28 f4       	brcc	.+10     	; 0x6e40 <vfprintf+0xee>
    6e36:	0c 5f       	subi	r16, 0xFC	; 252
    6e38:	1f 4f       	sbci	r17, 0xFF	; 255
    6e3a:	ff e3       	ldi	r31, 0x3F	; 63
    6e3c:	f9 83       	std	Y+1, r31	; 0x01
    6e3e:	0d c0       	rjmp	.+26     	; 0x6e5a <vfprintf+0x108>
    6e40:	83 36       	cpi	r24, 0x63	; 99
    6e42:	31 f0       	breq	.+12     	; 0x6e50 <vfprintf+0xfe>
    6e44:	83 37       	cpi	r24, 0x73	; 115
    6e46:	71 f0       	breq	.+28     	; 0x6e64 <vfprintf+0x112>
    6e48:	83 35       	cpi	r24, 0x53	; 83
    6e4a:	09 f0       	breq	.+2      	; 0x6e4e <vfprintf+0xfc>
    6e4c:	5b c0       	rjmp	.+182    	; 0x6f04 <vfprintf+0x1b2>
    6e4e:	22 c0       	rjmp	.+68     	; 0x6e94 <vfprintf+0x142>
    6e50:	f8 01       	movw	r30, r16
    6e52:	80 81       	ld	r24, Z
    6e54:	89 83       	std	Y+1, r24	; 0x01
    6e56:	0e 5f       	subi	r16, 0xFE	; 254
    6e58:	1f 4f       	sbci	r17, 0xFF	; 255
    6e5a:	44 24       	eor	r4, r4
    6e5c:	43 94       	inc	r4
    6e5e:	51 2c       	mov	r5, r1
    6e60:	54 01       	movw	r10, r8
    6e62:	15 c0       	rjmp	.+42     	; 0x6e8e <vfprintf+0x13c>
    6e64:	38 01       	movw	r6, r16
    6e66:	f2 e0       	ldi	r31, 0x02	; 2
    6e68:	6f 0e       	add	r6, r31
    6e6a:	71 1c       	adc	r7, r1
    6e6c:	f8 01       	movw	r30, r16
    6e6e:	a0 80       	ld	r10, Z
    6e70:	b1 80       	ldd	r11, Z+1	; 0x01
    6e72:	26 ff       	sbrs	r18, 6
    6e74:	03 c0       	rjmp	.+6      	; 0x6e7c <vfprintf+0x12a>
    6e76:	65 2d       	mov	r22, r5
    6e78:	70 e0       	ldi	r23, 0x00	; 0
    6e7a:	02 c0       	rjmp	.+4      	; 0x6e80 <vfprintf+0x12e>
    6e7c:	6f ef       	ldi	r22, 0xFF	; 255
    6e7e:	7f ef       	ldi	r23, 0xFF	; 255
    6e80:	c5 01       	movw	r24, r10
    6e82:	2c 87       	std	Y+12, r18	; 0x0c
    6e84:	0e 94 94 38 	call	0x7128	; 0x7128 <strnlen>
    6e88:	2c 01       	movw	r4, r24
    6e8a:	83 01       	movw	r16, r6
    6e8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    6e8e:	2f 77       	andi	r18, 0x7F	; 127
    6e90:	22 2e       	mov	r2, r18
    6e92:	17 c0       	rjmp	.+46     	; 0x6ec2 <vfprintf+0x170>
    6e94:	38 01       	movw	r6, r16
    6e96:	f2 e0       	ldi	r31, 0x02	; 2
    6e98:	6f 0e       	add	r6, r31
    6e9a:	71 1c       	adc	r7, r1
    6e9c:	f8 01       	movw	r30, r16
    6e9e:	a0 80       	ld	r10, Z
    6ea0:	b1 80       	ldd	r11, Z+1	; 0x01
    6ea2:	26 ff       	sbrs	r18, 6
    6ea4:	03 c0       	rjmp	.+6      	; 0x6eac <vfprintf+0x15a>
    6ea6:	65 2d       	mov	r22, r5
    6ea8:	70 e0       	ldi	r23, 0x00	; 0
    6eaa:	02 c0       	rjmp	.+4      	; 0x6eb0 <vfprintf+0x15e>
    6eac:	6f ef       	ldi	r22, 0xFF	; 255
    6eae:	7f ef       	ldi	r23, 0xFF	; 255
    6eb0:	c5 01       	movw	r24, r10
    6eb2:	2c 87       	std	Y+12, r18	; 0x0c
    6eb4:	0e 94 89 38 	call	0x7112	; 0x7112 <strnlen_P>
    6eb8:	2c 01       	movw	r4, r24
    6eba:	2c 85       	ldd	r18, Y+12	; 0x0c
    6ebc:	20 68       	ori	r18, 0x80	; 128
    6ebe:	22 2e       	mov	r2, r18
    6ec0:	83 01       	movw	r16, r6
    6ec2:	23 fc       	sbrc	r2, 3
    6ec4:	1b c0       	rjmp	.+54     	; 0x6efc <vfprintf+0x1aa>
    6ec6:	83 2d       	mov	r24, r3
    6ec8:	90 e0       	ldi	r25, 0x00	; 0
    6eca:	48 16       	cp	r4, r24
    6ecc:	59 06       	cpc	r5, r25
    6ece:	b0 f4       	brcc	.+44     	; 0x6efc <vfprintf+0x1aa>
    6ed0:	b7 01       	movw	r22, r14
    6ed2:	80 e2       	ldi	r24, 0x20	; 32
    6ed4:	90 e0       	ldi	r25, 0x00	; 0
    6ed6:	0e 94 9f 38 	call	0x713e	; 0x713e <fputc>
    6eda:	3a 94       	dec	r3
    6edc:	f4 cf       	rjmp	.-24     	; 0x6ec6 <vfprintf+0x174>
    6ede:	f5 01       	movw	r30, r10
    6ee0:	27 fc       	sbrc	r2, 7
    6ee2:	85 91       	lpm	r24, Z+
    6ee4:	27 fe       	sbrs	r2, 7
    6ee6:	81 91       	ld	r24, Z+
    6ee8:	5f 01       	movw	r10, r30
    6eea:	b7 01       	movw	r22, r14
    6eec:	90 e0       	ldi	r25, 0x00	; 0
    6eee:	0e 94 9f 38 	call	0x713e	; 0x713e <fputc>
    6ef2:	31 10       	cpse	r3, r1
    6ef4:	3a 94       	dec	r3
    6ef6:	f1 e0       	ldi	r31, 0x01	; 1
    6ef8:	4f 1a       	sub	r4, r31
    6efa:	51 08       	sbc	r5, r1
    6efc:	41 14       	cp	r4, r1
    6efe:	51 04       	cpc	r5, r1
    6f00:	71 f7       	brne	.-36     	; 0x6ede <vfprintf+0x18c>
    6f02:	e5 c0       	rjmp	.+458    	; 0x70ce <vfprintf+0x37c>
    6f04:	84 36       	cpi	r24, 0x64	; 100
    6f06:	11 f0       	breq	.+4      	; 0x6f0c <vfprintf+0x1ba>
    6f08:	89 36       	cpi	r24, 0x69	; 105
    6f0a:	39 f5       	brne	.+78     	; 0x6f5a <vfprintf+0x208>
    6f0c:	f8 01       	movw	r30, r16
    6f0e:	27 ff       	sbrs	r18, 7
    6f10:	07 c0       	rjmp	.+14     	; 0x6f20 <vfprintf+0x1ce>
    6f12:	60 81       	ld	r22, Z
    6f14:	71 81       	ldd	r23, Z+1	; 0x01
    6f16:	82 81       	ldd	r24, Z+2	; 0x02
    6f18:	93 81       	ldd	r25, Z+3	; 0x03
    6f1a:	0c 5f       	subi	r16, 0xFC	; 252
    6f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    6f1e:	08 c0       	rjmp	.+16     	; 0x6f30 <vfprintf+0x1de>
    6f20:	60 81       	ld	r22, Z
    6f22:	71 81       	ldd	r23, Z+1	; 0x01
    6f24:	88 27       	eor	r24, r24
    6f26:	77 fd       	sbrc	r23, 7
    6f28:	80 95       	com	r24
    6f2a:	98 2f       	mov	r25, r24
    6f2c:	0e 5f       	subi	r16, 0xFE	; 254
    6f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f30:	2f 76       	andi	r18, 0x6F	; 111
    6f32:	b2 2e       	mov	r11, r18
    6f34:	97 ff       	sbrs	r25, 7
    6f36:	09 c0       	rjmp	.+18     	; 0x6f4a <vfprintf+0x1f8>
    6f38:	90 95       	com	r25
    6f3a:	80 95       	com	r24
    6f3c:	70 95       	com	r23
    6f3e:	61 95       	neg	r22
    6f40:	7f 4f       	sbci	r23, 0xFF	; 255
    6f42:	8f 4f       	sbci	r24, 0xFF	; 255
    6f44:	9f 4f       	sbci	r25, 0xFF	; 255
    6f46:	20 68       	ori	r18, 0x80	; 128
    6f48:	b2 2e       	mov	r11, r18
    6f4a:	2a e0       	ldi	r18, 0x0A	; 10
    6f4c:	30 e0       	ldi	r19, 0x00	; 0
    6f4e:	a4 01       	movw	r20, r8
    6f50:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__ultoa_invert>
    6f54:	a8 2e       	mov	r10, r24
    6f56:	a8 18       	sub	r10, r8
    6f58:	44 c0       	rjmp	.+136    	; 0x6fe2 <vfprintf+0x290>
    6f5a:	85 37       	cpi	r24, 0x75	; 117
    6f5c:	29 f4       	brne	.+10     	; 0x6f68 <vfprintf+0x216>
    6f5e:	2f 7e       	andi	r18, 0xEF	; 239
    6f60:	b2 2e       	mov	r11, r18
    6f62:	2a e0       	ldi	r18, 0x0A	; 10
    6f64:	30 e0       	ldi	r19, 0x00	; 0
    6f66:	25 c0       	rjmp	.+74     	; 0x6fb2 <vfprintf+0x260>
    6f68:	f2 2f       	mov	r31, r18
    6f6a:	f9 7f       	andi	r31, 0xF9	; 249
    6f6c:	bf 2e       	mov	r11, r31
    6f6e:	8f 36       	cpi	r24, 0x6F	; 111
    6f70:	c1 f0       	breq	.+48     	; 0x6fa2 <vfprintf+0x250>
    6f72:	18 f4       	brcc	.+6      	; 0x6f7a <vfprintf+0x228>
    6f74:	88 35       	cpi	r24, 0x58	; 88
    6f76:	79 f0       	breq	.+30     	; 0x6f96 <vfprintf+0x244>
    6f78:	b4 c0       	rjmp	.+360    	; 0x70e2 <vfprintf+0x390>
    6f7a:	80 37       	cpi	r24, 0x70	; 112
    6f7c:	19 f0       	breq	.+6      	; 0x6f84 <vfprintf+0x232>
    6f7e:	88 37       	cpi	r24, 0x78	; 120
    6f80:	21 f0       	breq	.+8      	; 0x6f8a <vfprintf+0x238>
    6f82:	af c0       	rjmp	.+350    	; 0x70e2 <vfprintf+0x390>
    6f84:	2f 2f       	mov	r18, r31
    6f86:	20 61       	ori	r18, 0x10	; 16
    6f88:	b2 2e       	mov	r11, r18
    6f8a:	b4 fe       	sbrs	r11, 4
    6f8c:	0d c0       	rjmp	.+26     	; 0x6fa8 <vfprintf+0x256>
    6f8e:	8b 2d       	mov	r24, r11
    6f90:	84 60       	ori	r24, 0x04	; 4
    6f92:	b8 2e       	mov	r11, r24
    6f94:	09 c0       	rjmp	.+18     	; 0x6fa8 <vfprintf+0x256>
    6f96:	24 ff       	sbrs	r18, 4
    6f98:	0a c0       	rjmp	.+20     	; 0x6fae <vfprintf+0x25c>
    6f9a:	9f 2f       	mov	r25, r31
    6f9c:	96 60       	ori	r25, 0x06	; 6
    6f9e:	b9 2e       	mov	r11, r25
    6fa0:	06 c0       	rjmp	.+12     	; 0x6fae <vfprintf+0x25c>
    6fa2:	28 e0       	ldi	r18, 0x08	; 8
    6fa4:	30 e0       	ldi	r19, 0x00	; 0
    6fa6:	05 c0       	rjmp	.+10     	; 0x6fb2 <vfprintf+0x260>
    6fa8:	20 e1       	ldi	r18, 0x10	; 16
    6faa:	30 e0       	ldi	r19, 0x00	; 0
    6fac:	02 c0       	rjmp	.+4      	; 0x6fb2 <vfprintf+0x260>
    6fae:	20 e1       	ldi	r18, 0x10	; 16
    6fb0:	32 e0       	ldi	r19, 0x02	; 2
    6fb2:	f8 01       	movw	r30, r16
    6fb4:	b7 fe       	sbrs	r11, 7
    6fb6:	07 c0       	rjmp	.+14     	; 0x6fc6 <vfprintf+0x274>
    6fb8:	60 81       	ld	r22, Z
    6fba:	71 81       	ldd	r23, Z+1	; 0x01
    6fbc:	82 81       	ldd	r24, Z+2	; 0x02
    6fbe:	93 81       	ldd	r25, Z+3	; 0x03
    6fc0:	0c 5f       	subi	r16, 0xFC	; 252
    6fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    6fc4:	06 c0       	rjmp	.+12     	; 0x6fd2 <vfprintf+0x280>
    6fc6:	60 81       	ld	r22, Z
    6fc8:	71 81       	ldd	r23, Z+1	; 0x01
    6fca:	80 e0       	ldi	r24, 0x00	; 0
    6fcc:	90 e0       	ldi	r25, 0x00	; 0
    6fce:	0e 5f       	subi	r16, 0xFE	; 254
    6fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    6fd2:	a4 01       	movw	r20, r8
    6fd4:	0e 94 d1 38 	call	0x71a2	; 0x71a2 <__ultoa_invert>
    6fd8:	a8 2e       	mov	r10, r24
    6fda:	a8 18       	sub	r10, r8
    6fdc:	fb 2d       	mov	r31, r11
    6fde:	ff 77       	andi	r31, 0x7F	; 127
    6fe0:	bf 2e       	mov	r11, r31
    6fe2:	b6 fe       	sbrs	r11, 6
    6fe4:	0b c0       	rjmp	.+22     	; 0x6ffc <vfprintf+0x2aa>
    6fe6:	2b 2d       	mov	r18, r11
    6fe8:	2e 7f       	andi	r18, 0xFE	; 254
    6fea:	a5 14       	cp	r10, r5
    6fec:	50 f4       	brcc	.+20     	; 0x7002 <vfprintf+0x2b0>
    6fee:	b4 fe       	sbrs	r11, 4
    6ff0:	0a c0       	rjmp	.+20     	; 0x7006 <vfprintf+0x2b4>
    6ff2:	b2 fc       	sbrc	r11, 2
    6ff4:	08 c0       	rjmp	.+16     	; 0x7006 <vfprintf+0x2b4>
    6ff6:	2b 2d       	mov	r18, r11
    6ff8:	2e 7e       	andi	r18, 0xEE	; 238
    6ffa:	05 c0       	rjmp	.+10     	; 0x7006 <vfprintf+0x2b4>
    6ffc:	7a 2c       	mov	r7, r10
    6ffe:	2b 2d       	mov	r18, r11
    7000:	03 c0       	rjmp	.+6      	; 0x7008 <vfprintf+0x2b6>
    7002:	7a 2c       	mov	r7, r10
    7004:	01 c0       	rjmp	.+2      	; 0x7008 <vfprintf+0x2b6>
    7006:	75 2c       	mov	r7, r5
    7008:	24 ff       	sbrs	r18, 4
    700a:	0d c0       	rjmp	.+26     	; 0x7026 <vfprintf+0x2d4>
    700c:	fe 01       	movw	r30, r28
    700e:	ea 0d       	add	r30, r10
    7010:	f1 1d       	adc	r31, r1
    7012:	80 81       	ld	r24, Z
    7014:	80 33       	cpi	r24, 0x30	; 48
    7016:	11 f4       	brne	.+4      	; 0x701c <vfprintf+0x2ca>
    7018:	29 7e       	andi	r18, 0xE9	; 233
    701a:	09 c0       	rjmp	.+18     	; 0x702e <vfprintf+0x2dc>
    701c:	22 ff       	sbrs	r18, 2
    701e:	06 c0       	rjmp	.+12     	; 0x702c <vfprintf+0x2da>
    7020:	73 94       	inc	r7
    7022:	73 94       	inc	r7
    7024:	04 c0       	rjmp	.+8      	; 0x702e <vfprintf+0x2dc>
    7026:	82 2f       	mov	r24, r18
    7028:	86 78       	andi	r24, 0x86	; 134
    702a:	09 f0       	breq	.+2      	; 0x702e <vfprintf+0x2dc>
    702c:	73 94       	inc	r7
    702e:	23 fd       	sbrc	r18, 3
    7030:	13 c0       	rjmp	.+38     	; 0x7058 <vfprintf+0x306>
    7032:	20 ff       	sbrs	r18, 0
    7034:	06 c0       	rjmp	.+12     	; 0x7042 <vfprintf+0x2f0>
    7036:	5a 2c       	mov	r5, r10
    7038:	73 14       	cp	r7, r3
    703a:	18 f4       	brcc	.+6      	; 0x7042 <vfprintf+0x2f0>
    703c:	53 0c       	add	r5, r3
    703e:	57 18       	sub	r5, r7
    7040:	73 2c       	mov	r7, r3
    7042:	73 14       	cp	r7, r3
    7044:	68 f4       	brcc	.+26     	; 0x7060 <vfprintf+0x30e>
    7046:	b7 01       	movw	r22, r14
    7048:	80 e2       	ldi	r24, 0x20	; 32
    704a:	90 e0       	ldi	r25, 0x00	; 0
    704c:	2c 87       	std	Y+12, r18	; 0x0c
    704e:	0e 94 9f 38 	call	0x713e	; 0x713e <fputc>
    7052:	73 94       	inc	r7
    7054:	2c 85       	ldd	r18, Y+12	; 0x0c
    7056:	f5 cf       	rjmp	.-22     	; 0x7042 <vfprintf+0x2f0>
    7058:	73 14       	cp	r7, r3
    705a:	10 f4       	brcc	.+4      	; 0x7060 <vfprintf+0x30e>
    705c:	37 18       	sub	r3, r7
    705e:	01 c0       	rjmp	.+2      	; 0x7062 <vfprintf+0x310>
    7060:	31 2c       	mov	r3, r1
    7062:	24 ff       	sbrs	r18, 4
    7064:	12 c0       	rjmp	.+36     	; 0x708a <vfprintf+0x338>
    7066:	b7 01       	movw	r22, r14
    7068:	80 e3       	ldi	r24, 0x30	; 48
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	2c 87       	std	Y+12, r18	; 0x0c
    706e:	0e 94 9f 38 	call	0x713e	; 0x713e <fputc>
    7072:	2c 85       	ldd	r18, Y+12	; 0x0c
    7074:	22 ff       	sbrs	r18, 2
    7076:	17 c0       	rjmp	.+46     	; 0x70a6 <vfprintf+0x354>
    7078:	21 ff       	sbrs	r18, 1
    707a:	03 c0       	rjmp	.+6      	; 0x7082 <vfprintf+0x330>
    707c:	88 e5       	ldi	r24, 0x58	; 88
    707e:	90 e0       	ldi	r25, 0x00	; 0
    7080:	02 c0       	rjmp	.+4      	; 0x7086 <vfprintf+0x334>
    7082:	88 e7       	ldi	r24, 0x78	; 120
    7084:	90 e0       	ldi	r25, 0x00	; 0
    7086:	b7 01       	movw	r22, r14
    7088:	0c c0       	rjmp	.+24     	; 0x70a2 <vfprintf+0x350>
    708a:	82 2f       	mov	r24, r18
    708c:	86 78       	andi	r24, 0x86	; 134
    708e:	59 f0       	breq	.+22     	; 0x70a6 <vfprintf+0x354>
    7090:	21 fd       	sbrc	r18, 1
    7092:	02 c0       	rjmp	.+4      	; 0x7098 <vfprintf+0x346>
    7094:	80 e2       	ldi	r24, 0x20	; 32
    7096:	01 c0       	rjmp	.+2      	; 0x709a <vfprintf+0x348>
    7098:	8b e2       	ldi	r24, 0x2B	; 43
    709a:	27 fd       	sbrc	r18, 7
    709c:	8d e2       	ldi	r24, 0x2D	; 45
    709e:	b7 01       	movw	r22, r14
    70a0:	90 e0       	ldi	r25, 0x00	; 0
    70a2:	0e 94 9f 38 	call	0x713e	; 0x713e <fputc>
    70a6:	a5 14       	cp	r10, r5
    70a8:	38 f4       	brcc	.+14     	; 0x70b8 <vfprintf+0x366>
    70aa:	b7 01       	movw	r22, r14
    70ac:	80 e3       	ldi	r24, 0x30	; 48
    70ae:	90 e0       	ldi	r25, 0x00	; 0
    70b0:	0e 94 9f 38 	call	0x713e	; 0x713e <fputc>
    70b4:	5a 94       	dec	r5
    70b6:	f7 cf       	rjmp	.-18     	; 0x70a6 <vfprintf+0x354>
    70b8:	aa 94       	dec	r10
    70ba:	f4 01       	movw	r30, r8
    70bc:	ea 0d       	add	r30, r10
    70be:	f1 1d       	adc	r31, r1
    70c0:	80 81       	ld	r24, Z
    70c2:	b7 01       	movw	r22, r14
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	0e 94 9f 38 	call	0x713e	; 0x713e <fputc>
    70ca:	a1 10       	cpse	r10, r1
    70cc:	f5 cf       	rjmp	.-22     	; 0x70b8 <vfprintf+0x366>
    70ce:	33 20       	and	r3, r3
    70d0:	09 f4       	brne	.+2      	; 0x70d4 <vfprintf+0x382>
    70d2:	51 ce       	rjmp	.-862    	; 0x6d76 <vfprintf+0x24>
    70d4:	b7 01       	movw	r22, r14
    70d6:	80 e2       	ldi	r24, 0x20	; 32
    70d8:	90 e0       	ldi	r25, 0x00	; 0
    70da:	0e 94 9f 38 	call	0x713e	; 0x713e <fputc>
    70de:	3a 94       	dec	r3
    70e0:	f6 cf       	rjmp	.-20     	; 0x70ce <vfprintf+0x37c>
    70e2:	f7 01       	movw	r30, r14
    70e4:	86 81       	ldd	r24, Z+6	; 0x06
    70e6:	97 81       	ldd	r25, Z+7	; 0x07
    70e8:	02 c0       	rjmp	.+4      	; 0x70ee <vfprintf+0x39c>
    70ea:	8f ef       	ldi	r24, 0xFF	; 255
    70ec:	9f ef       	ldi	r25, 0xFF	; 255
    70ee:	2c 96       	adiw	r28, 0x0c	; 12
    70f0:	e2 e1       	ldi	r30, 0x12	; 18
    70f2:	0c 94 8b 39 	jmp	0x7316	; 0x7316 <__epilogue_restores__>

000070f6 <__eerd_word_m32>:
    70f6:	a8 e1       	ldi	r26, 0x18	; 24
    70f8:	b0 e0       	ldi	r27, 0x00	; 0
    70fa:	42 e0       	ldi	r20, 0x02	; 2
    70fc:	50 e0       	ldi	r21, 0x00	; 0
    70fe:	0c 94 31 39 	jmp	0x7262	; 0x7262 <__eerd_blraw_m32>

00007102 <__eewr_word_m32>:
    7102:	0e 94 3f 39 	call	0x727e	; 0x727e <__eewr_byte_m32>
    7106:	27 2f       	mov	r18, r23
    7108:	0c 94 40 39 	jmp	0x7280	; 0x7280 <__eewr_r18_m32>

0000710c <__ctype_isfalse>:
    710c:	99 27       	eor	r25, r25
    710e:	88 27       	eor	r24, r24

00007110 <__ctype_istrue>:
    7110:	08 95       	ret

00007112 <strnlen_P>:
    7112:	fc 01       	movw	r30, r24
    7114:	05 90       	lpm	r0, Z+
    7116:	61 50       	subi	r22, 0x01	; 1
    7118:	70 40       	sbci	r23, 0x00	; 0
    711a:	01 10       	cpse	r0, r1
    711c:	d8 f7       	brcc	.-10     	; 0x7114 <strnlen_P+0x2>
    711e:	80 95       	com	r24
    7120:	90 95       	com	r25
    7122:	8e 0f       	add	r24, r30
    7124:	9f 1f       	adc	r25, r31
    7126:	08 95       	ret

00007128 <strnlen>:
    7128:	fc 01       	movw	r30, r24
    712a:	61 50       	subi	r22, 0x01	; 1
    712c:	70 40       	sbci	r23, 0x00	; 0
    712e:	01 90       	ld	r0, Z+
    7130:	01 10       	cpse	r0, r1
    7132:	d8 f7       	brcc	.-10     	; 0x712a <strnlen+0x2>
    7134:	80 95       	com	r24
    7136:	90 95       	com	r25
    7138:	8e 0f       	add	r24, r30
    713a:	9f 1f       	adc	r25, r31
    713c:	08 95       	ret

0000713e <fputc>:
    713e:	0f 93       	push	r16
    7140:	1f 93       	push	r17
    7142:	cf 93       	push	r28
    7144:	df 93       	push	r29
    7146:	18 2f       	mov	r17, r24
    7148:	09 2f       	mov	r16, r25
    714a:	eb 01       	movw	r28, r22
    714c:	8b 81       	ldd	r24, Y+3	; 0x03
    714e:	81 fd       	sbrc	r24, 1
    7150:	03 c0       	rjmp	.+6      	; 0x7158 <fputc+0x1a>
    7152:	8f ef       	ldi	r24, 0xFF	; 255
    7154:	9f ef       	ldi	r25, 0xFF	; 255
    7156:	20 c0       	rjmp	.+64     	; 0x7198 <fputc+0x5a>
    7158:	82 ff       	sbrs	r24, 2
    715a:	10 c0       	rjmp	.+32     	; 0x717c <fputc+0x3e>
    715c:	4e 81       	ldd	r20, Y+6	; 0x06
    715e:	5f 81       	ldd	r21, Y+7	; 0x07
    7160:	2c 81       	ldd	r18, Y+4	; 0x04
    7162:	3d 81       	ldd	r19, Y+5	; 0x05
    7164:	42 17       	cp	r20, r18
    7166:	53 07       	cpc	r21, r19
    7168:	7c f4       	brge	.+30     	; 0x7188 <fputc+0x4a>
    716a:	e8 81       	ld	r30, Y
    716c:	f9 81       	ldd	r31, Y+1	; 0x01
    716e:	9f 01       	movw	r18, r30
    7170:	2f 5f       	subi	r18, 0xFF	; 255
    7172:	3f 4f       	sbci	r19, 0xFF	; 255
    7174:	39 83       	std	Y+1, r19	; 0x01
    7176:	28 83       	st	Y, r18
    7178:	10 83       	st	Z, r17
    717a:	06 c0       	rjmp	.+12     	; 0x7188 <fputc+0x4a>
    717c:	e8 85       	ldd	r30, Y+8	; 0x08
    717e:	f9 85       	ldd	r31, Y+9	; 0x09
    7180:	81 2f       	mov	r24, r17
    7182:	09 95       	icall
    7184:	89 2b       	or	r24, r25
    7186:	29 f7       	brne	.-54     	; 0x7152 <fputc+0x14>
    7188:	2e 81       	ldd	r18, Y+6	; 0x06
    718a:	3f 81       	ldd	r19, Y+7	; 0x07
    718c:	2f 5f       	subi	r18, 0xFF	; 255
    718e:	3f 4f       	sbci	r19, 0xFF	; 255
    7190:	3f 83       	std	Y+7, r19	; 0x07
    7192:	2e 83       	std	Y+6, r18	; 0x06
    7194:	81 2f       	mov	r24, r17
    7196:	90 2f       	mov	r25, r16
    7198:	df 91       	pop	r29
    719a:	cf 91       	pop	r28
    719c:	1f 91       	pop	r17
    719e:	0f 91       	pop	r16
    71a0:	08 95       	ret

000071a2 <__ultoa_invert>:
    71a2:	fa 01       	movw	r30, r20
    71a4:	aa 27       	eor	r26, r26
    71a6:	28 30       	cpi	r18, 0x08	; 8
    71a8:	51 f1       	breq	.+84     	; 0x71fe <__ultoa_invert+0x5c>
    71aa:	20 31       	cpi	r18, 0x10	; 16
    71ac:	81 f1       	breq	.+96     	; 0x720e <__ultoa_invert+0x6c>
    71ae:	e8 94       	clt
    71b0:	6f 93       	push	r22
    71b2:	6e 7f       	andi	r22, 0xFE	; 254
    71b4:	6e 5f       	subi	r22, 0xFE	; 254
    71b6:	7f 4f       	sbci	r23, 0xFF	; 255
    71b8:	8f 4f       	sbci	r24, 0xFF	; 255
    71ba:	9f 4f       	sbci	r25, 0xFF	; 255
    71bc:	af 4f       	sbci	r26, 0xFF	; 255
    71be:	b1 e0       	ldi	r27, 0x01	; 1
    71c0:	3e d0       	rcall	.+124    	; 0x723e <__ultoa_invert+0x9c>
    71c2:	b4 e0       	ldi	r27, 0x04	; 4
    71c4:	3c d0       	rcall	.+120    	; 0x723e <__ultoa_invert+0x9c>
    71c6:	67 0f       	add	r22, r23
    71c8:	78 1f       	adc	r23, r24
    71ca:	89 1f       	adc	r24, r25
    71cc:	9a 1f       	adc	r25, r26
    71ce:	a1 1d       	adc	r26, r1
    71d0:	68 0f       	add	r22, r24
    71d2:	79 1f       	adc	r23, r25
    71d4:	8a 1f       	adc	r24, r26
    71d6:	91 1d       	adc	r25, r1
    71d8:	a1 1d       	adc	r26, r1
    71da:	6a 0f       	add	r22, r26
    71dc:	71 1d       	adc	r23, r1
    71de:	81 1d       	adc	r24, r1
    71e0:	91 1d       	adc	r25, r1
    71e2:	a1 1d       	adc	r26, r1
    71e4:	20 d0       	rcall	.+64     	; 0x7226 <__ultoa_invert+0x84>
    71e6:	09 f4       	brne	.+2      	; 0x71ea <__ultoa_invert+0x48>
    71e8:	68 94       	set
    71ea:	3f 91       	pop	r19
    71ec:	2a e0       	ldi	r18, 0x0A	; 10
    71ee:	26 9f       	mul	r18, r22
    71f0:	11 24       	eor	r1, r1
    71f2:	30 19       	sub	r19, r0
    71f4:	30 5d       	subi	r19, 0xD0	; 208
    71f6:	31 93       	st	Z+, r19
    71f8:	de f6       	brtc	.-74     	; 0x71b0 <__ultoa_invert+0xe>
    71fa:	cf 01       	movw	r24, r30
    71fc:	08 95       	ret
    71fe:	46 2f       	mov	r20, r22
    7200:	47 70       	andi	r20, 0x07	; 7
    7202:	40 5d       	subi	r20, 0xD0	; 208
    7204:	41 93       	st	Z+, r20
    7206:	b3 e0       	ldi	r27, 0x03	; 3
    7208:	0f d0       	rcall	.+30     	; 0x7228 <__ultoa_invert+0x86>
    720a:	c9 f7       	brne	.-14     	; 0x71fe <__ultoa_invert+0x5c>
    720c:	f6 cf       	rjmp	.-20     	; 0x71fa <__ultoa_invert+0x58>
    720e:	46 2f       	mov	r20, r22
    7210:	4f 70       	andi	r20, 0x0F	; 15
    7212:	40 5d       	subi	r20, 0xD0	; 208
    7214:	4a 33       	cpi	r20, 0x3A	; 58
    7216:	18 f0       	brcs	.+6      	; 0x721e <__ultoa_invert+0x7c>
    7218:	49 5d       	subi	r20, 0xD9	; 217
    721a:	31 fd       	sbrc	r19, 1
    721c:	40 52       	subi	r20, 0x20	; 32
    721e:	41 93       	st	Z+, r20
    7220:	02 d0       	rcall	.+4      	; 0x7226 <__ultoa_invert+0x84>
    7222:	a9 f7       	brne	.-22     	; 0x720e <__ultoa_invert+0x6c>
    7224:	ea cf       	rjmp	.-44     	; 0x71fa <__ultoa_invert+0x58>
    7226:	b4 e0       	ldi	r27, 0x04	; 4
    7228:	a6 95       	lsr	r26
    722a:	97 95       	ror	r25
    722c:	87 95       	ror	r24
    722e:	77 95       	ror	r23
    7230:	67 95       	ror	r22
    7232:	ba 95       	dec	r27
    7234:	c9 f7       	brne	.-14     	; 0x7228 <__ultoa_invert+0x86>
    7236:	00 97       	sbiw	r24, 0x00	; 0
    7238:	61 05       	cpc	r22, r1
    723a:	71 05       	cpc	r23, r1
    723c:	08 95       	ret
    723e:	9b 01       	movw	r18, r22
    7240:	ac 01       	movw	r20, r24
    7242:	0a 2e       	mov	r0, r26
    7244:	06 94       	lsr	r0
    7246:	57 95       	ror	r21
    7248:	47 95       	ror	r20
    724a:	37 95       	ror	r19
    724c:	27 95       	ror	r18
    724e:	ba 95       	dec	r27
    7250:	c9 f7       	brne	.-14     	; 0x7244 <__ultoa_invert+0xa2>
    7252:	62 0f       	add	r22, r18
    7254:	73 1f       	adc	r23, r19
    7256:	84 1f       	adc	r24, r20
    7258:	95 1f       	adc	r25, r21
    725a:	a0 1d       	adc	r26, r0
    725c:	08 95       	ret

0000725e <__eerd_block_m32>:
    725e:	dc 01       	movw	r26, r24
    7260:	cb 01       	movw	r24, r22

00007262 <__eerd_blraw_m32>:
    7262:	fc 01       	movw	r30, r24
    7264:	e1 99       	sbic	0x1c, 1	; 28
    7266:	fe cf       	rjmp	.-4      	; 0x7264 <__eerd_blraw_m32+0x2>
    7268:	06 c0       	rjmp	.+12     	; 0x7276 <__eerd_blraw_m32+0x14>
    726a:	ff bb       	out	0x1f, r31	; 31
    726c:	ee bb       	out	0x1e, r30	; 30
    726e:	e0 9a       	sbi	0x1c, 0	; 28
    7270:	31 96       	adiw	r30, 0x01	; 1
    7272:	0d b2       	in	r0, 0x1d	; 29
    7274:	0d 92       	st	X+, r0
    7276:	41 50       	subi	r20, 0x01	; 1
    7278:	50 40       	sbci	r21, 0x00	; 0
    727a:	b8 f7       	brcc	.-18     	; 0x726a <__eerd_blraw_m32+0x8>
    727c:	08 95       	ret

0000727e <__eewr_byte_m32>:
    727e:	26 2f       	mov	r18, r22

00007280 <__eewr_r18_m32>:
    7280:	e1 99       	sbic	0x1c, 1	; 28
    7282:	fe cf       	rjmp	.-4      	; 0x7280 <__eewr_r18_m32>
    7284:	9f bb       	out	0x1f, r25	; 31
    7286:	8e bb       	out	0x1e, r24	; 30
    7288:	2d bb       	out	0x1d, r18	; 29
    728a:	0f b6       	in	r0, 0x3f	; 63
    728c:	f8 94       	cli
    728e:	e2 9a       	sbi	0x1c, 2	; 28
    7290:	e1 9a       	sbi	0x1c, 1	; 28
    7292:	0f be       	out	0x3f, r0	; 63
    7294:	01 96       	adiw	r24, 0x01	; 1
    7296:	08 95       	ret

00007298 <__mulsi3>:
    7298:	db 01       	movw	r26, r22
    729a:	8f 93       	push	r24
    729c:	9f 93       	push	r25
    729e:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <__muluhisi3>
    72a2:	bf 91       	pop	r27
    72a4:	af 91       	pop	r26
    72a6:	a2 9f       	mul	r26, r18
    72a8:	80 0d       	add	r24, r0
    72aa:	91 1d       	adc	r25, r1
    72ac:	a3 9f       	mul	r26, r19
    72ae:	90 0d       	add	r25, r0
    72b0:	b2 9f       	mul	r27, r18
    72b2:	90 0d       	add	r25, r0
    72b4:	11 24       	eor	r1, r1
    72b6:	08 95       	ret

000072b8 <__muluhisi3>:
    72b8:	0e 94 a6 39 	call	0x734c	; 0x734c <__umulhisi3>
    72bc:	a5 9f       	mul	r26, r21
    72be:	90 0d       	add	r25, r0
    72c0:	b4 9f       	mul	r27, r20
    72c2:	90 0d       	add	r25, r0
    72c4:	a4 9f       	mul	r26, r20
    72c6:	80 0d       	add	r24, r0
    72c8:	91 1d       	adc	r25, r1
    72ca:	11 24       	eor	r1, r1
    72cc:	08 95       	ret

000072ce <__mulshisi3>:
    72ce:	b7 ff       	sbrs	r27, 7
    72d0:	0c 94 5c 39 	jmp	0x72b8	; 0x72b8 <__muluhisi3>

000072d4 <__mulohisi3>:
    72d4:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <__muluhisi3>
    72d8:	82 1b       	sub	r24, r18
    72da:	93 0b       	sbc	r25, r19
    72dc:	08 95       	ret

000072de <__prologue_saves__>:
    72de:	2f 92       	push	r2
    72e0:	3f 92       	push	r3
    72e2:	4f 92       	push	r4
    72e4:	5f 92       	push	r5
    72e6:	6f 92       	push	r6
    72e8:	7f 92       	push	r7
    72ea:	8f 92       	push	r8
    72ec:	9f 92       	push	r9
    72ee:	af 92       	push	r10
    72f0:	bf 92       	push	r11
    72f2:	cf 92       	push	r12
    72f4:	df 92       	push	r13
    72f6:	ef 92       	push	r14
    72f8:	ff 92       	push	r15
    72fa:	0f 93       	push	r16
    72fc:	1f 93       	push	r17
    72fe:	cf 93       	push	r28
    7300:	df 93       	push	r29
    7302:	cd b7       	in	r28, 0x3d	; 61
    7304:	de b7       	in	r29, 0x3e	; 62
    7306:	ca 1b       	sub	r28, r26
    7308:	db 0b       	sbc	r29, r27
    730a:	0f b6       	in	r0, 0x3f	; 63
    730c:	f8 94       	cli
    730e:	de bf       	out	0x3e, r29	; 62
    7310:	0f be       	out	0x3f, r0	; 63
    7312:	cd bf       	out	0x3d, r28	; 61
    7314:	09 94       	ijmp

00007316 <__epilogue_restores__>:
    7316:	2a 88       	ldd	r2, Y+18	; 0x12
    7318:	39 88       	ldd	r3, Y+17	; 0x11
    731a:	48 88       	ldd	r4, Y+16	; 0x10
    731c:	5f 84       	ldd	r5, Y+15	; 0x0f
    731e:	6e 84       	ldd	r6, Y+14	; 0x0e
    7320:	7d 84       	ldd	r7, Y+13	; 0x0d
    7322:	8c 84       	ldd	r8, Y+12	; 0x0c
    7324:	9b 84       	ldd	r9, Y+11	; 0x0b
    7326:	aa 84       	ldd	r10, Y+10	; 0x0a
    7328:	b9 84       	ldd	r11, Y+9	; 0x09
    732a:	c8 84       	ldd	r12, Y+8	; 0x08
    732c:	df 80       	ldd	r13, Y+7	; 0x07
    732e:	ee 80       	ldd	r14, Y+6	; 0x06
    7330:	fd 80       	ldd	r15, Y+5	; 0x05
    7332:	0c 81       	ldd	r16, Y+4	; 0x04
    7334:	1b 81       	ldd	r17, Y+3	; 0x03
    7336:	aa 81       	ldd	r26, Y+2	; 0x02
    7338:	b9 81       	ldd	r27, Y+1	; 0x01
    733a:	ce 0f       	add	r28, r30
    733c:	d1 1d       	adc	r29, r1
    733e:	0f b6       	in	r0, 0x3f	; 63
    7340:	f8 94       	cli
    7342:	de bf       	out	0x3e, r29	; 62
    7344:	0f be       	out	0x3f, r0	; 63
    7346:	cd bf       	out	0x3d, r28	; 61
    7348:	ed 01       	movw	r28, r26
    734a:	08 95       	ret

0000734c <__umulhisi3>:
    734c:	a2 9f       	mul	r26, r18
    734e:	b0 01       	movw	r22, r0
    7350:	b3 9f       	mul	r27, r19
    7352:	c0 01       	movw	r24, r0
    7354:	a3 9f       	mul	r26, r19
    7356:	70 0d       	add	r23, r0
    7358:	81 1d       	adc	r24, r1
    735a:	11 24       	eor	r1, r1
    735c:	91 1d       	adc	r25, r1
    735e:	b2 9f       	mul	r27, r18
    7360:	70 0d       	add	r23, r0
    7362:	81 1d       	adc	r24, r1
    7364:	11 24       	eor	r1, r1
    7366:	91 1d       	adc	r25, r1
    7368:	08 95       	ret

0000736a <_exit>:
    736a:	f8 94       	cli

0000736c <__stop_program>:
    736c:	ff cf       	rjmp	.-2      	; 0x736c <__stop_program>
