
QEPU_Project_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000074a0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  000074a0  00007554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800128  00800128  0000761c  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  0000761c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000761e  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  0000767a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013058  00000000  00000000  00007a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d3f  00000000  00000000  0001aaea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017f8  00000000  00000000  0001c829  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015f8  00000000  00000000  0001e024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001252  00000000  00000000  0001f61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007325  00000000  00000000  0002086e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  00027b93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__ctors_end>
       4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      10:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      14:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      18:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      1c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      20:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      24:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      28:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      2c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      30:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      34:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      38:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      3c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      40:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      44:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      4c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      50:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      54:	75 22       	and	r7, r21
      56:	99 22       	and	r9, r25
      58:	b2 22       	and	r11, r18
      5a:	c6 22       	and	r12, r22
      5c:	d5 22       	and	r13, r21
      5e:	e7 22       	and	r14, r23
      60:	f1 22       	and	r15, r17
      62:	fa 22       	and	r15, r26
      64:	07 23       	and	r16, r23
      66:	14 23       	and	r17, r20
      68:	1f 23       	and	r17, r31
      6a:	2a 23       	and	r18, r26
      6c:	3b 23       	and	r19, r27
      6e:	42 23       	and	r20, r18
      70:	52 23       	and	r21, r18
      72:	56 23       	and	r21, r22
      74:	73 23       	and	r23, r19
      76:	95 23       	and	r25, r21
      78:	b6 23       	and	r27, r22
      7a:	d6 23       	and	r29, r22
      7c:	f6 23       	and	r31, r22
      7e:	16 24       	eor	r1, r6
      80:	36 24       	eor	r3, r6
      82:	56 24       	eor	r5, r6
      84:	6c 24       	eor	r6, r12
      86:	79 24       	eor	r7, r9
      88:	83 24       	eor	r8, r3
      8a:	a0 24       	eor	r10, r0
      8c:	bd 24       	eor	r11, r13
      8e:	d6 24       	eor	r13, r6
      90:	f6 24       	eor	r15, r6
      92:	10 25       	eor	r17, r0
      94:	2a 25       	eor	r18, r10
      96:	46 25       	eor	r20, r6
      98:	60 25       	eor	r22, r0
      9a:	7c 25       	eor	r23, r12
      9c:	91 25       	eor	r25, r1
      9e:	a9 25       	eor	r26, r9
      a0:	c1 25       	eor	r28, r1
      a2:	c7 25       	eor	r28, r7
      a4:	a7 2b       	or	r26, r23
      a6:	cf 25       	eor	r28, r15
      a8:	dc 25       	eor	r29, r12
      aa:	0a 26       	eor	r0, r26
      ac:	38 26       	eor	r3, r24
      ae:	66 26       	eor	r6, r22
      b0:	94 26       	eor	r9, r20
      b2:	c2 26       	eor	r12, r18
      b4:	f0 26       	eor	r15, r16
      b6:	20 27       	eor	r18, r16
      b8:	50 27       	eor	r21, r16
      ba:	80 27       	eor	r24, r16
      bc:	db 27       	eor	r29, r27
      be:	36 28       	or	r3, r6
      c0:	91 28       	or	r9, r1
      c2:	ec 28       	or	r14, r12
      c4:	47 29       	or	r20, r7
      c6:	a2 29       	or	r26, r2
      c8:	fd 29       	or	r31, r13
      ca:	86 2a       	or	r8, r22
      cc:	0f 2b       	or	r16, r31
      ce:	08 4a       	sbci	r16, 0xA8	; 168
      d0:	d7 3b       	cpi	r29, 0xB7	; 183
      d2:	3b ce       	rjmp	.-906    	; 0xfffffd4a <__eeprom_end+0xff7efd48>
      d4:	01 6e       	ori	r16, 0xE1	; 225
      d6:	84 bc       	out	0x24, r8	; 36
      d8:	bf fd       	.word	0xfdbf	; ????
      da:	c1 2f       	mov	r28, r17
      dc:	3d 6c       	ori	r19, 0xCD	; 205
      de:	74 31       	cpi	r23, 0x14	; 20
      e0:	9a bd       	out	0x2a, r25	; 42
      e2:	56 83       	std	Z+6, r21	; 0x06
      e4:	3d da       	rcall	.-2950   	; 0xfffff560 <__eeprom_end+0xff7ef55e>
      e6:	3d 00       	.word	0x003d	; ????
      e8:	c7 7f       	andi	r28, 0xF7	; 247
      ea:	11 be       	out	0x31, r1	; 49
      ec:	d9 e4       	ldi	r29, 0x49	; 73
      ee:	bb 4c       	sbci	r27, 0xCB	; 203
      f0:	3e 91       	ld	r19, -X
      f2:	6b aa       	std	Y+51, r6	; 0x33
      f4:	aa be       	out	0x3a, r10	; 58
      f6:	00 00       	nop
      f8:	00 80       	ld	r0, Z
      fa:	3f 07       	cpc	r19, r31
      fc:	63 42       	sbci	r22, 0x23	; 35
      fe:	36 b7       	in	r19, 0x36	; 54
     100:	9b d8       	rcall	.-3786   	; 0xfffff238 <__eeprom_end+0xff7ef236>
     102:	a7 1a       	sub	r10, r23
     104:	39 68       	ori	r19, 0x89	; 137
     106:	56 18       	sub	r5, r6
     108:	ae ba       	out	0x1e, r10	; 30
     10a:	ab 55       	subi	r26, 0x5B	; 91
     10c:	8c 1d       	adc	r24, r12
     10e:	3c b7       	in	r19, 0x3c	; 60
     110:	cc 57       	subi	r28, 0x7C	; 124
     112:	63 bd       	out	0x23, r22	; 35
     114:	6d ed       	ldi	r22, 0xDD	; 221
     116:	fd 75       	andi	r31, 0x5D	; 93
     118:	3e f6       	brtc	.-114    	; 0xa8 <__SREG__+0x69>
     11a:	17 72       	andi	r17, 0x27	; 39
     11c:	31 bf       	out	0x31, r19	; 49
     11e:	00 00       	nop
     120:	00 80       	ld	r0, Z
     122:	3f 07       	cpc	r19, r31
     124:	2c 7a       	andi	r18, 0xAC	; 172
     126:	a5 ba       	out	0x15, r10	; 21
     128:	6c c5       	rjmp	.+2776   	; 0xc02 <_ZN5Gates8ampl2vecEiPiS0_+0x86>
     12a:	90 da       	rcall	.-2784   	; 0xfffff64c <__eeprom_end+0xff7ef64a>
     12c:	3b 93       	.word	0x933b	; ????
     12e:	65 fc       	sbrc	r6, 5
     130:	8b bc       	out	0x2b, r8	; 43
     132:	53 f8       	bld	r5, 3
     134:	10 fd       	sbrc	r17, 0
     136:	3c 56       	subi	r19, 0x6C	; 108
     138:	92 83       	std	Z+2, r25	; 0x02
     13a:	4d bd       	out	0x2d, r20	; 45
     13c:	87 9d       	mul	r24, r7
     13e:	3a b6       	in	r3, 0x3a	; 58
     140:	3d cb       	rjmp	.-2438   	; 0xfffff7bc <__eeprom_end+0xff7ef7ba>
     142:	c9 bf       	out	0x39, r28	; 57
     144:	5b be       	out	0x3b, r5	; 59
     146:	73 da       	rcall	.-2842   	; 0xfffff62e <__eeprom_end+0xff7ef62c>
     148:	0f c9       	rjmp	.-3554   	; 0xfffff368 <__eeprom_end+0xff7ef366>
     14a:	3f 05       	cpc	r19, r15
     14c:	a8 4c       	sbci	r26, 0xC8	; 200
     14e:	cd b2       	in	r12, 0x1d	; 29
     150:	d4 4e       	sbci	r29, 0xE4	; 228
     152:	b9 38       	cpi	r27, 0x89	; 137
     154:	36 a9       	ldd	r19, Z+54	; 0x36
     156:	02 0c       	add	r0, r2
     158:	50 b9       	out	0x00, r21	; 0
     15a:	91 86       	std	Z+9, r9	; 0x09
     15c:	88 08       	sbc	r8, r8
     15e:	3c a6       	std	Y+44, r3	; 0x2c
     160:	aa aa       	std	Y+50, r10	; 0x32
     162:	2a be       	out	0x3a, r2	; 58
     164:	00 00       	nop
     166:	00 80       	ld	r0, Z
     168:	3f 08       	sbc	r3, r15
     16a:	00 00       	nop
     16c:	00 be       	out	0x30, r0	; 48
     16e:	92 24       	eor	r9, r2
     170:	49 12       	cpse	r4, r25
     172:	3e ab       	std	Y+54, r19	; 0x36
     174:	aa aa       	std	Y+50, r10	; 0x32
     176:	2a be       	out	0x3a, r2	; 58
     178:	cd cc       	rjmp	.-1638   	; 0xfffffb14 <__eeprom_end+0xff7efb12>
     17a:	cc 4c       	sbci	r28, 0xCC	; 204
     17c:	3e 00       	.word	0x003e	; ????
     17e:	00 00       	nop
     180:	80 be       	out	0x30, r8	; 48
     182:	ab aa       	std	Y+51, r10	; 0x33
     184:	aa aa       	std	Y+50, r10	; 0x32
     186:	3e 00       	.word	0x003e	; ????
     188:	00 00       	nop
     18a:	00 bf       	out	0x30, r16	; 48
     18c:	00 00       	nop
     18e:	00 80       	ld	r0, Z
     190:	3f 00       	.word	0x003f	; ????
     192:	00 00       	nop
     194:	00 00       	nop
     196:	08 41       	sbci	r16, 0x18	; 24
     198:	78 d3       	rcall	.+1776   	; 0x88a <__stack+0x2b>
     19a:	bb 43       	sbci	r27, 0x3B	; 59
     19c:	87 d1       	rcall	.+782    	; 0x4ac <_ZN6EEProm4readEj+0x4a>
     19e:	13 3d       	cpi	r17, 0xD3	; 211
     1a0:	19 0e       	add	r1, r25
     1a2:	3c c3       	rjmp	.+1656   	; 0x81c <_ZN5Gates17reverse_kroneckerEP7Complexi+0x90>
     1a4:	bd 42       	sbci	r27, 0x2D	; 45
     1a6:	82 ad       	ldd	r24, Z+58	; 0x3a
     1a8:	2b 3e       	cpi	r18, 0xEB	; 235
     1aa:	68 ec       	ldi	r22, 0xC8	; 200
     1ac:	82 76       	andi	r24, 0x62	; 98
     1ae:	be d9       	rcall	.-3204   	; 0xfffff52c <__eeprom_end+0xff7ef52a>
     1b0:	8f e1       	ldi	r24, 0x1F	; 31
     1b2:	a9 3e       	cpi	r26, 0xE9	; 233
     1b4:	4c 80       	ldd	r4, Y+4	; 0x04
     1b6:	ef ff       	.word	0xffef	; ????
     1b8:	be 01       	movw	r22, r28
     1ba:	c4 ff       	sbrs	r28, 4
     1bc:	7f 3f       	cpi	r23, 0xFF	; 255
     1be:	00 00       	nop
     1c0:	00 00       	nop
	...

000001c4 <__ctors_start>:
     1c4:	12 1e       	adc	r1, r18

000001c6 <__ctors_end>:
     1c6:	11 24       	eor	r1, r1
     1c8:	1f be       	out	0x3f, r1	; 63
     1ca:	cf e5       	ldi	r28, 0x5F	; 95
     1cc:	d8 e0       	ldi	r29, 0x08	; 8
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	cd bf       	out	0x3d, r28	; 61

000001d2 <__do_copy_data>:
     1d2:	11 e0       	ldi	r17, 0x01	; 1
     1d4:	a0 e6       	ldi	r26, 0x60	; 96
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	e0 ea       	ldi	r30, 0xA0	; 160
     1da:	f4 e7       	ldi	r31, 0x74	; 116
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__do_copy_data+0x10>
     1de:	05 90       	lpm	r0, Z+
     1e0:	0d 92       	st	X+, r0
     1e2:	a8 32       	cpi	r26, 0x28	; 40
     1e4:	b1 07       	cpc	r27, r17
     1e6:	d9 f7       	brne	.-10     	; 0x1de <__do_copy_data+0xc>

000001e8 <__do_clear_bss>:
     1e8:	21 e0       	ldi	r18, 0x01	; 1
     1ea:	a8 e2       	ldi	r26, 0x28	; 40
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
     1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
     1f2:	a8 33       	cpi	r26, 0x38	; 56
     1f4:	b2 07       	cpc	r27, r18
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>

000001f8 <__do_global_ctors>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	c6 ec       	ldi	r28, 0xC6	; 198
     1fc:	d1 e0       	ldi	r29, 0x01	; 1
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <__do_global_ctors+0x10>
     200:	22 97       	sbiw	r28, 0x02	; 2
     202:	fe 01       	movw	r30, r28
     204:	0e 94 f6 33 	call	0x67ec	; 0x67ec <__tablejump__>
     208:	c4 3c       	cpi	r28, 0xC4	; 196
     20a:	d1 07       	cpc	r29, r17
     20c:	c9 f7       	brne	.-14     	; 0x200 <__do_global_ctors+0x8>
     20e:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <main>
     212:	0c 94 4e 3a 	jmp	0x749c	; 0x749c <_exit>

00000216 <__bad_interrupt>:
     216:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021a <_ZN7ComplexC1Eff>:
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	fc 01       	movw	r30, r24
     220:	40 83       	st	Z, r20
     222:	51 83       	std	Z+1, r21	; 0x01
     224:	62 83       	std	Z+2, r22	; 0x02
     226:	73 83       	std	Z+3, r23	; 0x03
     228:	04 83       	std	Z+4, r16	; 0x04
     22a:	15 83       	std	Z+5, r17	; 0x05
     22c:	26 83       	std	Z+6, r18	; 0x06
     22e:	37 83       	std	Z+7, r19	; 0x07
     230:	1f 91       	pop	r17
     232:	0f 91       	pop	r16
     234:	08 95       	ret

00000236 <_ZN7ComplexC1Ev>:
     236:	fc 01       	movw	r30, r24
     238:	10 82       	st	Z, r1
     23a:	11 82       	std	Z+1, r1	; 0x01
     23c:	12 82       	std	Z+2, r1	; 0x02
     23e:	13 82       	std	Z+3, r1	; 0x03
     240:	14 82       	std	Z+4, r1	; 0x04
     242:	15 82       	std	Z+5, r1	; 0x05
     244:	16 82       	std	Z+6, r1	; 0x06
     246:	17 82       	std	Z+7, r1	; 0x07
     248:	08 95       	ret

0000024a <_ZN7Complex3addES_>:
     24a:	af 92       	push	r10
     24c:	bf 92       	push	r11
     24e:	cf 92       	push	r12
     250:	df 92       	push	r13
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	68 97       	sbiw	r28, 0x18	; 24
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	5c 01       	movw	r10, r24
     270:	09 8b       	std	Y+17, r16	; 0x11
     272:	1a 8b       	std	Y+18, r17	; 0x12
     274:	2b 8b       	std	Y+19, r18	; 0x13
     276:	3c 8b       	std	Y+20, r19	; 0x14
     278:	4d 8b       	std	Y+21, r20	; 0x15
     27a:	5e 8b       	std	Y+22, r21	; 0x16
     27c:	6f 8b       	std	Y+23, r22	; 0x17
     27e:	78 8f       	std	Y+24, r23	; 0x18
     280:	2d 89       	ldd	r18, Y+21	; 0x15
     282:	3e 89       	ldd	r19, Y+22	; 0x16
     284:	4f 89       	ldd	r20, Y+23	; 0x17
     286:	58 8d       	ldd	r21, Y+24	; 0x18
     288:	fc 01       	movw	r30, r24
     28a:	64 81       	ldd	r22, Z+4	; 0x04
     28c:	75 81       	ldd	r23, Z+5	; 0x05
     28e:	86 81       	ldd	r24, Z+6	; 0x06
     290:	97 81       	ldd	r25, Z+7	; 0x07
     292:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <__addsf3>
     296:	6b 01       	movw	r12, r22
     298:	7c 01       	movw	r14, r24
     29a:	29 89       	ldd	r18, Y+17	; 0x11
     29c:	3a 89       	ldd	r19, Y+18	; 0x12
     29e:	4b 89       	ldd	r20, Y+19	; 0x13
     2a0:	5c 89       	ldd	r21, Y+20	; 0x14
     2a2:	f5 01       	movw	r30, r10
     2a4:	60 81       	ld	r22, Z
     2a6:	71 81       	ldd	r23, Z+1	; 0x01
     2a8:	82 81       	ldd	r24, Z+2	; 0x02
     2aa:	93 81       	ldd	r25, Z+3	; 0x03
     2ac:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <__addsf3>
     2b0:	ab 01       	movw	r20, r22
     2b2:	bc 01       	movw	r22, r24
     2b4:	97 01       	movw	r18, r14
     2b6:	86 01       	movw	r16, r12
     2b8:	ce 01       	movw	r24, r28
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     2c0:	88 e0       	ldi	r24, 0x08	; 8
     2c2:	fe 01       	movw	r30, r28
     2c4:	31 96       	adiw	r30, 0x01	; 1
     2c6:	de 01       	movw	r26, r28
     2c8:	19 96       	adiw	r26, 0x09	; 9
     2ca:	01 90       	ld	r0, Z+
     2cc:	0d 92       	st	X+, r0
     2ce:	8a 95       	dec	r24
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <_ZN7Complex3addES_+0x80>
     2d2:	29 85       	ldd	r18, Y+9	; 0x09
     2d4:	3a 85       	ldd	r19, Y+10	; 0x0a
     2d6:	4b 85       	ldd	r20, Y+11	; 0x0b
     2d8:	5c 85       	ldd	r21, Y+12	; 0x0c
     2da:	6d 85       	ldd	r22, Y+13	; 0x0d
     2dc:	7e 85       	ldd	r23, Y+14	; 0x0e
     2de:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e0:	98 89       	ldd	r25, Y+16	; 0x10
     2e2:	68 96       	adiw	r28, 0x18	; 24
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	bf 90       	pop	r11
     300:	af 90       	pop	r10
     302:	08 95       	ret

00000304 <_ZN7Complex3mulES_>:
     304:	4f 92       	push	r4
     306:	5f 92       	push	r5
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	8f 92       	push	r8
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	a0 97       	sbiw	r28, 0x20	; 32
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	09 8b       	std	Y+17, r16	; 0x11
     336:	1a 8b       	std	Y+18, r17	; 0x12
     338:	2b 8b       	std	Y+19, r18	; 0x13
     33a:	3c 8b       	std	Y+20, r19	; 0x14
     33c:	4d 8b       	std	Y+21, r20	; 0x15
     33e:	5e 8b       	std	Y+22, r21	; 0x16
     340:	6f 8b       	std	Y+23, r22	; 0x17
     342:	78 8f       	std	Y+24, r23	; 0x18
     344:	89 88       	ldd	r8, Y+17	; 0x11
     346:	9a 88       	ldd	r9, Y+18	; 0x12
     348:	ab 88       	ldd	r10, Y+19	; 0x13
     34a:	bc 88       	ldd	r11, Y+20	; 0x14
     34c:	2d 89       	ldd	r18, Y+21	; 0x15
     34e:	3e 89       	ldd	r19, Y+22	; 0x16
     350:	4f 89       	ldd	r20, Y+23	; 0x17
     352:	58 8d       	ldd	r21, Y+24	; 0x18
     354:	2d 8f       	std	Y+29, r18	; 0x1d
     356:	3e 8f       	std	Y+30, r19	; 0x1e
     358:	4f 8f       	std	Y+31, r20	; 0x1f
     35a:	58 a3       	std	Y+32, r21	; 0x20
     35c:	fc 01       	movw	r30, r24
     35e:	c0 80       	ld	r12, Z
     360:	d1 80       	ldd	r13, Z+1	; 0x01
     362:	e2 80       	ldd	r14, Z+2	; 0x02
     364:	f3 80       	ldd	r15, Z+3	; 0x03
     366:	24 81       	ldd	r18, Z+4	; 0x04
     368:	35 81       	ldd	r19, Z+5	; 0x05
     36a:	46 81       	ldd	r20, Z+6	; 0x06
     36c:	57 81       	ldd	r21, Z+7	; 0x07
     36e:	29 8f       	std	Y+25, r18	; 0x19
     370:	3a 8f       	std	Y+26, r19	; 0x1a
     372:	4b 8f       	std	Y+27, r20	; 0x1b
     374:	5c 8f       	std	Y+28, r21	; 0x1c
     376:	2d 8d       	ldd	r18, Y+29	; 0x1d
     378:	3e 8d       	ldd	r19, Y+30	; 0x1e
     37a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     37c:	58 a1       	ldd	r21, Y+32	; 0x20
     37e:	c7 01       	movw	r24, r14
     380:	b6 01       	movw	r22, r12
     382:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     386:	2b 01       	movw	r4, r22
     388:	3c 01       	movw	r6, r24
     38a:	a5 01       	movw	r20, r10
     38c:	94 01       	movw	r18, r8
     38e:	69 8d       	ldd	r22, Y+25	; 0x19
     390:	7a 8d       	ldd	r23, Y+26	; 0x1a
     392:	8b 8d       	ldd	r24, Y+27	; 0x1b
     394:	9c 8d       	ldd	r25, Y+28	; 0x1c
     396:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	c3 01       	movw	r24, r6
     3a0:	b2 01       	movw	r22, r4
     3a2:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <__addsf3>
     3a6:	2b 01       	movw	r4, r22
     3a8:	3c 01       	movw	r6, r24
     3aa:	a5 01       	movw	r20, r10
     3ac:	94 01       	movw	r18, r8
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24
     3ba:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3bc:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3be:	4f 8d       	ldd	r20, Y+31	; 0x1f
     3c0:	58 a1       	ldd	r21, Y+32	; 0x20
     3c2:	69 8d       	ldd	r22, Y+25	; 0x19
     3c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3ca:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     3ce:	9b 01       	movw	r18, r22
     3d0:	ac 01       	movw	r20, r24
     3d2:	c7 01       	movw	r24, r14
     3d4:	b6 01       	movw	r22, r12
     3d6:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__subsf3>
     3da:	ab 01       	movw	r20, r22
     3dc:	bc 01       	movw	r22, r24
     3de:	93 01       	movw	r18, r6
     3e0:	82 01       	movw	r16, r4
     3e2:	ce 01       	movw	r24, r28
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     3ea:	88 e0       	ldi	r24, 0x08	; 8
     3ec:	fe 01       	movw	r30, r28
     3ee:	31 96       	adiw	r30, 0x01	; 1
     3f0:	de 01       	movw	r26, r28
     3f2:	19 96       	adiw	r26, 0x09	; 9
     3f4:	01 90       	ld	r0, Z+
     3f6:	0d 92       	st	X+, r0
     3f8:	8a 95       	dec	r24
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <_ZN7Complex3mulES_+0xf0>
     3fc:	29 85       	ldd	r18, Y+9	; 0x09
     3fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     400:	4b 85       	ldd	r20, Y+11	; 0x0b
     402:	5c 85       	ldd	r21, Y+12	; 0x0c
     404:	6d 85       	ldd	r22, Y+13	; 0x0d
     406:	7e 85       	ldd	r23, Y+14	; 0x0e
     408:	8f 85       	ldd	r24, Y+15	; 0x0f
     40a:	98 89       	ldd	r25, Y+16	; 0x10
     40c:	a0 96       	adiw	r28, 0x20	; 32
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	bf 90       	pop	r11
     42a:	af 90       	pop	r10
     42c:	9f 90       	pop	r9
     42e:	8f 90       	pop	r8
     430:	7f 90       	pop	r7
     432:	6f 90       	pop	r6
     434:	5f 90       	pop	r5
     436:	4f 90       	pop	r4
     438:	08 95       	ret

0000043a <_ZN7Complex3argEv>:
     43a:	fc 01       	movw	r30, r24
     43c:	20 81       	ld	r18, Z
     43e:	31 81       	ldd	r19, Z+1	; 0x01
     440:	42 81       	ldd	r20, Z+2	; 0x02
     442:	53 81       	ldd	r21, Z+3	; 0x03
     444:	64 81       	ldd	r22, Z+4	; 0x04
     446:	75 81       	ldd	r23, Z+5	; 0x05
     448:	86 81       	ldd	r24, Z+6	; 0x06
     44a:	97 81       	ldd	r25, Z+7	; 0x07
     44c:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
     450:	0e 94 2f 30 	call	0x605e	; 0x605e <atan>
     454:	08 95       	ret

00000456 <_ZN6EEPromC1Ev>:
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     456:	85 e0       	ldi	r24, 0x05	; 5
     458:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     45a:	81 b1       	in	r24, 0x01	; 1
     45c:	8c 7f       	andi	r24, 0xFC	; 252
     45e:	81 b9       	out	0x01, r24	; 1
     460:	08 95       	ret

00000462 <_ZN6EEProm4readEj>:
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     462:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     464:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     466:	24 e8       	ldi	r18, 0x84	; 132
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     468:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     46a:	06 b6       	in	r0, 0x36	; 54
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     470:	81 b1       	in	r24, 0x01	; 1
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	88 30       	cpi	r24, 0x08	; 8
     476:	09 f0       	breq	.+2      	; 0x47a <_ZN6EEProm4readEj+0x18>
     478:	41 c0       	rjmp	.+130    	; 0x4fc <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     47a:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     47c:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     47e:	06 b6       	in	r0, 0x36	; 54
     480:	07 fe       	sbrs	r0, 7
     482:	fd cf       	rjmp	.-6      	; 0x47e <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     484:	81 b1       	in	r24, 0x01	; 1
     486:	88 7f       	andi	r24, 0xF8	; 248
}

uint8_t EEProm::read(uint16_t address){
	uint8_t data;
	//Initiate a Dummy Write Sequence to start Random Read
	do
     488:	88 31       	cpi	r24, 0x18	; 24
     48a:	71 f7       	brne	.-36     	; 0x468 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     48c:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     48e:	84 e8       	ldi	r24, 0x84	; 132
     490:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     492:	06 b6       	in	r0, 0x36	; 54
     494:	07 fe       	sbrs	r0, 7
     496:	fd cf       	rjmp	.-6      	; 0x492 <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     498:	81 b1       	in	r24, 0x01	; 1
     49a:	88 7f       	andi	r24, 0xF8	; 248
     49c:	88 32       	cpi	r24, 0x28	; 40
     49e:	81 f5       	brne	.+96     	; 0x500 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     4a0:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     4a2:	84 e8       	ldi	r24, 0x84	; 132
     4a4:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4a6:	06 b6       	in	r0, 0x36	; 54
     4a8:	07 fe       	sbrs	r0, 7
     4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     4ac:	81 b1       	in	r24, 0x01	; 1
     4ae:	88 7f       	andi	r24, 0xF8	; 248
     4b0:	88 32       	cpi	r24, 0x28	; 40
     4b2:	41 f5       	brne	.+80     	; 0x504 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     4b4:	84 ea       	ldi	r24, 0xA4	; 164
     4b6:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4b8:	06 b6       	in	r0, 0x36	; 54
     4ba:	07 fe       	sbrs	r0, 7
     4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     4be:	81 b1       	in	r24, 0x01	; 1
     4c0:	88 7f       	andi	r24, 0xF8	; 248
     4c2:	80 31       	cpi	r24, 0x10	; 16
     4c4:	09 f5       	brne	.+66     	; 0x508 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     4c6:	81 ea       	ldi	r24, 0xA1	; 161
     4c8:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     4ca:	84 e8       	ldi	r24, 0x84	; 132
     4cc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     4ce:	06 b6       	in	r0, 0x36	; 54
     4d0:	07 fe       	sbrs	r0, 7
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     4d4:	81 b1       	in	r24, 0x01	; 1
     4d6:	88 7f       	andi	r24, 0xF8	; 248
     4d8:	80 34       	cpi	r24, 0x40	; 64
     4da:	c1 f4       	brne	.+48     	; 0x50c <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     4dc:	84 e8       	ldi	r24, 0x84	; 132
     4de:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     4e0:	06 b6       	in	r0, 0x36	; 54
     4e2:	07 fe       	sbrs	r0, 7
     4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     4e6:	81 b1       	in	r24, 0x01	; 1
     4e8:	88 7f       	andi	r24, 0xF8	; 248
     4ea:	88 35       	cpi	r24, 0x58	; 88
     4ec:	89 f4       	brne	.+34     	; 0x510 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     4ee:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     4f0:	94 e9       	ldi	r25, 0x94	; 148
     4f2:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     4f4:	06 b6       	in	r0, 0x36	; 54
     4f6:	04 fc       	sbrc	r0, 4
     4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <_ZN6EEProm4readEj+0x92>
     4fa:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     510:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     512:	08 95       	ret

00000514 <_ZN6EEProm11count_linesEv>:
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
	return eeprom_mem;
}

int EEProm::count_lines(){
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	6c 97       	sbiw	r28, 0x1c	; 28
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	5c 01       	movw	r10, r24
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
	bool all_data_read=false;
	
	for(int i=0;true;i++){
     542:	e1 2c       	mov	r14, r1
     544:	f1 2c       	mov	r15, r1
	return eeprom_mem;
}

int EEProm::count_lines(){
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
     546:	c1 2c       	mov	r12, r1
     548:	d1 2c       	mov	r13, r1
     54a:	81 2c       	mov	r8, r1
     54c:	91 2c       	mov	r9, r1
     54e:	8e 01       	movw	r16, r28
     550:	05 5e       	subi	r16, 0xE5	; 229
     552:	1f 4f       	sbci	r17, 0xFF	; 255
			ctr++;
			for(int j=0;j<INSTR_WIDTH;j++){
				if(tdb[j]==0xFF) all_data_read=true;
				else all_data_read=false;
			}
			tdb_i=0;
     554:	61 2c       	mov	r6, r1
     556:	71 2c       	mov	r7, r1
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
	bool all_data_read=false;
	
	for(int i=0;true;i++){
		tdb[tdb_i]=read(i);
     558:	b7 01       	movw	r22, r14
     55a:	c5 01       	movw	r24, r10
     55c:	0e 94 31 02 	call	0x462	; 0x462 <_ZN6EEProm4readEj>
     560:	f4 01       	movw	r30, r8
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	2c 0f       	add	r18, r28
     56c:	3d 1f       	adc	r19, r29
     56e:	e2 0f       	add	r30, r18
     570:	f3 1f       	adc	r31, r19
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	91 83       	std	Z+1, r25	; 0x01
     576:	80 83       	st	Z, r24
		
		if(tdb_i>=INSTR_WIDTH){
     578:	3d e0       	ldi	r19, 0x0D	; 13
     57a:	83 16       	cp	r8, r19
     57c:	91 04       	cpc	r9, r1
     57e:	74 f0       	brlt	.+28     	; 0x59c <_ZN6EEProm11count_linesEv+0x88>
			ctr++;
     580:	8f ef       	ldi	r24, 0xFF	; 255
     582:	c8 1a       	sub	r12, r24
     584:	d8 0a       	sbc	r13, r24
     586:	fe 01       	movw	r30, r28
     588:	31 96       	adiw	r30, 0x01	; 1
			for(int j=0;j<INSTR_WIDTH;j++){
				if(tdb[j]==0xFF) all_data_read=true;
     58a:	81 91       	ld	r24, Z+
     58c:	91 91       	ld	r25, Z+
	for(int i=0;true;i++){
		tdb[tdb_i]=read(i);
		
		if(tdb_i>=INSTR_WIDTH){
			ctr++;
			for(int j=0;j<INSTR_WIDTH;j++){
     58e:	e0 17       	cp	r30, r16
     590:	f1 07       	cpc	r31, r17
     592:	d9 f7       	brne	.-10     	; 0x58a <_ZN6EEProm11count_linesEv+0x76>
				if(tdb[j]==0xFF) all_data_read=true;
				else all_data_read=false;
			}
			tdb_i=0;
			if(all_data_read) return ctr;
     594:	8f 3f       	cpi	r24, 0xFF	; 255
     596:	91 05       	cpc	r25, r1
     598:	29 f4       	brne	.+10     	; 0x5a4 <_ZN6EEProm11count_linesEv+0x90>
     59a:	0a c0       	rjmp	.+20     	; 0x5b0 <_ZN6EEProm11count_linesEv+0x9c>
		}else tdb_i++;
     59c:	2f ef       	ldi	r18, 0xFF	; 255
     59e:	82 1a       	sub	r8, r18
     5a0:	92 0a       	sbc	r9, r18
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <_ZN6EEProm11count_linesEv+0x94>
			ctr++;
			for(int j=0;j<INSTR_WIDTH;j++){
				if(tdb[j]==0xFF) all_data_read=true;
				else all_data_read=false;
			}
			tdb_i=0;
     5a4:	86 2c       	mov	r8, r6
     5a6:	97 2c       	mov	r9, r7
int EEProm::count_lines(){
	int tdb[INSTR_WIDTH+1];
	int tdb_i=0,ctr=0;
	bool all_data_read=false;
	
	for(int i=0;true;i++){
     5a8:	3f ef       	ldi	r19, 0xFF	; 255
     5aa:	e3 1a       	sub	r14, r19
     5ac:	f3 0a       	sbc	r15, r19
				else all_data_read=false;
			}
			tdb_i=0;
			if(all_data_read) return ctr;
		}else tdb_i++;
	}
     5ae:	d4 cf       	rjmp	.-88     	; 0x558 <_ZN6EEProm11count_linesEv+0x44>
	return ctr;
}
     5b0:	c6 01       	movw	r24, r12
     5b2:	6c 96       	adiw	r28, 0x1c	; 28
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	bf 90       	pop	r11
     5d0:	af 90       	pop	r10
     5d2:	9f 90       	pop	r9
     5d4:	8f 90       	pop	r8
     5d6:	7f 90       	pop	r7
     5d8:	6f 90       	pop	r6
     5da:	08 95       	ret

000005dc <_ZN4QEPU4FlagC1Ev>:
#include "qepu.h"

int8_t QEPU::Flag::flaglist[FLAG_COUNT];

QEPU::Flag::Flag(){
	flaglist[ALLOW_BRANCH_STACK]=HIGH;	
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	80 93 30 01 	sts	0x0130, r24
     5e2:	08 95       	ret

000005e4 <_ZN4QEPU4Flag7compareEii>:
}

void QEPU::Flag::compare(int data1,int data2){
	flaglist[CND_LWER]=(data1<data2)?HIGH:LOW;
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	86 17       	cp	r24, r22
     5e8:	97 07       	cpc	r25, r23
     5ea:	0c f0       	brlt	.+2      	; 0x5ee <_ZN4QEPU4Flag7compareEii+0xa>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	20 93 28 01 	sts	0x0128, r18
	flaglist[CND_LWER_EQUAL]=(data1<=data2)?HIGH:LOW;
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	68 17       	cp	r22, r24
     5f6:	79 07       	cpc	r23, r25
     5f8:	0c f4       	brge	.+2      	; 0x5fc <_ZN4QEPU4Flag7compareEii+0x18>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	20 93 29 01 	sts	0x0129, r18
	flaglist[CND_EQUAL]=(data1==data2)?HIGH:LOW;
     600:	21 e0       	ldi	r18, 0x01	; 1
     602:	86 17       	cp	r24, r22
     604:	97 07       	cpc	r25, r23
     606:	09 f0       	breq	.+2      	; 0x60a <_ZN4QEPU4Flag7compareEii+0x26>
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	20 93 2a 01 	sts	0x012A, r18
	flaglist[CND_GRTER_EQUAL]=(data1>=data2)?HIGH:LOW;
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	86 17       	cp	r24, r22
     612:	97 07       	cpc	r25, r23
     614:	0c f4       	brge	.+2      	; 0x618 <_ZN4QEPU4Flag7compareEii+0x34>
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	20 93 2b 01 	sts	0x012B, r18
	flaglist[CND_GRTER]=(data1>data2)?HIGH:LOW;
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	68 17       	cp	r22, r24
     620:	79 07       	cpc	r23, r25
     622:	0c f0       	brlt	.+2      	; 0x626 <_ZN4QEPU4Flag7compareEii+0x42>
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	20 93 2c 01 	sts	0x012C, r18
	flaglist[CND_DIFF]=(data1!=data2)?HIGH:LOW;
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	86 17       	cp	r24, r22
     62e:	97 07       	cpc	r25, r23
     630:	09 f4       	brne	.+2      	; 0x634 <_ZN4QEPU4Flag7compareEii+0x50>
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	20 93 2d 01 	sts	0x012D, r18
	flaglist[CND_ZERO]=(data1==LOW)?HIGH:LOW;
     638:	21 e0       	ldi	r18, 0x01	; 1
     63a:	00 97       	sbiw	r24, 0x00	; 0
     63c:	09 f0       	breq	.+2      	; 0x640 <_ZN4QEPU4Flag7compareEii+0x5c>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	20 93 2e 01 	sts	0x012E, r18
	flaglist[CND_NOT_ZERO]=(data1!=LOW)?HIGH:LOW;
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	89 2b       	or	r24, r25
     648:	09 f4       	brne	.+2      	; 0x64c <_ZN4QEPU4Flag7compareEii+0x68>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	20 93 2f 01 	sts	0x012F, r18
     650:	08 95       	ret

00000652 <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){}
     652:	08 95       	ret

00000654 <_Z12print_statesiP7ComplexPc>:

Serial s;

void print_states(int qb_count,Complex * vec,char* message){
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	1f 92       	push	r1
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	6c 01       	movw	r12, r24
     66c:	e6 2e       	mov	r14, r22
     66e:	f7 2e       	mov	r15, r23
	Utils utils;
	s.writestrln(message);
     670:	ba 01       	movw	r22, r20
     672:	81 e3       	ldi	r24, 0x31	; 49
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     67a:	1c 14       	cp	r1, r12
     67c:	1d 04       	cpc	r1, r13
     67e:	0c f0       	brlt	.+2      	; 0x682 <_Z12print_statesiP7ComplexPc+0x2e>
     680:	4b c0       	rjmp	.+150    	; 0x718 <_Z12print_statesiP7ComplexPc+0xc4>
     682:	0e 2d       	mov	r16, r14
     684:	1f 2d       	mov	r17, r15
     686:	e1 2c       	mov	r14, r1
     688:	f1 2c       	mov	r15, r1
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
     68a:	6a e6       	ldi	r22, 0x6A	; 106
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	81 e3       	ldi	r24, 0x31	; 49
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	4a e7       	ldi	r20, 0x7A	; 122
     69c:	54 e4       	ldi	r21, 0x44	; 68
     69e:	f8 01       	movw	r30, r16
     6a0:	60 81       	ld	r22, Z
     6a2:	71 81       	ldd	r23, Z+1	; 0x01
     6a4:	82 81       	ldd	r24, Z+2	; 0x02
     6a6:	93 81       	ldd	r25, Z+3	; 0x03
     6a8:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     6ac:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__fixsfsi>
     6b0:	ce 01       	movw	r24, r28
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <_ZN5Utils7int2strEi>
     6b8:	bc 01       	movw	r22, r24
     6ba:	81 e3       	ldi	r24, 0x31	; 49
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
     6c2:	6e e6       	ldi	r22, 0x6E	; 110
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	81 e3       	ldi	r24, 0x31	; 49
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	4a e7       	ldi	r20, 0x7A	; 122
     6d4:	54 e4       	ldi	r21, 0x44	; 68
     6d6:	f8 01       	movw	r30, r16
     6d8:	64 81       	ldd	r22, Z+4	; 0x04
     6da:	75 81       	ldd	r23, Z+5	; 0x05
     6dc:	86 81       	ldd	r24, Z+6	; 0x06
     6de:	97 81       	ldd	r25, Z+7	; 0x07
     6e0:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     6e4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__fixsfsi>
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <_ZN5Utils7int2strEi>
     6f0:	bc 01       	movw	r22, r24
     6f2:	81 e3       	ldi	r24, 0x31	; 49
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     6fa:	65 ec       	ldi	r22, 0xC5	; 197
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	81 e3       	ldi	r24, 0x31	; 49
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_ZN6Serial10writestrlnEPc>
Serial s;

void print_states(int qb_count,Complex * vec,char* message){
	Utils utils;
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     706:	ff ef       	ldi	r31, 0xFF	; 255
     708:	ef 1a       	sub	r14, r31
     70a:	ff 0a       	sbc	r15, r31
     70c:	08 5f       	subi	r16, 0xF8	; 248
     70e:	1f 4f       	sbci	r17, 0xFF	; 255
     710:	ec 14       	cp	r14, r12
     712:	fd 04       	cpc	r15, r13
     714:	09 f0       	breq	.+2      	; 0x718 <_Z12print_statesiP7ComplexPc+0xc4>
     716:	b9 cf       	rjmp	.-142    	; 0x68a <_Z12print_statesiP7ComplexPc+0x36>
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     718:	0f 90       	pop	r0
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	08 95       	ret

0000072c <_ZN5Gates5touchEd>:

int Gates::touch(double probability){
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	6a 01       	movw	r12, r20
     73a:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     73c:	0e 94 83 35 	call	0x6b06	; 0x6b06 <rand>
     740:	ec 01       	movw	r28, r24
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	3e ef       	ldi	r19, 0xFE	; 254
     746:	4f ef       	ldi	r20, 0xFF	; 255
     748:	56 e4       	ldi	r21, 0x46	; 70
     74a:	c7 01       	movw	r24, r14
     74c:	b6 01       	movw	r22, r12
     74e:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     752:	6b 01       	movw	r12, r22
     754:	7c 01       	movw	r14, r24
     756:	be 01       	movw	r22, r28
     758:	88 27       	eor	r24, r24
     75a:	77 fd       	sbrc	r23, 7
     75c:	80 95       	com	r24
     75e:	98 2f       	mov	r25, r24
     760:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
     764:	9b 01       	movw	r18, r22
     766:	ac 01       	movw	r20, r24
     768:	c1 e0       	ldi	r28, 0x01	; 1
     76a:	d0 e0       	ldi	r29, 0x00	; 0
     76c:	c7 01       	movw	r24, r14
     76e:	b6 01       	movw	r22, r12
     770:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
     774:	88 23       	and	r24, r24
     776:	14 f4       	brge	.+4      	; 0x77c <_ZN5Gates5touchEd+0x50>
     778:	c0 e0       	ldi	r28, 0x00	; 0
     77a:	d0 e0       	ldi	r29, 0x00	; 0
}
     77c:	ce 01       	movw	r24, r28
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	cf 90       	pop	r12
     78a:	08 95       	ret

0000078c <_ZN5Gates17reverse_kroneckerEP7Complexi>:

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     78c:	2f 92       	push	r2
     78e:	3f 92       	push	r3
     790:	4f 92       	push	r4
     792:	5f 92       	push	r5
     794:	6f 92       	push	r6
     796:	7f 92       	push	r7
     798:	8f 92       	push	r8
     79a:	9f 92       	push	r9
     79c:	af 92       	push	r10
     79e:	bf 92       	push	r11
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	a4 97       	sbiw	r28, 0x24	; 36
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	8c 01       	movw	r16, r24
     7c2:	6b 01       	movw	r12, r22
     7c4:	5a 01       	movw	r10, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     7c6:	ba 01       	movw	r22, r20
     7c8:	88 27       	eor	r24, r24
     7ca:	77 fd       	sbrc	r23, 7
     7cc:	80 95       	com	r24
     7ce:	98 2f       	mov	r25, r24
     7d0:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
     7d4:	0e 94 99 32 	call	0x6532	; 0x6532 <log>
     7d8:	28 e1       	ldi	r18, 0x18	; 24
     7da:	32 e7       	ldi	r19, 0x72	; 114
     7dc:	41 e3       	ldi	r20, 0x31	; 49
     7de:	5f e3       	ldi	r21, 0x3F	; 63
     7e0:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
     7e4:	2b 01       	movw	r4, r22
     7e6:	3c 01       	movw	r6, r24
     7e8:	9b 01       	movw	r18, r22
     7ea:	ac 01       	movw	r20, r24
     7ec:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <__addsf3>
     7f0:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__fixsfsi>
     7f4:	69 a3       	std	Y+33, r22	; 0x21
     7f6:	7a a3       	std	Y+34, r23	; 0x22
     7f8:	8b a3       	std	Y+35, r24	; 0x23
     7fa:	9c a3       	std	Y+36, r25	; 0x24
     7fc:	29 a0       	ldd	r2, Y+33	; 0x21
     7fe:	3a a0       	ldd	r3, Y+34	; 0x22
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
     800:	c1 01       	movw	r24, r2
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
     812:	4c 01       	movw	r8, r24
		
	for(int i=0;i<kron_size;i++)
     814:	1a 14       	cp	r1, r10
     816:	1b 04       	cpc	r1, r11
     818:	0c f0       	brlt	.+2      	; 0x81c <_ZN5Gates17reverse_kroneckerEP7Complexi+0x90>
     81a:	9d c0       	rjmp	.+314    	; 0x956 <__stack+0xf7>
		if(kron[i].re==1){
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e8       	ldi	r20, 0x80	; 128
     822:	5f e3       	ldi	r21, 0x3F	; 63
     824:	f6 01       	movw	r30, r12
     826:	60 81       	ld	r22, Z
     828:	71 81       	ldd	r23, Z+1	; 0x01
     82a:	82 81       	ldd	r24, Z+2	; 0x02
     82c:	93 81       	ldd	r25, Z+3	; 0x03
     82e:	0e 94 57 30 	call	0x60ae	; 0x60ae <__cmpsf2>
     832:	81 11       	cpse	r24, r1
     834:	87 c0       	rjmp	.+270    	; 0x944 <__stack+0xe5>
     836:	11 c0       	rjmp	.+34     	; 0x85a <_ZN5Gates17reverse_kroneckerEP7Complexi+0xce>
     838:	f8 e0       	ldi	r31, 0x08	; 8
     83a:	cf 0e       	add	r12, r31
     83c:	d1 1c       	adc	r13, r1
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e8       	ldi	r20, 0x80	; 128
     844:	5f e3       	ldi	r21, 0x3F	; 63
     846:	f6 01       	movw	r30, r12
     848:	60 81       	ld	r22, Z
     84a:	71 81       	ldd	r23, Z+1	; 0x01
     84c:	82 81       	ldd	r24, Z+2	; 0x02
     84e:	93 81       	ldd	r25, Z+3	; 0x03
     850:	0e 94 57 30 	call	0x60ae	; 0x60ae <__cmpsf2>
     854:	81 11       	cpse	r24, r1
     856:	78 c0       	rjmp	.+240    	; 0x948 <__stack+0xe9>
     858:	02 c0       	rjmp	.+4      	; 0x85e <_ZN5Gates17reverse_kroneckerEP7Complexi+0xd2>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     85a:	e1 2c       	mov	r14, r1
     85c:	f1 2c       	mov	r15, r1
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
     85e:	c3 01       	movw	r24, r6
     860:	b2 01       	movw	r22, r4
     862:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__fixsfsi>
     866:	ab 01       	movw	r20, r22
     868:	b7 01       	movw	r22, r14
     86a:	c8 01       	movw	r24, r16
     86c:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <_ZN5Utils10int2binstrEii>
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     870:	12 14       	cp	r1, r2
     872:	13 04       	cpc	r1, r3
     874:	0c f0       	brlt	.+2      	; 0x878 <__stack+0x19>
     876:	6f c0       	rjmp	.+222    	; 0x956 <__stack+0xf7>
     878:	7c 01       	movw	r14, r24
     87a:	54 01       	movw	r10, r8
     87c:	64 01       	movw	r12, r8
     87e:	f8 e0       	ldi	r31, 0x08	; 8
     880:	cf 0e       	add	r12, r31
     882:	d1 1c       	adc	r13, r1
     884:	49 a0       	ldd	r4, Y+33	; 0x21
     886:	5a a0       	ldd	r5, Y+34	; 0x22
     888:	48 0e       	add	r4, r24
     88a:	59 1e       	adc	r5, r25
				if(toBin[j]=='1'){
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     88c:	68 94       	set
     88e:	77 24       	eor	r7, r7
     890:	73 f8       	bld	r7, 3
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
				if(toBin[j]=='1'){
     892:	f7 01       	movw	r30, r14
     894:	81 91       	ld	r24, Z+
     896:	7f 01       	movw	r14, r30
     898:	81 33       	cpi	r24, 0x31	; 49
     89a:	29 f5       	brne	.+74     	; 0x8e6 <__stack+0x87>
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
     89c:	00 e0       	ldi	r16, 0x00	; 0
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	98 01       	movw	r18, r16
     8a2:	b9 01       	movw	r22, r18
     8a4:	a8 01       	movw	r20, r16
     8a6:	ce 01       	movw	r24, r28
     8a8:	49 96       	adiw	r24, 0x19	; 25
     8aa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     8ae:	fe 01       	movw	r30, r28
     8b0:	79 96       	adiw	r30, 0x19	; 25
     8b2:	d5 01       	movw	r26, r10
     8b4:	87 2d       	mov	r24, r7
     8b6:	01 90       	ld	r0, Z+
     8b8:	0d 92       	st	X+, r0
     8ba:	8a 95       	dec	r24
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <__stack+0x57>
     8be:	00 e0       	ldi	r16, 0x00	; 0
     8c0:	10 e0       	ldi	r17, 0x00	; 0
     8c2:	98 01       	movw	r18, r16
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e8       	ldi	r22, 0x80	; 128
     8ca:	7f e3       	ldi	r23, 0x3F	; 63
     8cc:	ce 01       	movw	r24, r28
     8ce:	41 96       	adiw	r24, 0x11	; 17
     8d0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     8d4:	fe 01       	movw	r30, r28
     8d6:	71 96       	adiw	r30, 0x11	; 17
     8d8:	d6 01       	movw	r26, r12
     8da:	87 2d       	mov	r24, r7
     8dc:	01 90       	ld	r0, Z+
     8de:	0d 92       	st	X+, r0
     8e0:	8a 95       	dec	r24
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <__stack+0x7d>
     8e4:	24 c0       	rjmp	.+72     	; 0x92e <__stack+0xcf>
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     8e6:	00 e0       	ldi	r16, 0x00	; 0
     8e8:	10 e0       	ldi	r17, 0x00	; 0
     8ea:	98 01       	movw	r18, r16
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	60 e8       	ldi	r22, 0x80	; 128
     8f2:	7f e3       	ldi	r23, 0x3F	; 63
     8f4:	ce 01       	movw	r24, r28
     8f6:	09 96       	adiw	r24, 0x09	; 9
     8f8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     8fc:	fe 01       	movw	r30, r28
     8fe:	39 96       	adiw	r30, 0x09	; 9
     900:	d5 01       	movw	r26, r10
     902:	87 2d       	mov	r24, r7
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
     908:	8a 95       	dec	r24
     90a:	e1 f7       	brne	.-8      	; 0x904 <__stack+0xa5>
     90c:	00 e0       	ldi	r16, 0x00	; 0
     90e:	10 e0       	ldi	r17, 0x00	; 0
     910:	98 01       	movw	r18, r16
     912:	b9 01       	movw	r22, r18
     914:	a8 01       	movw	r20, r16
     916:	ce 01       	movw	r24, r28
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
     91e:	fe 01       	movw	r30, r28
     920:	31 96       	adiw	r30, 0x01	; 1
     922:	d6 01       	movw	r26, r12
     924:	87 2d       	mov	r24, r7
     926:	01 90       	ld	r0, Z+
     928:	0d 92       	st	X+, r0
     92a:	8a 95       	dec	r24
     92c:	e1 f7       	brne	.-8      	; 0x926 <__stack+0xc7>
     92e:	f0 e1       	ldi	r31, 0x10	; 16
     930:	af 0e       	add	r10, r31
     932:	b1 1c       	adc	r11, r1
     934:	20 e1       	ldi	r18, 0x10	; 16
     936:	c2 0e       	add	r12, r18
     938:	d1 1c       	adc	r13, r1
		
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     93a:	e4 14       	cp	r14, r4
     93c:	f5 04       	cpc	r15, r5
     93e:	09 f0       	breq	.+2      	; 0x942 <__stack+0xe3>
     940:	a8 cf       	rjmp	.-176    	; 0x892 <__stack+0x33>
     942:	09 c0       	rjmp	.+18     	; 0x956 <__stack+0xf7>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     944:	e1 2c       	mov	r14, r1
     946:	f1 2c       	mov	r15, r1
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	e8 1a       	sub	r14, r24
     94c:	f8 0a       	sbc	r15, r24
     94e:	ea 14       	cp	r14, r10
     950:	fb 04       	cpc	r15, r11
     952:	09 f0       	breq	.+2      	; 0x956 <__stack+0xf7>
     954:	71 cf       	rjmp	.-286    	; 0x838 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xac>
				index_rev_kro+=2;
			}
			break;
		}
	return reversed_kronecker;
}
     956:	c4 01       	movw	r24, r8
     958:	a4 96       	adiw	r28, 0x24	; 36
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	7f 90       	pop	r7
     97e:	6f 90       	pop	r6
     980:	5f 90       	pop	r5
     982:	4f 90       	pop	r4
     984:	3f 90       	pop	r3
     986:	2f 90       	pop	r2
     988:	08 95       	ret

0000098a <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     98a:	2f 92       	push	r2
     98c:	3f 92       	push	r3
     98e:	4f 92       	push	r4
     990:	5f 92       	push	r5
     992:	6f 92       	push	r6
     994:	7f 92       	push	r7
     996:	8f 92       	push	r8
     998:	9f 92       	push	r9
     99a:	af 92       	push	r10
     99c:	bf 92       	push	r11
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	28 97       	sbiw	r28, 0x08	; 8
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	7c 01       	movw	r14, r24
     9c0:	5b 01       	movw	r10, r22
     9c2:	8a 01       	movw	r16, r20
     9c4:	3e 83       	std	Y+6, r19	; 0x06
     9c6:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     9c8:	41 30       	cpi	r20, 0x01	; 1
     9ca:	51 05       	cpc	r21, r1
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <_ZN5Gates9kroneckerEP7Complexii+0x46>
     9ce:	bb c0       	rjmp	.+374    	; 0xb46 <_ZN5Gates9kroneckerEP7Complexii+0x1bc>
	int kron_size=utils.custom_pow(2,qb_count);
     9d0:	9a 01       	movw	r18, r20
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e4       	ldi	r23, 0x40	; 64
     9da:	0e 94 65 2f 	call	0x5eca	; 0x5eca <_ZN5Utils10custom_powEfi>
     9de:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__fixsfsi>
     9e2:	78 87       	std	Y+8, r23	; 0x08
     9e4:	6f 83       	std	Y+7, r22	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     9e6:	9b 01       	movw	r18, r22
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	22 0f       	add	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	22 0f       	add	r18, r18
     9f2:	33 1f       	adc	r19, r19
     9f4:	3c 83       	std	Y+4, r19	; 0x04
     9f6:	2b 83       	std	Y+3, r18	; 0x03
     9f8:	c9 01       	movw	r24, r18
     9fa:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
     9fe:	89 83       	std	Y+1, r24	; 0x01
     a00:	9a 83       	std	Y+2, r25	; 0x02
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     a02:	8f 81       	ldd	r24, Y+7	; 0x07
     a04:	98 85       	ldd	r25, Y+8	; 0x08
     a06:	18 16       	cp	r1, r24
     a08:	19 06       	cpc	r1, r25
     a0a:	0c f0       	brlt	.+2      	; 0xa0e <_ZN5Gates9kroneckerEP7Complexii+0x84>
     a0c:	53 c0       	rjmp	.+166    	; 0xab4 <_ZN5Gates9kroneckerEP7Complexii+0x12a>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     a0e:	18 01       	movw	r2, r16
     a10:	22 0c       	add	r2, r2
     a12:	33 1c       	adc	r3, r3
     a14:	c9 80       	ldd	r12, Y+1	; 0x01
     a16:	da 80       	ldd	r13, Y+2	; 0x02
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     a18:	61 2c       	mov	r6, r1
     a1a:	71 2c       	mov	r7, r1
	int kron_size=utils.custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
     a1c:	e2 e0       	ldi	r30, 0x02	; 2
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=utils.custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
     a20:	41 2c       	mov	r4, r1
     a22:	51 2c       	mov	r5, r1
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     a24:	c6 01       	movw	r24, r12
     a26:	cf 80       	ldd	r12, Y+7	; 0x07
     a28:	d8 84       	ldd	r13, Y+8	; 0x08
     a2a:	47 01       	movw	r8, r14
     a2c:	98 87       	std	Y+8, r25	; 0x08
     a2e:	8f 83       	std	Y+7, r24	; 0x07
     a30:	2e 16       	cp	r2, r30
     a32:	3f 06       	cpc	r3, r31
     a34:	29 f4       	brne	.+10     	; 0xa40 <_ZN5Gates9kroneckerEP7Complexii+0xb6>
     a36:	9f ef       	ldi	r25, 0xFF	; 255
     a38:	49 1a       	sub	r4, r25
     a3a:	59 0a       	sbc	r5, r25
     a3c:	e2 e0       	ldi	r30, 0x02	; 2
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     a40:	7f 01       	movw	r14, r30
     a42:	2f ef       	ldi	r18, 0xFF	; 255
     a44:	e2 1a       	sub	r14, r18
     a46:	f2 0a       	sbc	r15, r18
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	ea 0d       	add	r30, r10
     a56:	fb 1d       	adc	r31, r11
     a58:	00 81       	ld	r16, Z
     a5a:	11 81       	ldd	r17, Z+1	; 0x01
     a5c:	22 81       	ldd	r18, Z+2	; 0x02
     a5e:	33 81       	ldd	r19, Z+3	; 0x03
     a60:	44 81       	ldd	r20, Z+4	; 0x04
     a62:	55 81       	ldd	r21, Z+5	; 0x05
     a64:	66 81       	ldd	r22, Z+6	; 0x06
     a66:	77 81       	ldd	r23, Z+7	; 0x07
     a68:	c2 01       	movw	r24, r4
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	8a 0d       	add	r24, r10
     a78:	9b 1d       	adc	r25, r11
     a7a:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7Complex3mulES_>
     a7e:	ef 81       	ldd	r30, Y+7	; 0x07
     a80:	f8 85       	ldd	r31, Y+8	; 0x08
     a82:	20 83       	st	Z, r18
     a84:	31 83       	std	Z+1, r19	; 0x01
     a86:	42 83       	std	Z+2, r20	; 0x02
     a88:	53 83       	std	Z+3, r21	; 0x03
     a8a:	64 83       	std	Z+4, r22	; 0x04
     a8c:	75 83       	std	Z+5, r23	; 0x05
     a8e:	86 83       	std	Z+6, r24	; 0x06
     a90:	97 83       	std	Z+7, r25	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=VECTOR_QUBIT_SIZE;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     a92:	ff ef       	ldi	r31, 0xFF	; 255
     a94:	6f 1a       	sub	r6, r31
     a96:	7f 0a       	sbc	r7, r31
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	28 5f       	subi	r18, 0xF8	; 248
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	38 87       	std	Y+8, r19	; 0x08
     aa2:	2f 83       	std	Y+7, r18	; 0x07
     aa4:	6c 14       	cp	r6, r12
     aa6:	7d 04       	cpc	r7, r13
     aa8:	11 f0       	breq	.+4      	; 0xaae <_ZN5Gates9kroneckerEP7Complexii+0x124>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     aaa:	f7 01       	movw	r30, r14
     aac:	c1 cf       	rjmp	.-126    	; 0xa30 <_ZN5Gates9kroneckerEP7Complexii+0xa6>
     aae:	d8 86       	std	Y+8, r13	; 0x08
     ab0:	cf 82       	std	Y+7, r12	; 0x07
     ab2:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     ab4:	8d 81       	ldd	r24, Y+5	; 0x05
     ab6:	9e 81       	ldd	r25, Y+6	; 0x06
     ab8:	89 2b       	or	r24, r25
     aba:	a9 f5       	brne	.+106    	; 0xb26 <_ZN5Gates9kroneckerEP7Complexii+0x19c>
				binary_touch=0;
				break;
			}
	}
	//print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	9a 81       	ldd	r25, Y+2	; 0x02
     ac0:	44 c0       	rjmp	.+136    	; 0xb4a <_ZN5Gates9kroneckerEP7Complexii+0x1c0>
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     ac2:	51 01       	movw	r10, r2
     ac4:	f1 01       	movw	r30, r2
     ac6:	40 81       	ld	r20, Z
     ac8:	51 81       	ldd	r21, Z+1	; 0x01
     aca:	62 81       	ldd	r22, Z+2	; 0x02
     acc:	73 81       	ldd	r23, Z+3	; 0x03
     ace:	c7 01       	movw	r24, r14
     ad0:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Gates5touchEd>
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	e9 f4       	brne	.+58     	; 0xb12 <_ZN5Gates9kroneckerEP7Complexii+0x188>
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	86 0d       	add	r24, r6
     ade:	97 1d       	adc	r25, r7
     ae0:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     ae2:	10 82       	st	Z, r1
     ae4:	11 82       	std	Z+1, r1	; 0x01
     ae6:	12 82       	std	Z+2, r1	; 0x02
     ae8:	13 82       	std	Z+3, r1	; 0x03
     aea:	14 82       	std	Z+4, r1	; 0x04
     aec:	15 82       	std	Z+5, r1	; 0x05
     aee:	16 82       	std	Z+6, r1	; 0x06
     af0:	17 82       	std	Z+7, r1	; 0x07
     af2:	38 96       	adiw	r30, 0x08	; 8
     af4:	e8 17       	cp	r30, r24
     af6:	f9 07       	cpc	r31, r25
     af8:	a1 f7       	brne	.-24     	; 0xae2 <_ZN5Gates9kroneckerEP7Complexii+0x158>
				kronvec[i].re=binary_touch;
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e8       	ldi	r26, 0x80	; 128
     b00:	bf e3       	ldi	r27, 0x3F	; 63
     b02:	f5 01       	movw	r30, r10
     b04:	80 83       	st	Z, r24
     b06:	91 83       	std	Z+1, r25	; 0x01
     b08:	a2 83       	std	Z+2, r26	; 0x02
     b0a:	b3 83       	std	Z+3, r27	; 0x03
				binary_touch=0;
				break;
			}
	}
	//print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	1c c0       	rjmp	.+56     	; 0xb4a <_ZN5Gates9kroneckerEP7Complexii+0x1c0>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     b12:	ff ef       	ldi	r31, 0xFF	; 255
     b14:	cf 1a       	sub	r12, r31
     b16:	df 0a       	sbc	r13, r31
     b18:	28 e0       	ldi	r18, 0x08	; 8
     b1a:	22 0e       	add	r2, r18
     b1c:	31 1c       	adc	r3, r1
     b1e:	c8 14       	cp	r12, r8
     b20:	d9 04       	cpc	r13, r9
     b22:	79 f6       	brne	.-98     	; 0xac2 <_ZN5Gates9kroneckerEP7Complexii+0x138>
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
     b26:	49 80       	ldd	r4, Y+1	; 0x01
     b28:	5a 80       	ldd	r5, Y+2	; 0x02
     b2a:	00 e0       	ldi	r16, 0x00	; 0
     b2c:	10 e0       	ldi	r17, 0x00	; 0
     b2e:	8f 80       	ldd	r8, Y+7	; 0x07
     b30:	98 84       	ldd	r9, Y+8	; 0x08
     b32:	18 14       	cp	r1, r8
     b34:	19 04       	cpc	r1, r9
     b36:	ec f7       	brge	.-6      	; 0xb32 <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
     b38:	64 2c       	mov	r6, r4
     b3a:	75 2c       	mov	r7, r5
     b3c:	24 2c       	mov	r2, r4
     b3e:	35 2c       	mov	r3, r5
     b40:	c0 2e       	mov	r12, r16
     b42:	d1 2e       	mov	r13, r17
     b44:	be cf       	rjmp	.-132    	; 0xac2 <_ZN5Gates9kroneckerEP7Complexii+0x138>
		}
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     b46:	86 2f       	mov	r24, r22
     b48:	9b 2d       	mov	r25, r11
				break;
			}
	}
	//print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
}
     b4a:	28 96       	adiw	r28, 0x08	; 8
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	bf 90       	pop	r11
     b68:	af 90       	pop	r10
     b6a:	9f 90       	pop	r9
     b6c:	8f 90       	pop	r8
     b6e:	7f 90       	pop	r7
     b70:	6f 90       	pop	r6
     b72:	5f 90       	pop	r5
     b74:	4f 90       	pop	r4
     b76:	3f 90       	pop	r3
     b78:	2f 90       	pop	r2
     b7a:	08 95       	ret

00000b7c <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     b7c:	2f 92       	push	r2
     b7e:	3f 92       	push	r3
     b80:	4f 92       	push	r4
     b82:	5f 92       	push	r5
     b84:	6f 92       	push	r6
     b86:	7f 92       	push	r7
     b88:	8f 92       	push	r8
     b8a:	9f 92       	push	r9
     b8c:	af 92       	push	r10
     b8e:	bf 92       	push	r11
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	28 97       	sbiw	r28, 0x08	; 8
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	9e 83       	std	Y+6, r25	; 0x06
     bb2:	8d 83       	std	Y+5, r24	; 0x05
     bb4:	7a 83       	std	Y+2, r23	; 0x02
     bb6:	69 83       	std	Y+1, r22	; 0x01
     bb8:	04 2f       	mov	r16, r20
     bba:	15 2f       	mov	r17, r21
     bbc:	c2 2e       	mov	r12, r18
     bbe:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     bc0:	cb 01       	movw	r24, r22
     bc2:	82 95       	swap	r24
     bc4:	92 95       	swap	r25
     bc6:	90 7f       	andi	r25, 0xF0	; 240
     bc8:	98 27       	eor	r25, r24
     bca:	80 7f       	andi	r24, 0xF0	; 240
     bcc:	98 27       	eor	r25, r24
     bce:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
     bd2:	8b 83       	std	Y+3, r24	; 0x03
     bd4:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     bd6:	29 80       	ldd	r2, Y+1	; 0x01
     bd8:	3a 80       	ldd	r3, Y+2	; 0x02
     bda:	22 0c       	add	r2, r2
     bdc:	33 1c       	adc	r3, r3
     bde:	12 14       	cp	r1, r2
     be0:	13 04       	cpc	r1, r3
     be2:	0c f0       	brlt	.+2      	; 0xbe6 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     be4:	ac c0       	rjmp	.+344    	; 0xd3e <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     be6:	a8 2e       	mov	r10, r24
     be8:	b9 2e       	mov	r11, r25
     bea:	e0 2e       	mov	r14, r16
     bec:	f1 2e       	mov	r15, r17
     bee:	0c 2d       	mov	r16, r12
     bf0:	1d 2d       	mov	r17, r13
     bf2:	81 2c       	mov	r8, r1
     bf4:	91 2c       	mov	r9, r1
     bf6:	b8 86       	std	Y+8, r11	; 0x08
     bf8:	af 82       	std	Y+7, r10	; 0x07
     bfa:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     bfc:	f7 01       	movw	r30, r14
     bfe:	41 90       	ld	r4, Z+
     c00:	51 90       	ld	r5, Z+
     c02:	7f 01       	movw	r14, r30
     c04:	66 24       	eor	r6, r6
     c06:	57 fc       	sbrc	r5, 7
     c08:	60 94       	com	r6
     c0a:	76 2c       	mov	r7, r6
     c0c:	c3 01       	movw	r24, r6
     c0e:	b2 01       	movw	r22, r4
     c10:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
     c14:	2b ed       	ldi	r18, 0xDB	; 219
     c16:	3f e0       	ldi	r19, 0x0F	; 15
     c18:	49 e4       	ldi	r20, 0x49	; 73
     c1a:	50 e4       	ldi	r21, 0x40	; 64
     c1c:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	44 eb       	ldi	r20, 0xB4	; 180
     c26:	53 e4       	ldi	r21, 0x43	; 67
     c28:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
     c2c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <cos>
     c30:	ef 81       	ldd	r30, Y+7	; 0x07
     c32:	f8 85       	ldd	r31, Y+8	; 0x08
     c34:	60 83       	st	Z, r22
     c36:	71 83       	std	Z+1, r23	; 0x01
     c38:	82 83       	std	Z+2, r24	; 0x02
     c3a:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     c3c:	c3 01       	movw	r24, r6
     c3e:	b2 01       	movw	r22, r4
     c40:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
     c44:	2b ed       	ldi	r18, 0xDB	; 219
     c46:	3f e0       	ldi	r19, 0x0F	; 15
     c48:	49 e4       	ldi	r20, 0x49	; 73
     c4a:	50 e4       	ldi	r21, 0x40	; 64
     c4c:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	44 eb       	ldi	r20, 0xB4	; 180
     c56:	53 e4       	ldi	r21, 0x43	; 67
     c58:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
     c5c:	0e 94 6f 33 	call	0x66de	; 0x66de <sin>
     c60:	2b 01       	movw	r4, r22
     c62:	3c 01       	movw	r6, r24
     c64:	58 01       	movw	r10, r16
     c66:	f8 01       	movw	r30, r16
     c68:	61 91       	ld	r22, Z+
     c6a:	71 91       	ld	r23, Z+
     c6c:	8f 01       	movw	r16, r30
     c6e:	88 27       	eor	r24, r24
     c70:	77 fd       	sbrc	r23, 7
     c72:	80 95       	com	r24
     c74:	98 2f       	mov	r25, r24
     c76:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
     c7a:	2b ed       	ldi	r18, 0xDB	; 219
     c7c:	3f e0       	ldi	r19, 0x0F	; 15
     c7e:	49 e4       	ldi	r20, 0x49	; 73
     c80:	50 e4       	ldi	r21, 0x40	; 64
     c82:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	44 e3       	ldi	r20, 0x34	; 52
     c8c:	53 e4       	ldi	r21, 0x43	; 67
     c8e:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
     c92:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <cos>
     c96:	9b 01       	movw	r18, r22
     c98:	ac 01       	movw	r20, r24
     c9a:	c3 01       	movw	r24, r6
     c9c:	b2 01       	movw	r22, r4
     c9e:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     ca2:	ef 81       	ldd	r30, Y+7	; 0x07
     ca4:	f8 85       	ldd	r31, Y+8	; 0x08
     ca6:	60 87       	std	Z+8, r22	; 0x08
     ca8:	71 87       	std	Z+9, r23	; 0x09
     caa:	82 87       	std	Z+10, r24	; 0x0a
     cac:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index]*M_PI)/180);  // BETA IM
     cae:	f6 01       	movw	r30, r12
     cb0:	60 81       	ld	r22, Z
     cb2:	71 81       	ldd	r23, Z+1	; 0x01
     cb4:	88 27       	eor	r24, r24
     cb6:	77 fd       	sbrc	r23, 7
     cb8:	80 95       	com	r24
     cba:	98 2f       	mov	r25, r24
     cbc:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
     cc0:	2b ed       	ldi	r18, 0xDB	; 219
     cc2:	3f e0       	ldi	r19, 0x0F	; 15
     cc4:	49 e4       	ldi	r20, 0x49	; 73
     cc6:	50 e4       	ldi	r21, 0x40	; 64
     cc8:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	44 eb       	ldi	r20, 0xB4	; 180
     cd2:	53 e4       	ldi	r21, 0x43	; 67
     cd4:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
     cd8:	0e 94 6f 33 	call	0x66de	; 0x66de <sin>
     cdc:	2b 01       	movw	r4, r22
     cde:	3c 01       	movw	r6, r24
     ce0:	f5 01       	movw	r30, r10
     ce2:	60 81       	ld	r22, Z
     ce4:	71 81       	ldd	r23, Z+1	; 0x01
     ce6:	88 27       	eor	r24, r24
     ce8:	77 fd       	sbrc	r23, 7
     cea:	80 95       	com	r24
     cec:	98 2f       	mov	r25, r24
     cee:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
     cf2:	2b ed       	ldi	r18, 0xDB	; 219
     cf4:	3f e0       	ldi	r19, 0x0F	; 15
     cf6:	49 e4       	ldi	r20, 0x49	; 73
     cf8:	50 e4       	ldi	r21, 0x40	; 64
     cfa:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	44 e3       	ldi	r20, 0x34	; 52
     d04:	53 e4       	ldi	r21, 0x43	; 67
     d06:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
     d0a:	0e 94 6f 33 	call	0x66de	; 0x66de <sin>
     d0e:	9b 01       	movw	r18, r22
     d10:	ac 01       	movw	r20, r24
     d12:	c3 01       	movw	r24, r6
     d14:	b2 01       	movw	r22, r4
     d16:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     d1a:	ef 81       	ldd	r30, Y+7	; 0x07
     d1c:	f8 85       	ldd	r31, Y+8	; 0x08
     d1e:	64 87       	std	Z+12, r22	; 0x0c
     d20:	75 87       	std	Z+13, r23	; 0x0d
     d22:	86 87       	std	Z+14, r24	; 0x0e
     d24:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     d26:	f2 e0       	ldi	r31, 0x02	; 2
     d28:	8f 0e       	add	r8, r31
     d2a:	91 1c       	adc	r9, r1
     d2c:	8f 81       	ldd	r24, Y+7	; 0x07
     d2e:	98 85       	ldd	r25, Y+8	; 0x08
     d30:	40 96       	adiw	r24, 0x10	; 16
     d32:	98 87       	std	Y+8, r25	; 0x08
     d34:	8f 83       	std	Y+7, r24	; 0x07
     d36:	82 14       	cp	r8, r2
     d38:	93 04       	cpc	r9, r3
     d3a:	0c f4       	brge	.+2      	; 0xd3e <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     d3c:	5e cf       	rjmp	.-324    	; 0xbfa <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index]*M_PI)/180);  // BETA IM
		thephi_index++;
	}
	print_states(qb_count*2,vec,"Before: ");
     d3e:	45 e7       	ldi	r20, 0x75	; 117
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	6b 81       	ldd	r22, Y+3	; 0x03
     d44:	7c 81       	ldd	r23, Y+4	; 0x04
     d46:	c1 01       	movw	r24, r2
     d48:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12print_statesiP7ComplexPc>
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     d4c:	21 e0       	ldi	r18, 0x01	; 1
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	49 81       	ldd	r20, Y+1	; 0x01
     d52:	5a 81       	ldd	r21, Y+2	; 0x02
     d54:	6b 81       	ldd	r22, Y+3	; 0x03
     d56:	7c 81       	ldd	r23, Y+4	; 0x04
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN5Gates9kroneckerEP7Complexii>
}
     d60:	28 96       	adiw	r28, 0x08	; 8
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	bf 90       	pop	r11
     d7e:	af 90       	pop	r10
     d80:	9f 90       	pop	r9
     d82:	8f 90       	pop	r8
     d84:	7f 90       	pop	r7
     d86:	6f 90       	pop	r6
     d88:	5f 90       	pop	r5
     d8a:	4f 90       	pop	r4
     d8c:	3f 90       	pop	r3
     d8e:	2f 90       	pop	r2
     d90:	08 95       	ret

00000d92 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     d92:	4f 92       	push	r4
     d94:	5f 92       	push	r5
     d96:	6f 92       	push	r6
     d98:	7f 92       	push	r7
     d9a:	8f 92       	push	r8
     d9c:	9f 92       	push	r9
     d9e:	af 92       	push	r10
     da0:	bf 92       	push	r11
     da2:	cf 92       	push	r12
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
     db4:	66 2e       	mov	r6, r22
     db6:	77 2e       	mov	r7, r23
     db8:	6a 01       	movw	r12, r20
	int kron_size=utils.custom_pow(2,qb_count);
     dba:	9a 01       	movw	r18, r20
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e4       	ldi	r23, 0x40	; 64
     dc4:	0e 94 65 2f 	call	0x5eca	; 0x5eca <_ZN5Utils10custom_powEfi>
     dc8:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__fixsfsi>
     dcc:	4b 01       	movw	r8, r22
     dce:	5c 01       	movw	r10, r24
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	c8 16       	cp	r12, r24
     dd4:	d1 04       	cpc	r13, r1
     dd6:	44 f0       	brlt	.+16     	; 0xde8 <_ZN5Gates8vec2amplEP7Complexi+0x56>
     dd8:	a4 01       	movw	r20, r8
     dda:	66 2d       	mov	r22, r6
     ddc:	77 2d       	mov	r23, r7
     dde:	ce 01       	movw	r24, r28
     de0:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN5Gates17reverse_kroneckerEP7Complexi>
     de4:	68 2e       	mov	r6, r24
     de6:	79 2e       	mov	r7, r25
	
	int* newthephi=(int*)malloc(sizeof(int)*(qb_count*2));
     de8:	c6 01       	movw	r24, r12
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
     df6:	48 2e       	mov	r4, r24
     df8:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_count*2;i++) if(i%2==0) newthephi[i]=(360*acos(vec[i].re))/M_PI; else newthephi[i]=(180*vec[i].arg())/M_PI;
     dfa:	cc 0c       	add	r12, r12
     dfc:	dd 1c       	adc	r13, r13
     dfe:	1c 14       	cp	r1, r12
     e00:	1d 04       	cpc	r1, r13
     e02:	f4 f5       	brge	.+124    	; 0xe80 <_ZN5Gates8vec2amplEP7Complexi+0xee>
     e04:	e6 2c       	mov	r14, r6
     e06:	f7 2c       	mov	r15, r7
     e08:	08 2f       	mov	r16, r24
     e0a:	19 2f       	mov	r17, r25
     e0c:	c0 e0       	ldi	r28, 0x00	; 0
     e0e:	d0 e0       	ldi	r29, 0x00	; 0
     e10:	c0 fd       	sbrc	r28, 0
     e12:	19 c0       	rjmp	.+50     	; 0xe46 <_ZN5Gates8vec2amplEP7Complexi+0xb4>
     e14:	f7 01       	movw	r30, r14
     e16:	60 81       	ld	r22, Z
     e18:	71 81       	ldd	r23, Z+1	; 0x01
     e1a:	82 81       	ldd	r24, Z+2	; 0x02
     e1c:	93 81       	ldd	r25, Z+3	; 0x03
     e1e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <acos>
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	44 eb       	ldi	r20, 0xB4	; 180
     e28:	53 e4       	ldi	r21, 0x43	; 67
     e2a:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     e2e:	2b ed       	ldi	r18, 0xDB	; 219
     e30:	3f e0       	ldi	r19, 0x0F	; 15
     e32:	49 e4       	ldi	r20, 0x49	; 73
     e34:	50 e4       	ldi	r21, 0x40	; 64
     e36:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
     e3a:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__fixsfsi>
     e3e:	f8 01       	movw	r30, r16
     e40:	71 83       	std	Z+1, r23	; 0x01
     e42:	60 83       	st	Z, r22
     e44:	14 c0       	rjmp	.+40     	; 0xe6e <_ZN5Gates8vec2amplEP7Complexi+0xdc>
     e46:	c7 01       	movw	r24, r14
     e48:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN7Complex3argEv>
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	44 e3       	ldi	r20, 0x34	; 52
     e52:	53 e4       	ldi	r21, 0x43	; 67
     e54:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
     e58:	2b ed       	ldi	r18, 0xDB	; 219
     e5a:	3f e0       	ldi	r19, 0x0F	; 15
     e5c:	49 e4       	ldi	r20, 0x49	; 73
     e5e:	50 e4       	ldi	r21, 0x40	; 64
     e60:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
     e64:	0e 94 f7 30 	call	0x61ee	; 0x61ee <__fixsfsi>
     e68:	f8 01       	movw	r30, r16
     e6a:	71 83       	std	Z+1, r23	; 0x01
     e6c:	60 83       	st	Z, r22
     e6e:	21 96       	adiw	r28, 0x01	; 1
     e70:	f8 e0       	ldi	r31, 0x08	; 8
     e72:	ef 0e       	add	r14, r31
     e74:	f1 1c       	adc	r15, r1
     e76:	0e 5f       	subi	r16, 0xFE	; 254
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	cc 15       	cp	r28, r12
     e7c:	dd 05       	cpc	r29, r13
     e7e:	41 f6       	brne	.-112    	; 0xe10 <_ZN5Gates8vec2amplEP7Complexi+0x7e>
	
	print_states(kron_size,vec,"After: ");
     e80:	4e e7       	ldi	r20, 0x7E	; 126
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	66 2d       	mov	r22, r6
     e86:	77 2d       	mov	r23, r7
     e88:	c4 01       	movw	r24, r8
     e8a:	0e 94 2a 03 	call	0x654	; 0x654 <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     e8e:	84 2d       	mov	r24, r4
     e90:	95 2d       	mov	r25, r5
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	bf 90       	pop	r11
     ea4:	af 90       	pop	r10
     ea6:	9f 90       	pop	r9
     ea8:	8f 90       	pop	r8
     eaa:	7f 90       	pop	r7
     eac:	6f 90       	pop	r6
     eae:	5f 90       	pop	r5
     eb0:	4f 90       	pop	r4
     eb2:	08 95       	ret

00000eb4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     eb4:	2f 92       	push	r2
     eb6:	3f 92       	push	r3
     eb8:	4f 92       	push	r4
     eba:	5f 92       	push	r5
     ebc:	6f 92       	push	r6
     ebe:	7f 92       	push	r7
     ec0:	8f 92       	push	r8
     ec2:	9f 92       	push	r9
     ec4:	af 92       	push	r10
     ec6:	bf 92       	push	r11
     ec8:	cf 92       	push	r12
     eca:	df 92       	push	r13
     ecc:	ef 92       	push	r14
     ece:	ff 92       	push	r15
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	60 97       	sbiw	r28, 0x10	; 16
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	4b 01       	movw	r8, r22
     eea:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     eec:	80 e1       	ldi	r24, 0x10	; 16
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
     ef4:	38 2e       	mov	r3, r24
     ef6:	29 2e       	mov	r2, r25
     ef8:	c8 2e       	mov	r12, r24
     efa:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     efc:	a1 2c       	mov	r10, r1
     efe:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     f00:	24 01       	movw	r4, r8
     f02:	88 e0       	ldi	r24, 0x08	; 8
     f04:	48 0e       	add	r4, r24
     f06:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     f08:	ce 01       	movw	r24, r28
     f0a:	09 96       	adiw	r24, 0x09	; 9
     f0c:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     f10:	75 01       	movw	r14, r10
     f12:	ee 0c       	add	r14, r14
     f14:	ff 1c       	adc	r15, r15
     f16:	ee 0c       	add	r14, r14
     f18:	ff 1c       	adc	r15, r15
     f1a:	ee 0c       	add	r14, r14
     f1c:	ff 1c       	adc	r15, r15
     f1e:	e6 0c       	add	r14, r6
     f20:	f7 1c       	adc	r15, r7
     f22:	d7 01       	movw	r26, r14
     f24:	0c 91       	ld	r16, X
     f26:	11 96       	adiw	r26, 0x01	; 1
     f28:	1c 91       	ld	r17, X
     f2a:	11 97       	sbiw	r26, 0x01	; 1
     f2c:	12 96       	adiw	r26, 0x02	; 2
     f2e:	2c 91       	ld	r18, X
     f30:	12 97       	sbiw	r26, 0x02	; 2
     f32:	13 96       	adiw	r26, 0x03	; 3
     f34:	3c 91       	ld	r19, X
     f36:	13 97       	sbiw	r26, 0x03	; 3
     f38:	14 96       	adiw	r26, 0x04	; 4
     f3a:	4c 91       	ld	r20, X
     f3c:	14 97       	sbiw	r26, 0x04	; 4
     f3e:	15 96       	adiw	r26, 0x05	; 5
     f40:	5c 91       	ld	r21, X
     f42:	15 97       	sbiw	r26, 0x05	; 5
     f44:	16 96       	adiw	r26, 0x06	; 6
     f46:	6c 91       	ld	r22, X
     f48:	16 97       	sbiw	r26, 0x06	; 6
     f4a:	17 96       	adiw	r26, 0x07	; 7
     f4c:	7c 91       	ld	r23, X
     f4e:	c4 01       	movw	r24, r8
     f50:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7Complex3mulES_>
     f54:	02 2f       	mov	r16, r18
     f56:	13 2f       	mov	r17, r19
     f58:	24 2f       	mov	r18, r20
     f5a:	35 2f       	mov	r19, r21
     f5c:	46 2f       	mov	r20, r22
     f5e:	57 2f       	mov	r21, r23
     f60:	68 2f       	mov	r22, r24
     f62:	79 2f       	mov	r23, r25
     f64:	ce 01       	movw	r24, r28
     f66:	09 96       	adiw	r24, 0x09	; 9
     f68:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN7Complex3addES_>
     f6c:	29 87       	std	Y+9, r18	; 0x09
     f6e:	3a 87       	std	Y+10, r19	; 0x0a
     f70:	4b 87       	std	Y+11, r20	; 0x0b
     f72:	5c 87       	std	Y+12, r21	; 0x0c
     f74:	6d 87       	std	Y+13, r22	; 0x0d
     f76:	7e 87       	std	Y+14, r23	; 0x0e
     f78:	8f 87       	std	Y+15, r24	; 0x0f
     f7a:	98 8b       	std	Y+16, r25	; 0x10
     f7c:	f7 01       	movw	r30, r14
     f7e:	70 96       	adiw	r30, 0x10	; 16
     f80:	d7 01       	movw	r26, r14
     f82:	50 96       	adiw	r26, 0x10	; 16
     f84:	0c 91       	ld	r16, X
     f86:	11 81       	ldd	r17, Z+1	; 0x01
     f88:	22 81       	ldd	r18, Z+2	; 0x02
     f8a:	33 81       	ldd	r19, Z+3	; 0x03
     f8c:	44 81       	ldd	r20, Z+4	; 0x04
     f8e:	55 81       	ldd	r21, Z+5	; 0x05
     f90:	66 81       	ldd	r22, Z+6	; 0x06
     f92:	77 81       	ldd	r23, Z+7	; 0x07
     f94:	c2 01       	movw	r24, r4
     f96:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7Complex3mulES_>
     f9a:	02 2f       	mov	r16, r18
     f9c:	13 2f       	mov	r17, r19
     f9e:	24 2f       	mov	r18, r20
     fa0:	35 2f       	mov	r19, r21
     fa2:	46 2f       	mov	r20, r22
     fa4:	57 2f       	mov	r21, r23
     fa6:	68 2f       	mov	r22, r24
     fa8:	79 2f       	mov	r23, r25
     faa:	ce 01       	movw	r24, r28
     fac:	09 96       	adiw	r24, 0x09	; 9
     fae:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN7Complex3addES_>
     fb2:	29 87       	std	Y+9, r18	; 0x09
     fb4:	3a 87       	std	Y+10, r19	; 0x0a
     fb6:	4b 87       	std	Y+11, r20	; 0x0b
     fb8:	5c 87       	std	Y+12, r21	; 0x0c
     fba:	6d 87       	std	Y+13, r22	; 0x0d
     fbc:	7e 87       	std	Y+14, r23	; 0x0e
     fbe:	8f 87       	std	Y+15, r24	; 0x0f
     fc0:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     fc2:	89 85       	ldd	r24, Y+9	; 0x09
     fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc6:	ab 85       	ldd	r26, Y+11	; 0x0b
     fc8:	bc 85       	ldd	r27, Y+12	; 0x0c
     fca:	f6 01       	movw	r30, r12
     fcc:	80 83       	st	Z, r24
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	a2 83       	std	Z+2, r26	; 0x02
     fd2:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd8:	af 85       	ldd	r26, Y+15	; 0x0f
     fda:	b8 89       	ldd	r27, Y+16	; 0x10
     fdc:	84 83       	std	Z+4, r24	; 0x04
     fde:	95 83       	std	Z+5, r25	; 0x05
     fe0:	a6 83       	std	Z+6, r26	; 0x06
     fe2:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     fe4:	ff ef       	ldi	r31, 0xFF	; 255
     fe6:	af 1a       	sub	r10, r31
     fe8:	bf 0a       	sbc	r11, r31
     fea:	88 e0       	ldi	r24, 0x08	; 8
     fec:	c8 0e       	add	r12, r24
     fee:	d1 1c       	adc	r13, r1
     ff0:	a2 e0       	ldi	r26, 0x02	; 2
     ff2:	aa 16       	cp	r10, r26
     ff4:	b1 04       	cpc	r11, r1
     ff6:	09 f0       	breq	.+2      	; 0xffa <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     ff8:	87 cf       	rjmp	.-242    	; 0xf08 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     ffa:	83 2d       	mov	r24, r3
     ffc:	92 2d       	mov	r25, r2
     ffe:	60 96       	adiw	r28, 0x10	; 16
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	bf 90       	pop	r11
    101c:	af 90       	pop	r10
    101e:	9f 90       	pop	r9
    1020:	8f 90       	pop	r8
    1022:	7f 90       	pop	r7
    1024:	6f 90       	pop	r6
    1026:	5f 90       	pop	r5
    1028:	4f 90       	pop	r4
    102a:	3f 90       	pop	r3
    102c:	2f 90       	pop	r2
    102e:	08 95       	ret

00001030 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
    1030:	2f 92       	push	r2
    1032:	3f 92       	push	r3
    1034:	4f 92       	push	r4
    1036:	5f 92       	push	r5
    1038:	6f 92       	push	r6
    103a:	7f 92       	push	r7
    103c:	8f 92       	push	r8
    103e:	9f 92       	push	r9
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	64 97       	sbiw	r28, 0x14	; 20
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	3b 01       	movw	r6, r22
    1066:	e4 2e       	mov	r14, r20
    1068:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
    106a:	80 e2       	ldi	r24, 0x20	; 32
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
    1072:	8b 8b       	std	Y+19, r24	; 0x13
    1074:	9c 8b       	std	Y+20, r25	; 0x14
    1076:	48 2e       	mov	r4, r24
    1078:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
    107a:	81 2c       	mov	r8, r1
    107c:	91 2c       	mov	r9, r1
    107e:	e9 8a       	std	Y+17, r14	; 0x11
    1080:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
    1082:	21 2c       	mov	r2, r1
    1084:	31 2c       	mov	r3, r1
    1086:	ce 01       	movw	r24, r28
    1088:	09 96       	adiw	r24, 0x09	; 9
    108a:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN7ComplexC1Ev>
    108e:	c9 88       	ldd	r12, Y+17	; 0x11
    1090:	da 88       	ldd	r13, Y+18	; 0x12
    1092:	e2 2c       	mov	r14, r2
    1094:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
    1096:	54 01       	movw	r10, r8
    1098:	aa 0c       	add	r10, r10
    109a:	bb 1c       	adc	r11, r11
    109c:	aa 0c       	add	r10, r10
    109e:	bb 1c       	adc	r11, r11
    10a0:	aa 0c       	add	r10, r10
    10a2:	bb 1c       	adc	r11, r11
    10a4:	f5 01       	movw	r30, r10
    10a6:	ec 0d       	add	r30, r12
    10a8:	fd 1d       	adc	r31, r13
    10aa:	00 81       	ld	r16, Z
    10ac:	11 81       	ldd	r17, Z+1	; 0x01
    10ae:	22 81       	ldd	r18, Z+2	; 0x02
    10b0:	33 81       	ldd	r19, Z+3	; 0x03
    10b2:	44 81       	ldd	r20, Z+4	; 0x04
    10b4:	55 81       	ldd	r21, Z+5	; 0x05
    10b6:	66 81       	ldd	r22, Z+6	; 0x06
    10b8:	77 81       	ldd	r23, Z+7	; 0x07
    10ba:	c3 01       	movw	r24, r6
    10bc:	8e 0d       	add	r24, r14
    10be:	9f 1d       	adc	r25, r15
    10c0:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7Complex3mulES_>
    10c4:	29 83       	std	Y+1, r18	; 0x01
    10c6:	3a 83       	std	Y+2, r19	; 0x02
    10c8:	4b 83       	std	Y+3, r20	; 0x03
    10ca:	5c 83       	std	Y+4, r21	; 0x04
    10cc:	6d 83       	std	Y+5, r22	; 0x05
    10ce:	7e 83       	std	Y+6, r23	; 0x06
    10d0:	8f 83       	std	Y+7, r24	; 0x07
    10d2:	98 87       	std	Y+8, r25	; 0x08
    10d4:	02 2f       	mov	r16, r18
    10d6:	13 2f       	mov	r17, r19
    10d8:	24 2f       	mov	r18, r20
    10da:	35 2f       	mov	r19, r21
    10dc:	46 2f       	mov	r20, r22
    10de:	57 2f       	mov	r21, r23
    10e0:	68 2f       	mov	r22, r24
    10e2:	79 2f       	mov	r23, r25
    10e4:	ce 01       	movw	r24, r28
    10e6:	09 96       	adiw	r24, 0x09	; 9
    10e8:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN7Complex3addES_>
    10ec:	29 87       	std	Y+9, r18	; 0x09
    10ee:	3a 87       	std	Y+10, r19	; 0x0a
    10f0:	4b 87       	std	Y+11, r20	; 0x0b
    10f2:	5c 87       	std	Y+12, r21	; 0x0c
    10f4:	6d 87       	std	Y+13, r22	; 0x0d
    10f6:	7e 87       	std	Y+14, r23	; 0x0e
    10f8:	8f 87       	std	Y+15, r24	; 0x0f
    10fa:	98 8b       	std	Y+16, r25	; 0x10
    10fc:	88 e0       	ldi	r24, 0x08	; 8
    10fe:	e8 0e       	add	r14, r24
    1100:	f1 1c       	adc	r15, r1
    1102:	e0 e2       	ldi	r30, 0x20	; 32
    1104:	ce 0e       	add	r12, r30
    1106:	d1 1c       	adc	r13, r1
    1108:	f0 e2       	ldi	r31, 0x20	; 32
    110a:	ef 16       	cp	r14, r31
    110c:	f1 04       	cpc	r15, r1
    110e:	51 f6       	brne	.-108    	; 0x10a4 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
    1110:	89 85       	ldd	r24, Y+9	; 0x09
    1112:	9a 85       	ldd	r25, Y+10	; 0x0a
    1114:	ab 85       	ldd	r26, Y+11	; 0x0b
    1116:	bc 85       	ldd	r27, Y+12	; 0x0c
    1118:	f2 01       	movw	r30, r4
    111a:	80 83       	st	Z, r24
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	a2 83       	std	Z+2, r26	; 0x02
    1120:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	af 85       	ldd	r26, Y+15	; 0x0f
    1128:	b8 89       	ldd	r27, Y+16	; 0x10
    112a:	84 83       	std	Z+4, r24	; 0x04
    112c:	95 83       	std	Z+5, r25	; 0x05
    112e:	a6 83       	std	Z+6, r26	; 0x06
    1130:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    1132:	ff ef       	ldi	r31, 0xFF	; 255
    1134:	8f 1a       	sub	r8, r31
    1136:	9f 0a       	sbc	r9, r31
    1138:	88 e0       	ldi	r24, 0x08	; 8
    113a:	48 0e       	add	r4, r24
    113c:	51 1c       	adc	r5, r1
    113e:	e4 e0       	ldi	r30, 0x04	; 4
    1140:	8e 16       	cp	r8, r30
    1142:	91 04       	cpc	r9, r1
    1144:	09 f0       	breq	.+2      	; 0x1148 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
    1146:	9f cf       	rjmp	.-194    	; 0x1086 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    1148:	8b 89       	ldd	r24, Y+19	; 0x13
    114a:	9c 89       	ldd	r25, Y+20	; 0x14
    114c:	64 96       	adiw	r28, 0x14	; 20
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	bf 90       	pop	r11
    116a:	af 90       	pop	r10
    116c:	9f 90       	pop	r9
    116e:	8f 90       	pop	r8
    1170:	7f 90       	pop	r7
    1172:	6f 90       	pop	r6
    1174:	5f 90       	pop	r5
    1176:	4f 90       	pop	r4
    1178:	3f 90       	pop	r3
    117a:	2f 90       	pop	r2
    117c:	08 95       	ret

0000117e <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>:
Complex * Gates::multiply8x8(Complex *q,Complex matrix[8][8]){
    117e:	2f 92       	push	r2
    1180:	3f 92       	push	r3
    1182:	4f 92       	push	r4
    1184:	5f 92       	push	r5
    1186:	6f 92       	push	r6
    1188:	7f 92       	push	r7
    118a:	8f 92       	push	r8
    118c:	9f 92       	push	r9
    118e:	af 92       	push	r10
    1190:	bf 92       	push	r11
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	62 97       	sbiw	r28, 0x12	; 18
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	4b 01       	movw	r8, r22
    11b4:	34 2e       	mov	r3, r20
    11b6:	25 2e       	mov	r2, r21
	int qb_size=8;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
    11b8:	80 e4       	ldi	r24, 0x40	; 64
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
    11c0:	89 8b       	std	Y+17, r24	; 0x11
    11c2:	9a 8b       	std	Y+18, r25	; 0x12
    11c4:	48 2e       	mov	r4, r24
    11c6:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
    11c8:	61 2c       	mov	r6, r1
    11ca:	71 2c       	mov	r7, r1
		Complex tmp;
    11cc:	ce 01       	movw	r24, r28
    11ce:	09 96       	adiw	r24, 0x09	; 9
    11d0:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN7ComplexC1Ev>
    11d4:	c3 2c       	mov	r12, r3
    11d6:	d2 2c       	mov	r13, r2
    11d8:	e1 2c       	mov	r14, r1
    11da:	f1 2c       	mov	r15, r1
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
    11dc:	53 01       	movw	r10, r6
    11de:	aa 0c       	add	r10, r10
    11e0:	bb 1c       	adc	r11, r11
    11e2:	aa 0c       	add	r10, r10
    11e4:	bb 1c       	adc	r11, r11
    11e6:	aa 0c       	add	r10, r10
    11e8:	bb 1c       	adc	r11, r11
    11ea:	f5 01       	movw	r30, r10
    11ec:	ec 0d       	add	r30, r12
    11ee:	fd 1d       	adc	r31, r13
    11f0:	00 81       	ld	r16, Z
    11f2:	11 81       	ldd	r17, Z+1	; 0x01
    11f4:	22 81       	ldd	r18, Z+2	; 0x02
    11f6:	33 81       	ldd	r19, Z+3	; 0x03
    11f8:	44 81       	ldd	r20, Z+4	; 0x04
    11fa:	55 81       	ldd	r21, Z+5	; 0x05
    11fc:	66 81       	ldd	r22, Z+6	; 0x06
    11fe:	77 81       	ldd	r23, Z+7	; 0x07
    1200:	c4 01       	movw	r24, r8
    1202:	8e 0d       	add	r24, r14
    1204:	9f 1d       	adc	r25, r15
    1206:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7Complex3mulES_>
    120a:	29 83       	std	Y+1, r18	; 0x01
    120c:	3a 83       	std	Y+2, r19	; 0x02
    120e:	4b 83       	std	Y+3, r20	; 0x03
    1210:	5c 83       	std	Y+4, r21	; 0x04
    1212:	6d 83       	std	Y+5, r22	; 0x05
    1214:	7e 83       	std	Y+6, r23	; 0x06
    1216:	8f 83       	std	Y+7, r24	; 0x07
    1218:	98 87       	std	Y+8, r25	; 0x08
    121a:	02 2f       	mov	r16, r18
    121c:	13 2f       	mov	r17, r19
    121e:	24 2f       	mov	r18, r20
    1220:	35 2f       	mov	r19, r21
    1222:	46 2f       	mov	r20, r22
    1224:	57 2f       	mov	r21, r23
    1226:	68 2f       	mov	r22, r24
    1228:	79 2f       	mov	r23, r25
    122a:	ce 01       	movw	r24, r28
    122c:	09 96       	adiw	r24, 0x09	; 9
    122e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN7Complex3addES_>
    1232:	29 87       	std	Y+9, r18	; 0x09
    1234:	3a 87       	std	Y+10, r19	; 0x0a
    1236:	4b 87       	std	Y+11, r20	; 0x0b
    1238:	5c 87       	std	Y+12, r21	; 0x0c
    123a:	6d 87       	std	Y+13, r22	; 0x0d
    123c:	7e 87       	std	Y+14, r23	; 0x0e
    123e:	8f 87       	std	Y+15, r24	; 0x0f
    1240:	98 8b       	std	Y+16, r25	; 0x10
    1242:	88 e0       	ldi	r24, 0x08	; 8
    1244:	e8 0e       	add	r14, r24
    1246:	f1 1c       	adc	r15, r1
    1248:	e0 e4       	ldi	r30, 0x40	; 64
    124a:	ce 0e       	add	r12, r30
    124c:	d1 1c       	adc	r13, r1
    124e:	f0 e4       	ldi	r31, 0x40	; 64
    1250:	ef 16       	cp	r14, r31
    1252:	f1 04       	cpc	r15, r1
    1254:	51 f6       	brne	.-108    	; 0x11ea <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x6c>
		result[i].re=tmp.re;
    1256:	89 85       	ldd	r24, Y+9	; 0x09
    1258:	9a 85       	ldd	r25, Y+10	; 0x0a
    125a:	ab 85       	ldd	r26, Y+11	; 0x0b
    125c:	bc 85       	ldd	r27, Y+12	; 0x0c
    125e:	f2 01       	movw	r30, r4
    1260:	80 83       	st	Z, r24
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	a2 83       	std	Z+2, r26	; 0x02
    1266:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    1268:	8d 85       	ldd	r24, Y+13	; 0x0d
    126a:	9e 85       	ldd	r25, Y+14	; 0x0e
    126c:	af 85       	ldd	r26, Y+15	; 0x0f
    126e:	b8 89       	ldd	r27, Y+16	; 0x10
    1270:	84 83       	std	Z+4, r24	; 0x04
    1272:	95 83       	std	Z+5, r25	; 0x05
    1274:	a6 83       	std	Z+6, r26	; 0x06
    1276:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply8x8(Complex *q,Complex matrix[8][8]){
	int qb_size=8;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    1278:	ff ef       	ldi	r31, 0xFF	; 255
    127a:	6f 1a       	sub	r6, r31
    127c:	7f 0a       	sbc	r7, r31
    127e:	88 e0       	ldi	r24, 0x08	; 8
    1280:	48 0e       	add	r4, r24
    1282:	51 1c       	adc	r5, r1
    1284:	e8 e0       	ldi	r30, 0x08	; 8
    1286:	6e 16       	cp	r6, r30
    1288:	71 04       	cpc	r7, r1
    128a:	09 f0       	breq	.+2      	; 0x128e <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x110>
    128c:	9f cf       	rjmp	.-194    	; 0x11cc <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_+0x4e>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    128e:	89 89       	ldd	r24, Y+17	; 0x11
    1290:	9a 89       	ldd	r25, Y+18	; 0x12
    1292:	62 96       	adiw	r28, 0x12	; 18
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	bf 90       	pop	r11
    12b0:	af 90       	pop	r10
    12b2:	9f 90       	pop	r9
    12b4:	8f 90       	pop	r8
    12b6:	7f 90       	pop	r7
    12b8:	6f 90       	pop	r6
    12ba:	5f 90       	pop	r5
    12bc:	4f 90       	pop	r4
    12be:	3f 90       	pop	r3
    12c0:	2f 90       	pop	r2
    12c2:	08 95       	ret

000012c4 <_ZN5Gates1XEii>:

int * Gates::X(int theta,int phi){
    12c4:	af 92       	push	r10
    12c6:	bf 92       	push	r11
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	a4 97       	sbiw	r28, 0x24	; 36
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	7c 01       	movw	r14, r24
    12ea:	5b 01       	movw	r10, r22
    12ec:	6a 01       	movw	r12, r20
	Complex x_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,0),Complex(1,0)},
													   {Complex(1,0),Complex(0,0)}};
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	98 01       	movw	r18, r16
    12f4:	b9 01       	movw	r22, r18
    12f6:	a8 01       	movw	r20, r16
    12f8:	ce 01       	movw	r24, r28
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1300:	00 e0       	ldi	r16, 0x00	; 0
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	98 01       	movw	r18, r16
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	60 e8       	ldi	r22, 0x80	; 128
    130c:	7f e3       	ldi	r23, 0x3F	; 63
    130e:	ce 01       	movw	r24, r28
    1310:	09 96       	adiw	r24, 0x09	; 9
    1312:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1316:	00 e0       	ldi	r16, 0x00	; 0
    1318:	10 e0       	ldi	r17, 0x00	; 0
    131a:	98 01       	movw	r18, r16
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	60 e8       	ldi	r22, 0x80	; 128
    1322:	7f e3       	ldi	r23, 0x3F	; 63
    1324:	ce 01       	movw	r24, r28
    1326:	41 96       	adiw	r24, 0x11	; 17
    1328:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    132c:	00 e0       	ldi	r16, 0x00	; 0
    132e:	10 e0       	ldi	r17, 0x00	; 0
    1330:	98 01       	movw	r18, r16
    1332:	b9 01       	movw	r22, r18
    1334:	a8 01       	movw	r20, r16
    1336:	ce 01       	movw	r24, r28
    1338:	49 96       	adiw	r24, 0x19	; 25
    133a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[1]={phi};
    133e:	bc a2       	std	Y+36, r11	; 0x24
    1340:	ab a2       	std	Y+35, r10	; 0x23
    1342:	da a2       	std	Y+34, r13	; 0x22
    1344:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),x_matrix),QB_SIZE1);
    1346:	9e 01       	movw	r18, r28
    1348:	2f 5d       	subi	r18, 0xDF	; 223
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	ae 01       	movw	r20, r28
    134e:	4d 5d       	subi	r20, 0xDD	; 221
    1350:	5f 4f       	sbci	r21, 0xFF	; 255
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	c7 01       	movw	r24, r14
    1358:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    135c:	ae 01       	movw	r20, r28
    135e:	4f 5f       	subi	r20, 0xFF	; 255
    1360:	5f 4f       	sbci	r21, 0xFF	; 255
    1362:	bc 01       	movw	r22, r24
    1364:	c7 01       	movw	r24, r14
    1366:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	bc 01       	movw	r22, r24
    1370:	c7 01       	movw	r24, r14
    1372:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    1376:	a4 96       	adiw	r28, 0x24	; 36
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	cf 90       	pop	r12
    1392:	bf 90       	pop	r11
    1394:	af 90       	pop	r10
    1396:	08 95       	ret

00001398 <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    1398:	af 92       	push	r10
    139a:	bf 92       	push	r11
    139c:	cf 92       	push	r12
    139e:	df 92       	push	r13
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	a4 97       	sbiw	r28, 0x24	; 36
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	7c 01       	movw	r14, r24
    13be:	5b 01       	movw	r10, r22
    13c0:	6a 01       	movw	r12, r20
	Complex y_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,0),Complex(0,-1)},
													   {Complex(0,1),Complex(0,0)}};
    13c2:	00 e0       	ldi	r16, 0x00	; 0
    13c4:	10 e0       	ldi	r17, 0x00	; 0
    13c6:	98 01       	movw	r18, r16
    13c8:	b9 01       	movw	r22, r18
    13ca:	a8 01       	movw	r20, r16
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    13d4:	00 e0       	ldi	r16, 0x00	; 0
    13d6:	10 e0       	ldi	r17, 0x00	; 0
    13d8:	20 e8       	ldi	r18, 0x80	; 128
    13da:	3f eb       	ldi	r19, 0xBF	; 191
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	ba 01       	movw	r22, r20
    13e2:	ce 01       	movw	r24, r28
    13e4:	09 96       	adiw	r24, 0x09	; 9
    13e6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    13ea:	00 e0       	ldi	r16, 0x00	; 0
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	20 e8       	ldi	r18, 0x80	; 128
    13f0:	3f e3       	ldi	r19, 0x3F	; 63
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	ba 01       	movw	r22, r20
    13f8:	ce 01       	movw	r24, r28
    13fa:	41 96       	adiw	r24, 0x11	; 17
    13fc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1400:	00 e0       	ldi	r16, 0x00	; 0
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	98 01       	movw	r18, r16
    1406:	b9 01       	movw	r22, r18
    1408:	a8 01       	movw	r20, r16
    140a:	ce 01       	movw	r24, r28
    140c:	49 96       	adiw	r24, 0x19	; 25
    140e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1412:	bc a2       	std	Y+36, r11	; 0x24
    1414:	ab a2       	std	Y+35, r10	; 0x23
    1416:	da a2       	std	Y+34, r13	; 0x22
    1418:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),y_matrix),QB_SIZE1);
    141a:	9e 01       	movw	r18, r28
    141c:	2f 5d       	subi	r18, 0xDF	; 223
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	ae 01       	movw	r20, r28
    1422:	4d 5d       	subi	r20, 0xDD	; 221
    1424:	5f 4f       	sbci	r21, 0xFF	; 255
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	c7 01       	movw	r24, r14
    142c:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    1430:	ae 01       	movw	r20, r28
    1432:	4f 5f       	subi	r20, 0xFF	; 255
    1434:	5f 4f       	sbci	r21, 0xFF	; 255
    1436:	bc 01       	movw	r22, r24
    1438:	c7 01       	movw	r24, r14
    143a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    143e:	41 e0       	ldi	r20, 0x01	; 1
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	bc 01       	movw	r22, r24
    1444:	c7 01       	movw	r24, r14
    1446:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    144a:	a4 96       	adiw	r28, 0x24	; 36
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	08 95       	ret

0000146c <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    146c:	af 92       	push	r10
    146e:	bf 92       	push	r11
    1470:	cf 92       	push	r12
    1472:	df 92       	push	r13
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	a4 97       	sbiw	r28, 0x24	; 36
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	7c 01       	movw	r14, r24
    1492:	5b 01       	movw	r10, r22
    1494:	6a 01       	movw	r12, r20
	Complex z_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(-1,0)}};
    1496:	00 e0       	ldi	r16, 0x00	; 0
    1498:	10 e0       	ldi	r17, 0x00	; 0
    149a:	98 01       	movw	r18, r16
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	60 e8       	ldi	r22, 0x80	; 128
    14a2:	7f e3       	ldi	r23, 0x3F	; 63
    14a4:	ce 01       	movw	r24, r28
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	10 e0       	ldi	r17, 0x00	; 0
    14b0:	98 01       	movw	r18, r16
    14b2:	b9 01       	movw	r22, r18
    14b4:	a8 01       	movw	r20, r16
    14b6:	ce 01       	movw	r24, r28
    14b8:	09 96       	adiw	r24, 0x09	; 9
    14ba:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    14be:	00 e0       	ldi	r16, 0x00	; 0
    14c0:	10 e0       	ldi	r17, 0x00	; 0
    14c2:	98 01       	movw	r18, r16
    14c4:	b9 01       	movw	r22, r18
    14c6:	a8 01       	movw	r20, r16
    14c8:	ce 01       	movw	r24, r28
    14ca:	41 96       	adiw	r24, 0x11	; 17
    14cc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    14d0:	00 e0       	ldi	r16, 0x00	; 0
    14d2:	10 e0       	ldi	r17, 0x00	; 0
    14d4:	98 01       	movw	r18, r16
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	60 e8       	ldi	r22, 0x80	; 128
    14dc:	7f eb       	ldi	r23, 0xBF	; 191
    14de:	ce 01       	movw	r24, r28
    14e0:	49 96       	adiw	r24, 0x19	; 25
    14e2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    14e6:	bc a2       	std	Y+36, r11	; 0x24
    14e8:	ab a2       	std	Y+35, r10	; 0x23
    14ea:	da a2       	std	Y+34, r13	; 0x22
    14ec:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),z_matrix),QB_SIZE1);
    14ee:	9e 01       	movw	r18, r28
    14f0:	2f 5d       	subi	r18, 0xDF	; 223
    14f2:	3f 4f       	sbci	r19, 0xFF	; 255
    14f4:	ae 01       	movw	r20, r28
    14f6:	4d 5d       	subi	r20, 0xDD	; 221
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255
    14fa:	61 e0       	ldi	r22, 0x01	; 1
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	c7 01       	movw	r24, r14
    1500:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    1504:	ae 01       	movw	r20, r28
    1506:	4f 5f       	subi	r20, 0xFF	; 255
    1508:	5f 4f       	sbci	r21, 0xFF	; 255
    150a:	bc 01       	movw	r22, r24
    150c:	c7 01       	movw	r24, r14
    150e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	bc 01       	movw	r22, r24
    1518:	c7 01       	movw	r24, r14
    151a:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    151e:	a4 96       	adiw	r28, 0x24	; 36
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	08 95       	ret

00001540 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    1540:	af 92       	push	r10
    1542:	bf 92       	push	r11
    1544:	cf 92       	push	r12
    1546:	df 92       	push	r13
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	a4 97       	sbiw	r28, 0x24	; 36
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	7c 01       	movw	r14, r24
    1566:	5b 01       	movw	r10, r22
    1568:	6a 01       	movw	r12, r20
	Complex h_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
													   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    156a:	00 e0       	ldi	r16, 0x00	; 0
    156c:	10 e0       	ldi	r17, 0x00	; 0
    156e:	98 01       	movw	r18, r16
    1570:	43 ef       	ldi	r20, 0xF3	; 243
    1572:	54 e0       	ldi	r21, 0x04	; 4
    1574:	65 e3       	ldi	r22, 0x35	; 53
    1576:	7f e3       	ldi	r23, 0x3F	; 63
    1578:	ce 01       	movw	r24, r28
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1580:	00 e0       	ldi	r16, 0x00	; 0
    1582:	10 e0       	ldi	r17, 0x00	; 0
    1584:	98 01       	movw	r18, r16
    1586:	43 ef       	ldi	r20, 0xF3	; 243
    1588:	54 e0       	ldi	r21, 0x04	; 4
    158a:	65 e3       	ldi	r22, 0x35	; 53
    158c:	7f e3       	ldi	r23, 0x3F	; 63
    158e:	ce 01       	movw	r24, r28
    1590:	09 96       	adiw	r24, 0x09	; 9
    1592:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	10 e0       	ldi	r17, 0x00	; 0
    159a:	98 01       	movw	r18, r16
    159c:	43 ef       	ldi	r20, 0xF3	; 243
    159e:	54 e0       	ldi	r21, 0x04	; 4
    15a0:	65 e3       	ldi	r22, 0x35	; 53
    15a2:	7f e3       	ldi	r23, 0x3F	; 63
    15a4:	ce 01       	movw	r24, r28
    15a6:	41 96       	adiw	r24, 0x11	; 17
    15a8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    15ac:	00 e0       	ldi	r16, 0x00	; 0
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	98 01       	movw	r18, r16
    15b2:	43 ef       	ldi	r20, 0xF3	; 243
    15b4:	54 e0       	ldi	r21, 0x04	; 4
    15b6:	65 e3       	ldi	r22, 0x35	; 53
    15b8:	7f eb       	ldi	r23, 0xBF	; 191
    15ba:	ce 01       	movw	r24, r28
    15bc:	49 96       	adiw	r24, 0x19	; 25
    15be:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    15c2:	bc a2       	std	Y+36, r11	; 0x24
    15c4:	ab a2       	std	Y+35, r10	; 0x23
    15c6:	da a2       	std	Y+34, r13	; 0x22
    15c8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),h_matrix),QB_SIZE1);
    15ca:	9e 01       	movw	r18, r28
    15cc:	2f 5d       	subi	r18, 0xDF	; 223
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
    15d0:	ae 01       	movw	r20, r28
    15d2:	4d 5d       	subi	r20, 0xDD	; 221
    15d4:	5f 4f       	sbci	r21, 0xFF	; 255
    15d6:	61 e0       	ldi	r22, 0x01	; 1
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	c7 01       	movw	r24, r14
    15dc:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    15e0:	ae 01       	movw	r20, r28
    15e2:	4f 5f       	subi	r20, 0xFF	; 255
    15e4:	5f 4f       	sbci	r21, 0xFF	; 255
    15e6:	bc 01       	movw	r22, r24
    15e8:	c7 01       	movw	r24, r14
    15ea:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	bc 01       	movw	r22, r24
    15f4:	c7 01       	movw	r24, r14
    15f6:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    15fa:	a4 96       	adiw	r28, 0x24	; 36
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	ff 90       	pop	r15
    1610:	ef 90       	pop	r14
    1612:	df 90       	pop	r13
    1614:	cf 90       	pop	r12
    1616:	bf 90       	pop	r11
    1618:	af 90       	pop	r10
    161a:	08 95       	ret

0000161c <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	cf 92       	push	r12
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	a4 97       	sbiw	r28, 0x24	; 36
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	7c 01       	movw	r14, r24
    1642:	5b 01       	movw	r10, r22
    1644:	6a 01       	movw	r12, r20
	Complex s_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(0,1)}};
    1646:	00 e0       	ldi	r16, 0x00	; 0
    1648:	10 e0       	ldi	r17, 0x00	; 0
    164a:	98 01       	movw	r18, r16
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	60 e8       	ldi	r22, 0x80	; 128
    1652:	7f e3       	ldi	r23, 0x3F	; 63
    1654:	ce 01       	movw	r24, r28
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    165c:	00 e0       	ldi	r16, 0x00	; 0
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	98 01       	movw	r18, r16
    1662:	b9 01       	movw	r22, r18
    1664:	a8 01       	movw	r20, r16
    1666:	ce 01       	movw	r24, r28
    1668:	09 96       	adiw	r24, 0x09	; 9
    166a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    166e:	00 e0       	ldi	r16, 0x00	; 0
    1670:	10 e0       	ldi	r17, 0x00	; 0
    1672:	98 01       	movw	r18, r16
    1674:	b9 01       	movw	r22, r18
    1676:	a8 01       	movw	r20, r16
    1678:	ce 01       	movw	r24, r28
    167a:	41 96       	adiw	r24, 0x11	; 17
    167c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1680:	00 e0       	ldi	r16, 0x00	; 0
    1682:	10 e0       	ldi	r17, 0x00	; 0
    1684:	20 e8       	ldi	r18, 0x80	; 128
    1686:	3f e3       	ldi	r19, 0x3F	; 63
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	ba 01       	movw	r22, r20
    168e:	ce 01       	movw	r24, r28
    1690:	49 96       	adiw	r24, 0x19	; 25
    1692:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1696:	bc a2       	std	Y+36, r11	; 0x24
    1698:	ab a2       	std	Y+35, r10	; 0x23
    169a:	da a2       	std	Y+34, r13	; 0x22
    169c:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),s_matrix),QB_SIZE1);
    169e:	9e 01       	movw	r18, r28
    16a0:	2f 5d       	subi	r18, 0xDF	; 223
    16a2:	3f 4f       	sbci	r19, 0xFF	; 255
    16a4:	ae 01       	movw	r20, r28
    16a6:	4d 5d       	subi	r20, 0xDD	; 221
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	c7 01       	movw	r24, r14
    16b0:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    16b4:	ae 01       	movw	r20, r28
    16b6:	4f 5f       	subi	r20, 0xFF	; 255
    16b8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ba:	bc 01       	movw	r22, r24
    16bc:	c7 01       	movw	r24, r14
    16be:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	bc 01       	movw	r22, r24
    16c8:	c7 01       	movw	r24, r14
    16ca:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    16ce:	a4 96       	adiw	r28, 0x24	; 36
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	bf 90       	pop	r11
    16ec:	af 90       	pop	r10
    16ee:	08 95       	ret

000016f0 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    16f0:	af 92       	push	r10
    16f2:	bf 92       	push	r11
    16f4:	cf 92       	push	r12
    16f6:	df 92       	push	r13
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	a4 97       	sbiw	r28, 0x24	; 36
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	7c 01       	movw	r14, r24
    1716:	5b 01       	movw	r10, r22
    1718:	6a 01       	movw	r12, r20
	Complex t_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(1,0),Complex(0,0)},
													   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    171a:	00 e0       	ldi	r16, 0x00	; 0
    171c:	10 e0       	ldi	r17, 0x00	; 0
    171e:	98 01       	movw	r18, r16
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	60 e8       	ldi	r22, 0x80	; 128
    1726:	7f e3       	ldi	r23, 0x3F	; 63
    1728:	ce 01       	movw	r24, r28
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1730:	00 e0       	ldi	r16, 0x00	; 0
    1732:	10 e0       	ldi	r17, 0x00	; 0
    1734:	98 01       	movw	r18, r16
    1736:	b9 01       	movw	r22, r18
    1738:	a8 01       	movw	r20, r16
    173a:	ce 01       	movw	r24, r28
    173c:	09 96       	adiw	r24, 0x09	; 9
    173e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1742:	00 e0       	ldi	r16, 0x00	; 0
    1744:	10 e0       	ldi	r17, 0x00	; 0
    1746:	98 01       	movw	r18, r16
    1748:	b9 01       	movw	r22, r18
    174a:	a8 01       	movw	r20, r16
    174c:	ce 01       	movw	r24, r28
    174e:	41 96       	adiw	r24, 0x11	; 17
    1750:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1754:	03 ef       	ldi	r16, 0xF3	; 243
    1756:	14 e0       	ldi	r17, 0x04	; 4
    1758:	25 e3       	ldi	r18, 0x35	; 53
    175a:	3f e3       	ldi	r19, 0x3F	; 63
    175c:	b9 01       	movw	r22, r18
    175e:	a8 01       	movw	r20, r16
    1760:	ce 01       	movw	r24, r28
    1762:	49 96       	adiw	r24, 0x19	; 25
    1764:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    1768:	bc a2       	std	Y+36, r11	; 0x24
    176a:	ab a2       	std	Y+35, r10	; 0x23
    176c:	da a2       	std	Y+34, r13	; 0x22
    176e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),t_matrix),QB_SIZE1);
    1770:	9e 01       	movw	r18, r28
    1772:	2f 5d       	subi	r18, 0xDF	; 223
    1774:	3f 4f       	sbci	r19, 0xFF	; 255
    1776:	ae 01       	movw	r20, r28
    1778:	4d 5d       	subi	r20, 0xDD	; 221
    177a:	5f 4f       	sbci	r21, 0xFF	; 255
    177c:	61 e0       	ldi	r22, 0x01	; 1
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	c7 01       	movw	r24, r14
    1782:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    1786:	ae 01       	movw	r20, r28
    1788:	4f 5f       	subi	r20, 0xFF	; 255
    178a:	5f 4f       	sbci	r21, 0xFF	; 255
    178c:	bc 01       	movw	r22, r24
    178e:	c7 01       	movw	r24, r14
    1790:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	bc 01       	movw	r22, r24
    179a:	c7 01       	movw	r24, r14
    179c:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    17a0:	a4 96       	adiw	r28, 0x24	; 36
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	cf 90       	pop	r12
    17bc:	bf 90       	pop	r11
    17be:	af 90       	pop	r10
    17c0:	08 95       	ret

000017c2 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    17c2:	6f 92       	push	r6
    17c4:	7f 92       	push	r7
    17c6:	8f 92       	push	r8
    17c8:	9f 92       	push	r9
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	c8 58       	subi	r28, 0x88	; 136
    17e4:	d1 09       	sbc	r29, r1
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	7c 01       	movw	r14, r24
    17f2:	3b 01       	movw	r6, r22
    17f4:	5a 01       	movw	r10, r20
    17f6:	49 01       	movw	r8, r18
    17f8:	68 01       	movw	r12, r16
	Complex cno_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    17fa:	00 e0       	ldi	r16, 0x00	; 0
    17fc:	10 e0       	ldi	r17, 0x00	; 0
    17fe:	98 01       	movw	r18, r16
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	60 e8       	ldi	r22, 0x80	; 128
    1806:	7f e3       	ldi	r23, 0x3F	; 63
    1808:	ce 01       	movw	r24, r28
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1810:	00 e0       	ldi	r16, 0x00	; 0
    1812:	10 e0       	ldi	r17, 0x00	; 0
    1814:	98 01       	movw	r18, r16
    1816:	b9 01       	movw	r22, r18
    1818:	a8 01       	movw	r20, r16
    181a:	ce 01       	movw	r24, r28
    181c:	09 96       	adiw	r24, 0x09	; 9
    181e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1822:	00 e0       	ldi	r16, 0x00	; 0
    1824:	10 e0       	ldi	r17, 0x00	; 0
    1826:	98 01       	movw	r18, r16
    1828:	b9 01       	movw	r22, r18
    182a:	a8 01       	movw	r20, r16
    182c:	ce 01       	movw	r24, r28
    182e:	41 96       	adiw	r24, 0x11	; 17
    1830:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1834:	00 e0       	ldi	r16, 0x00	; 0
    1836:	10 e0       	ldi	r17, 0x00	; 0
    1838:	98 01       	movw	r18, r16
    183a:	b9 01       	movw	r22, r18
    183c:	a8 01       	movw	r20, r16
    183e:	ce 01       	movw	r24, r28
    1840:	49 96       	adiw	r24, 0x19	; 25
    1842:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1846:	00 e0       	ldi	r16, 0x00	; 0
    1848:	10 e0       	ldi	r17, 0x00	; 0
    184a:	98 01       	movw	r18, r16
    184c:	b9 01       	movw	r22, r18
    184e:	a8 01       	movw	r20, r16
    1850:	ce 01       	movw	r24, r28
    1852:	81 96       	adiw	r24, 0x21	; 33
    1854:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1858:	00 e0       	ldi	r16, 0x00	; 0
    185a:	10 e0       	ldi	r17, 0x00	; 0
    185c:	98 01       	movw	r18, r16
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	60 e8       	ldi	r22, 0x80	; 128
    1864:	7f e3       	ldi	r23, 0x3F	; 63
    1866:	ce 01       	movw	r24, r28
    1868:	89 96       	adiw	r24, 0x29	; 41
    186a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    186e:	00 e0       	ldi	r16, 0x00	; 0
    1870:	10 e0       	ldi	r17, 0x00	; 0
    1872:	98 01       	movw	r18, r16
    1874:	b9 01       	movw	r22, r18
    1876:	a8 01       	movw	r20, r16
    1878:	ce 01       	movw	r24, r28
    187a:	c1 96       	adiw	r24, 0x31	; 49
    187c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1880:	00 e0       	ldi	r16, 0x00	; 0
    1882:	10 e0       	ldi	r17, 0x00	; 0
    1884:	98 01       	movw	r18, r16
    1886:	b9 01       	movw	r22, r18
    1888:	a8 01       	movw	r20, r16
    188a:	ce 01       	movw	r24, r28
    188c:	c9 96       	adiw	r24, 0x39	; 57
    188e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1892:	00 e0       	ldi	r16, 0x00	; 0
    1894:	10 e0       	ldi	r17, 0x00	; 0
    1896:	98 01       	movw	r18, r16
    1898:	b9 01       	movw	r22, r18
    189a:	a8 01       	movw	r20, r16
    189c:	ce 01       	movw	r24, r28
    189e:	8f 5b       	subi	r24, 0xBF	; 191
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    18a6:	00 e0       	ldi	r16, 0x00	; 0
    18a8:	10 e0       	ldi	r17, 0x00	; 0
    18aa:	98 01       	movw	r18, r16
    18ac:	b9 01       	movw	r22, r18
    18ae:	a8 01       	movw	r20, r16
    18b0:	ce 01       	movw	r24, r28
    18b2:	87 5b       	subi	r24, 0xB7	; 183
    18b4:	9f 4f       	sbci	r25, 0xFF	; 255
    18b6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    18ba:	00 e0       	ldi	r16, 0x00	; 0
    18bc:	10 e0       	ldi	r17, 0x00	; 0
    18be:	98 01       	movw	r18, r16
    18c0:	b9 01       	movw	r22, r18
    18c2:	a8 01       	movw	r20, r16
    18c4:	ce 01       	movw	r24, r28
    18c6:	8f 5a       	subi	r24, 0xAF	; 175
    18c8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ca:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    18ce:	00 e0       	ldi	r16, 0x00	; 0
    18d0:	10 e0       	ldi	r17, 0x00	; 0
    18d2:	98 01       	movw	r18, r16
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	60 e8       	ldi	r22, 0x80	; 128
    18da:	7f e3       	ldi	r23, 0x3F	; 63
    18dc:	ce 01       	movw	r24, r28
    18de:	87 5a       	subi	r24, 0xA7	; 167
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    18e6:	00 e0       	ldi	r16, 0x00	; 0
    18e8:	10 e0       	ldi	r17, 0x00	; 0
    18ea:	98 01       	movw	r18, r16
    18ec:	b9 01       	movw	r22, r18
    18ee:	a8 01       	movw	r20, r16
    18f0:	ce 01       	movw	r24, r28
    18f2:	8f 59       	subi	r24, 0x9F	; 159
    18f4:	9f 4f       	sbci	r25, 0xFF	; 255
    18f6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    18fa:	00 e0       	ldi	r16, 0x00	; 0
    18fc:	10 e0       	ldi	r17, 0x00	; 0
    18fe:	98 01       	movw	r18, r16
    1900:	b9 01       	movw	r22, r18
    1902:	a8 01       	movw	r20, r16
    1904:	ce 01       	movw	r24, r28
    1906:	87 59       	subi	r24, 0x97	; 151
    1908:	9f 4f       	sbci	r25, 0xFF	; 255
    190a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    190e:	00 e0       	ldi	r16, 0x00	; 0
    1910:	10 e0       	ldi	r17, 0x00	; 0
    1912:	98 01       	movw	r18, r16
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	60 e8       	ldi	r22, 0x80	; 128
    191a:	7f e3       	ldi	r23, 0x3F	; 63
    191c:	ce 01       	movw	r24, r28
    191e:	8f 58       	subi	r24, 0x8F	; 143
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1926:	00 e0       	ldi	r16, 0x00	; 0
    1928:	10 e0       	ldi	r17, 0x00	; 0
    192a:	98 01       	movw	r18, r16
    192c:	b9 01       	movw	r22, r18
    192e:	a8 01       	movw	r20, r16
    1930:	ce 01       	movw	r24, r28
    1932:	87 58       	subi	r24, 0x87	; 135
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};						
    193a:	cb 57       	subi	r28, 0x7B	; 123
    193c:	df 4f       	sbci	r29, 0xFF	; 255
    193e:	79 82       	std	Y+1, r7	; 0x01
    1940:	68 82       	st	Y, r6
    1942:	c5 58       	subi	r28, 0x85	; 133
    1944:	d0 40       	sbci	r29, 0x00	; 0
    1946:	c9 57       	subi	r28, 0x79	; 121
    1948:	df 4f       	sbci	r29, 0xFF	; 255
    194a:	99 82       	std	Y+1, r9	; 0x01
    194c:	88 82       	st	Y, r8
    194e:	c7 58       	subi	r28, 0x87	; 135
    1950:	d0 40       	sbci	r29, 0x00	; 0
    1952:	cf 57       	subi	r28, 0x7F	; 127
    1954:	df 4f       	sbci	r29, 0xFF	; 255
    1956:	b9 82       	std	Y+1, r11	; 0x01
    1958:	a8 82       	st	Y, r10
    195a:	c1 58       	subi	r28, 0x81	; 129
    195c:	d0 40       	sbci	r29, 0x00	; 0
    195e:	cd 57       	subi	r28, 0x7D	; 125
    1960:	df 4f       	sbci	r29, 0xFF	; 255
    1962:	d9 82       	std	Y+1, r13	; 0x01
    1964:	c8 82       	st	Y, r12
    1966:	c3 58       	subi	r28, 0x83	; 131
    1968:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),cno_matrix),QB_SIZE2);
    196a:	9e 01       	movw	r18, r28
    196c:	2f 57       	subi	r18, 0x7F	; 127
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	ae 01       	movw	r20, r28
    1972:	4b 57       	subi	r20, 0x7B	; 123
    1974:	5f 4f       	sbci	r21, 0xFF	; 255
    1976:	62 e0       	ldi	r22, 0x02	; 2
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	c7 01       	movw	r24, r14
    197c:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    1980:	ae 01       	movw	r20, r28
    1982:	4f 5f       	subi	r20, 0xFF	; 255
    1984:	5f 4f       	sbci	r21, 0xFF	; 255
    1986:	bc 01       	movw	r22, r24
    1988:	c7 01       	movw	r24, r14
    198a:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    198e:	42 e0       	ldi	r20, 0x02	; 2
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	bc 01       	movw	r22, r24
    1994:	c7 01       	movw	r24, r14
    1996:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    199a:	c8 57       	subi	r28, 0x78	; 120
    199c:	df 4f       	sbci	r29, 0xFF	; 255
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	9f 90       	pop	r9
    19be:	8f 90       	pop	r8
    19c0:	7f 90       	pop	r7
    19c2:	6f 90       	pop	r6
    19c4:	08 95       	ret

000019c6 <_ZN5Gates3CSIEiiii>:
int * Gates::CSI(int theta1, int phi1, int theta2,int phi2){
    19c6:	6f 92       	push	r6
    19c8:	7f 92       	push	r7
    19ca:	8f 92       	push	r8
    19cc:	9f 92       	push	r9
    19ce:	af 92       	push	r10
    19d0:	bf 92       	push	r11
    19d2:	cf 92       	push	r12
    19d4:	df 92       	push	r13
    19d6:	ef 92       	push	r14
    19d8:	ff 92       	push	r15
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	c8 58       	subi	r28, 0x88	; 136
    19e8:	d1 09       	sbc	r29, r1
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	7c 01       	movw	r14, r24
    19f6:	3b 01       	movw	r6, r22
    19f8:	5a 01       	movw	r10, r20
    19fa:	49 01       	movw	r8, r18
    19fc:	68 01       	movw	r12, r16
	Complex csi_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(-1,0)}};
    19fe:	00 e0       	ldi	r16, 0x00	; 0
    1a00:	10 e0       	ldi	r17, 0x00	; 0
    1a02:	98 01       	movw	r18, r16
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	60 e8       	ldi	r22, 0x80	; 128
    1a0a:	7f e3       	ldi	r23, 0x3F	; 63
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a14:	00 e0       	ldi	r16, 0x00	; 0
    1a16:	10 e0       	ldi	r17, 0x00	; 0
    1a18:	98 01       	movw	r18, r16
    1a1a:	b9 01       	movw	r22, r18
    1a1c:	a8 01       	movw	r20, r16
    1a1e:	ce 01       	movw	r24, r28
    1a20:	09 96       	adiw	r24, 0x09	; 9
    1a22:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a26:	00 e0       	ldi	r16, 0x00	; 0
    1a28:	10 e0       	ldi	r17, 0x00	; 0
    1a2a:	98 01       	movw	r18, r16
    1a2c:	b9 01       	movw	r22, r18
    1a2e:	a8 01       	movw	r20, r16
    1a30:	ce 01       	movw	r24, r28
    1a32:	41 96       	adiw	r24, 0x11	; 17
    1a34:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a38:	00 e0       	ldi	r16, 0x00	; 0
    1a3a:	10 e0       	ldi	r17, 0x00	; 0
    1a3c:	98 01       	movw	r18, r16
    1a3e:	b9 01       	movw	r22, r18
    1a40:	a8 01       	movw	r20, r16
    1a42:	ce 01       	movw	r24, r28
    1a44:	49 96       	adiw	r24, 0x19	; 25
    1a46:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a4a:	00 e0       	ldi	r16, 0x00	; 0
    1a4c:	10 e0       	ldi	r17, 0x00	; 0
    1a4e:	98 01       	movw	r18, r16
    1a50:	b9 01       	movw	r22, r18
    1a52:	a8 01       	movw	r20, r16
    1a54:	ce 01       	movw	r24, r28
    1a56:	81 96       	adiw	r24, 0x21	; 33
    1a58:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a5c:	00 e0       	ldi	r16, 0x00	; 0
    1a5e:	10 e0       	ldi	r17, 0x00	; 0
    1a60:	98 01       	movw	r18, r16
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	60 e8       	ldi	r22, 0x80	; 128
    1a68:	7f e3       	ldi	r23, 0x3F	; 63
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	89 96       	adiw	r24, 0x29	; 41
    1a6e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	10 e0       	ldi	r17, 0x00	; 0
    1a76:	98 01       	movw	r18, r16
    1a78:	b9 01       	movw	r22, r18
    1a7a:	a8 01       	movw	r20, r16
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	c1 96       	adiw	r24, 0x31	; 49
    1a80:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a84:	00 e0       	ldi	r16, 0x00	; 0
    1a86:	10 e0       	ldi	r17, 0x00	; 0
    1a88:	98 01       	movw	r18, r16
    1a8a:	b9 01       	movw	r22, r18
    1a8c:	a8 01       	movw	r20, r16
    1a8e:	ce 01       	movw	r24, r28
    1a90:	c9 96       	adiw	r24, 0x39	; 57
    1a92:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1a96:	00 e0       	ldi	r16, 0x00	; 0
    1a98:	10 e0       	ldi	r17, 0x00	; 0
    1a9a:	98 01       	movw	r18, r16
    1a9c:	b9 01       	movw	r22, r18
    1a9e:	a8 01       	movw	r20, r16
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	8f 5b       	subi	r24, 0xBF	; 191
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1aaa:	00 e0       	ldi	r16, 0x00	; 0
    1aac:	10 e0       	ldi	r17, 0x00	; 0
    1aae:	98 01       	movw	r18, r16
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	a8 01       	movw	r20, r16
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	87 5b       	subi	r24, 0xB7	; 183
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1abe:	00 e0       	ldi	r16, 0x00	; 0
    1ac0:	10 e0       	ldi	r17, 0x00	; 0
    1ac2:	98 01       	movw	r18, r16
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	60 e8       	ldi	r22, 0x80	; 128
    1aca:	7f e3       	ldi	r23, 0x3F	; 63
    1acc:	ce 01       	movw	r24, r28
    1ace:	8f 5a       	subi	r24, 0xAF	; 175
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1ad6:	00 e0       	ldi	r16, 0x00	; 0
    1ad8:	10 e0       	ldi	r17, 0x00	; 0
    1ada:	98 01       	movw	r18, r16
    1adc:	b9 01       	movw	r22, r18
    1ade:	a8 01       	movw	r20, r16
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	87 5a       	subi	r24, 0xA7	; 167
    1ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1aea:	00 e0       	ldi	r16, 0x00	; 0
    1aec:	10 e0       	ldi	r17, 0x00	; 0
    1aee:	98 01       	movw	r18, r16
    1af0:	b9 01       	movw	r22, r18
    1af2:	a8 01       	movw	r20, r16
    1af4:	ce 01       	movw	r24, r28
    1af6:	8f 59       	subi	r24, 0x9F	; 159
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1afe:	00 e0       	ldi	r16, 0x00	; 0
    1b00:	10 e0       	ldi	r17, 0x00	; 0
    1b02:	98 01       	movw	r18, r16
    1b04:	b9 01       	movw	r22, r18
    1b06:	a8 01       	movw	r20, r16
    1b08:	ce 01       	movw	r24, r28
    1b0a:	87 59       	subi	r24, 0x97	; 151
    1b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1b12:	00 e0       	ldi	r16, 0x00	; 0
    1b14:	10 e0       	ldi	r17, 0x00	; 0
    1b16:	98 01       	movw	r18, r16
    1b18:	b9 01       	movw	r22, r18
    1b1a:	a8 01       	movw	r20, r16
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	8f 58       	subi	r24, 0x8F	; 143
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1b26:	00 e0       	ldi	r16, 0x00	; 0
    1b28:	10 e0       	ldi	r17, 0x00	; 0
    1b2a:	98 01       	movw	r18, r16
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	60 e8       	ldi	r22, 0x80	; 128
    1b32:	7f eb       	ldi	r23, 0xBF	; 191
    1b34:	ce 01       	movw	r24, r28
    1b36:	87 58       	subi	r24, 0x87	; 135
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1b3e:	cb 57       	subi	r28, 0x7B	; 123
    1b40:	df 4f       	sbci	r29, 0xFF	; 255
    1b42:	79 82       	std	Y+1, r7	; 0x01
    1b44:	68 82       	st	Y, r6
    1b46:	c5 58       	subi	r28, 0x85	; 133
    1b48:	d0 40       	sbci	r29, 0x00	; 0
    1b4a:	c9 57       	subi	r28, 0x79	; 121
    1b4c:	df 4f       	sbci	r29, 0xFF	; 255
    1b4e:	99 82       	std	Y+1, r9	; 0x01
    1b50:	88 82       	st	Y, r8
    1b52:	c7 58       	subi	r28, 0x87	; 135
    1b54:	d0 40       	sbci	r29, 0x00	; 0
    1b56:	cf 57       	subi	r28, 0x7F	; 127
    1b58:	df 4f       	sbci	r29, 0xFF	; 255
    1b5a:	b9 82       	std	Y+1, r11	; 0x01
    1b5c:	a8 82       	st	Y, r10
    1b5e:	c1 58       	subi	r28, 0x81	; 129
    1b60:	d0 40       	sbci	r29, 0x00	; 0
    1b62:	cd 57       	subi	r28, 0x7D	; 125
    1b64:	df 4f       	sbci	r29, 0xFF	; 255
    1b66:	d9 82       	std	Y+1, r13	; 0x01
    1b68:	c8 82       	st	Y, r12
    1b6a:	c3 58       	subi	r28, 0x83	; 131
    1b6c:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),csi_matrix),QB_SIZE2);
    1b6e:	9e 01       	movw	r18, r28
    1b70:	2f 57       	subi	r18, 0x7F	; 127
    1b72:	3f 4f       	sbci	r19, 0xFF	; 255
    1b74:	ae 01       	movw	r20, r28
    1b76:	4b 57       	subi	r20, 0x7B	; 123
    1b78:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	c7 01       	movw	r24, r14
    1b80:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    1b84:	ae 01       	movw	r20, r28
    1b86:	4f 5f       	subi	r20, 0xFF	; 255
    1b88:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	c7 01       	movw	r24, r14
    1b8e:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1b92:	42 e0       	ldi	r20, 0x02	; 2
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	bc 01       	movw	r22, r24
    1b98:	c7 01       	movw	r24, r14
    1b9a:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    1b9e:	c8 57       	subi	r28, 0x78	; 120
    1ba0:	df 4f       	sbci	r29, 0xFF	; 255
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	df 90       	pop	r13
    1bba:	cf 90       	pop	r12
    1bbc:	bf 90       	pop	r11
    1bbe:	af 90       	pop	r10
    1bc0:	9f 90       	pop	r9
    1bc2:	8f 90       	pop	r8
    1bc4:	7f 90       	pop	r7
    1bc6:	6f 90       	pop	r6
    1bc8:	08 95       	ret

00001bca <_ZN5Gates3SWAEiiii>:
int * Gates::SWA(int theta1, int phi1, int theta2,int phi2){
    1bca:	6f 92       	push	r6
    1bcc:	7f 92       	push	r7
    1bce:	8f 92       	push	r8
    1bd0:	9f 92       	push	r9
    1bd2:	af 92       	push	r10
    1bd4:	bf 92       	push	r11
    1bd6:	cf 92       	push	r12
    1bd8:	df 92       	push	r13
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	c8 58       	subi	r28, 0x88	; 136
    1bec:	d1 09       	sbc	r29, r1
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	7c 01       	movw	r14, r24
    1bfa:	3b 01       	movw	r6, r22
    1bfc:	5a 01       	movw	r10, r20
    1bfe:	49 01       	movw	r8, r18
    1c00:	68 01       	movw	r12, r16
	Complex swa_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    1c02:	00 e0       	ldi	r16, 0x00	; 0
    1c04:	10 e0       	ldi	r17, 0x00	; 0
    1c06:	98 01       	movw	r18, r16
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	60 e8       	ldi	r22, 0x80	; 128
    1c0e:	7f e3       	ldi	r23, 0x3F	; 63
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c18:	00 e0       	ldi	r16, 0x00	; 0
    1c1a:	10 e0       	ldi	r17, 0x00	; 0
    1c1c:	98 01       	movw	r18, r16
    1c1e:	b9 01       	movw	r22, r18
    1c20:	a8 01       	movw	r20, r16
    1c22:	ce 01       	movw	r24, r28
    1c24:	09 96       	adiw	r24, 0x09	; 9
    1c26:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c2a:	00 e0       	ldi	r16, 0x00	; 0
    1c2c:	10 e0       	ldi	r17, 0x00	; 0
    1c2e:	98 01       	movw	r18, r16
    1c30:	b9 01       	movw	r22, r18
    1c32:	a8 01       	movw	r20, r16
    1c34:	ce 01       	movw	r24, r28
    1c36:	41 96       	adiw	r24, 0x11	; 17
    1c38:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c3c:	00 e0       	ldi	r16, 0x00	; 0
    1c3e:	10 e0       	ldi	r17, 0x00	; 0
    1c40:	98 01       	movw	r18, r16
    1c42:	b9 01       	movw	r22, r18
    1c44:	a8 01       	movw	r20, r16
    1c46:	ce 01       	movw	r24, r28
    1c48:	49 96       	adiw	r24, 0x19	; 25
    1c4a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c4e:	00 e0       	ldi	r16, 0x00	; 0
    1c50:	10 e0       	ldi	r17, 0x00	; 0
    1c52:	98 01       	movw	r18, r16
    1c54:	b9 01       	movw	r22, r18
    1c56:	a8 01       	movw	r20, r16
    1c58:	ce 01       	movw	r24, r28
    1c5a:	81 96       	adiw	r24, 0x21	; 33
    1c5c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c60:	00 e0       	ldi	r16, 0x00	; 0
    1c62:	10 e0       	ldi	r17, 0x00	; 0
    1c64:	98 01       	movw	r18, r16
    1c66:	b9 01       	movw	r22, r18
    1c68:	a8 01       	movw	r20, r16
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	89 96       	adiw	r24, 0x29	; 41
    1c6e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c72:	00 e0       	ldi	r16, 0x00	; 0
    1c74:	10 e0       	ldi	r17, 0x00	; 0
    1c76:	98 01       	movw	r18, r16
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	60 e8       	ldi	r22, 0x80	; 128
    1c7e:	7f e3       	ldi	r23, 0x3F	; 63
    1c80:	ce 01       	movw	r24, r28
    1c82:	c1 96       	adiw	r24, 0x31	; 49
    1c84:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
    1c8c:	98 01       	movw	r18, r16
    1c8e:	b9 01       	movw	r22, r18
    1c90:	a8 01       	movw	r20, r16
    1c92:	ce 01       	movw	r24, r28
    1c94:	c9 96       	adiw	r24, 0x39	; 57
    1c96:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1c9a:	00 e0       	ldi	r16, 0x00	; 0
    1c9c:	10 e0       	ldi	r17, 0x00	; 0
    1c9e:	98 01       	movw	r18, r16
    1ca0:	b9 01       	movw	r22, r18
    1ca2:	a8 01       	movw	r20, r16
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	8f 5b       	subi	r24, 0xBF	; 191
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1cae:	00 e0       	ldi	r16, 0x00	; 0
    1cb0:	10 e0       	ldi	r17, 0x00	; 0
    1cb2:	98 01       	movw	r18, r16
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	60 e8       	ldi	r22, 0x80	; 128
    1cba:	7f e3       	ldi	r23, 0x3F	; 63
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	87 5b       	subi	r24, 0xB7	; 183
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1cc6:	00 e0       	ldi	r16, 0x00	; 0
    1cc8:	10 e0       	ldi	r17, 0x00	; 0
    1cca:	98 01       	movw	r18, r16
    1ccc:	b9 01       	movw	r22, r18
    1cce:	a8 01       	movw	r20, r16
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	8f 5a       	subi	r24, 0xAF	; 175
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1cda:	00 e0       	ldi	r16, 0x00	; 0
    1cdc:	10 e0       	ldi	r17, 0x00	; 0
    1cde:	98 01       	movw	r18, r16
    1ce0:	b9 01       	movw	r22, r18
    1ce2:	a8 01       	movw	r20, r16
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	87 5a       	subi	r24, 0xA7	; 167
    1ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cea:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1cee:	00 e0       	ldi	r16, 0x00	; 0
    1cf0:	10 e0       	ldi	r17, 0x00	; 0
    1cf2:	98 01       	movw	r18, r16
    1cf4:	b9 01       	movw	r22, r18
    1cf6:	a8 01       	movw	r20, r16
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	8f 59       	subi	r24, 0x9F	; 159
    1cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfe:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1d02:	00 e0       	ldi	r16, 0x00	; 0
    1d04:	10 e0       	ldi	r17, 0x00	; 0
    1d06:	98 01       	movw	r18, r16
    1d08:	b9 01       	movw	r22, r18
    1d0a:	a8 01       	movw	r20, r16
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	87 59       	subi	r24, 0x97	; 151
    1d10:	9f 4f       	sbci	r25, 0xFF	; 255
    1d12:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1d16:	00 e0       	ldi	r16, 0x00	; 0
    1d18:	10 e0       	ldi	r17, 0x00	; 0
    1d1a:	98 01       	movw	r18, r16
    1d1c:	b9 01       	movw	r22, r18
    1d1e:	a8 01       	movw	r20, r16
    1d20:	ce 01       	movw	r24, r28
    1d22:	8f 58       	subi	r24, 0x8F	; 143
    1d24:	9f 4f       	sbci	r25, 0xFF	; 255
    1d26:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1d2a:	00 e0       	ldi	r16, 0x00	; 0
    1d2c:	10 e0       	ldi	r17, 0x00	; 0
    1d2e:	98 01       	movw	r18, r16
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	60 e8       	ldi	r22, 0x80	; 128
    1d36:	7f e3       	ldi	r23, 0x3F	; 63
    1d38:	ce 01       	movw	r24, r28
    1d3a:	87 58       	subi	r24, 0x87	; 135
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1d42:	cb 57       	subi	r28, 0x7B	; 123
    1d44:	df 4f       	sbci	r29, 0xFF	; 255
    1d46:	79 82       	std	Y+1, r7	; 0x01
    1d48:	68 82       	st	Y, r6
    1d4a:	c5 58       	subi	r28, 0x85	; 133
    1d4c:	d0 40       	sbci	r29, 0x00	; 0
    1d4e:	c9 57       	subi	r28, 0x79	; 121
    1d50:	df 4f       	sbci	r29, 0xFF	; 255
    1d52:	99 82       	std	Y+1, r9	; 0x01
    1d54:	88 82       	st	Y, r8
    1d56:	c7 58       	subi	r28, 0x87	; 135
    1d58:	d0 40       	sbci	r29, 0x00	; 0
    1d5a:	cf 57       	subi	r28, 0x7F	; 127
    1d5c:	df 4f       	sbci	r29, 0xFF	; 255
    1d5e:	b9 82       	std	Y+1, r11	; 0x01
    1d60:	a8 82       	st	Y, r10
    1d62:	c1 58       	subi	r28, 0x81	; 129
    1d64:	d0 40       	sbci	r29, 0x00	; 0
    1d66:	cd 57       	subi	r28, 0x7D	; 125
    1d68:	df 4f       	sbci	r29, 0xFF	; 255
    1d6a:	d9 82       	std	Y+1, r13	; 0x01
    1d6c:	c8 82       	st	Y, r12
    1d6e:	c3 58       	subi	r28, 0x83	; 131
    1d70:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swa_matrix),QB_SIZE2);	
    1d72:	9e 01       	movw	r18, r28
    1d74:	2f 57       	subi	r18, 0x7F	; 127
    1d76:	3f 4f       	sbci	r19, 0xFF	; 255
    1d78:	ae 01       	movw	r20, r28
    1d7a:	4b 57       	subi	r20, 0x7B	; 123
    1d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7e:	62 e0       	ldi	r22, 0x02	; 2
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	c7 01       	movw	r24, r14
    1d84:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    1d88:	ae 01       	movw	r20, r28
    1d8a:	4f 5f       	subi	r20, 0xFF	; 255
    1d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8e:	bc 01       	movw	r22, r24
    1d90:	c7 01       	movw	r24, r14
    1d92:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1d96:	42 e0       	ldi	r20, 0x02	; 2
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	c7 01       	movw	r24, r14
    1d9e:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    1da2:	c8 57       	subi	r28, 0x78	; 120
    1da4:	df 4f       	sbci	r29, 0xFF	; 255
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	df 90       	pop	r13
    1dbe:	cf 90       	pop	r12
    1dc0:	bf 90       	pop	r11
    1dc2:	af 90       	pop	r10
    1dc4:	9f 90       	pop	r9
    1dc6:	8f 90       	pop	r8
    1dc8:	7f 90       	pop	r7
    1dca:	6f 90       	pop	r6
    1dcc:	08 95       	ret

00001dce <_ZN5Gates3INCEiiii>:
int * Gates::INC(int theta1, int phi1, int theta2,int phi2){
    1dce:	6f 92       	push	r6
    1dd0:	7f 92       	push	r7
    1dd2:	8f 92       	push	r8
    1dd4:	9f 92       	push	r9
    1dd6:	af 92       	push	r10
    1dd8:	bf 92       	push	r11
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	c8 58       	subi	r28, 0x88	; 136
    1df0:	d1 09       	sbc	r29, r1
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	7c 01       	movw	r14, r24
    1dfe:	3b 01       	movw	r6, r22
    1e00:	5a 01       	movw	r10, r20
    1e02:	49 01       	movw	r8, r18
    1e04:	68 01       	movw	r12, r16
	Complex inc_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)}};
    1e06:	00 e0       	ldi	r16, 0x00	; 0
    1e08:	10 e0       	ldi	r17, 0x00	; 0
    1e0a:	98 01       	movw	r18, r16
    1e0c:	b9 01       	movw	r22, r18
    1e0e:	a8 01       	movw	r20, r16
    1e10:	ce 01       	movw	r24, r28
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e18:	00 e0       	ldi	r16, 0x00	; 0
    1e1a:	10 e0       	ldi	r17, 0x00	; 0
    1e1c:	98 01       	movw	r18, r16
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	60 e8       	ldi	r22, 0x80	; 128
    1e24:	7f e3       	ldi	r23, 0x3F	; 63
    1e26:	ce 01       	movw	r24, r28
    1e28:	09 96       	adiw	r24, 0x09	; 9
    1e2a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e2e:	00 e0       	ldi	r16, 0x00	; 0
    1e30:	10 e0       	ldi	r17, 0x00	; 0
    1e32:	98 01       	movw	r18, r16
    1e34:	b9 01       	movw	r22, r18
    1e36:	a8 01       	movw	r20, r16
    1e38:	ce 01       	movw	r24, r28
    1e3a:	41 96       	adiw	r24, 0x11	; 17
    1e3c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e40:	00 e0       	ldi	r16, 0x00	; 0
    1e42:	10 e0       	ldi	r17, 0x00	; 0
    1e44:	98 01       	movw	r18, r16
    1e46:	b9 01       	movw	r22, r18
    1e48:	a8 01       	movw	r20, r16
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	49 96       	adiw	r24, 0x19	; 25
    1e4e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e52:	00 e0       	ldi	r16, 0x00	; 0
    1e54:	10 e0       	ldi	r17, 0x00	; 0
    1e56:	98 01       	movw	r18, r16
    1e58:	b9 01       	movw	r22, r18
    1e5a:	a8 01       	movw	r20, r16
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	81 96       	adiw	r24, 0x21	; 33
    1e60:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e64:	00 e0       	ldi	r16, 0x00	; 0
    1e66:	10 e0       	ldi	r17, 0x00	; 0
    1e68:	98 01       	movw	r18, r16
    1e6a:	b9 01       	movw	r22, r18
    1e6c:	a8 01       	movw	r20, r16
    1e6e:	ce 01       	movw	r24, r28
    1e70:	89 96       	adiw	r24, 0x29	; 41
    1e72:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e76:	00 e0       	ldi	r16, 0x00	; 0
    1e78:	10 e0       	ldi	r17, 0x00	; 0
    1e7a:	98 01       	movw	r18, r16
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	60 e8       	ldi	r22, 0x80	; 128
    1e82:	7f e3       	ldi	r23, 0x3F	; 63
    1e84:	ce 01       	movw	r24, r28
    1e86:	c1 96       	adiw	r24, 0x31	; 49
    1e88:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e8c:	00 e0       	ldi	r16, 0x00	; 0
    1e8e:	10 e0       	ldi	r17, 0x00	; 0
    1e90:	98 01       	movw	r18, r16
    1e92:	b9 01       	movw	r22, r18
    1e94:	a8 01       	movw	r20, r16
    1e96:	ce 01       	movw	r24, r28
    1e98:	c9 96       	adiw	r24, 0x39	; 57
    1e9a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1e9e:	00 e0       	ldi	r16, 0x00	; 0
    1ea0:	10 e0       	ldi	r17, 0x00	; 0
    1ea2:	98 01       	movw	r18, r16
    1ea4:	b9 01       	movw	r22, r18
    1ea6:	a8 01       	movw	r20, r16
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	8f 5b       	subi	r24, 0xBF	; 191
    1eac:	9f 4f       	sbci	r25, 0xFF	; 255
    1eae:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1eb2:	00 e0       	ldi	r16, 0x00	; 0
    1eb4:	10 e0       	ldi	r17, 0x00	; 0
    1eb6:	98 01       	movw	r18, r16
    1eb8:	b9 01       	movw	r22, r18
    1eba:	a8 01       	movw	r20, r16
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	87 5b       	subi	r24, 0xB7	; 183
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1ec6:	00 e0       	ldi	r16, 0x00	; 0
    1ec8:	10 e0       	ldi	r17, 0x00	; 0
    1eca:	98 01       	movw	r18, r16
    1ecc:	b9 01       	movw	r22, r18
    1ece:	a8 01       	movw	r20, r16
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	8f 5a       	subi	r24, 0xAF	; 175
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1eda:	00 e0       	ldi	r16, 0x00	; 0
    1edc:	10 e0       	ldi	r17, 0x00	; 0
    1ede:	98 01       	movw	r18, r16
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	60 e8       	ldi	r22, 0x80	; 128
    1ee6:	7f e3       	ldi	r23, 0x3F	; 63
    1ee8:	ce 01       	movw	r24, r28
    1eea:	87 5a       	subi	r24, 0xA7	; 167
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1ef2:	00 e0       	ldi	r16, 0x00	; 0
    1ef4:	10 e0       	ldi	r17, 0x00	; 0
    1ef6:	98 01       	movw	r18, r16
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	60 e8       	ldi	r22, 0x80	; 128
    1efe:	7f e3       	ldi	r23, 0x3F	; 63
    1f00:	ce 01       	movw	r24, r28
    1f02:	8f 59       	subi	r24, 0x9F	; 159
    1f04:	9f 4f       	sbci	r25, 0xFF	; 255
    1f06:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1f0a:	00 e0       	ldi	r16, 0x00	; 0
    1f0c:	10 e0       	ldi	r17, 0x00	; 0
    1f0e:	98 01       	movw	r18, r16
    1f10:	b9 01       	movw	r22, r18
    1f12:	a8 01       	movw	r20, r16
    1f14:	ce 01       	movw	r24, r28
    1f16:	87 59       	subi	r24, 0x97	; 151
    1f18:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1f1e:	00 e0       	ldi	r16, 0x00	; 0
    1f20:	10 e0       	ldi	r17, 0x00	; 0
    1f22:	98 01       	movw	r18, r16
    1f24:	b9 01       	movw	r22, r18
    1f26:	a8 01       	movw	r20, r16
    1f28:	ce 01       	movw	r24, r28
    1f2a:	8f 58       	subi	r24, 0x8F	; 143
    1f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    1f32:	00 e0       	ldi	r16, 0x00	; 0
    1f34:	10 e0       	ldi	r17, 0x00	; 0
    1f36:	98 01       	movw	r18, r16
    1f38:	b9 01       	movw	r22, r18
    1f3a:	a8 01       	movw	r20, r16
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	87 58       	subi	r24, 0x87	; 135
    1f40:	9f 4f       	sbci	r25, 0xFF	; 255
    1f42:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    1f46:	cb 57       	subi	r28, 0x7B	; 123
    1f48:	df 4f       	sbci	r29, 0xFF	; 255
    1f4a:	79 82       	std	Y+1, r7	; 0x01
    1f4c:	68 82       	st	Y, r6
    1f4e:	c5 58       	subi	r28, 0x85	; 133
    1f50:	d0 40       	sbci	r29, 0x00	; 0
    1f52:	c9 57       	subi	r28, 0x79	; 121
    1f54:	df 4f       	sbci	r29, 0xFF	; 255
    1f56:	99 82       	std	Y+1, r9	; 0x01
    1f58:	88 82       	st	Y, r8
    1f5a:	c7 58       	subi	r28, 0x87	; 135
    1f5c:	d0 40       	sbci	r29, 0x00	; 0
    1f5e:	cf 57       	subi	r28, 0x7F	; 127
    1f60:	df 4f       	sbci	r29, 0xFF	; 255
    1f62:	b9 82       	std	Y+1, r11	; 0x01
    1f64:	a8 82       	st	Y, r10
    1f66:	c1 58       	subi	r28, 0x81	; 129
    1f68:	d0 40       	sbci	r29, 0x00	; 0
    1f6a:	cd 57       	subi	r28, 0x7D	; 125
    1f6c:	df 4f       	sbci	r29, 0xFF	; 255
    1f6e:	d9 82       	std	Y+1, r13	; 0x01
    1f70:	c8 82       	st	Y, r12
    1f72:	c3 58       	subi	r28, 0x83	; 131
    1f74:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),inc_matrix),QB_SIZE2);
    1f76:	9e 01       	movw	r18, r28
    1f78:	2f 57       	subi	r18, 0x7F	; 127
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	ae 01       	movw	r20, r28
    1f7e:	4b 57       	subi	r20, 0x7B	; 123
    1f80:	5f 4f       	sbci	r21, 0xFF	; 255
    1f82:	62 e0       	ldi	r22, 0x02	; 2
    1f84:	70 e0       	ldi	r23, 0x00	; 0
    1f86:	c7 01       	movw	r24, r14
    1f88:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    1f8c:	ae 01       	movw	r20, r28
    1f8e:	4f 5f       	subi	r20, 0xFF	; 255
    1f90:	5f 4f       	sbci	r21, 0xFF	; 255
    1f92:	bc 01       	movw	r22, r24
    1f94:	c7 01       	movw	r24, r14
    1f96:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1f9a:	42 e0       	ldi	r20, 0x02	; 2
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	c7 01       	movw	r24, r14
    1fa2:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    1fa6:	c8 57       	subi	r28, 0x78	; 120
    1fa8:	df 4f       	sbci	r29, 0xFF	; 255
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	df 90       	pop	r13
    1fc2:	cf 90       	pop	r12
    1fc4:	bf 90       	pop	r11
    1fc6:	af 90       	pop	r10
    1fc8:	9f 90       	pop	r9
    1fca:	8f 90       	pop	r8
    1fcc:	7f 90       	pop	r7
    1fce:	6f 90       	pop	r6
    1fd0:	08 95       	ret

00001fd2 <_ZN5Gates3DECEiiii>:
int * Gates::DEC(int theta1, int phi1, int theta2,int phi2){
    1fd2:	6f 92       	push	r6
    1fd4:	7f 92       	push	r7
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	c8 58       	subi	r28, 0x88	; 136
    1ff4:	d1 09       	sbc	r29, r1
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	7c 01       	movw	r14, r24
    2002:	3b 01       	movw	r6, r22
    2004:	5a 01       	movw	r10, r20
    2006:	49 01       	movw	r8, r18
    2008:	68 01       	movw	r12, r16
	Complex dec_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
													     {Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    200a:	00 e0       	ldi	r16, 0x00	; 0
    200c:	10 e0       	ldi	r17, 0x00	; 0
    200e:	98 01       	movw	r18, r16
    2010:	b9 01       	movw	r22, r18
    2012:	a8 01       	movw	r20, r16
    2014:	ce 01       	movw	r24, r28
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    201c:	00 e0       	ldi	r16, 0x00	; 0
    201e:	10 e0       	ldi	r17, 0x00	; 0
    2020:	98 01       	movw	r18, r16
    2022:	b9 01       	movw	r22, r18
    2024:	a8 01       	movw	r20, r16
    2026:	ce 01       	movw	r24, r28
    2028:	09 96       	adiw	r24, 0x09	; 9
    202a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    202e:	00 e0       	ldi	r16, 0x00	; 0
    2030:	10 e0       	ldi	r17, 0x00	; 0
    2032:	98 01       	movw	r18, r16
    2034:	b9 01       	movw	r22, r18
    2036:	a8 01       	movw	r20, r16
    2038:	ce 01       	movw	r24, r28
    203a:	41 96       	adiw	r24, 0x11	; 17
    203c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2040:	00 e0       	ldi	r16, 0x00	; 0
    2042:	10 e0       	ldi	r17, 0x00	; 0
    2044:	98 01       	movw	r18, r16
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	50 e0       	ldi	r21, 0x00	; 0
    204a:	60 e8       	ldi	r22, 0x80	; 128
    204c:	7f e3       	ldi	r23, 0x3F	; 63
    204e:	ce 01       	movw	r24, r28
    2050:	49 96       	adiw	r24, 0x19	; 25
    2052:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2056:	00 e0       	ldi	r16, 0x00	; 0
    2058:	10 e0       	ldi	r17, 0x00	; 0
    205a:	98 01       	movw	r18, r16
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	60 e8       	ldi	r22, 0x80	; 128
    2062:	7f e3       	ldi	r23, 0x3F	; 63
    2064:	ce 01       	movw	r24, r28
    2066:	81 96       	adiw	r24, 0x21	; 33
    2068:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    206c:	00 e0       	ldi	r16, 0x00	; 0
    206e:	10 e0       	ldi	r17, 0x00	; 0
    2070:	98 01       	movw	r18, r16
    2072:	b9 01       	movw	r22, r18
    2074:	a8 01       	movw	r20, r16
    2076:	ce 01       	movw	r24, r28
    2078:	89 96       	adiw	r24, 0x29	; 41
    207a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    207e:	00 e0       	ldi	r16, 0x00	; 0
    2080:	10 e0       	ldi	r17, 0x00	; 0
    2082:	98 01       	movw	r18, r16
    2084:	b9 01       	movw	r22, r18
    2086:	a8 01       	movw	r20, r16
    2088:	ce 01       	movw	r24, r28
    208a:	c1 96       	adiw	r24, 0x31	; 49
    208c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2090:	00 e0       	ldi	r16, 0x00	; 0
    2092:	10 e0       	ldi	r17, 0x00	; 0
    2094:	98 01       	movw	r18, r16
    2096:	b9 01       	movw	r22, r18
    2098:	a8 01       	movw	r20, r16
    209a:	ce 01       	movw	r24, r28
    209c:	c9 96       	adiw	r24, 0x39	; 57
    209e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    20a2:	00 e0       	ldi	r16, 0x00	; 0
    20a4:	10 e0       	ldi	r17, 0x00	; 0
    20a6:	98 01       	movw	r18, r16
    20a8:	b9 01       	movw	r22, r18
    20aa:	a8 01       	movw	r20, r16
    20ac:	ce 01       	movw	r24, r28
    20ae:	8f 5b       	subi	r24, 0xBF	; 191
    20b0:	9f 4f       	sbci	r25, 0xFF	; 255
    20b2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    20b6:	00 e0       	ldi	r16, 0x00	; 0
    20b8:	10 e0       	ldi	r17, 0x00	; 0
    20ba:	98 01       	movw	r18, r16
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	60 e8       	ldi	r22, 0x80	; 128
    20c2:	7f e3       	ldi	r23, 0x3F	; 63
    20c4:	ce 01       	movw	r24, r28
    20c6:	87 5b       	subi	r24, 0xB7	; 183
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    20ce:	00 e0       	ldi	r16, 0x00	; 0
    20d0:	10 e0       	ldi	r17, 0x00	; 0
    20d2:	98 01       	movw	r18, r16
    20d4:	b9 01       	movw	r22, r18
    20d6:	a8 01       	movw	r20, r16
    20d8:	ce 01       	movw	r24, r28
    20da:	8f 5a       	subi	r24, 0xAF	; 175
    20dc:	9f 4f       	sbci	r25, 0xFF	; 255
    20de:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    20e2:	00 e0       	ldi	r16, 0x00	; 0
    20e4:	10 e0       	ldi	r17, 0x00	; 0
    20e6:	98 01       	movw	r18, r16
    20e8:	b9 01       	movw	r22, r18
    20ea:	a8 01       	movw	r20, r16
    20ec:	ce 01       	movw	r24, r28
    20ee:	87 5a       	subi	r24, 0xA7	; 167
    20f0:	9f 4f       	sbci	r25, 0xFF	; 255
    20f2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    20f6:	00 e0       	ldi	r16, 0x00	; 0
    20f8:	10 e0       	ldi	r17, 0x00	; 0
    20fa:	98 01       	movw	r18, r16
    20fc:	b9 01       	movw	r22, r18
    20fe:	a8 01       	movw	r20, r16
    2100:	ce 01       	movw	r24, r28
    2102:	8f 59       	subi	r24, 0x9F	; 159
    2104:	9f 4f       	sbci	r25, 0xFF	; 255
    2106:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    210a:	00 e0       	ldi	r16, 0x00	; 0
    210c:	10 e0       	ldi	r17, 0x00	; 0
    210e:	98 01       	movw	r18, r16
    2110:	b9 01       	movw	r22, r18
    2112:	a8 01       	movw	r20, r16
    2114:	ce 01       	movw	r24, r28
    2116:	87 59       	subi	r24, 0x97	; 151
    2118:	9f 4f       	sbci	r25, 0xFF	; 255
    211a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    211e:	00 e0       	ldi	r16, 0x00	; 0
    2120:	10 e0       	ldi	r17, 0x00	; 0
    2122:	98 01       	movw	r18, r16
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	60 e8       	ldi	r22, 0x80	; 128
    212a:	7f e3       	ldi	r23, 0x3F	; 63
    212c:	ce 01       	movw	r24, r28
    212e:	8f 58       	subi	r24, 0x8F	; 143
    2130:	9f 4f       	sbci	r25, 0xFF	; 255
    2132:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2136:	00 e0       	ldi	r16, 0x00	; 0
    2138:	10 e0       	ldi	r17, 0x00	; 0
    213a:	98 01       	movw	r18, r16
    213c:	b9 01       	movw	r22, r18
    213e:	a8 01       	movw	r20, r16
    2140:	ce 01       	movw	r24, r28
    2142:	87 58       	subi	r24, 0x87	; 135
    2144:	9f 4f       	sbci	r25, 0xFF	; 255
    2146:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    214a:	cb 57       	subi	r28, 0x7B	; 123
    214c:	df 4f       	sbci	r29, 0xFF	; 255
    214e:	79 82       	std	Y+1, r7	; 0x01
    2150:	68 82       	st	Y, r6
    2152:	c5 58       	subi	r28, 0x85	; 133
    2154:	d0 40       	sbci	r29, 0x00	; 0
    2156:	c9 57       	subi	r28, 0x79	; 121
    2158:	df 4f       	sbci	r29, 0xFF	; 255
    215a:	99 82       	std	Y+1, r9	; 0x01
    215c:	88 82       	st	Y, r8
    215e:	c7 58       	subi	r28, 0x87	; 135
    2160:	d0 40       	sbci	r29, 0x00	; 0
    2162:	cf 57       	subi	r28, 0x7F	; 127
    2164:	df 4f       	sbci	r29, 0xFF	; 255
    2166:	b9 82       	std	Y+1, r11	; 0x01
    2168:	a8 82       	st	Y, r10
    216a:	c1 58       	subi	r28, 0x81	; 129
    216c:	d0 40       	sbci	r29, 0x00	; 0
    216e:	cd 57       	subi	r28, 0x7D	; 125
    2170:	df 4f       	sbci	r29, 0xFF	; 255
    2172:	d9 82       	std	Y+1, r13	; 0x01
    2174:	c8 82       	st	Y, r12
    2176:	c3 58       	subi	r28, 0x83	; 131
    2178:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    217a:	9e 01       	movw	r18, r28
    217c:	2f 57       	subi	r18, 0x7F	; 127
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	ae 01       	movw	r20, r28
    2182:	4b 57       	subi	r20, 0x7B	; 123
    2184:	5f 4f       	sbci	r21, 0xFF	; 255
    2186:	62 e0       	ldi	r22, 0x02	; 2
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	c7 01       	movw	r24, r14
    218c:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    2190:	ae 01       	movw	r20, r28
    2192:	4f 5f       	subi	r20, 0xFF	; 255
    2194:	5f 4f       	sbci	r21, 0xFF	; 255
    2196:	bc 01       	movw	r22, r24
    2198:	c7 01       	movw	r24, r14
    219a:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    219e:	42 e0       	ldi	r20, 0x02	; 2
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	bc 01       	movw	r22, r24
    21a4:	c7 01       	movw	r24, r14
    21a6:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    21aa:	c8 57       	subi	r28, 0x78	; 120
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	df 90       	pop	r13
    21c6:	cf 90       	pop	r12
    21c8:	bf 90       	pop	r11
    21ca:	af 90       	pop	r10
    21cc:	9f 90       	pop	r9
    21ce:	8f 90       	pop	r8
    21d0:	7f 90       	pop	r7
    21d2:	6f 90       	pop	r6
    21d4:	08 95       	ret

000021d6 <_ZN5Gates3SWQEiiii>:
int * Gates::SWQ(int theta1, int phi1, int theta2,int phi2){
    21d6:	6f 92       	push	r6
    21d8:	7f 92       	push	r7
    21da:	8f 92       	push	r8
    21dc:	9f 92       	push	r9
    21de:	af 92       	push	r10
    21e0:	bf 92       	push	r11
    21e2:	cf 92       	push	r12
    21e4:	df 92       	push	r13
    21e6:	ef 92       	push	r14
    21e8:	ff 92       	push	r15
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	c8 58       	subi	r28, 0x88	; 136
    21f8:	d1 09       	sbc	r29, r1
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	7c 01       	movw	r14, r24
    2206:	3b 01       	movw	r6, r22
    2208:	5a 01       	movw	r10, r20
    220a:	49 01       	movw	r8, r18
    220c:	68 01       	movw	r12, r16
	Complex swq_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),   Complex(0,0),   Complex(0,0)},
	 												     {Complex(0,0),Complex(.5,.5), Complex(.5,-.5),Complex(0,0)},
													     {Complex(0,0),Complex(.5,-.5),Complex(.5,.5), Complex(0,0)},
													     {Complex(0,0),Complex(0,0),   Complex(0,0),   Complex(1,0)}};
    220e:	00 e0       	ldi	r16, 0x00	; 0
    2210:	10 e0       	ldi	r17, 0x00	; 0
    2212:	98 01       	movw	r18, r16
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	60 e8       	ldi	r22, 0x80	; 128
    221a:	7f e3       	ldi	r23, 0x3F	; 63
    221c:	ce 01       	movw	r24, r28
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	10 e0       	ldi	r17, 0x00	; 0
    2228:	98 01       	movw	r18, r16
    222a:	b9 01       	movw	r22, r18
    222c:	a8 01       	movw	r20, r16
    222e:	ce 01       	movw	r24, r28
    2230:	09 96       	adiw	r24, 0x09	; 9
    2232:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2236:	00 e0       	ldi	r16, 0x00	; 0
    2238:	10 e0       	ldi	r17, 0x00	; 0
    223a:	98 01       	movw	r18, r16
    223c:	b9 01       	movw	r22, r18
    223e:	a8 01       	movw	r20, r16
    2240:	ce 01       	movw	r24, r28
    2242:	41 96       	adiw	r24, 0x11	; 17
    2244:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2248:	00 e0       	ldi	r16, 0x00	; 0
    224a:	10 e0       	ldi	r17, 0x00	; 0
    224c:	98 01       	movw	r18, r16
    224e:	b9 01       	movw	r22, r18
    2250:	a8 01       	movw	r20, r16
    2252:	ce 01       	movw	r24, r28
    2254:	49 96       	adiw	r24, 0x19	; 25
    2256:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    225a:	00 e0       	ldi	r16, 0x00	; 0
    225c:	10 e0       	ldi	r17, 0x00	; 0
    225e:	98 01       	movw	r18, r16
    2260:	b9 01       	movw	r22, r18
    2262:	a8 01       	movw	r20, r16
    2264:	ce 01       	movw	r24, r28
    2266:	81 96       	adiw	r24, 0x21	; 33
    2268:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    226c:	00 e0       	ldi	r16, 0x00	; 0
    226e:	10 e0       	ldi	r17, 0x00	; 0
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f e3       	ldi	r19, 0x3F	; 63
    2274:	b9 01       	movw	r22, r18
    2276:	a8 01       	movw	r20, r16
    2278:	ce 01       	movw	r24, r28
    227a:	89 96       	adiw	r24, 0x29	; 41
    227c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2280:	00 e0       	ldi	r16, 0x00	; 0
    2282:	10 e0       	ldi	r17, 0x00	; 0
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	3f eb       	ldi	r19, 0xBF	; 191
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	7f e3       	ldi	r23, 0x3F	; 63
    2290:	ce 01       	movw	r24, r28
    2292:	c1 96       	adiw	r24, 0x31	; 49
    2294:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2298:	00 e0       	ldi	r16, 0x00	; 0
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	98 01       	movw	r18, r16
    229e:	b9 01       	movw	r22, r18
    22a0:	a8 01       	movw	r20, r16
    22a2:	ce 01       	movw	r24, r28
    22a4:	c9 96       	adiw	r24, 0x39	; 57
    22a6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    22aa:	00 e0       	ldi	r16, 0x00	; 0
    22ac:	10 e0       	ldi	r17, 0x00	; 0
    22ae:	98 01       	movw	r18, r16
    22b0:	b9 01       	movw	r22, r18
    22b2:	a8 01       	movw	r20, r16
    22b4:	ce 01       	movw	r24, r28
    22b6:	8f 5b       	subi	r24, 0xBF	; 191
    22b8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ba:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    22be:	00 e0       	ldi	r16, 0x00	; 0
    22c0:	10 e0       	ldi	r17, 0x00	; 0
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	3f eb       	ldi	r19, 0xBF	; 191
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	7f e3       	ldi	r23, 0x3F	; 63
    22ce:	ce 01       	movw	r24, r28
    22d0:	87 5b       	subi	r24, 0xB7	; 183
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    22d8:	00 e0       	ldi	r16, 0x00	; 0
    22da:	10 e0       	ldi	r17, 0x00	; 0
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f e3       	ldi	r19, 0x3F	; 63
    22e0:	b9 01       	movw	r22, r18
    22e2:	a8 01       	movw	r20, r16
    22e4:	ce 01       	movw	r24, r28
    22e6:	8f 5a       	subi	r24, 0xAF	; 175
    22e8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ea:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    22ee:	00 e0       	ldi	r16, 0x00	; 0
    22f0:	10 e0       	ldi	r17, 0x00	; 0
    22f2:	98 01       	movw	r18, r16
    22f4:	b9 01       	movw	r22, r18
    22f6:	a8 01       	movw	r20, r16
    22f8:	ce 01       	movw	r24, r28
    22fa:	87 5a       	subi	r24, 0xA7	; 167
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2302:	00 e0       	ldi	r16, 0x00	; 0
    2304:	10 e0       	ldi	r17, 0x00	; 0
    2306:	98 01       	movw	r18, r16
    2308:	b9 01       	movw	r22, r18
    230a:	a8 01       	movw	r20, r16
    230c:	ce 01       	movw	r24, r28
    230e:	8f 59       	subi	r24, 0x9F	; 159
    2310:	9f 4f       	sbci	r25, 0xFF	; 255
    2312:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2316:	00 e0       	ldi	r16, 0x00	; 0
    2318:	10 e0       	ldi	r17, 0x00	; 0
    231a:	98 01       	movw	r18, r16
    231c:	b9 01       	movw	r22, r18
    231e:	a8 01       	movw	r20, r16
    2320:	ce 01       	movw	r24, r28
    2322:	87 59       	subi	r24, 0x97	; 151
    2324:	9f 4f       	sbci	r25, 0xFF	; 255
    2326:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    232a:	00 e0       	ldi	r16, 0x00	; 0
    232c:	10 e0       	ldi	r17, 0x00	; 0
    232e:	98 01       	movw	r18, r16
    2330:	b9 01       	movw	r22, r18
    2332:	a8 01       	movw	r20, r16
    2334:	ce 01       	movw	r24, r28
    2336:	8f 58       	subi	r24, 0x8F	; 143
    2338:	9f 4f       	sbci	r25, 0xFF	; 255
    233a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    233e:	00 e0       	ldi	r16, 0x00	; 0
    2340:	10 e0       	ldi	r17, 0x00	; 0
    2342:	98 01       	movw	r18, r16
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	60 e8       	ldi	r22, 0x80	; 128
    234a:	7f e3       	ldi	r23, 0x3F	; 63
    234c:	ce 01       	movw	r24, r28
    234e:	87 58       	subi	r24, 0x87	; 135
    2350:	9f 4f       	sbci	r25, 0xFF	; 255
    2352:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    2356:	cb 57       	subi	r28, 0x7B	; 123
    2358:	df 4f       	sbci	r29, 0xFF	; 255
    235a:	79 82       	std	Y+1, r7	; 0x01
    235c:	68 82       	st	Y, r6
    235e:	c5 58       	subi	r28, 0x85	; 133
    2360:	d0 40       	sbci	r29, 0x00	; 0
    2362:	c9 57       	subi	r28, 0x79	; 121
    2364:	df 4f       	sbci	r29, 0xFF	; 255
    2366:	99 82       	std	Y+1, r9	; 0x01
    2368:	88 82       	st	Y, r8
    236a:	c7 58       	subi	r28, 0x87	; 135
    236c:	d0 40       	sbci	r29, 0x00	; 0
    236e:	cf 57       	subi	r28, 0x7F	; 127
    2370:	df 4f       	sbci	r29, 0xFF	; 255
    2372:	b9 82       	std	Y+1, r11	; 0x01
    2374:	a8 82       	st	Y, r10
    2376:	c1 58       	subi	r28, 0x81	; 129
    2378:	d0 40       	sbci	r29, 0x00	; 0
    237a:	cd 57       	subi	r28, 0x7D	; 125
    237c:	df 4f       	sbci	r29, 0xFF	; 255
    237e:	d9 82       	std	Y+1, r13	; 0x01
    2380:	c8 82       	st	Y, r12
    2382:	c3 58       	subi	r28, 0x83	; 131
    2384:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),swq_matrix),QB_SIZE2);
    2386:	9e 01       	movw	r18, r28
    2388:	2f 57       	subi	r18, 0x7F	; 127
    238a:	3f 4f       	sbci	r19, 0xFF	; 255
    238c:	ae 01       	movw	r20, r28
    238e:	4b 57       	subi	r20, 0x7B	; 123
    2390:	5f 4f       	sbci	r21, 0xFF	; 255
    2392:	62 e0       	ldi	r22, 0x02	; 2
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	c7 01       	movw	r24, r14
    2398:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    239c:	ae 01       	movw	r20, r28
    239e:	4f 5f       	subi	r20, 0xFF	; 255
    23a0:	5f 4f       	sbci	r21, 0xFF	; 255
    23a2:	bc 01       	movw	r22, r24
    23a4:	c7 01       	movw	r24, r14
    23a6:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    23aa:	42 e0       	ldi	r20, 0x02	; 2
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	bc 01       	movw	r22, r24
    23b0:	c7 01       	movw	r24, r14
    23b2:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    23b6:	c8 57       	subi	r28, 0x78	; 120
    23b8:	df 4f       	sbci	r29, 0xFF	; 255
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	df 90       	pop	r13
    23d2:	cf 90       	pop	r12
    23d4:	bf 90       	pop	r11
    23d6:	af 90       	pop	r10
    23d8:	9f 90       	pop	r9
    23da:	8f 90       	pop	r8
    23dc:	7f 90       	pop	r7
    23de:	6f 90       	pop	r6
    23e0:	08 95       	ret

000023e2 <_ZN5Gates3SWIEiiii>:
int * Gates::SWI(int theta1, int phi1, int theta2,int phi2){
    23e2:	6f 92       	push	r6
    23e4:	7f 92       	push	r7
    23e6:	8f 92       	push	r8
    23e8:	9f 92       	push	r9
    23ea:	af 92       	push	r10
    23ec:	bf 92       	push	r11
    23ee:	cf 92       	push	r12
    23f0:	df 92       	push	r13
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	c8 58       	subi	r28, 0x88	; 136
    2404:	d1 09       	sbc	r29, r1
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	7c 01       	movw	r14, r24
    2412:	3b 01       	movw	r6, r22
    2414:	5a 01       	movw	r10, r20
    2416:	49 01       	movw	r8, r18
    2418:	68 01       	movw	r12, r16
	Complex dec_matrix[QB2_MATRIX_SIZE][QB2_MATRIX_SIZE]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,1),Complex(0,0)},
 													     {Complex(0,0),Complex(0,1),Complex(0,0),Complex(0,0)},
													     {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    241a:	00 e0       	ldi	r16, 0x00	; 0
    241c:	10 e0       	ldi	r17, 0x00	; 0
    241e:	98 01       	movw	r18, r16
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	60 e8       	ldi	r22, 0x80	; 128
    2426:	7f e3       	ldi	r23, 0x3F	; 63
    2428:	ce 01       	movw	r24, r28
    242a:	01 96       	adiw	r24, 0x01	; 1
    242c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2430:	00 e0       	ldi	r16, 0x00	; 0
    2432:	10 e0       	ldi	r17, 0x00	; 0
    2434:	98 01       	movw	r18, r16
    2436:	b9 01       	movw	r22, r18
    2438:	a8 01       	movw	r20, r16
    243a:	ce 01       	movw	r24, r28
    243c:	09 96       	adiw	r24, 0x09	; 9
    243e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2442:	00 e0       	ldi	r16, 0x00	; 0
    2444:	10 e0       	ldi	r17, 0x00	; 0
    2446:	98 01       	movw	r18, r16
    2448:	b9 01       	movw	r22, r18
    244a:	a8 01       	movw	r20, r16
    244c:	ce 01       	movw	r24, r28
    244e:	41 96       	adiw	r24, 0x11	; 17
    2450:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2454:	00 e0       	ldi	r16, 0x00	; 0
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	98 01       	movw	r18, r16
    245a:	b9 01       	movw	r22, r18
    245c:	a8 01       	movw	r20, r16
    245e:	ce 01       	movw	r24, r28
    2460:	49 96       	adiw	r24, 0x19	; 25
    2462:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2466:	00 e0       	ldi	r16, 0x00	; 0
    2468:	10 e0       	ldi	r17, 0x00	; 0
    246a:	98 01       	movw	r18, r16
    246c:	b9 01       	movw	r22, r18
    246e:	a8 01       	movw	r20, r16
    2470:	ce 01       	movw	r24, r28
    2472:	81 96       	adiw	r24, 0x21	; 33
    2474:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2478:	00 e0       	ldi	r16, 0x00	; 0
    247a:	10 e0       	ldi	r17, 0x00	; 0
    247c:	98 01       	movw	r18, r16
    247e:	b9 01       	movw	r22, r18
    2480:	a8 01       	movw	r20, r16
    2482:	ce 01       	movw	r24, r28
    2484:	89 96       	adiw	r24, 0x29	; 41
    2486:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    248a:	00 e0       	ldi	r16, 0x00	; 0
    248c:	10 e0       	ldi	r17, 0x00	; 0
    248e:	20 e8       	ldi	r18, 0x80	; 128
    2490:	3f e3       	ldi	r19, 0x3F	; 63
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	ba 01       	movw	r22, r20
    2498:	ce 01       	movw	r24, r28
    249a:	c1 96       	adiw	r24, 0x31	; 49
    249c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    24a0:	00 e0       	ldi	r16, 0x00	; 0
    24a2:	10 e0       	ldi	r17, 0x00	; 0
    24a4:	98 01       	movw	r18, r16
    24a6:	b9 01       	movw	r22, r18
    24a8:	a8 01       	movw	r20, r16
    24aa:	ce 01       	movw	r24, r28
    24ac:	c9 96       	adiw	r24, 0x39	; 57
    24ae:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    24b2:	00 e0       	ldi	r16, 0x00	; 0
    24b4:	10 e0       	ldi	r17, 0x00	; 0
    24b6:	98 01       	movw	r18, r16
    24b8:	b9 01       	movw	r22, r18
    24ba:	a8 01       	movw	r20, r16
    24bc:	ce 01       	movw	r24, r28
    24be:	8f 5b       	subi	r24, 0xBF	; 191
    24c0:	9f 4f       	sbci	r25, 0xFF	; 255
    24c2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    24c6:	00 e0       	ldi	r16, 0x00	; 0
    24c8:	10 e0       	ldi	r17, 0x00	; 0
    24ca:	20 e8       	ldi	r18, 0x80	; 128
    24cc:	3f e3       	ldi	r19, 0x3F	; 63
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	ba 01       	movw	r22, r20
    24d4:	ce 01       	movw	r24, r28
    24d6:	87 5b       	subi	r24, 0xB7	; 183
    24d8:	9f 4f       	sbci	r25, 0xFF	; 255
    24da:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    24de:	00 e0       	ldi	r16, 0x00	; 0
    24e0:	10 e0       	ldi	r17, 0x00	; 0
    24e2:	98 01       	movw	r18, r16
    24e4:	b9 01       	movw	r22, r18
    24e6:	a8 01       	movw	r20, r16
    24e8:	ce 01       	movw	r24, r28
    24ea:	8f 5a       	subi	r24, 0xAF	; 175
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    24f2:	00 e0       	ldi	r16, 0x00	; 0
    24f4:	10 e0       	ldi	r17, 0x00	; 0
    24f6:	98 01       	movw	r18, r16
    24f8:	b9 01       	movw	r22, r18
    24fa:	a8 01       	movw	r20, r16
    24fc:	ce 01       	movw	r24, r28
    24fe:	87 5a       	subi	r24, 0xA7	; 167
    2500:	9f 4f       	sbci	r25, 0xFF	; 255
    2502:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2506:	00 e0       	ldi	r16, 0x00	; 0
    2508:	10 e0       	ldi	r17, 0x00	; 0
    250a:	98 01       	movw	r18, r16
    250c:	b9 01       	movw	r22, r18
    250e:	a8 01       	movw	r20, r16
    2510:	ce 01       	movw	r24, r28
    2512:	8f 59       	subi	r24, 0x9F	; 159
    2514:	9f 4f       	sbci	r25, 0xFF	; 255
    2516:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    251a:	00 e0       	ldi	r16, 0x00	; 0
    251c:	10 e0       	ldi	r17, 0x00	; 0
    251e:	98 01       	movw	r18, r16
    2520:	b9 01       	movw	r22, r18
    2522:	a8 01       	movw	r20, r16
    2524:	ce 01       	movw	r24, r28
    2526:	87 59       	subi	r24, 0x97	; 151
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    252e:	00 e0       	ldi	r16, 0x00	; 0
    2530:	10 e0       	ldi	r17, 0x00	; 0
    2532:	98 01       	movw	r18, r16
    2534:	b9 01       	movw	r22, r18
    2536:	a8 01       	movw	r20, r16
    2538:	ce 01       	movw	r24, r28
    253a:	8f 58       	subi	r24, 0x8F	; 143
    253c:	9f 4f       	sbci	r25, 0xFF	; 255
    253e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2542:	00 e0       	ldi	r16, 0x00	; 0
    2544:	10 e0       	ldi	r17, 0x00	; 0
    2546:	98 01       	movw	r18, r16
    2548:	40 e0       	ldi	r20, 0x00	; 0
    254a:	50 e0       	ldi	r21, 0x00	; 0
    254c:	60 e8       	ldi	r22, 0x80	; 128
    254e:	7f e3       	ldi	r23, 0x3F	; 63
    2550:	ce 01       	movw	r24, r28
    2552:	87 58       	subi	r24, 0x87	; 135
    2554:	9f 4f       	sbci	r25, 0xFF	; 255
    2556:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
    255a:	cb 57       	subi	r28, 0x7B	; 123
    255c:	df 4f       	sbci	r29, 0xFF	; 255
    255e:	79 82       	std	Y+1, r7	; 0x01
    2560:	68 82       	st	Y, r6
    2562:	c5 58       	subi	r28, 0x85	; 133
    2564:	d0 40       	sbci	r29, 0x00	; 0
    2566:	c9 57       	subi	r28, 0x79	; 121
    2568:	df 4f       	sbci	r29, 0xFF	; 255
    256a:	99 82       	std	Y+1, r9	; 0x01
    256c:	88 82       	st	Y, r8
    256e:	c7 58       	subi	r28, 0x87	; 135
    2570:	d0 40       	sbci	r29, 0x00	; 0
    2572:	cf 57       	subi	r28, 0x7F	; 127
    2574:	df 4f       	sbci	r29, 0xFF	; 255
    2576:	b9 82       	std	Y+1, r11	; 0x01
    2578:	a8 82       	st	Y, r10
    257a:	c1 58       	subi	r28, 0x81	; 129
    257c:	d0 40       	sbci	r29, 0x00	; 0
    257e:	cd 57       	subi	r28, 0x7D	; 125
    2580:	df 4f       	sbci	r29, 0xFF	; 255
    2582:	d9 82       	std	Y+1, r13	; 0x01
    2584:	c8 82       	st	Y, r12
    2586:	c3 58       	subi	r28, 0x83	; 131
    2588:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
    258a:	9e 01       	movw	r18, r28
    258c:	2f 57       	subi	r18, 0x7F	; 127
    258e:	3f 4f       	sbci	r19, 0xFF	; 255
    2590:	ae 01       	movw	r20, r28
    2592:	4b 57       	subi	r20, 0x7B	; 123
    2594:	5f 4f       	sbci	r21, 0xFF	; 255
    2596:	62 e0       	ldi	r22, 0x02	; 2
    2598:	70 e0       	ldi	r23, 0x00	; 0
    259a:	c7 01       	movw	r24, r14
    259c:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    25a0:	ae 01       	movw	r20, r28
    25a2:	4f 5f       	subi	r20, 0xFF	; 255
    25a4:	5f 4f       	sbci	r21, 0xFF	; 255
    25a6:	bc 01       	movw	r22, r24
    25a8:	c7 01       	movw	r24, r14
    25aa:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    25ae:	42 e0       	ldi	r20, 0x02	; 2
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	bc 01       	movw	r22, r24
    25b4:	c7 01       	movw	r24, r14
    25b6:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    25ba:	c8 57       	subi	r28, 0x78	; 120
    25bc:	df 4f       	sbci	r29, 0xFF	; 255
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
    25d8:	bf 90       	pop	r11
    25da:	af 90       	pop	r10
    25dc:	9f 90       	pop	r9
    25de:	8f 90       	pop	r8
    25e0:	7f 90       	pop	r7
    25e2:	6f 90       	pop	r6
    25e4:	08 95       	ret

000025e6 <_ZN5Gates3ROXEiii>:
int * Gates::ROX(int theta,int phi,int delta){
    25e6:	2f 92       	push	r2
    25e8:	3f 92       	push	r3
    25ea:	4f 92       	push	r4
    25ec:	5f 92       	push	r5
    25ee:	6f 92       	push	r6
    25f0:	7f 92       	push	r7
    25f2:	8f 92       	push	r8
    25f4:	9f 92       	push	r9
    25f6:	af 92       	push	r10
    25f8:	bf 92       	push	r11
    25fa:	cf 92       	push	r12
    25fc:	df 92       	push	r13
    25fe:	ef 92       	push	r14
    2600:	ff 92       	push	r15
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	a4 97       	sbiw	r28, 0x24	; 36
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	7c 01       	movw	r14, r24
    261c:	1b 01       	movw	r2, r22
    261e:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    2620:	b9 01       	movw	r22, r18
    2622:	88 27       	eor	r24, r24
    2624:	77 fd       	sbrc	r23, 7
    2626:	80 95       	com	r24
    2628:	98 2f       	mov	r25, r24
    262a:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
    262e:	2b ed       	ldi	r18, 0xDB	; 219
    2630:	3f e0       	ldi	r19, 0x0F	; 15
    2632:	49 e4       	ldi	r20, 0x49	; 73
    2634:	50 e4       	ldi	r21, 0x40	; 64
    2636:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	44 e3       	ldi	r20, 0x34	; 52
    2640:	53 e4       	ldi	r21, 0x43	; 67
    2642:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
	Complex rox_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0), Complex(0,-sin(delta_float/2))},
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
    2652:	4b 01       	movw	r8, r22
    2654:	5c 01       	movw	r10, r24
    2656:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <cos>
    265a:	2b 01       	movw	r4, r22
    265c:	3c 01       	movw	r6, r24
														 {Complex(0,-sin(delta_float/2)),Complex(cos(delta_float/2),0)}};
    265e:	00 e0       	ldi	r16, 0x00	; 0
    2660:	10 e0       	ldi	r17, 0x00	; 0
    2662:	98 01       	movw	r18, r16
    2664:	ab 01       	movw	r20, r22
    2666:	bc 01       	movw	r22, r24
    2668:	ce 01       	movw	r24, r28
    266a:	01 96       	adiw	r24, 0x01	; 1
    266c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE2]={theta1,theta2}; int phi_list[QB_SIZE2]={phi1,phi2};
	return vec2ampl(multiply4x4(ampl2vec(QB_SIZE2,theta_list,phi_list),dec_matrix),QB_SIZE2);
}
int * Gates::ROX(int theta,int phi,int delta){
	float delta_float=(delta*M_PI)/180;
	Complex rox_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0), Complex(0,-sin(delta_float/2))},
    2670:	c5 01       	movw	r24, r10
    2672:	b4 01       	movw	r22, r8
    2674:	0e 94 6f 33 	call	0x66de	; 0x66de <sin>
														 {Complex(0,-sin(delta_float/2)),Complex(cos(delta_float/2),0)}};
    2678:	4b 01       	movw	r8, r22
    267a:	5c 01       	movw	r10, r24
    267c:	b7 fa       	bst	r11, 7
    267e:	b0 94       	com	r11
    2680:	b7 f8       	bld	r11, 7
    2682:	b0 94       	com	r11
    2684:	95 01       	movw	r18, r10
    2686:	84 01       	movw	r16, r8
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	ba 01       	movw	r22, r20
    268e:	ce 01       	movw	r24, r28
    2690:	09 96       	adiw	r24, 0x09	; 9
    2692:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2696:	95 01       	movw	r18, r10
    2698:	84 01       	movw	r16, r8
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	ba 01       	movw	r22, r20
    26a0:	ce 01       	movw	r24, r28
    26a2:	41 96       	adiw	r24, 0x11	; 17
    26a4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    26a8:	00 e0       	ldi	r16, 0x00	; 0
    26aa:	10 e0       	ldi	r17, 0x00	; 0
    26ac:	98 01       	movw	r18, r16
    26ae:	b3 01       	movw	r22, r6
    26b0:	a2 01       	movw	r20, r4
    26b2:	ce 01       	movw	r24, r28
    26b4:	49 96       	adiw	r24, 0x19	; 25
    26b6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    26ba:	3c a2       	std	Y+36, r3	; 0x24
    26bc:	2b a2       	std	Y+35, r2	; 0x23
    26be:	da a2       	std	Y+34, r13	; 0x22
    26c0:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
    26c2:	9e 01       	movw	r18, r28
    26c4:	2f 5d       	subi	r18, 0xDF	; 223
    26c6:	3f 4f       	sbci	r19, 0xFF	; 255
    26c8:	ae 01       	movw	r20, r28
    26ca:	4d 5d       	subi	r20, 0xDD	; 221
    26cc:	5f 4f       	sbci	r21, 0xFF	; 255
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	c7 01       	movw	r24, r14
    26d4:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    26d8:	ae 01       	movw	r20, r28
    26da:	4f 5f       	subi	r20, 0xFF	; 255
    26dc:	5f 4f       	sbci	r21, 0xFF	; 255
    26de:	bc 01       	movw	r22, r24
    26e0:	c7 01       	movw	r24, r14
    26e2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    26e6:	41 e0       	ldi	r20, 0x01	; 1
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	bc 01       	movw	r22, r24
    26ec:	c7 01       	movw	r24, r14
    26ee:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    26f2:	a4 96       	adiw	r28, 0x24	; 36
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	ff 90       	pop	r15
    2708:	ef 90       	pop	r14
    270a:	df 90       	pop	r13
    270c:	cf 90       	pop	r12
    270e:	bf 90       	pop	r11
    2710:	af 90       	pop	r10
    2712:	9f 90       	pop	r9
    2714:	8f 90       	pop	r8
    2716:	7f 90       	pop	r7
    2718:	6f 90       	pop	r6
    271a:	5f 90       	pop	r5
    271c:	4f 90       	pop	r4
    271e:	3f 90       	pop	r3
    2720:	2f 90       	pop	r2
    2722:	08 95       	ret

00002724 <_ZN5Gates3ROYEiii>:
int * Gates::ROY(int theta,int phi,int delta){
    2724:	2f 92       	push	r2
    2726:	3f 92       	push	r3
    2728:	4f 92       	push	r4
    272a:	5f 92       	push	r5
    272c:	6f 92       	push	r6
    272e:	7f 92       	push	r7
    2730:	8f 92       	push	r8
    2732:	9f 92       	push	r9
    2734:	af 92       	push	r10
    2736:	bf 92       	push	r11
    2738:	cf 92       	push	r12
    273a:	df 92       	push	r13
    273c:	ef 92       	push	r14
    273e:	ff 92       	push	r15
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	a4 97       	sbiw	r28, 0x24	; 36
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	7c 01       	movw	r14, r24
    275a:	1b 01       	movw	r2, r22
    275c:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    275e:	b9 01       	movw	r22, r18
    2760:	88 27       	eor	r24, r24
    2762:	77 fd       	sbrc	r23, 7
    2764:	80 95       	com	r24
    2766:	98 2f       	mov	r25, r24
    2768:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
    276c:	2b ed       	ldi	r18, 0xDB	; 219
    276e:	3f e0       	ldi	r19, 0x0F	; 15
    2770:	49 e4       	ldi	r20, 0x49	; 73
    2772:	50 e4       	ldi	r21, 0x40	; 64
    2774:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	44 e3       	ldi	r20, 0x34	; 52
    277e:	53 e4       	ldi	r21, 0x43	; 67
    2780:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0),Complex(-sin(delta_float/2),0)},
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
    2790:	4b 01       	movw	r8, r22
    2792:	5c 01       	movw	r10, r24
    2794:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <cos>
    2798:	2b 01       	movw	r4, r22
    279a:	3c 01       	movw	r6, r24
														 {Complex(sin(delta_float/2),0),Complex(cos(delta_float/2),0)}};
    279c:	00 e0       	ldi	r16, 0x00	; 0
    279e:	10 e0       	ldi	r17, 0x00	; 0
    27a0:	98 01       	movw	r18, r16
    27a2:	ab 01       	movw	r20, r22
    27a4:	bc 01       	movw	r22, r24
    27a6:	ce 01       	movw	r24, r28
    27a8:	01 96       	adiw	r24, 0x01	; 1
    27aa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),rox_matrix),QB_SIZE1);		
}
int * Gates::ROY(int theta,int phi,int delta){
	float delta_float=(delta*M_PI)/180;
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(cos(delta_float/2),0),Complex(-sin(delta_float/2),0)},
    27ae:	c5 01       	movw	r24, r10
    27b0:	b4 01       	movw	r22, r8
    27b2:	0e 94 6f 33 	call	0x66de	; 0x66de <sin>
    27b6:	4b 01       	movw	r8, r22
    27b8:	5c 01       	movw	r10, r24
														 {Complex(sin(delta_float/2),0),Complex(cos(delta_float/2),0)}};
    27ba:	ab 01       	movw	r20, r22
    27bc:	bc 01       	movw	r22, r24
    27be:	70 58       	subi	r23, 0x80	; 128
    27c0:	00 e0       	ldi	r16, 0x00	; 0
    27c2:	10 e0       	ldi	r17, 0x00	; 0
    27c4:	98 01       	movw	r18, r16
    27c6:	ce 01       	movw	r24, r28
    27c8:	09 96       	adiw	r24, 0x09	; 9
    27ca:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    27ce:	00 e0       	ldi	r16, 0x00	; 0
    27d0:	10 e0       	ldi	r17, 0x00	; 0
    27d2:	98 01       	movw	r18, r16
    27d4:	b5 01       	movw	r22, r10
    27d6:	a4 01       	movw	r20, r8
    27d8:	ce 01       	movw	r24, r28
    27da:	41 96       	adiw	r24, 0x11	; 17
    27dc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    27e0:	00 e0       	ldi	r16, 0x00	; 0
    27e2:	10 e0       	ldi	r17, 0x00	; 0
    27e4:	98 01       	movw	r18, r16
    27e6:	b3 01       	movw	r22, r6
    27e8:	a2 01       	movw	r20, r4
    27ea:	ce 01       	movw	r24, r28
    27ec:	49 96       	adiw	r24, 0x19	; 25
    27ee:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    27f2:	3c a2       	std	Y+36, r3	; 0x24
    27f4:	2b a2       	std	Y+35, r2	; 0x23
    27f6:	da a2       	std	Y+34, r13	; 0x22
    27f8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    27fa:	9e 01       	movw	r18, r28
    27fc:	2f 5d       	subi	r18, 0xDF	; 223
    27fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2800:	ae 01       	movw	r20, r28
    2802:	4d 5d       	subi	r20, 0xDD	; 221
    2804:	5f 4f       	sbci	r21, 0xFF	; 255
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	c7 01       	movw	r24, r14
    280c:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    2810:	ae 01       	movw	r20, r28
    2812:	4f 5f       	subi	r20, 0xFF	; 255
    2814:	5f 4f       	sbci	r21, 0xFF	; 255
    2816:	bc 01       	movw	r22, r24
    2818:	c7 01       	movw	r24, r14
    281a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    281e:	41 e0       	ldi	r20, 0x01	; 1
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	bc 01       	movw	r22, r24
    2824:	c7 01       	movw	r24, r14
    2826:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    282a:	a4 96       	adiw	r28, 0x24	; 36
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	ff 90       	pop	r15
    2840:	ef 90       	pop	r14
    2842:	df 90       	pop	r13
    2844:	cf 90       	pop	r12
    2846:	bf 90       	pop	r11
    2848:	af 90       	pop	r10
    284a:	9f 90       	pop	r9
    284c:	8f 90       	pop	r8
    284e:	7f 90       	pop	r7
    2850:	6f 90       	pop	r6
    2852:	5f 90       	pop	r5
    2854:	4f 90       	pop	r4
    2856:	3f 90       	pop	r3
    2858:	2f 90       	pop	r2
    285a:	08 95       	ret

0000285c <_ZN5Gates3ROZEiii>:
int * Gates::ROZ(int theta,int phi,int delta){
    285c:	4f 92       	push	r4
    285e:	5f 92       	push	r5
    2860:	6f 92       	push	r6
    2862:	7f 92       	push	r7
    2864:	af 92       	push	r10
    2866:	bf 92       	push	r11
    2868:	cf 92       	push	r12
    286a:	df 92       	push	r13
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	a4 97       	sbiw	r28, 0x24	; 36
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	7c 01       	movw	r14, r24
    288a:	5b 01       	movw	r10, r22
    288c:	6a 01       	movw	r12, r20
	float delta_float=(delta*M_PI)/180;
    288e:	b9 01       	movw	r22, r18
    2890:	88 27       	eor	r24, r24
    2892:	77 fd       	sbrc	r23, 7
    2894:	80 95       	com	r24
    2896:	98 2f       	mov	r25, r24
    2898:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
    289c:	2b ed       	ldi	r18, 0xDB	; 219
    289e:	3f e0       	ldi	r19, 0x0F	; 15
    28a0:	49 e4       	ldi	r20, 0x49	; 73
    28a2:	50 e4       	ldi	r21, 0x40	; 64
    28a4:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	44 e3       	ldi	r20, 0x34	; 52
    28ae:	53 e4       	ldi	r21, 0x43	; 67
    28b0:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
    28b4:	2b 01       	movw	r4, r22
    28b6:	3c 01       	movw	r6, r24
	Complex roy_matrix[QB1_MATRIX_SIZE][QB1_MATRIX_SIZE]{{Complex(0,exp(-delta_float/2)),Complex(0,0)},
    28b8:	90 58       	subi	r25, 0x80	; 128
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	5f e3       	ldi	r21, 0x3F	; 63
    28c2:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
    28c6:	0e 94 cb 30 	call	0x6196	; 0x6196 <exp>
    28ca:	8b 01       	movw	r16, r22
    28cc:	9c 01       	movw	r18, r24
														 {Complex(0,0),		  		     Complex(0,exp(delta_float/2))}};
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	ba 01       	movw	r22, r20
    28d4:	ce 01       	movw	r24, r28
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    28dc:	00 e0       	ldi	r16, 0x00	; 0
    28de:	10 e0       	ldi	r17, 0x00	; 0
    28e0:	98 01       	movw	r18, r16
    28e2:	b9 01       	movw	r22, r18
    28e4:	a8 01       	movw	r20, r16
    28e6:	ce 01       	movw	r24, r28
    28e8:	09 96       	adiw	r24, 0x09	; 9
    28ea:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    28ee:	00 e0       	ldi	r16, 0x00	; 0
    28f0:	10 e0       	ldi	r17, 0x00	; 0
    28f2:	98 01       	movw	r18, r16
    28f4:	b9 01       	movw	r22, r18
    28f6:	a8 01       	movw	r20, r16
    28f8:	ce 01       	movw	r24, r28
    28fa:	41 96       	adiw	r24, 0x11	; 17
    28fc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	c3 01       	movw	r24, r6
    290a:	b2 01       	movw	r22, r4
    290c:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
    2910:	0e 94 cb 30 	call	0x6196	; 0x6196 <exp>
    2914:	8b 01       	movw	r16, r22
    2916:	9c 01       	movw	r18, r24
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	ba 01       	movw	r22, r20
    291e:	ce 01       	movw	r24, r28
    2920:	49 96       	adiw	r24, 0x19	; 25
    2922:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE1]={theta}; int phi_list[QB_SIZE1]={phi};
    2926:	bc a2       	std	Y+36, r11	; 0x24
    2928:	ab a2       	std	Y+35, r10	; 0x23
    292a:	da a2       	std	Y+34, r13	; 0x22
    292c:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(QB_SIZE1,theta_list,phi_list),roy_matrix),QB_SIZE1);
    292e:	9e 01       	movw	r18, r28
    2930:	2f 5d       	subi	r18, 0xDF	; 223
    2932:	3f 4f       	sbci	r19, 0xFF	; 255
    2934:	ae 01       	movw	r20, r28
    2936:	4d 5d       	subi	r20, 0xDD	; 221
    2938:	5f 4f       	sbci	r21, 0xFF	; 255
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	c7 01       	movw	r24, r14
    2940:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    2944:	ae 01       	movw	r20, r28
    2946:	4f 5f       	subi	r20, 0xFF	; 255
    2948:	5f 4f       	sbci	r21, 0xFF	; 255
    294a:	bc 01       	movw	r22, r24
    294c:	c7 01       	movw	r24, r14
    294e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	bc 01       	movw	r22, r24
    2958:	c7 01       	movw	r24, r14
    295a:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    295e:	a4 96       	adiw	r28, 0x24	; 36
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	1f 91       	pop	r17
    2970:	0f 91       	pop	r16
    2972:	ff 90       	pop	r15
    2974:	ef 90       	pop	r14
    2976:	df 90       	pop	r13
    2978:	cf 90       	pop	r12
    297a:	bf 90       	pop	r11
    297c:	af 90       	pop	r10
    297e:	7f 90       	pop	r7
    2980:	6f 90       	pop	r6
    2982:	5f 90       	pop	r5
    2984:	4f 90       	pop	r4
    2986:	08 95       	ret

00002988 <_ZN5Gates3CSWEiiiiii>:
int * Gates::CSW(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3){
    2988:	2f 92       	push	r2
    298a:	3f 92       	push	r3
    298c:	4f 92       	push	r4
    298e:	5f 92       	push	r5
    2990:	6f 92       	push	r6
    2992:	7f 92       	push	r7
    2994:	8f 92       	push	r8
    2996:	9f 92       	push	r9
    2998:	af 92       	push	r10
    299a:	bf 92       	push	r11
    299c:	cf 92       	push	r12
    299e:	df 92       	push	r13
    29a0:	ef 92       	push	r14
    29a2:	ff 92       	push	r15
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	cc 50       	subi	r28, 0x0C	; 12
    29b2:	d2 40       	sbci	r29, 0x02	; 2
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	5c 01       	movw	r10, r24
    29c0:	3b 01       	movw	r6, r22
    29c2:	2a 01       	movw	r4, r20
    29c4:	49 01       	movw	r8, r18
    29c6:	18 01       	movw	r2, r16
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)}};
    29c8:	00 e0       	ldi	r16, 0x00	; 0
    29ca:	10 e0       	ldi	r17, 0x00	; 0
    29cc:	98 01       	movw	r18, r16
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	60 e8       	ldi	r22, 0x80	; 128
    29d4:	7f e3       	ldi	r23, 0x3F	; 63
    29d6:	ce 01       	movw	r24, r28
    29d8:	01 96       	adiw	r24, 0x01	; 1
    29da:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    29de:	00 e0       	ldi	r16, 0x00	; 0
    29e0:	10 e0       	ldi	r17, 0x00	; 0
    29e2:	98 01       	movw	r18, r16
    29e4:	b9 01       	movw	r22, r18
    29e6:	a8 01       	movw	r20, r16
    29e8:	ce 01       	movw	r24, r28
    29ea:	09 96       	adiw	r24, 0x09	; 9
    29ec:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    29f0:	00 e0       	ldi	r16, 0x00	; 0
    29f2:	10 e0       	ldi	r17, 0x00	; 0
    29f4:	98 01       	movw	r18, r16
    29f6:	b9 01       	movw	r22, r18
    29f8:	a8 01       	movw	r20, r16
    29fa:	ce 01       	movw	r24, r28
    29fc:	41 96       	adiw	r24, 0x11	; 17
    29fe:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a02:	00 e0       	ldi	r16, 0x00	; 0
    2a04:	10 e0       	ldi	r17, 0x00	; 0
    2a06:	98 01       	movw	r18, r16
    2a08:	b9 01       	movw	r22, r18
    2a0a:	a8 01       	movw	r20, r16
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	49 96       	adiw	r24, 0x19	; 25
    2a10:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a14:	00 e0       	ldi	r16, 0x00	; 0
    2a16:	10 e0       	ldi	r17, 0x00	; 0
    2a18:	98 01       	movw	r18, r16
    2a1a:	b9 01       	movw	r22, r18
    2a1c:	a8 01       	movw	r20, r16
    2a1e:	ce 01       	movw	r24, r28
    2a20:	81 96       	adiw	r24, 0x21	; 33
    2a22:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a26:	00 e0       	ldi	r16, 0x00	; 0
    2a28:	10 e0       	ldi	r17, 0x00	; 0
    2a2a:	98 01       	movw	r18, r16
    2a2c:	b9 01       	movw	r22, r18
    2a2e:	a8 01       	movw	r20, r16
    2a30:	ce 01       	movw	r24, r28
    2a32:	89 96       	adiw	r24, 0x29	; 41
    2a34:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a38:	00 e0       	ldi	r16, 0x00	; 0
    2a3a:	10 e0       	ldi	r17, 0x00	; 0
    2a3c:	98 01       	movw	r18, r16
    2a3e:	b9 01       	movw	r22, r18
    2a40:	a8 01       	movw	r20, r16
    2a42:	ce 01       	movw	r24, r28
    2a44:	c1 96       	adiw	r24, 0x31	; 49
    2a46:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a4a:	00 e0       	ldi	r16, 0x00	; 0
    2a4c:	10 e0       	ldi	r17, 0x00	; 0
    2a4e:	98 01       	movw	r18, r16
    2a50:	b9 01       	movw	r22, r18
    2a52:	a8 01       	movw	r20, r16
    2a54:	ce 01       	movw	r24, r28
    2a56:	c9 96       	adiw	r24, 0x39	; 57
    2a58:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a5c:	00 e0       	ldi	r16, 0x00	; 0
    2a5e:	10 e0       	ldi	r17, 0x00	; 0
    2a60:	98 01       	movw	r18, r16
    2a62:	b9 01       	movw	r22, r18
    2a64:	a8 01       	movw	r20, r16
    2a66:	ce 01       	movw	r24, r28
    2a68:	8f 5b       	subi	r24, 0xBF	; 191
    2a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a70:	00 e0       	ldi	r16, 0x00	; 0
    2a72:	10 e0       	ldi	r17, 0x00	; 0
    2a74:	98 01       	movw	r18, r16
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	60 e8       	ldi	r22, 0x80	; 128
    2a7c:	7f e3       	ldi	r23, 0x3F	; 63
    2a7e:	ce 01       	movw	r24, r28
    2a80:	87 5b       	subi	r24, 0xB7	; 183
    2a82:	9f 4f       	sbci	r25, 0xFF	; 255
    2a84:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a88:	00 e0       	ldi	r16, 0x00	; 0
    2a8a:	10 e0       	ldi	r17, 0x00	; 0
    2a8c:	98 01       	movw	r18, r16
    2a8e:	b9 01       	movw	r22, r18
    2a90:	a8 01       	movw	r20, r16
    2a92:	ce 01       	movw	r24, r28
    2a94:	8f 5a       	subi	r24, 0xAF	; 175
    2a96:	9f 4f       	sbci	r25, 0xFF	; 255
    2a98:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2a9c:	00 e0       	ldi	r16, 0x00	; 0
    2a9e:	10 e0       	ldi	r17, 0x00	; 0
    2aa0:	98 01       	movw	r18, r16
    2aa2:	b9 01       	movw	r22, r18
    2aa4:	a8 01       	movw	r20, r16
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	87 5a       	subi	r24, 0xA7	; 167
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2ab0:	00 e0       	ldi	r16, 0x00	; 0
    2ab2:	10 e0       	ldi	r17, 0x00	; 0
    2ab4:	98 01       	movw	r18, r16
    2ab6:	b9 01       	movw	r22, r18
    2ab8:	a8 01       	movw	r20, r16
    2aba:	ce 01       	movw	r24, r28
    2abc:	8f 59       	subi	r24, 0x9F	; 159
    2abe:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2ac4:	00 e0       	ldi	r16, 0x00	; 0
    2ac6:	10 e0       	ldi	r17, 0x00	; 0
    2ac8:	98 01       	movw	r18, r16
    2aca:	b9 01       	movw	r22, r18
    2acc:	a8 01       	movw	r20, r16
    2ace:	ce 01       	movw	r24, r28
    2ad0:	87 59       	subi	r24, 0x97	; 151
    2ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2ad8:	00 e0       	ldi	r16, 0x00	; 0
    2ada:	10 e0       	ldi	r17, 0x00	; 0
    2adc:	98 01       	movw	r18, r16
    2ade:	b9 01       	movw	r22, r18
    2ae0:	a8 01       	movw	r20, r16
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	8f 58       	subi	r24, 0x8F	; 143
    2ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2aec:	00 e0       	ldi	r16, 0x00	; 0
    2aee:	10 e0       	ldi	r17, 0x00	; 0
    2af0:	98 01       	movw	r18, r16
    2af2:	b9 01       	movw	r22, r18
    2af4:	a8 01       	movw	r20, r16
    2af6:	ce 01       	movw	r24, r28
    2af8:	87 58       	subi	r24, 0x87	; 135
    2afa:	9f 4f       	sbci	r25, 0xFF	; 255
    2afc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b00:	00 e0       	ldi	r16, 0x00	; 0
    2b02:	10 e0       	ldi	r17, 0x00	; 0
    2b04:	98 01       	movw	r18, r16
    2b06:	b9 01       	movw	r22, r18
    2b08:	a8 01       	movw	r20, r16
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	8f 57       	subi	r24, 0x7F	; 127
    2b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b10:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b14:	00 e0       	ldi	r16, 0x00	; 0
    2b16:	10 e0       	ldi	r17, 0x00	; 0
    2b18:	98 01       	movw	r18, r16
    2b1a:	b9 01       	movw	r22, r18
    2b1c:	a8 01       	movw	r20, r16
    2b1e:	ce 01       	movw	r24, r28
    2b20:	87 57       	subi	r24, 0x77	; 119
    2b22:	9f 4f       	sbci	r25, 0xFF	; 255
    2b24:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b28:	00 e0       	ldi	r16, 0x00	; 0
    2b2a:	10 e0       	ldi	r17, 0x00	; 0
    2b2c:	98 01       	movw	r18, r16
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	60 e8       	ldi	r22, 0x80	; 128
    2b34:	7f e3       	ldi	r23, 0x3F	; 63
    2b36:	ce 01       	movw	r24, r28
    2b38:	8f 56       	subi	r24, 0x6F	; 111
    2b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b40:	00 e0       	ldi	r16, 0x00	; 0
    2b42:	10 e0       	ldi	r17, 0x00	; 0
    2b44:	98 01       	movw	r18, r16
    2b46:	b9 01       	movw	r22, r18
    2b48:	a8 01       	movw	r20, r16
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	87 56       	subi	r24, 0x67	; 103
    2b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b50:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b54:	00 e0       	ldi	r16, 0x00	; 0
    2b56:	10 e0       	ldi	r17, 0x00	; 0
    2b58:	98 01       	movw	r18, r16
    2b5a:	b9 01       	movw	r22, r18
    2b5c:	a8 01       	movw	r20, r16
    2b5e:	ce 01       	movw	r24, r28
    2b60:	8f 55       	subi	r24, 0x5F	; 95
    2b62:	9f 4f       	sbci	r25, 0xFF	; 255
    2b64:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b68:	00 e0       	ldi	r16, 0x00	; 0
    2b6a:	10 e0       	ldi	r17, 0x00	; 0
    2b6c:	98 01       	movw	r18, r16
    2b6e:	b9 01       	movw	r22, r18
    2b70:	a8 01       	movw	r20, r16
    2b72:	ce 01       	movw	r24, r28
    2b74:	87 55       	subi	r24, 0x57	; 87
    2b76:	9f 4f       	sbci	r25, 0xFF	; 255
    2b78:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b7c:	00 e0       	ldi	r16, 0x00	; 0
    2b7e:	10 e0       	ldi	r17, 0x00	; 0
    2b80:	98 01       	movw	r18, r16
    2b82:	b9 01       	movw	r22, r18
    2b84:	a8 01       	movw	r20, r16
    2b86:	ce 01       	movw	r24, r28
    2b88:	8f 54       	subi	r24, 0x4F	; 79
    2b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2b90:	00 e0       	ldi	r16, 0x00	; 0
    2b92:	10 e0       	ldi	r17, 0x00	; 0
    2b94:	98 01       	movw	r18, r16
    2b96:	b9 01       	movw	r22, r18
    2b98:	a8 01       	movw	r20, r16
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	87 54       	subi	r24, 0x47	; 71
    2b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2ba4:	00 e0       	ldi	r16, 0x00	; 0
    2ba6:	10 e0       	ldi	r17, 0x00	; 0
    2ba8:	98 01       	movw	r18, r16
    2baa:	b9 01       	movw	r22, r18
    2bac:	a8 01       	movw	r20, r16
    2bae:	ce 01       	movw	r24, r28
    2bb0:	8f 53       	subi	r24, 0x3F	; 63
    2bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2bb8:	00 e0       	ldi	r16, 0x00	; 0
    2bba:	10 e0       	ldi	r17, 0x00	; 0
    2bbc:	98 01       	movw	r18, r16
    2bbe:	b9 01       	movw	r22, r18
    2bc0:	a8 01       	movw	r20, r16
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	87 53       	subi	r24, 0x37	; 55
    2bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2bcc:	00 e0       	ldi	r16, 0x00	; 0
    2bce:	10 e0       	ldi	r17, 0x00	; 0
    2bd0:	98 01       	movw	r18, r16
    2bd2:	b9 01       	movw	r22, r18
    2bd4:	a8 01       	movw	r20, r16
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	8f 52       	subi	r24, 0x2F	; 47
    2bda:	9f 4f       	sbci	r25, 0xFF	; 255
    2bdc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2be0:	00 e0       	ldi	r16, 0x00	; 0
    2be2:	10 e0       	ldi	r17, 0x00	; 0
    2be4:	98 01       	movw	r18, r16
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	50 e0       	ldi	r21, 0x00	; 0
    2bea:	60 e8       	ldi	r22, 0x80	; 128
    2bec:	7f e3       	ldi	r23, 0x3F	; 63
    2bee:	ce 01       	movw	r24, r28
    2bf0:	87 52       	subi	r24, 0x27	; 39
    2bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2bf8:	00 e0       	ldi	r16, 0x00	; 0
    2bfa:	10 e0       	ldi	r17, 0x00	; 0
    2bfc:	98 01       	movw	r18, r16
    2bfe:	b9 01       	movw	r22, r18
    2c00:	a8 01       	movw	r20, r16
    2c02:	ce 01       	movw	r24, r28
    2c04:	8f 51       	subi	r24, 0x1F	; 31
    2c06:	9f 4f       	sbci	r25, 0xFF	; 255
    2c08:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c0c:	00 e0       	ldi	r16, 0x00	; 0
    2c0e:	10 e0       	ldi	r17, 0x00	; 0
    2c10:	98 01       	movw	r18, r16
    2c12:	b9 01       	movw	r22, r18
    2c14:	a8 01       	movw	r20, r16
    2c16:	ce 01       	movw	r24, r28
    2c18:	87 51       	subi	r24, 0x17	; 23
    2c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c20:	00 e0       	ldi	r16, 0x00	; 0
    2c22:	10 e0       	ldi	r17, 0x00	; 0
    2c24:	98 01       	movw	r18, r16
    2c26:	b9 01       	movw	r22, r18
    2c28:	a8 01       	movw	r20, r16
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	8f 50       	subi	r24, 0x0F	; 15
    2c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c30:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c34:	00 e0       	ldi	r16, 0x00	; 0
    2c36:	10 e0       	ldi	r17, 0x00	; 0
    2c38:	98 01       	movw	r18, r16
    2c3a:	b9 01       	movw	r22, r18
    2c3c:	a8 01       	movw	r20, r16
    2c3e:	ce 01       	movw	r24, r28
    2c40:	87 50       	subi	r24, 0x07	; 7
    2c42:	9f 4f       	sbci	r25, 0xFF	; 255
    2c44:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c48:	00 e0       	ldi	r16, 0x00	; 0
    2c4a:	10 e0       	ldi	r17, 0x00	; 0
    2c4c:	98 01       	movw	r18, r16
    2c4e:	b9 01       	movw	r22, r18
    2c50:	a8 01       	movw	r20, r16
    2c52:	ce 01       	movw	r24, r28
    2c54:	8f 5f       	subi	r24, 0xFF	; 255
    2c56:	9e 4f       	sbci	r25, 0xFE	; 254
    2c58:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c5c:	00 e0       	ldi	r16, 0x00	; 0
    2c5e:	10 e0       	ldi	r17, 0x00	; 0
    2c60:	98 01       	movw	r18, r16
    2c62:	b9 01       	movw	r22, r18
    2c64:	a8 01       	movw	r20, r16
    2c66:	ce 01       	movw	r24, r28
    2c68:	87 5f       	subi	r24, 0xF7	; 247
    2c6a:	9e 4f       	sbci	r25, 0xFE	; 254
    2c6c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c70:	00 e0       	ldi	r16, 0x00	; 0
    2c72:	10 e0       	ldi	r17, 0x00	; 0
    2c74:	98 01       	movw	r18, r16
    2c76:	b9 01       	movw	r22, r18
    2c78:	a8 01       	movw	r20, r16
    2c7a:	ce 01       	movw	r24, r28
    2c7c:	8f 5e       	subi	r24, 0xEF	; 239
    2c7e:	9e 4f       	sbci	r25, 0xFE	; 254
    2c80:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c84:	00 e0       	ldi	r16, 0x00	; 0
    2c86:	10 e0       	ldi	r17, 0x00	; 0
    2c88:	98 01       	movw	r18, r16
    2c8a:	b9 01       	movw	r22, r18
    2c8c:	a8 01       	movw	r20, r16
    2c8e:	ce 01       	movw	r24, r28
    2c90:	87 5e       	subi	r24, 0xE7	; 231
    2c92:	9e 4f       	sbci	r25, 0xFE	; 254
    2c94:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2c98:	00 e0       	ldi	r16, 0x00	; 0
    2c9a:	10 e0       	ldi	r17, 0x00	; 0
    2c9c:	98 01       	movw	r18, r16
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	60 e8       	ldi	r22, 0x80	; 128
    2ca4:	7f e3       	ldi	r23, 0x3F	; 63
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	8f 5d       	subi	r24, 0xDF	; 223
    2caa:	9e 4f       	sbci	r25, 0xFE	; 254
    2cac:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2cb0:	00 e0       	ldi	r16, 0x00	; 0
    2cb2:	10 e0       	ldi	r17, 0x00	; 0
    2cb4:	98 01       	movw	r18, r16
    2cb6:	b9 01       	movw	r22, r18
    2cb8:	a8 01       	movw	r20, r16
    2cba:	ce 01       	movw	r24, r28
    2cbc:	87 5d       	subi	r24, 0xD7	; 215
    2cbe:	9e 4f       	sbci	r25, 0xFE	; 254
    2cc0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2cc4:	00 e0       	ldi	r16, 0x00	; 0
    2cc6:	10 e0       	ldi	r17, 0x00	; 0
    2cc8:	98 01       	movw	r18, r16
    2cca:	b9 01       	movw	r22, r18
    2ccc:	a8 01       	movw	r20, r16
    2cce:	ce 01       	movw	r24, r28
    2cd0:	8f 5c       	subi	r24, 0xCF	; 207
    2cd2:	9e 4f       	sbci	r25, 0xFE	; 254
    2cd4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2cd8:	00 e0       	ldi	r16, 0x00	; 0
    2cda:	10 e0       	ldi	r17, 0x00	; 0
    2cdc:	98 01       	movw	r18, r16
    2cde:	b9 01       	movw	r22, r18
    2ce0:	a8 01       	movw	r20, r16
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	87 5c       	subi	r24, 0xC7	; 199
    2ce6:	9e 4f       	sbci	r25, 0xFE	; 254
    2ce8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2cec:	00 e0       	ldi	r16, 0x00	; 0
    2cee:	10 e0       	ldi	r17, 0x00	; 0
    2cf0:	98 01       	movw	r18, r16
    2cf2:	b9 01       	movw	r22, r18
    2cf4:	a8 01       	movw	r20, r16
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	8f 5b       	subi	r24, 0xBF	; 191
    2cfa:	9e 4f       	sbci	r25, 0xFE	; 254
    2cfc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d00:	00 e0       	ldi	r16, 0x00	; 0
    2d02:	10 e0       	ldi	r17, 0x00	; 0
    2d04:	98 01       	movw	r18, r16
    2d06:	b9 01       	movw	r22, r18
    2d08:	a8 01       	movw	r20, r16
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	87 5b       	subi	r24, 0xB7	; 183
    2d0e:	9e 4f       	sbci	r25, 0xFE	; 254
    2d10:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d14:	00 e0       	ldi	r16, 0x00	; 0
    2d16:	10 e0       	ldi	r17, 0x00	; 0
    2d18:	98 01       	movw	r18, r16
    2d1a:	b9 01       	movw	r22, r18
    2d1c:	a8 01       	movw	r20, r16
    2d1e:	ce 01       	movw	r24, r28
    2d20:	8f 5a       	subi	r24, 0xAF	; 175
    2d22:	9e 4f       	sbci	r25, 0xFE	; 254
    2d24:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d28:	00 e0       	ldi	r16, 0x00	; 0
    2d2a:	10 e0       	ldi	r17, 0x00	; 0
    2d2c:	98 01       	movw	r18, r16
    2d2e:	b9 01       	movw	r22, r18
    2d30:	a8 01       	movw	r20, r16
    2d32:	ce 01       	movw	r24, r28
    2d34:	87 5a       	subi	r24, 0xA7	; 167
    2d36:	9e 4f       	sbci	r25, 0xFE	; 254
    2d38:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d3c:	00 e0       	ldi	r16, 0x00	; 0
    2d3e:	10 e0       	ldi	r17, 0x00	; 0
    2d40:	98 01       	movw	r18, r16
    2d42:	b9 01       	movw	r22, r18
    2d44:	a8 01       	movw	r20, r16
    2d46:	ce 01       	movw	r24, r28
    2d48:	8f 59       	subi	r24, 0x9F	; 159
    2d4a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d4c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d50:	00 e0       	ldi	r16, 0x00	; 0
    2d52:	10 e0       	ldi	r17, 0x00	; 0
    2d54:	98 01       	movw	r18, r16
    2d56:	b9 01       	movw	r22, r18
    2d58:	a8 01       	movw	r20, r16
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	87 59       	subi	r24, 0x97	; 151
    2d5e:	9e 4f       	sbci	r25, 0xFE	; 254
    2d60:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d64:	00 e0       	ldi	r16, 0x00	; 0
    2d66:	10 e0       	ldi	r17, 0x00	; 0
    2d68:	98 01       	movw	r18, r16
    2d6a:	40 e0       	ldi	r20, 0x00	; 0
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	60 e8       	ldi	r22, 0x80	; 128
    2d70:	7f e3       	ldi	r23, 0x3F	; 63
    2d72:	ce 01       	movw	r24, r28
    2d74:	8f 58       	subi	r24, 0x8F	; 143
    2d76:	9e 4f       	sbci	r25, 0xFE	; 254
    2d78:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d7c:	00 e0       	ldi	r16, 0x00	; 0
    2d7e:	10 e0       	ldi	r17, 0x00	; 0
    2d80:	98 01       	movw	r18, r16
    2d82:	b9 01       	movw	r22, r18
    2d84:	a8 01       	movw	r20, r16
    2d86:	ce 01       	movw	r24, r28
    2d88:	87 58       	subi	r24, 0x87	; 135
    2d8a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d8c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2d90:	00 e0       	ldi	r16, 0x00	; 0
    2d92:	10 e0       	ldi	r17, 0x00	; 0
    2d94:	98 01       	movw	r18, r16
    2d96:	b9 01       	movw	r22, r18
    2d98:	a8 01       	movw	r20, r16
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	8f 57       	subi	r24, 0x7F	; 127
    2d9e:	9e 4f       	sbci	r25, 0xFE	; 254
    2da0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2da4:	00 e0       	ldi	r16, 0x00	; 0
    2da6:	10 e0       	ldi	r17, 0x00	; 0
    2da8:	98 01       	movw	r18, r16
    2daa:	b9 01       	movw	r22, r18
    2dac:	a8 01       	movw	r20, r16
    2dae:	ce 01       	movw	r24, r28
    2db0:	87 57       	subi	r24, 0x77	; 119
    2db2:	9e 4f       	sbci	r25, 0xFE	; 254
    2db4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2db8:	00 e0       	ldi	r16, 0x00	; 0
    2dba:	10 e0       	ldi	r17, 0x00	; 0
    2dbc:	98 01       	movw	r18, r16
    2dbe:	b9 01       	movw	r22, r18
    2dc0:	a8 01       	movw	r20, r16
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	8f 56       	subi	r24, 0x6F	; 111
    2dc6:	9e 4f       	sbci	r25, 0xFE	; 254
    2dc8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2dcc:	00 e0       	ldi	r16, 0x00	; 0
    2dce:	10 e0       	ldi	r17, 0x00	; 0
    2dd0:	98 01       	movw	r18, r16
    2dd2:	b9 01       	movw	r22, r18
    2dd4:	a8 01       	movw	r20, r16
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	87 56       	subi	r24, 0x67	; 103
    2dda:	9e 4f       	sbci	r25, 0xFE	; 254
    2ddc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2de0:	00 e0       	ldi	r16, 0x00	; 0
    2de2:	10 e0       	ldi	r17, 0x00	; 0
    2de4:	98 01       	movw	r18, r16
    2de6:	b9 01       	movw	r22, r18
    2de8:	a8 01       	movw	r20, r16
    2dea:	ce 01       	movw	r24, r28
    2dec:	8f 55       	subi	r24, 0x5F	; 95
    2dee:	9e 4f       	sbci	r25, 0xFE	; 254
    2df0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2df4:	00 e0       	ldi	r16, 0x00	; 0
    2df6:	10 e0       	ldi	r17, 0x00	; 0
    2df8:	98 01       	movw	r18, r16
    2dfa:	40 e0       	ldi	r20, 0x00	; 0
    2dfc:	50 e0       	ldi	r21, 0x00	; 0
    2dfe:	60 e8       	ldi	r22, 0x80	; 128
    2e00:	7f e3       	ldi	r23, 0x3F	; 63
    2e02:	ce 01       	movw	r24, r28
    2e04:	87 55       	subi	r24, 0x57	; 87
    2e06:	9e 4f       	sbci	r25, 0xFE	; 254
    2e08:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e0c:	00 e0       	ldi	r16, 0x00	; 0
    2e0e:	10 e0       	ldi	r17, 0x00	; 0
    2e10:	98 01       	movw	r18, r16
    2e12:	b9 01       	movw	r22, r18
    2e14:	a8 01       	movw	r20, r16
    2e16:	ce 01       	movw	r24, r28
    2e18:	8f 54       	subi	r24, 0x4F	; 79
    2e1a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e1c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e20:	00 e0       	ldi	r16, 0x00	; 0
    2e22:	10 e0       	ldi	r17, 0x00	; 0
    2e24:	98 01       	movw	r18, r16
    2e26:	b9 01       	movw	r22, r18
    2e28:	a8 01       	movw	r20, r16
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	87 54       	subi	r24, 0x47	; 71
    2e2e:	9e 4f       	sbci	r25, 0xFE	; 254
    2e30:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e34:	00 e0       	ldi	r16, 0x00	; 0
    2e36:	10 e0       	ldi	r17, 0x00	; 0
    2e38:	98 01       	movw	r18, r16
    2e3a:	b9 01       	movw	r22, r18
    2e3c:	a8 01       	movw	r20, r16
    2e3e:	ce 01       	movw	r24, r28
    2e40:	8f 53       	subi	r24, 0x3F	; 63
    2e42:	9e 4f       	sbci	r25, 0xFE	; 254
    2e44:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e48:	00 e0       	ldi	r16, 0x00	; 0
    2e4a:	10 e0       	ldi	r17, 0x00	; 0
    2e4c:	98 01       	movw	r18, r16
    2e4e:	b9 01       	movw	r22, r18
    2e50:	a8 01       	movw	r20, r16
    2e52:	ce 01       	movw	r24, r28
    2e54:	87 53       	subi	r24, 0x37	; 55
    2e56:	9e 4f       	sbci	r25, 0xFE	; 254
    2e58:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e5c:	00 e0       	ldi	r16, 0x00	; 0
    2e5e:	10 e0       	ldi	r17, 0x00	; 0
    2e60:	98 01       	movw	r18, r16
    2e62:	b9 01       	movw	r22, r18
    2e64:	a8 01       	movw	r20, r16
    2e66:	ce 01       	movw	r24, r28
    2e68:	8f 52       	subi	r24, 0x2F	; 47
    2e6a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e6c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e70:	00 e0       	ldi	r16, 0x00	; 0
    2e72:	10 e0       	ldi	r17, 0x00	; 0
    2e74:	98 01       	movw	r18, r16
    2e76:	b9 01       	movw	r22, r18
    2e78:	a8 01       	movw	r20, r16
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	87 52       	subi	r24, 0x27	; 39
    2e7e:	9e 4f       	sbci	r25, 0xFE	; 254
    2e80:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e84:	00 e0       	ldi	r16, 0x00	; 0
    2e86:	10 e0       	ldi	r17, 0x00	; 0
    2e88:	98 01       	movw	r18, r16
    2e8a:	b9 01       	movw	r22, r18
    2e8c:	a8 01       	movw	r20, r16
    2e8e:	ce 01       	movw	r24, r28
    2e90:	8f 51       	subi	r24, 0x1F	; 31
    2e92:	9e 4f       	sbci	r25, 0xFE	; 254
    2e94:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2e98:	00 e0       	ldi	r16, 0x00	; 0
    2e9a:	10 e0       	ldi	r17, 0x00	; 0
    2e9c:	98 01       	movw	r18, r16
    2e9e:	b9 01       	movw	r22, r18
    2ea0:	a8 01       	movw	r20, r16
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	87 51       	subi	r24, 0x17	; 23
    2ea6:	9e 4f       	sbci	r25, 0xFE	; 254
    2ea8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2eac:	00 e0       	ldi	r16, 0x00	; 0
    2eae:	10 e0       	ldi	r17, 0x00	; 0
    2eb0:	98 01       	movw	r18, r16
    2eb2:	b9 01       	movw	r22, r18
    2eb4:	a8 01       	movw	r20, r16
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	8f 50       	subi	r24, 0x0F	; 15
    2eba:	9e 4f       	sbci	r25, 0xFE	; 254
    2ebc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2ec0:	00 e0       	ldi	r16, 0x00	; 0
    2ec2:	10 e0       	ldi	r17, 0x00	; 0
    2ec4:	98 01       	movw	r18, r16
    2ec6:	40 e0       	ldi	r20, 0x00	; 0
    2ec8:	50 e0       	ldi	r21, 0x00	; 0
    2eca:	60 e8       	ldi	r22, 0x80	; 128
    2ecc:	7f e3       	ldi	r23, 0x3F	; 63
    2ece:	ce 01       	movw	r24, r28
    2ed0:	87 50       	subi	r24, 0x07	; 7
    2ed2:	9e 4f       	sbci	r25, 0xFE	; 254
    2ed4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    2ed8:	c9 5f       	subi	r28, 0xF9	; 249
    2eda:	dd 4f       	sbci	r29, 0xFD	; 253
    2edc:	79 82       	std	Y+1, r7	; 0x01
    2ede:	68 82       	st	Y, r6
    2ee0:	c7 50       	subi	r28, 0x07	; 7
    2ee2:	d2 40       	sbci	r29, 0x02	; 2
    2ee4:	c7 5f       	subi	r28, 0xF7	; 247
    2ee6:	dd 4f       	sbci	r29, 0xFD	; 253
    2ee8:	99 82       	std	Y+1, r9	; 0x01
    2eea:	88 82       	st	Y, r8
    2eec:	c9 50       	subi	r28, 0x09	; 9
    2eee:	d2 40       	sbci	r29, 0x02	; 2
    2ef0:	c5 5f       	subi	r28, 0xF5	; 245
    2ef2:	dd 4f       	sbci	r29, 0xFD	; 253
    2ef4:	f9 82       	std	Y+1, r15	; 0x01
    2ef6:	e8 82       	st	Y, r14
    2ef8:	cb 50       	subi	r28, 0x0B	; 11
    2efa:	d2 40       	sbci	r29, 0x02	; 2
    2efc:	cf 5f       	subi	r28, 0xFF	; 255
    2efe:	dd 4f       	sbci	r29, 0xFD	; 253
    2f00:	59 82       	std	Y+1, r5	; 0x01
    2f02:	48 82       	st	Y, r4
    2f04:	c1 50       	subi	r28, 0x01	; 1
    2f06:	d2 40       	sbci	r29, 0x02	; 2
    2f08:	cd 5f       	subi	r28, 0xFD	; 253
    2f0a:	dd 4f       	sbci	r29, 0xFD	; 253
    2f0c:	39 82       	std	Y+1, r3	; 0x01
    2f0e:	28 82       	st	Y, r2
    2f10:	c3 50       	subi	r28, 0x03	; 3
    2f12:	d2 40       	sbci	r29, 0x02	; 2
    2f14:	cb 5f       	subi	r28, 0xFB	; 251
    2f16:	dd 4f       	sbci	r29, 0xFD	; 253
    2f18:	d9 82       	std	Y+1, r13	; 0x01
    2f1a:	c8 82       	st	Y, r12
    2f1c:	c5 50       	subi	r28, 0x05	; 5
    2f1e:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),csw_matrix),QB_SIZE3);
    2f20:	9e 01       	movw	r18, r28
    2f22:	2f 5f       	subi	r18, 0xFF	; 255
    2f24:	3d 4f       	sbci	r19, 0xFD	; 253
    2f26:	ae 01       	movw	r20, r28
    2f28:	49 5f       	subi	r20, 0xF9	; 249
    2f2a:	5d 4f       	sbci	r21, 0xFD	; 253
    2f2c:	63 e0       	ldi	r22, 0x03	; 3
    2f2e:	70 e0       	ldi	r23, 0x00	; 0
    2f30:	c5 01       	movw	r24, r10
    2f32:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    2f36:	ae 01       	movw	r20, r28
    2f38:	4f 5f       	subi	r20, 0xFF	; 255
    2f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	c5 01       	movw	r24, r10
    2f40:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    2f44:	43 e0       	ldi	r20, 0x03	; 3
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	bc 01       	movw	r22, r24
    2f4a:	c5 01       	movw	r24, r10
    2f4c:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    2f50:	c4 5f       	subi	r28, 0xF4	; 244
    2f52:	dd 4f       	sbci	r29, 0xFD	; 253
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	1f 91       	pop	r17
    2f64:	0f 91       	pop	r16
    2f66:	ff 90       	pop	r15
    2f68:	ef 90       	pop	r14
    2f6a:	df 90       	pop	r13
    2f6c:	cf 90       	pop	r12
    2f6e:	bf 90       	pop	r11
    2f70:	af 90       	pop	r10
    2f72:	9f 90       	pop	r9
    2f74:	8f 90       	pop	r8
    2f76:	7f 90       	pop	r7
    2f78:	6f 90       	pop	r6
    2f7a:	5f 90       	pop	r5
    2f7c:	4f 90       	pop	r4
    2f7e:	3f 90       	pop	r3
    2f80:	2f 90       	pop	r2
    2f82:	08 95       	ret

00002f84 <_ZN5Gates3TOFEiiiiii>:
int * Gates::TOF(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3){
    2f84:	2f 92       	push	r2
    2f86:	3f 92       	push	r3
    2f88:	4f 92       	push	r4
    2f8a:	5f 92       	push	r5
    2f8c:	6f 92       	push	r6
    2f8e:	7f 92       	push	r7
    2f90:	8f 92       	push	r8
    2f92:	9f 92       	push	r9
    2f94:	af 92       	push	r10
    2f96:	bf 92       	push	r11
    2f98:	cf 92       	push	r12
    2f9a:	df 92       	push	r13
    2f9c:	ef 92       	push	r14
    2f9e:	ff 92       	push	r15
    2fa0:	0f 93       	push	r16
    2fa2:	1f 93       	push	r17
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
    2fac:	cc 50       	subi	r28, 0x0C	; 12
    2fae:	d2 40       	sbci	r29, 0x02	; 2
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	5c 01       	movw	r10, r24
    2fbc:	3b 01       	movw	r6, r22
    2fbe:	2a 01       	movw	r4, r20
    2fc0:	49 01       	movw	r8, r18
    2fc2:	18 01       	movw	r2, r16
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    2fc4:	00 e0       	ldi	r16, 0x00	; 0
    2fc6:	10 e0       	ldi	r17, 0x00	; 0
    2fc8:	98 01       	movw	r18, r16
    2fca:	40 e0       	ldi	r20, 0x00	; 0
    2fcc:	50 e0       	ldi	r21, 0x00	; 0
    2fce:	60 e8       	ldi	r22, 0x80	; 128
    2fd0:	7f e3       	ldi	r23, 0x3F	; 63
    2fd2:	ce 01       	movw	r24, r28
    2fd4:	01 96       	adiw	r24, 0x01	; 1
    2fd6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2fda:	00 e0       	ldi	r16, 0x00	; 0
    2fdc:	10 e0       	ldi	r17, 0x00	; 0
    2fde:	98 01       	movw	r18, r16
    2fe0:	b9 01       	movw	r22, r18
    2fe2:	a8 01       	movw	r20, r16
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	09 96       	adiw	r24, 0x09	; 9
    2fe8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2fec:	00 e0       	ldi	r16, 0x00	; 0
    2fee:	10 e0       	ldi	r17, 0x00	; 0
    2ff0:	98 01       	movw	r18, r16
    2ff2:	b9 01       	movw	r22, r18
    2ff4:	a8 01       	movw	r20, r16
    2ff6:	ce 01       	movw	r24, r28
    2ff8:	41 96       	adiw	r24, 0x11	; 17
    2ffa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    2ffe:	00 e0       	ldi	r16, 0x00	; 0
    3000:	10 e0       	ldi	r17, 0x00	; 0
    3002:	98 01       	movw	r18, r16
    3004:	b9 01       	movw	r22, r18
    3006:	a8 01       	movw	r20, r16
    3008:	ce 01       	movw	r24, r28
    300a:	49 96       	adiw	r24, 0x19	; 25
    300c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3010:	00 e0       	ldi	r16, 0x00	; 0
    3012:	10 e0       	ldi	r17, 0x00	; 0
    3014:	98 01       	movw	r18, r16
    3016:	b9 01       	movw	r22, r18
    3018:	a8 01       	movw	r20, r16
    301a:	ce 01       	movw	r24, r28
    301c:	81 96       	adiw	r24, 0x21	; 33
    301e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3022:	00 e0       	ldi	r16, 0x00	; 0
    3024:	10 e0       	ldi	r17, 0x00	; 0
    3026:	98 01       	movw	r18, r16
    3028:	b9 01       	movw	r22, r18
    302a:	a8 01       	movw	r20, r16
    302c:	ce 01       	movw	r24, r28
    302e:	89 96       	adiw	r24, 0x29	; 41
    3030:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3034:	00 e0       	ldi	r16, 0x00	; 0
    3036:	10 e0       	ldi	r17, 0x00	; 0
    3038:	98 01       	movw	r18, r16
    303a:	b9 01       	movw	r22, r18
    303c:	a8 01       	movw	r20, r16
    303e:	ce 01       	movw	r24, r28
    3040:	c1 96       	adiw	r24, 0x31	; 49
    3042:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3046:	00 e0       	ldi	r16, 0x00	; 0
    3048:	10 e0       	ldi	r17, 0x00	; 0
    304a:	98 01       	movw	r18, r16
    304c:	b9 01       	movw	r22, r18
    304e:	a8 01       	movw	r20, r16
    3050:	ce 01       	movw	r24, r28
    3052:	c9 96       	adiw	r24, 0x39	; 57
    3054:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3058:	00 e0       	ldi	r16, 0x00	; 0
    305a:	10 e0       	ldi	r17, 0x00	; 0
    305c:	98 01       	movw	r18, r16
    305e:	b9 01       	movw	r22, r18
    3060:	a8 01       	movw	r20, r16
    3062:	ce 01       	movw	r24, r28
    3064:	8f 5b       	subi	r24, 0xBF	; 191
    3066:	9f 4f       	sbci	r25, 0xFF	; 255
    3068:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    306c:	00 e0       	ldi	r16, 0x00	; 0
    306e:	10 e0       	ldi	r17, 0x00	; 0
    3070:	98 01       	movw	r18, r16
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	50 e0       	ldi	r21, 0x00	; 0
    3076:	60 e8       	ldi	r22, 0x80	; 128
    3078:	7f e3       	ldi	r23, 0x3F	; 63
    307a:	ce 01       	movw	r24, r28
    307c:	87 5b       	subi	r24, 0xB7	; 183
    307e:	9f 4f       	sbci	r25, 0xFF	; 255
    3080:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3084:	00 e0       	ldi	r16, 0x00	; 0
    3086:	10 e0       	ldi	r17, 0x00	; 0
    3088:	98 01       	movw	r18, r16
    308a:	b9 01       	movw	r22, r18
    308c:	a8 01       	movw	r20, r16
    308e:	ce 01       	movw	r24, r28
    3090:	8f 5a       	subi	r24, 0xAF	; 175
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3098:	00 e0       	ldi	r16, 0x00	; 0
    309a:	10 e0       	ldi	r17, 0x00	; 0
    309c:	98 01       	movw	r18, r16
    309e:	b9 01       	movw	r22, r18
    30a0:	a8 01       	movw	r20, r16
    30a2:	ce 01       	movw	r24, r28
    30a4:	87 5a       	subi	r24, 0xA7	; 167
    30a6:	9f 4f       	sbci	r25, 0xFF	; 255
    30a8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    30ac:	00 e0       	ldi	r16, 0x00	; 0
    30ae:	10 e0       	ldi	r17, 0x00	; 0
    30b0:	98 01       	movw	r18, r16
    30b2:	b9 01       	movw	r22, r18
    30b4:	a8 01       	movw	r20, r16
    30b6:	ce 01       	movw	r24, r28
    30b8:	8f 59       	subi	r24, 0x9F	; 159
    30ba:	9f 4f       	sbci	r25, 0xFF	; 255
    30bc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    30c0:	00 e0       	ldi	r16, 0x00	; 0
    30c2:	10 e0       	ldi	r17, 0x00	; 0
    30c4:	98 01       	movw	r18, r16
    30c6:	b9 01       	movw	r22, r18
    30c8:	a8 01       	movw	r20, r16
    30ca:	ce 01       	movw	r24, r28
    30cc:	87 59       	subi	r24, 0x97	; 151
    30ce:	9f 4f       	sbci	r25, 0xFF	; 255
    30d0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    30d4:	00 e0       	ldi	r16, 0x00	; 0
    30d6:	10 e0       	ldi	r17, 0x00	; 0
    30d8:	98 01       	movw	r18, r16
    30da:	b9 01       	movw	r22, r18
    30dc:	a8 01       	movw	r20, r16
    30de:	ce 01       	movw	r24, r28
    30e0:	8f 58       	subi	r24, 0x8F	; 143
    30e2:	9f 4f       	sbci	r25, 0xFF	; 255
    30e4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    30e8:	00 e0       	ldi	r16, 0x00	; 0
    30ea:	10 e0       	ldi	r17, 0x00	; 0
    30ec:	98 01       	movw	r18, r16
    30ee:	b9 01       	movw	r22, r18
    30f0:	a8 01       	movw	r20, r16
    30f2:	ce 01       	movw	r24, r28
    30f4:	87 58       	subi	r24, 0x87	; 135
    30f6:	9f 4f       	sbci	r25, 0xFF	; 255
    30f8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    30fc:	00 e0       	ldi	r16, 0x00	; 0
    30fe:	10 e0       	ldi	r17, 0x00	; 0
    3100:	98 01       	movw	r18, r16
    3102:	b9 01       	movw	r22, r18
    3104:	a8 01       	movw	r20, r16
    3106:	ce 01       	movw	r24, r28
    3108:	8f 57       	subi	r24, 0x7F	; 127
    310a:	9f 4f       	sbci	r25, 0xFF	; 255
    310c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3110:	00 e0       	ldi	r16, 0x00	; 0
    3112:	10 e0       	ldi	r17, 0x00	; 0
    3114:	98 01       	movw	r18, r16
    3116:	b9 01       	movw	r22, r18
    3118:	a8 01       	movw	r20, r16
    311a:	ce 01       	movw	r24, r28
    311c:	87 57       	subi	r24, 0x77	; 119
    311e:	9f 4f       	sbci	r25, 0xFF	; 255
    3120:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3124:	00 e0       	ldi	r16, 0x00	; 0
    3126:	10 e0       	ldi	r17, 0x00	; 0
    3128:	98 01       	movw	r18, r16
    312a:	40 e0       	ldi	r20, 0x00	; 0
    312c:	50 e0       	ldi	r21, 0x00	; 0
    312e:	60 e8       	ldi	r22, 0x80	; 128
    3130:	7f e3       	ldi	r23, 0x3F	; 63
    3132:	ce 01       	movw	r24, r28
    3134:	8f 56       	subi	r24, 0x6F	; 111
    3136:	9f 4f       	sbci	r25, 0xFF	; 255
    3138:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    313c:	00 e0       	ldi	r16, 0x00	; 0
    313e:	10 e0       	ldi	r17, 0x00	; 0
    3140:	98 01       	movw	r18, r16
    3142:	b9 01       	movw	r22, r18
    3144:	a8 01       	movw	r20, r16
    3146:	ce 01       	movw	r24, r28
    3148:	87 56       	subi	r24, 0x67	; 103
    314a:	9f 4f       	sbci	r25, 0xFF	; 255
    314c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3150:	00 e0       	ldi	r16, 0x00	; 0
    3152:	10 e0       	ldi	r17, 0x00	; 0
    3154:	98 01       	movw	r18, r16
    3156:	b9 01       	movw	r22, r18
    3158:	a8 01       	movw	r20, r16
    315a:	ce 01       	movw	r24, r28
    315c:	8f 55       	subi	r24, 0x5F	; 95
    315e:	9f 4f       	sbci	r25, 0xFF	; 255
    3160:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3164:	00 e0       	ldi	r16, 0x00	; 0
    3166:	10 e0       	ldi	r17, 0x00	; 0
    3168:	98 01       	movw	r18, r16
    316a:	b9 01       	movw	r22, r18
    316c:	a8 01       	movw	r20, r16
    316e:	ce 01       	movw	r24, r28
    3170:	87 55       	subi	r24, 0x57	; 87
    3172:	9f 4f       	sbci	r25, 0xFF	; 255
    3174:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3178:	00 e0       	ldi	r16, 0x00	; 0
    317a:	10 e0       	ldi	r17, 0x00	; 0
    317c:	98 01       	movw	r18, r16
    317e:	b9 01       	movw	r22, r18
    3180:	a8 01       	movw	r20, r16
    3182:	ce 01       	movw	r24, r28
    3184:	8f 54       	subi	r24, 0x4F	; 79
    3186:	9f 4f       	sbci	r25, 0xFF	; 255
    3188:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    318c:	00 e0       	ldi	r16, 0x00	; 0
    318e:	10 e0       	ldi	r17, 0x00	; 0
    3190:	98 01       	movw	r18, r16
    3192:	b9 01       	movw	r22, r18
    3194:	a8 01       	movw	r20, r16
    3196:	ce 01       	movw	r24, r28
    3198:	87 54       	subi	r24, 0x47	; 71
    319a:	9f 4f       	sbci	r25, 0xFF	; 255
    319c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    31a0:	00 e0       	ldi	r16, 0x00	; 0
    31a2:	10 e0       	ldi	r17, 0x00	; 0
    31a4:	98 01       	movw	r18, r16
    31a6:	b9 01       	movw	r22, r18
    31a8:	a8 01       	movw	r20, r16
    31aa:	ce 01       	movw	r24, r28
    31ac:	8f 53       	subi	r24, 0x3F	; 63
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    31b4:	00 e0       	ldi	r16, 0x00	; 0
    31b6:	10 e0       	ldi	r17, 0x00	; 0
    31b8:	98 01       	movw	r18, r16
    31ba:	b9 01       	movw	r22, r18
    31bc:	a8 01       	movw	r20, r16
    31be:	ce 01       	movw	r24, r28
    31c0:	87 53       	subi	r24, 0x37	; 55
    31c2:	9f 4f       	sbci	r25, 0xFF	; 255
    31c4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    31c8:	00 e0       	ldi	r16, 0x00	; 0
    31ca:	10 e0       	ldi	r17, 0x00	; 0
    31cc:	98 01       	movw	r18, r16
    31ce:	b9 01       	movw	r22, r18
    31d0:	a8 01       	movw	r20, r16
    31d2:	ce 01       	movw	r24, r28
    31d4:	8f 52       	subi	r24, 0x2F	; 47
    31d6:	9f 4f       	sbci	r25, 0xFF	; 255
    31d8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    31dc:	00 e0       	ldi	r16, 0x00	; 0
    31de:	10 e0       	ldi	r17, 0x00	; 0
    31e0:	98 01       	movw	r18, r16
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	60 e8       	ldi	r22, 0x80	; 128
    31e8:	7f e3       	ldi	r23, 0x3F	; 63
    31ea:	ce 01       	movw	r24, r28
    31ec:	87 52       	subi	r24, 0x27	; 39
    31ee:	9f 4f       	sbci	r25, 0xFF	; 255
    31f0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    31f4:	00 e0       	ldi	r16, 0x00	; 0
    31f6:	10 e0       	ldi	r17, 0x00	; 0
    31f8:	98 01       	movw	r18, r16
    31fa:	b9 01       	movw	r22, r18
    31fc:	a8 01       	movw	r20, r16
    31fe:	ce 01       	movw	r24, r28
    3200:	8f 51       	subi	r24, 0x1F	; 31
    3202:	9f 4f       	sbci	r25, 0xFF	; 255
    3204:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3208:	00 e0       	ldi	r16, 0x00	; 0
    320a:	10 e0       	ldi	r17, 0x00	; 0
    320c:	98 01       	movw	r18, r16
    320e:	b9 01       	movw	r22, r18
    3210:	a8 01       	movw	r20, r16
    3212:	ce 01       	movw	r24, r28
    3214:	87 51       	subi	r24, 0x17	; 23
    3216:	9f 4f       	sbci	r25, 0xFF	; 255
    3218:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    321c:	00 e0       	ldi	r16, 0x00	; 0
    321e:	10 e0       	ldi	r17, 0x00	; 0
    3220:	98 01       	movw	r18, r16
    3222:	b9 01       	movw	r22, r18
    3224:	a8 01       	movw	r20, r16
    3226:	ce 01       	movw	r24, r28
    3228:	8f 50       	subi	r24, 0x0F	; 15
    322a:	9f 4f       	sbci	r25, 0xFF	; 255
    322c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3230:	00 e0       	ldi	r16, 0x00	; 0
    3232:	10 e0       	ldi	r17, 0x00	; 0
    3234:	98 01       	movw	r18, r16
    3236:	b9 01       	movw	r22, r18
    3238:	a8 01       	movw	r20, r16
    323a:	ce 01       	movw	r24, r28
    323c:	87 50       	subi	r24, 0x07	; 7
    323e:	9f 4f       	sbci	r25, 0xFF	; 255
    3240:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3244:	00 e0       	ldi	r16, 0x00	; 0
    3246:	10 e0       	ldi	r17, 0x00	; 0
    3248:	98 01       	movw	r18, r16
    324a:	b9 01       	movw	r22, r18
    324c:	a8 01       	movw	r20, r16
    324e:	ce 01       	movw	r24, r28
    3250:	8f 5f       	subi	r24, 0xFF	; 255
    3252:	9e 4f       	sbci	r25, 0xFE	; 254
    3254:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3258:	00 e0       	ldi	r16, 0x00	; 0
    325a:	10 e0       	ldi	r17, 0x00	; 0
    325c:	98 01       	movw	r18, r16
    325e:	b9 01       	movw	r22, r18
    3260:	a8 01       	movw	r20, r16
    3262:	ce 01       	movw	r24, r28
    3264:	87 5f       	subi	r24, 0xF7	; 247
    3266:	9e 4f       	sbci	r25, 0xFE	; 254
    3268:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    326c:	00 e0       	ldi	r16, 0x00	; 0
    326e:	10 e0       	ldi	r17, 0x00	; 0
    3270:	98 01       	movw	r18, r16
    3272:	b9 01       	movw	r22, r18
    3274:	a8 01       	movw	r20, r16
    3276:	ce 01       	movw	r24, r28
    3278:	8f 5e       	subi	r24, 0xEF	; 239
    327a:	9e 4f       	sbci	r25, 0xFE	; 254
    327c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3280:	00 e0       	ldi	r16, 0x00	; 0
    3282:	10 e0       	ldi	r17, 0x00	; 0
    3284:	98 01       	movw	r18, r16
    3286:	b9 01       	movw	r22, r18
    3288:	a8 01       	movw	r20, r16
    328a:	ce 01       	movw	r24, r28
    328c:	87 5e       	subi	r24, 0xE7	; 231
    328e:	9e 4f       	sbci	r25, 0xFE	; 254
    3290:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3294:	00 e0       	ldi	r16, 0x00	; 0
    3296:	10 e0       	ldi	r17, 0x00	; 0
    3298:	98 01       	movw	r18, r16
    329a:	40 e0       	ldi	r20, 0x00	; 0
    329c:	50 e0       	ldi	r21, 0x00	; 0
    329e:	60 e8       	ldi	r22, 0x80	; 128
    32a0:	7f e3       	ldi	r23, 0x3F	; 63
    32a2:	ce 01       	movw	r24, r28
    32a4:	8f 5d       	subi	r24, 0xDF	; 223
    32a6:	9e 4f       	sbci	r25, 0xFE	; 254
    32a8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    32ac:	00 e0       	ldi	r16, 0x00	; 0
    32ae:	10 e0       	ldi	r17, 0x00	; 0
    32b0:	98 01       	movw	r18, r16
    32b2:	b9 01       	movw	r22, r18
    32b4:	a8 01       	movw	r20, r16
    32b6:	ce 01       	movw	r24, r28
    32b8:	87 5d       	subi	r24, 0xD7	; 215
    32ba:	9e 4f       	sbci	r25, 0xFE	; 254
    32bc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    32c0:	00 e0       	ldi	r16, 0x00	; 0
    32c2:	10 e0       	ldi	r17, 0x00	; 0
    32c4:	98 01       	movw	r18, r16
    32c6:	b9 01       	movw	r22, r18
    32c8:	a8 01       	movw	r20, r16
    32ca:	ce 01       	movw	r24, r28
    32cc:	8f 5c       	subi	r24, 0xCF	; 207
    32ce:	9e 4f       	sbci	r25, 0xFE	; 254
    32d0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    32d4:	00 e0       	ldi	r16, 0x00	; 0
    32d6:	10 e0       	ldi	r17, 0x00	; 0
    32d8:	98 01       	movw	r18, r16
    32da:	b9 01       	movw	r22, r18
    32dc:	a8 01       	movw	r20, r16
    32de:	ce 01       	movw	r24, r28
    32e0:	87 5c       	subi	r24, 0xC7	; 199
    32e2:	9e 4f       	sbci	r25, 0xFE	; 254
    32e4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    32e8:	00 e0       	ldi	r16, 0x00	; 0
    32ea:	10 e0       	ldi	r17, 0x00	; 0
    32ec:	98 01       	movw	r18, r16
    32ee:	b9 01       	movw	r22, r18
    32f0:	a8 01       	movw	r20, r16
    32f2:	ce 01       	movw	r24, r28
    32f4:	8f 5b       	subi	r24, 0xBF	; 191
    32f6:	9e 4f       	sbci	r25, 0xFE	; 254
    32f8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    32fc:	00 e0       	ldi	r16, 0x00	; 0
    32fe:	10 e0       	ldi	r17, 0x00	; 0
    3300:	98 01       	movw	r18, r16
    3302:	b9 01       	movw	r22, r18
    3304:	a8 01       	movw	r20, r16
    3306:	ce 01       	movw	r24, r28
    3308:	87 5b       	subi	r24, 0xB7	; 183
    330a:	9e 4f       	sbci	r25, 0xFE	; 254
    330c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3310:	00 e0       	ldi	r16, 0x00	; 0
    3312:	10 e0       	ldi	r17, 0x00	; 0
    3314:	98 01       	movw	r18, r16
    3316:	b9 01       	movw	r22, r18
    3318:	a8 01       	movw	r20, r16
    331a:	ce 01       	movw	r24, r28
    331c:	8f 5a       	subi	r24, 0xAF	; 175
    331e:	9e 4f       	sbci	r25, 0xFE	; 254
    3320:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3324:	00 e0       	ldi	r16, 0x00	; 0
    3326:	10 e0       	ldi	r17, 0x00	; 0
    3328:	98 01       	movw	r18, r16
    332a:	b9 01       	movw	r22, r18
    332c:	a8 01       	movw	r20, r16
    332e:	ce 01       	movw	r24, r28
    3330:	87 5a       	subi	r24, 0xA7	; 167
    3332:	9e 4f       	sbci	r25, 0xFE	; 254
    3334:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3338:	00 e0       	ldi	r16, 0x00	; 0
    333a:	10 e0       	ldi	r17, 0x00	; 0
    333c:	98 01       	movw	r18, r16
    333e:	b9 01       	movw	r22, r18
    3340:	a8 01       	movw	r20, r16
    3342:	ce 01       	movw	r24, r28
    3344:	8f 59       	subi	r24, 0x9F	; 159
    3346:	9e 4f       	sbci	r25, 0xFE	; 254
    3348:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    334c:	00 e0       	ldi	r16, 0x00	; 0
    334e:	10 e0       	ldi	r17, 0x00	; 0
    3350:	98 01       	movw	r18, r16
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	50 e0       	ldi	r21, 0x00	; 0
    3356:	60 e8       	ldi	r22, 0x80	; 128
    3358:	7f e3       	ldi	r23, 0x3F	; 63
    335a:	ce 01       	movw	r24, r28
    335c:	87 59       	subi	r24, 0x97	; 151
    335e:	9e 4f       	sbci	r25, 0xFE	; 254
    3360:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3364:	00 e0       	ldi	r16, 0x00	; 0
    3366:	10 e0       	ldi	r17, 0x00	; 0
    3368:	98 01       	movw	r18, r16
    336a:	b9 01       	movw	r22, r18
    336c:	a8 01       	movw	r20, r16
    336e:	ce 01       	movw	r24, r28
    3370:	8f 58       	subi	r24, 0x8F	; 143
    3372:	9e 4f       	sbci	r25, 0xFE	; 254
    3374:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3378:	00 e0       	ldi	r16, 0x00	; 0
    337a:	10 e0       	ldi	r17, 0x00	; 0
    337c:	98 01       	movw	r18, r16
    337e:	b9 01       	movw	r22, r18
    3380:	a8 01       	movw	r20, r16
    3382:	ce 01       	movw	r24, r28
    3384:	87 58       	subi	r24, 0x87	; 135
    3386:	9e 4f       	sbci	r25, 0xFE	; 254
    3388:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    338c:	00 e0       	ldi	r16, 0x00	; 0
    338e:	10 e0       	ldi	r17, 0x00	; 0
    3390:	98 01       	movw	r18, r16
    3392:	b9 01       	movw	r22, r18
    3394:	a8 01       	movw	r20, r16
    3396:	ce 01       	movw	r24, r28
    3398:	8f 57       	subi	r24, 0x7F	; 127
    339a:	9e 4f       	sbci	r25, 0xFE	; 254
    339c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    33a0:	00 e0       	ldi	r16, 0x00	; 0
    33a2:	10 e0       	ldi	r17, 0x00	; 0
    33a4:	98 01       	movw	r18, r16
    33a6:	b9 01       	movw	r22, r18
    33a8:	a8 01       	movw	r20, r16
    33aa:	ce 01       	movw	r24, r28
    33ac:	87 57       	subi	r24, 0x77	; 119
    33ae:	9e 4f       	sbci	r25, 0xFE	; 254
    33b0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    33b4:	00 e0       	ldi	r16, 0x00	; 0
    33b6:	10 e0       	ldi	r17, 0x00	; 0
    33b8:	98 01       	movw	r18, r16
    33ba:	b9 01       	movw	r22, r18
    33bc:	a8 01       	movw	r20, r16
    33be:	ce 01       	movw	r24, r28
    33c0:	8f 56       	subi	r24, 0x6F	; 111
    33c2:	9e 4f       	sbci	r25, 0xFE	; 254
    33c4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    33c8:	00 e0       	ldi	r16, 0x00	; 0
    33ca:	10 e0       	ldi	r17, 0x00	; 0
    33cc:	98 01       	movw	r18, r16
    33ce:	b9 01       	movw	r22, r18
    33d0:	a8 01       	movw	r20, r16
    33d2:	ce 01       	movw	r24, r28
    33d4:	87 56       	subi	r24, 0x67	; 103
    33d6:	9e 4f       	sbci	r25, 0xFE	; 254
    33d8:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    33dc:	00 e0       	ldi	r16, 0x00	; 0
    33de:	10 e0       	ldi	r17, 0x00	; 0
    33e0:	98 01       	movw	r18, r16
    33e2:	b9 01       	movw	r22, r18
    33e4:	a8 01       	movw	r20, r16
    33e6:	ce 01       	movw	r24, r28
    33e8:	8f 55       	subi	r24, 0x5F	; 95
    33ea:	9e 4f       	sbci	r25, 0xFE	; 254
    33ec:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    33f0:	00 e0       	ldi	r16, 0x00	; 0
    33f2:	10 e0       	ldi	r17, 0x00	; 0
    33f4:	98 01       	movw	r18, r16
    33f6:	b9 01       	movw	r22, r18
    33f8:	a8 01       	movw	r20, r16
    33fa:	ce 01       	movw	r24, r28
    33fc:	87 55       	subi	r24, 0x57	; 87
    33fe:	9e 4f       	sbci	r25, 0xFE	; 254
    3400:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3404:	00 e0       	ldi	r16, 0x00	; 0
    3406:	10 e0       	ldi	r17, 0x00	; 0
    3408:	98 01       	movw	r18, r16
    340a:	b9 01       	movw	r22, r18
    340c:	a8 01       	movw	r20, r16
    340e:	ce 01       	movw	r24, r28
    3410:	8f 54       	subi	r24, 0x4F	; 79
    3412:	9e 4f       	sbci	r25, 0xFE	; 254
    3414:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3418:	00 e0       	ldi	r16, 0x00	; 0
    341a:	10 e0       	ldi	r17, 0x00	; 0
    341c:	98 01       	movw	r18, r16
    341e:	40 e0       	ldi	r20, 0x00	; 0
    3420:	50 e0       	ldi	r21, 0x00	; 0
    3422:	60 e8       	ldi	r22, 0x80	; 128
    3424:	7f e3       	ldi	r23, 0x3F	; 63
    3426:	ce 01       	movw	r24, r28
    3428:	87 54       	subi	r24, 0x47	; 71
    342a:	9e 4f       	sbci	r25, 0xFE	; 254
    342c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3430:	00 e0       	ldi	r16, 0x00	; 0
    3432:	10 e0       	ldi	r17, 0x00	; 0
    3434:	98 01       	movw	r18, r16
    3436:	b9 01       	movw	r22, r18
    3438:	a8 01       	movw	r20, r16
    343a:	ce 01       	movw	r24, r28
    343c:	8f 53       	subi	r24, 0x3F	; 63
    343e:	9e 4f       	sbci	r25, 0xFE	; 254
    3440:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3444:	00 e0       	ldi	r16, 0x00	; 0
    3446:	10 e0       	ldi	r17, 0x00	; 0
    3448:	98 01       	movw	r18, r16
    344a:	b9 01       	movw	r22, r18
    344c:	a8 01       	movw	r20, r16
    344e:	ce 01       	movw	r24, r28
    3450:	87 53       	subi	r24, 0x37	; 55
    3452:	9e 4f       	sbci	r25, 0xFE	; 254
    3454:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3458:	00 e0       	ldi	r16, 0x00	; 0
    345a:	10 e0       	ldi	r17, 0x00	; 0
    345c:	98 01       	movw	r18, r16
    345e:	b9 01       	movw	r22, r18
    3460:	a8 01       	movw	r20, r16
    3462:	ce 01       	movw	r24, r28
    3464:	8f 52       	subi	r24, 0x2F	; 47
    3466:	9e 4f       	sbci	r25, 0xFE	; 254
    3468:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    346c:	00 e0       	ldi	r16, 0x00	; 0
    346e:	10 e0       	ldi	r17, 0x00	; 0
    3470:	98 01       	movw	r18, r16
    3472:	b9 01       	movw	r22, r18
    3474:	a8 01       	movw	r20, r16
    3476:	ce 01       	movw	r24, r28
    3478:	87 52       	subi	r24, 0x27	; 39
    347a:	9e 4f       	sbci	r25, 0xFE	; 254
    347c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3480:	00 e0       	ldi	r16, 0x00	; 0
    3482:	10 e0       	ldi	r17, 0x00	; 0
    3484:	98 01       	movw	r18, r16
    3486:	b9 01       	movw	r22, r18
    3488:	a8 01       	movw	r20, r16
    348a:	ce 01       	movw	r24, r28
    348c:	8f 51       	subi	r24, 0x1F	; 31
    348e:	9e 4f       	sbci	r25, 0xFE	; 254
    3490:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3494:	00 e0       	ldi	r16, 0x00	; 0
    3496:	10 e0       	ldi	r17, 0x00	; 0
    3498:	98 01       	movw	r18, r16
    349a:	b9 01       	movw	r22, r18
    349c:	a8 01       	movw	r20, r16
    349e:	ce 01       	movw	r24, r28
    34a0:	87 51       	subi	r24, 0x17	; 23
    34a2:	9e 4f       	sbci	r25, 0xFE	; 254
    34a4:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    34a8:	00 e0       	ldi	r16, 0x00	; 0
    34aa:	10 e0       	ldi	r17, 0x00	; 0
    34ac:	98 01       	movw	r18, r16
    34ae:	40 e0       	ldi	r20, 0x00	; 0
    34b0:	50 e0       	ldi	r21, 0x00	; 0
    34b2:	60 e8       	ldi	r22, 0x80	; 128
    34b4:	7f e3       	ldi	r23, 0x3F	; 63
    34b6:	ce 01       	movw	r24, r28
    34b8:	8f 50       	subi	r24, 0x0F	; 15
    34ba:	9e 4f       	sbci	r25, 0xFE	; 254
    34bc:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    34c0:	00 e0       	ldi	r16, 0x00	; 0
    34c2:	10 e0       	ldi	r17, 0x00	; 0
    34c4:	98 01       	movw	r18, r16
    34c6:	b9 01       	movw	r22, r18
    34c8:	a8 01       	movw	r20, r16
    34ca:	ce 01       	movw	r24, r28
    34cc:	87 50       	subi	r24, 0x07	; 7
    34ce:	9e 4f       	sbci	r25, 0xFE	; 254
    34d0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    34d4:	c9 5f       	subi	r28, 0xF9	; 249
    34d6:	dd 4f       	sbci	r29, 0xFD	; 253
    34d8:	79 82       	std	Y+1, r7	; 0x01
    34da:	68 82       	st	Y, r6
    34dc:	c7 50       	subi	r28, 0x07	; 7
    34de:	d2 40       	sbci	r29, 0x02	; 2
    34e0:	c7 5f       	subi	r28, 0xF7	; 247
    34e2:	dd 4f       	sbci	r29, 0xFD	; 253
    34e4:	99 82       	std	Y+1, r9	; 0x01
    34e6:	88 82       	st	Y, r8
    34e8:	c9 50       	subi	r28, 0x09	; 9
    34ea:	d2 40       	sbci	r29, 0x02	; 2
    34ec:	c5 5f       	subi	r28, 0xF5	; 245
    34ee:	dd 4f       	sbci	r29, 0xFD	; 253
    34f0:	f9 82       	std	Y+1, r15	; 0x01
    34f2:	e8 82       	st	Y, r14
    34f4:	cb 50       	subi	r28, 0x0B	; 11
    34f6:	d2 40       	sbci	r29, 0x02	; 2
    34f8:	cf 5f       	subi	r28, 0xFF	; 255
    34fa:	dd 4f       	sbci	r29, 0xFD	; 253
    34fc:	59 82       	std	Y+1, r5	; 0x01
    34fe:	48 82       	st	Y, r4
    3500:	c1 50       	subi	r28, 0x01	; 1
    3502:	d2 40       	sbci	r29, 0x02	; 2
    3504:	cd 5f       	subi	r28, 0xFD	; 253
    3506:	dd 4f       	sbci	r29, 0xFD	; 253
    3508:	39 82       	std	Y+1, r3	; 0x01
    350a:	28 82       	st	Y, r2
    350c:	c3 50       	subi	r28, 0x03	; 3
    350e:	d2 40       	sbci	r29, 0x02	; 2
    3510:	cb 5f       	subi	r28, 0xFB	; 251
    3512:	dd 4f       	sbci	r29, 0xFD	; 253
    3514:	d9 82       	std	Y+1, r13	; 0x01
    3516:	c8 82       	st	Y, r12
    3518:	c5 50       	subi	r28, 0x05	; 5
    351a:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),tof_matrix),QB_SIZE3);
    351c:	9e 01       	movw	r18, r28
    351e:	2f 5f       	subi	r18, 0xFF	; 255
    3520:	3d 4f       	sbci	r19, 0xFD	; 253
    3522:	ae 01       	movw	r20, r28
    3524:	49 5f       	subi	r20, 0xF9	; 249
    3526:	5d 4f       	sbci	r21, 0xFD	; 253
    3528:	63 e0       	ldi	r22, 0x03	; 3
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	c5 01       	movw	r24, r10
    352e:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    3532:	ae 01       	movw	r20, r28
    3534:	4f 5f       	subi	r20, 0xFF	; 255
    3536:	5f 4f       	sbci	r21, 0xFF	; 255
    3538:	bc 01       	movw	r22, r24
    353a:	c5 01       	movw	r24, r10
    353c:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    3540:	43 e0       	ldi	r20, 0x03	; 3
    3542:	50 e0       	ldi	r21, 0x00	; 0
    3544:	bc 01       	movw	r22, r24
    3546:	c5 01       	movw	r24, r10
    3548:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
}
    354c:	c4 5f       	subi	r28, 0xF4	; 244
    354e:	dd 4f       	sbci	r29, 0xFD	; 253
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	1f 91       	pop	r17
    3560:	0f 91       	pop	r16
    3562:	ff 90       	pop	r15
    3564:	ef 90       	pop	r14
    3566:	df 90       	pop	r13
    3568:	cf 90       	pop	r12
    356a:	bf 90       	pop	r11
    356c:	af 90       	pop	r10
    356e:	9f 90       	pop	r9
    3570:	8f 90       	pop	r8
    3572:	7f 90       	pop	r7
    3574:	6f 90       	pop	r6
    3576:	5f 90       	pop	r5
    3578:	4f 90       	pop	r4
    357a:	3f 90       	pop	r3
    357c:	2f 90       	pop	r2
    357e:	08 95       	ret

00003580 <_ZN5Gates3DEUEiiiiiii>:
int * Gates::DEU(int theta1, int phi1,int theta2,int phi2,int theta3,int phi3,int delta){
    3580:	2f 92       	push	r2
    3582:	3f 92       	push	r3
    3584:	4f 92       	push	r4
    3586:	5f 92       	push	r5
    3588:	6f 92       	push	r6
    358a:	7f 92       	push	r7
    358c:	8f 92       	push	r8
    358e:	9f 92       	push	r9
    3590:	af 92       	push	r10
    3592:	bf 92       	push	r11
    3594:	cf 92       	push	r12
    3596:	df 92       	push	r13
    3598:	ef 92       	push	r14
    359a:	ff 92       	push	r15
    359c:	0f 93       	push	r16
    359e:	1f 93       	push	r17
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	cd b7       	in	r28, 0x3d	; 61
    35a6:	de b7       	in	r29, 0x3e	; 62
    35a8:	c4 51       	subi	r28, 0x14	; 20
    35aa:	d2 40       	sbci	r29, 0x02	; 2
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	f8 94       	cli
    35b0:	de bf       	out	0x3e, r29	; 62
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	c3 5f       	subi	r28, 0xF3	; 243
    35b8:	dd 4f       	sbci	r29, 0xFD	; 253
    35ba:	99 83       	std	Y+1, r25	; 0x01
    35bc:	88 83       	st	Y, r24
    35be:	cd 50       	subi	r28, 0x0D	; 13
    35c0:	d2 40       	sbci	r29, 0x02	; 2
    35c2:	2b 01       	movw	r4, r22
    35c4:	c1 5f       	subi	r28, 0xF1	; 241
    35c6:	dd 4f       	sbci	r29, 0xFD	; 253
    35c8:	59 83       	std	Y+1, r21	; 0x01
    35ca:	48 83       	st	Y, r20
    35cc:	cf 50       	subi	r28, 0x0F	; 15
    35ce:	d2 40       	sbci	r29, 0x02	; 2
    35d0:	39 01       	movw	r6, r18
    35d2:	cf 5e       	subi	r28, 0xEF	; 239
    35d4:	dd 4f       	sbci	r29, 0xFD	; 253
    35d6:	19 83       	std	Y+1, r17	; 0x01
    35d8:	08 83       	st	Y, r16
    35da:	c1 51       	subi	r28, 0x11	; 17
    35dc:	d2 40       	sbci	r29, 0x02	; 2
    35de:	17 01       	movw	r2, r14
    35e0:	cd 5e       	subi	r28, 0xED	; 237
    35e2:	dd 4f       	sbci	r29, 0xFD	; 253
    35e4:	d9 82       	std	Y+1, r13	; 0x01
    35e6:	c8 82       	st	Y, r12
    35e8:	c3 51       	subi	r28, 0x13	; 19
    35ea:	d2 40       	sbci	r29, 0x02	; 2
	float delta_float=(delta*M_PI)/180;
    35ec:	b5 01       	movw	r22, r10
    35ee:	88 27       	eor	r24, r24
    35f0:	77 fd       	sbrc	r23, 7
    35f2:	80 95       	com	r24
    35f4:	98 2f       	mov	r25, r24
    35f6:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
    35fa:	2b ed       	ldi	r18, 0xDB	; 219
    35fc:	3f e0       	ldi	r19, 0x0F	; 15
    35fe:	49 e4       	ldi	r20, 0x49	; 73
    3600:	50 e4       	ldi	r21, 0x40	; 64
    3602:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	44 e3       	ldi	r20, 0x34	; 52
    360c:	53 e4       	ldi	r21, 0x43	; 67
    360e:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
    3612:	4b 01       	movw	r8, r22
    3614:	5c 01       	movw	r10, r24
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    3616:	00 e0       	ldi	r16, 0x00	; 0
    3618:	10 e0       	ldi	r17, 0x00	; 0
    361a:	98 01       	movw	r18, r16
    361c:	40 e0       	ldi	r20, 0x00	; 0
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	60 e8       	ldi	r22, 0x80	; 128
    3622:	7f e3       	ldi	r23, 0x3F	; 63
    3624:	ce 01       	movw	r24, r28
    3626:	01 96       	adiw	r24, 0x01	; 1
    3628:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    362c:	00 e0       	ldi	r16, 0x00	; 0
    362e:	10 e0       	ldi	r17, 0x00	; 0
    3630:	98 01       	movw	r18, r16
    3632:	b9 01       	movw	r22, r18
    3634:	a8 01       	movw	r20, r16
    3636:	ce 01       	movw	r24, r28
    3638:	09 96       	adiw	r24, 0x09	; 9
    363a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    363e:	00 e0       	ldi	r16, 0x00	; 0
    3640:	10 e0       	ldi	r17, 0x00	; 0
    3642:	98 01       	movw	r18, r16
    3644:	b9 01       	movw	r22, r18
    3646:	a8 01       	movw	r20, r16
    3648:	ce 01       	movw	r24, r28
    364a:	41 96       	adiw	r24, 0x11	; 17
    364c:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3650:	00 e0       	ldi	r16, 0x00	; 0
    3652:	10 e0       	ldi	r17, 0x00	; 0
    3654:	98 01       	movw	r18, r16
    3656:	b9 01       	movw	r22, r18
    3658:	a8 01       	movw	r20, r16
    365a:	ce 01       	movw	r24, r28
    365c:	49 96       	adiw	r24, 0x19	; 25
    365e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3662:	00 e0       	ldi	r16, 0x00	; 0
    3664:	10 e0       	ldi	r17, 0x00	; 0
    3666:	98 01       	movw	r18, r16
    3668:	b9 01       	movw	r22, r18
    366a:	a8 01       	movw	r20, r16
    366c:	ce 01       	movw	r24, r28
    366e:	81 96       	adiw	r24, 0x21	; 33
    3670:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3674:	00 e0       	ldi	r16, 0x00	; 0
    3676:	10 e0       	ldi	r17, 0x00	; 0
    3678:	98 01       	movw	r18, r16
    367a:	b9 01       	movw	r22, r18
    367c:	a8 01       	movw	r20, r16
    367e:	ce 01       	movw	r24, r28
    3680:	89 96       	adiw	r24, 0x29	; 41
    3682:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3686:	00 e0       	ldi	r16, 0x00	; 0
    3688:	10 e0       	ldi	r17, 0x00	; 0
    368a:	98 01       	movw	r18, r16
    368c:	b9 01       	movw	r22, r18
    368e:	a8 01       	movw	r20, r16
    3690:	ce 01       	movw	r24, r28
    3692:	c1 96       	adiw	r24, 0x31	; 49
    3694:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3698:	00 e0       	ldi	r16, 0x00	; 0
    369a:	10 e0       	ldi	r17, 0x00	; 0
    369c:	98 01       	movw	r18, r16
    369e:	b9 01       	movw	r22, r18
    36a0:	a8 01       	movw	r20, r16
    36a2:	ce 01       	movw	r24, r28
    36a4:	c9 96       	adiw	r24, 0x39	; 57
    36a6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    36aa:	00 e0       	ldi	r16, 0x00	; 0
    36ac:	10 e0       	ldi	r17, 0x00	; 0
    36ae:	98 01       	movw	r18, r16
    36b0:	b9 01       	movw	r22, r18
    36b2:	a8 01       	movw	r20, r16
    36b4:	ce 01       	movw	r24, r28
    36b6:	8f 5b       	subi	r24, 0xBF	; 191
    36b8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ba:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    36be:	00 e0       	ldi	r16, 0x00	; 0
    36c0:	10 e0       	ldi	r17, 0x00	; 0
    36c2:	98 01       	movw	r18, r16
    36c4:	40 e0       	ldi	r20, 0x00	; 0
    36c6:	50 e0       	ldi	r21, 0x00	; 0
    36c8:	60 e8       	ldi	r22, 0x80	; 128
    36ca:	7f e3       	ldi	r23, 0x3F	; 63
    36cc:	ce 01       	movw	r24, r28
    36ce:	87 5b       	subi	r24, 0xB7	; 183
    36d0:	9f 4f       	sbci	r25, 0xFF	; 255
    36d2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    36d6:	00 e0       	ldi	r16, 0x00	; 0
    36d8:	10 e0       	ldi	r17, 0x00	; 0
    36da:	98 01       	movw	r18, r16
    36dc:	b9 01       	movw	r22, r18
    36de:	a8 01       	movw	r20, r16
    36e0:	ce 01       	movw	r24, r28
    36e2:	8f 5a       	subi	r24, 0xAF	; 175
    36e4:	9f 4f       	sbci	r25, 0xFF	; 255
    36e6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    36ea:	00 e0       	ldi	r16, 0x00	; 0
    36ec:	10 e0       	ldi	r17, 0x00	; 0
    36ee:	98 01       	movw	r18, r16
    36f0:	b9 01       	movw	r22, r18
    36f2:	a8 01       	movw	r20, r16
    36f4:	ce 01       	movw	r24, r28
    36f6:	87 5a       	subi	r24, 0xA7	; 167
    36f8:	9f 4f       	sbci	r25, 0xFF	; 255
    36fa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    36fe:	00 e0       	ldi	r16, 0x00	; 0
    3700:	10 e0       	ldi	r17, 0x00	; 0
    3702:	98 01       	movw	r18, r16
    3704:	b9 01       	movw	r22, r18
    3706:	a8 01       	movw	r20, r16
    3708:	ce 01       	movw	r24, r28
    370a:	8f 59       	subi	r24, 0x9F	; 159
    370c:	9f 4f       	sbci	r25, 0xFF	; 255
    370e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3712:	00 e0       	ldi	r16, 0x00	; 0
    3714:	10 e0       	ldi	r17, 0x00	; 0
    3716:	98 01       	movw	r18, r16
    3718:	b9 01       	movw	r22, r18
    371a:	a8 01       	movw	r20, r16
    371c:	ce 01       	movw	r24, r28
    371e:	87 59       	subi	r24, 0x97	; 151
    3720:	9f 4f       	sbci	r25, 0xFF	; 255
    3722:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3726:	00 e0       	ldi	r16, 0x00	; 0
    3728:	10 e0       	ldi	r17, 0x00	; 0
    372a:	98 01       	movw	r18, r16
    372c:	b9 01       	movw	r22, r18
    372e:	a8 01       	movw	r20, r16
    3730:	ce 01       	movw	r24, r28
    3732:	8f 58       	subi	r24, 0x8F	; 143
    3734:	9f 4f       	sbci	r25, 0xFF	; 255
    3736:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    373a:	00 e0       	ldi	r16, 0x00	; 0
    373c:	10 e0       	ldi	r17, 0x00	; 0
    373e:	98 01       	movw	r18, r16
    3740:	b9 01       	movw	r22, r18
    3742:	a8 01       	movw	r20, r16
    3744:	ce 01       	movw	r24, r28
    3746:	87 58       	subi	r24, 0x87	; 135
    3748:	9f 4f       	sbci	r25, 0xFF	; 255
    374a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    374e:	00 e0       	ldi	r16, 0x00	; 0
    3750:	10 e0       	ldi	r17, 0x00	; 0
    3752:	98 01       	movw	r18, r16
    3754:	b9 01       	movw	r22, r18
    3756:	a8 01       	movw	r20, r16
    3758:	ce 01       	movw	r24, r28
    375a:	8f 57       	subi	r24, 0x7F	; 127
    375c:	9f 4f       	sbci	r25, 0xFF	; 255
    375e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3762:	00 e0       	ldi	r16, 0x00	; 0
    3764:	10 e0       	ldi	r17, 0x00	; 0
    3766:	98 01       	movw	r18, r16
    3768:	b9 01       	movw	r22, r18
    376a:	a8 01       	movw	r20, r16
    376c:	ce 01       	movw	r24, r28
    376e:	87 57       	subi	r24, 0x77	; 119
    3770:	9f 4f       	sbci	r25, 0xFF	; 255
    3772:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3776:	00 e0       	ldi	r16, 0x00	; 0
    3778:	10 e0       	ldi	r17, 0x00	; 0
    377a:	98 01       	movw	r18, r16
    377c:	40 e0       	ldi	r20, 0x00	; 0
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	60 e8       	ldi	r22, 0x80	; 128
    3782:	7f e3       	ldi	r23, 0x3F	; 63
    3784:	ce 01       	movw	r24, r28
    3786:	8f 56       	subi	r24, 0x6F	; 111
    3788:	9f 4f       	sbci	r25, 0xFF	; 255
    378a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    378e:	00 e0       	ldi	r16, 0x00	; 0
    3790:	10 e0       	ldi	r17, 0x00	; 0
    3792:	98 01       	movw	r18, r16
    3794:	b9 01       	movw	r22, r18
    3796:	a8 01       	movw	r20, r16
    3798:	ce 01       	movw	r24, r28
    379a:	87 56       	subi	r24, 0x67	; 103
    379c:	9f 4f       	sbci	r25, 0xFF	; 255
    379e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    37a2:	00 e0       	ldi	r16, 0x00	; 0
    37a4:	10 e0       	ldi	r17, 0x00	; 0
    37a6:	98 01       	movw	r18, r16
    37a8:	b9 01       	movw	r22, r18
    37aa:	a8 01       	movw	r20, r16
    37ac:	ce 01       	movw	r24, r28
    37ae:	8f 55       	subi	r24, 0x5F	; 95
    37b0:	9f 4f       	sbci	r25, 0xFF	; 255
    37b2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    37b6:	00 e0       	ldi	r16, 0x00	; 0
    37b8:	10 e0       	ldi	r17, 0x00	; 0
    37ba:	98 01       	movw	r18, r16
    37bc:	b9 01       	movw	r22, r18
    37be:	a8 01       	movw	r20, r16
    37c0:	ce 01       	movw	r24, r28
    37c2:	87 55       	subi	r24, 0x57	; 87
    37c4:	9f 4f       	sbci	r25, 0xFF	; 255
    37c6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    37ca:	00 e0       	ldi	r16, 0x00	; 0
    37cc:	10 e0       	ldi	r17, 0x00	; 0
    37ce:	98 01       	movw	r18, r16
    37d0:	b9 01       	movw	r22, r18
    37d2:	a8 01       	movw	r20, r16
    37d4:	ce 01       	movw	r24, r28
    37d6:	8f 54       	subi	r24, 0x4F	; 79
    37d8:	9f 4f       	sbci	r25, 0xFF	; 255
    37da:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    37de:	00 e0       	ldi	r16, 0x00	; 0
    37e0:	10 e0       	ldi	r17, 0x00	; 0
    37e2:	98 01       	movw	r18, r16
    37e4:	b9 01       	movw	r22, r18
    37e6:	a8 01       	movw	r20, r16
    37e8:	ce 01       	movw	r24, r28
    37ea:	87 54       	subi	r24, 0x47	; 71
    37ec:	9f 4f       	sbci	r25, 0xFF	; 255
    37ee:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    37f2:	00 e0       	ldi	r16, 0x00	; 0
    37f4:	10 e0       	ldi	r17, 0x00	; 0
    37f6:	98 01       	movw	r18, r16
    37f8:	b9 01       	movw	r22, r18
    37fa:	a8 01       	movw	r20, r16
    37fc:	ce 01       	movw	r24, r28
    37fe:	8f 53       	subi	r24, 0x3F	; 63
    3800:	9f 4f       	sbci	r25, 0xFF	; 255
    3802:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3806:	00 e0       	ldi	r16, 0x00	; 0
    3808:	10 e0       	ldi	r17, 0x00	; 0
    380a:	98 01       	movw	r18, r16
    380c:	b9 01       	movw	r22, r18
    380e:	a8 01       	movw	r20, r16
    3810:	ce 01       	movw	r24, r28
    3812:	87 53       	subi	r24, 0x37	; 55
    3814:	9f 4f       	sbci	r25, 0xFF	; 255
    3816:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    381a:	00 e0       	ldi	r16, 0x00	; 0
    381c:	10 e0       	ldi	r17, 0x00	; 0
    381e:	98 01       	movw	r18, r16
    3820:	b9 01       	movw	r22, r18
    3822:	a8 01       	movw	r20, r16
    3824:	ce 01       	movw	r24, r28
    3826:	8f 52       	subi	r24, 0x2F	; 47
    3828:	9f 4f       	sbci	r25, 0xFF	; 255
    382a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    382e:	00 e0       	ldi	r16, 0x00	; 0
    3830:	10 e0       	ldi	r17, 0x00	; 0
    3832:	98 01       	movw	r18, r16
    3834:	40 e0       	ldi	r20, 0x00	; 0
    3836:	50 e0       	ldi	r21, 0x00	; 0
    3838:	60 e8       	ldi	r22, 0x80	; 128
    383a:	7f e3       	ldi	r23, 0x3F	; 63
    383c:	ce 01       	movw	r24, r28
    383e:	87 52       	subi	r24, 0x27	; 39
    3840:	9f 4f       	sbci	r25, 0xFF	; 255
    3842:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3846:	00 e0       	ldi	r16, 0x00	; 0
    3848:	10 e0       	ldi	r17, 0x00	; 0
    384a:	98 01       	movw	r18, r16
    384c:	b9 01       	movw	r22, r18
    384e:	a8 01       	movw	r20, r16
    3850:	ce 01       	movw	r24, r28
    3852:	8f 51       	subi	r24, 0x1F	; 31
    3854:	9f 4f       	sbci	r25, 0xFF	; 255
    3856:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    385a:	00 e0       	ldi	r16, 0x00	; 0
    385c:	10 e0       	ldi	r17, 0x00	; 0
    385e:	98 01       	movw	r18, r16
    3860:	b9 01       	movw	r22, r18
    3862:	a8 01       	movw	r20, r16
    3864:	ce 01       	movw	r24, r28
    3866:	87 51       	subi	r24, 0x17	; 23
    3868:	9f 4f       	sbci	r25, 0xFF	; 255
    386a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    386e:	00 e0       	ldi	r16, 0x00	; 0
    3870:	10 e0       	ldi	r17, 0x00	; 0
    3872:	98 01       	movw	r18, r16
    3874:	b9 01       	movw	r22, r18
    3876:	a8 01       	movw	r20, r16
    3878:	ce 01       	movw	r24, r28
    387a:	8f 50       	subi	r24, 0x0F	; 15
    387c:	9f 4f       	sbci	r25, 0xFF	; 255
    387e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3882:	00 e0       	ldi	r16, 0x00	; 0
    3884:	10 e0       	ldi	r17, 0x00	; 0
    3886:	98 01       	movw	r18, r16
    3888:	b9 01       	movw	r22, r18
    388a:	a8 01       	movw	r20, r16
    388c:	ce 01       	movw	r24, r28
    388e:	87 50       	subi	r24, 0x07	; 7
    3890:	9f 4f       	sbci	r25, 0xFF	; 255
    3892:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3896:	00 e0       	ldi	r16, 0x00	; 0
    3898:	10 e0       	ldi	r17, 0x00	; 0
    389a:	98 01       	movw	r18, r16
    389c:	b9 01       	movw	r22, r18
    389e:	a8 01       	movw	r20, r16
    38a0:	ce 01       	movw	r24, r28
    38a2:	8f 5f       	subi	r24, 0xFF	; 255
    38a4:	9e 4f       	sbci	r25, 0xFE	; 254
    38a6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    38aa:	00 e0       	ldi	r16, 0x00	; 0
    38ac:	10 e0       	ldi	r17, 0x00	; 0
    38ae:	98 01       	movw	r18, r16
    38b0:	b9 01       	movw	r22, r18
    38b2:	a8 01       	movw	r20, r16
    38b4:	ce 01       	movw	r24, r28
    38b6:	87 5f       	subi	r24, 0xF7	; 247
    38b8:	9e 4f       	sbci	r25, 0xFE	; 254
    38ba:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    38be:	00 e0       	ldi	r16, 0x00	; 0
    38c0:	10 e0       	ldi	r17, 0x00	; 0
    38c2:	98 01       	movw	r18, r16
    38c4:	b9 01       	movw	r22, r18
    38c6:	a8 01       	movw	r20, r16
    38c8:	ce 01       	movw	r24, r28
    38ca:	8f 5e       	subi	r24, 0xEF	; 239
    38cc:	9e 4f       	sbci	r25, 0xFE	; 254
    38ce:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    38d2:	00 e0       	ldi	r16, 0x00	; 0
    38d4:	10 e0       	ldi	r17, 0x00	; 0
    38d6:	98 01       	movw	r18, r16
    38d8:	b9 01       	movw	r22, r18
    38da:	a8 01       	movw	r20, r16
    38dc:	ce 01       	movw	r24, r28
    38de:	87 5e       	subi	r24, 0xE7	; 231
    38e0:	9e 4f       	sbci	r25, 0xFE	; 254
    38e2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    38e6:	00 e0       	ldi	r16, 0x00	; 0
    38e8:	10 e0       	ldi	r17, 0x00	; 0
    38ea:	98 01       	movw	r18, r16
    38ec:	40 e0       	ldi	r20, 0x00	; 0
    38ee:	50 e0       	ldi	r21, 0x00	; 0
    38f0:	60 e8       	ldi	r22, 0x80	; 128
    38f2:	7f e3       	ldi	r23, 0x3F	; 63
    38f4:	ce 01       	movw	r24, r28
    38f6:	8f 5d       	subi	r24, 0xDF	; 223
    38f8:	9e 4f       	sbci	r25, 0xFE	; 254
    38fa:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    38fe:	00 e0       	ldi	r16, 0x00	; 0
    3900:	10 e0       	ldi	r17, 0x00	; 0
    3902:	98 01       	movw	r18, r16
    3904:	b9 01       	movw	r22, r18
    3906:	a8 01       	movw	r20, r16
    3908:	ce 01       	movw	r24, r28
    390a:	87 5d       	subi	r24, 0xD7	; 215
    390c:	9e 4f       	sbci	r25, 0xFE	; 254
    390e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3912:	00 e0       	ldi	r16, 0x00	; 0
    3914:	10 e0       	ldi	r17, 0x00	; 0
    3916:	98 01       	movw	r18, r16
    3918:	b9 01       	movw	r22, r18
    391a:	a8 01       	movw	r20, r16
    391c:	ce 01       	movw	r24, r28
    391e:	8f 5c       	subi	r24, 0xCF	; 207
    3920:	9e 4f       	sbci	r25, 0xFE	; 254
    3922:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3926:	00 e0       	ldi	r16, 0x00	; 0
    3928:	10 e0       	ldi	r17, 0x00	; 0
    392a:	98 01       	movw	r18, r16
    392c:	b9 01       	movw	r22, r18
    392e:	a8 01       	movw	r20, r16
    3930:	ce 01       	movw	r24, r28
    3932:	87 5c       	subi	r24, 0xC7	; 199
    3934:	9e 4f       	sbci	r25, 0xFE	; 254
    3936:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    393a:	00 e0       	ldi	r16, 0x00	; 0
    393c:	10 e0       	ldi	r17, 0x00	; 0
    393e:	98 01       	movw	r18, r16
    3940:	b9 01       	movw	r22, r18
    3942:	a8 01       	movw	r20, r16
    3944:	ce 01       	movw	r24, r28
    3946:	8f 5b       	subi	r24, 0xBF	; 191
    3948:	9e 4f       	sbci	r25, 0xFE	; 254
    394a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    394e:	00 e0       	ldi	r16, 0x00	; 0
    3950:	10 e0       	ldi	r17, 0x00	; 0
    3952:	98 01       	movw	r18, r16
    3954:	b9 01       	movw	r22, r18
    3956:	a8 01       	movw	r20, r16
    3958:	ce 01       	movw	r24, r28
    395a:	87 5b       	subi	r24, 0xB7	; 183
    395c:	9e 4f       	sbci	r25, 0xFE	; 254
    395e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3962:	00 e0       	ldi	r16, 0x00	; 0
    3964:	10 e0       	ldi	r17, 0x00	; 0
    3966:	98 01       	movw	r18, r16
    3968:	b9 01       	movw	r22, r18
    396a:	a8 01       	movw	r20, r16
    396c:	ce 01       	movw	r24, r28
    396e:	8f 5a       	subi	r24, 0xAF	; 175
    3970:	9e 4f       	sbci	r25, 0xFE	; 254
    3972:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3976:	00 e0       	ldi	r16, 0x00	; 0
    3978:	10 e0       	ldi	r17, 0x00	; 0
    397a:	98 01       	movw	r18, r16
    397c:	b9 01       	movw	r22, r18
    397e:	a8 01       	movw	r20, r16
    3980:	ce 01       	movw	r24, r28
    3982:	87 5a       	subi	r24, 0xA7	; 167
    3984:	9e 4f       	sbci	r25, 0xFE	; 254
    3986:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    398a:	00 e0       	ldi	r16, 0x00	; 0
    398c:	10 e0       	ldi	r17, 0x00	; 0
    398e:	98 01       	movw	r18, r16
    3990:	b9 01       	movw	r22, r18
    3992:	a8 01       	movw	r20, r16
    3994:	ce 01       	movw	r24, r28
    3996:	8f 59       	subi	r24, 0x9F	; 159
    3998:	9e 4f       	sbci	r25, 0xFE	; 254
    399a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    399e:	00 e0       	ldi	r16, 0x00	; 0
    39a0:	10 e0       	ldi	r17, 0x00	; 0
    39a2:	98 01       	movw	r18, r16
    39a4:	40 e0       	ldi	r20, 0x00	; 0
    39a6:	50 e0       	ldi	r21, 0x00	; 0
    39a8:	60 e8       	ldi	r22, 0x80	; 128
    39aa:	7f e3       	ldi	r23, 0x3F	; 63
    39ac:	ce 01       	movw	r24, r28
    39ae:	87 59       	subi	r24, 0x97	; 151
    39b0:	9e 4f       	sbci	r25, 0xFE	; 254
    39b2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    39b6:	00 e0       	ldi	r16, 0x00	; 0
    39b8:	10 e0       	ldi	r17, 0x00	; 0
    39ba:	98 01       	movw	r18, r16
    39bc:	b9 01       	movw	r22, r18
    39be:	a8 01       	movw	r20, r16
    39c0:	ce 01       	movw	r24, r28
    39c2:	8f 58       	subi	r24, 0x8F	; 143
    39c4:	9e 4f       	sbci	r25, 0xFE	; 254
    39c6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    39ca:	00 e0       	ldi	r16, 0x00	; 0
    39cc:	10 e0       	ldi	r17, 0x00	; 0
    39ce:	98 01       	movw	r18, r16
    39d0:	b9 01       	movw	r22, r18
    39d2:	a8 01       	movw	r20, r16
    39d4:	ce 01       	movw	r24, r28
    39d6:	87 58       	subi	r24, 0x87	; 135
    39d8:	9e 4f       	sbci	r25, 0xFE	; 254
    39da:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    39de:	00 e0       	ldi	r16, 0x00	; 0
    39e0:	10 e0       	ldi	r17, 0x00	; 0
    39e2:	98 01       	movw	r18, r16
    39e4:	b9 01       	movw	r22, r18
    39e6:	a8 01       	movw	r20, r16
    39e8:	ce 01       	movw	r24, r28
    39ea:	8f 57       	subi	r24, 0x7F	; 127
    39ec:	9e 4f       	sbci	r25, 0xFE	; 254
    39ee:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    39f2:	00 e0       	ldi	r16, 0x00	; 0
    39f4:	10 e0       	ldi	r17, 0x00	; 0
    39f6:	98 01       	movw	r18, r16
    39f8:	b9 01       	movw	r22, r18
    39fa:	a8 01       	movw	r20, r16
    39fc:	ce 01       	movw	r24, r28
    39fe:	87 57       	subi	r24, 0x77	; 119
    3a00:	9e 4f       	sbci	r25, 0xFE	; 254
    3a02:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3a06:	00 e0       	ldi	r16, 0x00	; 0
    3a08:	10 e0       	ldi	r17, 0x00	; 0
    3a0a:	98 01       	movw	r18, r16
    3a0c:	b9 01       	movw	r22, r18
    3a0e:	a8 01       	movw	r20, r16
    3a10:	ce 01       	movw	r24, r28
    3a12:	8f 56       	subi	r24, 0x6F	; 111
    3a14:	9e 4f       	sbci	r25, 0xFE	; 254
    3a16:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3a1a:	00 e0       	ldi	r16, 0x00	; 0
    3a1c:	10 e0       	ldi	r17, 0x00	; 0
    3a1e:	98 01       	movw	r18, r16
    3a20:	b9 01       	movw	r22, r18
    3a22:	a8 01       	movw	r20, r16
    3a24:	ce 01       	movw	r24, r28
    3a26:	87 56       	subi	r24, 0x67	; 103
    3a28:	9e 4f       	sbci	r25, 0xFE	; 254
    3a2a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3a2e:	00 e0       	ldi	r16, 0x00	; 0
    3a30:	10 e0       	ldi	r17, 0x00	; 0
    3a32:	98 01       	movw	r18, r16
    3a34:	b9 01       	movw	r22, r18
    3a36:	a8 01       	movw	r20, r16
    3a38:	ce 01       	movw	r24, r28
    3a3a:	8f 55       	subi	r24, 0x5F	; 95
    3a3c:	9e 4f       	sbci	r25, 0xFE	; 254
    3a3e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3a42:	00 e0       	ldi	r16, 0x00	; 0
    3a44:	10 e0       	ldi	r17, 0x00	; 0
    3a46:	98 01       	movw	r18, r16
    3a48:	b9 01       	movw	r22, r18
    3a4a:	a8 01       	movw	r20, r16
    3a4c:	ce 01       	movw	r24, r28
    3a4e:	87 55       	subi	r24, 0x57	; 87
    3a50:	9e 4f       	sbci	r25, 0xFE	; 254
    3a52:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
														  {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),               Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
    3a56:	c5 01       	movw	r24, r10
    3a58:	b4 01       	movw	r22, r8
    3a5a:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <cos>
    3a5e:	6b 01       	movw	r12, r22
    3a60:	7c 01       	movw	r14, r24
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    3a62:	8b 01       	movw	r16, r22
    3a64:	9c 01       	movw	r18, r24
    3a66:	40 e0       	ldi	r20, 0x00	; 0
    3a68:	50 e0       	ldi	r21, 0x00	; 0
    3a6a:	ba 01       	movw	r22, r20
    3a6c:	ce 01       	movw	r24, r28
    3a6e:	8f 54       	subi	r24, 0x4F	; 79
    3a70:	9e 4f       	sbci	r25, 0xFE	; 254
    3a72:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
														  {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),               Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0),				 Complex(0,0)},
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,cos(delta_float)),Complex(sin(delta_float),0)},
    3a76:	c5 01       	movw	r24, r10
    3a78:	b4 01       	movw	r22, r8
    3a7a:	0e 94 6f 33 	call	0x66de	; 0x66de <sin>
    3a7e:	4b 01       	movw	r8, r22
    3a80:	5c 01       	movw	r10, r24
														  {Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(0,0),Complex(sin(delta_float),0),Complex(0,cos(delta_float))}};
    3a82:	00 e0       	ldi	r16, 0x00	; 0
    3a84:	10 e0       	ldi	r17, 0x00	; 0
    3a86:	98 01       	movw	r18, r16
    3a88:	ab 01       	movw	r20, r22
    3a8a:	bc 01       	movw	r22, r24
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	87 54       	subi	r24, 0x47	; 71
    3a90:	9e 4f       	sbci	r25, 0xFE	; 254
    3a92:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3a96:	00 e0       	ldi	r16, 0x00	; 0
    3a98:	10 e0       	ldi	r17, 0x00	; 0
    3a9a:	98 01       	movw	r18, r16
    3a9c:	b9 01       	movw	r22, r18
    3a9e:	a8 01       	movw	r20, r16
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	8f 53       	subi	r24, 0x3F	; 63
    3aa4:	9e 4f       	sbci	r25, 0xFE	; 254
    3aa6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3aaa:	00 e0       	ldi	r16, 0x00	; 0
    3aac:	10 e0       	ldi	r17, 0x00	; 0
    3aae:	98 01       	movw	r18, r16
    3ab0:	b9 01       	movw	r22, r18
    3ab2:	a8 01       	movw	r20, r16
    3ab4:	ce 01       	movw	r24, r28
    3ab6:	87 53       	subi	r24, 0x37	; 55
    3ab8:	9e 4f       	sbci	r25, 0xFE	; 254
    3aba:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3abe:	00 e0       	ldi	r16, 0x00	; 0
    3ac0:	10 e0       	ldi	r17, 0x00	; 0
    3ac2:	98 01       	movw	r18, r16
    3ac4:	b9 01       	movw	r22, r18
    3ac6:	a8 01       	movw	r20, r16
    3ac8:	ce 01       	movw	r24, r28
    3aca:	8f 52       	subi	r24, 0x2F	; 47
    3acc:	9e 4f       	sbci	r25, 0xFE	; 254
    3ace:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3ad2:	00 e0       	ldi	r16, 0x00	; 0
    3ad4:	10 e0       	ldi	r17, 0x00	; 0
    3ad6:	98 01       	movw	r18, r16
    3ad8:	b9 01       	movw	r22, r18
    3ada:	a8 01       	movw	r20, r16
    3adc:	ce 01       	movw	r24, r28
    3ade:	87 52       	subi	r24, 0x27	; 39
    3ae0:	9e 4f       	sbci	r25, 0xFE	; 254
    3ae2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3ae6:	00 e0       	ldi	r16, 0x00	; 0
    3ae8:	10 e0       	ldi	r17, 0x00	; 0
    3aea:	98 01       	movw	r18, r16
    3aec:	b9 01       	movw	r22, r18
    3aee:	a8 01       	movw	r20, r16
    3af0:	ce 01       	movw	r24, r28
    3af2:	8f 51       	subi	r24, 0x1F	; 31
    3af4:	9e 4f       	sbci	r25, 0xFE	; 254
    3af6:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3afa:	00 e0       	ldi	r16, 0x00	; 0
    3afc:	10 e0       	ldi	r17, 0x00	; 0
    3afe:	98 01       	movw	r18, r16
    3b00:	b9 01       	movw	r22, r18
    3b02:	a8 01       	movw	r20, r16
    3b04:	ce 01       	movw	r24, r28
    3b06:	87 51       	subi	r24, 0x17	; 23
    3b08:	9e 4f       	sbci	r25, 0xFE	; 254
    3b0a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3b0e:	00 e0       	ldi	r16, 0x00	; 0
    3b10:	10 e0       	ldi	r17, 0x00	; 0
    3b12:	98 01       	movw	r18, r16
    3b14:	b5 01       	movw	r22, r10
    3b16:	a4 01       	movw	r20, r8
    3b18:	ce 01       	movw	r24, r28
    3b1a:	8f 50       	subi	r24, 0x0F	; 15
    3b1c:	9e 4f       	sbci	r25, 0xFE	; 254
    3b1e:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
    3b22:	97 01       	movw	r18, r14
    3b24:	86 01       	movw	r16, r12
    3b26:	40 e0       	ldi	r20, 0x00	; 0
    3b28:	50 e0       	ldi	r21, 0x00	; 0
    3b2a:	ba 01       	movw	r22, r20
    3b2c:	ce 01       	movw	r24, r28
    3b2e:	87 50       	subi	r24, 0x07	; 7
    3b30:	9e 4f       	sbci	r25, 0xFE	; 254
    3b32:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN7ComplexC1Eff>
	int theta_list[QB_SIZE3]={theta1,theta2,theta3}; int phi_list[QB_SIZE3]={phi1,phi2,phi3};
    3b36:	c9 5f       	subi	r28, 0xF9	; 249
    3b38:	dd 4f       	sbci	r29, 0xFD	; 253
    3b3a:	59 82       	std	Y+1, r5	; 0x01
    3b3c:	48 82       	st	Y, r4
    3b3e:	c7 50       	subi	r28, 0x07	; 7
    3b40:	d2 40       	sbci	r29, 0x02	; 2
    3b42:	c7 5f       	subi	r28, 0xF7	; 247
    3b44:	dd 4f       	sbci	r29, 0xFD	; 253
    3b46:	79 82       	std	Y+1, r7	; 0x01
    3b48:	68 82       	st	Y, r6
    3b4a:	c9 50       	subi	r28, 0x09	; 9
    3b4c:	d2 40       	sbci	r29, 0x02	; 2
    3b4e:	c5 5f       	subi	r28, 0xF5	; 245
    3b50:	dd 4f       	sbci	r29, 0xFD	; 253
    3b52:	39 82       	std	Y+1, r3	; 0x01
    3b54:	28 82       	st	Y, r2
    3b56:	cb 50       	subi	r28, 0x0B	; 11
    3b58:	d2 40       	sbci	r29, 0x02	; 2
    3b5a:	c1 5f       	subi	r28, 0xF1	; 241
    3b5c:	dd 4f       	sbci	r29, 0xFD	; 253
    3b5e:	88 81       	ld	r24, Y
    3b60:	99 81       	ldd	r25, Y+1	; 0x01
    3b62:	cf 50       	subi	r28, 0x0F	; 15
    3b64:	d2 40       	sbci	r29, 0x02	; 2
    3b66:	cf 5f       	subi	r28, 0xFF	; 255
    3b68:	dd 4f       	sbci	r29, 0xFD	; 253
    3b6a:	99 83       	std	Y+1, r25	; 0x01
    3b6c:	88 83       	st	Y, r24
    3b6e:	c1 50       	subi	r28, 0x01	; 1
    3b70:	d2 40       	sbci	r29, 0x02	; 2
    3b72:	cf 5e       	subi	r28, 0xEF	; 239
    3b74:	dd 4f       	sbci	r29, 0xFD	; 253
    3b76:	88 81       	ld	r24, Y
    3b78:	99 81       	ldd	r25, Y+1	; 0x01
    3b7a:	c1 51       	subi	r28, 0x11	; 17
    3b7c:	d2 40       	sbci	r29, 0x02	; 2
    3b7e:	cd 5f       	subi	r28, 0xFD	; 253
    3b80:	dd 4f       	sbci	r29, 0xFD	; 253
    3b82:	99 83       	std	Y+1, r25	; 0x01
    3b84:	88 83       	st	Y, r24
    3b86:	c3 50       	subi	r28, 0x03	; 3
    3b88:	d2 40       	sbci	r29, 0x02	; 2
    3b8a:	cd 5e       	subi	r28, 0xED	; 237
    3b8c:	dd 4f       	sbci	r29, 0xFD	; 253
    3b8e:	88 81       	ld	r24, Y
    3b90:	99 81       	ldd	r25, Y+1	; 0x01
    3b92:	c3 51       	subi	r28, 0x13	; 19
    3b94:	d2 40       	sbci	r29, 0x02	; 2
    3b96:	cb 5f       	subi	r28, 0xFB	; 251
    3b98:	dd 4f       	sbci	r29, 0xFD	; 253
    3b9a:	99 83       	std	Y+1, r25	; 0x01
    3b9c:	88 83       	st	Y, r24
    3b9e:	c5 50       	subi	r28, 0x05	; 5
    3ba0:	d2 40       	sbci	r29, 0x02	; 2
	return vec2ampl(multiply8x8(ampl2vec(QB_SIZE3,theta_list,phi_list),deu_matrix),QB_SIZE3);	
    3ba2:	9e 01       	movw	r18, r28
    3ba4:	2f 5f       	subi	r18, 0xFF	; 255
    3ba6:	3d 4f       	sbci	r19, 0xFD	; 253
    3ba8:	ae 01       	movw	r20, r28
    3baa:	49 5f       	subi	r20, 0xF9	; 249
    3bac:	5d 4f       	sbci	r21, 0xFD	; 253
    3bae:	63 e0       	ldi	r22, 0x03	; 3
    3bb0:	70 e0       	ldi	r23, 0x00	; 0
    3bb2:	c3 5f       	subi	r28, 0xF3	; 243
    3bb4:	dd 4f       	sbci	r29, 0xFD	; 253
    3bb6:	88 81       	ld	r24, Y
    3bb8:	99 81       	ldd	r25, Y+1	; 0x01
    3bba:	cd 50       	subi	r28, 0x0D	; 13
    3bbc:	d2 40       	sbci	r29, 0x02	; 2
    3bbe:	0e 94 be 05 	call	0xb7c	; 0xb7c <_ZN5Gates8ampl2vecEiPiS0_>
    3bc2:	ae 01       	movw	r20, r28
    3bc4:	4f 5f       	subi	r20, 0xFF	; 255
    3bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    3bc8:	bc 01       	movw	r22, r24
    3bca:	c3 5f       	subi	r28, 0xF3	; 243
    3bcc:	dd 4f       	sbci	r29, 0xFD	; 253
    3bce:	88 81       	ld	r24, Y
    3bd0:	99 81       	ldd	r25, Y+1	; 0x01
    3bd2:	cd 50       	subi	r28, 0x0D	; 13
    3bd4:	d2 40       	sbci	r29, 0x02	; 2
    3bd6:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN5Gates11multiply8x8EP7ComplexPA8_S0_>
    3bda:	43 e0       	ldi	r20, 0x03	; 3
    3bdc:	50 e0       	ldi	r21, 0x00	; 0
    3bde:	bc 01       	movw	r22, r24
    3be0:	c3 5f       	subi	r28, 0xF3	; 243
    3be2:	dd 4f       	sbci	r29, 0xFD	; 253
    3be4:	88 81       	ld	r24, Y
    3be6:	99 81       	ldd	r25, Y+1	; 0x01
    3be8:	cd 50       	subi	r28, 0x0D	; 13
    3bea:	d2 40       	sbci	r29, 0x02	; 2
    3bec:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates8vec2amplEP7Complexi>
    3bf0:	cc 5e       	subi	r28, 0xEC	; 236
    3bf2:	dd 4f       	sbci	r29, 0xFD	; 253
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	f8 94       	cli
    3bf8:	de bf       	out	0x3e, r29	; 62
    3bfa:	0f be       	out	0x3f, r0	; 63
    3bfc:	cd bf       	out	0x3d, r28	; 61
    3bfe:	df 91       	pop	r29
    3c00:	cf 91       	pop	r28
    3c02:	1f 91       	pop	r17
    3c04:	0f 91       	pop	r16
    3c06:	ff 90       	pop	r15
    3c08:	ef 90       	pop	r14
    3c0a:	df 90       	pop	r13
    3c0c:	cf 90       	pop	r12
    3c0e:	bf 90       	pop	r11
    3c10:	af 90       	pop	r10
    3c12:	9f 90       	pop	r9
    3c14:	8f 90       	pop	r8
    3c16:	7f 90       	pop	r7
    3c18:	6f 90       	pop	r6
    3c1a:	5f 90       	pop	r5
    3c1c:	4f 90       	pop	r4
    3c1e:	3f 90       	pop	r3
    3c20:	2f 90       	pop	r2
    3c22:	08 95       	ret

00003c24 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){}

Serial s;
    3c24:	81 e3       	ldi	r24, 0x31	; 49
    3c26:	91 e0       	ldi	r25, 0x01	; 1
    3c28:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN6SerialC1Ev>
    3c2c:	08 95       	ret

00003c2e <_ZN4QEPU13interrupt_cpuEi>:
#include "qepu.h"

void QEPU::interrupt_cpu(int interrupt_type){
    3c2e:	5f 92       	push	r5
    3c30:	6f 92       	push	r6
    3c32:	7f 92       	push	r7
    3c34:	8f 92       	push	r8
    3c36:	9f 92       	push	r9
    3c38:	af 92       	push	r10
    3c3a:	bf 92       	push	r11
    3c3c:	cf 92       	push	r12
    3c3e:	df 92       	push	r13
    3c40:	ef 92       	push	r14
    3c42:	ff 92       	push	r15
    3c44:	0f 93       	push	r16
    3c46:	1f 93       	push	r17
    3c48:	cf 93       	push	r28
    3c4a:	df 93       	push	r29
    3c4c:	6c 01       	movw	r12, r24
    3c4e:	4b 01       	movw	r8, r22
	//NEEDS RESERVED REGISTERS USED FOR ADDRESS POINTING -> ADDRESS SHOULD POINT TO A REGISTER ADDRESS,NOT SRAM
	//NEEDS RESERVED REGISTERS USED FOR DATA SAVING -> SHOULD SAVE ON A REGISTER,NOT SRAM
	int address_pointer_offset=0;
    3c50:	c0 e0       	ldi	r28, 0x00	; 0
    3c52:	d0 e0       	ldi	r29, 0x00	; 0
	while(!interrupt_signal){
    3c54:	8c 01       	movw	r16, r24
    3c56:	06 52       	subi	r16, 0x26	; 38
    3c58:	1f 4f       	sbci	r17, 0xFF	; 255
					sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_echo);
					interrupt_done();
				}
				break;
			case INT_UART_IN_BUFF_NO_ECHO:{
					int char_noecho=serial.read();
    3c5a:	7c 01       	movw	r14, r24
    3c5c:	8f ef       	ldi	r24, 0xFF	; 255
    3c5e:	e8 1a       	sub	r14, r24
    3c60:	f8 0a       	sbc	r15, r24
						interrupt_done();
						sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,STRING_TERMINATOR);
					}else
						if(char_noecho==0x8 && address_pointer_offset>0) address_pointer_offset--;
						else{
							sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_noecho);
    3c62:	56 01       	movw	r10, r12
    3c64:	e3 e0       	ldi	r30, 0x03	; 3
    3c66:	ae 0e       	add	r10, r30
    3c68:	b1 1c       	adc	r11, r1
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3c6a:	55 24       	eor	r5, r5
    3c6c:	53 94       	inc	r5

void QEPU::interrupt_cpu(int interrupt_type){
	//NEEDS RESERVED REGISTERS USED FOR ADDRESS POINTING -> ADDRESS SHOULD POINT TO A REGISTER ADDRESS,NOT SRAM
	//NEEDS RESERVED REGISTERS USED FOR DATA SAVING -> SHOULD SAVE ON A REGISTER,NOT SRAM
	int address_pointer_offset=0;
	while(!interrupt_signal){
    3c6e:	cf c0       	rjmp	.+414    	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
		switch(interrupt_type){
    3c70:	f2 e0       	ldi	r31, 0x02	; 2
    3c72:	8f 16       	cp	r8, r31
    3c74:	91 04       	cpc	r9, r1
    3c76:	e1 f1       	breq	.+120    	; 0x3cf0 <_ZN4QEPU13interrupt_cpuEi+0xc2>
    3c78:	44 f4       	brge	.+16     	; 0x3c8a <_ZN4QEPU13interrupt_cpuEi+0x5c>
    3c7a:	81 14       	cp	r8, r1
    3c7c:	91 04       	cpc	r9, r1
    3c7e:	91 f0       	breq	.+36     	; 0x3ca4 <_ZN4QEPU13interrupt_cpuEi+0x76>
    3c80:	e1 e0       	ldi	r30, 0x01	; 1
    3c82:	8e 16       	cp	r8, r30
    3c84:	91 04       	cpc	r9, r1
    3c86:	f1 f0       	breq	.+60     	; 0x3cc4 <_ZN4QEPU13interrupt_cpuEi+0x96>
    3c88:	f3 cf       	rjmp	.-26     	; 0x3c70 <_ZN4QEPU13interrupt_cpuEi+0x42>
    3c8a:	f4 e0       	ldi	r31, 0x04	; 4
    3c8c:	8f 16       	cp	r8, r31
    3c8e:	91 04       	cpc	r9, r1
    3c90:	09 f4       	brne	.+2      	; 0x3c94 <_ZN4QEPU13interrupt_cpuEi+0x66>
    3c92:	5a c0       	rjmp	.+180    	; 0x3d48 <_ZN4QEPU13interrupt_cpuEi+0x11a>
    3c94:	0c f4       	brge	.+2      	; 0x3c98 <_ZN4QEPU13interrupt_cpuEi+0x6a>
    3c96:	40 c0       	rjmp	.+128    	; 0x3d18 <_ZN4QEPU13interrupt_cpuEi+0xea>
    3c98:	e5 e0       	ldi	r30, 0x05	; 5
    3c9a:	8e 16       	cp	r8, r30
    3c9c:	91 04       	cpc	r9, r1
    3c9e:	09 f4       	brne	.+2      	; 0x3ca2 <_ZN4QEPU13interrupt_cpuEi+0x74>
    3ca0:	83 c0       	rjmp	.+262    	; 0x3da8 <_ZN4QEPU13interrupt_cpuEi+0x17a>
    3ca2:	e6 cf       	rjmp	.-52     	; 0x3c70 <_ZN4QEPU13interrupt_cpuEi+0x42>
			case INT_UART_OUT_CHAR:
				serial.write(sram.read(fetch_register(INT_RESERVED_ADDRESSPOINTER)));
    3ca4:	60 e0       	ldi	r22, 0x00	; 0
    3ca6:	70 e0       	ldi	r23, 0x00	; 0
    3ca8:	c6 01       	movw	r24, r12
    3caa:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    3cae:	bc 01       	movw	r22, r24
    3cb0:	c5 01       	movw	r24, r10
    3cb2:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    3cb6:	68 2f       	mov	r22, r24
    3cb8:	c7 01       	movw	r24, r14
    3cba:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <_ZN6Serial5writeEc>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3cbe:	f8 01       	movw	r30, r16
    3cc0:	50 82       	st	Z, r5
    3cc2:	a5 c0       	rjmp	.+330    	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
				serial.write(sram.read(fetch_register(INT_RESERVED_ADDRESSPOINTER)));
				interrupt_done();
				break;
			case INT_UART_OUT_BUFFER:
				{
					int data_read=sram.read(fetch_register(INT_RESERVED_ADDRESSPOINTER)+address_pointer_offset);
    3cc4:	60 e0       	ldi	r22, 0x00	; 0
    3cc6:	70 e0       	ldi	r23, 0x00	; 0
    3cc8:	c6 01       	movw	r24, r12
    3cca:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    3cce:	bc 01       	movw	r22, r24
    3cd0:	6c 0f       	add	r22, r28
    3cd2:	7d 1f       	adc	r23, r29
    3cd4:	c5 01       	movw	r24, r10
    3cd6:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
					if(data_read==STRING_TERMINATOR) interrupt_done();
    3cda:	84 32       	cpi	r24, 0x24	; 36
    3cdc:	19 f4       	brne	.+6      	; 0x3ce4 <_ZN4QEPU13interrupt_cpuEi+0xb6>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3cde:	f8 01       	movw	r30, r16
    3ce0:	50 82       	st	Z, r5
    3ce2:	95 c0       	rjmp	.+298    	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
			case INT_UART_OUT_BUFFER:
				{
					int data_read=sram.read(fetch_register(INT_RESERVED_ADDRESSPOINTER)+address_pointer_offset);
					if(data_read==STRING_TERMINATOR) interrupt_done();
					else{
						serial.write(data_read);
    3ce4:	68 2f       	mov	r22, r24
    3ce6:	c7 01       	movw	r24, r14
    3ce8:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <_ZN6Serial5writeEc>
						address_pointer_offset++;
    3cec:	21 96       	adiw	r28, 0x01	; 1
    3cee:	8f c0       	rjmp	.+286    	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
					}
				}
				break;
			case INT_UART_IN_CHAR_NO_ECHO:
				sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,serial.read());
    3cf0:	c7 01       	movw	r24, r14
    3cf2:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <_ZN6Serial4readEv>
    3cf6:	78 2e       	mov	r7, r24
    3cf8:	61 e0       	ldi	r22, 0x01	; 1
    3cfa:	70 e0       	ldi	r23, 0x00	; 0
    3cfc:	c6 01       	movw	r24, r12
    3cfe:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    3d02:	47 2d       	mov	r20, r7
    3d04:	50 e0       	ldi	r21, 0x00	; 0
    3d06:	bc 01       	movw	r22, r24
    3d08:	6c 0f       	add	r22, r28
    3d0a:	7d 1f       	adc	r23, r29
    3d0c:	c5 01       	movw	r24, r10
    3d0e:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3d12:	f8 01       	movw	r30, r16
    3d14:	50 82       	st	Z, r5
    3d16:	7b c0       	rjmp	.+246    	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
			case INT_UART_IN_CHAR_NO_ECHO:
				sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,serial.read());
				interrupt_done();
				break;
			case INT_UART_IN_CHAR_ECHO:{
					int char_echo=serial.read();
    3d18:	c7 01       	movw	r24, r14
    3d1a:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <_ZN6Serial4readEv>
    3d1e:	78 2e       	mov	r7, r24
					serial.write(char_echo);
    3d20:	68 2f       	mov	r22, r24
    3d22:	c7 01       	movw	r24, r14
    3d24:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <_ZN6Serial5writeEc>
					sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_echo);
    3d28:	61 e0       	ldi	r22, 0x01	; 1
    3d2a:	70 e0       	ldi	r23, 0x00	; 0
    3d2c:	c6 01       	movw	r24, r12
    3d2e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
			case INT_UART_IN_CHAR_NO_ECHO:
				sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,serial.read());
				interrupt_done();
				break;
			case INT_UART_IN_CHAR_ECHO:{
					int char_echo=serial.read();
    3d32:	47 2d       	mov	r20, r7
    3d34:	50 e0       	ldi	r21, 0x00	; 0
					serial.write(char_echo);
					sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_echo);
    3d36:	be 01       	movw	r22, r28
    3d38:	68 0f       	add	r22, r24
    3d3a:	79 1f       	adc	r23, r25
    3d3c:	c5 01       	movw	r24, r10
    3d3e:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3d42:	f8 01       	movw	r30, r16
    3d44:	50 82       	st	Z, r5
    3d46:	63 c0       	rjmp	.+198    	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
					sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_echo);
					interrupt_done();
				}
				break;
			case INT_UART_IN_BUFF_NO_ECHO:{
					int char_noecho=serial.read();
    3d48:	c7 01       	movw	r24, r14
    3d4a:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <_ZN6Serial4readEv>
    3d4e:	68 2e       	mov	r6, r24
    3d50:	71 2c       	mov	r7, r1
					if(char_noecho==STRING_NEWLINE){
    3d52:	fd e0       	ldi	r31, 0x0D	; 13
    3d54:	6f 16       	cp	r6, r31
    3d56:	71 04       	cpc	r7, r1
    3d58:	81 f4       	brne	.+32     	; 0x3d7a <_ZN4QEPU13interrupt_cpuEi+0x14c>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3d5a:	f8 01       	movw	r30, r16
    3d5c:	50 82       	st	Z, r5
				break;
			case INT_UART_IN_BUFF_NO_ECHO:{
					int char_noecho=serial.read();
					if(char_noecho==STRING_NEWLINE){
						interrupt_done();
						sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,STRING_TERMINATOR);
    3d5e:	61 e0       	ldi	r22, 0x01	; 1
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	c6 01       	movw	r24, r12
    3d64:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    3d68:	be 01       	movw	r22, r28
    3d6a:	68 0f       	add	r22, r24
    3d6c:	79 1f       	adc	r23, r25
    3d6e:	44 e2       	ldi	r20, 0x24	; 36
    3d70:	50 e0       	ldi	r21, 0x00	; 0
    3d72:	c5 01       	movw	r24, r10
    3d74:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
    3d78:	4a c0       	rjmp	.+148    	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
					}else
						if(char_noecho==0x8 && address_pointer_offset>0) address_pointer_offset--;
    3d7a:	f8 e0       	ldi	r31, 0x08	; 8
    3d7c:	6f 16       	cp	r6, r31
    3d7e:	71 04       	cpc	r7, r1
    3d80:	29 f4       	brne	.+10     	; 0x3d8c <_ZN4QEPU13interrupt_cpuEi+0x15e>
    3d82:	1c 16       	cp	r1, r28
    3d84:	1d 06       	cpc	r1, r29
    3d86:	14 f4       	brge	.+4      	; 0x3d8c <_ZN4QEPU13interrupt_cpuEi+0x15e>
    3d88:	21 97       	sbiw	r28, 0x01	; 1
    3d8a:	41 c0       	rjmp	.+130    	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
						else{
							sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_noecho);
    3d8c:	61 e0       	ldi	r22, 0x01	; 1
    3d8e:	70 e0       	ldi	r23, 0x00	; 0
    3d90:	c6 01       	movw	r24, r12
    3d92:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    3d96:	be 01       	movw	r22, r28
    3d98:	68 0f       	add	r22, r24
    3d9a:	79 1f       	adc	r23, r25
    3d9c:	a3 01       	movw	r20, r6
    3d9e:	c5 01       	movw	r24, r10
    3da0:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
							address_pointer_offset++;
    3da4:	21 96       	adiw	r28, 0x01	; 1
    3da6:	33 c0       	rjmp	.+102    	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
						}
				}
				break;
			case INT_UART_IN_BUFF_ECHO:{
					int char_echo=serial.read();
    3da8:	c7 01       	movw	r24, r14
    3daa:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <_ZN6Serial4readEv>
    3dae:	68 2e       	mov	r6, r24
    3db0:	71 2c       	mov	r7, r1
					serial.write(char_echo);
    3db2:	68 2f       	mov	r22, r24
    3db4:	c7 01       	movw	r24, r14
    3db6:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <_ZN6Serial5writeEc>
					if(char_echo==STRING_NEWLINE){
    3dba:	8d e0       	ldi	r24, 0x0D	; 13
    3dbc:	68 16       	cp	r6, r24
    3dbe:	71 04       	cpc	r7, r1
    3dc0:	81 f4       	brne	.+32     	; 0x3de2 <_ZN4QEPU13interrupt_cpuEi+0x1b4>
	}
	interrupt_signal=false;
}

void QEPU::interrupt_done(){
	interrupt_signal=true;
    3dc2:	f8 01       	movw	r30, r16
    3dc4:	50 82       	st	Z, r5
			case INT_UART_IN_BUFF_ECHO:{
					int char_echo=serial.read();
					serial.write(char_echo);
					if(char_echo==STRING_NEWLINE){
						interrupt_done();
						sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,STRING_TERMINATOR);
    3dc6:	61 e0       	ldi	r22, 0x01	; 1
    3dc8:	70 e0       	ldi	r23, 0x00	; 0
    3dca:	c6 01       	movw	r24, r12
    3dcc:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    3dd0:	be 01       	movw	r22, r28
    3dd2:	68 0f       	add	r22, r24
    3dd4:	79 1f       	adc	r23, r25
    3dd6:	44 e2       	ldi	r20, 0x24	; 36
    3dd8:	50 e0       	ldi	r21, 0x00	; 0
    3dda:	c5 01       	movw	r24, r10
    3ddc:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
    3de0:	16 c0       	rjmp	.+44     	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
					}else 
						if(char_echo==0x8 && address_pointer_offset>0) address_pointer_offset--;
    3de2:	f8 e0       	ldi	r31, 0x08	; 8
    3de4:	6f 16       	cp	r6, r31
    3de6:	71 04       	cpc	r7, r1
    3de8:	29 f4       	brne	.+10     	; 0x3df4 <_ZN4QEPU13interrupt_cpuEi+0x1c6>
    3dea:	1c 16       	cp	r1, r28
    3dec:	1d 06       	cpc	r1, r29
    3dee:	14 f4       	brge	.+4      	; 0x3df4 <_ZN4QEPU13interrupt_cpuEi+0x1c6>
    3df0:	21 97       	sbiw	r28, 0x01	; 1
    3df2:	0d c0       	rjmp	.+26     	; 0x3e0e <_ZN4QEPU13interrupt_cpuEi+0x1e0>
						else{
							sram.write(fetch_register(INT_RESERVED_ADDRESSDATASTORE)+address_pointer_offset,char_echo);
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	70 e0       	ldi	r23, 0x00	; 0
    3df8:	c6 01       	movw	r24, r12
    3dfa:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    3dfe:	be 01       	movw	r22, r28
    3e00:	68 0f       	add	r22, r24
    3e02:	79 1f       	adc	r23, r25
    3e04:	a3 01       	movw	r20, r6
    3e06:	c5 01       	movw	r24, r10
    3e08:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
							address_pointer_offset++;
    3e0c:	21 96       	adiw	r28, 0x01	; 1

void QEPU::interrupt_cpu(int interrupt_type){
	//NEEDS RESERVED REGISTERS USED FOR ADDRESS POINTING -> ADDRESS SHOULD POINT TO A REGISTER ADDRESS,NOT SRAM
	//NEEDS RESERVED REGISTERS USED FOR DATA SAVING -> SHOULD SAVE ON A REGISTER,NOT SRAM
	int address_pointer_offset=0;
	while(!interrupt_signal){
    3e0e:	f8 01       	movw	r30, r16
    3e10:	80 81       	ld	r24, Z
    3e12:	88 23       	and	r24, r24
    3e14:	09 f4       	brne	.+2      	; 0x3e18 <_ZN4QEPU13interrupt_cpuEi+0x1ea>
    3e16:	2c cf       	rjmp	.-424    	; 0x3c70 <_ZN4QEPU13interrupt_cpuEi+0x42>
						}
				}
				break;
		}
	}
	interrupt_signal=false;
    3e18:	f6 01       	movw	r30, r12
    3e1a:	e6 52       	subi	r30, 0x26	; 38
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	10 82       	st	Z, r1
}
    3e20:	df 91       	pop	r29
    3e22:	cf 91       	pop	r28
    3e24:	1f 91       	pop	r17
    3e26:	0f 91       	pop	r16
    3e28:	ff 90       	pop	r15
    3e2a:	ef 90       	pop	r14
    3e2c:	df 90       	pop	r13
    3e2e:	cf 90       	pop	r12
    3e30:	bf 90       	pop	r11
    3e32:	af 90       	pop	r10
    3e34:	9f 90       	pop	r9
    3e36:	8f 90       	pop	r8
    3e38:	7f 90       	pop	r7
    3e3a:	6f 90       	pop	r6
    3e3c:	5f 90       	pop	r5
    3e3e:	08 95       	ret

00003e40 <_ZN4QEPU9JumpstackC1Ev>:
#include "qepu.h"

QEPU::Jumpstack::Jumpstack():newest_address_index(0){
    3e40:	fc 01       	movw	r30, r24
    3e42:	11 82       	std	Z+1, r1	; 0x01
    3e44:	10 82       	st	Z, r1
    3e46:	08 95       	ret

00003e48 <_ZN4QEPU9Jumpstack4pushEi>:
	
}
void QEPU::Jumpstack::push(int newaddress){
	addresses_toreturn[newest_address_index]=newaddress;
    3e48:	fc 01       	movw	r30, r24
    3e4a:	20 81       	ld	r18, Z
    3e4c:	31 81       	ldd	r19, Z+1	; 0x01
    3e4e:	2f 5f       	subi	r18, 0xFF	; 255
    3e50:	3f 4f       	sbci	r19, 0xFF	; 255
    3e52:	f9 01       	movw	r30, r18
    3e54:	ee 0f       	add	r30, r30
    3e56:	ff 1f       	adc	r31, r31
    3e58:	e8 0f       	add	r30, r24
    3e5a:	f9 1f       	adc	r31, r25
    3e5c:	71 83       	std	Z+1, r23	; 0x01
    3e5e:	60 83       	st	Z, r22
	newest_address_index++;
    3e60:	fc 01       	movw	r30, r24
    3e62:	31 83       	std	Z+1, r19	; 0x01
    3e64:	20 83       	st	Z, r18
    3e66:	08 95       	ret

00003e68 <_ZN4QEPU9Jumpstack3popEv>:
}
int QEPU::Jumpstack::pop(){
    3e68:	fc 01       	movw	r30, r24
	if(newest_address_index<=0) return 0;
    3e6a:	80 81       	ld	r24, Z
    3e6c:	91 81       	ldd	r25, Z+1	; 0x01
    3e6e:	18 16       	cp	r1, r24
    3e70:	19 06       	cpc	r1, r25
    3e72:	ac f4       	brge	.+42     	; 0x3e9e <_ZN4QEPU9Jumpstack3popEv+0x36>
	int address_returning=addresses_toreturn[newest_address_index-1];
    3e74:	01 97       	sbiw	r24, 0x01	; 1
    3e76:	dc 01       	movw	r26, r24
    3e78:	aa 0f       	add	r26, r26
    3e7a:	bb 1f       	adc	r27, r27
    3e7c:	ae 0f       	add	r26, r30
    3e7e:	bf 1f       	adc	r27, r31
    3e80:	12 96       	adiw	r26, 0x02	; 2
    3e82:	3c 91       	ld	r19, X
    3e84:	12 97       	sbiw	r26, 0x02	; 2
    3e86:	13 96       	adiw	r26, 0x03	; 3
    3e88:	2c 91       	ld	r18, X
    3e8a:	13 97       	sbiw	r26, 0x03	; 3
	addresses_toreturn[newest_address_index-1]=0;
    3e8c:	13 96       	adiw	r26, 0x03	; 3
    3e8e:	1c 92       	st	X, r1
    3e90:	1e 92       	st	-X, r1
    3e92:	12 97       	sbiw	r26, 0x02	; 2
	newest_address_index--;
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	80 83       	st	Z, r24
	return address_returning;
    3e98:	83 2f       	mov	r24, r19
    3e9a:	92 2f       	mov	r25, r18
    3e9c:	08 95       	ret
void QEPU::Jumpstack::push(int newaddress){
	addresses_toreturn[newest_address_index]=newaddress;
	newest_address_index++;
}
int QEPU::Jumpstack::pop(){
	if(newest_address_index<=0) return 0;
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
	int address_returning=addresses_toreturn[newest_address_index-1];
	addresses_toreturn[newest_address_index-1]=0;
	newest_address_index--;
	return address_returning;
}
    3ea2:	08 95       	ret

00003ea4 <_ZN4QEPU10setup_seedEv>:

//SETUP SEED FOR RAND():
uint16_t EEMEM randinit;

void QEPU::setup_seed(){
	srand(eeprom_read_word(&randinit));
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <__eerd_word_m32>
    3eac:	0e 94 88 35 	call	0x6b10	; 0x6b10 <srand>
	eeprom_write_word(&randinit,rand()%10000);
    3eb0:	0e 94 83 35 	call	0x6b06	; 0x6b06 <rand>
    3eb4:	60 e1       	ldi	r22, 0x10	; 16
    3eb6:	77 e2       	ldi	r23, 0x27	; 39
    3eb8:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__divmodhi4>
    3ebc:	bc 01       	movw	r22, r24
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	0e 94 d9 38 	call	0x71b2	; 0x71b2 <__eewr_word_m32>
    3ec6:	08 95       	ret

00003ec8 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){serial.writestr("INITIALIZING . . . ");setup_seed();CTRL_QB_DIR=OUTPUT;program_counter=0;program_counter_maximum=0;}
    3ec8:	0f 93       	push	r16
    3eca:	1f 93       	push	r17
    3ecc:	cf 93       	push	r28
    3ece:	df 93       	push	r29
    3ed0:	ec 01       	movw	r28, r24
    3ed2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN4QEPU4FlagC1Ev>
    3ed6:	8e 01       	movw	r16, r28
    3ed8:	0f 5f       	subi	r16, 0xFF	; 255
    3eda:	1f 4f       	sbci	r17, 0xFF	; 255
    3edc:	c8 01       	movw	r24, r16
    3ede:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN6SerialC1Ev>
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	02 96       	adiw	r24, 0x02	; 2
    3ee6:	0e 94 2b 02 	call	0x456	; 0x456 <_ZN6EEPromC1Ev>
    3eea:	ce 01       	movw	r24, r28
    3eec:	03 96       	adiw	r24, 0x03	; 3
    3eee:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <_ZN4SRAMC1Ev>
    3ef2:	ce 01       	movw	r24, r28
    3ef4:	0a 96       	adiw	r24, 0x0a	; 10
    3ef6:	0e 94 29 03 	call	0x652	; 0x652 <_ZN5GatesC1Ev>
    3efa:	ce 01       	movw	r24, r28
    3efc:	0b 96       	adiw	r24, 0x0b	; 11
    3efe:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <_ZN4QEPU9JumpstackC1Ev>
    3f02:	66 e8       	ldi	r22, 0x86	; 134
    3f04:	70 e0       	ldi	r23, 0x00	; 0
    3f06:	c8 01       	movw	r24, r16
    3f08:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <_ZN4QEPU10setup_seedEv>
    3f12:	8f ef       	ldi	r24, 0xFF	; 255
    3f14:	8a bb       	out	0x1a, r24	; 26
    3f16:	fe 01       	movw	r30, r28
    3f18:	ea 52       	subi	r30, 0x2A	; 42
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	11 82       	std	Z+1, r1	; 0x01
    3f1e:	10 82       	st	Z, r1
    3f20:	c8 52       	subi	r28, 0x28	; 40
    3f22:	df 4f       	sbci	r29, 0xFF	; 255
    3f24:	19 82       	std	Y+1, r1	; 0x01
    3f26:	18 82       	st	Y, r1
    3f28:	df 91       	pop	r29
    3f2a:	cf 91       	pop	r28
    3f2c:	1f 91       	pop	r17
    3f2e:	0f 91       	pop	r16
    3f30:	08 95       	ret

00003f32 <_ZN4QEPU14setbuffctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	BUS_OUT&=~(1<<pin); // CLEAR PIN
	BUS_OUT|=(state<<pin); // SET PIN
}
void QEPU::setbuffctrlpin(int pin,int state){
	CTRL_BUFF&=~(1<<pin); // CLEAR PIN
    3f32:	75 b3       	in	r23, 0x15	; 21
    3f34:	21 e0       	ldi	r18, 0x01	; 1
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	c9 01       	movw	r24, r18
    3f3a:	06 2e       	mov	r0, r22
    3f3c:	02 c0       	rjmp	.+4      	; 0x3f42 <_ZN4QEPU14setbuffctrlpinEii+0x10>
    3f3e:	88 0f       	add	r24, r24
    3f40:	99 1f       	adc	r25, r25
    3f42:	0a 94       	dec	r0
    3f44:	e2 f7       	brpl	.-8      	; 0x3f3e <_ZN4QEPU14setbuffctrlpinEii+0xc>
    3f46:	80 95       	com	r24
    3f48:	87 23       	and	r24, r23
    3f4a:	85 bb       	out	0x15, r24	; 21
	CTRL_BUFF|=(state<<pin); // SET PIN
    3f4c:	85 b3       	in	r24, 0x15	; 21
    3f4e:	02 c0       	rjmp	.+4      	; 0x3f54 <_ZN4QEPU14setbuffctrlpinEii+0x22>
    3f50:	44 0f       	add	r20, r20
    3f52:	55 1f       	adc	r21, r21
    3f54:	6a 95       	dec	r22
    3f56:	e2 f7       	brpl	.-8      	; 0x3f50 <_ZN4QEPU14setbuffctrlpinEii+0x1e>
    3f58:	48 2b       	or	r20, r24
    3f5a:	45 bb       	out	0x15, r20	; 21
    3f5c:	08 95       	ret

00003f5e <_ZN4QEPU14deselect_qubitEv>:
	//TODO: TOUCH QUBIT
	
	return deg_read;
}
void QEPU::deselect_qubit(){
	CTRL_BUFF_DIR=OUTPUT;
    3f5e:	2f ef       	ldi	r18, 0xFF	; 255
    3f60:	24 bb       	out	0x14, r18	; 20
	setbuffctrlpin(EO_AB,LOW);
    3f62:	40 e0       	ldi	r20, 0x00	; 0
    3f64:	50 e0       	ldi	r21, 0x00	; 0
    3f66:	64 e0       	ldi	r22, 0x04	; 4
    3f68:	70 e0       	ldi	r23, 0x00	; 0
    3f6a:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZN4QEPU14setbuffctrlpinEii>
    3f6e:	08 95       	ret

00003f70 <_ZN4QEPU12select_qubitEi>:
}
void QEPU::select_qubit(int index){
    3f70:	af 92       	push	r10
    3f72:	bf 92       	push	r11
    3f74:	cf 92       	push	r12
    3f76:	df 92       	push	r13
    3f78:	ef 92       	push	r14
    3f7a:	ff 92       	push	r15
    3f7c:	0f 93       	push	r16
    3f7e:	1f 93       	push	r17
    3f80:	cf 93       	push	r28
    3f82:	df 93       	push	r29
    3f84:	00 d0       	rcall	.+0      	; 0x3f86 <_ZN4QEPU12select_qubitEi+0x16>
    3f86:	00 d0       	rcall	.+0      	; 0x3f88 <_ZN4QEPU12select_qubitEi+0x18>
    3f88:	00 d0       	rcall	.+0      	; 0x3f8a <_ZN4QEPU12select_qubitEi+0x1a>
    3f8a:	cd b7       	in	r28, 0x3d	; 61
    3f8c:	de b7       	in	r29, 0x3e	; 62
    3f8e:	8c 01       	movw	r16, r24
	int address_buffer[ADDRESS_BUFFER_SIZE];
	int mask_bit_addressbuff=0b1111;
	for(int i=0;i<ADDRESS_BUFFER_SIZE;i++){
		address_buffer[i]=(index&mask_bit_addressbuff)>>(4*i);
    3f90:	cb 01       	movw	r24, r22
    3f92:	8f 70       	andi	r24, 0x0F	; 15
    3f94:	99 27       	eor	r25, r25
    3f96:	9a 83       	std	Y+2, r25	; 0x02
    3f98:	89 83       	std	Y+1, r24	; 0x01
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	80 7f       	andi	r24, 0xF0	; 240
    3f9e:	99 27       	eor	r25, r25
    3fa0:	95 95       	asr	r25
    3fa2:	87 95       	ror	r24
    3fa4:	95 95       	asr	r25
    3fa6:	87 95       	ror	r24
    3fa8:	95 95       	asr	r25
    3faa:	87 95       	ror	r24
    3fac:	95 95       	asr	r25
    3fae:	87 95       	ror	r24
    3fb0:	9c 83       	std	Y+4, r25	; 0x04
    3fb2:	8b 83       	std	Y+3, r24	; 0x03
    3fb4:	66 27       	eor	r22, r22
    3fb6:	7f 70       	andi	r23, 0x0F	; 15
    3fb8:	87 2f       	mov	r24, r23
    3fba:	88 0f       	add	r24, r24
    3fbc:	88 0b       	sbc	r24, r24
    3fbe:	7d 83       	std	Y+5, r23	; 0x05
    3fc0:	8e 83       	std	Y+6, r24	; 0x06
		mask_bit_addressbuff<<=4;
	}
	CTRL_QB_DIR=OUTPUT;
    3fc2:	8f ef       	ldi	r24, 0xFF	; 255
    3fc4:	8a bb       	out	0x1a, r24	; 26
	CTRL_BUFF_DIR=OUTPUT;
    3fc6:	84 bb       	out	0x14, r24	; 20
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    3fc8:	89 81       	ldd	r24, Y+1	; 0x01
    3fca:	8b bb       	out	0x1b, r24	; 27
	}
	CTRL_QB_DIR=OUTPUT;
	CTRL_BUFF_DIR=OUTPUT;
	
	setctrl(address_buffer[0]);
	setbuffctrlpin(IN_ABBUFFER_START,HIGH);
    3fcc:	41 e0       	ldi	r20, 0x01	; 1
    3fce:	50 e0       	ldi	r21, 0x00	; 0
    3fd0:	62 e0       	ldi	r22, 0x02	; 2
    3fd2:	70 e0       	ldi	r23, 0x00	; 0
    3fd4:	c8 01       	movw	r24, r16
    3fd6:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    3fda:	41 e0       	ldi	r20, 0x01	; 1
    3fdc:	50 e0       	ldi	r21, 0x00	; 0
    3fde:	63 e0       	ldi	r22, 0x03	; 3
    3fe0:	70 e0       	ldi	r23, 0x00	; 0
    3fe2:	c8 01       	movw	r24, r16
    3fe4:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    3fe8:	40 e0       	ldi	r20, 0x00	; 0
    3fea:	50 e0       	ldi	r21, 0x00	; 0
    3fec:	63 e0       	ldi	r22, 0x03	; 3
    3fee:	70 e0       	ldi	r23, 0x00	; 0
    3ff0:	c8 01       	movw	r24, r16
    3ff2:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_START,LOW);
    3ff6:	40 e0       	ldi	r20, 0x00	; 0
    3ff8:	50 e0       	ldi	r21, 0x00	; 0
    3ffa:	62 e0       	ldi	r22, 0x02	; 2
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	c8 01       	movw	r24, r16
    4000:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZN4QEPU14setbuffctrlpinEii>
	utils.delay(ADDRESS_WRITE_DELAY);
    4004:	68 01       	movw	r12, r16
    4006:	85 ed       	ldi	r24, 0xD5	; 213
    4008:	c8 0e       	add	r12, r24
    400a:	d1 1c       	adc	r13, r1
    400c:	6a e0       	ldi	r22, 0x0A	; 10
    400e:	70 e0       	ldi	r23, 0x00	; 0
    4010:	c6 01       	movw	r24, r12
    4012:	0e 94 57 2f 	call	0x5eae	; 0x5eae <_ZN5Utils5delayEi>
    4016:	7e 01       	movw	r14, r28
    4018:	93 e0       	ldi	r25, 0x03	; 3
    401a:	e9 0e       	add	r14, r25
    401c:	f1 1c       	adc	r15, r1
    401e:	5e 01       	movw	r10, r28
    4020:	e7 e0       	ldi	r30, 0x07	; 7
    4022:	ae 0e       	add	r10, r30
    4024:	b1 1c       	adc	r11, r1
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    4026:	41 e0       	ldi	r20, 0x01	; 1
    4028:	50 e0       	ldi	r21, 0x00	; 0
    402a:	63 e0       	ldi	r22, 0x03	; 3
    402c:	70 e0       	ldi	r23, 0x00	; 0
    402e:	c8 01       	movw	r24, r16
    4030:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZN4QEPU14setbuffctrlpinEii>
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    4034:	40 e0       	ldi	r20, 0x00	; 0
    4036:	50 e0       	ldi	r21, 0x00	; 0
    4038:	63 e0       	ldi	r22, 0x03	; 3
    403a:	70 e0       	ldi	r23, 0x00	; 0
    403c:	c8 01       	movw	r24, r16
    403e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZN4QEPU14setbuffctrlpinEii>
		setctrl(address_buffer[i]);
    4042:	f7 01       	movw	r30, r14
    4044:	80 81       	ld	r24, Z
    4046:	f2 e0       	ldi	r31, 0x02	; 2
    4048:	ef 0e       	add	r14, r31
    404a:	f1 1c       	adc	r15, r1
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    404c:	8b bb       	out	0x1b, r24	; 27
	utils.delay(ADDRESS_WRITE_DELAY);
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
		setctrl(address_buffer[i]);
		utils.delay(ADDRESS_WRITE_DELAY);
    404e:	6a e0       	ldi	r22, 0x0A	; 10
    4050:	70 e0       	ldi	r23, 0x00	; 0
    4052:	c6 01       	movw	r24, r12
    4054:	0e 94 57 2f 	call	0x5eae	; 0x5eae <_ZN5Utils5delayEi>
	setbuffctrlpin(IN_ABBUFFER_START,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(IN_ABBUFFER_START,LOW);
	utils.delay(ADDRESS_WRITE_DELAY);
	for(int i=1;i<ADDRESS_BUFFER_SIZE;i++){
    4058:	ea 14       	cp	r14, r10
    405a:	fb 04       	cpc	r15, r11
    405c:	21 f7       	brne	.-56     	; 0x4026 <_ZN4QEPU12select_qubitEi+0xb6>
		setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
		setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
		setctrl(address_buffer[i]);
		utils.delay(ADDRESS_WRITE_DELAY);
	}
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
    405e:	41 e0       	ldi	r20, 0x01	; 1
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	63 e0       	ldi	r22, 0x03	; 3
    4064:	70 e0       	ldi	r23, 0x00	; 0
    4066:	c8 01       	movw	r24, r16
    4068:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
    406c:	40 e0       	ldi	r20, 0x00	; 0
    406e:	50 e0       	ldi	r21, 0x00	; 0
    4070:	63 e0       	ldi	r22, 0x03	; 3
    4072:	70 e0       	ldi	r23, 0x00	; 0
    4074:	c8 01       	movw	r24, r16
    4076:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZN4QEPU14setbuffctrlpinEii>
	setbuffctrlpin(EO_AB,HIGH);
    407a:	41 e0       	ldi	r20, 0x01	; 1
    407c:	50 e0       	ldi	r21, 0x00	; 0
    407e:	64 e0       	ldi	r22, 0x04	; 4
    4080:	70 e0       	ldi	r23, 0x00	; 0
    4082:	c8 01       	movw	r24, r16
    4084:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZN4QEPU14setbuffctrlpinEii>
}
    4088:	26 96       	adiw	r28, 0x06	; 6
    408a:	0f b6       	in	r0, 0x3f	; 63
    408c:	f8 94       	cli
    408e:	de bf       	out	0x3e, r29	; 62
    4090:	0f be       	out	0x3f, r0	; 63
    4092:	cd bf       	out	0x3d, r28	; 61
    4094:	df 91       	pop	r29
    4096:	cf 91       	pop	r28
    4098:	1f 91       	pop	r17
    409a:	0f 91       	pop	r16
    409c:	ff 90       	pop	r15
    409e:	ef 90       	pop	r14
    40a0:	df 90       	pop	r13
    40a2:	cf 90       	pop	r12
    40a4:	bf 90       	pop	r11
    40a6:	af 90       	pop	r10
    40a8:	08 95       	ret

000040aa <_ZN4QEPU10setctrlpinEii>:
void QEPU::setbuffctrlpin(int pin,int state){
	CTRL_BUFF&=~(1<<pin); // CLEAR PIN
	CTRL_BUFF|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	CTRL_QB&=~(1<<pin); // CLEAR PIN
    40aa:	7b b3       	in	r23, 0x1b	; 27
    40ac:	21 e0       	ldi	r18, 0x01	; 1
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	c9 01       	movw	r24, r18
    40b2:	06 2e       	mov	r0, r22
    40b4:	02 c0       	rjmp	.+4      	; 0x40ba <_ZN4QEPU10setctrlpinEii+0x10>
    40b6:	88 0f       	add	r24, r24
    40b8:	99 1f       	adc	r25, r25
    40ba:	0a 94       	dec	r0
    40bc:	e2 f7       	brpl	.-8      	; 0x40b6 <_ZN4QEPU10setctrlpinEii+0xc>
    40be:	80 95       	com	r24
    40c0:	87 23       	and	r24, r23
    40c2:	8b bb       	out	0x1b, r24	; 27
	CTRL_QB|=(state<<pin); // SET PIN
    40c4:	8b b3       	in	r24, 0x1b	; 27
    40c6:	02 c0       	rjmp	.+4      	; 0x40cc <_ZN4QEPU10setctrlpinEii+0x22>
    40c8:	44 0f       	add	r20, r20
    40ca:	55 1f       	adc	r21, r21
    40cc:	6a 95       	dec	r22
    40ce:	e2 f7       	brpl	.-8      	; 0x40c8 <_ZN4QEPU10setctrlpinEii+0x1e>
    40d0:	48 2b       	or	r20, r24
    40d2:	4b bb       	out	0x1b, r20	; 27
    40d4:	08 95       	ret

000040d6 <_ZN4QEPU5writeEiii>:
void QEPU::close_bus(){
	setctrl(0); // CLOSE ALL CONTROLS
	deselect_qubit(); // DESELECT ALL QUBITS
	bus_write(LOW);
}
void QEPU::write(int index,int dim,int deg){
    40d6:	ff 92       	push	r15
    40d8:	0f 93       	push	r16
    40da:	1f 93       	push	r17
    40dc:	cf 93       	push	r28
    40de:	df 93       	push	r29
    40e0:	ec 01       	movw	r28, r24
    40e2:	8a 01       	movw	r16, r20
	BUS_DIR=OUTPUT;
    40e4:	ff 24       	eor	r15, r15
    40e6:	fa 94       	dec	r15
    40e8:	f7 ba       	out	0x17, r15	; 23
	eeprom_write_word(&randinit,rand()%10000);
}

//QUBIT MEMORY HANDLING:
void QEPU::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    40ea:	f7 ba       	out	0x17, r15	; 23
	BUS_OUT=data;
    40ec:	28 bb       	out	0x18, r18	; 24
}
void QEPU::write(int index,int dim,int deg){
	BUS_DIR=OUTPUT;
	
	bus_write(deg);
	select_qubit(index);
    40ee:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <_ZN4QEPU12select_qubitEi>
	setctrlpin(DIM_SEL,dim);
    40f2:	a8 01       	movw	r20, r16
    40f4:	64 e0       	ldi	r22, 0x04	; 4
    40f6:	70 e0       	ldi	r23, 0x00	; 0
    40f8:	ce 01       	movw	r24, r28
    40fa:	0e 94 55 20 	call	0x40aa	; 0x40aa <_ZN4QEPU10setctrlpinEii>
	setctrlpin(WRITE_QB,HIGH); // CLOCK UP LOAD
    40fe:	41 e0       	ldi	r20, 0x01	; 1
    4100:	50 e0       	ldi	r21, 0x00	; 0
    4102:	66 e0       	ldi	r22, 0x06	; 6
    4104:	70 e0       	ldi	r23, 0x00	; 0
    4106:	ce 01       	movw	r24, r28
    4108:	0e 94 55 20 	call	0x40aa	; 0x40aa <_ZN4QEPU10setctrlpinEii>
	setctrlpin(WRITE_QB,LOW); // CLOCK DOWN LOAD
    410c:	40 e0       	ldi	r20, 0x00	; 0
    410e:	50 e0       	ldi	r21, 0x00	; 0
    4110:	66 e0       	ldi	r22, 0x06	; 6
    4112:	70 e0       	ldi	r23, 0x00	; 0
    4114:	ce 01       	movw	r24, r28
    4116:	0e 94 55 20 	call	0x40aa	; 0x40aa <_ZN4QEPU10setctrlpinEii>
	eeprom_write_word(&randinit,rand()%10000);
}

//QUBIT MEMORY HANDLING:
void QEPU::bus_write(int8_t data){
	BUS_DIR=OUTPUT;
    411a:	f7 ba       	out	0x17, r15	; 23
	BUS_OUT=data;
    411c:	18 ba       	out	0x18, r1	; 24
	select_qubit(index);
	setctrlpin(DIM_SEL,dim);
	setctrlpin(WRITE_QB,HIGH); // CLOCK UP LOAD
	setctrlpin(WRITE_QB,LOW); // CLOCK DOWN LOAD
	bus_write(LOW);
	deselect_qubit();
    411e:	ce 01       	movw	r24, r28
    4120:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_ZN4QEPU14deselect_qubitEv>
}
    4124:	df 91       	pop	r29
    4126:	cf 91       	pop	r28
    4128:	1f 91       	pop	r17
    412a:	0f 91       	pop	r16
    412c:	ff 90       	pop	r15
    412e:	08 95       	ret

00004130 <_ZN4QEPU4readEiib>:
int QEPU::read(int index,int dim,bool freeze_bus){
    4130:	ff 92       	push	r15
    4132:	0f 93       	push	r16
    4134:	1f 93       	push	r17
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
    413a:	ec 01       	movw	r28, r24
    413c:	8a 01       	movw	r16, r20
    413e:	f2 2e       	mov	r15, r18
	BUS_DIR=INPUT;
    4140:	17 ba       	out	0x17, r1	; 23
	
	select_qubit(index);
    4142:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <_ZN4QEPU12select_qubitEi>
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    4146:	41 e0       	ldi	r20, 0x01	; 1
    4148:	50 e0       	ldi	r21, 0x00	; 0
    414a:	65 e0       	ldi	r22, 0x05	; 5
    414c:	70 e0       	ldi	r23, 0x00	; 0
    414e:	ce 01       	movw	r24, r28
    4150:	0e 94 55 20 	call	0x40aa	; 0x40aa <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    4154:	a8 01       	movw	r20, r16
    4156:	64 e0       	ldi	r22, 0x04	; 4
    4158:	70 e0       	ldi	r23, 0x00	; 0
    415a:	ce 01       	movw	r24, r28
    415c:	0e 94 55 20 	call	0x40aa	; 0x40aa <_ZN4QEPU10setctrlpinEii>
	int deg_read=BUS_IN; // READ INPUT
    4160:	06 b3       	in	r16, 0x16	; 22
    4162:	10 e0       	ldi	r17, 0x00	; 0
	//CLOSE ALL AND GATES
	BUS_DIR=OUTPUT;
    4164:	8f ef       	ldi	r24, 0xFF	; 255
    4166:	87 bb       	out	0x17, r24	; 23
	if(!freeze_bus){
    4168:	f1 10       	cpse	r15, r1
    416a:	04 c0       	rjmp	.+8      	; 0x4174 <_ZN4QEPU4readEiib+0x44>
	setbuffctrlpin(IN_ABBUFFER_CLOCK,HIGH);
	setbuffctrlpin(IN_ABBUFFER_CLOCK,LOW);
	setbuffctrlpin(EO_AB,HIGH);
}
void QEPU::setctrl(int bin){
	CTRL_QB=bin;
    416c:	1b ba       	out	0x1b, r1	; 27
	int deg_read=BUS_IN; // READ INPUT
	//CLOSE ALL AND GATES
	BUS_DIR=OUTPUT;
	if(!freeze_bus){
		setctrl(0); // CLOSE ALL CONTROLS
		deselect_qubit();
    416e:	ce 01       	movw	r24, r28
    4170:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <_ZN4QEPU14deselect_qubitEv>
	}
	//TODO: TOUCH QUBIT
	
	return deg_read;
}
    4174:	c8 01       	movw	r24, r16
    4176:	df 91       	pop	r29
    4178:	cf 91       	pop	r28
    417a:	1f 91       	pop	r17
    417c:	0f 91       	pop	r16
    417e:	ff 90       	pop	r15
    4180:	08 95       	ret

00004182 <_ZN4QEPU7measureEi>:
}
void QEPU::setctrlpin(int pin,int state){
	CTRL_QB&=~(1<<pin); // CLEAR PIN
	CTRL_QB|=(state<<pin); // SET PIN
}
int QEPU::measure(int amplitude){
    4182:	cf 93       	push	r28
    4184:	df 93       	push	r29
    4186:	ec 01       	movw	r28, r24
	return gates.touch(utils.custom_pow(sin(amplitude*M_PI/360),2));
    4188:	88 27       	eor	r24, r24
    418a:	77 fd       	sbrc	r23, 7
    418c:	80 95       	com	r24
    418e:	98 2f       	mov	r25, r24
    4190:	0e 94 2a 31 	call	0x6254	; 0x6254 <__floatsisf>
    4194:	2b ed       	ldi	r18, 0xDB	; 219
    4196:	3f e0       	ldi	r19, 0x0F	; 15
    4198:	49 e4       	ldi	r20, 0x49	; 73
    419a:	50 e4       	ldi	r21, 0x40	; 64
    419c:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
    41a0:	20 e0       	ldi	r18, 0x00	; 0
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	44 eb       	ldi	r20, 0xB4	; 180
    41a6:	53 e4       	ldi	r21, 0x43	; 67
    41a8:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__divsf3>
    41ac:	0e 94 6f 33 	call	0x66de	; 0x66de <sin>
    41b0:	ab 01       	movw	r20, r22
    41b2:	bc 01       	movw	r22, r24
    41b4:	22 e0       	ldi	r18, 0x02	; 2
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	ce 01       	movw	r24, r28
    41ba:	8b 52       	subi	r24, 0x2B	; 43
    41bc:	9f 4f       	sbci	r25, 0xFF	; 255
    41be:	0e 94 65 2f 	call	0x5eca	; 0x5eca <_ZN5Utils10custom_powEfi>
    41c2:	ab 01       	movw	r20, r22
    41c4:	bc 01       	movw	r22, r24
    41c6:	ce 01       	movw	r24, r28
    41c8:	0a 96       	adiw	r24, 0x0a	; 10
    41ca:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Gates5touchEd>
}
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    41d2:	08 95       	ret

000041d4 <_ZN4QEPU14fetch_registerEi>:

int QEPU::fetch_register(int address){
    41d4:	8f 92       	push	r8
    41d6:	9f 92       	push	r9
    41d8:	af 92       	push	r10
    41da:	bf 92       	push	r11
    41dc:	cf 92       	push	r12
    41de:	df 92       	push	r13
    41e0:	ef 92       	push	r14
    41e2:	ff 92       	push	r15
    41e4:	0f 93       	push	r16
    41e6:	1f 93       	push	r17
    41e8:	cf 93       	push	r28
    41ea:	df 93       	push	r29
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	29 97       	sbiw	r28, 0x09	; 9
    41f2:	0f b6       	in	r0, 0x3f	; 63
    41f4:	f8 94       	cli
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	cd bf       	out	0x3d, r28	; 61
    41fc:	5c 01       	movw	r10, r24
	char data_fetched[BUS_WIDTH+1]="";
    41fe:	19 82       	std	Y+1, r1	; 0x01
    4200:	1a 82       	std	Y+2, r1	; 0x02
    4202:	1b 82       	std	Y+3, r1	; 0x03
    4204:	1c 82       	std	Y+4, r1	; 0x04
    4206:	fe 01       	movw	r30, r28
    4208:	35 96       	adiw	r30, 0x05	; 5
    420a:	85 e0       	ldi	r24, 0x05	; 5
    420c:	df 01       	movw	r26, r30
    420e:	1d 92       	st	X+, r1
    4210:	8a 95       	dec	r24
    4212:	e9 f7       	brne	.-6      	; 0x420e <_ZN4QEPU14fetch_registerEi+0x3a>
	int address_offset=address*BUS_WIDTH;
    4214:	4b 01       	movw	r8, r22
    4216:	88 0c       	add	r8, r8
    4218:	99 1c       	adc	r9, r9
    421a:	88 0c       	add	r8, r8
    421c:	99 1c       	adc	r9, r9
    421e:	88 0c       	add	r8, r8
    4220:	99 1c       	adc	r9, r9
	for(int i=0;i<BUS_WIDTH;i++)
    4222:	e1 2c       	mov	r14, r1
    4224:	f1 2c       	mov	r15, r1
		sprintf(data_fetched,"%s%d",data_fetched,measure(read(address_offset+i,THE,false)));
    4226:	8e 01       	movw	r16, r28
    4228:	0f 5f       	subi	r16, 0xFF	; 255
    422a:	1f 4f       	sbci	r17, 0xFF	; 255
    422c:	0f 2e       	mov	r0, r31
    422e:	fa e9       	ldi	r31, 0x9A	; 154
    4230:	cf 2e       	mov	r12, r31
    4232:	f0 e0       	ldi	r31, 0x00	; 0
    4234:	df 2e       	mov	r13, r31
    4236:	f0 2d       	mov	r31, r0
    4238:	b7 01       	movw	r22, r14
    423a:	68 0d       	add	r22, r8
    423c:	79 1d       	adc	r23, r9
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	40 e0       	ldi	r20, 0x00	; 0
    4242:	50 e0       	ldi	r21, 0x00	; 0
    4244:	c5 01       	movw	r24, r10
    4246:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    424a:	bc 01       	movw	r22, r24
    424c:	c5 01       	movw	r24, r10
    424e:	0e 94 c1 20 	call	0x4182	; 0x4182 <_ZN4QEPU7measureEi>
    4252:	9f 93       	push	r25
    4254:	8f 93       	push	r24
    4256:	1f 93       	push	r17
    4258:	0f 93       	push	r16
    425a:	df 92       	push	r13
    425c:	cf 92       	push	r12
    425e:	1f 93       	push	r17
    4260:	0f 93       	push	r16
    4262:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <sprintf>
}

int QEPU::fetch_register(int address){
	char data_fetched[BUS_WIDTH+1]="";
	int address_offset=address*BUS_WIDTH;
	for(int i=0;i<BUS_WIDTH;i++)
    4266:	bf ef       	ldi	r27, 0xFF	; 255
    4268:	eb 1a       	sub	r14, r27
    426a:	fb 0a       	sbc	r15, r27
    426c:	0f b6       	in	r0, 0x3f	; 63
    426e:	f8 94       	cli
    4270:	de bf       	out	0x3e, r29	; 62
    4272:	0f be       	out	0x3f, r0	; 63
    4274:	cd bf       	out	0x3d, r28	; 61
    4276:	98 e0       	ldi	r25, 0x08	; 8
    4278:	e9 16       	cp	r14, r25
    427a:	f1 04       	cpc	r15, r1
    427c:	e9 f6       	brne	.-70     	; 0x4238 <_ZN4QEPU14fetch_registerEi+0x64>
		sprintf(data_fetched,"%s%d",data_fetched,measure(read(address_offset+i,THE,false)));
	strrev(data_fetched);
    427e:	ce 01       	movw	r24, r28
    4280:	01 96       	adiw	r24, 0x01	; 1
    4282:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <strrev>
	return strtol(data_fetched,NULL,2);
    4286:	42 e0       	ldi	r20, 0x02	; 2
    4288:	50 e0       	ldi	r21, 0x00	; 0
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	70 e0       	ldi	r23, 0x00	; 0
    428e:	ce 01       	movw	r24, r28
    4290:	01 96       	adiw	r24, 0x01	; 1
    4292:	0e 94 93 35 	call	0x6b26	; 0x6b26 <strtol>
}
    4296:	cb 01       	movw	r24, r22
    4298:	29 96       	adiw	r28, 0x09	; 9
    429a:	0f b6       	in	r0, 0x3f	; 63
    429c:	f8 94       	cli
    429e:	de bf       	out	0x3e, r29	; 62
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	cd bf       	out	0x3d, r28	; 61
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	ff 90       	pop	r15
    42ae:	ef 90       	pop	r14
    42b0:	df 90       	pop	r13
    42b2:	cf 90       	pop	r12
    42b4:	bf 90       	pop	r11
    42b6:	af 90       	pop	r10
    42b8:	9f 90       	pop	r9
    42ba:	8f 90       	pop	r8
    42bc:	08 95       	ret

000042be <_ZN4QEPU12set_registerEii>:

void QEPU::set_register(int address,int data){
    42be:	cf 92       	push	r12
    42c0:	df 92       	push	r13
    42c2:	ef 92       	push	r14
    42c4:	ff 92       	push	r15
    42c6:	0f 93       	push	r16
    42c8:	1f 93       	push	r17
    42ca:	cf 93       	push	r28
    42cc:	df 93       	push	r29
    42ce:	6c 01       	movw	r12, r24
    42d0:	8b 01       	movw	r16, r22
    42d2:	ba 01       	movw	r22, r20
	char* data_str=utils.int2binstr(data,BUS_WIDTH);
    42d4:	48 e0       	ldi	r20, 0x08	; 8
    42d6:	50 e0       	ldi	r21, 0x00	; 0
    42d8:	8b 52       	subi	r24, 0x2B	; 43
    42da:	9f 4f       	sbci	r25, 0xFF	; 255
    42dc:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <_ZN5Utils10int2binstrEii>
    42e0:	d8 2f       	mov	r29, r24
    42e2:	c9 2f       	mov	r28, r25
	strrev(data_str);
    42e4:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <strrev>
    42e8:	ed 2e       	mov	r14, r29
    42ea:	fc 2e       	mov	r15, r28
	int address_offset=address*BUS_WIDTH;
    42ec:	00 0f       	add	r16, r16
    42ee:	11 1f       	adc	r17, r17
    42f0:	00 0f       	add	r16, r16
    42f2:	11 1f       	adc	r17, r17
    42f4:	00 0f       	add	r16, r16
    42f6:	11 1f       	adc	r17, r17
	
	for(int i=0;i<BUS_WIDTH;i++)
    42f8:	c0 e0       	ldi	r28, 0x00	; 0
    42fa:	d0 e0       	ldi	r29, 0x00	; 0
		if(data_str[i]=='1') write(address_offset+i,THE,180);
    42fc:	f7 01       	movw	r30, r14
    42fe:	81 91       	ld	r24, Z+
    4300:	7f 01       	movw	r14, r30
    4302:	81 33       	cpi	r24, 0x31	; 49
    4304:	49 f4       	brne	.+18     	; 0x4318 <_ZN4QEPU12set_registerEii+0x5a>
    4306:	24 eb       	ldi	r18, 0xB4	; 180
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	40 e0       	ldi	r20, 0x00	; 0
    430c:	50 e0       	ldi	r21, 0x00	; 0
    430e:	b8 01       	movw	r22, r16
    4310:	c6 01       	movw	r24, r12
    4312:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4316:	08 c0       	rjmp	.+16     	; 0x4328 <_ZN4QEPU12set_registerEii+0x6a>
		else write(address_offset+i,THE,0);
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	40 e0       	ldi	r20, 0x00	; 0
    431e:	50 e0       	ldi	r21, 0x00	; 0
    4320:	b8 01       	movw	r22, r16
    4322:	c6 01       	movw	r24, r12
    4324:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
void QEPU::set_register(int address,int data){
	char* data_str=utils.int2binstr(data,BUS_WIDTH);
	strrev(data_str);
	int address_offset=address*BUS_WIDTH;
	
	for(int i=0;i<BUS_WIDTH;i++)
    4328:	21 96       	adiw	r28, 0x01	; 1
    432a:	0f 5f       	subi	r16, 0xFF	; 255
    432c:	1f 4f       	sbci	r17, 0xFF	; 255
    432e:	c8 30       	cpi	r28, 0x08	; 8
    4330:	d1 05       	cpc	r29, r1
    4332:	21 f7       	brne	.-56     	; 0x42fc <_ZN4QEPU12set_registerEii+0x3e>
		if(data_str[i]=='1') write(address_offset+i,THE,180);
		else write(address_offset+i,THE,0);
}
    4334:	df 91       	pop	r29
    4336:	cf 91       	pop	r28
    4338:	1f 91       	pop	r17
    433a:	0f 91       	pop	r16
    433c:	ff 90       	pop	r15
    433e:	ef 90       	pop	r14
    4340:	df 90       	pop	r13
    4342:	cf 90       	pop	r12
    4344:	08 95       	ret

00004346 <_ZN4QEPU7dumpmemEi>:

void QEPU::dumpmem(int length){
    4346:	4f 92       	push	r4
    4348:	5f 92       	push	r5
    434a:	6f 92       	push	r6
    434c:	7f 92       	push	r7
    434e:	8f 92       	push	r8
    4350:	9f 92       	push	r9
    4352:	af 92       	push	r10
    4354:	bf 92       	push	r11
    4356:	cf 92       	push	r12
    4358:	df 92       	push	r13
    435a:	ef 92       	push	r14
    435c:	ff 92       	push	r15
    435e:	0f 93       	push	r16
    4360:	1f 93       	push	r17
    4362:	cf 93       	push	r28
    4364:	df 93       	push	r29
    4366:	6c 01       	movw	r12, r24
    4368:	5b 01       	movw	r10, r22
	serial.writestrln("");
    436a:	8c 01       	movw	r16, r24
    436c:	0f 5f       	subi	r16, 0xFF	; 255
    436e:	1f 4f       	sbci	r17, 0xFF	; 255
    4370:	65 ec       	ldi	r22, 0xC5	; 197
    4372:	70 e0       	ldi	r23, 0x00	; 0
    4374:	c8 01       	movw	r24, r16
    4376:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    437a:	6f e9       	ldi	r22, 0x9F	; 159
    437c:	70 e0       	ldi	r23, 0x00	; 0
    437e:	c8 01       	movw	r24, r16
    4380:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<length;i++){
    4384:	1a 14       	cp	r1, r10
    4386:	1b 04       	cpc	r1, r11
    4388:	0c f0       	brlt	.+2      	; 0x438c <_ZN4QEPU7dumpmemEi+0x46>
    438a:	6b c0       	rjmp	.+214    	; 0x4462 <_ZN4QEPU7dumpmemEi+0x11c>
    438c:	c0 e0       	ldi	r28, 0x00	; 0
    438e:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE,false));
    4390:	0f 2e       	mov	r0, r31
    4392:	f5 e2       	ldi	r31, 0x25	; 37
    4394:	ef 2e       	mov	r14, r31
    4396:	f1 e0       	ldi	r31, 0x01	; 1
    4398:	ff 2e       	mov	r15, r31
    439a:	f0 2d       	mov	r31, r0
    439c:	83 e0       	ldi	r24, 0x03	; 3
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
    43a4:	68 2e       	mov	r6, r24
    43a6:	79 2e       	mov	r7, r25
    43a8:	20 e0       	ldi	r18, 0x00	; 0
    43aa:	40 e0       	ldi	r20, 0x00	; 0
    43ac:	50 e0       	ldi	r21, 0x00	; 0
    43ae:	be 01       	movw	r22, r28
    43b0:	c6 01       	movw	r24, r12
    43b2:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    43b6:	9f 93       	push	r25
    43b8:	8f 93       	push	r24
    43ba:	ff 92       	push	r15
    43bc:	ef 92       	push	r14
    43be:	7f 92       	push	r7
    43c0:	6f 92       	push	r6
    43c2:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI,false));
    43c6:	83 e0       	ldi	r24, 0x03	; 3
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
    43ce:	88 2e       	mov	r8, r24
    43d0:	99 2e       	mov	r9, r25
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	41 e0       	ldi	r20, 0x01	; 1
    43d6:	50 e0       	ldi	r21, 0x00	; 0
    43d8:	be 01       	movw	r22, r28
    43da:	c6 01       	movw	r24, r12
    43dc:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    43e0:	9f 93       	push	r25
    43e2:	8f 93       	push	r24
    43e4:	ff 92       	push	r15
    43e6:	ef 92       	push	r14
    43e8:	9f 92       	push	r9
    43ea:	8f 92       	push	r8
    43ec:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
    43f8:	48 2e       	mov	r4, r24
    43fa:	59 2e       	mov	r5, r25
    43fc:	df 93       	push	r29
    43fe:	cf 93       	push	r28
    4400:	ff 92       	push	r15
    4402:	ef 92       	push	r14
    4404:	5f 92       	push	r5
    4406:	4f 92       	push	r4
    4408:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    440c:	69 eb       	ldi	r22, 0xB9	; 185
    440e:	70 e0       	ldi	r23, 0x00	; 0
    4410:	c8 01       	movw	r24, r16
    4412:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
    4416:	64 2d       	mov	r22, r4
    4418:	75 2d       	mov	r23, r5
    441a:	c8 01       	movw	r24, r16
    441c:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
    4420:	6b eb       	ldi	r22, 0xBB	; 187
    4422:	70 e0       	ldi	r23, 0x00	; 0
    4424:	c8 01       	movw	r24, r16
    4426:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    442a:	66 2d       	mov	r22, r6
    442c:	77 2d       	mov	r23, r7
    442e:	c8 01       	movw	r24, r16
    4430:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    4434:	66 ec       	ldi	r22, 0xC6	; 198
    4436:	70 e0       	ldi	r23, 0x00	; 0
    4438:	c8 01       	movw	r24, r16
    443a:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    443e:	68 2d       	mov	r22, r8
    4440:	79 2d       	mov	r23, r9
    4442:	c8 01       	movw	r24, r16
    4444:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_ZN6Serial10writestrlnEPc>
}

void QEPU::dumpmem(int length){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<length;i++){
    4448:	21 96       	adiw	r28, 0x01	; 1
    444a:	8d b7       	in	r24, 0x3d	; 61
    444c:	9e b7       	in	r25, 0x3e	; 62
    444e:	42 96       	adiw	r24, 0x12	; 18
    4450:	0f b6       	in	r0, 0x3f	; 63
    4452:	f8 94       	cli
    4454:	9e bf       	out	0x3e, r25	; 62
    4456:	0f be       	out	0x3f, r0	; 63
    4458:	8d bf       	out	0x3d, r24	; 61
    445a:	ca 15       	cp	r28, r10
    445c:	db 05       	cpc	r29, r11
    445e:	09 f0       	breq	.+2      	; 0x4462 <_ZN4QEPU7dumpmemEi+0x11c>
    4460:	9d cf       	rjmp	.-198    	; 0x439c <_ZN4QEPU7dumpmemEi+0x56>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    4462:	df 91       	pop	r29
    4464:	cf 91       	pop	r28
    4466:	1f 91       	pop	r17
    4468:	0f 91       	pop	r16
    446a:	ff 90       	pop	r15
    446c:	ef 90       	pop	r14
    446e:	df 90       	pop	r13
    4470:	cf 90       	pop	r12
    4472:	bf 90       	pop	r11
    4474:	af 90       	pop	r10
    4476:	9f 90       	pop	r9
    4478:	8f 90       	pop	r8
    447a:	7f 90       	pop	r7
    447c:	6f 90       	pop	r6
    447e:	5f 90       	pop	r5
    4480:	4f 90       	pop	r4
    4482:	08 95       	ret

00004484 <_ZN4QEPU7executeEilll>:
	sram.dumpmem(5);
	serial.writestr("The execution of the program has finished");
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2,int32_t op3){
    4484:	2f 92       	push	r2
    4486:	3f 92       	push	r3
    4488:	4f 92       	push	r4
    448a:	5f 92       	push	r5
    448c:	6f 92       	push	r6
    448e:	7f 92       	push	r7
    4490:	8f 92       	push	r8
    4492:	9f 92       	push	r9
    4494:	af 92       	push	r10
    4496:	bf 92       	push	r11
    4498:	cf 92       	push	r12
    449a:	df 92       	push	r13
    449c:	ef 92       	push	r14
    449e:	ff 92       	push	r15
    44a0:	0f 93       	push	r16
    44a2:	1f 93       	push	r17
    44a4:	cf 93       	push	r28
    44a6:	df 93       	push	r29
    44a8:	cd b7       	in	r28, 0x3d	; 61
    44aa:	de b7       	in	r29, 0x3e	; 62
    44ac:	2a 97       	sbiw	r28, 0x0a	; 10
    44ae:	0f b6       	in	r0, 0x3f	; 63
    44b0:	f8 94       	cli
    44b2:	de bf       	out	0x3e, r29	; 62
    44b4:	0f be       	out	0x3f, r0	; 63
    44b6:	cd bf       	out	0x3d, r28	; 61
    44b8:	9a 87       	std	Y+10, r25	; 0x0a
    44ba:	89 87       	std	Y+9, r24	; 0x09
    44bc:	6b 01       	movw	r12, r22
    44be:	29 01       	movw	r4, r18
    44c0:	3a 01       	movw	r6, r20
    44c2:	e9 82       	std	Y+1, r14	; 0x01
    44c4:	fa 82       	std	Y+2, r15	; 0x02
    44c6:	0b 83       	std	Y+3, r16	; 0x03
    44c8:	1c 83       	std	Y+4, r17	; 0x04
	int * newthephi=(int*)malloc(sizeof(int)*MAX_NEWTHEPHI);
    44ca:	8c e0       	ldi	r24, 0x0C	; 12
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
    44d2:	8c 01       	movw	r16, r24
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    44d4:	f6 01       	movw	r30, r12
    44d6:	31 97       	sbiw	r30, 0x01	; 1
    44d8:	ed 33       	cpi	r30, 0x3D	; 61
    44da:	f1 05       	cpc	r31, r1
    44dc:	10 f0       	brcs	.+4      	; 0x44e2 <_ZN4QEPU7executeEilll+0x5e>
    44de:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
    44e2:	e6 5d       	subi	r30, 0xD6	; 214
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	0c 94 f4 33 	jmp	0x67e8	; 0x67e8 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOQ (move qubit) */
			write(op1,THE,read(op2,THE,false));
    44ea:	20 e0       	ldi	r18, 0x00	; 0
    44ec:	40 e0       	ldi	r20, 0x00	; 0
    44ee:	50 e0       	ldi	r21, 0x00	; 0
    44f0:	69 81       	ldd	r22, Y+1	; 0x01
    44f2:	7a 81       	ldd	r23, Y+2	; 0x02
    44f4:	89 85       	ldd	r24, Y+9	; 0x09
    44f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f8:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    44fc:	9c 01       	movw	r18, r24
    44fe:	40 e0       	ldi	r20, 0x00	; 0
    4500:	50 e0       	ldi	r21, 0x00	; 0
    4502:	b2 01       	movw	r22, r4
    4504:	89 85       	ldd	r24, Y+9	; 0x09
    4506:	9a 85       	ldd	r25, Y+10	; 0x0a
    4508:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI,false));
    450c:	20 e0       	ldi	r18, 0x00	; 0
    450e:	41 e0       	ldi	r20, 0x01	; 1
    4510:	50 e0       	ldi	r21, 0x00	; 0
    4512:	69 81       	ldd	r22, Y+1	; 0x01
    4514:	7a 81       	ldd	r23, Y+2	; 0x02
    4516:	89 85       	ldd	r24, Y+9	; 0x09
    4518:	9a 85       	ldd	r25, Y+10	; 0x0a
    451a:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    451e:	9c 01       	movw	r18, r24
    4520:	41 e0       	ldi	r20, 0x01	; 1
    4522:	50 e0       	ldi	r21, 0x00	; 0
    4524:	b2 01       	movw	r22, r4
    4526:	89 85       	ldd	r24, Y+9	; 0x09
    4528:	9a 85       	ldd	r25, Y+10	; 0x0a
    452a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    452e:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x02: /*MOR (move register)*/
			set_register(op1,fetch_register(op1)); // TOUCH ITSELF 1ST
    4532:	b2 01       	movw	r22, r4
    4534:	89 85       	ldd	r24, Y+9	; 0x09
    4536:	9a 85       	ldd	r25, Y+10	; 0x0a
    4538:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    453c:	ac 01       	movw	r20, r24
    453e:	b2 01       	movw	r22, r4
    4540:	89 85       	ldd	r24, Y+9	; 0x09
    4542:	9a 85       	ldd	r25, Y+10	; 0x0a
    4544:	0e 94 5f 21 	call	0x42be	; 0x42be <_ZN4QEPU12set_registerEii>
			set_register(op1,fetch_register(op2)); // MOVE TO THE NEW REGISTER (IF IT NEEDS TO BE UNTOUCHED IT NEEDS TO USE MATRICES INSTEAD)
    4548:	69 81       	ldd	r22, Y+1	; 0x01
    454a:	7a 81       	ldd	r23, Y+2	; 0x02
    454c:	89 85       	ldd	r24, Y+9	; 0x09
    454e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4550:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    4554:	ac 01       	movw	r20, r24
    4556:	b2 01       	movw	r22, r4
    4558:	89 85       	ldd	r24, Y+9	; 0x09
    455a:	9a 85       	ldd	r25, Y+10	; 0x0a
    455c:	0e 94 5f 21 	call	0x42be	; 0x42be <_ZN4QEPU12set_registerEii>
			break;
    4560:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x03: /*MOM (move memory)*/
			sram.write(op1,sram.read(op2));
    4564:	e9 84       	ldd	r14, Y+9	; 0x09
    4566:	fa 84       	ldd	r15, Y+10	; 0x0a
    4568:	83 e0       	ldi	r24, 0x03	; 3
    456a:	e8 0e       	add	r14, r24
    456c:	f1 1c       	adc	r15, r1
    456e:	69 81       	ldd	r22, Y+1	; 0x01
    4570:	7a 81       	ldd	r23, Y+2	; 0x02
    4572:	c7 01       	movw	r24, r14
    4574:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4578:	48 2f       	mov	r20, r24
    457a:	55 27       	eor	r21, r21
    457c:	47 fd       	sbrc	r20, 7
    457e:	50 95       	com	r21
    4580:	b2 01       	movw	r22, r4
    4582:	c7 01       	movw	r24, r14
    4584:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    4588:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x04: /*STR (store)*/
			sram.write(op1,fetch_register(op2));
    458c:	69 81       	ldd	r22, Y+1	; 0x01
    458e:	7a 81       	ldd	r23, Y+2	; 0x02
    4590:	89 85       	ldd	r24, Y+9	; 0x09
    4592:	9a 85       	ldd	r25, Y+10	; 0x0a
    4594:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    4598:	ac 01       	movw	r20, r24
    459a:	b2 01       	movw	r22, r4
    459c:	89 85       	ldd	r24, Y+9	; 0x09
    459e:	9a 85       	ldd	r25, Y+10	; 0x0a
    45a0:	03 96       	adiw	r24, 0x03	; 3
    45a2:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    45a6:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x05: /*LOD (load)*/
			set_register(op1,sram.read(op2));
    45aa:	69 81       	ldd	r22, Y+1	; 0x01
    45ac:	7a 81       	ldd	r23, Y+2	; 0x02
    45ae:	89 85       	ldd	r24, Y+9	; 0x09
    45b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b2:	03 96       	adiw	r24, 0x03	; 3
    45b4:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    45b8:	48 2f       	mov	r20, r24
    45ba:	55 27       	eor	r21, r21
    45bc:	47 fd       	sbrc	r20, 7
    45be:	50 95       	com	r21
    45c0:	b2 01       	movw	r22, r4
    45c2:	89 85       	ldd	r24, Y+9	; 0x09
    45c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c6:	0e 94 5f 21 	call	0x42be	; 0x42be <_ZN4QEPU12set_registerEii>
			break;
    45ca:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x06: /*CRW (Constant Ram Write)*/
			sram.write(op1,op2);
    45ce:	49 81       	ldd	r20, Y+1	; 0x01
    45d0:	5a 81       	ldd	r21, Y+2	; 0x02
    45d2:	b2 01       	movw	r22, r4
    45d4:	89 85       	ldd	r24, Y+9	; 0x09
    45d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    45d8:	03 96       	adiw	r24, 0x03	; 3
    45da:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    45de:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x07: /*CQW* (Constant Qubit Write)*/
			set_register(op1,op2);
    45e2:	49 81       	ldd	r20, Y+1	; 0x01
    45e4:	5a 81       	ldd	r21, Y+2	; 0x02
    45e6:	b2 01       	movw	r22, r4
    45e8:	89 85       	ldd	r24, Y+9	; 0x09
    45ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ec:	0e 94 5f 21 	call	0x42be	; 0x42be <_ZN4QEPU12set_registerEii>
			break;
    45f0:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x08: /*POP (pop)*/
			set_register(op1,sram.pop());
    45f4:	89 85       	ldd	r24, Y+9	; 0x09
    45f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f8:	03 96       	adiw	r24, 0x03	; 3
    45fa:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <_ZN4SRAM3popEv>
    45fe:	ac 01       	movw	r20, r24
    4600:	b2 01       	movw	r22, r4
    4602:	89 85       	ldd	r24, Y+9	; 0x09
    4604:	9a 85       	ldd	r25, Y+10	; 0x0a
    4606:	0e 94 5f 21 	call	0x42be	; 0x42be <_ZN4QEPU12set_registerEii>
			break;
    460a:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x09: /*PSH (push)*/
			sram.push(fetch_register(op1));
    460e:	b2 01       	movw	r22, r4
    4610:	89 85       	ldd	r24, Y+9	; 0x09
    4612:	9a 85       	ldd	r25, Y+10	; 0x0a
    4614:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    4618:	bc 01       	movw	r22, r24
    461a:	89 85       	ldd	r24, Y+9	; 0x09
    461c:	9a 85       	ldd	r25, Y+10	; 0x0a
    461e:	03 96       	adiw	r24, 0x03	; 3
    4620:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <_ZN4SRAM4pushEi>
			break;
    4624:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x0A: /*CMT (constantmovtheta)*/
			write(op1,THE,op2);
    4628:	29 81       	ldd	r18, Y+1	; 0x01
    462a:	3a 81       	ldd	r19, Y+2	; 0x02
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	50 e0       	ldi	r21, 0x00	; 0
    4630:	b2 01       	movw	r22, r4
    4632:	89 85       	ldd	r24, Y+9	; 0x09
    4634:	9a 85       	ldd	r25, Y+10	; 0x0a
    4636:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    463a:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x0B: /*CMP (constantmovphi)*/
			write(op1,PHI,op2);
    463e:	29 81       	ldd	r18, Y+1	; 0x01
    4640:	3a 81       	ldd	r19, Y+2	; 0x02
    4642:	41 e0       	ldi	r20, 0x01	; 1
    4644:	50 e0       	ldi	r21, 0x00	; 0
    4646:	b2 01       	movw	r22, r4
    4648:	89 85       	ldd	r24, Y+9	; 0x09
    464a:	9a 85       	ldd	r25, Y+10	; 0x0a
    464c:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4650:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x0C: /*CME (compare)*/
			flags.compare(fetch_register(op1),fetch_register(op2));
    4654:	69 81       	ldd	r22, Y+1	; 0x01
    4656:	7a 81       	ldd	r23, Y+2	; 0x02
    4658:	89 85       	ldd	r24, Y+9	; 0x09
    465a:	9a 85       	ldd	r25, Y+10	; 0x0a
    465c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    4660:	7c 01       	movw	r14, r24
    4662:	b2 01       	movw	r22, r4
    4664:	89 85       	ldd	r24, Y+9	; 0x09
    4666:	9a 85       	ldd	r25, Y+10	; 0x0a
    4668:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN4QEPU14fetch_registerEi>
    466c:	b7 01       	movw	r22, r14
    466e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN4QEPU4Flag7compareEii>
			break;
    4672:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x0D: /*SEF (SET FLAG)*/
			flags.flaglist[op1]=op2;
    4676:	f2 01       	movw	r30, r4
    4678:	e8 5d       	subi	r30, 0xD8	; 216
    467a:	fe 4f       	sbci	r31, 0xFE	; 254
    467c:	99 81       	ldd	r25, Y+1	; 0x01
    467e:	90 83       	st	Z, r25
			break;
    4680:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x0E: /*GEF (GET FLAG)*/
			sram.write(op1,flags.flaglist[op2]);
    4684:	e9 81       	ldd	r30, Y+1	; 0x01
    4686:	fa 81       	ldd	r31, Y+2	; 0x02
    4688:	e8 5d       	subi	r30, 0xD8	; 216
    468a:	fe 4f       	sbci	r31, 0xFE	; 254
    468c:	40 81       	ld	r20, Z
    468e:	55 27       	eor	r21, r21
    4690:	47 fd       	sbrc	r20, 7
    4692:	50 95       	com	r21
    4694:	b2 01       	movw	r22, r4
    4696:	89 85       	ldd	r24, Y+9	; 0x09
    4698:	9a 85       	ldd	r25, Y+10	; 0x0a
    469a:	03 96       	adiw	r24, 0x03	; 3
    469c:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    46a0:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		/*IMPLEMENT CONDICIONAL/INCONDICIONAL BRANCHES HERE*/
		case 0x0F: /*BES (branch enable stack)*/
			flags.flaglist[ALLOW_BRANCH_STACK]=op1;
    46a4:	40 92 30 01 	sts	0x0130, r4
			break;
    46a8:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x10: /*BLW (branch if lower (with jumpstack))*/
			if(flags.flaglist[CND_LWER]){
    46ac:	80 91 28 01 	lds	r24, 0x0128
    46b0:	88 23       	and	r24, r24
    46b2:	11 f4       	brne	.+4      	; 0x46b8 <_ZN4QEPU7executeEilll+0x234>
    46b4:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
				jumpstack.push(program_counter+1);
    46b8:	e9 84       	ldd	r14, Y+9	; 0x09
    46ba:	fa 84       	ldd	r15, Y+10	; 0x0a
    46bc:	a6 ed       	ldi	r26, 0xD6	; 214
    46be:	ea 0e       	add	r14, r26
    46c0:	f1 1c       	adc	r15, r1
    46c2:	f7 01       	movw	r30, r14
    46c4:	60 81       	ld	r22, Z
    46c6:	71 81       	ldd	r23, Z+1	; 0x01
    46c8:	6f 5f       	subi	r22, 0xFF	; 255
    46ca:	7f 4f       	sbci	r23, 0xFF	; 255
    46cc:	89 85       	ldd	r24, Y+9	; 0x09
    46ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d0:	0b 96       	adiw	r24, 0x0b	; 11
    46d2:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    46d6:	f1 e0       	ldi	r31, 0x01	; 1
    46d8:	4f 1a       	sub	r4, r31
    46da:	51 08       	sbc	r5, r1
    46dc:	d7 01       	movw	r26, r14
    46de:	4d 92       	st	X+, r4
    46e0:	5c 92       	st	X, r5
    46e2:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
				jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x11: /*BLE (branch if lower or equal (with jumpstack))*/
			if(flags.flaglist[CND_LWER_EQUAL]){
    46e6:	80 91 29 01 	lds	r24, 0x0129
    46ea:	88 23       	and	r24, r24
    46ec:	11 f4       	brne	.+4      	; 0x46f2 <_ZN4QEPU7executeEilll+0x26e>
    46ee:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    46f2:	80 91 30 01 	lds	r24, 0x0130
    46f6:	88 23       	and	r24, r24
    46f8:	69 f0       	breq	.+26     	; 0x4714 <_ZN4QEPU7executeEilll+0x290>
					jumpstack.push(program_counter+1);
    46fa:	e9 85       	ldd	r30, Y+9	; 0x09
    46fc:	fa 85       	ldd	r31, Y+10	; 0x0a
    46fe:	ea 52       	subi	r30, 0x2A	; 42
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	60 81       	ld	r22, Z
    4704:	71 81       	ldd	r23, Z+1	; 0x01
    4706:	6f 5f       	subi	r22, 0xFF	; 255
    4708:	7f 4f       	sbci	r23, 0xFF	; 255
    470a:	89 85       	ldd	r24, Y+9	; 0x09
    470c:	9a 85       	ldd	r25, Y+10	; 0x0a
    470e:	0b 96       	adiw	r24, 0x0b	; 11
    4710:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4714:	e9 85       	ldd	r30, Y+9	; 0x09
    4716:	fa 85       	ldd	r31, Y+10	; 0x0a
    4718:	ea 52       	subi	r30, 0x2A	; 42
    471a:	ff 4f       	sbci	r31, 0xFF	; 255
    471c:	b1 e0       	ldi	r27, 0x01	; 1
    471e:	4b 1a       	sub	r4, r27
    4720:	51 08       	sbc	r5, r1
    4722:	51 82       	std	Z+1, r5	; 0x01
    4724:	40 82       	st	Z, r4
    4726:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x12: /*BEQ (branch if equal) (with jumpstack)*/
			if(flags.flaglist[CND_EQUAL]){
    472a:	80 91 2a 01 	lds	r24, 0x012A
    472e:	88 23       	and	r24, r24
    4730:	11 f4       	brne	.+4      	; 0x4736 <_ZN4QEPU7executeEilll+0x2b2>
    4732:	0c 94 a7 2b 	jmp	0x574e	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4736:	80 91 30 01 	lds	r24, 0x0130
    473a:	88 23       	and	r24, r24
    473c:	69 f0       	breq	.+26     	; 0x4758 <_ZN4QEPU7executeEilll+0x2d4>
					jumpstack.push(program_counter+1);
    473e:	e9 85       	ldd	r30, Y+9	; 0x09
    4740:	fa 85       	ldd	r31, Y+10	; 0x0a
    4742:	ea 52       	subi	r30, 0x2A	; 42
    4744:	ff 4f       	sbci	r31, 0xFF	; 255
    4746:	60 81       	ld	r22, Z
    4748:	71 81       	ldd	r23, Z+1	; 0x01
    474a:	6f 5f       	subi	r22, 0xFF	; 255
    474c:	7f 4f       	sbci	r23, 0xFF	; 255
    474e:	89 85       	ldd	r24, Y+9	; 0x09
    4750:	9a 85       	ldd	r25, Y+10	; 0x0a
    4752:	0b 96       	adiw	r24, 0x0b	; 11
    4754:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4758:	e9 85       	ldd	r30, Y+9	; 0x09
    475a:	fa 85       	ldd	r31, Y+10	; 0x0a
    475c:	ea 52       	subi	r30, 0x2A	; 42
    475e:	ff 4f       	sbci	r31, 0xFF	; 255
    4760:	81 e0       	ldi	r24, 0x01	; 1
    4762:	48 1a       	sub	r4, r24
    4764:	51 08       	sbc	r5, r1
    4766:	51 82       	std	Z+1, r5	; 0x01
    4768:	40 82       	st	Z, r4
    476a:	f1 c7       	rjmp	.+4066   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x13: /*BGE (branch if greater or equal (with jumpstack))*/
			if(flags.flaglist[CND_GRTER_EQUAL]){
    476c:	80 91 2b 01 	lds	r24, 0x012B
    4770:	88 23       	and	r24, r24
    4772:	09 f4       	brne	.+2      	; 0x4776 <_ZN4QEPU7executeEilll+0x2f2>
    4774:	ec c7       	rjmp	.+4056   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4776:	80 91 30 01 	lds	r24, 0x0130
    477a:	88 23       	and	r24, r24
    477c:	69 f0       	breq	.+26     	; 0x4798 <_ZN4QEPU7executeEilll+0x314>
					jumpstack.push(program_counter+1);
    477e:	e9 85       	ldd	r30, Y+9	; 0x09
    4780:	fa 85       	ldd	r31, Y+10	; 0x0a
    4782:	ea 52       	subi	r30, 0x2A	; 42
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	60 81       	ld	r22, Z
    4788:	71 81       	ldd	r23, Z+1	; 0x01
    478a:	6f 5f       	subi	r22, 0xFF	; 255
    478c:	7f 4f       	sbci	r23, 0xFF	; 255
    478e:	89 85       	ldd	r24, Y+9	; 0x09
    4790:	9a 85       	ldd	r25, Y+10	; 0x0a
    4792:	0b 96       	adiw	r24, 0x0b	; 11
    4794:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4798:	e9 85       	ldd	r30, Y+9	; 0x09
    479a:	fa 85       	ldd	r31, Y+10	; 0x0a
    479c:	ea 52       	subi	r30, 0x2A	; 42
    479e:	ff 4f       	sbci	r31, 0xFF	; 255
    47a0:	91 e0       	ldi	r25, 0x01	; 1
    47a2:	49 1a       	sub	r4, r25
    47a4:	51 08       	sbc	r5, r1
    47a6:	51 82       	std	Z+1, r5	; 0x01
    47a8:	40 82       	st	Z, r4
    47aa:	d1 c7       	rjmp	.+4002   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x14: /*BGR (branch if greater (with jumpstack))*/
			if(flags.flaglist[CND_GRTER]){
    47ac:	80 91 2c 01 	lds	r24, 0x012C
    47b0:	88 23       	and	r24, r24
    47b2:	09 f4       	brne	.+2      	; 0x47b6 <_ZN4QEPU7executeEilll+0x332>
    47b4:	cc c7       	rjmp	.+3992   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    47b6:	80 91 30 01 	lds	r24, 0x0130
    47ba:	88 23       	and	r24, r24
    47bc:	69 f0       	breq	.+26     	; 0x47d8 <_ZN4QEPU7executeEilll+0x354>
					jumpstack.push(program_counter+1);
    47be:	e9 85       	ldd	r30, Y+9	; 0x09
    47c0:	fa 85       	ldd	r31, Y+10	; 0x0a
    47c2:	ea 52       	subi	r30, 0x2A	; 42
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	60 81       	ld	r22, Z
    47c8:	71 81       	ldd	r23, Z+1	; 0x01
    47ca:	6f 5f       	subi	r22, 0xFF	; 255
    47cc:	7f 4f       	sbci	r23, 0xFF	; 255
    47ce:	89 85       	ldd	r24, Y+9	; 0x09
    47d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d2:	0b 96       	adiw	r24, 0x0b	; 11
    47d4:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    47d8:	e9 85       	ldd	r30, Y+9	; 0x09
    47da:	fa 85       	ldd	r31, Y+10	; 0x0a
    47dc:	ea 52       	subi	r30, 0x2A	; 42
    47de:	ff 4f       	sbci	r31, 0xFF	; 255
    47e0:	a1 e0       	ldi	r26, 0x01	; 1
    47e2:	4a 1a       	sub	r4, r26
    47e4:	51 08       	sbc	r5, r1
    47e6:	51 82       	std	Z+1, r5	; 0x01
    47e8:	40 82       	st	Z, r4
    47ea:	b1 c7       	rjmp	.+3938   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x15: /*BDI (branch if different (with jumpstack))*/
			if(flags.flaglist[CND_DIFF]){
    47ec:	80 91 2d 01 	lds	r24, 0x012D
    47f0:	88 23       	and	r24, r24
    47f2:	09 f4       	brne	.+2      	; 0x47f6 <_ZN4QEPU7executeEilll+0x372>
    47f4:	ac c7       	rjmp	.+3928   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    47f6:	80 91 30 01 	lds	r24, 0x0130
    47fa:	88 23       	and	r24, r24
    47fc:	69 f0       	breq	.+26     	; 0x4818 <_ZN4QEPU7executeEilll+0x394>
					jumpstack.push(program_counter+1);
    47fe:	e9 85       	ldd	r30, Y+9	; 0x09
    4800:	fa 85       	ldd	r31, Y+10	; 0x0a
    4802:	ea 52       	subi	r30, 0x2A	; 42
    4804:	ff 4f       	sbci	r31, 0xFF	; 255
    4806:	60 81       	ld	r22, Z
    4808:	71 81       	ldd	r23, Z+1	; 0x01
    480a:	6f 5f       	subi	r22, 0xFF	; 255
    480c:	7f 4f       	sbci	r23, 0xFF	; 255
    480e:	89 85       	ldd	r24, Y+9	; 0x09
    4810:	9a 85       	ldd	r25, Y+10	; 0x0a
    4812:	0b 96       	adiw	r24, 0x0b	; 11
    4814:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4818:	e9 85       	ldd	r30, Y+9	; 0x09
    481a:	fa 85       	ldd	r31, Y+10	; 0x0a
    481c:	ea 52       	subi	r30, 0x2A	; 42
    481e:	ff 4f       	sbci	r31, 0xFF	; 255
    4820:	b1 e0       	ldi	r27, 0x01	; 1
    4822:	4b 1a       	sub	r4, r27
    4824:	51 08       	sbc	r5, r1
    4826:	51 82       	std	Z+1, r5	; 0x01
    4828:	40 82       	st	Z, r4
    482a:	91 c7       	rjmp	.+3874   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x16: /*BZE (branch if register(op1)=0 (zero) (with jumpstack))*/
			if(flags.flaglist[CND_ZERO]){
    482c:	80 91 2e 01 	lds	r24, 0x012E
    4830:	88 23       	and	r24, r24
    4832:	09 f4       	brne	.+2      	; 0x4836 <_ZN4QEPU7executeEilll+0x3b2>
    4834:	8c c7       	rjmp	.+3864   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4836:	80 91 30 01 	lds	r24, 0x0130
    483a:	88 23       	and	r24, r24
    483c:	69 f0       	breq	.+26     	; 0x4858 <_ZN4QEPU7executeEilll+0x3d4>
					jumpstack.push(program_counter+1);
    483e:	e9 85       	ldd	r30, Y+9	; 0x09
    4840:	fa 85       	ldd	r31, Y+10	; 0x0a
    4842:	ea 52       	subi	r30, 0x2A	; 42
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	60 81       	ld	r22, Z
    4848:	71 81       	ldd	r23, Z+1	; 0x01
    484a:	6f 5f       	subi	r22, 0xFF	; 255
    484c:	7f 4f       	sbci	r23, 0xFF	; 255
    484e:	89 85       	ldd	r24, Y+9	; 0x09
    4850:	9a 85       	ldd	r25, Y+10	; 0x0a
    4852:	0b 96       	adiw	r24, 0x0b	; 11
    4854:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4858:	e9 85       	ldd	r30, Y+9	; 0x09
    485a:	fa 85       	ldd	r31, Y+10	; 0x0a
    485c:	ea 52       	subi	r30, 0x2A	; 42
    485e:	ff 4f       	sbci	r31, 0xFF	; 255
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	48 1a       	sub	r4, r24
    4864:	51 08       	sbc	r5, r1
    4866:	51 82       	std	Z+1, r5	; 0x01
    4868:	40 82       	st	Z, r4
    486a:	71 c7       	rjmp	.+3810   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x17: /*BNZ (branch if register(op1)!=0 (not zero) (with jumpstack))*/
			if(flags.flaglist[CND_NOT_ZERO]){
    486c:	80 91 2f 01 	lds	r24, 0x012F
    4870:	88 23       	and	r24, r24
    4872:	09 f4       	brne	.+2      	; 0x4876 <_ZN4QEPU7executeEilll+0x3f2>
    4874:	6c c7       	rjmp	.+3800   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
				if(flags.flaglist[ALLOW_BRANCH_STACK])
    4876:	80 91 30 01 	lds	r24, 0x0130
    487a:	88 23       	and	r24, r24
    487c:	69 f0       	breq	.+26     	; 0x4898 <_ZN4QEPU7executeEilll+0x414>
					jumpstack.push(program_counter+1);
    487e:	e9 85       	ldd	r30, Y+9	; 0x09
    4880:	fa 85       	ldd	r31, Y+10	; 0x0a
    4882:	ea 52       	subi	r30, 0x2A	; 42
    4884:	ff 4f       	sbci	r31, 0xFF	; 255
    4886:	60 81       	ld	r22, Z
    4888:	71 81       	ldd	r23, Z+1	; 0x01
    488a:	6f 5f       	subi	r22, 0xFF	; 255
    488c:	7f 4f       	sbci	r23, 0xFF	; 255
    488e:	89 85       	ldd	r24, Y+9	; 0x09
    4890:	9a 85       	ldd	r25, Y+10	; 0x0a
    4892:	0b 96       	adiw	r24, 0x0b	; 11
    4894:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    4898:	e9 85       	ldd	r30, Y+9	; 0x09
    489a:	fa 85       	ldd	r31, Y+10	; 0x0a
    489c:	ea 52       	subi	r30, 0x2A	; 42
    489e:	ff 4f       	sbci	r31, 0xFF	; 255
    48a0:	91 e0       	ldi	r25, 0x01	; 1
    48a2:	49 1a       	sub	r4, r25
    48a4:	51 08       	sbc	r5, r1
    48a6:	51 82       	std	Z+1, r5	; 0x01
    48a8:	40 82       	st	Z, r4
    48aa:	51 c7       	rjmp	.+3746   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
					jumpstack.push(program_counter+1);
				set_programcounter(op1);
			}
			break;
		case 0x18: /*CALL (incondicional branch WITH jumpstack)*/
			jumpstack.push(program_counter+1);
    48ac:	e9 84       	ldd	r14, Y+9	; 0x09
    48ae:	fa 84       	ldd	r15, Y+10	; 0x0a
    48b0:	a6 ed       	ldi	r26, 0xD6	; 214
    48b2:	ea 0e       	add	r14, r26
    48b4:	f1 1c       	adc	r15, r1
    48b6:	f7 01       	movw	r30, r14
    48b8:	60 81       	ld	r22, Z
    48ba:	71 81       	ldd	r23, Z+1	; 0x01
    48bc:	6f 5f       	subi	r22, 0xFF	; 255
    48be:	7f 4f       	sbci	r23, 0xFF	; 255
    48c0:	89 85       	ldd	r24, Y+9	; 0x09
    48c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48c4:	0b 96       	adiw	r24, 0x0b	; 11
    48c6:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN4QEPU9Jumpstack4pushEi>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    48ca:	f1 e0       	ldi	r31, 0x01	; 1
    48cc:	4f 1a       	sub	r4, r31
    48ce:	51 08       	sbc	r5, r1
    48d0:	d7 01       	movw	r26, r14
    48d2:	4d 92       	st	X+, r4
    48d4:	5c 92       	st	X, r5
    48d6:	3b c7       	rjmp	.+3702   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x18: /*CALL (incondicional branch WITH jumpstack)*/
			jumpstack.push(program_counter+1);
			set_programcounter(op1);
			break;
		case 0x19: /*RET (return)*/
			set_programcounter(jumpstack.pop());
    48d8:	89 85       	ldd	r24, Y+9	; 0x09
    48da:	9a 85       	ldd	r25, Y+10	; 0x0a
    48dc:	0b 96       	adiw	r24, 0x0b	; 11
    48de:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <_ZN4QEPU9Jumpstack3popEv>
		serial.writestrln(phidim);
	}
}

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
    48e2:	e9 85       	ldd	r30, Y+9	; 0x09
    48e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    48e6:	ea 52       	subi	r30, 0x2A	; 42
    48e8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ea:	01 97       	sbiw	r24, 0x01	; 1
    48ec:	91 83       	std	Z+1, r25	; 0x01
    48ee:	80 83       	st	Z, r24
    48f0:	2e c7       	rjmp	.+3676   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
    48f2:	e9 85       	ldd	r30, Y+9	; 0x09
    48f4:	fa 85       	ldd	r31, Y+10	; 0x0a
    48f6:	ea 52       	subi	r30, 0x2A	; 42
    48f8:	ff 4f       	sbci	r31, 0xFF	; 255
    48fa:	b1 e0       	ldi	r27, 0x01	; 1
    48fc:	4b 1a       	sub	r4, r27
    48fe:	51 08       	sbc	r5, r1
    4900:	51 82       	std	Z+1, r5	; 0x01
    4902:	40 82       	st	Z, r4
    4904:	24 c7       	rjmp	.+3656   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x1A: /*JMP (jump (incondicional branch WITHOUT jumpstack))*/
			set_programcounter(op1);
			break;
		/*IMPLEMENT LOGIC AND ARITHMETIC (CLASSICAL) CALCULATIONS HERE*/
		case 0x1B: /*ADD*/
			sram.write(op1,sram.read(op2)+sram.read(op3));
    4906:	c9 84       	ldd	r12, Y+9	; 0x09
    4908:	da 84       	ldd	r13, Y+10	; 0x0a
    490a:	e3 e0       	ldi	r30, 0x03	; 3
    490c:	ce 0e       	add	r12, r30
    490e:	d1 1c       	adc	r13, r1
    4910:	69 81       	ldd	r22, Y+1	; 0x01
    4912:	7a 81       	ldd	r23, Y+2	; 0x02
    4914:	c6 01       	movw	r24, r12
    4916:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    491a:	f8 2e       	mov	r15, r24
    491c:	6a 2d       	mov	r22, r10
    491e:	7b 2d       	mov	r23, r11
    4920:	c6 01       	movw	r24, r12
    4922:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4926:	48 2f       	mov	r20, r24
    4928:	55 27       	eor	r21, r21
    492a:	47 fd       	sbrc	r20, 7
    492c:	50 95       	com	r21
    492e:	4f 0d       	add	r20, r15
    4930:	51 1d       	adc	r21, r1
    4932:	f7 fc       	sbrc	r15, 7
    4934:	5a 95       	dec	r21
    4936:	b2 01       	movw	r22, r4
    4938:	c6 01       	movw	r24, r12
    493a:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    493e:	07 c7       	rjmp	.+3598   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x1C: /*SUB*/
			sram.write(op1,sram.read(op2)-sram.read(op3));
    4940:	c9 84       	ldd	r12, Y+9	; 0x09
    4942:	da 84       	ldd	r13, Y+10	; 0x0a
    4944:	f3 e0       	ldi	r31, 0x03	; 3
    4946:	cf 0e       	add	r12, r31
    4948:	d1 1c       	adc	r13, r1
    494a:	69 81       	ldd	r22, Y+1	; 0x01
    494c:	7a 81       	ldd	r23, Y+2	; 0x02
    494e:	c6 01       	movw	r24, r12
    4950:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4954:	f8 2e       	mov	r15, r24
    4956:	6a 2d       	mov	r22, r10
    4958:	7b 2d       	mov	r23, r11
    495a:	c6 01       	movw	r24, r12
    495c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4960:	4f 2d       	mov	r20, r15
    4962:	55 27       	eor	r21, r21
    4964:	47 fd       	sbrc	r20, 7
    4966:	50 95       	com	r21
    4968:	48 1b       	sub	r20, r24
    496a:	51 09       	sbc	r21, r1
    496c:	87 fd       	sbrc	r24, 7
    496e:	53 95       	inc	r21
    4970:	b2 01       	movw	r22, r4
    4972:	c6 01       	movw	r24, r12
    4974:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    4978:	ea c6       	rjmp	.+3540   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x1D: /*MUL*/
			sram.write(op1,sram.read(op2)*sram.read(op3));
    497a:	c9 84       	ldd	r12, Y+9	; 0x09
    497c:	da 84       	ldd	r13, Y+10	; 0x0a
    497e:	83 e0       	ldi	r24, 0x03	; 3
    4980:	c8 0e       	add	r12, r24
    4982:	d1 1c       	adc	r13, r1
    4984:	69 81       	ldd	r22, Y+1	; 0x01
    4986:	7a 81       	ldd	r23, Y+2	; 0x02
    4988:	c6 01       	movw	r24, r12
    498a:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    498e:	f8 2e       	mov	r15, r24
    4990:	6a 2d       	mov	r22, r10
    4992:	7b 2d       	mov	r23, r11
    4994:	c6 01       	movw	r24, r12
    4996:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    499a:	9f 2d       	mov	r25, r15
    499c:	98 02       	muls	r25, r24
    499e:	a0 01       	movw	r20, r0
    49a0:	11 24       	eor	r1, r1
    49a2:	b2 01       	movw	r22, r4
    49a4:	c6 01       	movw	r24, r12
    49a6:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    49aa:	d1 c6       	rjmp	.+3490   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x1E: /*DIV*/
			sram.write(op1,sram.read(op2)/sram.read(op3));
    49ac:	c9 84       	ldd	r12, Y+9	; 0x09
    49ae:	da 84       	ldd	r13, Y+10	; 0x0a
    49b0:	a3 e0       	ldi	r26, 0x03	; 3
    49b2:	ca 0e       	add	r12, r26
    49b4:	d1 1c       	adc	r13, r1
    49b6:	69 81       	ldd	r22, Y+1	; 0x01
    49b8:	7a 81       	ldd	r23, Y+2	; 0x02
    49ba:	c6 01       	movw	r24, r12
    49bc:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    49c0:	f8 2e       	mov	r15, r24
    49c2:	6a 2d       	mov	r22, r10
    49c4:	7b 2d       	mov	r23, r11
    49c6:	c6 01       	movw	r24, r12
    49c8:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    49cc:	68 2f       	mov	r22, r24
    49ce:	8f 2d       	mov	r24, r15
    49d0:	99 27       	eor	r25, r25
    49d2:	87 fd       	sbrc	r24, 7
    49d4:	90 95       	com	r25
    49d6:	77 27       	eor	r23, r23
    49d8:	67 fd       	sbrc	r22, 7
    49da:	70 95       	com	r23
    49dc:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__divmodhi4>
    49e0:	ab 01       	movw	r20, r22
    49e2:	b2 01       	movw	r22, r4
    49e4:	c6 01       	movw	r24, r12
    49e6:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    49ea:	b1 c6       	rjmp	.+3426   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x1F: /*AND*/
			sram.write(op1,sram.read(op2)&sram.read(op3));
    49ec:	c9 84       	ldd	r12, Y+9	; 0x09
    49ee:	da 84       	ldd	r13, Y+10	; 0x0a
    49f0:	b3 e0       	ldi	r27, 0x03	; 3
    49f2:	cb 0e       	add	r12, r27
    49f4:	d1 1c       	adc	r13, r1
    49f6:	69 81       	ldd	r22, Y+1	; 0x01
    49f8:	7a 81       	ldd	r23, Y+2	; 0x02
    49fa:	c6 01       	movw	r24, r12
    49fc:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4a00:	f8 2e       	mov	r15, r24
    4a02:	6a 2d       	mov	r22, r10
    4a04:	7b 2d       	mov	r23, r11
    4a06:	c6 01       	movw	r24, r12
    4a08:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4a0c:	8f 21       	and	r24, r15
    4a0e:	48 2f       	mov	r20, r24
    4a10:	55 27       	eor	r21, r21
    4a12:	47 fd       	sbrc	r20, 7
    4a14:	50 95       	com	r21
    4a16:	b2 01       	movw	r22, r4
    4a18:	c6 01       	movw	r24, r12
    4a1a:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    4a1e:	97 c6       	rjmp	.+3374   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x20: /*OR*/
			sram.write(op1,sram.read(op2)|sram.read(op3));
    4a20:	c9 84       	ldd	r12, Y+9	; 0x09
    4a22:	da 84       	ldd	r13, Y+10	; 0x0a
    4a24:	e3 e0       	ldi	r30, 0x03	; 3
    4a26:	ce 0e       	add	r12, r30
    4a28:	d1 1c       	adc	r13, r1
    4a2a:	69 81       	ldd	r22, Y+1	; 0x01
    4a2c:	7a 81       	ldd	r23, Y+2	; 0x02
    4a2e:	c6 01       	movw	r24, r12
    4a30:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4a34:	f8 2e       	mov	r15, r24
    4a36:	6a 2d       	mov	r22, r10
    4a38:	7b 2d       	mov	r23, r11
    4a3a:	c6 01       	movw	r24, r12
    4a3c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4a40:	8f 29       	or	r24, r15
    4a42:	48 2f       	mov	r20, r24
    4a44:	55 27       	eor	r21, r21
    4a46:	47 fd       	sbrc	r20, 7
    4a48:	50 95       	com	r21
    4a4a:	b2 01       	movw	r22, r4
    4a4c:	c6 01       	movw	r24, r12
    4a4e:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    4a52:	7d c6       	rjmp	.+3322   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x21: /*NOR*/
			sram.write(op1,~(sram.read(op2)|sram.read(op3)));
    4a54:	c9 84       	ldd	r12, Y+9	; 0x09
    4a56:	da 84       	ldd	r13, Y+10	; 0x0a
    4a58:	f3 e0       	ldi	r31, 0x03	; 3
    4a5a:	cf 0e       	add	r12, r31
    4a5c:	d1 1c       	adc	r13, r1
    4a5e:	69 81       	ldd	r22, Y+1	; 0x01
    4a60:	7a 81       	ldd	r23, Y+2	; 0x02
    4a62:	c6 01       	movw	r24, r12
    4a64:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4a68:	f8 2e       	mov	r15, r24
    4a6a:	6a 2d       	mov	r22, r10
    4a6c:	7b 2d       	mov	r23, r11
    4a6e:	c6 01       	movw	r24, r12
    4a70:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4a74:	8f 29       	or	r24, r15
    4a76:	48 2f       	mov	r20, r24
    4a78:	55 27       	eor	r21, r21
    4a7a:	47 fd       	sbrc	r20, 7
    4a7c:	50 95       	com	r21
    4a7e:	40 95       	com	r20
    4a80:	50 95       	com	r21
    4a82:	b2 01       	movw	r22, r4
    4a84:	c6 01       	movw	r24, r12
    4a86:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    4a8a:	61 c6       	rjmp	.+3266   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x22: /*XOR*/
			sram.write(op1,sram.read(op2)^sram.read(op3));
    4a8c:	c9 84       	ldd	r12, Y+9	; 0x09
    4a8e:	da 84       	ldd	r13, Y+10	; 0x0a
    4a90:	83 e0       	ldi	r24, 0x03	; 3
    4a92:	c8 0e       	add	r12, r24
    4a94:	d1 1c       	adc	r13, r1
    4a96:	69 81       	ldd	r22, Y+1	; 0x01
    4a98:	7a 81       	ldd	r23, Y+2	; 0x02
    4a9a:	c6 01       	movw	r24, r12
    4a9c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4aa0:	f8 2e       	mov	r15, r24
    4aa2:	6a 2d       	mov	r22, r10
    4aa4:	7b 2d       	mov	r23, r11
    4aa6:	c6 01       	movw	r24, r12
    4aa8:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4aac:	8f 25       	eor	r24, r15
    4aae:	48 2f       	mov	r20, r24
    4ab0:	55 27       	eor	r21, r21
    4ab2:	47 fd       	sbrc	r20, 7
    4ab4:	50 95       	com	r21
    4ab6:	b2 01       	movw	r22, r4
    4ab8:	c6 01       	movw	r24, r12
    4aba:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    4abe:	47 c6       	rjmp	.+3214   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x23: /*NAN*/
			sram.write(op1,~(sram.read(op2)&sram.read(op3)));
    4ac0:	c9 84       	ldd	r12, Y+9	; 0x09
    4ac2:	da 84       	ldd	r13, Y+10	; 0x0a
    4ac4:	93 e0       	ldi	r25, 0x03	; 3
    4ac6:	c9 0e       	add	r12, r25
    4ac8:	d1 1c       	adc	r13, r1
    4aca:	69 81       	ldd	r22, Y+1	; 0x01
    4acc:	7a 81       	ldd	r23, Y+2	; 0x02
    4ace:	c6 01       	movw	r24, r12
    4ad0:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4ad4:	f8 2e       	mov	r15, r24
    4ad6:	6a 2d       	mov	r22, r10
    4ad8:	7b 2d       	mov	r23, r11
    4ada:	c6 01       	movw	r24, r12
    4adc:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4ae0:	8f 21       	and	r24, r15
    4ae2:	48 2f       	mov	r20, r24
    4ae4:	55 27       	eor	r21, r21
    4ae6:	47 fd       	sbrc	r20, 7
    4ae8:	50 95       	com	r21
    4aea:	40 95       	com	r20
    4aec:	50 95       	com	r21
    4aee:	b2 01       	movw	r22, r4
    4af0:	c6 01       	movw	r24, r12
    4af2:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    4af6:	2b c6       	rjmp	.+3158   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x24: /*NOT*/
			sram.write(op1,~sram.read(op2));
    4af8:	e9 84       	ldd	r14, Y+9	; 0x09
    4afa:	fa 84       	ldd	r15, Y+10	; 0x0a
    4afc:	a3 e0       	ldi	r26, 0x03	; 3
    4afe:	ea 0e       	add	r14, r26
    4b00:	f1 1c       	adc	r15, r1
    4b02:	69 81       	ldd	r22, Y+1	; 0x01
    4b04:	7a 81       	ldd	r23, Y+2	; 0x02
    4b06:	c7 01       	movw	r24, r14
    4b08:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4b0c:	48 2f       	mov	r20, r24
    4b0e:	55 27       	eor	r21, r21
    4b10:	47 fd       	sbrc	r20, 7
    4b12:	50 95       	com	r21
    4b14:	40 95       	com	r20
    4b16:	50 95       	com	r21
    4b18:	b2 01       	movw	r22, r4
    4b1a:	c7 01       	movw	r24, r14
    4b1c:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    4b20:	16 c6       	rjmp	.+3116   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x25: /*SHL*/
			sram.write(op1,sram.read(op2)<<op3);
    4b22:	e9 84       	ldd	r14, Y+9	; 0x09
    4b24:	fa 84       	ldd	r15, Y+10	; 0x0a
    4b26:	b3 e0       	ldi	r27, 0x03	; 3
    4b28:	eb 0e       	add	r14, r27
    4b2a:	f1 1c       	adc	r15, r1
    4b2c:	69 81       	ldd	r22, Y+1	; 0x01
    4b2e:	7a 81       	ldd	r23, Y+2	; 0x02
    4b30:	c7 01       	movw	r24, r14
    4b32:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4b36:	48 2f       	mov	r20, r24
    4b38:	55 27       	eor	r21, r21
    4b3a:	47 fd       	sbrc	r20, 7
    4b3c:	50 95       	com	r21
    4b3e:	02 c0       	rjmp	.+4      	; 0x4b44 <_ZN4QEPU7executeEilll+0x6c0>
    4b40:	44 0f       	add	r20, r20
    4b42:	55 1f       	adc	r21, r21
    4b44:	aa 94       	dec	r10
    4b46:	e2 f7       	brpl	.-8      	; 0x4b40 <_ZN4QEPU7executeEilll+0x6bc>
    4b48:	b2 01       	movw	r22, r4
    4b4a:	c7 01       	movw	r24, r14
    4b4c:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    4b50:	fe c5       	rjmp	.+3068   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x26: /*SHR*/
			sram.write(op1,sram.read(op2)>>op3);
    4b52:	e9 84       	ldd	r14, Y+9	; 0x09
    4b54:	fa 84       	ldd	r15, Y+10	; 0x0a
    4b56:	e3 e0       	ldi	r30, 0x03	; 3
    4b58:	ee 0e       	add	r14, r30
    4b5a:	f1 1c       	adc	r15, r1
    4b5c:	69 81       	ldd	r22, Y+1	; 0x01
    4b5e:	7a 81       	ldd	r23, Y+2	; 0x02
    4b60:	c7 01       	movw	r24, r14
    4b62:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    4b66:	48 2f       	mov	r20, r24
    4b68:	55 27       	eor	r21, r21
    4b6a:	47 fd       	sbrc	r20, 7
    4b6c:	50 95       	com	r21
    4b6e:	02 c0       	rjmp	.+4      	; 0x4b74 <_ZN4QEPU7executeEilll+0x6f0>
    4b70:	55 95       	asr	r21
    4b72:	47 95       	ror	r20
    4b74:	aa 94       	dec	r10
    4b76:	e2 f7       	brpl	.-8      	; 0x4b70 <_ZN4QEPU7executeEilll+0x6ec>
    4b78:	b2 01       	movw	r22, r4
    4b7a:	c7 01       	movw	r24, r14
    4b7c:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
			break;
    4b80:	e6 c5       	rjmp	.+3020   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x27: /*INT (interrupt)*/ //NEEDS TABLE SYSTEM
			interrupt_cpu(op1);
    4b82:	b2 01       	movw	r22, r4
    4b84:	89 85       	ldd	r24, Y+9	; 0x09
    4b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b88:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <_ZN4QEPU13interrupt_cpuEi>
			break;
    4b8c:	e0 c5       	rjmp	.+3008   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x28: /*DLY (delay)*/
			utils.delay(op1);
    4b8e:	b2 01       	movw	r22, r4
    4b90:	89 85       	ldd	r24, Y+9	; 0x09
    4b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b94:	8b 52       	subi	r24, 0x2B	; 43
    4b96:	9f 4f       	sbci	r25, 0xFF	; 255
    4b98:	0e 94 57 2f 	call	0x5eae	; 0x5eae <_ZN5Utils5delayEi>
			break;
    4b9c:	d8 c5       	rjmp	.+2992   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x29: /*NOP (nop) - DOES NOTHING*/ 
			break;
		case 0x2A: /*HLT (halt)*/ 
			program_counter=program_counter_maximum;
    4b9e:	e9 85       	ldd	r30, Y+9	; 0x09
    4ba0:	fa 85       	ldd	r31, Y+10	; 0x0a
    4ba2:	ea 52       	subi	r30, 0x2A	; 42
    4ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba6:	a9 85       	ldd	r26, Y+9	; 0x09
    4ba8:	ba 85       	ldd	r27, Y+10	; 0x0a
    4baa:	a8 52       	subi	r26, 0x28	; 40
    4bac:	bf 4f       	sbci	r27, 0xFF	; 255
    4bae:	8d 91       	ld	r24, X+
    4bb0:	9c 91       	ld	r25, X
    4bb2:	91 83       	std	Z+1, r25	; 0x01
    4bb4:	80 83       	st	Z, r24
			break;
    4bb6:	cb c5       	rjmp	.+2966   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x2B: // X GATE
			newthephi=gates.X(read(op1,THE,false),read(op1,PHI,false));
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	41 e0       	ldi	r20, 0x01	; 1
    4bbc:	50 e0       	ldi	r21, 0x00	; 0
    4bbe:	b2 01       	movw	r22, r4
    4bc0:	89 85       	ldd	r24, Y+9	; 0x09
    4bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bc4:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4bc8:	8c 01       	movw	r16, r24
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	40 e0       	ldi	r20, 0x00	; 0
    4bce:	50 e0       	ldi	r21, 0x00	; 0
    4bd0:	b2 01       	movw	r22, r4
    4bd2:	89 85       	ldd	r24, Y+9	; 0x09
    4bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd6:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4bda:	a8 01       	movw	r20, r16
    4bdc:	bc 01       	movw	r22, r24
    4bde:	89 85       	ldd	r24, Y+9	; 0x09
    4be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4be2:	0a 96       	adiw	r24, 0x0a	; 10
    4be4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN5Gates1XEii>
    4be8:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4bea:	dc 01       	movw	r26, r24
    4bec:	2d 91       	ld	r18, X+
    4bee:	3c 91       	ld	r19, X
    4bf0:	40 e0       	ldi	r20, 0x00	; 0
    4bf2:	50 e0       	ldi	r21, 0x00	; 0
    4bf4:	b2 01       	movw	r22, r4
    4bf6:	89 85       	ldd	r24, Y+9	; 0x09
    4bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bfa:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4bfe:	f8 01       	movw	r30, r16
    4c00:	22 81       	ldd	r18, Z+2	; 0x02
    4c02:	33 81       	ldd	r19, Z+3	; 0x03
    4c04:	41 e0       	ldi	r20, 0x01	; 1
    4c06:	50 e0       	ldi	r21, 0x00	; 0
    4c08:	b2 01       	movw	r22, r4
    4c0a:	89 85       	ldd	r24, Y+9	; 0x09
    4c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c0e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4c12:	9d c5       	rjmp	.+2874   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x2C: // Y GATE
			newthephi=gates.Y(read(op1,THE,false),read(op1,PHI,false));
    4c14:	20 e0       	ldi	r18, 0x00	; 0
    4c16:	41 e0       	ldi	r20, 0x01	; 1
    4c18:	50 e0       	ldi	r21, 0x00	; 0
    4c1a:	b2 01       	movw	r22, r4
    4c1c:	89 85       	ldd	r24, Y+9	; 0x09
    4c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c20:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4c24:	8c 01       	movw	r16, r24
    4c26:	20 e0       	ldi	r18, 0x00	; 0
    4c28:	40 e0       	ldi	r20, 0x00	; 0
    4c2a:	50 e0       	ldi	r21, 0x00	; 0
    4c2c:	b2 01       	movw	r22, r4
    4c2e:	89 85       	ldd	r24, Y+9	; 0x09
    4c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c32:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4c36:	a8 01       	movw	r20, r16
    4c38:	bc 01       	movw	r22, r24
    4c3a:	89 85       	ldd	r24, Y+9	; 0x09
    4c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c3e:	0a 96       	adiw	r24, 0x0a	; 10
    4c40:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Gates1YEii>
    4c44:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4c46:	dc 01       	movw	r26, r24
    4c48:	2d 91       	ld	r18, X+
    4c4a:	3c 91       	ld	r19, X
    4c4c:	40 e0       	ldi	r20, 0x00	; 0
    4c4e:	50 e0       	ldi	r21, 0x00	; 0
    4c50:	b2 01       	movw	r22, r4
    4c52:	89 85       	ldd	r24, Y+9	; 0x09
    4c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c56:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4c5a:	f8 01       	movw	r30, r16
    4c5c:	22 81       	ldd	r18, Z+2	; 0x02
    4c5e:	33 81       	ldd	r19, Z+3	; 0x03
    4c60:	41 e0       	ldi	r20, 0x01	; 1
    4c62:	50 e0       	ldi	r21, 0x00	; 0
    4c64:	b2 01       	movw	r22, r4
    4c66:	89 85       	ldd	r24, Y+9	; 0x09
    4c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c6a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4c6e:	6f c5       	rjmp	.+2782   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x2D: // Z GATE
			newthephi=gates.Z(read(op1,THE,false),read(op1,PHI,false));
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	41 e0       	ldi	r20, 0x01	; 1
    4c74:	50 e0       	ldi	r21, 0x00	; 0
    4c76:	b2 01       	movw	r22, r4
    4c78:	89 85       	ldd	r24, Y+9	; 0x09
    4c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c7c:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4c80:	8c 01       	movw	r16, r24
    4c82:	20 e0       	ldi	r18, 0x00	; 0
    4c84:	40 e0       	ldi	r20, 0x00	; 0
    4c86:	50 e0       	ldi	r21, 0x00	; 0
    4c88:	b2 01       	movw	r22, r4
    4c8a:	89 85       	ldd	r24, Y+9	; 0x09
    4c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c8e:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4c92:	a8 01       	movw	r20, r16
    4c94:	bc 01       	movw	r22, r24
    4c96:	89 85       	ldd	r24, Y+9	; 0x09
    4c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c9a:	0a 96       	adiw	r24, 0x0a	; 10
    4c9c:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN5Gates1ZEii>
    4ca0:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4ca2:	dc 01       	movw	r26, r24
    4ca4:	2d 91       	ld	r18, X+
    4ca6:	3c 91       	ld	r19, X
    4ca8:	40 e0       	ldi	r20, 0x00	; 0
    4caa:	50 e0       	ldi	r21, 0x00	; 0
    4cac:	b2 01       	movw	r22, r4
    4cae:	89 85       	ldd	r24, Y+9	; 0x09
    4cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cb2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4cb6:	f8 01       	movw	r30, r16
    4cb8:	22 81       	ldd	r18, Z+2	; 0x02
    4cba:	33 81       	ldd	r19, Z+3	; 0x03
    4cbc:	41 e0       	ldi	r20, 0x01	; 1
    4cbe:	50 e0       	ldi	r21, 0x00	; 0
    4cc0:	b2 01       	movw	r22, r4
    4cc2:	89 85       	ldd	r24, Y+9	; 0x09
    4cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4cca:	41 c5       	rjmp	.+2690   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x2E: // H GATE
			newthephi=gates.H(read(op1,THE,false),read(op1,PHI,false));
    4ccc:	20 e0       	ldi	r18, 0x00	; 0
    4cce:	41 e0       	ldi	r20, 0x01	; 1
    4cd0:	50 e0       	ldi	r21, 0x00	; 0
    4cd2:	b2 01       	movw	r22, r4
    4cd4:	89 85       	ldd	r24, Y+9	; 0x09
    4cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cd8:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4cdc:	8c 01       	movw	r16, r24
    4cde:	20 e0       	ldi	r18, 0x00	; 0
    4ce0:	40 e0       	ldi	r20, 0x00	; 0
    4ce2:	50 e0       	ldi	r21, 0x00	; 0
    4ce4:	b2 01       	movw	r22, r4
    4ce6:	89 85       	ldd	r24, Y+9	; 0x09
    4ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cea:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4cee:	a8 01       	movw	r20, r16
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	89 85       	ldd	r24, Y+9	; 0x09
    4cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf6:	0a 96       	adiw	r24, 0x0a	; 10
    4cf8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_ZN5Gates1HEii>
    4cfc:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4cfe:	dc 01       	movw	r26, r24
    4d00:	2d 91       	ld	r18, X+
    4d02:	3c 91       	ld	r19, X
    4d04:	40 e0       	ldi	r20, 0x00	; 0
    4d06:	50 e0       	ldi	r21, 0x00	; 0
    4d08:	b2 01       	movw	r22, r4
    4d0a:	89 85       	ldd	r24, Y+9	; 0x09
    4d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d0e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4d12:	f8 01       	movw	r30, r16
    4d14:	22 81       	ldd	r18, Z+2	; 0x02
    4d16:	33 81       	ldd	r19, Z+3	; 0x03
    4d18:	41 e0       	ldi	r20, 0x01	; 1
    4d1a:	50 e0       	ldi	r21, 0x00	; 0
    4d1c:	b2 01       	movw	r22, r4
    4d1e:	89 85       	ldd	r24, Y+9	; 0x09
    4d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d22:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4d26:	13 c5       	rjmp	.+2598   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x2F: // S GATE
			newthephi=gates.S(read(op1,THE,false),read(op1,PHI,false));
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	41 e0       	ldi	r20, 0x01	; 1
    4d2c:	50 e0       	ldi	r21, 0x00	; 0
    4d2e:	b2 01       	movw	r22, r4
    4d30:	89 85       	ldd	r24, Y+9	; 0x09
    4d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d34:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4d38:	8c 01       	movw	r16, r24
    4d3a:	20 e0       	ldi	r18, 0x00	; 0
    4d3c:	40 e0       	ldi	r20, 0x00	; 0
    4d3e:	50 e0       	ldi	r21, 0x00	; 0
    4d40:	b2 01       	movw	r22, r4
    4d42:	89 85       	ldd	r24, Y+9	; 0x09
    4d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d46:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4d4a:	a8 01       	movw	r20, r16
    4d4c:	bc 01       	movw	r22, r24
    4d4e:	89 85       	ldd	r24, Y+9	; 0x09
    4d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d52:	0a 96       	adiw	r24, 0x0a	; 10
    4d54:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN5Gates1SEii>
    4d58:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4d5a:	dc 01       	movw	r26, r24
    4d5c:	2d 91       	ld	r18, X+
    4d5e:	3c 91       	ld	r19, X
    4d60:	40 e0       	ldi	r20, 0x00	; 0
    4d62:	50 e0       	ldi	r21, 0x00	; 0
    4d64:	b2 01       	movw	r22, r4
    4d66:	89 85       	ldd	r24, Y+9	; 0x09
    4d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d6a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4d6e:	f8 01       	movw	r30, r16
    4d70:	22 81       	ldd	r18, Z+2	; 0x02
    4d72:	33 81       	ldd	r19, Z+3	; 0x03
    4d74:	41 e0       	ldi	r20, 0x01	; 1
    4d76:	50 e0       	ldi	r21, 0x00	; 0
    4d78:	b2 01       	movw	r22, r4
    4d7a:	89 85       	ldd	r24, Y+9	; 0x09
    4d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d7e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4d82:	e5 c4       	rjmp	.+2506   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x30: // T GATE
			newthephi=gates.T(read(op1,THE,false),read(op1,PHI,false));
    4d84:	20 e0       	ldi	r18, 0x00	; 0
    4d86:	41 e0       	ldi	r20, 0x01	; 1
    4d88:	50 e0       	ldi	r21, 0x00	; 0
    4d8a:	b2 01       	movw	r22, r4
    4d8c:	89 85       	ldd	r24, Y+9	; 0x09
    4d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d90:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4d94:	8c 01       	movw	r16, r24
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	40 e0       	ldi	r20, 0x00	; 0
    4d9a:	50 e0       	ldi	r21, 0x00	; 0
    4d9c:	b2 01       	movw	r22, r4
    4d9e:	89 85       	ldd	r24, Y+9	; 0x09
    4da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4da2:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4da6:	a8 01       	movw	r20, r16
    4da8:	bc 01       	movw	r22, r24
    4daa:	89 85       	ldd	r24, Y+9	; 0x09
    4dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dae:	0a 96       	adiw	r24, 0x0a	; 10
    4db0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN5Gates1TEii>
    4db4:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    4db6:	dc 01       	movw	r26, r24
    4db8:	2d 91       	ld	r18, X+
    4dba:	3c 91       	ld	r19, X
    4dbc:	40 e0       	ldi	r20, 0x00	; 0
    4dbe:	50 e0       	ldi	r21, 0x00	; 0
    4dc0:	b2 01       	movw	r22, r4
    4dc2:	89 85       	ldd	r24, Y+9	; 0x09
    4dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dc6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4dca:	f8 01       	movw	r30, r16
    4dcc:	22 81       	ldd	r18, Z+2	; 0x02
    4dce:	33 81       	ldd	r19, Z+3	; 0x03
    4dd0:	41 e0       	ldi	r20, 0x01	; 1
    4dd2:	50 e0       	ldi	r21, 0x00	; 0
    4dd4:	b2 01       	movw	r22, r4
    4dd6:	89 85       	ldd	r24, Y+9	; 0x09
    4dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dda:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4dde:	b7 c4       	rjmp	.+2414   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x31: // ROTATE X GATE
			newthephi=gates.ROX(read(op1,THE,false),read(op1,PHI,false),op2);
    4de0:	20 e0       	ldi	r18, 0x00	; 0
    4de2:	41 e0       	ldi	r20, 0x01	; 1
    4de4:	50 e0       	ldi	r21, 0x00	; 0
    4de6:	b2 01       	movw	r22, r4
    4de8:	89 85       	ldd	r24, Y+9	; 0x09
    4dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dec:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4df0:	8c 01       	movw	r16, r24
    4df2:	20 e0       	ldi	r18, 0x00	; 0
    4df4:	40 e0       	ldi	r20, 0x00	; 0
    4df6:	50 e0       	ldi	r21, 0x00	; 0
    4df8:	b2 01       	movw	r22, r4
    4dfa:	89 85       	ldd	r24, Y+9	; 0x09
    4dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dfe:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4e02:	29 81       	ldd	r18, Y+1	; 0x01
    4e04:	3a 81       	ldd	r19, Y+2	; 0x02
    4e06:	a8 01       	movw	r20, r16
    4e08:	bc 01       	movw	r22, r24
    4e0a:	89 85       	ldd	r24, Y+9	; 0x09
    4e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e0e:	0a 96       	adiw	r24, 0x0a	; 10
    4e10:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_ZN5Gates3ROXEiii>
    4e14:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4e16:	dc 01       	movw	r26, r24
    4e18:	2d 91       	ld	r18, X+
    4e1a:	3c 91       	ld	r19, X
    4e1c:	40 e0       	ldi	r20, 0x00	; 0
    4e1e:	50 e0       	ldi	r21, 0x00	; 0
    4e20:	b2 01       	movw	r22, r4
    4e22:	89 85       	ldd	r24, Y+9	; 0x09
    4e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e26:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4e2a:	f8 01       	movw	r30, r16
    4e2c:	22 81       	ldd	r18, Z+2	; 0x02
    4e2e:	33 81       	ldd	r19, Z+3	; 0x03
    4e30:	41 e0       	ldi	r20, 0x01	; 1
    4e32:	50 e0       	ldi	r21, 0x00	; 0
    4e34:	b2 01       	movw	r22, r4
    4e36:	89 85       	ldd	r24, Y+9	; 0x09
    4e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e3a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4e3e:	87 c4       	rjmp	.+2318   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x32: // ROTATE Y GATE
			newthephi=gates.ROY(read(op1,THE,false),read(op1,PHI,false),op2);
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	41 e0       	ldi	r20, 0x01	; 1
    4e44:	50 e0       	ldi	r21, 0x00	; 0
    4e46:	b2 01       	movw	r22, r4
    4e48:	89 85       	ldd	r24, Y+9	; 0x09
    4e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e4c:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4e50:	8c 01       	movw	r16, r24
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	40 e0       	ldi	r20, 0x00	; 0
    4e56:	50 e0       	ldi	r21, 0x00	; 0
    4e58:	b2 01       	movw	r22, r4
    4e5a:	89 85       	ldd	r24, Y+9	; 0x09
    4e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e5e:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4e62:	29 81       	ldd	r18, Y+1	; 0x01
    4e64:	3a 81       	ldd	r19, Y+2	; 0x02
    4e66:	a8 01       	movw	r20, r16
    4e68:	bc 01       	movw	r22, r24
    4e6a:	89 85       	ldd	r24, Y+9	; 0x09
    4e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e6e:	0a 96       	adiw	r24, 0x0a	; 10
    4e70:	0e 94 92 13 	call	0x2724	; 0x2724 <_ZN5Gates3ROYEiii>
    4e74:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4e76:	dc 01       	movw	r26, r24
    4e78:	2d 91       	ld	r18, X+
    4e7a:	3c 91       	ld	r19, X
    4e7c:	40 e0       	ldi	r20, 0x00	; 0
    4e7e:	50 e0       	ldi	r21, 0x00	; 0
    4e80:	b2 01       	movw	r22, r4
    4e82:	89 85       	ldd	r24, Y+9	; 0x09
    4e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e86:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4e8a:	f8 01       	movw	r30, r16
    4e8c:	22 81       	ldd	r18, Z+2	; 0x02
    4e8e:	33 81       	ldd	r19, Z+3	; 0x03
    4e90:	41 e0       	ldi	r20, 0x01	; 1
    4e92:	50 e0       	ldi	r21, 0x00	; 0
    4e94:	b2 01       	movw	r22, r4
    4e96:	89 85       	ldd	r24, Y+9	; 0x09
    4e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e9a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4e9e:	57 c4       	rjmp	.+2222   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x33: // ROTATE Z GATE
			newthephi=gates.ROZ(read(op1,THE,false),read(op1,PHI,false),op2);
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	41 e0       	ldi	r20, 0x01	; 1
    4ea4:	50 e0       	ldi	r21, 0x00	; 0
    4ea6:	b2 01       	movw	r22, r4
    4ea8:	89 85       	ldd	r24, Y+9	; 0x09
    4eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eac:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4eb0:	8c 01       	movw	r16, r24
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	40 e0       	ldi	r20, 0x00	; 0
    4eb6:	50 e0       	ldi	r21, 0x00	; 0
    4eb8:	b2 01       	movw	r22, r4
    4eba:	89 85       	ldd	r24, Y+9	; 0x09
    4ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ebe:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4ec2:	29 81       	ldd	r18, Y+1	; 0x01
    4ec4:	3a 81       	ldd	r19, Y+2	; 0x02
    4ec6:	a8 01       	movw	r20, r16
    4ec8:	bc 01       	movw	r22, r24
    4eca:	89 85       	ldd	r24, Y+9	; 0x09
    4ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ece:	0a 96       	adiw	r24, 0x0a	; 10
    4ed0:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN5Gates3ROZEiii>
    4ed4:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4ed6:	dc 01       	movw	r26, r24
    4ed8:	2d 91       	ld	r18, X+
    4eda:	3c 91       	ld	r19, X
    4edc:	40 e0       	ldi	r20, 0x00	; 0
    4ede:	50 e0       	ldi	r21, 0x00	; 0
    4ee0:	b2 01       	movw	r22, r4
    4ee2:	89 85       	ldd	r24, Y+9	; 0x09
    4ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ee6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4eea:	f8 01       	movw	r30, r16
    4eec:	22 81       	ldd	r18, Z+2	; 0x02
    4eee:	33 81       	ldd	r19, Z+3	; 0x03
    4ef0:	41 e0       	ldi	r20, 0x01	; 1
    4ef2:	50 e0       	ldi	r21, 0x00	; 0
    4ef4:	b2 01       	movw	r22, r4
    4ef6:	89 85       	ldd	r24, Y+9	; 0x09
    4ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4efa:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4efe:	27 c4       	rjmp	.+2126   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		//2 QUBIT GATES -
		case 0x34: // CNOT GATE
			newthephi=gates.CNO(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4f00:	20 e0       	ldi	r18, 0x00	; 0
    4f02:	41 e0       	ldi	r20, 0x01	; 1
    4f04:	50 e0       	ldi	r21, 0x00	; 0
    4f06:	69 81       	ldd	r22, Y+1	; 0x01
    4f08:	7a 81       	ldd	r23, Y+2	; 0x02
    4f0a:	89 85       	ldd	r24, Y+9	; 0x09
    4f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f0e:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4f12:	8c 01       	movw	r16, r24
    4f14:	20 e0       	ldi	r18, 0x00	; 0
    4f16:	40 e0       	ldi	r20, 0x00	; 0
    4f18:	50 e0       	ldi	r21, 0x00	; 0
    4f1a:	69 81       	ldd	r22, Y+1	; 0x01
    4f1c:	7a 81       	ldd	r23, Y+2	; 0x02
    4f1e:	89 85       	ldd	r24, Y+9	; 0x09
    4f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f22:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4f26:	6c 01       	movw	r12, r24
    4f28:	20 e0       	ldi	r18, 0x00	; 0
    4f2a:	41 e0       	ldi	r20, 0x01	; 1
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	b2 01       	movw	r22, r4
    4f30:	89 85       	ldd	r24, Y+9	; 0x09
    4f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f34:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4f38:	7c 01       	movw	r14, r24
    4f3a:	20 e0       	ldi	r18, 0x00	; 0
    4f3c:	40 e0       	ldi	r20, 0x00	; 0
    4f3e:	50 e0       	ldi	r21, 0x00	; 0
    4f40:	b2 01       	movw	r22, r4
    4f42:	89 85       	ldd	r24, Y+9	; 0x09
    4f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f46:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4f4a:	96 01       	movw	r18, r12
    4f4c:	a7 01       	movw	r20, r14
    4f4e:	bc 01       	movw	r22, r24
    4f50:	89 85       	ldd	r24, Y+9	; 0x09
    4f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f54:	0a 96       	adiw	r24, 0x0a	; 10
    4f56:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Gates3CNOEiiii>
    4f5a:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    4f5c:	dc 01       	movw	r26, r24
    4f5e:	2d 91       	ld	r18, X+
    4f60:	3c 91       	ld	r19, X
    4f62:	40 e0       	ldi	r20, 0x00	; 0
    4f64:	50 e0       	ldi	r21, 0x00	; 0
    4f66:	b2 01       	movw	r22, r4
    4f68:	89 85       	ldd	r24, Y+9	; 0x09
    4f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f6c:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4f70:	f8 01       	movw	r30, r16
    4f72:	22 81       	ldd	r18, Z+2	; 0x02
    4f74:	33 81       	ldd	r19, Z+3	; 0x03
    4f76:	41 e0       	ldi	r20, 0x01	; 1
    4f78:	50 e0       	ldi	r21, 0x00	; 0
    4f7a:	b2 01       	movw	r22, r4
    4f7c:	89 85       	ldd	r24, Y+9	; 0x09
    4f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f80:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    4f84:	d8 01       	movw	r26, r16
    4f86:	14 96       	adiw	r26, 0x04	; 4
    4f88:	2d 91       	ld	r18, X+
    4f8a:	3c 91       	ld	r19, X
    4f8c:	15 97       	sbiw	r26, 0x05	; 5
    4f8e:	40 e0       	ldi	r20, 0x00	; 0
    4f90:	50 e0       	ldi	r21, 0x00	; 0
    4f92:	69 81       	ldd	r22, Y+1	; 0x01
    4f94:	7a 81       	ldd	r23, Y+2	; 0x02
    4f96:	89 85       	ldd	r24, Y+9	; 0x09
    4f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f9a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    4f9e:	f8 01       	movw	r30, r16
    4fa0:	26 81       	ldd	r18, Z+6	; 0x06
    4fa2:	37 81       	ldd	r19, Z+7	; 0x07
    4fa4:	41 e0       	ldi	r20, 0x01	; 1
    4fa6:	50 e0       	ldi	r21, 0x00	; 0
    4fa8:	69 81       	ldd	r22, Y+1	; 0x01
    4faa:	7a 81       	ldd	r23, Y+2	; 0x02
    4fac:	89 85       	ldd	r24, Y+9	; 0x09
    4fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fb0:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    4fb4:	cc c3       	rjmp	.+1944   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x35: // CSIGN GATE
			newthephi=gates.CSI(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    4fb6:	20 e0       	ldi	r18, 0x00	; 0
    4fb8:	41 e0       	ldi	r20, 0x01	; 1
    4fba:	50 e0       	ldi	r21, 0x00	; 0
    4fbc:	69 81       	ldd	r22, Y+1	; 0x01
    4fbe:	7a 81       	ldd	r23, Y+2	; 0x02
    4fc0:	89 85       	ldd	r24, Y+9	; 0x09
    4fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc4:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4fc8:	8c 01       	movw	r16, r24
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	40 e0       	ldi	r20, 0x00	; 0
    4fce:	50 e0       	ldi	r21, 0x00	; 0
    4fd0:	69 81       	ldd	r22, Y+1	; 0x01
    4fd2:	7a 81       	ldd	r23, Y+2	; 0x02
    4fd4:	89 85       	ldd	r24, Y+9	; 0x09
    4fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fd8:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4fdc:	6c 01       	movw	r12, r24
    4fde:	20 e0       	ldi	r18, 0x00	; 0
    4fe0:	41 e0       	ldi	r20, 0x01	; 1
    4fe2:	50 e0       	ldi	r21, 0x00	; 0
    4fe4:	b2 01       	movw	r22, r4
    4fe6:	89 85       	ldd	r24, Y+9	; 0x09
    4fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fea:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    4fee:	7c 01       	movw	r14, r24
    4ff0:	20 e0       	ldi	r18, 0x00	; 0
    4ff2:	40 e0       	ldi	r20, 0x00	; 0
    4ff4:	50 e0       	ldi	r21, 0x00	; 0
    4ff6:	b2 01       	movw	r22, r4
    4ff8:	89 85       	ldd	r24, Y+9	; 0x09
    4ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ffc:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5000:	96 01       	movw	r18, r12
    5002:	a7 01       	movw	r20, r14
    5004:	bc 01       	movw	r22, r24
    5006:	89 85       	ldd	r24, Y+9	; 0x09
    5008:	9a 85       	ldd	r25, Y+10	; 0x0a
    500a:	0a 96       	adiw	r24, 0x0a	; 10
    500c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <_ZN5Gates3CSIEiiii>
    5010:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5012:	dc 01       	movw	r26, r24
    5014:	2d 91       	ld	r18, X+
    5016:	3c 91       	ld	r19, X
    5018:	40 e0       	ldi	r20, 0x00	; 0
    501a:	50 e0       	ldi	r21, 0x00	; 0
    501c:	b2 01       	movw	r22, r4
    501e:	89 85       	ldd	r24, Y+9	; 0x09
    5020:	9a 85       	ldd	r25, Y+10	; 0x0a
    5022:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    5026:	f8 01       	movw	r30, r16
    5028:	22 81       	ldd	r18, Z+2	; 0x02
    502a:	33 81       	ldd	r19, Z+3	; 0x03
    502c:	41 e0       	ldi	r20, 0x01	; 1
    502e:	50 e0       	ldi	r21, 0x00	; 0
    5030:	b2 01       	movw	r22, r4
    5032:	89 85       	ldd	r24, Y+9	; 0x09
    5034:	9a 85       	ldd	r25, Y+10	; 0x0a
    5036:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    503a:	d8 01       	movw	r26, r16
    503c:	14 96       	adiw	r26, 0x04	; 4
    503e:	2d 91       	ld	r18, X+
    5040:	3c 91       	ld	r19, X
    5042:	15 97       	sbiw	r26, 0x05	; 5
    5044:	40 e0       	ldi	r20, 0x00	; 0
    5046:	50 e0       	ldi	r21, 0x00	; 0
    5048:	69 81       	ldd	r22, Y+1	; 0x01
    504a:	7a 81       	ldd	r23, Y+2	; 0x02
    504c:	89 85       	ldd	r24, Y+9	; 0x09
    504e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5050:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    5054:	f8 01       	movw	r30, r16
    5056:	26 81       	ldd	r18, Z+6	; 0x06
    5058:	37 81       	ldd	r19, Z+7	; 0x07
    505a:	41 e0       	ldi	r20, 0x01	; 1
    505c:	50 e0       	ldi	r21, 0x00	; 0
    505e:	69 81       	ldd	r22, Y+1	; 0x01
    5060:	7a 81       	ldd	r23, Y+2	; 0x02
    5062:	89 85       	ldd	r24, Y+9	; 0x09
    5064:	9a 85       	ldd	r25, Y+10	; 0x0a
    5066:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    506a:	71 c3       	rjmp	.+1762   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x36: // SWAP GATE
			newthephi=gates.SWA(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    506c:	20 e0       	ldi	r18, 0x00	; 0
    506e:	41 e0       	ldi	r20, 0x01	; 1
    5070:	50 e0       	ldi	r21, 0x00	; 0
    5072:	69 81       	ldd	r22, Y+1	; 0x01
    5074:	7a 81       	ldd	r23, Y+2	; 0x02
    5076:	89 85       	ldd	r24, Y+9	; 0x09
    5078:	9a 85       	ldd	r25, Y+10	; 0x0a
    507a:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    507e:	8c 01       	movw	r16, r24
    5080:	20 e0       	ldi	r18, 0x00	; 0
    5082:	40 e0       	ldi	r20, 0x00	; 0
    5084:	50 e0       	ldi	r21, 0x00	; 0
    5086:	69 81       	ldd	r22, Y+1	; 0x01
    5088:	7a 81       	ldd	r23, Y+2	; 0x02
    508a:	89 85       	ldd	r24, Y+9	; 0x09
    508c:	9a 85       	ldd	r25, Y+10	; 0x0a
    508e:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5092:	6c 01       	movw	r12, r24
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	41 e0       	ldi	r20, 0x01	; 1
    5098:	50 e0       	ldi	r21, 0x00	; 0
    509a:	b2 01       	movw	r22, r4
    509c:	89 85       	ldd	r24, Y+9	; 0x09
    509e:	9a 85       	ldd	r25, Y+10	; 0x0a
    50a0:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    50a4:	7c 01       	movw	r14, r24
    50a6:	20 e0       	ldi	r18, 0x00	; 0
    50a8:	40 e0       	ldi	r20, 0x00	; 0
    50aa:	50 e0       	ldi	r21, 0x00	; 0
    50ac:	b2 01       	movw	r22, r4
    50ae:	89 85       	ldd	r24, Y+9	; 0x09
    50b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b2:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    50b6:	96 01       	movw	r18, r12
    50b8:	a7 01       	movw	r20, r14
    50ba:	bc 01       	movw	r22, r24
    50bc:	89 85       	ldd	r24, Y+9	; 0x09
    50be:	9a 85       	ldd	r25, Y+10	; 0x0a
    50c0:	0a 96       	adiw	r24, 0x0a	; 10
    50c2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN5Gates3SWAEiiii>
    50c6:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    50c8:	dc 01       	movw	r26, r24
    50ca:	2d 91       	ld	r18, X+
    50cc:	3c 91       	ld	r19, X
    50ce:	40 e0       	ldi	r20, 0x00	; 0
    50d0:	50 e0       	ldi	r21, 0x00	; 0
    50d2:	b2 01       	movw	r22, r4
    50d4:	89 85       	ldd	r24, Y+9	; 0x09
    50d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    50d8:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    50dc:	f8 01       	movw	r30, r16
    50de:	22 81       	ldd	r18, Z+2	; 0x02
    50e0:	33 81       	ldd	r19, Z+3	; 0x03
    50e2:	41 e0       	ldi	r20, 0x01	; 1
    50e4:	50 e0       	ldi	r21, 0x00	; 0
    50e6:	b2 01       	movw	r22, r4
    50e8:	89 85       	ldd	r24, Y+9	; 0x09
    50ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ec:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    50f0:	d8 01       	movw	r26, r16
    50f2:	14 96       	adiw	r26, 0x04	; 4
    50f4:	2d 91       	ld	r18, X+
    50f6:	3c 91       	ld	r19, X
    50f8:	15 97       	sbiw	r26, 0x05	; 5
    50fa:	40 e0       	ldi	r20, 0x00	; 0
    50fc:	50 e0       	ldi	r21, 0x00	; 0
    50fe:	69 81       	ldd	r22, Y+1	; 0x01
    5100:	7a 81       	ldd	r23, Y+2	; 0x02
    5102:	89 85       	ldd	r24, Y+9	; 0x09
    5104:	9a 85       	ldd	r25, Y+10	; 0x0a
    5106:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    510a:	f8 01       	movw	r30, r16
    510c:	26 81       	ldd	r18, Z+6	; 0x06
    510e:	37 81       	ldd	r19, Z+7	; 0x07
    5110:	41 e0       	ldi	r20, 0x01	; 1
    5112:	50 e0       	ldi	r21, 0x00	; 0
    5114:	69 81       	ldd	r22, Y+1	; 0x01
    5116:	7a 81       	ldd	r23, Y+2	; 0x02
    5118:	89 85       	ldd	r24, Y+9	; 0x09
    511a:	9a 85       	ldd	r25, Y+10	; 0x0a
    511c:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    5120:	16 c3       	rjmp	.+1580   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x37: // INCREMENT GATE
			newthephi=gates.INC(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    5122:	20 e0       	ldi	r18, 0x00	; 0
    5124:	41 e0       	ldi	r20, 0x01	; 1
    5126:	50 e0       	ldi	r21, 0x00	; 0
    5128:	69 81       	ldd	r22, Y+1	; 0x01
    512a:	7a 81       	ldd	r23, Y+2	; 0x02
    512c:	89 85       	ldd	r24, Y+9	; 0x09
    512e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5130:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5134:	8c 01       	movw	r16, r24
    5136:	20 e0       	ldi	r18, 0x00	; 0
    5138:	40 e0       	ldi	r20, 0x00	; 0
    513a:	50 e0       	ldi	r21, 0x00	; 0
    513c:	69 81       	ldd	r22, Y+1	; 0x01
    513e:	7a 81       	ldd	r23, Y+2	; 0x02
    5140:	89 85       	ldd	r24, Y+9	; 0x09
    5142:	9a 85       	ldd	r25, Y+10	; 0x0a
    5144:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5148:	6c 01       	movw	r12, r24
    514a:	20 e0       	ldi	r18, 0x00	; 0
    514c:	41 e0       	ldi	r20, 0x01	; 1
    514e:	50 e0       	ldi	r21, 0x00	; 0
    5150:	b2 01       	movw	r22, r4
    5152:	89 85       	ldd	r24, Y+9	; 0x09
    5154:	9a 85       	ldd	r25, Y+10	; 0x0a
    5156:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    515a:	7c 01       	movw	r14, r24
    515c:	20 e0       	ldi	r18, 0x00	; 0
    515e:	40 e0       	ldi	r20, 0x00	; 0
    5160:	50 e0       	ldi	r21, 0x00	; 0
    5162:	b2 01       	movw	r22, r4
    5164:	89 85       	ldd	r24, Y+9	; 0x09
    5166:	9a 85       	ldd	r25, Y+10	; 0x0a
    5168:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    516c:	96 01       	movw	r18, r12
    516e:	a7 01       	movw	r20, r14
    5170:	bc 01       	movw	r22, r24
    5172:	89 85       	ldd	r24, Y+9	; 0x09
    5174:	9a 85       	ldd	r25, Y+10	; 0x0a
    5176:	0a 96       	adiw	r24, 0x0a	; 10
    5178:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN5Gates3INCEiiii>
    517c:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    517e:	dc 01       	movw	r26, r24
    5180:	2d 91       	ld	r18, X+
    5182:	3c 91       	ld	r19, X
    5184:	40 e0       	ldi	r20, 0x00	; 0
    5186:	50 e0       	ldi	r21, 0x00	; 0
    5188:	b2 01       	movw	r22, r4
    518a:	89 85       	ldd	r24, Y+9	; 0x09
    518c:	9a 85       	ldd	r25, Y+10	; 0x0a
    518e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    5192:	f8 01       	movw	r30, r16
    5194:	22 81       	ldd	r18, Z+2	; 0x02
    5196:	33 81       	ldd	r19, Z+3	; 0x03
    5198:	41 e0       	ldi	r20, 0x01	; 1
    519a:	50 e0       	ldi	r21, 0x00	; 0
    519c:	b2 01       	movw	r22, r4
    519e:	89 85       	ldd	r24, Y+9	; 0x09
    51a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51a2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    51a6:	d8 01       	movw	r26, r16
    51a8:	14 96       	adiw	r26, 0x04	; 4
    51aa:	2d 91       	ld	r18, X+
    51ac:	3c 91       	ld	r19, X
    51ae:	15 97       	sbiw	r26, 0x05	; 5
    51b0:	40 e0       	ldi	r20, 0x00	; 0
    51b2:	50 e0       	ldi	r21, 0x00	; 0
    51b4:	69 81       	ldd	r22, Y+1	; 0x01
    51b6:	7a 81       	ldd	r23, Y+2	; 0x02
    51b8:	89 85       	ldd	r24, Y+9	; 0x09
    51ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    51bc:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    51c0:	f8 01       	movw	r30, r16
    51c2:	26 81       	ldd	r18, Z+6	; 0x06
    51c4:	37 81       	ldd	r19, Z+7	; 0x07
    51c6:	41 e0       	ldi	r20, 0x01	; 1
    51c8:	50 e0       	ldi	r21, 0x00	; 0
    51ca:	69 81       	ldd	r22, Y+1	; 0x01
    51cc:	7a 81       	ldd	r23, Y+2	; 0x02
    51ce:	89 85       	ldd	r24, Y+9	; 0x09
    51d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51d2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    51d6:	bb c2       	rjmp	.+1398   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x38: // DECREMENT GATE
			newthephi=gates.DEC(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    51d8:	20 e0       	ldi	r18, 0x00	; 0
    51da:	41 e0       	ldi	r20, 0x01	; 1
    51dc:	50 e0       	ldi	r21, 0x00	; 0
    51de:	69 81       	ldd	r22, Y+1	; 0x01
    51e0:	7a 81       	ldd	r23, Y+2	; 0x02
    51e2:	89 85       	ldd	r24, Y+9	; 0x09
    51e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    51e6:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    51ea:	8c 01       	movw	r16, r24
    51ec:	20 e0       	ldi	r18, 0x00	; 0
    51ee:	40 e0       	ldi	r20, 0x00	; 0
    51f0:	50 e0       	ldi	r21, 0x00	; 0
    51f2:	69 81       	ldd	r22, Y+1	; 0x01
    51f4:	7a 81       	ldd	r23, Y+2	; 0x02
    51f6:	89 85       	ldd	r24, Y+9	; 0x09
    51f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    51fa:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    51fe:	6c 01       	movw	r12, r24
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	41 e0       	ldi	r20, 0x01	; 1
    5204:	50 e0       	ldi	r21, 0x00	; 0
    5206:	b2 01       	movw	r22, r4
    5208:	89 85       	ldd	r24, Y+9	; 0x09
    520a:	9a 85       	ldd	r25, Y+10	; 0x0a
    520c:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5210:	7c 01       	movw	r14, r24
    5212:	20 e0       	ldi	r18, 0x00	; 0
    5214:	40 e0       	ldi	r20, 0x00	; 0
    5216:	50 e0       	ldi	r21, 0x00	; 0
    5218:	b2 01       	movw	r22, r4
    521a:	89 85       	ldd	r24, Y+9	; 0x09
    521c:	9a 85       	ldd	r25, Y+10	; 0x0a
    521e:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5222:	96 01       	movw	r18, r12
    5224:	a7 01       	movw	r20, r14
    5226:	bc 01       	movw	r22, r24
    5228:	89 85       	ldd	r24, Y+9	; 0x09
    522a:	9a 85       	ldd	r25, Y+10	; 0x0a
    522c:	0a 96       	adiw	r24, 0x0a	; 10
    522e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN5Gates3DECEiiii>
    5232:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5234:	dc 01       	movw	r26, r24
    5236:	2d 91       	ld	r18, X+
    5238:	3c 91       	ld	r19, X
    523a:	40 e0       	ldi	r20, 0x00	; 0
    523c:	50 e0       	ldi	r21, 0x00	; 0
    523e:	b2 01       	movw	r22, r4
    5240:	89 85       	ldd	r24, Y+9	; 0x09
    5242:	9a 85       	ldd	r25, Y+10	; 0x0a
    5244:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    5248:	f8 01       	movw	r30, r16
    524a:	22 81       	ldd	r18, Z+2	; 0x02
    524c:	33 81       	ldd	r19, Z+3	; 0x03
    524e:	41 e0       	ldi	r20, 0x01	; 1
    5250:	50 e0       	ldi	r21, 0x00	; 0
    5252:	b2 01       	movw	r22, r4
    5254:	89 85       	ldd	r24, Y+9	; 0x09
    5256:	9a 85       	ldd	r25, Y+10	; 0x0a
    5258:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    525c:	d8 01       	movw	r26, r16
    525e:	14 96       	adiw	r26, 0x04	; 4
    5260:	2d 91       	ld	r18, X+
    5262:	3c 91       	ld	r19, X
    5264:	15 97       	sbiw	r26, 0x05	; 5
    5266:	40 e0       	ldi	r20, 0x00	; 0
    5268:	50 e0       	ldi	r21, 0x00	; 0
    526a:	69 81       	ldd	r22, Y+1	; 0x01
    526c:	7a 81       	ldd	r23, Y+2	; 0x02
    526e:	89 85       	ldd	r24, Y+9	; 0x09
    5270:	9a 85       	ldd	r25, Y+10	; 0x0a
    5272:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    5276:	f8 01       	movw	r30, r16
    5278:	26 81       	ldd	r18, Z+6	; 0x06
    527a:	37 81       	ldd	r19, Z+7	; 0x07
    527c:	41 e0       	ldi	r20, 0x01	; 1
    527e:	50 e0       	ldi	r21, 0x00	; 0
    5280:	69 81       	ldd	r22, Y+1	; 0x01
    5282:	7a 81       	ldd	r23, Y+2	; 0x02
    5284:	89 85       	ldd	r24, Y+9	; 0x09
    5286:	9a 85       	ldd	r25, Y+10	; 0x0a
    5288:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    528c:	60 c2       	rjmp	.+1216   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x39: // SWAGSQ GATE
			newthephi=gates.SWQ(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	41 e0       	ldi	r20, 0x01	; 1
    5292:	50 e0       	ldi	r21, 0x00	; 0
    5294:	69 81       	ldd	r22, Y+1	; 0x01
    5296:	7a 81       	ldd	r23, Y+2	; 0x02
    5298:	89 85       	ldd	r24, Y+9	; 0x09
    529a:	9a 85       	ldd	r25, Y+10	; 0x0a
    529c:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    52a0:	8c 01       	movw	r16, r24
    52a2:	20 e0       	ldi	r18, 0x00	; 0
    52a4:	40 e0       	ldi	r20, 0x00	; 0
    52a6:	50 e0       	ldi	r21, 0x00	; 0
    52a8:	69 81       	ldd	r22, Y+1	; 0x01
    52aa:	7a 81       	ldd	r23, Y+2	; 0x02
    52ac:	89 85       	ldd	r24, Y+9	; 0x09
    52ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    52b0:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    52b4:	6c 01       	movw	r12, r24
    52b6:	20 e0       	ldi	r18, 0x00	; 0
    52b8:	41 e0       	ldi	r20, 0x01	; 1
    52ba:	50 e0       	ldi	r21, 0x00	; 0
    52bc:	b2 01       	movw	r22, r4
    52be:	89 85       	ldd	r24, Y+9	; 0x09
    52c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52c2:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    52c6:	7c 01       	movw	r14, r24
    52c8:	20 e0       	ldi	r18, 0x00	; 0
    52ca:	40 e0       	ldi	r20, 0x00	; 0
    52cc:	50 e0       	ldi	r21, 0x00	; 0
    52ce:	b2 01       	movw	r22, r4
    52d0:	89 85       	ldd	r24, Y+9	; 0x09
    52d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    52d4:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    52d8:	96 01       	movw	r18, r12
    52da:	a7 01       	movw	r20, r14
    52dc:	bc 01       	movw	r22, r24
    52de:	89 85       	ldd	r24, Y+9	; 0x09
    52e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e2:	0a 96       	adiw	r24, 0x0a	; 10
    52e4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <_ZN5Gates3SWQEiiii>
    52e8:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    52ea:	dc 01       	movw	r26, r24
    52ec:	2d 91       	ld	r18, X+
    52ee:	3c 91       	ld	r19, X
    52f0:	40 e0       	ldi	r20, 0x00	; 0
    52f2:	50 e0       	ldi	r21, 0x00	; 0
    52f4:	b2 01       	movw	r22, r4
    52f6:	89 85       	ldd	r24, Y+9	; 0x09
    52f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    52fa:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    52fe:	f8 01       	movw	r30, r16
    5300:	22 81       	ldd	r18, Z+2	; 0x02
    5302:	33 81       	ldd	r19, Z+3	; 0x03
    5304:	41 e0       	ldi	r20, 0x01	; 1
    5306:	50 e0       	ldi	r21, 0x00	; 0
    5308:	b2 01       	movw	r22, r4
    530a:	89 85       	ldd	r24, Y+9	; 0x09
    530c:	9a 85       	ldd	r25, Y+10	; 0x0a
    530e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    5312:	d8 01       	movw	r26, r16
    5314:	14 96       	adiw	r26, 0x04	; 4
    5316:	2d 91       	ld	r18, X+
    5318:	3c 91       	ld	r19, X
    531a:	15 97       	sbiw	r26, 0x05	; 5
    531c:	40 e0       	ldi	r20, 0x00	; 0
    531e:	50 e0       	ldi	r21, 0x00	; 0
    5320:	69 81       	ldd	r22, Y+1	; 0x01
    5322:	7a 81       	ldd	r23, Y+2	; 0x02
    5324:	89 85       	ldd	r24, Y+9	; 0x09
    5326:	9a 85       	ldd	r25, Y+10	; 0x0a
    5328:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    532c:	f8 01       	movw	r30, r16
    532e:	26 81       	ldd	r18, Z+6	; 0x06
    5330:	37 81       	ldd	r19, Z+7	; 0x07
    5332:	41 e0       	ldi	r20, 0x01	; 1
    5334:	50 e0       	ldi	r21, 0x00	; 0
    5336:	69 81       	ldd	r22, Y+1	; 0x01
    5338:	7a 81       	ldd	r23, Y+2	; 0x02
    533a:	89 85       	ldd	r24, Y+9	; 0x09
    533c:	9a 85       	ldd	r25, Y+10	; 0x0a
    533e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    5342:	05 c2       	rjmp	.+1034   	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x3A: // SWAPI GATE
			newthephi=gates.SWI(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false));
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	41 e0       	ldi	r20, 0x01	; 1
    5348:	50 e0       	ldi	r21, 0x00	; 0
    534a:	69 81       	ldd	r22, Y+1	; 0x01
    534c:	7a 81       	ldd	r23, Y+2	; 0x02
    534e:	89 85       	ldd	r24, Y+9	; 0x09
    5350:	9a 85       	ldd	r25, Y+10	; 0x0a
    5352:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5356:	8c 01       	movw	r16, r24
    5358:	20 e0       	ldi	r18, 0x00	; 0
    535a:	40 e0       	ldi	r20, 0x00	; 0
    535c:	50 e0       	ldi	r21, 0x00	; 0
    535e:	69 81       	ldd	r22, Y+1	; 0x01
    5360:	7a 81       	ldd	r23, Y+2	; 0x02
    5362:	89 85       	ldd	r24, Y+9	; 0x09
    5364:	9a 85       	ldd	r25, Y+10	; 0x0a
    5366:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    536a:	6c 01       	movw	r12, r24
    536c:	20 e0       	ldi	r18, 0x00	; 0
    536e:	41 e0       	ldi	r20, 0x01	; 1
    5370:	50 e0       	ldi	r21, 0x00	; 0
    5372:	b2 01       	movw	r22, r4
    5374:	89 85       	ldd	r24, Y+9	; 0x09
    5376:	9a 85       	ldd	r25, Y+10	; 0x0a
    5378:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    537c:	7c 01       	movw	r14, r24
    537e:	20 e0       	ldi	r18, 0x00	; 0
    5380:	40 e0       	ldi	r20, 0x00	; 0
    5382:	50 e0       	ldi	r21, 0x00	; 0
    5384:	b2 01       	movw	r22, r4
    5386:	89 85       	ldd	r24, Y+9	; 0x09
    5388:	9a 85       	ldd	r25, Y+10	; 0x0a
    538a:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    538e:	96 01       	movw	r18, r12
    5390:	a7 01       	movw	r20, r14
    5392:	bc 01       	movw	r22, r24
    5394:	89 85       	ldd	r24, Y+9	; 0x09
    5396:	9a 85       	ldd	r25, Y+10	; 0x0a
    5398:	0a 96       	adiw	r24, 0x0a	; 10
    539a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN5Gates3SWIEiiii>
    539e:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    53a0:	dc 01       	movw	r26, r24
    53a2:	2d 91       	ld	r18, X+
    53a4:	3c 91       	ld	r19, X
    53a6:	40 e0       	ldi	r20, 0x00	; 0
    53a8:	50 e0       	ldi	r21, 0x00	; 0
    53aa:	b2 01       	movw	r22, r4
    53ac:	89 85       	ldd	r24, Y+9	; 0x09
    53ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    53b0:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    53b4:	f8 01       	movw	r30, r16
    53b6:	22 81       	ldd	r18, Z+2	; 0x02
    53b8:	33 81       	ldd	r19, Z+3	; 0x03
    53ba:	41 e0       	ldi	r20, 0x01	; 1
    53bc:	50 e0       	ldi	r21, 0x00	; 0
    53be:	b2 01       	movw	r22, r4
    53c0:	89 85       	ldd	r24, Y+9	; 0x09
    53c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    53c4:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    53c8:	d8 01       	movw	r26, r16
    53ca:	14 96       	adiw	r26, 0x04	; 4
    53cc:	2d 91       	ld	r18, X+
    53ce:	3c 91       	ld	r19, X
    53d0:	15 97       	sbiw	r26, 0x05	; 5
    53d2:	40 e0       	ldi	r20, 0x00	; 0
    53d4:	50 e0       	ldi	r21, 0x00	; 0
    53d6:	69 81       	ldd	r22, Y+1	; 0x01
    53d8:	7a 81       	ldd	r23, Y+2	; 0x02
    53da:	89 85       	ldd	r24, Y+9	; 0x09
    53dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    53de:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    53e2:	f8 01       	movw	r30, r16
    53e4:	26 81       	ldd	r18, Z+6	; 0x06
    53e6:	37 81       	ldd	r19, Z+7	; 0x07
    53e8:	41 e0       	ldi	r20, 0x01	; 1
    53ea:	50 e0       	ldi	r21, 0x00	; 0
    53ec:	69 81       	ldd	r22, Y+1	; 0x01
    53ee:	7a 81       	ldd	r23, Y+2	; 0x02
    53f0:	89 85       	ldd	r24, Y+9	; 0x09
    53f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    53f4:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    53f8:	aa c1       	rjmp	.+852    	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		//3 QUBIT GATES -
		case 0x3B: // CONTROL SWAP GATE
			newthephi=gates.CSW(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false));
    53fa:	9a 2c       	mov	r9, r10
    53fc:	8b 2c       	mov	r8, r11
    53fe:	20 e0       	ldi	r18, 0x00	; 0
    5400:	41 e0       	ldi	r20, 0x01	; 1
    5402:	50 e0       	ldi	r21, 0x00	; 0
    5404:	6a 2d       	mov	r22, r10
    5406:	7b 2d       	mov	r23, r11
    5408:	89 85       	ldd	r24, Y+9	; 0x09
    540a:	9a 85       	ldd	r25, Y+10	; 0x0a
    540c:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5410:	6c 01       	movw	r12, r24
    5412:	20 e0       	ldi	r18, 0x00	; 0
    5414:	40 e0       	ldi	r20, 0x00	; 0
    5416:	50 e0       	ldi	r21, 0x00	; 0
    5418:	6a 2d       	mov	r22, r10
    541a:	7b 2d       	mov	r23, r11
    541c:	89 85       	ldd	r24, Y+9	; 0x09
    541e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5420:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5424:	7c 01       	movw	r14, r24
    5426:	20 e0       	ldi	r18, 0x00	; 0
    5428:	41 e0       	ldi	r20, 0x01	; 1
    542a:	50 e0       	ldi	r21, 0x00	; 0
    542c:	69 81       	ldd	r22, Y+1	; 0x01
    542e:	7a 81       	ldd	r23, Y+2	; 0x02
    5430:	89 85       	ldd	r24, Y+9	; 0x09
    5432:	9a 85       	ldd	r25, Y+10	; 0x0a
    5434:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5438:	8c 01       	movw	r16, r24
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	40 e0       	ldi	r20, 0x00	; 0
    543e:	50 e0       	ldi	r21, 0x00	; 0
    5440:	69 81       	ldd	r22, Y+1	; 0x01
    5442:	7a 81       	ldd	r23, Y+2	; 0x02
    5444:	89 85       	ldd	r24, Y+9	; 0x09
    5446:	9a 85       	ldd	r25, Y+10	; 0x0a
    5448:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    544c:	5c 01       	movw	r10, r24
    544e:	20 e0       	ldi	r18, 0x00	; 0
    5450:	41 e0       	ldi	r20, 0x01	; 1
    5452:	50 e0       	ldi	r21, 0x00	; 0
    5454:	b2 01       	movw	r22, r4
    5456:	89 85       	ldd	r24, Y+9	; 0x09
    5458:	9a 85       	ldd	r25, Y+10	; 0x0a
    545a:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    545e:	1c 01       	movw	r2, r24
    5460:	20 e0       	ldi	r18, 0x00	; 0
    5462:	40 e0       	ldi	r20, 0x00	; 0
    5464:	50 e0       	ldi	r21, 0x00	; 0
    5466:	b2 01       	movw	r22, r4
    5468:	89 85       	ldd	r24, Y+9	; 0x09
    546a:	9a 85       	ldd	r25, Y+10	; 0x0a
    546c:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5470:	95 01       	movw	r18, r10
    5472:	a1 01       	movw	r20, r2
    5474:	bc 01       	movw	r22, r24
    5476:	89 85       	ldd	r24, Y+9	; 0x09
    5478:	9a 85       	ldd	r25, Y+10	; 0x0a
    547a:	0a 96       	adiw	r24, 0x0a	; 10
    547c:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN5Gates3CSWEiiiiii>
    5480:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5482:	dc 01       	movw	r26, r24
    5484:	2d 91       	ld	r18, X+
    5486:	3c 91       	ld	r19, X
    5488:	40 e0       	ldi	r20, 0x00	; 0
    548a:	50 e0       	ldi	r21, 0x00	; 0
    548c:	b2 01       	movw	r22, r4
    548e:	89 85       	ldd	r24, Y+9	; 0x09
    5490:	9a 85       	ldd	r25, Y+10	; 0x0a
    5492:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    5496:	f8 01       	movw	r30, r16
    5498:	22 81       	ldd	r18, Z+2	; 0x02
    549a:	33 81       	ldd	r19, Z+3	; 0x03
    549c:	41 e0       	ldi	r20, 0x01	; 1
    549e:	50 e0       	ldi	r21, 0x00	; 0
    54a0:	b2 01       	movw	r22, r4
    54a2:	89 85       	ldd	r24, Y+9	; 0x09
    54a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54a6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    54aa:	d8 01       	movw	r26, r16
    54ac:	14 96       	adiw	r26, 0x04	; 4
    54ae:	2d 91       	ld	r18, X+
    54b0:	3c 91       	ld	r19, X
    54b2:	15 97       	sbiw	r26, 0x05	; 5
    54b4:	40 e0       	ldi	r20, 0x00	; 0
    54b6:	50 e0       	ldi	r21, 0x00	; 0
    54b8:	69 81       	ldd	r22, Y+1	; 0x01
    54ba:	7a 81       	ldd	r23, Y+2	; 0x02
    54bc:	89 85       	ldd	r24, Y+9	; 0x09
    54be:	9a 85       	ldd	r25, Y+10	; 0x0a
    54c0:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    54c4:	f8 01       	movw	r30, r16
    54c6:	26 81       	ldd	r18, Z+6	; 0x06
    54c8:	37 81       	ldd	r19, Z+7	; 0x07
    54ca:	41 e0       	ldi	r20, 0x01	; 1
    54cc:	50 e0       	ldi	r21, 0x00	; 0
    54ce:	69 81       	ldd	r22, Y+1	; 0x01
    54d0:	7a 81       	ldd	r23, Y+2	; 0x02
    54d2:	89 85       	ldd	r24, Y+9	; 0x09
    54d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54d6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    54da:	d8 01       	movw	r26, r16
    54dc:	18 96       	adiw	r26, 0x08	; 8
    54de:	2d 91       	ld	r18, X+
    54e0:	3c 91       	ld	r19, X
    54e2:	19 97       	sbiw	r26, 0x09	; 9
    54e4:	40 e0       	ldi	r20, 0x00	; 0
    54e6:	50 e0       	ldi	r21, 0x00	; 0
    54e8:	69 2d       	mov	r22, r9
    54ea:	78 2d       	mov	r23, r8
    54ec:	89 85       	ldd	r24, Y+9	; 0x09
    54ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    54f0:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    54f4:	f8 01       	movw	r30, r16
    54f6:	22 85       	ldd	r18, Z+10	; 0x0a
    54f8:	33 85       	ldd	r19, Z+11	; 0x0b
    54fa:	41 e0       	ldi	r20, 0x01	; 1
    54fc:	50 e0       	ldi	r21, 0x00	; 0
    54fe:	69 2d       	mov	r22, r9
    5500:	78 2d       	mov	r23, r8
    5502:	89 85       	ldd	r24, Y+9	; 0x09
    5504:	9a 85       	ldd	r25, Y+10	; 0x0a
    5506:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    550a:	21 c1       	rjmp	.+578    	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x3C: // TOFFOLI GATE
			newthephi=gates.TOF(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false));
    550c:	9a 2c       	mov	r9, r10
    550e:	8b 2c       	mov	r8, r11
    5510:	20 e0       	ldi	r18, 0x00	; 0
    5512:	41 e0       	ldi	r20, 0x01	; 1
    5514:	50 e0       	ldi	r21, 0x00	; 0
    5516:	6a 2d       	mov	r22, r10
    5518:	7b 2d       	mov	r23, r11
    551a:	89 85       	ldd	r24, Y+9	; 0x09
    551c:	9a 85       	ldd	r25, Y+10	; 0x0a
    551e:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5522:	6c 01       	movw	r12, r24
    5524:	20 e0       	ldi	r18, 0x00	; 0
    5526:	40 e0       	ldi	r20, 0x00	; 0
    5528:	50 e0       	ldi	r21, 0x00	; 0
    552a:	6a 2d       	mov	r22, r10
    552c:	7b 2d       	mov	r23, r11
    552e:	89 85       	ldd	r24, Y+9	; 0x09
    5530:	9a 85       	ldd	r25, Y+10	; 0x0a
    5532:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5536:	7c 01       	movw	r14, r24
    5538:	20 e0       	ldi	r18, 0x00	; 0
    553a:	41 e0       	ldi	r20, 0x01	; 1
    553c:	50 e0       	ldi	r21, 0x00	; 0
    553e:	69 81       	ldd	r22, Y+1	; 0x01
    5540:	7a 81       	ldd	r23, Y+2	; 0x02
    5542:	89 85       	ldd	r24, Y+9	; 0x09
    5544:	9a 85       	ldd	r25, Y+10	; 0x0a
    5546:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    554a:	8c 01       	movw	r16, r24
    554c:	20 e0       	ldi	r18, 0x00	; 0
    554e:	40 e0       	ldi	r20, 0x00	; 0
    5550:	50 e0       	ldi	r21, 0x00	; 0
    5552:	69 81       	ldd	r22, Y+1	; 0x01
    5554:	7a 81       	ldd	r23, Y+2	; 0x02
    5556:	89 85       	ldd	r24, Y+9	; 0x09
    5558:	9a 85       	ldd	r25, Y+10	; 0x0a
    555a:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    555e:	5c 01       	movw	r10, r24
    5560:	20 e0       	ldi	r18, 0x00	; 0
    5562:	41 e0       	ldi	r20, 0x01	; 1
    5564:	50 e0       	ldi	r21, 0x00	; 0
    5566:	b2 01       	movw	r22, r4
    5568:	89 85       	ldd	r24, Y+9	; 0x09
    556a:	9a 85       	ldd	r25, Y+10	; 0x0a
    556c:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5570:	1c 01       	movw	r2, r24
    5572:	20 e0       	ldi	r18, 0x00	; 0
    5574:	40 e0       	ldi	r20, 0x00	; 0
    5576:	50 e0       	ldi	r21, 0x00	; 0
    5578:	b2 01       	movw	r22, r4
    557a:	89 85       	ldd	r24, Y+9	; 0x09
    557c:	9a 85       	ldd	r25, Y+10	; 0x0a
    557e:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5582:	95 01       	movw	r18, r10
    5584:	a1 01       	movw	r20, r2
    5586:	bc 01       	movw	r22, r24
    5588:	89 85       	ldd	r24, Y+9	; 0x09
    558a:	9a 85       	ldd	r25, Y+10	; 0x0a
    558c:	0a 96       	adiw	r24, 0x0a	; 10
    558e:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN5Gates3TOFEiiiiii>
    5592:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    5594:	dc 01       	movw	r26, r24
    5596:	2d 91       	ld	r18, X+
    5598:	3c 91       	ld	r19, X
    559a:	40 e0       	ldi	r20, 0x00	; 0
    559c:	50 e0       	ldi	r21, 0x00	; 0
    559e:	b2 01       	movw	r22, r4
    55a0:	89 85       	ldd	r24, Y+9	; 0x09
    55a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    55a4:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    55a8:	f8 01       	movw	r30, r16
    55aa:	22 81       	ldd	r18, Z+2	; 0x02
    55ac:	33 81       	ldd	r19, Z+3	; 0x03
    55ae:	41 e0       	ldi	r20, 0x01	; 1
    55b0:	50 e0       	ldi	r21, 0x00	; 0
    55b2:	b2 01       	movw	r22, r4
    55b4:	89 85       	ldd	r24, Y+9	; 0x09
    55b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55b8:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    55bc:	d8 01       	movw	r26, r16
    55be:	14 96       	adiw	r26, 0x04	; 4
    55c0:	2d 91       	ld	r18, X+
    55c2:	3c 91       	ld	r19, X
    55c4:	15 97       	sbiw	r26, 0x05	; 5
    55c6:	40 e0       	ldi	r20, 0x00	; 0
    55c8:	50 e0       	ldi	r21, 0x00	; 0
    55ca:	69 81       	ldd	r22, Y+1	; 0x01
    55cc:	7a 81       	ldd	r23, Y+2	; 0x02
    55ce:	89 85       	ldd	r24, Y+9	; 0x09
    55d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    55d2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    55d6:	f8 01       	movw	r30, r16
    55d8:	26 81       	ldd	r18, Z+6	; 0x06
    55da:	37 81       	ldd	r19, Z+7	; 0x07
    55dc:	41 e0       	ldi	r20, 0x01	; 1
    55de:	50 e0       	ldi	r21, 0x00	; 0
    55e0:	69 81       	ldd	r22, Y+1	; 0x01
    55e2:	7a 81       	ldd	r23, Y+2	; 0x02
    55e4:	89 85       	ldd	r24, Y+9	; 0x09
    55e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55e8:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    55ec:	d8 01       	movw	r26, r16
    55ee:	18 96       	adiw	r26, 0x08	; 8
    55f0:	2d 91       	ld	r18, X+
    55f2:	3c 91       	ld	r19, X
    55f4:	19 97       	sbiw	r26, 0x09	; 9
    55f6:	40 e0       	ldi	r20, 0x00	; 0
    55f8:	50 e0       	ldi	r21, 0x00	; 0
    55fa:	69 2d       	mov	r22, r9
    55fc:	78 2d       	mov	r23, r8
    55fe:	89 85       	ldd	r24, Y+9	; 0x09
    5600:	9a 85       	ldd	r25, Y+10	; 0x0a
    5602:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    5606:	f8 01       	movw	r30, r16
    5608:	22 85       	ldd	r18, Z+10	; 0x0a
    560a:	33 85       	ldd	r19, Z+11	; 0x0b
    560c:	41 e0       	ldi	r20, 0x01	; 1
    560e:	50 e0       	ldi	r21, 0x00	; 0
    5610:	69 2d       	mov	r22, r9
    5612:	78 2d       	mov	r23, r8
    5614:	89 85       	ldd	r24, Y+9	; 0x09
    5616:	9a 85       	ldd	r25, Y+10	; 0x0a
    5618:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			break;
    561c:	98 c0       	rjmp	.+304    	; 0x574e <_ZN4QEPU7executeEilll+0x12ca>
		case 0x3D: // DEUTSCH GATE
			newthephi=gates.DEU(read(op1,THE,false),read(op1,PHI,false),read(op2,THE,false),read(op2,PHI,false),read(op3,THE,false),read(op3,PHI,false),read(0,THE,false));
    561e:	20 e0       	ldi	r18, 0x00	; 0
    5620:	40 e0       	ldi	r20, 0x00	; 0
    5622:	50 e0       	ldi	r21, 0x00	; 0
    5624:	60 e0       	ldi	r22, 0x00	; 0
    5626:	70 e0       	ldi	r23, 0x00	; 0
    5628:	89 85       	ldd	r24, Y+9	; 0x09
    562a:	9a 85       	ldd	r25, Y+10	; 0x0a
    562c:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5630:	8c 01       	movw	r16, r24
    5632:	9a 2c       	mov	r9, r10
    5634:	8b 2c       	mov	r8, r11
    5636:	20 e0       	ldi	r18, 0x00	; 0
    5638:	41 e0       	ldi	r20, 0x01	; 1
    563a:	50 e0       	ldi	r21, 0x00	; 0
    563c:	6a 2d       	mov	r22, r10
    563e:	7b 2d       	mov	r23, r11
    5640:	89 85       	ldd	r24, Y+9	; 0x09
    5642:	9a 85       	ldd	r25, Y+10	; 0x0a
    5644:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5648:	6c 01       	movw	r12, r24
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	40 e0       	ldi	r20, 0x00	; 0
    564e:	50 e0       	ldi	r21, 0x00	; 0
    5650:	6a 2d       	mov	r22, r10
    5652:	7b 2d       	mov	r23, r11
    5654:	89 85       	ldd	r24, Y+9	; 0x09
    5656:	9a 85       	ldd	r25, Y+10	; 0x0a
    5658:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    565c:	7c 01       	movw	r14, r24
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	41 e0       	ldi	r20, 0x01	; 1
    5662:	50 e0       	ldi	r21, 0x00	; 0
    5664:	69 81       	ldd	r22, Y+1	; 0x01
    5666:	7a 81       	ldd	r23, Y+2	; 0x02
    5668:	89 85       	ldd	r24, Y+9	; 0x09
    566a:	9a 85       	ldd	r25, Y+10	; 0x0a
    566c:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5670:	1c 01       	movw	r2, r24
    5672:	20 e0       	ldi	r18, 0x00	; 0
    5674:	40 e0       	ldi	r20, 0x00	; 0
    5676:	50 e0       	ldi	r21, 0x00	; 0
    5678:	69 81       	ldd	r22, Y+1	; 0x01
    567a:	7a 81       	ldd	r23, Y+2	; 0x02
    567c:	89 85       	ldd	r24, Y+9	; 0x09
    567e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5680:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5684:	9e 83       	std	Y+6, r25	; 0x06
    5686:	8d 83       	std	Y+5, r24	; 0x05
    5688:	20 e0       	ldi	r18, 0x00	; 0
    568a:	41 e0       	ldi	r20, 0x01	; 1
    568c:	50 e0       	ldi	r21, 0x00	; 0
    568e:	b2 01       	movw	r22, r4
    5690:	89 85       	ldd	r24, Y+9	; 0x09
    5692:	9a 85       	ldd	r25, Y+10	; 0x0a
    5694:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    5698:	98 87       	std	Y+8, r25	; 0x08
    569a:	8f 83       	std	Y+7, r24	; 0x07
    569c:	20 e0       	ldi	r18, 0x00	; 0
    569e:	40 e0       	ldi	r20, 0x00	; 0
    56a0:	50 e0       	ldi	r21, 0x00	; 0
    56a2:	b2 01       	movw	r22, r4
    56a4:	89 85       	ldd	r24, Y+9	; 0x09
    56a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    56a8:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN4QEPU4readEiib>
    56ac:	58 01       	movw	r10, r16
    56ae:	81 01       	movw	r16, r2
    56b0:	2d 81       	ldd	r18, Y+5	; 0x05
    56b2:	3e 81       	ldd	r19, Y+6	; 0x06
    56b4:	4f 81       	ldd	r20, Y+7	; 0x07
    56b6:	58 85       	ldd	r21, Y+8	; 0x08
    56b8:	bc 01       	movw	r22, r24
    56ba:	89 85       	ldd	r24, Y+9	; 0x09
    56bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    56be:	0a 96       	adiw	r24, 0x0a	; 10
    56c0:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZN5Gates3DEUEiiiiiii>
    56c4:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    56c6:	dc 01       	movw	r26, r24
    56c8:	2d 91       	ld	r18, X+
    56ca:	3c 91       	ld	r19, X
    56cc:	40 e0       	ldi	r20, 0x00	; 0
    56ce:	50 e0       	ldi	r21, 0x00	; 0
    56d0:	b2 01       	movw	r22, r4
    56d2:	89 85       	ldd	r24, Y+9	; 0x09
    56d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    56da:	f8 01       	movw	r30, r16
    56dc:	22 81       	ldd	r18, Z+2	; 0x02
    56de:	33 81       	ldd	r19, Z+3	; 0x03
    56e0:	41 e0       	ldi	r20, 0x01	; 1
    56e2:	50 e0       	ldi	r21, 0x00	; 0
    56e4:	b2 01       	movw	r22, r4
    56e6:	89 85       	ldd	r24, Y+9	; 0x09
    56e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ea:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    56ee:	d8 01       	movw	r26, r16
    56f0:	14 96       	adiw	r26, 0x04	; 4
    56f2:	2d 91       	ld	r18, X+
    56f4:	3c 91       	ld	r19, X
    56f6:	15 97       	sbiw	r26, 0x05	; 5
    56f8:	40 e0       	ldi	r20, 0x00	; 0
    56fa:	50 e0       	ldi	r21, 0x00	; 0
    56fc:	69 81       	ldd	r22, Y+1	; 0x01
    56fe:	7a 81       	ldd	r23, Y+2	; 0x02
    5700:	89 85       	ldd	r24, Y+9	; 0x09
    5702:	9a 85       	ldd	r25, Y+10	; 0x0a
    5704:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    5708:	f8 01       	movw	r30, r16
    570a:	26 81       	ldd	r18, Z+6	; 0x06
    570c:	37 81       	ldd	r19, Z+7	; 0x07
    570e:	41 e0       	ldi	r20, 0x01	; 1
    5710:	50 e0       	ldi	r21, 0x00	; 0
    5712:	69 81       	ldd	r22, Y+1	; 0x01
    5714:	7a 81       	ldd	r23, Y+2	; 0x02
    5716:	89 85       	ldd	r24, Y+9	; 0x09
    5718:	9a 85       	ldd	r25, Y+10	; 0x0a
    571a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
			write(op3,THE,newthephi[4]); write(op3,PHI,newthephi[5]);
    571e:	d8 01       	movw	r26, r16
    5720:	18 96       	adiw	r26, 0x08	; 8
    5722:	2d 91       	ld	r18, X+
    5724:	3c 91       	ld	r19, X
    5726:	19 97       	sbiw	r26, 0x09	; 9
    5728:	40 e0       	ldi	r20, 0x00	; 0
    572a:	50 e0       	ldi	r21, 0x00	; 0
    572c:	69 2d       	mov	r22, r9
    572e:	78 2d       	mov	r23, r8
    5730:	89 85       	ldd	r24, Y+9	; 0x09
    5732:	9a 85       	ldd	r25, Y+10	; 0x0a
    5734:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
    5738:	f8 01       	movw	r30, r16
    573a:	22 85       	ldd	r18, Z+10	; 0x0a
    573c:	33 85       	ldd	r19, Z+11	; 0x0b
    573e:	41 e0       	ldi	r20, 0x01	; 1
    5740:	50 e0       	ldi	r21, 0x00	; 0
    5742:	69 2d       	mov	r22, r9
    5744:	78 2d       	mov	r23, r8
    5746:	89 85       	ldd	r24, Y+9	; 0x09
    5748:	9a 85       	ldd	r25, Y+10	; 0x0a
    574a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN4QEPU5writeEiii>
		serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
		serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
		serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
		serial.writestrln("");
	}
	free(newthephi);	
    574e:	c8 01       	movw	r24, r16
    5750:	0e 94 a6 34 	call	0x694c	; 0x694c <free>
    5754:	2a 96       	adiw	r28, 0x0a	; 10
    5756:	0f b6       	in	r0, 0x3f	; 63
    5758:	f8 94       	cli
    575a:	de bf       	out	0x3e, r29	; 62
    575c:	0f be       	out	0x3f, r0	; 63
    575e:	cd bf       	out	0x3d, r28	; 61
    5760:	df 91       	pop	r29
    5762:	cf 91       	pop	r28
    5764:	1f 91       	pop	r17
    5766:	0f 91       	pop	r16
    5768:	ff 90       	pop	r15
    576a:	ef 90       	pop	r14
    576c:	df 90       	pop	r13
    576e:	cf 90       	pop	r12
    5770:	bf 90       	pop	r11
    5772:	af 90       	pop	r10
    5774:	9f 90       	pop	r9
    5776:	8f 90       	pop	r8
    5778:	7f 90       	pop	r7
    577a:	6f 90       	pop	r6
    577c:	5f 90       	pop	r5
    577e:	4f 90       	pop	r4
    5780:	3f 90       	pop	r3
    5782:	2f 90       	pop	r2
    5784:	08 95       	ret

00005786 <_ZN4QEPU3runEv>:

void QEPU::set_programcounter(int newaddress){
	program_counter=newaddress-1;
}

void QEPU::run(){
    5786:	2f 92       	push	r2
    5788:	3f 92       	push	r3
    578a:	4f 92       	push	r4
    578c:	5f 92       	push	r5
    578e:	6f 92       	push	r6
    5790:	7f 92       	push	r7
    5792:	8f 92       	push	r8
    5794:	9f 92       	push	r9
    5796:	af 92       	push	r10
    5798:	bf 92       	push	r11
    579a:	cf 92       	push	r12
    579c:	df 92       	push	r13
    579e:	ef 92       	push	r14
    57a0:	ff 92       	push	r15
    57a2:	0f 93       	push	r16
    57a4:	1f 93       	push	r17
    57a6:	cf 93       	push	r28
    57a8:	df 93       	push	r29
    57aa:	cd b7       	in	r28, 0x3d	; 61
    57ac:	de b7       	in	r29, 0x3e	; 62
    57ae:	ad 97       	sbiw	r28, 0x2d	; 45
    57b0:	0f b6       	in	r0, 0x3f	; 63
    57b2:	f8 94       	cli
    57b4:	de bf       	out	0x3e, r29	; 62
    57b6:	0f be       	out	0x3f, r0	; 63
    57b8:	cd bf       	out	0x3d, r28	; 61
    57ba:	9b a3       	std	Y+35, r25	; 0x23
    57bc:	8a a3       	std	Y+34, r24	; 0x22
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
    57be:	01 96       	adiw	r24, 0x01	; 1
    57c0:	9d a7       	std	Y+45, r25	; 0x2d
    57c2:	8c a7       	std	Y+44, r24	; 0x2c
    57c4:	60 ed       	ldi	r22, 0xD0	; 208
    57c6:	70 e0       	ldi	r23, 0x00	; 0
    57c8:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_ZN6Serial10writestrlnEPc>
    57cc:	65 ec       	ldi	r22, 0xC5	; 197
    57ce:	70 e0       	ldi	r23, 0x00	; 0
    57d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    57d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    57d4:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_ZN6Serial10writestrlnEPc>
	
	int line_width=INSTR_WIDTH;
	program_counter_maximum=eeprom.count_lines();
    57d8:	6a a0       	ldd	r6, Y+34	; 0x22
    57da:	7b a0       	ldd	r7, Y+35	; 0x23
    57dc:	22 e0       	ldi	r18, 0x02	; 2
    57de:	62 0e       	add	r6, r18
    57e0:	71 1c       	adc	r7, r1
    57e2:	c3 01       	movw	r24, r6
    57e4:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN6EEProm11count_linesEv>
    57e8:	ea a1       	ldd	r30, Y+34	; 0x22
    57ea:	fb a1       	ldd	r31, Y+35	; 0x23
    57ec:	e8 52       	subi	r30, 0x28	; 40
    57ee:	ff 4f       	sbci	r31, 0xFF	; 255
    57f0:	91 83       	std	Z+1, r25	; 0x01
    57f2:	80 83       	st	Z, r24
	for(int program_counter=0;program_counter<program_counter_maximum;program_counter++){
    57f4:	18 16       	cp	r1, r24
    57f6:	19 06       	cpc	r1, r25
    57f8:	0c f0       	brlt	.+2      	; 0x57fc <_ZN4QEPU3runEv+0x76>
    57fa:	c4 c0       	rjmp	.+392    	; 0x5984 <_ZN4QEPU3runEv+0x1fe>
    57fc:	19 8e       	std	Y+25, r1	; 0x19
    57fe:	18 8e       	std	Y+24, r1	; 0x18
    5800:	1b 8e       	std	Y+27, r1	; 0x1b
    5802:	1a 8e       	std	Y+26, r1	; 0x1a
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
    5804:	1e 01       	movw	r2, r28
    5806:	3f e0       	ldi	r19, 0x0F	; 15
    5808:	23 0e       	add	r2, r19
    580a:	31 1c       	adc	r3, r1
    580c:	0f 2e       	mov	r0, r31
    580e:	fa ed       	ldi	r31, 0xDA	; 218
    5810:	8f 2e       	mov	r8, r31
    5812:	f0 e0       	ldi	r31, 0x00	; 0
    5814:	9f 2e       	mov	r9, r31
    5816:	f0 2d       	mov	r31, r0
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
    5818:	2e 01       	movw	r4, r28
    581a:	88 e0       	ldi	r24, 0x08	; 8
    581c:	48 0e       	add	r4, r24
    581e:	51 1c       	adc	r5, r1
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
    5820:	fe 01       	movw	r30, r28
    5822:	31 96       	adiw	r30, 0x01	; 1
    5824:	ff 8b       	std	Y+23, r31	; 0x17
    5826:	ee 8b       	std	Y+22, r30	; 0x16
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
    5828:	2e a2       	std	Y+38, r2	; 0x26
    582a:	3f a2       	std	Y+39, r3	; 0x27
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
    582c:	48 a6       	std	Y+40, r4	; 0x28
    582e:	59 a6       	std	Y+41, r5	; 0x29
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
    5830:	fe 89       	ldd	r31, Y+22	; 0x16
    5832:	fa a7       	std	Y+42, r31	; 0x2a
    5834:	2f 89       	ldd	r18, Y+23	; 0x17
    5836:	2b a7       	std	Y+43, r18	; 0x2b
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
	
	int line_width=INSTR_WIDTH;
	program_counter_maximum=eeprom.count_lines();
	for(int program_counter=0;program_counter<program_counter_maximum;program_counter++){
    5838:	8a a1       	ldd	r24, Y+34	; 0x22
    583a:	9b a1       	ldd	r25, Y+35	; 0x23
    583c:	88 52       	subi	r24, 0x28	; 40
    583e:	9f 4f       	sbci	r25, 0xFF	; 255
    5840:	9d a3       	std	Y+37, r25	; 0x25
    5842:	8c a3       	std	Y+36, r24	; 0x24
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
    5844:	1f 86       	std	Y+15, r1	; 0x0f
    5846:	18 8a       	std	Y+16, r1	; 0x10
    5848:	19 8a       	std	Y+17, r1	; 0x11
    584a:	1a 8a       	std	Y+18, r1	; 0x12
    584c:	1b 8a       	std	Y+19, r1	; 0x13
    584e:	1c 8a       	std	Y+20, r1	; 0x14
    5850:	1d 8a       	std	Y+21, r1	; 0x15
    5852:	18 86       	std	Y+8, r1	; 0x08
    5854:	19 86       	std	Y+9, r1	; 0x09
    5856:	1a 86       	std	Y+10, r1	; 0x0a
    5858:	1b 86       	std	Y+11, r1	; 0x0b
    585a:	1c 86       	std	Y+12, r1	; 0x0c
    585c:	1d 86       	std	Y+13, r1	; 0x0d
    585e:	1e 86       	std	Y+14, r1	; 0x0e
    5860:	19 82       	std	Y+1, r1	; 0x01
    5862:	1a 82       	std	Y+2, r1	; 0x02
    5864:	1b 82       	std	Y+3, r1	; 0x03
    5866:	1c 82       	std	Y+4, r1	; 0x04
    5868:	1d 82       	std	Y+5, r1	; 0x05
    586a:	1e 82       	std	Y+6, r1	; 0x06
    586c:	1f 82       	std	Y+7, r1	; 0x07
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
    586e:	68 8d       	ldd	r22, Y+24	; 0x18
    5870:	79 8d       	ldd	r23, Y+25	; 0x19
    5872:	c3 01       	movw	r24, r6
    5874:	0e 94 31 02 	call	0x462	; 0x462 <_ZN6EEProm4readEj>
    5878:	e8 2f       	mov	r30, r24
    587a:	f0 e0       	ldi	r31, 0x00	; 0
    587c:	fd 8f       	std	Y+29, r31	; 0x1d
    587e:	ec 8f       	std	Y+28, r30	; 0x1c
    5880:	c8 8c       	ldd	r12, Y+24	; 0x18
    5882:	d9 8c       	ldd	r13, Y+25	; 0x19
    5884:	f5 e0       	ldi	r31, 0x05	; 5
    5886:	cf 0e       	add	r12, r31
    5888:	d1 1c       	adc	r13, r1
    588a:	08 8d       	ldd	r16, Y+24	; 0x18
    588c:	19 8d       	ldd	r17, Y+25	; 0x19
    588e:	0f 5f       	subi	r16, 0xFF	; 255
    5890:	1f 4f       	sbci	r17, 0xFF	; 255
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
    5892:	b8 01       	movw	r22, r16
    5894:	c3 01       	movw	r24, r6
    5896:	0e 94 31 02 	call	0x462	; 0x462 <_ZN6EEProm4readEj>
    589a:	1f 92       	push	r1
    589c:	8f 93       	push	r24
    589e:	3f 92       	push	r3
    58a0:	2f 92       	push	r2
    58a2:	9f 92       	push	r9
    58a4:	8f 92       	push	r8
    58a6:	3f 92       	push	r3
    58a8:	2f 92       	push	r2
    58aa:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <sprintf>
    58ae:	b8 01       	movw	r22, r16
    58b0:	6c 5f       	subi	r22, 0xFC	; 252
    58b2:	7f 4f       	sbci	r23, 0xFF	; 255
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
    58b4:	c3 01       	movw	r24, r6
    58b6:	0e 94 31 02 	call	0x462	; 0x462 <_ZN6EEProm4readEj>
    58ba:	1f 92       	push	r1
    58bc:	8f 93       	push	r24
    58be:	5f 92       	push	r5
    58c0:	4f 92       	push	r4
    58c2:	9f 92       	push	r9
    58c4:	8f 92       	push	r8
    58c6:	5f 92       	push	r5
    58c8:	4f 92       	push	r4
    58ca:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <sprintf>
    58ce:	b8 01       	movw	r22, r16
    58d0:	68 5f       	subi	r22, 0xF8	; 248
    58d2:	7f 4f       	sbci	r23, 0xFF	; 255
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
    58d4:	c3 01       	movw	r24, r6
    58d6:	0e 94 31 02 	call	0x462	; 0x462 <_ZN6EEProm4readEj>
    58da:	1f 92       	push	r1
    58dc:	8f 93       	push	r24
    58de:	2f 89       	ldd	r18, Y+23	; 0x17
    58e0:	2f 93       	push	r18
    58e2:	3e 89       	ldd	r19, Y+22	; 0x16
    58e4:	3f 93       	push	r19
    58e6:	9f 92       	push	r9
    58e8:	8f 92       	push	r8
    58ea:	2f 93       	push	r18
    58ec:	3f 93       	push	r19
    58ee:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <sprintf>
    58f2:	0f 5f       	subi	r16, 0xFF	; 255
    58f4:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int program_counter=0;program_counter<program_counter_maximum;program_counter++){
		//FETCH OPERANDS FROM THE EEPROM:
		int eeprom_line_selection=program_counter*line_width;
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]=""; char op3s[OP3_WIDTH]="";
		func=eeprom.read(eeprom_line_selection+FIXED_FUNC_OFFSET); // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    58f6:	0f b6       	in	r0, 0x3f	; 63
    58f8:	f8 94       	cli
    58fa:	de bf       	out	0x3e, r29	; 62
    58fc:	0f be       	out	0x3f, r0	; 63
    58fe:	cd bf       	out	0x3d, r28	; 61
    5900:	0c 15       	cp	r16, r12
    5902:	1d 05       	cpc	r17, r13
    5904:	31 f6       	brne	.-116    	; 0x5892 <_ZN4QEPU3runEv+0x10c>
			sprintf(op1s,"%s%x",op1s,eeprom.read(eeprom_line_selection+FIXED_OP1_OFFSET+k)); // HEX CONCAT TO STRING (OP1 FETCH)
			sprintf(op2s,"%s%x",op2s,eeprom.read(eeprom_line_selection+FIXED_OP2_OFFSET+k)); // HEX CONCAT TO STRING (OP2 FETCH)
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
		}
		//EXECUTE:
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16),strtol(op3s,NULL,16)); //INSTRUCTION DECODE AND EXECUTE
    5906:	40 e1       	ldi	r20, 0x10	; 16
    5908:	50 e0       	ldi	r21, 0x00	; 0
    590a:	60 e0       	ldi	r22, 0x00	; 0
    590c:	70 e0       	ldi	r23, 0x00	; 0
    590e:	8a a5       	ldd	r24, Y+42	; 0x2a
    5910:	9b a5       	ldd	r25, Y+43	; 0x2b
    5912:	0e 94 93 35 	call	0x6b26	; 0x6b26 <strtol>
    5916:	5b 01       	movw	r10, r22
    5918:	6c 01       	movw	r12, r24
    591a:	40 e1       	ldi	r20, 0x10	; 16
    591c:	50 e0       	ldi	r21, 0x00	; 0
    591e:	60 e0       	ldi	r22, 0x00	; 0
    5920:	70 e0       	ldi	r23, 0x00	; 0
    5922:	88 a5       	ldd	r24, Y+40	; 0x28
    5924:	99 a5       	ldd	r25, Y+41	; 0x29
    5926:	0e 94 93 35 	call	0x6b26	; 0x6b26 <strtol>
    592a:	6e 8f       	std	Y+30, r22	; 0x1e
    592c:	7f 8f       	std	Y+31, r23	; 0x1f
    592e:	88 a3       	std	Y+32, r24	; 0x20
    5930:	99 a3       	std	Y+33, r25	; 0x21
    5932:	40 e1       	ldi	r20, 0x10	; 16
    5934:	50 e0       	ldi	r21, 0x00	; 0
    5936:	60 e0       	ldi	r22, 0x00	; 0
    5938:	70 e0       	ldi	r23, 0x00	; 0
    593a:	8e a1       	ldd	r24, Y+38	; 0x26
    593c:	9f a1       	ldd	r25, Y+39	; 0x27
    593e:	0e 94 93 35 	call	0x6b26	; 0x6b26 <strtol>
    5942:	9b 01       	movw	r18, r22
    5944:	ac 01       	movw	r20, r24
    5946:	ee 8c       	ldd	r14, Y+30	; 0x1e
    5948:	ff 8c       	ldd	r15, Y+31	; 0x1f
    594a:	08 a1       	ldd	r16, Y+32	; 0x20
    594c:	19 a1       	ldd	r17, Y+33	; 0x21
    594e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5950:	7d 8d       	ldd	r23, Y+29	; 0x1d
    5952:	8a a1       	ldd	r24, Y+34	; 0x22
    5954:	9b a1       	ldd	r25, Y+35	; 0x23
    5956:	0e 94 42 22 	call	0x4484	; 0x4484 <_ZN4QEPU7executeEilll>
	//TEMPORARY PRINTING FOR DEBUGGING PURPOSES
	serial.writestrln(" RUNNING "); serial.writestrln("");
	
	int line_width=INSTR_WIDTH;
	program_counter_maximum=eeprom.count_lines();
	for(int program_counter=0;program_counter<program_counter_maximum;program_counter++){
    595a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    595c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    595e:	31 96       	adiw	r30, 0x01	; 1
    5960:	fb 8f       	std	Y+27, r31	; 0x1b
    5962:	ea 8f       	std	Y+26, r30	; 0x1a
    5964:	28 8d       	ldd	r18, Y+24	; 0x18
    5966:	39 8d       	ldd	r19, Y+25	; 0x19
    5968:	23 5f       	subi	r18, 0xF3	; 243
    596a:	3f 4f       	sbci	r19, 0xFF	; 255
    596c:	39 8f       	std	Y+25, r19	; 0x19
    596e:	28 8f       	std	Y+24, r18	; 0x18
    5970:	ec a1       	ldd	r30, Y+36	; 0x24
    5972:	fd a1       	ldd	r31, Y+37	; 0x25
    5974:	80 81       	ld	r24, Z
    5976:	91 81       	ldd	r25, Z+1	; 0x01
    5978:	2a 8d       	ldd	r18, Y+26	; 0x1a
    597a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    597c:	28 17       	cp	r18, r24
    597e:	39 07       	cpc	r19, r25
    5980:	0c f4       	brge	.+2      	; 0x5984 <_ZN4QEPU3runEv+0x1fe>
    5982:	60 cf       	rjmp	.-320    	; 0x5844 <_ZN4QEPU3runEv+0xbe>
			sprintf(op3s,"%s%x",op3s,eeprom.read(eeprom_line_selection+FIXED_OP3_OFFSET+k)); // HEX CONCAT TO STRING (OP3 FETCH)
		}
		//EXECUTE:
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16),strtol(op3s,NULL,16)); //INSTRUCTION DECODE AND EXECUTE
	}
	dumpmem(QUBIT_COUNT);
    5984:	60 e1       	ldi	r22, 0x10	; 16
    5986:	70 e0       	ldi	r23, 0x00	; 0
    5988:	8a a1       	ldd	r24, Y+34	; 0x22
    598a:	9b a1       	ldd	r25, Y+35	; 0x23
    598c:	0e 94 a3 21 	call	0x4346	; 0x4346 <_ZN4QEPU7dumpmemEi>
	serial.writestrln("");
    5990:	65 ec       	ldi	r22, 0xC5	; 197
    5992:	70 e0       	ldi	r23, 0x00	; 0
    5994:	8c a5       	ldd	r24, Y+44	; 0x2c
    5996:	9d a5       	ldd	r25, Y+45	; 0x2d
    5998:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_ZN6Serial10writestrlnEPc>
	sram.dumpmem(5);
    599c:	65 e0       	ldi	r22, 0x05	; 5
    599e:	70 e0       	ldi	r23, 0x00	; 0
    59a0:	8a a1       	ldd	r24, Y+34	; 0x22
    59a2:	9b a1       	ldd	r25, Y+35	; 0x23
    59a4:	03 96       	adiw	r24, 0x03	; 3
    59a6:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <_ZN4SRAM7dumpmemEi>
	serial.writestr("The execution of the program has finished");
    59aa:	6f ed       	ldi	r22, 0xDF	; 223
    59ac:	70 e0       	ldi	r23, 0x00	; 0
    59ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    59b0:	9d a5       	ldd	r25, Y+45	; 0x2d
    59b2:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
	#pragma endregion
}
    59b6:	ad 96       	adiw	r28, 0x2d	; 45
    59b8:	0f b6       	in	r0, 0x3f	; 63
    59ba:	f8 94       	cli
    59bc:	de bf       	out	0x3e, r29	; 62
    59be:	0f be       	out	0x3f, r0	; 63
    59c0:	cd bf       	out	0x3d, r28	; 61
    59c2:	df 91       	pop	r29
    59c4:	cf 91       	pop	r28
    59c6:	1f 91       	pop	r17
    59c8:	0f 91       	pop	r16
    59ca:	ff 90       	pop	r15
    59cc:	ef 90       	pop	r14
    59ce:	df 90       	pop	r13
    59d0:	cf 90       	pop	r12
    59d2:	bf 90       	pop	r11
    59d4:	af 90       	pop	r10
    59d6:	9f 90       	pop	r9
    59d8:	8f 90       	pop	r8
    59da:	7f 90       	pop	r7
    59dc:	6f 90       	pop	r6
    59de:	5f 90       	pop	r5
    59e0:	4f 90       	pop	r4
    59e2:	3f 90       	pop	r3
    59e4:	2f 90       	pop	r2
    59e6:	08 95       	ret

000059e8 <main>:
#include "qepu.h"
int main(void){
    59e8:	cf 93       	push	r28
    59ea:	df 93       	push	r29
    59ec:	cd b7       	in	r28, 0x3d	; 61
    59ee:	de b7       	in	r29, 0x3e	; 62
    59f0:	cb 5d       	subi	r28, 0xDB	; 219
    59f2:	d1 09       	sbc	r29, r1
    59f4:	0f b6       	in	r0, 0x3f	; 63
    59f6:	f8 94       	cli
    59f8:	de bf       	out	0x3e, r29	; 62
    59fa:	0f be       	out	0x3f, r0	; 63
    59fc:	cd bf       	out	0x3d, r28	; 61
	QEPU qepu;
    59fe:	ce 01       	movw	r24, r28
    5a00:	01 96       	adiw	r24, 0x01	; 1
    5a02:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <_ZN4QEPUC1Ev>
	qepu.run();
    5a06:	ce 01       	movw	r24, r28
    5a08:	01 96       	adiw	r24, 0x01	; 1
    5a0a:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN4QEPU3runEv>
    5a0e:	ff cf       	rjmp	.-2      	; 0x5a0e <main+0x26>

00005a10 <_ZN4SRAM4initEv>:
#include "sram.h"

SRAM::SRAM(){
	init();
}
void SRAM::init(){
    5a10:	fc 01       	movw	r30, r24
	CTRLMEM_DIR=OUTPUT;
    5a12:	8f ef       	ldi	r24, 0xFF	; 255
    5a14:	84 bb       	out	0x14, r24	; 20
	stack_head_offset=MEMORY_HEAD_PERMISSION_OFFSET+HEAD_PROGRAMMER_OFFSET;
    5a16:	84 e1       	ldi	r24, 0x14	; 20
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	91 83       	std	Z+1, r25	; 0x01
    5a1c:	80 83       	st	Z, r24
	stack_tail_offset=ADDRESS_MAX-MEMORY_TAIL_PERMISSION_OFFSET-TAIL_PROGRAMMER_OFFSET;
    5a1e:	88 e3       	ldi	r24, 0x38	; 56
    5a20:	90 e0       	ldi	r25, 0x00	; 0
    5a22:	95 83       	std	Z+5, r25	; 0x05
    5a24:	84 83       	std	Z+4, r24	; 0x04
	memory_restrictedaccess_allowed=false;
    5a26:	16 82       	std	Z+6, r1	; 0x06
    5a28:	08 95       	ret

00005a2a <_ZN4SRAMC1Ev>:
#include "sram.h"

SRAM::SRAM(){
    5a2a:	cf 93       	push	r28
    5a2c:	df 93       	push	r29
    5a2e:	ec 01       	movw	r28, r24
    5a30:	03 96       	adiw	r24, 0x03	; 3
    5a32:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN6SerialC1Ev>
	init();
    5a36:	ce 01       	movw	r24, r28
    5a38:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <_ZN4SRAM4initEv>
}
    5a3c:	df 91       	pop	r29
    5a3e:	cf 91       	pop	r28
    5a40:	08 95       	ret

00005a42 <_ZN4SRAM11set_addressEi>:
	stack_tail_offset=ADDRESS_MAX-MEMORY_TAIL_PERMISSION_OFFSET-TAIL_PROGRAMMER_OFFSET;
	memory_restrictedaccess_allowed=false;
}

void SRAM::set_address(int address){
	MEM_ADDRESS_DIR=OUTPUT;
    5a42:	2f ef       	ldi	r18, 0xFF	; 255
    5a44:	2a bb       	out	0x1a, r18	; 26
	if(!memory_restrictedaccess_allowed)
    5a46:	fc 01       	movw	r30, r24
    5a48:	26 81       	ldd	r18, Z+6	; 0x06
    5a4a:	21 11       	cpse	r18, r1
    5a4c:	0f c0       	rjmp	.+30     	; 0x5a6c <_ZN4SRAM11set_addressEi+0x2a>
		if(address+stack_head_offset>stack_tail_offset)MEM_ADDRESS=stack_tail_offset;
    5a4e:	20 81       	ld	r18, Z
    5a50:	31 81       	ldd	r19, Z+1	; 0x01
    5a52:	84 81       	ldd	r24, Z+4	; 0x04
    5a54:	95 81       	ldd	r25, Z+5	; 0x05
    5a56:	a9 01       	movw	r20, r18
    5a58:	46 0f       	add	r20, r22
    5a5a:	57 1f       	adc	r21, r23
    5a5c:	84 17       	cp	r24, r20
    5a5e:	95 07       	cpc	r25, r21
    5a60:	14 f4       	brge	.+4      	; 0x5a66 <_ZN4SRAM11set_addressEi+0x24>
    5a62:	8b bb       	out	0x1b, r24	; 27
    5a64:	08 95       	ret
		else MEM_ADDRESS=address+stack_head_offset;
    5a66:	62 0f       	add	r22, r18
    5a68:	6b bb       	out	0x1b, r22	; 27
    5a6a:	08 95       	ret
	else MEM_ADDRESS=address;
    5a6c:	6b bb       	out	0x1b, r22	; 27
    5a6e:	08 95       	ret

00005a70 <_ZN4SRAM10setctrlpinEii>:
void SRAM::bus_write(int data){
	BUS_DIR=OUTPUT;
	BUS_OUT=data;
}
void SRAM::setctrlpin(int pin,int state){
	CTRLMEM&=~(1<<pin); // CLEAR PIN
    5a70:	75 b3       	in	r23, 0x15	; 21
    5a72:	21 e0       	ldi	r18, 0x01	; 1
    5a74:	30 e0       	ldi	r19, 0x00	; 0
    5a76:	c9 01       	movw	r24, r18
    5a78:	06 2e       	mov	r0, r22
    5a7a:	02 c0       	rjmp	.+4      	; 0x5a80 <_ZN4SRAM10setctrlpinEii+0x10>
    5a7c:	88 0f       	add	r24, r24
    5a7e:	99 1f       	adc	r25, r25
    5a80:	0a 94       	dec	r0
    5a82:	e2 f7       	brpl	.-8      	; 0x5a7c <_ZN4SRAM10setctrlpinEii+0xc>
    5a84:	80 95       	com	r24
    5a86:	87 23       	and	r24, r23
    5a88:	85 bb       	out	0x15, r24	; 21
	CTRLMEM|=(state<<pin); // SET PIN
    5a8a:	85 b3       	in	r24, 0x15	; 21
    5a8c:	02 c0       	rjmp	.+4      	; 0x5a92 <_ZN4SRAM10setctrlpinEii+0x22>
    5a8e:	44 0f       	add	r20, r20
    5a90:	55 1f       	adc	r21, r21
    5a92:	6a 95       	dec	r22
    5a94:	e2 f7       	brpl	.-8      	; 0x5a8e <_ZN4SRAM10setctrlpinEii+0x1e>
    5a96:	48 2b       	or	r20, r24
    5a98:	45 bb       	out	0x15, r20	; 21
    5a9a:	08 95       	ret

00005a9c <_ZN4SRAM17memory_managementEv>:
		serial.writestrln(mem_debug_str);
	}
}

void SRAM::memory_management(){
	if(stack_head_offset>stack_tail_offset || stack_head_offset<0 || stack_head_offset>ADDRESS_MAX || stack_tail_offset<0 || stack_tail_offset>ADDRESS_MAX){
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	20 81       	ld	r18, Z
    5aa0:	31 81       	ldd	r19, Z+1	; 0x01
    5aa2:	44 81       	ldd	r20, Z+4	; 0x04
    5aa4:	55 81       	ldd	r21, Z+5	; 0x05
    5aa6:	42 17       	cp	r20, r18
    5aa8:	53 07       	cpc	r21, r19
    5aaa:	34 f0       	brlt	.+12     	; 0x5ab8 <_ZN4SRAM17memory_managementEv+0x1c>
    5aac:	21 30       	cpi	r18, 0x01	; 1
    5aae:	31 40       	sbci	r19, 0x01	; 1
    5ab0:	18 f4       	brcc	.+6      	; 0x5ab8 <_ZN4SRAM17memory_managementEv+0x1c>
    5ab2:	41 30       	cpi	r20, 0x01	; 1
    5ab4:	51 40       	sbci	r21, 0x01	; 1
    5ab6:	10 f0       	brcs	.+4      	; 0x5abc <_ZN4SRAM17memory_managementEv+0x20>
		init(); //RESTORE STACK POINTERS TO DEFAULT
    5ab8:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <_ZN4SRAM4initEv>
    5abc:	08 95       	ret

00005abe <_ZN4SRAM4readEi>:
		if(address+stack_head_offset>stack_tail_offset)MEM_ADDRESS=stack_tail_offset;
		else MEM_ADDRESS=address+stack_head_offset;
	else MEM_ADDRESS=address;
}

int8_t SRAM::read(int address){
    5abe:	0f 93       	push	r16
    5ac0:	1f 93       	push	r17
    5ac2:	cf 93       	push	r28
    5ac4:	df 93       	push	r29
    5ac6:	ec 01       	movw	r28, r24
    5ac8:	8b 01       	movw	r16, r22
	memory_management();
    5aca:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <_ZN4SRAM17memory_managementEv>
	set_address(address);
    5ace:	b8 01       	movw	r22, r16
    5ad0:	ce 01       	movw	r24, r28
    5ad2:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <_ZN4SRAM11set_addressEi>
	BUS_DIR=INPUT;
    5ad6:	17 ba       	out	0x17, r1	; 23
	setctrlpin(MRE,HIGH);
    5ad8:	41 e0       	ldi	r20, 0x01	; 1
    5ada:	50 e0       	ldi	r21, 0x00	; 0
    5adc:	66 e0       	ldi	r22, 0x06	; 6
    5ade:	70 e0       	ldi	r23, 0x00	; 0
    5ae0:	ce 01       	movw	r24, r28
    5ae2:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <_ZN4SRAM10setctrlpinEii>
	int bus_data=BUS_IN;
    5ae6:	16 b3       	in	r17, 0x16	; 22
	setctrlpin(MRE,LOW);
    5ae8:	40 e0       	ldi	r20, 0x00	; 0
    5aea:	50 e0       	ldi	r21, 0x00	; 0
    5aec:	66 e0       	ldi	r22, 0x06	; 6
    5aee:	70 e0       	ldi	r23, 0x00	; 0
    5af0:	ce 01       	movw	r24, r28
    5af2:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <_ZN4SRAM10setctrlpinEii>
	BUS_DIR=OUTPUT;
    5af6:	8f ef       	ldi	r24, 0xFF	; 255
    5af8:	87 bb       	out	0x17, r24	; 23
	MEM_ADDRESS=LOW;
    5afa:	1b ba       	out	0x1b, r1	; 27
	return bus_data;
}
    5afc:	81 2f       	mov	r24, r17
    5afe:	df 91       	pop	r29
    5b00:	cf 91       	pop	r28
    5b02:	1f 91       	pop	r17
    5b04:	0f 91       	pop	r16
    5b06:	08 95       	ret

00005b08 <_ZN4SRAM9read_sramEv>:
	}else{
		stack_head_offset--;
		write(0,register_data);
	}
}
int* SRAM::read_sram(){
    5b08:	cf 92       	push	r12
    5b0a:	df 92       	push	r13
    5b0c:	ef 92       	push	r14
    5b0e:	ff 92       	push	r15
    5b10:	0f 93       	push	r16
    5b12:	1f 93       	push	r17
    5b14:	cf 93       	push	r28
    5b16:	df 93       	push	r29
    5b18:	cd b7       	in	r28, 0x3d	; 61
    5b1a:	de b7       	in	r29, 0x3e	; 62
    5b1c:	d2 50       	subi	r29, 0x02	; 2
    5b1e:	0f b6       	in	r0, 0x3f	; 63
    5b20:	f8 94       	cli
    5b22:	de bf       	out	0x3e, r29	; 62
    5b24:	0f be       	out	0x3f, r0	; 63
    5b26:	cd bf       	out	0x3d, r28	; 61
    5b28:	7c 01       	movw	r14, r24
	int ram_memory[ADDRESS_MAX];
	for(int i=stack_head_offset;i<stack_tail_offset;i++) ram_memory[i]=read(i);
    5b2a:	fc 01       	movw	r30, r24
    5b2c:	00 81       	ld	r16, Z
    5b2e:	11 81       	ldd	r17, Z+1	; 0x01
    5b30:	84 81       	ldd	r24, Z+4	; 0x04
    5b32:	95 81       	ldd	r25, Z+5	; 0x05
    5b34:	08 17       	cp	r16, r24
    5b36:	19 07       	cpc	r17, r25
    5b38:	e4 f4       	brge	.+56     	; 0x5b72 <_ZN4SRAM9read_sramEv+0x6a>
    5b3a:	68 01       	movw	r12, r16
    5b3c:	cc 0c       	add	r12, r12
    5b3e:	dd 1c       	adc	r13, r13
    5b40:	81 e0       	ldi	r24, 0x01	; 1
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	8c 0f       	add	r24, r28
    5b46:	9d 1f       	adc	r25, r29
    5b48:	c8 0e       	add	r12, r24
    5b4a:	d9 1e       	adc	r13, r25
    5b4c:	b8 01       	movw	r22, r16
    5b4e:	c7 01       	movw	r24, r14
    5b50:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    5b54:	99 27       	eor	r25, r25
    5b56:	87 fd       	sbrc	r24, 7
    5b58:	90 95       	com	r25
    5b5a:	f6 01       	movw	r30, r12
    5b5c:	81 93       	st	Z+, r24
    5b5e:	91 93       	st	Z+, r25
    5b60:	6f 01       	movw	r12, r30
    5b62:	0f 5f       	subi	r16, 0xFF	; 255
    5b64:	1f 4f       	sbci	r17, 0xFF	; 255
    5b66:	f7 01       	movw	r30, r14
    5b68:	84 81       	ldd	r24, Z+4	; 0x04
    5b6a:	95 81       	ldd	r25, Z+5	; 0x05
    5b6c:	08 17       	cp	r16, r24
    5b6e:	19 07       	cpc	r17, r25
    5b70:	6c f3       	brlt	.-38     	; 0x5b4c <_ZN4SRAM9read_sramEv+0x44>
	return ram_memory;
}
    5b72:	ce 01       	movw	r24, r28
    5b74:	01 96       	adiw	r24, 0x01	; 1
    5b76:	de 5f       	subi	r29, 0xFE	; 254
    5b78:	0f b6       	in	r0, 0x3f	; 63
    5b7a:	f8 94       	cli
    5b7c:	de bf       	out	0x3e, r29	; 62
    5b7e:	0f be       	out	0x3f, r0	; 63
    5b80:	cd bf       	out	0x3d, r28	; 61
    5b82:	df 91       	pop	r29
    5b84:	cf 91       	pop	r28
    5b86:	1f 91       	pop	r17
    5b88:	0f 91       	pop	r16
    5b8a:	ff 90       	pop	r15
    5b8c:	ef 90       	pop	r14
    5b8e:	df 90       	pop	r13
    5b90:	cf 90       	pop	r12
    5b92:	08 95       	ret

00005b94 <_ZN4SRAM5writeEii>:
	setctrlpin(MRE,LOW);
	BUS_DIR=OUTPUT;
	MEM_ADDRESS=LOW;
	return bus_data;
}
void SRAM::write(int address,int data){
    5b94:	ff 92       	push	r15
    5b96:	0f 93       	push	r16
    5b98:	1f 93       	push	r17
    5b9a:	cf 93       	push	r28
    5b9c:	df 93       	push	r29
    5b9e:	ec 01       	movw	r28, r24
    5ba0:	8b 01       	movw	r16, r22
    5ba2:	f4 2e       	mov	r15, r20
	memory_management();
    5ba4:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <_ZN4SRAM17memory_managementEv>
	set_address(address);
    5ba8:	b8 01       	movw	r22, r16
    5baa:	ce 01       	movw	r24, r28
    5bac:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <_ZN4SRAM11set_addressEi>
	setctrlpin(MWR,LOW);
	MEM_ADDRESS=LOW;
	bus_write(LOW);
}
void SRAM::bus_write(int data){
	BUS_DIR=OUTPUT;
    5bb0:	1f ef       	ldi	r17, 0xFF	; 255
    5bb2:	17 bb       	out	0x17, r17	; 23
	BUS_OUT=data;
    5bb4:	f8 ba       	out	0x18, r15	; 24
}
void SRAM::write(int address,int data){
	memory_management();
	set_address(address);
	bus_write(data);
	setctrlpin(MWR,HIGH);
    5bb6:	41 e0       	ldi	r20, 0x01	; 1
    5bb8:	50 e0       	ldi	r21, 0x00	; 0
    5bba:	65 e0       	ldi	r22, 0x05	; 5
    5bbc:	70 e0       	ldi	r23, 0x00	; 0
    5bbe:	ce 01       	movw	r24, r28
    5bc0:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <_ZN4SRAM10setctrlpinEii>
	setctrlpin(MWR,LOW);
    5bc4:	40 e0       	ldi	r20, 0x00	; 0
    5bc6:	50 e0       	ldi	r21, 0x00	; 0
    5bc8:	65 e0       	ldi	r22, 0x05	; 5
    5bca:	70 e0       	ldi	r23, 0x00	; 0
    5bcc:	ce 01       	movw	r24, r28
    5bce:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <_ZN4SRAM10setctrlpinEii>
	MEM_ADDRESS=LOW;
    5bd2:	1b ba       	out	0x1b, r1	; 27
	bus_write(LOW);
}
void SRAM::bus_write(int data){
	BUS_DIR=OUTPUT;
    5bd4:	17 bb       	out	0x17, r17	; 23
	BUS_OUT=data;
    5bd6:	18 ba       	out	0x18, r1	; 24
	bus_write(data);
	setctrlpin(MWR,HIGH);
	setctrlpin(MWR,LOW);
	MEM_ADDRESS=LOW;
	bus_write(LOW);
}
    5bd8:	df 91       	pop	r29
    5bda:	cf 91       	pop	r28
    5bdc:	1f 91       	pop	r17
    5bde:	0f 91       	pop	r16
    5be0:	ff 90       	pop	r15
    5be2:	08 95       	ret

00005be4 <_ZN4SRAM3popEv>:
}
void SRAM::setctrlpin(int pin,int state){
	CTRLMEM&=~(1<<pin); // CLEAR PIN
	CTRLMEM|=(state<<pin); // SET PIN
}
int SRAM::pop(){
    5be4:	cf 93       	push	r28
    5be6:	df 93       	push	r29
    5be8:	ec 01       	movw	r28, r24
	memory_management();
    5bea:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <_ZN4SRAM17memory_managementEv>
	int popped_number=read(0);
    5bee:	60 e0       	ldi	r22, 0x00	; 0
    5bf0:	70 e0       	ldi	r23, 0x00	; 0
    5bf2:	ce 01       	movw	r24, r28
    5bf4:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
	stack_head_offset++;
    5bf8:	28 81       	ld	r18, Y
    5bfa:	39 81       	ldd	r19, Y+1	; 0x01
    5bfc:	2f 5f       	subi	r18, 0xFF	; 255
    5bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    5c00:	39 83       	std	Y+1, r19	; 0x01
    5c02:	28 83       	st	Y, r18
	if(stack_head_offset>stack_tail_offset) return 0;
    5c04:	4c 81       	ldd	r20, Y+4	; 0x04
    5c06:	5d 81       	ldd	r21, Y+5	; 0x05
    5c08:	42 17       	cp	r20, r18
    5c0a:	53 07       	cpc	r21, r19
    5c0c:	24 f0       	brlt	.+8      	; 0x5c16 <_ZN4SRAM3popEv+0x32>
	CTRLMEM&=~(1<<pin); // CLEAR PIN
	CTRLMEM|=(state<<pin); // SET PIN
}
int SRAM::pop(){
	memory_management();
	int popped_number=read(0);
    5c0e:	99 27       	eor	r25, r25
    5c10:	87 fd       	sbrc	r24, 7
    5c12:	90 95       	com	r25
	stack_head_offset++;
	if(stack_head_offset>stack_tail_offset) return 0;
	else return popped_number;
    5c14:	02 c0       	rjmp	.+4      	; 0x5c1a <_ZN4SRAM3popEv+0x36>
}
int SRAM::pop(){
	memory_management();
	int popped_number=read(0);
	stack_head_offset++;
	if(stack_head_offset>stack_tail_offset) return 0;
    5c16:	80 e0       	ldi	r24, 0x00	; 0
    5c18:	90 e0       	ldi	r25, 0x00	; 0
	else return popped_number;
}
    5c1a:	df 91       	pop	r29
    5c1c:	cf 91       	pop	r28
    5c1e:	08 95       	ret

00005c20 <_ZN4SRAM4pushEi>:
void SRAM::push(int register_data){
    5c20:	ef 92       	push	r14
    5c22:	ff 92       	push	r15
    5c24:	0f 93       	push	r16
    5c26:	1f 93       	push	r17
    5c28:	cf 93       	push	r28
    5c2a:	df 93       	push	r29
    5c2c:	8c 01       	movw	r16, r24
    5c2e:	eb 01       	movw	r28, r22
	memory_management();
    5c30:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <_ZN4SRAM17memory_managementEv>
	if(stack_head_offset<=MEMORY_HEAD_PERMISSION_OFFSET){ //PUSH EVERY OTHER ELEMENT FORWARD ****
    5c34:	f8 01       	movw	r30, r16
    5c36:	80 81       	ld	r24, Z
    5c38:	91 81       	ldd	r25, Z+1	; 0x01
    5c3a:	18 16       	cp	r1, r24
    5c3c:	19 06       	cpc	r1, r25
    5c3e:	5c f1       	brlt	.+86     	; 0x5c96 <_ZN4SRAM4pushEi+0x76>
		int *ram_memory=utils.arrint_shiftright(read_sram(),register_data,stack_tail_offset-stack_head_offset);
    5c40:	e4 80       	ldd	r14, Z+4	; 0x04
    5c42:	f5 80       	ldd	r15, Z+5	; 0x05
    5c44:	e8 1a       	sub	r14, r24
    5c46:	f9 0a       	sbc	r15, r25
    5c48:	c8 01       	movw	r24, r16
    5c4a:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <_ZN4SRAM9read_sramEv>
    5c4e:	97 01       	movw	r18, r14
    5c50:	ae 01       	movw	r20, r28
    5c52:	bc 01       	movw	r22, r24
    5c54:	c8 01       	movw	r24, r16
    5c56:	02 96       	adiw	r24, 0x02	; 2
    5c58:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <_ZN5Utils17arrint_shiftrightEPiii>
		for(int i=stack_head_offset;i<stack_tail_offset;i++) write(i,ram_memory[i]);
    5c5c:	f8 01       	movw	r30, r16
    5c5e:	c0 81       	ld	r28, Z
    5c60:	d1 81       	ldd	r29, Z+1	; 0x01
    5c62:	24 81       	ldd	r18, Z+4	; 0x04
    5c64:	35 81       	ldd	r19, Z+5	; 0x05
    5c66:	c2 17       	cp	r28, r18
    5c68:	d3 07       	cpc	r29, r19
    5c6a:	fc f4       	brge	.+62     	; 0x5caa <_ZN4SRAM4pushEi+0x8a>
    5c6c:	7e 01       	movw	r14, r28
    5c6e:	ee 0c       	add	r14, r14
    5c70:	ff 1c       	adc	r15, r15
    5c72:	e8 0e       	add	r14, r24
    5c74:	f9 1e       	adc	r15, r25
    5c76:	f7 01       	movw	r30, r14
    5c78:	41 91       	ld	r20, Z+
    5c7a:	51 91       	ld	r21, Z+
    5c7c:	7f 01       	movw	r14, r30
    5c7e:	be 01       	movw	r22, r28
    5c80:	c8 01       	movw	r24, r16
    5c82:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
    5c86:	21 96       	adiw	r28, 0x01	; 1
    5c88:	f8 01       	movw	r30, r16
    5c8a:	84 81       	ldd	r24, Z+4	; 0x04
    5c8c:	95 81       	ldd	r25, Z+5	; 0x05
    5c8e:	c8 17       	cp	r28, r24
    5c90:	d9 07       	cpc	r29, r25
    5c92:	8c f3       	brlt	.-30     	; 0x5c76 <_ZN4SRAM4pushEi+0x56>
    5c94:	0a c0       	rjmp	.+20     	; 0x5caa <_ZN4SRAM4pushEi+0x8a>
	}else{
		stack_head_offset--;
    5c96:	01 97       	sbiw	r24, 0x01	; 1
    5c98:	f8 01       	movw	r30, r16
    5c9a:	91 83       	std	Z+1, r25	; 0x01
    5c9c:	80 83       	st	Z, r24
		write(0,register_data);
    5c9e:	ae 01       	movw	r20, r28
    5ca0:	60 e0       	ldi	r22, 0x00	; 0
    5ca2:	70 e0       	ldi	r23, 0x00	; 0
    5ca4:	c8 01       	movw	r24, r16
    5ca6:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN4SRAM5writeEii>
	}
}
    5caa:	df 91       	pop	r29
    5cac:	cf 91       	pop	r28
    5cae:	1f 91       	pop	r17
    5cb0:	0f 91       	pop	r16
    5cb2:	ff 90       	pop	r15
    5cb4:	ef 90       	pop	r14
    5cb6:	08 95       	ret

00005cb8 <_ZN4SRAM7dumpmemEi>:
int* SRAM::read_sram(){
	int ram_memory[ADDRESS_MAX];
	for(int i=stack_head_offset;i<stack_tail_offset;i++) ram_memory[i]=read(i);
	return ram_memory;
}
void SRAM::dumpmem(int length){
    5cb8:	6f 92       	push	r6
    5cba:	7f 92       	push	r7
    5cbc:	8f 92       	push	r8
    5cbe:	9f 92       	push	r9
    5cc0:	af 92       	push	r10
    5cc2:	bf 92       	push	r11
    5cc4:	cf 92       	push	r12
    5cc6:	df 92       	push	r13
    5cc8:	ef 92       	push	r14
    5cca:	ff 92       	push	r15
    5ccc:	0f 93       	push	r16
    5cce:	1f 93       	push	r17
    5cd0:	cf 93       	push	r28
    5cd2:	df 93       	push	r29
    5cd4:	cd b7       	in	r28, 0x3d	; 61
    5cd6:	de b7       	in	r29, 0x3e	; 62
    5cd8:	a8 97       	sbiw	r28, 0x28	; 40
    5cda:	0f b6       	in	r0, 0x3f	; 63
    5cdc:	f8 94       	cli
    5cde:	de bf       	out	0x3e, r29	; 62
    5ce0:	0f be       	out	0x3f, r0	; 63
    5ce2:	cd bf       	out	0x3d, r28	; 61
    5ce4:	6c 01       	movw	r12, r24
    5ce6:	5b 01       	movw	r10, r22
	memory_management();
    5ce8:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <_ZN4SRAM17memory_managementEv>
	int head=0,tail=length;
	if(length<=0){head=stack_head_offset; tail=stack_tail_offset;}
    5cec:	1a 14       	cp	r1, r10
    5cee:	1b 04       	cpc	r1, r11
    5cf0:	84 f4       	brge	.+32     	; 0x5d12 <_ZN4SRAM7dumpmemEi+0x5a>
	for(int i=0;i<tail+head;i++){
    5cf2:	00 e0       	ldi	r16, 0x00	; 0
    5cf4:	10 e0       	ldi	r17, 0x00	; 0
		char mem_debug_str[40];
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
    5cf6:	0f 2e       	mov	r0, r31
    5cf8:	f9 e0       	ldi	r31, 0x09	; 9
    5cfa:	6f 2e       	mov	r6, r31
    5cfc:	f1 e0       	ldi	r31, 0x01	; 1
    5cfe:	7f 2e       	mov	r7, r31
    5d00:	f0 2d       	mov	r31, r0
    5d02:	ce 01       	movw	r24, r28
    5d04:	01 96       	adiw	r24, 0x01	; 1
    5d06:	7c 01       	movw	r14, r24
		serial.writestrln(mem_debug_str);
    5d08:	46 01       	movw	r8, r12
    5d0a:	93 e0       	ldi	r25, 0x03	; 3
    5d0c:	89 0e       	add	r8, r25
    5d0e:	91 1c       	adc	r9, r1
    5d10:	0b c0       	rjmp	.+22     	; 0x5d28 <_ZN4SRAM7dumpmemEi+0x70>
}
void SRAM::dumpmem(int length){
	memory_management();
	int head=0,tail=length;
	if(length<=0){head=stack_head_offset; tail=stack_tail_offset;}
	for(int i=0;i<tail+head;i++){
    5d12:	f6 01       	movw	r30, r12
    5d14:	a0 80       	ld	r10, Z
    5d16:	b1 80       	ldd	r11, Z+1	; 0x01
    5d18:	84 81       	ldd	r24, Z+4	; 0x04
    5d1a:	95 81       	ldd	r25, Z+5	; 0x05
    5d1c:	a8 0e       	add	r10, r24
    5d1e:	b9 1e       	adc	r11, r25
    5d20:	1a 14       	cp	r1, r10
    5d22:	1b 04       	cpc	r1, r11
    5d24:	34 f3       	brlt	.-52     	; 0x5cf2 <_ZN4SRAM7dumpmemEi+0x3a>
    5d26:	27 c0       	rjmp	.+78     	; 0x5d76 <_ZN4SRAM7dumpmemEi+0xbe>
		char mem_debug_str[40];
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
    5d28:	b8 01       	movw	r22, r16
    5d2a:	c6 01       	movw	r24, r12
    5d2c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN4SRAM4readEi>
    5d30:	28 2f       	mov	r18, r24
    5d32:	33 27       	eor	r19, r19
    5d34:	27 fd       	sbrc	r18, 7
    5d36:	30 95       	com	r19
    5d38:	3f 93       	push	r19
    5d3a:	8f 93       	push	r24
    5d3c:	f6 01       	movw	r30, r12
    5d3e:	80 81       	ld	r24, Z
    5d40:	91 81       	ldd	r25, Z+1	; 0x01
    5d42:	80 0f       	add	r24, r16
    5d44:	91 1f       	adc	r25, r17
    5d46:	9f 93       	push	r25
    5d48:	8f 93       	push	r24
    5d4a:	1f 93       	push	r17
    5d4c:	0f 93       	push	r16
    5d4e:	7f 92       	push	r7
    5d50:	6f 92       	push	r6
    5d52:	ff 92       	push	r15
    5d54:	ef 92       	push	r14
    5d56:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <sprintf>
		serial.writestrln(mem_debug_str);
    5d5a:	b7 01       	movw	r22, r14
    5d5c:	c4 01       	movw	r24, r8
    5d5e:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <_ZN6Serial10writestrlnEPc>
}
void SRAM::dumpmem(int length){
	memory_management();
	int head=0,tail=length;
	if(length<=0){head=stack_head_offset; tail=stack_tail_offset;}
	for(int i=0;i<tail+head;i++){
    5d62:	0f 5f       	subi	r16, 0xFF	; 255
    5d64:	1f 4f       	sbci	r17, 0xFF	; 255
    5d66:	0f b6       	in	r0, 0x3f	; 63
    5d68:	f8 94       	cli
    5d6a:	de bf       	out	0x3e, r29	; 62
    5d6c:	0f be       	out	0x3f, r0	; 63
    5d6e:	cd bf       	out	0x3d, r28	; 61
    5d70:	0a 15       	cp	r16, r10
    5d72:	1b 05       	cpc	r17, r11
    5d74:	cc f2       	brlt	.-78     	; 0x5d28 <_ZN4SRAM7dumpmemEi+0x70>
		char mem_debug_str[40];
		sprintf(mem_debug_str,"Address: %d (Off: %d) Data: %d",i,i+stack_head_offset,read(i));
		serial.writestrln(mem_debug_str);
	}
}
    5d76:	a8 96       	adiw	r28, 0x28	; 40
    5d78:	0f b6       	in	r0, 0x3f	; 63
    5d7a:	f8 94       	cli
    5d7c:	de bf       	out	0x3e, r29	; 62
    5d7e:	0f be       	out	0x3f, r0	; 63
    5d80:	cd bf       	out	0x3d, r28	; 61
    5d82:	df 91       	pop	r29
    5d84:	cf 91       	pop	r28
    5d86:	1f 91       	pop	r17
    5d88:	0f 91       	pop	r16
    5d8a:	ff 90       	pop	r15
    5d8c:	ef 90       	pop	r14
    5d8e:	df 90       	pop	r13
    5d90:	cf 90       	pop	r12
    5d92:	bf 90       	pop	r11
    5d94:	af 90       	pop	r10
    5d96:	9f 90       	pop	r9
    5d98:	8f 90       	pop	r8
    5d9a:	7f 90       	pop	r7
    5d9c:	6f 90       	pop	r6
    5d9e:	08 95       	ret

00005da0 <_ZN6SerialC1Ev>:
    5da0:	83 e3       	ldi	r24, 0x33	; 51
    5da2:	89 b9       	out	0x09, r24	; 9
    5da4:	10 bc       	out	0x20, r1	; 32
    5da6:	86 e8       	ldi	r24, 0x86	; 134
    5da8:	80 bd       	out	0x20, r24	; 32
    5daa:	88 e1       	ldi	r24, 0x18	; 24
    5dac:	8a b9       	out	0x0a, r24	; 10
    5dae:	08 95       	ret

00005db0 <_ZN6Serial4readEv>:
    5db0:	5f 9b       	sbis	0x0b, 7	; 11
    5db2:	fe cf       	rjmp	.-4      	; 0x5db0 <_ZN6Serial4readEv>
    5db4:	8c b1       	in	r24, 0x0c	; 12
    5db6:	08 95       	ret

00005db8 <_ZN6Serial5writeEc>:
    5db8:	5d 9b       	sbis	0x0b, 5	; 11
    5dba:	fe cf       	rjmp	.-4      	; 0x5db8 <_ZN6Serial5writeEc>
    5dbc:	6c b9       	out	0x0c, r22	; 12
    5dbe:	08 95       	ret

00005dc0 <_ZN6Serial8writestrEPc>:
    5dc0:	0f 93       	push	r16
    5dc2:	1f 93       	push	r17
    5dc4:	cf 93       	push	r28
    5dc6:	df 93       	push	r29
    5dc8:	8c 01       	movw	r16, r24
    5dca:	eb 01       	movw	r28, r22
    5dcc:	68 81       	ld	r22, Y
    5dce:	66 23       	and	r22, r22
    5dd0:	39 f0       	breq	.+14     	; 0x5de0 <_ZN6Serial8writestrEPc+0x20>
    5dd2:	21 96       	adiw	r28, 0x01	; 1
    5dd4:	c8 01       	movw	r24, r16
    5dd6:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <_ZN6Serial5writeEc>
    5dda:	69 91       	ld	r22, Y+
    5ddc:	61 11       	cpse	r22, r1
    5dde:	fa cf       	rjmp	.-12     	; 0x5dd4 <_ZN6Serial8writestrEPc+0x14>
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	1f 91       	pop	r17
    5de6:	0f 91       	pop	r16
    5de8:	08 95       	ret

00005dea <_ZN6Serial10writestrlnEPc>:
    5dea:	cf 93       	push	r28
    5dec:	df 93       	push	r29
    5dee:	ec 01       	movw	r28, r24
    5df0:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN6Serial8writestrEPc>
    5df4:	6d e0       	ldi	r22, 0x0D	; 13
    5df6:	ce 01       	movw	r24, r28
    5df8:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <_ZN6Serial5writeEc>
    5dfc:	df 91       	pop	r29
    5dfe:	cf 91       	pop	r28
    5e00:	08 95       	ret

00005e02 <_ZN5Utils10int2binstrEii>:
#include "utils.h"

char * Utils::int2binstr(int num,int strlength){
    5e02:	0f 93       	push	r16
    5e04:	1f 93       	push	r17
    5e06:	cf 93       	push	r28
    5e08:	df 93       	push	r29
    5e0a:	06 2f       	mov	r16, r22
    5e0c:	17 2f       	mov	r17, r23
    5e0e:	ea 01       	movw	r28, r20
	char * str = (char*)malloc(strlength + 1);
    5e10:	ca 01       	movw	r24, r20
    5e12:	01 96       	adiw	r24, 0x01	; 1
    5e14:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
	if(!str) return NULL;
    5e18:	00 97       	sbiw	r24, 0x00	; 0
    5e1a:	b9 f0       	breq	.+46     	; 0x5e4a <_ZN5Utils10int2binstrEii+0x48>
	str[strlength] = 0;
    5e1c:	fc 01       	movw	r30, r24
    5e1e:	ec 0f       	add	r30, r28
    5e20:	fd 1f       	adc	r31, r29
    5e22:	10 82       	st	Z, r1

	// type punning because signed shift is implementation-defined
	unsigned u = *(unsigned *)&num;
    5e24:	20 2f       	mov	r18, r16
    5e26:	31 2f       	mov	r19, r17
	for(; strlength--; u >>= 1)
    5e28:	be 01       	movw	r22, r28
    5e2a:	61 50       	subi	r22, 0x01	; 1
    5e2c:	71 09       	sbc	r23, r1
    5e2e:	cd 2b       	or	r28, r29
    5e30:	71 f0       	breq	.+28     	; 0x5e4e <_ZN5Utils10int2binstrEii+0x4c>
	str[strlength] = u & 1 ? '1' : '0';
    5e32:	20 ff       	sbrs	r18, 0
    5e34:	02 c0       	rjmp	.+4      	; 0x5e3a <_ZN5Utils10int2binstrEii+0x38>
    5e36:	41 e3       	ldi	r20, 0x31	; 49
    5e38:	01 c0       	rjmp	.+2      	; 0x5e3c <_ZN5Utils10int2binstrEii+0x3a>
    5e3a:	40 e3       	ldi	r20, 0x30	; 48
    5e3c:	42 93       	st	-Z, r20
	if(!str) return NULL;
	str[strlength] = 0;

	// type punning because signed shift is implementation-defined
	unsigned u = *(unsigned *)&num;
	for(; strlength--; u >>= 1)
    5e3e:	36 95       	lsr	r19
    5e40:	27 95       	ror	r18
    5e42:	61 50       	subi	r22, 0x01	; 1
    5e44:	71 09       	sbc	r23, r1
    5e46:	a8 f7       	brcc	.-22     	; 0x5e32 <_ZN5Utils10int2binstrEii+0x30>
    5e48:	02 c0       	rjmp	.+4      	; 0x5e4e <_ZN5Utils10int2binstrEii+0x4c>
#include "utils.h"

char * Utils::int2binstr(int num,int strlength){
	char * str = (char*)malloc(strlength + 1);
	if(!str) return NULL;
    5e4a:	80 e0       	ldi	r24, 0x00	; 0
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
	unsigned u = *(unsigned *)&num;
	for(; strlength--; u >>= 1)
	str[strlength] = u & 1 ? '1' : '0';

	return str;
}
    5e4e:	df 91       	pop	r29
    5e50:	cf 91       	pop	r28
    5e52:	1f 91       	pop	r17
    5e54:	0f 91       	pop	r16
    5e56:	08 95       	ret

00005e58 <_ZN5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* Utils::int2str(int dec){
    5e58:	0f 93       	push	r16
    5e5a:	1f 93       	push	r17
    5e5c:	cf 93       	push	r28
    5e5e:	df 93       	push	r29
    5e60:	cd b7       	in	r28, 0x3d	; 61
    5e62:	de b7       	in	r29, 0x3e	; 62
    5e64:	2a 97       	sbiw	r28, 0x0a	; 10
    5e66:	0f b6       	in	r0, 0x3f	; 63
    5e68:	f8 94       	cli
    5e6a:	de bf       	out	0x3e, r29	; 62
    5e6c:	0f be       	out	0x3f, r0	; 63
    5e6e:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	sprintf(str,"%d",dec);
    5e70:	7f 93       	push	r23
    5e72:	6f 93       	push	r22
    5e74:	85 e2       	ldi	r24, 0x25	; 37
    5e76:	91 e0       	ldi	r25, 0x01	; 1
    5e78:	9f 93       	push	r25
    5e7a:	8f 93       	push	r24
    5e7c:	8e 01       	movw	r16, r28
    5e7e:	0f 5f       	subi	r16, 0xFF	; 255
    5e80:	1f 4f       	sbci	r17, 0xFF	; 255
    5e82:	1f 93       	push	r17
    5e84:	0f 93       	push	r16
    5e86:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <sprintf>
	return str;
    5e8a:	0f 90       	pop	r0
    5e8c:	0f 90       	pop	r0
    5e8e:	0f 90       	pop	r0
    5e90:	0f 90       	pop	r0
    5e92:	0f 90       	pop	r0
    5e94:	0f 90       	pop	r0
}
    5e96:	c8 01       	movw	r24, r16
    5e98:	2a 96       	adiw	r28, 0x0a	; 10
    5e9a:	0f b6       	in	r0, 0x3f	; 63
    5e9c:	f8 94       	cli
    5e9e:	de bf       	out	0x3e, r29	; 62
    5ea0:	0f be       	out	0x3f, r0	; 63
    5ea2:	cd bf       	out	0x3d, r28	; 61
    5ea4:	df 91       	pop	r29
    5ea6:	cf 91       	pop	r28
    5ea8:	1f 91       	pop	r17
    5eaa:	0f 91       	pop	r16
    5eac:	08 95       	ret

00005eae <_ZN5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    5eae:	61 15       	cp	r22, r1
    5eb0:	71 05       	cpc	r23, r1
    5eb2:	51 f0       	breq	.+20     	; 0x5ec8 <_ZN5Utils5delayEi+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5eb4:	86 e6       	ldi	r24, 0x66	; 102
    5eb6:	9e e0       	ldi	r25, 0x0E	; 14
    5eb8:	01 97       	sbiw	r24, 0x01	; 1
    5eba:	f1 f7       	brne	.-4      	; 0x5eb8 <_ZN5Utils5delayEi+0xa>
    5ebc:	00 00       	nop
    5ebe:	61 50       	subi	r22, 0x01	; 1
    5ec0:	71 09       	sbc	r23, r1
    5ec2:	61 15       	cp	r22, r1
    5ec4:	71 05       	cpc	r23, r1
    5ec6:	b1 f7       	brne	.-20     	; 0x5eb4 <_ZN5Utils5delayEi+0x6>
}
    5ec8:	08 95       	ret

00005eca <_ZN5Utils10custom_powEfi>:
float Utils::custom_pow(float base,int exp){
    5eca:	cf 92       	push	r12
    5ecc:	df 92       	push	r13
    5ece:	ef 92       	push	r14
    5ed0:	ff 92       	push	r15
    5ed2:	0f 93       	push	r16
    5ed4:	1f 93       	push	r17
    5ed6:	cf 93       	push	r28
    5ed8:	df 93       	push	r29
    5eda:	6a 01       	movw	r12, r20
    5edc:	7b 01       	movw	r14, r22
    5ede:	89 01       	movw	r16, r18
	float result=1; for(int i=0;i<exp;i++) result*=base;
    5ee0:	12 16       	cp	r1, r18
    5ee2:	13 06       	cpc	r1, r19
    5ee4:	7c f4       	brge	.+30     	; 0x5f04 <_ZN5Utils10custom_powEfi+0x3a>
    5ee6:	c0 e0       	ldi	r28, 0x00	; 0
    5ee8:	d0 e0       	ldi	r29, 0x00	; 0
    5eea:	60 e0       	ldi	r22, 0x00	; 0
    5eec:	70 e0       	ldi	r23, 0x00	; 0
    5eee:	80 e8       	ldi	r24, 0x80	; 128
    5ef0:	9f e3       	ldi	r25, 0x3F	; 63
    5ef2:	a7 01       	movw	r20, r14
    5ef4:	96 01       	movw	r18, r12
    5ef6:	0e 94 0c 33 	call	0x6618	; 0x6618 <__mulsf3>
    5efa:	21 96       	adiw	r28, 0x01	; 1
    5efc:	c0 17       	cp	r28, r16
    5efe:	d1 07       	cpc	r29, r17
    5f00:	c1 f7       	brne	.-16     	; 0x5ef2 <_ZN5Utils10custom_powEfi+0x28>
    5f02:	04 c0       	rjmp	.+8      	; 0x5f0c <_ZN5Utils10custom_powEfi+0x42>
    5f04:	60 e0       	ldi	r22, 0x00	; 0
    5f06:	70 e0       	ldi	r23, 0x00	; 0
    5f08:	80 e8       	ldi	r24, 0x80	; 128
    5f0a:	9f e3       	ldi	r25, 0x3F	; 63
	return result;
}
    5f0c:	df 91       	pop	r29
    5f0e:	cf 91       	pop	r28
    5f10:	1f 91       	pop	r17
    5f12:	0f 91       	pop	r16
    5f14:	ff 90       	pop	r15
    5f16:	ef 90       	pop	r14
    5f18:	df 90       	pop	r13
    5f1a:	cf 90       	pop	r12
    5f1c:	08 95       	ret

00005f1e <_ZN5Utils17arrint_shiftrightEPiii>:
int * Utils::arrint_shiftright(int * arr,int newelem,int array_length){
    5f1e:	cf 92       	push	r12
    5f20:	df 92       	push	r13
    5f22:	ef 92       	push	r14
    5f24:	ff 92       	push	r15
    5f26:	0f 93       	push	r16
    5f28:	1f 93       	push	r17
    5f2a:	cf 93       	push	r28
    5f2c:	df 93       	push	r29
    5f2e:	7b 01       	movw	r14, r22
    5f30:	6a 01       	movw	r12, r20
    5f32:	e9 01       	movw	r28, r18
	int * new_array=(int*)malloc(sizeof(int)*array_length);
    5f34:	89 01       	movw	r16, r18
    5f36:	00 0f       	add	r16, r16
    5f38:	11 1f       	adc	r17, r17
    5f3a:	c8 01       	movw	r24, r16
    5f3c:	0e 94 0e 34 	call	0x681c	; 0x681c <malloc>
	int new_array_index=0;
	new_array[0]=newelem;
    5f40:	fc 01       	movw	r30, r24
    5f42:	d1 82       	std	Z+1, r13	; 0x01
    5f44:	c0 82       	st	Z, r12
	for(int i=0;i<array_length;i++) new_array[++new_array_index]=arr[i];
    5f46:	1c 16       	cp	r1, r28
    5f48:	1d 06       	cpc	r1, r29
    5f4a:	6c f4       	brge	.+26     	; 0x5f66 <_ZN5Utils17arrint_shiftrightEPiii+0x48>
    5f4c:	f7 01       	movw	r30, r14
    5f4e:	dc 01       	movw	r26, r24
    5f50:	12 96       	adiw	r26, 0x02	; 2
    5f52:	b7 01       	movw	r22, r14
    5f54:	60 0f       	add	r22, r16
    5f56:	71 1f       	adc	r23, r17
    5f58:	21 91       	ld	r18, Z+
    5f5a:	31 91       	ld	r19, Z+
    5f5c:	2d 93       	st	X+, r18
    5f5e:	3d 93       	st	X+, r19
    5f60:	e6 17       	cp	r30, r22
    5f62:	f7 07       	cpc	r31, r23
    5f64:	c9 f7       	brne	.-14     	; 0x5f58 <_ZN5Utils17arrint_shiftrightEPiii+0x3a>
	return new_array;
    5f66:	df 91       	pop	r29
    5f68:	cf 91       	pop	r28
    5f6a:	1f 91       	pop	r17
    5f6c:	0f 91       	pop	r16
    5f6e:	ff 90       	pop	r15
    5f70:	ef 90       	pop	r14
    5f72:	df 90       	pop	r13
    5f74:	cf 90       	pop	r12
    5f76:	08 95       	ret

00005f78 <acos>:
    5f78:	9f 93       	push	r25
    5f7a:	9f 77       	andi	r25, 0x7F	; 127
    5f7c:	a6 d1       	rcall	.+844    	; 0x62ca <__fp_arccos>
    5f7e:	0f 90       	pop	r0
    5f80:	00 20       	and	r0, r0
    5f82:	3a f4       	brpl	.+14     	; 0x5f92 <acos+0x1a>
    5f84:	90 58       	subi	r25, 0x80	; 128
    5f86:	a2 ea       	ldi	r26, 0xA2	; 162
    5f88:	2a ed       	ldi	r18, 0xDA	; 218
    5f8a:	3f e0       	ldi	r19, 0x0F	; 15
    5f8c:	49 e4       	ldi	r20, 0x49	; 73
    5f8e:	50 e4       	ldi	r21, 0x40	; 64
    5f90:	13 d0       	rcall	.+38     	; 0x5fb8 <__addsf3x>
    5f92:	3e c2       	rjmp	.+1148   	; 0x6410 <__fp_round>

00005f94 <__subsf3>:
    5f94:	50 58       	subi	r21, 0x80	; 128

00005f96 <__addsf3>:
    5f96:	bb 27       	eor	r27, r27
    5f98:	aa 27       	eor	r26, r26
    5f9a:	0e d0       	rcall	.+28     	; 0x5fb8 <__addsf3x>
    5f9c:	39 c2       	rjmp	.+1138   	; 0x6410 <__fp_round>
    5f9e:	02 d2       	rcall	.+1028   	; 0x63a4 <__fp_pscA>
    5fa0:	30 f0       	brcs	.+12     	; 0x5fae <__addsf3+0x18>
    5fa2:	07 d2       	rcall	.+1038   	; 0x63b2 <__fp_pscB>
    5fa4:	20 f0       	brcs	.+8      	; 0x5fae <__addsf3+0x18>
    5fa6:	31 f4       	brne	.+12     	; 0x5fb4 <__addsf3+0x1e>
    5fa8:	9f 3f       	cpi	r25, 0xFF	; 255
    5faa:	11 f4       	brne	.+4      	; 0x5fb0 <__addsf3+0x1a>
    5fac:	1e f4       	brtc	.+6      	; 0x5fb4 <__addsf3+0x1e>
    5fae:	d2 c1       	rjmp	.+932    	; 0x6354 <__fp_nan>
    5fb0:	0e f4       	brtc	.+2      	; 0x5fb4 <__addsf3+0x1e>
    5fb2:	e0 95       	com	r30
    5fb4:	e7 fb       	bst	r30, 7
    5fb6:	c8 c1       	rjmp	.+912    	; 0x6348 <__fp_inf>

00005fb8 <__addsf3x>:
    5fb8:	e9 2f       	mov	r30, r25
    5fba:	4c d2       	rcall	.+1176   	; 0x6454 <__fp_split3>
    5fbc:	80 f3       	brcs	.-32     	; 0x5f9e <__addsf3+0x8>
    5fbe:	ba 17       	cp	r27, r26
    5fc0:	62 07       	cpc	r22, r18
    5fc2:	73 07       	cpc	r23, r19
    5fc4:	84 07       	cpc	r24, r20
    5fc6:	95 07       	cpc	r25, r21
    5fc8:	18 f0       	brcs	.+6      	; 0x5fd0 <__addsf3x+0x18>
    5fca:	71 f4       	brne	.+28     	; 0x5fe8 <__addsf3x+0x30>
    5fcc:	9e f5       	brtc	.+102    	; 0x6034 <__addsf3x+0x7c>
    5fce:	64 c2       	rjmp	.+1224   	; 0x6498 <__fp_zero>
    5fd0:	0e f4       	brtc	.+2      	; 0x5fd4 <__addsf3x+0x1c>
    5fd2:	e0 95       	com	r30
    5fd4:	0b 2e       	mov	r0, r27
    5fd6:	ba 2f       	mov	r27, r26
    5fd8:	a0 2d       	mov	r26, r0
    5fda:	0b 01       	movw	r0, r22
    5fdc:	b9 01       	movw	r22, r18
    5fde:	90 01       	movw	r18, r0
    5fe0:	0c 01       	movw	r0, r24
    5fe2:	ca 01       	movw	r24, r20
    5fe4:	a0 01       	movw	r20, r0
    5fe6:	11 24       	eor	r1, r1
    5fe8:	ff 27       	eor	r31, r31
    5fea:	59 1b       	sub	r21, r25
    5fec:	99 f0       	breq	.+38     	; 0x6014 <__addsf3x+0x5c>
    5fee:	59 3f       	cpi	r21, 0xF9	; 249
    5ff0:	50 f4       	brcc	.+20     	; 0x6006 <__addsf3x+0x4e>
    5ff2:	50 3e       	cpi	r21, 0xE0	; 224
    5ff4:	68 f1       	brcs	.+90     	; 0x6050 <__addsf3x+0x98>
    5ff6:	1a 16       	cp	r1, r26
    5ff8:	f0 40       	sbci	r31, 0x00	; 0
    5ffa:	a2 2f       	mov	r26, r18
    5ffc:	23 2f       	mov	r18, r19
    5ffe:	34 2f       	mov	r19, r20
    6000:	44 27       	eor	r20, r20
    6002:	58 5f       	subi	r21, 0xF8	; 248
    6004:	f3 cf       	rjmp	.-26     	; 0x5fec <__addsf3x+0x34>
    6006:	46 95       	lsr	r20
    6008:	37 95       	ror	r19
    600a:	27 95       	ror	r18
    600c:	a7 95       	ror	r26
    600e:	f0 40       	sbci	r31, 0x00	; 0
    6010:	53 95       	inc	r21
    6012:	c9 f7       	brne	.-14     	; 0x6006 <__addsf3x+0x4e>
    6014:	7e f4       	brtc	.+30     	; 0x6034 <__addsf3x+0x7c>
    6016:	1f 16       	cp	r1, r31
    6018:	ba 0b       	sbc	r27, r26
    601a:	62 0b       	sbc	r22, r18
    601c:	73 0b       	sbc	r23, r19
    601e:	84 0b       	sbc	r24, r20
    6020:	ba f0       	brmi	.+46     	; 0x6050 <__addsf3x+0x98>
    6022:	91 50       	subi	r25, 0x01	; 1
    6024:	a1 f0       	breq	.+40     	; 0x604e <__addsf3x+0x96>
    6026:	ff 0f       	add	r31, r31
    6028:	bb 1f       	adc	r27, r27
    602a:	66 1f       	adc	r22, r22
    602c:	77 1f       	adc	r23, r23
    602e:	88 1f       	adc	r24, r24
    6030:	c2 f7       	brpl	.-16     	; 0x6022 <__addsf3x+0x6a>
    6032:	0e c0       	rjmp	.+28     	; 0x6050 <__addsf3x+0x98>
    6034:	ba 0f       	add	r27, r26
    6036:	62 1f       	adc	r22, r18
    6038:	73 1f       	adc	r23, r19
    603a:	84 1f       	adc	r24, r20
    603c:	48 f4       	brcc	.+18     	; 0x6050 <__addsf3x+0x98>
    603e:	87 95       	ror	r24
    6040:	77 95       	ror	r23
    6042:	67 95       	ror	r22
    6044:	b7 95       	ror	r27
    6046:	f7 95       	ror	r31
    6048:	9e 3f       	cpi	r25, 0xFE	; 254
    604a:	08 f0       	brcs	.+2      	; 0x604e <__addsf3x+0x96>
    604c:	b3 cf       	rjmp	.-154    	; 0x5fb4 <__addsf3+0x1e>
    604e:	93 95       	inc	r25
    6050:	88 0f       	add	r24, r24
    6052:	08 f0       	brcs	.+2      	; 0x6056 <__addsf3x+0x9e>
    6054:	99 27       	eor	r25, r25
    6056:	ee 0f       	add	r30, r30
    6058:	97 95       	ror	r25
    605a:	87 95       	ror	r24
    605c:	08 95       	ret

0000605e <atan>:
    605e:	df 93       	push	r29
    6060:	dd 27       	eor	r29, r29
    6062:	b9 2f       	mov	r27, r25
    6064:	bf 77       	andi	r27, 0x7F	; 127
    6066:	40 e8       	ldi	r20, 0x80	; 128
    6068:	5f e3       	ldi	r21, 0x3F	; 63
    606a:	16 16       	cp	r1, r22
    606c:	17 06       	cpc	r1, r23
    606e:	48 07       	cpc	r20, r24
    6070:	5b 07       	cpc	r21, r27
    6072:	10 f4       	brcc	.+4      	; 0x6078 <atan+0x1a>
    6074:	d9 2f       	mov	r29, r25
    6076:	1b d2       	rcall	.+1078   	; 0x64ae <inverse>
    6078:	9f 93       	push	r25
    607a:	8f 93       	push	r24
    607c:	7f 93       	push	r23
    607e:	6f 93       	push	r22
    6080:	76 d3       	rcall	.+1772   	; 0x676e <square>
    6082:	ee ec       	ldi	r30, 0xCE	; 206
    6084:	f0 e0       	ldi	r31, 0x00	; 0
    6086:	69 d1       	rcall	.+722    	; 0x635a <__fp_powser>
    6088:	c3 d1       	rcall	.+902    	; 0x6410 <__fp_round>
    608a:	2f 91       	pop	r18
    608c:	3f 91       	pop	r19
    608e:	4f 91       	pop	r20
    6090:	5f 91       	pop	r21
    6092:	ce d2       	rcall	.+1436   	; 0x6630 <__mulsf3x>
    6094:	dd 23       	and	r29, r29
    6096:	49 f0       	breq	.+18     	; 0x60aa <atan+0x4c>
    6098:	90 58       	subi	r25, 0x80	; 128
    609a:	a2 ea       	ldi	r26, 0xA2	; 162
    609c:	2a ed       	ldi	r18, 0xDA	; 218
    609e:	3f e0       	ldi	r19, 0x0F	; 15
    60a0:	49 ec       	ldi	r20, 0xC9	; 201
    60a2:	5f e3       	ldi	r21, 0x3F	; 63
    60a4:	d0 78       	andi	r29, 0x80	; 128
    60a6:	5d 27       	eor	r21, r29
    60a8:	87 df       	rcall	.-242    	; 0x5fb8 <__addsf3x>
    60aa:	df 91       	pop	r29
    60ac:	b1 c1       	rjmp	.+866    	; 0x6410 <__fp_round>

000060ae <__cmpsf2>:
    60ae:	28 d1       	rcall	.+592    	; 0x6300 <__fp_cmp>
    60b0:	08 f4       	brcc	.+2      	; 0x60b4 <__cmpsf2+0x6>
    60b2:	81 e0       	ldi	r24, 0x01	; 1
    60b4:	08 95       	ret

000060b6 <cos>:
    60b6:	85 d1       	rcall	.+778    	; 0x63c2 <__fp_rempio2>
    60b8:	e3 95       	inc	r30
    60ba:	bb c1       	rjmp	.+886    	; 0x6432 <__fp_sinus>

000060bc <__divsf3>:
    60bc:	0c d0       	rcall	.+24     	; 0x60d6 <__divsf3x>
    60be:	a8 c1       	rjmp	.+848    	; 0x6410 <__fp_round>
    60c0:	78 d1       	rcall	.+752    	; 0x63b2 <__fp_pscB>
    60c2:	40 f0       	brcs	.+16     	; 0x60d4 <__divsf3+0x18>
    60c4:	6f d1       	rcall	.+734    	; 0x63a4 <__fp_pscA>
    60c6:	30 f0       	brcs	.+12     	; 0x60d4 <__divsf3+0x18>
    60c8:	21 f4       	brne	.+8      	; 0x60d2 <__divsf3+0x16>
    60ca:	5f 3f       	cpi	r21, 0xFF	; 255
    60cc:	19 f0       	breq	.+6      	; 0x60d4 <__divsf3+0x18>
    60ce:	3c c1       	rjmp	.+632    	; 0x6348 <__fp_inf>
    60d0:	51 11       	cpse	r21, r1
    60d2:	e3 c1       	rjmp	.+966    	; 0x649a <__fp_szero>
    60d4:	3f c1       	rjmp	.+638    	; 0x6354 <__fp_nan>

000060d6 <__divsf3x>:
    60d6:	be d1       	rcall	.+892    	; 0x6454 <__fp_split3>
    60d8:	98 f3       	brcs	.-26     	; 0x60c0 <__divsf3+0x4>

000060da <__divsf3_pse>:
    60da:	99 23       	and	r25, r25
    60dc:	c9 f3       	breq	.-14     	; 0x60d0 <__divsf3+0x14>
    60de:	55 23       	and	r21, r21
    60e0:	b1 f3       	breq	.-20     	; 0x60ce <__divsf3+0x12>
    60e2:	95 1b       	sub	r25, r21
    60e4:	55 0b       	sbc	r21, r21
    60e6:	bb 27       	eor	r27, r27
    60e8:	aa 27       	eor	r26, r26
    60ea:	62 17       	cp	r22, r18
    60ec:	73 07       	cpc	r23, r19
    60ee:	84 07       	cpc	r24, r20
    60f0:	38 f0       	brcs	.+14     	; 0x6100 <__divsf3_pse+0x26>
    60f2:	9f 5f       	subi	r25, 0xFF	; 255
    60f4:	5f 4f       	sbci	r21, 0xFF	; 255
    60f6:	22 0f       	add	r18, r18
    60f8:	33 1f       	adc	r19, r19
    60fa:	44 1f       	adc	r20, r20
    60fc:	aa 1f       	adc	r26, r26
    60fe:	a9 f3       	breq	.-22     	; 0x60ea <__divsf3_pse+0x10>
    6100:	33 d0       	rcall	.+102    	; 0x6168 <__divsf3_pse+0x8e>
    6102:	0e 2e       	mov	r0, r30
    6104:	3a f0       	brmi	.+14     	; 0x6114 <__divsf3_pse+0x3a>
    6106:	e0 e8       	ldi	r30, 0x80	; 128
    6108:	30 d0       	rcall	.+96     	; 0x616a <__divsf3_pse+0x90>
    610a:	91 50       	subi	r25, 0x01	; 1
    610c:	50 40       	sbci	r21, 0x00	; 0
    610e:	e6 95       	lsr	r30
    6110:	00 1c       	adc	r0, r0
    6112:	ca f7       	brpl	.-14     	; 0x6106 <__divsf3_pse+0x2c>
    6114:	29 d0       	rcall	.+82     	; 0x6168 <__divsf3_pse+0x8e>
    6116:	fe 2f       	mov	r31, r30
    6118:	27 d0       	rcall	.+78     	; 0x6168 <__divsf3_pse+0x8e>
    611a:	66 0f       	add	r22, r22
    611c:	77 1f       	adc	r23, r23
    611e:	88 1f       	adc	r24, r24
    6120:	bb 1f       	adc	r27, r27
    6122:	26 17       	cp	r18, r22
    6124:	37 07       	cpc	r19, r23
    6126:	48 07       	cpc	r20, r24
    6128:	ab 07       	cpc	r26, r27
    612a:	b0 e8       	ldi	r27, 0x80	; 128
    612c:	09 f0       	breq	.+2      	; 0x6130 <__divsf3_pse+0x56>
    612e:	bb 0b       	sbc	r27, r27
    6130:	80 2d       	mov	r24, r0
    6132:	bf 01       	movw	r22, r30
    6134:	ff 27       	eor	r31, r31
    6136:	93 58       	subi	r25, 0x83	; 131
    6138:	5f 4f       	sbci	r21, 0xFF	; 255
    613a:	2a f0       	brmi	.+10     	; 0x6146 <__divsf3_pse+0x6c>
    613c:	9e 3f       	cpi	r25, 0xFE	; 254
    613e:	51 05       	cpc	r21, r1
    6140:	68 f0       	brcs	.+26     	; 0x615c <__divsf3_pse+0x82>
    6142:	02 c1       	rjmp	.+516    	; 0x6348 <__fp_inf>
    6144:	aa c1       	rjmp	.+852    	; 0x649a <__fp_szero>
    6146:	5f 3f       	cpi	r21, 0xFF	; 255
    6148:	ec f3       	brlt	.-6      	; 0x6144 <__divsf3_pse+0x6a>
    614a:	98 3e       	cpi	r25, 0xE8	; 232
    614c:	dc f3       	brlt	.-10     	; 0x6144 <__divsf3_pse+0x6a>
    614e:	86 95       	lsr	r24
    6150:	77 95       	ror	r23
    6152:	67 95       	ror	r22
    6154:	b7 95       	ror	r27
    6156:	f7 95       	ror	r31
    6158:	9f 5f       	subi	r25, 0xFF	; 255
    615a:	c9 f7       	brne	.-14     	; 0x614e <__divsf3_pse+0x74>
    615c:	88 0f       	add	r24, r24
    615e:	91 1d       	adc	r25, r1
    6160:	96 95       	lsr	r25
    6162:	87 95       	ror	r24
    6164:	97 f9       	bld	r25, 7
    6166:	08 95       	ret
    6168:	e1 e0       	ldi	r30, 0x01	; 1
    616a:	66 0f       	add	r22, r22
    616c:	77 1f       	adc	r23, r23
    616e:	88 1f       	adc	r24, r24
    6170:	bb 1f       	adc	r27, r27
    6172:	62 17       	cp	r22, r18
    6174:	73 07       	cpc	r23, r19
    6176:	84 07       	cpc	r24, r20
    6178:	ba 07       	cpc	r27, r26
    617a:	20 f0       	brcs	.+8      	; 0x6184 <__divsf3_pse+0xaa>
    617c:	62 1b       	sub	r22, r18
    617e:	73 0b       	sbc	r23, r19
    6180:	84 0b       	sbc	r24, r20
    6182:	ba 0b       	sbc	r27, r26
    6184:	ee 1f       	adc	r30, r30
    6186:	88 f7       	brcc	.-30     	; 0x616a <__divsf3_pse+0x90>
    6188:	e0 95       	com	r30
    618a:	08 95       	ret
    618c:	19 f4       	brne	.+6      	; 0x6194 <__divsf3_pse+0xba>
    618e:	0e f0       	brts	.+2      	; 0x6192 <__divsf3_pse+0xb8>
    6190:	db c0       	rjmp	.+438    	; 0x6348 <__fp_inf>
    6192:	82 c1       	rjmp	.+772    	; 0x6498 <__fp_zero>
    6194:	df c0       	rjmp	.+446    	; 0x6354 <__fp_nan>

00006196 <exp>:
    6196:	66 d1       	rcall	.+716    	; 0x6464 <__fp_splitA>
    6198:	c8 f3       	brcs	.-14     	; 0x618c <__divsf3_pse+0xb2>
    619a:	96 38       	cpi	r25, 0x86	; 134
    619c:	c0 f7       	brcc	.-16     	; 0x618e <__divsf3_pse+0xb4>
    619e:	07 f8       	bld	r0, 7
    61a0:	0f 92       	push	r0
    61a2:	e8 94       	clt
    61a4:	2b e3       	ldi	r18, 0x3B	; 59
    61a6:	3a ea       	ldi	r19, 0xAA	; 170
    61a8:	48 eb       	ldi	r20, 0xB8	; 184
    61aa:	5f e7       	ldi	r21, 0x7F	; 127
    61ac:	43 d2       	rcall	.+1158   	; 0x6634 <__mulsf3_pse>
    61ae:	0f 92       	push	r0
    61b0:	0f 92       	push	r0
    61b2:	0f 92       	push	r0
    61b4:	4d b7       	in	r20, 0x3d	; 61
    61b6:	5e b7       	in	r21, 0x3e	; 62
    61b8:	0f 92       	push	r0
    61ba:	fb d1       	rcall	.+1014   	; 0x65b2 <modf>
    61bc:	eb ef       	ldi	r30, 0xFB	; 251
    61be:	f0 e0       	ldi	r31, 0x00	; 0
    61c0:	cc d0       	rcall	.+408    	; 0x635a <__fp_powser>
    61c2:	4f 91       	pop	r20
    61c4:	5f 91       	pop	r21
    61c6:	ef 91       	pop	r30
    61c8:	ff 91       	pop	r31
    61ca:	e5 95       	asr	r30
    61cc:	ee 1f       	adc	r30, r30
    61ce:	ff 1f       	adc	r31, r31
    61d0:	49 f0       	breq	.+18     	; 0x61e4 <exp+0x4e>
    61d2:	fe 57       	subi	r31, 0x7E	; 126
    61d4:	e0 68       	ori	r30, 0x80	; 128
    61d6:	44 27       	eor	r20, r20
    61d8:	ee 0f       	add	r30, r30
    61da:	44 1f       	adc	r20, r20
    61dc:	fa 95       	dec	r31
    61de:	e1 f7       	brne	.-8      	; 0x61d8 <exp+0x42>
    61e0:	41 95       	neg	r20
    61e2:	55 0b       	sbc	r21, r21
    61e4:	6d d1       	rcall	.+730    	; 0x64c0 <ldexp>
    61e6:	0f 90       	pop	r0
    61e8:	07 fe       	sbrs	r0, 7
    61ea:	61 c1       	rjmp	.+706    	; 0x64ae <inverse>
    61ec:	08 95       	ret

000061ee <__fixsfsi>:
    61ee:	04 d0       	rcall	.+8      	; 0x61f8 <__fixunssfsi>
    61f0:	68 94       	set
    61f2:	b1 11       	cpse	r27, r1
    61f4:	52 c1       	rjmp	.+676    	; 0x649a <__fp_szero>
    61f6:	08 95       	ret

000061f8 <__fixunssfsi>:
    61f8:	35 d1       	rcall	.+618    	; 0x6464 <__fp_splitA>
    61fa:	88 f0       	brcs	.+34     	; 0x621e <__fixunssfsi+0x26>
    61fc:	9f 57       	subi	r25, 0x7F	; 127
    61fe:	90 f0       	brcs	.+36     	; 0x6224 <__fixunssfsi+0x2c>
    6200:	b9 2f       	mov	r27, r25
    6202:	99 27       	eor	r25, r25
    6204:	b7 51       	subi	r27, 0x17	; 23
    6206:	a0 f0       	brcs	.+40     	; 0x6230 <__fixunssfsi+0x38>
    6208:	d1 f0       	breq	.+52     	; 0x623e <__fixunssfsi+0x46>
    620a:	66 0f       	add	r22, r22
    620c:	77 1f       	adc	r23, r23
    620e:	88 1f       	adc	r24, r24
    6210:	99 1f       	adc	r25, r25
    6212:	1a f0       	brmi	.+6      	; 0x621a <__fixunssfsi+0x22>
    6214:	ba 95       	dec	r27
    6216:	c9 f7       	brne	.-14     	; 0x620a <__fixunssfsi+0x12>
    6218:	12 c0       	rjmp	.+36     	; 0x623e <__fixunssfsi+0x46>
    621a:	b1 30       	cpi	r27, 0x01	; 1
    621c:	81 f0       	breq	.+32     	; 0x623e <__fixunssfsi+0x46>
    621e:	3c d1       	rcall	.+632    	; 0x6498 <__fp_zero>
    6220:	b1 e0       	ldi	r27, 0x01	; 1
    6222:	08 95       	ret
    6224:	39 c1       	rjmp	.+626    	; 0x6498 <__fp_zero>
    6226:	67 2f       	mov	r22, r23
    6228:	78 2f       	mov	r23, r24
    622a:	88 27       	eor	r24, r24
    622c:	b8 5f       	subi	r27, 0xF8	; 248
    622e:	39 f0       	breq	.+14     	; 0x623e <__fixunssfsi+0x46>
    6230:	b9 3f       	cpi	r27, 0xF9	; 249
    6232:	cc f3       	brlt	.-14     	; 0x6226 <__fixunssfsi+0x2e>
    6234:	86 95       	lsr	r24
    6236:	77 95       	ror	r23
    6238:	67 95       	ror	r22
    623a:	b3 95       	inc	r27
    623c:	d9 f7       	brne	.-10     	; 0x6234 <__fixunssfsi+0x3c>
    623e:	3e f4       	brtc	.+14     	; 0x624e <__fixunssfsi+0x56>
    6240:	90 95       	com	r25
    6242:	80 95       	com	r24
    6244:	70 95       	com	r23
    6246:	61 95       	neg	r22
    6248:	7f 4f       	sbci	r23, 0xFF	; 255
    624a:	8f 4f       	sbci	r24, 0xFF	; 255
    624c:	9f 4f       	sbci	r25, 0xFF	; 255
    624e:	08 95       	ret

00006250 <__floatunsisf>:
    6250:	e8 94       	clt
    6252:	09 c0       	rjmp	.+18     	; 0x6266 <__floatsisf+0x12>

00006254 <__floatsisf>:
    6254:	97 fb       	bst	r25, 7
    6256:	3e f4       	brtc	.+14     	; 0x6266 <__floatsisf+0x12>
    6258:	90 95       	com	r25
    625a:	80 95       	com	r24
    625c:	70 95       	com	r23
    625e:	61 95       	neg	r22
    6260:	7f 4f       	sbci	r23, 0xFF	; 255
    6262:	8f 4f       	sbci	r24, 0xFF	; 255
    6264:	9f 4f       	sbci	r25, 0xFF	; 255
    6266:	99 23       	and	r25, r25
    6268:	a9 f0       	breq	.+42     	; 0x6294 <__floatsisf+0x40>
    626a:	f9 2f       	mov	r31, r25
    626c:	96 e9       	ldi	r25, 0x96	; 150
    626e:	bb 27       	eor	r27, r27
    6270:	93 95       	inc	r25
    6272:	f6 95       	lsr	r31
    6274:	87 95       	ror	r24
    6276:	77 95       	ror	r23
    6278:	67 95       	ror	r22
    627a:	b7 95       	ror	r27
    627c:	f1 11       	cpse	r31, r1
    627e:	f8 cf       	rjmp	.-16     	; 0x6270 <__floatsisf+0x1c>
    6280:	fa f4       	brpl	.+62     	; 0x62c0 <__floatsisf+0x6c>
    6282:	bb 0f       	add	r27, r27
    6284:	11 f4       	brne	.+4      	; 0x628a <__floatsisf+0x36>
    6286:	60 ff       	sbrs	r22, 0
    6288:	1b c0       	rjmp	.+54     	; 0x62c0 <__floatsisf+0x6c>
    628a:	6f 5f       	subi	r22, 0xFF	; 255
    628c:	7f 4f       	sbci	r23, 0xFF	; 255
    628e:	8f 4f       	sbci	r24, 0xFF	; 255
    6290:	9f 4f       	sbci	r25, 0xFF	; 255
    6292:	16 c0       	rjmp	.+44     	; 0x62c0 <__floatsisf+0x6c>
    6294:	88 23       	and	r24, r24
    6296:	11 f0       	breq	.+4      	; 0x629c <__floatsisf+0x48>
    6298:	96 e9       	ldi	r25, 0x96	; 150
    629a:	11 c0       	rjmp	.+34     	; 0x62be <__floatsisf+0x6a>
    629c:	77 23       	and	r23, r23
    629e:	21 f0       	breq	.+8      	; 0x62a8 <__floatsisf+0x54>
    62a0:	9e e8       	ldi	r25, 0x8E	; 142
    62a2:	87 2f       	mov	r24, r23
    62a4:	76 2f       	mov	r23, r22
    62a6:	05 c0       	rjmp	.+10     	; 0x62b2 <__floatsisf+0x5e>
    62a8:	66 23       	and	r22, r22
    62aa:	71 f0       	breq	.+28     	; 0x62c8 <__floatsisf+0x74>
    62ac:	96 e8       	ldi	r25, 0x86	; 134
    62ae:	86 2f       	mov	r24, r22
    62b0:	70 e0       	ldi	r23, 0x00	; 0
    62b2:	60 e0       	ldi	r22, 0x00	; 0
    62b4:	2a f0       	brmi	.+10     	; 0x62c0 <__floatsisf+0x6c>
    62b6:	9a 95       	dec	r25
    62b8:	66 0f       	add	r22, r22
    62ba:	77 1f       	adc	r23, r23
    62bc:	88 1f       	adc	r24, r24
    62be:	da f7       	brpl	.-10     	; 0x62b6 <__floatsisf+0x62>
    62c0:	88 0f       	add	r24, r24
    62c2:	96 95       	lsr	r25
    62c4:	87 95       	ror	r24
    62c6:	97 f9       	bld	r25, 7
    62c8:	08 95       	ret

000062ca <__fp_arccos>:
    62ca:	df 93       	push	r29
    62cc:	cf 93       	push	r28
    62ce:	1f 93       	push	r17
    62d0:	0f 93       	push	r16
    62d2:	8b 01       	movw	r16, r22
    62d4:	ec 01       	movw	r28, r24
    62d6:	e3 e2       	ldi	r30, 0x23	; 35
    62d8:	f1 e0       	ldi	r31, 0x01	; 1
    62da:	3f d0       	rcall	.+126    	; 0x635a <__fp_powser>
    62dc:	99 d0       	rcall	.+306    	; 0x6410 <__fp_round>
    62de:	98 01       	movw	r18, r16
    62e0:	ae 01       	movw	r20, r28
    62e2:	8b 01       	movw	r16, r22
    62e4:	ec 01       	movw	r28, r24
    62e6:	60 e0       	ldi	r22, 0x00	; 0
    62e8:	70 e0       	ldi	r23, 0x00	; 0
    62ea:	80 e8       	ldi	r24, 0x80	; 128
    62ec:	9f e3       	ldi	r25, 0x3F	; 63
    62ee:	52 de       	rcall	.-860    	; 0x5f94 <__subsf3>
    62f0:	00 d2       	rcall	.+1024   	; 0x66f2 <sqrt>
    62f2:	98 01       	movw	r18, r16
    62f4:	ae 01       	movw	r20, r28
    62f6:	0f 91       	pop	r16
    62f8:	1f 91       	pop	r17
    62fa:	cf 91       	pop	r28
    62fc:	df 91       	pop	r29
    62fe:	98 c1       	rjmp	.+816    	; 0x6630 <__mulsf3x>

00006300 <__fp_cmp>:
    6300:	99 0f       	add	r25, r25
    6302:	00 08       	sbc	r0, r0
    6304:	55 0f       	add	r21, r21
    6306:	aa 0b       	sbc	r26, r26
    6308:	e0 e8       	ldi	r30, 0x80	; 128
    630a:	fe ef       	ldi	r31, 0xFE	; 254
    630c:	16 16       	cp	r1, r22
    630e:	17 06       	cpc	r1, r23
    6310:	e8 07       	cpc	r30, r24
    6312:	f9 07       	cpc	r31, r25
    6314:	c0 f0       	brcs	.+48     	; 0x6346 <__fp_cmp+0x46>
    6316:	12 16       	cp	r1, r18
    6318:	13 06       	cpc	r1, r19
    631a:	e4 07       	cpc	r30, r20
    631c:	f5 07       	cpc	r31, r21
    631e:	98 f0       	brcs	.+38     	; 0x6346 <__fp_cmp+0x46>
    6320:	62 1b       	sub	r22, r18
    6322:	73 0b       	sbc	r23, r19
    6324:	84 0b       	sbc	r24, r20
    6326:	95 0b       	sbc	r25, r21
    6328:	39 f4       	brne	.+14     	; 0x6338 <__fp_cmp+0x38>
    632a:	0a 26       	eor	r0, r26
    632c:	61 f0       	breq	.+24     	; 0x6346 <__fp_cmp+0x46>
    632e:	23 2b       	or	r18, r19
    6330:	24 2b       	or	r18, r20
    6332:	25 2b       	or	r18, r21
    6334:	21 f4       	brne	.+8      	; 0x633e <__fp_cmp+0x3e>
    6336:	08 95       	ret
    6338:	0a 26       	eor	r0, r26
    633a:	09 f4       	brne	.+2      	; 0x633e <__fp_cmp+0x3e>
    633c:	a1 40       	sbci	r26, 0x01	; 1
    633e:	a6 95       	lsr	r26
    6340:	8f ef       	ldi	r24, 0xFF	; 255
    6342:	81 1d       	adc	r24, r1
    6344:	81 1d       	adc	r24, r1
    6346:	08 95       	ret

00006348 <__fp_inf>:
    6348:	97 f9       	bld	r25, 7
    634a:	9f 67       	ori	r25, 0x7F	; 127
    634c:	80 e8       	ldi	r24, 0x80	; 128
    634e:	70 e0       	ldi	r23, 0x00	; 0
    6350:	60 e0       	ldi	r22, 0x00	; 0
    6352:	08 95       	ret

00006354 <__fp_nan>:
    6354:	9f ef       	ldi	r25, 0xFF	; 255
    6356:	80 ec       	ldi	r24, 0xC0	; 192
    6358:	08 95       	ret

0000635a <__fp_powser>:
    635a:	df 93       	push	r29
    635c:	cf 93       	push	r28
    635e:	1f 93       	push	r17
    6360:	0f 93       	push	r16
    6362:	ff 92       	push	r15
    6364:	ef 92       	push	r14
    6366:	df 92       	push	r13
    6368:	7b 01       	movw	r14, r22
    636a:	8c 01       	movw	r16, r24
    636c:	68 94       	set
    636e:	05 c0       	rjmp	.+10     	; 0x637a <__fp_powser+0x20>
    6370:	da 2e       	mov	r13, r26
    6372:	ef 01       	movw	r28, r30
    6374:	5d d1       	rcall	.+698    	; 0x6630 <__mulsf3x>
    6376:	fe 01       	movw	r30, r28
    6378:	e8 94       	clt
    637a:	a5 91       	lpm	r26, Z+
    637c:	25 91       	lpm	r18, Z+
    637e:	35 91       	lpm	r19, Z+
    6380:	45 91       	lpm	r20, Z+
    6382:	55 91       	lpm	r21, Z+
    6384:	ae f3       	brts	.-22     	; 0x6370 <__fp_powser+0x16>
    6386:	ef 01       	movw	r28, r30
    6388:	17 de       	rcall	.-978    	; 0x5fb8 <__addsf3x>
    638a:	fe 01       	movw	r30, r28
    638c:	97 01       	movw	r18, r14
    638e:	a8 01       	movw	r20, r16
    6390:	da 94       	dec	r13
    6392:	79 f7       	brne	.-34     	; 0x6372 <__fp_powser+0x18>
    6394:	df 90       	pop	r13
    6396:	ef 90       	pop	r14
    6398:	ff 90       	pop	r15
    639a:	0f 91       	pop	r16
    639c:	1f 91       	pop	r17
    639e:	cf 91       	pop	r28
    63a0:	df 91       	pop	r29
    63a2:	08 95       	ret

000063a4 <__fp_pscA>:
    63a4:	00 24       	eor	r0, r0
    63a6:	0a 94       	dec	r0
    63a8:	16 16       	cp	r1, r22
    63aa:	17 06       	cpc	r1, r23
    63ac:	18 06       	cpc	r1, r24
    63ae:	09 06       	cpc	r0, r25
    63b0:	08 95       	ret

000063b2 <__fp_pscB>:
    63b2:	00 24       	eor	r0, r0
    63b4:	0a 94       	dec	r0
    63b6:	12 16       	cp	r1, r18
    63b8:	13 06       	cpc	r1, r19
    63ba:	14 06       	cpc	r1, r20
    63bc:	05 06       	cpc	r0, r21
    63be:	08 95       	ret
    63c0:	c9 cf       	rjmp	.-110    	; 0x6354 <__fp_nan>

000063c2 <__fp_rempio2>:
    63c2:	50 d0       	rcall	.+160    	; 0x6464 <__fp_splitA>
    63c4:	e8 f3       	brcs	.-6      	; 0x63c0 <__fp_pscB+0xe>
    63c6:	e8 94       	clt
    63c8:	e0 e0       	ldi	r30, 0x00	; 0
    63ca:	bb 27       	eor	r27, r27
    63cc:	9f 57       	subi	r25, 0x7F	; 127
    63ce:	f0 f0       	brcs	.+60     	; 0x640c <__fp_rempio2+0x4a>
    63d0:	2a ed       	ldi	r18, 0xDA	; 218
    63d2:	3f e0       	ldi	r19, 0x0F	; 15
    63d4:	49 ec       	ldi	r20, 0xC9	; 201
    63d6:	06 c0       	rjmp	.+12     	; 0x63e4 <__fp_rempio2+0x22>
    63d8:	ee 0f       	add	r30, r30
    63da:	bb 0f       	add	r27, r27
    63dc:	66 1f       	adc	r22, r22
    63de:	77 1f       	adc	r23, r23
    63e0:	88 1f       	adc	r24, r24
    63e2:	28 f0       	brcs	.+10     	; 0x63ee <__fp_rempio2+0x2c>
    63e4:	b2 3a       	cpi	r27, 0xA2	; 162
    63e6:	62 07       	cpc	r22, r18
    63e8:	73 07       	cpc	r23, r19
    63ea:	84 07       	cpc	r24, r20
    63ec:	28 f0       	brcs	.+10     	; 0x63f8 <__fp_rempio2+0x36>
    63ee:	b2 5a       	subi	r27, 0xA2	; 162
    63f0:	62 0b       	sbc	r22, r18
    63f2:	73 0b       	sbc	r23, r19
    63f4:	84 0b       	sbc	r24, r20
    63f6:	e3 95       	inc	r30
    63f8:	9a 95       	dec	r25
    63fa:	72 f7       	brpl	.-36     	; 0x63d8 <__fp_rempio2+0x16>
    63fc:	80 38       	cpi	r24, 0x80	; 128
    63fe:	30 f4       	brcc	.+12     	; 0x640c <__fp_rempio2+0x4a>
    6400:	9a 95       	dec	r25
    6402:	bb 0f       	add	r27, r27
    6404:	66 1f       	adc	r22, r22
    6406:	77 1f       	adc	r23, r23
    6408:	88 1f       	adc	r24, r24
    640a:	d2 f7       	brpl	.-12     	; 0x6400 <__fp_rempio2+0x3e>
    640c:	90 48       	sbci	r25, 0x80	; 128
    640e:	b4 c1       	rjmp	.+872    	; 0x6778 <__fp_mpack_finite>

00006410 <__fp_round>:
    6410:	09 2e       	mov	r0, r25
    6412:	03 94       	inc	r0
    6414:	00 0c       	add	r0, r0
    6416:	11 f4       	brne	.+4      	; 0x641c <__fp_round+0xc>
    6418:	88 23       	and	r24, r24
    641a:	52 f0       	brmi	.+20     	; 0x6430 <__fp_round+0x20>
    641c:	bb 0f       	add	r27, r27
    641e:	40 f4       	brcc	.+16     	; 0x6430 <__fp_round+0x20>
    6420:	bf 2b       	or	r27, r31
    6422:	11 f4       	brne	.+4      	; 0x6428 <__fp_round+0x18>
    6424:	60 ff       	sbrs	r22, 0
    6426:	04 c0       	rjmp	.+8      	; 0x6430 <__fp_round+0x20>
    6428:	6f 5f       	subi	r22, 0xFF	; 255
    642a:	7f 4f       	sbci	r23, 0xFF	; 255
    642c:	8f 4f       	sbci	r24, 0xFF	; 255
    642e:	9f 4f       	sbci	r25, 0xFF	; 255
    6430:	08 95       	ret

00006432 <__fp_sinus>:
    6432:	ef 93       	push	r30
    6434:	e0 ff       	sbrs	r30, 0
    6436:	06 c0       	rjmp	.+12     	; 0x6444 <__fp_sinus+0x12>
    6438:	a2 ea       	ldi	r26, 0xA2	; 162
    643a:	2a ed       	ldi	r18, 0xDA	; 218
    643c:	3f e0       	ldi	r19, 0x0F	; 15
    643e:	49 ec       	ldi	r20, 0xC9	; 201
    6440:	5f eb       	ldi	r21, 0xBF	; 191
    6442:	ba dd       	rcall	.-1164   	; 0x5fb8 <__addsf3x>
    6444:	e5 df       	rcall	.-54     	; 0x6410 <__fp_round>
    6446:	0f 90       	pop	r0
    6448:	03 94       	inc	r0
    644a:	01 fc       	sbrc	r0, 1
    644c:	90 58       	subi	r25, 0x80	; 128
    644e:	eb e4       	ldi	r30, 0x4B	; 75
    6450:	f1 e0       	ldi	r31, 0x01	; 1
    6452:	a5 c1       	rjmp	.+842    	; 0x679e <__fp_powsodd>

00006454 <__fp_split3>:
    6454:	57 fd       	sbrc	r21, 7
    6456:	90 58       	subi	r25, 0x80	; 128
    6458:	44 0f       	add	r20, r20
    645a:	55 1f       	adc	r21, r21
    645c:	59 f0       	breq	.+22     	; 0x6474 <__fp_splitA+0x10>
    645e:	5f 3f       	cpi	r21, 0xFF	; 255
    6460:	71 f0       	breq	.+28     	; 0x647e <__fp_splitA+0x1a>
    6462:	47 95       	ror	r20

00006464 <__fp_splitA>:
    6464:	88 0f       	add	r24, r24
    6466:	97 fb       	bst	r25, 7
    6468:	99 1f       	adc	r25, r25
    646a:	61 f0       	breq	.+24     	; 0x6484 <__fp_splitA+0x20>
    646c:	9f 3f       	cpi	r25, 0xFF	; 255
    646e:	79 f0       	breq	.+30     	; 0x648e <__fp_splitA+0x2a>
    6470:	87 95       	ror	r24
    6472:	08 95       	ret
    6474:	12 16       	cp	r1, r18
    6476:	13 06       	cpc	r1, r19
    6478:	14 06       	cpc	r1, r20
    647a:	55 1f       	adc	r21, r21
    647c:	f2 cf       	rjmp	.-28     	; 0x6462 <__fp_split3+0xe>
    647e:	46 95       	lsr	r20
    6480:	f1 df       	rcall	.-30     	; 0x6464 <__fp_splitA>
    6482:	08 c0       	rjmp	.+16     	; 0x6494 <__fp_splitA+0x30>
    6484:	16 16       	cp	r1, r22
    6486:	17 06       	cpc	r1, r23
    6488:	18 06       	cpc	r1, r24
    648a:	99 1f       	adc	r25, r25
    648c:	f1 cf       	rjmp	.-30     	; 0x6470 <__fp_splitA+0xc>
    648e:	86 95       	lsr	r24
    6490:	71 05       	cpc	r23, r1
    6492:	61 05       	cpc	r22, r1
    6494:	08 94       	sec
    6496:	08 95       	ret

00006498 <__fp_zero>:
    6498:	e8 94       	clt

0000649a <__fp_szero>:
    649a:	bb 27       	eor	r27, r27
    649c:	66 27       	eor	r22, r22
    649e:	77 27       	eor	r23, r23
    64a0:	cb 01       	movw	r24, r22
    64a2:	97 f9       	bld	r25, 7
    64a4:	08 95       	ret

000064a6 <__gesf2>:
    64a6:	2c df       	rcall	.-424    	; 0x6300 <__fp_cmp>
    64a8:	08 f4       	brcc	.+2      	; 0x64ac <__gesf2+0x6>
    64aa:	8f ef       	ldi	r24, 0xFF	; 255
    64ac:	08 95       	ret

000064ae <inverse>:
    64ae:	9b 01       	movw	r18, r22
    64b0:	ac 01       	movw	r20, r24
    64b2:	60 e0       	ldi	r22, 0x00	; 0
    64b4:	70 e0       	ldi	r23, 0x00	; 0
    64b6:	80 e8       	ldi	r24, 0x80	; 128
    64b8:	9f e3       	ldi	r25, 0x3F	; 63
    64ba:	00 ce       	rjmp	.-1024   	; 0x60bc <__divsf3>
    64bc:	45 cf       	rjmp	.-374    	; 0x6348 <__fp_inf>
    64be:	5a c1       	rjmp	.+692    	; 0x6774 <__fp_mpack>

000064c0 <ldexp>:
    64c0:	d1 df       	rcall	.-94     	; 0x6464 <__fp_splitA>
    64c2:	e8 f3       	brcs	.-6      	; 0x64be <inverse+0x10>
    64c4:	99 23       	and	r25, r25
    64c6:	d9 f3       	breq	.-10     	; 0x64be <inverse+0x10>
    64c8:	94 0f       	add	r25, r20
    64ca:	51 1d       	adc	r21, r1
    64cc:	bb f3       	brvs	.-18     	; 0x64bc <inverse+0xe>
    64ce:	91 50       	subi	r25, 0x01	; 1
    64d0:	50 40       	sbci	r21, 0x00	; 0
    64d2:	94 f0       	brlt	.+36     	; 0x64f8 <ldexp+0x38>
    64d4:	59 f0       	breq	.+22     	; 0x64ec <ldexp+0x2c>
    64d6:	88 23       	and	r24, r24
    64d8:	32 f0       	brmi	.+12     	; 0x64e6 <ldexp+0x26>
    64da:	66 0f       	add	r22, r22
    64dc:	77 1f       	adc	r23, r23
    64de:	88 1f       	adc	r24, r24
    64e0:	91 50       	subi	r25, 0x01	; 1
    64e2:	50 40       	sbci	r21, 0x00	; 0
    64e4:	c1 f7       	brne	.-16     	; 0x64d6 <ldexp+0x16>
    64e6:	9e 3f       	cpi	r25, 0xFE	; 254
    64e8:	51 05       	cpc	r21, r1
    64ea:	44 f7       	brge	.-48     	; 0x64bc <inverse+0xe>
    64ec:	88 0f       	add	r24, r24
    64ee:	91 1d       	adc	r25, r1
    64f0:	96 95       	lsr	r25
    64f2:	87 95       	ror	r24
    64f4:	97 f9       	bld	r25, 7
    64f6:	08 95       	ret
    64f8:	5f 3f       	cpi	r21, 0xFF	; 255
    64fa:	ac f0       	brlt	.+42     	; 0x6526 <ldexp+0x66>
    64fc:	98 3e       	cpi	r25, 0xE8	; 232
    64fe:	9c f0       	brlt	.+38     	; 0x6526 <ldexp+0x66>
    6500:	bb 27       	eor	r27, r27
    6502:	86 95       	lsr	r24
    6504:	77 95       	ror	r23
    6506:	67 95       	ror	r22
    6508:	b7 95       	ror	r27
    650a:	08 f4       	brcc	.+2      	; 0x650e <ldexp+0x4e>
    650c:	b1 60       	ori	r27, 0x01	; 1
    650e:	93 95       	inc	r25
    6510:	c1 f7       	brne	.-16     	; 0x6502 <ldexp+0x42>
    6512:	bb 0f       	add	r27, r27
    6514:	58 f7       	brcc	.-42     	; 0x64ec <ldexp+0x2c>
    6516:	11 f4       	brne	.+4      	; 0x651c <ldexp+0x5c>
    6518:	60 ff       	sbrs	r22, 0
    651a:	e8 cf       	rjmp	.-48     	; 0x64ec <ldexp+0x2c>
    651c:	6f 5f       	subi	r22, 0xFF	; 255
    651e:	7f 4f       	sbci	r23, 0xFF	; 255
    6520:	8f 4f       	sbci	r24, 0xFF	; 255
    6522:	9f 4f       	sbci	r25, 0xFF	; 255
    6524:	e3 cf       	rjmp	.-58     	; 0x64ec <ldexp+0x2c>
    6526:	b9 cf       	rjmp	.-142    	; 0x649a <__fp_szero>
    6528:	0e f0       	brts	.+2      	; 0x652c <ldexp+0x6c>
    652a:	24 c1       	rjmp	.+584    	; 0x6774 <__fp_mpack>
    652c:	13 cf       	rjmp	.-474    	; 0x6354 <__fp_nan>
    652e:	68 94       	set
    6530:	0b cf       	rjmp	.-490    	; 0x6348 <__fp_inf>

00006532 <log>:
    6532:	98 df       	rcall	.-208    	; 0x6464 <__fp_splitA>
    6534:	c8 f3       	brcs	.-14     	; 0x6528 <ldexp+0x68>
    6536:	99 23       	and	r25, r25
    6538:	d1 f3       	breq	.-12     	; 0x652e <ldexp+0x6e>
    653a:	c6 f3       	brts	.-16     	; 0x652c <ldexp+0x6c>
    653c:	df 93       	push	r29
    653e:	cf 93       	push	r28
    6540:	1f 93       	push	r17
    6542:	0f 93       	push	r16
    6544:	ff 92       	push	r15
    6546:	c9 2f       	mov	r28, r25
    6548:	dd 27       	eor	r29, r29
    654a:	88 23       	and	r24, r24
    654c:	2a f0       	brmi	.+10     	; 0x6558 <log+0x26>
    654e:	21 97       	sbiw	r28, 0x01	; 1
    6550:	66 0f       	add	r22, r22
    6552:	77 1f       	adc	r23, r23
    6554:	88 1f       	adc	r24, r24
    6556:	da f7       	brpl	.-10     	; 0x654e <log+0x1c>
    6558:	20 e0       	ldi	r18, 0x00	; 0
    655a:	30 e0       	ldi	r19, 0x00	; 0
    655c:	40 e8       	ldi	r20, 0x80	; 128
    655e:	5f eb       	ldi	r21, 0xBF	; 191
    6560:	9f e3       	ldi	r25, 0x3F	; 63
    6562:	88 39       	cpi	r24, 0x98	; 152
    6564:	20 f0       	brcs	.+8      	; 0x656e <log+0x3c>
    6566:	80 3e       	cpi	r24, 0xE0	; 224
    6568:	30 f0       	brcs	.+12     	; 0x6576 <log+0x44>
    656a:	21 96       	adiw	r28, 0x01	; 1
    656c:	8f 77       	andi	r24, 0x7F	; 127
    656e:	13 dd       	rcall	.-1498   	; 0x5f96 <__addsf3>
    6570:	e9 e6       	ldi	r30, 0x69	; 105
    6572:	f1 e0       	ldi	r31, 0x01	; 1
    6574:	03 c0       	rjmp	.+6      	; 0x657c <log+0x4a>
    6576:	0f dd       	rcall	.-1506   	; 0x5f96 <__addsf3>
    6578:	e6 e9       	ldi	r30, 0x96	; 150
    657a:	f1 e0       	ldi	r31, 0x01	; 1
    657c:	ee de       	rcall	.-548    	; 0x635a <__fp_powser>
    657e:	8b 01       	movw	r16, r22
    6580:	be 01       	movw	r22, r28
    6582:	ec 01       	movw	r28, r24
    6584:	fb 2e       	mov	r15, r27
    6586:	6f 57       	subi	r22, 0x7F	; 127
    6588:	71 09       	sbc	r23, r1
    658a:	75 95       	asr	r23
    658c:	77 1f       	adc	r23, r23
    658e:	88 0b       	sbc	r24, r24
    6590:	99 0b       	sbc	r25, r25
    6592:	60 de       	rcall	.-832    	; 0x6254 <__floatsisf>
    6594:	28 e1       	ldi	r18, 0x18	; 24
    6596:	32 e7       	ldi	r19, 0x72	; 114
    6598:	41 e3       	ldi	r20, 0x31	; 49
    659a:	5f e3       	ldi	r21, 0x3F	; 63
    659c:	49 d0       	rcall	.+146    	; 0x6630 <__mulsf3x>
    659e:	af 2d       	mov	r26, r15
    65a0:	98 01       	movw	r18, r16
    65a2:	ae 01       	movw	r20, r28
    65a4:	ff 90       	pop	r15
    65a6:	0f 91       	pop	r16
    65a8:	1f 91       	pop	r17
    65aa:	cf 91       	pop	r28
    65ac:	df 91       	pop	r29
    65ae:	04 dd       	rcall	.-1528   	; 0x5fb8 <__addsf3x>
    65b0:	2f cf       	rjmp	.-418    	; 0x6410 <__fp_round>

000065b2 <modf>:
    65b2:	fa 01       	movw	r30, r20
    65b4:	dc 01       	movw	r26, r24
    65b6:	aa 0f       	add	r26, r26
    65b8:	bb 1f       	adc	r27, r27
    65ba:	9b 01       	movw	r18, r22
    65bc:	ac 01       	movw	r20, r24
    65be:	bf 57       	subi	r27, 0x7F	; 127
    65c0:	28 f4       	brcc	.+10     	; 0x65cc <modf+0x1a>
    65c2:	22 27       	eor	r18, r18
    65c4:	33 27       	eor	r19, r19
    65c6:	44 27       	eor	r20, r20
    65c8:	50 78       	andi	r21, 0x80	; 128
    65ca:	1f c0       	rjmp	.+62     	; 0x660a <modf+0x58>
    65cc:	b7 51       	subi	r27, 0x17	; 23
    65ce:	88 f4       	brcc	.+34     	; 0x65f2 <modf+0x40>
    65d0:	ab 2f       	mov	r26, r27
    65d2:	00 24       	eor	r0, r0
    65d4:	46 95       	lsr	r20
    65d6:	37 95       	ror	r19
    65d8:	27 95       	ror	r18
    65da:	01 1c       	adc	r0, r1
    65dc:	a3 95       	inc	r26
    65de:	d2 f3       	brmi	.-12     	; 0x65d4 <modf+0x22>
    65e0:	00 20       	and	r0, r0
    65e2:	69 f0       	breq	.+26     	; 0x65fe <modf+0x4c>
    65e4:	22 0f       	add	r18, r18
    65e6:	33 1f       	adc	r19, r19
    65e8:	44 1f       	adc	r20, r20
    65ea:	b3 95       	inc	r27
    65ec:	da f3       	brmi	.-10     	; 0x65e4 <modf+0x32>
    65ee:	0d d0       	rcall	.+26     	; 0x660a <modf+0x58>
    65f0:	d1 cc       	rjmp	.-1630   	; 0x5f94 <__subsf3>
    65f2:	61 30       	cpi	r22, 0x01	; 1
    65f4:	71 05       	cpc	r23, r1
    65f6:	a0 e8       	ldi	r26, 0x80	; 128
    65f8:	8a 07       	cpc	r24, r26
    65fa:	b9 46       	sbci	r27, 0x69	; 105
    65fc:	30 f4       	brcc	.+12     	; 0x660a <modf+0x58>
    65fe:	9b 01       	movw	r18, r22
    6600:	ac 01       	movw	r20, r24
    6602:	66 27       	eor	r22, r22
    6604:	77 27       	eor	r23, r23
    6606:	88 27       	eor	r24, r24
    6608:	90 78       	andi	r25, 0x80	; 128
    660a:	30 96       	adiw	r30, 0x00	; 0
    660c:	21 f0       	breq	.+8      	; 0x6616 <modf+0x64>
    660e:	20 83       	st	Z, r18
    6610:	31 83       	std	Z+1, r19	; 0x01
    6612:	42 83       	std	Z+2, r20	; 0x02
    6614:	53 83       	std	Z+3, r21	; 0x03
    6616:	08 95       	ret

00006618 <__mulsf3>:
    6618:	0b d0       	rcall	.+22     	; 0x6630 <__mulsf3x>
    661a:	fa ce       	rjmp	.-524    	; 0x6410 <__fp_round>
    661c:	c3 de       	rcall	.-634    	; 0x63a4 <__fp_pscA>
    661e:	28 f0       	brcs	.+10     	; 0x662a <__mulsf3+0x12>
    6620:	c8 de       	rcall	.-624    	; 0x63b2 <__fp_pscB>
    6622:	18 f0       	brcs	.+6      	; 0x662a <__mulsf3+0x12>
    6624:	95 23       	and	r25, r21
    6626:	09 f0       	breq	.+2      	; 0x662a <__mulsf3+0x12>
    6628:	8f ce       	rjmp	.-738    	; 0x6348 <__fp_inf>
    662a:	94 ce       	rjmp	.-728    	; 0x6354 <__fp_nan>
    662c:	11 24       	eor	r1, r1
    662e:	35 cf       	rjmp	.-406    	; 0x649a <__fp_szero>

00006630 <__mulsf3x>:
    6630:	11 df       	rcall	.-478    	; 0x6454 <__fp_split3>
    6632:	a0 f3       	brcs	.-24     	; 0x661c <__mulsf3+0x4>

00006634 <__mulsf3_pse>:
    6634:	95 9f       	mul	r25, r21
    6636:	d1 f3       	breq	.-12     	; 0x662c <__mulsf3+0x14>
    6638:	95 0f       	add	r25, r21
    663a:	50 e0       	ldi	r21, 0x00	; 0
    663c:	55 1f       	adc	r21, r21
    663e:	62 9f       	mul	r22, r18
    6640:	f0 01       	movw	r30, r0
    6642:	72 9f       	mul	r23, r18
    6644:	bb 27       	eor	r27, r27
    6646:	f0 0d       	add	r31, r0
    6648:	b1 1d       	adc	r27, r1
    664a:	63 9f       	mul	r22, r19
    664c:	aa 27       	eor	r26, r26
    664e:	f0 0d       	add	r31, r0
    6650:	b1 1d       	adc	r27, r1
    6652:	aa 1f       	adc	r26, r26
    6654:	64 9f       	mul	r22, r20
    6656:	66 27       	eor	r22, r22
    6658:	b0 0d       	add	r27, r0
    665a:	a1 1d       	adc	r26, r1
    665c:	66 1f       	adc	r22, r22
    665e:	82 9f       	mul	r24, r18
    6660:	22 27       	eor	r18, r18
    6662:	b0 0d       	add	r27, r0
    6664:	a1 1d       	adc	r26, r1
    6666:	62 1f       	adc	r22, r18
    6668:	73 9f       	mul	r23, r19
    666a:	b0 0d       	add	r27, r0
    666c:	a1 1d       	adc	r26, r1
    666e:	62 1f       	adc	r22, r18
    6670:	83 9f       	mul	r24, r19
    6672:	a0 0d       	add	r26, r0
    6674:	61 1d       	adc	r22, r1
    6676:	22 1f       	adc	r18, r18
    6678:	74 9f       	mul	r23, r20
    667a:	33 27       	eor	r19, r19
    667c:	a0 0d       	add	r26, r0
    667e:	61 1d       	adc	r22, r1
    6680:	23 1f       	adc	r18, r19
    6682:	84 9f       	mul	r24, r20
    6684:	60 0d       	add	r22, r0
    6686:	21 1d       	adc	r18, r1
    6688:	82 2f       	mov	r24, r18
    668a:	76 2f       	mov	r23, r22
    668c:	6a 2f       	mov	r22, r26
    668e:	11 24       	eor	r1, r1
    6690:	9f 57       	subi	r25, 0x7F	; 127
    6692:	50 40       	sbci	r21, 0x00	; 0
    6694:	8a f0       	brmi	.+34     	; 0x66b8 <__mulsf3_pse+0x84>
    6696:	e1 f0       	breq	.+56     	; 0x66d0 <__mulsf3_pse+0x9c>
    6698:	88 23       	and	r24, r24
    669a:	4a f0       	brmi	.+18     	; 0x66ae <__mulsf3_pse+0x7a>
    669c:	ee 0f       	add	r30, r30
    669e:	ff 1f       	adc	r31, r31
    66a0:	bb 1f       	adc	r27, r27
    66a2:	66 1f       	adc	r22, r22
    66a4:	77 1f       	adc	r23, r23
    66a6:	88 1f       	adc	r24, r24
    66a8:	91 50       	subi	r25, 0x01	; 1
    66aa:	50 40       	sbci	r21, 0x00	; 0
    66ac:	a9 f7       	brne	.-22     	; 0x6698 <__mulsf3_pse+0x64>
    66ae:	9e 3f       	cpi	r25, 0xFE	; 254
    66b0:	51 05       	cpc	r21, r1
    66b2:	70 f0       	brcs	.+28     	; 0x66d0 <__mulsf3_pse+0x9c>
    66b4:	49 ce       	rjmp	.-878    	; 0x6348 <__fp_inf>
    66b6:	f1 ce       	rjmp	.-542    	; 0x649a <__fp_szero>
    66b8:	5f 3f       	cpi	r21, 0xFF	; 255
    66ba:	ec f3       	brlt	.-6      	; 0x66b6 <__mulsf3_pse+0x82>
    66bc:	98 3e       	cpi	r25, 0xE8	; 232
    66be:	dc f3       	brlt	.-10     	; 0x66b6 <__mulsf3_pse+0x82>
    66c0:	86 95       	lsr	r24
    66c2:	77 95       	ror	r23
    66c4:	67 95       	ror	r22
    66c6:	b7 95       	ror	r27
    66c8:	f7 95       	ror	r31
    66ca:	e7 95       	ror	r30
    66cc:	9f 5f       	subi	r25, 0xFF	; 255
    66ce:	c1 f7       	brne	.-16     	; 0x66c0 <__mulsf3_pse+0x8c>
    66d0:	fe 2b       	or	r31, r30
    66d2:	88 0f       	add	r24, r24
    66d4:	91 1d       	adc	r25, r1
    66d6:	96 95       	lsr	r25
    66d8:	87 95       	ror	r24
    66da:	97 f9       	bld	r25, 7
    66dc:	08 95       	ret

000066de <sin>:
    66de:	9f 93       	push	r25
    66e0:	70 de       	rcall	.-800    	; 0x63c2 <__fp_rempio2>
    66e2:	0f 90       	pop	r0
    66e4:	07 fc       	sbrc	r0, 7
    66e6:	ee 5f       	subi	r30, 0xFE	; 254
    66e8:	a4 ce       	rjmp	.-696    	; 0x6432 <__fp_sinus>
    66ea:	11 f4       	brne	.+4      	; 0x66f0 <sin+0x12>
    66ec:	0e f4       	brtc	.+2      	; 0x66f0 <sin+0x12>
    66ee:	32 ce       	rjmp	.-924    	; 0x6354 <__fp_nan>
    66f0:	41 c0       	rjmp	.+130    	; 0x6774 <__fp_mpack>

000066f2 <sqrt>:
    66f2:	b8 de       	rcall	.-656    	; 0x6464 <__fp_splitA>
    66f4:	d0 f3       	brcs	.-12     	; 0x66ea <sin+0xc>
    66f6:	99 23       	and	r25, r25
    66f8:	d9 f3       	breq	.-10     	; 0x66f0 <sin+0x12>
    66fa:	ce f3       	brts	.-14     	; 0x66ee <sin+0x10>
    66fc:	9f 57       	subi	r25, 0x7F	; 127
    66fe:	55 0b       	sbc	r21, r21
    6700:	87 ff       	sbrs	r24, 7
    6702:	46 d0       	rcall	.+140    	; 0x6790 <__fp_norm2>
    6704:	00 24       	eor	r0, r0
    6706:	a0 e6       	ldi	r26, 0x60	; 96
    6708:	40 ea       	ldi	r20, 0xA0	; 160
    670a:	90 01       	movw	r18, r0
    670c:	80 58       	subi	r24, 0x80	; 128
    670e:	56 95       	lsr	r21
    6710:	97 95       	ror	r25
    6712:	28 f4       	brcc	.+10     	; 0x671e <sqrt+0x2c>
    6714:	80 5c       	subi	r24, 0xC0	; 192
    6716:	66 0f       	add	r22, r22
    6718:	77 1f       	adc	r23, r23
    671a:	88 1f       	adc	r24, r24
    671c:	20 f0       	brcs	.+8      	; 0x6726 <sqrt+0x34>
    671e:	26 17       	cp	r18, r22
    6720:	37 07       	cpc	r19, r23
    6722:	48 07       	cpc	r20, r24
    6724:	30 f4       	brcc	.+12     	; 0x6732 <sqrt+0x40>
    6726:	62 1b       	sub	r22, r18
    6728:	73 0b       	sbc	r23, r19
    672a:	84 0b       	sbc	r24, r20
    672c:	20 29       	or	r18, r0
    672e:	31 29       	or	r19, r1
    6730:	4a 2b       	or	r20, r26
    6732:	a6 95       	lsr	r26
    6734:	17 94       	ror	r1
    6736:	07 94       	ror	r0
    6738:	20 25       	eor	r18, r0
    673a:	31 25       	eor	r19, r1
    673c:	4a 27       	eor	r20, r26
    673e:	58 f7       	brcc	.-42     	; 0x6716 <sqrt+0x24>
    6740:	66 0f       	add	r22, r22
    6742:	77 1f       	adc	r23, r23
    6744:	88 1f       	adc	r24, r24
    6746:	20 f0       	brcs	.+8      	; 0x6750 <sqrt+0x5e>
    6748:	26 17       	cp	r18, r22
    674a:	37 07       	cpc	r19, r23
    674c:	48 07       	cpc	r20, r24
    674e:	30 f4       	brcc	.+12     	; 0x675c <sqrt+0x6a>
    6750:	62 0b       	sbc	r22, r18
    6752:	73 0b       	sbc	r23, r19
    6754:	84 0b       	sbc	r24, r20
    6756:	20 0d       	add	r18, r0
    6758:	31 1d       	adc	r19, r1
    675a:	41 1d       	adc	r20, r1
    675c:	a0 95       	com	r26
    675e:	81 f7       	brne	.-32     	; 0x6740 <sqrt+0x4e>
    6760:	b9 01       	movw	r22, r18
    6762:	84 2f       	mov	r24, r20
    6764:	91 58       	subi	r25, 0x81	; 129
    6766:	88 0f       	add	r24, r24
    6768:	96 95       	lsr	r25
    676a:	87 95       	ror	r24
    676c:	08 95       	ret

0000676e <square>:
    676e:	9b 01       	movw	r18, r22
    6770:	ac 01       	movw	r20, r24
    6772:	52 cf       	rjmp	.-348    	; 0x6618 <__mulsf3>

00006774 <__fp_mpack>:
    6774:	9f 3f       	cpi	r25, 0xFF	; 255
    6776:	31 f0       	breq	.+12     	; 0x6784 <__fp_mpack_finite+0xc>

00006778 <__fp_mpack_finite>:
    6778:	91 50       	subi	r25, 0x01	; 1
    677a:	20 f4       	brcc	.+8      	; 0x6784 <__fp_mpack_finite+0xc>
    677c:	87 95       	ror	r24
    677e:	77 95       	ror	r23
    6780:	67 95       	ror	r22
    6782:	b7 95       	ror	r27
    6784:	88 0f       	add	r24, r24
    6786:	91 1d       	adc	r25, r1
    6788:	96 95       	lsr	r25
    678a:	87 95       	ror	r24
    678c:	97 f9       	bld	r25, 7
    678e:	08 95       	ret

00006790 <__fp_norm2>:
    6790:	91 50       	subi	r25, 0x01	; 1
    6792:	50 40       	sbci	r21, 0x00	; 0
    6794:	66 0f       	add	r22, r22
    6796:	77 1f       	adc	r23, r23
    6798:	88 1f       	adc	r24, r24
    679a:	d2 f7       	brpl	.-12     	; 0x6790 <__fp_norm2>
    679c:	08 95       	ret

0000679e <__fp_powsodd>:
    679e:	9f 93       	push	r25
    67a0:	8f 93       	push	r24
    67a2:	7f 93       	push	r23
    67a4:	6f 93       	push	r22
    67a6:	ff 93       	push	r31
    67a8:	ef 93       	push	r30
    67aa:	9b 01       	movw	r18, r22
    67ac:	ac 01       	movw	r20, r24
    67ae:	34 df       	rcall	.-408    	; 0x6618 <__mulsf3>
    67b0:	ef 91       	pop	r30
    67b2:	ff 91       	pop	r31
    67b4:	d2 dd       	rcall	.-1116   	; 0x635a <__fp_powser>
    67b6:	2f 91       	pop	r18
    67b8:	3f 91       	pop	r19
    67ba:	4f 91       	pop	r20
    67bc:	5f 91       	pop	r21
    67be:	2c cf       	rjmp	.-424    	; 0x6618 <__mulsf3>

000067c0 <__divmodhi4>:
    67c0:	97 fb       	bst	r25, 7
    67c2:	07 2e       	mov	r0, r23
    67c4:	16 f4       	brtc	.+4      	; 0x67ca <__divmodhi4+0xa>
    67c6:	00 94       	com	r0
    67c8:	07 d0       	rcall	.+14     	; 0x67d8 <__divmodhi4_neg1>
    67ca:	77 fd       	sbrc	r23, 7
    67cc:	09 d0       	rcall	.+18     	; 0x67e0 <__divmodhi4_neg2>
    67ce:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <__udivmodhi4>
    67d2:	07 fc       	sbrc	r0, 7
    67d4:	05 d0       	rcall	.+10     	; 0x67e0 <__divmodhi4_neg2>
    67d6:	3e f4       	brtc	.+14     	; 0x67e6 <__divmodhi4_exit>

000067d8 <__divmodhi4_neg1>:
    67d8:	90 95       	com	r25
    67da:	81 95       	neg	r24
    67dc:	9f 4f       	sbci	r25, 0xFF	; 255
    67de:	08 95       	ret

000067e0 <__divmodhi4_neg2>:
    67e0:	70 95       	com	r23
    67e2:	61 95       	neg	r22
    67e4:	7f 4f       	sbci	r23, 0xFF	; 255

000067e6 <__divmodhi4_exit>:
    67e6:	08 95       	ret

000067e8 <__tablejump2__>:
    67e8:	ee 0f       	add	r30, r30
    67ea:	ff 1f       	adc	r31, r31

000067ec <__tablejump__>:
    67ec:	05 90       	lpm	r0, Z+
    67ee:	f4 91       	lpm	r31, Z
    67f0:	e0 2d       	mov	r30, r0
    67f2:	09 94       	ijmp

000067f4 <__udivmodhi4>:
    67f4:	aa 1b       	sub	r26, r26
    67f6:	bb 1b       	sub	r27, r27
    67f8:	51 e1       	ldi	r21, 0x11	; 17
    67fa:	07 c0       	rjmp	.+14     	; 0x680a <__udivmodhi4_ep>

000067fc <__udivmodhi4_loop>:
    67fc:	aa 1f       	adc	r26, r26
    67fe:	bb 1f       	adc	r27, r27
    6800:	a6 17       	cp	r26, r22
    6802:	b7 07       	cpc	r27, r23
    6804:	10 f0       	brcs	.+4      	; 0x680a <__udivmodhi4_ep>
    6806:	a6 1b       	sub	r26, r22
    6808:	b7 0b       	sbc	r27, r23

0000680a <__udivmodhi4_ep>:
    680a:	88 1f       	adc	r24, r24
    680c:	99 1f       	adc	r25, r25
    680e:	5a 95       	dec	r21
    6810:	a9 f7       	brne	.-22     	; 0x67fc <__udivmodhi4_loop>
    6812:	80 95       	com	r24
    6814:	90 95       	com	r25
    6816:	bc 01       	movw	r22, r24
    6818:	cd 01       	movw	r24, r26
    681a:	08 95       	ret

0000681c <malloc>:
    681c:	cf 93       	push	r28
    681e:	df 93       	push	r29
    6820:	82 30       	cpi	r24, 0x02	; 2
    6822:	91 05       	cpc	r25, r1
    6824:	10 f4       	brcc	.+4      	; 0x682a <malloc+0xe>
    6826:	82 e0       	ldi	r24, 0x02	; 2
    6828:	90 e0       	ldi	r25, 0x00	; 0
    682a:	e0 91 34 01 	lds	r30, 0x0134
    682e:	f0 91 35 01 	lds	r31, 0x0135
    6832:	20 e0       	ldi	r18, 0x00	; 0
    6834:	30 e0       	ldi	r19, 0x00	; 0
    6836:	a0 e0       	ldi	r26, 0x00	; 0
    6838:	b0 e0       	ldi	r27, 0x00	; 0
    683a:	30 97       	sbiw	r30, 0x00	; 0
    683c:	39 f1       	breq	.+78     	; 0x688c <malloc+0x70>
    683e:	40 81       	ld	r20, Z
    6840:	51 81       	ldd	r21, Z+1	; 0x01
    6842:	48 17       	cp	r20, r24
    6844:	59 07       	cpc	r21, r25
    6846:	b8 f0       	brcs	.+46     	; 0x6876 <malloc+0x5a>
    6848:	48 17       	cp	r20, r24
    684a:	59 07       	cpc	r21, r25
    684c:	71 f4       	brne	.+28     	; 0x686a <malloc+0x4e>
    684e:	82 81       	ldd	r24, Z+2	; 0x02
    6850:	93 81       	ldd	r25, Z+3	; 0x03
    6852:	10 97       	sbiw	r26, 0x00	; 0
    6854:	29 f0       	breq	.+10     	; 0x6860 <malloc+0x44>
    6856:	13 96       	adiw	r26, 0x03	; 3
    6858:	9c 93       	st	X, r25
    685a:	8e 93       	st	-X, r24
    685c:	12 97       	sbiw	r26, 0x02	; 2
    685e:	2c c0       	rjmp	.+88     	; 0x68b8 <malloc+0x9c>
    6860:	90 93 35 01 	sts	0x0135, r25
    6864:	80 93 34 01 	sts	0x0134, r24
    6868:	27 c0       	rjmp	.+78     	; 0x68b8 <malloc+0x9c>
    686a:	21 15       	cp	r18, r1
    686c:	31 05       	cpc	r19, r1
    686e:	31 f0       	breq	.+12     	; 0x687c <malloc+0x60>
    6870:	42 17       	cp	r20, r18
    6872:	53 07       	cpc	r21, r19
    6874:	18 f0       	brcs	.+6      	; 0x687c <malloc+0x60>
    6876:	a9 01       	movw	r20, r18
    6878:	db 01       	movw	r26, r22
    687a:	01 c0       	rjmp	.+2      	; 0x687e <malloc+0x62>
    687c:	ef 01       	movw	r28, r30
    687e:	9a 01       	movw	r18, r20
    6880:	bd 01       	movw	r22, r26
    6882:	df 01       	movw	r26, r30
    6884:	02 80       	ldd	r0, Z+2	; 0x02
    6886:	f3 81       	ldd	r31, Z+3	; 0x03
    6888:	e0 2d       	mov	r30, r0
    688a:	d7 cf       	rjmp	.-82     	; 0x683a <malloc+0x1e>
    688c:	21 15       	cp	r18, r1
    688e:	31 05       	cpc	r19, r1
    6890:	f9 f0       	breq	.+62     	; 0x68d0 <malloc+0xb4>
    6892:	28 1b       	sub	r18, r24
    6894:	39 0b       	sbc	r19, r25
    6896:	24 30       	cpi	r18, 0x04	; 4
    6898:	31 05       	cpc	r19, r1
    689a:	80 f4       	brcc	.+32     	; 0x68bc <malloc+0xa0>
    689c:	8a 81       	ldd	r24, Y+2	; 0x02
    689e:	9b 81       	ldd	r25, Y+3	; 0x03
    68a0:	61 15       	cp	r22, r1
    68a2:	71 05       	cpc	r23, r1
    68a4:	21 f0       	breq	.+8      	; 0x68ae <malloc+0x92>
    68a6:	fb 01       	movw	r30, r22
    68a8:	93 83       	std	Z+3, r25	; 0x03
    68aa:	82 83       	std	Z+2, r24	; 0x02
    68ac:	04 c0       	rjmp	.+8      	; 0x68b6 <malloc+0x9a>
    68ae:	90 93 35 01 	sts	0x0135, r25
    68b2:	80 93 34 01 	sts	0x0134, r24
    68b6:	fe 01       	movw	r30, r28
    68b8:	32 96       	adiw	r30, 0x02	; 2
    68ba:	44 c0       	rjmp	.+136    	; 0x6944 <malloc+0x128>
    68bc:	fe 01       	movw	r30, r28
    68be:	e2 0f       	add	r30, r18
    68c0:	f3 1f       	adc	r31, r19
    68c2:	81 93       	st	Z+, r24
    68c4:	91 93       	st	Z+, r25
    68c6:	22 50       	subi	r18, 0x02	; 2
    68c8:	31 09       	sbc	r19, r1
    68ca:	39 83       	std	Y+1, r19	; 0x01
    68cc:	28 83       	st	Y, r18
    68ce:	3a c0       	rjmp	.+116    	; 0x6944 <malloc+0x128>
    68d0:	20 91 32 01 	lds	r18, 0x0132
    68d4:	30 91 33 01 	lds	r19, 0x0133
    68d8:	23 2b       	or	r18, r19
    68da:	41 f4       	brne	.+16     	; 0x68ec <malloc+0xd0>
    68dc:	20 91 62 00 	lds	r18, 0x0062
    68e0:	30 91 63 00 	lds	r19, 0x0063
    68e4:	30 93 33 01 	sts	0x0133, r19
    68e8:	20 93 32 01 	sts	0x0132, r18
    68ec:	20 91 60 00 	lds	r18, 0x0060
    68f0:	30 91 61 00 	lds	r19, 0x0061
    68f4:	21 15       	cp	r18, r1
    68f6:	31 05       	cpc	r19, r1
    68f8:	41 f4       	brne	.+16     	; 0x690a <malloc+0xee>
    68fa:	2d b7       	in	r18, 0x3d	; 61
    68fc:	3e b7       	in	r19, 0x3e	; 62
    68fe:	40 91 64 00 	lds	r20, 0x0064
    6902:	50 91 65 00 	lds	r21, 0x0065
    6906:	24 1b       	sub	r18, r20
    6908:	35 0b       	sbc	r19, r21
    690a:	e0 91 32 01 	lds	r30, 0x0132
    690e:	f0 91 33 01 	lds	r31, 0x0133
    6912:	e2 17       	cp	r30, r18
    6914:	f3 07       	cpc	r31, r19
    6916:	a0 f4       	brcc	.+40     	; 0x6940 <malloc+0x124>
    6918:	2e 1b       	sub	r18, r30
    691a:	3f 0b       	sbc	r19, r31
    691c:	28 17       	cp	r18, r24
    691e:	39 07       	cpc	r19, r25
    6920:	78 f0       	brcs	.+30     	; 0x6940 <malloc+0x124>
    6922:	ac 01       	movw	r20, r24
    6924:	4e 5f       	subi	r20, 0xFE	; 254
    6926:	5f 4f       	sbci	r21, 0xFF	; 255
    6928:	24 17       	cp	r18, r20
    692a:	35 07       	cpc	r19, r21
    692c:	48 f0       	brcs	.+18     	; 0x6940 <malloc+0x124>
    692e:	4e 0f       	add	r20, r30
    6930:	5f 1f       	adc	r21, r31
    6932:	50 93 33 01 	sts	0x0133, r21
    6936:	40 93 32 01 	sts	0x0132, r20
    693a:	81 93       	st	Z+, r24
    693c:	91 93       	st	Z+, r25
    693e:	02 c0       	rjmp	.+4      	; 0x6944 <malloc+0x128>
    6940:	e0 e0       	ldi	r30, 0x00	; 0
    6942:	f0 e0       	ldi	r31, 0x00	; 0
    6944:	cf 01       	movw	r24, r30
    6946:	df 91       	pop	r29
    6948:	cf 91       	pop	r28
    694a:	08 95       	ret

0000694c <free>:
    694c:	cf 93       	push	r28
    694e:	df 93       	push	r29
    6950:	00 97       	sbiw	r24, 0x00	; 0
    6952:	09 f4       	brne	.+2      	; 0x6956 <free+0xa>
    6954:	87 c0       	rjmp	.+270    	; 0x6a64 <free+0x118>
    6956:	fc 01       	movw	r30, r24
    6958:	32 97       	sbiw	r30, 0x02	; 2
    695a:	13 82       	std	Z+3, r1	; 0x03
    695c:	12 82       	std	Z+2, r1	; 0x02
    695e:	c0 91 34 01 	lds	r28, 0x0134
    6962:	d0 91 35 01 	lds	r29, 0x0135
    6966:	20 97       	sbiw	r28, 0x00	; 0
    6968:	81 f4       	brne	.+32     	; 0x698a <free+0x3e>
    696a:	20 81       	ld	r18, Z
    696c:	31 81       	ldd	r19, Z+1	; 0x01
    696e:	28 0f       	add	r18, r24
    6970:	39 1f       	adc	r19, r25
    6972:	80 91 32 01 	lds	r24, 0x0132
    6976:	90 91 33 01 	lds	r25, 0x0133
    697a:	82 17       	cp	r24, r18
    697c:	93 07       	cpc	r25, r19
    697e:	79 f5       	brne	.+94     	; 0x69de <free+0x92>
    6980:	f0 93 33 01 	sts	0x0133, r31
    6984:	e0 93 32 01 	sts	0x0132, r30
    6988:	6d c0       	rjmp	.+218    	; 0x6a64 <free+0x118>
    698a:	de 01       	movw	r26, r28
    698c:	20 e0       	ldi	r18, 0x00	; 0
    698e:	30 e0       	ldi	r19, 0x00	; 0
    6990:	ae 17       	cp	r26, r30
    6992:	bf 07       	cpc	r27, r31
    6994:	50 f4       	brcc	.+20     	; 0x69aa <free+0x5e>
    6996:	12 96       	adiw	r26, 0x02	; 2
    6998:	4d 91       	ld	r20, X+
    699a:	5c 91       	ld	r21, X
    699c:	13 97       	sbiw	r26, 0x03	; 3
    699e:	9d 01       	movw	r18, r26
    69a0:	41 15       	cp	r20, r1
    69a2:	51 05       	cpc	r21, r1
    69a4:	09 f1       	breq	.+66     	; 0x69e8 <free+0x9c>
    69a6:	da 01       	movw	r26, r20
    69a8:	f3 cf       	rjmp	.-26     	; 0x6990 <free+0x44>
    69aa:	b3 83       	std	Z+3, r27	; 0x03
    69ac:	a2 83       	std	Z+2, r26	; 0x02
    69ae:	40 81       	ld	r20, Z
    69b0:	51 81       	ldd	r21, Z+1	; 0x01
    69b2:	84 0f       	add	r24, r20
    69b4:	95 1f       	adc	r25, r21
    69b6:	8a 17       	cp	r24, r26
    69b8:	9b 07       	cpc	r25, r27
    69ba:	71 f4       	brne	.+28     	; 0x69d8 <free+0x8c>
    69bc:	8d 91       	ld	r24, X+
    69be:	9c 91       	ld	r25, X
    69c0:	11 97       	sbiw	r26, 0x01	; 1
    69c2:	84 0f       	add	r24, r20
    69c4:	95 1f       	adc	r25, r21
    69c6:	02 96       	adiw	r24, 0x02	; 2
    69c8:	91 83       	std	Z+1, r25	; 0x01
    69ca:	80 83       	st	Z, r24
    69cc:	12 96       	adiw	r26, 0x02	; 2
    69ce:	8d 91       	ld	r24, X+
    69d0:	9c 91       	ld	r25, X
    69d2:	13 97       	sbiw	r26, 0x03	; 3
    69d4:	93 83       	std	Z+3, r25	; 0x03
    69d6:	82 83       	std	Z+2, r24	; 0x02
    69d8:	21 15       	cp	r18, r1
    69da:	31 05       	cpc	r19, r1
    69dc:	29 f4       	brne	.+10     	; 0x69e8 <free+0x9c>
    69de:	f0 93 35 01 	sts	0x0135, r31
    69e2:	e0 93 34 01 	sts	0x0134, r30
    69e6:	3e c0       	rjmp	.+124    	; 0x6a64 <free+0x118>
    69e8:	d9 01       	movw	r26, r18
    69ea:	13 96       	adiw	r26, 0x03	; 3
    69ec:	fc 93       	st	X, r31
    69ee:	ee 93       	st	-X, r30
    69f0:	12 97       	sbiw	r26, 0x02	; 2
    69f2:	4d 91       	ld	r20, X+
    69f4:	5d 91       	ld	r21, X+
    69f6:	a4 0f       	add	r26, r20
    69f8:	b5 1f       	adc	r27, r21
    69fa:	ea 17       	cp	r30, r26
    69fc:	fb 07       	cpc	r31, r27
    69fe:	79 f4       	brne	.+30     	; 0x6a1e <free+0xd2>
    6a00:	80 81       	ld	r24, Z
    6a02:	91 81       	ldd	r25, Z+1	; 0x01
    6a04:	84 0f       	add	r24, r20
    6a06:	95 1f       	adc	r25, r21
    6a08:	02 96       	adiw	r24, 0x02	; 2
    6a0a:	d9 01       	movw	r26, r18
    6a0c:	11 96       	adiw	r26, 0x01	; 1
    6a0e:	9c 93       	st	X, r25
    6a10:	8e 93       	st	-X, r24
    6a12:	82 81       	ldd	r24, Z+2	; 0x02
    6a14:	93 81       	ldd	r25, Z+3	; 0x03
    6a16:	13 96       	adiw	r26, 0x03	; 3
    6a18:	9c 93       	st	X, r25
    6a1a:	8e 93       	st	-X, r24
    6a1c:	12 97       	sbiw	r26, 0x02	; 2
    6a1e:	e0 e0       	ldi	r30, 0x00	; 0
    6a20:	f0 e0       	ldi	r31, 0x00	; 0
    6a22:	8a 81       	ldd	r24, Y+2	; 0x02
    6a24:	9b 81       	ldd	r25, Y+3	; 0x03
    6a26:	00 97       	sbiw	r24, 0x00	; 0
    6a28:	19 f0       	breq	.+6      	; 0x6a30 <free+0xe4>
    6a2a:	fe 01       	movw	r30, r28
    6a2c:	ec 01       	movw	r28, r24
    6a2e:	f9 cf       	rjmp	.-14     	; 0x6a22 <free+0xd6>
    6a30:	ce 01       	movw	r24, r28
    6a32:	02 96       	adiw	r24, 0x02	; 2
    6a34:	28 81       	ld	r18, Y
    6a36:	39 81       	ldd	r19, Y+1	; 0x01
    6a38:	82 0f       	add	r24, r18
    6a3a:	93 1f       	adc	r25, r19
    6a3c:	20 91 32 01 	lds	r18, 0x0132
    6a40:	30 91 33 01 	lds	r19, 0x0133
    6a44:	28 17       	cp	r18, r24
    6a46:	39 07       	cpc	r19, r25
    6a48:	69 f4       	brne	.+26     	; 0x6a64 <free+0x118>
    6a4a:	30 97       	sbiw	r30, 0x00	; 0
    6a4c:	29 f4       	brne	.+10     	; 0x6a58 <free+0x10c>
    6a4e:	10 92 35 01 	sts	0x0135, r1
    6a52:	10 92 34 01 	sts	0x0134, r1
    6a56:	02 c0       	rjmp	.+4      	; 0x6a5c <free+0x110>
    6a58:	13 82       	std	Z+3, r1	; 0x03
    6a5a:	12 82       	std	Z+2, r1	; 0x02
    6a5c:	d0 93 33 01 	sts	0x0133, r29
    6a60:	c0 93 32 01 	sts	0x0132, r28
    6a64:	df 91       	pop	r29
    6a66:	cf 91       	pop	r28
    6a68:	08 95       	ret

00006a6a <do_rand>:
    6a6a:	8f 92       	push	r8
    6a6c:	9f 92       	push	r9
    6a6e:	af 92       	push	r10
    6a70:	bf 92       	push	r11
    6a72:	cf 92       	push	r12
    6a74:	df 92       	push	r13
    6a76:	ef 92       	push	r14
    6a78:	ff 92       	push	r15
    6a7a:	cf 93       	push	r28
    6a7c:	df 93       	push	r29
    6a7e:	ec 01       	movw	r28, r24
    6a80:	68 81       	ld	r22, Y
    6a82:	79 81       	ldd	r23, Y+1	; 0x01
    6a84:	8a 81       	ldd	r24, Y+2	; 0x02
    6a86:	9b 81       	ldd	r25, Y+3	; 0x03
    6a88:	61 15       	cp	r22, r1
    6a8a:	71 05       	cpc	r23, r1
    6a8c:	81 05       	cpc	r24, r1
    6a8e:	91 05       	cpc	r25, r1
    6a90:	21 f4       	brne	.+8      	; 0x6a9a <do_rand+0x30>
    6a92:	64 e2       	ldi	r22, 0x24	; 36
    6a94:	79 ed       	ldi	r23, 0xD9	; 217
    6a96:	8b e5       	ldi	r24, 0x5B	; 91
    6a98:	97 e0       	ldi	r25, 0x07	; 7
    6a9a:	2d e1       	ldi	r18, 0x1D	; 29
    6a9c:	33 ef       	ldi	r19, 0xF3	; 243
    6a9e:	41 e0       	ldi	r20, 0x01	; 1
    6aa0:	50 e0       	ldi	r21, 0x00	; 0
    6aa2:	0e 94 d6 39 	call	0x73ac	; 0x73ac <__divmodsi4>
    6aa6:	49 01       	movw	r8, r18
    6aa8:	5a 01       	movw	r10, r20
    6aaa:	9b 01       	movw	r18, r22
    6aac:	ac 01       	movw	r20, r24
    6aae:	a7 ea       	ldi	r26, 0xA7	; 167
    6ab0:	b1 e4       	ldi	r27, 0x41	; 65
    6ab2:	0e 94 f5 39 	call	0x73ea	; 0x73ea <__muluhisi3>
    6ab6:	6b 01       	movw	r12, r22
    6ab8:	7c 01       	movw	r14, r24
    6aba:	ac ee       	ldi	r26, 0xEC	; 236
    6abc:	b4 ef       	ldi	r27, 0xF4	; 244
    6abe:	a5 01       	movw	r20, r10
    6ac0:	94 01       	movw	r18, r8
    6ac2:	0e 94 03 3a 	call	0x7406	; 0x7406 <__mulohisi3>
    6ac6:	c6 0e       	add	r12, r22
    6ac8:	d7 1e       	adc	r13, r23
    6aca:	e8 1e       	adc	r14, r24
    6acc:	f9 1e       	adc	r15, r25
    6ace:	f7 fe       	sbrs	r15, 7
    6ad0:	06 c0       	rjmp	.+12     	; 0x6ade <do_rand+0x74>
    6ad2:	81 e0       	ldi	r24, 0x01	; 1
    6ad4:	c8 1a       	sub	r12, r24
    6ad6:	d1 08       	sbc	r13, r1
    6ad8:	e1 08       	sbc	r14, r1
    6ada:	80 e8       	ldi	r24, 0x80	; 128
    6adc:	f8 0a       	sbc	r15, r24
    6ade:	c8 82       	st	Y, r12
    6ae0:	d9 82       	std	Y+1, r13	; 0x01
    6ae2:	ea 82       	std	Y+2, r14	; 0x02
    6ae4:	fb 82       	std	Y+3, r15	; 0x03
    6ae6:	c6 01       	movw	r24, r12
    6ae8:	9f 77       	andi	r25, 0x7F	; 127
    6aea:	df 91       	pop	r29
    6aec:	cf 91       	pop	r28
    6aee:	ff 90       	pop	r15
    6af0:	ef 90       	pop	r14
    6af2:	df 90       	pop	r13
    6af4:	cf 90       	pop	r12
    6af6:	bf 90       	pop	r11
    6af8:	af 90       	pop	r10
    6afa:	9f 90       	pop	r9
    6afc:	8f 90       	pop	r8
    6afe:	08 95       	ret

00006b00 <rand_r>:
    6b00:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <do_rand>
    6b04:	08 95       	ret

00006b06 <rand>:
    6b06:	86 e6       	ldi	r24, 0x66	; 102
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <do_rand>
    6b0e:	08 95       	ret

00006b10 <srand>:
    6b10:	a0 e0       	ldi	r26, 0x00	; 0
    6b12:	b0 e0       	ldi	r27, 0x00	; 0
    6b14:	80 93 66 00 	sts	0x0066, r24
    6b18:	90 93 67 00 	sts	0x0067, r25
    6b1c:	a0 93 68 00 	sts	0x0068, r26
    6b20:	b0 93 69 00 	sts	0x0069, r27
    6b24:	08 95       	ret

00006b26 <strtol>:
    6b26:	2f 92       	push	r2
    6b28:	3f 92       	push	r3
    6b2a:	5f 92       	push	r5
    6b2c:	6f 92       	push	r6
    6b2e:	7f 92       	push	r7
    6b30:	8f 92       	push	r8
    6b32:	9f 92       	push	r9
    6b34:	af 92       	push	r10
    6b36:	bf 92       	push	r11
    6b38:	cf 92       	push	r12
    6b3a:	df 92       	push	r13
    6b3c:	ef 92       	push	r14
    6b3e:	ff 92       	push	r15
    6b40:	0f 93       	push	r16
    6b42:	1f 93       	push	r17
    6b44:	cf 93       	push	r28
    6b46:	df 93       	push	r29
    6b48:	8b 01       	movw	r16, r22
    6b4a:	ea 01       	movw	r28, r20
    6b4c:	61 15       	cp	r22, r1
    6b4e:	71 05       	cpc	r23, r1
    6b50:	21 f0       	breq	.+8      	; 0x6b5a <strtol+0x34>
    6b52:	db 01       	movw	r26, r22
    6b54:	8c 93       	st	X, r24
    6b56:	11 96       	adiw	r26, 0x01	; 1
    6b58:	9c 93       	st	X, r25
    6b5a:	20 97       	sbiw	r28, 0x00	; 0
    6b5c:	39 f0       	breq	.+14     	; 0x6b6c <strtol+0x46>
    6b5e:	9e 01       	movw	r18, r28
    6b60:	22 50       	subi	r18, 0x02	; 2
    6b62:	31 09       	sbc	r19, r1
    6b64:	23 32       	cpi	r18, 0x23	; 35
    6b66:	31 05       	cpc	r19, r1
    6b68:	08 f0       	brcs	.+2      	; 0x6b6c <strtol+0x46>
    6b6a:	fb c0       	rjmp	.+502    	; 0x6d62 <strtol+0x23c>
    6b6c:	7c 01       	movw	r14, r24
    6b6e:	67 01       	movw	r12, r14
    6b70:	bf ef       	ldi	r27, 0xFF	; 255
    6b72:	cb 1a       	sub	r12, r27
    6b74:	db 0a       	sbc	r13, r27
    6b76:	56 01       	movw	r10, r12
    6b78:	f7 01       	movw	r30, r14
    6b7a:	60 80       	ld	r6, Z
    6b7c:	86 2d       	mov	r24, r6
    6b7e:	90 e0       	ldi	r25, 0x00	; 0
    6b80:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <isspace>
    6b84:	89 2b       	or	r24, r25
    6b86:	11 f0       	breq	.+4      	; 0x6b8c <strtol+0x66>
    6b88:	76 01       	movw	r14, r12
    6b8a:	f1 cf       	rjmp	.-30     	; 0x6b6e <strtol+0x48>
    6b8c:	fd e2       	ldi	r31, 0x2D	; 45
    6b8e:	6f 12       	cpse	r6, r31
    6b90:	0a c0       	rjmp	.+20     	; 0x6ba6 <strtol+0x80>
    6b92:	57 01       	movw	r10, r14
    6b94:	82 e0       	ldi	r24, 0x02	; 2
    6b96:	a8 0e       	add	r10, r24
    6b98:	b1 1c       	adc	r11, r1
    6b9a:	d7 01       	movw	r26, r14
    6b9c:	11 96       	adiw	r26, 0x01	; 1
    6b9e:	6c 90       	ld	r6, X
    6ba0:	77 24       	eor	r7, r7
    6ba2:	73 94       	inc	r7
    6ba4:	0b c0       	rjmp	.+22     	; 0x6bbc <strtol+0x96>
    6ba6:	bb e2       	ldi	r27, 0x2B	; 43
    6ba8:	6b 12       	cpse	r6, r27
    6baa:	07 c0       	rjmp	.+14     	; 0x6bba <strtol+0x94>
    6bac:	57 01       	movw	r10, r14
    6bae:	e2 e0       	ldi	r30, 0x02	; 2
    6bb0:	ae 0e       	add	r10, r30
    6bb2:	b1 1c       	adc	r11, r1
    6bb4:	d7 01       	movw	r26, r14
    6bb6:	11 96       	adiw	r26, 0x01	; 1
    6bb8:	6c 90       	ld	r6, X
    6bba:	71 2c       	mov	r7, r1
    6bbc:	ce 01       	movw	r24, r28
    6bbe:	8f 7e       	andi	r24, 0xEF	; 239
    6bc0:	89 2b       	or	r24, r25
    6bc2:	89 f4       	brne	.+34     	; 0x6be6 <strtol+0xc0>
    6bc4:	b0 e3       	ldi	r27, 0x30	; 48
    6bc6:	6b 12       	cpse	r6, r27
    6bc8:	22 c0       	rjmp	.+68     	; 0x6c0e <strtol+0xe8>
    6bca:	f5 01       	movw	r30, r10
    6bcc:	80 81       	ld	r24, Z
    6bce:	8f 7d       	andi	r24, 0xDF	; 223
    6bd0:	88 35       	cpi	r24, 0x58	; 88
    6bd2:	41 f5       	brne	.+80     	; 0x6c24 <strtol+0xfe>
    6bd4:	61 80       	ldd	r6, Z+1	; 0x01
    6bd6:	f2 e0       	ldi	r31, 0x02	; 2
    6bd8:	af 0e       	add	r10, r31
    6bda:	b1 1c       	adc	r11, r1
    6bdc:	87 2d       	mov	r24, r7
    6bde:	82 60       	ori	r24, 0x02	; 2
    6be0:	78 2e       	mov	r7, r24
    6be2:	c0 e1       	ldi	r28, 0x10	; 16
    6be4:	d0 e0       	ldi	r29, 0x00	; 0
    6be6:	c8 30       	cpi	r28, 0x08	; 8
    6be8:	d1 05       	cpc	r29, r1
    6bea:	f1 f0       	breq	.+60     	; 0x6c28 <strtol+0x102>
    6bec:	4c f4       	brge	.+18     	; 0x6c00 <strtol+0xda>
    6bee:	c2 30       	cpi	r28, 0x02	; 2
    6bf0:	d1 05       	cpc	r29, r1
    6bf2:	11 f5       	brne	.+68     	; 0x6c38 <strtol+0x112>
    6bf4:	c1 2c       	mov	r12, r1
    6bf6:	d1 2c       	mov	r13, r1
    6bf8:	e1 2c       	mov	r14, r1
    6bfa:	b0 e4       	ldi	r27, 0x40	; 64
    6bfc:	fb 2e       	mov	r15, r27
    6bfe:	2f c0       	rjmp	.+94     	; 0x6c5e <strtol+0x138>
    6c00:	ca 30       	cpi	r28, 0x0A	; 10
    6c02:	d1 05       	cpc	r29, r1
    6c04:	31 f0       	breq	.+12     	; 0x6c12 <strtol+0xec>
    6c06:	c0 31       	cpi	r28, 0x10	; 16
    6c08:	d1 05       	cpc	r29, r1
    6c0a:	21 f1       	breq	.+72     	; 0x6c54 <strtol+0x12e>
    6c0c:	15 c0       	rjmp	.+42     	; 0x6c38 <strtol+0x112>
    6c0e:	20 97       	sbiw	r28, 0x00	; 0
    6c10:	51 f7       	brne	.-44     	; 0x6be6 <strtol+0xc0>
    6c12:	ca e0       	ldi	r28, 0x0A	; 10
    6c14:	d0 e0       	ldi	r29, 0x00	; 0
    6c16:	ac ec       	ldi	r26, 0xCC	; 204
    6c18:	ca 2e       	mov	r12, r26
    6c1a:	dc 2c       	mov	r13, r12
    6c1c:	ec 2c       	mov	r14, r12
    6c1e:	ac e0       	ldi	r26, 0x0C	; 12
    6c20:	fa 2e       	mov	r15, r26
    6c22:	1d c0       	rjmp	.+58     	; 0x6c5e <strtol+0x138>
    6c24:	20 97       	sbiw	r28, 0x00	; 0
    6c26:	f9 f6       	brne	.-66     	; 0x6be6 <strtol+0xc0>
    6c28:	c8 e0       	ldi	r28, 0x08	; 8
    6c2a:	d0 e0       	ldi	r29, 0x00	; 0
    6c2c:	c1 2c       	mov	r12, r1
    6c2e:	d1 2c       	mov	r13, r1
    6c30:	e1 2c       	mov	r14, r1
    6c32:	f0 e1       	ldi	r31, 0x10	; 16
    6c34:	ff 2e       	mov	r15, r31
    6c36:	13 c0       	rjmp	.+38     	; 0x6c5e <strtol+0x138>
    6c38:	60 e0       	ldi	r22, 0x00	; 0
    6c3a:	70 e0       	ldi	r23, 0x00	; 0
    6c3c:	80 e0       	ldi	r24, 0x00	; 0
    6c3e:	90 e8       	ldi	r25, 0x80	; 128
    6c40:	9e 01       	movw	r18, r28
    6c42:	44 27       	eor	r20, r20
    6c44:	37 fd       	sbrc	r19, 7
    6c46:	40 95       	com	r20
    6c48:	54 2f       	mov	r21, r20
    6c4a:	0e 94 b4 39 	call	0x7368	; 0x7368 <__udivmodsi4>
    6c4e:	69 01       	movw	r12, r18
    6c50:	7a 01       	movw	r14, r20
    6c52:	05 c0       	rjmp	.+10     	; 0x6c5e <strtol+0x138>
    6c54:	c1 2c       	mov	r12, r1
    6c56:	d1 2c       	mov	r13, r1
    6c58:	e1 2c       	mov	r14, r1
    6c5a:	e8 e0       	ldi	r30, 0x08	; 8
    6c5c:	fe 2e       	mov	r15, r30
    6c5e:	f5 01       	movw	r30, r10
    6c60:	60 e0       	ldi	r22, 0x00	; 0
    6c62:	20 e0       	ldi	r18, 0x00	; 0
    6c64:	30 e0       	ldi	r19, 0x00	; 0
    6c66:	a9 01       	movw	r20, r18
    6c68:	4e 01       	movw	r8, r28
    6c6a:	aa 24       	eor	r10, r10
    6c6c:	97 fc       	sbrc	r9, 7
    6c6e:	a0 94       	com	r10
    6c70:	ba 2c       	mov	r11, r10
    6c72:	1f 01       	movw	r2, r30
    6c74:	70 ed       	ldi	r23, 0xD0	; 208
    6c76:	57 2e       	mov	r5, r23
    6c78:	56 0c       	add	r5, r6
    6c7a:	a9 e0       	ldi	r26, 0x09	; 9
    6c7c:	a5 15       	cp	r26, r5
    6c7e:	70 f4       	brcc	.+28     	; 0x6c9c <strtol+0x176>
    6c80:	8f eb       	ldi	r24, 0xBF	; 191
    6c82:	86 0d       	add	r24, r6
    6c84:	8a 31       	cpi	r24, 0x1A	; 26
    6c86:	18 f4       	brcc	.+6      	; 0x6c8e <strtol+0x168>
    6c88:	99 ec       	ldi	r25, 0xC9	; 201
    6c8a:	59 2e       	mov	r5, r25
    6c8c:	06 c0       	rjmp	.+12     	; 0x6c9a <strtol+0x174>
    6c8e:	8f e9       	ldi	r24, 0x9F	; 159
    6c90:	86 0d       	add	r24, r6
    6c92:	8a 31       	cpi	r24, 0x1A	; 26
    6c94:	30 f5       	brcc	.+76     	; 0x6ce2 <strtol+0x1bc>
    6c96:	89 ea       	ldi	r24, 0xA9	; 169
    6c98:	58 2e       	mov	r5, r24
    6c9a:	56 0c       	add	r5, r6
    6c9c:	85 2d       	mov	r24, r5
    6c9e:	90 e0       	ldi	r25, 0x00	; 0
    6ca0:	8c 17       	cp	r24, r28
    6ca2:	9d 07       	cpc	r25, r29
    6ca4:	f4 f4       	brge	.+60     	; 0x6ce2 <strtol+0x1bc>
    6ca6:	67 fd       	sbrc	r22, 7
    6ca8:	18 c0       	rjmp	.+48     	; 0x6cda <strtol+0x1b4>
    6caa:	c2 16       	cp	r12, r18
    6cac:	d3 06       	cpc	r13, r19
    6cae:	e4 06       	cpc	r14, r20
    6cb0:	f5 06       	cpc	r15, r21
    6cb2:	80 f0       	brcs	.+32     	; 0x6cd4 <strtol+0x1ae>
    6cb4:	c5 01       	movw	r24, r10
    6cb6:	b4 01       	movw	r22, r8
    6cb8:	0e 94 a4 39 	call	0x7348	; 0x7348 <__mulsi3>
    6cbc:	9b 01       	movw	r18, r22
    6cbe:	ac 01       	movw	r20, r24
    6cc0:	25 0d       	add	r18, r5
    6cc2:	31 1d       	adc	r19, r1
    6cc4:	41 1d       	adc	r20, r1
    6cc6:	51 1d       	adc	r21, r1
    6cc8:	21 30       	cpi	r18, 0x01	; 1
    6cca:	31 05       	cpc	r19, r1
    6ccc:	41 05       	cpc	r20, r1
    6cce:	b0 e8       	ldi	r27, 0x80	; 128
    6cd0:	5b 07       	cpc	r21, r27
    6cd2:	10 f0       	brcs	.+4      	; 0x6cd8 <strtol+0x1b2>
    6cd4:	6f ef       	ldi	r22, 0xFF	; 255
    6cd6:	01 c0       	rjmp	.+2      	; 0x6cda <strtol+0x1b4>
    6cd8:	61 e0       	ldi	r22, 0x01	; 1
    6cda:	31 96       	adiw	r30, 0x01	; 1
    6cdc:	d1 01       	movw	r26, r2
    6cde:	6c 90       	ld	r6, X
    6ce0:	c8 cf       	rjmp	.-112    	; 0x6c72 <strtol+0x14c>
    6ce2:	87 2d       	mov	r24, r7
    6ce4:	81 70       	andi	r24, 0x01	; 1
    6ce6:	01 15       	cp	r16, r1
    6ce8:	11 05       	cpc	r17, r1
    6cea:	71 f0       	breq	.+28     	; 0x6d08 <strtol+0x1e2>
    6cec:	66 23       	and	r22, r22
    6cee:	29 f0       	breq	.+10     	; 0x6cfa <strtol+0x1d4>
    6cf0:	31 97       	sbiw	r30, 0x01	; 1
    6cf2:	d8 01       	movw	r26, r16
    6cf4:	ed 93       	st	X+, r30
    6cf6:	fc 93       	st	X, r31
    6cf8:	07 c0       	rjmp	.+14     	; 0x6d08 <strtol+0x1e2>
    6cfa:	71 fe       	sbrs	r7, 1
    6cfc:	19 c0       	rjmp	.+50     	; 0x6d30 <strtol+0x20a>
    6cfe:	32 97       	sbiw	r30, 0x02	; 2
    6d00:	d8 01       	movw	r26, r16
    6d02:	ed 93       	st	X+, r30
    6d04:	fc 93       	st	X, r31
    6d06:	14 c0       	rjmp	.+40     	; 0x6d30 <strtol+0x20a>
    6d08:	67 ff       	sbrs	r22, 7
    6d0a:	12 c0       	rjmp	.+36     	; 0x6d30 <strtol+0x20a>
    6d0c:	88 23       	and	r24, r24
    6d0e:	29 f0       	breq	.+10     	; 0x6d1a <strtol+0x1f4>
    6d10:	20 e0       	ldi	r18, 0x00	; 0
    6d12:	30 e0       	ldi	r19, 0x00	; 0
    6d14:	40 e0       	ldi	r20, 0x00	; 0
    6d16:	50 e8       	ldi	r21, 0x80	; 128
    6d18:	04 c0       	rjmp	.+8      	; 0x6d22 <strtol+0x1fc>
    6d1a:	2f ef       	ldi	r18, 0xFF	; 255
    6d1c:	3f ef       	ldi	r19, 0xFF	; 255
    6d1e:	4f ef       	ldi	r20, 0xFF	; 255
    6d20:	5f e7       	ldi	r21, 0x7F	; 127
    6d22:	82 e2       	ldi	r24, 0x22	; 34
    6d24:	90 e0       	ldi	r25, 0x00	; 0
    6d26:	90 93 37 01 	sts	0x0137, r25
    6d2a:	80 93 36 01 	sts	0x0136, r24
    6d2e:	16 c0       	rjmp	.+44     	; 0x6d5c <strtol+0x236>
    6d30:	88 23       	and	r24, r24
    6d32:	41 f0       	breq	.+16     	; 0x6d44 <strtol+0x21e>
    6d34:	50 95       	com	r21
    6d36:	40 95       	com	r20
    6d38:	30 95       	com	r19
    6d3a:	21 95       	neg	r18
    6d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d3e:	4f 4f       	sbci	r20, 0xFF	; 255
    6d40:	5f 4f       	sbci	r21, 0xFF	; 255
    6d42:	0c c0       	rjmp	.+24     	; 0x6d5c <strtol+0x236>
    6d44:	57 ff       	sbrs	r21, 7
    6d46:	0a c0       	rjmp	.+20     	; 0x6d5c <strtol+0x236>
    6d48:	82 e2       	ldi	r24, 0x22	; 34
    6d4a:	90 e0       	ldi	r25, 0x00	; 0
    6d4c:	90 93 37 01 	sts	0x0137, r25
    6d50:	80 93 36 01 	sts	0x0136, r24
    6d54:	2f ef       	ldi	r18, 0xFF	; 255
    6d56:	3f ef       	ldi	r19, 0xFF	; 255
    6d58:	4f ef       	ldi	r20, 0xFF	; 255
    6d5a:	5f e7       	ldi	r21, 0x7F	; 127
    6d5c:	b9 01       	movw	r22, r18
    6d5e:	ca 01       	movw	r24, r20
    6d60:	04 c0       	rjmp	.+8      	; 0x6d6a <strtol+0x244>
    6d62:	60 e0       	ldi	r22, 0x00	; 0
    6d64:	70 e0       	ldi	r23, 0x00	; 0
    6d66:	80 e0       	ldi	r24, 0x00	; 0
    6d68:	90 e0       	ldi	r25, 0x00	; 0
    6d6a:	df 91       	pop	r29
    6d6c:	cf 91       	pop	r28
    6d6e:	1f 91       	pop	r17
    6d70:	0f 91       	pop	r16
    6d72:	ff 90       	pop	r15
    6d74:	ef 90       	pop	r14
    6d76:	df 90       	pop	r13
    6d78:	cf 90       	pop	r12
    6d7a:	bf 90       	pop	r11
    6d7c:	af 90       	pop	r10
    6d7e:	9f 90       	pop	r9
    6d80:	8f 90       	pop	r8
    6d82:	7f 90       	pop	r7
    6d84:	6f 90       	pop	r6
    6d86:	5f 90       	pop	r5
    6d88:	3f 90       	pop	r3
    6d8a:	2f 90       	pop	r2
    6d8c:	08 95       	ret

00006d8e <isspace>:
    6d8e:	91 11       	cpse	r25, r1
    6d90:	15 c2       	rjmp	.+1066   	; 0x71bc <__ctype_isfalse>
    6d92:	80 32       	cpi	r24, 0x20	; 32
    6d94:	19 f0       	breq	.+6      	; 0x6d9c <isspace+0xe>
    6d96:	89 50       	subi	r24, 0x09	; 9
    6d98:	85 50       	subi	r24, 0x05	; 5
    6d9a:	d0 f7       	brcc	.-12     	; 0x6d90 <isspace+0x2>
    6d9c:	08 95       	ret

00006d9e <strrev>:
    6d9e:	dc 01       	movw	r26, r24
    6da0:	fc 01       	movw	r30, r24
    6da2:	67 2f       	mov	r22, r23
    6da4:	71 91       	ld	r23, Z+
    6da6:	77 23       	and	r23, r23
    6da8:	e1 f7       	brne	.-8      	; 0x6da2 <strrev+0x4>
    6daa:	32 97       	sbiw	r30, 0x02	; 2
    6dac:	04 c0       	rjmp	.+8      	; 0x6db6 <strrev+0x18>
    6dae:	7c 91       	ld	r23, X
    6db0:	6d 93       	st	X+, r22
    6db2:	70 83       	st	Z, r23
    6db4:	62 91       	ld	r22, -Z
    6db6:	ae 17       	cp	r26, r30
    6db8:	bf 07       	cpc	r27, r31
    6dba:	c8 f3       	brcs	.-14     	; 0x6dae <strrev+0x10>
    6dbc:	08 95       	ret

00006dbe <sprintf>:
    6dbe:	ae e0       	ldi	r26, 0x0E	; 14
    6dc0:	b0 e0       	ldi	r27, 0x00	; 0
    6dc2:	e5 ee       	ldi	r30, 0xE5	; 229
    6dc4:	f6 e3       	ldi	r31, 0x36	; 54
    6dc6:	0c 94 16 3a 	jmp	0x742c	; 0x742c <__prologue_saves__+0x1c>
    6dca:	0d 89       	ldd	r16, Y+21	; 0x15
    6dcc:	1e 89       	ldd	r17, Y+22	; 0x16
    6dce:	86 e0       	ldi	r24, 0x06	; 6
    6dd0:	8c 83       	std	Y+4, r24	; 0x04
    6dd2:	1a 83       	std	Y+2, r17	; 0x02
    6dd4:	09 83       	std	Y+1, r16	; 0x01
    6dd6:	8f ef       	ldi	r24, 0xFF	; 255
    6dd8:	9f e7       	ldi	r25, 0x7F	; 127
    6dda:	9e 83       	std	Y+6, r25	; 0x06
    6ddc:	8d 83       	std	Y+5, r24	; 0x05
    6dde:	ae 01       	movw	r20, r28
    6de0:	47 5e       	subi	r20, 0xE7	; 231
    6de2:	5f 4f       	sbci	r21, 0xFF	; 255
    6de4:	6f 89       	ldd	r22, Y+23	; 0x17
    6de6:	78 8d       	ldd	r23, Y+24	; 0x18
    6de8:	ce 01       	movw	r24, r28
    6dea:	01 96       	adiw	r24, 0x01	; 1
    6dec:	0e 94 01 37 	call	0x6e02	; 0x6e02 <vfprintf>
    6df0:	ef 81       	ldd	r30, Y+7	; 0x07
    6df2:	f8 85       	ldd	r31, Y+8	; 0x08
    6df4:	e0 0f       	add	r30, r16
    6df6:	f1 1f       	adc	r31, r17
    6df8:	10 82       	st	Z, r1
    6dfa:	2e 96       	adiw	r28, 0x0e	; 14
    6dfc:	e4 e0       	ldi	r30, 0x04	; 4
    6dfe:	0c 94 32 3a 	jmp	0x7464	; 0x7464 <__epilogue_restores__+0x1c>

00006e02 <vfprintf>:
    6e02:	ac e0       	ldi	r26, 0x0C	; 12
    6e04:	b0 e0       	ldi	r27, 0x00	; 0
    6e06:	e7 e0       	ldi	r30, 0x07	; 7
    6e08:	f7 e3       	ldi	r31, 0x37	; 55
    6e0a:	0c 94 08 3a 	jmp	0x7410	; 0x7410 <__prologue_saves__>
    6e0e:	7c 01       	movw	r14, r24
    6e10:	6b 01       	movw	r12, r22
    6e12:	8a 01       	movw	r16, r20
    6e14:	fc 01       	movw	r30, r24
    6e16:	17 82       	std	Z+7, r1	; 0x07
    6e18:	16 82       	std	Z+6, r1	; 0x06
    6e1a:	83 81       	ldd	r24, Z+3	; 0x03
    6e1c:	81 ff       	sbrs	r24, 1
    6e1e:	bd c1       	rjmp	.+890    	; 0x719a <vfprintf+0x398>
    6e20:	ce 01       	movw	r24, r28
    6e22:	01 96       	adiw	r24, 0x01	; 1
    6e24:	4c 01       	movw	r8, r24
    6e26:	f7 01       	movw	r30, r14
    6e28:	93 81       	ldd	r25, Z+3	; 0x03
    6e2a:	f6 01       	movw	r30, r12
    6e2c:	93 fd       	sbrc	r25, 3
    6e2e:	85 91       	lpm	r24, Z+
    6e30:	93 ff       	sbrs	r25, 3
    6e32:	81 91       	ld	r24, Z+
    6e34:	6f 01       	movw	r12, r30
    6e36:	88 23       	and	r24, r24
    6e38:	09 f4       	brne	.+2      	; 0x6e3c <vfprintf+0x3a>
    6e3a:	ab c1       	rjmp	.+854    	; 0x7192 <vfprintf+0x390>
    6e3c:	85 32       	cpi	r24, 0x25	; 37
    6e3e:	39 f4       	brne	.+14     	; 0x6e4e <vfprintf+0x4c>
    6e40:	93 fd       	sbrc	r25, 3
    6e42:	85 91       	lpm	r24, Z+
    6e44:	93 ff       	sbrs	r25, 3
    6e46:	81 91       	ld	r24, Z+
    6e48:	6f 01       	movw	r12, r30
    6e4a:	85 32       	cpi	r24, 0x25	; 37
    6e4c:	29 f4       	brne	.+10     	; 0x6e58 <vfprintf+0x56>
    6e4e:	b7 01       	movw	r22, r14
    6e50:	90 e0       	ldi	r25, 0x00	; 0
    6e52:	0e 94 f7 38 	call	0x71ee	; 0x71ee <fputc>
    6e56:	e7 cf       	rjmp	.-50     	; 0x6e26 <vfprintf+0x24>
    6e58:	51 2c       	mov	r5, r1
    6e5a:	31 2c       	mov	r3, r1
    6e5c:	20 e0       	ldi	r18, 0x00	; 0
    6e5e:	20 32       	cpi	r18, 0x20	; 32
    6e60:	a0 f4       	brcc	.+40     	; 0x6e8a <vfprintf+0x88>
    6e62:	8b 32       	cpi	r24, 0x2B	; 43
    6e64:	69 f0       	breq	.+26     	; 0x6e80 <vfprintf+0x7e>
    6e66:	30 f4       	brcc	.+12     	; 0x6e74 <vfprintf+0x72>
    6e68:	80 32       	cpi	r24, 0x20	; 32
    6e6a:	59 f0       	breq	.+22     	; 0x6e82 <vfprintf+0x80>
    6e6c:	83 32       	cpi	r24, 0x23	; 35
    6e6e:	69 f4       	brne	.+26     	; 0x6e8a <vfprintf+0x88>
    6e70:	20 61       	ori	r18, 0x10	; 16
    6e72:	2c c0       	rjmp	.+88     	; 0x6ecc <vfprintf+0xca>
    6e74:	8d 32       	cpi	r24, 0x2D	; 45
    6e76:	39 f0       	breq	.+14     	; 0x6e86 <vfprintf+0x84>
    6e78:	80 33       	cpi	r24, 0x30	; 48
    6e7a:	39 f4       	brne	.+14     	; 0x6e8a <vfprintf+0x88>
    6e7c:	21 60       	ori	r18, 0x01	; 1
    6e7e:	26 c0       	rjmp	.+76     	; 0x6ecc <vfprintf+0xca>
    6e80:	22 60       	ori	r18, 0x02	; 2
    6e82:	24 60       	ori	r18, 0x04	; 4
    6e84:	23 c0       	rjmp	.+70     	; 0x6ecc <vfprintf+0xca>
    6e86:	28 60       	ori	r18, 0x08	; 8
    6e88:	21 c0       	rjmp	.+66     	; 0x6ecc <vfprintf+0xca>
    6e8a:	27 fd       	sbrc	r18, 7
    6e8c:	27 c0       	rjmp	.+78     	; 0x6edc <vfprintf+0xda>
    6e8e:	30 ed       	ldi	r19, 0xD0	; 208
    6e90:	38 0f       	add	r19, r24
    6e92:	3a 30       	cpi	r19, 0x0A	; 10
    6e94:	78 f4       	brcc	.+30     	; 0x6eb4 <vfprintf+0xb2>
    6e96:	26 ff       	sbrs	r18, 6
    6e98:	06 c0       	rjmp	.+12     	; 0x6ea6 <vfprintf+0xa4>
    6e9a:	fa e0       	ldi	r31, 0x0A	; 10
    6e9c:	5f 9e       	mul	r5, r31
    6e9e:	30 0d       	add	r19, r0
    6ea0:	11 24       	eor	r1, r1
    6ea2:	53 2e       	mov	r5, r19
    6ea4:	13 c0       	rjmp	.+38     	; 0x6ecc <vfprintf+0xca>
    6ea6:	8a e0       	ldi	r24, 0x0A	; 10
    6ea8:	38 9e       	mul	r3, r24
    6eaa:	30 0d       	add	r19, r0
    6eac:	11 24       	eor	r1, r1
    6eae:	33 2e       	mov	r3, r19
    6eb0:	20 62       	ori	r18, 0x20	; 32
    6eb2:	0c c0       	rjmp	.+24     	; 0x6ecc <vfprintf+0xca>
    6eb4:	8e 32       	cpi	r24, 0x2E	; 46
    6eb6:	21 f4       	brne	.+8      	; 0x6ec0 <vfprintf+0xbe>
    6eb8:	26 fd       	sbrc	r18, 6
    6eba:	6b c1       	rjmp	.+726    	; 0x7192 <vfprintf+0x390>
    6ebc:	20 64       	ori	r18, 0x40	; 64
    6ebe:	06 c0       	rjmp	.+12     	; 0x6ecc <vfprintf+0xca>
    6ec0:	8c 36       	cpi	r24, 0x6C	; 108
    6ec2:	11 f4       	brne	.+4      	; 0x6ec8 <vfprintf+0xc6>
    6ec4:	20 68       	ori	r18, 0x80	; 128
    6ec6:	02 c0       	rjmp	.+4      	; 0x6ecc <vfprintf+0xca>
    6ec8:	88 36       	cpi	r24, 0x68	; 104
    6eca:	41 f4       	brne	.+16     	; 0x6edc <vfprintf+0xda>
    6ecc:	f6 01       	movw	r30, r12
    6ece:	93 fd       	sbrc	r25, 3
    6ed0:	85 91       	lpm	r24, Z+
    6ed2:	93 ff       	sbrs	r25, 3
    6ed4:	81 91       	ld	r24, Z+
    6ed6:	6f 01       	movw	r12, r30
    6ed8:	81 11       	cpse	r24, r1
    6eda:	c1 cf       	rjmp	.-126    	; 0x6e5e <vfprintf+0x5c>
    6edc:	98 2f       	mov	r25, r24
    6ede:	9f 7d       	andi	r25, 0xDF	; 223
    6ee0:	95 54       	subi	r25, 0x45	; 69
    6ee2:	93 30       	cpi	r25, 0x03	; 3
    6ee4:	28 f4       	brcc	.+10     	; 0x6ef0 <vfprintf+0xee>
    6ee6:	0c 5f       	subi	r16, 0xFC	; 252
    6ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    6eea:	ff e3       	ldi	r31, 0x3F	; 63
    6eec:	f9 83       	std	Y+1, r31	; 0x01
    6eee:	0d c0       	rjmp	.+26     	; 0x6f0a <vfprintf+0x108>
    6ef0:	83 36       	cpi	r24, 0x63	; 99
    6ef2:	31 f0       	breq	.+12     	; 0x6f00 <vfprintf+0xfe>
    6ef4:	83 37       	cpi	r24, 0x73	; 115
    6ef6:	71 f0       	breq	.+28     	; 0x6f14 <vfprintf+0x112>
    6ef8:	83 35       	cpi	r24, 0x53	; 83
    6efa:	09 f0       	breq	.+2      	; 0x6efe <vfprintf+0xfc>
    6efc:	5b c0       	rjmp	.+182    	; 0x6fb4 <vfprintf+0x1b2>
    6efe:	22 c0       	rjmp	.+68     	; 0x6f44 <vfprintf+0x142>
    6f00:	f8 01       	movw	r30, r16
    6f02:	80 81       	ld	r24, Z
    6f04:	89 83       	std	Y+1, r24	; 0x01
    6f06:	0e 5f       	subi	r16, 0xFE	; 254
    6f08:	1f 4f       	sbci	r17, 0xFF	; 255
    6f0a:	44 24       	eor	r4, r4
    6f0c:	43 94       	inc	r4
    6f0e:	51 2c       	mov	r5, r1
    6f10:	54 01       	movw	r10, r8
    6f12:	15 c0       	rjmp	.+42     	; 0x6f3e <vfprintf+0x13c>
    6f14:	38 01       	movw	r6, r16
    6f16:	f2 e0       	ldi	r31, 0x02	; 2
    6f18:	6f 0e       	add	r6, r31
    6f1a:	71 1c       	adc	r7, r1
    6f1c:	f8 01       	movw	r30, r16
    6f1e:	a0 80       	ld	r10, Z
    6f20:	b1 80       	ldd	r11, Z+1	; 0x01
    6f22:	26 ff       	sbrs	r18, 6
    6f24:	03 c0       	rjmp	.+6      	; 0x6f2c <vfprintf+0x12a>
    6f26:	65 2d       	mov	r22, r5
    6f28:	70 e0       	ldi	r23, 0x00	; 0
    6f2a:	02 c0       	rjmp	.+4      	; 0x6f30 <vfprintf+0x12e>
    6f2c:	6f ef       	ldi	r22, 0xFF	; 255
    6f2e:	7f ef       	ldi	r23, 0xFF	; 255
    6f30:	c5 01       	movw	r24, r10
    6f32:	2c 87       	std	Y+12, r18	; 0x0c
    6f34:	0e 94 ec 38 	call	0x71d8	; 0x71d8 <strnlen>
    6f38:	2c 01       	movw	r4, r24
    6f3a:	83 01       	movw	r16, r6
    6f3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    6f3e:	2f 77       	andi	r18, 0x7F	; 127
    6f40:	22 2e       	mov	r2, r18
    6f42:	17 c0       	rjmp	.+46     	; 0x6f72 <vfprintf+0x170>
    6f44:	38 01       	movw	r6, r16
    6f46:	f2 e0       	ldi	r31, 0x02	; 2
    6f48:	6f 0e       	add	r6, r31
    6f4a:	71 1c       	adc	r7, r1
    6f4c:	f8 01       	movw	r30, r16
    6f4e:	a0 80       	ld	r10, Z
    6f50:	b1 80       	ldd	r11, Z+1	; 0x01
    6f52:	26 ff       	sbrs	r18, 6
    6f54:	03 c0       	rjmp	.+6      	; 0x6f5c <vfprintf+0x15a>
    6f56:	65 2d       	mov	r22, r5
    6f58:	70 e0       	ldi	r23, 0x00	; 0
    6f5a:	02 c0       	rjmp	.+4      	; 0x6f60 <vfprintf+0x15e>
    6f5c:	6f ef       	ldi	r22, 0xFF	; 255
    6f5e:	7f ef       	ldi	r23, 0xFF	; 255
    6f60:	c5 01       	movw	r24, r10
    6f62:	2c 87       	std	Y+12, r18	; 0x0c
    6f64:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <strnlen_P>
    6f68:	2c 01       	movw	r4, r24
    6f6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    6f6c:	20 68       	ori	r18, 0x80	; 128
    6f6e:	22 2e       	mov	r2, r18
    6f70:	83 01       	movw	r16, r6
    6f72:	23 fc       	sbrc	r2, 3
    6f74:	1b c0       	rjmp	.+54     	; 0x6fac <vfprintf+0x1aa>
    6f76:	83 2d       	mov	r24, r3
    6f78:	90 e0       	ldi	r25, 0x00	; 0
    6f7a:	48 16       	cp	r4, r24
    6f7c:	59 06       	cpc	r5, r25
    6f7e:	b0 f4       	brcc	.+44     	; 0x6fac <vfprintf+0x1aa>
    6f80:	b7 01       	movw	r22, r14
    6f82:	80 e2       	ldi	r24, 0x20	; 32
    6f84:	90 e0       	ldi	r25, 0x00	; 0
    6f86:	0e 94 f7 38 	call	0x71ee	; 0x71ee <fputc>
    6f8a:	3a 94       	dec	r3
    6f8c:	f4 cf       	rjmp	.-24     	; 0x6f76 <vfprintf+0x174>
    6f8e:	f5 01       	movw	r30, r10
    6f90:	27 fc       	sbrc	r2, 7
    6f92:	85 91       	lpm	r24, Z+
    6f94:	27 fe       	sbrs	r2, 7
    6f96:	81 91       	ld	r24, Z+
    6f98:	5f 01       	movw	r10, r30
    6f9a:	b7 01       	movw	r22, r14
    6f9c:	90 e0       	ldi	r25, 0x00	; 0
    6f9e:	0e 94 f7 38 	call	0x71ee	; 0x71ee <fputc>
    6fa2:	31 10       	cpse	r3, r1
    6fa4:	3a 94       	dec	r3
    6fa6:	f1 e0       	ldi	r31, 0x01	; 1
    6fa8:	4f 1a       	sub	r4, r31
    6faa:	51 08       	sbc	r5, r1
    6fac:	41 14       	cp	r4, r1
    6fae:	51 04       	cpc	r5, r1
    6fb0:	71 f7       	brne	.-36     	; 0x6f8e <vfprintf+0x18c>
    6fb2:	e5 c0       	rjmp	.+458    	; 0x717e <vfprintf+0x37c>
    6fb4:	84 36       	cpi	r24, 0x64	; 100
    6fb6:	11 f0       	breq	.+4      	; 0x6fbc <vfprintf+0x1ba>
    6fb8:	89 36       	cpi	r24, 0x69	; 105
    6fba:	39 f5       	brne	.+78     	; 0x700a <vfprintf+0x208>
    6fbc:	f8 01       	movw	r30, r16
    6fbe:	27 ff       	sbrs	r18, 7
    6fc0:	07 c0       	rjmp	.+14     	; 0x6fd0 <vfprintf+0x1ce>
    6fc2:	60 81       	ld	r22, Z
    6fc4:	71 81       	ldd	r23, Z+1	; 0x01
    6fc6:	82 81       	ldd	r24, Z+2	; 0x02
    6fc8:	93 81       	ldd	r25, Z+3	; 0x03
    6fca:	0c 5f       	subi	r16, 0xFC	; 252
    6fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    6fce:	08 c0       	rjmp	.+16     	; 0x6fe0 <vfprintf+0x1de>
    6fd0:	60 81       	ld	r22, Z
    6fd2:	71 81       	ldd	r23, Z+1	; 0x01
    6fd4:	88 27       	eor	r24, r24
    6fd6:	77 fd       	sbrc	r23, 7
    6fd8:	80 95       	com	r24
    6fda:	98 2f       	mov	r25, r24
    6fdc:	0e 5f       	subi	r16, 0xFE	; 254
    6fde:	1f 4f       	sbci	r17, 0xFF	; 255
    6fe0:	2f 76       	andi	r18, 0x6F	; 111
    6fe2:	b2 2e       	mov	r11, r18
    6fe4:	97 ff       	sbrs	r25, 7
    6fe6:	09 c0       	rjmp	.+18     	; 0x6ffa <vfprintf+0x1f8>
    6fe8:	90 95       	com	r25
    6fea:	80 95       	com	r24
    6fec:	70 95       	com	r23
    6fee:	61 95       	neg	r22
    6ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ff2:	8f 4f       	sbci	r24, 0xFF	; 255
    6ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ff6:	20 68       	ori	r18, 0x80	; 128
    6ff8:	b2 2e       	mov	r11, r18
    6ffa:	2a e0       	ldi	r18, 0x0A	; 10
    6ffc:	30 e0       	ldi	r19, 0x00	; 0
    6ffe:	a4 01       	movw	r20, r8
    7000:	0e 94 29 39 	call	0x7252	; 0x7252 <__ultoa_invert>
    7004:	a8 2e       	mov	r10, r24
    7006:	a8 18       	sub	r10, r8
    7008:	44 c0       	rjmp	.+136    	; 0x7092 <vfprintf+0x290>
    700a:	85 37       	cpi	r24, 0x75	; 117
    700c:	29 f4       	brne	.+10     	; 0x7018 <vfprintf+0x216>
    700e:	2f 7e       	andi	r18, 0xEF	; 239
    7010:	b2 2e       	mov	r11, r18
    7012:	2a e0       	ldi	r18, 0x0A	; 10
    7014:	30 e0       	ldi	r19, 0x00	; 0
    7016:	25 c0       	rjmp	.+74     	; 0x7062 <vfprintf+0x260>
    7018:	f2 2f       	mov	r31, r18
    701a:	f9 7f       	andi	r31, 0xF9	; 249
    701c:	bf 2e       	mov	r11, r31
    701e:	8f 36       	cpi	r24, 0x6F	; 111
    7020:	c1 f0       	breq	.+48     	; 0x7052 <vfprintf+0x250>
    7022:	18 f4       	brcc	.+6      	; 0x702a <vfprintf+0x228>
    7024:	88 35       	cpi	r24, 0x58	; 88
    7026:	79 f0       	breq	.+30     	; 0x7046 <vfprintf+0x244>
    7028:	b4 c0       	rjmp	.+360    	; 0x7192 <vfprintf+0x390>
    702a:	80 37       	cpi	r24, 0x70	; 112
    702c:	19 f0       	breq	.+6      	; 0x7034 <vfprintf+0x232>
    702e:	88 37       	cpi	r24, 0x78	; 120
    7030:	21 f0       	breq	.+8      	; 0x703a <vfprintf+0x238>
    7032:	af c0       	rjmp	.+350    	; 0x7192 <vfprintf+0x390>
    7034:	2f 2f       	mov	r18, r31
    7036:	20 61       	ori	r18, 0x10	; 16
    7038:	b2 2e       	mov	r11, r18
    703a:	b4 fe       	sbrs	r11, 4
    703c:	0d c0       	rjmp	.+26     	; 0x7058 <vfprintf+0x256>
    703e:	8b 2d       	mov	r24, r11
    7040:	84 60       	ori	r24, 0x04	; 4
    7042:	b8 2e       	mov	r11, r24
    7044:	09 c0       	rjmp	.+18     	; 0x7058 <vfprintf+0x256>
    7046:	24 ff       	sbrs	r18, 4
    7048:	0a c0       	rjmp	.+20     	; 0x705e <vfprintf+0x25c>
    704a:	9f 2f       	mov	r25, r31
    704c:	96 60       	ori	r25, 0x06	; 6
    704e:	b9 2e       	mov	r11, r25
    7050:	06 c0       	rjmp	.+12     	; 0x705e <vfprintf+0x25c>
    7052:	28 e0       	ldi	r18, 0x08	; 8
    7054:	30 e0       	ldi	r19, 0x00	; 0
    7056:	05 c0       	rjmp	.+10     	; 0x7062 <vfprintf+0x260>
    7058:	20 e1       	ldi	r18, 0x10	; 16
    705a:	30 e0       	ldi	r19, 0x00	; 0
    705c:	02 c0       	rjmp	.+4      	; 0x7062 <vfprintf+0x260>
    705e:	20 e1       	ldi	r18, 0x10	; 16
    7060:	32 e0       	ldi	r19, 0x02	; 2
    7062:	f8 01       	movw	r30, r16
    7064:	b7 fe       	sbrs	r11, 7
    7066:	07 c0       	rjmp	.+14     	; 0x7076 <vfprintf+0x274>
    7068:	60 81       	ld	r22, Z
    706a:	71 81       	ldd	r23, Z+1	; 0x01
    706c:	82 81       	ldd	r24, Z+2	; 0x02
    706e:	93 81       	ldd	r25, Z+3	; 0x03
    7070:	0c 5f       	subi	r16, 0xFC	; 252
    7072:	1f 4f       	sbci	r17, 0xFF	; 255
    7074:	06 c0       	rjmp	.+12     	; 0x7082 <vfprintf+0x280>
    7076:	60 81       	ld	r22, Z
    7078:	71 81       	ldd	r23, Z+1	; 0x01
    707a:	80 e0       	ldi	r24, 0x00	; 0
    707c:	90 e0       	ldi	r25, 0x00	; 0
    707e:	0e 5f       	subi	r16, 0xFE	; 254
    7080:	1f 4f       	sbci	r17, 0xFF	; 255
    7082:	a4 01       	movw	r20, r8
    7084:	0e 94 29 39 	call	0x7252	; 0x7252 <__ultoa_invert>
    7088:	a8 2e       	mov	r10, r24
    708a:	a8 18       	sub	r10, r8
    708c:	fb 2d       	mov	r31, r11
    708e:	ff 77       	andi	r31, 0x7F	; 127
    7090:	bf 2e       	mov	r11, r31
    7092:	b6 fe       	sbrs	r11, 6
    7094:	0b c0       	rjmp	.+22     	; 0x70ac <vfprintf+0x2aa>
    7096:	2b 2d       	mov	r18, r11
    7098:	2e 7f       	andi	r18, 0xFE	; 254
    709a:	a5 14       	cp	r10, r5
    709c:	50 f4       	brcc	.+20     	; 0x70b2 <vfprintf+0x2b0>
    709e:	b4 fe       	sbrs	r11, 4
    70a0:	0a c0       	rjmp	.+20     	; 0x70b6 <vfprintf+0x2b4>
    70a2:	b2 fc       	sbrc	r11, 2
    70a4:	08 c0       	rjmp	.+16     	; 0x70b6 <vfprintf+0x2b4>
    70a6:	2b 2d       	mov	r18, r11
    70a8:	2e 7e       	andi	r18, 0xEE	; 238
    70aa:	05 c0       	rjmp	.+10     	; 0x70b6 <vfprintf+0x2b4>
    70ac:	7a 2c       	mov	r7, r10
    70ae:	2b 2d       	mov	r18, r11
    70b0:	03 c0       	rjmp	.+6      	; 0x70b8 <vfprintf+0x2b6>
    70b2:	7a 2c       	mov	r7, r10
    70b4:	01 c0       	rjmp	.+2      	; 0x70b8 <vfprintf+0x2b6>
    70b6:	75 2c       	mov	r7, r5
    70b8:	24 ff       	sbrs	r18, 4
    70ba:	0d c0       	rjmp	.+26     	; 0x70d6 <vfprintf+0x2d4>
    70bc:	fe 01       	movw	r30, r28
    70be:	ea 0d       	add	r30, r10
    70c0:	f1 1d       	adc	r31, r1
    70c2:	80 81       	ld	r24, Z
    70c4:	80 33       	cpi	r24, 0x30	; 48
    70c6:	11 f4       	brne	.+4      	; 0x70cc <vfprintf+0x2ca>
    70c8:	29 7e       	andi	r18, 0xE9	; 233
    70ca:	09 c0       	rjmp	.+18     	; 0x70de <vfprintf+0x2dc>
    70cc:	22 ff       	sbrs	r18, 2
    70ce:	06 c0       	rjmp	.+12     	; 0x70dc <vfprintf+0x2da>
    70d0:	73 94       	inc	r7
    70d2:	73 94       	inc	r7
    70d4:	04 c0       	rjmp	.+8      	; 0x70de <vfprintf+0x2dc>
    70d6:	82 2f       	mov	r24, r18
    70d8:	86 78       	andi	r24, 0x86	; 134
    70da:	09 f0       	breq	.+2      	; 0x70de <vfprintf+0x2dc>
    70dc:	73 94       	inc	r7
    70de:	23 fd       	sbrc	r18, 3
    70e0:	13 c0       	rjmp	.+38     	; 0x7108 <vfprintf+0x306>
    70e2:	20 ff       	sbrs	r18, 0
    70e4:	06 c0       	rjmp	.+12     	; 0x70f2 <vfprintf+0x2f0>
    70e6:	5a 2c       	mov	r5, r10
    70e8:	73 14       	cp	r7, r3
    70ea:	18 f4       	brcc	.+6      	; 0x70f2 <vfprintf+0x2f0>
    70ec:	53 0c       	add	r5, r3
    70ee:	57 18       	sub	r5, r7
    70f0:	73 2c       	mov	r7, r3
    70f2:	73 14       	cp	r7, r3
    70f4:	68 f4       	brcc	.+26     	; 0x7110 <vfprintf+0x30e>
    70f6:	b7 01       	movw	r22, r14
    70f8:	80 e2       	ldi	r24, 0x20	; 32
    70fa:	90 e0       	ldi	r25, 0x00	; 0
    70fc:	2c 87       	std	Y+12, r18	; 0x0c
    70fe:	0e 94 f7 38 	call	0x71ee	; 0x71ee <fputc>
    7102:	73 94       	inc	r7
    7104:	2c 85       	ldd	r18, Y+12	; 0x0c
    7106:	f5 cf       	rjmp	.-22     	; 0x70f2 <vfprintf+0x2f0>
    7108:	73 14       	cp	r7, r3
    710a:	10 f4       	brcc	.+4      	; 0x7110 <vfprintf+0x30e>
    710c:	37 18       	sub	r3, r7
    710e:	01 c0       	rjmp	.+2      	; 0x7112 <vfprintf+0x310>
    7110:	31 2c       	mov	r3, r1
    7112:	24 ff       	sbrs	r18, 4
    7114:	12 c0       	rjmp	.+36     	; 0x713a <vfprintf+0x338>
    7116:	b7 01       	movw	r22, r14
    7118:	80 e3       	ldi	r24, 0x30	; 48
    711a:	90 e0       	ldi	r25, 0x00	; 0
    711c:	2c 87       	std	Y+12, r18	; 0x0c
    711e:	0e 94 f7 38 	call	0x71ee	; 0x71ee <fputc>
    7122:	2c 85       	ldd	r18, Y+12	; 0x0c
    7124:	22 ff       	sbrs	r18, 2
    7126:	17 c0       	rjmp	.+46     	; 0x7156 <vfprintf+0x354>
    7128:	21 ff       	sbrs	r18, 1
    712a:	03 c0       	rjmp	.+6      	; 0x7132 <vfprintf+0x330>
    712c:	88 e5       	ldi	r24, 0x58	; 88
    712e:	90 e0       	ldi	r25, 0x00	; 0
    7130:	02 c0       	rjmp	.+4      	; 0x7136 <vfprintf+0x334>
    7132:	88 e7       	ldi	r24, 0x78	; 120
    7134:	90 e0       	ldi	r25, 0x00	; 0
    7136:	b7 01       	movw	r22, r14
    7138:	0c c0       	rjmp	.+24     	; 0x7152 <vfprintf+0x350>
    713a:	82 2f       	mov	r24, r18
    713c:	86 78       	andi	r24, 0x86	; 134
    713e:	59 f0       	breq	.+22     	; 0x7156 <vfprintf+0x354>
    7140:	21 fd       	sbrc	r18, 1
    7142:	02 c0       	rjmp	.+4      	; 0x7148 <vfprintf+0x346>
    7144:	80 e2       	ldi	r24, 0x20	; 32
    7146:	01 c0       	rjmp	.+2      	; 0x714a <vfprintf+0x348>
    7148:	8b e2       	ldi	r24, 0x2B	; 43
    714a:	27 fd       	sbrc	r18, 7
    714c:	8d e2       	ldi	r24, 0x2D	; 45
    714e:	b7 01       	movw	r22, r14
    7150:	90 e0       	ldi	r25, 0x00	; 0
    7152:	0e 94 f7 38 	call	0x71ee	; 0x71ee <fputc>
    7156:	a5 14       	cp	r10, r5
    7158:	38 f4       	brcc	.+14     	; 0x7168 <vfprintf+0x366>
    715a:	b7 01       	movw	r22, r14
    715c:	80 e3       	ldi	r24, 0x30	; 48
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	0e 94 f7 38 	call	0x71ee	; 0x71ee <fputc>
    7164:	5a 94       	dec	r5
    7166:	f7 cf       	rjmp	.-18     	; 0x7156 <vfprintf+0x354>
    7168:	aa 94       	dec	r10
    716a:	f4 01       	movw	r30, r8
    716c:	ea 0d       	add	r30, r10
    716e:	f1 1d       	adc	r31, r1
    7170:	80 81       	ld	r24, Z
    7172:	b7 01       	movw	r22, r14
    7174:	90 e0       	ldi	r25, 0x00	; 0
    7176:	0e 94 f7 38 	call	0x71ee	; 0x71ee <fputc>
    717a:	a1 10       	cpse	r10, r1
    717c:	f5 cf       	rjmp	.-22     	; 0x7168 <vfprintf+0x366>
    717e:	33 20       	and	r3, r3
    7180:	09 f4       	brne	.+2      	; 0x7184 <vfprintf+0x382>
    7182:	51 ce       	rjmp	.-862    	; 0x6e26 <vfprintf+0x24>
    7184:	b7 01       	movw	r22, r14
    7186:	80 e2       	ldi	r24, 0x20	; 32
    7188:	90 e0       	ldi	r25, 0x00	; 0
    718a:	0e 94 f7 38 	call	0x71ee	; 0x71ee <fputc>
    718e:	3a 94       	dec	r3
    7190:	f6 cf       	rjmp	.-20     	; 0x717e <vfprintf+0x37c>
    7192:	f7 01       	movw	r30, r14
    7194:	86 81       	ldd	r24, Z+6	; 0x06
    7196:	97 81       	ldd	r25, Z+7	; 0x07
    7198:	02 c0       	rjmp	.+4      	; 0x719e <vfprintf+0x39c>
    719a:	8f ef       	ldi	r24, 0xFF	; 255
    719c:	9f ef       	ldi	r25, 0xFF	; 255
    719e:	2c 96       	adiw	r28, 0x0c	; 12
    71a0:	e2 e1       	ldi	r30, 0x12	; 18
    71a2:	0c 94 24 3a 	jmp	0x7448	; 0x7448 <__epilogue_restores__>

000071a6 <__eerd_word_m32>:
    71a6:	a8 e1       	ldi	r26, 0x18	; 24
    71a8:	b0 e0       	ldi	r27, 0x00	; 0
    71aa:	42 e0       	ldi	r20, 0x02	; 2
    71ac:	50 e0       	ldi	r21, 0x00	; 0
    71ae:	0c 94 89 39 	jmp	0x7312	; 0x7312 <__eerd_blraw_m32>

000071b2 <__eewr_word_m32>:
    71b2:	0e 94 97 39 	call	0x732e	; 0x732e <__eewr_byte_m32>
    71b6:	27 2f       	mov	r18, r23
    71b8:	0c 94 98 39 	jmp	0x7330	; 0x7330 <__eewr_r18_m32>

000071bc <__ctype_isfalse>:
    71bc:	99 27       	eor	r25, r25
    71be:	88 27       	eor	r24, r24

000071c0 <__ctype_istrue>:
    71c0:	08 95       	ret

000071c2 <strnlen_P>:
    71c2:	fc 01       	movw	r30, r24
    71c4:	05 90       	lpm	r0, Z+
    71c6:	61 50       	subi	r22, 0x01	; 1
    71c8:	70 40       	sbci	r23, 0x00	; 0
    71ca:	01 10       	cpse	r0, r1
    71cc:	d8 f7       	brcc	.-10     	; 0x71c4 <strnlen_P+0x2>
    71ce:	80 95       	com	r24
    71d0:	90 95       	com	r25
    71d2:	8e 0f       	add	r24, r30
    71d4:	9f 1f       	adc	r25, r31
    71d6:	08 95       	ret

000071d8 <strnlen>:
    71d8:	fc 01       	movw	r30, r24
    71da:	61 50       	subi	r22, 0x01	; 1
    71dc:	70 40       	sbci	r23, 0x00	; 0
    71de:	01 90       	ld	r0, Z+
    71e0:	01 10       	cpse	r0, r1
    71e2:	d8 f7       	brcc	.-10     	; 0x71da <strnlen+0x2>
    71e4:	80 95       	com	r24
    71e6:	90 95       	com	r25
    71e8:	8e 0f       	add	r24, r30
    71ea:	9f 1f       	adc	r25, r31
    71ec:	08 95       	ret

000071ee <fputc>:
    71ee:	0f 93       	push	r16
    71f0:	1f 93       	push	r17
    71f2:	cf 93       	push	r28
    71f4:	df 93       	push	r29
    71f6:	18 2f       	mov	r17, r24
    71f8:	09 2f       	mov	r16, r25
    71fa:	eb 01       	movw	r28, r22
    71fc:	8b 81       	ldd	r24, Y+3	; 0x03
    71fe:	81 fd       	sbrc	r24, 1
    7200:	03 c0       	rjmp	.+6      	; 0x7208 <fputc+0x1a>
    7202:	8f ef       	ldi	r24, 0xFF	; 255
    7204:	9f ef       	ldi	r25, 0xFF	; 255
    7206:	20 c0       	rjmp	.+64     	; 0x7248 <fputc+0x5a>
    7208:	82 ff       	sbrs	r24, 2
    720a:	10 c0       	rjmp	.+32     	; 0x722c <fputc+0x3e>
    720c:	4e 81       	ldd	r20, Y+6	; 0x06
    720e:	5f 81       	ldd	r21, Y+7	; 0x07
    7210:	2c 81       	ldd	r18, Y+4	; 0x04
    7212:	3d 81       	ldd	r19, Y+5	; 0x05
    7214:	42 17       	cp	r20, r18
    7216:	53 07       	cpc	r21, r19
    7218:	7c f4       	brge	.+30     	; 0x7238 <fputc+0x4a>
    721a:	e8 81       	ld	r30, Y
    721c:	f9 81       	ldd	r31, Y+1	; 0x01
    721e:	9f 01       	movw	r18, r30
    7220:	2f 5f       	subi	r18, 0xFF	; 255
    7222:	3f 4f       	sbci	r19, 0xFF	; 255
    7224:	39 83       	std	Y+1, r19	; 0x01
    7226:	28 83       	st	Y, r18
    7228:	10 83       	st	Z, r17
    722a:	06 c0       	rjmp	.+12     	; 0x7238 <fputc+0x4a>
    722c:	e8 85       	ldd	r30, Y+8	; 0x08
    722e:	f9 85       	ldd	r31, Y+9	; 0x09
    7230:	81 2f       	mov	r24, r17
    7232:	09 95       	icall
    7234:	89 2b       	or	r24, r25
    7236:	29 f7       	brne	.-54     	; 0x7202 <fputc+0x14>
    7238:	2e 81       	ldd	r18, Y+6	; 0x06
    723a:	3f 81       	ldd	r19, Y+7	; 0x07
    723c:	2f 5f       	subi	r18, 0xFF	; 255
    723e:	3f 4f       	sbci	r19, 0xFF	; 255
    7240:	3f 83       	std	Y+7, r19	; 0x07
    7242:	2e 83       	std	Y+6, r18	; 0x06
    7244:	81 2f       	mov	r24, r17
    7246:	90 2f       	mov	r25, r16
    7248:	df 91       	pop	r29
    724a:	cf 91       	pop	r28
    724c:	1f 91       	pop	r17
    724e:	0f 91       	pop	r16
    7250:	08 95       	ret

00007252 <__ultoa_invert>:
    7252:	fa 01       	movw	r30, r20
    7254:	aa 27       	eor	r26, r26
    7256:	28 30       	cpi	r18, 0x08	; 8
    7258:	51 f1       	breq	.+84     	; 0x72ae <__ultoa_invert+0x5c>
    725a:	20 31       	cpi	r18, 0x10	; 16
    725c:	81 f1       	breq	.+96     	; 0x72be <__ultoa_invert+0x6c>
    725e:	e8 94       	clt
    7260:	6f 93       	push	r22
    7262:	6e 7f       	andi	r22, 0xFE	; 254
    7264:	6e 5f       	subi	r22, 0xFE	; 254
    7266:	7f 4f       	sbci	r23, 0xFF	; 255
    7268:	8f 4f       	sbci	r24, 0xFF	; 255
    726a:	9f 4f       	sbci	r25, 0xFF	; 255
    726c:	af 4f       	sbci	r26, 0xFF	; 255
    726e:	b1 e0       	ldi	r27, 0x01	; 1
    7270:	3e d0       	rcall	.+124    	; 0x72ee <__ultoa_invert+0x9c>
    7272:	b4 e0       	ldi	r27, 0x04	; 4
    7274:	3c d0       	rcall	.+120    	; 0x72ee <__ultoa_invert+0x9c>
    7276:	67 0f       	add	r22, r23
    7278:	78 1f       	adc	r23, r24
    727a:	89 1f       	adc	r24, r25
    727c:	9a 1f       	adc	r25, r26
    727e:	a1 1d       	adc	r26, r1
    7280:	68 0f       	add	r22, r24
    7282:	79 1f       	adc	r23, r25
    7284:	8a 1f       	adc	r24, r26
    7286:	91 1d       	adc	r25, r1
    7288:	a1 1d       	adc	r26, r1
    728a:	6a 0f       	add	r22, r26
    728c:	71 1d       	adc	r23, r1
    728e:	81 1d       	adc	r24, r1
    7290:	91 1d       	adc	r25, r1
    7292:	a1 1d       	adc	r26, r1
    7294:	20 d0       	rcall	.+64     	; 0x72d6 <__ultoa_invert+0x84>
    7296:	09 f4       	brne	.+2      	; 0x729a <__ultoa_invert+0x48>
    7298:	68 94       	set
    729a:	3f 91       	pop	r19
    729c:	2a e0       	ldi	r18, 0x0A	; 10
    729e:	26 9f       	mul	r18, r22
    72a0:	11 24       	eor	r1, r1
    72a2:	30 19       	sub	r19, r0
    72a4:	30 5d       	subi	r19, 0xD0	; 208
    72a6:	31 93       	st	Z+, r19
    72a8:	de f6       	brtc	.-74     	; 0x7260 <__ultoa_invert+0xe>
    72aa:	cf 01       	movw	r24, r30
    72ac:	08 95       	ret
    72ae:	46 2f       	mov	r20, r22
    72b0:	47 70       	andi	r20, 0x07	; 7
    72b2:	40 5d       	subi	r20, 0xD0	; 208
    72b4:	41 93       	st	Z+, r20
    72b6:	b3 e0       	ldi	r27, 0x03	; 3
    72b8:	0f d0       	rcall	.+30     	; 0x72d8 <__ultoa_invert+0x86>
    72ba:	c9 f7       	brne	.-14     	; 0x72ae <__ultoa_invert+0x5c>
    72bc:	f6 cf       	rjmp	.-20     	; 0x72aa <__ultoa_invert+0x58>
    72be:	46 2f       	mov	r20, r22
    72c0:	4f 70       	andi	r20, 0x0F	; 15
    72c2:	40 5d       	subi	r20, 0xD0	; 208
    72c4:	4a 33       	cpi	r20, 0x3A	; 58
    72c6:	18 f0       	brcs	.+6      	; 0x72ce <__ultoa_invert+0x7c>
    72c8:	49 5d       	subi	r20, 0xD9	; 217
    72ca:	31 fd       	sbrc	r19, 1
    72cc:	40 52       	subi	r20, 0x20	; 32
    72ce:	41 93       	st	Z+, r20
    72d0:	02 d0       	rcall	.+4      	; 0x72d6 <__ultoa_invert+0x84>
    72d2:	a9 f7       	brne	.-22     	; 0x72be <__ultoa_invert+0x6c>
    72d4:	ea cf       	rjmp	.-44     	; 0x72aa <__ultoa_invert+0x58>
    72d6:	b4 e0       	ldi	r27, 0x04	; 4
    72d8:	a6 95       	lsr	r26
    72da:	97 95       	ror	r25
    72dc:	87 95       	ror	r24
    72de:	77 95       	ror	r23
    72e0:	67 95       	ror	r22
    72e2:	ba 95       	dec	r27
    72e4:	c9 f7       	brne	.-14     	; 0x72d8 <__ultoa_invert+0x86>
    72e6:	00 97       	sbiw	r24, 0x00	; 0
    72e8:	61 05       	cpc	r22, r1
    72ea:	71 05       	cpc	r23, r1
    72ec:	08 95       	ret
    72ee:	9b 01       	movw	r18, r22
    72f0:	ac 01       	movw	r20, r24
    72f2:	0a 2e       	mov	r0, r26
    72f4:	06 94       	lsr	r0
    72f6:	57 95       	ror	r21
    72f8:	47 95       	ror	r20
    72fa:	37 95       	ror	r19
    72fc:	27 95       	ror	r18
    72fe:	ba 95       	dec	r27
    7300:	c9 f7       	brne	.-14     	; 0x72f4 <__ultoa_invert+0xa2>
    7302:	62 0f       	add	r22, r18
    7304:	73 1f       	adc	r23, r19
    7306:	84 1f       	adc	r24, r20
    7308:	95 1f       	adc	r25, r21
    730a:	a0 1d       	adc	r26, r0
    730c:	08 95       	ret

0000730e <__eerd_block_m32>:
    730e:	dc 01       	movw	r26, r24
    7310:	cb 01       	movw	r24, r22

00007312 <__eerd_blraw_m32>:
    7312:	fc 01       	movw	r30, r24
    7314:	e1 99       	sbic	0x1c, 1	; 28
    7316:	fe cf       	rjmp	.-4      	; 0x7314 <__eerd_blraw_m32+0x2>
    7318:	06 c0       	rjmp	.+12     	; 0x7326 <__eerd_blraw_m32+0x14>
    731a:	ff bb       	out	0x1f, r31	; 31
    731c:	ee bb       	out	0x1e, r30	; 30
    731e:	e0 9a       	sbi	0x1c, 0	; 28
    7320:	31 96       	adiw	r30, 0x01	; 1
    7322:	0d b2       	in	r0, 0x1d	; 29
    7324:	0d 92       	st	X+, r0
    7326:	41 50       	subi	r20, 0x01	; 1
    7328:	50 40       	sbci	r21, 0x00	; 0
    732a:	b8 f7       	brcc	.-18     	; 0x731a <__eerd_blraw_m32+0x8>
    732c:	08 95       	ret

0000732e <__eewr_byte_m32>:
    732e:	26 2f       	mov	r18, r22

00007330 <__eewr_r18_m32>:
    7330:	e1 99       	sbic	0x1c, 1	; 28
    7332:	fe cf       	rjmp	.-4      	; 0x7330 <__eewr_r18_m32>
    7334:	9f bb       	out	0x1f, r25	; 31
    7336:	8e bb       	out	0x1e, r24	; 30
    7338:	2d bb       	out	0x1d, r18	; 29
    733a:	0f b6       	in	r0, 0x3f	; 63
    733c:	f8 94       	cli
    733e:	e2 9a       	sbi	0x1c, 2	; 28
    7340:	e1 9a       	sbi	0x1c, 1	; 28
    7342:	0f be       	out	0x3f, r0	; 63
    7344:	01 96       	adiw	r24, 0x01	; 1
    7346:	08 95       	ret

00007348 <__mulsi3>:
    7348:	db 01       	movw	r26, r22
    734a:	8f 93       	push	r24
    734c:	9f 93       	push	r25
    734e:	0e 94 f5 39 	call	0x73ea	; 0x73ea <__muluhisi3>
    7352:	bf 91       	pop	r27
    7354:	af 91       	pop	r26
    7356:	a2 9f       	mul	r26, r18
    7358:	80 0d       	add	r24, r0
    735a:	91 1d       	adc	r25, r1
    735c:	a3 9f       	mul	r26, r19
    735e:	90 0d       	add	r25, r0
    7360:	b2 9f       	mul	r27, r18
    7362:	90 0d       	add	r25, r0
    7364:	11 24       	eor	r1, r1
    7366:	08 95       	ret

00007368 <__udivmodsi4>:
    7368:	a1 e2       	ldi	r26, 0x21	; 33
    736a:	1a 2e       	mov	r1, r26
    736c:	aa 1b       	sub	r26, r26
    736e:	bb 1b       	sub	r27, r27
    7370:	fd 01       	movw	r30, r26
    7372:	0d c0       	rjmp	.+26     	; 0x738e <__udivmodsi4_ep>

00007374 <__udivmodsi4_loop>:
    7374:	aa 1f       	adc	r26, r26
    7376:	bb 1f       	adc	r27, r27
    7378:	ee 1f       	adc	r30, r30
    737a:	ff 1f       	adc	r31, r31
    737c:	a2 17       	cp	r26, r18
    737e:	b3 07       	cpc	r27, r19
    7380:	e4 07       	cpc	r30, r20
    7382:	f5 07       	cpc	r31, r21
    7384:	20 f0       	brcs	.+8      	; 0x738e <__udivmodsi4_ep>
    7386:	a2 1b       	sub	r26, r18
    7388:	b3 0b       	sbc	r27, r19
    738a:	e4 0b       	sbc	r30, r20
    738c:	f5 0b       	sbc	r31, r21

0000738e <__udivmodsi4_ep>:
    738e:	66 1f       	adc	r22, r22
    7390:	77 1f       	adc	r23, r23
    7392:	88 1f       	adc	r24, r24
    7394:	99 1f       	adc	r25, r25
    7396:	1a 94       	dec	r1
    7398:	69 f7       	brne	.-38     	; 0x7374 <__udivmodsi4_loop>
    739a:	60 95       	com	r22
    739c:	70 95       	com	r23
    739e:	80 95       	com	r24
    73a0:	90 95       	com	r25
    73a2:	9b 01       	movw	r18, r22
    73a4:	ac 01       	movw	r20, r24
    73a6:	bd 01       	movw	r22, r26
    73a8:	cf 01       	movw	r24, r30
    73aa:	08 95       	ret

000073ac <__divmodsi4>:
    73ac:	05 2e       	mov	r0, r21
    73ae:	97 fb       	bst	r25, 7
    73b0:	1e f4       	brtc	.+6      	; 0x73b8 <__divmodsi4+0xc>
    73b2:	00 94       	com	r0
    73b4:	0e 94 ed 39 	call	0x73da	; 0x73da <__negsi2>
    73b8:	57 fd       	sbrc	r21, 7
    73ba:	07 d0       	rcall	.+14     	; 0x73ca <__divmodsi4_neg2>
    73bc:	0e 94 b4 39 	call	0x7368	; 0x7368 <__udivmodsi4>
    73c0:	07 fc       	sbrc	r0, 7
    73c2:	03 d0       	rcall	.+6      	; 0x73ca <__divmodsi4_neg2>
    73c4:	4e f4       	brtc	.+18     	; 0x73d8 <__divmodsi4_exit>
    73c6:	0c 94 ed 39 	jmp	0x73da	; 0x73da <__negsi2>

000073ca <__divmodsi4_neg2>:
    73ca:	50 95       	com	r21
    73cc:	40 95       	com	r20
    73ce:	30 95       	com	r19
    73d0:	21 95       	neg	r18
    73d2:	3f 4f       	sbci	r19, 0xFF	; 255
    73d4:	4f 4f       	sbci	r20, 0xFF	; 255
    73d6:	5f 4f       	sbci	r21, 0xFF	; 255

000073d8 <__divmodsi4_exit>:
    73d8:	08 95       	ret

000073da <__negsi2>:
    73da:	90 95       	com	r25
    73dc:	80 95       	com	r24
    73de:	70 95       	com	r23
    73e0:	61 95       	neg	r22
    73e2:	7f 4f       	sbci	r23, 0xFF	; 255
    73e4:	8f 4f       	sbci	r24, 0xFF	; 255
    73e6:	9f 4f       	sbci	r25, 0xFF	; 255
    73e8:	08 95       	ret

000073ea <__muluhisi3>:
    73ea:	0e 94 3f 3a 	call	0x747e	; 0x747e <__umulhisi3>
    73ee:	a5 9f       	mul	r26, r21
    73f0:	90 0d       	add	r25, r0
    73f2:	b4 9f       	mul	r27, r20
    73f4:	90 0d       	add	r25, r0
    73f6:	a4 9f       	mul	r26, r20
    73f8:	80 0d       	add	r24, r0
    73fa:	91 1d       	adc	r25, r1
    73fc:	11 24       	eor	r1, r1
    73fe:	08 95       	ret

00007400 <__mulshisi3>:
    7400:	b7 ff       	sbrs	r27, 7
    7402:	0c 94 f5 39 	jmp	0x73ea	; 0x73ea <__muluhisi3>

00007406 <__mulohisi3>:
    7406:	0e 94 f5 39 	call	0x73ea	; 0x73ea <__muluhisi3>
    740a:	82 1b       	sub	r24, r18
    740c:	93 0b       	sbc	r25, r19
    740e:	08 95       	ret

00007410 <__prologue_saves__>:
    7410:	2f 92       	push	r2
    7412:	3f 92       	push	r3
    7414:	4f 92       	push	r4
    7416:	5f 92       	push	r5
    7418:	6f 92       	push	r6
    741a:	7f 92       	push	r7
    741c:	8f 92       	push	r8
    741e:	9f 92       	push	r9
    7420:	af 92       	push	r10
    7422:	bf 92       	push	r11
    7424:	cf 92       	push	r12
    7426:	df 92       	push	r13
    7428:	ef 92       	push	r14
    742a:	ff 92       	push	r15
    742c:	0f 93       	push	r16
    742e:	1f 93       	push	r17
    7430:	cf 93       	push	r28
    7432:	df 93       	push	r29
    7434:	cd b7       	in	r28, 0x3d	; 61
    7436:	de b7       	in	r29, 0x3e	; 62
    7438:	ca 1b       	sub	r28, r26
    743a:	db 0b       	sbc	r29, r27
    743c:	0f b6       	in	r0, 0x3f	; 63
    743e:	f8 94       	cli
    7440:	de bf       	out	0x3e, r29	; 62
    7442:	0f be       	out	0x3f, r0	; 63
    7444:	cd bf       	out	0x3d, r28	; 61
    7446:	09 94       	ijmp

00007448 <__epilogue_restores__>:
    7448:	2a 88       	ldd	r2, Y+18	; 0x12
    744a:	39 88       	ldd	r3, Y+17	; 0x11
    744c:	48 88       	ldd	r4, Y+16	; 0x10
    744e:	5f 84       	ldd	r5, Y+15	; 0x0f
    7450:	6e 84       	ldd	r6, Y+14	; 0x0e
    7452:	7d 84       	ldd	r7, Y+13	; 0x0d
    7454:	8c 84       	ldd	r8, Y+12	; 0x0c
    7456:	9b 84       	ldd	r9, Y+11	; 0x0b
    7458:	aa 84       	ldd	r10, Y+10	; 0x0a
    745a:	b9 84       	ldd	r11, Y+9	; 0x09
    745c:	c8 84       	ldd	r12, Y+8	; 0x08
    745e:	df 80       	ldd	r13, Y+7	; 0x07
    7460:	ee 80       	ldd	r14, Y+6	; 0x06
    7462:	fd 80       	ldd	r15, Y+5	; 0x05
    7464:	0c 81       	ldd	r16, Y+4	; 0x04
    7466:	1b 81       	ldd	r17, Y+3	; 0x03
    7468:	aa 81       	ldd	r26, Y+2	; 0x02
    746a:	b9 81       	ldd	r27, Y+1	; 0x01
    746c:	ce 0f       	add	r28, r30
    746e:	d1 1d       	adc	r29, r1
    7470:	0f b6       	in	r0, 0x3f	; 63
    7472:	f8 94       	cli
    7474:	de bf       	out	0x3e, r29	; 62
    7476:	0f be       	out	0x3f, r0	; 63
    7478:	cd bf       	out	0x3d, r28	; 61
    747a:	ed 01       	movw	r28, r26
    747c:	08 95       	ret

0000747e <__umulhisi3>:
    747e:	a2 9f       	mul	r26, r18
    7480:	b0 01       	movw	r22, r0
    7482:	b3 9f       	mul	r27, r19
    7484:	c0 01       	movw	r24, r0
    7486:	a3 9f       	mul	r26, r19
    7488:	70 0d       	add	r23, r0
    748a:	81 1d       	adc	r24, r1
    748c:	11 24       	eor	r1, r1
    748e:	91 1d       	adc	r25, r1
    7490:	b2 9f       	mul	r27, r18
    7492:	70 0d       	add	r23, r0
    7494:	81 1d       	adc	r24, r1
    7496:	11 24       	eor	r1, r1
    7498:	91 1d       	adc	r25, r1
    749a:	08 95       	ret

0000749c <_exit>:
    749c:	f8 94       	cli

0000749e <__stop_program>:
    749e:	ff cf       	rjmp	.-2      	; 0x749e <__stop_program>
