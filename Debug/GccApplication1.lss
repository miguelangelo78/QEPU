
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034f0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  000034f0  000035a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c0  008000c0  00003604  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00003604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003606  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00003662  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006061  00000000  00000000  000038ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9d  00000000  00000000  0000994b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc4  00000000  00000000  0000a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bdc  00000000  00000000  0000b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b1b  00000000  00000000  0000c288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000390a  00000000  00000000  0000cda3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  000106ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      54:	98 0d       	add	r25, r8
      56:	b3 0d       	add	r27, r3
      58:	db 0e       	add	r13, r27
      5a:	db 0e       	add	r13, r27
      5c:	db 0e       	add	r13, r27
      5e:	db 0e       	add	r13, r27
      60:	db 0e       	add	r13, r27
      62:	db 0e       	add	r13, r27
      64:	db 0e       	add	r13, r27
      66:	b9 0d       	add	r27, r9
      68:	db 0e       	add	r13, r27
      6a:	db 0e       	add	r13, r27
      6c:	db 0e       	add	r13, r27
      6e:	bf 0d       	add	r27, r15
      70:	c7 0d       	add	r28, r7
      72:	cf 0d       	add	r28, r15
      74:	f6 0d       	add	r31, r6
      76:	1d 0e       	add	r1, r29
      78:	44 0e       	add	r4, r20
      7a:	6b 0e       	add	r6, r27
      7c:	92 0e       	add	r9, r18
      7e:	b9 0e       	add	r11, r25
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfa>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef510>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates8ampl2vecEiPiS0_+0xe4>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d4>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef744>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b6>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f0>
      d4:	3f 05       	cpc	r19, r15
      d6:	a8 4c       	sbci	r26, 0xC8	; 200
      d8:	cd b2       	in	r12, 0x1d	; 29
      da:	d4 4e       	sbci	r29, 0xE4	; 228
      dc:	b9 38       	cpi	r27, 0x89	; 137
      de:	36 a9       	ldd	r19, Z+54	; 0x36
      e0:	02 0c       	add	r0, r2
      e2:	50 b9       	out	0x00, r21	; 0
      e4:	91 86       	std	Z+9, r9	; 0x09
      e6:	88 08       	sbc	r8, r8
      e8:	3c a6       	std	Y+44, r3	; 0x2c
      ea:	aa aa       	std	Y+50, r10	; 0x32
      ec:	2a be       	out	0x3a, r2	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 08       	sbc	r3, r15
      f4:	00 00       	nop
      f6:	00 be       	out	0x30, r0	; 48
      f8:	92 24       	eor	r9, r2
      fa:	49 12       	cpse	r4, r25
      fc:	3e ab       	std	Y+54, r19	; 0x36
      fe:	aa aa       	std	Y+50, r10	; 0x32
     100:	2a be       	out	0x3a, r2	; 58
     102:	cd cc       	rjmp	.-1638   	; 0xfffffa9e <__eeprom_end+0xff7efa9c>
     104:	cc 4c       	sbci	r28, 0xCC	; 204
     106:	3e 00       	.word	0x003e	; ????
     108:	00 00       	nop
     10a:	80 be       	out	0x30, r8	; 48
     10c:	ab aa       	std	Y+51, r10	; 0x33
     10e:	aa aa       	std	Y+50, r10	; 0x32
     110:	3e 00       	.word	0x003e	; ????
     112:	00 00       	nop
     114:	00 bf       	out	0x30, r16	; 48
     116:	00 00       	nop
     118:	00 80       	ld	r0, Z
     11a:	3f 00       	.word	0x003f	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	08 41       	sbci	r16, 0x18	; 24
     122:	78 d3       	rcall	.+1776   	; 0x814 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a2>
     124:	bb 43       	sbci	r27, 0x3B	; 59
     126:	87 d1       	rcall	.+782    	; 0x436 <_ZN6EEProm4readEj+0x4a>
     128:	13 3d       	cpi	r17, 0xD3	; 211
     12a:	19 0e       	add	r1, r25
     12c:	3c c3       	rjmp	.+1656   	; 0x7a6 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x134>
     12e:	bd 42       	sbci	r27, 0x2D	; 45
     130:	82 ad       	ldd	r24, Z+58	; 0x3a
     132:	2b 3e       	cpi	r18, 0xEB	; 235
     134:	68 ec       	ldi	r22, 0xC8	; 200
     136:	82 76       	andi	r24, 0x62	; 98
     138:	be d9       	rcall	.-3204   	; 0xfffff4b6 <__eeprom_end+0xff7ef4b4>
     13a:	8f e1       	ldi	r24, 0x1F	; 31
     13c:	a9 3e       	cpi	r26, 0xE9	; 233
     13e:	4c 80       	ldd	r4, Y+4	; 0x04
     140:	ef ff       	.word	0xffef	; ????
     142:	be 01       	movw	r22, r28
     144:	c4 ff       	sbrs	r28, 4
     146:	7f 3f       	cpi	r23, 0xFF	; 255
     148:	00 00       	nop
     14a:	00 00       	nop
	...

0000014e <__ctors_start>:
     14e:	9e 0b       	sbc	r25, r30

00000150 <__ctors_end>:
     150:	11 24       	eor	r1, r1
     152:	1f be       	out	0x3f, r1	; 63
     154:	cf e5       	ldi	r28, 0x5F	; 95
     156:	d4 e0       	ldi	r29, 0x04	; 4
     158:	de bf       	out	0x3e, r29	; 62
     15a:	cd bf       	out	0x3d, r28	; 61

0000015c <__do_copy_data>:
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	a0 e6       	ldi	r26, 0x60	; 96
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	e0 ef       	ldi	r30, 0xF0	; 240
     164:	f4 e3       	ldi	r31, 0x34	; 52
     166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x10>
     168:	05 90       	lpm	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	a0 3c       	cpi	r26, 0xC0	; 192
     16e:	b1 07       	cpc	r27, r17
     170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0xc>

00000172 <__do_clear_bss>:
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	a0 ec       	ldi	r26, 0xC0	; 192
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
     17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
     17c:	a8 3c       	cpi	r26, 0xC8	; 200
     17e:	b2 07       	cpc	r27, r18
     180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>

00000182 <__do_global_ctors>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	c0 e5       	ldi	r28, 0x50	; 80
     186:	d1 e0       	ldi	r29, 0x01	; 1
     188:	04 c0       	rjmp	.+8      	; 0x192 <__do_global_ctors+0x10>
     18a:	22 97       	sbiw	r28, 0x02	; 2
     18c:	fe 01       	movw	r30, r28
     18e:	0e 94 2e 14 	call	0x285c	; 0x285c <__tablejump__>
     192:	ce 34       	cpi	r28, 0x4E	; 78
     194:	d1 07       	cpc	r29, r17
     196:	c9 f7       	brne	.-14     	; 0x18a <__do_global_ctors+0x8>
     198:	0e 94 a3 0b 	call	0x1746	; 0x1746 <main>
     19c:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	fc 01       	movw	r30, r24
     1aa:	40 83       	st	Z, r20
     1ac:	51 83       	std	Z+1, r21	; 0x01
     1ae:	62 83       	std	Z+2, r22	; 0x02
     1b0:	73 83       	std	Z+3, r23	; 0x03
     1b2:	04 83       	std	Z+4, r16	; 0x04
     1b4:	15 83       	std	Z+5, r17	; 0x05
     1b6:	26 83       	std	Z+6, r18	; 0x06
     1b8:	37 83       	std	Z+7, r19	; 0x07
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	08 95       	ret

000001c0 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     1c0:	fc 01       	movw	r30, r24
     1c2:	10 82       	st	Z, r1
     1c4:	11 82       	std	Z+1, r1	; 0x01
     1c6:	12 82       	std	Z+2, r1	; 0x02
     1c8:	13 82       	std	Z+3, r1	; 0x03
     1ca:	14 82       	std	Z+4, r1	; 0x04
     1cc:	15 82       	std	Z+5, r1	; 0x05
     1ce:	16 82       	std	Z+6, r1	; 0x06
     1d0:	17 82       	std	Z+7, r1	; 0x07
     1d2:	08 95       	ret

000001d4 <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     1d4:	af 92       	push	r10
     1d6:	bf 92       	push	r11
     1d8:	cf 92       	push	r12
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	68 97       	sbiw	r28, 0x18	; 24
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	5c 01       	movw	r10, r24
     1fa:	09 8b       	std	Y+17, r16	; 0x11
     1fc:	1a 8b       	std	Y+18, r17	; 0x12
     1fe:	2b 8b       	std	Y+19, r18	; 0x13
     200:	3c 8b       	std	Y+20, r19	; 0x14
     202:	4d 8b       	std	Y+21, r20	; 0x15
     204:	5e 8b       	std	Y+22, r21	; 0x16
     206:	6f 8b       	std	Y+23, r22	; 0x17
     208:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     20a:	2d 89       	ldd	r18, Y+21	; 0x15
     20c:	3e 89       	ldd	r19, Y+22	; 0x16
     20e:	4f 89       	ldd	r20, Y+23	; 0x17
     210:	58 8d       	ldd	r21, Y+24	; 0x18
     212:	fc 01       	movw	r30, r24
     214:	64 81       	ldd	r22, Z+4	; 0x04
     216:	75 81       	ldd	r23, Z+5	; 0x05
     218:	86 81       	ldd	r24, Z+6	; 0x06
     21a:	97 81       	ldd	r25, Z+7	; 0x07
     21c:	0e 94 9d 10 	call	0x213a	; 0x213a <__addsf3>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24
     224:	29 89       	ldd	r18, Y+17	; 0x11
     226:	3a 89       	ldd	r19, Y+18	; 0x12
     228:	4b 89       	ldd	r20, Y+19	; 0x13
     22a:	5c 89       	ldd	r21, Y+20	; 0x14
     22c:	f5 01       	movw	r30, r10
     22e:	60 81       	ld	r22, Z
     230:	71 81       	ldd	r23, Z+1	; 0x01
     232:	82 81       	ldd	r24, Z+2	; 0x02
     234:	93 81       	ldd	r25, Z+3	; 0x03
     236:	0e 94 9d 10 	call	0x213a	; 0x213a <__addsf3>
     23a:	ab 01       	movw	r20, r22
     23c:	bc 01       	movw	r22, r24
     23e:	97 01       	movw	r18, r14
     240:	86 01       	movw	r16, r12
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	fe 01       	movw	r30, r28
     24e:	31 96       	adiw	r30, 0x01	; 1
     250:	de 01       	movw	r26, r28
     252:	19 96       	adiw	r26, 0x09	; 9
     254:	01 90       	ld	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	8a 95       	dec	r24
     25a:	e1 f7       	brne	.-8      	; 0x254 <_ZN7Complex3addES_+0x80>
     25c:	29 85       	ldd	r18, Y+9	; 0x09
     25e:	3a 85       	ldd	r19, Y+10	; 0x0a
     260:	4b 85       	ldd	r20, Y+11	; 0x0b
     262:	5c 85       	ldd	r21, Y+12	; 0x0c
     264:	6d 85       	ldd	r22, Y+13	; 0x0d
     266:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     268:	8f 85       	ldd	r24, Y+15	; 0x0f
     26a:	98 89       	ldd	r25, Y+16	; 0x10
     26c:	68 96       	adiw	r28, 0x18	; 24
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	df 90       	pop	r13
     286:	cf 90       	pop	r12
     288:	bf 90       	pop	r11
     28a:	af 90       	pop	r10
     28c:	08 95       	ret

0000028e <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     28e:	4f 92       	push	r4
     290:	5f 92       	push	r5
     292:	6f 92       	push	r6
     294:	7f 92       	push	r7
     296:	8f 92       	push	r8
     298:	9f 92       	push	r9
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	a0 97       	sbiw	r28, 0x20	; 32
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	09 8b       	std	Y+17, r16	; 0x11
     2c0:	1a 8b       	std	Y+18, r17	; 0x12
     2c2:	2b 8b       	std	Y+19, r18	; 0x13
     2c4:	3c 8b       	std	Y+20, r19	; 0x14
     2c6:	4d 8b       	std	Y+21, r20	; 0x15
     2c8:	5e 8b       	std	Y+22, r21	; 0x16
     2ca:	6f 8b       	std	Y+23, r22	; 0x17
     2cc:	78 8f       	std	Y+24, r23	; 0x18
     2ce:	89 88       	ldd	r8, Y+17	; 0x11
     2d0:	9a 88       	ldd	r9, Y+18	; 0x12
     2d2:	ab 88       	ldd	r10, Y+19	; 0x13
     2d4:	bc 88       	ldd	r11, Y+20	; 0x14
     2d6:	2d 89       	ldd	r18, Y+21	; 0x15
     2d8:	3e 89       	ldd	r19, Y+22	; 0x16
     2da:	4f 89       	ldd	r20, Y+23	; 0x17
     2dc:	58 8d       	ldd	r21, Y+24	; 0x18
     2de:	2d 8f       	std	Y+29, r18	; 0x1d
     2e0:	3e 8f       	std	Y+30, r19	; 0x1e
     2e2:	4f 8f       	std	Y+31, r20	; 0x1f
     2e4:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     2e6:	fc 01       	movw	r30, r24
     2e8:	c0 80       	ld	r12, Z
     2ea:	d1 80       	ldd	r13, Z+1	; 0x01
     2ec:	e2 80       	ldd	r14, Z+2	; 0x02
     2ee:	f3 80       	ldd	r15, Z+3	; 0x03
     2f0:	24 81       	ldd	r18, Z+4	; 0x04
     2f2:	35 81       	ldd	r19, Z+5	; 0x05
     2f4:	46 81       	ldd	r20, Z+6	; 0x06
     2f6:	57 81       	ldd	r21, Z+7	; 0x07
     2f8:	29 8f       	std	Y+25, r18	; 0x19
     2fa:	3a 8f       	std	Y+26, r19	; 0x1a
     2fc:	4b 8f       	std	Y+27, r20	; 0x1b
     2fe:	5c 8f       	std	Y+28, r21	; 0x1c
     300:	2d 8d       	ldd	r18, Y+29	; 0x1d
     302:	3e 8d       	ldd	r19, Y+30	; 0x1e
     304:	4f 8d       	ldd	r20, Y+31	; 0x1f
     306:	58 a1       	ldd	r21, Y+32	; 0x20
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     310:	2b 01       	movw	r4, r22
     312:	3c 01       	movw	r6, r24
     314:	a5 01       	movw	r20, r10
     316:	94 01       	movw	r18, r8
     318:	69 8d       	ldd	r22, Y+25	; 0x19
     31a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     31c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     31e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     320:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	c3 01       	movw	r24, r6
     32a:	b2 01       	movw	r22, r4
     32c:	0e 94 9d 10 	call	0x213a	; 0x213a <__addsf3>
     330:	2b 01       	movw	r4, r22
     332:	3c 01       	movw	r6, r24
     334:	a5 01       	movw	r20, r10
     336:	94 01       	movw	r18, r8
     338:	c7 01       	movw	r24, r14
     33a:	b6 01       	movw	r22, r12
     33c:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     340:	6b 01       	movw	r12, r22
     342:	7c 01       	movw	r14, r24
     344:	2d 8d       	ldd	r18, Y+29	; 0x1d
     346:	3e 8d       	ldd	r19, Y+30	; 0x1e
     348:	4f 8d       	ldd	r20, Y+31	; 0x1f
     34a:	58 a1       	ldd	r21, Y+32	; 0x20
     34c:	69 8d       	ldd	r22, Y+25	; 0x19
     34e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     350:	8b 8d       	ldd	r24, Y+27	; 0x1b
     352:	9c 8d       	ldd	r25, Y+28	; 0x1c
     354:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     358:	9b 01       	movw	r18, r22
     35a:	ac 01       	movw	r20, r24
     35c:	c7 01       	movw	r24, r14
     35e:	b6 01       	movw	r22, r12
     360:	0e 94 9c 10 	call	0x2138	; 0x2138 <__subsf3>
     364:	ab 01       	movw	r20, r22
     366:	bc 01       	movw	r22, r24
     368:	93 01       	movw	r18, r6
     36a:	82 01       	movw	r16, r4
     36c:	ce 01       	movw	r24, r28
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     374:	88 e0       	ldi	r24, 0x08	; 8
     376:	fe 01       	movw	r30, r28
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	de 01       	movw	r26, r28
     37c:	19 96       	adiw	r26, 0x09	; 9
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <_ZN7Complex3mulES_+0xf0>
     386:	29 85       	ldd	r18, Y+9	; 0x09
     388:	3a 85       	ldd	r19, Y+10	; 0x0a
     38a:	4b 85       	ldd	r20, Y+11	; 0x0b
     38c:	5c 85       	ldd	r21, Y+12	; 0x0c
     38e:	6d 85       	ldd	r22, Y+13	; 0x0d
     390:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     392:	8f 85       	ldd	r24, Y+15	; 0x0f
     394:	98 89       	ldd	r25, Y+16	; 0x10
     396:	a0 96       	adiw	r28, 0x20	; 32
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	bf 90       	pop	r11
     3b4:	af 90       	pop	r10
     3b6:	9f 90       	pop	r9
     3b8:	8f 90       	pop	r8
     3ba:	7f 90       	pop	r7
     3bc:	6f 90       	pop	r6
     3be:	5f 90       	pop	r5
     3c0:	4f 90       	pop	r4
     3c2:	08 95       	ret

000003c4 <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 81       	ld	r18, Z
     3c8:	31 81       	ldd	r19, Z+1	; 0x01
     3ca:	42 81       	ldd	r20, Z+2	; 0x02
     3cc:	53 81       	ldd	r21, Z+3	; 0x03
     3ce:	64 81       	ldd	r22, Z+4	; 0x04
     3d0:	75 81       	ldd	r23, Z+5	; 0x05
     3d2:	86 81       	ldd	r24, Z+6	; 0x06
     3d4:	97 81       	ldd	r25, Z+7	; 0x07
     3d6:	0e 94 30 11 	call	0x2260	; 0x2260 <__divsf3>
     3da:	0e 94 01 11 	call	0x2202	; 0x2202 <atan>
     3de:	08 95       	ret

000003e0 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     3e0:	85 e0       	ldi	r24, 0x05	; 5
     3e2:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     3e4:	81 b1       	in	r24, 0x01	; 1
     3e6:	8c 7f       	andi	r24, 0xFC	; 252
     3e8:	81 b9       	out	0x01, r24	; 1
     3ea:	08 95       	ret

000003ec <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3ec:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     3ee:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     3f0:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3f2:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     3f4:	06 b6       	in	r0, 0x36	; 54
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     3fa:	81 b1       	in	r24, 0x01	; 1
     3fc:	88 7f       	andi	r24, 0xF8	; 248
     3fe:	88 30       	cpi	r24, 0x08	; 8
     400:	09 f0       	breq	.+2      	; 0x404 <_ZN6EEProm4readEj+0x18>
     402:	41 c0       	rjmp	.+130    	; 0x486 <__stack+0x27>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     404:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     406:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     408:	06 b6       	in	r0, 0x36	; 54
     40a:	07 fe       	sbrs	r0, 7
     40c:	fd cf       	rjmp	.-6      	; 0x408 <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     40e:	81 b1       	in	r24, 0x01	; 1
     410:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     412:	88 31       	cpi	r24, 0x18	; 24
     414:	71 f7       	brne	.-36     	; 0x3f2 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     416:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     418:	84 e8       	ldi	r24, 0x84	; 132
     41a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     41c:	06 b6       	in	r0, 0x36	; 54
     41e:	07 fe       	sbrs	r0, 7
     420:	fd cf       	rjmp	.-6      	; 0x41c <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     422:	81 b1       	in	r24, 0x01	; 1
     424:	88 7f       	andi	r24, 0xF8	; 248
     426:	88 32       	cpi	r24, 0x28	; 40
     428:	81 f5       	brne	.+96     	; 0x48a <__stack+0x2b>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     42a:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     42c:	84 e8       	ldi	r24, 0x84	; 132
     42e:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     430:	06 b6       	in	r0, 0x36	; 54
     432:	07 fe       	sbrs	r0, 7
     434:	fd cf       	rjmp	.-6      	; 0x430 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     436:	81 b1       	in	r24, 0x01	; 1
     438:	88 7f       	andi	r24, 0xF8	; 248
     43a:	88 32       	cpi	r24, 0x28	; 40
     43c:	41 f5       	brne	.+80     	; 0x48e <__stack+0x2f>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     43e:	84 ea       	ldi	r24, 0xA4	; 164
     440:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     442:	06 b6       	in	r0, 0x36	; 54
     444:	07 fe       	sbrs	r0, 7
     446:	fd cf       	rjmp	.-6      	; 0x442 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     448:	81 b1       	in	r24, 0x01	; 1
     44a:	88 7f       	andi	r24, 0xF8	; 248
     44c:	80 31       	cpi	r24, 0x10	; 16
     44e:	09 f5       	brne	.+66     	; 0x492 <__stack+0x33>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     450:	81 ea       	ldi	r24, 0xA1	; 161
     452:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     454:	84 e8       	ldi	r24, 0x84	; 132
     456:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     458:	06 b6       	in	r0, 0x36	; 54
     45a:	07 fe       	sbrs	r0, 7
     45c:	fd cf       	rjmp	.-6      	; 0x458 <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     45e:	81 b1       	in	r24, 0x01	; 1
     460:	88 7f       	andi	r24, 0xF8	; 248
     462:	80 34       	cpi	r24, 0x40	; 64
     464:	c1 f4       	brne	.+48     	; 0x496 <__stack+0x37>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     466:	84 e8       	ldi	r24, 0x84	; 132
     468:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     46a:	06 b6       	in	r0, 0x36	; 54
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <__stack+0xb>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     470:	81 b1       	in	r24, 0x01	; 1
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	88 35       	cpi	r24, 0x58	; 88
     476:	89 f4       	brne	.+34     	; 0x49a <__stack+0x3b>
		return FALSE;

	//Read the data
	data=TWDR;
     478:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     47a:	94 e9       	ldi	r25, 0x94	; 148
     47c:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     47e:	06 b6       	in	r0, 0x36	; 54
     480:	04 fc       	sbrc	r0, 4
     482:	fd cf       	rjmp	.-6      	; 0x47e <__stack+0x1f>
     484:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     49a:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     49c:	08 95       	ret

0000049e <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	c4 56       	subi	r28, 0x64	; 100
     4b4:	d1 09       	sbc	r29, r1
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	6c 01       	movw	r12, r24
     4c2:	ce 01       	movw	r24, r28
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     4cc:	b8 01       	movw	r22, r16
     4ce:	c6 01       	movw	r24, r12
     4d0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN6EEProm4readEj>
     4d4:	f7 01       	movw	r30, r14
     4d6:	81 93       	st	Z+, r24
     4d8:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     4da:	8f 3f       	cpi	r24, 0xFF	; 255
     4dc:	81 f4       	brne	.+32     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4de:	32 97       	sbiw	r30, 0x02	; 2
     4e0:	20 81       	ld	r18, Z
     4e2:	2f 3f       	cpi	r18, 0xFF	; 255
     4e4:	61 f4       	brne	.+24     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4e6:	31 97       	sbiw	r30, 0x01	; 1
     4e8:	20 81       	ld	r18, Z
     4ea:	2f 3f       	cpi	r18, 0xFF	; 255
     4ec:	41 f4       	brne	.+16     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	20 81       	ld	r18, Z
     4f2:	2f 3f       	cpi	r18, 0xFF	; 255
     4f4:	21 f4       	brne	.+8      	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	8f 3f       	cpi	r24, 0xFF	; 255
     4fc:	19 f0       	breq	.+6      	; 0x504 <_ZN6EEProm7readallEv+0x66>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4fe:	0f 5f       	subi	r16, 0xFF	; 255
     500:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     502:	e4 cf       	rjmp	.-56     	; 0x4cc <_ZN6EEProm7readallEv+0x2e>
	return eeprom_mem;
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	cc 59       	subi	r28, 0x9C	; 156
     50a:	df 4f       	sbci	r29, 0xFF	; 255
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	cf 90       	pop	r12
     526:	08 95       	ret

00000528 <_Z12print_statesiP7ComplexPc>:

Serial s;
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	7c 01       	movw	r14, r24
     536:	06 2f       	mov	r16, r22
     538:	17 2f       	mov	r17, r23
	s.writestrln(message);
     53a:	ba 01       	movw	r22, r20
     53c:	81 ec       	ldi	r24, 0xC1	; 193
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     544:	1e 14       	cp	r1, r14
     546:	1f 04       	cpc	r1, r15
     548:	0c f0       	brlt	.+2      	; 0x54c <_Z12print_statesiP7ComplexPc+0x24>
     54a:	47 c0       	rjmp	.+142    	; 0x5da <_Z12print_statesiP7ComplexPc+0xb2>
     54c:	c0 2f       	mov	r28, r16
     54e:	d1 2f       	mov	r29, r17
     550:	00 e0       	ldi	r16, 0x00	; 0
     552:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
     554:	6a e6       	ldi	r22, 0x6A	; 106
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	81 ec       	ldi	r24, 0xC1	; 193
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6Serial8writestrEPc>
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	4a e7       	ldi	r20, 0x7A	; 122
     566:	54 e4       	ldi	r21, 0x44	; 68
     568:	68 81       	ld	r22, Y
     56a:	79 81       	ldd	r23, Y+1	; 0x01
     56c:	8a 81       	ldd	r24, Y+2	; 0x02
     56e:	9b 81       	ldd	r25, Y+3	; 0x03
     570:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     574:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
     578:	80 ec       	ldi	r24, 0xC0	; 192
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN4QEPU5Utils7int2strEi>
     580:	bc 01       	movw	r22, r24
     582:	81 ec       	ldi	r24, 0xC1	; 193
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
     58a:	6e e6       	ldi	r22, 0x6E	; 110
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	81 ec       	ldi	r24, 0xC1	; 193
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6Serial8writestrEPc>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	4a e7       	ldi	r20, 0x7A	; 122
     59c:	54 e4       	ldi	r21, 0x44	; 68
     59e:	6c 81       	ldd	r22, Y+4	; 0x04
     5a0:	7d 81       	ldd	r23, Y+5	; 0x05
     5a2:	8e 81       	ldd	r24, Y+6	; 0x06
     5a4:	9f 81       	ldd	r25, Y+7	; 0x07
     5a6:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     5aa:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
     5ae:	80 ec       	ldi	r24, 0xC0	; 192
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN4QEPU5Utils7int2strEi>
     5b6:	bc 01       	movw	r22, r24
     5b8:	81 ec       	ldi	r24, 0xC1	; 193
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6Serial8writestrEPc>
		s.writestrln("");
     5c0:	6f ea       	ldi	r22, 0xAF	; 175
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	81 ec       	ldi	r24, 0xC1	; 193
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN6Serial10writestrlnEPc>
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     5cc:	0f 5f       	subi	r16, 0xFF	; 255
     5ce:	1f 4f       	sbci	r17, 0xFF	; 255
     5d0:	28 96       	adiw	r28, 0x08	; 8
     5d2:	0e 15       	cp	r16, r14
     5d4:	1f 05       	cpc	r17, r15
     5d6:	09 f0       	breq	.+2      	; 0x5da <_Z12print_statesiP7ComplexPc+0xb2>
     5d8:	bd cf       	rjmp	.-134    	; 0x554 <_Z12print_statesiP7ComplexPc+0x2c>
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	08 95       	ret

000005e8 <_ZN5Gates10setup_seedEv>:

void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__eerd_word_m16>
     5f0:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <srand>
	eeprom_write_word(&randinit,rand()%10000);
     5f4:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <rand>
     5f8:	60 e1       	ldi	r22, 0x10	; 16
     5fa:	77 e2       	ldi	r23, 0x27	; 39
     5fc:	0e 94 18 14 	call	0x2830	; 0x2830 <__divmodhi4>
     600:	bc 01       	movw	r22, r24
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 01 19 	call	0x3202	; 0x3202 <__eewr_word_m16>
     60a:	08 95       	ret

0000060c <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}
     60c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN5Gates10setup_seedEv>
     610:	08 95       	ret

00000612 <_ZN5Gates5touchEd>:
void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

int Gates::touch(double probability){
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	6a 01       	movw	r12, r20
     620:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     622:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <rand>
     626:	ec 01       	movw	r28, r24
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	3e ef       	ldi	r19, 0xFE	; 254
     62c:	4f ef       	ldi	r20, 0xFF	; 255
     62e:	56 e4       	ldi	r21, 0x46	; 70
     630:	c7 01       	movw	r24, r14
     632:	b6 01       	movw	r22, r12
     634:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     638:	6b 01       	movw	r12, r22
     63a:	7c 01       	movw	r14, r24
     63c:	be 01       	movw	r22, r28
     63e:	88 27       	eor	r24, r24
     640:	77 fd       	sbrc	r23, 7
     642:	80 95       	com	r24
     644:	98 2f       	mov	r25, r24
     646:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     64a:	9b 01       	movw	r18, r22
     64c:	ac 01       	movw	r20, r24
     64e:	c1 e0       	ldi	r28, 0x01	; 1
     650:	d0 e0       	ldi	r29, 0x00	; 0
     652:	c7 01       	movw	r24, r14
     654:	b6 01       	movw	r22, r12
     656:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__gesf2>
     65a:	88 23       	and	r24, r24
     65c:	14 f4       	brge	.+4      	; 0x662 <_ZN5Gates5touchEd+0x50>
     65e:	c0 e0       	ldi	r28, 0x00	; 0
     660:	d0 e0       	ldi	r29, 0x00	; 0
}
     662:	ce 01       	movw	r24, r28
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <_ZN5Gates17reverse_kroneckerEP7Complexi>:
int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
	return result;
}

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     672:	4f 92       	push	r4
     674:	5f 92       	push	r5
     676:	6f 92       	push	r6
     678:	7f 92       	push	r7
     67a:	8f 92       	push	r8
     67c:	9f 92       	push	r9
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	a0 97       	sbiw	r28, 0x20	; 32
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	7b 01       	movw	r14, r22
     6a4:	8a 01       	movw	r16, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     6a6:	ba 01       	movw	r22, r20
     6a8:	88 27       	eor	r24, r24
     6aa:	77 fd       	sbrc	r23, 7
     6ac:	80 95       	com	r24
     6ae:	98 2f       	mov	r25, r24
     6b0:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     6b4:	0e 94 04 13 	call	0x2608	; 0x2608 <log>
     6b8:	2b 01       	movw	r4, r22
     6ba:	3c 01       	movw	r6, r24
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	//TEMPORARY
	reversed_kronecker=kron;
	for(int i=0;i<kron_size;i++)
     6bc:	10 16       	cp	r1, r16
     6be:	11 06       	cpc	r1, r17
     6c0:	0c f0       	brlt	.+2      	; 0x6c4 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x52>
     6c2:	af c0       	rjmp	.+350    	; 0x822 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b0>
		if(kron[i].re==1){
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e8       	ldi	r20, 0x80	; 128
     6ca:	5f e3       	ldi	r21, 0x3F	; 63
     6cc:	f7 01       	movw	r30, r14
     6ce:	60 81       	ld	r22, Z
     6d0:	71 81       	ldd	r23, Z+1	; 0x01
     6d2:	82 81       	ldd	r24, Z+2	; 0x02
     6d4:	93 81       	ldd	r25, Z+3	; 0x03
     6d6:	0e 94 29 11 	call	0x2252	; 0x2252 <__cmpsf2>
     6da:	81 11       	cpse	r24, r1
     6dc:	98 c0       	rjmp	.+304    	; 0x80e <_ZN5Gates17reverse_kroneckerEP7Complexi+0x19c>
     6de:	11 c0       	rjmp	.+34     	; 0x702 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x90>
     6e0:	f8 e0       	ldi	r31, 0x08	; 8
     6e2:	af 0e       	add	r10, r31
     6e4:	b1 1c       	adc	r11, r1
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e8       	ldi	r20, 0x80	; 128
     6ec:	5f e3       	ldi	r21, 0x3F	; 63
     6ee:	f5 01       	movw	r30, r10
     6f0:	60 81       	ld	r22, Z
     6f2:	71 81       	ldd	r23, Z+1	; 0x01
     6f4:	82 81       	ldd	r24, Z+2	; 0x02
     6f6:	93 81       	ldd	r25, Z+3	; 0x03
     6f8:	0e 94 29 11 	call	0x2252	; 0x2252 <__cmpsf2>
     6fc:	81 11       	cpse	r24, r1
     6fe:	8a c0       	rjmp	.+276    	; 0x814 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a2>
     700:	02 c0       	rjmp	.+4      	; 0x706 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x94>
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	//TEMPORARY
	reversed_kronecker=kron;
	for(int i=0;i<kron_size;i++)
     702:	c1 2c       	mov	r12, r1
     704:	d1 2c       	mov	r13, r1
	int result=1; for(int i=0;i<exp;i++) result*=base;
	return result;
}

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     706:	28 e1       	ldi	r18, 0x18	; 24
     708:	32 e7       	ldi	r19, 0x72	; 114
     70a:	41 e3       	ldi	r20, 0x31	; 49
     70c:	5f e3       	ldi	r21, 0x3F	; 63
     70e:	c3 01       	movw	r24, r6
     710:	b2 01       	movw	r22, r4
     712:	0e 94 30 11 	call	0x2260	; 0x2260 <__divsf3>
     716:	9b 01       	movw	r18, r22
     718:	ac 01       	movw	r20, r24
     71a:	0e 94 9d 10 	call	0x213a	; 0x213a <__addsf3>
     71e:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
     722:	4b 01       	movw	r8, r22
     724:	5c 01       	movw	r10, r24
		
	//TEMPORARY
	reversed_kronecker=kron;
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,reversed_kron_size);
     726:	ab 01       	movw	r20, r22
     728:	b6 01       	movw	r22, r12
     72a:	80 ec       	ldi	r24, 0xC0	; 192
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN4QEPU5Utils10int2binstrEii>
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=reversed_kron_size-1;j>=0;j--){
     732:	64 01       	movw	r12, r8
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	cf 1a       	sub	r12, r31
     738:	d1 08       	sbc	r13, r1
     73a:	dd 20       	and	r13, r13
     73c:	0c f4       	brge	.+2      	; 0x740 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xce>
     73e:	71 c0       	rjmp	.+226    	; 0x822 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b0>
     740:	88 0e       	add	r8, r24
     742:	99 1e       	adc	r9, r25
     744:	37 01       	movw	r6, r14
     746:	57 01       	movw	r10, r14
     748:	28 e0       	ldi	r18, 0x08	; 8
     74a:	a2 0e       	add	r10, r18
     74c:	b1 1c       	adc	r11, r1
				if(toBin[j]=='1'){
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     74e:	68 94       	set
     750:	55 24       	eor	r5, r5
     752:	53 f8       	bld	r5, 3
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,reversed_kron_size);
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=reversed_kron_size-1;j>=0;j--){
				if(toBin[j]=='1'){
     754:	f4 01       	movw	r30, r8
     756:	82 91       	ld	r24, -Z
     758:	4f 01       	movw	r8, r30
     75a:	81 33       	cpi	r24, 0x31	; 49
     75c:	29 f5       	brne	.+74     	; 0x7a8 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x136>
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
     75e:	00 e0       	ldi	r16, 0x00	; 0
     760:	10 e0       	ldi	r17, 0x00	; 0
     762:	98 01       	movw	r18, r16
     764:	b9 01       	movw	r22, r18
     766:	a8 01       	movw	r20, r16
     768:	ce 01       	movw	r24, r28
     76a:	49 96       	adiw	r24, 0x19	; 25
     76c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     770:	fe 01       	movw	r30, r28
     772:	79 96       	adiw	r30, 0x19	; 25
     774:	d3 01       	movw	r26, r6
     776:	85 2d       	mov	r24, r5
     778:	01 90       	ld	r0, Z+
     77a:	0d 92       	st	X+, r0
     77c:	8a 95       	dec	r24
     77e:	e1 f7       	brne	.-8      	; 0x778 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x106>
     780:	00 e0       	ldi	r16, 0x00	; 0
     782:	10 e0       	ldi	r17, 0x00	; 0
     784:	98 01       	movw	r18, r16
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	60 e8       	ldi	r22, 0x80	; 128
     78c:	7f e3       	ldi	r23, 0x3F	; 63
     78e:	ce 01       	movw	r24, r28
     790:	41 96       	adiw	r24, 0x11	; 17
     792:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     796:	fe 01       	movw	r30, r28
     798:	71 96       	adiw	r30, 0x11	; 17
     79a:	d5 01       	movw	r26, r10
     79c:	85 2d       	mov	r24, r5
     79e:	01 90       	ld	r0, Z+
     7a0:	0d 92       	st	X+, r0
     7a2:	8a 95       	dec	r24
     7a4:	e1 f7       	brne	.-8      	; 0x79e <_ZN5Gates17reverse_kroneckerEP7Complexi+0x12c>
     7a6:	24 c0       	rjmp	.+72     	; 0x7f0 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x17e>
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	10 e0       	ldi	r17, 0x00	; 0
     7ac:	98 01       	movw	r18, r16
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	60 e8       	ldi	r22, 0x80	; 128
     7b4:	7f e3       	ldi	r23, 0x3F	; 63
     7b6:	ce 01       	movw	r24, r28
     7b8:	09 96       	adiw	r24, 0x09	; 9
     7ba:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     7be:	fe 01       	movw	r30, r28
     7c0:	39 96       	adiw	r30, 0x09	; 9
     7c2:	d3 01       	movw	r26, r6
     7c4:	85 2d       	mov	r24, r5
     7c6:	01 90       	ld	r0, Z+
     7c8:	0d 92       	st	X+, r0
     7ca:	8a 95       	dec	r24
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x154>
     7ce:	00 e0       	ldi	r16, 0x00	; 0
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	98 01       	movw	r18, r16
     7d4:	b9 01       	movw	r22, r18
     7d6:	a8 01       	movw	r20, r16
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     7e0:	fe 01       	movw	r30, r28
     7e2:	31 96       	adiw	r30, 0x01	; 1
     7e4:	d5 01       	movw	r26, r10
     7e6:	85 2d       	mov	r24, r5
     7e8:	01 90       	ld	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	8a 95       	dec	r24
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x176>
	reversed_kronecker=kron;
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,reversed_kron_size);
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=reversed_kron_size-1;j>=0;j--){
     7f0:	f1 e0       	ldi	r31, 0x01	; 1
     7f2:	cf 1a       	sub	r12, r31
     7f4:	d1 08       	sbc	r13, r1
     7f6:	20 e1       	ldi	r18, 0x10	; 16
     7f8:	62 0e       	add	r6, r18
     7fa:	71 1c       	adc	r7, r1
     7fc:	80 e1       	ldi	r24, 0x10	; 16
     7fe:	a8 0e       	add	r10, r24
     800:	b1 1c       	adc	r11, r1
     802:	ef ef       	ldi	r30, 0xFF	; 255
     804:	ce 16       	cp	r12, r30
     806:	de 06       	cpc	r13, r30
     808:	09 f0       	breq	.+2      	; 0x80c <_ZN5Gates17reverse_kroneckerEP7Complexi+0x19a>
     80a:	a4 cf       	rjmp	.-184    	; 0x754 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xe2>
     80c:	0a c0       	rjmp	.+20     	; 0x822 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b0>
     80e:	57 01       	movw	r10, r14
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	//TEMPORARY
	reversed_kronecker=kron;
	for(int i=0;i<kron_size;i++)
     810:	c1 2c       	mov	r12, r1
     812:	d1 2c       	mov	r13, r1
     814:	ff ef       	ldi	r31, 0xFF	; 255
     816:	cf 1a       	sub	r12, r31
     818:	df 0a       	sbc	r13, r31
     81a:	c0 16       	cp	r12, r16
     81c:	d1 06       	cpc	r13, r17
     81e:	09 f0       	breq	.+2      	; 0x822 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b0>
     820:	5f cf       	rjmp	.-322    	; 0x6e0 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x6e>
				index_rev_kro+=2;
			}
			break;
		}
	return reversed_kronecker;
}
     822:	c7 01       	movw	r24, r14
     824:	a0 96       	adiw	r28, 0x20	; 32
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	bf 90       	pop	r11
     842:	af 90       	pop	r10
     844:	9f 90       	pop	r9
     846:	8f 90       	pop	r8
     848:	7f 90       	pop	r7
     84a:	6f 90       	pop	r6
     84c:	5f 90       	pop	r5
     84e:	4f 90       	pop	r4
     850:	08 95       	ret

00000852 <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     852:	2f 92       	push	r2
     854:	3f 92       	push	r3
     856:	4f 92       	push	r4
     858:	5f 92       	push	r5
     85a:	6f 92       	push	r6
     85c:	7f 92       	push	r7
     85e:	8f 92       	push	r8
     860:	9f 92       	push	r9
     862:	af 92       	push	r10
     864:	bf 92       	push	r11
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	28 97       	sbiw	r28, 0x08	; 8
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	7c 01       	movw	r14, r24
     888:	5b 01       	movw	r10, r22
     88a:	4a 01       	movw	r8, r20
     88c:	3e 83       	std	Y+6, r19	; 0x06
     88e:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     890:	41 30       	cpi	r20, 0x01	; 1
     892:	51 05       	cpc	r21, r1
     894:	09 f4       	brne	.+2      	; 0x898 <_ZN5Gates9kroneckerEP7Complexii+0x46>
     896:	c8 c0       	rjmp	.+400    	; 0xa28 <_ZN5Gates9kroneckerEP7Complexii+0x1d6>
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     898:	14 16       	cp	r1, r20
     89a:	15 06       	cpc	r1, r21
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <_ZN5Gates9kroneckerEP7Complexii+0x4e>
     89e:	c7 c0       	rjmp	.+398    	; 0xa2e <_ZN5Gates9kroneckerEP7Complexii+0x1dc>
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	21 e0       	ldi	r18, 0x01	; 1
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	22 0f       	add	r18, r18
     8aa:	33 1f       	adc	r19, r19
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	88 15       	cp	r24, r8
     8b0:	99 05       	cpc	r25, r9
     8b2:	d1 f7       	brne	.-12     	; 0x8a8 <_ZN5Gates9kroneckerEP7Complexii+0x56>
     8b4:	38 87       	std	Y+8, r19	; 0x08
     8b6:	2f 83       	std	Y+7, r18	; 0x07
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     8b8:	c9 01       	movw	r24, r18
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
     8ca:	89 83       	std	Y+1, r24	; 0x01
     8cc:	9a 83       	std	Y+2, r25	; 0x02
	print_states(2*2,vec,"Before: ");
     8ce:	45 e7       	ldi	r20, 0x75	; 117
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	b5 01       	movw	r22, r10
     8d4:	84 e0       	ldi	r24, 0x04	; 4
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	*/
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     8dc:	ef 81       	ldd	r30, Y+7	; 0x07
     8de:	f8 85       	ldd	r31, Y+8	; 0x08
     8e0:	1e 16       	cp	r1, r30
     8e2:	1f 06       	cpc	r1, r31
     8e4:	0c f4       	brge	.+2      	; 0x8e8 <_ZN5Gates9kroneckerEP7Complexii+0x96>
     8e6:	b4 c0       	rjmp	.+360    	; 0xa50 <_ZN5Gates9kroneckerEP7Complexii+0x1fe>
     8e8:	4e c0       	rjmp	.+156    	; 0x986 <_ZN5Gates9kroneckerEP7Complexii+0x134>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     8ea:	4e 16       	cp	r4, r30
     8ec:	5f 06       	cpc	r5, r31
     8ee:	29 f4       	brne	.+10     	; 0x8fa <_ZN5Gates9kroneckerEP7Complexii+0xa8>
     8f0:	ff ef       	ldi	r31, 0xFF	; 255
     8f2:	2f 1a       	sub	r2, r31
     8f4:	3f 0a       	sbc	r3, r31
     8f6:	eb 81       	ldd	r30, Y+3	; 0x03
     8f8:	fc 81       	ldd	r31, Y+4	; 0x04
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     8fa:	7f 01       	movw	r14, r30
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	e2 1a       	sub	r14, r18
     900:	f2 0a       	sbc	r15, r18
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	ea 0d       	add	r30, r10
     910:	fb 1d       	adc	r31, r11
     912:	00 81       	ld	r16, Z
     914:	11 81       	ldd	r17, Z+1	; 0x01
     916:	22 81       	ldd	r18, Z+2	; 0x02
     918:	33 81       	ldd	r19, Z+3	; 0x03
     91a:	44 81       	ldd	r20, Z+4	; 0x04
     91c:	55 81       	ldd	r21, Z+5	; 0x05
     91e:	66 81       	ldd	r22, Z+6	; 0x06
     920:	77 81       	ldd	r23, Z+7	; 0x07
     922:	c1 01       	movw	r24, r2
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	8a 0d       	add	r24, r10
     932:	9b 1d       	adc	r25, r11
     934:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     938:	af 81       	ldd	r26, Y+7	; 0x07
     93a:	b8 85       	ldd	r27, Y+8	; 0x08
     93c:	2c 93       	st	X, r18
     93e:	11 96       	adiw	r26, 0x01	; 1
     940:	3c 93       	st	X, r19
     942:	11 97       	sbiw	r26, 0x01	; 1
     944:	12 96       	adiw	r26, 0x02	; 2
     946:	4c 93       	st	X, r20
     948:	12 97       	sbiw	r26, 0x02	; 2
     94a:	13 96       	adiw	r26, 0x03	; 3
     94c:	5c 93       	st	X, r21
     94e:	13 97       	sbiw	r26, 0x03	; 3
     950:	14 96       	adiw	r26, 0x04	; 4
     952:	6c 93       	st	X, r22
     954:	14 97       	sbiw	r26, 0x04	; 4
     956:	15 96       	adiw	r26, 0x05	; 5
     958:	7c 93       	st	X, r23
     95a:	15 97       	sbiw	r26, 0x05	; 5
     95c:	16 96       	adiw	r26, 0x06	; 6
     95e:	8c 93       	st	X, r24
     960:	16 97       	sbiw	r26, 0x06	; 6
     962:	17 96       	adiw	r26, 0x07	; 7
     964:	9c 93       	st	X, r25
	*/
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     966:	bf ef       	ldi	r27, 0xFF	; 255
     968:	6b 1a       	sub	r6, r27
     96a:	7b 0a       	sbc	r7, r27
     96c:	ef 81       	ldd	r30, Y+7	; 0x07
     96e:	f8 85       	ldd	r31, Y+8	; 0x08
     970:	38 96       	adiw	r30, 0x08	; 8
     972:	f8 87       	std	Y+8, r31	; 0x08
     974:	ef 83       	std	Y+7, r30	; 0x07
     976:	6c 14       	cp	r6, r12
     978:	7d 04       	cpc	r7, r13
     97a:	14 f4       	brge	.+4      	; 0x980 <_ZN5Gates9kroneckerEP7Complexii+0x12e>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     97c:	f7 01       	movw	r30, r14
     97e:	b5 cf       	rjmp	.-150    	; 0x8ea <_ZN5Gates9kroneckerEP7Complexii+0x98>
     980:	d8 86       	std	Y+8, r13	; 0x08
     982:	cf 82       	std	Y+7, r12	; 0x07
     984:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     986:	2d 81       	ldd	r18, Y+5	; 0x05
     988:	3e 81       	ldd	r19, Y+6	; 0x06
     98a:	23 2b       	or	r18, r19
     98c:	e9 f5       	brne	.+122    	; 0xa08 <_ZN5Gates9kroneckerEP7Complexii+0x1b6>
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	71 c0       	rjmp	.+226    	; 0xa76 <_ZN5Gates9kroneckerEP7Complexii+0x224>
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     994:	52 01       	movw	r10, r4
     996:	d2 01       	movw	r26, r4
     998:	4d 91       	ld	r20, X+
     99a:	5d 91       	ld	r21, X+
     99c:	6d 91       	ld	r22, X+
     99e:	7c 91       	ld	r23, X
     9a0:	c7 01       	movw	r24, r14
     9a2:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Gates5touchEd>
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	29 f5       	brne	.+74     	; 0x9f4 <_ZN5Gates9kroneckerEP7Complexii+0x1a2>
     9aa:	98 86       	std	Y+8, r9	; 0x08
     9ac:	8f 82       	std	Y+7, r8	; 0x07
     9ae:	8f 81       	ldd	r24, Y+7	; 0x07
     9b0:	98 85       	ldd	r25, Y+8	; 0x08
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	86 0d       	add	r24, r6
     9c0:	97 1d       	adc	r25, r7
     9c2:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     9c4:	10 82       	st	Z, r1
     9c6:	11 82       	std	Z+1, r1	; 0x01
     9c8:	12 82       	std	Z+2, r1	; 0x02
     9ca:	13 82       	std	Z+3, r1	; 0x03
     9cc:	14 82       	std	Z+4, r1	; 0x04
     9ce:	15 82       	std	Z+5, r1	; 0x05
     9d0:	16 82       	std	Z+6, r1	; 0x06
     9d2:	17 82       	std	Z+7, r1	; 0x07
     9d4:	38 96       	adiw	r30, 0x08	; 8
     9d6:	e8 17       	cp	r30, r24
     9d8:	f9 07       	cpc	r31, r25
     9da:	a1 f7       	brne	.-24     	; 0x9c4 <_ZN5Gates9kroneckerEP7Complexii+0x172>
				kronvec[i].re=binary_touch;
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e8       	ldi	r26, 0x80	; 128
     9e2:	bf e3       	ldi	r27, 0x3F	; 63
     9e4:	f5 01       	movw	r30, r10
     9e6:	80 83       	st	Z, r24
     9e8:	91 83       	std	Z+1, r25	; 0x01
     9ea:	a2 83       	std	Z+2, r26	; 0x02
     9ec:	b3 83       	std	Z+3, r27	; 0x03
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	9a 81       	ldd	r25, Y+2	; 0x02
     9f2:	41 c0       	rjmp	.+130    	; 0xa76 <_ZN5Gates9kroneckerEP7Complexii+0x224>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     9f4:	ff ef       	ldi	r31, 0xFF	; 255
     9f6:	cf 1a       	sub	r12, r31
     9f8:	df 0a       	sbc	r13, r31
     9fa:	28 e0       	ldi	r18, 0x08	; 8
     9fc:	42 0e       	add	r4, r18
     9fe:	51 1c       	adc	r5, r1
     a00:	c8 14       	cp	r12, r8
     a02:	d9 04       	cpc	r13, r9
     a04:	39 f6       	brne	.-114    	; 0x994 <_ZN5Gates9kroneckerEP7Complexii+0x142>
     a06:	06 c0       	rjmp	.+12     	; 0xa14 <_ZN5Gates9kroneckerEP7Complexii+0x1c2>
     a08:	29 80       	ldd	r2, Y+1	; 0x01
     a0a:	3a 80       	ldd	r3, Y+2	; 0x02
     a0c:	00 e0       	ldi	r16, 0x00	; 0
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	8f 80       	ldd	r8, Y+7	; 0x07
     a12:	98 84       	ldd	r9, Y+8	; 0x08
     a14:	18 14       	cp	r1, r8
     a16:	19 04       	cpc	r1, r9
     a18:	ec f7       	brge	.-6      	; 0xa14 <_ZN5Gates9kroneckerEP7Complexii+0x1c2>
     a1a:	62 2c       	mov	r6, r2
     a1c:	73 2c       	mov	r7, r3
     a1e:	42 2c       	mov	r4, r2
     a20:	53 2c       	mov	r5, r3
     a22:	c0 2e       	mov	r12, r16
     a24:	d1 2e       	mov	r13, r17
     a26:	b6 cf       	rjmp	.-148    	; 0x994 <_ZN5Gates9kroneckerEP7Complexii+0x142>
		}
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     a28:	86 2f       	mov	r24, r22
     a2a:	9b 2d       	mov	r25, r11
     a2c:	24 c0       	rjmp	.+72     	; 0xa76 <_ZN5Gates9kroneckerEP7Complexii+0x224>
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     a2e:	88 e0       	ldi	r24, 0x08	; 8
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	9a 83       	std	Y+2, r25	; 0x02
	print_states(2*2,vec,"Before: ");
     a3a:	45 e7       	ldi	r20, 0x75	; 117
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	b5 01       	movw	r22, r10
     a40:	84 e0       	ldi	r24, 0x04	; 4
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	98 87       	std	Y+8, r25	; 0x08
     a4e:	8f 83       	std	Y+7, r24	; 0x07
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     a50:	24 01       	movw	r4, r8
     a52:	44 0c       	add	r4, r4
     a54:	55 1c       	adc	r5, r5
     a56:	c9 80       	ldd	r12, Y+1	; 0x01
     a58:	da 80       	ldd	r13, Y+2	; 0x02
     a5a:	f4 01       	movw	r30, r8
     a5c:	61 2c       	mov	r6, r1
     a5e:	71 2c       	mov	r7, r1
     a60:	21 2c       	mov	r2, r1
     a62:	31 2c       	mov	r3, r1
     a64:	8b 82       	std	Y+3, r8	; 0x03
     a66:	9c 82       	std	Y+4, r9	; 0x04
     a68:	c6 01       	movw	r24, r12
     a6a:	cf 80       	ldd	r12, Y+7	; 0x07
     a6c:	d8 84       	ldd	r13, Y+8	; 0x08
     a6e:	47 01       	movw	r8, r14
     a70:	98 87       	std	Y+8, r25	; 0x08
     a72:	8f 83       	std	Y+7, r24	; 0x07
     a74:	3a cf       	rjmp	.-396    	; 0x8ea <_ZN5Gates9kroneckerEP7Complexii+0x98>
				binary_touch=0;
				break;
			}
	}
	return kronvec;
}
     a76:	28 96       	adiw	r28, 0x08	; 8
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	bf 90       	pop	r11
     a94:	af 90       	pop	r10
     a96:	9f 90       	pop	r9
     a98:	8f 90       	pop	r8
     a9a:	7f 90       	pop	r7
     a9c:	6f 90       	pop	r6
     a9e:	5f 90       	pop	r5
     aa0:	4f 90       	pop	r4
     aa2:	3f 90       	pop	r3
     aa4:	2f 90       	pop	r2
     aa6:	08 95       	ret

00000aa8 <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     aa8:	2f 92       	push	r2
     aaa:	3f 92       	push	r3
     aac:	4f 92       	push	r4
     aae:	5f 92       	push	r5
     ab0:	6f 92       	push	r6
     ab2:	7f 92       	push	r7
     ab4:	8f 92       	push	r8
     ab6:	9f 92       	push	r9
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	28 97       	sbiw	r28, 0x08	; 8
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	9e 83       	std	Y+6, r25	; 0x06
     ade:	8d 83       	std	Y+5, r24	; 0x05
     ae0:	7a 83       	std	Y+2, r23	; 0x02
     ae2:	69 83       	std	Y+1, r22	; 0x01
     ae4:	04 2f       	mov	r16, r20
     ae6:	15 2f       	mov	r17, r21
     ae8:	c2 2e       	mov	r12, r18
     aea:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     aec:	cb 01       	movw	r24, r22
     aee:	82 95       	swap	r24
     af0:	92 95       	swap	r25
     af2:	90 7f       	andi	r25, 0xF0	; 240
     af4:	98 27       	eor	r25, r24
     af6:	80 7f       	andi	r24, 0xF0	; 240
     af8:	98 27       	eor	r25, r24
     afa:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
     afe:	8b 83       	std	Y+3, r24	; 0x03
     b00:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     b02:	29 80       	ldd	r2, Y+1	; 0x01
     b04:	3a 80       	ldd	r3, Y+2	; 0x02
     b06:	22 0c       	add	r2, r2
     b08:	33 1c       	adc	r3, r3
     b0a:	12 14       	cp	r1, r2
     b0c:	13 04       	cpc	r1, r3
     b0e:	0c f0       	brlt	.+2      	; 0xb12 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     b10:	ac c0       	rjmp	.+344    	; 0xc6a <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     b12:	a8 2e       	mov	r10, r24
     b14:	b9 2e       	mov	r11, r25
     b16:	e0 2e       	mov	r14, r16
     b18:	f1 2e       	mov	r15, r17
     b1a:	0c 2d       	mov	r16, r12
     b1c:	1d 2d       	mov	r17, r13
     b1e:	81 2c       	mov	r8, r1
     b20:	91 2c       	mov	r9, r1
     b22:	b8 86       	std	Y+8, r11	; 0x08
     b24:	af 82       	std	Y+7, r10	; 0x07
     b26:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     b28:	f7 01       	movw	r30, r14
     b2a:	41 90       	ld	r4, Z+
     b2c:	51 90       	ld	r5, Z+
     b2e:	7f 01       	movw	r14, r30
     b30:	66 24       	eor	r6, r6
     b32:	57 fc       	sbrc	r5, 7
     b34:	60 94       	com	r6
     b36:	76 2c       	mov	r7, r6
     b38:	c3 01       	movw	r24, r6
     b3a:	b2 01       	movw	r22, r4
     b3c:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     b40:	2b ed       	ldi	r18, 0xDB	; 219
     b42:	3f e0       	ldi	r19, 0x0F	; 15
     b44:	49 e4       	ldi	r20, 0x49	; 73
     b46:	50 e4       	ldi	r21, 0x40	; 64
     b48:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	44 eb       	ldi	r20, 0xB4	; 180
     b52:	53 e4       	ldi	r21, 0x43	; 67
     b54:	0e 94 30 11 	call	0x2260	; 0x2260 <__divsf3>
     b58:	0e 94 2d 11 	call	0x225a	; 0x225a <cos>
     b5c:	ef 81       	ldd	r30, Y+7	; 0x07
     b5e:	f8 85       	ldd	r31, Y+8	; 0x08
     b60:	60 83       	st	Z, r22
     b62:	71 83       	std	Z+1, r23	; 0x01
     b64:	82 83       	std	Z+2, r24	; 0x02
     b66:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     b68:	c3 01       	movw	r24, r6
     b6a:	b2 01       	movw	r22, r4
     b6c:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     b70:	2b ed       	ldi	r18, 0xDB	; 219
     b72:	3f e0       	ldi	r19, 0x0F	; 15
     b74:	49 e4       	ldi	r20, 0x49	; 73
     b76:	50 e4       	ldi	r21, 0x40	; 64
     b78:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	44 eb       	ldi	r20, 0xB4	; 180
     b82:	53 e4       	ldi	r21, 0x43	; 67
     b84:	0e 94 30 11 	call	0x2260	; 0x2260 <__divsf3>
     b88:	0e 94 a7 13 	call	0x274e	; 0x274e <sin>
     b8c:	2b 01       	movw	r4, r22
     b8e:	3c 01       	movw	r6, r24
     b90:	58 01       	movw	r10, r16
     b92:	f8 01       	movw	r30, r16
     b94:	61 91       	ld	r22, Z+
     b96:	71 91       	ld	r23, Z+
     b98:	8f 01       	movw	r16, r30
     b9a:	88 27       	eor	r24, r24
     b9c:	77 fd       	sbrc	r23, 7
     b9e:	80 95       	com	r24
     ba0:	98 2f       	mov	r25, r24
     ba2:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     ba6:	2b ed       	ldi	r18, 0xDB	; 219
     ba8:	3f e0       	ldi	r19, 0x0F	; 15
     baa:	49 e4       	ldi	r20, 0x49	; 73
     bac:	50 e4       	ldi	r21, 0x40	; 64
     bae:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	44 e3       	ldi	r20, 0x34	; 52
     bb8:	53 e4       	ldi	r21, 0x43	; 67
     bba:	0e 94 30 11 	call	0x2260	; 0x2260 <__divsf3>
     bbe:	0e 94 2d 11 	call	0x225a	; 0x225a <cos>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	c3 01       	movw	r24, r6
     bc8:	b2 01       	movw	r22, r4
     bca:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     bce:	ef 81       	ldd	r30, Y+7	; 0x07
     bd0:	f8 85       	ldd	r31, Y+8	; 0x08
     bd2:	60 87       	std	Z+8, r22	; 0x08
     bd4:	71 87       	std	Z+9, r23	; 0x09
     bd6:	82 87       	std	Z+10, r24	; 0x0a
     bd8:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     bda:	f6 01       	movw	r30, r12
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	88 27       	eor	r24, r24
     be2:	77 fd       	sbrc	r23, 7
     be4:	80 95       	com	r24
     be6:	98 2f       	mov	r25, r24
     be8:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     bec:	2b ed       	ldi	r18, 0xDB	; 219
     bee:	3f e0       	ldi	r19, 0x0F	; 15
     bf0:	49 e4       	ldi	r20, 0x49	; 73
     bf2:	50 e4       	ldi	r21, 0x40	; 64
     bf4:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	44 eb       	ldi	r20, 0xB4	; 180
     bfe:	53 e4       	ldi	r21, 0x43	; 67
     c00:	0e 94 30 11 	call	0x2260	; 0x2260 <__divsf3>
     c04:	0e 94 a7 13 	call	0x274e	; 0x274e <sin>
     c08:	2b 01       	movw	r4, r22
     c0a:	3c 01       	movw	r6, r24
     c0c:	f5 01       	movw	r30, r10
     c0e:	60 81       	ld	r22, Z
     c10:	71 81       	ldd	r23, Z+1	; 0x01
     c12:	88 27       	eor	r24, r24
     c14:	77 fd       	sbrc	r23, 7
     c16:	80 95       	com	r24
     c18:	98 2f       	mov	r25, r24
     c1a:	0e 94 cb 11 	call	0x2396	; 0x2396 <__floatsisf>
     c1e:	2b ed       	ldi	r18, 0xDB	; 219
     c20:	3f e0       	ldi	r19, 0x0F	; 15
     c22:	49 e4       	ldi	r20, 0x49	; 73
     c24:	50 e4       	ldi	r21, 0x40	; 64
     c26:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	44 e3       	ldi	r20, 0x34	; 52
     c30:	53 e4       	ldi	r21, 0x43	; 67
     c32:	0e 94 30 11 	call	0x2260	; 0x2260 <__divsf3>
     c36:	0e 94 a7 13 	call	0x274e	; 0x274e <sin>
     c3a:	9b 01       	movw	r18, r22
     c3c:	ac 01       	movw	r20, r24
     c3e:	c3 01       	movw	r24, r6
     c40:	b2 01       	movw	r22, r4
     c42:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     c46:	ef 81       	ldd	r30, Y+7	; 0x07
     c48:	f8 85       	ldd	r31, Y+8	; 0x08
     c4a:	64 87       	std	Z+12, r22	; 0x0c
     c4c:	75 87       	std	Z+13, r23	; 0x0d
     c4e:	86 87       	std	Z+14, r24	; 0x0e
     c50:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     c52:	f2 e0       	ldi	r31, 0x02	; 2
     c54:	8f 0e       	add	r8, r31
     c56:	91 1c       	adc	r9, r1
     c58:	8f 81       	ldd	r24, Y+7	; 0x07
     c5a:	98 85       	ldd	r25, Y+8	; 0x08
     c5c:	40 96       	adiw	r24, 0x10	; 16
     c5e:	98 87       	std	Y+8, r25	; 0x08
     c60:	8f 83       	std	Y+7, r24	; 0x07
     c62:	82 14       	cp	r8, r2
     c64:	93 04       	cpc	r9, r3
     c66:	0c f4       	brge	.+2      	; 0xc6a <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     c68:	5e cf       	rjmp	.-324    	; 0xb26 <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     c6a:	21 e0       	ldi	r18, 0x01	; 1
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	49 81       	ldd	r20, Y+1	; 0x01
     c70:	5a 81       	ldd	r21, Y+2	; 0x02
     c72:	6b 81       	ldd	r22, Y+3	; 0x03
     c74:	7c 81       	ldd	r23, Y+4	; 0x04
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	0e 94 29 04 	call	0x852	; 0x852 <_ZN5Gates9kroneckerEP7Complexii>
}
     c7e:	28 96       	adiw	r28, 0x08	; 8
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	bf 90       	pop	r11
     c9c:	af 90       	pop	r10
     c9e:	9f 90       	pop	r9
     ca0:	8f 90       	pop	r8
     ca2:	7f 90       	pop	r7
     ca4:	6f 90       	pop	r6
     ca6:	5f 90       	pop	r5
     ca8:	4f 90       	pop	r4
     caa:	3f 90       	pop	r3
     cac:	2f 90       	pop	r2
     cae:	08 95       	ret

00000cb0 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	8b 01       	movw	r16, r22
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     cbe:	14 16       	cp	r1, r20
     cc0:	15 06       	cpc	r1, r21
     cc2:	64 f4       	brge	.+24     	; 0xcdc <_ZN5Gates8vec2amplEP7Complexi+0x2c>
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	c1 e0       	ldi	r28, 0x01	; 1
     cca:	d0 e0       	ldi	r29, 0x00	; 0
     ccc:	cc 0f       	add	r28, r28
     cce:	dd 1f       	adc	r29, r29
     cd0:	2f 5f       	subi	r18, 0xFF	; 255
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	24 17       	cp	r18, r20
     cd6:	35 07       	cpc	r19, r21
     cd8:	c9 f7       	brne	.-14     	; 0xccc <_ZN5Gates8vec2amplEP7Complexi+0x1c>
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <_ZN5Gates8vec2amplEP7Complexi+0x30>
     cdc:	c1 e0       	ldi	r28, 0x01	; 1
     cde:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
}
int * Gates::vec2ampl(Complex * vec,int qb_count){
	int kron_size=custom_pow(2,qb_count);
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     ce0:	42 30       	cpi	r20, 0x02	; 2
     ce2:	51 05       	cpc	r21, r1
     ce4:	2c f0       	brlt	.+10     	; 0xcf0 <_ZN5Gates8vec2amplEP7Complexi+0x40>
     ce6:	ae 01       	movw	r20, r28
     ce8:	b8 01       	movw	r22, r16
     cea:	0e 94 39 03 	call	0x672	; 0x672 <_ZN5Gates17reverse_kroneckerEP7Complexi>
     cee:	8c 01       	movw	r16, r24
	
	int* newthephi=(int*)malloc(sizeof(int)*2);
     cf0:	84 e0       	ldi	r24, 0x04	; 4
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
     cf8:	7c 01       	movw	r14, r24
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
     cfa:	f8 01       	movw	r30, r16
     cfc:	60 81       	ld	r22, Z
     cfe:	71 81       	ldd	r23, Z+1	; 0x01
     d00:	82 81       	ldd	r24, Z+2	; 0x02
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	0e 94 8e 10 	call	0x211c	; 0x211c <acos>
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	44 eb       	ldi	r20, 0xB4	; 180
     d0e:	53 e4       	ldi	r21, 0x43	; 67
     d10:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     d14:	2b ed       	ldi	r18, 0xDB	; 219
     d16:	3f e0       	ldi	r19, 0x0F	; 15
     d18:	49 e4       	ldi	r20, 0x49	; 73
     d1a:	50 e4       	ldi	r21, 0x40	; 64
     d1c:	0e 94 30 11 	call	0x2260	; 0x2260 <__divsf3>
     d20:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
     d24:	f7 01       	movw	r30, r14
     d26:	71 83       	std	Z+1, r23	; 0x01
     d28:	60 83       	st	Z, r22
	newthephi[1]=(180*vec[1].arg())/M_PI;
     d2a:	c8 01       	movw	r24, r16
     d2c:	08 96       	adiw	r24, 0x08	; 8
     d2e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN7Complex3argEv>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	44 e3       	ldi	r20, 0x34	; 52
     d38:	53 e4       	ldi	r21, 0x43	; 67
     d3a:	0e 94 44 13 	call	0x2688	; 0x2688 <__mulsf3>
     d3e:	2b ed       	ldi	r18, 0xDB	; 219
     d40:	3f e0       	ldi	r19, 0x0F	; 15
     d42:	49 e4       	ldi	r20, 0x49	; 73
     d44:	50 e4       	ldi	r21, 0x40	; 64
     d46:	0e 94 30 11 	call	0x2260	; 0x2260 <__divsf3>
     d4a:	0e 94 98 11 	call	0x2330	; 0x2330 <__fixsfsi>
     d4e:	f7 01       	movw	r30, r14
     d50:	73 83       	std	Z+3, r23	; 0x03
     d52:	62 83       	std	Z+2, r22	; 0x02
	
	print_states(kron_size,vec,"After: ");
     d54:	4e e7       	ldi	r20, 0x7E	; 126
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	b8 01       	movw	r22, r16
     d5a:	ce 01       	movw	r24, r28
     d5c:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     d60:	c7 01       	movw	r24, r14
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	08 95       	ret

00000d70 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     d70:	2f 92       	push	r2
     d72:	3f 92       	push	r3
     d74:	4f 92       	push	r4
     d76:	5f 92       	push	r5
     d78:	6f 92       	push	r6
     d7a:	7f 92       	push	r7
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	60 97       	sbiw	r28, 0x10	; 16
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	4b 01       	movw	r8, r22
     da6:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     da8:	80 e1       	ldi	r24, 0x10	; 16
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
     db0:	38 2e       	mov	r3, r24
     db2:	29 2e       	mov	r2, r25
     db4:	c8 2e       	mov	r12, r24
     db6:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     db8:	a1 2c       	mov	r10, r1
     dba:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     dbc:	24 01       	movw	r4, r8
     dbe:	88 e0       	ldi	r24, 0x08	; 8
     dc0:	48 0e       	add	r4, r24
     dc2:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     dc4:	ce 01       	movw	r24, r28
     dc6:	09 96       	adiw	r24, 0x09	; 9
     dc8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     dcc:	75 01       	movw	r14, r10
     dce:	ee 0c       	add	r14, r14
     dd0:	ff 1c       	adc	r15, r15
     dd2:	ee 0c       	add	r14, r14
     dd4:	ff 1c       	adc	r15, r15
     dd6:	ee 0c       	add	r14, r14
     dd8:	ff 1c       	adc	r15, r15
     dda:	e6 0c       	add	r14, r6
     ddc:	f7 1c       	adc	r15, r7
     dde:	d7 01       	movw	r26, r14
     de0:	0c 91       	ld	r16, X
     de2:	11 96       	adiw	r26, 0x01	; 1
     de4:	1c 91       	ld	r17, X
     de6:	11 97       	sbiw	r26, 0x01	; 1
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	2c 91       	ld	r18, X
     dec:	12 97       	sbiw	r26, 0x02	; 2
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	3c 91       	ld	r19, X
     df2:	13 97       	sbiw	r26, 0x03	; 3
     df4:	14 96       	adiw	r26, 0x04	; 4
     df6:	4c 91       	ld	r20, X
     df8:	14 97       	sbiw	r26, 0x04	; 4
     dfa:	15 96       	adiw	r26, 0x05	; 5
     dfc:	5c 91       	ld	r21, X
     dfe:	15 97       	sbiw	r26, 0x05	; 5
     e00:	16 96       	adiw	r26, 0x06	; 6
     e02:	6c 91       	ld	r22, X
     e04:	16 97       	sbiw	r26, 0x06	; 6
     e06:	17 96       	adiw	r26, 0x07	; 7
     e08:	7c 91       	ld	r23, X
     e0a:	c4 01       	movw	r24, r8
     e0c:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     e10:	02 2f       	mov	r16, r18
     e12:	13 2f       	mov	r17, r19
     e14:	24 2f       	mov	r18, r20
     e16:	35 2f       	mov	r19, r21
     e18:	46 2f       	mov	r20, r22
     e1a:	57 2f       	mov	r21, r23
     e1c:	68 2f       	mov	r22, r24
     e1e:	79 2f       	mov	r23, r25
     e20:	ce 01       	movw	r24, r28
     e22:	09 96       	adiw	r24, 0x09	; 9
     e24:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     e28:	29 87       	std	Y+9, r18	; 0x09
     e2a:	3a 87       	std	Y+10, r19	; 0x0a
     e2c:	4b 87       	std	Y+11, r20	; 0x0b
     e2e:	5c 87       	std	Y+12, r21	; 0x0c
     e30:	6d 87       	std	Y+13, r22	; 0x0d
     e32:	7e 87       	std	Y+14, r23	; 0x0e
     e34:	8f 87       	std	Y+15, r24	; 0x0f
     e36:	98 8b       	std	Y+16, r25	; 0x10
     e38:	f7 01       	movw	r30, r14
     e3a:	70 96       	adiw	r30, 0x10	; 16
     e3c:	d7 01       	movw	r26, r14
     e3e:	50 96       	adiw	r26, 0x10	; 16
     e40:	0c 91       	ld	r16, X
     e42:	11 81       	ldd	r17, Z+1	; 0x01
     e44:	22 81       	ldd	r18, Z+2	; 0x02
     e46:	33 81       	ldd	r19, Z+3	; 0x03
     e48:	44 81       	ldd	r20, Z+4	; 0x04
     e4a:	55 81       	ldd	r21, Z+5	; 0x05
     e4c:	66 81       	ldd	r22, Z+6	; 0x06
     e4e:	77 81       	ldd	r23, Z+7	; 0x07
     e50:	c2 01       	movw	r24, r4
     e52:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     e56:	02 2f       	mov	r16, r18
     e58:	13 2f       	mov	r17, r19
     e5a:	24 2f       	mov	r18, r20
     e5c:	35 2f       	mov	r19, r21
     e5e:	46 2f       	mov	r20, r22
     e60:	57 2f       	mov	r21, r23
     e62:	68 2f       	mov	r22, r24
     e64:	79 2f       	mov	r23, r25
     e66:	ce 01       	movw	r24, r28
     e68:	09 96       	adiw	r24, 0x09	; 9
     e6a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     e6e:	29 87       	std	Y+9, r18	; 0x09
     e70:	3a 87       	std	Y+10, r19	; 0x0a
     e72:	4b 87       	std	Y+11, r20	; 0x0b
     e74:	5c 87       	std	Y+12, r21	; 0x0c
     e76:	6d 87       	std	Y+13, r22	; 0x0d
     e78:	7e 87       	std	Y+14, r23	; 0x0e
     e7a:	8f 87       	std	Y+15, r24	; 0x0f
     e7c:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     e7e:	89 85       	ldd	r24, Y+9	; 0x09
     e80:	9a 85       	ldd	r25, Y+10	; 0x0a
     e82:	ab 85       	ldd	r26, Y+11	; 0x0b
     e84:	bc 85       	ldd	r27, Y+12	; 0x0c
     e86:	f6 01       	movw	r30, r12
     e88:	80 83       	st	Z, r24
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	a2 83       	std	Z+2, r26	; 0x02
     e8e:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     e90:	8d 85       	ldd	r24, Y+13	; 0x0d
     e92:	9e 85       	ldd	r25, Y+14	; 0x0e
     e94:	af 85       	ldd	r26, Y+15	; 0x0f
     e96:	b8 89       	ldd	r27, Y+16	; 0x10
     e98:	84 83       	std	Z+4, r24	; 0x04
     e9a:	95 83       	std	Z+5, r25	; 0x05
     e9c:	a6 83       	std	Z+6, r26	; 0x06
     e9e:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     ea0:	ff ef       	ldi	r31, 0xFF	; 255
     ea2:	af 1a       	sub	r10, r31
     ea4:	bf 0a       	sbc	r11, r31
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	c8 0e       	add	r12, r24
     eaa:	d1 1c       	adc	r13, r1
     eac:	a2 e0       	ldi	r26, 0x02	; 2
     eae:	aa 16       	cp	r10, r26
     eb0:	b1 04       	cpc	r11, r1
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     eb4:	87 cf       	rjmp	.-242    	; 0xdc4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     eb6:	83 2d       	mov	r24, r3
     eb8:	92 2d       	mov	r25, r2
     eba:	60 96       	adiw	r28, 0x10	; 16
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	bf 90       	pop	r11
     ed8:	af 90       	pop	r10
     eda:	9f 90       	pop	r9
     edc:	8f 90       	pop	r8
     ede:	7f 90       	pop	r7
     ee0:	6f 90       	pop	r6
     ee2:	5f 90       	pop	r5
     ee4:	4f 90       	pop	r4
     ee6:	3f 90       	pop	r3
     ee8:	2f 90       	pop	r2
     eea:	08 95       	ret

00000eec <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     eec:	2f 92       	push	r2
     eee:	3f 92       	push	r3
     ef0:	4f 92       	push	r4
     ef2:	5f 92       	push	r5
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	64 97       	sbiw	r28, 0x14	; 20
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	3b 01       	movw	r6, r22
     f22:	e4 2e       	mov	r14, r20
     f24:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     f26:	80 e2       	ldi	r24, 0x20	; 32
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
     f2e:	8b 8b       	std	Y+19, r24	; 0x13
     f30:	9c 8b       	std	Y+20, r25	; 0x14
     f32:	48 2e       	mov	r4, r24
     f34:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     f36:	81 2c       	mov	r8, r1
     f38:	91 2c       	mov	r9, r1
     f3a:	e9 8a       	std	Y+17, r14	; 0x11
     f3c:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     f3e:	21 2c       	mov	r2, r1
     f40:	31 2c       	mov	r3, r1
     f42:	ce 01       	movw	r24, r28
     f44:	09 96       	adiw	r24, 0x09	; 9
     f46:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN7ComplexC1Ev>
     f4a:	c9 88       	ldd	r12, Y+17	; 0x11
     f4c:	da 88       	ldd	r13, Y+18	; 0x12
     f4e:	e2 2c       	mov	r14, r2
     f50:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     f52:	54 01       	movw	r10, r8
     f54:	aa 0c       	add	r10, r10
     f56:	bb 1c       	adc	r11, r11
     f58:	aa 0c       	add	r10, r10
     f5a:	bb 1c       	adc	r11, r11
     f5c:	aa 0c       	add	r10, r10
     f5e:	bb 1c       	adc	r11, r11
     f60:	f5 01       	movw	r30, r10
     f62:	ec 0d       	add	r30, r12
     f64:	fd 1d       	adc	r31, r13
     f66:	00 81       	ld	r16, Z
     f68:	11 81       	ldd	r17, Z+1	; 0x01
     f6a:	22 81       	ldd	r18, Z+2	; 0x02
     f6c:	33 81       	ldd	r19, Z+3	; 0x03
     f6e:	44 81       	ldd	r20, Z+4	; 0x04
     f70:	55 81       	ldd	r21, Z+5	; 0x05
     f72:	66 81       	ldd	r22, Z+6	; 0x06
     f74:	77 81       	ldd	r23, Z+7	; 0x07
     f76:	c3 01       	movw	r24, r6
     f78:	8e 0d       	add	r24, r14
     f7a:	9f 1d       	adc	r25, r15
     f7c:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     f80:	29 83       	std	Y+1, r18	; 0x01
     f82:	3a 83       	std	Y+2, r19	; 0x02
     f84:	4b 83       	std	Y+3, r20	; 0x03
     f86:	5c 83       	std	Y+4, r21	; 0x04
     f88:	6d 83       	std	Y+5, r22	; 0x05
     f8a:	7e 83       	std	Y+6, r23	; 0x06
     f8c:	8f 83       	std	Y+7, r24	; 0x07
     f8e:	98 87       	std	Y+8, r25	; 0x08
     f90:	02 2f       	mov	r16, r18
     f92:	13 2f       	mov	r17, r19
     f94:	24 2f       	mov	r18, r20
     f96:	35 2f       	mov	r19, r21
     f98:	46 2f       	mov	r20, r22
     f9a:	57 2f       	mov	r21, r23
     f9c:	68 2f       	mov	r22, r24
     f9e:	79 2f       	mov	r23, r25
     fa0:	ce 01       	movw	r24, r28
     fa2:	09 96       	adiw	r24, 0x09	; 9
     fa4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     fa8:	29 87       	std	Y+9, r18	; 0x09
     faa:	3a 87       	std	Y+10, r19	; 0x0a
     fac:	4b 87       	std	Y+11, r20	; 0x0b
     fae:	5c 87       	std	Y+12, r21	; 0x0c
     fb0:	6d 87       	std	Y+13, r22	; 0x0d
     fb2:	7e 87       	std	Y+14, r23	; 0x0e
     fb4:	8f 87       	std	Y+15, r24	; 0x0f
     fb6:	98 8b       	std	Y+16, r25	; 0x10
     fb8:	88 e0       	ldi	r24, 0x08	; 8
     fba:	e8 0e       	add	r14, r24
     fbc:	f1 1c       	adc	r15, r1
     fbe:	e0 e2       	ldi	r30, 0x20	; 32
     fc0:	ce 0e       	add	r12, r30
     fc2:	d1 1c       	adc	r13, r1
     fc4:	f0 e2       	ldi	r31, 0x20	; 32
     fc6:	ef 16       	cp	r14, r31
     fc8:	f1 04       	cpc	r15, r1
     fca:	51 f6       	brne	.-108    	; 0xf60 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
     fcc:	89 85       	ldd	r24, Y+9	; 0x09
     fce:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd0:	ab 85       	ldd	r26, Y+11	; 0x0b
     fd2:	bc 85       	ldd	r27, Y+12	; 0x0c
     fd4:	f2 01       	movw	r30, r4
     fd6:	80 83       	st	Z, r24
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	a2 83       	std	Z+2, r26	; 0x02
     fdc:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     fde:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe2:	af 85       	ldd	r26, Y+15	; 0x0f
     fe4:	b8 89       	ldd	r27, Y+16	; 0x10
     fe6:	84 83       	std	Z+4, r24	; 0x04
     fe8:	95 83       	std	Z+5, r25	; 0x05
     fea:	a6 83       	std	Z+6, r26	; 0x06
     fec:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     fee:	ff ef       	ldi	r31, 0xFF	; 255
     ff0:	8f 1a       	sub	r8, r31
     ff2:	9f 0a       	sbc	r9, r31
     ff4:	88 e0       	ldi	r24, 0x08	; 8
     ff6:	48 0e       	add	r4, r24
     ff8:	51 1c       	adc	r5, r1
     ffa:	e4 e0       	ldi	r30, 0x04	; 4
     ffc:	8e 16       	cp	r8, r30
     ffe:	91 04       	cpc	r9, r1
    1000:	09 f0       	breq	.+2      	; 0x1004 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
    1002:	9f cf       	rjmp	.-194    	; 0xf42 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    1004:	8b 89       	ldd	r24, Y+19	; 0x13
    1006:	9c 89       	ldd	r25, Y+20	; 0x14
    1008:	64 96       	adiw	r28, 0x14	; 20
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	9f 90       	pop	r9
    102a:	8f 90       	pop	r8
    102c:	7f 90       	pop	r7
    102e:	6f 90       	pop	r6
    1030:	5f 90       	pop	r5
    1032:	4f 90       	pop	r4
    1034:	3f 90       	pop	r3
    1036:	2f 90       	pop	r2
    1038:	08 95       	ret

0000103a <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	a4 97       	sbiw	r28, 0x24	; 36
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	7c 01       	movw	r14, r24
    1060:	5b 01       	movw	r10, r22
    1062:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
    1064:	00 e0       	ldi	r16, 0x00	; 0
    1066:	10 e0       	ldi	r17, 0x00	; 0
    1068:	98 01       	movw	r18, r16
    106a:	b9 01       	movw	r22, r18
    106c:	a8 01       	movw	r20, r16
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1076:	00 e0       	ldi	r16, 0x00	; 0
    1078:	10 e0       	ldi	r17, 0x00	; 0
    107a:	98 01       	movw	r18, r16
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	60 e8       	ldi	r22, 0x80	; 128
    1082:	7f e3       	ldi	r23, 0x3F	; 63
    1084:	ce 01       	movw	r24, r28
    1086:	09 96       	adiw	r24, 0x09	; 9
    1088:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    108c:	00 e0       	ldi	r16, 0x00	; 0
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	98 01       	movw	r18, r16
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	60 e8       	ldi	r22, 0x80	; 128
    1098:	7f e3       	ldi	r23, 0x3F	; 63
    109a:	ce 01       	movw	r24, r28
    109c:	41 96       	adiw	r24, 0x11	; 17
    109e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    10a2:	00 e0       	ldi	r16, 0x00	; 0
    10a4:	10 e0       	ldi	r17, 0x00	; 0
    10a6:	98 01       	movw	r18, r16
    10a8:	b9 01       	movw	r22, r18
    10aa:	a8 01       	movw	r20, r16
    10ac:	ce 01       	movw	r24, r28
    10ae:	49 96       	adiw	r24, 0x19	; 25
    10b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    10b4:	bc a2       	std	Y+36, r11	; 0x24
    10b6:	ab a2       	std	Y+35, r10	; 0x23
    10b8:	da a2       	std	Y+34, r13	; 0x22
    10ba:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix),1);
    10bc:	9e 01       	movw	r18, r28
    10be:	2f 5d       	subi	r18, 0xDF	; 223
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	ae 01       	movw	r20, r28
    10c4:	4d 5d       	subi	r20, 0xDD	; 221
    10c6:	5f 4f       	sbci	r21, 0xFF	; 255
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	c7 01       	movw	r24, r14
    10ce:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN5Gates8ampl2vecEiPiS0_>
    10d2:	ae 01       	movw	r20, r28
    10d4:	4f 5f       	subi	r20, 0xFF	; 255
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	bc 01       	movw	r22, r24
    10da:	c7 01       	movw	r24, r14
    10dc:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	bc 01       	movw	r22, r24
    10e6:	c7 01       	movw	r24, r14
    10e8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_ZN5Gates8vec2amplEP7Complexi>
}
    10ec:	a4 96       	adiw	r28, 0x24	; 36
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	ef 90       	pop	r14
    1104:	df 90       	pop	r13
    1106:	cf 90       	pop	r12
    1108:	bf 90       	pop	r11
    110a:	af 90       	pop	r10
    110c:	08 95       	ret

0000110e <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    110e:	af 92       	push	r10
    1110:	bf 92       	push	r11
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	a4 97       	sbiw	r28, 0x24	; 36
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	7c 01       	movw	r14, r24
    1134:	5b 01       	movw	r10, r22
    1136:	6a 01       	movw	r12, r20
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
    1138:	00 e0       	ldi	r16, 0x00	; 0
    113a:	10 e0       	ldi	r17, 0x00	; 0
    113c:	98 01       	movw	r18, r16
    113e:	b9 01       	movw	r22, r18
    1140:	a8 01       	movw	r20, r16
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    114a:	00 e0       	ldi	r16, 0x00	; 0
    114c:	10 e0       	ldi	r17, 0x00	; 0
    114e:	20 e8       	ldi	r18, 0x80	; 128
    1150:	3f eb       	ldi	r19, 0xBF	; 191
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	ba 01       	movw	r22, r20
    1158:	ce 01       	movw	r24, r28
    115a:	09 96       	adiw	r24, 0x09	; 9
    115c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	10 e0       	ldi	r17, 0x00	; 0
    1164:	20 e8       	ldi	r18, 0x80	; 128
    1166:	3f e3       	ldi	r19, 0x3F	; 63
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	ba 01       	movw	r22, r20
    116e:	ce 01       	movw	r24, r28
    1170:	41 96       	adiw	r24, 0x11	; 17
    1172:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1176:	00 e0       	ldi	r16, 0x00	; 0
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	98 01       	movw	r18, r16
    117c:	b9 01       	movw	r22, r18
    117e:	a8 01       	movw	r20, r16
    1180:	ce 01       	movw	r24, r28
    1182:	49 96       	adiw	r24, 0x19	; 25
    1184:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    1188:	bc a2       	std	Y+36, r11	; 0x24
    118a:	ab a2       	std	Y+35, r10	; 0x23
    118c:	da a2       	std	Y+34, r13	; 0x22
    118e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),y_matrix),1);
    1190:	9e 01       	movw	r18, r28
    1192:	2f 5d       	subi	r18, 0xDF	; 223
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	ae 01       	movw	r20, r28
    1198:	4d 5d       	subi	r20, 0xDD	; 221
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	61 e0       	ldi	r22, 0x01	; 1
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	c7 01       	movw	r24, r14
    11a2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN5Gates8ampl2vecEiPiS0_>
    11a6:	ae 01       	movw	r20, r28
    11a8:	4f 5f       	subi	r20, 0xFF	; 255
    11aa:	5f 4f       	sbci	r21, 0xFF	; 255
    11ac:	bc 01       	movw	r22, r24
    11ae:	c7 01       	movw	r24, r14
    11b0:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    11b4:	41 e0       	ldi	r20, 0x01	; 1
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	bc 01       	movw	r22, r24
    11ba:	c7 01       	movw	r24, r14
    11bc:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_ZN5Gates8vec2amplEP7Complexi>
}
    11c0:	a4 96       	adiw	r28, 0x24	; 36
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	bf 90       	pop	r11
    11de:	af 90       	pop	r10
    11e0:	08 95       	ret

000011e2 <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	a4 97       	sbiw	r28, 0x24	; 36
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	7c 01       	movw	r14, r24
    1208:	5b 01       	movw	r10, r22
    120a:	6a 01       	movw	r12, r20
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
    120c:	00 e0       	ldi	r16, 0x00	; 0
    120e:	10 e0       	ldi	r17, 0x00	; 0
    1210:	98 01       	movw	r18, r16
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	60 e8       	ldi	r22, 0x80	; 128
    1218:	7f e3       	ldi	r23, 0x3F	; 63
    121a:	ce 01       	movw	r24, r28
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	10 e0       	ldi	r17, 0x00	; 0
    1226:	98 01       	movw	r18, r16
    1228:	b9 01       	movw	r22, r18
    122a:	a8 01       	movw	r20, r16
    122c:	ce 01       	movw	r24, r28
    122e:	09 96       	adiw	r24, 0x09	; 9
    1230:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1234:	00 e0       	ldi	r16, 0x00	; 0
    1236:	10 e0       	ldi	r17, 0x00	; 0
    1238:	98 01       	movw	r18, r16
    123a:	b9 01       	movw	r22, r18
    123c:	a8 01       	movw	r20, r16
    123e:	ce 01       	movw	r24, r28
    1240:	41 96       	adiw	r24, 0x11	; 17
    1242:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1246:	00 e0       	ldi	r16, 0x00	; 0
    1248:	10 e0       	ldi	r17, 0x00	; 0
    124a:	98 01       	movw	r18, r16
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	60 e8       	ldi	r22, 0x80	; 128
    1252:	7f eb       	ldi	r23, 0xBF	; 191
    1254:	ce 01       	movw	r24, r28
    1256:	49 96       	adiw	r24, 0x19	; 25
    1258:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    125c:	bc a2       	std	Y+36, r11	; 0x24
    125e:	ab a2       	std	Y+35, r10	; 0x23
    1260:	da a2       	std	Y+34, r13	; 0x22
    1262:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),z_matrix),1);
    1264:	9e 01       	movw	r18, r28
    1266:	2f 5d       	subi	r18, 0xDF	; 223
    1268:	3f 4f       	sbci	r19, 0xFF	; 255
    126a:	ae 01       	movw	r20, r28
    126c:	4d 5d       	subi	r20, 0xDD	; 221
    126e:	5f 4f       	sbci	r21, 0xFF	; 255
    1270:	61 e0       	ldi	r22, 0x01	; 1
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	c7 01       	movw	r24, r14
    1276:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN5Gates8ampl2vecEiPiS0_>
    127a:	ae 01       	movw	r20, r28
    127c:	4f 5f       	subi	r20, 0xFF	; 255
    127e:	5f 4f       	sbci	r21, 0xFF	; 255
    1280:	bc 01       	movw	r22, r24
    1282:	c7 01       	movw	r24, r14
    1284:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	bc 01       	movw	r22, r24
    128e:	c7 01       	movw	r24, r14
    1290:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1294:	a4 96       	adiw	r28, 0x24	; 36
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	08 95       	ret

000012b6 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	a4 97       	sbiw	r28, 0x24	; 36
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	7c 01       	movw	r14, r24
    12dc:	5b 01       	movw	r10, r22
    12de:	6a 01       	movw	r12, r20
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    12e0:	00 e0       	ldi	r16, 0x00	; 0
    12e2:	10 e0       	ldi	r17, 0x00	; 0
    12e4:	98 01       	movw	r18, r16
    12e6:	43 ef       	ldi	r20, 0xF3	; 243
    12e8:	54 e0       	ldi	r21, 0x04	; 4
    12ea:	65 e3       	ldi	r22, 0x35	; 53
    12ec:	7f e3       	ldi	r23, 0x3F	; 63
    12ee:	ce 01       	movw	r24, r28
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    12f6:	00 e0       	ldi	r16, 0x00	; 0
    12f8:	10 e0       	ldi	r17, 0x00	; 0
    12fa:	98 01       	movw	r18, r16
    12fc:	43 ef       	ldi	r20, 0xF3	; 243
    12fe:	54 e0       	ldi	r21, 0x04	; 4
    1300:	65 e3       	ldi	r22, 0x35	; 53
    1302:	7f e3       	ldi	r23, 0x3F	; 63
    1304:	ce 01       	movw	r24, r28
    1306:	09 96       	adiw	r24, 0x09	; 9
    1308:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    130c:	00 e0       	ldi	r16, 0x00	; 0
    130e:	10 e0       	ldi	r17, 0x00	; 0
    1310:	98 01       	movw	r18, r16
    1312:	43 ef       	ldi	r20, 0xF3	; 243
    1314:	54 e0       	ldi	r21, 0x04	; 4
    1316:	65 e3       	ldi	r22, 0x35	; 53
    1318:	7f e3       	ldi	r23, 0x3F	; 63
    131a:	ce 01       	movw	r24, r28
    131c:	41 96       	adiw	r24, 0x11	; 17
    131e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1322:	00 e0       	ldi	r16, 0x00	; 0
    1324:	10 e0       	ldi	r17, 0x00	; 0
    1326:	98 01       	movw	r18, r16
    1328:	43 ef       	ldi	r20, 0xF3	; 243
    132a:	54 e0       	ldi	r21, 0x04	; 4
    132c:	65 e3       	ldi	r22, 0x35	; 53
    132e:	7f eb       	ldi	r23, 0xBF	; 191
    1330:	ce 01       	movw	r24, r28
    1332:	49 96       	adiw	r24, 0x19	; 25
    1334:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    1338:	bc a2       	std	Y+36, r11	; 0x24
    133a:	ab a2       	std	Y+35, r10	; 0x23
    133c:	da a2       	std	Y+34, r13	; 0x22
    133e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),h_matrix),1);
    1340:	9e 01       	movw	r18, r28
    1342:	2f 5d       	subi	r18, 0xDF	; 223
    1344:	3f 4f       	sbci	r19, 0xFF	; 255
    1346:	ae 01       	movw	r20, r28
    1348:	4d 5d       	subi	r20, 0xDD	; 221
    134a:	5f 4f       	sbci	r21, 0xFF	; 255
    134c:	61 e0       	ldi	r22, 0x01	; 1
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	c7 01       	movw	r24, r14
    1352:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN5Gates8ampl2vecEiPiS0_>
    1356:	ae 01       	movw	r20, r28
    1358:	4f 5f       	subi	r20, 0xFF	; 255
    135a:	5f 4f       	sbci	r21, 0xFF	; 255
    135c:	bc 01       	movw	r22, r24
    135e:	c7 01       	movw	r24, r14
    1360:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	bc 01       	movw	r22, r24
    136a:	c7 01       	movw	r24, r14
    136c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1370:	a4 96       	adiw	r28, 0x24	; 36
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	bf 90       	pop	r11
    138e:	af 90       	pop	r10
    1390:	08 95       	ret

00001392 <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    1392:	af 92       	push	r10
    1394:	bf 92       	push	r11
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	a4 97       	sbiw	r28, 0x24	; 36
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	7c 01       	movw	r14, r24
    13b8:	5b 01       	movw	r10, r22
    13ba:	6a 01       	movw	r12, r20
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
    13bc:	00 e0       	ldi	r16, 0x00	; 0
    13be:	10 e0       	ldi	r17, 0x00	; 0
    13c0:	98 01       	movw	r18, r16
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	60 e8       	ldi	r22, 0x80	; 128
    13c8:	7f e3       	ldi	r23, 0x3F	; 63
    13ca:	ce 01       	movw	r24, r28
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    13d2:	00 e0       	ldi	r16, 0x00	; 0
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	98 01       	movw	r18, r16
    13d8:	b9 01       	movw	r22, r18
    13da:	a8 01       	movw	r20, r16
    13dc:	ce 01       	movw	r24, r28
    13de:	09 96       	adiw	r24, 0x09	; 9
    13e0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    13e4:	00 e0       	ldi	r16, 0x00	; 0
    13e6:	10 e0       	ldi	r17, 0x00	; 0
    13e8:	98 01       	movw	r18, r16
    13ea:	b9 01       	movw	r22, r18
    13ec:	a8 01       	movw	r20, r16
    13ee:	ce 01       	movw	r24, r28
    13f0:	41 96       	adiw	r24, 0x11	; 17
    13f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    13f6:	00 e0       	ldi	r16, 0x00	; 0
    13f8:	10 e0       	ldi	r17, 0x00	; 0
    13fa:	20 e8       	ldi	r18, 0x80	; 128
    13fc:	3f e3       	ldi	r19, 0x3F	; 63
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	ba 01       	movw	r22, r20
    1404:	ce 01       	movw	r24, r28
    1406:	49 96       	adiw	r24, 0x19	; 25
    1408:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    140c:	bc a2       	std	Y+36, r11	; 0x24
    140e:	ab a2       	std	Y+35, r10	; 0x23
    1410:	da a2       	std	Y+34, r13	; 0x22
    1412:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),s_matrix),1);
    1414:	9e 01       	movw	r18, r28
    1416:	2f 5d       	subi	r18, 0xDF	; 223
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	ae 01       	movw	r20, r28
    141c:	4d 5d       	subi	r20, 0xDD	; 221
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	c7 01       	movw	r24, r14
    1426:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN5Gates8ampl2vecEiPiS0_>
    142a:	ae 01       	movw	r20, r28
    142c:	4f 5f       	subi	r20, 0xFF	; 255
    142e:	5f 4f       	sbci	r21, 0xFF	; 255
    1430:	bc 01       	movw	r22, r24
    1432:	c7 01       	movw	r24, r14
    1434:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	bc 01       	movw	r22, r24
    143e:	c7 01       	movw	r24, r14
    1440:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1444:	a4 96       	adiw	r28, 0x24	; 36
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	cf 90       	pop	r12
    1460:	bf 90       	pop	r11
    1462:	af 90       	pop	r10
    1464:	08 95       	ret

00001466 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    1466:	af 92       	push	r10
    1468:	bf 92       	push	r11
    146a:	cf 92       	push	r12
    146c:	df 92       	push	r13
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	a4 97       	sbiw	r28, 0x24	; 36
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	7c 01       	movw	r14, r24
    148c:	5b 01       	movw	r10, r22
    148e:	6a 01       	movw	r12, r20
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    1490:	00 e0       	ldi	r16, 0x00	; 0
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	98 01       	movw	r18, r16
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	60 e8       	ldi	r22, 0x80	; 128
    149c:	7f e3       	ldi	r23, 0x3F	; 63
    149e:	ce 01       	movw	r24, r28
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    14a6:	00 e0       	ldi	r16, 0x00	; 0
    14a8:	10 e0       	ldi	r17, 0x00	; 0
    14aa:	98 01       	movw	r18, r16
    14ac:	b9 01       	movw	r22, r18
    14ae:	a8 01       	movw	r20, r16
    14b0:	ce 01       	movw	r24, r28
    14b2:	09 96       	adiw	r24, 0x09	; 9
    14b4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    14b8:	00 e0       	ldi	r16, 0x00	; 0
    14ba:	10 e0       	ldi	r17, 0x00	; 0
    14bc:	98 01       	movw	r18, r16
    14be:	b9 01       	movw	r22, r18
    14c0:	a8 01       	movw	r20, r16
    14c2:	ce 01       	movw	r24, r28
    14c4:	41 96       	adiw	r24, 0x11	; 17
    14c6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    14ca:	03 ef       	ldi	r16, 0xF3	; 243
    14cc:	14 e0       	ldi	r17, 0x04	; 4
    14ce:	25 e3       	ldi	r18, 0x35	; 53
    14d0:	3f e3       	ldi	r19, 0x3F	; 63
    14d2:	b9 01       	movw	r22, r18
    14d4:	a8 01       	movw	r20, r16
    14d6:	ce 01       	movw	r24, r28
    14d8:	49 96       	adiw	r24, 0x19	; 25
    14da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    14de:	bc a2       	std	Y+36, r11	; 0x24
    14e0:	ab a2       	std	Y+35, r10	; 0x23
    14e2:	da a2       	std	Y+34, r13	; 0x22
    14e4:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),t_matrix),1);
    14e6:	9e 01       	movw	r18, r28
    14e8:	2f 5d       	subi	r18, 0xDF	; 223
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	ae 01       	movw	r20, r28
    14ee:	4d 5d       	subi	r20, 0xDD	; 221
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	c7 01       	movw	r24, r14
    14f8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN5Gates8ampl2vecEiPiS0_>
    14fc:	ae 01       	movw	r20, r28
    14fe:	4f 5f       	subi	r20, 0xFF	; 255
    1500:	5f 4f       	sbci	r21, 0xFF	; 255
    1502:	bc 01       	movw	r22, r24
    1504:	c7 01       	movw	r24, r14
    1506:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	bc 01       	movw	r22, r24
    1510:	c7 01       	movw	r24, r14
    1512:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1516:	a4 96       	adiw	r28, 0x24	; 36
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	08 95       	ret

00001538 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    1538:	6f 92       	push	r6
    153a:	7f 92       	push	r7
    153c:	8f 92       	push	r8
    153e:	9f 92       	push	r9
    1540:	af 92       	push	r10
    1542:	bf 92       	push	r11
    1544:	cf 92       	push	r12
    1546:	df 92       	push	r13
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	c8 58       	subi	r28, 0x88	; 136
    155a:	d1 09       	sbc	r29, r1
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	7c 01       	movw	r14, r24
    1568:	3b 01       	movw	r6, r22
    156a:	5a 01       	movw	r10, r20
    156c:	49 01       	movw	r8, r18
    156e:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1570:	00 e0       	ldi	r16, 0x00	; 0
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	98 01       	movw	r18, r16
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	60 e8       	ldi	r22, 0x80	; 128
    157c:	7f e3       	ldi	r23, 0x3F	; 63
    157e:	ce 01       	movw	r24, r28
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1586:	00 e0       	ldi	r16, 0x00	; 0
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	98 01       	movw	r18, r16
    158c:	b9 01       	movw	r22, r18
    158e:	a8 01       	movw	r20, r16
    1590:	ce 01       	movw	r24, r28
    1592:	09 96       	adiw	r24, 0x09	; 9
    1594:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1598:	00 e0       	ldi	r16, 0x00	; 0
    159a:	10 e0       	ldi	r17, 0x00	; 0
    159c:	98 01       	movw	r18, r16
    159e:	b9 01       	movw	r22, r18
    15a0:	a8 01       	movw	r20, r16
    15a2:	ce 01       	movw	r24, r28
    15a4:	41 96       	adiw	r24, 0x11	; 17
    15a6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15aa:	00 e0       	ldi	r16, 0x00	; 0
    15ac:	10 e0       	ldi	r17, 0x00	; 0
    15ae:	98 01       	movw	r18, r16
    15b0:	b9 01       	movw	r22, r18
    15b2:	a8 01       	movw	r20, r16
    15b4:	ce 01       	movw	r24, r28
    15b6:	49 96       	adiw	r24, 0x19	; 25
    15b8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15bc:	00 e0       	ldi	r16, 0x00	; 0
    15be:	10 e0       	ldi	r17, 0x00	; 0
    15c0:	98 01       	movw	r18, r16
    15c2:	b9 01       	movw	r22, r18
    15c4:	a8 01       	movw	r20, r16
    15c6:	ce 01       	movw	r24, r28
    15c8:	81 96       	adiw	r24, 0x21	; 33
    15ca:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15ce:	00 e0       	ldi	r16, 0x00	; 0
    15d0:	10 e0       	ldi	r17, 0x00	; 0
    15d2:	98 01       	movw	r18, r16
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	60 e8       	ldi	r22, 0x80	; 128
    15da:	7f e3       	ldi	r23, 0x3F	; 63
    15dc:	ce 01       	movw	r24, r28
    15de:	89 96       	adiw	r24, 0x29	; 41
    15e0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15e4:	00 e0       	ldi	r16, 0x00	; 0
    15e6:	10 e0       	ldi	r17, 0x00	; 0
    15e8:	98 01       	movw	r18, r16
    15ea:	b9 01       	movw	r22, r18
    15ec:	a8 01       	movw	r20, r16
    15ee:	ce 01       	movw	r24, r28
    15f0:	c1 96       	adiw	r24, 0x31	; 49
    15f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15f6:	00 e0       	ldi	r16, 0x00	; 0
    15f8:	10 e0       	ldi	r17, 0x00	; 0
    15fa:	98 01       	movw	r18, r16
    15fc:	b9 01       	movw	r22, r18
    15fe:	a8 01       	movw	r20, r16
    1600:	ce 01       	movw	r24, r28
    1602:	c9 96       	adiw	r24, 0x39	; 57
    1604:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1608:	00 e0       	ldi	r16, 0x00	; 0
    160a:	10 e0       	ldi	r17, 0x00	; 0
    160c:	98 01       	movw	r18, r16
    160e:	b9 01       	movw	r22, r18
    1610:	a8 01       	movw	r20, r16
    1612:	ce 01       	movw	r24, r28
    1614:	8f 5b       	subi	r24, 0xBF	; 191
    1616:	9f 4f       	sbci	r25, 0xFF	; 255
    1618:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    161c:	00 e0       	ldi	r16, 0x00	; 0
    161e:	10 e0       	ldi	r17, 0x00	; 0
    1620:	98 01       	movw	r18, r16
    1622:	b9 01       	movw	r22, r18
    1624:	a8 01       	movw	r20, r16
    1626:	ce 01       	movw	r24, r28
    1628:	87 5b       	subi	r24, 0xB7	; 183
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1630:	00 e0       	ldi	r16, 0x00	; 0
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	98 01       	movw	r18, r16
    1636:	b9 01       	movw	r22, r18
    1638:	a8 01       	movw	r20, r16
    163a:	ce 01       	movw	r24, r28
    163c:	8f 5a       	subi	r24, 0xAF	; 175
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1644:	00 e0       	ldi	r16, 0x00	; 0
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	98 01       	movw	r18, r16
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	60 e8       	ldi	r22, 0x80	; 128
    1650:	7f e3       	ldi	r23, 0x3F	; 63
    1652:	ce 01       	movw	r24, r28
    1654:	87 5a       	subi	r24, 0xA7	; 167
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    165c:	00 e0       	ldi	r16, 0x00	; 0
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	98 01       	movw	r18, r16
    1662:	b9 01       	movw	r22, r18
    1664:	a8 01       	movw	r20, r16
    1666:	ce 01       	movw	r24, r28
    1668:	8f 59       	subi	r24, 0x9F	; 159
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1670:	00 e0       	ldi	r16, 0x00	; 0
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	98 01       	movw	r18, r16
    1676:	b9 01       	movw	r22, r18
    1678:	a8 01       	movw	r20, r16
    167a:	ce 01       	movw	r24, r28
    167c:	87 59       	subi	r24, 0x97	; 151
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1684:	00 e0       	ldi	r16, 0x00	; 0
    1686:	10 e0       	ldi	r17, 0x00	; 0
    1688:	98 01       	movw	r18, r16
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	60 e8       	ldi	r22, 0x80	; 128
    1690:	7f e3       	ldi	r23, 0x3F	; 63
    1692:	ce 01       	movw	r24, r28
    1694:	8f 58       	subi	r24, 0x8F	; 143
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    169c:	00 e0       	ldi	r16, 0x00	; 0
    169e:	10 e0       	ldi	r17, 0x00	; 0
    16a0:	98 01       	movw	r18, r16
    16a2:	b9 01       	movw	r22, r18
    16a4:	a8 01       	movw	r20, r16
    16a6:	ce 01       	movw	r24, r28
    16a8:	87 58       	subi	r24, 0x87	; 135
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
    16b0:	cb 57       	subi	r28, 0x7B	; 123
    16b2:	df 4f       	sbci	r29, 0xFF	; 255
    16b4:	79 82       	std	Y+1, r7	; 0x01
    16b6:	68 82       	st	Y, r6
    16b8:	c5 58       	subi	r28, 0x85	; 133
    16ba:	d0 40       	sbci	r29, 0x00	; 0
    16bc:	c9 57       	subi	r28, 0x79	; 121
    16be:	df 4f       	sbci	r29, 0xFF	; 255
    16c0:	99 82       	std	Y+1, r9	; 0x01
    16c2:	88 82       	st	Y, r8
    16c4:	c7 58       	subi	r28, 0x87	; 135
    16c6:	d0 40       	sbci	r29, 0x00	; 0
    16c8:	cf 57       	subi	r28, 0x7F	; 127
    16ca:	df 4f       	sbci	r29, 0xFF	; 255
    16cc:	b9 82       	std	Y+1, r11	; 0x01
    16ce:	a8 82       	st	Y, r10
    16d0:	c1 58       	subi	r28, 0x81	; 129
    16d2:	d0 40       	sbci	r29, 0x00	; 0
    16d4:	cd 57       	subi	r28, 0x7D	; 125
    16d6:	df 4f       	sbci	r29, 0xFF	; 255
    16d8:	d9 82       	std	Y+1, r13	; 0x01
    16da:	c8 82       	st	Y, r12
    16dc:	c3 58       	subi	r28, 0x83	; 131
    16de:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix),2);
    16e0:	9e 01       	movw	r18, r28
    16e2:	2f 57       	subi	r18, 0x7F	; 127
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	ae 01       	movw	r20, r28
    16e8:	4b 57       	subi	r20, 0x7B	; 123
    16ea:	5f 4f       	sbci	r21, 0xFF	; 255
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	c7 01       	movw	r24, r14
    16f2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN5Gates8ampl2vecEiPiS0_>
    16f6:	ae 01       	movw	r20, r28
    16f8:	4f 5f       	subi	r20, 0xFF	; 255
    16fa:	5f 4f       	sbci	r21, 0xFF	; 255
    16fc:	bc 01       	movw	r22, r24
    16fe:	c7 01       	movw	r24, r14
    1700:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1704:	42 e0       	ldi	r20, 0x02	; 2
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	bc 01       	movw	r22, r24
    170a:	c7 01       	movw	r24, r14
    170c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_ZN5Gates8vec2amplEP7Complexi>
}
    1710:	c8 57       	subi	r28, 0x78	; 120
    1712:	df 4f       	sbci	r29, 0xFF	; 255
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	7f 90       	pop	r7
    1738:	6f 90       	pop	r6
    173a:	08 95       	ret

0000173c <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}

Serial s;
    173c:	81 ec       	ldi	r24, 0xC1	; 193
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN6SerialC1Ev>
    1744:	08 95       	ret

00001746 <main>:
#include "qepu.h"
int main(void){
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	00 d0       	rcall	.+0      	; 0x174c <main+0x6>
    174c:	00 d0       	rcall	.+0      	; 0x174e <main+0x8>
    174e:	00 d0       	rcall	.+0      	; 0x1750 <main+0xa>
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    1754:	ce 01       	movw	r24, r28
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN4QEPUC1Ev>
	qepu.run();
    175c:	ce 01       	movw	r24, r28
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZN4QEPU3runEv>
    1764:	ff cf       	rjmp	.-2      	; 0x1764 <main+0x1e>

00001766 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	ec 01       	movw	r28, r24
    176c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN6EEPromC1Ev>
    1770:	ce 01       	movw	r24, r28
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN6SerialC1Ev>
    1778:	ce 01       	movw	r24, r28
    177a:	05 96       	adiw	r24, 0x05	; 5
    177c:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN5GatesC1Ev>
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	8a bb       	out	0x1a, r24	; 26
    1784:	1c 82       	std	Y+4, r1	; 0x04
    1786:	1b 82       	std	Y+3, r1	; 0x03
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    178e:	7b b3       	in	r23, 0x1b	; 27
    1790:	21 e0       	ldi	r18, 0x01	; 1
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	c9 01       	movw	r24, r18
    1796:	06 2e       	mov	r0, r22
    1798:	02 c0       	rjmp	.+4      	; 0x179e <_ZN4QEPU10setctrlpinEii+0x10>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <_ZN4QEPU10setctrlpinEii+0xc>
    17a2:	80 95       	com	r24
    17a4:	87 23       	and	r24, r23
    17a6:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    17a8:	8b b3       	in	r24, 0x1b	; 27
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <_ZN4QEPU10setctrlpinEii+0x22>
    17ac:	44 0f       	add	r20, r20
    17ae:	55 1f       	adc	r21, r21
    17b0:	6a 95       	dec	r22
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <_ZN4QEPU10setctrlpinEii+0x1e>
    17b4:	48 2b       	or	r20, r24
    17b6:	4b bb       	out	0x1b, r20	; 27
    17b8:	08 95       	ret

000017ba <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    17c4:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    17c6:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    17c8:	64 e0       	ldi	r22, 0x04	; 4
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	ce 01       	movw	r24, r28
    17ce:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	66 e0       	ldi	r22, 0x06	; 6
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	ce 01       	movw	r24, r28
    17dc:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	66 e0       	ldi	r22, 0x06	; 6
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	ce 01       	movw	r24, r28
    17ea:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    17ee:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	ec 01       	movw	r28, r24
    1800:	8a 01       	movw	r16, r20
	DDRB=0x00;
    1802:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    1804:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	65 e0       	ldi	r22, 0x05	; 5
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    1812:	a8 01       	movw	r20, r16
    1814:	64 e0       	ldi	r22, 0x04	; 4
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	ce 01       	movw	r24, r28
    181a:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    181e:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    1820:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	08 95       	ret

00001832 <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    1832:	6f 92       	push	r6
    1834:	7f 92       	push	r7
    1836:	8f 92       	push	r8
    1838:	9f 92       	push	r9
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	6c 01       	movw	r12, r24
	serial.writestrln("");
    1850:	8c 01       	movw	r16, r24
    1852:	0f 5f       	subi	r16, 0xFF	; 255
    1854:	1f 4f       	sbci	r17, 0xFF	; 255
    1856:	6f ea       	ldi	r22, 0xAF	; 175
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	c8 01       	movw	r24, r16
    185c:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    1860:	66 e8       	ldi	r22, 0x86	; 134
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	c8 01       	movw	r24, r16
    1866:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    186a:	c0 e0       	ldi	r28, 0x00	; 0
    186c:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    186e:	0f 2e       	mov	r0, r31
    1870:	f0 ea       	ldi	r31, 0xA0	; 160
    1872:	ef 2e       	mov	r14, r31
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	ff 2e       	mov	r15, r31
    1878:	f0 2d       	mov	r31, r0
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
    1882:	88 2e       	mov	r8, r24
    1884:	99 2e       	mov	r9, r25
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	be 01       	movw	r22, r28
    188c:	c6 01       	movw	r24, r12
    188e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1892:	9f 93       	push	r25
    1894:	8f 93       	push	r24
    1896:	ff 92       	push	r15
    1898:	ef 92       	push	r14
    189a:	9f 92       	push	r9
    189c:	8f 92       	push	r8
    189e:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
    18aa:	a8 2e       	mov	r10, r24
    18ac:	b9 2e       	mov	r11, r25
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	be 01       	movw	r22, r28
    18b4:	c6 01       	movw	r24, r12
    18b6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    18ba:	9f 93       	push	r25
    18bc:	8f 93       	push	r24
    18be:	ff 92       	push	r15
    18c0:	ef 92       	push	r14
    18c2:	bf 92       	push	r11
    18c4:	af 92       	push	r10
    18c6:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
    18d2:	68 2e       	mov	r6, r24
    18d4:	79 2e       	mov	r7, r25
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	ff 92       	push	r15
    18dc:	ef 92       	push	r14
    18de:	7f 92       	push	r7
    18e0:	6f 92       	push	r6
    18e2:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    18e6:	63 ea       	ldi	r22, 0xA3	; 163
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	c8 01       	movw	r24, r16
    18ec:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6Serial8writestrEPc>
    18f0:	66 2d       	mov	r22, r6
    18f2:	77 2d       	mov	r23, r7
    18f4:	c8 01       	movw	r24, r16
    18f6:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6Serial8writestrEPc>
    18fa:	65 ea       	ldi	r22, 0xA5	; 165
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	c8 01       	movw	r24, r16
    1900:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    1904:	68 2d       	mov	r22, r8
    1906:	79 2d       	mov	r23, r9
    1908:	c8 01       	movw	r24, r16
    190a:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    190e:	60 eb       	ldi	r22, 0xB0	; 176
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	c8 01       	movw	r24, r16
    1914:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    1918:	6a 2d       	mov	r22, r10
    191a:	7b 2d       	mov	r23, r11
    191c:	c8 01       	movw	r24, r16
    191e:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    1922:	21 96       	adiw	r28, 0x01	; 1
    1924:	8d b7       	in	r24, 0x3d	; 61
    1926:	9e b7       	in	r25, 0x3e	; 62
    1928:	42 96       	adiw	r24, 0x12	; 18
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	9e bf       	out	0x3e, r25	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	8d bf       	out	0x3d, r24	; 61
    1934:	c4 30       	cpi	r28, 0x04	; 4
    1936:	d1 05       	cpc	r29, r1
    1938:	09 f0       	breq	.+2      	; 0x193c <_ZN4QEPU7dumpmemEv+0x10a>
    193a:	9f cf       	rjmp	.-194    	; 0x187a <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10
    1950:	9f 90       	pop	r9
    1952:	8f 90       	pop	r8
    1954:	7f 90       	pop	r7
    1956:	6f 90       	pop	r6
    1958:	08 95       	ret

0000195a <_ZN4QEPU5Utils10int2binstrEii>:

char * QEPU::Utils::int2binstr(int num,int strlength){
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	06 2f       	mov	r16, r22
    1964:	17 2f       	mov	r17, r23
    1966:	ea 01       	movw	r28, r20
    char * str = (char*)malloc(strlength + 1);
    1968:	ca 01       	movw	r24, r20
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
    if(!str) return NULL;
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	b9 f0       	breq	.+46     	; 0x19a2 <_ZN4QEPU5Utils10int2binstrEii+0x48>
    str[strlength] = 0;
    1974:	fc 01       	movw	r30, r24
    1976:	ec 0f       	add	r30, r28
    1978:	fd 1f       	adc	r31, r29
    197a:	10 82       	st	Z, r1

    // type punning because signed shift is implementation-defined
    unsigned u = *(unsigned *)&num;
    197c:	20 2f       	mov	r18, r16
    197e:	31 2f       	mov	r19, r17
    for(; strlength--; u >>= 1)
    1980:	be 01       	movw	r22, r28
    1982:	61 50       	subi	r22, 0x01	; 1
    1984:	71 09       	sbc	r23, r1
    1986:	cd 2b       	or	r28, r29
    1988:	71 f0       	breq	.+28     	; 0x19a6 <_ZN4QEPU5Utils10int2binstrEii+0x4c>
    str[strlength] = u & 1 ? '1' : '0';
    198a:	20 ff       	sbrs	r18, 0
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <_ZN4QEPU5Utils10int2binstrEii+0x38>
    198e:	41 e3       	ldi	r20, 0x31	; 49
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <_ZN4QEPU5Utils10int2binstrEii+0x3a>
    1992:	40 e3       	ldi	r20, 0x30	; 48
    1994:	42 93       	st	-Z, r20
    if(!str) return NULL;
    str[strlength] = 0;

    // type punning because signed shift is implementation-defined
    unsigned u = *(unsigned *)&num;
    for(; strlength--; u >>= 1)
    1996:	36 95       	lsr	r19
    1998:	27 95       	ror	r18
    199a:	61 50       	subi	r22, 0x01	; 1
    199c:	71 09       	sbc	r23, r1
    199e:	a8 f7       	brcc	.-22     	; 0x198a <_ZN4QEPU5Utils10int2binstrEii+0x30>
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <_ZN4QEPU5Utils10int2binstrEii+0x4c>
	}
}

char * QEPU::Utils::int2binstr(int num,int strlength){
    char * str = (char*)malloc(strlength + 1);
    if(!str) return NULL;
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    unsigned u = *(unsigned *)&num;
    for(; strlength--; u >>= 1)
    str[strlength] = u & 1 ? '1' : '0';

    return str;
}
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	08 95       	ret

000019b0 <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    19b0:	cf 92       	push	r12
    19b2:	df 92       	push	r13
    19b4:	ef 92       	push	r14
    19b6:	ff 92       	push	r15
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	d6 2f       	mov	r29, r22
    19c2:	c7 2f       	mov	r28, r23
    19c4:	e6 2f       	mov	r30, r22
    19c6:	f7 2f       	mov	r31, r23
	int c_length=0;
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    19cc:	21 91       	ld	r18, Z+
    19ce:	2f 3f       	cpi	r18, 0xFF	; 255
    19d0:	89 f4       	brne	.+34     	; 0x19f4 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    19d2:	df 01       	movw	r26, r30
    19d4:	12 97       	sbiw	r26, 0x02	; 2
    19d6:	4c 91       	ld	r20, X
    19d8:	4f 3f       	cpi	r20, 0xFF	; 255
    19da:	61 f4       	brne	.+24     	; 0x19f4 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    19dc:	11 97       	sbiw	r26, 0x01	; 1
    19de:	4c 91       	ld	r20, X
    19e0:	4f 3f       	cpi	r20, 0xFF	; 255
    19e2:	41 f4       	brne	.+16     	; 0x19f4 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    19e4:	11 97       	sbiw	r26, 0x01	; 1
    19e6:	4c 91       	ld	r20, X
    19e8:	4f 3f       	cpi	r20, 0xFF	; 255
    19ea:	21 f4       	brne	.+8      	; 0x19f4 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    19ec:	11 97       	sbiw	r26, 0x01	; 1
    19ee:	2c 91       	ld	r18, X
    19f0:	2f 3f       	cpi	r18, 0xFF	; 255
    19f2:	11 f0       	breq	.+4      	; 0x19f8 <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	ea cf       	rjmp	.-44     	; 0x19cc <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    19f8:	8c 01       	movw	r16, r24
    19fa:	04 50       	subi	r16, 0x04	; 4
    19fc:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    19fe:	6c 01       	movw	r12, r24
    1a00:	2f ef       	ldi	r18, 0xFF	; 255
    1a02:	c2 1a       	sub	r12, r18
    1a04:	d2 0a       	sbc	r13, r18
    1a06:	76 01       	movw	r14, r12
    1a08:	ee 0c       	add	r14, r14
    1a0a:	ff 1c       	adc	r15, r15
    1a0c:	c7 01       	movw	r24, r14
    1a0e:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    1a12:	10 16       	cp	r1, r16
    1a14:	11 06       	cpc	r1, r17
    1a16:	74 f4       	brge	.+28     	; 0x1a34 <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	ed 2f       	mov	r30, r29
    1a1c:	fc 2f       	mov	r31, r28
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	41 91       	ld	r20, Z+
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	4d 93       	st	X+, r20
    1a28:	5d 93       	st	X+, r21
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	20 17       	cp	r18, r16
    1a30:	31 07       	cpc	r19, r17
    1a32:	bc f3       	brlt	.-18     	; 0x1a22 <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    1a34:	0c 15       	cp	r16, r12
    1a36:	1d 05       	cpc	r17, r13
    1a38:	7c f4       	brge	.+30     	; 0x1a58 <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    1a3a:	f7 01       	movw	r30, r14
    1a3c:	3a 97       	sbiw	r30, 0x0a	; 10
    1a3e:	e8 0f       	add	r30, r24
    1a40:	f9 1f       	adc	r31, r25
    1a42:	25 e0       	ldi	r18, 0x05	; 5
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4f ef       	ldi	r20, 0xFF	; 255
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	41 93       	st	Z+, r20
    1a4c:	51 93       	st	Z+, r21
    1a4e:	21 50       	subi	r18, 0x01	; 1
    1a50:	31 09       	sbc	r19, r1
    1a52:	21 15       	cp	r18, r1
    1a54:	31 05       	cpc	r19, r1
    1a56:	c9 f7       	brne	.-14     	; 0x1a4a <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	08 95       	ret

00001a6a <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	c4 56       	subi	r28, 0x64	; 100
    1a78:	d1 09       	sbc	r29, r1
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
	//char str[countdigits(dec)+1];
	char str[100];
	sprintf(str,"%d",dec);
    1a84:	7f 93       	push	r23
    1a86:	6f 93       	push	r22
    1a88:	80 ea       	ldi	r24, 0xA0	; 160
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9f 93       	push	r25
    1a8e:	8f 93       	push	r24
    1a90:	8e 01       	movw	r16, r28
    1a92:	0f 5f       	subi	r16, 0xFF	; 255
    1a94:	1f 4f       	sbci	r17, 0xFF	; 255
    1a96:	1f 93       	push	r17
    1a98:	0f 93       	push	r16
    1a9a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sprintf>
	return str;
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
}
    1aaa:	c8 01       	movw	r24, r16
    1aac:	cc 59       	subi	r28, 0x9C	; 156
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	08 95       	ret

00001ac4 <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    1ac4:	61 15       	cp	r22, r1
    1ac6:	71 05       	cpc	r23, r1
    1ac8:	59 f0       	breq	.+22     	; 0x1ae0 <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1aca:	8f e9       	ldi	r24, 0x9F	; 159
    1acc:	9f e0       	ldi	r25, 0x0F	; 15
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <_ZN4QEPU5Utils5delayEi+0xa>
    1ad2:	00 c0       	rjmp	.+0      	; 0x1ad4 <_ZN4QEPU5Utils5delayEi+0x10>
    1ad4:	00 00       	nop
    1ad6:	61 50       	subi	r22, 0x01	; 1
    1ad8:	71 09       	sbc	r23, r1
    1ada:	61 15       	cp	r22, r1
    1adc:	71 05       	cpc	r23, r1
    1ade:	a9 f7       	brne	.-22     	; 0x1aca <_ZN4QEPU5Utils5delayEi+0x6>
}
    1ae0:	08 95       	ret

00001ae2 <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    1ae2:	2f 92       	push	r2
    1ae4:	3f 92       	push	r3
    1ae6:	4f 92       	push	r4
    1ae8:	5f 92       	push	r5
    1aea:	6f 92       	push	r6
    1aec:	7f 92       	push	r7
    1aee:	8f 92       	push	r8
    1af0:	9f 92       	push	r9
    1af2:	af 92       	push	r10
    1af4:	bf 92       	push	r11
    1af6:	cf 92       	push	r12
    1af8:	df 92       	push	r13
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	ec 01       	movw	r28, r24
    1b08:	1b 01       	movw	r2, r22
    1b0a:	29 01       	movw	r4, r18
    1b0c:	3a 01       	movw	r6, r20
    1b0e:	47 01       	movw	r8, r14
    1b10:	58 01       	movw	r10, r16
	int * newthephi=(int*)malloc(sizeof(int)*2);
    1b12:	84 e0       	ldi	r24, 0x04	; 4
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 46 14 	call	0x288c	; 0x288c <malloc>
    1b1a:	6c 01       	movw	r12, r24
	
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    1b1c:	f1 01       	movw	r30, r2
    1b1e:	31 97       	sbiw	r30, 0x01	; 1
    1b20:	e6 31       	cpi	r30, 0x16	; 22
    1b22:	f1 05       	cpc	r31, r1
    1b24:	08 f0       	brcs	.+2      	; 0x1b28 <_ZN4QEPU7executeEill+0x46>
    1b26:	47 c1       	rjmp	.+654    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
    1b28:	e6 5d       	subi	r30, 0xD6	; 214
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	b7 01       	movw	r22, r14
    1b36:	ce 01       	movw	r24, r28
    1b38:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1b3c:	9c 01       	movw	r18, r24
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	b2 01       	movw	r22, r4
    1b44:	ce 01       	movw	r24, r28
    1b46:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	b7 01       	movw	r22, r14
    1b50:	ce 01       	movw	r24, r28
    1b52:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1b56:	9c 01       	movw	r18, r24
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	b2 01       	movw	r22, r4
    1b5e:	ce 01       	movw	r24, r28
    1b60:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
		break;
    1b64:	28 c1       	rjmp	.+592    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	48 1a       	sub	r4, r24
    1b6a:	51 08       	sbc	r5, r1
    1b6c:	5c 82       	std	Y+4, r5	; 0x04
    1b6e:	4b 82       	std	Y+3, r4	; 0x03
		break;
    1b70:	22 c1       	rjmp	.+580    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    1b72:	b2 01       	movw	r22, r4
    1b74:	ce 01       	movw	r24, r28
    1b76:	02 96       	adiw	r24, 0x02	; 2
    1b78:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN4QEPU5Utils5delayEi>
    1b7c:	1c c1       	rjmp	.+568    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    1b7e:	97 01       	movw	r18, r14
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	b2 01       	movw	r22, r4
    1b86:	ce 01       	movw	r24, r28
    1b88:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
		break;
    1b8c:	14 c1       	rjmp	.+552    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    1b8e:	97 01       	movw	r18, r14
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	b2 01       	movw	r22, r4
    1b96:	ce 01       	movw	r24, r28
    1b98:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
		break;
    1b9c:	0c c1       	rjmp	.+536    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	b2 01       	movw	r22, r4
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1baa:	8c 01       	movw	r16, r24
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	b2 01       	movw	r22, r4
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1bb8:	a8 01       	movw	r20, r16
    1bba:	bc 01       	movw	r22, r24
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	05 96       	adiw	r24, 0x05	; 5
    1bc0:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN5Gates1XEii>
    1bc4:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	20 81       	ld	r18, Z
    1bca:	31 81       	ldd	r19, Z+1	; 0x01
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	b2 01       	movw	r22, r4
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
    1bd8:	f6 01       	movw	r30, r12
    1bda:	22 81       	ldd	r18, Z+2	; 0x02
    1bdc:	33 81       	ldd	r19, Z+3	; 0x03
    1bde:	41 e0       	ldi	r20, 0x01	; 1
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	b2 01       	movw	r22, r4
    1be4:	ce 01       	movw	r24, r28
    1be6:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
		break;
    1bea:	e5 c0       	rjmp	.+458    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    1bec:	41 e0       	ldi	r20, 0x01	; 1
    1bee:	50 e0       	ldi	r21, 0x00	; 0
    1bf0:	b2 01       	movw	r22, r4
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1bf8:	8c 01       	movw	r16, r24
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	b2 01       	movw	r22, r4
    1c00:	ce 01       	movw	r24, r28
    1c02:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1c06:	a8 01       	movw	r20, r16
    1c08:	bc 01       	movw	r22, r24
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	05 96       	adiw	r24, 0x05	; 5
    1c0e:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN5Gates1YEii>
    1c12:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1c14:	fc 01       	movw	r30, r24
    1c16:	20 81       	ld	r18, Z
    1c18:	31 81       	ldd	r19, Z+1	; 0x01
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	50 e0       	ldi	r21, 0x00	; 0
    1c1e:	b2 01       	movw	r22, r4
    1c20:	ce 01       	movw	r24, r28
    1c22:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
    1c26:	f6 01       	movw	r30, r12
    1c28:	22 81       	ldd	r18, Z+2	; 0x02
    1c2a:	33 81       	ldd	r19, Z+3	; 0x03
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	b2 01       	movw	r22, r4
    1c32:	ce 01       	movw	r24, r28
    1c34:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
		break;
    1c38:	be c0       	rjmp	.+380    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	b2 01       	movw	r22, r4
    1c40:	ce 01       	movw	r24, r28
    1c42:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1c46:	8c 01       	movw	r16, r24
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	b2 01       	movw	r22, r4
    1c4e:	ce 01       	movw	r24, r28
    1c50:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1c54:	a8 01       	movw	r20, r16
    1c56:	bc 01       	movw	r22, r24
    1c58:	ce 01       	movw	r24, r28
    1c5a:	05 96       	adiw	r24, 0x05	; 5
    1c5c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_ZN5Gates1ZEii>
    1c60:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1c62:	fc 01       	movw	r30, r24
    1c64:	20 81       	ld	r18, Z
    1c66:	31 81       	ldd	r19, Z+1	; 0x01
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	b2 01       	movw	r22, r4
    1c6e:	ce 01       	movw	r24, r28
    1c70:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
    1c74:	f6 01       	movw	r30, r12
    1c76:	22 81       	ldd	r18, Z+2	; 0x02
    1c78:	33 81       	ldd	r19, Z+3	; 0x03
    1c7a:	41 e0       	ldi	r20, 0x01	; 1
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	b2 01       	movw	r22, r4
    1c80:	ce 01       	movw	r24, r28
    1c82:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
		break;
    1c86:	97 c0       	rjmp	.+302    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	b2 01       	movw	r22, r4
    1c8e:	ce 01       	movw	r24, r28
    1c90:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1c94:	8c 01       	movw	r16, r24
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	b2 01       	movw	r22, r4
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1ca2:	a8 01       	movw	r20, r16
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	05 96       	adiw	r24, 0x05	; 5
    1caa:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <_ZN5Gates1HEii>
    1cae:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	20 81       	ld	r18, Z
    1cb4:	31 81       	ldd	r19, Z+1	; 0x01
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	b2 01       	movw	r22, r4
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
    1cc2:	f6 01       	movw	r30, r12
    1cc4:	22 81       	ldd	r18, Z+2	; 0x02
    1cc6:	33 81       	ldd	r19, Z+3	; 0x03
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	b2 01       	movw	r22, r4
    1cce:	ce 01       	movw	r24, r28
    1cd0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
		break;
    1cd4:	70 c0       	rjmp	.+224    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	b2 01       	movw	r22, r4
    1cdc:	ce 01       	movw	r24, r28
    1cde:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1ce2:	8c 01       	movw	r16, r24
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	b2 01       	movw	r22, r4
    1cea:	ce 01       	movw	r24, r28
    1cec:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1cf0:	a8 01       	movw	r20, r16
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	05 96       	adiw	r24, 0x05	; 5
    1cf8:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN5Gates1SEii>
    1cfc:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1cfe:	fc 01       	movw	r30, r24
    1d00:	20 81       	ld	r18, Z
    1d02:	31 81       	ldd	r19, Z+1	; 0x01
    1d04:	40 e0       	ldi	r20, 0x00	; 0
    1d06:	50 e0       	ldi	r21, 0x00	; 0
    1d08:	b2 01       	movw	r22, r4
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
    1d10:	f6 01       	movw	r30, r12
    1d12:	22 81       	ldd	r18, Z+2	; 0x02
    1d14:	33 81       	ldd	r19, Z+3	; 0x03
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	b2 01       	movw	r22, r4
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
		break;
    1d22:	49 c0       	rjmp	.+146    	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	b2 01       	movw	r22, r4
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1d30:	8c 01       	movw	r16, r24
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	b2 01       	movw	r22, r4
    1d38:	ce 01       	movw	r24, r28
    1d3a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1d3e:	a8 01       	movw	r20, r16
    1d40:	bc 01       	movw	r22, r24
    1d42:	ce 01       	movw	r24, r28
    1d44:	05 96       	adiw	r24, 0x05	; 5
    1d46:	0e 94 33 0a 	call	0x1466	; 0x1466 <_ZN5Gates1TEii>
    1d4a:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	20 81       	ld	r18, Z
    1d50:	31 81       	ldd	r19, Z+1	; 0x01
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	b2 01       	movw	r22, r4
    1d58:	ce 01       	movw	r24, r28
    1d5a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
    1d5e:	f6 01       	movw	r30, r12
    1d60:	22 81       	ldd	r18, Z+2	; 0x02
    1d62:	33 81       	ldd	r19, Z+3	; 0x03
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	b2 01       	movw	r22, r4
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN4QEPU5writeEiii>
		break;
    1d70:	22 c0       	rjmp	.+68     	; 0x1db6 <_ZN4QEPU7executeEill+0x2d4>
		//2 QUBIT GATES -
		case 0x16: 
			gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    1d72:	41 e0       	ldi	r20, 0x01	; 1
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	b7 01       	movw	r22, r14
    1d78:	ce 01       	movw	r24, r28
    1d7a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1d7e:	8c 01       	movw	r16, r24
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	b4 01       	movw	r22, r8
    1d86:	ce 01       	movw	r24, r28
    1d88:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1d8c:	5c 01       	movw	r10, r24
    1d8e:	41 e0       	ldi	r20, 0x01	; 1
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	b2 01       	movw	r22, r4
    1d94:	ce 01       	movw	r24, r28
    1d96:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1d9a:	7c 01       	movw	r14, r24
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	b2 01       	movw	r22, r4
    1da2:	ce 01       	movw	r24, r28
    1da4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4QEPU4readEii>
    1da8:	95 01       	movw	r18, r10
    1daa:	a7 01       	movw	r20, r14
    1dac:	bc 01       	movw	r22, r24
    1dae:	ce 01       	movw	r24, r28
    1db0:	05 96       	adiw	r24, 0x05	; 5
    1db2:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZN5Gates3CNOEiiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    1db6:	c6 01       	movw	r24, r12
    1db8:	0e 94 de 14 	call	0x29bc	; 0x29bc <free>
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	ff 90       	pop	r15
    1dc6:	ef 90       	pop	r14
    1dc8:	df 90       	pop	r13
    1dca:	cf 90       	pop	r12
    1dcc:	bf 90       	pop	r11
    1dce:	af 90       	pop	r10
    1dd0:	9f 90       	pop	r9
    1dd2:	8f 90       	pop	r8
    1dd4:	7f 90       	pop	r7
    1dd6:	6f 90       	pop	r6
    1dd8:	5f 90       	pop	r5
    1dda:	4f 90       	pop	r4
    1ddc:	3f 90       	pop	r3
    1dde:	2f 90       	pop	r2
    1de0:	08 95       	ret

00001de2 <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    1de2:	2f 92       	push	r2
    1de4:	3f 92       	push	r3
    1de6:	4f 92       	push	r4
    1de8:	5f 92       	push	r5
    1dea:	6f 92       	push	r6
    1dec:	7f 92       	push	r7
    1dee:	8f 92       	push	r8
    1df0:	9f 92       	push	r9
    1df2:	af 92       	push	r10
    1df4:	bf 92       	push	r11
    1df6:	cf 92       	push	r12
    1df8:	df 92       	push	r13
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	c0 57       	subi	r28, 0x70	; 112
    1e0c:	d1 09       	sbc	r29, r1
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    1e1a:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN6EEProm7readallEv>
    1e1e:	bc 01       	movw	r22, r24
    1e20:	c3 01       	movw	r24, r6
    1e22:	02 96       	adiw	r24, 0x02	; 2
    1e24:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN4QEPU5Utils10str2intarrEPc>
    1e28:	fc 01       	movw	r30, r24
    1e2a:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    1e30:	40 85       	ldd	r20, Z+8	; 0x08
    1e32:	51 85       	ldd	r21, Z+9	; 0x09
    1e34:	4f 3f       	cpi	r20, 0xFF	; 255
    1e36:	51 05       	cpc	r21, r1
    1e38:	a1 f4       	brne	.+40     	; 0x1e62 <_ZN4QEPU3runEv+0x80>
    1e3a:	46 81       	ldd	r20, Z+6	; 0x06
    1e3c:	57 81       	ldd	r21, Z+7	; 0x07
    1e3e:	4f 3f       	cpi	r20, 0xFF	; 255
    1e40:	51 05       	cpc	r21, r1
    1e42:	79 f4       	brne	.+30     	; 0x1e62 <_ZN4QEPU3runEv+0x80>
    1e44:	44 81       	ldd	r20, Z+4	; 0x04
    1e46:	55 81       	ldd	r21, Z+5	; 0x05
    1e48:	4f 3f       	cpi	r20, 0xFF	; 255
    1e4a:	51 05       	cpc	r21, r1
    1e4c:	51 f4       	brne	.+20     	; 0x1e62 <_ZN4QEPU3runEv+0x80>
    1e4e:	42 81       	ldd	r20, Z+2	; 0x02
    1e50:	53 81       	ldd	r21, Z+3	; 0x03
    1e52:	4f 3f       	cpi	r20, 0xFF	; 255
    1e54:	51 05       	cpc	r21, r1
    1e56:	29 f4       	brne	.+10     	; 0x1e62 <_ZN4QEPU3runEv+0x80>
    1e58:	40 81       	ld	r20, Z
    1e5a:	51 81       	ldd	r21, Z+1	; 0x01
    1e5c:	4f 3f       	cpi	r20, 0xFF	; 255
    1e5e:	51 05       	cpc	r21, r1
    1e60:	21 f0       	breq	.+8      	; 0x1e6a <_ZN4QEPU3runEv+0x88>
    1e62:	2f 5f       	subi	r18, 0xFF	; 255
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	32 96       	adiw	r30, 0x02	; 2
    1e68:	e3 cf       	rjmp	.-58     	; 0x1e30 <_ZN4QEPU3runEv+0x4e>
    1e6a:	a9 01       	movw	r20, r18
    1e6c:	44 50       	subi	r20, 0x04	; 4
    1e6e:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1e70:	14 16       	cp	r1, r20
    1e72:	15 06       	cpc	r1, r21
    1e74:	0c f0       	brlt	.+2      	; 0x1e78 <_ZN4QEPU3runEv+0x96>
    1e76:	07 c1       	rjmp	.+526    	; 0x2086 <_ZN4QEPU3runEv+0x2a4>
    1e78:	fc 01       	movw	r30, r24
    1e7a:	25 50       	subi	r18, 0x05	; 5
    1e7c:	31 09       	sbc	r19, r1
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	41 2c       	mov	r4, r1
    1e88:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    1e8a:	c1 2c       	mov	r12, r1
    1e8c:	d1 2c       	mov	r13, r1
    1e8e:	0c c0       	rjmp	.+24     	; 0x1ea8 <_ZN4QEPU3runEv+0xc6>
    1e90:	69 30       	cpi	r22, 0x09	; 9
    1e92:	71 05       	cpc	r23, r1
    1e94:	34 f0       	brlt	.+12     	; 0x1ea2 <_ZN4QEPU3runEv+0xc0>
    1e96:	8f ef       	ldi	r24, 0xFF	; 255
    1e98:	48 1a       	sub	r4, r24
    1e9a:	58 0a       	sbc	r5, r24
    1e9c:	8c 2d       	mov	r24, r12
    1e9e:	9d 2d       	mov	r25, r13
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	4f 5f       	subi	r20, 0xFF	; 255
    1ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	6f 5f       	subi	r22, 0xFF	; 255
    1eac:	7f 4f       	sbci	r23, 0xFF	; 255
    1eae:	01 91       	ld	r16, Z+
    1eb0:	11 91       	ld	r17, Z+
    1eb2:	d2 01       	movw	r26, r4
    1eb4:	aa 0f       	add	r26, r26
    1eb6:	bb 1f       	adc	r27, r27
    1eb8:	aa 0f       	add	r26, r26
    1eba:	bb 1f       	adc	r27, r27
    1ebc:	aa 0f       	add	r26, r26
    1ebe:	bb 1f       	adc	r27, r27
    1ec0:	a4 0d       	add	r26, r4
    1ec2:	b5 1d       	adc	r27, r5
    1ec4:	8a 0f       	add	r24, r26
    1ec6:	9b 1f       	adc	r25, r27
    1ec8:	dc 01       	movw	r26, r24
    1eca:	aa 0f       	add	r26, r26
    1ecc:	bb 1f       	adc	r27, r27
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	8c 0f       	add	r24, r28
    1ed4:	9d 1f       	adc	r25, r29
    1ed6:	a8 0f       	add	r26, r24
    1ed8:	b9 1f       	adc	r27, r25
    1eda:	0d 93       	st	X+, r16
    1edc:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1ede:	42 17       	cp	r20, r18
    1ee0:	53 07       	cpc	r21, r19
    1ee2:	b1 f6       	brne	.-84     	; 0x1e90 <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1ee4:	f3 01       	movw	r30, r6
    1ee6:	14 82       	std	Z+4, r1	; 0x04
    1ee8:	13 82       	std	Z+3, r1	; 0x03
    1eea:	14 14       	cp	r1, r4
    1eec:	15 04       	cpc	r1, r5
    1eee:	0c f0       	brlt	.+2      	; 0x1ef2 <_ZN4QEPU3runEv+0x110>
    1ef0:	c6 c0       	rjmp	.+396    	; 0x207e <_ZN4QEPU3runEv+0x29c>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1ef6:	5e 01       	movw	r10, r28
    1ef8:	f2 e6       	ldi	r31, 0x62	; 98
    1efa:	af 0e       	add	r10, r31
    1efc:	b1 1c       	adc	r11, r1
    1efe:	6e 01       	movw	r12, r28
    1f00:	2b e5       	ldi	r18, 0x5B	; 91
    1f02:	c2 0e       	add	r12, r18
    1f04:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1f06:	0f 2e       	mov	r0, r31
    1f08:	fa eb       	ldi	r31, 0xBA	; 186
    1f0a:	8f 2e       	mov	r8, r31
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	9f 2e       	mov	r9, r31
    1f10:	f0 2d       	mov	r31, r0
    1f12:	ae 96       	adiw	r28, 0x2e	; 46
    1f14:	af ae       	std	Y+63, r10	; 0x3f
    1f16:	ae 97       	sbiw	r28, 0x2e	; 46
    1f18:	af 96       	adiw	r28, 0x2f	; 47
    1f1a:	bf ae       	std	Y+63, r11	; 0x3f
    1f1c:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1f1e:	e0 96       	adiw	r28, 0x30	; 48
    1f20:	cf ae       	std	Y+63, r12	; 0x3f
    1f22:	e0 97       	sbiw	r28, 0x30	; 48
    1f24:	e1 96       	adiw	r28, 0x31	; 49
    1f26:	df ae       	std	Y+63, r13	; 0x3f
    1f28:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1f2a:	f5 01       	movw	r30, r10
    1f2c:	10 82       	st	Z, r1
    1f2e:	11 82       	std	Z+1, r1	; 0x01
    1f30:	12 82       	std	Z+2, r1	; 0x02
    1f32:	13 82       	std	Z+3, r1	; 0x03
    1f34:	14 82       	std	Z+4, r1	; 0x04
    1f36:	15 82       	std	Z+5, r1	; 0x05
    1f38:	16 82       	std	Z+6, r1	; 0x06
    1f3a:	f6 01       	movw	r30, r12
    1f3c:	10 82       	st	Z, r1
    1f3e:	11 82       	std	Z+1, r1	; 0x01
    1f40:	12 82       	std	Z+2, r1	; 0x02
    1f42:	13 82       	std	Z+3, r1	; 0x03
    1f44:	14 82       	std	Z+4, r1	; 0x04
    1f46:	15 82       	std	Z+5, r1	; 0x05
    1f48:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	fc 01       	movw	r30, r24
    1f50:	ee 0f       	add	r30, r30
    1f52:	ff 1f       	adc	r31, r31
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	ee 0f       	add	r30, r30
    1f5a:	ff 1f       	adc	r31, r31
    1f5c:	8e 0f       	add	r24, r30
    1f5e:	9f 1f       	adc	r25, r31
    1f60:	e1 e0       	ldi	r30, 0x01	; 1
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	ec 0f       	add	r30, r28
    1f66:	fd 1f       	adc	r31, r29
    1f68:	e8 0f       	add	r30, r24
    1f6a:	f9 1f       	adc	r31, r25
    1f6c:	20 80       	ld	r2, Z
    1f6e:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1f70:	00 e0       	ldi	r16, 0x00	; 0
    1f72:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1f74:	0f 5f       	subi	r16, 0xFF	; 255
    1f76:	1f 4f       	sbci	r17, 0xFF	; 255
    1f78:	f3 01       	movw	r30, r6
    1f7a:	83 81       	ldd	r24, Z+3	; 0x03
    1f7c:	94 81       	ldd	r25, Z+4	; 0x04
    1f7e:	fc 01       	movw	r30, r24
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	ee 0f       	add	r30, r30
    1f8a:	ff 1f       	adc	r31, r31
    1f8c:	8e 0f       	add	r24, r30
    1f8e:	9f 1f       	adc	r25, r31
    1f90:	80 0f       	add	r24, r16
    1f92:	91 1f       	adc	r25, r17
    1f94:	fc 01       	movw	r30, r24
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	8c 0f       	add	r24, r28
    1fa0:	9d 1f       	adc	r25, r29
    1fa2:	e8 0f       	add	r30, r24
    1fa4:	f9 1f       	adc	r31, r25
    1fa6:	81 81       	ldd	r24, Z+1	; 0x01
    1fa8:	8f 93       	push	r24
    1faa:	80 81       	ld	r24, Z
    1fac:	8f 93       	push	r24
    1fae:	bf 92       	push	r11
    1fb0:	af 92       	push	r10
    1fb2:	9f 92       	push	r9
    1fb4:	8f 92       	push	r8
    1fb6:	bf 92       	push	r11
    1fb8:	af 92       	push	r10
    1fba:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1fbe:	f3 01       	movw	r30, r6
    1fc0:	83 81       	ldd	r24, Z+3	; 0x03
    1fc2:	94 81       	ldd	r25, Z+4	; 0x04
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	ee 0f       	add	r30, r30
    1fc8:	ff 1f       	adc	r31, r31
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	e8 0f       	add	r30, r24
    1fd4:	f9 1f       	adc	r31, r25
    1fd6:	e0 0f       	add	r30, r16
    1fd8:	f1 1f       	adc	r31, r17
    1fda:	34 96       	adiw	r30, 0x04	; 4
    1fdc:	ee 0f       	add	r30, r30
    1fde:	ff 1f       	adc	r31, r31
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	8c 0f       	add	r24, r28
    1fe6:	9d 1f       	adc	r25, r29
    1fe8:	e8 0f       	add	r30, r24
    1fea:	f9 1f       	adc	r31, r25
    1fec:	81 81       	ldd	r24, Z+1	; 0x01
    1fee:	8f 93       	push	r24
    1ff0:	80 81       	ld	r24, Z
    1ff2:	8f 93       	push	r24
    1ff4:	df 92       	push	r13
    1ff6:	cf 92       	push	r12
    1ff8:	9f 92       	push	r9
    1ffa:	8f 92       	push	r8
    1ffc:	df 92       	push	r13
    1ffe:	cf 92       	push	r12
    2000:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	04 30       	cpi	r16, 0x04	; 4
    2010:	11 05       	cpc	r17, r1
    2012:	09 f0       	breq	.+2      	; 0x2016 <_ZN4QEPU3runEv+0x234>
    2014:	af cf       	rjmp	.-162    	; 0x1f74 <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    2016:	40 e1       	ldi	r20, 0x10	; 16
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	e0 96       	adiw	r28, 0x30	; 48
    2020:	8f ad       	ldd	r24, Y+63	; 0x3f
    2022:	e0 97       	sbiw	r28, 0x30	; 48
    2024:	e1 96       	adiw	r28, 0x31	; 49
    2026:	9f ad       	ldd	r25, Y+63	; 0x3f
    2028:	e1 97       	sbiw	r28, 0x31	; 49
    202a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <strtol>
    202e:	ad 96       	adiw	r28, 0x2d	; 45
    2030:	6c af       	std	Y+60, r22	; 0x3c
    2032:	7d af       	std	Y+61, r23	; 0x3d
    2034:	8e af       	std	Y+62, r24	; 0x3e
    2036:	9f af       	std	Y+63, r25	; 0x3f
    2038:	ad 97       	sbiw	r28, 0x2d	; 45
    203a:	40 e1       	ldi	r20, 0x10	; 16
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	ae 96       	adiw	r28, 0x2e	; 46
    2044:	8f ad       	ldd	r24, Y+63	; 0x3f
    2046:	ae 97       	sbiw	r28, 0x2e	; 46
    2048:	af 96       	adiw	r28, 0x2f	; 47
    204a:	9f ad       	ldd	r25, Y+63	; 0x3f
    204c:	af 97       	sbiw	r28, 0x2f	; 47
    204e:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <strtol>
    2052:	9b 01       	movw	r18, r22
    2054:	ac 01       	movw	r20, r24
    2056:	ad 96       	adiw	r28, 0x2d	; 45
    2058:	ec ac       	ldd	r14, Y+60	; 0x3c
    205a:	fd ac       	ldd	r15, Y+61	; 0x3d
    205c:	0e ad       	ldd	r16, Y+62	; 0x3e
    205e:	1f ad       	ldd	r17, Y+63	; 0x3f
    2060:	ad 97       	sbiw	r28, 0x2d	; 45
    2062:	b1 01       	movw	r22, r2
    2064:	c3 01       	movw	r24, r6
    2066:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    206a:	f3 01       	movw	r30, r6
    206c:	83 81       	ldd	r24, Z+3	; 0x03
    206e:	94 81       	ldd	r25, Z+4	; 0x04
    2070:	01 96       	adiw	r24, 0x01	; 1
    2072:	94 83       	std	Z+4, r25	; 0x04
    2074:	83 83       	std	Z+3, r24	; 0x03
    2076:	84 15       	cp	r24, r4
    2078:	95 05       	cpc	r25, r5
    207a:	0c f4       	brge	.+2      	; 0x207e <_ZN4QEPU3runEv+0x29c>
    207c:	56 cf       	rjmp	.-340    	; 0x1f2a <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    207e:	c3 01       	movw	r24, r6
    2080:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN4QEPU7dumpmemEv>
    2084:	04 c0       	rjmp	.+8      	; 0x208e <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    2086:	f3 01       	movw	r30, r6
    2088:	14 82       	std	Z+4, r1	; 0x04
    208a:	13 82       	std	Z+3, r1	; 0x03
    208c:	f8 cf       	rjmp	.-16     	; 0x207e <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    208e:	c0 59       	subi	r28, 0x90	; 144
    2090:	df 4f       	sbci	r29, 0xFF	; 255
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	ef 90       	pop	r14
    20a8:	df 90       	pop	r13
    20aa:	cf 90       	pop	r12
    20ac:	bf 90       	pop	r11
    20ae:	af 90       	pop	r10
    20b0:	9f 90       	pop	r9
    20b2:	8f 90       	pop	r8
    20b4:	7f 90       	pop	r7
    20b6:	6f 90       	pop	r6
    20b8:	5f 90       	pop	r5
    20ba:	4f 90       	pop	r4
    20bc:	3f 90       	pop	r3
    20be:	2f 90       	pop	r2
    20c0:	08 95       	ret

000020c2 <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    20c2:	83 e3       	ldi	r24, 0x33	; 51
    20c4:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    20c6:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    20c8:	86 e8       	ldi	r24, 0x86	; 134
    20ca:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    20cc:	88 e1       	ldi	r24, 0x18	; 24
    20ce:	8a b9       	out	0x0a, r24	; 10
    20d0:	08 95       	ret

000020d2 <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    20d2:	5d 9b       	sbis	0x0b, 5	; 11
    20d4:	fe cf       	rjmp	.-4      	; 0x20d2 <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    20d6:	6c b9       	out	0x0c, r22	; 12
    20d8:	08 95       	ret

000020da <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	8c 01       	movw	r16, r24
    20e4:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    20e6:	68 81       	ld	r22, Y
    20e8:	66 23       	and	r22, r22
    20ea:	39 f0       	breq	.+14     	; 0x20fa <_ZN6Serial8writestrEPc+0x20>
    20ec:	21 96       	adiw	r28, 0x01	; 1
    20ee:	c8 01       	movw	r24, r16
    20f0:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN6Serial5writeEc>
    20f4:	69 91       	ld	r22, Y+
    20f6:	61 11       	cpse	r22, r1
    20f8:	fa cf       	rjmp	.-12     	; 0x20ee <_ZN6Serial8writestrEPc+0x14>
}
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	08 95       	ret

00002104 <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	ec 01       	movw	r28, r24
	writestr(data);
    210a:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    210e:	6d e0       	ldi	r22, 0x0D	; 13
    2110:	ce 01       	movw	r24, r28
    2112:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN6Serial5writeEc>
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	08 95       	ret

0000211c <acos>:
    211c:	9f 93       	push	r25
    211e:	9f 77       	andi	r25, 0x7F	; 127
    2120:	75 d1       	rcall	.+746    	; 0x240c <__fp_arccos>
    2122:	0f 90       	pop	r0
    2124:	00 20       	and	r0, r0
    2126:	3a f4       	brpl	.+14     	; 0x2136 <acos+0x1a>
    2128:	90 58       	subi	r25, 0x80	; 128
    212a:	a2 ea       	ldi	r26, 0xA2	; 162
    212c:	2a ed       	ldi	r18, 0xDA	; 218
    212e:	3f e0       	ldi	r19, 0x0F	; 15
    2130:	49 e4       	ldi	r20, 0x49	; 73
    2132:	50 e4       	ldi	r21, 0x40	; 64
    2134:	13 d0       	rcall	.+38     	; 0x215c <__addsf3x>
    2136:	0d c2       	rjmp	.+1050   	; 0x2552 <__fp_round>

00002138 <__subsf3>:
    2138:	50 58       	subi	r21, 0x80	; 128

0000213a <__addsf3>:
    213a:	bb 27       	eor	r27, r27
    213c:	aa 27       	eor	r26, r26
    213e:	0e d0       	rcall	.+28     	; 0x215c <__addsf3x>
    2140:	08 c2       	rjmp	.+1040   	; 0x2552 <__fp_round>
    2142:	d1 d1       	rcall	.+930    	; 0x24e6 <__fp_pscA>
    2144:	30 f0       	brcs	.+12     	; 0x2152 <__addsf3+0x18>
    2146:	d6 d1       	rcall	.+940    	; 0x24f4 <__fp_pscB>
    2148:	20 f0       	brcs	.+8      	; 0x2152 <__addsf3+0x18>
    214a:	31 f4       	brne	.+12     	; 0x2158 <__addsf3+0x1e>
    214c:	9f 3f       	cpi	r25, 0xFF	; 255
    214e:	11 f4       	brne	.+4      	; 0x2154 <__addsf3+0x1a>
    2150:	1e f4       	brtc	.+6      	; 0x2158 <__addsf3+0x1e>
    2152:	a1 c1       	rjmp	.+834    	; 0x2496 <__fp_nan>
    2154:	0e f4       	brtc	.+2      	; 0x2158 <__addsf3+0x1e>
    2156:	e0 95       	com	r30
    2158:	e7 fb       	bst	r30, 7
    215a:	97 c1       	rjmp	.+814    	; 0x248a <__fp_inf>

0000215c <__addsf3x>:
    215c:	e9 2f       	mov	r30, r25
    215e:	1b d2       	rcall	.+1078   	; 0x2596 <__fp_split3>
    2160:	80 f3       	brcs	.-32     	; 0x2142 <__addsf3+0x8>
    2162:	ba 17       	cp	r27, r26
    2164:	62 07       	cpc	r22, r18
    2166:	73 07       	cpc	r23, r19
    2168:	84 07       	cpc	r24, r20
    216a:	95 07       	cpc	r25, r21
    216c:	18 f0       	brcs	.+6      	; 0x2174 <__addsf3x+0x18>
    216e:	71 f4       	brne	.+28     	; 0x218c <__addsf3x+0x30>
    2170:	9e f5       	brtc	.+102    	; 0x21d8 <__addsf3x+0x7c>
    2172:	33 c2       	rjmp	.+1126   	; 0x25da <__fp_zero>
    2174:	0e f4       	brtc	.+2      	; 0x2178 <__addsf3x+0x1c>
    2176:	e0 95       	com	r30
    2178:	0b 2e       	mov	r0, r27
    217a:	ba 2f       	mov	r27, r26
    217c:	a0 2d       	mov	r26, r0
    217e:	0b 01       	movw	r0, r22
    2180:	b9 01       	movw	r22, r18
    2182:	90 01       	movw	r18, r0
    2184:	0c 01       	movw	r0, r24
    2186:	ca 01       	movw	r24, r20
    2188:	a0 01       	movw	r20, r0
    218a:	11 24       	eor	r1, r1
    218c:	ff 27       	eor	r31, r31
    218e:	59 1b       	sub	r21, r25
    2190:	99 f0       	breq	.+38     	; 0x21b8 <__addsf3x+0x5c>
    2192:	59 3f       	cpi	r21, 0xF9	; 249
    2194:	50 f4       	brcc	.+20     	; 0x21aa <__addsf3x+0x4e>
    2196:	50 3e       	cpi	r21, 0xE0	; 224
    2198:	68 f1       	brcs	.+90     	; 0x21f4 <__addsf3x+0x98>
    219a:	1a 16       	cp	r1, r26
    219c:	f0 40       	sbci	r31, 0x00	; 0
    219e:	a2 2f       	mov	r26, r18
    21a0:	23 2f       	mov	r18, r19
    21a2:	34 2f       	mov	r19, r20
    21a4:	44 27       	eor	r20, r20
    21a6:	58 5f       	subi	r21, 0xF8	; 248
    21a8:	f3 cf       	rjmp	.-26     	; 0x2190 <__addsf3x+0x34>
    21aa:	46 95       	lsr	r20
    21ac:	37 95       	ror	r19
    21ae:	27 95       	ror	r18
    21b0:	a7 95       	ror	r26
    21b2:	f0 40       	sbci	r31, 0x00	; 0
    21b4:	53 95       	inc	r21
    21b6:	c9 f7       	brne	.-14     	; 0x21aa <__addsf3x+0x4e>
    21b8:	7e f4       	brtc	.+30     	; 0x21d8 <__addsf3x+0x7c>
    21ba:	1f 16       	cp	r1, r31
    21bc:	ba 0b       	sbc	r27, r26
    21be:	62 0b       	sbc	r22, r18
    21c0:	73 0b       	sbc	r23, r19
    21c2:	84 0b       	sbc	r24, r20
    21c4:	ba f0       	brmi	.+46     	; 0x21f4 <__addsf3x+0x98>
    21c6:	91 50       	subi	r25, 0x01	; 1
    21c8:	a1 f0       	breq	.+40     	; 0x21f2 <__addsf3x+0x96>
    21ca:	ff 0f       	add	r31, r31
    21cc:	bb 1f       	adc	r27, r27
    21ce:	66 1f       	adc	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	88 1f       	adc	r24, r24
    21d4:	c2 f7       	brpl	.-16     	; 0x21c6 <__addsf3x+0x6a>
    21d6:	0e c0       	rjmp	.+28     	; 0x21f4 <__addsf3x+0x98>
    21d8:	ba 0f       	add	r27, r26
    21da:	62 1f       	adc	r22, r18
    21dc:	73 1f       	adc	r23, r19
    21de:	84 1f       	adc	r24, r20
    21e0:	48 f4       	brcc	.+18     	; 0x21f4 <__addsf3x+0x98>
    21e2:	87 95       	ror	r24
    21e4:	77 95       	ror	r23
    21e6:	67 95       	ror	r22
    21e8:	b7 95       	ror	r27
    21ea:	f7 95       	ror	r31
    21ec:	9e 3f       	cpi	r25, 0xFE	; 254
    21ee:	08 f0       	brcs	.+2      	; 0x21f2 <__addsf3x+0x96>
    21f0:	b3 cf       	rjmp	.-154    	; 0x2158 <__addsf3+0x1e>
    21f2:	93 95       	inc	r25
    21f4:	88 0f       	add	r24, r24
    21f6:	08 f0       	brcs	.+2      	; 0x21fa <__addsf3x+0x9e>
    21f8:	99 27       	eor	r25, r25
    21fa:	ee 0f       	add	r30, r30
    21fc:	97 95       	ror	r25
    21fe:	87 95       	ror	r24
    2200:	08 95       	ret

00002202 <atan>:
    2202:	df 93       	push	r29
    2204:	dd 27       	eor	r29, r29
    2206:	b9 2f       	mov	r27, r25
    2208:	bf 77       	andi	r27, 0x7F	; 127
    220a:	40 e8       	ldi	r20, 0x80	; 128
    220c:	5f e3       	ldi	r21, 0x3F	; 63
    220e:	16 16       	cp	r1, r22
    2210:	17 06       	cpc	r1, r23
    2212:	48 07       	cpc	r20, r24
    2214:	5b 07       	cpc	r21, r27
    2216:	10 f4       	brcc	.+4      	; 0x221c <atan+0x1a>
    2218:	d9 2f       	mov	r29, r25
    221a:	ea d1       	rcall	.+980    	; 0x25f0 <inverse>
    221c:	9f 93       	push	r25
    221e:	8f 93       	push	r24
    2220:	7f 93       	push	r23
    2222:	6f 93       	push	r22
    2224:	dc d2       	rcall	.+1464   	; 0x27de <square>
    2226:	e0 e8       	ldi	r30, 0x80	; 128
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	38 d1       	rcall	.+624    	; 0x249c <__fp_powser>
    222c:	92 d1       	rcall	.+804    	; 0x2552 <__fp_round>
    222e:	2f 91       	pop	r18
    2230:	3f 91       	pop	r19
    2232:	4f 91       	pop	r20
    2234:	5f 91       	pop	r21
    2236:	34 d2       	rcall	.+1128   	; 0x26a0 <__mulsf3x>
    2238:	dd 23       	and	r29, r29
    223a:	49 f0       	breq	.+18     	; 0x224e <atan+0x4c>
    223c:	90 58       	subi	r25, 0x80	; 128
    223e:	a2 ea       	ldi	r26, 0xA2	; 162
    2240:	2a ed       	ldi	r18, 0xDA	; 218
    2242:	3f e0       	ldi	r19, 0x0F	; 15
    2244:	49 ec       	ldi	r20, 0xC9	; 201
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	d0 78       	andi	r29, 0x80	; 128
    224a:	5d 27       	eor	r21, r29
    224c:	87 df       	rcall	.-242    	; 0x215c <__addsf3x>
    224e:	df 91       	pop	r29
    2250:	80 c1       	rjmp	.+768    	; 0x2552 <__fp_round>

00002252 <__cmpsf2>:
    2252:	f7 d0       	rcall	.+494    	; 0x2442 <__fp_cmp>
    2254:	08 f4       	brcc	.+2      	; 0x2258 <__cmpsf2+0x6>
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	08 95       	ret

0000225a <cos>:
    225a:	54 d1       	rcall	.+680    	; 0x2504 <__fp_rempio2>
    225c:	e3 95       	inc	r30
    225e:	8a c1       	rjmp	.+788    	; 0x2574 <__fp_sinus>

00002260 <__divsf3>:
    2260:	0c d0       	rcall	.+24     	; 0x227a <__divsf3x>
    2262:	77 c1       	rjmp	.+750    	; 0x2552 <__fp_round>
    2264:	47 d1       	rcall	.+654    	; 0x24f4 <__fp_pscB>
    2266:	40 f0       	brcs	.+16     	; 0x2278 <__divsf3+0x18>
    2268:	3e d1       	rcall	.+636    	; 0x24e6 <__fp_pscA>
    226a:	30 f0       	brcs	.+12     	; 0x2278 <__divsf3+0x18>
    226c:	21 f4       	brne	.+8      	; 0x2276 <__divsf3+0x16>
    226e:	5f 3f       	cpi	r21, 0xFF	; 255
    2270:	19 f0       	breq	.+6      	; 0x2278 <__divsf3+0x18>
    2272:	0b c1       	rjmp	.+534    	; 0x248a <__fp_inf>
    2274:	51 11       	cpse	r21, r1
    2276:	b2 c1       	rjmp	.+868    	; 0x25dc <__fp_szero>
    2278:	0e c1       	rjmp	.+540    	; 0x2496 <__fp_nan>

0000227a <__divsf3x>:
    227a:	8d d1       	rcall	.+794    	; 0x2596 <__fp_split3>
    227c:	98 f3       	brcs	.-26     	; 0x2264 <__divsf3+0x4>

0000227e <__divsf3_pse>:
    227e:	99 23       	and	r25, r25
    2280:	c9 f3       	breq	.-14     	; 0x2274 <__divsf3+0x14>
    2282:	55 23       	and	r21, r21
    2284:	b1 f3       	breq	.-20     	; 0x2272 <__divsf3+0x12>
    2286:	95 1b       	sub	r25, r21
    2288:	55 0b       	sbc	r21, r21
    228a:	bb 27       	eor	r27, r27
    228c:	aa 27       	eor	r26, r26
    228e:	62 17       	cp	r22, r18
    2290:	73 07       	cpc	r23, r19
    2292:	84 07       	cpc	r24, r20
    2294:	38 f0       	brcs	.+14     	; 0x22a4 <__divsf3_pse+0x26>
    2296:	9f 5f       	subi	r25, 0xFF	; 255
    2298:	5f 4f       	sbci	r21, 0xFF	; 255
    229a:	22 0f       	add	r18, r18
    229c:	33 1f       	adc	r19, r19
    229e:	44 1f       	adc	r20, r20
    22a0:	aa 1f       	adc	r26, r26
    22a2:	a9 f3       	breq	.-22     	; 0x228e <__divsf3_pse+0x10>
    22a4:	33 d0       	rcall	.+102    	; 0x230c <__divsf3_pse+0x8e>
    22a6:	0e 2e       	mov	r0, r30
    22a8:	3a f0       	brmi	.+14     	; 0x22b8 <__divsf3_pse+0x3a>
    22aa:	e0 e8       	ldi	r30, 0x80	; 128
    22ac:	30 d0       	rcall	.+96     	; 0x230e <__divsf3_pse+0x90>
    22ae:	91 50       	subi	r25, 0x01	; 1
    22b0:	50 40       	sbci	r21, 0x00	; 0
    22b2:	e6 95       	lsr	r30
    22b4:	00 1c       	adc	r0, r0
    22b6:	ca f7       	brpl	.-14     	; 0x22aa <__divsf3_pse+0x2c>
    22b8:	29 d0       	rcall	.+82     	; 0x230c <__divsf3_pse+0x8e>
    22ba:	fe 2f       	mov	r31, r30
    22bc:	27 d0       	rcall	.+78     	; 0x230c <__divsf3_pse+0x8e>
    22be:	66 0f       	add	r22, r22
    22c0:	77 1f       	adc	r23, r23
    22c2:	88 1f       	adc	r24, r24
    22c4:	bb 1f       	adc	r27, r27
    22c6:	26 17       	cp	r18, r22
    22c8:	37 07       	cpc	r19, r23
    22ca:	48 07       	cpc	r20, r24
    22cc:	ab 07       	cpc	r26, r27
    22ce:	b0 e8       	ldi	r27, 0x80	; 128
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <__divsf3_pse+0x56>
    22d2:	bb 0b       	sbc	r27, r27
    22d4:	80 2d       	mov	r24, r0
    22d6:	bf 01       	movw	r22, r30
    22d8:	ff 27       	eor	r31, r31
    22da:	93 58       	subi	r25, 0x83	; 131
    22dc:	5f 4f       	sbci	r21, 0xFF	; 255
    22de:	2a f0       	brmi	.+10     	; 0x22ea <__divsf3_pse+0x6c>
    22e0:	9e 3f       	cpi	r25, 0xFE	; 254
    22e2:	51 05       	cpc	r21, r1
    22e4:	68 f0       	brcs	.+26     	; 0x2300 <__divsf3_pse+0x82>
    22e6:	d1 c0       	rjmp	.+418    	; 0x248a <__fp_inf>
    22e8:	79 c1       	rjmp	.+754    	; 0x25dc <__fp_szero>
    22ea:	5f 3f       	cpi	r21, 0xFF	; 255
    22ec:	ec f3       	brlt	.-6      	; 0x22e8 <__divsf3_pse+0x6a>
    22ee:	98 3e       	cpi	r25, 0xE8	; 232
    22f0:	dc f3       	brlt	.-10     	; 0x22e8 <__divsf3_pse+0x6a>
    22f2:	86 95       	lsr	r24
    22f4:	77 95       	ror	r23
    22f6:	67 95       	ror	r22
    22f8:	b7 95       	ror	r27
    22fa:	f7 95       	ror	r31
    22fc:	9f 5f       	subi	r25, 0xFF	; 255
    22fe:	c9 f7       	brne	.-14     	; 0x22f2 <__divsf3_pse+0x74>
    2300:	88 0f       	add	r24, r24
    2302:	91 1d       	adc	r25, r1
    2304:	96 95       	lsr	r25
    2306:	87 95       	ror	r24
    2308:	97 f9       	bld	r25, 7
    230a:	08 95       	ret
    230c:	e1 e0       	ldi	r30, 0x01	; 1
    230e:	66 0f       	add	r22, r22
    2310:	77 1f       	adc	r23, r23
    2312:	88 1f       	adc	r24, r24
    2314:	bb 1f       	adc	r27, r27
    2316:	62 17       	cp	r22, r18
    2318:	73 07       	cpc	r23, r19
    231a:	84 07       	cpc	r24, r20
    231c:	ba 07       	cpc	r27, r26
    231e:	20 f0       	brcs	.+8      	; 0x2328 <__divsf3_pse+0xaa>
    2320:	62 1b       	sub	r22, r18
    2322:	73 0b       	sbc	r23, r19
    2324:	84 0b       	sbc	r24, r20
    2326:	ba 0b       	sbc	r27, r26
    2328:	ee 1f       	adc	r30, r30
    232a:	88 f7       	brcc	.-30     	; 0x230e <__divsf3_pse+0x90>
    232c:	e0 95       	com	r30
    232e:	08 95       	ret

00002330 <__fixsfsi>:
    2330:	04 d0       	rcall	.+8      	; 0x233a <__fixunssfsi>
    2332:	68 94       	set
    2334:	b1 11       	cpse	r27, r1
    2336:	52 c1       	rjmp	.+676    	; 0x25dc <__fp_szero>
    2338:	08 95       	ret

0000233a <__fixunssfsi>:
    233a:	35 d1       	rcall	.+618    	; 0x25a6 <__fp_splitA>
    233c:	88 f0       	brcs	.+34     	; 0x2360 <__fixunssfsi+0x26>
    233e:	9f 57       	subi	r25, 0x7F	; 127
    2340:	90 f0       	brcs	.+36     	; 0x2366 <__fixunssfsi+0x2c>
    2342:	b9 2f       	mov	r27, r25
    2344:	99 27       	eor	r25, r25
    2346:	b7 51       	subi	r27, 0x17	; 23
    2348:	a0 f0       	brcs	.+40     	; 0x2372 <__fixunssfsi+0x38>
    234a:	d1 f0       	breq	.+52     	; 0x2380 <__fixunssfsi+0x46>
    234c:	66 0f       	add	r22, r22
    234e:	77 1f       	adc	r23, r23
    2350:	88 1f       	adc	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	1a f0       	brmi	.+6      	; 0x235c <__fixunssfsi+0x22>
    2356:	ba 95       	dec	r27
    2358:	c9 f7       	brne	.-14     	; 0x234c <__fixunssfsi+0x12>
    235a:	12 c0       	rjmp	.+36     	; 0x2380 <__fixunssfsi+0x46>
    235c:	b1 30       	cpi	r27, 0x01	; 1
    235e:	81 f0       	breq	.+32     	; 0x2380 <__fixunssfsi+0x46>
    2360:	3c d1       	rcall	.+632    	; 0x25da <__fp_zero>
    2362:	b1 e0       	ldi	r27, 0x01	; 1
    2364:	08 95       	ret
    2366:	39 c1       	rjmp	.+626    	; 0x25da <__fp_zero>
    2368:	67 2f       	mov	r22, r23
    236a:	78 2f       	mov	r23, r24
    236c:	88 27       	eor	r24, r24
    236e:	b8 5f       	subi	r27, 0xF8	; 248
    2370:	39 f0       	breq	.+14     	; 0x2380 <__fixunssfsi+0x46>
    2372:	b9 3f       	cpi	r27, 0xF9	; 249
    2374:	cc f3       	brlt	.-14     	; 0x2368 <__fixunssfsi+0x2e>
    2376:	86 95       	lsr	r24
    2378:	77 95       	ror	r23
    237a:	67 95       	ror	r22
    237c:	b3 95       	inc	r27
    237e:	d9 f7       	brne	.-10     	; 0x2376 <__fixunssfsi+0x3c>
    2380:	3e f4       	brtc	.+14     	; 0x2390 <__fixunssfsi+0x56>
    2382:	90 95       	com	r25
    2384:	80 95       	com	r24
    2386:	70 95       	com	r23
    2388:	61 95       	neg	r22
    238a:	7f 4f       	sbci	r23, 0xFF	; 255
    238c:	8f 4f       	sbci	r24, 0xFF	; 255
    238e:	9f 4f       	sbci	r25, 0xFF	; 255
    2390:	08 95       	ret

00002392 <__floatunsisf>:
    2392:	e8 94       	clt
    2394:	09 c0       	rjmp	.+18     	; 0x23a8 <__floatsisf+0x12>

00002396 <__floatsisf>:
    2396:	97 fb       	bst	r25, 7
    2398:	3e f4       	brtc	.+14     	; 0x23a8 <__floatsisf+0x12>
    239a:	90 95       	com	r25
    239c:	80 95       	com	r24
    239e:	70 95       	com	r23
    23a0:	61 95       	neg	r22
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	8f 4f       	sbci	r24, 0xFF	; 255
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	99 23       	and	r25, r25
    23aa:	a9 f0       	breq	.+42     	; 0x23d6 <__floatsisf+0x40>
    23ac:	f9 2f       	mov	r31, r25
    23ae:	96 e9       	ldi	r25, 0x96	; 150
    23b0:	bb 27       	eor	r27, r27
    23b2:	93 95       	inc	r25
    23b4:	f6 95       	lsr	r31
    23b6:	87 95       	ror	r24
    23b8:	77 95       	ror	r23
    23ba:	67 95       	ror	r22
    23bc:	b7 95       	ror	r27
    23be:	f1 11       	cpse	r31, r1
    23c0:	f8 cf       	rjmp	.-16     	; 0x23b2 <__floatsisf+0x1c>
    23c2:	fa f4       	brpl	.+62     	; 0x2402 <__floatsisf+0x6c>
    23c4:	bb 0f       	add	r27, r27
    23c6:	11 f4       	brne	.+4      	; 0x23cc <__floatsisf+0x36>
    23c8:	60 ff       	sbrs	r22, 0
    23ca:	1b c0       	rjmp	.+54     	; 0x2402 <__floatsisf+0x6c>
    23cc:	6f 5f       	subi	r22, 0xFF	; 255
    23ce:	7f 4f       	sbci	r23, 0xFF	; 255
    23d0:	8f 4f       	sbci	r24, 0xFF	; 255
    23d2:	9f 4f       	sbci	r25, 0xFF	; 255
    23d4:	16 c0       	rjmp	.+44     	; 0x2402 <__floatsisf+0x6c>
    23d6:	88 23       	and	r24, r24
    23d8:	11 f0       	breq	.+4      	; 0x23de <__floatsisf+0x48>
    23da:	96 e9       	ldi	r25, 0x96	; 150
    23dc:	11 c0       	rjmp	.+34     	; 0x2400 <__floatsisf+0x6a>
    23de:	77 23       	and	r23, r23
    23e0:	21 f0       	breq	.+8      	; 0x23ea <__floatsisf+0x54>
    23e2:	9e e8       	ldi	r25, 0x8E	; 142
    23e4:	87 2f       	mov	r24, r23
    23e6:	76 2f       	mov	r23, r22
    23e8:	05 c0       	rjmp	.+10     	; 0x23f4 <__floatsisf+0x5e>
    23ea:	66 23       	and	r22, r22
    23ec:	71 f0       	breq	.+28     	; 0x240a <__floatsisf+0x74>
    23ee:	96 e8       	ldi	r25, 0x86	; 134
    23f0:	86 2f       	mov	r24, r22
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	2a f0       	brmi	.+10     	; 0x2402 <__floatsisf+0x6c>
    23f8:	9a 95       	dec	r25
    23fa:	66 0f       	add	r22, r22
    23fc:	77 1f       	adc	r23, r23
    23fe:	88 1f       	adc	r24, r24
    2400:	da f7       	brpl	.-10     	; 0x23f8 <__floatsisf+0x62>
    2402:	88 0f       	add	r24, r24
    2404:	96 95       	lsr	r25
    2406:	87 95       	ror	r24
    2408:	97 f9       	bld	r25, 7
    240a:	08 95       	ret

0000240c <__fp_arccos>:
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	1f 93       	push	r17
    2412:	0f 93       	push	r16
    2414:	8b 01       	movw	r16, r22
    2416:	ec 01       	movw	r28, r24
    2418:	ed ea       	ldi	r30, 0xAD	; 173
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	3f d0       	rcall	.+126    	; 0x249c <__fp_powser>
    241e:	99 d0       	rcall	.+306    	; 0x2552 <__fp_round>
    2420:	98 01       	movw	r18, r16
    2422:	ae 01       	movw	r20, r28
    2424:	8b 01       	movw	r16, r22
    2426:	ec 01       	movw	r28, r24
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	70 e0       	ldi	r23, 0x00	; 0
    242c:	80 e8       	ldi	r24, 0x80	; 128
    242e:	9f e3       	ldi	r25, 0x3F	; 63
    2430:	83 de       	rcall	.-762    	; 0x2138 <__subsf3>
    2432:	97 d1       	rcall	.+814    	; 0x2762 <sqrt>
    2434:	98 01       	movw	r18, r16
    2436:	ae 01       	movw	r20, r28
    2438:	0f 91       	pop	r16
    243a:	1f 91       	pop	r17
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	2f c1       	rjmp	.+606    	; 0x26a0 <__mulsf3x>

00002442 <__fp_cmp>:
    2442:	99 0f       	add	r25, r25
    2444:	00 08       	sbc	r0, r0
    2446:	55 0f       	add	r21, r21
    2448:	aa 0b       	sbc	r26, r26
    244a:	e0 e8       	ldi	r30, 0x80	; 128
    244c:	fe ef       	ldi	r31, 0xFE	; 254
    244e:	16 16       	cp	r1, r22
    2450:	17 06       	cpc	r1, r23
    2452:	e8 07       	cpc	r30, r24
    2454:	f9 07       	cpc	r31, r25
    2456:	c0 f0       	brcs	.+48     	; 0x2488 <__fp_cmp+0x46>
    2458:	12 16       	cp	r1, r18
    245a:	13 06       	cpc	r1, r19
    245c:	e4 07       	cpc	r30, r20
    245e:	f5 07       	cpc	r31, r21
    2460:	98 f0       	brcs	.+38     	; 0x2488 <__fp_cmp+0x46>
    2462:	62 1b       	sub	r22, r18
    2464:	73 0b       	sbc	r23, r19
    2466:	84 0b       	sbc	r24, r20
    2468:	95 0b       	sbc	r25, r21
    246a:	39 f4       	brne	.+14     	; 0x247a <__fp_cmp+0x38>
    246c:	0a 26       	eor	r0, r26
    246e:	61 f0       	breq	.+24     	; 0x2488 <__fp_cmp+0x46>
    2470:	23 2b       	or	r18, r19
    2472:	24 2b       	or	r18, r20
    2474:	25 2b       	or	r18, r21
    2476:	21 f4       	brne	.+8      	; 0x2480 <__fp_cmp+0x3e>
    2478:	08 95       	ret
    247a:	0a 26       	eor	r0, r26
    247c:	09 f4       	brne	.+2      	; 0x2480 <__fp_cmp+0x3e>
    247e:	a1 40       	sbci	r26, 0x01	; 1
    2480:	a6 95       	lsr	r26
    2482:	8f ef       	ldi	r24, 0xFF	; 255
    2484:	81 1d       	adc	r24, r1
    2486:	81 1d       	adc	r24, r1
    2488:	08 95       	ret

0000248a <__fp_inf>:
    248a:	97 f9       	bld	r25, 7
    248c:	9f 67       	ori	r25, 0x7F	; 127
    248e:	80 e8       	ldi	r24, 0x80	; 128
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	60 e0       	ldi	r22, 0x00	; 0
    2494:	08 95       	ret

00002496 <__fp_nan>:
    2496:	9f ef       	ldi	r25, 0xFF	; 255
    2498:	80 ec       	ldi	r24, 0xC0	; 192
    249a:	08 95       	ret

0000249c <__fp_powser>:
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	1f 93       	push	r17
    24a2:	0f 93       	push	r16
    24a4:	ff 92       	push	r15
    24a6:	ef 92       	push	r14
    24a8:	df 92       	push	r13
    24aa:	7b 01       	movw	r14, r22
    24ac:	8c 01       	movw	r16, r24
    24ae:	68 94       	set
    24b0:	05 c0       	rjmp	.+10     	; 0x24bc <__fp_powser+0x20>
    24b2:	da 2e       	mov	r13, r26
    24b4:	ef 01       	movw	r28, r30
    24b6:	f4 d0       	rcall	.+488    	; 0x26a0 <__mulsf3x>
    24b8:	fe 01       	movw	r30, r28
    24ba:	e8 94       	clt
    24bc:	a5 91       	lpm	r26, Z+
    24be:	25 91       	lpm	r18, Z+
    24c0:	35 91       	lpm	r19, Z+
    24c2:	45 91       	lpm	r20, Z+
    24c4:	55 91       	lpm	r21, Z+
    24c6:	ae f3       	brts	.-22     	; 0x24b2 <__fp_powser+0x16>
    24c8:	ef 01       	movw	r28, r30
    24ca:	48 de       	rcall	.-880    	; 0x215c <__addsf3x>
    24cc:	fe 01       	movw	r30, r28
    24ce:	97 01       	movw	r18, r14
    24d0:	a8 01       	movw	r20, r16
    24d2:	da 94       	dec	r13
    24d4:	79 f7       	brne	.-34     	; 0x24b4 <__fp_powser+0x18>
    24d6:	df 90       	pop	r13
    24d8:	ef 90       	pop	r14
    24da:	ff 90       	pop	r15
    24dc:	0f 91       	pop	r16
    24de:	1f 91       	pop	r17
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <__fp_pscA>:
    24e6:	00 24       	eor	r0, r0
    24e8:	0a 94       	dec	r0
    24ea:	16 16       	cp	r1, r22
    24ec:	17 06       	cpc	r1, r23
    24ee:	18 06       	cpc	r1, r24
    24f0:	09 06       	cpc	r0, r25
    24f2:	08 95       	ret

000024f4 <__fp_pscB>:
    24f4:	00 24       	eor	r0, r0
    24f6:	0a 94       	dec	r0
    24f8:	12 16       	cp	r1, r18
    24fa:	13 06       	cpc	r1, r19
    24fc:	14 06       	cpc	r1, r20
    24fe:	05 06       	cpc	r0, r21
    2500:	08 95       	ret
    2502:	c9 cf       	rjmp	.-110    	; 0x2496 <__fp_nan>

00002504 <__fp_rempio2>:
    2504:	50 d0       	rcall	.+160    	; 0x25a6 <__fp_splitA>
    2506:	e8 f3       	brcs	.-6      	; 0x2502 <__fp_pscB+0xe>
    2508:	e8 94       	clt
    250a:	e0 e0       	ldi	r30, 0x00	; 0
    250c:	bb 27       	eor	r27, r27
    250e:	9f 57       	subi	r25, 0x7F	; 127
    2510:	f0 f0       	brcs	.+60     	; 0x254e <__fp_rempio2+0x4a>
    2512:	2a ed       	ldi	r18, 0xDA	; 218
    2514:	3f e0       	ldi	r19, 0x0F	; 15
    2516:	49 ec       	ldi	r20, 0xC9	; 201
    2518:	06 c0       	rjmp	.+12     	; 0x2526 <__fp_rempio2+0x22>
    251a:	ee 0f       	add	r30, r30
    251c:	bb 0f       	add	r27, r27
    251e:	66 1f       	adc	r22, r22
    2520:	77 1f       	adc	r23, r23
    2522:	88 1f       	adc	r24, r24
    2524:	28 f0       	brcs	.+10     	; 0x2530 <__fp_rempio2+0x2c>
    2526:	b2 3a       	cpi	r27, 0xA2	; 162
    2528:	62 07       	cpc	r22, r18
    252a:	73 07       	cpc	r23, r19
    252c:	84 07       	cpc	r24, r20
    252e:	28 f0       	brcs	.+10     	; 0x253a <__fp_rempio2+0x36>
    2530:	b2 5a       	subi	r27, 0xA2	; 162
    2532:	62 0b       	sbc	r22, r18
    2534:	73 0b       	sbc	r23, r19
    2536:	84 0b       	sbc	r24, r20
    2538:	e3 95       	inc	r30
    253a:	9a 95       	dec	r25
    253c:	72 f7       	brpl	.-36     	; 0x251a <__fp_rempio2+0x16>
    253e:	80 38       	cpi	r24, 0x80	; 128
    2540:	30 f4       	brcc	.+12     	; 0x254e <__fp_rempio2+0x4a>
    2542:	9a 95       	dec	r25
    2544:	bb 0f       	add	r27, r27
    2546:	66 1f       	adc	r22, r22
    2548:	77 1f       	adc	r23, r23
    254a:	88 1f       	adc	r24, r24
    254c:	d2 f7       	brpl	.-12     	; 0x2542 <__fp_rempio2+0x3e>
    254e:	90 48       	sbci	r25, 0x80	; 128
    2550:	4b c1       	rjmp	.+662    	; 0x27e8 <__fp_mpack_finite>

00002552 <__fp_round>:
    2552:	09 2e       	mov	r0, r25
    2554:	03 94       	inc	r0
    2556:	00 0c       	add	r0, r0
    2558:	11 f4       	brne	.+4      	; 0x255e <__fp_round+0xc>
    255a:	88 23       	and	r24, r24
    255c:	52 f0       	brmi	.+20     	; 0x2572 <__fp_round+0x20>
    255e:	bb 0f       	add	r27, r27
    2560:	40 f4       	brcc	.+16     	; 0x2572 <__fp_round+0x20>
    2562:	bf 2b       	or	r27, r31
    2564:	11 f4       	brne	.+4      	; 0x256a <__fp_round+0x18>
    2566:	60 ff       	sbrs	r22, 0
    2568:	04 c0       	rjmp	.+8      	; 0x2572 <__fp_round+0x20>
    256a:	6f 5f       	subi	r22, 0xFF	; 255
    256c:	7f 4f       	sbci	r23, 0xFF	; 255
    256e:	8f 4f       	sbci	r24, 0xFF	; 255
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	08 95       	ret

00002574 <__fp_sinus>:
    2574:	ef 93       	push	r30
    2576:	e0 ff       	sbrs	r30, 0
    2578:	06 c0       	rjmp	.+12     	; 0x2586 <__fp_sinus+0x12>
    257a:	a2 ea       	ldi	r26, 0xA2	; 162
    257c:	2a ed       	ldi	r18, 0xDA	; 218
    257e:	3f e0       	ldi	r19, 0x0F	; 15
    2580:	49 ec       	ldi	r20, 0xC9	; 201
    2582:	5f eb       	ldi	r21, 0xBF	; 191
    2584:	eb dd       	rcall	.-1066   	; 0x215c <__addsf3x>
    2586:	e5 df       	rcall	.-54     	; 0x2552 <__fp_round>
    2588:	0f 90       	pop	r0
    258a:	03 94       	inc	r0
    258c:	01 fc       	sbrc	r0, 1
    258e:	90 58       	subi	r25, 0x80	; 128
    2590:	e5 ed       	ldi	r30, 0xD5	; 213
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	3c c1       	rjmp	.+632    	; 0x280e <__fp_powsodd>

00002596 <__fp_split3>:
    2596:	57 fd       	sbrc	r21, 7
    2598:	90 58       	subi	r25, 0x80	; 128
    259a:	44 0f       	add	r20, r20
    259c:	55 1f       	adc	r21, r21
    259e:	59 f0       	breq	.+22     	; 0x25b6 <__fp_splitA+0x10>
    25a0:	5f 3f       	cpi	r21, 0xFF	; 255
    25a2:	71 f0       	breq	.+28     	; 0x25c0 <__fp_splitA+0x1a>
    25a4:	47 95       	ror	r20

000025a6 <__fp_splitA>:
    25a6:	88 0f       	add	r24, r24
    25a8:	97 fb       	bst	r25, 7
    25aa:	99 1f       	adc	r25, r25
    25ac:	61 f0       	breq	.+24     	; 0x25c6 <__fp_splitA+0x20>
    25ae:	9f 3f       	cpi	r25, 0xFF	; 255
    25b0:	79 f0       	breq	.+30     	; 0x25d0 <__fp_splitA+0x2a>
    25b2:	87 95       	ror	r24
    25b4:	08 95       	ret
    25b6:	12 16       	cp	r1, r18
    25b8:	13 06       	cpc	r1, r19
    25ba:	14 06       	cpc	r1, r20
    25bc:	55 1f       	adc	r21, r21
    25be:	f2 cf       	rjmp	.-28     	; 0x25a4 <__fp_split3+0xe>
    25c0:	46 95       	lsr	r20
    25c2:	f1 df       	rcall	.-30     	; 0x25a6 <__fp_splitA>
    25c4:	08 c0       	rjmp	.+16     	; 0x25d6 <__fp_splitA+0x30>
    25c6:	16 16       	cp	r1, r22
    25c8:	17 06       	cpc	r1, r23
    25ca:	18 06       	cpc	r1, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	f1 cf       	rjmp	.-30     	; 0x25b2 <__fp_splitA+0xc>
    25d0:	86 95       	lsr	r24
    25d2:	71 05       	cpc	r23, r1
    25d4:	61 05       	cpc	r22, r1
    25d6:	08 94       	sec
    25d8:	08 95       	ret

000025da <__fp_zero>:
    25da:	e8 94       	clt

000025dc <__fp_szero>:
    25dc:	bb 27       	eor	r27, r27
    25de:	66 27       	eor	r22, r22
    25e0:	77 27       	eor	r23, r23
    25e2:	cb 01       	movw	r24, r22
    25e4:	97 f9       	bld	r25, 7
    25e6:	08 95       	ret

000025e8 <__gesf2>:
    25e8:	2c df       	rcall	.-424    	; 0x2442 <__fp_cmp>
    25ea:	08 f4       	brcc	.+2      	; 0x25ee <__gesf2+0x6>
    25ec:	8f ef       	ldi	r24, 0xFF	; 255
    25ee:	08 95       	ret

000025f0 <inverse>:
    25f0:	9b 01       	movw	r18, r22
    25f2:	ac 01       	movw	r20, r24
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	80 e8       	ldi	r24, 0x80	; 128
    25fa:	9f e3       	ldi	r25, 0x3F	; 63
    25fc:	31 ce       	rjmp	.-926    	; 0x2260 <__divsf3>
    25fe:	0e f0       	brts	.+2      	; 0x2602 <inverse+0x12>
    2600:	f1 c0       	rjmp	.+482    	; 0x27e4 <__fp_mpack>
    2602:	49 cf       	rjmp	.-366    	; 0x2496 <__fp_nan>
    2604:	68 94       	set
    2606:	41 cf       	rjmp	.-382    	; 0x248a <__fp_inf>

00002608 <log>:
    2608:	ce df       	rcall	.-100    	; 0x25a6 <__fp_splitA>
    260a:	c8 f3       	brcs	.-14     	; 0x25fe <inverse+0xe>
    260c:	99 23       	and	r25, r25
    260e:	d1 f3       	breq	.-12     	; 0x2604 <inverse+0x14>
    2610:	c6 f3       	brts	.-16     	; 0x2602 <inverse+0x12>
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	1f 93       	push	r17
    2618:	0f 93       	push	r16
    261a:	ff 92       	push	r15
    261c:	c9 2f       	mov	r28, r25
    261e:	dd 27       	eor	r29, r29
    2620:	88 23       	and	r24, r24
    2622:	2a f0       	brmi	.+10     	; 0x262e <log+0x26>
    2624:	21 97       	sbiw	r28, 0x01	; 1
    2626:	66 0f       	add	r22, r22
    2628:	77 1f       	adc	r23, r23
    262a:	88 1f       	adc	r24, r24
    262c:	da f7       	brpl	.-10     	; 0x2624 <log+0x1c>
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f eb       	ldi	r21, 0xBF	; 191
    2636:	9f e3       	ldi	r25, 0x3F	; 63
    2638:	88 39       	cpi	r24, 0x98	; 152
    263a:	20 f0       	brcs	.+8      	; 0x2644 <log+0x3c>
    263c:	80 3e       	cpi	r24, 0xE0	; 224
    263e:	30 f0       	brcs	.+12     	; 0x264c <log+0x44>
    2640:	21 96       	adiw	r28, 0x01	; 1
    2642:	8f 77       	andi	r24, 0x7F	; 127
    2644:	7a dd       	rcall	.-1292   	; 0x213a <__addsf3>
    2646:	e3 ef       	ldi	r30, 0xF3	; 243
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	03 c0       	rjmp	.+6      	; 0x2652 <log+0x4a>
    264c:	76 dd       	rcall	.-1300   	; 0x213a <__addsf3>
    264e:	e0 e2       	ldi	r30, 0x20	; 32
    2650:	f1 e0       	ldi	r31, 0x01	; 1
    2652:	24 df       	rcall	.-440    	; 0x249c <__fp_powser>
    2654:	8b 01       	movw	r16, r22
    2656:	be 01       	movw	r22, r28
    2658:	ec 01       	movw	r28, r24
    265a:	fb 2e       	mov	r15, r27
    265c:	6f 57       	subi	r22, 0x7F	; 127
    265e:	71 09       	sbc	r23, r1
    2660:	75 95       	asr	r23
    2662:	77 1f       	adc	r23, r23
    2664:	88 0b       	sbc	r24, r24
    2666:	99 0b       	sbc	r25, r25
    2668:	96 de       	rcall	.-724    	; 0x2396 <__floatsisf>
    266a:	28 e1       	ldi	r18, 0x18	; 24
    266c:	32 e7       	ldi	r19, 0x72	; 114
    266e:	41 e3       	ldi	r20, 0x31	; 49
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	16 d0       	rcall	.+44     	; 0x26a0 <__mulsf3x>
    2674:	af 2d       	mov	r26, r15
    2676:	98 01       	movw	r18, r16
    2678:	ae 01       	movw	r20, r28
    267a:	ff 90       	pop	r15
    267c:	0f 91       	pop	r16
    267e:	1f 91       	pop	r17
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	6b dd       	rcall	.-1322   	; 0x215c <__addsf3x>
    2686:	65 cf       	rjmp	.-310    	; 0x2552 <__fp_round>

00002688 <__mulsf3>:
    2688:	0b d0       	rcall	.+22     	; 0x26a0 <__mulsf3x>
    268a:	63 cf       	rjmp	.-314    	; 0x2552 <__fp_round>
    268c:	2c df       	rcall	.-424    	; 0x24e6 <__fp_pscA>
    268e:	28 f0       	brcs	.+10     	; 0x269a <__mulsf3+0x12>
    2690:	31 df       	rcall	.-414    	; 0x24f4 <__fp_pscB>
    2692:	18 f0       	brcs	.+6      	; 0x269a <__mulsf3+0x12>
    2694:	95 23       	and	r25, r21
    2696:	09 f0       	breq	.+2      	; 0x269a <__mulsf3+0x12>
    2698:	f8 ce       	rjmp	.-528    	; 0x248a <__fp_inf>
    269a:	fd ce       	rjmp	.-518    	; 0x2496 <__fp_nan>
    269c:	11 24       	eor	r1, r1
    269e:	9e cf       	rjmp	.-196    	; 0x25dc <__fp_szero>

000026a0 <__mulsf3x>:
    26a0:	7a df       	rcall	.-268    	; 0x2596 <__fp_split3>
    26a2:	a0 f3       	brcs	.-24     	; 0x268c <__mulsf3+0x4>

000026a4 <__mulsf3_pse>:
    26a4:	95 9f       	mul	r25, r21
    26a6:	d1 f3       	breq	.-12     	; 0x269c <__mulsf3+0x14>
    26a8:	95 0f       	add	r25, r21
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	55 1f       	adc	r21, r21
    26ae:	62 9f       	mul	r22, r18
    26b0:	f0 01       	movw	r30, r0
    26b2:	72 9f       	mul	r23, r18
    26b4:	bb 27       	eor	r27, r27
    26b6:	f0 0d       	add	r31, r0
    26b8:	b1 1d       	adc	r27, r1
    26ba:	63 9f       	mul	r22, r19
    26bc:	aa 27       	eor	r26, r26
    26be:	f0 0d       	add	r31, r0
    26c0:	b1 1d       	adc	r27, r1
    26c2:	aa 1f       	adc	r26, r26
    26c4:	64 9f       	mul	r22, r20
    26c6:	66 27       	eor	r22, r22
    26c8:	b0 0d       	add	r27, r0
    26ca:	a1 1d       	adc	r26, r1
    26cc:	66 1f       	adc	r22, r22
    26ce:	82 9f       	mul	r24, r18
    26d0:	22 27       	eor	r18, r18
    26d2:	b0 0d       	add	r27, r0
    26d4:	a1 1d       	adc	r26, r1
    26d6:	62 1f       	adc	r22, r18
    26d8:	73 9f       	mul	r23, r19
    26da:	b0 0d       	add	r27, r0
    26dc:	a1 1d       	adc	r26, r1
    26de:	62 1f       	adc	r22, r18
    26e0:	83 9f       	mul	r24, r19
    26e2:	a0 0d       	add	r26, r0
    26e4:	61 1d       	adc	r22, r1
    26e6:	22 1f       	adc	r18, r18
    26e8:	74 9f       	mul	r23, r20
    26ea:	33 27       	eor	r19, r19
    26ec:	a0 0d       	add	r26, r0
    26ee:	61 1d       	adc	r22, r1
    26f0:	23 1f       	adc	r18, r19
    26f2:	84 9f       	mul	r24, r20
    26f4:	60 0d       	add	r22, r0
    26f6:	21 1d       	adc	r18, r1
    26f8:	82 2f       	mov	r24, r18
    26fa:	76 2f       	mov	r23, r22
    26fc:	6a 2f       	mov	r22, r26
    26fe:	11 24       	eor	r1, r1
    2700:	9f 57       	subi	r25, 0x7F	; 127
    2702:	50 40       	sbci	r21, 0x00	; 0
    2704:	8a f0       	brmi	.+34     	; 0x2728 <__mulsf3_pse+0x84>
    2706:	e1 f0       	breq	.+56     	; 0x2740 <__mulsf3_pse+0x9c>
    2708:	88 23       	and	r24, r24
    270a:	4a f0       	brmi	.+18     	; 0x271e <__mulsf3_pse+0x7a>
    270c:	ee 0f       	add	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	bb 1f       	adc	r27, r27
    2712:	66 1f       	adc	r22, r22
    2714:	77 1f       	adc	r23, r23
    2716:	88 1f       	adc	r24, r24
    2718:	91 50       	subi	r25, 0x01	; 1
    271a:	50 40       	sbci	r21, 0x00	; 0
    271c:	a9 f7       	brne	.-22     	; 0x2708 <__mulsf3_pse+0x64>
    271e:	9e 3f       	cpi	r25, 0xFE	; 254
    2720:	51 05       	cpc	r21, r1
    2722:	70 f0       	brcs	.+28     	; 0x2740 <__mulsf3_pse+0x9c>
    2724:	b2 ce       	rjmp	.-668    	; 0x248a <__fp_inf>
    2726:	5a cf       	rjmp	.-332    	; 0x25dc <__fp_szero>
    2728:	5f 3f       	cpi	r21, 0xFF	; 255
    272a:	ec f3       	brlt	.-6      	; 0x2726 <__mulsf3_pse+0x82>
    272c:	98 3e       	cpi	r25, 0xE8	; 232
    272e:	dc f3       	brlt	.-10     	; 0x2726 <__mulsf3_pse+0x82>
    2730:	86 95       	lsr	r24
    2732:	77 95       	ror	r23
    2734:	67 95       	ror	r22
    2736:	b7 95       	ror	r27
    2738:	f7 95       	ror	r31
    273a:	e7 95       	ror	r30
    273c:	9f 5f       	subi	r25, 0xFF	; 255
    273e:	c1 f7       	brne	.-16     	; 0x2730 <__mulsf3_pse+0x8c>
    2740:	fe 2b       	or	r31, r30
    2742:	88 0f       	add	r24, r24
    2744:	91 1d       	adc	r25, r1
    2746:	96 95       	lsr	r25
    2748:	87 95       	ror	r24
    274a:	97 f9       	bld	r25, 7
    274c:	08 95       	ret

0000274e <sin>:
    274e:	9f 93       	push	r25
    2750:	d9 de       	rcall	.-590    	; 0x2504 <__fp_rempio2>
    2752:	0f 90       	pop	r0
    2754:	07 fc       	sbrc	r0, 7
    2756:	ee 5f       	subi	r30, 0xFE	; 254
    2758:	0d cf       	rjmp	.-486    	; 0x2574 <__fp_sinus>
    275a:	11 f4       	brne	.+4      	; 0x2760 <sin+0x12>
    275c:	0e f4       	brtc	.+2      	; 0x2760 <sin+0x12>
    275e:	9b ce       	rjmp	.-714    	; 0x2496 <__fp_nan>
    2760:	41 c0       	rjmp	.+130    	; 0x27e4 <__fp_mpack>

00002762 <sqrt>:
    2762:	21 df       	rcall	.-446    	; 0x25a6 <__fp_splitA>
    2764:	d0 f3       	brcs	.-12     	; 0x275a <sin+0xc>
    2766:	99 23       	and	r25, r25
    2768:	d9 f3       	breq	.-10     	; 0x2760 <sin+0x12>
    276a:	ce f3       	brts	.-14     	; 0x275e <sin+0x10>
    276c:	9f 57       	subi	r25, 0x7F	; 127
    276e:	55 0b       	sbc	r21, r21
    2770:	87 ff       	sbrs	r24, 7
    2772:	46 d0       	rcall	.+140    	; 0x2800 <__fp_norm2>
    2774:	00 24       	eor	r0, r0
    2776:	a0 e6       	ldi	r26, 0x60	; 96
    2778:	40 ea       	ldi	r20, 0xA0	; 160
    277a:	90 01       	movw	r18, r0
    277c:	80 58       	subi	r24, 0x80	; 128
    277e:	56 95       	lsr	r21
    2780:	97 95       	ror	r25
    2782:	28 f4       	brcc	.+10     	; 0x278e <sqrt+0x2c>
    2784:	80 5c       	subi	r24, 0xC0	; 192
    2786:	66 0f       	add	r22, r22
    2788:	77 1f       	adc	r23, r23
    278a:	88 1f       	adc	r24, r24
    278c:	20 f0       	brcs	.+8      	; 0x2796 <sqrt+0x34>
    278e:	26 17       	cp	r18, r22
    2790:	37 07       	cpc	r19, r23
    2792:	48 07       	cpc	r20, r24
    2794:	30 f4       	brcc	.+12     	; 0x27a2 <sqrt+0x40>
    2796:	62 1b       	sub	r22, r18
    2798:	73 0b       	sbc	r23, r19
    279a:	84 0b       	sbc	r24, r20
    279c:	20 29       	or	r18, r0
    279e:	31 29       	or	r19, r1
    27a0:	4a 2b       	or	r20, r26
    27a2:	a6 95       	lsr	r26
    27a4:	17 94       	ror	r1
    27a6:	07 94       	ror	r0
    27a8:	20 25       	eor	r18, r0
    27aa:	31 25       	eor	r19, r1
    27ac:	4a 27       	eor	r20, r26
    27ae:	58 f7       	brcc	.-42     	; 0x2786 <sqrt+0x24>
    27b0:	66 0f       	add	r22, r22
    27b2:	77 1f       	adc	r23, r23
    27b4:	88 1f       	adc	r24, r24
    27b6:	20 f0       	brcs	.+8      	; 0x27c0 <sqrt+0x5e>
    27b8:	26 17       	cp	r18, r22
    27ba:	37 07       	cpc	r19, r23
    27bc:	48 07       	cpc	r20, r24
    27be:	30 f4       	brcc	.+12     	; 0x27cc <sqrt+0x6a>
    27c0:	62 0b       	sbc	r22, r18
    27c2:	73 0b       	sbc	r23, r19
    27c4:	84 0b       	sbc	r24, r20
    27c6:	20 0d       	add	r18, r0
    27c8:	31 1d       	adc	r19, r1
    27ca:	41 1d       	adc	r20, r1
    27cc:	a0 95       	com	r26
    27ce:	81 f7       	brne	.-32     	; 0x27b0 <sqrt+0x4e>
    27d0:	b9 01       	movw	r22, r18
    27d2:	84 2f       	mov	r24, r20
    27d4:	91 58       	subi	r25, 0x81	; 129
    27d6:	88 0f       	add	r24, r24
    27d8:	96 95       	lsr	r25
    27da:	87 95       	ror	r24
    27dc:	08 95       	ret

000027de <square>:
    27de:	9b 01       	movw	r18, r22
    27e0:	ac 01       	movw	r20, r24
    27e2:	52 cf       	rjmp	.-348    	; 0x2688 <__mulsf3>

000027e4 <__fp_mpack>:
    27e4:	9f 3f       	cpi	r25, 0xFF	; 255
    27e6:	31 f0       	breq	.+12     	; 0x27f4 <__fp_mpack_finite+0xc>

000027e8 <__fp_mpack_finite>:
    27e8:	91 50       	subi	r25, 0x01	; 1
    27ea:	20 f4       	brcc	.+8      	; 0x27f4 <__fp_mpack_finite+0xc>
    27ec:	87 95       	ror	r24
    27ee:	77 95       	ror	r23
    27f0:	67 95       	ror	r22
    27f2:	b7 95       	ror	r27
    27f4:	88 0f       	add	r24, r24
    27f6:	91 1d       	adc	r25, r1
    27f8:	96 95       	lsr	r25
    27fa:	87 95       	ror	r24
    27fc:	97 f9       	bld	r25, 7
    27fe:	08 95       	ret

00002800 <__fp_norm2>:
    2800:	91 50       	subi	r25, 0x01	; 1
    2802:	50 40       	sbci	r21, 0x00	; 0
    2804:	66 0f       	add	r22, r22
    2806:	77 1f       	adc	r23, r23
    2808:	88 1f       	adc	r24, r24
    280a:	d2 f7       	brpl	.-12     	; 0x2800 <__fp_norm2>
    280c:	08 95       	ret

0000280e <__fp_powsodd>:
    280e:	9f 93       	push	r25
    2810:	8f 93       	push	r24
    2812:	7f 93       	push	r23
    2814:	6f 93       	push	r22
    2816:	ff 93       	push	r31
    2818:	ef 93       	push	r30
    281a:	9b 01       	movw	r18, r22
    281c:	ac 01       	movw	r20, r24
    281e:	34 df       	rcall	.-408    	; 0x2688 <__mulsf3>
    2820:	ef 91       	pop	r30
    2822:	ff 91       	pop	r31
    2824:	3b de       	rcall	.-906    	; 0x249c <__fp_powser>
    2826:	2f 91       	pop	r18
    2828:	3f 91       	pop	r19
    282a:	4f 91       	pop	r20
    282c:	5f 91       	pop	r21
    282e:	2c cf       	rjmp	.-424    	; 0x2688 <__mulsf3>

00002830 <__divmodhi4>:
    2830:	97 fb       	bst	r25, 7
    2832:	07 2e       	mov	r0, r23
    2834:	16 f4       	brtc	.+4      	; 0x283a <__divmodhi4+0xa>
    2836:	00 94       	com	r0
    2838:	07 d0       	rcall	.+14     	; 0x2848 <__divmodhi4_neg1>
    283a:	77 fd       	sbrc	r23, 7
    283c:	09 d0       	rcall	.+18     	; 0x2850 <__divmodhi4_neg2>
    283e:	0e 94 32 14 	call	0x2864	; 0x2864 <__udivmodhi4>
    2842:	07 fc       	sbrc	r0, 7
    2844:	05 d0       	rcall	.+10     	; 0x2850 <__divmodhi4_neg2>
    2846:	3e f4       	brtc	.+14     	; 0x2856 <__divmodhi4_exit>

00002848 <__divmodhi4_neg1>:
    2848:	90 95       	com	r25
    284a:	81 95       	neg	r24
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	08 95       	ret

00002850 <__divmodhi4_neg2>:
    2850:	70 95       	com	r23
    2852:	61 95       	neg	r22
    2854:	7f 4f       	sbci	r23, 0xFF	; 255

00002856 <__divmodhi4_exit>:
    2856:	08 95       	ret

00002858 <__tablejump2__>:
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31

0000285c <__tablejump__>:
    285c:	05 90       	lpm	r0, Z+
    285e:	f4 91       	lpm	r31, Z
    2860:	e0 2d       	mov	r30, r0
    2862:	09 94       	ijmp

00002864 <__udivmodhi4>:
    2864:	aa 1b       	sub	r26, r26
    2866:	bb 1b       	sub	r27, r27
    2868:	51 e1       	ldi	r21, 0x11	; 17
    286a:	07 c0       	rjmp	.+14     	; 0x287a <__udivmodhi4_ep>

0000286c <__udivmodhi4_loop>:
    286c:	aa 1f       	adc	r26, r26
    286e:	bb 1f       	adc	r27, r27
    2870:	a6 17       	cp	r26, r22
    2872:	b7 07       	cpc	r27, r23
    2874:	10 f0       	brcs	.+4      	; 0x287a <__udivmodhi4_ep>
    2876:	a6 1b       	sub	r26, r22
    2878:	b7 0b       	sbc	r27, r23

0000287a <__udivmodhi4_ep>:
    287a:	88 1f       	adc	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	5a 95       	dec	r21
    2880:	a9 f7       	brne	.-22     	; 0x286c <__udivmodhi4_loop>
    2882:	80 95       	com	r24
    2884:	90 95       	com	r25
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	08 95       	ret

0000288c <malloc>:
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	82 30       	cpi	r24, 0x02	; 2
    2892:	91 05       	cpc	r25, r1
    2894:	10 f4       	brcc	.+4      	; 0x289a <malloc+0xe>
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	e0 91 c4 00 	lds	r30, 0x00C4
    289e:	f0 91 c5 00 	lds	r31, 0x00C5
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	a0 e0       	ldi	r26, 0x00	; 0
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	30 97       	sbiw	r30, 0x00	; 0
    28ac:	39 f1       	breq	.+78     	; 0x28fc <malloc+0x70>
    28ae:	40 81       	ld	r20, Z
    28b0:	51 81       	ldd	r21, Z+1	; 0x01
    28b2:	48 17       	cp	r20, r24
    28b4:	59 07       	cpc	r21, r25
    28b6:	b8 f0       	brcs	.+46     	; 0x28e6 <malloc+0x5a>
    28b8:	48 17       	cp	r20, r24
    28ba:	59 07       	cpc	r21, r25
    28bc:	71 f4       	brne	.+28     	; 0x28da <malloc+0x4e>
    28be:	82 81       	ldd	r24, Z+2	; 0x02
    28c0:	93 81       	ldd	r25, Z+3	; 0x03
    28c2:	10 97       	sbiw	r26, 0x00	; 0
    28c4:	29 f0       	breq	.+10     	; 0x28d0 <malloc+0x44>
    28c6:	13 96       	adiw	r26, 0x03	; 3
    28c8:	9c 93       	st	X, r25
    28ca:	8e 93       	st	-X, r24
    28cc:	12 97       	sbiw	r26, 0x02	; 2
    28ce:	2c c0       	rjmp	.+88     	; 0x2928 <malloc+0x9c>
    28d0:	90 93 c5 00 	sts	0x00C5, r25
    28d4:	80 93 c4 00 	sts	0x00C4, r24
    28d8:	27 c0       	rjmp	.+78     	; 0x2928 <malloc+0x9c>
    28da:	21 15       	cp	r18, r1
    28dc:	31 05       	cpc	r19, r1
    28de:	31 f0       	breq	.+12     	; 0x28ec <malloc+0x60>
    28e0:	42 17       	cp	r20, r18
    28e2:	53 07       	cpc	r21, r19
    28e4:	18 f0       	brcs	.+6      	; 0x28ec <malloc+0x60>
    28e6:	a9 01       	movw	r20, r18
    28e8:	db 01       	movw	r26, r22
    28ea:	01 c0       	rjmp	.+2      	; 0x28ee <malloc+0x62>
    28ec:	ef 01       	movw	r28, r30
    28ee:	9a 01       	movw	r18, r20
    28f0:	bd 01       	movw	r22, r26
    28f2:	df 01       	movw	r26, r30
    28f4:	02 80       	ldd	r0, Z+2	; 0x02
    28f6:	f3 81       	ldd	r31, Z+3	; 0x03
    28f8:	e0 2d       	mov	r30, r0
    28fa:	d7 cf       	rjmp	.-82     	; 0x28aa <malloc+0x1e>
    28fc:	21 15       	cp	r18, r1
    28fe:	31 05       	cpc	r19, r1
    2900:	f9 f0       	breq	.+62     	; 0x2940 <malloc+0xb4>
    2902:	28 1b       	sub	r18, r24
    2904:	39 0b       	sbc	r19, r25
    2906:	24 30       	cpi	r18, 0x04	; 4
    2908:	31 05       	cpc	r19, r1
    290a:	80 f4       	brcc	.+32     	; 0x292c <malloc+0xa0>
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	9b 81       	ldd	r25, Y+3	; 0x03
    2910:	61 15       	cp	r22, r1
    2912:	71 05       	cpc	r23, r1
    2914:	21 f0       	breq	.+8      	; 0x291e <malloc+0x92>
    2916:	fb 01       	movw	r30, r22
    2918:	93 83       	std	Z+3, r25	; 0x03
    291a:	82 83       	std	Z+2, r24	; 0x02
    291c:	04 c0       	rjmp	.+8      	; 0x2926 <malloc+0x9a>
    291e:	90 93 c5 00 	sts	0x00C5, r25
    2922:	80 93 c4 00 	sts	0x00C4, r24
    2926:	fe 01       	movw	r30, r28
    2928:	32 96       	adiw	r30, 0x02	; 2
    292a:	44 c0       	rjmp	.+136    	; 0x29b4 <malloc+0x128>
    292c:	fe 01       	movw	r30, r28
    292e:	e2 0f       	add	r30, r18
    2930:	f3 1f       	adc	r31, r19
    2932:	81 93       	st	Z+, r24
    2934:	91 93       	st	Z+, r25
    2936:	22 50       	subi	r18, 0x02	; 2
    2938:	31 09       	sbc	r19, r1
    293a:	39 83       	std	Y+1, r19	; 0x01
    293c:	28 83       	st	Y, r18
    293e:	3a c0       	rjmp	.+116    	; 0x29b4 <malloc+0x128>
    2940:	20 91 c2 00 	lds	r18, 0x00C2
    2944:	30 91 c3 00 	lds	r19, 0x00C3
    2948:	23 2b       	or	r18, r19
    294a:	41 f4       	brne	.+16     	; 0x295c <malloc+0xd0>
    294c:	20 91 62 00 	lds	r18, 0x0062
    2950:	30 91 63 00 	lds	r19, 0x0063
    2954:	30 93 c3 00 	sts	0x00C3, r19
    2958:	20 93 c2 00 	sts	0x00C2, r18
    295c:	20 91 60 00 	lds	r18, 0x0060
    2960:	30 91 61 00 	lds	r19, 0x0061
    2964:	21 15       	cp	r18, r1
    2966:	31 05       	cpc	r19, r1
    2968:	41 f4       	brne	.+16     	; 0x297a <malloc+0xee>
    296a:	2d b7       	in	r18, 0x3d	; 61
    296c:	3e b7       	in	r19, 0x3e	; 62
    296e:	40 91 64 00 	lds	r20, 0x0064
    2972:	50 91 65 00 	lds	r21, 0x0065
    2976:	24 1b       	sub	r18, r20
    2978:	35 0b       	sbc	r19, r21
    297a:	e0 91 c2 00 	lds	r30, 0x00C2
    297e:	f0 91 c3 00 	lds	r31, 0x00C3
    2982:	e2 17       	cp	r30, r18
    2984:	f3 07       	cpc	r31, r19
    2986:	a0 f4       	brcc	.+40     	; 0x29b0 <malloc+0x124>
    2988:	2e 1b       	sub	r18, r30
    298a:	3f 0b       	sbc	r19, r31
    298c:	28 17       	cp	r18, r24
    298e:	39 07       	cpc	r19, r25
    2990:	78 f0       	brcs	.+30     	; 0x29b0 <malloc+0x124>
    2992:	ac 01       	movw	r20, r24
    2994:	4e 5f       	subi	r20, 0xFE	; 254
    2996:	5f 4f       	sbci	r21, 0xFF	; 255
    2998:	24 17       	cp	r18, r20
    299a:	35 07       	cpc	r19, r21
    299c:	48 f0       	brcs	.+18     	; 0x29b0 <malloc+0x124>
    299e:	4e 0f       	add	r20, r30
    29a0:	5f 1f       	adc	r21, r31
    29a2:	50 93 c3 00 	sts	0x00C3, r21
    29a6:	40 93 c2 00 	sts	0x00C2, r20
    29aa:	81 93       	st	Z+, r24
    29ac:	91 93       	st	Z+, r25
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <malloc+0x128>
    29b0:	e0 e0       	ldi	r30, 0x00	; 0
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	cf 01       	movw	r24, r30
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	08 95       	ret

000029bc <free>:
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <free+0xa>
    29c4:	87 c0       	rjmp	.+270    	; 0x2ad4 <free+0x118>
    29c6:	fc 01       	movw	r30, r24
    29c8:	32 97       	sbiw	r30, 0x02	; 2
    29ca:	13 82       	std	Z+3, r1	; 0x03
    29cc:	12 82       	std	Z+2, r1	; 0x02
    29ce:	c0 91 c4 00 	lds	r28, 0x00C4
    29d2:	d0 91 c5 00 	lds	r29, 0x00C5
    29d6:	20 97       	sbiw	r28, 0x00	; 0
    29d8:	81 f4       	brne	.+32     	; 0x29fa <free+0x3e>
    29da:	20 81       	ld	r18, Z
    29dc:	31 81       	ldd	r19, Z+1	; 0x01
    29de:	28 0f       	add	r18, r24
    29e0:	39 1f       	adc	r19, r25
    29e2:	80 91 c2 00 	lds	r24, 0x00C2
    29e6:	90 91 c3 00 	lds	r25, 0x00C3
    29ea:	82 17       	cp	r24, r18
    29ec:	93 07       	cpc	r25, r19
    29ee:	79 f5       	brne	.+94     	; 0x2a4e <free+0x92>
    29f0:	f0 93 c3 00 	sts	0x00C3, r31
    29f4:	e0 93 c2 00 	sts	0x00C2, r30
    29f8:	6d c0       	rjmp	.+218    	; 0x2ad4 <free+0x118>
    29fa:	de 01       	movw	r26, r28
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	ae 17       	cp	r26, r30
    2a02:	bf 07       	cpc	r27, r31
    2a04:	50 f4       	brcc	.+20     	; 0x2a1a <free+0x5e>
    2a06:	12 96       	adiw	r26, 0x02	; 2
    2a08:	4d 91       	ld	r20, X+
    2a0a:	5c 91       	ld	r21, X
    2a0c:	13 97       	sbiw	r26, 0x03	; 3
    2a0e:	9d 01       	movw	r18, r26
    2a10:	41 15       	cp	r20, r1
    2a12:	51 05       	cpc	r21, r1
    2a14:	09 f1       	breq	.+66     	; 0x2a58 <free+0x9c>
    2a16:	da 01       	movw	r26, r20
    2a18:	f3 cf       	rjmp	.-26     	; 0x2a00 <free+0x44>
    2a1a:	b3 83       	std	Z+3, r27	; 0x03
    2a1c:	a2 83       	std	Z+2, r26	; 0x02
    2a1e:	40 81       	ld	r20, Z
    2a20:	51 81       	ldd	r21, Z+1	; 0x01
    2a22:	84 0f       	add	r24, r20
    2a24:	95 1f       	adc	r25, r21
    2a26:	8a 17       	cp	r24, r26
    2a28:	9b 07       	cpc	r25, r27
    2a2a:	71 f4       	brne	.+28     	; 0x2a48 <free+0x8c>
    2a2c:	8d 91       	ld	r24, X+
    2a2e:	9c 91       	ld	r25, X
    2a30:	11 97       	sbiw	r26, 0x01	; 1
    2a32:	84 0f       	add	r24, r20
    2a34:	95 1f       	adc	r25, r21
    2a36:	02 96       	adiw	r24, 0x02	; 2
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	80 83       	st	Z, r24
    2a3c:	12 96       	adiw	r26, 0x02	; 2
    2a3e:	8d 91       	ld	r24, X+
    2a40:	9c 91       	ld	r25, X
    2a42:	13 97       	sbiw	r26, 0x03	; 3
    2a44:	93 83       	std	Z+3, r25	; 0x03
    2a46:	82 83       	std	Z+2, r24	; 0x02
    2a48:	21 15       	cp	r18, r1
    2a4a:	31 05       	cpc	r19, r1
    2a4c:	29 f4       	brne	.+10     	; 0x2a58 <free+0x9c>
    2a4e:	f0 93 c5 00 	sts	0x00C5, r31
    2a52:	e0 93 c4 00 	sts	0x00C4, r30
    2a56:	3e c0       	rjmp	.+124    	; 0x2ad4 <free+0x118>
    2a58:	d9 01       	movw	r26, r18
    2a5a:	13 96       	adiw	r26, 0x03	; 3
    2a5c:	fc 93       	st	X, r31
    2a5e:	ee 93       	st	-X, r30
    2a60:	12 97       	sbiw	r26, 0x02	; 2
    2a62:	4d 91       	ld	r20, X+
    2a64:	5d 91       	ld	r21, X+
    2a66:	a4 0f       	add	r26, r20
    2a68:	b5 1f       	adc	r27, r21
    2a6a:	ea 17       	cp	r30, r26
    2a6c:	fb 07       	cpc	r31, r27
    2a6e:	79 f4       	brne	.+30     	; 0x2a8e <free+0xd2>
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	84 0f       	add	r24, r20
    2a76:	95 1f       	adc	r25, r21
    2a78:	02 96       	adiw	r24, 0x02	; 2
    2a7a:	d9 01       	movw	r26, r18
    2a7c:	11 96       	adiw	r26, 0x01	; 1
    2a7e:	9c 93       	st	X, r25
    2a80:	8e 93       	st	-X, r24
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	13 96       	adiw	r26, 0x03	; 3
    2a88:	9c 93       	st	X, r25
    2a8a:	8e 93       	st	-X, r24
    2a8c:	12 97       	sbiw	r26, 0x02	; 2
    2a8e:	e0 e0       	ldi	r30, 0x00	; 0
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	9b 81       	ldd	r25, Y+3	; 0x03
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	19 f0       	breq	.+6      	; 0x2aa0 <free+0xe4>
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	ec 01       	movw	r28, r24
    2a9e:	f9 cf       	rjmp	.-14     	; 0x2a92 <free+0xd6>
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	02 96       	adiw	r24, 0x02	; 2
    2aa4:	28 81       	ld	r18, Y
    2aa6:	39 81       	ldd	r19, Y+1	; 0x01
    2aa8:	82 0f       	add	r24, r18
    2aaa:	93 1f       	adc	r25, r19
    2aac:	20 91 c2 00 	lds	r18, 0x00C2
    2ab0:	30 91 c3 00 	lds	r19, 0x00C3
    2ab4:	28 17       	cp	r18, r24
    2ab6:	39 07       	cpc	r19, r25
    2ab8:	69 f4       	brne	.+26     	; 0x2ad4 <free+0x118>
    2aba:	30 97       	sbiw	r30, 0x00	; 0
    2abc:	29 f4       	brne	.+10     	; 0x2ac8 <free+0x10c>
    2abe:	10 92 c5 00 	sts	0x00C5, r1
    2ac2:	10 92 c4 00 	sts	0x00C4, r1
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <free+0x110>
    2ac8:	13 82       	std	Z+3, r1	; 0x03
    2aca:	12 82       	std	Z+2, r1	; 0x02
    2acc:	d0 93 c3 00 	sts	0x00C3, r29
    2ad0:	c0 93 c2 00 	sts	0x00C2, r28
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	08 95       	ret

00002ada <do_rand>:
    2ada:	8f 92       	push	r8
    2adc:	9f 92       	push	r9
    2ade:	af 92       	push	r10
    2ae0:	bf 92       	push	r11
    2ae2:	cf 92       	push	r12
    2ae4:	df 92       	push	r13
    2ae6:	ef 92       	push	r14
    2ae8:	ff 92       	push	r15
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	ec 01       	movw	r28, r24
    2af0:	68 81       	ld	r22, Y
    2af2:	79 81       	ldd	r23, Y+1	; 0x01
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	9b 81       	ldd	r25, Y+3	; 0x03
    2af8:	61 15       	cp	r22, r1
    2afa:	71 05       	cpc	r23, r1
    2afc:	81 05       	cpc	r24, r1
    2afe:	91 05       	cpc	r25, r1
    2b00:	21 f4       	brne	.+8      	; 0x2b0a <do_rand+0x30>
    2b02:	64 e2       	ldi	r22, 0x24	; 36
    2b04:	79 ed       	ldi	r23, 0xD9	; 217
    2b06:	8b e5       	ldi	r24, 0x5B	; 91
    2b08:	97 e0       	ldi	r25, 0x07	; 7
    2b0a:	2d e1       	ldi	r18, 0x1D	; 29
    2b0c:	33 ef       	ldi	r19, 0xF3	; 243
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__divmodsi4>
    2b16:	49 01       	movw	r8, r18
    2b18:	5a 01       	movw	r10, r20
    2b1a:	9b 01       	movw	r18, r22
    2b1c:	ac 01       	movw	r20, r24
    2b1e:	a7 ea       	ldi	r26, 0xA7	; 167
    2b20:	b1 e4       	ldi	r27, 0x41	; 65
    2b22:	0e 94 1d 1a 	call	0x343a	; 0x343a <__muluhisi3>
    2b26:	6b 01       	movw	r12, r22
    2b28:	7c 01       	movw	r14, r24
    2b2a:	ac ee       	ldi	r26, 0xEC	; 236
    2b2c:	b4 ef       	ldi	r27, 0xF4	; 244
    2b2e:	a5 01       	movw	r20, r10
    2b30:	94 01       	movw	r18, r8
    2b32:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__mulohisi3>
    2b36:	c6 0e       	add	r12, r22
    2b38:	d7 1e       	adc	r13, r23
    2b3a:	e8 1e       	adc	r14, r24
    2b3c:	f9 1e       	adc	r15, r25
    2b3e:	f7 fe       	sbrs	r15, 7
    2b40:	06 c0       	rjmp	.+12     	; 0x2b4e <do_rand+0x74>
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	c8 1a       	sub	r12, r24
    2b46:	d1 08       	sbc	r13, r1
    2b48:	e1 08       	sbc	r14, r1
    2b4a:	80 e8       	ldi	r24, 0x80	; 128
    2b4c:	f8 0a       	sbc	r15, r24
    2b4e:	c8 82       	st	Y, r12
    2b50:	d9 82       	std	Y+1, r13	; 0x01
    2b52:	ea 82       	std	Y+2, r14	; 0x02
    2b54:	fb 82       	std	Y+3, r15	; 0x03
    2b56:	c6 01       	movw	r24, r12
    2b58:	9f 77       	andi	r25, 0x7F	; 127
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	cf 90       	pop	r12
    2b66:	bf 90       	pop	r11
    2b68:	af 90       	pop	r10
    2b6a:	9f 90       	pop	r9
    2b6c:	8f 90       	pop	r8
    2b6e:	08 95       	ret

00002b70 <rand_r>:
    2b70:	0e 94 6d 15 	call	0x2ada	; 0x2ada <do_rand>
    2b74:	08 95       	ret

00002b76 <rand>:
    2b76:	86 e6       	ldi	r24, 0x66	; 102
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0e 94 6d 15 	call	0x2ada	; 0x2ada <do_rand>
    2b7e:	08 95       	ret

00002b80 <srand>:
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	80 93 66 00 	sts	0x0066, r24
    2b88:	90 93 67 00 	sts	0x0067, r25
    2b8c:	a0 93 68 00 	sts	0x0068, r26
    2b90:	b0 93 69 00 	sts	0x0069, r27
    2b94:	08 95       	ret

00002b96 <strtol>:
    2b96:	2f 92       	push	r2
    2b98:	3f 92       	push	r3
    2b9a:	5f 92       	push	r5
    2b9c:	6f 92       	push	r6
    2b9e:	7f 92       	push	r7
    2ba0:	8f 92       	push	r8
    2ba2:	9f 92       	push	r9
    2ba4:	af 92       	push	r10
    2ba6:	bf 92       	push	r11
    2ba8:	cf 92       	push	r12
    2baa:	df 92       	push	r13
    2bac:	ef 92       	push	r14
    2bae:	ff 92       	push	r15
    2bb0:	0f 93       	push	r16
    2bb2:	1f 93       	push	r17
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	8b 01       	movw	r16, r22
    2bba:	ea 01       	movw	r28, r20
    2bbc:	61 15       	cp	r22, r1
    2bbe:	71 05       	cpc	r23, r1
    2bc0:	21 f0       	breq	.+8      	; 0x2bca <strtol+0x34>
    2bc2:	db 01       	movw	r26, r22
    2bc4:	8c 93       	st	X, r24
    2bc6:	11 96       	adiw	r26, 0x01	; 1
    2bc8:	9c 93       	st	X, r25
    2bca:	20 97       	sbiw	r28, 0x00	; 0
    2bcc:	39 f0       	breq	.+14     	; 0x2bdc <strtol+0x46>
    2bce:	9e 01       	movw	r18, r28
    2bd0:	22 50       	subi	r18, 0x02	; 2
    2bd2:	31 09       	sbc	r19, r1
    2bd4:	23 32       	cpi	r18, 0x23	; 35
    2bd6:	31 05       	cpc	r19, r1
    2bd8:	08 f0       	brcs	.+2      	; 0x2bdc <strtol+0x46>
    2bda:	fb c0       	rjmp	.+502    	; 0x2dd2 <strtol+0x23c>
    2bdc:	7c 01       	movw	r14, r24
    2bde:	67 01       	movw	r12, r14
    2be0:	bf ef       	ldi	r27, 0xFF	; 255
    2be2:	cb 1a       	sub	r12, r27
    2be4:	db 0a       	sbc	r13, r27
    2be6:	56 01       	movw	r10, r12
    2be8:	f7 01       	movw	r30, r14
    2bea:	60 80       	ld	r6, Z
    2bec:	86 2d       	mov	r24, r6
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <isspace>
    2bf4:	89 2b       	or	r24, r25
    2bf6:	11 f0       	breq	.+4      	; 0x2bfc <strtol+0x66>
    2bf8:	76 01       	movw	r14, r12
    2bfa:	f1 cf       	rjmp	.-30     	; 0x2bde <strtol+0x48>
    2bfc:	fd e2       	ldi	r31, 0x2D	; 45
    2bfe:	6f 12       	cpse	r6, r31
    2c00:	0a c0       	rjmp	.+20     	; 0x2c16 <strtol+0x80>
    2c02:	57 01       	movw	r10, r14
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	a8 0e       	add	r10, r24
    2c08:	b1 1c       	adc	r11, r1
    2c0a:	d7 01       	movw	r26, r14
    2c0c:	11 96       	adiw	r26, 0x01	; 1
    2c0e:	6c 90       	ld	r6, X
    2c10:	77 24       	eor	r7, r7
    2c12:	73 94       	inc	r7
    2c14:	0b c0       	rjmp	.+22     	; 0x2c2c <strtol+0x96>
    2c16:	bb e2       	ldi	r27, 0x2B	; 43
    2c18:	6b 12       	cpse	r6, r27
    2c1a:	07 c0       	rjmp	.+14     	; 0x2c2a <strtol+0x94>
    2c1c:	57 01       	movw	r10, r14
    2c1e:	e2 e0       	ldi	r30, 0x02	; 2
    2c20:	ae 0e       	add	r10, r30
    2c22:	b1 1c       	adc	r11, r1
    2c24:	d7 01       	movw	r26, r14
    2c26:	11 96       	adiw	r26, 0x01	; 1
    2c28:	6c 90       	ld	r6, X
    2c2a:	71 2c       	mov	r7, r1
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	8f 7e       	andi	r24, 0xEF	; 239
    2c30:	89 2b       	or	r24, r25
    2c32:	89 f4       	brne	.+34     	; 0x2c56 <strtol+0xc0>
    2c34:	b0 e3       	ldi	r27, 0x30	; 48
    2c36:	6b 12       	cpse	r6, r27
    2c38:	22 c0       	rjmp	.+68     	; 0x2c7e <strtol+0xe8>
    2c3a:	f5 01       	movw	r30, r10
    2c3c:	80 81       	ld	r24, Z
    2c3e:	8f 7d       	andi	r24, 0xDF	; 223
    2c40:	88 35       	cpi	r24, 0x58	; 88
    2c42:	41 f5       	brne	.+80     	; 0x2c94 <strtol+0xfe>
    2c44:	61 80       	ldd	r6, Z+1	; 0x01
    2c46:	f2 e0       	ldi	r31, 0x02	; 2
    2c48:	af 0e       	add	r10, r31
    2c4a:	b1 1c       	adc	r11, r1
    2c4c:	87 2d       	mov	r24, r7
    2c4e:	82 60       	ori	r24, 0x02	; 2
    2c50:	78 2e       	mov	r7, r24
    2c52:	c0 e1       	ldi	r28, 0x10	; 16
    2c54:	d0 e0       	ldi	r29, 0x00	; 0
    2c56:	c8 30       	cpi	r28, 0x08	; 8
    2c58:	d1 05       	cpc	r29, r1
    2c5a:	f1 f0       	breq	.+60     	; 0x2c98 <strtol+0x102>
    2c5c:	4c f4       	brge	.+18     	; 0x2c70 <strtol+0xda>
    2c5e:	c2 30       	cpi	r28, 0x02	; 2
    2c60:	d1 05       	cpc	r29, r1
    2c62:	11 f5       	brne	.+68     	; 0x2ca8 <strtol+0x112>
    2c64:	c1 2c       	mov	r12, r1
    2c66:	d1 2c       	mov	r13, r1
    2c68:	e1 2c       	mov	r14, r1
    2c6a:	b0 e4       	ldi	r27, 0x40	; 64
    2c6c:	fb 2e       	mov	r15, r27
    2c6e:	2f c0       	rjmp	.+94     	; 0x2cce <strtol+0x138>
    2c70:	ca 30       	cpi	r28, 0x0A	; 10
    2c72:	d1 05       	cpc	r29, r1
    2c74:	31 f0       	breq	.+12     	; 0x2c82 <strtol+0xec>
    2c76:	c0 31       	cpi	r28, 0x10	; 16
    2c78:	d1 05       	cpc	r29, r1
    2c7a:	21 f1       	breq	.+72     	; 0x2cc4 <strtol+0x12e>
    2c7c:	15 c0       	rjmp	.+42     	; 0x2ca8 <strtol+0x112>
    2c7e:	20 97       	sbiw	r28, 0x00	; 0
    2c80:	51 f7       	brne	.-44     	; 0x2c56 <strtol+0xc0>
    2c82:	ca e0       	ldi	r28, 0x0A	; 10
    2c84:	d0 e0       	ldi	r29, 0x00	; 0
    2c86:	ac ec       	ldi	r26, 0xCC	; 204
    2c88:	ca 2e       	mov	r12, r26
    2c8a:	dc 2c       	mov	r13, r12
    2c8c:	ec 2c       	mov	r14, r12
    2c8e:	ac e0       	ldi	r26, 0x0C	; 12
    2c90:	fa 2e       	mov	r15, r26
    2c92:	1d c0       	rjmp	.+58     	; 0x2cce <strtol+0x138>
    2c94:	20 97       	sbiw	r28, 0x00	; 0
    2c96:	f9 f6       	brne	.-66     	; 0x2c56 <strtol+0xc0>
    2c98:	c8 e0       	ldi	r28, 0x08	; 8
    2c9a:	d0 e0       	ldi	r29, 0x00	; 0
    2c9c:	c1 2c       	mov	r12, r1
    2c9e:	d1 2c       	mov	r13, r1
    2ca0:	e1 2c       	mov	r14, r1
    2ca2:	f0 e1       	ldi	r31, 0x10	; 16
    2ca4:	ff 2e       	mov	r15, r31
    2ca6:	13 c0       	rjmp	.+38     	; 0x2cce <strtol+0x138>
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	70 e0       	ldi	r23, 0x00	; 0
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e8       	ldi	r25, 0x80	; 128
    2cb0:	9e 01       	movw	r18, r28
    2cb2:	44 27       	eor	r20, r20
    2cb4:	37 fd       	sbrc	r19, 7
    2cb6:	40 95       	com	r20
    2cb8:	54 2f       	mov	r21, r20
    2cba:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__udivmodsi4>
    2cbe:	69 01       	movw	r12, r18
    2cc0:	7a 01       	movw	r14, r20
    2cc2:	05 c0       	rjmp	.+10     	; 0x2cce <strtol+0x138>
    2cc4:	c1 2c       	mov	r12, r1
    2cc6:	d1 2c       	mov	r13, r1
    2cc8:	e1 2c       	mov	r14, r1
    2cca:	e8 e0       	ldi	r30, 0x08	; 8
    2ccc:	fe 2e       	mov	r15, r30
    2cce:	f5 01       	movw	r30, r10
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	a9 01       	movw	r20, r18
    2cd8:	4e 01       	movw	r8, r28
    2cda:	aa 24       	eor	r10, r10
    2cdc:	97 fc       	sbrc	r9, 7
    2cde:	a0 94       	com	r10
    2ce0:	ba 2c       	mov	r11, r10
    2ce2:	1f 01       	movw	r2, r30
    2ce4:	70 ed       	ldi	r23, 0xD0	; 208
    2ce6:	57 2e       	mov	r5, r23
    2ce8:	56 0c       	add	r5, r6
    2cea:	a9 e0       	ldi	r26, 0x09	; 9
    2cec:	a5 15       	cp	r26, r5
    2cee:	70 f4       	brcc	.+28     	; 0x2d0c <strtol+0x176>
    2cf0:	8f eb       	ldi	r24, 0xBF	; 191
    2cf2:	86 0d       	add	r24, r6
    2cf4:	8a 31       	cpi	r24, 0x1A	; 26
    2cf6:	18 f4       	brcc	.+6      	; 0x2cfe <strtol+0x168>
    2cf8:	99 ec       	ldi	r25, 0xC9	; 201
    2cfa:	59 2e       	mov	r5, r25
    2cfc:	06 c0       	rjmp	.+12     	; 0x2d0a <strtol+0x174>
    2cfe:	8f e9       	ldi	r24, 0x9F	; 159
    2d00:	86 0d       	add	r24, r6
    2d02:	8a 31       	cpi	r24, 0x1A	; 26
    2d04:	30 f5       	brcc	.+76     	; 0x2d52 <strtol+0x1bc>
    2d06:	89 ea       	ldi	r24, 0xA9	; 169
    2d08:	58 2e       	mov	r5, r24
    2d0a:	56 0c       	add	r5, r6
    2d0c:	85 2d       	mov	r24, r5
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	8c 17       	cp	r24, r28
    2d12:	9d 07       	cpc	r25, r29
    2d14:	f4 f4       	brge	.+60     	; 0x2d52 <strtol+0x1bc>
    2d16:	67 fd       	sbrc	r22, 7
    2d18:	18 c0       	rjmp	.+48     	; 0x2d4a <strtol+0x1b4>
    2d1a:	c2 16       	cp	r12, r18
    2d1c:	d3 06       	cpc	r13, r19
    2d1e:	e4 06       	cpc	r14, r20
    2d20:	f5 06       	cpc	r15, r21
    2d22:	80 f0       	brcs	.+32     	; 0x2d44 <strtol+0x1ae>
    2d24:	c5 01       	movw	r24, r10
    2d26:	b4 01       	movw	r22, r8
    2d28:	0e 94 cc 19 	call	0x3398	; 0x3398 <__mulsi3>
    2d2c:	9b 01       	movw	r18, r22
    2d2e:	ac 01       	movw	r20, r24
    2d30:	25 0d       	add	r18, r5
    2d32:	31 1d       	adc	r19, r1
    2d34:	41 1d       	adc	r20, r1
    2d36:	51 1d       	adc	r21, r1
    2d38:	21 30       	cpi	r18, 0x01	; 1
    2d3a:	31 05       	cpc	r19, r1
    2d3c:	41 05       	cpc	r20, r1
    2d3e:	b0 e8       	ldi	r27, 0x80	; 128
    2d40:	5b 07       	cpc	r21, r27
    2d42:	10 f0       	brcs	.+4      	; 0x2d48 <strtol+0x1b2>
    2d44:	6f ef       	ldi	r22, 0xFF	; 255
    2d46:	01 c0       	rjmp	.+2      	; 0x2d4a <strtol+0x1b4>
    2d48:	61 e0       	ldi	r22, 0x01	; 1
    2d4a:	31 96       	adiw	r30, 0x01	; 1
    2d4c:	d1 01       	movw	r26, r2
    2d4e:	6c 90       	ld	r6, X
    2d50:	c8 cf       	rjmp	.-112    	; 0x2ce2 <strtol+0x14c>
    2d52:	87 2d       	mov	r24, r7
    2d54:	81 70       	andi	r24, 0x01	; 1
    2d56:	01 15       	cp	r16, r1
    2d58:	11 05       	cpc	r17, r1
    2d5a:	71 f0       	breq	.+28     	; 0x2d78 <strtol+0x1e2>
    2d5c:	66 23       	and	r22, r22
    2d5e:	29 f0       	breq	.+10     	; 0x2d6a <strtol+0x1d4>
    2d60:	31 97       	sbiw	r30, 0x01	; 1
    2d62:	d8 01       	movw	r26, r16
    2d64:	ed 93       	st	X+, r30
    2d66:	fc 93       	st	X, r31
    2d68:	07 c0       	rjmp	.+14     	; 0x2d78 <strtol+0x1e2>
    2d6a:	71 fe       	sbrs	r7, 1
    2d6c:	19 c0       	rjmp	.+50     	; 0x2da0 <strtol+0x20a>
    2d6e:	32 97       	sbiw	r30, 0x02	; 2
    2d70:	d8 01       	movw	r26, r16
    2d72:	ed 93       	st	X+, r30
    2d74:	fc 93       	st	X, r31
    2d76:	14 c0       	rjmp	.+40     	; 0x2da0 <strtol+0x20a>
    2d78:	67 ff       	sbrs	r22, 7
    2d7a:	12 c0       	rjmp	.+36     	; 0x2da0 <strtol+0x20a>
    2d7c:	88 23       	and	r24, r24
    2d7e:	29 f0       	breq	.+10     	; 0x2d8a <strtol+0x1f4>
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	50 e8       	ldi	r21, 0x80	; 128
    2d88:	04 c0       	rjmp	.+8      	; 0x2d92 <strtol+0x1fc>
    2d8a:	2f ef       	ldi	r18, 0xFF	; 255
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f ef       	ldi	r20, 0xFF	; 255
    2d90:	5f e7       	ldi	r21, 0x7F	; 127
    2d92:	82 e2       	ldi	r24, 0x22	; 34
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	90 93 c7 00 	sts	0x00C7, r25
    2d9a:	80 93 c6 00 	sts	0x00C6, r24
    2d9e:	16 c0       	rjmp	.+44     	; 0x2dcc <strtol+0x236>
    2da0:	88 23       	and	r24, r24
    2da2:	41 f0       	breq	.+16     	; 0x2db4 <strtol+0x21e>
    2da4:	50 95       	com	r21
    2da6:	40 95       	com	r20
    2da8:	30 95       	com	r19
    2daa:	21 95       	neg	r18
    2dac:	3f 4f       	sbci	r19, 0xFF	; 255
    2dae:	4f 4f       	sbci	r20, 0xFF	; 255
    2db0:	5f 4f       	sbci	r21, 0xFF	; 255
    2db2:	0c c0       	rjmp	.+24     	; 0x2dcc <strtol+0x236>
    2db4:	57 ff       	sbrs	r21, 7
    2db6:	0a c0       	rjmp	.+20     	; 0x2dcc <strtol+0x236>
    2db8:	82 e2       	ldi	r24, 0x22	; 34
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	90 93 c7 00 	sts	0x00C7, r25
    2dc0:	80 93 c6 00 	sts	0x00C6, r24
    2dc4:	2f ef       	ldi	r18, 0xFF	; 255
    2dc6:	3f ef       	ldi	r19, 0xFF	; 255
    2dc8:	4f ef       	ldi	r20, 0xFF	; 255
    2dca:	5f e7       	ldi	r21, 0x7F	; 127
    2dcc:	b9 01       	movw	r22, r18
    2dce:	ca 01       	movw	r24, r20
    2dd0:	04 c0       	rjmp	.+8      	; 0x2dda <strtol+0x244>
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	70 e0       	ldi	r23, 0x00	; 0
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	1f 91       	pop	r17
    2de0:	0f 91       	pop	r16
    2de2:	ff 90       	pop	r15
    2de4:	ef 90       	pop	r14
    2de6:	df 90       	pop	r13
    2de8:	cf 90       	pop	r12
    2dea:	bf 90       	pop	r11
    2dec:	af 90       	pop	r10
    2dee:	9f 90       	pop	r9
    2df0:	8f 90       	pop	r8
    2df2:	7f 90       	pop	r7
    2df4:	6f 90       	pop	r6
    2df6:	5f 90       	pop	r5
    2df8:	3f 90       	pop	r3
    2dfa:	2f 90       	pop	r2
    2dfc:	08 95       	ret

00002dfe <isspace>:
    2dfe:	91 11       	cpse	r25, r1
    2e00:	05 c2       	rjmp	.+1034   	; 0x320c <__ctype_isfalse>
    2e02:	80 32       	cpi	r24, 0x20	; 32
    2e04:	19 f0       	breq	.+6      	; 0x2e0c <isspace+0xe>
    2e06:	89 50       	subi	r24, 0x09	; 9
    2e08:	85 50       	subi	r24, 0x05	; 5
    2e0a:	d0 f7       	brcc	.-12     	; 0x2e00 <isspace+0x2>
    2e0c:	08 95       	ret

00002e0e <sprintf>:
    2e0e:	ae e0       	ldi	r26, 0x0E	; 14
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	ed e0       	ldi	r30, 0x0D	; 13
    2e14:	f7 e1       	ldi	r31, 0x17	; 23
    2e16:	0c 94 3e 1a 	jmp	0x347c	; 0x347c <__prologue_saves__+0x1c>
    2e1a:	0d 89       	ldd	r16, Y+21	; 0x15
    2e1c:	1e 89       	ldd	r17, Y+22	; 0x16
    2e1e:	86 e0       	ldi	r24, 0x06	; 6
    2e20:	8c 83       	std	Y+4, r24	; 0x04
    2e22:	1a 83       	std	Y+2, r17	; 0x02
    2e24:	09 83       	std	Y+1, r16	; 0x01
    2e26:	8f ef       	ldi	r24, 0xFF	; 255
    2e28:	9f e7       	ldi	r25, 0x7F	; 127
    2e2a:	9e 83       	std	Y+6, r25	; 0x06
    2e2c:	8d 83       	std	Y+5, r24	; 0x05
    2e2e:	ae 01       	movw	r20, r28
    2e30:	47 5e       	subi	r20, 0xE7	; 231
    2e32:	5f 4f       	sbci	r21, 0xFF	; 255
    2e34:	6f 89       	ldd	r22, Y+23	; 0x17
    2e36:	78 8d       	ldd	r23, Y+24	; 0x18
    2e38:	ce 01       	movw	r24, r28
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	0e 94 29 17 	call	0x2e52	; 0x2e52 <vfprintf>
    2e40:	ef 81       	ldd	r30, Y+7	; 0x07
    2e42:	f8 85       	ldd	r31, Y+8	; 0x08
    2e44:	e0 0f       	add	r30, r16
    2e46:	f1 1f       	adc	r31, r17
    2e48:	10 82       	st	Z, r1
    2e4a:	2e 96       	adiw	r28, 0x0e	; 14
    2e4c:	e4 e0       	ldi	r30, 0x04	; 4
    2e4e:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__epilogue_restores__+0x1c>

00002e52 <vfprintf>:
    2e52:	ac e0       	ldi	r26, 0x0C	; 12
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	ef e2       	ldi	r30, 0x2F	; 47
    2e58:	f7 e1       	ldi	r31, 0x17	; 23
    2e5a:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__prologue_saves__>
    2e5e:	7c 01       	movw	r14, r24
    2e60:	6b 01       	movw	r12, r22
    2e62:	8a 01       	movw	r16, r20
    2e64:	fc 01       	movw	r30, r24
    2e66:	17 82       	std	Z+7, r1	; 0x07
    2e68:	16 82       	std	Z+6, r1	; 0x06
    2e6a:	83 81       	ldd	r24, Z+3	; 0x03
    2e6c:	81 ff       	sbrs	r24, 1
    2e6e:	bd c1       	rjmp	.+890    	; 0x31ea <vfprintf+0x398>
    2e70:	ce 01       	movw	r24, r28
    2e72:	01 96       	adiw	r24, 0x01	; 1
    2e74:	4c 01       	movw	r8, r24
    2e76:	f7 01       	movw	r30, r14
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	f6 01       	movw	r30, r12
    2e7c:	93 fd       	sbrc	r25, 3
    2e7e:	85 91       	lpm	r24, Z+
    2e80:	93 ff       	sbrs	r25, 3
    2e82:	81 91       	ld	r24, Z+
    2e84:	6f 01       	movw	r12, r30
    2e86:	88 23       	and	r24, r24
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <vfprintf+0x3a>
    2e8a:	ab c1       	rjmp	.+854    	; 0x31e2 <vfprintf+0x390>
    2e8c:	85 32       	cpi	r24, 0x25	; 37
    2e8e:	39 f4       	brne	.+14     	; 0x2e9e <vfprintf+0x4c>
    2e90:	93 fd       	sbrc	r25, 3
    2e92:	85 91       	lpm	r24, Z+
    2e94:	93 ff       	sbrs	r25, 3
    2e96:	81 91       	ld	r24, Z+
    2e98:	6f 01       	movw	r12, r30
    2e9a:	85 32       	cpi	r24, 0x25	; 37
    2e9c:	29 f4       	brne	.+10     	; 0x2ea8 <vfprintf+0x56>
    2e9e:	b7 01       	movw	r22, r14
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 94 1f 19 	call	0x323e	; 0x323e <fputc>
    2ea6:	e7 cf       	rjmp	.-50     	; 0x2e76 <vfprintf+0x24>
    2ea8:	51 2c       	mov	r5, r1
    2eaa:	31 2c       	mov	r3, r1
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	20 32       	cpi	r18, 0x20	; 32
    2eb0:	a0 f4       	brcc	.+40     	; 0x2eda <vfprintf+0x88>
    2eb2:	8b 32       	cpi	r24, 0x2B	; 43
    2eb4:	69 f0       	breq	.+26     	; 0x2ed0 <vfprintf+0x7e>
    2eb6:	30 f4       	brcc	.+12     	; 0x2ec4 <vfprintf+0x72>
    2eb8:	80 32       	cpi	r24, 0x20	; 32
    2eba:	59 f0       	breq	.+22     	; 0x2ed2 <vfprintf+0x80>
    2ebc:	83 32       	cpi	r24, 0x23	; 35
    2ebe:	69 f4       	brne	.+26     	; 0x2eda <vfprintf+0x88>
    2ec0:	20 61       	ori	r18, 0x10	; 16
    2ec2:	2c c0       	rjmp	.+88     	; 0x2f1c <vfprintf+0xca>
    2ec4:	8d 32       	cpi	r24, 0x2D	; 45
    2ec6:	39 f0       	breq	.+14     	; 0x2ed6 <vfprintf+0x84>
    2ec8:	80 33       	cpi	r24, 0x30	; 48
    2eca:	39 f4       	brne	.+14     	; 0x2eda <vfprintf+0x88>
    2ecc:	21 60       	ori	r18, 0x01	; 1
    2ece:	26 c0       	rjmp	.+76     	; 0x2f1c <vfprintf+0xca>
    2ed0:	22 60       	ori	r18, 0x02	; 2
    2ed2:	24 60       	ori	r18, 0x04	; 4
    2ed4:	23 c0       	rjmp	.+70     	; 0x2f1c <vfprintf+0xca>
    2ed6:	28 60       	ori	r18, 0x08	; 8
    2ed8:	21 c0       	rjmp	.+66     	; 0x2f1c <vfprintf+0xca>
    2eda:	27 fd       	sbrc	r18, 7
    2edc:	27 c0       	rjmp	.+78     	; 0x2f2c <vfprintf+0xda>
    2ede:	30 ed       	ldi	r19, 0xD0	; 208
    2ee0:	38 0f       	add	r19, r24
    2ee2:	3a 30       	cpi	r19, 0x0A	; 10
    2ee4:	78 f4       	brcc	.+30     	; 0x2f04 <vfprintf+0xb2>
    2ee6:	26 ff       	sbrs	r18, 6
    2ee8:	06 c0       	rjmp	.+12     	; 0x2ef6 <vfprintf+0xa4>
    2eea:	fa e0       	ldi	r31, 0x0A	; 10
    2eec:	5f 9e       	mul	r5, r31
    2eee:	30 0d       	add	r19, r0
    2ef0:	11 24       	eor	r1, r1
    2ef2:	53 2e       	mov	r5, r19
    2ef4:	13 c0       	rjmp	.+38     	; 0x2f1c <vfprintf+0xca>
    2ef6:	8a e0       	ldi	r24, 0x0A	; 10
    2ef8:	38 9e       	mul	r3, r24
    2efa:	30 0d       	add	r19, r0
    2efc:	11 24       	eor	r1, r1
    2efe:	33 2e       	mov	r3, r19
    2f00:	20 62       	ori	r18, 0x20	; 32
    2f02:	0c c0       	rjmp	.+24     	; 0x2f1c <vfprintf+0xca>
    2f04:	8e 32       	cpi	r24, 0x2E	; 46
    2f06:	21 f4       	brne	.+8      	; 0x2f10 <vfprintf+0xbe>
    2f08:	26 fd       	sbrc	r18, 6
    2f0a:	6b c1       	rjmp	.+726    	; 0x31e2 <vfprintf+0x390>
    2f0c:	20 64       	ori	r18, 0x40	; 64
    2f0e:	06 c0       	rjmp	.+12     	; 0x2f1c <vfprintf+0xca>
    2f10:	8c 36       	cpi	r24, 0x6C	; 108
    2f12:	11 f4       	brne	.+4      	; 0x2f18 <vfprintf+0xc6>
    2f14:	20 68       	ori	r18, 0x80	; 128
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <vfprintf+0xca>
    2f18:	88 36       	cpi	r24, 0x68	; 104
    2f1a:	41 f4       	brne	.+16     	; 0x2f2c <vfprintf+0xda>
    2f1c:	f6 01       	movw	r30, r12
    2f1e:	93 fd       	sbrc	r25, 3
    2f20:	85 91       	lpm	r24, Z+
    2f22:	93 ff       	sbrs	r25, 3
    2f24:	81 91       	ld	r24, Z+
    2f26:	6f 01       	movw	r12, r30
    2f28:	81 11       	cpse	r24, r1
    2f2a:	c1 cf       	rjmp	.-126    	; 0x2eae <vfprintf+0x5c>
    2f2c:	98 2f       	mov	r25, r24
    2f2e:	9f 7d       	andi	r25, 0xDF	; 223
    2f30:	95 54       	subi	r25, 0x45	; 69
    2f32:	93 30       	cpi	r25, 0x03	; 3
    2f34:	28 f4       	brcc	.+10     	; 0x2f40 <vfprintf+0xee>
    2f36:	0c 5f       	subi	r16, 0xFC	; 252
    2f38:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3a:	ff e3       	ldi	r31, 0x3F	; 63
    2f3c:	f9 83       	std	Y+1, r31	; 0x01
    2f3e:	0d c0       	rjmp	.+26     	; 0x2f5a <vfprintf+0x108>
    2f40:	83 36       	cpi	r24, 0x63	; 99
    2f42:	31 f0       	breq	.+12     	; 0x2f50 <vfprintf+0xfe>
    2f44:	83 37       	cpi	r24, 0x73	; 115
    2f46:	71 f0       	breq	.+28     	; 0x2f64 <vfprintf+0x112>
    2f48:	83 35       	cpi	r24, 0x53	; 83
    2f4a:	09 f0       	breq	.+2      	; 0x2f4e <vfprintf+0xfc>
    2f4c:	5b c0       	rjmp	.+182    	; 0x3004 <vfprintf+0x1b2>
    2f4e:	22 c0       	rjmp	.+68     	; 0x2f94 <vfprintf+0x142>
    2f50:	f8 01       	movw	r30, r16
    2f52:	80 81       	ld	r24, Z
    2f54:	89 83       	std	Y+1, r24	; 0x01
    2f56:	0e 5f       	subi	r16, 0xFE	; 254
    2f58:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5a:	44 24       	eor	r4, r4
    2f5c:	43 94       	inc	r4
    2f5e:	51 2c       	mov	r5, r1
    2f60:	54 01       	movw	r10, r8
    2f62:	15 c0       	rjmp	.+42     	; 0x2f8e <vfprintf+0x13c>
    2f64:	38 01       	movw	r6, r16
    2f66:	f2 e0       	ldi	r31, 0x02	; 2
    2f68:	6f 0e       	add	r6, r31
    2f6a:	71 1c       	adc	r7, r1
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	a0 80       	ld	r10, Z
    2f70:	b1 80       	ldd	r11, Z+1	; 0x01
    2f72:	26 ff       	sbrs	r18, 6
    2f74:	03 c0       	rjmp	.+6      	; 0x2f7c <vfprintf+0x12a>
    2f76:	65 2d       	mov	r22, r5
    2f78:	70 e0       	ldi	r23, 0x00	; 0
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <vfprintf+0x12e>
    2f7c:	6f ef       	ldi	r22, 0xFF	; 255
    2f7e:	7f ef       	ldi	r23, 0xFF	; 255
    2f80:	c5 01       	movw	r24, r10
    2f82:	2c 87       	std	Y+12, r18	; 0x0c
    2f84:	0e 94 14 19 	call	0x3228	; 0x3228 <strnlen>
    2f88:	2c 01       	movw	r4, r24
    2f8a:	83 01       	movw	r16, r6
    2f8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f8e:	2f 77       	andi	r18, 0x7F	; 127
    2f90:	22 2e       	mov	r2, r18
    2f92:	17 c0       	rjmp	.+46     	; 0x2fc2 <vfprintf+0x170>
    2f94:	38 01       	movw	r6, r16
    2f96:	f2 e0       	ldi	r31, 0x02	; 2
    2f98:	6f 0e       	add	r6, r31
    2f9a:	71 1c       	adc	r7, r1
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	a0 80       	ld	r10, Z
    2fa0:	b1 80       	ldd	r11, Z+1	; 0x01
    2fa2:	26 ff       	sbrs	r18, 6
    2fa4:	03 c0       	rjmp	.+6      	; 0x2fac <vfprintf+0x15a>
    2fa6:	65 2d       	mov	r22, r5
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <vfprintf+0x15e>
    2fac:	6f ef       	ldi	r22, 0xFF	; 255
    2fae:	7f ef       	ldi	r23, 0xFF	; 255
    2fb0:	c5 01       	movw	r24, r10
    2fb2:	2c 87       	std	Y+12, r18	; 0x0c
    2fb4:	0e 94 09 19 	call	0x3212	; 0x3212 <strnlen_P>
    2fb8:	2c 01       	movw	r4, r24
    2fba:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fbc:	20 68       	ori	r18, 0x80	; 128
    2fbe:	22 2e       	mov	r2, r18
    2fc0:	83 01       	movw	r16, r6
    2fc2:	23 fc       	sbrc	r2, 3
    2fc4:	1b c0       	rjmp	.+54     	; 0x2ffc <vfprintf+0x1aa>
    2fc6:	83 2d       	mov	r24, r3
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	48 16       	cp	r4, r24
    2fcc:	59 06       	cpc	r5, r25
    2fce:	b0 f4       	brcc	.+44     	; 0x2ffc <vfprintf+0x1aa>
    2fd0:	b7 01       	movw	r22, r14
    2fd2:	80 e2       	ldi	r24, 0x20	; 32
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e 94 1f 19 	call	0x323e	; 0x323e <fputc>
    2fda:	3a 94       	dec	r3
    2fdc:	f4 cf       	rjmp	.-24     	; 0x2fc6 <vfprintf+0x174>
    2fde:	f5 01       	movw	r30, r10
    2fe0:	27 fc       	sbrc	r2, 7
    2fe2:	85 91       	lpm	r24, Z+
    2fe4:	27 fe       	sbrs	r2, 7
    2fe6:	81 91       	ld	r24, Z+
    2fe8:	5f 01       	movw	r10, r30
    2fea:	b7 01       	movw	r22, r14
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 1f 19 	call	0x323e	; 0x323e <fputc>
    2ff2:	31 10       	cpse	r3, r1
    2ff4:	3a 94       	dec	r3
    2ff6:	f1 e0       	ldi	r31, 0x01	; 1
    2ff8:	4f 1a       	sub	r4, r31
    2ffa:	51 08       	sbc	r5, r1
    2ffc:	41 14       	cp	r4, r1
    2ffe:	51 04       	cpc	r5, r1
    3000:	71 f7       	brne	.-36     	; 0x2fde <vfprintf+0x18c>
    3002:	e5 c0       	rjmp	.+458    	; 0x31ce <vfprintf+0x37c>
    3004:	84 36       	cpi	r24, 0x64	; 100
    3006:	11 f0       	breq	.+4      	; 0x300c <vfprintf+0x1ba>
    3008:	89 36       	cpi	r24, 0x69	; 105
    300a:	39 f5       	brne	.+78     	; 0x305a <vfprintf+0x208>
    300c:	f8 01       	movw	r30, r16
    300e:	27 ff       	sbrs	r18, 7
    3010:	07 c0       	rjmp	.+14     	; 0x3020 <vfprintf+0x1ce>
    3012:	60 81       	ld	r22, Z
    3014:	71 81       	ldd	r23, Z+1	; 0x01
    3016:	82 81       	ldd	r24, Z+2	; 0x02
    3018:	93 81       	ldd	r25, Z+3	; 0x03
    301a:	0c 5f       	subi	r16, 0xFC	; 252
    301c:	1f 4f       	sbci	r17, 0xFF	; 255
    301e:	08 c0       	rjmp	.+16     	; 0x3030 <vfprintf+0x1de>
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	88 27       	eor	r24, r24
    3026:	77 fd       	sbrc	r23, 7
    3028:	80 95       	com	r24
    302a:	98 2f       	mov	r25, r24
    302c:	0e 5f       	subi	r16, 0xFE	; 254
    302e:	1f 4f       	sbci	r17, 0xFF	; 255
    3030:	2f 76       	andi	r18, 0x6F	; 111
    3032:	b2 2e       	mov	r11, r18
    3034:	97 ff       	sbrs	r25, 7
    3036:	09 c0       	rjmp	.+18     	; 0x304a <vfprintf+0x1f8>
    3038:	90 95       	com	r25
    303a:	80 95       	com	r24
    303c:	70 95       	com	r23
    303e:	61 95       	neg	r22
    3040:	7f 4f       	sbci	r23, 0xFF	; 255
    3042:	8f 4f       	sbci	r24, 0xFF	; 255
    3044:	9f 4f       	sbci	r25, 0xFF	; 255
    3046:	20 68       	ori	r18, 0x80	; 128
    3048:	b2 2e       	mov	r11, r18
    304a:	2a e0       	ldi	r18, 0x0A	; 10
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	a4 01       	movw	r20, r8
    3050:	0e 94 51 19 	call	0x32a2	; 0x32a2 <__ultoa_invert>
    3054:	a8 2e       	mov	r10, r24
    3056:	a8 18       	sub	r10, r8
    3058:	44 c0       	rjmp	.+136    	; 0x30e2 <vfprintf+0x290>
    305a:	85 37       	cpi	r24, 0x75	; 117
    305c:	29 f4       	brne	.+10     	; 0x3068 <vfprintf+0x216>
    305e:	2f 7e       	andi	r18, 0xEF	; 239
    3060:	b2 2e       	mov	r11, r18
    3062:	2a e0       	ldi	r18, 0x0A	; 10
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	25 c0       	rjmp	.+74     	; 0x30b2 <vfprintf+0x260>
    3068:	f2 2f       	mov	r31, r18
    306a:	f9 7f       	andi	r31, 0xF9	; 249
    306c:	bf 2e       	mov	r11, r31
    306e:	8f 36       	cpi	r24, 0x6F	; 111
    3070:	c1 f0       	breq	.+48     	; 0x30a2 <vfprintf+0x250>
    3072:	18 f4       	brcc	.+6      	; 0x307a <vfprintf+0x228>
    3074:	88 35       	cpi	r24, 0x58	; 88
    3076:	79 f0       	breq	.+30     	; 0x3096 <vfprintf+0x244>
    3078:	b4 c0       	rjmp	.+360    	; 0x31e2 <vfprintf+0x390>
    307a:	80 37       	cpi	r24, 0x70	; 112
    307c:	19 f0       	breq	.+6      	; 0x3084 <vfprintf+0x232>
    307e:	88 37       	cpi	r24, 0x78	; 120
    3080:	21 f0       	breq	.+8      	; 0x308a <vfprintf+0x238>
    3082:	af c0       	rjmp	.+350    	; 0x31e2 <vfprintf+0x390>
    3084:	2f 2f       	mov	r18, r31
    3086:	20 61       	ori	r18, 0x10	; 16
    3088:	b2 2e       	mov	r11, r18
    308a:	b4 fe       	sbrs	r11, 4
    308c:	0d c0       	rjmp	.+26     	; 0x30a8 <vfprintf+0x256>
    308e:	8b 2d       	mov	r24, r11
    3090:	84 60       	ori	r24, 0x04	; 4
    3092:	b8 2e       	mov	r11, r24
    3094:	09 c0       	rjmp	.+18     	; 0x30a8 <vfprintf+0x256>
    3096:	24 ff       	sbrs	r18, 4
    3098:	0a c0       	rjmp	.+20     	; 0x30ae <vfprintf+0x25c>
    309a:	9f 2f       	mov	r25, r31
    309c:	96 60       	ori	r25, 0x06	; 6
    309e:	b9 2e       	mov	r11, r25
    30a0:	06 c0       	rjmp	.+12     	; 0x30ae <vfprintf+0x25c>
    30a2:	28 e0       	ldi	r18, 0x08	; 8
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	05 c0       	rjmp	.+10     	; 0x30b2 <vfprintf+0x260>
    30a8:	20 e1       	ldi	r18, 0x10	; 16
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	02 c0       	rjmp	.+4      	; 0x30b2 <vfprintf+0x260>
    30ae:	20 e1       	ldi	r18, 0x10	; 16
    30b0:	32 e0       	ldi	r19, 0x02	; 2
    30b2:	f8 01       	movw	r30, r16
    30b4:	b7 fe       	sbrs	r11, 7
    30b6:	07 c0       	rjmp	.+14     	; 0x30c6 <vfprintf+0x274>
    30b8:	60 81       	ld	r22, Z
    30ba:	71 81       	ldd	r23, Z+1	; 0x01
    30bc:	82 81       	ldd	r24, Z+2	; 0x02
    30be:	93 81       	ldd	r25, Z+3	; 0x03
    30c0:	0c 5f       	subi	r16, 0xFC	; 252
    30c2:	1f 4f       	sbci	r17, 0xFF	; 255
    30c4:	06 c0       	rjmp	.+12     	; 0x30d2 <vfprintf+0x280>
    30c6:	60 81       	ld	r22, Z
    30c8:	71 81       	ldd	r23, Z+1	; 0x01
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	0e 5f       	subi	r16, 0xFE	; 254
    30d0:	1f 4f       	sbci	r17, 0xFF	; 255
    30d2:	a4 01       	movw	r20, r8
    30d4:	0e 94 51 19 	call	0x32a2	; 0x32a2 <__ultoa_invert>
    30d8:	a8 2e       	mov	r10, r24
    30da:	a8 18       	sub	r10, r8
    30dc:	fb 2d       	mov	r31, r11
    30de:	ff 77       	andi	r31, 0x7F	; 127
    30e0:	bf 2e       	mov	r11, r31
    30e2:	b6 fe       	sbrs	r11, 6
    30e4:	0b c0       	rjmp	.+22     	; 0x30fc <vfprintf+0x2aa>
    30e6:	2b 2d       	mov	r18, r11
    30e8:	2e 7f       	andi	r18, 0xFE	; 254
    30ea:	a5 14       	cp	r10, r5
    30ec:	50 f4       	brcc	.+20     	; 0x3102 <vfprintf+0x2b0>
    30ee:	b4 fe       	sbrs	r11, 4
    30f0:	0a c0       	rjmp	.+20     	; 0x3106 <vfprintf+0x2b4>
    30f2:	b2 fc       	sbrc	r11, 2
    30f4:	08 c0       	rjmp	.+16     	; 0x3106 <vfprintf+0x2b4>
    30f6:	2b 2d       	mov	r18, r11
    30f8:	2e 7e       	andi	r18, 0xEE	; 238
    30fa:	05 c0       	rjmp	.+10     	; 0x3106 <vfprintf+0x2b4>
    30fc:	7a 2c       	mov	r7, r10
    30fe:	2b 2d       	mov	r18, r11
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <vfprintf+0x2b6>
    3102:	7a 2c       	mov	r7, r10
    3104:	01 c0       	rjmp	.+2      	; 0x3108 <vfprintf+0x2b6>
    3106:	75 2c       	mov	r7, r5
    3108:	24 ff       	sbrs	r18, 4
    310a:	0d c0       	rjmp	.+26     	; 0x3126 <vfprintf+0x2d4>
    310c:	fe 01       	movw	r30, r28
    310e:	ea 0d       	add	r30, r10
    3110:	f1 1d       	adc	r31, r1
    3112:	80 81       	ld	r24, Z
    3114:	80 33       	cpi	r24, 0x30	; 48
    3116:	11 f4       	brne	.+4      	; 0x311c <vfprintf+0x2ca>
    3118:	29 7e       	andi	r18, 0xE9	; 233
    311a:	09 c0       	rjmp	.+18     	; 0x312e <vfprintf+0x2dc>
    311c:	22 ff       	sbrs	r18, 2
    311e:	06 c0       	rjmp	.+12     	; 0x312c <vfprintf+0x2da>
    3120:	73 94       	inc	r7
    3122:	73 94       	inc	r7
    3124:	04 c0       	rjmp	.+8      	; 0x312e <vfprintf+0x2dc>
    3126:	82 2f       	mov	r24, r18
    3128:	86 78       	andi	r24, 0x86	; 134
    312a:	09 f0       	breq	.+2      	; 0x312e <vfprintf+0x2dc>
    312c:	73 94       	inc	r7
    312e:	23 fd       	sbrc	r18, 3
    3130:	13 c0       	rjmp	.+38     	; 0x3158 <vfprintf+0x306>
    3132:	20 ff       	sbrs	r18, 0
    3134:	06 c0       	rjmp	.+12     	; 0x3142 <vfprintf+0x2f0>
    3136:	5a 2c       	mov	r5, r10
    3138:	73 14       	cp	r7, r3
    313a:	18 f4       	brcc	.+6      	; 0x3142 <vfprintf+0x2f0>
    313c:	53 0c       	add	r5, r3
    313e:	57 18       	sub	r5, r7
    3140:	73 2c       	mov	r7, r3
    3142:	73 14       	cp	r7, r3
    3144:	68 f4       	brcc	.+26     	; 0x3160 <vfprintf+0x30e>
    3146:	b7 01       	movw	r22, r14
    3148:	80 e2       	ldi	r24, 0x20	; 32
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	2c 87       	std	Y+12, r18	; 0x0c
    314e:	0e 94 1f 19 	call	0x323e	; 0x323e <fputc>
    3152:	73 94       	inc	r7
    3154:	2c 85       	ldd	r18, Y+12	; 0x0c
    3156:	f5 cf       	rjmp	.-22     	; 0x3142 <vfprintf+0x2f0>
    3158:	73 14       	cp	r7, r3
    315a:	10 f4       	brcc	.+4      	; 0x3160 <vfprintf+0x30e>
    315c:	37 18       	sub	r3, r7
    315e:	01 c0       	rjmp	.+2      	; 0x3162 <vfprintf+0x310>
    3160:	31 2c       	mov	r3, r1
    3162:	24 ff       	sbrs	r18, 4
    3164:	12 c0       	rjmp	.+36     	; 0x318a <vfprintf+0x338>
    3166:	b7 01       	movw	r22, r14
    3168:	80 e3       	ldi	r24, 0x30	; 48
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	2c 87       	std	Y+12, r18	; 0x0c
    316e:	0e 94 1f 19 	call	0x323e	; 0x323e <fputc>
    3172:	2c 85       	ldd	r18, Y+12	; 0x0c
    3174:	22 ff       	sbrs	r18, 2
    3176:	17 c0       	rjmp	.+46     	; 0x31a6 <vfprintf+0x354>
    3178:	21 ff       	sbrs	r18, 1
    317a:	03 c0       	rjmp	.+6      	; 0x3182 <vfprintf+0x330>
    317c:	88 e5       	ldi	r24, 0x58	; 88
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <vfprintf+0x334>
    3182:	88 e7       	ldi	r24, 0x78	; 120
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	b7 01       	movw	r22, r14
    3188:	0c c0       	rjmp	.+24     	; 0x31a2 <vfprintf+0x350>
    318a:	82 2f       	mov	r24, r18
    318c:	86 78       	andi	r24, 0x86	; 134
    318e:	59 f0       	breq	.+22     	; 0x31a6 <vfprintf+0x354>
    3190:	21 fd       	sbrc	r18, 1
    3192:	02 c0       	rjmp	.+4      	; 0x3198 <vfprintf+0x346>
    3194:	80 e2       	ldi	r24, 0x20	; 32
    3196:	01 c0       	rjmp	.+2      	; 0x319a <vfprintf+0x348>
    3198:	8b e2       	ldi	r24, 0x2B	; 43
    319a:	27 fd       	sbrc	r18, 7
    319c:	8d e2       	ldi	r24, 0x2D	; 45
    319e:	b7 01       	movw	r22, r14
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	0e 94 1f 19 	call	0x323e	; 0x323e <fputc>
    31a6:	a5 14       	cp	r10, r5
    31a8:	38 f4       	brcc	.+14     	; 0x31b8 <vfprintf+0x366>
    31aa:	b7 01       	movw	r22, r14
    31ac:	80 e3       	ldi	r24, 0x30	; 48
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	0e 94 1f 19 	call	0x323e	; 0x323e <fputc>
    31b4:	5a 94       	dec	r5
    31b6:	f7 cf       	rjmp	.-18     	; 0x31a6 <vfprintf+0x354>
    31b8:	aa 94       	dec	r10
    31ba:	f4 01       	movw	r30, r8
    31bc:	ea 0d       	add	r30, r10
    31be:	f1 1d       	adc	r31, r1
    31c0:	80 81       	ld	r24, Z
    31c2:	b7 01       	movw	r22, r14
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	0e 94 1f 19 	call	0x323e	; 0x323e <fputc>
    31ca:	a1 10       	cpse	r10, r1
    31cc:	f5 cf       	rjmp	.-22     	; 0x31b8 <vfprintf+0x366>
    31ce:	33 20       	and	r3, r3
    31d0:	09 f4       	brne	.+2      	; 0x31d4 <vfprintf+0x382>
    31d2:	51 ce       	rjmp	.-862    	; 0x2e76 <vfprintf+0x24>
    31d4:	b7 01       	movw	r22, r14
    31d6:	80 e2       	ldi	r24, 0x20	; 32
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	0e 94 1f 19 	call	0x323e	; 0x323e <fputc>
    31de:	3a 94       	dec	r3
    31e0:	f6 cf       	rjmp	.-20     	; 0x31ce <vfprintf+0x37c>
    31e2:	f7 01       	movw	r30, r14
    31e4:	86 81       	ldd	r24, Z+6	; 0x06
    31e6:	97 81       	ldd	r25, Z+7	; 0x07
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <vfprintf+0x39c>
    31ea:	8f ef       	ldi	r24, 0xFF	; 255
    31ec:	9f ef       	ldi	r25, 0xFF	; 255
    31ee:	2c 96       	adiw	r28, 0x0c	; 12
    31f0:	e2 e1       	ldi	r30, 0x12	; 18
    31f2:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__epilogue_restores__>

000031f6 <__eerd_word_m16>:
    31f6:	a8 e1       	ldi	r26, 0x18	; 24
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	42 e0       	ldi	r20, 0x02	; 2
    31fc:	50 e0       	ldi	r21, 0x00	; 0
    31fe:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__eerd_blraw_m16>

00003202 <__eewr_word_m16>:
    3202:	0e 94 bf 19 	call	0x337e	; 0x337e <__eewr_byte_m16>
    3206:	27 2f       	mov	r18, r23
    3208:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__eewr_r18_m16>

0000320c <__ctype_isfalse>:
    320c:	99 27       	eor	r25, r25
    320e:	88 27       	eor	r24, r24

00003210 <__ctype_istrue>:
    3210:	08 95       	ret

00003212 <strnlen_P>:
    3212:	fc 01       	movw	r30, r24
    3214:	05 90       	lpm	r0, Z+
    3216:	61 50       	subi	r22, 0x01	; 1
    3218:	70 40       	sbci	r23, 0x00	; 0
    321a:	01 10       	cpse	r0, r1
    321c:	d8 f7       	brcc	.-10     	; 0x3214 <strnlen_P+0x2>
    321e:	80 95       	com	r24
    3220:	90 95       	com	r25
    3222:	8e 0f       	add	r24, r30
    3224:	9f 1f       	adc	r25, r31
    3226:	08 95       	ret

00003228 <strnlen>:
    3228:	fc 01       	movw	r30, r24
    322a:	61 50       	subi	r22, 0x01	; 1
    322c:	70 40       	sbci	r23, 0x00	; 0
    322e:	01 90       	ld	r0, Z+
    3230:	01 10       	cpse	r0, r1
    3232:	d8 f7       	brcc	.-10     	; 0x322a <strnlen+0x2>
    3234:	80 95       	com	r24
    3236:	90 95       	com	r25
    3238:	8e 0f       	add	r24, r30
    323a:	9f 1f       	adc	r25, r31
    323c:	08 95       	ret

0000323e <fputc>:
    323e:	0f 93       	push	r16
    3240:	1f 93       	push	r17
    3242:	cf 93       	push	r28
    3244:	df 93       	push	r29
    3246:	18 2f       	mov	r17, r24
    3248:	09 2f       	mov	r16, r25
    324a:	eb 01       	movw	r28, r22
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	81 fd       	sbrc	r24, 1
    3250:	03 c0       	rjmp	.+6      	; 0x3258 <fputc+0x1a>
    3252:	8f ef       	ldi	r24, 0xFF	; 255
    3254:	9f ef       	ldi	r25, 0xFF	; 255
    3256:	20 c0       	rjmp	.+64     	; 0x3298 <fputc+0x5a>
    3258:	82 ff       	sbrs	r24, 2
    325a:	10 c0       	rjmp	.+32     	; 0x327c <fputc+0x3e>
    325c:	4e 81       	ldd	r20, Y+6	; 0x06
    325e:	5f 81       	ldd	r21, Y+7	; 0x07
    3260:	2c 81       	ldd	r18, Y+4	; 0x04
    3262:	3d 81       	ldd	r19, Y+5	; 0x05
    3264:	42 17       	cp	r20, r18
    3266:	53 07       	cpc	r21, r19
    3268:	7c f4       	brge	.+30     	; 0x3288 <fputc+0x4a>
    326a:	e8 81       	ld	r30, Y
    326c:	f9 81       	ldd	r31, Y+1	; 0x01
    326e:	9f 01       	movw	r18, r30
    3270:	2f 5f       	subi	r18, 0xFF	; 255
    3272:	3f 4f       	sbci	r19, 0xFF	; 255
    3274:	39 83       	std	Y+1, r19	; 0x01
    3276:	28 83       	st	Y, r18
    3278:	10 83       	st	Z, r17
    327a:	06 c0       	rjmp	.+12     	; 0x3288 <fputc+0x4a>
    327c:	e8 85       	ldd	r30, Y+8	; 0x08
    327e:	f9 85       	ldd	r31, Y+9	; 0x09
    3280:	81 2f       	mov	r24, r17
    3282:	09 95       	icall
    3284:	89 2b       	or	r24, r25
    3286:	29 f7       	brne	.-54     	; 0x3252 <fputc+0x14>
    3288:	2e 81       	ldd	r18, Y+6	; 0x06
    328a:	3f 81       	ldd	r19, Y+7	; 0x07
    328c:	2f 5f       	subi	r18, 0xFF	; 255
    328e:	3f 4f       	sbci	r19, 0xFF	; 255
    3290:	3f 83       	std	Y+7, r19	; 0x07
    3292:	2e 83       	std	Y+6, r18	; 0x06
    3294:	81 2f       	mov	r24, r17
    3296:	90 2f       	mov	r25, r16
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	08 95       	ret

000032a2 <__ultoa_invert>:
    32a2:	fa 01       	movw	r30, r20
    32a4:	aa 27       	eor	r26, r26
    32a6:	28 30       	cpi	r18, 0x08	; 8
    32a8:	51 f1       	breq	.+84     	; 0x32fe <__ultoa_invert+0x5c>
    32aa:	20 31       	cpi	r18, 0x10	; 16
    32ac:	81 f1       	breq	.+96     	; 0x330e <__ultoa_invert+0x6c>
    32ae:	e8 94       	clt
    32b0:	6f 93       	push	r22
    32b2:	6e 7f       	andi	r22, 0xFE	; 254
    32b4:	6e 5f       	subi	r22, 0xFE	; 254
    32b6:	7f 4f       	sbci	r23, 0xFF	; 255
    32b8:	8f 4f       	sbci	r24, 0xFF	; 255
    32ba:	9f 4f       	sbci	r25, 0xFF	; 255
    32bc:	af 4f       	sbci	r26, 0xFF	; 255
    32be:	b1 e0       	ldi	r27, 0x01	; 1
    32c0:	3e d0       	rcall	.+124    	; 0x333e <__ultoa_invert+0x9c>
    32c2:	b4 e0       	ldi	r27, 0x04	; 4
    32c4:	3c d0       	rcall	.+120    	; 0x333e <__ultoa_invert+0x9c>
    32c6:	67 0f       	add	r22, r23
    32c8:	78 1f       	adc	r23, r24
    32ca:	89 1f       	adc	r24, r25
    32cc:	9a 1f       	adc	r25, r26
    32ce:	a1 1d       	adc	r26, r1
    32d0:	68 0f       	add	r22, r24
    32d2:	79 1f       	adc	r23, r25
    32d4:	8a 1f       	adc	r24, r26
    32d6:	91 1d       	adc	r25, r1
    32d8:	a1 1d       	adc	r26, r1
    32da:	6a 0f       	add	r22, r26
    32dc:	71 1d       	adc	r23, r1
    32de:	81 1d       	adc	r24, r1
    32e0:	91 1d       	adc	r25, r1
    32e2:	a1 1d       	adc	r26, r1
    32e4:	20 d0       	rcall	.+64     	; 0x3326 <__ultoa_invert+0x84>
    32e6:	09 f4       	brne	.+2      	; 0x32ea <__ultoa_invert+0x48>
    32e8:	68 94       	set
    32ea:	3f 91       	pop	r19
    32ec:	2a e0       	ldi	r18, 0x0A	; 10
    32ee:	26 9f       	mul	r18, r22
    32f0:	11 24       	eor	r1, r1
    32f2:	30 19       	sub	r19, r0
    32f4:	30 5d       	subi	r19, 0xD0	; 208
    32f6:	31 93       	st	Z+, r19
    32f8:	de f6       	brtc	.-74     	; 0x32b0 <__ultoa_invert+0xe>
    32fa:	cf 01       	movw	r24, r30
    32fc:	08 95       	ret
    32fe:	46 2f       	mov	r20, r22
    3300:	47 70       	andi	r20, 0x07	; 7
    3302:	40 5d       	subi	r20, 0xD0	; 208
    3304:	41 93       	st	Z+, r20
    3306:	b3 e0       	ldi	r27, 0x03	; 3
    3308:	0f d0       	rcall	.+30     	; 0x3328 <__ultoa_invert+0x86>
    330a:	c9 f7       	brne	.-14     	; 0x32fe <__ultoa_invert+0x5c>
    330c:	f6 cf       	rjmp	.-20     	; 0x32fa <__ultoa_invert+0x58>
    330e:	46 2f       	mov	r20, r22
    3310:	4f 70       	andi	r20, 0x0F	; 15
    3312:	40 5d       	subi	r20, 0xD0	; 208
    3314:	4a 33       	cpi	r20, 0x3A	; 58
    3316:	18 f0       	brcs	.+6      	; 0x331e <__ultoa_invert+0x7c>
    3318:	49 5d       	subi	r20, 0xD9	; 217
    331a:	31 fd       	sbrc	r19, 1
    331c:	40 52       	subi	r20, 0x20	; 32
    331e:	41 93       	st	Z+, r20
    3320:	02 d0       	rcall	.+4      	; 0x3326 <__ultoa_invert+0x84>
    3322:	a9 f7       	brne	.-22     	; 0x330e <__ultoa_invert+0x6c>
    3324:	ea cf       	rjmp	.-44     	; 0x32fa <__ultoa_invert+0x58>
    3326:	b4 e0       	ldi	r27, 0x04	; 4
    3328:	a6 95       	lsr	r26
    332a:	97 95       	ror	r25
    332c:	87 95       	ror	r24
    332e:	77 95       	ror	r23
    3330:	67 95       	ror	r22
    3332:	ba 95       	dec	r27
    3334:	c9 f7       	brne	.-14     	; 0x3328 <__ultoa_invert+0x86>
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	61 05       	cpc	r22, r1
    333a:	71 05       	cpc	r23, r1
    333c:	08 95       	ret
    333e:	9b 01       	movw	r18, r22
    3340:	ac 01       	movw	r20, r24
    3342:	0a 2e       	mov	r0, r26
    3344:	06 94       	lsr	r0
    3346:	57 95       	ror	r21
    3348:	47 95       	ror	r20
    334a:	37 95       	ror	r19
    334c:	27 95       	ror	r18
    334e:	ba 95       	dec	r27
    3350:	c9 f7       	brne	.-14     	; 0x3344 <__ultoa_invert+0xa2>
    3352:	62 0f       	add	r22, r18
    3354:	73 1f       	adc	r23, r19
    3356:	84 1f       	adc	r24, r20
    3358:	95 1f       	adc	r25, r21
    335a:	a0 1d       	adc	r26, r0
    335c:	08 95       	ret

0000335e <__eerd_block_m16>:
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22

00003362 <__eerd_blraw_m16>:
    3362:	fc 01       	movw	r30, r24
    3364:	e1 99       	sbic	0x1c, 1	; 28
    3366:	fe cf       	rjmp	.-4      	; 0x3364 <__eerd_blraw_m16+0x2>
    3368:	06 c0       	rjmp	.+12     	; 0x3376 <__eerd_blraw_m16+0x14>
    336a:	ff bb       	out	0x1f, r31	; 31
    336c:	ee bb       	out	0x1e, r30	; 30
    336e:	e0 9a       	sbi	0x1c, 0	; 28
    3370:	31 96       	adiw	r30, 0x01	; 1
    3372:	0d b2       	in	r0, 0x1d	; 29
    3374:	0d 92       	st	X+, r0
    3376:	41 50       	subi	r20, 0x01	; 1
    3378:	50 40       	sbci	r21, 0x00	; 0
    337a:	b8 f7       	brcc	.-18     	; 0x336a <__eerd_blraw_m16+0x8>
    337c:	08 95       	ret

0000337e <__eewr_byte_m16>:
    337e:	26 2f       	mov	r18, r22

00003380 <__eewr_r18_m16>:
    3380:	e1 99       	sbic	0x1c, 1	; 28
    3382:	fe cf       	rjmp	.-4      	; 0x3380 <__eewr_r18_m16>
    3384:	9f bb       	out	0x1f, r25	; 31
    3386:	8e bb       	out	0x1e, r24	; 30
    3388:	2d bb       	out	0x1d, r18	; 29
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	e2 9a       	sbi	0x1c, 2	; 28
    3390:	e1 9a       	sbi	0x1c, 1	; 28
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	01 96       	adiw	r24, 0x01	; 1
    3396:	08 95       	ret

00003398 <__mulsi3>:
    3398:	db 01       	movw	r26, r22
    339a:	8f 93       	push	r24
    339c:	9f 93       	push	r25
    339e:	0e 94 1d 1a 	call	0x343a	; 0x343a <__muluhisi3>
    33a2:	bf 91       	pop	r27
    33a4:	af 91       	pop	r26
    33a6:	a2 9f       	mul	r26, r18
    33a8:	80 0d       	add	r24, r0
    33aa:	91 1d       	adc	r25, r1
    33ac:	a3 9f       	mul	r26, r19
    33ae:	90 0d       	add	r25, r0
    33b0:	b2 9f       	mul	r27, r18
    33b2:	90 0d       	add	r25, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	08 95       	ret

000033b8 <__udivmodsi4>:
    33b8:	a1 e2       	ldi	r26, 0x21	; 33
    33ba:	1a 2e       	mov	r1, r26
    33bc:	aa 1b       	sub	r26, r26
    33be:	bb 1b       	sub	r27, r27
    33c0:	fd 01       	movw	r30, r26
    33c2:	0d c0       	rjmp	.+26     	; 0x33de <__udivmodsi4_ep>

000033c4 <__udivmodsi4_loop>:
    33c4:	aa 1f       	adc	r26, r26
    33c6:	bb 1f       	adc	r27, r27
    33c8:	ee 1f       	adc	r30, r30
    33ca:	ff 1f       	adc	r31, r31
    33cc:	a2 17       	cp	r26, r18
    33ce:	b3 07       	cpc	r27, r19
    33d0:	e4 07       	cpc	r30, r20
    33d2:	f5 07       	cpc	r31, r21
    33d4:	20 f0       	brcs	.+8      	; 0x33de <__udivmodsi4_ep>
    33d6:	a2 1b       	sub	r26, r18
    33d8:	b3 0b       	sbc	r27, r19
    33da:	e4 0b       	sbc	r30, r20
    33dc:	f5 0b       	sbc	r31, r21

000033de <__udivmodsi4_ep>:
    33de:	66 1f       	adc	r22, r22
    33e0:	77 1f       	adc	r23, r23
    33e2:	88 1f       	adc	r24, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	1a 94       	dec	r1
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <__udivmodsi4_loop>
    33ea:	60 95       	com	r22
    33ec:	70 95       	com	r23
    33ee:	80 95       	com	r24
    33f0:	90 95       	com	r25
    33f2:	9b 01       	movw	r18, r22
    33f4:	ac 01       	movw	r20, r24
    33f6:	bd 01       	movw	r22, r26
    33f8:	cf 01       	movw	r24, r30
    33fa:	08 95       	ret

000033fc <__divmodsi4>:
    33fc:	05 2e       	mov	r0, r21
    33fe:	97 fb       	bst	r25, 7
    3400:	1e f4       	brtc	.+6      	; 0x3408 <__divmodsi4+0xc>
    3402:	00 94       	com	r0
    3404:	0e 94 15 1a 	call	0x342a	; 0x342a <__negsi2>
    3408:	57 fd       	sbrc	r21, 7
    340a:	07 d0       	rcall	.+14     	; 0x341a <__divmodsi4_neg2>
    340c:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__udivmodsi4>
    3410:	07 fc       	sbrc	r0, 7
    3412:	03 d0       	rcall	.+6      	; 0x341a <__divmodsi4_neg2>
    3414:	4e f4       	brtc	.+18     	; 0x3428 <__divmodsi4_exit>
    3416:	0c 94 15 1a 	jmp	0x342a	; 0x342a <__negsi2>

0000341a <__divmodsi4_neg2>:
    341a:	50 95       	com	r21
    341c:	40 95       	com	r20
    341e:	30 95       	com	r19
    3420:	21 95       	neg	r18
    3422:	3f 4f       	sbci	r19, 0xFF	; 255
    3424:	4f 4f       	sbci	r20, 0xFF	; 255
    3426:	5f 4f       	sbci	r21, 0xFF	; 255

00003428 <__divmodsi4_exit>:
    3428:	08 95       	ret

0000342a <__negsi2>:
    342a:	90 95       	com	r25
    342c:	80 95       	com	r24
    342e:	70 95       	com	r23
    3430:	61 95       	neg	r22
    3432:	7f 4f       	sbci	r23, 0xFF	; 255
    3434:	8f 4f       	sbci	r24, 0xFF	; 255
    3436:	9f 4f       	sbci	r25, 0xFF	; 255
    3438:	08 95       	ret

0000343a <__muluhisi3>:
    343a:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__umulhisi3>
    343e:	a5 9f       	mul	r26, r21
    3440:	90 0d       	add	r25, r0
    3442:	b4 9f       	mul	r27, r20
    3444:	90 0d       	add	r25, r0
    3446:	a4 9f       	mul	r26, r20
    3448:	80 0d       	add	r24, r0
    344a:	91 1d       	adc	r25, r1
    344c:	11 24       	eor	r1, r1
    344e:	08 95       	ret

00003450 <__mulshisi3>:
    3450:	b7 ff       	sbrs	r27, 7
    3452:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__muluhisi3>

00003456 <__mulohisi3>:
    3456:	0e 94 1d 1a 	call	0x343a	; 0x343a <__muluhisi3>
    345a:	82 1b       	sub	r24, r18
    345c:	93 0b       	sbc	r25, r19
    345e:	08 95       	ret

00003460 <__prologue_saves__>:
    3460:	2f 92       	push	r2
    3462:	3f 92       	push	r3
    3464:	4f 92       	push	r4
    3466:	5f 92       	push	r5
    3468:	6f 92       	push	r6
    346a:	7f 92       	push	r7
    346c:	8f 92       	push	r8
    346e:	9f 92       	push	r9
    3470:	af 92       	push	r10
    3472:	bf 92       	push	r11
    3474:	cf 92       	push	r12
    3476:	df 92       	push	r13
    3478:	ef 92       	push	r14
    347a:	ff 92       	push	r15
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
    3488:	ca 1b       	sub	r28, r26
    348a:	db 0b       	sbc	r29, r27
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	09 94       	ijmp

00003498 <__epilogue_restores__>:
    3498:	2a 88       	ldd	r2, Y+18	; 0x12
    349a:	39 88       	ldd	r3, Y+17	; 0x11
    349c:	48 88       	ldd	r4, Y+16	; 0x10
    349e:	5f 84       	ldd	r5, Y+15	; 0x0f
    34a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    34a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    34a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    34a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    34a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    34aa:	b9 84       	ldd	r11, Y+9	; 0x09
    34ac:	c8 84       	ldd	r12, Y+8	; 0x08
    34ae:	df 80       	ldd	r13, Y+7	; 0x07
    34b0:	ee 80       	ldd	r14, Y+6	; 0x06
    34b2:	fd 80       	ldd	r15, Y+5	; 0x05
    34b4:	0c 81       	ldd	r16, Y+4	; 0x04
    34b6:	1b 81       	ldd	r17, Y+3	; 0x03
    34b8:	aa 81       	ldd	r26, Y+2	; 0x02
    34ba:	b9 81       	ldd	r27, Y+1	; 0x01
    34bc:	ce 0f       	add	r28, r30
    34be:	d1 1d       	adc	r29, r1
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	ed 01       	movw	r28, r26
    34cc:	08 95       	ret

000034ce <__umulhisi3>:
    34ce:	a2 9f       	mul	r26, r18
    34d0:	b0 01       	movw	r22, r0
    34d2:	b3 9f       	mul	r27, r19
    34d4:	c0 01       	movw	r24, r0
    34d6:	a3 9f       	mul	r26, r19
    34d8:	70 0d       	add	r23, r0
    34da:	81 1d       	adc	r24, r1
    34dc:	11 24       	eor	r1, r1
    34de:	91 1d       	adc	r25, r1
    34e0:	b2 9f       	mul	r27, r18
    34e2:	70 0d       	add	r23, r0
    34e4:	81 1d       	adc	r24, r1
    34e6:	11 24       	eor	r1, r1
    34e8:	91 1d       	adc	r25, r1
    34ea:	08 95       	ret

000034ec <_exit>:
    34ec:	f8 94       	cli

000034ee <__stop_program>:
    34ee:	ff cf       	rjmp	.-2      	; 0x34ee <__stop_program>
