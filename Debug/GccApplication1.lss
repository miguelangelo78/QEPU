
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000359c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  0000359c  00003650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000ea  008000ea  000036da  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000036da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000036dc  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000617d  00000000  00000000  000039c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9d  00000000  00000000  00009b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ddd  00000000  00000000  0000aada  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c00  00000000  00000000  0000b8b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b1b  00000000  00000000  0000c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003acb  00000000  00000000  0000cfd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  00010a9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      54:	cb 0d       	add	r28, r11
      56:	e6 0d       	add	r30, r6
      58:	33 0f       	add	r19, r19
      5a:	33 0f       	add	r19, r19
      5c:	33 0f       	add	r19, r19
      5e:	33 0f       	add	r19, r19
      60:	33 0f       	add	r19, r19
      62:	33 0f       	add	r19, r19
      64:	33 0f       	add	r19, r19
      66:	ec 0d       	add	r30, r12
      68:	33 0f       	add	r19, r19
      6a:	33 0f       	add	r19, r19
      6c:	33 0f       	add	r19, r19
      6e:	f2 0d       	add	r31, r2
      70:	fa 0d       	add	r31, r10
      72:	02 0e       	add	r0, r18
      74:	29 0e       	add	r2, r25
      76:	50 0e       	add	r5, r16
      78:	77 0e       	add	r7, r23
      7a:	9e 0e       	add	r9, r30
      7c:	c5 0e       	add	r12, r21
      7e:	ec 0e       	add	r14, r28
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfa>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef510>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates8ampl2vecEiPiS0_+0xee>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d4>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef744>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b6>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f0>
      d4:	3f 05       	cpc	r19, r15
      d6:	a8 4c       	sbci	r26, 0xC8	; 200
      d8:	cd b2       	in	r12, 0x1d	; 29
      da:	d4 4e       	sbci	r29, 0xE4	; 228
      dc:	b9 38       	cpi	r27, 0x89	; 137
      de:	36 a9       	ldd	r19, Z+54	; 0x36
      e0:	02 0c       	add	r0, r2
      e2:	50 b9       	out	0x00, r21	; 0
      e4:	91 86       	std	Z+9, r9	; 0x09
      e6:	88 08       	sbc	r8, r8
      e8:	3c a6       	std	Y+44, r3	; 0x2c
      ea:	aa aa       	std	Y+50, r10	; 0x32
      ec:	2a be       	out	0x3a, r2	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 08       	sbc	r3, r15
      f4:	00 00       	nop
      f6:	00 be       	out	0x30, r0	; 48
      f8:	92 24       	eor	r9, r2
      fa:	49 12       	cpse	r4, r25
      fc:	3e ab       	std	Y+54, r19	; 0x36
      fe:	aa aa       	std	Y+50, r10	; 0x32
     100:	2a be       	out	0x3a, r2	; 58
     102:	cd cc       	rjmp	.-1638   	; 0xfffffa9e <__eeprom_end+0xff7efa9c>
     104:	cc 4c       	sbci	r28, 0xCC	; 204
     106:	3e 00       	.word	0x003e	; ????
     108:	00 00       	nop
     10a:	80 be       	out	0x30, r8	; 48
     10c:	ab aa       	std	Y+51, r10	; 0x33
     10e:	aa aa       	std	Y+50, r10	; 0x32
     110:	3e 00       	.word	0x003e	; ????
     112:	00 00       	nop
     114:	00 bf       	out	0x30, r16	; 48
     116:	00 00       	nop
     118:	00 80       	ld	r0, Z
     11a:	3f 00       	.word	0x003f	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	08 41       	sbci	r16, 0x18	; 24
     122:	78 d3       	rcall	.+1776   	; 0x814 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a2>
     124:	bb 43       	sbci	r27, 0x3B	; 59
     126:	87 d1       	rcall	.+782    	; 0x436 <_ZN6EEProm4readEj+0x4a>
     128:	13 3d       	cpi	r17, 0xD3	; 211
     12a:	19 0e       	add	r1, r25
     12c:	3c c3       	rjmp	.+1656   	; 0x7a6 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x134>
     12e:	bd 42       	sbci	r27, 0x2D	; 45
     130:	82 ad       	ldd	r24, Z+58	; 0x3a
     132:	2b 3e       	cpi	r18, 0xEB	; 235
     134:	68 ec       	ldi	r22, 0xC8	; 200
     136:	82 76       	andi	r24, 0x62	; 98
     138:	be d9       	rcall	.-3204   	; 0xfffff4b6 <__eeprom_end+0xff7ef4b4>
     13a:	8f e1       	ldi	r24, 0x1F	; 31
     13c:	a9 3e       	cpi	r26, 0xE9	; 233
     13e:	4c 80       	ldd	r4, Y+4	; 0x04
     140:	ef ff       	.word	0xffef	; ????
     142:	be 01       	movw	r22, r28
     144:	c4 ff       	sbrs	r28, 4
     146:	7f 3f       	cpi	r23, 0xFF	; 255
     148:	00 00       	nop
     14a:	00 00       	nop
	...

0000014e <__ctors_start>:
     14e:	d3 0b       	sbc	r29, r19

00000150 <__ctors_end>:
     150:	11 24       	eor	r1, r1
     152:	1f be       	out	0x3f, r1	; 63
     154:	cf e5       	ldi	r28, 0x5F	; 95
     156:	d4 e0       	ldi	r29, 0x04	; 4
     158:	de bf       	out	0x3e, r29	; 62
     15a:	cd bf       	out	0x3d, r28	; 61

0000015c <__do_copy_data>:
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	a0 e6       	ldi	r26, 0x60	; 96
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ec e9       	ldi	r30, 0x9C	; 156
     164:	f5 e3       	ldi	r31, 0x35	; 53
     166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x10>
     168:	05 90       	lpm	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	aa 3e       	cpi	r26, 0xEA	; 234
     16e:	b1 07       	cpc	r27, r17
     170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0xc>

00000172 <__do_clear_bss>:
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	aa ee       	ldi	r26, 0xEA	; 234
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
     17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
     17c:	a2 3f       	cpi	r26, 0xF2	; 242
     17e:	b2 07       	cpc	r27, r18
     180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>

00000182 <__do_global_ctors>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	c0 e5       	ldi	r28, 0x50	; 80
     186:	d1 e0       	ldi	r29, 0x01	; 1
     188:	04 c0       	rjmp	.+8      	; 0x192 <__do_global_ctors+0x10>
     18a:	22 97       	sbiw	r28, 0x02	; 2
     18c:	fe 01       	movw	r30, r28
     18e:	0e 94 84 14 	call	0x2908	; 0x2908 <__tablejump__>
     192:	ce 34       	cpi	r28, 0x4E	; 78
     194:	d1 07       	cpc	r29, r17
     196:	c9 f7       	brne	.-14     	; 0x18a <__do_global_ctors+0x8>
     198:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <main>
     19c:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	fc 01       	movw	r30, r24
     1aa:	40 83       	st	Z, r20
     1ac:	51 83       	std	Z+1, r21	; 0x01
     1ae:	62 83       	std	Z+2, r22	; 0x02
     1b0:	73 83       	std	Z+3, r23	; 0x03
     1b2:	04 83       	std	Z+4, r16	; 0x04
     1b4:	15 83       	std	Z+5, r17	; 0x05
     1b6:	26 83       	std	Z+6, r18	; 0x06
     1b8:	37 83       	std	Z+7, r19	; 0x07
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	08 95       	ret

000001c0 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     1c0:	fc 01       	movw	r30, r24
     1c2:	10 82       	st	Z, r1
     1c4:	11 82       	std	Z+1, r1	; 0x01
     1c6:	12 82       	std	Z+2, r1	; 0x02
     1c8:	13 82       	std	Z+3, r1	; 0x03
     1ca:	14 82       	std	Z+4, r1	; 0x04
     1cc:	15 82       	std	Z+5, r1	; 0x05
     1ce:	16 82       	std	Z+6, r1	; 0x06
     1d0:	17 82       	std	Z+7, r1	; 0x07
     1d2:	08 95       	ret

000001d4 <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     1d4:	af 92       	push	r10
     1d6:	bf 92       	push	r11
     1d8:	cf 92       	push	r12
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	68 97       	sbiw	r28, 0x18	; 24
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	5c 01       	movw	r10, r24
     1fa:	09 8b       	std	Y+17, r16	; 0x11
     1fc:	1a 8b       	std	Y+18, r17	; 0x12
     1fe:	2b 8b       	std	Y+19, r18	; 0x13
     200:	3c 8b       	std	Y+20, r19	; 0x14
     202:	4d 8b       	std	Y+21, r20	; 0x15
     204:	5e 8b       	std	Y+22, r21	; 0x16
     206:	6f 8b       	std	Y+23, r22	; 0x17
     208:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     20a:	2d 89       	ldd	r18, Y+21	; 0x15
     20c:	3e 89       	ldd	r19, Y+22	; 0x16
     20e:	4f 89       	ldd	r20, Y+23	; 0x17
     210:	58 8d       	ldd	r21, Y+24	; 0x18
     212:	fc 01       	movw	r30, r24
     214:	64 81       	ldd	r22, Z+4	; 0x04
     216:	75 81       	ldd	r23, Z+5	; 0x05
     218:	86 81       	ldd	r24, Z+6	; 0x06
     21a:	97 81       	ldd	r25, Z+7	; 0x07
     21c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__addsf3>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24
     224:	29 89       	ldd	r18, Y+17	; 0x11
     226:	3a 89       	ldd	r19, Y+18	; 0x12
     228:	4b 89       	ldd	r20, Y+19	; 0x13
     22a:	5c 89       	ldd	r21, Y+20	; 0x14
     22c:	f5 01       	movw	r30, r10
     22e:	60 81       	ld	r22, Z
     230:	71 81       	ldd	r23, Z+1	; 0x01
     232:	82 81       	ldd	r24, Z+2	; 0x02
     234:	93 81       	ldd	r25, Z+3	; 0x03
     236:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__addsf3>
     23a:	ab 01       	movw	r20, r22
     23c:	bc 01       	movw	r22, r24
     23e:	97 01       	movw	r18, r14
     240:	86 01       	movw	r16, r12
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	fe 01       	movw	r30, r28
     24e:	31 96       	adiw	r30, 0x01	; 1
     250:	de 01       	movw	r26, r28
     252:	19 96       	adiw	r26, 0x09	; 9
     254:	01 90       	ld	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	8a 95       	dec	r24
     25a:	e1 f7       	brne	.-8      	; 0x254 <_ZN7Complex3addES_+0x80>
     25c:	29 85       	ldd	r18, Y+9	; 0x09
     25e:	3a 85       	ldd	r19, Y+10	; 0x0a
     260:	4b 85       	ldd	r20, Y+11	; 0x0b
     262:	5c 85       	ldd	r21, Y+12	; 0x0c
     264:	6d 85       	ldd	r22, Y+13	; 0x0d
     266:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     268:	8f 85       	ldd	r24, Y+15	; 0x0f
     26a:	98 89       	ldd	r25, Y+16	; 0x10
     26c:	68 96       	adiw	r28, 0x18	; 24
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	df 90       	pop	r13
     286:	cf 90       	pop	r12
     288:	bf 90       	pop	r11
     28a:	af 90       	pop	r10
     28c:	08 95       	ret

0000028e <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     28e:	4f 92       	push	r4
     290:	5f 92       	push	r5
     292:	6f 92       	push	r6
     294:	7f 92       	push	r7
     296:	8f 92       	push	r8
     298:	9f 92       	push	r9
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	a0 97       	sbiw	r28, 0x20	; 32
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	09 8b       	std	Y+17, r16	; 0x11
     2c0:	1a 8b       	std	Y+18, r17	; 0x12
     2c2:	2b 8b       	std	Y+19, r18	; 0x13
     2c4:	3c 8b       	std	Y+20, r19	; 0x14
     2c6:	4d 8b       	std	Y+21, r20	; 0x15
     2c8:	5e 8b       	std	Y+22, r21	; 0x16
     2ca:	6f 8b       	std	Y+23, r22	; 0x17
     2cc:	78 8f       	std	Y+24, r23	; 0x18
     2ce:	89 88       	ldd	r8, Y+17	; 0x11
     2d0:	9a 88       	ldd	r9, Y+18	; 0x12
     2d2:	ab 88       	ldd	r10, Y+19	; 0x13
     2d4:	bc 88       	ldd	r11, Y+20	; 0x14
     2d6:	2d 89       	ldd	r18, Y+21	; 0x15
     2d8:	3e 89       	ldd	r19, Y+22	; 0x16
     2da:	4f 89       	ldd	r20, Y+23	; 0x17
     2dc:	58 8d       	ldd	r21, Y+24	; 0x18
     2de:	2d 8f       	std	Y+29, r18	; 0x1d
     2e0:	3e 8f       	std	Y+30, r19	; 0x1e
     2e2:	4f 8f       	std	Y+31, r20	; 0x1f
     2e4:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     2e6:	fc 01       	movw	r30, r24
     2e8:	c0 80       	ld	r12, Z
     2ea:	d1 80       	ldd	r13, Z+1	; 0x01
     2ec:	e2 80       	ldd	r14, Z+2	; 0x02
     2ee:	f3 80       	ldd	r15, Z+3	; 0x03
     2f0:	24 81       	ldd	r18, Z+4	; 0x04
     2f2:	35 81       	ldd	r19, Z+5	; 0x05
     2f4:	46 81       	ldd	r20, Z+6	; 0x06
     2f6:	57 81       	ldd	r21, Z+7	; 0x07
     2f8:	29 8f       	std	Y+25, r18	; 0x19
     2fa:	3a 8f       	std	Y+26, r19	; 0x1a
     2fc:	4b 8f       	std	Y+27, r20	; 0x1b
     2fe:	5c 8f       	std	Y+28, r21	; 0x1c
     300:	2d 8d       	ldd	r18, Y+29	; 0x1d
     302:	3e 8d       	ldd	r19, Y+30	; 0x1e
     304:	4f 8d       	ldd	r20, Y+31	; 0x1f
     306:	58 a1       	ldd	r21, Y+32	; 0x20
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     310:	2b 01       	movw	r4, r22
     312:	3c 01       	movw	r6, r24
     314:	a5 01       	movw	r20, r10
     316:	94 01       	movw	r18, r8
     318:	69 8d       	ldd	r22, Y+25	; 0x19
     31a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     31c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     31e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     320:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	c3 01       	movw	r24, r6
     32a:	b2 01       	movw	r22, r4
     32c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__addsf3>
     330:	2b 01       	movw	r4, r22
     332:	3c 01       	movw	r6, r24
     334:	a5 01       	movw	r20, r10
     336:	94 01       	movw	r18, r8
     338:	c7 01       	movw	r24, r14
     33a:	b6 01       	movw	r22, r12
     33c:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     340:	6b 01       	movw	r12, r22
     342:	7c 01       	movw	r14, r24
     344:	2d 8d       	ldd	r18, Y+29	; 0x1d
     346:	3e 8d       	ldd	r19, Y+30	; 0x1e
     348:	4f 8d       	ldd	r20, Y+31	; 0x1f
     34a:	58 a1       	ldd	r21, Y+32	; 0x20
     34c:	69 8d       	ldd	r22, Y+25	; 0x19
     34e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     350:	8b 8d       	ldd	r24, Y+27	; 0x1b
     352:	9c 8d       	ldd	r25, Y+28	; 0x1c
     354:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     358:	9b 01       	movw	r18, r22
     35a:	ac 01       	movw	r20, r24
     35c:	c7 01       	movw	r24, r14
     35e:	b6 01       	movw	r22, r12
     360:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__subsf3>
     364:	ab 01       	movw	r20, r22
     366:	bc 01       	movw	r22, r24
     368:	93 01       	movw	r18, r6
     36a:	82 01       	movw	r16, r4
     36c:	ce 01       	movw	r24, r28
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     374:	88 e0       	ldi	r24, 0x08	; 8
     376:	fe 01       	movw	r30, r28
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	de 01       	movw	r26, r28
     37c:	19 96       	adiw	r26, 0x09	; 9
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <_ZN7Complex3mulES_+0xf0>
     386:	29 85       	ldd	r18, Y+9	; 0x09
     388:	3a 85       	ldd	r19, Y+10	; 0x0a
     38a:	4b 85       	ldd	r20, Y+11	; 0x0b
     38c:	5c 85       	ldd	r21, Y+12	; 0x0c
     38e:	6d 85       	ldd	r22, Y+13	; 0x0d
     390:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     392:	8f 85       	ldd	r24, Y+15	; 0x0f
     394:	98 89       	ldd	r25, Y+16	; 0x10
     396:	a0 96       	adiw	r28, 0x20	; 32
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	bf 90       	pop	r11
     3b4:	af 90       	pop	r10
     3b6:	9f 90       	pop	r9
     3b8:	8f 90       	pop	r8
     3ba:	7f 90       	pop	r7
     3bc:	6f 90       	pop	r6
     3be:	5f 90       	pop	r5
     3c0:	4f 90       	pop	r4
     3c2:	08 95       	ret

000003c4 <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 81       	ld	r18, Z
     3c8:	31 81       	ldd	r19, Z+1	; 0x01
     3ca:	42 81       	ldd	r20, Z+2	; 0x02
     3cc:	53 81       	ldd	r21, Z+3	; 0x03
     3ce:	64 81       	ldd	r22, Z+4	; 0x04
     3d0:	75 81       	ldd	r23, Z+5	; 0x05
     3d2:	86 81       	ldd	r24, Z+6	; 0x06
     3d4:	97 81       	ldd	r25, Z+7	; 0x07
     3d6:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
     3da:	0e 94 57 11 	call	0x22ae	; 0x22ae <atan>
     3de:	08 95       	ret

000003e0 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     3e0:	85 e0       	ldi	r24, 0x05	; 5
     3e2:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     3e4:	81 b1       	in	r24, 0x01	; 1
     3e6:	8c 7f       	andi	r24, 0xFC	; 252
     3e8:	81 b9       	out	0x01, r24	; 1
     3ea:	08 95       	ret

000003ec <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3ec:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     3ee:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     3f0:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3f2:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     3f4:	06 b6       	in	r0, 0x36	; 54
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     3fa:	81 b1       	in	r24, 0x01	; 1
     3fc:	88 7f       	andi	r24, 0xF8	; 248
     3fe:	88 30       	cpi	r24, 0x08	; 8
     400:	09 f0       	breq	.+2      	; 0x404 <_ZN6EEProm4readEj+0x18>
     402:	41 c0       	rjmp	.+130    	; 0x486 <__stack+0x27>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     404:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     406:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     408:	06 b6       	in	r0, 0x36	; 54
     40a:	07 fe       	sbrs	r0, 7
     40c:	fd cf       	rjmp	.-6      	; 0x408 <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     40e:	81 b1       	in	r24, 0x01	; 1
     410:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     412:	88 31       	cpi	r24, 0x18	; 24
     414:	71 f7       	brne	.-36     	; 0x3f2 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     416:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     418:	84 e8       	ldi	r24, 0x84	; 132
     41a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     41c:	06 b6       	in	r0, 0x36	; 54
     41e:	07 fe       	sbrs	r0, 7
     420:	fd cf       	rjmp	.-6      	; 0x41c <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     422:	81 b1       	in	r24, 0x01	; 1
     424:	88 7f       	andi	r24, 0xF8	; 248
     426:	88 32       	cpi	r24, 0x28	; 40
     428:	81 f5       	brne	.+96     	; 0x48a <__stack+0x2b>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     42a:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     42c:	84 e8       	ldi	r24, 0x84	; 132
     42e:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     430:	06 b6       	in	r0, 0x36	; 54
     432:	07 fe       	sbrs	r0, 7
     434:	fd cf       	rjmp	.-6      	; 0x430 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     436:	81 b1       	in	r24, 0x01	; 1
     438:	88 7f       	andi	r24, 0xF8	; 248
     43a:	88 32       	cpi	r24, 0x28	; 40
     43c:	41 f5       	brne	.+80     	; 0x48e <__stack+0x2f>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     43e:	84 ea       	ldi	r24, 0xA4	; 164
     440:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     442:	06 b6       	in	r0, 0x36	; 54
     444:	07 fe       	sbrs	r0, 7
     446:	fd cf       	rjmp	.-6      	; 0x442 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     448:	81 b1       	in	r24, 0x01	; 1
     44a:	88 7f       	andi	r24, 0xF8	; 248
     44c:	80 31       	cpi	r24, 0x10	; 16
     44e:	09 f5       	brne	.+66     	; 0x492 <__stack+0x33>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     450:	81 ea       	ldi	r24, 0xA1	; 161
     452:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     454:	84 e8       	ldi	r24, 0x84	; 132
     456:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     458:	06 b6       	in	r0, 0x36	; 54
     45a:	07 fe       	sbrs	r0, 7
     45c:	fd cf       	rjmp	.-6      	; 0x458 <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     45e:	81 b1       	in	r24, 0x01	; 1
     460:	88 7f       	andi	r24, 0xF8	; 248
     462:	80 34       	cpi	r24, 0x40	; 64
     464:	c1 f4       	brne	.+48     	; 0x496 <__stack+0x37>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     466:	84 e8       	ldi	r24, 0x84	; 132
     468:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     46a:	06 b6       	in	r0, 0x36	; 54
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <__stack+0xb>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     470:	81 b1       	in	r24, 0x01	; 1
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	88 35       	cpi	r24, 0x58	; 88
     476:	89 f4       	brne	.+34     	; 0x49a <__stack+0x3b>
		return FALSE;

	//Read the data
	data=TWDR;
     478:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     47a:	94 e9       	ldi	r25, 0x94	; 148
     47c:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     47e:	06 b6       	in	r0, 0x36	; 54
     480:	04 fc       	sbrc	r0, 4
     482:	fd cf       	rjmp	.-6      	; 0x47e <__stack+0x1f>
     484:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     49a:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     49c:	08 95       	ret

0000049e <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	c4 56       	subi	r28, 0x64	; 100
     4b4:	d1 09       	sbc	r29, r1
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	6c 01       	movw	r12, r24
     4c2:	ce 01       	movw	r24, r28
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     4cc:	b8 01       	movw	r22, r16
     4ce:	c6 01       	movw	r24, r12
     4d0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN6EEProm4readEj>
     4d4:	f7 01       	movw	r30, r14
     4d6:	81 93       	st	Z+, r24
     4d8:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     4da:	8f 3f       	cpi	r24, 0xFF	; 255
     4dc:	81 f4       	brne	.+32     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4de:	32 97       	sbiw	r30, 0x02	; 2
     4e0:	20 81       	ld	r18, Z
     4e2:	2f 3f       	cpi	r18, 0xFF	; 255
     4e4:	61 f4       	brne	.+24     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4e6:	31 97       	sbiw	r30, 0x01	; 1
     4e8:	20 81       	ld	r18, Z
     4ea:	2f 3f       	cpi	r18, 0xFF	; 255
     4ec:	41 f4       	brne	.+16     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	20 81       	ld	r18, Z
     4f2:	2f 3f       	cpi	r18, 0xFF	; 255
     4f4:	21 f4       	brne	.+8      	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	8f 3f       	cpi	r24, 0xFF	; 255
     4fc:	19 f0       	breq	.+6      	; 0x504 <_ZN6EEProm7readallEv+0x66>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4fe:	0f 5f       	subi	r16, 0xFF	; 255
     500:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     502:	e4 cf       	rjmp	.-56     	; 0x4cc <_ZN6EEProm7readallEv+0x2e>
	return eeprom_mem;
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	cc 59       	subi	r28, 0x9C	; 156
     50a:	df 4f       	sbci	r29, 0xFF	; 255
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	cf 90       	pop	r12
     526:	08 95       	ret

00000528 <_Z12print_statesiP7ComplexPc>:

Serial s;
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	7c 01       	movw	r14, r24
     536:	06 2f       	mov	r16, r22
     538:	17 2f       	mov	r17, r23
	s.writestrln(message);
     53a:	ba 01       	movw	r22, r20
     53c:	8b ee       	ldi	r24, 0xEB	; 235
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     544:	1e 14       	cp	r1, r14
     546:	1f 04       	cpc	r1, r15
     548:	0c f0       	brlt	.+2      	; 0x54c <_Z12print_statesiP7ComplexPc+0x24>
     54a:	47 c0       	rjmp	.+142    	; 0x5da <_Z12print_statesiP7ComplexPc+0xb2>
     54c:	c0 2f       	mov	r28, r16
     54e:	d1 2f       	mov	r29, r17
     550:	00 e0       	ldi	r16, 0x00	; 0
     552:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
     554:	6a e6       	ldi	r22, 0x6A	; 106
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	8b ee       	ldi	r24, 0xEB	; 235
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN6Serial8writestrEPc>
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	4a e7       	ldi	r20, 0x7A	; 122
     566:	54 e4       	ldi	r21, 0x44	; 68
     568:	68 81       	ld	r22, Y
     56a:	79 81       	ldd	r23, Y+1	; 0x01
     56c:	8a 81       	ldd	r24, Y+2	; 0x02
     56e:	9b 81       	ldd	r25, Y+3	; 0x03
     570:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     574:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__fixsfsi>
     578:	8a ee       	ldi	r24, 0xEA	; 234
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_ZN4QEPU5Utils7int2strEi>
     580:	bc 01       	movw	r22, r24
     582:	8b ee       	ldi	r24, 0xEB	; 235
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
     58a:	6e e6       	ldi	r22, 0x6E	; 110
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	8b ee       	ldi	r24, 0xEB	; 235
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN6Serial8writestrEPc>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	4a e7       	ldi	r20, 0x7A	; 122
     59c:	54 e4       	ldi	r21, 0x44	; 68
     59e:	6c 81       	ldd	r22, Y+4	; 0x04
     5a0:	7d 81       	ldd	r23, Y+5	; 0x05
     5a2:	8e 81       	ldd	r24, Y+6	; 0x06
     5a4:	9f 81       	ldd	r25, Y+7	; 0x07
     5a6:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     5aa:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__fixsfsi>
     5ae:	8a ee       	ldi	r24, 0xEA	; 234
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_ZN4QEPU5Utils7int2strEi>
     5b6:	bc 01       	movw	r22, r24
     5b8:	8b ee       	ldi	r24, 0xEB	; 235
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     5c0:	6a ed       	ldi	r22, 0xDA	; 218
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	8b ee       	ldi	r24, 0xEB	; 235
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN6Serial10writestrlnEPc>
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     5cc:	0f 5f       	subi	r16, 0xFF	; 255
     5ce:	1f 4f       	sbci	r17, 0xFF	; 255
     5d0:	28 96       	adiw	r28, 0x08	; 8
     5d2:	0e 15       	cp	r16, r14
     5d4:	1f 05       	cpc	r17, r15
     5d6:	09 f0       	breq	.+2      	; 0x5da <_Z12print_statesiP7ComplexPc+0xb2>
     5d8:	bd cf       	rjmp	.-134    	; 0x554 <_Z12print_statesiP7ComplexPc+0x2c>
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	08 95       	ret

000005e8 <_ZN5Gates10setup_seedEv>:

void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 51 19 	call	0x32a2	; 0x32a2 <__eerd_word_m16>
     5f0:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <srand>
	eeprom_write_word(&randinit,rand()%10000);
     5f4:	0e 94 11 16 	call	0x2c22	; 0x2c22 <rand>
     5f8:	60 e1       	ldi	r22, 0x10	; 16
     5fa:	77 e2       	ldi	r23, 0x27	; 39
     5fc:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__divmodhi4>
     600:	bc 01       	movw	r22, r24
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 57 19 	call	0x32ae	; 0x32ae <__eewr_word_m16>
     60a:	08 95       	ret

0000060c <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}
     60c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN5Gates10setup_seedEv>
     610:	08 95       	ret

00000612 <_ZN5Gates5touchEd>:
void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

int Gates::touch(double probability){
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	6a 01       	movw	r12, r20
     620:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     622:	0e 94 11 16 	call	0x2c22	; 0x2c22 <rand>
     626:	ec 01       	movw	r28, r24
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	3e ef       	ldi	r19, 0xFE	; 254
     62c:	4f ef       	ldi	r20, 0xFF	; 255
     62e:	56 e4       	ldi	r21, 0x46	; 70
     630:	c7 01       	movw	r24, r14
     632:	b6 01       	movw	r22, r12
     634:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     638:	6b 01       	movw	r12, r22
     63a:	7c 01       	movw	r14, r24
     63c:	be 01       	movw	r22, r28
     63e:	88 27       	eor	r24, r24
     640:	77 fd       	sbrc	r23, 7
     642:	80 95       	com	r24
     644:	98 2f       	mov	r25, r24
     646:	0e 94 21 12 	call	0x2442	; 0x2442 <__floatsisf>
     64a:	9b 01       	movw	r18, r22
     64c:	ac 01       	movw	r20, r24
     64e:	c1 e0       	ldi	r28, 0x01	; 1
     650:	d0 e0       	ldi	r29, 0x00	; 0
     652:	c7 01       	movw	r24, r14
     654:	b6 01       	movw	r22, r12
     656:	0e 94 4a 13 	call	0x2694	; 0x2694 <__gesf2>
     65a:	88 23       	and	r24, r24
     65c:	14 f4       	brge	.+4      	; 0x662 <_ZN5Gates5touchEd+0x50>
     65e:	c0 e0       	ldi	r28, 0x00	; 0
     660:	d0 e0       	ldi	r29, 0x00	; 0
}
     662:	ce 01       	movw	r24, r28
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <_ZN5Gates17reverse_kroneckerEP7Complexi>:
int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
	return result;
}

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     672:	2f 92       	push	r2
     674:	3f 92       	push	r3
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	a4 97       	sbiw	r28, 0x24	; 36
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	6b 01       	movw	r12, r22
     6a8:	5a 01       	movw	r10, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     6aa:	ba 01       	movw	r22, r20
     6ac:	88 27       	eor	r24, r24
     6ae:	77 fd       	sbrc	r23, 7
     6b0:	80 95       	com	r24
     6b2:	98 2f       	mov	r25, r24
     6b4:	0e 94 21 12 	call	0x2442	; 0x2442 <__floatsisf>
     6b8:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <log>
     6bc:	28 e1       	ldi	r18, 0x18	; 24
     6be:	32 e7       	ldi	r19, 0x72	; 114
     6c0:	41 e3       	ldi	r20, 0x31	; 49
     6c2:	5f e3       	ldi	r21, 0x3F	; 63
     6c4:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
     6c8:	2b 01       	movw	r4, r22
     6ca:	3c 01       	movw	r6, r24
     6cc:	9b 01       	movw	r18, r22
     6ce:	ac 01       	movw	r20, r24
     6d0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__addsf3>
     6d4:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__fixsfsi>
     6d8:	69 a3       	std	Y+33, r22	; 0x21
     6da:	7a a3       	std	Y+34, r23	; 0x22
     6dc:	8b a3       	std	Y+35, r24	; 0x23
     6de:	9c a3       	std	Y+36, r25	; 0x24
     6e0:	09 a1       	ldd	r16, Y+33	; 0x21
     6e2:	1a a1       	ldd	r17, Y+34	; 0x22
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
     6e4:	c8 01       	movw	r24, r16
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
     6f6:	4c 01       	movw	r8, r24
		
	for(int i=0;i<kron_size;i++)
     6f8:	1a 14       	cp	r1, r10
     6fa:	1b 04       	cpc	r1, r11
     6fc:	0c f0       	brlt	.+2      	; 0x700 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x8e>
     6fe:	a4 c0       	rjmp	.+328    	; 0x848 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1d6>
		if(kron[i].re==1){
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e8       	ldi	r20, 0x80	; 128
     706:	5f e3       	ldi	r21, 0x3F	; 63
     708:	f6 01       	movw	r30, r12
     70a:	60 81       	ld	r22, Z
     70c:	71 81       	ldd	r23, Z+1	; 0x01
     70e:	82 81       	ldd	r24, Z+2	; 0x02
     710:	93 81       	ldd	r25, Z+3	; 0x03
     712:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     716:	81 11       	cpse	r24, r1
     718:	8e c0       	rjmp	.+284    	; 0x836 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1c4>
     71a:	11 c0       	rjmp	.+34     	; 0x73e <_ZN5Gates17reverse_kroneckerEP7Complexi+0xcc>
     71c:	f8 e0       	ldi	r31, 0x08	; 8
     71e:	cf 0e       	add	r12, r31
     720:	d1 1c       	adc	r13, r1
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e8       	ldi	r20, 0x80	; 128
     728:	5f e3       	ldi	r21, 0x3F	; 63
     72a:	f6 01       	movw	r30, r12
     72c:	60 81       	ld	r22, Z
     72e:	71 81       	ldd	r23, Z+1	; 0x01
     730:	82 81       	ldd	r24, Z+2	; 0x02
     732:	93 81       	ldd	r25, Z+3	; 0x03
     734:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     738:	81 11       	cpse	r24, r1
     73a:	7f c0       	rjmp	.+254    	; 0x83a <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1c8>
     73c:	02 c0       	rjmp	.+4      	; 0x742 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xd0>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     73e:	e1 2c       	mov	r14, r1
     740:	f1 2c       	mov	r15, r1
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
     742:	c3 01       	movw	r24, r6
     744:	b2 01       	movw	r22, r4
     746:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__fixsfsi>
     74a:	ab 01       	movw	r20, r22
     74c:	b7 01       	movw	r22, r14
     74e:	8a ee       	ldi	r24, 0xEA	; 234
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN4QEPU5Utils10int2binstrEii>
     756:	1c 01       	movw	r2, r24
			s.writestrln(toBin);
     758:	bc 01       	movw	r22, r24
     75a:	8b ee       	ldi	r24, 0xEB	; 235
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN6Serial10writestrlnEPc>
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     762:	10 16       	cp	r1, r16
     764:	11 06       	cpc	r1, r17
     766:	0c f0       	brlt	.+2      	; 0x76a <_ZN5Gates17reverse_kroneckerEP7Complexi+0xf8>
     768:	6f c0       	rjmp	.+222    	; 0x848 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1d6>
     76a:	71 01       	movw	r14, r2
     76c:	54 01       	movw	r10, r8
     76e:	64 01       	movw	r12, r8
     770:	f8 e0       	ldi	r31, 0x08	; 8
     772:	cf 0e       	add	r12, r31
     774:	d1 1c       	adc	r13, r1
     776:	69 a0       	ldd	r6, Y+33	; 0x21
     778:	7a a0       	ldd	r7, Y+34	; 0x22
     77a:	62 0c       	add	r6, r2
     77c:	73 1c       	adc	r7, r3
				if(toBin[j]=='1'){
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     77e:	68 94       	set
     780:	33 24       	eor	r3, r3
     782:	33 f8       	bld	r3, 3
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			s.writestrln(toBin);
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
				if(toBin[j]=='1'){
     784:	f7 01       	movw	r30, r14
     786:	81 91       	ld	r24, Z+
     788:	7f 01       	movw	r14, r30
     78a:	81 33       	cpi	r24, 0x31	; 49
     78c:	29 f5       	brne	.+74     	; 0x7d8 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x166>
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
     78e:	00 e0       	ldi	r16, 0x00	; 0
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	98 01       	movw	r18, r16
     794:	b9 01       	movw	r22, r18
     796:	a8 01       	movw	r20, r16
     798:	ce 01       	movw	r24, r28
     79a:	49 96       	adiw	r24, 0x19	; 25
     79c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     7a0:	fe 01       	movw	r30, r28
     7a2:	79 96       	adiw	r30, 0x19	; 25
     7a4:	d5 01       	movw	r26, r10
     7a6:	83 2d       	mov	r24, r3
     7a8:	01 90       	ld	r0, Z+
     7aa:	0d 92       	st	X+, r0
     7ac:	8a 95       	dec	r24
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x136>
     7b0:	00 e0       	ldi	r16, 0x00	; 0
     7b2:	10 e0       	ldi	r17, 0x00	; 0
     7b4:	98 01       	movw	r18, r16
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	60 e8       	ldi	r22, 0x80	; 128
     7bc:	7f e3       	ldi	r23, 0x3F	; 63
     7be:	ce 01       	movw	r24, r28
     7c0:	41 96       	adiw	r24, 0x11	; 17
     7c2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     7c6:	fe 01       	movw	r30, r28
     7c8:	71 96       	adiw	r30, 0x11	; 17
     7ca:	d6 01       	movw	r26, r12
     7cc:	83 2d       	mov	r24, r3
     7ce:	01 90       	ld	r0, Z+
     7d0:	0d 92       	st	X+, r0
     7d2:	8a 95       	dec	r24
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <_ZN5Gates17reverse_kroneckerEP7Complexi+0x15c>
     7d6:	24 c0       	rjmp	.+72     	; 0x820 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1ae>
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     7d8:	00 e0       	ldi	r16, 0x00	; 0
     7da:	10 e0       	ldi	r17, 0x00	; 0
     7dc:	98 01       	movw	r18, r16
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	60 e8       	ldi	r22, 0x80	; 128
     7e4:	7f e3       	ldi	r23, 0x3F	; 63
     7e6:	ce 01       	movw	r24, r28
     7e8:	09 96       	adiw	r24, 0x09	; 9
     7ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     7ee:	fe 01       	movw	r30, r28
     7f0:	39 96       	adiw	r30, 0x09	; 9
     7f2:	d5 01       	movw	r26, r10
     7f4:	83 2d       	mov	r24, r3
     7f6:	01 90       	ld	r0, Z+
     7f8:	0d 92       	st	X+, r0
     7fa:	8a 95       	dec	r24
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x184>
     7fe:	00 e0       	ldi	r16, 0x00	; 0
     800:	10 e0       	ldi	r17, 0x00	; 0
     802:	98 01       	movw	r18, r16
     804:	b9 01       	movw	r22, r18
     806:	a8 01       	movw	r20, r16
     808:	ce 01       	movw	r24, r28
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     810:	fe 01       	movw	r30, r28
     812:	31 96       	adiw	r30, 0x01	; 1
     814:	d6 01       	movw	r26, r12
     816:	83 2d       	mov	r24, r3
     818:	01 90       	ld	r0, Z+
     81a:	0d 92       	st	X+, r0
     81c:	8a 95       	dec	r24
     81e:	e1 f7       	brne	.-8      	; 0x818 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a6>
     820:	f0 e1       	ldi	r31, 0x10	; 16
     822:	af 0e       	add	r10, r31
     824:	b1 1c       	adc	r11, r1
     826:	80 e1       	ldi	r24, 0x10	; 16
     828:	c8 0e       	add	r12, r24
     82a:	d1 1c       	adc	r13, r1
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,log(kron_size)/log(2));
			s.writestrln(toBin);
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=0;j<reversed_kron_size;j++){
     82c:	e6 14       	cp	r14, r6
     82e:	f7 04       	cpc	r15, r7
     830:	09 f0       	breq	.+2      	; 0x834 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1c2>
     832:	a8 cf       	rjmp	.-176    	; 0x784 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x112>
     834:	09 c0       	rjmp	.+18     	; 0x848 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1d6>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     836:	e1 2c       	mov	r14, r1
     838:	f1 2c       	mov	r15, r1
     83a:	ef ef       	ldi	r30, 0xFF	; 255
     83c:	ee 1a       	sub	r14, r30
     83e:	fe 0a       	sbc	r15, r30
     840:	ea 14       	cp	r14, r10
     842:	fb 04       	cpc	r15, r11
     844:	09 f0       	breq	.+2      	; 0x848 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1d6>
     846:	6a cf       	rjmp	.-300    	; 0x71c <_ZN5Gates17reverse_kroneckerEP7Complexi+0xaa>
				}
				index_rev_kro+=2;
			}
			break;
		}
	print_states(reversed_kron_size,reversed_kronecker,"Reversed kronecker AFTER mul: ");
     848:	45 e7       	ldi	r20, 0x75	; 117
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	b4 01       	movw	r22, r8
     84e:	89 a1       	ldd	r24, Y+33	; 0x21
     850:	9a a1       	ldd	r25, Y+34	; 0x22
     852:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	return reversed_kronecker;
}
     856:	c4 01       	movw	r24, r8
     858:	a4 96       	adiw	r28, 0x24	; 36
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	bf 90       	pop	r11
     876:	af 90       	pop	r10
     878:	9f 90       	pop	r9
     87a:	8f 90       	pop	r8
     87c:	7f 90       	pop	r7
     87e:	6f 90       	pop	r6
     880:	5f 90       	pop	r5
     882:	4f 90       	pop	r4
     884:	3f 90       	pop	r3
     886:	2f 90       	pop	r2
     888:	08 95       	ret

0000088a <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     88a:	2f 92       	push	r2
     88c:	3f 92       	push	r3
     88e:	4f 92       	push	r4
     890:	5f 92       	push	r5
     892:	6f 92       	push	r6
     894:	7f 92       	push	r7
     896:	8f 92       	push	r8
     898:	9f 92       	push	r9
     89a:	af 92       	push	r10
     89c:	bf 92       	push	r11
     89e:	cf 92       	push	r12
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	28 97       	sbiw	r28, 0x08	; 8
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	7c 01       	movw	r14, r24
     8c0:	5b 01       	movw	r10, r22
     8c2:	4a 01       	movw	r8, r20
     8c4:	3e 83       	std	Y+6, r19	; 0x06
     8c6:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     8c8:	41 30       	cpi	r20, 0x01	; 1
     8ca:	51 05       	cpc	r21, r1
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <_ZN5Gates9kroneckerEP7Complexii+0x46>
     8ce:	b1 c0       	rjmp	.+354    	; 0xa32 <_ZN5Gates9kroneckerEP7Complexii+0x1a8>
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     8d0:	14 16       	cp	r1, r20
     8d2:	15 06       	cpc	r1, r21
     8d4:	0c f0       	brlt	.+2      	; 0x8d8 <_ZN5Gates9kroneckerEP7Complexii+0x4e>
     8d6:	b0 c0       	rjmp	.+352    	; 0xa38 <_ZN5Gates9kroneckerEP7Complexii+0x1ae>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	01 e0       	ldi	r16, 0x01	; 1
     8de:	10 e0       	ldi	r17, 0x00	; 0
     8e0:	00 0f       	add	r16, r16
     8e2:	11 1f       	adc	r17, r17
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	88 15       	cp	r24, r8
     8e8:	99 05       	cpc	r25, r9
     8ea:	d1 f7       	brne	.-12     	; 0x8e0 <_ZN5Gates9kroneckerEP7Complexii+0x56>
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     8ec:	c8 01       	movw	r24, r16
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
     8fe:	89 83       	std	Y+1, r24	; 0x01
     900:	9a 83       	std	Y+2, r25	; 0x02
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     902:	10 16       	cp	r1, r16
     904:	11 06       	cpc	r1, r17
     906:	0c f4       	brge	.+2      	; 0x90a <_ZN5Gates9kroneckerEP7Complexii+0x80>
     908:	9f c0       	rjmp	.+318    	; 0xa48 <_ZN5Gates9kroneckerEP7Complexii+0x1be>
     90a:	40 c0       	rjmp	.+128    	; 0x98c <_ZN5Gates9kroneckerEP7Complexii+0x102>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     90c:	2e 16       	cp	r2, r30
     90e:	3f 06       	cpc	r3, r31
     910:	29 f4       	brne	.+10     	; 0x91c <_ZN5Gates9kroneckerEP7Complexii+0x92>
     912:	9f ef       	ldi	r25, 0xFF	; 255
     914:	49 1a       	sub	r4, r25
     916:	59 0a       	sbc	r5, r25
     918:	eb 81       	ldd	r30, Y+3	; 0x03
     91a:	fc 81       	ldd	r31, Y+4	; 0x04
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     91c:	7f 01       	movw	r14, r30
     91e:	af ef       	ldi	r26, 0xFF	; 255
     920:	ea 1a       	sub	r14, r26
     922:	fa 0a       	sbc	r15, r26
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	ee 0f       	add	r30, r30
     92a:	ff 1f       	adc	r31, r31
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	ea 0d       	add	r30, r10
     932:	fb 1d       	adc	r31, r11
     934:	00 81       	ld	r16, Z
     936:	11 81       	ldd	r17, Z+1	; 0x01
     938:	22 81       	ldd	r18, Z+2	; 0x02
     93a:	33 81       	ldd	r19, Z+3	; 0x03
     93c:	44 81       	ldd	r20, Z+4	; 0x04
     93e:	55 81       	ldd	r21, Z+5	; 0x05
     940:	66 81       	ldd	r22, Z+6	; 0x06
     942:	77 81       	ldd	r23, Z+7	; 0x07
     944:	c2 01       	movw	r24, r4
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	8a 0d       	add	r24, r10
     954:	9b 1d       	adc	r25, r11
     956:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     95a:	ef 81       	ldd	r30, Y+7	; 0x07
     95c:	f8 85       	ldd	r31, Y+8	; 0x08
     95e:	20 83       	st	Z, r18
     960:	31 83       	std	Z+1, r19	; 0x01
     962:	42 83       	std	Z+2, r20	; 0x02
     964:	53 83       	std	Z+3, r21	; 0x03
     966:	64 83       	std	Z+4, r22	; 0x04
     968:	75 83       	std	Z+5, r23	; 0x05
     96a:	86 83       	std	Z+6, r24	; 0x06
     96c:	97 83       	std	Z+7, r25	; 0x07
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     96e:	ff ef       	ldi	r31, 0xFF	; 255
     970:	6f 1a       	sub	r6, r31
     972:	7f 0a       	sbc	r7, r31
     974:	8f 81       	ldd	r24, Y+7	; 0x07
     976:	98 85       	ldd	r25, Y+8	; 0x08
     978:	08 96       	adiw	r24, 0x08	; 8
     97a:	98 87       	std	Y+8, r25	; 0x08
     97c:	8f 83       	std	Y+7, r24	; 0x07
     97e:	6c 14       	cp	r6, r12
     980:	7d 04       	cpc	r7, r13
     982:	14 f4       	brge	.+4      	; 0x988 <_ZN5Gates9kroneckerEP7Complexii+0xfe>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     984:	f7 01       	movw	r30, r14
     986:	c2 cf       	rjmp	.-124    	; 0x90c <_ZN5Gates9kroneckerEP7Complexii+0x82>
     988:	86 01       	movw	r16, r12
     98a:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     98c:	ad 81       	ldd	r26, Y+5	; 0x05
     98e:	be 81       	ldd	r27, Y+6	; 0x06
     990:	ab 2b       	or	r26, r27
     992:	b1 f5       	brne	.+108    	; 0xa00 <_ZN5Gates9kroneckerEP7Complexii+0x176>
     994:	44 c0       	rjmp	.+136    	; 0xa1e <_ZN5Gates9kroneckerEP7Complexii+0x194>
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     996:	58 01       	movw	r10, r16
     998:	f8 01       	movw	r30, r16
     99a:	40 81       	ld	r20, Z
     99c:	51 81       	ldd	r21, Z+1	; 0x01
     99e:	62 81       	ldd	r22, Z+2	; 0x02
     9a0:	73 81       	ldd	r23, Z+3	; 0x03
     9a2:	c7 01       	movw	r24, r14
     9a4:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Gates5touchEd>
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	09 f5       	brne	.+66     	; 0x9ee <_ZN5Gates9kroneckerEP7Complexii+0x164>
     9ac:	84 01       	movw	r16, r8
     9ae:	c8 01       	movw	r24, r16
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	86 0d       	add	r24, r6
     9be:	97 1d       	adc	r25, r7
     9c0:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     9c2:	10 82       	st	Z, r1
     9c4:	11 82       	std	Z+1, r1	; 0x01
     9c6:	12 82       	std	Z+2, r1	; 0x02
     9c8:	13 82       	std	Z+3, r1	; 0x03
     9ca:	14 82       	std	Z+4, r1	; 0x04
     9cc:	15 82       	std	Z+5, r1	; 0x05
     9ce:	16 82       	std	Z+6, r1	; 0x06
     9d0:	17 82       	std	Z+7, r1	; 0x07
     9d2:	38 96       	adiw	r30, 0x08	; 8
     9d4:	e8 17       	cp	r30, r24
     9d6:	f9 07       	cpc	r31, r25
     9d8:	a1 f7       	brne	.-24     	; 0x9c2 <_ZN5Gates9kroneckerEP7Complexii+0x138>
				kronvec[i].re=binary_touch;
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	a0 e8       	ldi	r26, 0x80	; 128
     9e0:	bf e3       	ldi	r27, 0x3F	; 63
     9e2:	f5 01       	movw	r30, r10
     9e4:	80 83       	st	Z, r24
     9e6:	91 83       	std	Z+1, r25	; 0x01
     9e8:	a2 83       	std	Z+2, r26	; 0x02
     9ea:	b3 83       	std	Z+3, r27	; 0x03
     9ec:	18 c0       	rjmp	.+48     	; 0xa1e <_ZN5Gates9kroneckerEP7Complexii+0x194>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     9ee:	ff ef       	ldi	r31, 0xFF	; 255
     9f0:	cf 1a       	sub	r12, r31
     9f2:	df 0a       	sbc	r13, r31
     9f4:	08 5f       	subi	r16, 0xF8	; 248
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	c8 14       	cp	r12, r8
     9fa:	d9 04       	cpc	r13, r9
     9fc:	61 f6       	brne	.-104    	; 0x996 <_ZN5Gates9kroneckerEP7Complexii+0x10c>
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <_ZN5Gates9kroneckerEP7Complexii+0x180>
     a00:	49 80       	ldd	r4, Y+1	; 0x01
     a02:	5a 80       	ldd	r5, Y+2	; 0x02
     a04:	21 2c       	mov	r2, r1
     a06:	31 2c       	mov	r3, r1
     a08:	48 01       	movw	r8, r16
     a0a:	18 14       	cp	r1, r8
     a0c:	19 04       	cpc	r1, r9
     a0e:	ec f7       	brge	.-6      	; 0xa0a <_ZN5Gates9kroneckerEP7Complexii+0x180>
     a10:	64 2c       	mov	r6, r4
     a12:	75 2c       	mov	r7, r5
     a14:	04 2d       	mov	r16, r4
     a16:	15 2d       	mov	r17, r5
     a18:	c2 2c       	mov	r12, r2
     a1a:	d3 2c       	mov	r13, r3
     a1c:	bc cf       	rjmp	.-136    	; 0x996 <_ZN5Gates9kroneckerEP7Complexii+0x10c>
				kronvec[i].re=binary_touch;
				binary_touch=0;
				break;
			}
	}
	print_states(kron_size,kronvec,"Kronecker: ");
     a1e:	44 e9       	ldi	r20, 0x94	; 148
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	69 81       	ldd	r22, Y+1	; 0x01
     a24:	7a 81       	ldd	r23, Y+2	; 0x02
     a26:	c8 01       	movw	r24, r16
     a28:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	return kronvec;
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	1d c0       	rjmp	.+58     	; 0xa6c <_ZN5Gates9kroneckerEP7Complexii+0x1e2>
	print_states(reversed_kron_size,reversed_kronecker,"Reversed kronecker AFTER mul: ");
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     a32:	86 2f       	mov	r24, r22
     a34:	9b 2d       	mov	r25, r11
     a36:	1a c0       	rjmp	.+52     	; 0xa6c <_ZN5Gates9kroneckerEP7Complexii+0x1e2>
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     a38:	88 e0       	ldi	r24, 0x08	; 8
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	01 e0       	ldi	r16, 0x01	; 1
     a46:	10 e0       	ldi	r17, 0x00	; 0
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     a48:	14 01       	movw	r2, r8
     a4a:	22 0c       	add	r2, r2
     a4c:	33 1c       	adc	r3, r3
     a4e:	c9 80       	ldd	r12, Y+1	; 0x01
     a50:	da 80       	ldd	r13, Y+2	; 0x02
     a52:	f4 01       	movw	r30, r8
     a54:	61 2c       	mov	r6, r1
     a56:	71 2c       	mov	r7, r1
     a58:	41 2c       	mov	r4, r1
     a5a:	51 2c       	mov	r5, r1
     a5c:	8b 82       	std	Y+3, r8	; 0x03
     a5e:	9c 82       	std	Y+4, r9	; 0x04
     a60:	c6 01       	movw	r24, r12
     a62:	68 01       	movw	r12, r16
     a64:	47 01       	movw	r8, r14
     a66:	98 87       	std	Y+8, r25	; 0x08
     a68:	8f 83       	std	Y+7, r24	; 0x07
     a6a:	50 cf       	rjmp	.-352    	; 0x90c <_ZN5Gates9kroneckerEP7Complexii+0x82>
				break;
			}
	}
	print_states(kron_size,kronvec,"Kronecker: ");
	return kronvec;
}
     a6c:	28 96       	adiw	r28, 0x08	; 8
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	7f 90       	pop	r7
     a92:	6f 90       	pop	r6
     a94:	5f 90       	pop	r5
     a96:	4f 90       	pop	r4
     a98:	3f 90       	pop	r3
     a9a:	2f 90       	pop	r2
     a9c:	08 95       	ret

00000a9e <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     a9e:	2f 92       	push	r2
     aa0:	3f 92       	push	r3
     aa2:	4f 92       	push	r4
     aa4:	5f 92       	push	r5
     aa6:	6f 92       	push	r6
     aa8:	7f 92       	push	r7
     aaa:	8f 92       	push	r8
     aac:	9f 92       	push	r9
     aae:	af 92       	push	r10
     ab0:	bf 92       	push	r11
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	28 97       	sbiw	r28, 0x08	; 8
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	9e 83       	std	Y+6, r25	; 0x06
     ad4:	8d 83       	std	Y+5, r24	; 0x05
     ad6:	7a 83       	std	Y+2, r23	; 0x02
     ad8:	69 83       	std	Y+1, r22	; 0x01
     ada:	04 2f       	mov	r16, r20
     adc:	15 2f       	mov	r17, r21
     ade:	c2 2e       	mov	r12, r18
     ae0:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     ae2:	cb 01       	movw	r24, r22
     ae4:	82 95       	swap	r24
     ae6:	92 95       	swap	r25
     ae8:	90 7f       	andi	r25, 0xF0	; 240
     aea:	98 27       	eor	r25, r24
     aec:	80 7f       	andi	r24, 0xF0	; 240
     aee:	98 27       	eor	r25, r24
     af0:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
     af4:	8b 83       	std	Y+3, r24	; 0x03
     af6:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     af8:	29 80       	ldd	r2, Y+1	; 0x01
     afa:	3a 80       	ldd	r3, Y+2	; 0x02
     afc:	22 0c       	add	r2, r2
     afe:	33 1c       	adc	r3, r3
     b00:	12 14       	cp	r1, r2
     b02:	13 04       	cpc	r1, r3
     b04:	0c f0       	brlt	.+2      	; 0xb08 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     b06:	ac c0       	rjmp	.+344    	; 0xc60 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     b08:	a8 2e       	mov	r10, r24
     b0a:	b9 2e       	mov	r11, r25
     b0c:	e0 2e       	mov	r14, r16
     b0e:	f1 2e       	mov	r15, r17
     b10:	0c 2d       	mov	r16, r12
     b12:	1d 2d       	mov	r17, r13
     b14:	81 2c       	mov	r8, r1
     b16:	91 2c       	mov	r9, r1
     b18:	b8 86       	std	Y+8, r11	; 0x08
     b1a:	af 82       	std	Y+7, r10	; 0x07
     b1c:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     b1e:	f7 01       	movw	r30, r14
     b20:	41 90       	ld	r4, Z+
     b22:	51 90       	ld	r5, Z+
     b24:	7f 01       	movw	r14, r30
     b26:	66 24       	eor	r6, r6
     b28:	57 fc       	sbrc	r5, 7
     b2a:	60 94       	com	r6
     b2c:	76 2c       	mov	r7, r6
     b2e:	c3 01       	movw	r24, r6
     b30:	b2 01       	movw	r22, r4
     b32:	0e 94 21 12 	call	0x2442	; 0x2442 <__floatsisf>
     b36:	2b ed       	ldi	r18, 0xDB	; 219
     b38:	3f e0       	ldi	r19, 0x0F	; 15
     b3a:	49 e4       	ldi	r20, 0x49	; 73
     b3c:	50 e4       	ldi	r21, 0x40	; 64
     b3e:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	44 eb       	ldi	r20, 0xB4	; 180
     b48:	53 e4       	ldi	r21, 0x43	; 67
     b4a:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
     b4e:	0e 94 83 11 	call	0x2306	; 0x2306 <cos>
     b52:	ef 81       	ldd	r30, Y+7	; 0x07
     b54:	f8 85       	ldd	r31, Y+8	; 0x08
     b56:	60 83       	st	Z, r22
     b58:	71 83       	std	Z+1, r23	; 0x01
     b5a:	82 83       	std	Z+2, r24	; 0x02
     b5c:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     b5e:	c3 01       	movw	r24, r6
     b60:	b2 01       	movw	r22, r4
     b62:	0e 94 21 12 	call	0x2442	; 0x2442 <__floatsisf>
     b66:	2b ed       	ldi	r18, 0xDB	; 219
     b68:	3f e0       	ldi	r19, 0x0F	; 15
     b6a:	49 e4       	ldi	r20, 0x49	; 73
     b6c:	50 e4       	ldi	r21, 0x40	; 64
     b6e:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	44 eb       	ldi	r20, 0xB4	; 180
     b78:	53 e4       	ldi	r21, 0x43	; 67
     b7a:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
     b7e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <sin>
     b82:	2b 01       	movw	r4, r22
     b84:	3c 01       	movw	r6, r24
     b86:	58 01       	movw	r10, r16
     b88:	f8 01       	movw	r30, r16
     b8a:	61 91       	ld	r22, Z+
     b8c:	71 91       	ld	r23, Z+
     b8e:	8f 01       	movw	r16, r30
     b90:	88 27       	eor	r24, r24
     b92:	77 fd       	sbrc	r23, 7
     b94:	80 95       	com	r24
     b96:	98 2f       	mov	r25, r24
     b98:	0e 94 21 12 	call	0x2442	; 0x2442 <__floatsisf>
     b9c:	2b ed       	ldi	r18, 0xDB	; 219
     b9e:	3f e0       	ldi	r19, 0x0F	; 15
     ba0:	49 e4       	ldi	r20, 0x49	; 73
     ba2:	50 e4       	ldi	r21, 0x40	; 64
     ba4:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	44 e3       	ldi	r20, 0x34	; 52
     bae:	53 e4       	ldi	r21, 0x43	; 67
     bb0:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
     bb4:	0e 94 83 11 	call	0x2306	; 0x2306 <cos>
     bb8:	9b 01       	movw	r18, r22
     bba:	ac 01       	movw	r20, r24
     bbc:	c3 01       	movw	r24, r6
     bbe:	b2 01       	movw	r22, r4
     bc0:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     bc4:	ef 81       	ldd	r30, Y+7	; 0x07
     bc6:	f8 85       	ldd	r31, Y+8	; 0x08
     bc8:	60 87       	std	Z+8, r22	; 0x08
     bca:	71 87       	std	Z+9, r23	; 0x09
     bcc:	82 87       	std	Z+10, r24	; 0x0a
     bce:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     bd0:	f6 01       	movw	r30, r12
     bd2:	60 81       	ld	r22, Z
     bd4:	71 81       	ldd	r23, Z+1	; 0x01
     bd6:	88 27       	eor	r24, r24
     bd8:	77 fd       	sbrc	r23, 7
     bda:	80 95       	com	r24
     bdc:	98 2f       	mov	r25, r24
     bde:	0e 94 21 12 	call	0x2442	; 0x2442 <__floatsisf>
     be2:	2b ed       	ldi	r18, 0xDB	; 219
     be4:	3f e0       	ldi	r19, 0x0F	; 15
     be6:	49 e4       	ldi	r20, 0x49	; 73
     be8:	50 e4       	ldi	r21, 0x40	; 64
     bea:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	44 eb       	ldi	r20, 0xB4	; 180
     bf4:	53 e4       	ldi	r21, 0x43	; 67
     bf6:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
     bfa:	0e 94 fd 13 	call	0x27fa	; 0x27fa <sin>
     bfe:	2b 01       	movw	r4, r22
     c00:	3c 01       	movw	r6, r24
     c02:	f5 01       	movw	r30, r10
     c04:	60 81       	ld	r22, Z
     c06:	71 81       	ldd	r23, Z+1	; 0x01
     c08:	88 27       	eor	r24, r24
     c0a:	77 fd       	sbrc	r23, 7
     c0c:	80 95       	com	r24
     c0e:	98 2f       	mov	r25, r24
     c10:	0e 94 21 12 	call	0x2442	; 0x2442 <__floatsisf>
     c14:	2b ed       	ldi	r18, 0xDB	; 219
     c16:	3f e0       	ldi	r19, 0x0F	; 15
     c18:	49 e4       	ldi	r20, 0x49	; 73
     c1a:	50 e4       	ldi	r21, 0x40	; 64
     c1c:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	44 e3       	ldi	r20, 0x34	; 52
     c26:	53 e4       	ldi	r21, 0x43	; 67
     c28:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
     c2c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <sin>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	c3 01       	movw	r24, r6
     c36:	b2 01       	movw	r22, r4
     c38:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     c3c:	ef 81       	ldd	r30, Y+7	; 0x07
     c3e:	f8 85       	ldd	r31, Y+8	; 0x08
     c40:	64 87       	std	Z+12, r22	; 0x0c
     c42:	75 87       	std	Z+13, r23	; 0x0d
     c44:	86 87       	std	Z+14, r24	; 0x0e
     c46:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     c48:	f2 e0       	ldi	r31, 0x02	; 2
     c4a:	8f 0e       	add	r8, r31
     c4c:	91 1c       	adc	r9, r1
     c4e:	8f 81       	ldd	r24, Y+7	; 0x07
     c50:	98 85       	ldd	r25, Y+8	; 0x08
     c52:	40 96       	adiw	r24, 0x10	; 16
     c54:	98 87       	std	Y+8, r25	; 0x08
     c56:	8f 83       	std	Y+7, r24	; 0x07
     c58:	82 14       	cp	r8, r2
     c5a:	93 04       	cpc	r9, r3
     c5c:	0c f4       	brge	.+2      	; 0xc60 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     c5e:	5e cf       	rjmp	.-324    	; 0xb1c <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
	print_states(qb_count*2,vec,"Before: ");
     c60:	40 ea       	ldi	r20, 0xA0	; 160
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	6b 81       	ldd	r22, Y+3	; 0x03
     c66:	7c 81       	ldd	r23, Y+4	; 0x04
     c68:	c1 01       	movw	r24, r2
     c6a:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     c6e:	21 e0       	ldi	r18, 0x01	; 1
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	49 81       	ldd	r20, Y+1	; 0x01
     c74:	5a 81       	ldd	r21, Y+2	; 0x02
     c76:	6b 81       	ldd	r22, Y+3	; 0x03
     c78:	7c 81       	ldd	r23, Y+4	; 0x04
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	9e 81       	ldd	r25, Y+6	; 0x06
     c7e:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Gates9kroneckerEP7Complexii>
}
     c82:	28 96       	adiw	r28, 0x08	; 8
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	bf 90       	pop	r11
     ca0:	af 90       	pop	r10
     ca2:	9f 90       	pop	r9
     ca4:	8f 90       	pop	r8
     ca6:	7f 90       	pop	r7
     ca8:	6f 90       	pop	r6
     caa:	5f 90       	pop	r5
     cac:	4f 90       	pop	r4
     cae:	3f 90       	pop	r3
     cb0:	2f 90       	pop	r2
     cb2:	08 95       	ret

00000cb4 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     cb4:	6f 92       	push	r6
     cb6:	7f 92       	push	r7
     cb8:	8f 92       	push	r8
     cba:	9f 92       	push	r9
     cbc:	af 92       	push	r10
     cbe:	bf 92       	push	r11
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	86 2e       	mov	r8, r22
     cd2:	97 2e       	mov	r9, r23
     cd4:	5a 01       	movw	r10, r20
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     cd6:	14 16       	cp	r1, r20
     cd8:	15 06       	cpc	r1, r21
     cda:	6c f4       	brge	.+26     	; 0xcf6 <_ZN5Gates8vec2amplEP7Complexi+0x42>
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	cc 24       	eor	r12, r12
     ce2:	c3 94       	inc	r12
     ce4:	d1 2c       	mov	r13, r1
     ce6:	cc 0c       	add	r12, r12
     ce8:	dd 1c       	adc	r13, r13
     cea:	2f 5f       	subi	r18, 0xFF	; 255
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	2a 15       	cp	r18, r10
     cf0:	3b 05       	cpc	r19, r11
     cf2:	c9 f7       	brne	.-14     	; 0xce6 <_ZN5Gates8vec2amplEP7Complexi+0x32>
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <_ZN5Gates8vec2amplEP7Complexi+0x48>
     cf6:	cc 24       	eor	r12, r12
     cf8:	c3 94       	inc	r12
     cfa:	d1 2c       	mov	r13, r1
	print_states(qb_count*2,vec,"Before: ");
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
}
int * Gates::vec2ampl(Complex * vec,int qb_count){
	int kron_size=custom_pow(2,qb_count);
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     cfc:	22 e0       	ldi	r18, 0x02	; 2
     cfe:	a2 16       	cp	r10, r18
     d00:	b1 04       	cpc	r11, r1
     d02:	3c f0       	brlt	.+14     	; 0xd12 <_ZN5Gates8vec2amplEP7Complexi+0x5e>
     d04:	a6 01       	movw	r20, r12
     d06:	68 2d       	mov	r22, r8
     d08:	79 2d       	mov	r23, r9
     d0a:	0e 94 39 03 	call	0x672	; 0x672 <_ZN5Gates17reverse_kroneckerEP7Complexi>
     d0e:	88 2e       	mov	r8, r24
     d10:	99 2e       	mov	r9, r25
	
	int* newthephi=(int*)malloc(sizeof(int)*(qb_count*2));
     d12:	c5 01       	movw	r24, r10
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
     d20:	68 2e       	mov	r6, r24
     d22:	79 2e       	mov	r7, r25
	for(int i=0;i<qb_count*2;i++) if(i%2==0) newthephi[i]=(360*acos(vec[i].re))/M_PI; else newthephi[i]=(180*vec[i].arg())/M_PI;
     d24:	aa 0c       	add	r10, r10
     d26:	bb 1c       	adc	r11, r11
     d28:	1a 14       	cp	r1, r10
     d2a:	1b 04       	cpc	r1, r11
     d2c:	f4 f5       	brge	.+124    	; 0xdaa <_ZN5Gates8vec2amplEP7Complexi+0xf6>
     d2e:	e8 2c       	mov	r14, r8
     d30:	f9 2c       	mov	r15, r9
     d32:	08 2f       	mov	r16, r24
     d34:	19 2f       	mov	r17, r25
     d36:	c0 e0       	ldi	r28, 0x00	; 0
     d38:	d0 e0       	ldi	r29, 0x00	; 0
     d3a:	c0 fd       	sbrc	r28, 0
     d3c:	19 c0       	rjmp	.+50     	; 0xd70 <_ZN5Gates8vec2amplEP7Complexi+0xbc>
     d3e:	f7 01       	movw	r30, r14
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <acos>
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	44 eb       	ldi	r20, 0xB4	; 180
     d52:	53 e4       	ldi	r21, 0x43	; 67
     d54:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     d58:	2b ed       	ldi	r18, 0xDB	; 219
     d5a:	3f e0       	ldi	r19, 0x0F	; 15
     d5c:	49 e4       	ldi	r20, 0x49	; 73
     d5e:	50 e4       	ldi	r21, 0x40	; 64
     d60:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
     d64:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__fixsfsi>
     d68:	f8 01       	movw	r30, r16
     d6a:	71 83       	std	Z+1, r23	; 0x01
     d6c:	60 83       	st	Z, r22
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <_ZN5Gates8vec2amplEP7Complexi+0xe4>
     d70:	c7 01       	movw	r24, r14
     d72:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN7Complex3argEv>
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	44 e3       	ldi	r20, 0x34	; 52
     d7c:	53 e4       	ldi	r21, 0x43	; 67
     d7e:	0e 94 9a 13 	call	0x2734	; 0x2734 <__mulsf3>
     d82:	2b ed       	ldi	r18, 0xDB	; 219
     d84:	3f e0       	ldi	r19, 0x0F	; 15
     d86:	49 e4       	ldi	r20, 0x49	; 73
     d88:	50 e4       	ldi	r21, 0x40	; 64
     d8a:	0e 94 86 11 	call	0x230c	; 0x230c <__divsf3>
     d8e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__fixsfsi>
     d92:	f8 01       	movw	r30, r16
     d94:	71 83       	std	Z+1, r23	; 0x01
     d96:	60 83       	st	Z, r22
     d98:	21 96       	adiw	r28, 0x01	; 1
     d9a:	f8 e0       	ldi	r31, 0x08	; 8
     d9c:	ef 0e       	add	r14, r31
     d9e:	f1 1c       	adc	r15, r1
     da0:	0e 5f       	subi	r16, 0xFE	; 254
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	ca 15       	cp	r28, r10
     da6:	db 05       	cpc	r29, r11
     da8:	41 f6       	brne	.-112    	; 0xd3a <_ZN5Gates8vec2amplEP7Complexi+0x86>

	print_states(kron_size,vec,"After: ");
     daa:	49 ea       	ldi	r20, 0xA9	; 169
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	68 2d       	mov	r22, r8
     db0:	79 2d       	mov	r23, r9
     db2:	c6 01       	movw	r24, r12
     db4:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     db8:	86 2d       	mov	r24, r6
     dba:	97 2d       	mov	r25, r7
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	7f 90       	pop	r7
     dd6:	6f 90       	pop	r6
     dd8:	08 95       	ret

00000dda <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     dda:	2f 92       	push	r2
     ddc:	3f 92       	push	r3
     dde:	4f 92       	push	r4
     de0:	5f 92       	push	r5
     de2:	6f 92       	push	r6
     de4:	7f 92       	push	r7
     de6:	8f 92       	push	r8
     de8:	9f 92       	push	r9
     dea:	af 92       	push	r10
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	60 97       	sbiw	r28, 0x10	; 16
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	4b 01       	movw	r8, r22
     e10:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     e12:	80 e1       	ldi	r24, 0x10	; 16
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
     e1a:	38 2e       	mov	r3, r24
     e1c:	29 2e       	mov	r2, r25
     e1e:	c8 2e       	mov	r12, r24
     e20:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     e22:	a1 2c       	mov	r10, r1
     e24:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e26:	24 01       	movw	r4, r8
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	48 0e       	add	r4, r24
     e2c:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     e2e:	ce 01       	movw	r24, r28
     e30:	09 96       	adiw	r24, 0x09	; 9
     e32:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     e36:	75 01       	movw	r14, r10
     e38:	ee 0c       	add	r14, r14
     e3a:	ff 1c       	adc	r15, r15
     e3c:	ee 0c       	add	r14, r14
     e3e:	ff 1c       	adc	r15, r15
     e40:	ee 0c       	add	r14, r14
     e42:	ff 1c       	adc	r15, r15
     e44:	e6 0c       	add	r14, r6
     e46:	f7 1c       	adc	r15, r7
     e48:	d7 01       	movw	r26, r14
     e4a:	0c 91       	ld	r16, X
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	1c 91       	ld	r17, X
     e50:	11 97       	sbiw	r26, 0x01	; 1
     e52:	12 96       	adiw	r26, 0x02	; 2
     e54:	2c 91       	ld	r18, X
     e56:	12 97       	sbiw	r26, 0x02	; 2
     e58:	13 96       	adiw	r26, 0x03	; 3
     e5a:	3c 91       	ld	r19, X
     e5c:	13 97       	sbiw	r26, 0x03	; 3
     e5e:	14 96       	adiw	r26, 0x04	; 4
     e60:	4c 91       	ld	r20, X
     e62:	14 97       	sbiw	r26, 0x04	; 4
     e64:	15 96       	adiw	r26, 0x05	; 5
     e66:	5c 91       	ld	r21, X
     e68:	15 97       	sbiw	r26, 0x05	; 5
     e6a:	16 96       	adiw	r26, 0x06	; 6
     e6c:	6c 91       	ld	r22, X
     e6e:	16 97       	sbiw	r26, 0x06	; 6
     e70:	17 96       	adiw	r26, 0x07	; 7
     e72:	7c 91       	ld	r23, X
     e74:	c4 01       	movw	r24, r8
     e76:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     e7a:	02 2f       	mov	r16, r18
     e7c:	13 2f       	mov	r17, r19
     e7e:	24 2f       	mov	r18, r20
     e80:	35 2f       	mov	r19, r21
     e82:	46 2f       	mov	r20, r22
     e84:	57 2f       	mov	r21, r23
     e86:	68 2f       	mov	r22, r24
     e88:	79 2f       	mov	r23, r25
     e8a:	ce 01       	movw	r24, r28
     e8c:	09 96       	adiw	r24, 0x09	; 9
     e8e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     e92:	29 87       	std	Y+9, r18	; 0x09
     e94:	3a 87       	std	Y+10, r19	; 0x0a
     e96:	4b 87       	std	Y+11, r20	; 0x0b
     e98:	5c 87       	std	Y+12, r21	; 0x0c
     e9a:	6d 87       	std	Y+13, r22	; 0x0d
     e9c:	7e 87       	std	Y+14, r23	; 0x0e
     e9e:	8f 87       	std	Y+15, r24	; 0x0f
     ea0:	98 8b       	std	Y+16, r25	; 0x10
     ea2:	f7 01       	movw	r30, r14
     ea4:	70 96       	adiw	r30, 0x10	; 16
     ea6:	d7 01       	movw	r26, r14
     ea8:	50 96       	adiw	r26, 0x10	; 16
     eaa:	0c 91       	ld	r16, X
     eac:	11 81       	ldd	r17, Z+1	; 0x01
     eae:	22 81       	ldd	r18, Z+2	; 0x02
     eb0:	33 81       	ldd	r19, Z+3	; 0x03
     eb2:	44 81       	ldd	r20, Z+4	; 0x04
     eb4:	55 81       	ldd	r21, Z+5	; 0x05
     eb6:	66 81       	ldd	r22, Z+6	; 0x06
     eb8:	77 81       	ldd	r23, Z+7	; 0x07
     eba:	c2 01       	movw	r24, r4
     ebc:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     ec0:	02 2f       	mov	r16, r18
     ec2:	13 2f       	mov	r17, r19
     ec4:	24 2f       	mov	r18, r20
     ec6:	35 2f       	mov	r19, r21
     ec8:	46 2f       	mov	r20, r22
     eca:	57 2f       	mov	r21, r23
     ecc:	68 2f       	mov	r22, r24
     ece:	79 2f       	mov	r23, r25
     ed0:	ce 01       	movw	r24, r28
     ed2:	09 96       	adiw	r24, 0x09	; 9
     ed4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     ed8:	29 87       	std	Y+9, r18	; 0x09
     eda:	3a 87       	std	Y+10, r19	; 0x0a
     edc:	4b 87       	std	Y+11, r20	; 0x0b
     ede:	5c 87       	std	Y+12, r21	; 0x0c
     ee0:	6d 87       	std	Y+13, r22	; 0x0d
     ee2:	7e 87       	std	Y+14, r23	; 0x0e
     ee4:	8f 87       	std	Y+15, r24	; 0x0f
     ee6:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     ee8:	89 85       	ldd	r24, Y+9	; 0x09
     eea:	9a 85       	ldd	r25, Y+10	; 0x0a
     eec:	ab 85       	ldd	r26, Y+11	; 0x0b
     eee:	bc 85       	ldd	r27, Y+12	; 0x0c
     ef0:	f6 01       	movw	r30, r12
     ef2:	80 83       	st	Z, r24
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	a2 83       	std	Z+2, r26	; 0x02
     ef8:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     efa:	8d 85       	ldd	r24, Y+13	; 0x0d
     efc:	9e 85       	ldd	r25, Y+14	; 0x0e
     efe:	af 85       	ldd	r26, Y+15	; 0x0f
     f00:	b8 89       	ldd	r27, Y+16	; 0x10
     f02:	84 83       	std	Z+4, r24	; 0x04
     f04:	95 83       	std	Z+5, r25	; 0x05
     f06:	a6 83       	std	Z+6, r26	; 0x06
     f08:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     f0a:	ff ef       	ldi	r31, 0xFF	; 255
     f0c:	af 1a       	sub	r10, r31
     f0e:	bf 0a       	sbc	r11, r31
     f10:	88 e0       	ldi	r24, 0x08	; 8
     f12:	c8 0e       	add	r12, r24
     f14:	d1 1c       	adc	r13, r1
     f16:	a2 e0       	ldi	r26, 0x02	; 2
     f18:	aa 16       	cp	r10, r26
     f1a:	b1 04       	cpc	r11, r1
     f1c:	09 f0       	breq	.+2      	; 0xf20 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     f1e:	87 cf       	rjmp	.-242    	; 0xe2e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     f20:	83 2d       	mov	r24, r3
     f22:	92 2d       	mov	r25, r2
     f24:	60 96       	adiw	r28, 0x10	; 16
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	cf 90       	pop	r12
     f40:	bf 90       	pop	r11
     f42:	af 90       	pop	r10
     f44:	9f 90       	pop	r9
     f46:	8f 90       	pop	r8
     f48:	7f 90       	pop	r7
     f4a:	6f 90       	pop	r6
     f4c:	5f 90       	pop	r5
     f4e:	4f 90       	pop	r4
     f50:	3f 90       	pop	r3
     f52:	2f 90       	pop	r2
     f54:	08 95       	ret

00000f56 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     f56:	2f 92       	push	r2
     f58:	3f 92       	push	r3
     f5a:	4f 92       	push	r4
     f5c:	5f 92       	push	r5
     f5e:	6f 92       	push	r6
     f60:	7f 92       	push	r7
     f62:	8f 92       	push	r8
     f64:	9f 92       	push	r9
     f66:	af 92       	push	r10
     f68:	bf 92       	push	r11
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	64 97       	sbiw	r28, 0x14	; 20
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	3b 01       	movw	r6, r22
     f8c:	e4 2e       	mov	r14, r20
     f8e:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     f90:	80 e2       	ldi	r24, 0x20	; 32
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
     f98:	8b 8b       	std	Y+19, r24	; 0x13
     f9a:	9c 8b       	std	Y+20, r25	; 0x14
     f9c:	48 2e       	mov	r4, r24
     f9e:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     fa0:	81 2c       	mov	r8, r1
     fa2:	91 2c       	mov	r9, r1
     fa4:	e9 8a       	std	Y+17, r14	; 0x11
     fa6:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     fa8:	21 2c       	mov	r2, r1
     faa:	31 2c       	mov	r3, r1
     fac:	ce 01       	movw	r24, r28
     fae:	09 96       	adiw	r24, 0x09	; 9
     fb0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN7ComplexC1Ev>
     fb4:	c9 88       	ldd	r12, Y+17	; 0x11
     fb6:	da 88       	ldd	r13, Y+18	; 0x12
     fb8:	e2 2c       	mov	r14, r2
     fba:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     fbc:	54 01       	movw	r10, r8
     fbe:	aa 0c       	add	r10, r10
     fc0:	bb 1c       	adc	r11, r11
     fc2:	aa 0c       	add	r10, r10
     fc4:	bb 1c       	adc	r11, r11
     fc6:	aa 0c       	add	r10, r10
     fc8:	bb 1c       	adc	r11, r11
     fca:	f5 01       	movw	r30, r10
     fcc:	ec 0d       	add	r30, r12
     fce:	fd 1d       	adc	r31, r13
     fd0:	00 81       	ld	r16, Z
     fd2:	11 81       	ldd	r17, Z+1	; 0x01
     fd4:	22 81       	ldd	r18, Z+2	; 0x02
     fd6:	33 81       	ldd	r19, Z+3	; 0x03
     fd8:	44 81       	ldd	r20, Z+4	; 0x04
     fda:	55 81       	ldd	r21, Z+5	; 0x05
     fdc:	66 81       	ldd	r22, Z+6	; 0x06
     fde:	77 81       	ldd	r23, Z+7	; 0x07
     fe0:	c3 01       	movw	r24, r6
     fe2:	8e 0d       	add	r24, r14
     fe4:	9f 1d       	adc	r25, r15
     fe6:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     fea:	29 83       	std	Y+1, r18	; 0x01
     fec:	3a 83       	std	Y+2, r19	; 0x02
     fee:	4b 83       	std	Y+3, r20	; 0x03
     ff0:	5c 83       	std	Y+4, r21	; 0x04
     ff2:	6d 83       	std	Y+5, r22	; 0x05
     ff4:	7e 83       	std	Y+6, r23	; 0x06
     ff6:	8f 83       	std	Y+7, r24	; 0x07
     ff8:	98 87       	std	Y+8, r25	; 0x08
     ffa:	02 2f       	mov	r16, r18
     ffc:	13 2f       	mov	r17, r19
     ffe:	24 2f       	mov	r18, r20
    1000:	35 2f       	mov	r19, r21
    1002:	46 2f       	mov	r20, r22
    1004:	57 2f       	mov	r21, r23
    1006:	68 2f       	mov	r22, r24
    1008:	79 2f       	mov	r23, r25
    100a:	ce 01       	movw	r24, r28
    100c:	09 96       	adiw	r24, 0x09	; 9
    100e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
    1012:	29 87       	std	Y+9, r18	; 0x09
    1014:	3a 87       	std	Y+10, r19	; 0x0a
    1016:	4b 87       	std	Y+11, r20	; 0x0b
    1018:	5c 87       	std	Y+12, r21	; 0x0c
    101a:	6d 87       	std	Y+13, r22	; 0x0d
    101c:	7e 87       	std	Y+14, r23	; 0x0e
    101e:	8f 87       	std	Y+15, r24	; 0x0f
    1020:	98 8b       	std	Y+16, r25	; 0x10
    1022:	88 e0       	ldi	r24, 0x08	; 8
    1024:	e8 0e       	add	r14, r24
    1026:	f1 1c       	adc	r15, r1
    1028:	e0 e2       	ldi	r30, 0x20	; 32
    102a:	ce 0e       	add	r12, r30
    102c:	d1 1c       	adc	r13, r1
    102e:	f0 e2       	ldi	r31, 0x20	; 32
    1030:	ef 16       	cp	r14, r31
    1032:	f1 04       	cpc	r15, r1
    1034:	51 f6       	brne	.-108    	; 0xfca <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
    1036:	89 85       	ldd	r24, Y+9	; 0x09
    1038:	9a 85       	ldd	r25, Y+10	; 0x0a
    103a:	ab 85       	ldd	r26, Y+11	; 0x0b
    103c:	bc 85       	ldd	r27, Y+12	; 0x0c
    103e:	f2 01       	movw	r30, r4
    1040:	80 83       	st	Z, r24
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	a2 83       	std	Z+2, r26	; 0x02
    1046:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
    1048:	8d 85       	ldd	r24, Y+13	; 0x0d
    104a:	9e 85       	ldd	r25, Y+14	; 0x0e
    104c:	af 85       	ldd	r26, Y+15	; 0x0f
    104e:	b8 89       	ldd	r27, Y+16	; 0x10
    1050:	84 83       	std	Z+4, r24	; 0x04
    1052:	95 83       	std	Z+5, r25	; 0x05
    1054:	a6 83       	std	Z+6, r26	; 0x06
    1056:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
    1058:	ff ef       	ldi	r31, 0xFF	; 255
    105a:	8f 1a       	sub	r8, r31
    105c:	9f 0a       	sbc	r9, r31
    105e:	88 e0       	ldi	r24, 0x08	; 8
    1060:	48 0e       	add	r4, r24
    1062:	51 1c       	adc	r5, r1
    1064:	e4 e0       	ldi	r30, 0x04	; 4
    1066:	8e 16       	cp	r8, r30
    1068:	91 04       	cpc	r9, r1
    106a:	09 f0       	breq	.+2      	; 0x106e <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
    106c:	9f cf       	rjmp	.-194    	; 0xfac <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    106e:	8b 89       	ldd	r24, Y+19	; 0x13
    1070:	9c 89       	ldd	r25, Y+20	; 0x14
    1072:	64 96       	adiw	r28, 0x14	; 20
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	bf 90       	pop	r11
    1090:	af 90       	pop	r10
    1092:	9f 90       	pop	r9
    1094:	8f 90       	pop	r8
    1096:	7f 90       	pop	r7
    1098:	6f 90       	pop	r6
    109a:	5f 90       	pop	r5
    109c:	4f 90       	pop	r4
    109e:	3f 90       	pop	r3
    10a0:	2f 90       	pop	r2
    10a2:	08 95       	ret

000010a4 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
    10a4:	af 92       	push	r10
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	a4 97       	sbiw	r28, 0x24	; 36
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	7c 01       	movw	r14, r24
    10ca:	5b 01       	movw	r10, r22
    10cc:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
    10ce:	00 e0       	ldi	r16, 0x00	; 0
    10d0:	10 e0       	ldi	r17, 0x00	; 0
    10d2:	98 01       	movw	r18, r16
    10d4:	b9 01       	movw	r22, r18
    10d6:	a8 01       	movw	r20, r16
    10d8:	ce 01       	movw	r24, r28
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    10e0:	00 e0       	ldi	r16, 0x00	; 0
    10e2:	10 e0       	ldi	r17, 0x00	; 0
    10e4:	98 01       	movw	r18, r16
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	60 e8       	ldi	r22, 0x80	; 128
    10ec:	7f e3       	ldi	r23, 0x3F	; 63
    10ee:	ce 01       	movw	r24, r28
    10f0:	09 96       	adiw	r24, 0x09	; 9
    10f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    10f6:	00 e0       	ldi	r16, 0x00	; 0
    10f8:	10 e0       	ldi	r17, 0x00	; 0
    10fa:	98 01       	movw	r18, r16
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	60 e8       	ldi	r22, 0x80	; 128
    1102:	7f e3       	ldi	r23, 0x3F	; 63
    1104:	ce 01       	movw	r24, r28
    1106:	41 96       	adiw	r24, 0x11	; 17
    1108:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    110c:	00 e0       	ldi	r16, 0x00	; 0
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	98 01       	movw	r18, r16
    1112:	b9 01       	movw	r22, r18
    1114:	a8 01       	movw	r20, r16
    1116:	ce 01       	movw	r24, r28
    1118:	49 96       	adiw	r24, 0x19	; 25
    111a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    111e:	bc a2       	std	Y+36, r11	; 0x24
    1120:	ab a2       	std	Y+35, r10	; 0x23
    1122:	da a2       	std	Y+34, r13	; 0x22
    1124:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix),1);
    1126:	9e 01       	movw	r18, r28
    1128:	2f 5d       	subi	r18, 0xDF	; 223
    112a:	3f 4f       	sbci	r19, 0xFF	; 255
    112c:	ae 01       	movw	r20, r28
    112e:	4d 5d       	subi	r20, 0xDD	; 221
    1130:	5f 4f       	sbci	r21, 0xFF	; 255
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	c7 01       	movw	r24, r14
    1138:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Gates8ampl2vecEiPiS0_>
    113c:	ae 01       	movw	r20, r28
    113e:	4f 5f       	subi	r20, 0xFF	; 255
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	bc 01       	movw	r22, r24
    1144:	c7 01       	movw	r24, r14
    1146:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	bc 01       	movw	r22, r24
    1150:	c7 01       	movw	r24, r14
    1152:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1156:	a4 96       	adiw	r28, 0x24	; 36
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	df 90       	pop	r13
    1170:	cf 90       	pop	r12
    1172:	bf 90       	pop	r11
    1174:	af 90       	pop	r10
    1176:	08 95       	ret

00001178 <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    1178:	af 92       	push	r10
    117a:	bf 92       	push	r11
    117c:	cf 92       	push	r12
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	a4 97       	sbiw	r28, 0x24	; 36
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	7c 01       	movw	r14, r24
    119e:	5b 01       	movw	r10, r22
    11a0:	6a 01       	movw	r12, r20
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
    11a2:	00 e0       	ldi	r16, 0x00	; 0
    11a4:	10 e0       	ldi	r17, 0x00	; 0
    11a6:	98 01       	movw	r18, r16
    11a8:	b9 01       	movw	r22, r18
    11aa:	a8 01       	movw	r20, r16
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	10 e0       	ldi	r17, 0x00	; 0
    11b8:	20 e8       	ldi	r18, 0x80	; 128
    11ba:	3f eb       	ldi	r19, 0xBF	; 191
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	ba 01       	movw	r22, r20
    11c2:	ce 01       	movw	r24, r28
    11c4:	09 96       	adiw	r24, 0x09	; 9
    11c6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    11ca:	00 e0       	ldi	r16, 0x00	; 0
    11cc:	10 e0       	ldi	r17, 0x00	; 0
    11ce:	20 e8       	ldi	r18, 0x80	; 128
    11d0:	3f e3       	ldi	r19, 0x3F	; 63
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	ba 01       	movw	r22, r20
    11d8:	ce 01       	movw	r24, r28
    11da:	41 96       	adiw	r24, 0x11	; 17
    11dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    11e0:	00 e0       	ldi	r16, 0x00	; 0
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	98 01       	movw	r18, r16
    11e6:	b9 01       	movw	r22, r18
    11e8:	a8 01       	movw	r20, r16
    11ea:	ce 01       	movw	r24, r28
    11ec:	49 96       	adiw	r24, 0x19	; 25
    11ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    11f2:	bc a2       	std	Y+36, r11	; 0x24
    11f4:	ab a2       	std	Y+35, r10	; 0x23
    11f6:	da a2       	std	Y+34, r13	; 0x22
    11f8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),y_matrix),1);
    11fa:	9e 01       	movw	r18, r28
    11fc:	2f 5d       	subi	r18, 0xDF	; 223
    11fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1200:	ae 01       	movw	r20, r28
    1202:	4d 5d       	subi	r20, 0xDD	; 221
    1204:	5f 4f       	sbci	r21, 0xFF	; 255
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	c7 01       	movw	r24, r14
    120c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Gates8ampl2vecEiPiS0_>
    1210:	ae 01       	movw	r20, r28
    1212:	4f 5f       	subi	r20, 0xFF	; 255
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	bc 01       	movw	r22, r24
    1218:	c7 01       	movw	r24, r14
    121a:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	bc 01       	movw	r22, r24
    1224:	c7 01       	movw	r24, r14
    1226:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    122a:	a4 96       	adiw	r28, 0x24	; 36
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	bf 90       	pop	r11
    1248:	af 90       	pop	r10
    124a:	08 95       	ret

0000124c <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	a4 97       	sbiw	r28, 0x24	; 36
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	7c 01       	movw	r14, r24
    1272:	5b 01       	movw	r10, r22
    1274:	6a 01       	movw	r12, r20
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
    1276:	00 e0       	ldi	r16, 0x00	; 0
    1278:	10 e0       	ldi	r17, 0x00	; 0
    127a:	98 01       	movw	r18, r16
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	60 e8       	ldi	r22, 0x80	; 128
    1282:	7f e3       	ldi	r23, 0x3F	; 63
    1284:	ce 01       	movw	r24, r28
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    128c:	00 e0       	ldi	r16, 0x00	; 0
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	98 01       	movw	r18, r16
    1292:	b9 01       	movw	r22, r18
    1294:	a8 01       	movw	r20, r16
    1296:	ce 01       	movw	r24, r28
    1298:	09 96       	adiw	r24, 0x09	; 9
    129a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    129e:	00 e0       	ldi	r16, 0x00	; 0
    12a0:	10 e0       	ldi	r17, 0x00	; 0
    12a2:	98 01       	movw	r18, r16
    12a4:	b9 01       	movw	r22, r18
    12a6:	a8 01       	movw	r20, r16
    12a8:	ce 01       	movw	r24, r28
    12aa:	41 96       	adiw	r24, 0x11	; 17
    12ac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    12b0:	00 e0       	ldi	r16, 0x00	; 0
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	98 01       	movw	r18, r16
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	60 e8       	ldi	r22, 0x80	; 128
    12bc:	7f eb       	ldi	r23, 0xBF	; 191
    12be:	ce 01       	movw	r24, r28
    12c0:	49 96       	adiw	r24, 0x19	; 25
    12c2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    12c6:	bc a2       	std	Y+36, r11	; 0x24
    12c8:	ab a2       	std	Y+35, r10	; 0x23
    12ca:	da a2       	std	Y+34, r13	; 0x22
    12cc:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),z_matrix),1);
    12ce:	9e 01       	movw	r18, r28
    12d0:	2f 5d       	subi	r18, 0xDF	; 223
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	ae 01       	movw	r20, r28
    12d6:	4d 5d       	subi	r20, 0xDD	; 221
    12d8:	5f 4f       	sbci	r21, 0xFF	; 255
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	c7 01       	movw	r24, r14
    12e0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Gates8ampl2vecEiPiS0_>
    12e4:	ae 01       	movw	r20, r28
    12e6:	4f 5f       	subi	r20, 0xFF	; 255
    12e8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ea:	bc 01       	movw	r22, r24
    12ec:	c7 01       	movw	r24, r14
    12ee:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	bc 01       	movw	r22, r24
    12f8:	c7 01       	movw	r24, r14
    12fa:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    12fe:	a4 96       	adiw	r28, 0x24	; 36
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	df 90       	pop	r13
    1318:	cf 90       	pop	r12
    131a:	bf 90       	pop	r11
    131c:	af 90       	pop	r10
    131e:	08 95       	ret

00001320 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    1320:	af 92       	push	r10
    1322:	bf 92       	push	r11
    1324:	cf 92       	push	r12
    1326:	df 92       	push	r13
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	a4 97       	sbiw	r28, 0x24	; 36
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	7c 01       	movw	r14, r24
    1346:	5b 01       	movw	r10, r22
    1348:	6a 01       	movw	r12, r20
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    134a:	00 e0       	ldi	r16, 0x00	; 0
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	98 01       	movw	r18, r16
    1350:	43 ef       	ldi	r20, 0xF3	; 243
    1352:	54 e0       	ldi	r21, 0x04	; 4
    1354:	65 e3       	ldi	r22, 0x35	; 53
    1356:	7f e3       	ldi	r23, 0x3F	; 63
    1358:	ce 01       	movw	r24, r28
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1360:	00 e0       	ldi	r16, 0x00	; 0
    1362:	10 e0       	ldi	r17, 0x00	; 0
    1364:	98 01       	movw	r18, r16
    1366:	43 ef       	ldi	r20, 0xF3	; 243
    1368:	54 e0       	ldi	r21, 0x04	; 4
    136a:	65 e3       	ldi	r22, 0x35	; 53
    136c:	7f e3       	ldi	r23, 0x3F	; 63
    136e:	ce 01       	movw	r24, r28
    1370:	09 96       	adiw	r24, 0x09	; 9
    1372:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1376:	00 e0       	ldi	r16, 0x00	; 0
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	98 01       	movw	r18, r16
    137c:	43 ef       	ldi	r20, 0xF3	; 243
    137e:	54 e0       	ldi	r21, 0x04	; 4
    1380:	65 e3       	ldi	r22, 0x35	; 53
    1382:	7f e3       	ldi	r23, 0x3F	; 63
    1384:	ce 01       	movw	r24, r28
    1386:	41 96       	adiw	r24, 0x11	; 17
    1388:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    138c:	00 e0       	ldi	r16, 0x00	; 0
    138e:	10 e0       	ldi	r17, 0x00	; 0
    1390:	98 01       	movw	r18, r16
    1392:	43 ef       	ldi	r20, 0xF3	; 243
    1394:	54 e0       	ldi	r21, 0x04	; 4
    1396:	65 e3       	ldi	r22, 0x35	; 53
    1398:	7f eb       	ldi	r23, 0xBF	; 191
    139a:	ce 01       	movw	r24, r28
    139c:	49 96       	adiw	r24, 0x19	; 25
    139e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    13a2:	bc a2       	std	Y+36, r11	; 0x24
    13a4:	ab a2       	std	Y+35, r10	; 0x23
    13a6:	da a2       	std	Y+34, r13	; 0x22
    13a8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),h_matrix),1);
    13aa:	9e 01       	movw	r18, r28
    13ac:	2f 5d       	subi	r18, 0xDF	; 223
    13ae:	3f 4f       	sbci	r19, 0xFF	; 255
    13b0:	ae 01       	movw	r20, r28
    13b2:	4d 5d       	subi	r20, 0xDD	; 221
    13b4:	5f 4f       	sbci	r21, 0xFF	; 255
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	c7 01       	movw	r24, r14
    13bc:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Gates8ampl2vecEiPiS0_>
    13c0:	ae 01       	movw	r20, r28
    13c2:	4f 5f       	subi	r20, 0xFF	; 255
    13c4:	5f 4f       	sbci	r21, 0xFF	; 255
    13c6:	bc 01       	movw	r22, r24
    13c8:	c7 01       	movw	r24, r14
    13ca:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	bc 01       	movw	r22, r24
    13d4:	c7 01       	movw	r24, r14
    13d6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    13da:	a4 96       	adiw	r28, 0x24	; 36
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	df 90       	pop	r13
    13f4:	cf 90       	pop	r12
    13f6:	bf 90       	pop	r11
    13f8:	af 90       	pop	r10
    13fa:	08 95       	ret

000013fc <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    13fc:	af 92       	push	r10
    13fe:	bf 92       	push	r11
    1400:	cf 92       	push	r12
    1402:	df 92       	push	r13
    1404:	ef 92       	push	r14
    1406:	ff 92       	push	r15
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	a4 97       	sbiw	r28, 0x24	; 36
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	7c 01       	movw	r14, r24
    1422:	5b 01       	movw	r10, r22
    1424:	6a 01       	movw	r12, r20
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
    1426:	00 e0       	ldi	r16, 0x00	; 0
    1428:	10 e0       	ldi	r17, 0x00	; 0
    142a:	98 01       	movw	r18, r16
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	60 e8       	ldi	r22, 0x80	; 128
    1432:	7f e3       	ldi	r23, 0x3F	; 63
    1434:	ce 01       	movw	r24, r28
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    143c:	00 e0       	ldi	r16, 0x00	; 0
    143e:	10 e0       	ldi	r17, 0x00	; 0
    1440:	98 01       	movw	r18, r16
    1442:	b9 01       	movw	r22, r18
    1444:	a8 01       	movw	r20, r16
    1446:	ce 01       	movw	r24, r28
    1448:	09 96       	adiw	r24, 0x09	; 9
    144a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    144e:	00 e0       	ldi	r16, 0x00	; 0
    1450:	10 e0       	ldi	r17, 0x00	; 0
    1452:	98 01       	movw	r18, r16
    1454:	b9 01       	movw	r22, r18
    1456:	a8 01       	movw	r20, r16
    1458:	ce 01       	movw	r24, r28
    145a:	41 96       	adiw	r24, 0x11	; 17
    145c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1460:	00 e0       	ldi	r16, 0x00	; 0
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	20 e8       	ldi	r18, 0x80	; 128
    1466:	3f e3       	ldi	r19, 0x3F	; 63
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	ba 01       	movw	r22, r20
    146e:	ce 01       	movw	r24, r28
    1470:	49 96       	adiw	r24, 0x19	; 25
    1472:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    1476:	bc a2       	std	Y+36, r11	; 0x24
    1478:	ab a2       	std	Y+35, r10	; 0x23
    147a:	da a2       	std	Y+34, r13	; 0x22
    147c:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),s_matrix),1);
    147e:	9e 01       	movw	r18, r28
    1480:	2f 5d       	subi	r18, 0xDF	; 223
    1482:	3f 4f       	sbci	r19, 0xFF	; 255
    1484:	ae 01       	movw	r20, r28
    1486:	4d 5d       	subi	r20, 0xDD	; 221
    1488:	5f 4f       	sbci	r21, 0xFF	; 255
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	c7 01       	movw	r24, r14
    1490:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Gates8ampl2vecEiPiS0_>
    1494:	ae 01       	movw	r20, r28
    1496:	4f 5f       	subi	r20, 0xFF	; 255
    1498:	5f 4f       	sbci	r21, 0xFF	; 255
    149a:	bc 01       	movw	r22, r24
    149c:	c7 01       	movw	r24, r14
    149e:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    14a2:	41 e0       	ldi	r20, 0x01	; 1
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	bc 01       	movw	r22, r24
    14a8:	c7 01       	movw	r24, r14
    14aa:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    14ae:	a4 96       	adiw	r28, 0x24	; 36
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	bf 90       	pop	r11
    14cc:	af 90       	pop	r10
    14ce:	08 95       	ret

000014d0 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    14d0:	af 92       	push	r10
    14d2:	bf 92       	push	r11
    14d4:	cf 92       	push	r12
    14d6:	df 92       	push	r13
    14d8:	ef 92       	push	r14
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	a4 97       	sbiw	r28, 0x24	; 36
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	7c 01       	movw	r14, r24
    14f6:	5b 01       	movw	r10, r22
    14f8:	6a 01       	movw	r12, r20
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    14fa:	00 e0       	ldi	r16, 0x00	; 0
    14fc:	10 e0       	ldi	r17, 0x00	; 0
    14fe:	98 01       	movw	r18, r16
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	60 e8       	ldi	r22, 0x80	; 128
    1506:	7f e3       	ldi	r23, 0x3F	; 63
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1510:	00 e0       	ldi	r16, 0x00	; 0
    1512:	10 e0       	ldi	r17, 0x00	; 0
    1514:	98 01       	movw	r18, r16
    1516:	b9 01       	movw	r22, r18
    1518:	a8 01       	movw	r20, r16
    151a:	ce 01       	movw	r24, r28
    151c:	09 96       	adiw	r24, 0x09	; 9
    151e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1522:	00 e0       	ldi	r16, 0x00	; 0
    1524:	10 e0       	ldi	r17, 0x00	; 0
    1526:	98 01       	movw	r18, r16
    1528:	b9 01       	movw	r22, r18
    152a:	a8 01       	movw	r20, r16
    152c:	ce 01       	movw	r24, r28
    152e:	41 96       	adiw	r24, 0x11	; 17
    1530:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1534:	03 ef       	ldi	r16, 0xF3	; 243
    1536:	14 e0       	ldi	r17, 0x04	; 4
    1538:	25 e3       	ldi	r18, 0x35	; 53
    153a:	3f e3       	ldi	r19, 0x3F	; 63
    153c:	b9 01       	movw	r22, r18
    153e:	a8 01       	movw	r20, r16
    1540:	ce 01       	movw	r24, r28
    1542:	49 96       	adiw	r24, 0x19	; 25
    1544:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    1548:	bc a2       	std	Y+36, r11	; 0x24
    154a:	ab a2       	std	Y+35, r10	; 0x23
    154c:	da a2       	std	Y+34, r13	; 0x22
    154e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),t_matrix),1);
    1550:	9e 01       	movw	r18, r28
    1552:	2f 5d       	subi	r18, 0xDF	; 223
    1554:	3f 4f       	sbci	r19, 0xFF	; 255
    1556:	ae 01       	movw	r20, r28
    1558:	4d 5d       	subi	r20, 0xDD	; 221
    155a:	5f 4f       	sbci	r21, 0xFF	; 255
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	c7 01       	movw	r24, r14
    1562:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Gates8ampl2vecEiPiS0_>
    1566:	ae 01       	movw	r20, r28
    1568:	4f 5f       	subi	r20, 0xFF	; 255
    156a:	5f 4f       	sbci	r21, 0xFF	; 255
    156c:	bc 01       	movw	r22, r24
    156e:	c7 01       	movw	r24, r14
    1570:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	bc 01       	movw	r22, r24
    157a:	c7 01       	movw	r24, r14
    157c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1580:	a4 96       	adiw	r28, 0x24	; 36
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	bf 90       	pop	r11
    159e:	af 90       	pop	r10
    15a0:	08 95       	ret

000015a2 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    15a2:	6f 92       	push	r6
    15a4:	7f 92       	push	r7
    15a6:	8f 92       	push	r8
    15a8:	9f 92       	push	r9
    15aa:	af 92       	push	r10
    15ac:	bf 92       	push	r11
    15ae:	cf 92       	push	r12
    15b0:	df 92       	push	r13
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	c8 58       	subi	r28, 0x88	; 136
    15c4:	d1 09       	sbc	r29, r1
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	7c 01       	movw	r14, r24
    15d2:	3b 01       	movw	r6, r22
    15d4:	5a 01       	movw	r10, r20
    15d6:	49 01       	movw	r8, r18
    15d8:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    15da:	00 e0       	ldi	r16, 0x00	; 0
    15dc:	10 e0       	ldi	r17, 0x00	; 0
    15de:	98 01       	movw	r18, r16
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	60 e8       	ldi	r22, 0x80	; 128
    15e6:	7f e3       	ldi	r23, 0x3F	; 63
    15e8:	ce 01       	movw	r24, r28
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15f0:	00 e0       	ldi	r16, 0x00	; 0
    15f2:	10 e0       	ldi	r17, 0x00	; 0
    15f4:	98 01       	movw	r18, r16
    15f6:	b9 01       	movw	r22, r18
    15f8:	a8 01       	movw	r20, r16
    15fa:	ce 01       	movw	r24, r28
    15fc:	09 96       	adiw	r24, 0x09	; 9
    15fe:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1602:	00 e0       	ldi	r16, 0x00	; 0
    1604:	10 e0       	ldi	r17, 0x00	; 0
    1606:	98 01       	movw	r18, r16
    1608:	b9 01       	movw	r22, r18
    160a:	a8 01       	movw	r20, r16
    160c:	ce 01       	movw	r24, r28
    160e:	41 96       	adiw	r24, 0x11	; 17
    1610:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1614:	00 e0       	ldi	r16, 0x00	; 0
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	98 01       	movw	r18, r16
    161a:	b9 01       	movw	r22, r18
    161c:	a8 01       	movw	r20, r16
    161e:	ce 01       	movw	r24, r28
    1620:	49 96       	adiw	r24, 0x19	; 25
    1622:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1626:	00 e0       	ldi	r16, 0x00	; 0
    1628:	10 e0       	ldi	r17, 0x00	; 0
    162a:	98 01       	movw	r18, r16
    162c:	b9 01       	movw	r22, r18
    162e:	a8 01       	movw	r20, r16
    1630:	ce 01       	movw	r24, r28
    1632:	81 96       	adiw	r24, 0x21	; 33
    1634:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1638:	00 e0       	ldi	r16, 0x00	; 0
    163a:	10 e0       	ldi	r17, 0x00	; 0
    163c:	98 01       	movw	r18, r16
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	60 e8       	ldi	r22, 0x80	; 128
    1644:	7f e3       	ldi	r23, 0x3F	; 63
    1646:	ce 01       	movw	r24, r28
    1648:	89 96       	adiw	r24, 0x29	; 41
    164a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    164e:	00 e0       	ldi	r16, 0x00	; 0
    1650:	10 e0       	ldi	r17, 0x00	; 0
    1652:	98 01       	movw	r18, r16
    1654:	b9 01       	movw	r22, r18
    1656:	a8 01       	movw	r20, r16
    1658:	ce 01       	movw	r24, r28
    165a:	c1 96       	adiw	r24, 0x31	; 49
    165c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1660:	00 e0       	ldi	r16, 0x00	; 0
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	98 01       	movw	r18, r16
    1666:	b9 01       	movw	r22, r18
    1668:	a8 01       	movw	r20, r16
    166a:	ce 01       	movw	r24, r28
    166c:	c9 96       	adiw	r24, 0x39	; 57
    166e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1672:	00 e0       	ldi	r16, 0x00	; 0
    1674:	10 e0       	ldi	r17, 0x00	; 0
    1676:	98 01       	movw	r18, r16
    1678:	b9 01       	movw	r22, r18
    167a:	a8 01       	movw	r20, r16
    167c:	ce 01       	movw	r24, r28
    167e:	8f 5b       	subi	r24, 0xBF	; 191
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1686:	00 e0       	ldi	r16, 0x00	; 0
    1688:	10 e0       	ldi	r17, 0x00	; 0
    168a:	98 01       	movw	r18, r16
    168c:	b9 01       	movw	r22, r18
    168e:	a8 01       	movw	r20, r16
    1690:	ce 01       	movw	r24, r28
    1692:	87 5b       	subi	r24, 0xB7	; 183
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    169a:	00 e0       	ldi	r16, 0x00	; 0
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	98 01       	movw	r18, r16
    16a0:	b9 01       	movw	r22, r18
    16a2:	a8 01       	movw	r20, r16
    16a4:	ce 01       	movw	r24, r28
    16a6:	8f 5a       	subi	r24, 0xAF	; 175
    16a8:	9f 4f       	sbci	r25, 0xFF	; 255
    16aa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    16ae:	00 e0       	ldi	r16, 0x00	; 0
    16b0:	10 e0       	ldi	r17, 0x00	; 0
    16b2:	98 01       	movw	r18, r16
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	60 e8       	ldi	r22, 0x80	; 128
    16ba:	7f e3       	ldi	r23, 0x3F	; 63
    16bc:	ce 01       	movw	r24, r28
    16be:	87 5a       	subi	r24, 0xA7	; 167
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    16c6:	00 e0       	ldi	r16, 0x00	; 0
    16c8:	10 e0       	ldi	r17, 0x00	; 0
    16ca:	98 01       	movw	r18, r16
    16cc:	b9 01       	movw	r22, r18
    16ce:	a8 01       	movw	r20, r16
    16d0:	ce 01       	movw	r24, r28
    16d2:	8f 59       	subi	r24, 0x9F	; 159
    16d4:	9f 4f       	sbci	r25, 0xFF	; 255
    16d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    16da:	00 e0       	ldi	r16, 0x00	; 0
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	98 01       	movw	r18, r16
    16e0:	b9 01       	movw	r22, r18
    16e2:	a8 01       	movw	r20, r16
    16e4:	ce 01       	movw	r24, r28
    16e6:	87 59       	subi	r24, 0x97	; 151
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	10 e0       	ldi	r17, 0x00	; 0
    16f2:	98 01       	movw	r18, r16
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	60 e8       	ldi	r22, 0x80	; 128
    16fa:	7f e3       	ldi	r23, 0x3F	; 63
    16fc:	ce 01       	movw	r24, r28
    16fe:	8f 58       	subi	r24, 0x8F	; 143
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1706:	00 e0       	ldi	r16, 0x00	; 0
    1708:	10 e0       	ldi	r17, 0x00	; 0
    170a:	98 01       	movw	r18, r16
    170c:	b9 01       	movw	r22, r18
    170e:	a8 01       	movw	r20, r16
    1710:	ce 01       	movw	r24, r28
    1712:	87 58       	subi	r24, 0x87	; 135
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
    171a:	cb 57       	subi	r28, 0x7B	; 123
    171c:	df 4f       	sbci	r29, 0xFF	; 255
    171e:	79 82       	std	Y+1, r7	; 0x01
    1720:	68 82       	st	Y, r6
    1722:	c5 58       	subi	r28, 0x85	; 133
    1724:	d0 40       	sbci	r29, 0x00	; 0
    1726:	c9 57       	subi	r28, 0x79	; 121
    1728:	df 4f       	sbci	r29, 0xFF	; 255
    172a:	99 82       	std	Y+1, r9	; 0x01
    172c:	88 82       	st	Y, r8
    172e:	c7 58       	subi	r28, 0x87	; 135
    1730:	d0 40       	sbci	r29, 0x00	; 0
    1732:	cf 57       	subi	r28, 0x7F	; 127
    1734:	df 4f       	sbci	r29, 0xFF	; 255
    1736:	b9 82       	std	Y+1, r11	; 0x01
    1738:	a8 82       	st	Y, r10
    173a:	c1 58       	subi	r28, 0x81	; 129
    173c:	d0 40       	sbci	r29, 0x00	; 0
    173e:	cd 57       	subi	r28, 0x7D	; 125
    1740:	df 4f       	sbci	r29, 0xFF	; 255
    1742:	d9 82       	std	Y+1, r13	; 0x01
    1744:	c8 82       	st	Y, r12
    1746:	c3 58       	subi	r28, 0x83	; 131
    1748:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix),2);
    174a:	9e 01       	movw	r18, r28
    174c:	2f 57       	subi	r18, 0x7F	; 127
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	ae 01       	movw	r20, r28
    1752:	4b 57       	subi	r20, 0x7B	; 123
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	62 e0       	ldi	r22, 0x02	; 2
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	c7 01       	movw	r24, r14
    175c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Gates8ampl2vecEiPiS0_>
    1760:	ae 01       	movw	r20, r28
    1762:	4f 5f       	subi	r20, 0xFF	; 255
    1764:	5f 4f       	sbci	r21, 0xFF	; 255
    1766:	bc 01       	movw	r22, r24
    1768:	c7 01       	movw	r24, r14
    176a:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    176e:	42 e0       	ldi	r20, 0x02	; 2
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	bc 01       	movw	r22, r24
    1774:	c7 01       	movw	r24, r14
    1776:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    177a:	c8 57       	subi	r28, 0x78	; 120
    177c:	df 4f       	sbci	r29, 0xFF	; 255
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	df 90       	pop	r13
    1796:	cf 90       	pop	r12
    1798:	bf 90       	pop	r11
    179a:	af 90       	pop	r10
    179c:	9f 90       	pop	r9
    179e:	8f 90       	pop	r8
    17a0:	7f 90       	pop	r7
    17a2:	6f 90       	pop	r6
    17a4:	08 95       	ret

000017a6 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}

Serial s;
    17a6:	8b ee       	ldi	r24, 0xEB	; 235
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN6SerialC1Ev>
    17ae:	08 95       	ret

000017b0 <main>:
#include "qepu.h"
int main(void){
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <main+0x6>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <main+0x8>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <main+0xa>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <_ZN4QEPUC1Ev>
	qepu.run();
    17c6:	ce 01       	movw	r24, r28
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN4QEPU3runEv>
    17ce:	ff cf       	rjmp	.-2      	; 0x17ce <main+0x1e>

000017d0 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	ec 01       	movw	r28, r24
    17d6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN6EEPromC1Ev>
    17da:	ce 01       	movw	r24, r28
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN6SerialC1Ev>
    17e2:	ce 01       	movw	r24, r28
    17e4:	05 96       	adiw	r24, 0x05	; 5
    17e6:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN5GatesC1Ev>
    17ea:	8f ef       	ldi	r24, 0xFF	; 255
    17ec:	8a bb       	out	0x1a, r24	; 26
    17ee:	1c 82       	std	Y+4, r1	; 0x04
    17f0:	1b 82       	std	Y+3, r1	; 0x03
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret

000017f8 <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    17f8:	7b b3       	in	r23, 0x1b	; 27
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	c9 01       	movw	r24, r18
    1800:	06 2e       	mov	r0, r22
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <_ZN4QEPU10setctrlpinEii+0x10>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	0a 94       	dec	r0
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <_ZN4QEPU10setctrlpinEii+0xc>
    180c:	80 95       	com	r24
    180e:	87 23       	and	r24, r23
    1810:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    1812:	8b b3       	in	r24, 0x1b	; 27
    1814:	02 c0       	rjmp	.+4      	; 0x181a <_ZN4QEPU10setctrlpinEii+0x22>
    1816:	44 0f       	add	r20, r20
    1818:	55 1f       	adc	r21, r21
    181a:	6a 95       	dec	r22
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <_ZN4QEPU10setctrlpinEii+0x1e>
    181e:	48 2b       	or	r20, r24
    1820:	4b bb       	out	0x1b, r20	; 27
    1822:	08 95       	ret

00001824 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    182a:	8f ef       	ldi	r24, 0xFF	; 255
    182c:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    182e:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    1830:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    1832:	64 e0       	ldi	r22, 0x04	; 4
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	ce 01       	movw	r24, r28
    1838:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	66 e0       	ldi	r22, 0x06	; 6
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	ce 01       	movw	r24, r28
    1846:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	66 e0       	ldi	r22, 0x06	; 6
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    1858:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	ec 01       	movw	r28, r24
    186a:	8a 01       	movw	r16, r20
	DDRB=0x00;
    186c:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    186e:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	65 e0       	ldi	r22, 0x05	; 5
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    187c:	a8 01       	movw	r20, r16
    187e:	64 e0       	ldi	r22, 0x04	; 4
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	ce 01       	movw	r24, r28
    1884:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    1888:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    188a:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    188c:	9f ef       	ldi	r25, 0xFF	; 255
    188e:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    189c:	6f 92       	push	r6
    189e:	7f 92       	push	r7
    18a0:	8f 92       	push	r8
    18a2:	9f 92       	push	r9
    18a4:	af 92       	push	r10
    18a6:	bf 92       	push	r11
    18a8:	cf 92       	push	r12
    18aa:	df 92       	push	r13
    18ac:	ef 92       	push	r14
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	6c 01       	movw	r12, r24
	serial.writestrln("");
    18ba:	8c 01       	movw	r16, r24
    18bc:	0f 5f       	subi	r16, 0xFF	; 255
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	6a ed       	ldi	r22, 0xDA	; 218
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	c8 01       	movw	r24, r16
    18c6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    18ca:	61 eb       	ldi	r22, 0xB1	; 177
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	c8 01       	movw	r24, r16
    18d0:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    18d4:	c0 e0       	ldi	r28, 0x00	; 0
    18d6:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    18d8:	0f 2e       	mov	r0, r31
    18da:	fb ec       	ldi	r31, 0xCB	; 203
    18dc:	ef 2e       	mov	r14, r31
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	ff 2e       	mov	r15, r31
    18e2:	f0 2d       	mov	r31, r0
    18e4:	83 e0       	ldi	r24, 0x03	; 3
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
    18ec:	88 2e       	mov	r8, r24
    18ee:	99 2e       	mov	r9, r25
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	be 01       	movw	r22, r28
    18f6:	c6 01       	movw	r24, r12
    18f8:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    18fc:	9f 93       	push	r25
    18fe:	8f 93       	push	r24
    1900:	ff 92       	push	r15
    1902:	ef 92       	push	r14
    1904:	9f 92       	push	r9
    1906:	8f 92       	push	r8
    1908:	0e 94 5d 17 	call	0x2eba	; 0x2eba <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    190c:	83 e0       	ldi	r24, 0x03	; 3
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
    1914:	a8 2e       	mov	r10, r24
    1916:	b9 2e       	mov	r11, r25
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	be 01       	movw	r22, r28
    191e:	c6 01       	movw	r24, r12
    1920:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1924:	9f 93       	push	r25
    1926:	8f 93       	push	r24
    1928:	ff 92       	push	r15
    192a:	ef 92       	push	r14
    192c:	bf 92       	push	r11
    192e:	af 92       	push	r10
    1930:	0e 94 5d 17 	call	0x2eba	; 0x2eba <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
    193c:	68 2e       	mov	r6, r24
    193e:	79 2e       	mov	r7, r25
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	ff 92       	push	r15
    1946:	ef 92       	push	r14
    1948:	7f 92       	push	r7
    194a:	6f 92       	push	r6
    194c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    1950:	6e ec       	ldi	r22, 0xCE	; 206
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	c8 01       	movw	r24, r16
    1956:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN6Serial8writestrEPc>
    195a:	66 2d       	mov	r22, r6
    195c:	77 2d       	mov	r23, r7
    195e:	c8 01       	movw	r24, r16
    1960:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN6Serial8writestrEPc>
    1964:	60 ed       	ldi	r22, 0xD0	; 208
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	c8 01       	movw	r24, r16
    196a:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    196e:	68 2d       	mov	r22, r8
    1970:	79 2d       	mov	r23, r9
    1972:	c8 01       	movw	r24, r16
    1974:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    1978:	6b ed       	ldi	r22, 0xDB	; 219
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	c8 01       	movw	r24, r16
    197e:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    1982:	6a 2d       	mov	r22, r10
    1984:	7b 2d       	mov	r23, r11
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    198c:	21 96       	adiw	r28, 0x01	; 1
    198e:	8d b7       	in	r24, 0x3d	; 61
    1990:	9e b7       	in	r25, 0x3e	; 62
    1992:	42 96       	adiw	r24, 0x12	; 18
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	9e bf       	out	0x3e, r25	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	8d bf       	out	0x3d, r24	; 61
    199e:	c4 30       	cpi	r28, 0x04	; 4
    19a0:	d1 05       	cpc	r29, r1
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <_ZN4QEPU7dumpmemEv+0x10a>
    19a4:	9f cf       	rjmp	.-194    	; 0x18e4 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	9f 90       	pop	r9
    19bc:	8f 90       	pop	r8
    19be:	7f 90       	pop	r7
    19c0:	6f 90       	pop	r6
    19c2:	08 95       	ret

000019c4 <_ZN4QEPU5Utils10int2binstrEii>:

char * QEPU::Utils::int2binstr(int num,int strlength){
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	06 2f       	mov	r16, r22
    19ce:	17 2f       	mov	r17, r23
    19d0:	ea 01       	movw	r28, r20
    char * str = (char*)malloc(strlength + 1);
    19d2:	ca 01       	movw	r24, r20
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
    if(!str) return NULL;
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	b9 f0       	breq	.+46     	; 0x1a0c <_ZN4QEPU5Utils10int2binstrEii+0x48>
    str[strlength] = 0;
    19de:	fc 01       	movw	r30, r24
    19e0:	ec 0f       	add	r30, r28
    19e2:	fd 1f       	adc	r31, r29
    19e4:	10 82       	st	Z, r1

    // type punning because signed shift is implementation-defined
    unsigned u = *(unsigned *)&num;
    19e6:	20 2f       	mov	r18, r16
    19e8:	31 2f       	mov	r19, r17
    for(; strlength--; u >>= 1)
    19ea:	be 01       	movw	r22, r28
    19ec:	61 50       	subi	r22, 0x01	; 1
    19ee:	71 09       	sbc	r23, r1
    19f0:	cd 2b       	or	r28, r29
    19f2:	71 f0       	breq	.+28     	; 0x1a10 <_ZN4QEPU5Utils10int2binstrEii+0x4c>
    str[strlength] = u & 1 ? '1' : '0';
    19f4:	20 ff       	sbrs	r18, 0
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <_ZN4QEPU5Utils10int2binstrEii+0x38>
    19f8:	41 e3       	ldi	r20, 0x31	; 49
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <_ZN4QEPU5Utils10int2binstrEii+0x3a>
    19fc:	40 e3       	ldi	r20, 0x30	; 48
    19fe:	42 93       	st	-Z, r20
    if(!str) return NULL;
    str[strlength] = 0;

    // type punning because signed shift is implementation-defined
    unsigned u = *(unsigned *)&num;
    for(; strlength--; u >>= 1)
    1a00:	36 95       	lsr	r19
    1a02:	27 95       	ror	r18
    1a04:	61 50       	subi	r22, 0x01	; 1
    1a06:	71 09       	sbc	r23, r1
    1a08:	a8 f7       	brcc	.-22     	; 0x19f4 <_ZN4QEPU5Utils10int2binstrEii+0x30>
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <_ZN4QEPU5Utils10int2binstrEii+0x4c>
	}
}

char * QEPU::Utils::int2binstr(int num,int strlength){
    char * str = (char*)malloc(strlength + 1);
    if(!str) return NULL;
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    unsigned u = *(unsigned *)&num;
    for(; strlength--; u >>= 1)
    str[strlength] = u & 1 ? '1' : '0';

    return str;
}
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	08 95       	ret

00001a1a <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	d6 2f       	mov	r29, r22
    1a2c:	c7 2f       	mov	r28, r23
    1a2e:	e6 2f       	mov	r30, r22
    1a30:	f7 2f       	mov	r31, r23
	int c_length=0;
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    1a36:	21 91       	ld	r18, Z+
    1a38:	2f 3f       	cpi	r18, 0xFF	; 255
    1a3a:	89 f4       	brne	.+34     	; 0x1a5e <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1a3c:	df 01       	movw	r26, r30
    1a3e:	12 97       	sbiw	r26, 0x02	; 2
    1a40:	4c 91       	ld	r20, X
    1a42:	4f 3f       	cpi	r20, 0xFF	; 255
    1a44:	61 f4       	brne	.+24     	; 0x1a5e <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1a46:	11 97       	sbiw	r26, 0x01	; 1
    1a48:	4c 91       	ld	r20, X
    1a4a:	4f 3f       	cpi	r20, 0xFF	; 255
    1a4c:	41 f4       	brne	.+16     	; 0x1a5e <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1a4e:	11 97       	sbiw	r26, 0x01	; 1
    1a50:	4c 91       	ld	r20, X
    1a52:	4f 3f       	cpi	r20, 0xFF	; 255
    1a54:	21 f4       	brne	.+8      	; 0x1a5e <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1a56:	11 97       	sbiw	r26, 0x01	; 1
    1a58:	2c 91       	ld	r18, X
    1a5a:	2f 3f       	cpi	r18, 0xFF	; 255
    1a5c:	11 f0       	breq	.+4      	; 0x1a62 <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	ea cf       	rjmp	.-44     	; 0x1a36 <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    1a62:	8c 01       	movw	r16, r24
    1a64:	04 50       	subi	r16, 0x04	; 4
    1a66:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    1a68:	6c 01       	movw	r12, r24
    1a6a:	2f ef       	ldi	r18, 0xFF	; 255
    1a6c:	c2 1a       	sub	r12, r18
    1a6e:	d2 0a       	sbc	r13, r18
    1a70:	76 01       	movw	r14, r12
    1a72:	ee 0c       	add	r14, r14
    1a74:	ff 1c       	adc	r15, r15
    1a76:	c7 01       	movw	r24, r14
    1a78:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    1a7c:	10 16       	cp	r1, r16
    1a7e:	11 06       	cpc	r1, r17
    1a80:	74 f4       	brge	.+28     	; 0x1a9e <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    1a82:	dc 01       	movw	r26, r24
    1a84:	ed 2f       	mov	r30, r29
    1a86:	fc 2f       	mov	r31, r28
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	41 91       	ld	r20, Z+
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	4d 93       	st	X+, r20
    1a92:	5d 93       	st	X+, r21
    1a94:	2f 5f       	subi	r18, 0xFF	; 255
    1a96:	3f 4f       	sbci	r19, 0xFF	; 255
    1a98:	20 17       	cp	r18, r16
    1a9a:	31 07       	cpc	r19, r17
    1a9c:	bc f3       	brlt	.-18     	; 0x1a8c <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    1a9e:	0c 15       	cp	r16, r12
    1aa0:	1d 05       	cpc	r17, r13
    1aa2:	7c f4       	brge	.+30     	; 0x1ac2 <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    1aa4:	f7 01       	movw	r30, r14
    1aa6:	3a 97       	sbiw	r30, 0x0a	; 10
    1aa8:	e8 0f       	add	r30, r24
    1aaa:	f9 1f       	adc	r31, r25
    1aac:	25 e0       	ldi	r18, 0x05	; 5
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4f ef       	ldi	r20, 0xFF	; 255
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	41 93       	st	Z+, r20
    1ab6:	51 93       	st	Z+, r21
    1ab8:	21 50       	subi	r18, 0x01	; 1
    1aba:	31 09       	sbc	r19, r1
    1abc:	21 15       	cp	r18, r1
    1abe:	31 05       	cpc	r19, r1
    1ac0:	c9 f7       	brne	.-14     	; 0x1ab4 <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	1f 91       	pop	r17
    1ac8:	0f 91       	pop	r16
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	df 90       	pop	r13
    1ad0:	cf 90       	pop	r12
    1ad2:	08 95       	ret

00001ad4 <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	c4 56       	subi	r28, 0x64	; 100
    1ae2:	d1 09       	sbc	r29, r1
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
	char str[100];
	sprintf(str,"%d",dec);
    1aee:	7f 93       	push	r23
    1af0:	6f 93       	push	r22
    1af2:	8b ec       	ldi	r24, 0xCB	; 203
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9f 93       	push	r25
    1af8:	8f 93       	push	r24
    1afa:	8e 01       	movw	r16, r28
    1afc:	0f 5f       	subi	r16, 0xFF	; 255
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	1f 93       	push	r17
    1b02:	0f 93       	push	r16
    1b04:	0e 94 5d 17 	call	0x2eba	; 0x2eba <sprintf>
	return str;
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
}
    1b14:	c8 01       	movw	r24, r16
    1b16:	cc 59       	subi	r28, 0x9C	; 156
    1b18:	df 4f       	sbci	r29, 0xFF	; 255
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    1b2e:	61 15       	cp	r22, r1
    1b30:	71 05       	cpc	r23, r1
    1b32:	59 f0       	breq	.+22     	; 0x1b4a <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b34:	8f e9       	ldi	r24, 0x9F	; 159
    1b36:	9f e0       	ldi	r25, 0x0F	; 15
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <_ZN4QEPU5Utils5delayEi+0xa>
    1b3c:	00 c0       	rjmp	.+0      	; 0x1b3e <_ZN4QEPU5Utils5delayEi+0x10>
    1b3e:	00 00       	nop
    1b40:	61 50       	subi	r22, 0x01	; 1
    1b42:	71 09       	sbc	r23, r1
    1b44:	61 15       	cp	r22, r1
    1b46:	71 05       	cpc	r23, r1
    1b48:	a9 f7       	brne	.-22     	; 0x1b34 <_ZN4QEPU5Utils5delayEi+0x6>
}
    1b4a:	08 95       	ret

00001b4c <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    1b4c:	4f 92       	push	r4
    1b4e:	5f 92       	push	r5
    1b50:	6f 92       	push	r6
    1b52:	7f 92       	push	r7
    1b54:	8f 92       	push	r8
    1b56:	9f 92       	push	r9
    1b58:	af 92       	push	r10
    1b5a:	bf 92       	push	r11
    1b5c:	cf 92       	push	r12
    1b5e:	df 92       	push	r13
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	ec 01       	movw	r28, r24
    1b6e:	6b 01       	movw	r12, r22
    1b70:	49 01       	movw	r8, r18
    1b72:	5a 01       	movw	r10, r20
    1b74:	27 01       	movw	r4, r14
    1b76:	38 01       	movw	r6, r16
	int * newthephi=(int*)malloc(sizeof(int)*5);
    1b78:	8a e0       	ldi	r24, 0x0A	; 10
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 9c 14 	call	0x2938	; 0x2938 <malloc>
    1b80:	8c 01       	movw	r16, r24
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    1b82:	f6 01       	movw	r30, r12
    1b84:	31 97       	sbiw	r30, 0x01	; 1
    1b86:	e6 31       	cpi	r30, 0x16	; 22
    1b88:	f1 05       	cpc	r31, r1
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <_ZN4QEPU7executeEill+0x42>
    1b8c:	6c c1       	rjmp	.+728    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
    1b8e:	e6 5d       	subi	r30, 0xD6	; 214
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	b2 01       	movw	r22, r4
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1ba2:	9c 01       	movw	r18, r24
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	b4 01       	movw	r22, r8
    1baa:	ce 01       	movw	r24, r28
    1bac:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	b2 01       	movw	r22, r4
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	50 e0       	ldi	r21, 0x00	; 0
    1bc2:	b4 01       	movw	r22, r8
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
		break;
    1bca:	4d c1       	rjmp	.+666    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	88 1a       	sub	r8, r24
    1bd0:	91 08       	sbc	r9, r1
    1bd2:	9c 82       	std	Y+4, r9	; 0x04
    1bd4:	8b 82       	std	Y+3, r8	; 0x03
		break;
    1bd6:	47 c1       	rjmp	.+654    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    1bd8:	b4 01       	movw	r22, r8
    1bda:	ce 01       	movw	r24, r28
    1bdc:	02 96       	adiw	r24, 0x02	; 2
    1bde:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN4QEPU5Utils5delayEi>
    1be2:	41 c1       	rjmp	.+642    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    1be4:	92 01       	movw	r18, r4
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	b4 01       	movw	r22, r8
    1bec:	ce 01       	movw	r24, r28
    1bee:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
		break;
    1bf2:	39 c1       	rjmp	.+626    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    1bf4:	92 01       	movw	r18, r4
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	b4 01       	movw	r22, r8
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
		break;
    1c02:	31 c1       	rjmp	.+610    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    1c04:	41 e0       	ldi	r20, 0x01	; 1
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	b4 01       	movw	r22, r8
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1c10:	8c 01       	movw	r16, r24
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	b4 01       	movw	r22, r8
    1c18:	ce 01       	movw	r24, r28
    1c1a:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1c1e:	a8 01       	movw	r20, r16
    1c20:	bc 01       	movw	r22, r24
    1c22:	ce 01       	movw	r24, r28
    1c24:	05 96       	adiw	r24, 0x05	; 5
    1c26:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZN5Gates1XEii>
    1c2a:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	20 81       	ld	r18, Z
    1c30:	31 81       	ldd	r19, Z+1	; 0x01
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	b4 01       	movw	r22, r8
    1c38:	ce 01       	movw	r24, r28
    1c3a:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
    1c3e:	f8 01       	movw	r30, r16
    1c40:	22 81       	ldd	r18, Z+2	; 0x02
    1c42:	33 81       	ldd	r19, Z+3	; 0x03
    1c44:	41 e0       	ldi	r20, 0x01	; 1
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	b4 01       	movw	r22, r8
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
		break;
    1c50:	0a c1       	rjmp	.+532    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    1c52:	41 e0       	ldi	r20, 0x01	; 1
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	b4 01       	movw	r22, r8
    1c58:	ce 01       	movw	r24, r28
    1c5a:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1c5e:	8c 01       	movw	r16, r24
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	b4 01       	movw	r22, r8
    1c66:	ce 01       	movw	r24, r28
    1c68:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1c6c:	a8 01       	movw	r20, r16
    1c6e:	bc 01       	movw	r22, r24
    1c70:	ce 01       	movw	r24, r28
    1c72:	05 96       	adiw	r24, 0x05	; 5
    1c74:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN5Gates1YEii>
    1c78:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	20 81       	ld	r18, Z
    1c7e:	31 81       	ldd	r19, Z+1	; 0x01
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	b4 01       	movw	r22, r8
    1c86:	ce 01       	movw	r24, r28
    1c88:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	22 81       	ldd	r18, Z+2	; 0x02
    1c90:	33 81       	ldd	r19, Z+3	; 0x03
    1c92:	41 e0       	ldi	r20, 0x01	; 1
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	b4 01       	movw	r22, r8
    1c98:	ce 01       	movw	r24, r28
    1c9a:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
		break;
    1c9e:	e3 c0       	rjmp	.+454    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	b4 01       	movw	r22, r8
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1cac:	8c 01       	movw	r16, r24
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	b4 01       	movw	r22, r8
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1cba:	a8 01       	movw	r20, r16
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	05 96       	adiw	r24, 0x05	; 5
    1cc2:	0e 94 26 09 	call	0x124c	; 0x124c <_ZN5Gates1ZEii>
    1cc6:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1cc8:	fc 01       	movw	r30, r24
    1cca:	20 81       	ld	r18, Z
    1ccc:	31 81       	ldd	r19, Z+1	; 0x01
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	b4 01       	movw	r22, r8
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
    1cda:	f8 01       	movw	r30, r16
    1cdc:	22 81       	ldd	r18, Z+2	; 0x02
    1cde:	33 81       	ldd	r19, Z+3	; 0x03
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	b4 01       	movw	r22, r8
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
		break;
    1cec:	bc c0       	rjmp	.+376    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    1cee:	41 e0       	ldi	r20, 0x01	; 1
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	b4 01       	movw	r22, r8
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1cfa:	8c 01       	movw	r16, r24
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	b4 01       	movw	r22, r8
    1d02:	ce 01       	movw	r24, r28
    1d04:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1d08:	a8 01       	movw	r20, r16
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	05 96       	adiw	r24, 0x05	; 5
    1d10:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN5Gates1HEii>
    1d14:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1d16:	fc 01       	movw	r30, r24
    1d18:	20 81       	ld	r18, Z
    1d1a:	31 81       	ldd	r19, Z+1	; 0x01
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	b4 01       	movw	r22, r8
    1d22:	ce 01       	movw	r24, r28
    1d24:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
    1d28:	f8 01       	movw	r30, r16
    1d2a:	22 81       	ldd	r18, Z+2	; 0x02
    1d2c:	33 81       	ldd	r19, Z+3	; 0x03
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	b4 01       	movw	r22, r8
    1d34:	ce 01       	movw	r24, r28
    1d36:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
		break;
    1d3a:	95 c0       	rjmp	.+298    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	b4 01       	movw	r22, r8
    1d42:	ce 01       	movw	r24, r28
    1d44:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1d48:	8c 01       	movw	r16, r24
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	b4 01       	movw	r22, r8
    1d50:	ce 01       	movw	r24, r28
    1d52:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1d56:	a8 01       	movw	r20, r16
    1d58:	bc 01       	movw	r22, r24
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	05 96       	adiw	r24, 0x05	; 5
    1d5e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN5Gates1SEii>
    1d62:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1d64:	fc 01       	movw	r30, r24
    1d66:	20 81       	ld	r18, Z
    1d68:	31 81       	ldd	r19, Z+1	; 0x01
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	b4 01       	movw	r22, r8
    1d70:	ce 01       	movw	r24, r28
    1d72:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
    1d76:	f8 01       	movw	r30, r16
    1d78:	22 81       	ldd	r18, Z+2	; 0x02
    1d7a:	33 81       	ldd	r19, Z+3	; 0x03
    1d7c:	41 e0       	ldi	r20, 0x01	; 1
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	b4 01       	movw	r22, r8
    1d82:	ce 01       	movw	r24, r28
    1d84:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
		break;
    1d88:	6e c0       	rjmp	.+220    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	b4 01       	movw	r22, r8
    1d90:	ce 01       	movw	r24, r28
    1d92:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1d96:	8c 01       	movw	r16, r24
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	b4 01       	movw	r22, r8
    1d9e:	ce 01       	movw	r24, r28
    1da0:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1da4:	a8 01       	movw	r20, r16
    1da6:	bc 01       	movw	r22, r24
    1da8:	ce 01       	movw	r24, r28
    1daa:	05 96       	adiw	r24, 0x05	; 5
    1dac:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <_ZN5Gates1TEii>
    1db0:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1db2:	fc 01       	movw	r30, r24
    1db4:	20 81       	ld	r18, Z
    1db6:	31 81       	ldd	r19, Z+1	; 0x01
    1db8:	40 e0       	ldi	r20, 0x00	; 0
    1dba:	50 e0       	ldi	r21, 0x00	; 0
    1dbc:	b4 01       	movw	r22, r8
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	22 81       	ldd	r18, Z+2	; 0x02
    1dc8:	33 81       	ldd	r19, Z+3	; 0x03
    1dca:	41 e0       	ldi	r20, 0x01	; 1
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	b4 01       	movw	r22, r8
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
		break;
    1dd6:	47 c0       	rjmp	.+142    	; 0x1e66 <_ZN4QEPU7executeEill+0x31a>
		//2 QUBIT GATES -
		case 0x16: 
			newthephi=gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	b2 01       	movw	r22, r4
    1dde:	ce 01       	movw	r24, r28
    1de0:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1de4:	8c 01       	movw	r16, r24
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	b2 01       	movw	r22, r4
    1dec:	ce 01       	movw	r24, r28
    1dee:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1df2:	6c 01       	movw	r12, r24
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	50 e0       	ldi	r21, 0x00	; 0
    1df8:	b4 01       	movw	r22, r8
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1e00:	7c 01       	movw	r14, r24
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	b4 01       	movw	r22, r8
    1e08:	ce 01       	movw	r24, r28
    1e0a:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN4QEPU4readEii>
    1e0e:	96 01       	movw	r18, r12
    1e10:	a7 01       	movw	r20, r14
    1e12:	bc 01       	movw	r22, r24
    1e14:	ce 01       	movw	r24, r28
    1e16:	05 96       	adiw	r24, 0x05	; 5
    1e18:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <_ZN5Gates3CNOEiiii>
    1e1c:	8c 01       	movw	r16, r24
			write(op1,THE,newthephi[0]); write(op1,PHI,newthephi[1]);
    1e1e:	fc 01       	movw	r30, r24
    1e20:	20 81       	ld	r18, Z
    1e22:	31 81       	ldd	r19, Z+1	; 0x01
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	b4 01       	movw	r22, r8
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
    1e30:	f8 01       	movw	r30, r16
    1e32:	22 81       	ldd	r18, Z+2	; 0x02
    1e34:	33 81       	ldd	r19, Z+3	; 0x03
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	b4 01       	movw	r22, r8
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
			write(op2,THE,newthephi[2]); write(op2,PHI,newthephi[3]);
    1e42:	f8 01       	movw	r30, r16
    1e44:	24 81       	ldd	r18, Z+4	; 0x04
    1e46:	35 81       	ldd	r19, Z+5	; 0x05
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	b2 01       	movw	r22, r4
    1e4e:	ce 01       	movw	r24, r28
    1e50:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
    1e54:	f8 01       	movw	r30, r16
    1e56:	26 81       	ldd	r18, Z+6	; 0x06
    1e58:	37 81       	ldd	r19, Z+7	; 0x07
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	b2 01       	movw	r22, r4
    1e60:	ce 01       	movw	r24, r28
    1e62:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU5writeEiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    1e66:	c8 01       	movw	r24, r16
    1e68:	0e 94 34 15 	call	0x2a68	; 0x2a68 <free>
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	af 90       	pop	r10
    1e80:	9f 90       	pop	r9
    1e82:	8f 90       	pop	r8
    1e84:	7f 90       	pop	r7
    1e86:	6f 90       	pop	r6
    1e88:	5f 90       	pop	r5
    1e8a:	4f 90       	pop	r4
    1e8c:	08 95       	ret

00001e8e <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    1e8e:	2f 92       	push	r2
    1e90:	3f 92       	push	r3
    1e92:	4f 92       	push	r4
    1e94:	5f 92       	push	r5
    1e96:	6f 92       	push	r6
    1e98:	7f 92       	push	r7
    1e9a:	8f 92       	push	r8
    1e9c:	9f 92       	push	r9
    1e9e:	af 92       	push	r10
    1ea0:	bf 92       	push	r11
    1ea2:	cf 92       	push	r12
    1ea4:	df 92       	push	r13
    1ea6:	ef 92       	push	r14
    1ea8:	ff 92       	push	r15
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	c0 57       	subi	r28, 0x70	; 112
    1eb8:	d1 09       	sbc	r29, r1
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    1ec6:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN6EEProm7readallEv>
    1eca:	bc 01       	movw	r22, r24
    1ecc:	c3 01       	movw	r24, r6
    1ece:	02 96       	adiw	r24, 0x02	; 2
    1ed0:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN4QEPU5Utils10str2intarrEPc>
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    1edc:	40 85       	ldd	r20, Z+8	; 0x08
    1ede:	51 85       	ldd	r21, Z+9	; 0x09
    1ee0:	4f 3f       	cpi	r20, 0xFF	; 255
    1ee2:	51 05       	cpc	r21, r1
    1ee4:	a1 f4       	brne	.+40     	; 0x1f0e <_ZN4QEPU3runEv+0x80>
    1ee6:	46 81       	ldd	r20, Z+6	; 0x06
    1ee8:	57 81       	ldd	r21, Z+7	; 0x07
    1eea:	4f 3f       	cpi	r20, 0xFF	; 255
    1eec:	51 05       	cpc	r21, r1
    1eee:	79 f4       	brne	.+30     	; 0x1f0e <_ZN4QEPU3runEv+0x80>
    1ef0:	44 81       	ldd	r20, Z+4	; 0x04
    1ef2:	55 81       	ldd	r21, Z+5	; 0x05
    1ef4:	4f 3f       	cpi	r20, 0xFF	; 255
    1ef6:	51 05       	cpc	r21, r1
    1ef8:	51 f4       	brne	.+20     	; 0x1f0e <_ZN4QEPU3runEv+0x80>
    1efa:	42 81       	ldd	r20, Z+2	; 0x02
    1efc:	53 81       	ldd	r21, Z+3	; 0x03
    1efe:	4f 3f       	cpi	r20, 0xFF	; 255
    1f00:	51 05       	cpc	r21, r1
    1f02:	29 f4       	brne	.+10     	; 0x1f0e <_ZN4QEPU3runEv+0x80>
    1f04:	40 81       	ld	r20, Z
    1f06:	51 81       	ldd	r21, Z+1	; 0x01
    1f08:	4f 3f       	cpi	r20, 0xFF	; 255
    1f0a:	51 05       	cpc	r21, r1
    1f0c:	21 f0       	breq	.+8      	; 0x1f16 <_ZN4QEPU3runEv+0x88>
    1f0e:	2f 5f       	subi	r18, 0xFF	; 255
    1f10:	3f 4f       	sbci	r19, 0xFF	; 255
    1f12:	32 96       	adiw	r30, 0x02	; 2
    1f14:	e3 cf       	rjmp	.-58     	; 0x1edc <_ZN4QEPU3runEv+0x4e>
    1f16:	a9 01       	movw	r20, r18
    1f18:	44 50       	subi	r20, 0x04	; 4
    1f1a:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1f1c:	14 16       	cp	r1, r20
    1f1e:	15 06       	cpc	r1, r21
    1f20:	0c f0       	brlt	.+2      	; 0x1f24 <_ZN4QEPU3runEv+0x96>
    1f22:	07 c1       	rjmp	.+526    	; 0x2132 <_ZN4QEPU3runEv+0x2a4>
    1f24:	fc 01       	movw	r30, r24
    1f26:	25 50       	subi	r18, 0x05	; 5
    1f28:	31 09       	sbc	r19, r1
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	41 2c       	mov	r4, r1
    1f34:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    1f36:	c1 2c       	mov	r12, r1
    1f38:	d1 2c       	mov	r13, r1
    1f3a:	0c c0       	rjmp	.+24     	; 0x1f54 <_ZN4QEPU3runEv+0xc6>
    1f3c:	69 30       	cpi	r22, 0x09	; 9
    1f3e:	71 05       	cpc	r23, r1
    1f40:	34 f0       	brlt	.+12     	; 0x1f4e <_ZN4QEPU3runEv+0xc0>
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	48 1a       	sub	r4, r24
    1f46:	58 0a       	sbc	r5, r24
    1f48:	8c 2d       	mov	r24, r12
    1f4a:	9d 2d       	mov	r25, r13
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    1f4e:	cb 01       	movw	r24, r22
    1f50:	4f 5f       	subi	r20, 0xFF	; 255
    1f52:	5f 4f       	sbci	r21, 0xFF	; 255
    1f54:	bc 01       	movw	r22, r24
    1f56:	6f 5f       	subi	r22, 0xFF	; 255
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	01 91       	ld	r16, Z+
    1f5c:	11 91       	ld	r17, Z+
    1f5e:	d2 01       	movw	r26, r4
    1f60:	aa 0f       	add	r26, r26
    1f62:	bb 1f       	adc	r27, r27
    1f64:	aa 0f       	add	r26, r26
    1f66:	bb 1f       	adc	r27, r27
    1f68:	aa 0f       	add	r26, r26
    1f6a:	bb 1f       	adc	r27, r27
    1f6c:	a4 0d       	add	r26, r4
    1f6e:	b5 1d       	adc	r27, r5
    1f70:	8a 0f       	add	r24, r26
    1f72:	9b 1f       	adc	r25, r27
    1f74:	dc 01       	movw	r26, r24
    1f76:	aa 0f       	add	r26, r26
    1f78:	bb 1f       	adc	r27, r27
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	8c 0f       	add	r24, r28
    1f80:	9d 1f       	adc	r25, r29
    1f82:	a8 0f       	add	r26, r24
    1f84:	b9 1f       	adc	r27, r25
    1f86:	0d 93       	st	X+, r16
    1f88:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1f8a:	42 17       	cp	r20, r18
    1f8c:	53 07       	cpc	r21, r19
    1f8e:	b1 f6       	brne	.-84     	; 0x1f3c <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1f90:	f3 01       	movw	r30, r6
    1f92:	14 82       	std	Z+4, r1	; 0x04
    1f94:	13 82       	std	Z+3, r1	; 0x03
    1f96:	14 14       	cp	r1, r4
    1f98:	15 04       	cpc	r1, r5
    1f9a:	0c f0       	brlt	.+2      	; 0x1f9e <_ZN4QEPU3runEv+0x110>
    1f9c:	c6 c0       	rjmp	.+396    	; 0x212a <_ZN4QEPU3runEv+0x29c>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1fa2:	5e 01       	movw	r10, r28
    1fa4:	f2 e6       	ldi	r31, 0x62	; 98
    1fa6:	af 0e       	add	r10, r31
    1fa8:	b1 1c       	adc	r11, r1
    1faa:	6e 01       	movw	r12, r28
    1fac:	2b e5       	ldi	r18, 0x5B	; 91
    1fae:	c2 0e       	add	r12, r18
    1fb0:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1fb2:	0f 2e       	mov	r0, r31
    1fb4:	f5 ee       	ldi	r31, 0xE5	; 229
    1fb6:	8f 2e       	mov	r8, r31
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	9f 2e       	mov	r9, r31
    1fbc:	f0 2d       	mov	r31, r0
    1fbe:	ae 96       	adiw	r28, 0x2e	; 46
    1fc0:	af ae       	std	Y+63, r10	; 0x3f
    1fc2:	ae 97       	sbiw	r28, 0x2e	; 46
    1fc4:	af 96       	adiw	r28, 0x2f	; 47
    1fc6:	bf ae       	std	Y+63, r11	; 0x3f
    1fc8:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1fca:	e0 96       	adiw	r28, 0x30	; 48
    1fcc:	cf ae       	std	Y+63, r12	; 0x3f
    1fce:	e0 97       	sbiw	r28, 0x30	; 48
    1fd0:	e1 96       	adiw	r28, 0x31	; 49
    1fd2:	df ae       	std	Y+63, r13	; 0x3f
    1fd4:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1fd6:	f5 01       	movw	r30, r10
    1fd8:	10 82       	st	Z, r1
    1fda:	11 82       	std	Z+1, r1	; 0x01
    1fdc:	12 82       	std	Z+2, r1	; 0x02
    1fde:	13 82       	std	Z+3, r1	; 0x03
    1fe0:	14 82       	std	Z+4, r1	; 0x04
    1fe2:	15 82       	std	Z+5, r1	; 0x05
    1fe4:	16 82       	std	Z+6, r1	; 0x06
    1fe6:	f6 01       	movw	r30, r12
    1fe8:	10 82       	st	Z, r1
    1fea:	11 82       	std	Z+1, r1	; 0x01
    1fec:	12 82       	std	Z+2, r1	; 0x02
    1fee:	13 82       	std	Z+3, r1	; 0x03
    1ff0:	14 82       	std	Z+4, r1	; 0x04
    1ff2:	15 82       	std	Z+5, r1	; 0x05
    1ff4:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	ee 0f       	add	r30, r30
    1ffe:	ff 1f       	adc	r31, r31
    2000:	ee 0f       	add	r30, r30
    2002:	ff 1f       	adc	r31, r31
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	8e 0f       	add	r24, r30
    200a:	9f 1f       	adc	r25, r31
    200c:	e1 e0       	ldi	r30, 0x01	; 1
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	ec 0f       	add	r30, r28
    2012:	fd 1f       	adc	r31, r29
    2014:	e8 0f       	add	r30, r24
    2016:	f9 1f       	adc	r31, r25
    2018:	20 80       	ld	r2, Z
    201a:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    201c:	00 e0       	ldi	r16, 0x00	; 0
    201e:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    2020:	0f 5f       	subi	r16, 0xFF	; 255
    2022:	1f 4f       	sbci	r17, 0xFF	; 255
    2024:	f3 01       	movw	r30, r6
    2026:	83 81       	ldd	r24, Z+3	; 0x03
    2028:	94 81       	ldd	r25, Z+4	; 0x04
    202a:	fc 01       	movw	r30, r24
    202c:	ee 0f       	add	r30, r30
    202e:	ff 1f       	adc	r31, r31
    2030:	ee 0f       	add	r30, r30
    2032:	ff 1f       	adc	r31, r31
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	8e 0f       	add	r24, r30
    203a:	9f 1f       	adc	r25, r31
    203c:	80 0f       	add	r24, r16
    203e:	91 1f       	adc	r25, r17
    2040:	fc 01       	movw	r30, r24
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	8c 0f       	add	r24, r28
    204c:	9d 1f       	adc	r25, r29
    204e:	e8 0f       	add	r30, r24
    2050:	f9 1f       	adc	r31, r25
    2052:	81 81       	ldd	r24, Z+1	; 0x01
    2054:	8f 93       	push	r24
    2056:	80 81       	ld	r24, Z
    2058:	8f 93       	push	r24
    205a:	bf 92       	push	r11
    205c:	af 92       	push	r10
    205e:	9f 92       	push	r9
    2060:	8f 92       	push	r8
    2062:	bf 92       	push	r11
    2064:	af 92       	push	r10
    2066:	0e 94 5d 17 	call	0x2eba	; 0x2eba <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    206a:	f3 01       	movw	r30, r6
    206c:	83 81       	ldd	r24, Z+3	; 0x03
    206e:	94 81       	ldd	r25, Z+4	; 0x04
    2070:	fc 01       	movw	r30, r24
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	ee 0f       	add	r30, r30
    207c:	ff 1f       	adc	r31, r31
    207e:	e8 0f       	add	r30, r24
    2080:	f9 1f       	adc	r31, r25
    2082:	e0 0f       	add	r30, r16
    2084:	f1 1f       	adc	r31, r17
    2086:	34 96       	adiw	r30, 0x04	; 4
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	8c 0f       	add	r24, r28
    2092:	9d 1f       	adc	r25, r29
    2094:	e8 0f       	add	r30, r24
    2096:	f9 1f       	adc	r31, r25
    2098:	81 81       	ldd	r24, Z+1	; 0x01
    209a:	8f 93       	push	r24
    209c:	80 81       	ld	r24, Z
    209e:	8f 93       	push	r24
    20a0:	df 92       	push	r13
    20a2:	cf 92       	push	r12
    20a4:	9f 92       	push	r9
    20a6:	8f 92       	push	r8
    20a8:	df 92       	push	r13
    20aa:	cf 92       	push	r12
    20ac:	0e 94 5d 17 	call	0x2eba	; 0x2eba <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	04 30       	cpi	r16, 0x04	; 4
    20bc:	11 05       	cpc	r17, r1
    20be:	09 f0       	breq	.+2      	; 0x20c2 <_ZN4QEPU3runEv+0x234>
    20c0:	af cf       	rjmp	.-162    	; 0x2020 <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    20c2:	40 e1       	ldi	r20, 0x10	; 16
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	e0 96       	adiw	r28, 0x30	; 48
    20cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    20ce:	e0 97       	sbiw	r28, 0x30	; 48
    20d0:	e1 96       	adiw	r28, 0x31	; 49
    20d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    20d4:	e1 97       	sbiw	r28, 0x31	; 49
    20d6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <strtol>
    20da:	ad 96       	adiw	r28, 0x2d	; 45
    20dc:	6c af       	std	Y+60, r22	; 0x3c
    20de:	7d af       	std	Y+61, r23	; 0x3d
    20e0:	8e af       	std	Y+62, r24	; 0x3e
    20e2:	9f af       	std	Y+63, r25	; 0x3f
    20e4:	ad 97       	sbiw	r28, 0x2d	; 45
    20e6:	40 e1       	ldi	r20, 0x10	; 16
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	ae 96       	adiw	r28, 0x2e	; 46
    20f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    20f2:	ae 97       	sbiw	r28, 0x2e	; 46
    20f4:	af 96       	adiw	r28, 0x2f	; 47
    20f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    20f8:	af 97       	sbiw	r28, 0x2f	; 47
    20fa:	0e 94 21 16 	call	0x2c42	; 0x2c42 <strtol>
    20fe:	9b 01       	movw	r18, r22
    2100:	ac 01       	movw	r20, r24
    2102:	ad 96       	adiw	r28, 0x2d	; 45
    2104:	ec ac       	ldd	r14, Y+60	; 0x3c
    2106:	fd ac       	ldd	r15, Y+61	; 0x3d
    2108:	0e ad       	ldd	r16, Y+62	; 0x3e
    210a:	1f ad       	ldd	r17, Y+63	; 0x3f
    210c:	ad 97       	sbiw	r28, 0x2d	; 45
    210e:	b1 01       	movw	r22, r2
    2110:	c3 01       	movw	r24, r6
    2112:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    2116:	f3 01       	movw	r30, r6
    2118:	83 81       	ldd	r24, Z+3	; 0x03
    211a:	94 81       	ldd	r25, Z+4	; 0x04
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	94 83       	std	Z+4, r25	; 0x04
    2120:	83 83       	std	Z+3, r24	; 0x03
    2122:	84 15       	cp	r24, r4
    2124:	95 05       	cpc	r25, r5
    2126:	0c f4       	brge	.+2      	; 0x212a <_ZN4QEPU3runEv+0x29c>
    2128:	56 cf       	rjmp	.-340    	; 0x1fd6 <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    212a:	c3 01       	movw	r24, r6
    212c:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN4QEPU7dumpmemEv>
    2130:	04 c0       	rjmp	.+8      	; 0x213a <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    2132:	f3 01       	movw	r30, r6
    2134:	14 82       	std	Z+4, r1	; 0x04
    2136:	13 82       	std	Z+3, r1	; 0x03
    2138:	f8 cf       	rjmp	.-16     	; 0x212a <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    213a:	c0 59       	subi	r28, 0x90	; 144
    213c:	df 4f       	sbci	r29, 0xFF	; 255
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	ff 90       	pop	r15
    2152:	ef 90       	pop	r14
    2154:	df 90       	pop	r13
    2156:	cf 90       	pop	r12
    2158:	bf 90       	pop	r11
    215a:	af 90       	pop	r10
    215c:	9f 90       	pop	r9
    215e:	8f 90       	pop	r8
    2160:	7f 90       	pop	r7
    2162:	6f 90       	pop	r6
    2164:	5f 90       	pop	r5
    2166:	4f 90       	pop	r4
    2168:	3f 90       	pop	r3
    216a:	2f 90       	pop	r2
    216c:	08 95       	ret

0000216e <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    216e:	83 e3       	ldi	r24, 0x33	; 51
    2170:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    2172:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    2174:	86 e8       	ldi	r24, 0x86	; 134
    2176:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    2178:	88 e1       	ldi	r24, 0x18	; 24
    217a:	8a b9       	out	0x0a, r24	; 10
    217c:	08 95       	ret

0000217e <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    217e:	5d 9b       	sbis	0x0b, 5	; 11
    2180:	fe cf       	rjmp	.-4      	; 0x217e <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    2182:	6c b9       	out	0x0c, r22	; 12
    2184:	08 95       	ret

00002186 <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	8c 01       	movw	r16, r24
    2190:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    2192:	68 81       	ld	r22, Y
    2194:	66 23       	and	r22, r22
    2196:	39 f0       	breq	.+14     	; 0x21a6 <_ZN6Serial8writestrEPc+0x20>
    2198:	21 96       	adiw	r28, 0x01	; 1
    219a:	c8 01       	movw	r24, r16
    219c:	0e 94 bf 10 	call	0x217e	; 0x217e <_ZN6Serial5writeEc>
    21a0:	69 91       	ld	r22, Y+
    21a2:	61 11       	cpse	r22, r1
    21a4:	fa cf       	rjmp	.-12     	; 0x219a <_ZN6Serial8writestrEPc+0x14>
}
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	08 95       	ret

000021b0 <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	ec 01       	movw	r28, r24
	writestr(data);
    21b6:	0e 94 c3 10 	call	0x2186	; 0x2186 <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    21ba:	6d e0       	ldi	r22, 0x0D	; 13
    21bc:	ce 01       	movw	r24, r28
    21be:	0e 94 bf 10 	call	0x217e	; 0x217e <_ZN6Serial5writeEc>
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	08 95       	ret

000021c8 <acos>:
    21c8:	9f 93       	push	r25
    21ca:	9f 77       	andi	r25, 0x7F	; 127
    21cc:	75 d1       	rcall	.+746    	; 0x24b8 <__fp_arccos>
    21ce:	0f 90       	pop	r0
    21d0:	00 20       	and	r0, r0
    21d2:	3a f4       	brpl	.+14     	; 0x21e2 <acos+0x1a>
    21d4:	90 58       	subi	r25, 0x80	; 128
    21d6:	a2 ea       	ldi	r26, 0xA2	; 162
    21d8:	2a ed       	ldi	r18, 0xDA	; 218
    21da:	3f e0       	ldi	r19, 0x0F	; 15
    21dc:	49 e4       	ldi	r20, 0x49	; 73
    21de:	50 e4       	ldi	r21, 0x40	; 64
    21e0:	13 d0       	rcall	.+38     	; 0x2208 <__addsf3x>
    21e2:	0d c2       	rjmp	.+1050   	; 0x25fe <__fp_round>

000021e4 <__subsf3>:
    21e4:	50 58       	subi	r21, 0x80	; 128

000021e6 <__addsf3>:
    21e6:	bb 27       	eor	r27, r27
    21e8:	aa 27       	eor	r26, r26
    21ea:	0e d0       	rcall	.+28     	; 0x2208 <__addsf3x>
    21ec:	08 c2       	rjmp	.+1040   	; 0x25fe <__fp_round>
    21ee:	d1 d1       	rcall	.+930    	; 0x2592 <__fp_pscA>
    21f0:	30 f0       	brcs	.+12     	; 0x21fe <__addsf3+0x18>
    21f2:	d6 d1       	rcall	.+940    	; 0x25a0 <__fp_pscB>
    21f4:	20 f0       	brcs	.+8      	; 0x21fe <__addsf3+0x18>
    21f6:	31 f4       	brne	.+12     	; 0x2204 <__addsf3+0x1e>
    21f8:	9f 3f       	cpi	r25, 0xFF	; 255
    21fa:	11 f4       	brne	.+4      	; 0x2200 <__addsf3+0x1a>
    21fc:	1e f4       	brtc	.+6      	; 0x2204 <__addsf3+0x1e>
    21fe:	a1 c1       	rjmp	.+834    	; 0x2542 <__fp_nan>
    2200:	0e f4       	brtc	.+2      	; 0x2204 <__addsf3+0x1e>
    2202:	e0 95       	com	r30
    2204:	e7 fb       	bst	r30, 7
    2206:	97 c1       	rjmp	.+814    	; 0x2536 <__fp_inf>

00002208 <__addsf3x>:
    2208:	e9 2f       	mov	r30, r25
    220a:	1b d2       	rcall	.+1078   	; 0x2642 <__fp_split3>
    220c:	80 f3       	brcs	.-32     	; 0x21ee <__addsf3+0x8>
    220e:	ba 17       	cp	r27, r26
    2210:	62 07       	cpc	r22, r18
    2212:	73 07       	cpc	r23, r19
    2214:	84 07       	cpc	r24, r20
    2216:	95 07       	cpc	r25, r21
    2218:	18 f0       	brcs	.+6      	; 0x2220 <__addsf3x+0x18>
    221a:	71 f4       	brne	.+28     	; 0x2238 <__addsf3x+0x30>
    221c:	9e f5       	brtc	.+102    	; 0x2284 <__addsf3x+0x7c>
    221e:	33 c2       	rjmp	.+1126   	; 0x2686 <__fp_zero>
    2220:	0e f4       	brtc	.+2      	; 0x2224 <__addsf3x+0x1c>
    2222:	e0 95       	com	r30
    2224:	0b 2e       	mov	r0, r27
    2226:	ba 2f       	mov	r27, r26
    2228:	a0 2d       	mov	r26, r0
    222a:	0b 01       	movw	r0, r22
    222c:	b9 01       	movw	r22, r18
    222e:	90 01       	movw	r18, r0
    2230:	0c 01       	movw	r0, r24
    2232:	ca 01       	movw	r24, r20
    2234:	a0 01       	movw	r20, r0
    2236:	11 24       	eor	r1, r1
    2238:	ff 27       	eor	r31, r31
    223a:	59 1b       	sub	r21, r25
    223c:	99 f0       	breq	.+38     	; 0x2264 <__addsf3x+0x5c>
    223e:	59 3f       	cpi	r21, 0xF9	; 249
    2240:	50 f4       	brcc	.+20     	; 0x2256 <__addsf3x+0x4e>
    2242:	50 3e       	cpi	r21, 0xE0	; 224
    2244:	68 f1       	brcs	.+90     	; 0x22a0 <__addsf3x+0x98>
    2246:	1a 16       	cp	r1, r26
    2248:	f0 40       	sbci	r31, 0x00	; 0
    224a:	a2 2f       	mov	r26, r18
    224c:	23 2f       	mov	r18, r19
    224e:	34 2f       	mov	r19, r20
    2250:	44 27       	eor	r20, r20
    2252:	58 5f       	subi	r21, 0xF8	; 248
    2254:	f3 cf       	rjmp	.-26     	; 0x223c <__addsf3x+0x34>
    2256:	46 95       	lsr	r20
    2258:	37 95       	ror	r19
    225a:	27 95       	ror	r18
    225c:	a7 95       	ror	r26
    225e:	f0 40       	sbci	r31, 0x00	; 0
    2260:	53 95       	inc	r21
    2262:	c9 f7       	brne	.-14     	; 0x2256 <__addsf3x+0x4e>
    2264:	7e f4       	brtc	.+30     	; 0x2284 <__addsf3x+0x7c>
    2266:	1f 16       	cp	r1, r31
    2268:	ba 0b       	sbc	r27, r26
    226a:	62 0b       	sbc	r22, r18
    226c:	73 0b       	sbc	r23, r19
    226e:	84 0b       	sbc	r24, r20
    2270:	ba f0       	brmi	.+46     	; 0x22a0 <__addsf3x+0x98>
    2272:	91 50       	subi	r25, 0x01	; 1
    2274:	a1 f0       	breq	.+40     	; 0x229e <__addsf3x+0x96>
    2276:	ff 0f       	add	r31, r31
    2278:	bb 1f       	adc	r27, r27
    227a:	66 1f       	adc	r22, r22
    227c:	77 1f       	adc	r23, r23
    227e:	88 1f       	adc	r24, r24
    2280:	c2 f7       	brpl	.-16     	; 0x2272 <__addsf3x+0x6a>
    2282:	0e c0       	rjmp	.+28     	; 0x22a0 <__addsf3x+0x98>
    2284:	ba 0f       	add	r27, r26
    2286:	62 1f       	adc	r22, r18
    2288:	73 1f       	adc	r23, r19
    228a:	84 1f       	adc	r24, r20
    228c:	48 f4       	brcc	.+18     	; 0x22a0 <__addsf3x+0x98>
    228e:	87 95       	ror	r24
    2290:	77 95       	ror	r23
    2292:	67 95       	ror	r22
    2294:	b7 95       	ror	r27
    2296:	f7 95       	ror	r31
    2298:	9e 3f       	cpi	r25, 0xFE	; 254
    229a:	08 f0       	brcs	.+2      	; 0x229e <__addsf3x+0x96>
    229c:	b3 cf       	rjmp	.-154    	; 0x2204 <__addsf3+0x1e>
    229e:	93 95       	inc	r25
    22a0:	88 0f       	add	r24, r24
    22a2:	08 f0       	brcs	.+2      	; 0x22a6 <__addsf3x+0x9e>
    22a4:	99 27       	eor	r25, r25
    22a6:	ee 0f       	add	r30, r30
    22a8:	97 95       	ror	r25
    22aa:	87 95       	ror	r24
    22ac:	08 95       	ret

000022ae <atan>:
    22ae:	df 93       	push	r29
    22b0:	dd 27       	eor	r29, r29
    22b2:	b9 2f       	mov	r27, r25
    22b4:	bf 77       	andi	r27, 0x7F	; 127
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	16 16       	cp	r1, r22
    22bc:	17 06       	cpc	r1, r23
    22be:	48 07       	cpc	r20, r24
    22c0:	5b 07       	cpc	r21, r27
    22c2:	10 f4       	brcc	.+4      	; 0x22c8 <atan+0x1a>
    22c4:	d9 2f       	mov	r29, r25
    22c6:	ea d1       	rcall	.+980    	; 0x269c <inverse>
    22c8:	9f 93       	push	r25
    22ca:	8f 93       	push	r24
    22cc:	7f 93       	push	r23
    22ce:	6f 93       	push	r22
    22d0:	dc d2       	rcall	.+1464   	; 0x288a <square>
    22d2:	e0 e8       	ldi	r30, 0x80	; 128
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	38 d1       	rcall	.+624    	; 0x2548 <__fp_powser>
    22d8:	92 d1       	rcall	.+804    	; 0x25fe <__fp_round>
    22da:	2f 91       	pop	r18
    22dc:	3f 91       	pop	r19
    22de:	4f 91       	pop	r20
    22e0:	5f 91       	pop	r21
    22e2:	34 d2       	rcall	.+1128   	; 0x274c <__mulsf3x>
    22e4:	dd 23       	and	r29, r29
    22e6:	49 f0       	breq	.+18     	; 0x22fa <atan+0x4c>
    22e8:	90 58       	subi	r25, 0x80	; 128
    22ea:	a2 ea       	ldi	r26, 0xA2	; 162
    22ec:	2a ed       	ldi	r18, 0xDA	; 218
    22ee:	3f e0       	ldi	r19, 0x0F	; 15
    22f0:	49 ec       	ldi	r20, 0xC9	; 201
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	d0 78       	andi	r29, 0x80	; 128
    22f6:	5d 27       	eor	r21, r29
    22f8:	87 df       	rcall	.-242    	; 0x2208 <__addsf3x>
    22fa:	df 91       	pop	r29
    22fc:	80 c1       	rjmp	.+768    	; 0x25fe <__fp_round>

000022fe <__cmpsf2>:
    22fe:	f7 d0       	rcall	.+494    	; 0x24ee <__fp_cmp>
    2300:	08 f4       	brcc	.+2      	; 0x2304 <__cmpsf2+0x6>
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	08 95       	ret

00002306 <cos>:
    2306:	54 d1       	rcall	.+680    	; 0x25b0 <__fp_rempio2>
    2308:	e3 95       	inc	r30
    230a:	8a c1       	rjmp	.+788    	; 0x2620 <__fp_sinus>

0000230c <__divsf3>:
    230c:	0c d0       	rcall	.+24     	; 0x2326 <__divsf3x>
    230e:	77 c1       	rjmp	.+750    	; 0x25fe <__fp_round>
    2310:	47 d1       	rcall	.+654    	; 0x25a0 <__fp_pscB>
    2312:	40 f0       	brcs	.+16     	; 0x2324 <__divsf3+0x18>
    2314:	3e d1       	rcall	.+636    	; 0x2592 <__fp_pscA>
    2316:	30 f0       	brcs	.+12     	; 0x2324 <__divsf3+0x18>
    2318:	21 f4       	brne	.+8      	; 0x2322 <__divsf3+0x16>
    231a:	5f 3f       	cpi	r21, 0xFF	; 255
    231c:	19 f0       	breq	.+6      	; 0x2324 <__divsf3+0x18>
    231e:	0b c1       	rjmp	.+534    	; 0x2536 <__fp_inf>
    2320:	51 11       	cpse	r21, r1
    2322:	b2 c1       	rjmp	.+868    	; 0x2688 <__fp_szero>
    2324:	0e c1       	rjmp	.+540    	; 0x2542 <__fp_nan>

00002326 <__divsf3x>:
    2326:	8d d1       	rcall	.+794    	; 0x2642 <__fp_split3>
    2328:	98 f3       	brcs	.-26     	; 0x2310 <__divsf3+0x4>

0000232a <__divsf3_pse>:
    232a:	99 23       	and	r25, r25
    232c:	c9 f3       	breq	.-14     	; 0x2320 <__divsf3+0x14>
    232e:	55 23       	and	r21, r21
    2330:	b1 f3       	breq	.-20     	; 0x231e <__divsf3+0x12>
    2332:	95 1b       	sub	r25, r21
    2334:	55 0b       	sbc	r21, r21
    2336:	bb 27       	eor	r27, r27
    2338:	aa 27       	eor	r26, r26
    233a:	62 17       	cp	r22, r18
    233c:	73 07       	cpc	r23, r19
    233e:	84 07       	cpc	r24, r20
    2340:	38 f0       	brcs	.+14     	; 0x2350 <__divsf3_pse+0x26>
    2342:	9f 5f       	subi	r25, 0xFF	; 255
    2344:	5f 4f       	sbci	r21, 0xFF	; 255
    2346:	22 0f       	add	r18, r18
    2348:	33 1f       	adc	r19, r19
    234a:	44 1f       	adc	r20, r20
    234c:	aa 1f       	adc	r26, r26
    234e:	a9 f3       	breq	.-22     	; 0x233a <__divsf3_pse+0x10>
    2350:	33 d0       	rcall	.+102    	; 0x23b8 <__divsf3_pse+0x8e>
    2352:	0e 2e       	mov	r0, r30
    2354:	3a f0       	brmi	.+14     	; 0x2364 <__divsf3_pse+0x3a>
    2356:	e0 e8       	ldi	r30, 0x80	; 128
    2358:	30 d0       	rcall	.+96     	; 0x23ba <__divsf3_pse+0x90>
    235a:	91 50       	subi	r25, 0x01	; 1
    235c:	50 40       	sbci	r21, 0x00	; 0
    235e:	e6 95       	lsr	r30
    2360:	00 1c       	adc	r0, r0
    2362:	ca f7       	brpl	.-14     	; 0x2356 <__divsf3_pse+0x2c>
    2364:	29 d0       	rcall	.+82     	; 0x23b8 <__divsf3_pse+0x8e>
    2366:	fe 2f       	mov	r31, r30
    2368:	27 d0       	rcall	.+78     	; 0x23b8 <__divsf3_pse+0x8e>
    236a:	66 0f       	add	r22, r22
    236c:	77 1f       	adc	r23, r23
    236e:	88 1f       	adc	r24, r24
    2370:	bb 1f       	adc	r27, r27
    2372:	26 17       	cp	r18, r22
    2374:	37 07       	cpc	r19, r23
    2376:	48 07       	cpc	r20, r24
    2378:	ab 07       	cpc	r26, r27
    237a:	b0 e8       	ldi	r27, 0x80	; 128
    237c:	09 f0       	breq	.+2      	; 0x2380 <__divsf3_pse+0x56>
    237e:	bb 0b       	sbc	r27, r27
    2380:	80 2d       	mov	r24, r0
    2382:	bf 01       	movw	r22, r30
    2384:	ff 27       	eor	r31, r31
    2386:	93 58       	subi	r25, 0x83	; 131
    2388:	5f 4f       	sbci	r21, 0xFF	; 255
    238a:	2a f0       	brmi	.+10     	; 0x2396 <__divsf3_pse+0x6c>
    238c:	9e 3f       	cpi	r25, 0xFE	; 254
    238e:	51 05       	cpc	r21, r1
    2390:	68 f0       	brcs	.+26     	; 0x23ac <__divsf3_pse+0x82>
    2392:	d1 c0       	rjmp	.+418    	; 0x2536 <__fp_inf>
    2394:	79 c1       	rjmp	.+754    	; 0x2688 <__fp_szero>
    2396:	5f 3f       	cpi	r21, 0xFF	; 255
    2398:	ec f3       	brlt	.-6      	; 0x2394 <__divsf3_pse+0x6a>
    239a:	98 3e       	cpi	r25, 0xE8	; 232
    239c:	dc f3       	brlt	.-10     	; 0x2394 <__divsf3_pse+0x6a>
    239e:	86 95       	lsr	r24
    23a0:	77 95       	ror	r23
    23a2:	67 95       	ror	r22
    23a4:	b7 95       	ror	r27
    23a6:	f7 95       	ror	r31
    23a8:	9f 5f       	subi	r25, 0xFF	; 255
    23aa:	c9 f7       	brne	.-14     	; 0x239e <__divsf3_pse+0x74>
    23ac:	88 0f       	add	r24, r24
    23ae:	91 1d       	adc	r25, r1
    23b0:	96 95       	lsr	r25
    23b2:	87 95       	ror	r24
    23b4:	97 f9       	bld	r25, 7
    23b6:	08 95       	ret
    23b8:	e1 e0       	ldi	r30, 0x01	; 1
    23ba:	66 0f       	add	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	bb 1f       	adc	r27, r27
    23c2:	62 17       	cp	r22, r18
    23c4:	73 07       	cpc	r23, r19
    23c6:	84 07       	cpc	r24, r20
    23c8:	ba 07       	cpc	r27, r26
    23ca:	20 f0       	brcs	.+8      	; 0x23d4 <__divsf3_pse+0xaa>
    23cc:	62 1b       	sub	r22, r18
    23ce:	73 0b       	sbc	r23, r19
    23d0:	84 0b       	sbc	r24, r20
    23d2:	ba 0b       	sbc	r27, r26
    23d4:	ee 1f       	adc	r30, r30
    23d6:	88 f7       	brcc	.-30     	; 0x23ba <__divsf3_pse+0x90>
    23d8:	e0 95       	com	r30
    23da:	08 95       	ret

000023dc <__fixsfsi>:
    23dc:	04 d0       	rcall	.+8      	; 0x23e6 <__fixunssfsi>
    23de:	68 94       	set
    23e0:	b1 11       	cpse	r27, r1
    23e2:	52 c1       	rjmp	.+676    	; 0x2688 <__fp_szero>
    23e4:	08 95       	ret

000023e6 <__fixunssfsi>:
    23e6:	35 d1       	rcall	.+618    	; 0x2652 <__fp_splitA>
    23e8:	88 f0       	brcs	.+34     	; 0x240c <__fixunssfsi+0x26>
    23ea:	9f 57       	subi	r25, 0x7F	; 127
    23ec:	90 f0       	brcs	.+36     	; 0x2412 <__fixunssfsi+0x2c>
    23ee:	b9 2f       	mov	r27, r25
    23f0:	99 27       	eor	r25, r25
    23f2:	b7 51       	subi	r27, 0x17	; 23
    23f4:	a0 f0       	brcs	.+40     	; 0x241e <__fixunssfsi+0x38>
    23f6:	d1 f0       	breq	.+52     	; 0x242c <__fixunssfsi+0x46>
    23f8:	66 0f       	add	r22, r22
    23fa:	77 1f       	adc	r23, r23
    23fc:	88 1f       	adc	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	1a f0       	brmi	.+6      	; 0x2408 <__fixunssfsi+0x22>
    2402:	ba 95       	dec	r27
    2404:	c9 f7       	brne	.-14     	; 0x23f8 <__fixunssfsi+0x12>
    2406:	12 c0       	rjmp	.+36     	; 0x242c <__fixunssfsi+0x46>
    2408:	b1 30       	cpi	r27, 0x01	; 1
    240a:	81 f0       	breq	.+32     	; 0x242c <__fixunssfsi+0x46>
    240c:	3c d1       	rcall	.+632    	; 0x2686 <__fp_zero>
    240e:	b1 e0       	ldi	r27, 0x01	; 1
    2410:	08 95       	ret
    2412:	39 c1       	rjmp	.+626    	; 0x2686 <__fp_zero>
    2414:	67 2f       	mov	r22, r23
    2416:	78 2f       	mov	r23, r24
    2418:	88 27       	eor	r24, r24
    241a:	b8 5f       	subi	r27, 0xF8	; 248
    241c:	39 f0       	breq	.+14     	; 0x242c <__fixunssfsi+0x46>
    241e:	b9 3f       	cpi	r27, 0xF9	; 249
    2420:	cc f3       	brlt	.-14     	; 0x2414 <__fixunssfsi+0x2e>
    2422:	86 95       	lsr	r24
    2424:	77 95       	ror	r23
    2426:	67 95       	ror	r22
    2428:	b3 95       	inc	r27
    242a:	d9 f7       	brne	.-10     	; 0x2422 <__fixunssfsi+0x3c>
    242c:	3e f4       	brtc	.+14     	; 0x243c <__fixunssfsi+0x56>
    242e:	90 95       	com	r25
    2430:	80 95       	com	r24
    2432:	70 95       	com	r23
    2434:	61 95       	neg	r22
    2436:	7f 4f       	sbci	r23, 0xFF	; 255
    2438:	8f 4f       	sbci	r24, 0xFF	; 255
    243a:	9f 4f       	sbci	r25, 0xFF	; 255
    243c:	08 95       	ret

0000243e <__floatunsisf>:
    243e:	e8 94       	clt
    2440:	09 c0       	rjmp	.+18     	; 0x2454 <__floatsisf+0x12>

00002442 <__floatsisf>:
    2442:	97 fb       	bst	r25, 7
    2444:	3e f4       	brtc	.+14     	; 0x2454 <__floatsisf+0x12>
    2446:	90 95       	com	r25
    2448:	80 95       	com	r24
    244a:	70 95       	com	r23
    244c:	61 95       	neg	r22
    244e:	7f 4f       	sbci	r23, 0xFF	; 255
    2450:	8f 4f       	sbci	r24, 0xFF	; 255
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	99 23       	and	r25, r25
    2456:	a9 f0       	breq	.+42     	; 0x2482 <__floatsisf+0x40>
    2458:	f9 2f       	mov	r31, r25
    245a:	96 e9       	ldi	r25, 0x96	; 150
    245c:	bb 27       	eor	r27, r27
    245e:	93 95       	inc	r25
    2460:	f6 95       	lsr	r31
    2462:	87 95       	ror	r24
    2464:	77 95       	ror	r23
    2466:	67 95       	ror	r22
    2468:	b7 95       	ror	r27
    246a:	f1 11       	cpse	r31, r1
    246c:	f8 cf       	rjmp	.-16     	; 0x245e <__floatsisf+0x1c>
    246e:	fa f4       	brpl	.+62     	; 0x24ae <__floatsisf+0x6c>
    2470:	bb 0f       	add	r27, r27
    2472:	11 f4       	brne	.+4      	; 0x2478 <__floatsisf+0x36>
    2474:	60 ff       	sbrs	r22, 0
    2476:	1b c0       	rjmp	.+54     	; 0x24ae <__floatsisf+0x6c>
    2478:	6f 5f       	subi	r22, 0xFF	; 255
    247a:	7f 4f       	sbci	r23, 0xFF	; 255
    247c:	8f 4f       	sbci	r24, 0xFF	; 255
    247e:	9f 4f       	sbci	r25, 0xFF	; 255
    2480:	16 c0       	rjmp	.+44     	; 0x24ae <__floatsisf+0x6c>
    2482:	88 23       	and	r24, r24
    2484:	11 f0       	breq	.+4      	; 0x248a <__floatsisf+0x48>
    2486:	96 e9       	ldi	r25, 0x96	; 150
    2488:	11 c0       	rjmp	.+34     	; 0x24ac <__floatsisf+0x6a>
    248a:	77 23       	and	r23, r23
    248c:	21 f0       	breq	.+8      	; 0x2496 <__floatsisf+0x54>
    248e:	9e e8       	ldi	r25, 0x8E	; 142
    2490:	87 2f       	mov	r24, r23
    2492:	76 2f       	mov	r23, r22
    2494:	05 c0       	rjmp	.+10     	; 0x24a0 <__floatsisf+0x5e>
    2496:	66 23       	and	r22, r22
    2498:	71 f0       	breq	.+28     	; 0x24b6 <__floatsisf+0x74>
    249a:	96 e8       	ldi	r25, 0x86	; 134
    249c:	86 2f       	mov	r24, r22
    249e:	70 e0       	ldi	r23, 0x00	; 0
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	2a f0       	brmi	.+10     	; 0x24ae <__floatsisf+0x6c>
    24a4:	9a 95       	dec	r25
    24a6:	66 0f       	add	r22, r22
    24a8:	77 1f       	adc	r23, r23
    24aa:	88 1f       	adc	r24, r24
    24ac:	da f7       	brpl	.-10     	; 0x24a4 <__floatsisf+0x62>
    24ae:	88 0f       	add	r24, r24
    24b0:	96 95       	lsr	r25
    24b2:	87 95       	ror	r24
    24b4:	97 f9       	bld	r25, 7
    24b6:	08 95       	ret

000024b8 <__fp_arccos>:
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	1f 93       	push	r17
    24be:	0f 93       	push	r16
    24c0:	8b 01       	movw	r16, r22
    24c2:	ec 01       	movw	r28, r24
    24c4:	ed ea       	ldi	r30, 0xAD	; 173
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	3f d0       	rcall	.+126    	; 0x2548 <__fp_powser>
    24ca:	99 d0       	rcall	.+306    	; 0x25fe <__fp_round>
    24cc:	98 01       	movw	r18, r16
    24ce:	ae 01       	movw	r20, r28
    24d0:	8b 01       	movw	r16, r22
    24d2:	ec 01       	movw	r28, r24
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	70 e0       	ldi	r23, 0x00	; 0
    24d8:	80 e8       	ldi	r24, 0x80	; 128
    24da:	9f e3       	ldi	r25, 0x3F	; 63
    24dc:	83 de       	rcall	.-762    	; 0x21e4 <__subsf3>
    24de:	97 d1       	rcall	.+814    	; 0x280e <sqrt>
    24e0:	98 01       	movw	r18, r16
    24e2:	ae 01       	movw	r20, r28
    24e4:	0f 91       	pop	r16
    24e6:	1f 91       	pop	r17
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	2f c1       	rjmp	.+606    	; 0x274c <__mulsf3x>

000024ee <__fp_cmp>:
    24ee:	99 0f       	add	r25, r25
    24f0:	00 08       	sbc	r0, r0
    24f2:	55 0f       	add	r21, r21
    24f4:	aa 0b       	sbc	r26, r26
    24f6:	e0 e8       	ldi	r30, 0x80	; 128
    24f8:	fe ef       	ldi	r31, 0xFE	; 254
    24fa:	16 16       	cp	r1, r22
    24fc:	17 06       	cpc	r1, r23
    24fe:	e8 07       	cpc	r30, r24
    2500:	f9 07       	cpc	r31, r25
    2502:	c0 f0       	brcs	.+48     	; 0x2534 <__fp_cmp+0x46>
    2504:	12 16       	cp	r1, r18
    2506:	13 06       	cpc	r1, r19
    2508:	e4 07       	cpc	r30, r20
    250a:	f5 07       	cpc	r31, r21
    250c:	98 f0       	brcs	.+38     	; 0x2534 <__fp_cmp+0x46>
    250e:	62 1b       	sub	r22, r18
    2510:	73 0b       	sbc	r23, r19
    2512:	84 0b       	sbc	r24, r20
    2514:	95 0b       	sbc	r25, r21
    2516:	39 f4       	brne	.+14     	; 0x2526 <__fp_cmp+0x38>
    2518:	0a 26       	eor	r0, r26
    251a:	61 f0       	breq	.+24     	; 0x2534 <__fp_cmp+0x46>
    251c:	23 2b       	or	r18, r19
    251e:	24 2b       	or	r18, r20
    2520:	25 2b       	or	r18, r21
    2522:	21 f4       	brne	.+8      	; 0x252c <__fp_cmp+0x3e>
    2524:	08 95       	ret
    2526:	0a 26       	eor	r0, r26
    2528:	09 f4       	brne	.+2      	; 0x252c <__fp_cmp+0x3e>
    252a:	a1 40       	sbci	r26, 0x01	; 1
    252c:	a6 95       	lsr	r26
    252e:	8f ef       	ldi	r24, 0xFF	; 255
    2530:	81 1d       	adc	r24, r1
    2532:	81 1d       	adc	r24, r1
    2534:	08 95       	ret

00002536 <__fp_inf>:
    2536:	97 f9       	bld	r25, 7
    2538:	9f 67       	ori	r25, 0x7F	; 127
    253a:	80 e8       	ldi	r24, 0x80	; 128
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	08 95       	ret

00002542 <__fp_nan>:
    2542:	9f ef       	ldi	r25, 0xFF	; 255
    2544:	80 ec       	ldi	r24, 0xC0	; 192
    2546:	08 95       	ret

00002548 <__fp_powser>:
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	1f 93       	push	r17
    254e:	0f 93       	push	r16
    2550:	ff 92       	push	r15
    2552:	ef 92       	push	r14
    2554:	df 92       	push	r13
    2556:	7b 01       	movw	r14, r22
    2558:	8c 01       	movw	r16, r24
    255a:	68 94       	set
    255c:	05 c0       	rjmp	.+10     	; 0x2568 <__fp_powser+0x20>
    255e:	da 2e       	mov	r13, r26
    2560:	ef 01       	movw	r28, r30
    2562:	f4 d0       	rcall	.+488    	; 0x274c <__mulsf3x>
    2564:	fe 01       	movw	r30, r28
    2566:	e8 94       	clt
    2568:	a5 91       	lpm	r26, Z+
    256a:	25 91       	lpm	r18, Z+
    256c:	35 91       	lpm	r19, Z+
    256e:	45 91       	lpm	r20, Z+
    2570:	55 91       	lpm	r21, Z+
    2572:	ae f3       	brts	.-22     	; 0x255e <__fp_powser+0x16>
    2574:	ef 01       	movw	r28, r30
    2576:	48 de       	rcall	.-880    	; 0x2208 <__addsf3x>
    2578:	fe 01       	movw	r30, r28
    257a:	97 01       	movw	r18, r14
    257c:	a8 01       	movw	r20, r16
    257e:	da 94       	dec	r13
    2580:	79 f7       	brne	.-34     	; 0x2560 <__fp_powser+0x18>
    2582:	df 90       	pop	r13
    2584:	ef 90       	pop	r14
    2586:	ff 90       	pop	r15
    2588:	0f 91       	pop	r16
    258a:	1f 91       	pop	r17
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <__fp_pscA>:
    2592:	00 24       	eor	r0, r0
    2594:	0a 94       	dec	r0
    2596:	16 16       	cp	r1, r22
    2598:	17 06       	cpc	r1, r23
    259a:	18 06       	cpc	r1, r24
    259c:	09 06       	cpc	r0, r25
    259e:	08 95       	ret

000025a0 <__fp_pscB>:
    25a0:	00 24       	eor	r0, r0
    25a2:	0a 94       	dec	r0
    25a4:	12 16       	cp	r1, r18
    25a6:	13 06       	cpc	r1, r19
    25a8:	14 06       	cpc	r1, r20
    25aa:	05 06       	cpc	r0, r21
    25ac:	08 95       	ret
    25ae:	c9 cf       	rjmp	.-110    	; 0x2542 <__fp_nan>

000025b0 <__fp_rempio2>:
    25b0:	50 d0       	rcall	.+160    	; 0x2652 <__fp_splitA>
    25b2:	e8 f3       	brcs	.-6      	; 0x25ae <__fp_pscB+0xe>
    25b4:	e8 94       	clt
    25b6:	e0 e0       	ldi	r30, 0x00	; 0
    25b8:	bb 27       	eor	r27, r27
    25ba:	9f 57       	subi	r25, 0x7F	; 127
    25bc:	f0 f0       	brcs	.+60     	; 0x25fa <__fp_rempio2+0x4a>
    25be:	2a ed       	ldi	r18, 0xDA	; 218
    25c0:	3f e0       	ldi	r19, 0x0F	; 15
    25c2:	49 ec       	ldi	r20, 0xC9	; 201
    25c4:	06 c0       	rjmp	.+12     	; 0x25d2 <__fp_rempio2+0x22>
    25c6:	ee 0f       	add	r30, r30
    25c8:	bb 0f       	add	r27, r27
    25ca:	66 1f       	adc	r22, r22
    25cc:	77 1f       	adc	r23, r23
    25ce:	88 1f       	adc	r24, r24
    25d0:	28 f0       	brcs	.+10     	; 0x25dc <__fp_rempio2+0x2c>
    25d2:	b2 3a       	cpi	r27, 0xA2	; 162
    25d4:	62 07       	cpc	r22, r18
    25d6:	73 07       	cpc	r23, r19
    25d8:	84 07       	cpc	r24, r20
    25da:	28 f0       	brcs	.+10     	; 0x25e6 <__fp_rempio2+0x36>
    25dc:	b2 5a       	subi	r27, 0xA2	; 162
    25de:	62 0b       	sbc	r22, r18
    25e0:	73 0b       	sbc	r23, r19
    25e2:	84 0b       	sbc	r24, r20
    25e4:	e3 95       	inc	r30
    25e6:	9a 95       	dec	r25
    25e8:	72 f7       	brpl	.-36     	; 0x25c6 <__fp_rempio2+0x16>
    25ea:	80 38       	cpi	r24, 0x80	; 128
    25ec:	30 f4       	brcc	.+12     	; 0x25fa <__fp_rempio2+0x4a>
    25ee:	9a 95       	dec	r25
    25f0:	bb 0f       	add	r27, r27
    25f2:	66 1f       	adc	r22, r22
    25f4:	77 1f       	adc	r23, r23
    25f6:	88 1f       	adc	r24, r24
    25f8:	d2 f7       	brpl	.-12     	; 0x25ee <__fp_rempio2+0x3e>
    25fa:	90 48       	sbci	r25, 0x80	; 128
    25fc:	4b c1       	rjmp	.+662    	; 0x2894 <__fp_mpack_finite>

000025fe <__fp_round>:
    25fe:	09 2e       	mov	r0, r25
    2600:	03 94       	inc	r0
    2602:	00 0c       	add	r0, r0
    2604:	11 f4       	brne	.+4      	; 0x260a <__fp_round+0xc>
    2606:	88 23       	and	r24, r24
    2608:	52 f0       	brmi	.+20     	; 0x261e <__fp_round+0x20>
    260a:	bb 0f       	add	r27, r27
    260c:	40 f4       	brcc	.+16     	; 0x261e <__fp_round+0x20>
    260e:	bf 2b       	or	r27, r31
    2610:	11 f4       	brne	.+4      	; 0x2616 <__fp_round+0x18>
    2612:	60 ff       	sbrs	r22, 0
    2614:	04 c0       	rjmp	.+8      	; 0x261e <__fp_round+0x20>
    2616:	6f 5f       	subi	r22, 0xFF	; 255
    2618:	7f 4f       	sbci	r23, 0xFF	; 255
    261a:	8f 4f       	sbci	r24, 0xFF	; 255
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	08 95       	ret

00002620 <__fp_sinus>:
    2620:	ef 93       	push	r30
    2622:	e0 ff       	sbrs	r30, 0
    2624:	06 c0       	rjmp	.+12     	; 0x2632 <__fp_sinus+0x12>
    2626:	a2 ea       	ldi	r26, 0xA2	; 162
    2628:	2a ed       	ldi	r18, 0xDA	; 218
    262a:	3f e0       	ldi	r19, 0x0F	; 15
    262c:	49 ec       	ldi	r20, 0xC9	; 201
    262e:	5f eb       	ldi	r21, 0xBF	; 191
    2630:	eb dd       	rcall	.-1066   	; 0x2208 <__addsf3x>
    2632:	e5 df       	rcall	.-54     	; 0x25fe <__fp_round>
    2634:	0f 90       	pop	r0
    2636:	03 94       	inc	r0
    2638:	01 fc       	sbrc	r0, 1
    263a:	90 58       	subi	r25, 0x80	; 128
    263c:	e5 ed       	ldi	r30, 0xD5	; 213
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	3c c1       	rjmp	.+632    	; 0x28ba <__fp_powsodd>

00002642 <__fp_split3>:
    2642:	57 fd       	sbrc	r21, 7
    2644:	90 58       	subi	r25, 0x80	; 128
    2646:	44 0f       	add	r20, r20
    2648:	55 1f       	adc	r21, r21
    264a:	59 f0       	breq	.+22     	; 0x2662 <__fp_splitA+0x10>
    264c:	5f 3f       	cpi	r21, 0xFF	; 255
    264e:	71 f0       	breq	.+28     	; 0x266c <__fp_splitA+0x1a>
    2650:	47 95       	ror	r20

00002652 <__fp_splitA>:
    2652:	88 0f       	add	r24, r24
    2654:	97 fb       	bst	r25, 7
    2656:	99 1f       	adc	r25, r25
    2658:	61 f0       	breq	.+24     	; 0x2672 <__fp_splitA+0x20>
    265a:	9f 3f       	cpi	r25, 0xFF	; 255
    265c:	79 f0       	breq	.+30     	; 0x267c <__fp_splitA+0x2a>
    265e:	87 95       	ror	r24
    2660:	08 95       	ret
    2662:	12 16       	cp	r1, r18
    2664:	13 06       	cpc	r1, r19
    2666:	14 06       	cpc	r1, r20
    2668:	55 1f       	adc	r21, r21
    266a:	f2 cf       	rjmp	.-28     	; 0x2650 <__fp_split3+0xe>
    266c:	46 95       	lsr	r20
    266e:	f1 df       	rcall	.-30     	; 0x2652 <__fp_splitA>
    2670:	08 c0       	rjmp	.+16     	; 0x2682 <__fp_splitA+0x30>
    2672:	16 16       	cp	r1, r22
    2674:	17 06       	cpc	r1, r23
    2676:	18 06       	cpc	r1, r24
    2678:	99 1f       	adc	r25, r25
    267a:	f1 cf       	rjmp	.-30     	; 0x265e <__fp_splitA+0xc>
    267c:	86 95       	lsr	r24
    267e:	71 05       	cpc	r23, r1
    2680:	61 05       	cpc	r22, r1
    2682:	08 94       	sec
    2684:	08 95       	ret

00002686 <__fp_zero>:
    2686:	e8 94       	clt

00002688 <__fp_szero>:
    2688:	bb 27       	eor	r27, r27
    268a:	66 27       	eor	r22, r22
    268c:	77 27       	eor	r23, r23
    268e:	cb 01       	movw	r24, r22
    2690:	97 f9       	bld	r25, 7
    2692:	08 95       	ret

00002694 <__gesf2>:
    2694:	2c df       	rcall	.-424    	; 0x24ee <__fp_cmp>
    2696:	08 f4       	brcc	.+2      	; 0x269a <__gesf2+0x6>
    2698:	8f ef       	ldi	r24, 0xFF	; 255
    269a:	08 95       	ret

0000269c <inverse>:
    269c:	9b 01       	movw	r18, r22
    269e:	ac 01       	movw	r20, r24
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	80 e8       	ldi	r24, 0x80	; 128
    26a6:	9f e3       	ldi	r25, 0x3F	; 63
    26a8:	31 ce       	rjmp	.-926    	; 0x230c <__divsf3>
    26aa:	0e f0       	brts	.+2      	; 0x26ae <inverse+0x12>
    26ac:	f1 c0       	rjmp	.+482    	; 0x2890 <__fp_mpack>
    26ae:	49 cf       	rjmp	.-366    	; 0x2542 <__fp_nan>
    26b0:	68 94       	set
    26b2:	41 cf       	rjmp	.-382    	; 0x2536 <__fp_inf>

000026b4 <log>:
    26b4:	ce df       	rcall	.-100    	; 0x2652 <__fp_splitA>
    26b6:	c8 f3       	brcs	.-14     	; 0x26aa <inverse+0xe>
    26b8:	99 23       	and	r25, r25
    26ba:	d1 f3       	breq	.-12     	; 0x26b0 <inverse+0x14>
    26bc:	c6 f3       	brts	.-16     	; 0x26ae <inverse+0x12>
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	1f 93       	push	r17
    26c4:	0f 93       	push	r16
    26c6:	ff 92       	push	r15
    26c8:	c9 2f       	mov	r28, r25
    26ca:	dd 27       	eor	r29, r29
    26cc:	88 23       	and	r24, r24
    26ce:	2a f0       	brmi	.+10     	; 0x26da <log+0x26>
    26d0:	21 97       	sbiw	r28, 0x01	; 1
    26d2:	66 0f       	add	r22, r22
    26d4:	77 1f       	adc	r23, r23
    26d6:	88 1f       	adc	r24, r24
    26d8:	da f7       	brpl	.-10     	; 0x26d0 <log+0x1c>
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e8       	ldi	r20, 0x80	; 128
    26e0:	5f eb       	ldi	r21, 0xBF	; 191
    26e2:	9f e3       	ldi	r25, 0x3F	; 63
    26e4:	88 39       	cpi	r24, 0x98	; 152
    26e6:	20 f0       	brcs	.+8      	; 0x26f0 <log+0x3c>
    26e8:	80 3e       	cpi	r24, 0xE0	; 224
    26ea:	30 f0       	brcs	.+12     	; 0x26f8 <log+0x44>
    26ec:	21 96       	adiw	r28, 0x01	; 1
    26ee:	8f 77       	andi	r24, 0x7F	; 127
    26f0:	7a dd       	rcall	.-1292   	; 0x21e6 <__addsf3>
    26f2:	e3 ef       	ldi	r30, 0xF3	; 243
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	03 c0       	rjmp	.+6      	; 0x26fe <log+0x4a>
    26f8:	76 dd       	rcall	.-1300   	; 0x21e6 <__addsf3>
    26fa:	e0 e2       	ldi	r30, 0x20	; 32
    26fc:	f1 e0       	ldi	r31, 0x01	; 1
    26fe:	24 df       	rcall	.-440    	; 0x2548 <__fp_powser>
    2700:	8b 01       	movw	r16, r22
    2702:	be 01       	movw	r22, r28
    2704:	ec 01       	movw	r28, r24
    2706:	fb 2e       	mov	r15, r27
    2708:	6f 57       	subi	r22, 0x7F	; 127
    270a:	71 09       	sbc	r23, r1
    270c:	75 95       	asr	r23
    270e:	77 1f       	adc	r23, r23
    2710:	88 0b       	sbc	r24, r24
    2712:	99 0b       	sbc	r25, r25
    2714:	96 de       	rcall	.-724    	; 0x2442 <__floatsisf>
    2716:	28 e1       	ldi	r18, 0x18	; 24
    2718:	32 e7       	ldi	r19, 0x72	; 114
    271a:	41 e3       	ldi	r20, 0x31	; 49
    271c:	5f e3       	ldi	r21, 0x3F	; 63
    271e:	16 d0       	rcall	.+44     	; 0x274c <__mulsf3x>
    2720:	af 2d       	mov	r26, r15
    2722:	98 01       	movw	r18, r16
    2724:	ae 01       	movw	r20, r28
    2726:	ff 90       	pop	r15
    2728:	0f 91       	pop	r16
    272a:	1f 91       	pop	r17
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	6b dd       	rcall	.-1322   	; 0x2208 <__addsf3x>
    2732:	65 cf       	rjmp	.-310    	; 0x25fe <__fp_round>

00002734 <__mulsf3>:
    2734:	0b d0       	rcall	.+22     	; 0x274c <__mulsf3x>
    2736:	63 cf       	rjmp	.-314    	; 0x25fe <__fp_round>
    2738:	2c df       	rcall	.-424    	; 0x2592 <__fp_pscA>
    273a:	28 f0       	brcs	.+10     	; 0x2746 <__mulsf3+0x12>
    273c:	31 df       	rcall	.-414    	; 0x25a0 <__fp_pscB>
    273e:	18 f0       	brcs	.+6      	; 0x2746 <__mulsf3+0x12>
    2740:	95 23       	and	r25, r21
    2742:	09 f0       	breq	.+2      	; 0x2746 <__mulsf3+0x12>
    2744:	f8 ce       	rjmp	.-528    	; 0x2536 <__fp_inf>
    2746:	fd ce       	rjmp	.-518    	; 0x2542 <__fp_nan>
    2748:	11 24       	eor	r1, r1
    274a:	9e cf       	rjmp	.-196    	; 0x2688 <__fp_szero>

0000274c <__mulsf3x>:
    274c:	7a df       	rcall	.-268    	; 0x2642 <__fp_split3>
    274e:	a0 f3       	brcs	.-24     	; 0x2738 <__mulsf3+0x4>

00002750 <__mulsf3_pse>:
    2750:	95 9f       	mul	r25, r21
    2752:	d1 f3       	breq	.-12     	; 0x2748 <__mulsf3+0x14>
    2754:	95 0f       	add	r25, r21
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	55 1f       	adc	r21, r21
    275a:	62 9f       	mul	r22, r18
    275c:	f0 01       	movw	r30, r0
    275e:	72 9f       	mul	r23, r18
    2760:	bb 27       	eor	r27, r27
    2762:	f0 0d       	add	r31, r0
    2764:	b1 1d       	adc	r27, r1
    2766:	63 9f       	mul	r22, r19
    2768:	aa 27       	eor	r26, r26
    276a:	f0 0d       	add	r31, r0
    276c:	b1 1d       	adc	r27, r1
    276e:	aa 1f       	adc	r26, r26
    2770:	64 9f       	mul	r22, r20
    2772:	66 27       	eor	r22, r22
    2774:	b0 0d       	add	r27, r0
    2776:	a1 1d       	adc	r26, r1
    2778:	66 1f       	adc	r22, r22
    277a:	82 9f       	mul	r24, r18
    277c:	22 27       	eor	r18, r18
    277e:	b0 0d       	add	r27, r0
    2780:	a1 1d       	adc	r26, r1
    2782:	62 1f       	adc	r22, r18
    2784:	73 9f       	mul	r23, r19
    2786:	b0 0d       	add	r27, r0
    2788:	a1 1d       	adc	r26, r1
    278a:	62 1f       	adc	r22, r18
    278c:	83 9f       	mul	r24, r19
    278e:	a0 0d       	add	r26, r0
    2790:	61 1d       	adc	r22, r1
    2792:	22 1f       	adc	r18, r18
    2794:	74 9f       	mul	r23, r20
    2796:	33 27       	eor	r19, r19
    2798:	a0 0d       	add	r26, r0
    279a:	61 1d       	adc	r22, r1
    279c:	23 1f       	adc	r18, r19
    279e:	84 9f       	mul	r24, r20
    27a0:	60 0d       	add	r22, r0
    27a2:	21 1d       	adc	r18, r1
    27a4:	82 2f       	mov	r24, r18
    27a6:	76 2f       	mov	r23, r22
    27a8:	6a 2f       	mov	r22, r26
    27aa:	11 24       	eor	r1, r1
    27ac:	9f 57       	subi	r25, 0x7F	; 127
    27ae:	50 40       	sbci	r21, 0x00	; 0
    27b0:	8a f0       	brmi	.+34     	; 0x27d4 <__mulsf3_pse+0x84>
    27b2:	e1 f0       	breq	.+56     	; 0x27ec <__mulsf3_pse+0x9c>
    27b4:	88 23       	and	r24, r24
    27b6:	4a f0       	brmi	.+18     	; 0x27ca <__mulsf3_pse+0x7a>
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	bb 1f       	adc	r27, r27
    27be:	66 1f       	adc	r22, r22
    27c0:	77 1f       	adc	r23, r23
    27c2:	88 1f       	adc	r24, r24
    27c4:	91 50       	subi	r25, 0x01	; 1
    27c6:	50 40       	sbci	r21, 0x00	; 0
    27c8:	a9 f7       	brne	.-22     	; 0x27b4 <__mulsf3_pse+0x64>
    27ca:	9e 3f       	cpi	r25, 0xFE	; 254
    27cc:	51 05       	cpc	r21, r1
    27ce:	70 f0       	brcs	.+28     	; 0x27ec <__mulsf3_pse+0x9c>
    27d0:	b2 ce       	rjmp	.-668    	; 0x2536 <__fp_inf>
    27d2:	5a cf       	rjmp	.-332    	; 0x2688 <__fp_szero>
    27d4:	5f 3f       	cpi	r21, 0xFF	; 255
    27d6:	ec f3       	brlt	.-6      	; 0x27d2 <__mulsf3_pse+0x82>
    27d8:	98 3e       	cpi	r25, 0xE8	; 232
    27da:	dc f3       	brlt	.-10     	; 0x27d2 <__mulsf3_pse+0x82>
    27dc:	86 95       	lsr	r24
    27de:	77 95       	ror	r23
    27e0:	67 95       	ror	r22
    27e2:	b7 95       	ror	r27
    27e4:	f7 95       	ror	r31
    27e6:	e7 95       	ror	r30
    27e8:	9f 5f       	subi	r25, 0xFF	; 255
    27ea:	c1 f7       	brne	.-16     	; 0x27dc <__mulsf3_pse+0x8c>
    27ec:	fe 2b       	or	r31, r30
    27ee:	88 0f       	add	r24, r24
    27f0:	91 1d       	adc	r25, r1
    27f2:	96 95       	lsr	r25
    27f4:	87 95       	ror	r24
    27f6:	97 f9       	bld	r25, 7
    27f8:	08 95       	ret

000027fa <sin>:
    27fa:	9f 93       	push	r25
    27fc:	d9 de       	rcall	.-590    	; 0x25b0 <__fp_rempio2>
    27fe:	0f 90       	pop	r0
    2800:	07 fc       	sbrc	r0, 7
    2802:	ee 5f       	subi	r30, 0xFE	; 254
    2804:	0d cf       	rjmp	.-486    	; 0x2620 <__fp_sinus>
    2806:	11 f4       	brne	.+4      	; 0x280c <sin+0x12>
    2808:	0e f4       	brtc	.+2      	; 0x280c <sin+0x12>
    280a:	9b ce       	rjmp	.-714    	; 0x2542 <__fp_nan>
    280c:	41 c0       	rjmp	.+130    	; 0x2890 <__fp_mpack>

0000280e <sqrt>:
    280e:	21 df       	rcall	.-446    	; 0x2652 <__fp_splitA>
    2810:	d0 f3       	brcs	.-12     	; 0x2806 <sin+0xc>
    2812:	99 23       	and	r25, r25
    2814:	d9 f3       	breq	.-10     	; 0x280c <sin+0x12>
    2816:	ce f3       	brts	.-14     	; 0x280a <sin+0x10>
    2818:	9f 57       	subi	r25, 0x7F	; 127
    281a:	55 0b       	sbc	r21, r21
    281c:	87 ff       	sbrs	r24, 7
    281e:	46 d0       	rcall	.+140    	; 0x28ac <__fp_norm2>
    2820:	00 24       	eor	r0, r0
    2822:	a0 e6       	ldi	r26, 0x60	; 96
    2824:	40 ea       	ldi	r20, 0xA0	; 160
    2826:	90 01       	movw	r18, r0
    2828:	80 58       	subi	r24, 0x80	; 128
    282a:	56 95       	lsr	r21
    282c:	97 95       	ror	r25
    282e:	28 f4       	brcc	.+10     	; 0x283a <sqrt+0x2c>
    2830:	80 5c       	subi	r24, 0xC0	; 192
    2832:	66 0f       	add	r22, r22
    2834:	77 1f       	adc	r23, r23
    2836:	88 1f       	adc	r24, r24
    2838:	20 f0       	brcs	.+8      	; 0x2842 <sqrt+0x34>
    283a:	26 17       	cp	r18, r22
    283c:	37 07       	cpc	r19, r23
    283e:	48 07       	cpc	r20, r24
    2840:	30 f4       	brcc	.+12     	; 0x284e <sqrt+0x40>
    2842:	62 1b       	sub	r22, r18
    2844:	73 0b       	sbc	r23, r19
    2846:	84 0b       	sbc	r24, r20
    2848:	20 29       	or	r18, r0
    284a:	31 29       	or	r19, r1
    284c:	4a 2b       	or	r20, r26
    284e:	a6 95       	lsr	r26
    2850:	17 94       	ror	r1
    2852:	07 94       	ror	r0
    2854:	20 25       	eor	r18, r0
    2856:	31 25       	eor	r19, r1
    2858:	4a 27       	eor	r20, r26
    285a:	58 f7       	brcc	.-42     	; 0x2832 <sqrt+0x24>
    285c:	66 0f       	add	r22, r22
    285e:	77 1f       	adc	r23, r23
    2860:	88 1f       	adc	r24, r24
    2862:	20 f0       	brcs	.+8      	; 0x286c <sqrt+0x5e>
    2864:	26 17       	cp	r18, r22
    2866:	37 07       	cpc	r19, r23
    2868:	48 07       	cpc	r20, r24
    286a:	30 f4       	brcc	.+12     	; 0x2878 <sqrt+0x6a>
    286c:	62 0b       	sbc	r22, r18
    286e:	73 0b       	sbc	r23, r19
    2870:	84 0b       	sbc	r24, r20
    2872:	20 0d       	add	r18, r0
    2874:	31 1d       	adc	r19, r1
    2876:	41 1d       	adc	r20, r1
    2878:	a0 95       	com	r26
    287a:	81 f7       	brne	.-32     	; 0x285c <sqrt+0x4e>
    287c:	b9 01       	movw	r22, r18
    287e:	84 2f       	mov	r24, r20
    2880:	91 58       	subi	r25, 0x81	; 129
    2882:	88 0f       	add	r24, r24
    2884:	96 95       	lsr	r25
    2886:	87 95       	ror	r24
    2888:	08 95       	ret

0000288a <square>:
    288a:	9b 01       	movw	r18, r22
    288c:	ac 01       	movw	r20, r24
    288e:	52 cf       	rjmp	.-348    	; 0x2734 <__mulsf3>

00002890 <__fp_mpack>:
    2890:	9f 3f       	cpi	r25, 0xFF	; 255
    2892:	31 f0       	breq	.+12     	; 0x28a0 <__fp_mpack_finite+0xc>

00002894 <__fp_mpack_finite>:
    2894:	91 50       	subi	r25, 0x01	; 1
    2896:	20 f4       	brcc	.+8      	; 0x28a0 <__fp_mpack_finite+0xc>
    2898:	87 95       	ror	r24
    289a:	77 95       	ror	r23
    289c:	67 95       	ror	r22
    289e:	b7 95       	ror	r27
    28a0:	88 0f       	add	r24, r24
    28a2:	91 1d       	adc	r25, r1
    28a4:	96 95       	lsr	r25
    28a6:	87 95       	ror	r24
    28a8:	97 f9       	bld	r25, 7
    28aa:	08 95       	ret

000028ac <__fp_norm2>:
    28ac:	91 50       	subi	r25, 0x01	; 1
    28ae:	50 40       	sbci	r21, 0x00	; 0
    28b0:	66 0f       	add	r22, r22
    28b2:	77 1f       	adc	r23, r23
    28b4:	88 1f       	adc	r24, r24
    28b6:	d2 f7       	brpl	.-12     	; 0x28ac <__fp_norm2>
    28b8:	08 95       	ret

000028ba <__fp_powsodd>:
    28ba:	9f 93       	push	r25
    28bc:	8f 93       	push	r24
    28be:	7f 93       	push	r23
    28c0:	6f 93       	push	r22
    28c2:	ff 93       	push	r31
    28c4:	ef 93       	push	r30
    28c6:	9b 01       	movw	r18, r22
    28c8:	ac 01       	movw	r20, r24
    28ca:	34 df       	rcall	.-408    	; 0x2734 <__mulsf3>
    28cc:	ef 91       	pop	r30
    28ce:	ff 91       	pop	r31
    28d0:	3b de       	rcall	.-906    	; 0x2548 <__fp_powser>
    28d2:	2f 91       	pop	r18
    28d4:	3f 91       	pop	r19
    28d6:	4f 91       	pop	r20
    28d8:	5f 91       	pop	r21
    28da:	2c cf       	rjmp	.-424    	; 0x2734 <__mulsf3>

000028dc <__divmodhi4>:
    28dc:	97 fb       	bst	r25, 7
    28de:	07 2e       	mov	r0, r23
    28e0:	16 f4       	brtc	.+4      	; 0x28e6 <__divmodhi4+0xa>
    28e2:	00 94       	com	r0
    28e4:	07 d0       	rcall	.+14     	; 0x28f4 <__divmodhi4_neg1>
    28e6:	77 fd       	sbrc	r23, 7
    28e8:	09 d0       	rcall	.+18     	; 0x28fc <__divmodhi4_neg2>
    28ea:	0e 94 88 14 	call	0x2910	; 0x2910 <__udivmodhi4>
    28ee:	07 fc       	sbrc	r0, 7
    28f0:	05 d0       	rcall	.+10     	; 0x28fc <__divmodhi4_neg2>
    28f2:	3e f4       	brtc	.+14     	; 0x2902 <__divmodhi4_exit>

000028f4 <__divmodhi4_neg1>:
    28f4:	90 95       	com	r25
    28f6:	81 95       	neg	r24
    28f8:	9f 4f       	sbci	r25, 0xFF	; 255
    28fa:	08 95       	ret

000028fc <__divmodhi4_neg2>:
    28fc:	70 95       	com	r23
    28fe:	61 95       	neg	r22
    2900:	7f 4f       	sbci	r23, 0xFF	; 255

00002902 <__divmodhi4_exit>:
    2902:	08 95       	ret

00002904 <__tablejump2__>:
    2904:	ee 0f       	add	r30, r30
    2906:	ff 1f       	adc	r31, r31

00002908 <__tablejump__>:
    2908:	05 90       	lpm	r0, Z+
    290a:	f4 91       	lpm	r31, Z
    290c:	e0 2d       	mov	r30, r0
    290e:	09 94       	ijmp

00002910 <__udivmodhi4>:
    2910:	aa 1b       	sub	r26, r26
    2912:	bb 1b       	sub	r27, r27
    2914:	51 e1       	ldi	r21, 0x11	; 17
    2916:	07 c0       	rjmp	.+14     	; 0x2926 <__udivmodhi4_ep>

00002918 <__udivmodhi4_loop>:
    2918:	aa 1f       	adc	r26, r26
    291a:	bb 1f       	adc	r27, r27
    291c:	a6 17       	cp	r26, r22
    291e:	b7 07       	cpc	r27, r23
    2920:	10 f0       	brcs	.+4      	; 0x2926 <__udivmodhi4_ep>
    2922:	a6 1b       	sub	r26, r22
    2924:	b7 0b       	sbc	r27, r23

00002926 <__udivmodhi4_ep>:
    2926:	88 1f       	adc	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	5a 95       	dec	r21
    292c:	a9 f7       	brne	.-22     	; 0x2918 <__udivmodhi4_loop>
    292e:	80 95       	com	r24
    2930:	90 95       	com	r25
    2932:	bc 01       	movw	r22, r24
    2934:	cd 01       	movw	r24, r26
    2936:	08 95       	ret

00002938 <malloc>:
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	82 30       	cpi	r24, 0x02	; 2
    293e:	91 05       	cpc	r25, r1
    2940:	10 f4       	brcc	.+4      	; 0x2946 <malloc+0xe>
    2942:	82 e0       	ldi	r24, 0x02	; 2
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	e0 91 ee 00 	lds	r30, 0x00EE
    294a:	f0 91 ef 00 	lds	r31, 0x00EF
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	a0 e0       	ldi	r26, 0x00	; 0
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	30 97       	sbiw	r30, 0x00	; 0
    2958:	39 f1       	breq	.+78     	; 0x29a8 <malloc+0x70>
    295a:	40 81       	ld	r20, Z
    295c:	51 81       	ldd	r21, Z+1	; 0x01
    295e:	48 17       	cp	r20, r24
    2960:	59 07       	cpc	r21, r25
    2962:	b8 f0       	brcs	.+46     	; 0x2992 <malloc+0x5a>
    2964:	48 17       	cp	r20, r24
    2966:	59 07       	cpc	r21, r25
    2968:	71 f4       	brne	.+28     	; 0x2986 <malloc+0x4e>
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	10 97       	sbiw	r26, 0x00	; 0
    2970:	29 f0       	breq	.+10     	; 0x297c <malloc+0x44>
    2972:	13 96       	adiw	r26, 0x03	; 3
    2974:	9c 93       	st	X, r25
    2976:	8e 93       	st	-X, r24
    2978:	12 97       	sbiw	r26, 0x02	; 2
    297a:	2c c0       	rjmp	.+88     	; 0x29d4 <malloc+0x9c>
    297c:	90 93 ef 00 	sts	0x00EF, r25
    2980:	80 93 ee 00 	sts	0x00EE, r24
    2984:	27 c0       	rjmp	.+78     	; 0x29d4 <malloc+0x9c>
    2986:	21 15       	cp	r18, r1
    2988:	31 05       	cpc	r19, r1
    298a:	31 f0       	breq	.+12     	; 0x2998 <malloc+0x60>
    298c:	42 17       	cp	r20, r18
    298e:	53 07       	cpc	r21, r19
    2990:	18 f0       	brcs	.+6      	; 0x2998 <malloc+0x60>
    2992:	a9 01       	movw	r20, r18
    2994:	db 01       	movw	r26, r22
    2996:	01 c0       	rjmp	.+2      	; 0x299a <malloc+0x62>
    2998:	ef 01       	movw	r28, r30
    299a:	9a 01       	movw	r18, r20
    299c:	bd 01       	movw	r22, r26
    299e:	df 01       	movw	r26, r30
    29a0:	02 80       	ldd	r0, Z+2	; 0x02
    29a2:	f3 81       	ldd	r31, Z+3	; 0x03
    29a4:	e0 2d       	mov	r30, r0
    29a6:	d7 cf       	rjmp	.-82     	; 0x2956 <malloc+0x1e>
    29a8:	21 15       	cp	r18, r1
    29aa:	31 05       	cpc	r19, r1
    29ac:	f9 f0       	breq	.+62     	; 0x29ec <malloc+0xb4>
    29ae:	28 1b       	sub	r18, r24
    29b0:	39 0b       	sbc	r19, r25
    29b2:	24 30       	cpi	r18, 0x04	; 4
    29b4:	31 05       	cpc	r19, r1
    29b6:	80 f4       	brcc	.+32     	; 0x29d8 <malloc+0xa0>
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	9b 81       	ldd	r25, Y+3	; 0x03
    29bc:	61 15       	cp	r22, r1
    29be:	71 05       	cpc	r23, r1
    29c0:	21 f0       	breq	.+8      	; 0x29ca <malloc+0x92>
    29c2:	fb 01       	movw	r30, r22
    29c4:	93 83       	std	Z+3, r25	; 0x03
    29c6:	82 83       	std	Z+2, r24	; 0x02
    29c8:	04 c0       	rjmp	.+8      	; 0x29d2 <malloc+0x9a>
    29ca:	90 93 ef 00 	sts	0x00EF, r25
    29ce:	80 93 ee 00 	sts	0x00EE, r24
    29d2:	fe 01       	movw	r30, r28
    29d4:	32 96       	adiw	r30, 0x02	; 2
    29d6:	44 c0       	rjmp	.+136    	; 0x2a60 <malloc+0x128>
    29d8:	fe 01       	movw	r30, r28
    29da:	e2 0f       	add	r30, r18
    29dc:	f3 1f       	adc	r31, r19
    29de:	81 93       	st	Z+, r24
    29e0:	91 93       	st	Z+, r25
    29e2:	22 50       	subi	r18, 0x02	; 2
    29e4:	31 09       	sbc	r19, r1
    29e6:	39 83       	std	Y+1, r19	; 0x01
    29e8:	28 83       	st	Y, r18
    29ea:	3a c0       	rjmp	.+116    	; 0x2a60 <malloc+0x128>
    29ec:	20 91 ec 00 	lds	r18, 0x00EC
    29f0:	30 91 ed 00 	lds	r19, 0x00ED
    29f4:	23 2b       	or	r18, r19
    29f6:	41 f4       	brne	.+16     	; 0x2a08 <malloc+0xd0>
    29f8:	20 91 62 00 	lds	r18, 0x0062
    29fc:	30 91 63 00 	lds	r19, 0x0063
    2a00:	30 93 ed 00 	sts	0x00ED, r19
    2a04:	20 93 ec 00 	sts	0x00EC, r18
    2a08:	20 91 60 00 	lds	r18, 0x0060
    2a0c:	30 91 61 00 	lds	r19, 0x0061
    2a10:	21 15       	cp	r18, r1
    2a12:	31 05       	cpc	r19, r1
    2a14:	41 f4       	brne	.+16     	; 0x2a26 <malloc+0xee>
    2a16:	2d b7       	in	r18, 0x3d	; 61
    2a18:	3e b7       	in	r19, 0x3e	; 62
    2a1a:	40 91 64 00 	lds	r20, 0x0064
    2a1e:	50 91 65 00 	lds	r21, 0x0065
    2a22:	24 1b       	sub	r18, r20
    2a24:	35 0b       	sbc	r19, r21
    2a26:	e0 91 ec 00 	lds	r30, 0x00EC
    2a2a:	f0 91 ed 00 	lds	r31, 0x00ED
    2a2e:	e2 17       	cp	r30, r18
    2a30:	f3 07       	cpc	r31, r19
    2a32:	a0 f4       	brcc	.+40     	; 0x2a5c <malloc+0x124>
    2a34:	2e 1b       	sub	r18, r30
    2a36:	3f 0b       	sbc	r19, r31
    2a38:	28 17       	cp	r18, r24
    2a3a:	39 07       	cpc	r19, r25
    2a3c:	78 f0       	brcs	.+30     	; 0x2a5c <malloc+0x124>
    2a3e:	ac 01       	movw	r20, r24
    2a40:	4e 5f       	subi	r20, 0xFE	; 254
    2a42:	5f 4f       	sbci	r21, 0xFF	; 255
    2a44:	24 17       	cp	r18, r20
    2a46:	35 07       	cpc	r19, r21
    2a48:	48 f0       	brcs	.+18     	; 0x2a5c <malloc+0x124>
    2a4a:	4e 0f       	add	r20, r30
    2a4c:	5f 1f       	adc	r21, r31
    2a4e:	50 93 ed 00 	sts	0x00ED, r21
    2a52:	40 93 ec 00 	sts	0x00EC, r20
    2a56:	81 93       	st	Z+, r24
    2a58:	91 93       	st	Z+, r25
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <malloc+0x128>
    2a5c:	e0 e0       	ldi	r30, 0x00	; 0
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	cf 01       	movw	r24, r30
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret

00002a68 <free>:
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <free+0xa>
    2a70:	87 c0       	rjmp	.+270    	; 0x2b80 <free+0x118>
    2a72:	fc 01       	movw	r30, r24
    2a74:	32 97       	sbiw	r30, 0x02	; 2
    2a76:	13 82       	std	Z+3, r1	; 0x03
    2a78:	12 82       	std	Z+2, r1	; 0x02
    2a7a:	c0 91 ee 00 	lds	r28, 0x00EE
    2a7e:	d0 91 ef 00 	lds	r29, 0x00EF
    2a82:	20 97       	sbiw	r28, 0x00	; 0
    2a84:	81 f4       	brne	.+32     	; 0x2aa6 <free+0x3e>
    2a86:	20 81       	ld	r18, Z
    2a88:	31 81       	ldd	r19, Z+1	; 0x01
    2a8a:	28 0f       	add	r18, r24
    2a8c:	39 1f       	adc	r19, r25
    2a8e:	80 91 ec 00 	lds	r24, 0x00EC
    2a92:	90 91 ed 00 	lds	r25, 0x00ED
    2a96:	82 17       	cp	r24, r18
    2a98:	93 07       	cpc	r25, r19
    2a9a:	79 f5       	brne	.+94     	; 0x2afa <free+0x92>
    2a9c:	f0 93 ed 00 	sts	0x00ED, r31
    2aa0:	e0 93 ec 00 	sts	0x00EC, r30
    2aa4:	6d c0       	rjmp	.+218    	; 0x2b80 <free+0x118>
    2aa6:	de 01       	movw	r26, r28
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	ae 17       	cp	r26, r30
    2aae:	bf 07       	cpc	r27, r31
    2ab0:	50 f4       	brcc	.+20     	; 0x2ac6 <free+0x5e>
    2ab2:	12 96       	adiw	r26, 0x02	; 2
    2ab4:	4d 91       	ld	r20, X+
    2ab6:	5c 91       	ld	r21, X
    2ab8:	13 97       	sbiw	r26, 0x03	; 3
    2aba:	9d 01       	movw	r18, r26
    2abc:	41 15       	cp	r20, r1
    2abe:	51 05       	cpc	r21, r1
    2ac0:	09 f1       	breq	.+66     	; 0x2b04 <free+0x9c>
    2ac2:	da 01       	movw	r26, r20
    2ac4:	f3 cf       	rjmp	.-26     	; 0x2aac <free+0x44>
    2ac6:	b3 83       	std	Z+3, r27	; 0x03
    2ac8:	a2 83       	std	Z+2, r26	; 0x02
    2aca:	40 81       	ld	r20, Z
    2acc:	51 81       	ldd	r21, Z+1	; 0x01
    2ace:	84 0f       	add	r24, r20
    2ad0:	95 1f       	adc	r25, r21
    2ad2:	8a 17       	cp	r24, r26
    2ad4:	9b 07       	cpc	r25, r27
    2ad6:	71 f4       	brne	.+28     	; 0x2af4 <free+0x8c>
    2ad8:	8d 91       	ld	r24, X+
    2ada:	9c 91       	ld	r25, X
    2adc:	11 97       	sbiw	r26, 0x01	; 1
    2ade:	84 0f       	add	r24, r20
    2ae0:	95 1f       	adc	r25, r21
    2ae2:	02 96       	adiw	r24, 0x02	; 2
    2ae4:	91 83       	std	Z+1, r25	; 0x01
    2ae6:	80 83       	st	Z, r24
    2ae8:	12 96       	adiw	r26, 0x02	; 2
    2aea:	8d 91       	ld	r24, X+
    2aec:	9c 91       	ld	r25, X
    2aee:	13 97       	sbiw	r26, 0x03	; 3
    2af0:	93 83       	std	Z+3, r25	; 0x03
    2af2:	82 83       	std	Z+2, r24	; 0x02
    2af4:	21 15       	cp	r18, r1
    2af6:	31 05       	cpc	r19, r1
    2af8:	29 f4       	brne	.+10     	; 0x2b04 <free+0x9c>
    2afa:	f0 93 ef 00 	sts	0x00EF, r31
    2afe:	e0 93 ee 00 	sts	0x00EE, r30
    2b02:	3e c0       	rjmp	.+124    	; 0x2b80 <free+0x118>
    2b04:	d9 01       	movw	r26, r18
    2b06:	13 96       	adiw	r26, 0x03	; 3
    2b08:	fc 93       	st	X, r31
    2b0a:	ee 93       	st	-X, r30
    2b0c:	12 97       	sbiw	r26, 0x02	; 2
    2b0e:	4d 91       	ld	r20, X+
    2b10:	5d 91       	ld	r21, X+
    2b12:	a4 0f       	add	r26, r20
    2b14:	b5 1f       	adc	r27, r21
    2b16:	ea 17       	cp	r30, r26
    2b18:	fb 07       	cpc	r31, r27
    2b1a:	79 f4       	brne	.+30     	; 0x2b3a <free+0xd2>
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	84 0f       	add	r24, r20
    2b22:	95 1f       	adc	r25, r21
    2b24:	02 96       	adiw	r24, 0x02	; 2
    2b26:	d9 01       	movw	r26, r18
    2b28:	11 96       	adiw	r26, 0x01	; 1
    2b2a:	9c 93       	st	X, r25
    2b2c:	8e 93       	st	-X, r24
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	13 96       	adiw	r26, 0x03	; 3
    2b34:	9c 93       	st	X, r25
    2b36:	8e 93       	st	-X, r24
    2b38:	12 97       	sbiw	r26, 0x02	; 2
    2b3a:	e0 e0       	ldi	r30, 0x00	; 0
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	9b 81       	ldd	r25, Y+3	; 0x03
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	19 f0       	breq	.+6      	; 0x2b4c <free+0xe4>
    2b46:	fe 01       	movw	r30, r28
    2b48:	ec 01       	movw	r28, r24
    2b4a:	f9 cf       	rjmp	.-14     	; 0x2b3e <free+0xd6>
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	02 96       	adiw	r24, 0x02	; 2
    2b50:	28 81       	ld	r18, Y
    2b52:	39 81       	ldd	r19, Y+1	; 0x01
    2b54:	82 0f       	add	r24, r18
    2b56:	93 1f       	adc	r25, r19
    2b58:	20 91 ec 00 	lds	r18, 0x00EC
    2b5c:	30 91 ed 00 	lds	r19, 0x00ED
    2b60:	28 17       	cp	r18, r24
    2b62:	39 07       	cpc	r19, r25
    2b64:	69 f4       	brne	.+26     	; 0x2b80 <free+0x118>
    2b66:	30 97       	sbiw	r30, 0x00	; 0
    2b68:	29 f4       	brne	.+10     	; 0x2b74 <free+0x10c>
    2b6a:	10 92 ef 00 	sts	0x00EF, r1
    2b6e:	10 92 ee 00 	sts	0x00EE, r1
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <free+0x110>
    2b74:	13 82       	std	Z+3, r1	; 0x03
    2b76:	12 82       	std	Z+2, r1	; 0x02
    2b78:	d0 93 ed 00 	sts	0x00ED, r29
    2b7c:	c0 93 ec 00 	sts	0x00EC, r28
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	08 95       	ret

00002b86 <do_rand>:
    2b86:	8f 92       	push	r8
    2b88:	9f 92       	push	r9
    2b8a:	af 92       	push	r10
    2b8c:	bf 92       	push	r11
    2b8e:	cf 92       	push	r12
    2b90:	df 92       	push	r13
    2b92:	ef 92       	push	r14
    2b94:	ff 92       	push	r15
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	ec 01       	movw	r28, r24
    2b9c:	68 81       	ld	r22, Y
    2b9e:	79 81       	ldd	r23, Y+1	; 0x01
    2ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba4:	61 15       	cp	r22, r1
    2ba6:	71 05       	cpc	r23, r1
    2ba8:	81 05       	cpc	r24, r1
    2baa:	91 05       	cpc	r25, r1
    2bac:	21 f4       	brne	.+8      	; 0x2bb6 <do_rand+0x30>
    2bae:	64 e2       	ldi	r22, 0x24	; 36
    2bb0:	79 ed       	ldi	r23, 0xD9	; 217
    2bb2:	8b e5       	ldi	r24, 0x5B	; 91
    2bb4:	97 e0       	ldi	r25, 0x07	; 7
    2bb6:	2d e1       	ldi	r18, 0x1D	; 29
    2bb8:	33 ef       	ldi	r19, 0xF3	; 243
    2bba:	41 e0       	ldi	r20, 0x01	; 1
    2bbc:	50 e0       	ldi	r21, 0x00	; 0
    2bbe:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__divmodsi4>
    2bc2:	49 01       	movw	r8, r18
    2bc4:	5a 01       	movw	r10, r20
    2bc6:	9b 01       	movw	r18, r22
    2bc8:	ac 01       	movw	r20, r24
    2bca:	a7 ea       	ldi	r26, 0xA7	; 167
    2bcc:	b1 e4       	ldi	r27, 0x41	; 65
    2bce:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__muluhisi3>
    2bd2:	6b 01       	movw	r12, r22
    2bd4:	7c 01       	movw	r14, r24
    2bd6:	ac ee       	ldi	r26, 0xEC	; 236
    2bd8:	b4 ef       	ldi	r27, 0xF4	; 244
    2bda:	a5 01       	movw	r20, r10
    2bdc:	94 01       	movw	r18, r8
    2bde:	0e 94 81 1a 	call	0x3502	; 0x3502 <__mulohisi3>
    2be2:	c6 0e       	add	r12, r22
    2be4:	d7 1e       	adc	r13, r23
    2be6:	e8 1e       	adc	r14, r24
    2be8:	f9 1e       	adc	r15, r25
    2bea:	f7 fe       	sbrs	r15, 7
    2bec:	06 c0       	rjmp	.+12     	; 0x2bfa <do_rand+0x74>
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	c8 1a       	sub	r12, r24
    2bf2:	d1 08       	sbc	r13, r1
    2bf4:	e1 08       	sbc	r14, r1
    2bf6:	80 e8       	ldi	r24, 0x80	; 128
    2bf8:	f8 0a       	sbc	r15, r24
    2bfa:	c8 82       	st	Y, r12
    2bfc:	d9 82       	std	Y+1, r13	; 0x01
    2bfe:	ea 82       	std	Y+2, r14	; 0x02
    2c00:	fb 82       	std	Y+3, r15	; 0x03
    2c02:	c6 01       	movw	r24, r12
    2c04:	9f 77       	andi	r25, 0x7F	; 127
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	ff 90       	pop	r15
    2c0c:	ef 90       	pop	r14
    2c0e:	df 90       	pop	r13
    2c10:	cf 90       	pop	r12
    2c12:	bf 90       	pop	r11
    2c14:	af 90       	pop	r10
    2c16:	9f 90       	pop	r9
    2c18:	8f 90       	pop	r8
    2c1a:	08 95       	ret

00002c1c <rand_r>:
    2c1c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <do_rand>
    2c20:	08 95       	ret

00002c22 <rand>:
    2c22:	86 e6       	ldi	r24, 0x66	; 102
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <do_rand>
    2c2a:	08 95       	ret

00002c2c <srand>:
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	80 93 66 00 	sts	0x0066, r24
    2c34:	90 93 67 00 	sts	0x0067, r25
    2c38:	a0 93 68 00 	sts	0x0068, r26
    2c3c:	b0 93 69 00 	sts	0x0069, r27
    2c40:	08 95       	ret

00002c42 <strtol>:
    2c42:	2f 92       	push	r2
    2c44:	3f 92       	push	r3
    2c46:	5f 92       	push	r5
    2c48:	6f 92       	push	r6
    2c4a:	7f 92       	push	r7
    2c4c:	8f 92       	push	r8
    2c4e:	9f 92       	push	r9
    2c50:	af 92       	push	r10
    2c52:	bf 92       	push	r11
    2c54:	cf 92       	push	r12
    2c56:	df 92       	push	r13
    2c58:	ef 92       	push	r14
    2c5a:	ff 92       	push	r15
    2c5c:	0f 93       	push	r16
    2c5e:	1f 93       	push	r17
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	8b 01       	movw	r16, r22
    2c66:	ea 01       	movw	r28, r20
    2c68:	61 15       	cp	r22, r1
    2c6a:	71 05       	cpc	r23, r1
    2c6c:	21 f0       	breq	.+8      	; 0x2c76 <strtol+0x34>
    2c6e:	db 01       	movw	r26, r22
    2c70:	8c 93       	st	X, r24
    2c72:	11 96       	adiw	r26, 0x01	; 1
    2c74:	9c 93       	st	X, r25
    2c76:	20 97       	sbiw	r28, 0x00	; 0
    2c78:	39 f0       	breq	.+14     	; 0x2c88 <strtol+0x46>
    2c7a:	9e 01       	movw	r18, r28
    2c7c:	22 50       	subi	r18, 0x02	; 2
    2c7e:	31 09       	sbc	r19, r1
    2c80:	23 32       	cpi	r18, 0x23	; 35
    2c82:	31 05       	cpc	r19, r1
    2c84:	08 f0       	brcs	.+2      	; 0x2c88 <strtol+0x46>
    2c86:	fb c0       	rjmp	.+502    	; 0x2e7e <strtol+0x23c>
    2c88:	7c 01       	movw	r14, r24
    2c8a:	67 01       	movw	r12, r14
    2c8c:	bf ef       	ldi	r27, 0xFF	; 255
    2c8e:	cb 1a       	sub	r12, r27
    2c90:	db 0a       	sbc	r13, r27
    2c92:	56 01       	movw	r10, r12
    2c94:	f7 01       	movw	r30, r14
    2c96:	60 80       	ld	r6, Z
    2c98:	86 2d       	mov	r24, r6
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <isspace>
    2ca0:	89 2b       	or	r24, r25
    2ca2:	11 f0       	breq	.+4      	; 0x2ca8 <strtol+0x66>
    2ca4:	76 01       	movw	r14, r12
    2ca6:	f1 cf       	rjmp	.-30     	; 0x2c8a <strtol+0x48>
    2ca8:	fd e2       	ldi	r31, 0x2D	; 45
    2caa:	6f 12       	cpse	r6, r31
    2cac:	0a c0       	rjmp	.+20     	; 0x2cc2 <strtol+0x80>
    2cae:	57 01       	movw	r10, r14
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	a8 0e       	add	r10, r24
    2cb4:	b1 1c       	adc	r11, r1
    2cb6:	d7 01       	movw	r26, r14
    2cb8:	11 96       	adiw	r26, 0x01	; 1
    2cba:	6c 90       	ld	r6, X
    2cbc:	77 24       	eor	r7, r7
    2cbe:	73 94       	inc	r7
    2cc0:	0b c0       	rjmp	.+22     	; 0x2cd8 <strtol+0x96>
    2cc2:	bb e2       	ldi	r27, 0x2B	; 43
    2cc4:	6b 12       	cpse	r6, r27
    2cc6:	07 c0       	rjmp	.+14     	; 0x2cd6 <strtol+0x94>
    2cc8:	57 01       	movw	r10, r14
    2cca:	e2 e0       	ldi	r30, 0x02	; 2
    2ccc:	ae 0e       	add	r10, r30
    2cce:	b1 1c       	adc	r11, r1
    2cd0:	d7 01       	movw	r26, r14
    2cd2:	11 96       	adiw	r26, 0x01	; 1
    2cd4:	6c 90       	ld	r6, X
    2cd6:	71 2c       	mov	r7, r1
    2cd8:	ce 01       	movw	r24, r28
    2cda:	8f 7e       	andi	r24, 0xEF	; 239
    2cdc:	89 2b       	or	r24, r25
    2cde:	89 f4       	brne	.+34     	; 0x2d02 <strtol+0xc0>
    2ce0:	b0 e3       	ldi	r27, 0x30	; 48
    2ce2:	6b 12       	cpse	r6, r27
    2ce4:	22 c0       	rjmp	.+68     	; 0x2d2a <strtol+0xe8>
    2ce6:	f5 01       	movw	r30, r10
    2ce8:	80 81       	ld	r24, Z
    2cea:	8f 7d       	andi	r24, 0xDF	; 223
    2cec:	88 35       	cpi	r24, 0x58	; 88
    2cee:	41 f5       	brne	.+80     	; 0x2d40 <strtol+0xfe>
    2cf0:	61 80       	ldd	r6, Z+1	; 0x01
    2cf2:	f2 e0       	ldi	r31, 0x02	; 2
    2cf4:	af 0e       	add	r10, r31
    2cf6:	b1 1c       	adc	r11, r1
    2cf8:	87 2d       	mov	r24, r7
    2cfa:	82 60       	ori	r24, 0x02	; 2
    2cfc:	78 2e       	mov	r7, r24
    2cfe:	c0 e1       	ldi	r28, 0x10	; 16
    2d00:	d0 e0       	ldi	r29, 0x00	; 0
    2d02:	c8 30       	cpi	r28, 0x08	; 8
    2d04:	d1 05       	cpc	r29, r1
    2d06:	f1 f0       	breq	.+60     	; 0x2d44 <strtol+0x102>
    2d08:	4c f4       	brge	.+18     	; 0x2d1c <strtol+0xda>
    2d0a:	c2 30       	cpi	r28, 0x02	; 2
    2d0c:	d1 05       	cpc	r29, r1
    2d0e:	11 f5       	brne	.+68     	; 0x2d54 <strtol+0x112>
    2d10:	c1 2c       	mov	r12, r1
    2d12:	d1 2c       	mov	r13, r1
    2d14:	e1 2c       	mov	r14, r1
    2d16:	b0 e4       	ldi	r27, 0x40	; 64
    2d18:	fb 2e       	mov	r15, r27
    2d1a:	2f c0       	rjmp	.+94     	; 0x2d7a <strtol+0x138>
    2d1c:	ca 30       	cpi	r28, 0x0A	; 10
    2d1e:	d1 05       	cpc	r29, r1
    2d20:	31 f0       	breq	.+12     	; 0x2d2e <strtol+0xec>
    2d22:	c0 31       	cpi	r28, 0x10	; 16
    2d24:	d1 05       	cpc	r29, r1
    2d26:	21 f1       	breq	.+72     	; 0x2d70 <strtol+0x12e>
    2d28:	15 c0       	rjmp	.+42     	; 0x2d54 <strtol+0x112>
    2d2a:	20 97       	sbiw	r28, 0x00	; 0
    2d2c:	51 f7       	brne	.-44     	; 0x2d02 <strtol+0xc0>
    2d2e:	ca e0       	ldi	r28, 0x0A	; 10
    2d30:	d0 e0       	ldi	r29, 0x00	; 0
    2d32:	ac ec       	ldi	r26, 0xCC	; 204
    2d34:	ca 2e       	mov	r12, r26
    2d36:	dc 2c       	mov	r13, r12
    2d38:	ec 2c       	mov	r14, r12
    2d3a:	ac e0       	ldi	r26, 0x0C	; 12
    2d3c:	fa 2e       	mov	r15, r26
    2d3e:	1d c0       	rjmp	.+58     	; 0x2d7a <strtol+0x138>
    2d40:	20 97       	sbiw	r28, 0x00	; 0
    2d42:	f9 f6       	brne	.-66     	; 0x2d02 <strtol+0xc0>
    2d44:	c8 e0       	ldi	r28, 0x08	; 8
    2d46:	d0 e0       	ldi	r29, 0x00	; 0
    2d48:	c1 2c       	mov	r12, r1
    2d4a:	d1 2c       	mov	r13, r1
    2d4c:	e1 2c       	mov	r14, r1
    2d4e:	f0 e1       	ldi	r31, 0x10	; 16
    2d50:	ff 2e       	mov	r15, r31
    2d52:	13 c0       	rjmp	.+38     	; 0x2d7a <strtol+0x138>
    2d54:	60 e0       	ldi	r22, 0x00	; 0
    2d56:	70 e0       	ldi	r23, 0x00	; 0
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	90 e8       	ldi	r25, 0x80	; 128
    2d5c:	9e 01       	movw	r18, r28
    2d5e:	44 27       	eor	r20, r20
    2d60:	37 fd       	sbrc	r19, 7
    2d62:	40 95       	com	r20
    2d64:	54 2f       	mov	r21, r20
    2d66:	0e 94 32 1a 	call	0x3464	; 0x3464 <__udivmodsi4>
    2d6a:	69 01       	movw	r12, r18
    2d6c:	7a 01       	movw	r14, r20
    2d6e:	05 c0       	rjmp	.+10     	; 0x2d7a <strtol+0x138>
    2d70:	c1 2c       	mov	r12, r1
    2d72:	d1 2c       	mov	r13, r1
    2d74:	e1 2c       	mov	r14, r1
    2d76:	e8 e0       	ldi	r30, 0x08	; 8
    2d78:	fe 2e       	mov	r15, r30
    2d7a:	f5 01       	movw	r30, r10
    2d7c:	60 e0       	ldi	r22, 0x00	; 0
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	a9 01       	movw	r20, r18
    2d84:	4e 01       	movw	r8, r28
    2d86:	aa 24       	eor	r10, r10
    2d88:	97 fc       	sbrc	r9, 7
    2d8a:	a0 94       	com	r10
    2d8c:	ba 2c       	mov	r11, r10
    2d8e:	1f 01       	movw	r2, r30
    2d90:	70 ed       	ldi	r23, 0xD0	; 208
    2d92:	57 2e       	mov	r5, r23
    2d94:	56 0c       	add	r5, r6
    2d96:	a9 e0       	ldi	r26, 0x09	; 9
    2d98:	a5 15       	cp	r26, r5
    2d9a:	70 f4       	brcc	.+28     	; 0x2db8 <strtol+0x176>
    2d9c:	8f eb       	ldi	r24, 0xBF	; 191
    2d9e:	86 0d       	add	r24, r6
    2da0:	8a 31       	cpi	r24, 0x1A	; 26
    2da2:	18 f4       	brcc	.+6      	; 0x2daa <strtol+0x168>
    2da4:	99 ec       	ldi	r25, 0xC9	; 201
    2da6:	59 2e       	mov	r5, r25
    2da8:	06 c0       	rjmp	.+12     	; 0x2db6 <strtol+0x174>
    2daa:	8f e9       	ldi	r24, 0x9F	; 159
    2dac:	86 0d       	add	r24, r6
    2dae:	8a 31       	cpi	r24, 0x1A	; 26
    2db0:	30 f5       	brcc	.+76     	; 0x2dfe <strtol+0x1bc>
    2db2:	89 ea       	ldi	r24, 0xA9	; 169
    2db4:	58 2e       	mov	r5, r24
    2db6:	56 0c       	add	r5, r6
    2db8:	85 2d       	mov	r24, r5
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	8c 17       	cp	r24, r28
    2dbe:	9d 07       	cpc	r25, r29
    2dc0:	f4 f4       	brge	.+60     	; 0x2dfe <strtol+0x1bc>
    2dc2:	67 fd       	sbrc	r22, 7
    2dc4:	18 c0       	rjmp	.+48     	; 0x2df6 <strtol+0x1b4>
    2dc6:	c2 16       	cp	r12, r18
    2dc8:	d3 06       	cpc	r13, r19
    2dca:	e4 06       	cpc	r14, r20
    2dcc:	f5 06       	cpc	r15, r21
    2dce:	80 f0       	brcs	.+32     	; 0x2df0 <strtol+0x1ae>
    2dd0:	c5 01       	movw	r24, r10
    2dd2:	b4 01       	movw	r22, r8
    2dd4:	0e 94 22 1a 	call	0x3444	; 0x3444 <__mulsi3>
    2dd8:	9b 01       	movw	r18, r22
    2dda:	ac 01       	movw	r20, r24
    2ddc:	25 0d       	add	r18, r5
    2dde:	31 1d       	adc	r19, r1
    2de0:	41 1d       	adc	r20, r1
    2de2:	51 1d       	adc	r21, r1
    2de4:	21 30       	cpi	r18, 0x01	; 1
    2de6:	31 05       	cpc	r19, r1
    2de8:	41 05       	cpc	r20, r1
    2dea:	b0 e8       	ldi	r27, 0x80	; 128
    2dec:	5b 07       	cpc	r21, r27
    2dee:	10 f0       	brcs	.+4      	; 0x2df4 <strtol+0x1b2>
    2df0:	6f ef       	ldi	r22, 0xFF	; 255
    2df2:	01 c0       	rjmp	.+2      	; 0x2df6 <strtol+0x1b4>
    2df4:	61 e0       	ldi	r22, 0x01	; 1
    2df6:	31 96       	adiw	r30, 0x01	; 1
    2df8:	d1 01       	movw	r26, r2
    2dfa:	6c 90       	ld	r6, X
    2dfc:	c8 cf       	rjmp	.-112    	; 0x2d8e <strtol+0x14c>
    2dfe:	87 2d       	mov	r24, r7
    2e00:	81 70       	andi	r24, 0x01	; 1
    2e02:	01 15       	cp	r16, r1
    2e04:	11 05       	cpc	r17, r1
    2e06:	71 f0       	breq	.+28     	; 0x2e24 <strtol+0x1e2>
    2e08:	66 23       	and	r22, r22
    2e0a:	29 f0       	breq	.+10     	; 0x2e16 <strtol+0x1d4>
    2e0c:	31 97       	sbiw	r30, 0x01	; 1
    2e0e:	d8 01       	movw	r26, r16
    2e10:	ed 93       	st	X+, r30
    2e12:	fc 93       	st	X, r31
    2e14:	07 c0       	rjmp	.+14     	; 0x2e24 <strtol+0x1e2>
    2e16:	71 fe       	sbrs	r7, 1
    2e18:	19 c0       	rjmp	.+50     	; 0x2e4c <strtol+0x20a>
    2e1a:	32 97       	sbiw	r30, 0x02	; 2
    2e1c:	d8 01       	movw	r26, r16
    2e1e:	ed 93       	st	X+, r30
    2e20:	fc 93       	st	X, r31
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <strtol+0x20a>
    2e24:	67 ff       	sbrs	r22, 7
    2e26:	12 c0       	rjmp	.+36     	; 0x2e4c <strtol+0x20a>
    2e28:	88 23       	and	r24, r24
    2e2a:	29 f0       	breq	.+10     	; 0x2e36 <strtol+0x1f4>
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	50 e8       	ldi	r21, 0x80	; 128
    2e34:	04 c0       	rjmp	.+8      	; 0x2e3e <strtol+0x1fc>
    2e36:	2f ef       	ldi	r18, 0xFF	; 255
    2e38:	3f ef       	ldi	r19, 0xFF	; 255
    2e3a:	4f ef       	ldi	r20, 0xFF	; 255
    2e3c:	5f e7       	ldi	r21, 0x7F	; 127
    2e3e:	82 e2       	ldi	r24, 0x22	; 34
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	90 93 f1 00 	sts	0x00F1, r25
    2e46:	80 93 f0 00 	sts	0x00F0, r24
    2e4a:	16 c0       	rjmp	.+44     	; 0x2e78 <strtol+0x236>
    2e4c:	88 23       	and	r24, r24
    2e4e:	41 f0       	breq	.+16     	; 0x2e60 <strtol+0x21e>
    2e50:	50 95       	com	r21
    2e52:	40 95       	com	r20
    2e54:	30 95       	com	r19
    2e56:	21 95       	neg	r18
    2e58:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5a:	4f 4f       	sbci	r20, 0xFF	; 255
    2e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e5e:	0c c0       	rjmp	.+24     	; 0x2e78 <strtol+0x236>
    2e60:	57 ff       	sbrs	r21, 7
    2e62:	0a c0       	rjmp	.+20     	; 0x2e78 <strtol+0x236>
    2e64:	82 e2       	ldi	r24, 0x22	; 34
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	90 93 f1 00 	sts	0x00F1, r25
    2e6c:	80 93 f0 00 	sts	0x00F0, r24
    2e70:	2f ef       	ldi	r18, 0xFF	; 255
    2e72:	3f ef       	ldi	r19, 0xFF	; 255
    2e74:	4f ef       	ldi	r20, 0xFF	; 255
    2e76:	5f e7       	ldi	r21, 0x7F	; 127
    2e78:	b9 01       	movw	r22, r18
    2e7a:	ca 01       	movw	r24, r20
    2e7c:	04 c0       	rjmp	.+8      	; 0x2e86 <strtol+0x244>
    2e7e:	60 e0       	ldi	r22, 0x00	; 0
    2e80:	70 e0       	ldi	r23, 0x00	; 0
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	1f 91       	pop	r17
    2e8c:	0f 91       	pop	r16
    2e8e:	ff 90       	pop	r15
    2e90:	ef 90       	pop	r14
    2e92:	df 90       	pop	r13
    2e94:	cf 90       	pop	r12
    2e96:	bf 90       	pop	r11
    2e98:	af 90       	pop	r10
    2e9a:	9f 90       	pop	r9
    2e9c:	8f 90       	pop	r8
    2e9e:	7f 90       	pop	r7
    2ea0:	6f 90       	pop	r6
    2ea2:	5f 90       	pop	r5
    2ea4:	3f 90       	pop	r3
    2ea6:	2f 90       	pop	r2
    2ea8:	08 95       	ret

00002eaa <isspace>:
    2eaa:	91 11       	cpse	r25, r1
    2eac:	05 c2       	rjmp	.+1034   	; 0x32b8 <__ctype_isfalse>
    2eae:	80 32       	cpi	r24, 0x20	; 32
    2eb0:	19 f0       	breq	.+6      	; 0x2eb8 <isspace+0xe>
    2eb2:	89 50       	subi	r24, 0x09	; 9
    2eb4:	85 50       	subi	r24, 0x05	; 5
    2eb6:	d0 f7       	brcc	.-12     	; 0x2eac <isspace+0x2>
    2eb8:	08 95       	ret

00002eba <sprintf>:
    2eba:	ae e0       	ldi	r26, 0x0E	; 14
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	e3 e6       	ldi	r30, 0x63	; 99
    2ec0:	f7 e1       	ldi	r31, 0x17	; 23
    2ec2:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <__prologue_saves__+0x1c>
    2ec6:	0d 89       	ldd	r16, Y+21	; 0x15
    2ec8:	1e 89       	ldd	r17, Y+22	; 0x16
    2eca:	86 e0       	ldi	r24, 0x06	; 6
    2ecc:	8c 83       	std	Y+4, r24	; 0x04
    2ece:	1a 83       	std	Y+2, r17	; 0x02
    2ed0:	09 83       	std	Y+1, r16	; 0x01
    2ed2:	8f ef       	ldi	r24, 0xFF	; 255
    2ed4:	9f e7       	ldi	r25, 0x7F	; 127
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	ae 01       	movw	r20, r28
    2edc:	47 5e       	subi	r20, 0xE7	; 231
    2ede:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee0:	6f 89       	ldd	r22, Y+23	; 0x17
    2ee2:	78 8d       	ldd	r23, Y+24	; 0x18
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	01 96       	adiw	r24, 0x01	; 1
    2ee8:	0e 94 7f 17 	call	0x2efe	; 0x2efe <vfprintf>
    2eec:	ef 81       	ldd	r30, Y+7	; 0x07
    2eee:	f8 85       	ldd	r31, Y+8	; 0x08
    2ef0:	e0 0f       	add	r30, r16
    2ef2:	f1 1f       	adc	r31, r17
    2ef4:	10 82       	st	Z, r1
    2ef6:	2e 96       	adiw	r28, 0x0e	; 14
    2ef8:	e4 e0       	ldi	r30, 0x04	; 4
    2efa:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__epilogue_restores__+0x1c>

00002efe <vfprintf>:
    2efe:	ac e0       	ldi	r26, 0x0C	; 12
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	e5 e8       	ldi	r30, 0x85	; 133
    2f04:	f7 e1       	ldi	r31, 0x17	; 23
    2f06:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__prologue_saves__>
    2f0a:	7c 01       	movw	r14, r24
    2f0c:	6b 01       	movw	r12, r22
    2f0e:	8a 01       	movw	r16, r20
    2f10:	fc 01       	movw	r30, r24
    2f12:	17 82       	std	Z+7, r1	; 0x07
    2f14:	16 82       	std	Z+6, r1	; 0x06
    2f16:	83 81       	ldd	r24, Z+3	; 0x03
    2f18:	81 ff       	sbrs	r24, 1
    2f1a:	bd c1       	rjmp	.+890    	; 0x3296 <vfprintf+0x398>
    2f1c:	ce 01       	movw	r24, r28
    2f1e:	01 96       	adiw	r24, 0x01	; 1
    2f20:	4c 01       	movw	r8, r24
    2f22:	f7 01       	movw	r30, r14
    2f24:	93 81       	ldd	r25, Z+3	; 0x03
    2f26:	f6 01       	movw	r30, r12
    2f28:	93 fd       	sbrc	r25, 3
    2f2a:	85 91       	lpm	r24, Z+
    2f2c:	93 ff       	sbrs	r25, 3
    2f2e:	81 91       	ld	r24, Z+
    2f30:	6f 01       	movw	r12, r30
    2f32:	88 23       	and	r24, r24
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <vfprintf+0x3a>
    2f36:	ab c1       	rjmp	.+854    	; 0x328e <vfprintf+0x390>
    2f38:	85 32       	cpi	r24, 0x25	; 37
    2f3a:	39 f4       	brne	.+14     	; 0x2f4a <vfprintf+0x4c>
    2f3c:	93 fd       	sbrc	r25, 3
    2f3e:	85 91       	lpm	r24, Z+
    2f40:	93 ff       	sbrs	r25, 3
    2f42:	81 91       	ld	r24, Z+
    2f44:	6f 01       	movw	r12, r30
    2f46:	85 32       	cpi	r24, 0x25	; 37
    2f48:	29 f4       	brne	.+10     	; 0x2f54 <vfprintf+0x56>
    2f4a:	b7 01       	movw	r22, r14
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    2f52:	e7 cf       	rjmp	.-50     	; 0x2f22 <vfprintf+0x24>
    2f54:	51 2c       	mov	r5, r1
    2f56:	31 2c       	mov	r3, r1
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	20 32       	cpi	r18, 0x20	; 32
    2f5c:	a0 f4       	brcc	.+40     	; 0x2f86 <vfprintf+0x88>
    2f5e:	8b 32       	cpi	r24, 0x2B	; 43
    2f60:	69 f0       	breq	.+26     	; 0x2f7c <vfprintf+0x7e>
    2f62:	30 f4       	brcc	.+12     	; 0x2f70 <vfprintf+0x72>
    2f64:	80 32       	cpi	r24, 0x20	; 32
    2f66:	59 f0       	breq	.+22     	; 0x2f7e <vfprintf+0x80>
    2f68:	83 32       	cpi	r24, 0x23	; 35
    2f6a:	69 f4       	brne	.+26     	; 0x2f86 <vfprintf+0x88>
    2f6c:	20 61       	ori	r18, 0x10	; 16
    2f6e:	2c c0       	rjmp	.+88     	; 0x2fc8 <vfprintf+0xca>
    2f70:	8d 32       	cpi	r24, 0x2D	; 45
    2f72:	39 f0       	breq	.+14     	; 0x2f82 <vfprintf+0x84>
    2f74:	80 33       	cpi	r24, 0x30	; 48
    2f76:	39 f4       	brne	.+14     	; 0x2f86 <vfprintf+0x88>
    2f78:	21 60       	ori	r18, 0x01	; 1
    2f7a:	26 c0       	rjmp	.+76     	; 0x2fc8 <vfprintf+0xca>
    2f7c:	22 60       	ori	r18, 0x02	; 2
    2f7e:	24 60       	ori	r18, 0x04	; 4
    2f80:	23 c0       	rjmp	.+70     	; 0x2fc8 <vfprintf+0xca>
    2f82:	28 60       	ori	r18, 0x08	; 8
    2f84:	21 c0       	rjmp	.+66     	; 0x2fc8 <vfprintf+0xca>
    2f86:	27 fd       	sbrc	r18, 7
    2f88:	27 c0       	rjmp	.+78     	; 0x2fd8 <vfprintf+0xda>
    2f8a:	30 ed       	ldi	r19, 0xD0	; 208
    2f8c:	38 0f       	add	r19, r24
    2f8e:	3a 30       	cpi	r19, 0x0A	; 10
    2f90:	78 f4       	brcc	.+30     	; 0x2fb0 <vfprintf+0xb2>
    2f92:	26 ff       	sbrs	r18, 6
    2f94:	06 c0       	rjmp	.+12     	; 0x2fa2 <vfprintf+0xa4>
    2f96:	fa e0       	ldi	r31, 0x0A	; 10
    2f98:	5f 9e       	mul	r5, r31
    2f9a:	30 0d       	add	r19, r0
    2f9c:	11 24       	eor	r1, r1
    2f9e:	53 2e       	mov	r5, r19
    2fa0:	13 c0       	rjmp	.+38     	; 0x2fc8 <vfprintf+0xca>
    2fa2:	8a e0       	ldi	r24, 0x0A	; 10
    2fa4:	38 9e       	mul	r3, r24
    2fa6:	30 0d       	add	r19, r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	33 2e       	mov	r3, r19
    2fac:	20 62       	ori	r18, 0x20	; 32
    2fae:	0c c0       	rjmp	.+24     	; 0x2fc8 <vfprintf+0xca>
    2fb0:	8e 32       	cpi	r24, 0x2E	; 46
    2fb2:	21 f4       	brne	.+8      	; 0x2fbc <vfprintf+0xbe>
    2fb4:	26 fd       	sbrc	r18, 6
    2fb6:	6b c1       	rjmp	.+726    	; 0x328e <vfprintf+0x390>
    2fb8:	20 64       	ori	r18, 0x40	; 64
    2fba:	06 c0       	rjmp	.+12     	; 0x2fc8 <vfprintf+0xca>
    2fbc:	8c 36       	cpi	r24, 0x6C	; 108
    2fbe:	11 f4       	brne	.+4      	; 0x2fc4 <vfprintf+0xc6>
    2fc0:	20 68       	ori	r18, 0x80	; 128
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <vfprintf+0xca>
    2fc4:	88 36       	cpi	r24, 0x68	; 104
    2fc6:	41 f4       	brne	.+16     	; 0x2fd8 <vfprintf+0xda>
    2fc8:	f6 01       	movw	r30, r12
    2fca:	93 fd       	sbrc	r25, 3
    2fcc:	85 91       	lpm	r24, Z+
    2fce:	93 ff       	sbrs	r25, 3
    2fd0:	81 91       	ld	r24, Z+
    2fd2:	6f 01       	movw	r12, r30
    2fd4:	81 11       	cpse	r24, r1
    2fd6:	c1 cf       	rjmp	.-126    	; 0x2f5a <vfprintf+0x5c>
    2fd8:	98 2f       	mov	r25, r24
    2fda:	9f 7d       	andi	r25, 0xDF	; 223
    2fdc:	95 54       	subi	r25, 0x45	; 69
    2fde:	93 30       	cpi	r25, 0x03	; 3
    2fe0:	28 f4       	brcc	.+10     	; 0x2fec <vfprintf+0xee>
    2fe2:	0c 5f       	subi	r16, 0xFC	; 252
    2fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe6:	ff e3       	ldi	r31, 0x3F	; 63
    2fe8:	f9 83       	std	Y+1, r31	; 0x01
    2fea:	0d c0       	rjmp	.+26     	; 0x3006 <vfprintf+0x108>
    2fec:	83 36       	cpi	r24, 0x63	; 99
    2fee:	31 f0       	breq	.+12     	; 0x2ffc <vfprintf+0xfe>
    2ff0:	83 37       	cpi	r24, 0x73	; 115
    2ff2:	71 f0       	breq	.+28     	; 0x3010 <vfprintf+0x112>
    2ff4:	83 35       	cpi	r24, 0x53	; 83
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <vfprintf+0xfc>
    2ff8:	5b c0       	rjmp	.+182    	; 0x30b0 <vfprintf+0x1b2>
    2ffa:	22 c0       	rjmp	.+68     	; 0x3040 <vfprintf+0x142>
    2ffc:	f8 01       	movw	r30, r16
    2ffe:	80 81       	ld	r24, Z
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	0e 5f       	subi	r16, 0xFE	; 254
    3004:	1f 4f       	sbci	r17, 0xFF	; 255
    3006:	44 24       	eor	r4, r4
    3008:	43 94       	inc	r4
    300a:	51 2c       	mov	r5, r1
    300c:	54 01       	movw	r10, r8
    300e:	15 c0       	rjmp	.+42     	; 0x303a <vfprintf+0x13c>
    3010:	38 01       	movw	r6, r16
    3012:	f2 e0       	ldi	r31, 0x02	; 2
    3014:	6f 0e       	add	r6, r31
    3016:	71 1c       	adc	r7, r1
    3018:	f8 01       	movw	r30, r16
    301a:	a0 80       	ld	r10, Z
    301c:	b1 80       	ldd	r11, Z+1	; 0x01
    301e:	26 ff       	sbrs	r18, 6
    3020:	03 c0       	rjmp	.+6      	; 0x3028 <vfprintf+0x12a>
    3022:	65 2d       	mov	r22, r5
    3024:	70 e0       	ldi	r23, 0x00	; 0
    3026:	02 c0       	rjmp	.+4      	; 0x302c <vfprintf+0x12e>
    3028:	6f ef       	ldi	r22, 0xFF	; 255
    302a:	7f ef       	ldi	r23, 0xFF	; 255
    302c:	c5 01       	movw	r24, r10
    302e:	2c 87       	std	Y+12, r18	; 0x0c
    3030:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <strnlen>
    3034:	2c 01       	movw	r4, r24
    3036:	83 01       	movw	r16, r6
    3038:	2c 85       	ldd	r18, Y+12	; 0x0c
    303a:	2f 77       	andi	r18, 0x7F	; 127
    303c:	22 2e       	mov	r2, r18
    303e:	17 c0       	rjmp	.+46     	; 0x306e <vfprintf+0x170>
    3040:	38 01       	movw	r6, r16
    3042:	f2 e0       	ldi	r31, 0x02	; 2
    3044:	6f 0e       	add	r6, r31
    3046:	71 1c       	adc	r7, r1
    3048:	f8 01       	movw	r30, r16
    304a:	a0 80       	ld	r10, Z
    304c:	b1 80       	ldd	r11, Z+1	; 0x01
    304e:	26 ff       	sbrs	r18, 6
    3050:	03 c0       	rjmp	.+6      	; 0x3058 <vfprintf+0x15a>
    3052:	65 2d       	mov	r22, r5
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	02 c0       	rjmp	.+4      	; 0x305c <vfprintf+0x15e>
    3058:	6f ef       	ldi	r22, 0xFF	; 255
    305a:	7f ef       	ldi	r23, 0xFF	; 255
    305c:	c5 01       	movw	r24, r10
    305e:	2c 87       	std	Y+12, r18	; 0x0c
    3060:	0e 94 5f 19 	call	0x32be	; 0x32be <strnlen_P>
    3064:	2c 01       	movw	r4, r24
    3066:	2c 85       	ldd	r18, Y+12	; 0x0c
    3068:	20 68       	ori	r18, 0x80	; 128
    306a:	22 2e       	mov	r2, r18
    306c:	83 01       	movw	r16, r6
    306e:	23 fc       	sbrc	r2, 3
    3070:	1b c0       	rjmp	.+54     	; 0x30a8 <vfprintf+0x1aa>
    3072:	83 2d       	mov	r24, r3
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	48 16       	cp	r4, r24
    3078:	59 06       	cpc	r5, r25
    307a:	b0 f4       	brcc	.+44     	; 0x30a8 <vfprintf+0x1aa>
    307c:	b7 01       	movw	r22, r14
    307e:	80 e2       	ldi	r24, 0x20	; 32
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    3086:	3a 94       	dec	r3
    3088:	f4 cf       	rjmp	.-24     	; 0x3072 <vfprintf+0x174>
    308a:	f5 01       	movw	r30, r10
    308c:	27 fc       	sbrc	r2, 7
    308e:	85 91       	lpm	r24, Z+
    3090:	27 fe       	sbrs	r2, 7
    3092:	81 91       	ld	r24, Z+
    3094:	5f 01       	movw	r10, r30
    3096:	b7 01       	movw	r22, r14
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    309e:	31 10       	cpse	r3, r1
    30a0:	3a 94       	dec	r3
    30a2:	f1 e0       	ldi	r31, 0x01	; 1
    30a4:	4f 1a       	sub	r4, r31
    30a6:	51 08       	sbc	r5, r1
    30a8:	41 14       	cp	r4, r1
    30aa:	51 04       	cpc	r5, r1
    30ac:	71 f7       	brne	.-36     	; 0x308a <vfprintf+0x18c>
    30ae:	e5 c0       	rjmp	.+458    	; 0x327a <vfprintf+0x37c>
    30b0:	84 36       	cpi	r24, 0x64	; 100
    30b2:	11 f0       	breq	.+4      	; 0x30b8 <vfprintf+0x1ba>
    30b4:	89 36       	cpi	r24, 0x69	; 105
    30b6:	39 f5       	brne	.+78     	; 0x3106 <vfprintf+0x208>
    30b8:	f8 01       	movw	r30, r16
    30ba:	27 ff       	sbrs	r18, 7
    30bc:	07 c0       	rjmp	.+14     	; 0x30cc <vfprintf+0x1ce>
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
    30c6:	0c 5f       	subi	r16, 0xFC	; 252
    30c8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ca:	08 c0       	rjmp	.+16     	; 0x30dc <vfprintf+0x1de>
    30cc:	60 81       	ld	r22, Z
    30ce:	71 81       	ldd	r23, Z+1	; 0x01
    30d0:	88 27       	eor	r24, r24
    30d2:	77 fd       	sbrc	r23, 7
    30d4:	80 95       	com	r24
    30d6:	98 2f       	mov	r25, r24
    30d8:	0e 5f       	subi	r16, 0xFE	; 254
    30da:	1f 4f       	sbci	r17, 0xFF	; 255
    30dc:	2f 76       	andi	r18, 0x6F	; 111
    30de:	b2 2e       	mov	r11, r18
    30e0:	97 ff       	sbrs	r25, 7
    30e2:	09 c0       	rjmp	.+18     	; 0x30f6 <vfprintf+0x1f8>
    30e4:	90 95       	com	r25
    30e6:	80 95       	com	r24
    30e8:	70 95       	com	r23
    30ea:	61 95       	neg	r22
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255
    30ee:	8f 4f       	sbci	r24, 0xFF	; 255
    30f0:	9f 4f       	sbci	r25, 0xFF	; 255
    30f2:	20 68       	ori	r18, 0x80	; 128
    30f4:	b2 2e       	mov	r11, r18
    30f6:	2a e0       	ldi	r18, 0x0A	; 10
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	a4 01       	movw	r20, r8
    30fc:	0e 94 a7 19 	call	0x334e	; 0x334e <__ultoa_invert>
    3100:	a8 2e       	mov	r10, r24
    3102:	a8 18       	sub	r10, r8
    3104:	44 c0       	rjmp	.+136    	; 0x318e <vfprintf+0x290>
    3106:	85 37       	cpi	r24, 0x75	; 117
    3108:	29 f4       	brne	.+10     	; 0x3114 <vfprintf+0x216>
    310a:	2f 7e       	andi	r18, 0xEF	; 239
    310c:	b2 2e       	mov	r11, r18
    310e:	2a e0       	ldi	r18, 0x0A	; 10
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	25 c0       	rjmp	.+74     	; 0x315e <vfprintf+0x260>
    3114:	f2 2f       	mov	r31, r18
    3116:	f9 7f       	andi	r31, 0xF9	; 249
    3118:	bf 2e       	mov	r11, r31
    311a:	8f 36       	cpi	r24, 0x6F	; 111
    311c:	c1 f0       	breq	.+48     	; 0x314e <vfprintf+0x250>
    311e:	18 f4       	brcc	.+6      	; 0x3126 <vfprintf+0x228>
    3120:	88 35       	cpi	r24, 0x58	; 88
    3122:	79 f0       	breq	.+30     	; 0x3142 <vfprintf+0x244>
    3124:	b4 c0       	rjmp	.+360    	; 0x328e <vfprintf+0x390>
    3126:	80 37       	cpi	r24, 0x70	; 112
    3128:	19 f0       	breq	.+6      	; 0x3130 <vfprintf+0x232>
    312a:	88 37       	cpi	r24, 0x78	; 120
    312c:	21 f0       	breq	.+8      	; 0x3136 <vfprintf+0x238>
    312e:	af c0       	rjmp	.+350    	; 0x328e <vfprintf+0x390>
    3130:	2f 2f       	mov	r18, r31
    3132:	20 61       	ori	r18, 0x10	; 16
    3134:	b2 2e       	mov	r11, r18
    3136:	b4 fe       	sbrs	r11, 4
    3138:	0d c0       	rjmp	.+26     	; 0x3154 <vfprintf+0x256>
    313a:	8b 2d       	mov	r24, r11
    313c:	84 60       	ori	r24, 0x04	; 4
    313e:	b8 2e       	mov	r11, r24
    3140:	09 c0       	rjmp	.+18     	; 0x3154 <vfprintf+0x256>
    3142:	24 ff       	sbrs	r18, 4
    3144:	0a c0       	rjmp	.+20     	; 0x315a <vfprintf+0x25c>
    3146:	9f 2f       	mov	r25, r31
    3148:	96 60       	ori	r25, 0x06	; 6
    314a:	b9 2e       	mov	r11, r25
    314c:	06 c0       	rjmp	.+12     	; 0x315a <vfprintf+0x25c>
    314e:	28 e0       	ldi	r18, 0x08	; 8
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	05 c0       	rjmp	.+10     	; 0x315e <vfprintf+0x260>
    3154:	20 e1       	ldi	r18, 0x10	; 16
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	02 c0       	rjmp	.+4      	; 0x315e <vfprintf+0x260>
    315a:	20 e1       	ldi	r18, 0x10	; 16
    315c:	32 e0       	ldi	r19, 0x02	; 2
    315e:	f8 01       	movw	r30, r16
    3160:	b7 fe       	sbrs	r11, 7
    3162:	07 c0       	rjmp	.+14     	; 0x3172 <vfprintf+0x274>
    3164:	60 81       	ld	r22, Z
    3166:	71 81       	ldd	r23, Z+1	; 0x01
    3168:	82 81       	ldd	r24, Z+2	; 0x02
    316a:	93 81       	ldd	r25, Z+3	; 0x03
    316c:	0c 5f       	subi	r16, 0xFC	; 252
    316e:	1f 4f       	sbci	r17, 0xFF	; 255
    3170:	06 c0       	rjmp	.+12     	; 0x317e <vfprintf+0x280>
    3172:	60 81       	ld	r22, Z
    3174:	71 81       	ldd	r23, Z+1	; 0x01
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	0e 5f       	subi	r16, 0xFE	; 254
    317c:	1f 4f       	sbci	r17, 0xFF	; 255
    317e:	a4 01       	movw	r20, r8
    3180:	0e 94 a7 19 	call	0x334e	; 0x334e <__ultoa_invert>
    3184:	a8 2e       	mov	r10, r24
    3186:	a8 18       	sub	r10, r8
    3188:	fb 2d       	mov	r31, r11
    318a:	ff 77       	andi	r31, 0x7F	; 127
    318c:	bf 2e       	mov	r11, r31
    318e:	b6 fe       	sbrs	r11, 6
    3190:	0b c0       	rjmp	.+22     	; 0x31a8 <vfprintf+0x2aa>
    3192:	2b 2d       	mov	r18, r11
    3194:	2e 7f       	andi	r18, 0xFE	; 254
    3196:	a5 14       	cp	r10, r5
    3198:	50 f4       	brcc	.+20     	; 0x31ae <vfprintf+0x2b0>
    319a:	b4 fe       	sbrs	r11, 4
    319c:	0a c0       	rjmp	.+20     	; 0x31b2 <vfprintf+0x2b4>
    319e:	b2 fc       	sbrc	r11, 2
    31a0:	08 c0       	rjmp	.+16     	; 0x31b2 <vfprintf+0x2b4>
    31a2:	2b 2d       	mov	r18, r11
    31a4:	2e 7e       	andi	r18, 0xEE	; 238
    31a6:	05 c0       	rjmp	.+10     	; 0x31b2 <vfprintf+0x2b4>
    31a8:	7a 2c       	mov	r7, r10
    31aa:	2b 2d       	mov	r18, r11
    31ac:	03 c0       	rjmp	.+6      	; 0x31b4 <vfprintf+0x2b6>
    31ae:	7a 2c       	mov	r7, r10
    31b0:	01 c0       	rjmp	.+2      	; 0x31b4 <vfprintf+0x2b6>
    31b2:	75 2c       	mov	r7, r5
    31b4:	24 ff       	sbrs	r18, 4
    31b6:	0d c0       	rjmp	.+26     	; 0x31d2 <vfprintf+0x2d4>
    31b8:	fe 01       	movw	r30, r28
    31ba:	ea 0d       	add	r30, r10
    31bc:	f1 1d       	adc	r31, r1
    31be:	80 81       	ld	r24, Z
    31c0:	80 33       	cpi	r24, 0x30	; 48
    31c2:	11 f4       	brne	.+4      	; 0x31c8 <vfprintf+0x2ca>
    31c4:	29 7e       	andi	r18, 0xE9	; 233
    31c6:	09 c0       	rjmp	.+18     	; 0x31da <vfprintf+0x2dc>
    31c8:	22 ff       	sbrs	r18, 2
    31ca:	06 c0       	rjmp	.+12     	; 0x31d8 <vfprintf+0x2da>
    31cc:	73 94       	inc	r7
    31ce:	73 94       	inc	r7
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <vfprintf+0x2dc>
    31d2:	82 2f       	mov	r24, r18
    31d4:	86 78       	andi	r24, 0x86	; 134
    31d6:	09 f0       	breq	.+2      	; 0x31da <vfprintf+0x2dc>
    31d8:	73 94       	inc	r7
    31da:	23 fd       	sbrc	r18, 3
    31dc:	13 c0       	rjmp	.+38     	; 0x3204 <vfprintf+0x306>
    31de:	20 ff       	sbrs	r18, 0
    31e0:	06 c0       	rjmp	.+12     	; 0x31ee <vfprintf+0x2f0>
    31e2:	5a 2c       	mov	r5, r10
    31e4:	73 14       	cp	r7, r3
    31e6:	18 f4       	brcc	.+6      	; 0x31ee <vfprintf+0x2f0>
    31e8:	53 0c       	add	r5, r3
    31ea:	57 18       	sub	r5, r7
    31ec:	73 2c       	mov	r7, r3
    31ee:	73 14       	cp	r7, r3
    31f0:	68 f4       	brcc	.+26     	; 0x320c <vfprintf+0x30e>
    31f2:	b7 01       	movw	r22, r14
    31f4:	80 e2       	ldi	r24, 0x20	; 32
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	2c 87       	std	Y+12, r18	; 0x0c
    31fa:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    31fe:	73 94       	inc	r7
    3200:	2c 85       	ldd	r18, Y+12	; 0x0c
    3202:	f5 cf       	rjmp	.-22     	; 0x31ee <vfprintf+0x2f0>
    3204:	73 14       	cp	r7, r3
    3206:	10 f4       	brcc	.+4      	; 0x320c <vfprintf+0x30e>
    3208:	37 18       	sub	r3, r7
    320a:	01 c0       	rjmp	.+2      	; 0x320e <vfprintf+0x310>
    320c:	31 2c       	mov	r3, r1
    320e:	24 ff       	sbrs	r18, 4
    3210:	12 c0       	rjmp	.+36     	; 0x3236 <vfprintf+0x338>
    3212:	b7 01       	movw	r22, r14
    3214:	80 e3       	ldi	r24, 0x30	; 48
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	2c 87       	std	Y+12, r18	; 0x0c
    321a:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    321e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3220:	22 ff       	sbrs	r18, 2
    3222:	17 c0       	rjmp	.+46     	; 0x3252 <vfprintf+0x354>
    3224:	21 ff       	sbrs	r18, 1
    3226:	03 c0       	rjmp	.+6      	; 0x322e <vfprintf+0x330>
    3228:	88 e5       	ldi	r24, 0x58	; 88
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <vfprintf+0x334>
    322e:	88 e7       	ldi	r24, 0x78	; 120
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	b7 01       	movw	r22, r14
    3234:	0c c0       	rjmp	.+24     	; 0x324e <vfprintf+0x350>
    3236:	82 2f       	mov	r24, r18
    3238:	86 78       	andi	r24, 0x86	; 134
    323a:	59 f0       	breq	.+22     	; 0x3252 <vfprintf+0x354>
    323c:	21 fd       	sbrc	r18, 1
    323e:	02 c0       	rjmp	.+4      	; 0x3244 <vfprintf+0x346>
    3240:	80 e2       	ldi	r24, 0x20	; 32
    3242:	01 c0       	rjmp	.+2      	; 0x3246 <vfprintf+0x348>
    3244:	8b e2       	ldi	r24, 0x2B	; 43
    3246:	27 fd       	sbrc	r18, 7
    3248:	8d e2       	ldi	r24, 0x2D	; 45
    324a:	b7 01       	movw	r22, r14
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    3252:	a5 14       	cp	r10, r5
    3254:	38 f4       	brcc	.+14     	; 0x3264 <vfprintf+0x366>
    3256:	b7 01       	movw	r22, r14
    3258:	80 e3       	ldi	r24, 0x30	; 48
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    3260:	5a 94       	dec	r5
    3262:	f7 cf       	rjmp	.-18     	; 0x3252 <vfprintf+0x354>
    3264:	aa 94       	dec	r10
    3266:	f4 01       	movw	r30, r8
    3268:	ea 0d       	add	r30, r10
    326a:	f1 1d       	adc	r31, r1
    326c:	80 81       	ld	r24, Z
    326e:	b7 01       	movw	r22, r14
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    3276:	a1 10       	cpse	r10, r1
    3278:	f5 cf       	rjmp	.-22     	; 0x3264 <vfprintf+0x366>
    327a:	33 20       	and	r3, r3
    327c:	09 f4       	brne	.+2      	; 0x3280 <vfprintf+0x382>
    327e:	51 ce       	rjmp	.-862    	; 0x2f22 <vfprintf+0x24>
    3280:	b7 01       	movw	r22, r14
    3282:	80 e2       	ldi	r24, 0x20	; 32
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	0e 94 75 19 	call	0x32ea	; 0x32ea <fputc>
    328a:	3a 94       	dec	r3
    328c:	f6 cf       	rjmp	.-20     	; 0x327a <vfprintf+0x37c>
    328e:	f7 01       	movw	r30, r14
    3290:	86 81       	ldd	r24, Z+6	; 0x06
    3292:	97 81       	ldd	r25, Z+7	; 0x07
    3294:	02 c0       	rjmp	.+4      	; 0x329a <vfprintf+0x39c>
    3296:	8f ef       	ldi	r24, 0xFF	; 255
    3298:	9f ef       	ldi	r25, 0xFF	; 255
    329a:	2c 96       	adiw	r28, 0x0c	; 12
    329c:	e2 e1       	ldi	r30, 0x12	; 18
    329e:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__epilogue_restores__>

000032a2 <__eerd_word_m16>:
    32a2:	a8 e1       	ldi	r26, 0x18	; 24
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	42 e0       	ldi	r20, 0x02	; 2
    32a8:	50 e0       	ldi	r21, 0x00	; 0
    32aa:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__eerd_blraw_m16>

000032ae <__eewr_word_m16>:
    32ae:	0e 94 15 1a 	call	0x342a	; 0x342a <__eewr_byte_m16>
    32b2:	27 2f       	mov	r18, r23
    32b4:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__eewr_r18_m16>

000032b8 <__ctype_isfalse>:
    32b8:	99 27       	eor	r25, r25
    32ba:	88 27       	eor	r24, r24

000032bc <__ctype_istrue>:
    32bc:	08 95       	ret

000032be <strnlen_P>:
    32be:	fc 01       	movw	r30, r24
    32c0:	05 90       	lpm	r0, Z+
    32c2:	61 50       	subi	r22, 0x01	; 1
    32c4:	70 40       	sbci	r23, 0x00	; 0
    32c6:	01 10       	cpse	r0, r1
    32c8:	d8 f7       	brcc	.-10     	; 0x32c0 <strnlen_P+0x2>
    32ca:	80 95       	com	r24
    32cc:	90 95       	com	r25
    32ce:	8e 0f       	add	r24, r30
    32d0:	9f 1f       	adc	r25, r31
    32d2:	08 95       	ret

000032d4 <strnlen>:
    32d4:	fc 01       	movw	r30, r24
    32d6:	61 50       	subi	r22, 0x01	; 1
    32d8:	70 40       	sbci	r23, 0x00	; 0
    32da:	01 90       	ld	r0, Z+
    32dc:	01 10       	cpse	r0, r1
    32de:	d8 f7       	brcc	.-10     	; 0x32d6 <strnlen+0x2>
    32e0:	80 95       	com	r24
    32e2:	90 95       	com	r25
    32e4:	8e 0f       	add	r24, r30
    32e6:	9f 1f       	adc	r25, r31
    32e8:	08 95       	ret

000032ea <fputc>:
    32ea:	0f 93       	push	r16
    32ec:	1f 93       	push	r17
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	18 2f       	mov	r17, r24
    32f4:	09 2f       	mov	r16, r25
    32f6:	eb 01       	movw	r28, r22
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	81 fd       	sbrc	r24, 1
    32fc:	03 c0       	rjmp	.+6      	; 0x3304 <fputc+0x1a>
    32fe:	8f ef       	ldi	r24, 0xFF	; 255
    3300:	9f ef       	ldi	r25, 0xFF	; 255
    3302:	20 c0       	rjmp	.+64     	; 0x3344 <fputc+0x5a>
    3304:	82 ff       	sbrs	r24, 2
    3306:	10 c0       	rjmp	.+32     	; 0x3328 <fputc+0x3e>
    3308:	4e 81       	ldd	r20, Y+6	; 0x06
    330a:	5f 81       	ldd	r21, Y+7	; 0x07
    330c:	2c 81       	ldd	r18, Y+4	; 0x04
    330e:	3d 81       	ldd	r19, Y+5	; 0x05
    3310:	42 17       	cp	r20, r18
    3312:	53 07       	cpc	r21, r19
    3314:	7c f4       	brge	.+30     	; 0x3334 <fputc+0x4a>
    3316:	e8 81       	ld	r30, Y
    3318:	f9 81       	ldd	r31, Y+1	; 0x01
    331a:	9f 01       	movw	r18, r30
    331c:	2f 5f       	subi	r18, 0xFF	; 255
    331e:	3f 4f       	sbci	r19, 0xFF	; 255
    3320:	39 83       	std	Y+1, r19	; 0x01
    3322:	28 83       	st	Y, r18
    3324:	10 83       	st	Z, r17
    3326:	06 c0       	rjmp	.+12     	; 0x3334 <fputc+0x4a>
    3328:	e8 85       	ldd	r30, Y+8	; 0x08
    332a:	f9 85       	ldd	r31, Y+9	; 0x09
    332c:	81 2f       	mov	r24, r17
    332e:	09 95       	icall
    3330:	89 2b       	or	r24, r25
    3332:	29 f7       	brne	.-54     	; 0x32fe <fputc+0x14>
    3334:	2e 81       	ldd	r18, Y+6	; 0x06
    3336:	3f 81       	ldd	r19, Y+7	; 0x07
    3338:	2f 5f       	subi	r18, 0xFF	; 255
    333a:	3f 4f       	sbci	r19, 0xFF	; 255
    333c:	3f 83       	std	Y+7, r19	; 0x07
    333e:	2e 83       	std	Y+6, r18	; 0x06
    3340:	81 2f       	mov	r24, r17
    3342:	90 2f       	mov	r25, r16
    3344:	df 91       	pop	r29
    3346:	cf 91       	pop	r28
    3348:	1f 91       	pop	r17
    334a:	0f 91       	pop	r16
    334c:	08 95       	ret

0000334e <__ultoa_invert>:
    334e:	fa 01       	movw	r30, r20
    3350:	aa 27       	eor	r26, r26
    3352:	28 30       	cpi	r18, 0x08	; 8
    3354:	51 f1       	breq	.+84     	; 0x33aa <__ultoa_invert+0x5c>
    3356:	20 31       	cpi	r18, 0x10	; 16
    3358:	81 f1       	breq	.+96     	; 0x33ba <__ultoa_invert+0x6c>
    335a:	e8 94       	clt
    335c:	6f 93       	push	r22
    335e:	6e 7f       	andi	r22, 0xFE	; 254
    3360:	6e 5f       	subi	r22, 0xFE	; 254
    3362:	7f 4f       	sbci	r23, 0xFF	; 255
    3364:	8f 4f       	sbci	r24, 0xFF	; 255
    3366:	9f 4f       	sbci	r25, 0xFF	; 255
    3368:	af 4f       	sbci	r26, 0xFF	; 255
    336a:	b1 e0       	ldi	r27, 0x01	; 1
    336c:	3e d0       	rcall	.+124    	; 0x33ea <__ultoa_invert+0x9c>
    336e:	b4 e0       	ldi	r27, 0x04	; 4
    3370:	3c d0       	rcall	.+120    	; 0x33ea <__ultoa_invert+0x9c>
    3372:	67 0f       	add	r22, r23
    3374:	78 1f       	adc	r23, r24
    3376:	89 1f       	adc	r24, r25
    3378:	9a 1f       	adc	r25, r26
    337a:	a1 1d       	adc	r26, r1
    337c:	68 0f       	add	r22, r24
    337e:	79 1f       	adc	r23, r25
    3380:	8a 1f       	adc	r24, r26
    3382:	91 1d       	adc	r25, r1
    3384:	a1 1d       	adc	r26, r1
    3386:	6a 0f       	add	r22, r26
    3388:	71 1d       	adc	r23, r1
    338a:	81 1d       	adc	r24, r1
    338c:	91 1d       	adc	r25, r1
    338e:	a1 1d       	adc	r26, r1
    3390:	20 d0       	rcall	.+64     	; 0x33d2 <__ultoa_invert+0x84>
    3392:	09 f4       	brne	.+2      	; 0x3396 <__ultoa_invert+0x48>
    3394:	68 94       	set
    3396:	3f 91       	pop	r19
    3398:	2a e0       	ldi	r18, 0x0A	; 10
    339a:	26 9f       	mul	r18, r22
    339c:	11 24       	eor	r1, r1
    339e:	30 19       	sub	r19, r0
    33a0:	30 5d       	subi	r19, 0xD0	; 208
    33a2:	31 93       	st	Z+, r19
    33a4:	de f6       	brtc	.-74     	; 0x335c <__ultoa_invert+0xe>
    33a6:	cf 01       	movw	r24, r30
    33a8:	08 95       	ret
    33aa:	46 2f       	mov	r20, r22
    33ac:	47 70       	andi	r20, 0x07	; 7
    33ae:	40 5d       	subi	r20, 0xD0	; 208
    33b0:	41 93       	st	Z+, r20
    33b2:	b3 e0       	ldi	r27, 0x03	; 3
    33b4:	0f d0       	rcall	.+30     	; 0x33d4 <__ultoa_invert+0x86>
    33b6:	c9 f7       	brne	.-14     	; 0x33aa <__ultoa_invert+0x5c>
    33b8:	f6 cf       	rjmp	.-20     	; 0x33a6 <__ultoa_invert+0x58>
    33ba:	46 2f       	mov	r20, r22
    33bc:	4f 70       	andi	r20, 0x0F	; 15
    33be:	40 5d       	subi	r20, 0xD0	; 208
    33c0:	4a 33       	cpi	r20, 0x3A	; 58
    33c2:	18 f0       	brcs	.+6      	; 0x33ca <__ultoa_invert+0x7c>
    33c4:	49 5d       	subi	r20, 0xD9	; 217
    33c6:	31 fd       	sbrc	r19, 1
    33c8:	40 52       	subi	r20, 0x20	; 32
    33ca:	41 93       	st	Z+, r20
    33cc:	02 d0       	rcall	.+4      	; 0x33d2 <__ultoa_invert+0x84>
    33ce:	a9 f7       	brne	.-22     	; 0x33ba <__ultoa_invert+0x6c>
    33d0:	ea cf       	rjmp	.-44     	; 0x33a6 <__ultoa_invert+0x58>
    33d2:	b4 e0       	ldi	r27, 0x04	; 4
    33d4:	a6 95       	lsr	r26
    33d6:	97 95       	ror	r25
    33d8:	87 95       	ror	r24
    33da:	77 95       	ror	r23
    33dc:	67 95       	ror	r22
    33de:	ba 95       	dec	r27
    33e0:	c9 f7       	brne	.-14     	; 0x33d4 <__ultoa_invert+0x86>
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	61 05       	cpc	r22, r1
    33e6:	71 05       	cpc	r23, r1
    33e8:	08 95       	ret
    33ea:	9b 01       	movw	r18, r22
    33ec:	ac 01       	movw	r20, r24
    33ee:	0a 2e       	mov	r0, r26
    33f0:	06 94       	lsr	r0
    33f2:	57 95       	ror	r21
    33f4:	47 95       	ror	r20
    33f6:	37 95       	ror	r19
    33f8:	27 95       	ror	r18
    33fa:	ba 95       	dec	r27
    33fc:	c9 f7       	brne	.-14     	; 0x33f0 <__ultoa_invert+0xa2>
    33fe:	62 0f       	add	r22, r18
    3400:	73 1f       	adc	r23, r19
    3402:	84 1f       	adc	r24, r20
    3404:	95 1f       	adc	r25, r21
    3406:	a0 1d       	adc	r26, r0
    3408:	08 95       	ret

0000340a <__eerd_block_m16>:
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22

0000340e <__eerd_blraw_m16>:
    340e:	fc 01       	movw	r30, r24
    3410:	e1 99       	sbic	0x1c, 1	; 28
    3412:	fe cf       	rjmp	.-4      	; 0x3410 <__eerd_blraw_m16+0x2>
    3414:	06 c0       	rjmp	.+12     	; 0x3422 <__eerd_blraw_m16+0x14>
    3416:	ff bb       	out	0x1f, r31	; 31
    3418:	ee bb       	out	0x1e, r30	; 30
    341a:	e0 9a       	sbi	0x1c, 0	; 28
    341c:	31 96       	adiw	r30, 0x01	; 1
    341e:	0d b2       	in	r0, 0x1d	; 29
    3420:	0d 92       	st	X+, r0
    3422:	41 50       	subi	r20, 0x01	; 1
    3424:	50 40       	sbci	r21, 0x00	; 0
    3426:	b8 f7       	brcc	.-18     	; 0x3416 <__eerd_blraw_m16+0x8>
    3428:	08 95       	ret

0000342a <__eewr_byte_m16>:
    342a:	26 2f       	mov	r18, r22

0000342c <__eewr_r18_m16>:
    342c:	e1 99       	sbic	0x1c, 1	; 28
    342e:	fe cf       	rjmp	.-4      	; 0x342c <__eewr_r18_m16>
    3430:	9f bb       	out	0x1f, r25	; 31
    3432:	8e bb       	out	0x1e, r24	; 30
    3434:	2d bb       	out	0x1d, r18	; 29
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	e2 9a       	sbi	0x1c, 2	; 28
    343c:	e1 9a       	sbi	0x1c, 1	; 28
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	01 96       	adiw	r24, 0x01	; 1
    3442:	08 95       	ret

00003444 <__mulsi3>:
    3444:	db 01       	movw	r26, r22
    3446:	8f 93       	push	r24
    3448:	9f 93       	push	r25
    344a:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__muluhisi3>
    344e:	bf 91       	pop	r27
    3450:	af 91       	pop	r26
    3452:	a2 9f       	mul	r26, r18
    3454:	80 0d       	add	r24, r0
    3456:	91 1d       	adc	r25, r1
    3458:	a3 9f       	mul	r26, r19
    345a:	90 0d       	add	r25, r0
    345c:	b2 9f       	mul	r27, r18
    345e:	90 0d       	add	r25, r0
    3460:	11 24       	eor	r1, r1
    3462:	08 95       	ret

00003464 <__udivmodsi4>:
    3464:	a1 e2       	ldi	r26, 0x21	; 33
    3466:	1a 2e       	mov	r1, r26
    3468:	aa 1b       	sub	r26, r26
    346a:	bb 1b       	sub	r27, r27
    346c:	fd 01       	movw	r30, r26
    346e:	0d c0       	rjmp	.+26     	; 0x348a <__udivmodsi4_ep>

00003470 <__udivmodsi4_loop>:
    3470:	aa 1f       	adc	r26, r26
    3472:	bb 1f       	adc	r27, r27
    3474:	ee 1f       	adc	r30, r30
    3476:	ff 1f       	adc	r31, r31
    3478:	a2 17       	cp	r26, r18
    347a:	b3 07       	cpc	r27, r19
    347c:	e4 07       	cpc	r30, r20
    347e:	f5 07       	cpc	r31, r21
    3480:	20 f0       	brcs	.+8      	; 0x348a <__udivmodsi4_ep>
    3482:	a2 1b       	sub	r26, r18
    3484:	b3 0b       	sbc	r27, r19
    3486:	e4 0b       	sbc	r30, r20
    3488:	f5 0b       	sbc	r31, r21

0000348a <__udivmodsi4_ep>:
    348a:	66 1f       	adc	r22, r22
    348c:	77 1f       	adc	r23, r23
    348e:	88 1f       	adc	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	1a 94       	dec	r1
    3494:	69 f7       	brne	.-38     	; 0x3470 <__udivmodsi4_loop>
    3496:	60 95       	com	r22
    3498:	70 95       	com	r23
    349a:	80 95       	com	r24
    349c:	90 95       	com	r25
    349e:	9b 01       	movw	r18, r22
    34a0:	ac 01       	movw	r20, r24
    34a2:	bd 01       	movw	r22, r26
    34a4:	cf 01       	movw	r24, r30
    34a6:	08 95       	ret

000034a8 <__divmodsi4>:
    34a8:	05 2e       	mov	r0, r21
    34aa:	97 fb       	bst	r25, 7
    34ac:	1e f4       	brtc	.+6      	; 0x34b4 <__divmodsi4+0xc>
    34ae:	00 94       	com	r0
    34b0:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__negsi2>
    34b4:	57 fd       	sbrc	r21, 7
    34b6:	07 d0       	rcall	.+14     	; 0x34c6 <__divmodsi4_neg2>
    34b8:	0e 94 32 1a 	call	0x3464	; 0x3464 <__udivmodsi4>
    34bc:	07 fc       	sbrc	r0, 7
    34be:	03 d0       	rcall	.+6      	; 0x34c6 <__divmodsi4_neg2>
    34c0:	4e f4       	brtc	.+18     	; 0x34d4 <__divmodsi4_exit>
    34c2:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__negsi2>

000034c6 <__divmodsi4_neg2>:
    34c6:	50 95       	com	r21
    34c8:	40 95       	com	r20
    34ca:	30 95       	com	r19
    34cc:	21 95       	neg	r18
    34ce:	3f 4f       	sbci	r19, 0xFF	; 255
    34d0:	4f 4f       	sbci	r20, 0xFF	; 255
    34d2:	5f 4f       	sbci	r21, 0xFF	; 255

000034d4 <__divmodsi4_exit>:
    34d4:	08 95       	ret

000034d6 <__negsi2>:
    34d6:	90 95       	com	r25
    34d8:	80 95       	com	r24
    34da:	70 95       	com	r23
    34dc:	61 95       	neg	r22
    34de:	7f 4f       	sbci	r23, 0xFF	; 255
    34e0:	8f 4f       	sbci	r24, 0xFF	; 255
    34e2:	9f 4f       	sbci	r25, 0xFF	; 255
    34e4:	08 95       	ret

000034e6 <__muluhisi3>:
    34e6:	0e 94 bd 1a 	call	0x357a	; 0x357a <__umulhisi3>
    34ea:	a5 9f       	mul	r26, r21
    34ec:	90 0d       	add	r25, r0
    34ee:	b4 9f       	mul	r27, r20
    34f0:	90 0d       	add	r25, r0
    34f2:	a4 9f       	mul	r26, r20
    34f4:	80 0d       	add	r24, r0
    34f6:	91 1d       	adc	r25, r1
    34f8:	11 24       	eor	r1, r1
    34fa:	08 95       	ret

000034fc <__mulshisi3>:
    34fc:	b7 ff       	sbrs	r27, 7
    34fe:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__muluhisi3>

00003502 <__mulohisi3>:
    3502:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__muluhisi3>
    3506:	82 1b       	sub	r24, r18
    3508:	93 0b       	sbc	r25, r19
    350a:	08 95       	ret

0000350c <__prologue_saves__>:
    350c:	2f 92       	push	r2
    350e:	3f 92       	push	r3
    3510:	4f 92       	push	r4
    3512:	5f 92       	push	r5
    3514:	6f 92       	push	r6
    3516:	7f 92       	push	r7
    3518:	8f 92       	push	r8
    351a:	9f 92       	push	r9
    351c:	af 92       	push	r10
    351e:	bf 92       	push	r11
    3520:	cf 92       	push	r12
    3522:	df 92       	push	r13
    3524:	ef 92       	push	r14
    3526:	ff 92       	push	r15
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	ca 1b       	sub	r28, r26
    3536:	db 0b       	sbc	r29, r27
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	f8 94       	cli
    353c:	de bf       	out	0x3e, r29	; 62
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	cd bf       	out	0x3d, r28	; 61
    3542:	09 94       	ijmp

00003544 <__epilogue_restores__>:
    3544:	2a 88       	ldd	r2, Y+18	; 0x12
    3546:	39 88       	ldd	r3, Y+17	; 0x11
    3548:	48 88       	ldd	r4, Y+16	; 0x10
    354a:	5f 84       	ldd	r5, Y+15	; 0x0f
    354c:	6e 84       	ldd	r6, Y+14	; 0x0e
    354e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3550:	8c 84       	ldd	r8, Y+12	; 0x0c
    3552:	9b 84       	ldd	r9, Y+11	; 0x0b
    3554:	aa 84       	ldd	r10, Y+10	; 0x0a
    3556:	b9 84       	ldd	r11, Y+9	; 0x09
    3558:	c8 84       	ldd	r12, Y+8	; 0x08
    355a:	df 80       	ldd	r13, Y+7	; 0x07
    355c:	ee 80       	ldd	r14, Y+6	; 0x06
    355e:	fd 80       	ldd	r15, Y+5	; 0x05
    3560:	0c 81       	ldd	r16, Y+4	; 0x04
    3562:	1b 81       	ldd	r17, Y+3	; 0x03
    3564:	aa 81       	ldd	r26, Y+2	; 0x02
    3566:	b9 81       	ldd	r27, Y+1	; 0x01
    3568:	ce 0f       	add	r28, r30
    356a:	d1 1d       	adc	r29, r1
    356c:	0f b6       	in	r0, 0x3f	; 63
    356e:	f8 94       	cli
    3570:	de bf       	out	0x3e, r29	; 62
    3572:	0f be       	out	0x3f, r0	; 63
    3574:	cd bf       	out	0x3d, r28	; 61
    3576:	ed 01       	movw	r28, r26
    3578:	08 95       	ret

0000357a <__umulhisi3>:
    357a:	a2 9f       	mul	r26, r18
    357c:	b0 01       	movw	r22, r0
    357e:	b3 9f       	mul	r27, r19
    3580:	c0 01       	movw	r24, r0
    3582:	a3 9f       	mul	r26, r19
    3584:	70 0d       	add	r23, r0
    3586:	81 1d       	adc	r24, r1
    3588:	11 24       	eor	r1, r1
    358a:	91 1d       	adc	r25, r1
    358c:	b2 9f       	mul	r27, r18
    358e:	70 0d       	add	r23, r0
    3590:	81 1d       	adc	r24, r1
    3592:	11 24       	eor	r1, r1
    3594:	91 1d       	adc	r25, r1
    3596:	08 95       	ret

00003598 <_exit>:
    3598:	f8 94       	cli

0000359a <__stop_program>:
    359a:	ff cf       	rjmp	.-2      	; 0x359a <__stop_program>
