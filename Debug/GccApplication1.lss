
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034fe  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  000034fe  000035b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c0  008000c0  00003612  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00003612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003614  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00003670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000607c  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9d  00000000  00000000  00009974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc5  00000000  00000000  0000a911  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd8  00000000  00000000  0000b6d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b1b  00000000  00000000  0000c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003951  00000000  00000000  0000cdcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0001071c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      54:	9f 0d       	add	r25, r15
      56:	ba 0d       	add	r27, r10
      58:	e2 0e       	add	r14, r18
      5a:	e2 0e       	add	r14, r18
      5c:	e2 0e       	add	r14, r18
      5e:	e2 0e       	add	r14, r18
      60:	e2 0e       	add	r14, r18
      62:	e2 0e       	add	r14, r18
      64:	e2 0e       	add	r14, r18
      66:	c0 0d       	add	r28, r0
      68:	e2 0e       	add	r14, r18
      6a:	e2 0e       	add	r14, r18
      6c:	e2 0e       	add	r14, r18
      6e:	c6 0d       	add	r28, r6
      70:	ce 0d       	add	r28, r14
      72:	d6 0d       	add	r29, r6
      74:	fd 0d       	add	r31, r13
      76:	24 0e       	add	r2, r20
      78:	4b 0e       	add	r4, r27
      7a:	72 0e       	add	r7, r18
      7c:	99 0e       	add	r9, r25
      7e:	c0 0e       	add	r12, r16
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfa>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef510>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates8ampl2vecEiPiS0_+0xe0>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d4>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef744>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b6>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f0>
      d4:	3f 05       	cpc	r19, r15
      d6:	a8 4c       	sbci	r26, 0xC8	; 200
      d8:	cd b2       	in	r12, 0x1d	; 29
      da:	d4 4e       	sbci	r29, 0xE4	; 228
      dc:	b9 38       	cpi	r27, 0x89	; 137
      de:	36 a9       	ldd	r19, Z+54	; 0x36
      e0:	02 0c       	add	r0, r2
      e2:	50 b9       	out	0x00, r21	; 0
      e4:	91 86       	std	Z+9, r9	; 0x09
      e6:	88 08       	sbc	r8, r8
      e8:	3c a6       	std	Y+44, r3	; 0x2c
      ea:	aa aa       	std	Y+50, r10	; 0x32
      ec:	2a be       	out	0x3a, r2	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 08       	sbc	r3, r15
      f4:	00 00       	nop
      f6:	00 be       	out	0x30, r0	; 48
      f8:	92 24       	eor	r9, r2
      fa:	49 12       	cpse	r4, r25
      fc:	3e ab       	std	Y+54, r19	; 0x36
      fe:	aa aa       	std	Y+50, r10	; 0x32
     100:	2a be       	out	0x3a, r2	; 58
     102:	cd cc       	rjmp	.-1638   	; 0xfffffa9e <__eeprom_end+0xff7efa9c>
     104:	cc 4c       	sbci	r28, 0xCC	; 204
     106:	3e 00       	.word	0x003e	; ????
     108:	00 00       	nop
     10a:	80 be       	out	0x30, r8	; 48
     10c:	ab aa       	std	Y+51, r10	; 0x33
     10e:	aa aa       	std	Y+50, r10	; 0x32
     110:	3e 00       	.word	0x003e	; ????
     112:	00 00       	nop
     114:	00 bf       	out	0x30, r16	; 48
     116:	00 00       	nop
     118:	00 80       	ld	r0, Z
     11a:	3f 00       	.word	0x003f	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	08 41       	sbci	r16, 0x18	; 24
     122:	78 d3       	rcall	.+1776   	; 0x814 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a2>
     124:	bb 43       	sbci	r27, 0x3B	; 59
     126:	87 d1       	rcall	.+782    	; 0x436 <_ZN6EEProm4readEj+0x4a>
     128:	13 3d       	cpi	r17, 0xD3	; 211
     12a:	19 0e       	add	r1, r25
     12c:	3c c3       	rjmp	.+1656   	; 0x7a6 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x134>
     12e:	bd 42       	sbci	r27, 0x2D	; 45
     130:	82 ad       	ldd	r24, Z+58	; 0x3a
     132:	2b 3e       	cpi	r18, 0xEB	; 235
     134:	68 ec       	ldi	r22, 0xC8	; 200
     136:	82 76       	andi	r24, 0x62	; 98
     138:	be d9       	rcall	.-3204   	; 0xfffff4b6 <__eeprom_end+0xff7ef4b4>
     13a:	8f e1       	ldi	r24, 0x1F	; 31
     13c:	a9 3e       	cpi	r26, 0xE9	; 233
     13e:	4c 80       	ldd	r4, Y+4	; 0x04
     140:	ef ff       	.word	0xffef	; ????
     142:	be 01       	movw	r22, r28
     144:	c4 ff       	sbrs	r28, 4
     146:	7f 3f       	cpi	r23, 0xFF	; 255
     148:	00 00       	nop
     14a:	00 00       	nop
	...

0000014e <__ctors_start>:
     14e:	a5 0b       	sbc	r26, r21

00000150 <__ctors_end>:
     150:	11 24       	eor	r1, r1
     152:	1f be       	out	0x3f, r1	; 63
     154:	cf e5       	ldi	r28, 0x5F	; 95
     156:	d4 e0       	ldi	r29, 0x04	; 4
     158:	de bf       	out	0x3e, r29	; 62
     15a:	cd bf       	out	0x3d, r28	; 61

0000015c <__do_copy_data>:
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	a0 e6       	ldi	r26, 0x60	; 96
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ee ef       	ldi	r30, 0xFE	; 254
     164:	f4 e3       	ldi	r31, 0x34	; 52
     166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x10>
     168:	05 90       	lpm	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	a0 3c       	cpi	r26, 0xC0	; 192
     16e:	b1 07       	cpc	r27, r17
     170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0xc>

00000172 <__do_clear_bss>:
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	a0 ec       	ldi	r26, 0xC0	; 192
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
     17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
     17c:	a8 3c       	cpi	r26, 0xC8	; 200
     17e:	b2 07       	cpc	r27, r18
     180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>

00000182 <__do_global_ctors>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	c0 e5       	ldi	r28, 0x50	; 80
     186:	d1 e0       	ldi	r29, 0x01	; 1
     188:	04 c0       	rjmp	.+8      	; 0x192 <__do_global_ctors+0x10>
     18a:	22 97       	sbiw	r28, 0x02	; 2
     18c:	fe 01       	movw	r30, r28
     18e:	0e 94 35 14 	call	0x286a	; 0x286a <__tablejump__>
     192:	ce 34       	cpi	r28, 0x4E	; 78
     194:	d1 07       	cpc	r29, r17
     196:	c9 f7       	brne	.-14     	; 0x18a <__do_global_ctors+0x8>
     198:	0e 94 aa 0b 	call	0x1754	; 0x1754 <main>
     19c:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	fc 01       	movw	r30, r24
     1aa:	40 83       	st	Z, r20
     1ac:	51 83       	std	Z+1, r21	; 0x01
     1ae:	62 83       	std	Z+2, r22	; 0x02
     1b0:	73 83       	std	Z+3, r23	; 0x03
     1b2:	04 83       	std	Z+4, r16	; 0x04
     1b4:	15 83       	std	Z+5, r17	; 0x05
     1b6:	26 83       	std	Z+6, r18	; 0x06
     1b8:	37 83       	std	Z+7, r19	; 0x07
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	08 95       	ret

000001c0 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     1c0:	fc 01       	movw	r30, r24
     1c2:	10 82       	st	Z, r1
     1c4:	11 82       	std	Z+1, r1	; 0x01
     1c6:	12 82       	std	Z+2, r1	; 0x02
     1c8:	13 82       	std	Z+3, r1	; 0x03
     1ca:	14 82       	std	Z+4, r1	; 0x04
     1cc:	15 82       	std	Z+5, r1	; 0x05
     1ce:	16 82       	std	Z+6, r1	; 0x06
     1d0:	17 82       	std	Z+7, r1	; 0x07
     1d2:	08 95       	ret

000001d4 <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     1d4:	af 92       	push	r10
     1d6:	bf 92       	push	r11
     1d8:	cf 92       	push	r12
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	68 97       	sbiw	r28, 0x18	; 24
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	5c 01       	movw	r10, r24
     1fa:	09 8b       	std	Y+17, r16	; 0x11
     1fc:	1a 8b       	std	Y+18, r17	; 0x12
     1fe:	2b 8b       	std	Y+19, r18	; 0x13
     200:	3c 8b       	std	Y+20, r19	; 0x14
     202:	4d 8b       	std	Y+21, r20	; 0x15
     204:	5e 8b       	std	Y+22, r21	; 0x16
     206:	6f 8b       	std	Y+23, r22	; 0x17
     208:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     20a:	2d 89       	ldd	r18, Y+21	; 0x15
     20c:	3e 89       	ldd	r19, Y+22	; 0x16
     20e:	4f 89       	ldd	r20, Y+23	; 0x17
     210:	58 8d       	ldd	r21, Y+24	; 0x18
     212:	fc 01       	movw	r30, r24
     214:	64 81       	ldd	r22, Z+4	; 0x04
     216:	75 81       	ldd	r23, Z+5	; 0x05
     218:	86 81       	ldd	r24, Z+6	; 0x06
     21a:	97 81       	ldd	r25, Z+7	; 0x07
     21c:	0e 94 a4 10 	call	0x2148	; 0x2148 <__addsf3>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24
     224:	29 89       	ldd	r18, Y+17	; 0x11
     226:	3a 89       	ldd	r19, Y+18	; 0x12
     228:	4b 89       	ldd	r20, Y+19	; 0x13
     22a:	5c 89       	ldd	r21, Y+20	; 0x14
     22c:	f5 01       	movw	r30, r10
     22e:	60 81       	ld	r22, Z
     230:	71 81       	ldd	r23, Z+1	; 0x01
     232:	82 81       	ldd	r24, Z+2	; 0x02
     234:	93 81       	ldd	r25, Z+3	; 0x03
     236:	0e 94 a4 10 	call	0x2148	; 0x2148 <__addsf3>
     23a:	ab 01       	movw	r20, r22
     23c:	bc 01       	movw	r22, r24
     23e:	97 01       	movw	r18, r14
     240:	86 01       	movw	r16, r12
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	fe 01       	movw	r30, r28
     24e:	31 96       	adiw	r30, 0x01	; 1
     250:	de 01       	movw	r26, r28
     252:	19 96       	adiw	r26, 0x09	; 9
     254:	01 90       	ld	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	8a 95       	dec	r24
     25a:	e1 f7       	brne	.-8      	; 0x254 <_ZN7Complex3addES_+0x80>
     25c:	29 85       	ldd	r18, Y+9	; 0x09
     25e:	3a 85       	ldd	r19, Y+10	; 0x0a
     260:	4b 85       	ldd	r20, Y+11	; 0x0b
     262:	5c 85       	ldd	r21, Y+12	; 0x0c
     264:	6d 85       	ldd	r22, Y+13	; 0x0d
     266:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     268:	8f 85       	ldd	r24, Y+15	; 0x0f
     26a:	98 89       	ldd	r25, Y+16	; 0x10
     26c:	68 96       	adiw	r28, 0x18	; 24
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	df 90       	pop	r13
     286:	cf 90       	pop	r12
     288:	bf 90       	pop	r11
     28a:	af 90       	pop	r10
     28c:	08 95       	ret

0000028e <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     28e:	4f 92       	push	r4
     290:	5f 92       	push	r5
     292:	6f 92       	push	r6
     294:	7f 92       	push	r7
     296:	8f 92       	push	r8
     298:	9f 92       	push	r9
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	a0 97       	sbiw	r28, 0x20	; 32
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	09 8b       	std	Y+17, r16	; 0x11
     2c0:	1a 8b       	std	Y+18, r17	; 0x12
     2c2:	2b 8b       	std	Y+19, r18	; 0x13
     2c4:	3c 8b       	std	Y+20, r19	; 0x14
     2c6:	4d 8b       	std	Y+21, r20	; 0x15
     2c8:	5e 8b       	std	Y+22, r21	; 0x16
     2ca:	6f 8b       	std	Y+23, r22	; 0x17
     2cc:	78 8f       	std	Y+24, r23	; 0x18
     2ce:	89 88       	ldd	r8, Y+17	; 0x11
     2d0:	9a 88       	ldd	r9, Y+18	; 0x12
     2d2:	ab 88       	ldd	r10, Y+19	; 0x13
     2d4:	bc 88       	ldd	r11, Y+20	; 0x14
     2d6:	2d 89       	ldd	r18, Y+21	; 0x15
     2d8:	3e 89       	ldd	r19, Y+22	; 0x16
     2da:	4f 89       	ldd	r20, Y+23	; 0x17
     2dc:	58 8d       	ldd	r21, Y+24	; 0x18
     2de:	2d 8f       	std	Y+29, r18	; 0x1d
     2e0:	3e 8f       	std	Y+30, r19	; 0x1e
     2e2:	4f 8f       	std	Y+31, r20	; 0x1f
     2e4:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     2e6:	fc 01       	movw	r30, r24
     2e8:	c0 80       	ld	r12, Z
     2ea:	d1 80       	ldd	r13, Z+1	; 0x01
     2ec:	e2 80       	ldd	r14, Z+2	; 0x02
     2ee:	f3 80       	ldd	r15, Z+3	; 0x03
     2f0:	24 81       	ldd	r18, Z+4	; 0x04
     2f2:	35 81       	ldd	r19, Z+5	; 0x05
     2f4:	46 81       	ldd	r20, Z+6	; 0x06
     2f6:	57 81       	ldd	r21, Z+7	; 0x07
     2f8:	29 8f       	std	Y+25, r18	; 0x19
     2fa:	3a 8f       	std	Y+26, r19	; 0x1a
     2fc:	4b 8f       	std	Y+27, r20	; 0x1b
     2fe:	5c 8f       	std	Y+28, r21	; 0x1c
     300:	2d 8d       	ldd	r18, Y+29	; 0x1d
     302:	3e 8d       	ldd	r19, Y+30	; 0x1e
     304:	4f 8d       	ldd	r20, Y+31	; 0x1f
     306:	58 a1       	ldd	r21, Y+32	; 0x20
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     310:	2b 01       	movw	r4, r22
     312:	3c 01       	movw	r6, r24
     314:	a5 01       	movw	r20, r10
     316:	94 01       	movw	r18, r8
     318:	69 8d       	ldd	r22, Y+25	; 0x19
     31a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     31c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     31e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     320:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	c3 01       	movw	r24, r6
     32a:	b2 01       	movw	r22, r4
     32c:	0e 94 a4 10 	call	0x2148	; 0x2148 <__addsf3>
     330:	2b 01       	movw	r4, r22
     332:	3c 01       	movw	r6, r24
     334:	a5 01       	movw	r20, r10
     336:	94 01       	movw	r18, r8
     338:	c7 01       	movw	r24, r14
     33a:	b6 01       	movw	r22, r12
     33c:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     340:	6b 01       	movw	r12, r22
     342:	7c 01       	movw	r14, r24
     344:	2d 8d       	ldd	r18, Y+29	; 0x1d
     346:	3e 8d       	ldd	r19, Y+30	; 0x1e
     348:	4f 8d       	ldd	r20, Y+31	; 0x1f
     34a:	58 a1       	ldd	r21, Y+32	; 0x20
     34c:	69 8d       	ldd	r22, Y+25	; 0x19
     34e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     350:	8b 8d       	ldd	r24, Y+27	; 0x1b
     352:	9c 8d       	ldd	r25, Y+28	; 0x1c
     354:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     358:	9b 01       	movw	r18, r22
     35a:	ac 01       	movw	r20, r24
     35c:	c7 01       	movw	r24, r14
     35e:	b6 01       	movw	r22, r12
     360:	0e 94 a3 10 	call	0x2146	; 0x2146 <__subsf3>
     364:	ab 01       	movw	r20, r22
     366:	bc 01       	movw	r22, r24
     368:	93 01       	movw	r18, r6
     36a:	82 01       	movw	r16, r4
     36c:	ce 01       	movw	r24, r28
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     374:	88 e0       	ldi	r24, 0x08	; 8
     376:	fe 01       	movw	r30, r28
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	de 01       	movw	r26, r28
     37c:	19 96       	adiw	r26, 0x09	; 9
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <_ZN7Complex3mulES_+0xf0>
     386:	29 85       	ldd	r18, Y+9	; 0x09
     388:	3a 85       	ldd	r19, Y+10	; 0x0a
     38a:	4b 85       	ldd	r20, Y+11	; 0x0b
     38c:	5c 85       	ldd	r21, Y+12	; 0x0c
     38e:	6d 85       	ldd	r22, Y+13	; 0x0d
     390:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     392:	8f 85       	ldd	r24, Y+15	; 0x0f
     394:	98 89       	ldd	r25, Y+16	; 0x10
     396:	a0 96       	adiw	r28, 0x20	; 32
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	bf 90       	pop	r11
     3b4:	af 90       	pop	r10
     3b6:	9f 90       	pop	r9
     3b8:	8f 90       	pop	r8
     3ba:	7f 90       	pop	r7
     3bc:	6f 90       	pop	r6
     3be:	5f 90       	pop	r5
     3c0:	4f 90       	pop	r4
     3c2:	08 95       	ret

000003c4 <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 81       	ld	r18, Z
     3c8:	31 81       	ldd	r19, Z+1	; 0x01
     3ca:	42 81       	ldd	r20, Z+2	; 0x02
     3cc:	53 81       	ldd	r21, Z+3	; 0x03
     3ce:	64 81       	ldd	r22, Z+4	; 0x04
     3d0:	75 81       	ldd	r23, Z+5	; 0x05
     3d2:	86 81       	ldd	r24, Z+6	; 0x06
     3d4:	97 81       	ldd	r25, Z+7	; 0x07
     3d6:	0e 94 37 11 	call	0x226e	; 0x226e <__divsf3>
     3da:	0e 94 08 11 	call	0x2210	; 0x2210 <atan>
     3de:	08 95       	ret

000003e0 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     3e0:	85 e0       	ldi	r24, 0x05	; 5
     3e2:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     3e4:	81 b1       	in	r24, 0x01	; 1
     3e6:	8c 7f       	andi	r24, 0xFC	; 252
     3e8:	81 b9       	out	0x01, r24	; 1
     3ea:	08 95       	ret

000003ec <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3ec:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     3ee:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     3f0:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3f2:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     3f4:	06 b6       	in	r0, 0x36	; 54
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     3fa:	81 b1       	in	r24, 0x01	; 1
     3fc:	88 7f       	andi	r24, 0xF8	; 248
     3fe:	88 30       	cpi	r24, 0x08	; 8
     400:	09 f0       	breq	.+2      	; 0x404 <_ZN6EEProm4readEj+0x18>
     402:	41 c0       	rjmp	.+130    	; 0x486 <__stack+0x27>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     404:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     406:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     408:	06 b6       	in	r0, 0x36	; 54
     40a:	07 fe       	sbrs	r0, 7
     40c:	fd cf       	rjmp	.-6      	; 0x408 <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     40e:	81 b1       	in	r24, 0x01	; 1
     410:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     412:	88 31       	cpi	r24, 0x18	; 24
     414:	71 f7       	brne	.-36     	; 0x3f2 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     416:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     418:	84 e8       	ldi	r24, 0x84	; 132
     41a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     41c:	06 b6       	in	r0, 0x36	; 54
     41e:	07 fe       	sbrs	r0, 7
     420:	fd cf       	rjmp	.-6      	; 0x41c <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     422:	81 b1       	in	r24, 0x01	; 1
     424:	88 7f       	andi	r24, 0xF8	; 248
     426:	88 32       	cpi	r24, 0x28	; 40
     428:	81 f5       	brne	.+96     	; 0x48a <__stack+0x2b>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     42a:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     42c:	84 e8       	ldi	r24, 0x84	; 132
     42e:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     430:	06 b6       	in	r0, 0x36	; 54
     432:	07 fe       	sbrs	r0, 7
     434:	fd cf       	rjmp	.-6      	; 0x430 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     436:	81 b1       	in	r24, 0x01	; 1
     438:	88 7f       	andi	r24, 0xF8	; 248
     43a:	88 32       	cpi	r24, 0x28	; 40
     43c:	41 f5       	brne	.+80     	; 0x48e <__stack+0x2f>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     43e:	84 ea       	ldi	r24, 0xA4	; 164
     440:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     442:	06 b6       	in	r0, 0x36	; 54
     444:	07 fe       	sbrs	r0, 7
     446:	fd cf       	rjmp	.-6      	; 0x442 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     448:	81 b1       	in	r24, 0x01	; 1
     44a:	88 7f       	andi	r24, 0xF8	; 248
     44c:	80 31       	cpi	r24, 0x10	; 16
     44e:	09 f5       	brne	.+66     	; 0x492 <__stack+0x33>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     450:	81 ea       	ldi	r24, 0xA1	; 161
     452:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     454:	84 e8       	ldi	r24, 0x84	; 132
     456:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     458:	06 b6       	in	r0, 0x36	; 54
     45a:	07 fe       	sbrs	r0, 7
     45c:	fd cf       	rjmp	.-6      	; 0x458 <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     45e:	81 b1       	in	r24, 0x01	; 1
     460:	88 7f       	andi	r24, 0xF8	; 248
     462:	80 34       	cpi	r24, 0x40	; 64
     464:	c1 f4       	brne	.+48     	; 0x496 <__stack+0x37>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     466:	84 e8       	ldi	r24, 0x84	; 132
     468:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     46a:	06 b6       	in	r0, 0x36	; 54
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <__stack+0xb>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     470:	81 b1       	in	r24, 0x01	; 1
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	88 35       	cpi	r24, 0x58	; 88
     476:	89 f4       	brne	.+34     	; 0x49a <__stack+0x3b>
		return FALSE;

	//Read the data
	data=TWDR;
     478:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     47a:	94 e9       	ldi	r25, 0x94	; 148
     47c:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     47e:	06 b6       	in	r0, 0x36	; 54
     480:	04 fc       	sbrc	r0, 4
     482:	fd cf       	rjmp	.-6      	; 0x47e <__stack+0x1f>
     484:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     49a:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     49c:	08 95       	ret

0000049e <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	c4 56       	subi	r28, 0x64	; 100
     4b4:	d1 09       	sbc	r29, r1
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	6c 01       	movw	r12, r24
     4c2:	ce 01       	movw	r24, r28
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     4cc:	b8 01       	movw	r22, r16
     4ce:	c6 01       	movw	r24, r12
     4d0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN6EEProm4readEj>
     4d4:	f7 01       	movw	r30, r14
     4d6:	81 93       	st	Z+, r24
     4d8:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     4da:	8f 3f       	cpi	r24, 0xFF	; 255
     4dc:	81 f4       	brne	.+32     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4de:	32 97       	sbiw	r30, 0x02	; 2
     4e0:	20 81       	ld	r18, Z
     4e2:	2f 3f       	cpi	r18, 0xFF	; 255
     4e4:	61 f4       	brne	.+24     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4e6:	31 97       	sbiw	r30, 0x01	; 1
     4e8:	20 81       	ld	r18, Z
     4ea:	2f 3f       	cpi	r18, 0xFF	; 255
     4ec:	41 f4       	brne	.+16     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	20 81       	ld	r18, Z
     4f2:	2f 3f       	cpi	r18, 0xFF	; 255
     4f4:	21 f4       	brne	.+8      	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	8f 3f       	cpi	r24, 0xFF	; 255
     4fc:	19 f0       	breq	.+6      	; 0x504 <_ZN6EEProm7readallEv+0x66>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4fe:	0f 5f       	subi	r16, 0xFF	; 255
     500:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     502:	e4 cf       	rjmp	.-56     	; 0x4cc <_ZN6EEProm7readallEv+0x2e>
	return eeprom_mem;
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	cc 59       	subi	r28, 0x9C	; 156
     50a:	df 4f       	sbci	r29, 0xFF	; 255
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	cf 90       	pop	r12
     526:	08 95       	ret

00000528 <_Z12print_statesiP7ComplexPc>:

Serial s;
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	7c 01       	movw	r14, r24
     536:	06 2f       	mov	r16, r22
     538:	17 2f       	mov	r17, r23
	s.writestrln(message);
     53a:	ba 01       	movw	r22, r20
     53c:	81 ec       	ldi	r24, 0xC1	; 193
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     544:	1e 14       	cp	r1, r14
     546:	1f 04       	cpc	r1, r15
     548:	0c f0       	brlt	.+2      	; 0x54c <_Z12print_statesiP7ComplexPc+0x24>
     54a:	47 c0       	rjmp	.+142    	; 0x5da <_Z12print_statesiP7ComplexPc+0xb2>
     54c:	c0 2f       	mov	r28, r16
     54e:	d1 2f       	mov	r29, r17
     550:	00 e0       	ldi	r16, 0x00	; 0
     552:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
     554:	6a e6       	ldi	r22, 0x6A	; 106
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	81 ec       	ldi	r24, 0xC1	; 193
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6Serial8writestrEPc>
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	4a e7       	ldi	r20, 0x7A	; 122
     566:	54 e4       	ldi	r21, 0x44	; 68
     568:	68 81       	ld	r22, Y
     56a:	79 81       	ldd	r23, Y+1	; 0x01
     56c:	8a 81       	ldd	r24, Y+2	; 0x02
     56e:	9b 81       	ldd	r25, Y+3	; 0x03
     570:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     574:	0e 94 9f 11 	call	0x233e	; 0x233e <__fixsfsi>
     578:	80 ec       	ldi	r24, 0xC0	; 192
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN4QEPU5Utils7int2strEi>
     580:	bc 01       	movw	r22, r24
     582:	81 ec       	ldi	r24, 0xC1	; 193
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
     58a:	6e e6       	ldi	r22, 0x6E	; 110
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	81 ec       	ldi	r24, 0xC1	; 193
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6Serial8writestrEPc>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	4a e7       	ldi	r20, 0x7A	; 122
     59c:	54 e4       	ldi	r21, 0x44	; 68
     59e:	6c 81       	ldd	r22, Y+4	; 0x04
     5a0:	7d 81       	ldd	r23, Y+5	; 0x05
     5a2:	8e 81       	ldd	r24, Y+6	; 0x06
     5a4:	9f 81       	ldd	r25, Y+7	; 0x07
     5a6:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     5aa:	0e 94 9f 11 	call	0x233e	; 0x233e <__fixsfsi>
     5ae:	80 ec       	ldi	r24, 0xC0	; 192
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN4QEPU5Utils7int2strEi>
     5b6:	bc 01       	movw	r22, r24
     5b8:	81 ec       	ldi	r24, 0xC1	; 193
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     5c0:	6f ea       	ldi	r22, 0xAF	; 175
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	81 ec       	ldi	r24, 0xC1	; 193
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN6Serial10writestrlnEPc>
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     5cc:	0f 5f       	subi	r16, 0xFF	; 255
     5ce:	1f 4f       	sbci	r17, 0xFF	; 255
     5d0:	28 96       	adiw	r28, 0x08	; 8
     5d2:	0e 15       	cp	r16, r14
     5d4:	1f 05       	cpc	r17, r15
     5d6:	09 f0       	breq	.+2      	; 0x5da <_Z12print_statesiP7ComplexPc+0xb2>
     5d8:	bd cf       	rjmp	.-134    	; 0x554 <_Z12print_statesiP7ComplexPc+0x2c>
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	08 95       	ret

000005e8 <_ZN5Gates10setup_seedEv>:

void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 02 19 	call	0x3204	; 0x3204 <__eerd_word_m16>
     5f0:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <srand>
	eeprom_write_word(&randinit,rand()%10000);
     5f4:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <rand>
     5f8:	60 e1       	ldi	r22, 0x10	; 16
     5fa:	77 e2       	ldi	r23, 0x27	; 39
     5fc:	0e 94 1f 14 	call	0x283e	; 0x283e <__divmodhi4>
     600:	bc 01       	movw	r22, r24
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 08 19 	call	0x3210	; 0x3210 <__eewr_word_m16>
     60a:	08 95       	ret

0000060c <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}
     60c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN5Gates10setup_seedEv>
     610:	08 95       	ret

00000612 <_ZN5Gates5touchEd>:
void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

int Gates::touch(double probability){
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	6a 01       	movw	r12, r20
     620:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     622:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <rand>
     626:	ec 01       	movw	r28, r24
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	3e ef       	ldi	r19, 0xFE	; 254
     62c:	4f ef       	ldi	r20, 0xFF	; 255
     62e:	56 e4       	ldi	r21, 0x46	; 70
     630:	c7 01       	movw	r24, r14
     632:	b6 01       	movw	r22, r12
     634:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     638:	6b 01       	movw	r12, r22
     63a:	7c 01       	movw	r14, r24
     63c:	be 01       	movw	r22, r28
     63e:	88 27       	eor	r24, r24
     640:	77 fd       	sbrc	r23, 7
     642:	80 95       	com	r24
     644:	98 2f       	mov	r25, r24
     646:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__floatsisf>
     64a:	9b 01       	movw	r18, r22
     64c:	ac 01       	movw	r20, r24
     64e:	c1 e0       	ldi	r28, 0x01	; 1
     650:	d0 e0       	ldi	r29, 0x00	; 0
     652:	c7 01       	movw	r24, r14
     654:	b6 01       	movw	r22, r12
     656:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__gesf2>
     65a:	88 23       	and	r24, r24
     65c:	14 f4       	brge	.+4      	; 0x662 <_ZN5Gates5touchEd+0x50>
     65e:	c0 e0       	ldi	r28, 0x00	; 0
     660:	d0 e0       	ldi	r29, 0x00	; 0
}
     662:	ce 01       	movw	r24, r28
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <_ZN5Gates17reverse_kroneckerEP7Complexi>:
int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
	return result;
}

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     672:	4f 92       	push	r4
     674:	5f 92       	push	r5
     676:	6f 92       	push	r6
     678:	7f 92       	push	r7
     67a:	9f 92       	push	r9
     67c:	af 92       	push	r10
     67e:	bf 92       	push	r11
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	a0 97       	sbiw	r28, 0x20	; 32
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	7b 01       	movw	r14, r22
     6a2:	6a 01       	movw	r12, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     6a4:	ba 01       	movw	r22, r20
     6a6:	88 27       	eor	r24, r24
     6a8:	77 fd       	sbrc	r23, 7
     6aa:	80 95       	com	r24
     6ac:	98 2f       	mov	r25, r24
     6ae:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__floatsisf>
     6b2:	0e 94 0b 13 	call	0x2616	; 0x2616 <log>
     6b6:	28 e1       	ldi	r18, 0x18	; 24
     6b8:	32 e7       	ldi	r19, 0x72	; 114
     6ba:	41 e3       	ldi	r20, 0x31	; 49
     6bc:	5f e3       	ldi	r21, 0x3F	; 63
     6be:	0e 94 37 11 	call	0x226e	; 0x226e <__divsf3>
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	0e 94 a4 10 	call	0x2148	; 0x2148 <__addsf3>
     6ca:	0e 94 9f 11 	call	0x233e	; 0x233e <__fixsfsi>
     6ce:	2b 01       	movw	r4, r22
     6d0:	3c 01       	movw	r6, r24
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
     6d2:	cb 01       	movw	r24, r22
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
     6e4:	5c 01       	movw	r10, r24
		
	for(int i=0;i<kron_size;i++)
     6e6:	1c 14       	cp	r1, r12
     6e8:	1d 04       	cpc	r1, r13
     6ea:	0c f0       	brlt	.+2      	; 0x6ee <_ZN5Gates17reverse_kroneckerEP7Complexi+0x7c>
     6ec:	9d c0       	rjmp	.+314    	; 0x828 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b6>
		if(kron[i].re==1){
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e8       	ldi	r20, 0x80	; 128
     6f4:	5f e3       	ldi	r21, 0x3F	; 63
     6f6:	f7 01       	movw	r30, r14
     6f8:	60 81       	ld	r22, Z
     6fa:	71 81       	ldd	r23, Z+1	; 0x01
     6fc:	82 81       	ldd	r24, Z+2	; 0x02
     6fe:	93 81       	ldd	r25, Z+3	; 0x03
     700:	0e 94 30 11 	call	0x2260	; 0x2260 <__cmpsf2>
     704:	81 11       	cpse	r24, r1
     706:	88 c0       	rjmp	.+272    	; 0x818 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a6>
     708:	11 c0       	rjmp	.+34     	; 0x72c <_ZN5Gates17reverse_kroneckerEP7Complexi+0xba>
     70a:	f8 e0       	ldi	r31, 0x08	; 8
     70c:	ef 0e       	add	r14, r31
     70e:	f1 1c       	adc	r15, r1
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	5f e3       	ldi	r21, 0x3F	; 63
     718:	f7 01       	movw	r30, r14
     71a:	60 81       	ld	r22, Z
     71c:	71 81       	ldd	r23, Z+1	; 0x01
     71e:	82 81       	ldd	r24, Z+2	; 0x02
     720:	93 81       	ldd	r25, Z+3	; 0x03
     722:	0e 94 30 11 	call	0x2260	; 0x2260 <__cmpsf2>
     726:	81 11       	cpse	r24, r1
     728:	79 c0       	rjmp	.+242    	; 0x81c <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1aa>
     72a:	02 c0       	rjmp	.+4      	; 0x730 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xbe>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     72c:	00 e0       	ldi	r16, 0x00	; 0
     72e:	10 e0       	ldi	r17, 0x00	; 0
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,reversed_kron_size);
     730:	a2 01       	movw	r20, r4
     732:	b8 01       	movw	r22, r16
     734:	80 ec       	ldi	r24, 0xC0	; 192
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN4QEPU5Utils10int2binstrEii>
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=reversed_kron_size-1;j>=0;j--){
     73c:	72 01       	movw	r14, r4
     73e:	f1 e0       	ldi	r31, 0x01	; 1
     740:	ef 1a       	sub	r14, r31
     742:	f1 08       	sbc	r15, r1
     744:	ff 20       	and	r15, r15
     746:	0c f4       	brge	.+2      	; 0x74a <_ZN5Gates17reverse_kroneckerEP7Complexi+0xd8>
     748:	6f c0       	rjmp	.+222    	; 0x828 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b6>
     74a:	48 0e       	add	r4, r24
     74c:	59 1e       	adc	r5, r25
     74e:	35 01       	movw	r6, r10
     750:	65 01       	movw	r12, r10
     752:	28 e0       	ldi	r18, 0x08	; 8
     754:	c2 0e       	add	r12, r18
     756:	d1 1c       	adc	r13, r1
				if(toBin[j]=='1'){
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     758:	68 94       	set
     75a:	99 24       	eor	r9, r9
     75c:	93 f8       	bld	r9, 3
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,reversed_kron_size);
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=reversed_kron_size-1;j>=0;j--){
				if(toBin[j]=='1'){
     75e:	f2 01       	movw	r30, r4
     760:	82 91       	ld	r24, -Z
     762:	2f 01       	movw	r4, r30
     764:	81 33       	cpi	r24, 0x31	; 49
     766:	29 f5       	brne	.+74     	; 0x7b2 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x140>
					reversed_kronecker[index_rev_kro]=Complex(0,0); reversed_kronecker[index_rev_kro+1]=Complex(1,0);
     768:	00 e0       	ldi	r16, 0x00	; 0
     76a:	10 e0       	ldi	r17, 0x00	; 0
     76c:	98 01       	movw	r18, r16
     76e:	b9 01       	movw	r22, r18
     770:	a8 01       	movw	r20, r16
     772:	ce 01       	movw	r24, r28
     774:	49 96       	adiw	r24, 0x19	; 25
     776:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     77a:	fe 01       	movw	r30, r28
     77c:	79 96       	adiw	r30, 0x19	; 25
     77e:	d3 01       	movw	r26, r6
     780:	89 2d       	mov	r24, r9
     782:	01 90       	ld	r0, Z+
     784:	0d 92       	st	X+, r0
     786:	8a 95       	dec	r24
     788:	e1 f7       	brne	.-8      	; 0x782 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x110>
     78a:	00 e0       	ldi	r16, 0x00	; 0
     78c:	10 e0       	ldi	r17, 0x00	; 0
     78e:	98 01       	movw	r18, r16
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	60 e8       	ldi	r22, 0x80	; 128
     796:	7f e3       	ldi	r23, 0x3F	; 63
     798:	ce 01       	movw	r24, r28
     79a:	41 96       	adiw	r24, 0x11	; 17
     79c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     7a0:	fe 01       	movw	r30, r28
     7a2:	71 96       	adiw	r30, 0x11	; 17
     7a4:	d6 01       	movw	r26, r12
     7a6:	89 2d       	mov	r24, r9
     7a8:	01 90       	ld	r0, Z+
     7aa:	0d 92       	st	X+, r0
     7ac:	8a 95       	dec	r24
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x136>
     7b0:	24 c0       	rjmp	.+72     	; 0x7fa <_ZN5Gates17reverse_kroneckerEP7Complexi+0x188>
				}else{
					reversed_kronecker[index_rev_kro]=Complex(1,0); reversed_kronecker[index_rev_kro+1]=Complex(0,0);
     7b2:	00 e0       	ldi	r16, 0x00	; 0
     7b4:	10 e0       	ldi	r17, 0x00	; 0
     7b6:	98 01       	movw	r18, r16
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	60 e8       	ldi	r22, 0x80	; 128
     7be:	7f e3       	ldi	r23, 0x3F	; 63
     7c0:	ce 01       	movw	r24, r28
     7c2:	09 96       	adiw	r24, 0x09	; 9
     7c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     7c8:	fe 01       	movw	r30, r28
     7ca:	39 96       	adiw	r30, 0x09	; 9
     7cc:	d3 01       	movw	r26, r6
     7ce:	89 2d       	mov	r24, r9
     7d0:	01 90       	ld	r0, Z+
     7d2:	0d 92       	st	X+, r0
     7d4:	8a 95       	dec	r24
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x15e>
     7d8:	00 e0       	ldi	r16, 0x00	; 0
     7da:	10 e0       	ldi	r17, 0x00	; 0
     7dc:	98 01       	movw	r18, r16
     7de:	b9 01       	movw	r22, r18
     7e0:	a8 01       	movw	r20, r16
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     7ea:	fe 01       	movw	r30, r28
     7ec:	31 96       	adiw	r30, 0x01	; 1
     7ee:	d6 01       	movw	r26, r12
     7f0:	89 2d       	mov	r24, r9
     7f2:	01 90       	ld	r0, Z+
     7f4:	0d 92       	st	X+, r0
     7f6:	8a 95       	dec	r24
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x180>
		
	for(int i=0;i<kron_size;i++)
		if(kron[i].re==1){
			char *toBin=utils.int2binstr(i,reversed_kron_size);
			int index_rev_kro=0; //USE ITS OWN INDEX BECAUSE J IS THE INDEX OF TOBIN AN TOBIN HAS TO GO REVERSED
			for(int j=reversed_kron_size-1;j>=0;j--){
     7fa:	f1 e0       	ldi	r31, 0x01	; 1
     7fc:	ef 1a       	sub	r14, r31
     7fe:	f1 08       	sbc	r15, r1
     800:	20 e1       	ldi	r18, 0x10	; 16
     802:	62 0e       	add	r6, r18
     804:	71 1c       	adc	r7, r1
     806:	80 e1       	ldi	r24, 0x10	; 16
     808:	c8 0e       	add	r12, r24
     80a:	d1 1c       	adc	r13, r1
     80c:	ef ef       	ldi	r30, 0xFF	; 255
     80e:	ee 16       	cp	r14, r30
     810:	fe 06       	cpc	r15, r30
     812:	09 f0       	breq	.+2      	; 0x816 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a4>
     814:	a4 cf       	rjmp	.-184    	; 0x75e <_ZN5Gates17reverse_kroneckerEP7Complexi+0xec>
     816:	08 c0       	rjmp	.+16     	; 0x828 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b6>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i++)
     818:	00 e0       	ldi	r16, 0x00	; 0
     81a:	10 e0       	ldi	r17, 0x00	; 0
     81c:	0f 5f       	subi	r16, 0xFF	; 255
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	0c 15       	cp	r16, r12
     822:	1d 05       	cpc	r17, r13
     824:	09 f0       	breq	.+2      	; 0x828 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1b6>
     826:	71 cf       	rjmp	.-286    	; 0x70a <_ZN5Gates17reverse_kroneckerEP7Complexi+0x98>
				index_rev_kro+=2;
			}
			break;
		}
	return reversed_kronecker;
}
     828:	c5 01       	movw	r24, r10
     82a:	a0 96       	adiw	r28, 0x20	; 32
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	cf 90       	pop	r12
     846:	bf 90       	pop	r11
     848:	af 90       	pop	r10
     84a:	9f 90       	pop	r9
     84c:	7f 90       	pop	r7
     84e:	6f 90       	pop	r6
     850:	5f 90       	pop	r5
     852:	4f 90       	pop	r4
     854:	08 95       	ret

00000856 <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     856:	2f 92       	push	r2
     858:	3f 92       	push	r3
     85a:	4f 92       	push	r4
     85c:	5f 92       	push	r5
     85e:	6f 92       	push	r6
     860:	7f 92       	push	r7
     862:	8f 92       	push	r8
     864:	9f 92       	push	r9
     866:	af 92       	push	r10
     868:	bf 92       	push	r11
     86a:	cf 92       	push	r12
     86c:	df 92       	push	r13
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	28 97       	sbiw	r28, 0x08	; 8
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	7c 01       	movw	r14, r24
     88c:	5b 01       	movw	r10, r22
     88e:	4a 01       	movw	r8, r20
     890:	3e 83       	std	Y+6, r19	; 0x06
     892:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     894:	41 30       	cpi	r20, 0x01	; 1
     896:	51 05       	cpc	r21, r1
     898:	09 f4       	brne	.+2      	; 0x89c <_ZN5Gates9kroneckerEP7Complexii+0x46>
     89a:	c8 c0       	rjmp	.+400    	; 0xa2c <_ZN5Gates9kroneckerEP7Complexii+0x1d6>
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     89c:	14 16       	cp	r1, r20
     89e:	15 06       	cpc	r1, r21
     8a0:	0c f0       	brlt	.+2      	; 0x8a4 <_ZN5Gates9kroneckerEP7Complexii+0x4e>
     8a2:	c7 c0       	rjmp	.+398    	; 0xa32 <_ZN5Gates9kroneckerEP7Complexii+0x1dc>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	21 e0       	ldi	r18, 0x01	; 1
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	22 0f       	add	r18, r18
     8ae:	33 1f       	adc	r19, r19
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	88 15       	cp	r24, r8
     8b4:	99 05       	cpc	r25, r9
     8b6:	d1 f7       	brne	.-12     	; 0x8ac <_ZN5Gates9kroneckerEP7Complexii+0x56>
     8b8:	38 87       	std	Y+8, r19	; 0x08
     8ba:	2f 83       	std	Y+7, r18	; 0x07
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     8bc:	c9 01       	movw	r24, r18
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
     8ce:	89 83       	std	Y+1, r24	; 0x01
     8d0:	9a 83       	std	Y+2, r25	; 0x02
	print_states(2*2,vec,"Before: ");
     8d2:	45 e7       	ldi	r20, 0x75	; 117
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	b5 01       	movw	r22, r10
     8d8:	84 e0       	ldi	r24, 0x04	; 4
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	*/
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     8e0:	ef 81       	ldd	r30, Y+7	; 0x07
     8e2:	f8 85       	ldd	r31, Y+8	; 0x08
     8e4:	1e 16       	cp	r1, r30
     8e6:	1f 06       	cpc	r1, r31
     8e8:	0c f4       	brge	.+2      	; 0x8ec <_ZN5Gates9kroneckerEP7Complexii+0x96>
     8ea:	b4 c0       	rjmp	.+360    	; 0xa54 <_ZN5Gates9kroneckerEP7Complexii+0x1fe>
     8ec:	4e c0       	rjmp	.+156    	; 0x98a <_ZN5Gates9kroneckerEP7Complexii+0x134>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     8ee:	4e 16       	cp	r4, r30
     8f0:	5f 06       	cpc	r5, r31
     8f2:	29 f4       	brne	.+10     	; 0x8fe <_ZN5Gates9kroneckerEP7Complexii+0xa8>
     8f4:	ff ef       	ldi	r31, 0xFF	; 255
     8f6:	2f 1a       	sub	r2, r31
     8f8:	3f 0a       	sbc	r3, r31
     8fa:	eb 81       	ldd	r30, Y+3	; 0x03
     8fc:	fc 81       	ldd	r31, Y+4	; 0x04
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     8fe:	7f 01       	movw	r14, r30
     900:	2f ef       	ldi	r18, 0xFF	; 255
     902:	e2 1a       	sub	r14, r18
     904:	f2 0a       	sbc	r15, r18
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	ea 0d       	add	r30, r10
     914:	fb 1d       	adc	r31, r11
     916:	00 81       	ld	r16, Z
     918:	11 81       	ldd	r17, Z+1	; 0x01
     91a:	22 81       	ldd	r18, Z+2	; 0x02
     91c:	33 81       	ldd	r19, Z+3	; 0x03
     91e:	44 81       	ldd	r20, Z+4	; 0x04
     920:	55 81       	ldd	r21, Z+5	; 0x05
     922:	66 81       	ldd	r22, Z+6	; 0x06
     924:	77 81       	ldd	r23, Z+7	; 0x07
     926:	c1 01       	movw	r24, r2
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	8a 0d       	add	r24, r10
     936:	9b 1d       	adc	r25, r11
     938:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     93c:	af 81       	ldd	r26, Y+7	; 0x07
     93e:	b8 85       	ldd	r27, Y+8	; 0x08
     940:	2c 93       	st	X, r18
     942:	11 96       	adiw	r26, 0x01	; 1
     944:	3c 93       	st	X, r19
     946:	11 97       	sbiw	r26, 0x01	; 1
     948:	12 96       	adiw	r26, 0x02	; 2
     94a:	4c 93       	st	X, r20
     94c:	12 97       	sbiw	r26, 0x02	; 2
     94e:	13 96       	adiw	r26, 0x03	; 3
     950:	5c 93       	st	X, r21
     952:	13 97       	sbiw	r26, 0x03	; 3
     954:	14 96       	adiw	r26, 0x04	; 4
     956:	6c 93       	st	X, r22
     958:	14 97       	sbiw	r26, 0x04	; 4
     95a:	15 96       	adiw	r26, 0x05	; 5
     95c:	7c 93       	st	X, r23
     95e:	15 97       	sbiw	r26, 0x05	; 5
     960:	16 96       	adiw	r26, 0x06	; 6
     962:	8c 93       	st	X, r24
     964:	16 97       	sbiw	r26, 0x06	; 6
     966:	17 96       	adiw	r26, 0x07	; 7
     968:	9c 93       	st	X, r25
	*/
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     96a:	bf ef       	ldi	r27, 0xFF	; 255
     96c:	6b 1a       	sub	r6, r27
     96e:	7b 0a       	sbc	r7, r27
     970:	ef 81       	ldd	r30, Y+7	; 0x07
     972:	f8 85       	ldd	r31, Y+8	; 0x08
     974:	38 96       	adiw	r30, 0x08	; 8
     976:	f8 87       	std	Y+8, r31	; 0x08
     978:	ef 83       	std	Y+7, r30	; 0x07
     97a:	6c 14       	cp	r6, r12
     97c:	7d 04       	cpc	r7, r13
     97e:	14 f4       	brge	.+4      	; 0x984 <_ZN5Gates9kroneckerEP7Complexii+0x12e>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     980:	f7 01       	movw	r30, r14
     982:	b5 cf       	rjmp	.-150    	; 0x8ee <_ZN5Gates9kroneckerEP7Complexii+0x98>
     984:	d8 86       	std	Y+8, r13	; 0x08
     986:	cf 82       	std	Y+7, r12	; 0x07
     988:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     98a:	2d 81       	ldd	r18, Y+5	; 0x05
     98c:	3e 81       	ldd	r19, Y+6	; 0x06
     98e:	23 2b       	or	r18, r19
     990:	e9 f5       	brne	.+122    	; 0xa0c <_ZN5Gates9kroneckerEP7Complexii+0x1b6>
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	71 c0       	rjmp	.+226    	; 0xa7a <_ZN5Gates9kroneckerEP7Complexii+0x224>
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     998:	52 01       	movw	r10, r4
     99a:	d2 01       	movw	r26, r4
     99c:	4d 91       	ld	r20, X+
     99e:	5d 91       	ld	r21, X+
     9a0:	6d 91       	ld	r22, X+
     9a2:	7c 91       	ld	r23, X
     9a4:	c7 01       	movw	r24, r14
     9a6:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Gates5touchEd>
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	29 f5       	brne	.+74     	; 0x9f8 <_ZN5Gates9kroneckerEP7Complexii+0x1a2>
     9ae:	98 86       	std	Y+8, r9	; 0x08
     9b0:	8f 82       	std	Y+7, r8	; 0x07
     9b2:	8f 81       	ldd	r24, Y+7	; 0x07
     9b4:	98 85       	ldd	r25, Y+8	; 0x08
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	86 0d       	add	r24, r6
     9c4:	97 1d       	adc	r25, r7
     9c6:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     9c8:	10 82       	st	Z, r1
     9ca:	11 82       	std	Z+1, r1	; 0x01
     9cc:	12 82       	std	Z+2, r1	; 0x02
     9ce:	13 82       	std	Z+3, r1	; 0x03
     9d0:	14 82       	std	Z+4, r1	; 0x04
     9d2:	15 82       	std	Z+5, r1	; 0x05
     9d4:	16 82       	std	Z+6, r1	; 0x06
     9d6:	17 82       	std	Z+7, r1	; 0x07
     9d8:	38 96       	adiw	r30, 0x08	; 8
     9da:	e8 17       	cp	r30, r24
     9dc:	f9 07       	cpc	r31, r25
     9de:	a1 f7       	brne	.-24     	; 0x9c8 <_ZN5Gates9kroneckerEP7Complexii+0x172>
				kronvec[i].re=binary_touch;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e8       	ldi	r26, 0x80	; 128
     9e6:	bf e3       	ldi	r27, 0x3F	; 63
     9e8:	f5 01       	movw	r30, r10
     9ea:	80 83       	st	Z, r24
     9ec:	91 83       	std	Z+1, r25	; 0x01
     9ee:	a2 83       	std	Z+2, r26	; 0x02
     9f0:	b3 83       	std	Z+3, r27	; 0x03
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	9a 81       	ldd	r25, Y+2	; 0x02
     9f6:	41 c0       	rjmp	.+130    	; 0xa7a <_ZN5Gates9kroneckerEP7Complexii+0x224>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     9f8:	ff ef       	ldi	r31, 0xFF	; 255
     9fa:	cf 1a       	sub	r12, r31
     9fc:	df 0a       	sbc	r13, r31
     9fe:	28 e0       	ldi	r18, 0x08	; 8
     a00:	42 0e       	add	r4, r18
     a02:	51 1c       	adc	r5, r1
     a04:	c8 14       	cp	r12, r8
     a06:	d9 04       	cpc	r13, r9
     a08:	39 f6       	brne	.-114    	; 0x998 <_ZN5Gates9kroneckerEP7Complexii+0x142>
     a0a:	06 c0       	rjmp	.+12     	; 0xa18 <_ZN5Gates9kroneckerEP7Complexii+0x1c2>
     a0c:	29 80       	ldd	r2, Y+1	; 0x01
     a0e:	3a 80       	ldd	r3, Y+2	; 0x02
     a10:	00 e0       	ldi	r16, 0x00	; 0
     a12:	10 e0       	ldi	r17, 0x00	; 0
     a14:	8f 80       	ldd	r8, Y+7	; 0x07
     a16:	98 84       	ldd	r9, Y+8	; 0x08
     a18:	18 14       	cp	r1, r8
     a1a:	19 04       	cpc	r1, r9
     a1c:	ec f7       	brge	.-6      	; 0xa18 <_ZN5Gates9kroneckerEP7Complexii+0x1c2>
     a1e:	62 2c       	mov	r6, r2
     a20:	73 2c       	mov	r7, r3
     a22:	42 2c       	mov	r4, r2
     a24:	53 2c       	mov	r5, r3
     a26:	c0 2e       	mov	r12, r16
     a28:	d1 2e       	mov	r13, r17
     a2a:	b6 cf       	rjmp	.-148    	; 0x998 <_ZN5Gates9kroneckerEP7Complexii+0x142>
		}
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     a2c:	86 2f       	mov	r24, r22
     a2e:	9b 2d       	mov	r25, r11
     a30:	24 c0       	rjmp	.+72     	; 0xa7a <_ZN5Gates9kroneckerEP7Complexii+0x224>
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     a32:	88 e0       	ldi	r24, 0x08	; 8
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	9a 83       	std	Y+2, r25	; 0x02
	print_states(2*2,vec,"Before: ");
     a3e:	45 e7       	ldi	r20, 0x75	; 117
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	b5 01       	movw	r22, r10
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	98 87       	std	Y+8, r25	; 0x08
     a52:	8f 83       	std	Y+7, r24	; 0x07
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     a54:	24 01       	movw	r4, r8
     a56:	44 0c       	add	r4, r4
     a58:	55 1c       	adc	r5, r5
     a5a:	c9 80       	ldd	r12, Y+1	; 0x01
     a5c:	da 80       	ldd	r13, Y+2	; 0x02
     a5e:	f4 01       	movw	r30, r8
     a60:	61 2c       	mov	r6, r1
     a62:	71 2c       	mov	r7, r1
     a64:	21 2c       	mov	r2, r1
     a66:	31 2c       	mov	r3, r1
     a68:	8b 82       	std	Y+3, r8	; 0x03
     a6a:	9c 82       	std	Y+4, r9	; 0x04
     a6c:	c6 01       	movw	r24, r12
     a6e:	cf 80       	ldd	r12, Y+7	; 0x07
     a70:	d8 84       	ldd	r13, Y+8	; 0x08
     a72:	47 01       	movw	r8, r14
     a74:	98 87       	std	Y+8, r25	; 0x08
     a76:	8f 83       	std	Y+7, r24	; 0x07
     a78:	3a cf       	rjmp	.-396    	; 0x8ee <_ZN5Gates9kroneckerEP7Complexii+0x98>
				binary_touch=0;
				break;
			}
	}
	return kronvec;
}
     a7a:	28 96       	adiw	r28, 0x08	; 8
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	bf 90       	pop	r11
     a98:	af 90       	pop	r10
     a9a:	9f 90       	pop	r9
     a9c:	8f 90       	pop	r8
     a9e:	7f 90       	pop	r7
     aa0:	6f 90       	pop	r6
     aa2:	5f 90       	pop	r5
     aa4:	4f 90       	pop	r4
     aa6:	3f 90       	pop	r3
     aa8:	2f 90       	pop	r2
     aaa:	08 95       	ret

00000aac <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     aac:	2f 92       	push	r2
     aae:	3f 92       	push	r3
     ab0:	4f 92       	push	r4
     ab2:	5f 92       	push	r5
     ab4:	6f 92       	push	r6
     ab6:	7f 92       	push	r7
     ab8:	8f 92       	push	r8
     aba:	9f 92       	push	r9
     abc:	af 92       	push	r10
     abe:	bf 92       	push	r11
     ac0:	cf 92       	push	r12
     ac2:	df 92       	push	r13
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	28 97       	sbiw	r28, 0x08	; 8
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	9e 83       	std	Y+6, r25	; 0x06
     ae2:	8d 83       	std	Y+5, r24	; 0x05
     ae4:	7a 83       	std	Y+2, r23	; 0x02
     ae6:	69 83       	std	Y+1, r22	; 0x01
     ae8:	04 2f       	mov	r16, r20
     aea:	15 2f       	mov	r17, r21
     aec:	c2 2e       	mov	r12, r18
     aee:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     af0:	cb 01       	movw	r24, r22
     af2:	82 95       	swap	r24
     af4:	92 95       	swap	r25
     af6:	90 7f       	andi	r25, 0xF0	; 240
     af8:	98 27       	eor	r25, r24
     afa:	80 7f       	andi	r24, 0xF0	; 240
     afc:	98 27       	eor	r25, r24
     afe:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
     b02:	8b 83       	std	Y+3, r24	; 0x03
     b04:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     b06:	29 80       	ldd	r2, Y+1	; 0x01
     b08:	3a 80       	ldd	r3, Y+2	; 0x02
     b0a:	22 0c       	add	r2, r2
     b0c:	33 1c       	adc	r3, r3
     b0e:	12 14       	cp	r1, r2
     b10:	13 04       	cpc	r1, r3
     b12:	0c f0       	brlt	.+2      	; 0xb16 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     b14:	ac c0       	rjmp	.+344    	; 0xc6e <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     b16:	a8 2e       	mov	r10, r24
     b18:	b9 2e       	mov	r11, r25
     b1a:	e0 2e       	mov	r14, r16
     b1c:	f1 2e       	mov	r15, r17
     b1e:	0c 2d       	mov	r16, r12
     b20:	1d 2d       	mov	r17, r13
     b22:	81 2c       	mov	r8, r1
     b24:	91 2c       	mov	r9, r1
     b26:	b8 86       	std	Y+8, r11	; 0x08
     b28:	af 82       	std	Y+7, r10	; 0x07
     b2a:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     b2c:	f7 01       	movw	r30, r14
     b2e:	41 90       	ld	r4, Z+
     b30:	51 90       	ld	r5, Z+
     b32:	7f 01       	movw	r14, r30
     b34:	66 24       	eor	r6, r6
     b36:	57 fc       	sbrc	r5, 7
     b38:	60 94       	com	r6
     b3a:	76 2c       	mov	r7, r6
     b3c:	c3 01       	movw	r24, r6
     b3e:	b2 01       	movw	r22, r4
     b40:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__floatsisf>
     b44:	2b ed       	ldi	r18, 0xDB	; 219
     b46:	3f e0       	ldi	r19, 0x0F	; 15
     b48:	49 e4       	ldi	r20, 0x49	; 73
     b4a:	50 e4       	ldi	r21, 0x40	; 64
     b4c:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	44 eb       	ldi	r20, 0xB4	; 180
     b56:	53 e4       	ldi	r21, 0x43	; 67
     b58:	0e 94 37 11 	call	0x226e	; 0x226e <__divsf3>
     b5c:	0e 94 34 11 	call	0x2268	; 0x2268 <cos>
     b60:	ef 81       	ldd	r30, Y+7	; 0x07
     b62:	f8 85       	ldd	r31, Y+8	; 0x08
     b64:	60 83       	st	Z, r22
     b66:	71 83       	std	Z+1, r23	; 0x01
     b68:	82 83       	std	Z+2, r24	; 0x02
     b6a:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     b6c:	c3 01       	movw	r24, r6
     b6e:	b2 01       	movw	r22, r4
     b70:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__floatsisf>
     b74:	2b ed       	ldi	r18, 0xDB	; 219
     b76:	3f e0       	ldi	r19, 0x0F	; 15
     b78:	49 e4       	ldi	r20, 0x49	; 73
     b7a:	50 e4       	ldi	r21, 0x40	; 64
     b7c:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	44 eb       	ldi	r20, 0xB4	; 180
     b86:	53 e4       	ldi	r21, 0x43	; 67
     b88:	0e 94 37 11 	call	0x226e	; 0x226e <__divsf3>
     b8c:	0e 94 ae 13 	call	0x275c	; 0x275c <sin>
     b90:	2b 01       	movw	r4, r22
     b92:	3c 01       	movw	r6, r24
     b94:	58 01       	movw	r10, r16
     b96:	f8 01       	movw	r30, r16
     b98:	61 91       	ld	r22, Z+
     b9a:	71 91       	ld	r23, Z+
     b9c:	8f 01       	movw	r16, r30
     b9e:	88 27       	eor	r24, r24
     ba0:	77 fd       	sbrc	r23, 7
     ba2:	80 95       	com	r24
     ba4:	98 2f       	mov	r25, r24
     ba6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__floatsisf>
     baa:	2b ed       	ldi	r18, 0xDB	; 219
     bac:	3f e0       	ldi	r19, 0x0F	; 15
     bae:	49 e4       	ldi	r20, 0x49	; 73
     bb0:	50 e4       	ldi	r21, 0x40	; 64
     bb2:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	44 e3       	ldi	r20, 0x34	; 52
     bbc:	53 e4       	ldi	r21, 0x43	; 67
     bbe:	0e 94 37 11 	call	0x226e	; 0x226e <__divsf3>
     bc2:	0e 94 34 11 	call	0x2268	; 0x2268 <cos>
     bc6:	9b 01       	movw	r18, r22
     bc8:	ac 01       	movw	r20, r24
     bca:	c3 01       	movw	r24, r6
     bcc:	b2 01       	movw	r22, r4
     bce:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     bd2:	ef 81       	ldd	r30, Y+7	; 0x07
     bd4:	f8 85       	ldd	r31, Y+8	; 0x08
     bd6:	60 87       	std	Z+8, r22	; 0x08
     bd8:	71 87       	std	Z+9, r23	; 0x09
     bda:	82 87       	std	Z+10, r24	; 0x0a
     bdc:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     bde:	f6 01       	movw	r30, r12
     be0:	60 81       	ld	r22, Z
     be2:	71 81       	ldd	r23, Z+1	; 0x01
     be4:	88 27       	eor	r24, r24
     be6:	77 fd       	sbrc	r23, 7
     be8:	80 95       	com	r24
     bea:	98 2f       	mov	r25, r24
     bec:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__floatsisf>
     bf0:	2b ed       	ldi	r18, 0xDB	; 219
     bf2:	3f e0       	ldi	r19, 0x0F	; 15
     bf4:	49 e4       	ldi	r20, 0x49	; 73
     bf6:	50 e4       	ldi	r21, 0x40	; 64
     bf8:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	44 eb       	ldi	r20, 0xB4	; 180
     c02:	53 e4       	ldi	r21, 0x43	; 67
     c04:	0e 94 37 11 	call	0x226e	; 0x226e <__divsf3>
     c08:	0e 94 ae 13 	call	0x275c	; 0x275c <sin>
     c0c:	2b 01       	movw	r4, r22
     c0e:	3c 01       	movw	r6, r24
     c10:	f5 01       	movw	r30, r10
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	88 27       	eor	r24, r24
     c18:	77 fd       	sbrc	r23, 7
     c1a:	80 95       	com	r24
     c1c:	98 2f       	mov	r25, r24
     c1e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__floatsisf>
     c22:	2b ed       	ldi	r18, 0xDB	; 219
     c24:	3f e0       	ldi	r19, 0x0F	; 15
     c26:	49 e4       	ldi	r20, 0x49	; 73
     c28:	50 e4       	ldi	r21, 0x40	; 64
     c2a:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	44 e3       	ldi	r20, 0x34	; 52
     c34:	53 e4       	ldi	r21, 0x43	; 67
     c36:	0e 94 37 11 	call	0x226e	; 0x226e <__divsf3>
     c3a:	0e 94 ae 13 	call	0x275c	; 0x275c <sin>
     c3e:	9b 01       	movw	r18, r22
     c40:	ac 01       	movw	r20, r24
     c42:	c3 01       	movw	r24, r6
     c44:	b2 01       	movw	r22, r4
     c46:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     c4a:	ef 81       	ldd	r30, Y+7	; 0x07
     c4c:	f8 85       	ldd	r31, Y+8	; 0x08
     c4e:	64 87       	std	Z+12, r22	; 0x0c
     c50:	75 87       	std	Z+13, r23	; 0x0d
     c52:	86 87       	std	Z+14, r24	; 0x0e
     c54:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     c56:	f2 e0       	ldi	r31, 0x02	; 2
     c58:	8f 0e       	add	r8, r31
     c5a:	91 1c       	adc	r9, r1
     c5c:	8f 81       	ldd	r24, Y+7	; 0x07
     c5e:	98 85       	ldd	r25, Y+8	; 0x08
     c60:	40 96       	adiw	r24, 0x10	; 16
     c62:	98 87       	std	Y+8, r25	; 0x08
     c64:	8f 83       	std	Y+7, r24	; 0x07
     c66:	82 14       	cp	r8, r2
     c68:	93 04       	cpc	r9, r3
     c6a:	0c f4       	brge	.+2      	; 0xc6e <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     c6c:	5e cf       	rjmp	.-324    	; 0xb2a <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     c6e:	21 e0       	ldi	r18, 0x01	; 1
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	49 81       	ldd	r20, Y+1	; 0x01
     c74:	5a 81       	ldd	r21, Y+2	; 0x02
     c76:	6b 81       	ldd	r22, Y+3	; 0x03
     c78:	7c 81       	ldd	r23, Y+4	; 0x04
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	9e 81       	ldd	r25, Y+6	; 0x06
     c7e:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN5Gates9kroneckerEP7Complexii>
}
     c82:	28 96       	adiw	r28, 0x08	; 8
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	bf 90       	pop	r11
     ca0:	af 90       	pop	r10
     ca2:	9f 90       	pop	r9
     ca4:	8f 90       	pop	r8
     ca6:	7f 90       	pop	r7
     ca8:	6f 90       	pop	r6
     caa:	5f 90       	pop	r5
     cac:	4f 90       	pop	r4
     cae:	3f 90       	pop	r3
     cb0:	2f 90       	pop	r2
     cb2:	08 95       	ret

00000cb4 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	8b 01       	movw	r16, r22
     cc2:	7a 01       	movw	r14, r20
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     cc4:	14 16       	cp	r1, r20
     cc6:	15 06       	cpc	r1, r21
     cc8:	64 f4       	brge	.+24     	; 0xce2 <_ZN5Gates8vec2amplEP7Complexi+0x2e>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	c1 e0       	ldi	r28, 0x01	; 1
     cd0:	d0 e0       	ldi	r29, 0x00	; 0
     cd2:	cc 0f       	add	r28, r28
     cd4:	dd 1f       	adc	r29, r29
     cd6:	2f 5f       	subi	r18, 0xFF	; 255
     cd8:	3f 4f       	sbci	r19, 0xFF	; 255
     cda:	2e 15       	cp	r18, r14
     cdc:	3f 05       	cpc	r19, r15
     cde:	c9 f7       	brne	.-14     	; 0xcd2 <_ZN5Gates8vec2amplEP7Complexi+0x1e>
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <_ZN5Gates8vec2amplEP7Complexi+0x32>
     ce2:	c1 e0       	ldi	r28, 0x01	; 1
     ce4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
}
int * Gates::vec2ampl(Complex * vec,int qb_count){
	int kron_size=custom_pow(2,qb_count);
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     ce6:	22 e0       	ldi	r18, 0x02	; 2
     ce8:	e2 16       	cp	r14, r18
     cea:	f1 04       	cpc	r15, r1
     cec:	2c f0       	brlt	.+10     	; 0xcf8 <_ZN5Gates8vec2amplEP7Complexi+0x44>
     cee:	ae 01       	movw	r20, r28
     cf0:	b8 01       	movw	r22, r16
     cf2:	0e 94 39 03 	call	0x672	; 0x672 <_ZN5Gates17reverse_kroneckerEP7Complexi>
     cf6:	8c 01       	movw	r16, r24
	
	int* newthephi=(int*)malloc(sizeof(int)*(qb_count*2));
     cf8:	c7 01       	movw	r24, r14
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
     d06:	7c 01       	movw	r14, r24
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
     d08:	f8 01       	movw	r30, r16
     d0a:	60 81       	ld	r22, Z
     d0c:	71 81       	ldd	r23, Z+1	; 0x01
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	93 81       	ldd	r25, Z+3	; 0x03
     d12:	0e 94 95 10 	call	0x212a	; 0x212a <acos>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	44 eb       	ldi	r20, 0xB4	; 180
     d1c:	53 e4       	ldi	r21, 0x43	; 67
     d1e:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     d22:	2b ed       	ldi	r18, 0xDB	; 219
     d24:	3f e0       	ldi	r19, 0x0F	; 15
     d26:	49 e4       	ldi	r20, 0x49	; 73
     d28:	50 e4       	ldi	r21, 0x40	; 64
     d2a:	0e 94 37 11 	call	0x226e	; 0x226e <__divsf3>
     d2e:	0e 94 9f 11 	call	0x233e	; 0x233e <__fixsfsi>
     d32:	f7 01       	movw	r30, r14
     d34:	71 83       	std	Z+1, r23	; 0x01
     d36:	60 83       	st	Z, r22
	newthephi[1]=(180*vec[1].arg())/M_PI;
     d38:	c8 01       	movw	r24, r16
     d3a:	08 96       	adiw	r24, 0x08	; 8
     d3c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN7Complex3argEv>
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	44 e3       	ldi	r20, 0x34	; 52
     d46:	53 e4       	ldi	r21, 0x43	; 67
     d48:	0e 94 4b 13 	call	0x2696	; 0x2696 <__mulsf3>
     d4c:	2b ed       	ldi	r18, 0xDB	; 219
     d4e:	3f e0       	ldi	r19, 0x0F	; 15
     d50:	49 e4       	ldi	r20, 0x49	; 73
     d52:	50 e4       	ldi	r21, 0x40	; 64
     d54:	0e 94 37 11 	call	0x226e	; 0x226e <__divsf3>
     d58:	0e 94 9f 11 	call	0x233e	; 0x233e <__fixsfsi>
     d5c:	f7 01       	movw	r30, r14
     d5e:	73 83       	std	Z+3, r23	; 0x03
     d60:	62 83       	std	Z+2, r22	; 0x02
	
	print_states(kron_size,vec,"After: ");
     d62:	4e e7       	ldi	r20, 0x7E	; 126
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	b8 01       	movw	r22, r16
     d68:	ce 01       	movw	r24, r28
     d6a:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     d6e:	c7 01       	movw	r24, r14
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	08 95       	ret

00000d7e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     d7e:	2f 92       	push	r2
     d80:	3f 92       	push	r3
     d82:	4f 92       	push	r4
     d84:	5f 92       	push	r5
     d86:	6f 92       	push	r6
     d88:	7f 92       	push	r7
     d8a:	8f 92       	push	r8
     d8c:	9f 92       	push	r9
     d8e:	af 92       	push	r10
     d90:	bf 92       	push	r11
     d92:	cf 92       	push	r12
     d94:	df 92       	push	r13
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	60 97       	sbiw	r28, 0x10	; 16
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	4b 01       	movw	r8, r22
     db4:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     db6:	80 e1       	ldi	r24, 0x10	; 16
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
     dbe:	38 2e       	mov	r3, r24
     dc0:	29 2e       	mov	r2, r25
     dc2:	c8 2e       	mov	r12, r24
     dc4:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     dc6:	a1 2c       	mov	r10, r1
     dc8:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     dca:	24 01       	movw	r4, r8
     dcc:	88 e0       	ldi	r24, 0x08	; 8
     dce:	48 0e       	add	r4, r24
     dd0:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     dd2:	ce 01       	movw	r24, r28
     dd4:	09 96       	adiw	r24, 0x09	; 9
     dd6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     dda:	75 01       	movw	r14, r10
     ddc:	ee 0c       	add	r14, r14
     dde:	ff 1c       	adc	r15, r15
     de0:	ee 0c       	add	r14, r14
     de2:	ff 1c       	adc	r15, r15
     de4:	ee 0c       	add	r14, r14
     de6:	ff 1c       	adc	r15, r15
     de8:	e6 0c       	add	r14, r6
     dea:	f7 1c       	adc	r15, r7
     dec:	d7 01       	movw	r26, r14
     dee:	0c 91       	ld	r16, X
     df0:	11 96       	adiw	r26, 0x01	; 1
     df2:	1c 91       	ld	r17, X
     df4:	11 97       	sbiw	r26, 0x01	; 1
     df6:	12 96       	adiw	r26, 0x02	; 2
     df8:	2c 91       	ld	r18, X
     dfa:	12 97       	sbiw	r26, 0x02	; 2
     dfc:	13 96       	adiw	r26, 0x03	; 3
     dfe:	3c 91       	ld	r19, X
     e00:	13 97       	sbiw	r26, 0x03	; 3
     e02:	14 96       	adiw	r26, 0x04	; 4
     e04:	4c 91       	ld	r20, X
     e06:	14 97       	sbiw	r26, 0x04	; 4
     e08:	15 96       	adiw	r26, 0x05	; 5
     e0a:	5c 91       	ld	r21, X
     e0c:	15 97       	sbiw	r26, 0x05	; 5
     e0e:	16 96       	adiw	r26, 0x06	; 6
     e10:	6c 91       	ld	r22, X
     e12:	16 97       	sbiw	r26, 0x06	; 6
     e14:	17 96       	adiw	r26, 0x07	; 7
     e16:	7c 91       	ld	r23, X
     e18:	c4 01       	movw	r24, r8
     e1a:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     e1e:	02 2f       	mov	r16, r18
     e20:	13 2f       	mov	r17, r19
     e22:	24 2f       	mov	r18, r20
     e24:	35 2f       	mov	r19, r21
     e26:	46 2f       	mov	r20, r22
     e28:	57 2f       	mov	r21, r23
     e2a:	68 2f       	mov	r22, r24
     e2c:	79 2f       	mov	r23, r25
     e2e:	ce 01       	movw	r24, r28
     e30:	09 96       	adiw	r24, 0x09	; 9
     e32:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     e36:	29 87       	std	Y+9, r18	; 0x09
     e38:	3a 87       	std	Y+10, r19	; 0x0a
     e3a:	4b 87       	std	Y+11, r20	; 0x0b
     e3c:	5c 87       	std	Y+12, r21	; 0x0c
     e3e:	6d 87       	std	Y+13, r22	; 0x0d
     e40:	7e 87       	std	Y+14, r23	; 0x0e
     e42:	8f 87       	std	Y+15, r24	; 0x0f
     e44:	98 8b       	std	Y+16, r25	; 0x10
     e46:	f7 01       	movw	r30, r14
     e48:	70 96       	adiw	r30, 0x10	; 16
     e4a:	d7 01       	movw	r26, r14
     e4c:	50 96       	adiw	r26, 0x10	; 16
     e4e:	0c 91       	ld	r16, X
     e50:	11 81       	ldd	r17, Z+1	; 0x01
     e52:	22 81       	ldd	r18, Z+2	; 0x02
     e54:	33 81       	ldd	r19, Z+3	; 0x03
     e56:	44 81       	ldd	r20, Z+4	; 0x04
     e58:	55 81       	ldd	r21, Z+5	; 0x05
     e5a:	66 81       	ldd	r22, Z+6	; 0x06
     e5c:	77 81       	ldd	r23, Z+7	; 0x07
     e5e:	c2 01       	movw	r24, r4
     e60:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     e64:	02 2f       	mov	r16, r18
     e66:	13 2f       	mov	r17, r19
     e68:	24 2f       	mov	r18, r20
     e6a:	35 2f       	mov	r19, r21
     e6c:	46 2f       	mov	r20, r22
     e6e:	57 2f       	mov	r21, r23
     e70:	68 2f       	mov	r22, r24
     e72:	79 2f       	mov	r23, r25
     e74:	ce 01       	movw	r24, r28
     e76:	09 96       	adiw	r24, 0x09	; 9
     e78:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     e7c:	29 87       	std	Y+9, r18	; 0x09
     e7e:	3a 87       	std	Y+10, r19	; 0x0a
     e80:	4b 87       	std	Y+11, r20	; 0x0b
     e82:	5c 87       	std	Y+12, r21	; 0x0c
     e84:	6d 87       	std	Y+13, r22	; 0x0d
     e86:	7e 87       	std	Y+14, r23	; 0x0e
     e88:	8f 87       	std	Y+15, r24	; 0x0f
     e8a:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     e8c:	89 85       	ldd	r24, Y+9	; 0x09
     e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e90:	ab 85       	ldd	r26, Y+11	; 0x0b
     e92:	bc 85       	ldd	r27, Y+12	; 0x0c
     e94:	f6 01       	movw	r30, r12
     e96:	80 83       	st	Z, r24
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	a2 83       	std	Z+2, r26	; 0x02
     e9c:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea2:	af 85       	ldd	r26, Y+15	; 0x0f
     ea4:	b8 89       	ldd	r27, Y+16	; 0x10
     ea6:	84 83       	std	Z+4, r24	; 0x04
     ea8:	95 83       	std	Z+5, r25	; 0x05
     eaa:	a6 83       	std	Z+6, r26	; 0x06
     eac:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     eae:	ff ef       	ldi	r31, 0xFF	; 255
     eb0:	af 1a       	sub	r10, r31
     eb2:	bf 0a       	sbc	r11, r31
     eb4:	88 e0       	ldi	r24, 0x08	; 8
     eb6:	c8 0e       	add	r12, r24
     eb8:	d1 1c       	adc	r13, r1
     eba:	a2 e0       	ldi	r26, 0x02	; 2
     ebc:	aa 16       	cp	r10, r26
     ebe:	b1 04       	cpc	r11, r1
     ec0:	09 f0       	breq	.+2      	; 0xec4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     ec2:	87 cf       	rjmp	.-242    	; 0xdd2 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     ec4:	83 2d       	mov	r24, r3
     ec6:	92 2d       	mov	r25, r2
     ec8:	60 96       	adiw	r28, 0x10	; 16
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	bf 90       	pop	r11
     ee6:	af 90       	pop	r10
     ee8:	9f 90       	pop	r9
     eea:	8f 90       	pop	r8
     eec:	7f 90       	pop	r7
     eee:	6f 90       	pop	r6
     ef0:	5f 90       	pop	r5
     ef2:	4f 90       	pop	r4
     ef4:	3f 90       	pop	r3
     ef6:	2f 90       	pop	r2
     ef8:	08 95       	ret

00000efa <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     efa:	2f 92       	push	r2
     efc:	3f 92       	push	r3
     efe:	4f 92       	push	r4
     f00:	5f 92       	push	r5
     f02:	6f 92       	push	r6
     f04:	7f 92       	push	r7
     f06:	8f 92       	push	r8
     f08:	9f 92       	push	r9
     f0a:	af 92       	push	r10
     f0c:	bf 92       	push	r11
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	64 97       	sbiw	r28, 0x14	; 20
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	3b 01       	movw	r6, r22
     f30:	e4 2e       	mov	r14, r20
     f32:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     f34:	80 e2       	ldi	r24, 0x20	; 32
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
     f3c:	8b 8b       	std	Y+19, r24	; 0x13
     f3e:	9c 8b       	std	Y+20, r25	; 0x14
     f40:	48 2e       	mov	r4, r24
     f42:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     f44:	81 2c       	mov	r8, r1
     f46:	91 2c       	mov	r9, r1
     f48:	e9 8a       	std	Y+17, r14	; 0x11
     f4a:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     f4c:	21 2c       	mov	r2, r1
     f4e:	31 2c       	mov	r3, r1
     f50:	ce 01       	movw	r24, r28
     f52:	09 96       	adiw	r24, 0x09	; 9
     f54:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN7ComplexC1Ev>
     f58:	c9 88       	ldd	r12, Y+17	; 0x11
     f5a:	da 88       	ldd	r13, Y+18	; 0x12
     f5c:	e2 2c       	mov	r14, r2
     f5e:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     f60:	54 01       	movw	r10, r8
     f62:	aa 0c       	add	r10, r10
     f64:	bb 1c       	adc	r11, r11
     f66:	aa 0c       	add	r10, r10
     f68:	bb 1c       	adc	r11, r11
     f6a:	aa 0c       	add	r10, r10
     f6c:	bb 1c       	adc	r11, r11
     f6e:	f5 01       	movw	r30, r10
     f70:	ec 0d       	add	r30, r12
     f72:	fd 1d       	adc	r31, r13
     f74:	00 81       	ld	r16, Z
     f76:	11 81       	ldd	r17, Z+1	; 0x01
     f78:	22 81       	ldd	r18, Z+2	; 0x02
     f7a:	33 81       	ldd	r19, Z+3	; 0x03
     f7c:	44 81       	ldd	r20, Z+4	; 0x04
     f7e:	55 81       	ldd	r21, Z+5	; 0x05
     f80:	66 81       	ldd	r22, Z+6	; 0x06
     f82:	77 81       	ldd	r23, Z+7	; 0x07
     f84:	c3 01       	movw	r24, r6
     f86:	8e 0d       	add	r24, r14
     f88:	9f 1d       	adc	r25, r15
     f8a:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     f8e:	29 83       	std	Y+1, r18	; 0x01
     f90:	3a 83       	std	Y+2, r19	; 0x02
     f92:	4b 83       	std	Y+3, r20	; 0x03
     f94:	5c 83       	std	Y+4, r21	; 0x04
     f96:	6d 83       	std	Y+5, r22	; 0x05
     f98:	7e 83       	std	Y+6, r23	; 0x06
     f9a:	8f 83       	std	Y+7, r24	; 0x07
     f9c:	98 87       	std	Y+8, r25	; 0x08
     f9e:	02 2f       	mov	r16, r18
     fa0:	13 2f       	mov	r17, r19
     fa2:	24 2f       	mov	r18, r20
     fa4:	35 2f       	mov	r19, r21
     fa6:	46 2f       	mov	r20, r22
     fa8:	57 2f       	mov	r21, r23
     faa:	68 2f       	mov	r22, r24
     fac:	79 2f       	mov	r23, r25
     fae:	ce 01       	movw	r24, r28
     fb0:	09 96       	adiw	r24, 0x09	; 9
     fb2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     fb6:	29 87       	std	Y+9, r18	; 0x09
     fb8:	3a 87       	std	Y+10, r19	; 0x0a
     fba:	4b 87       	std	Y+11, r20	; 0x0b
     fbc:	5c 87       	std	Y+12, r21	; 0x0c
     fbe:	6d 87       	std	Y+13, r22	; 0x0d
     fc0:	7e 87       	std	Y+14, r23	; 0x0e
     fc2:	8f 87       	std	Y+15, r24	; 0x0f
     fc4:	98 8b       	std	Y+16, r25	; 0x10
     fc6:	88 e0       	ldi	r24, 0x08	; 8
     fc8:	e8 0e       	add	r14, r24
     fca:	f1 1c       	adc	r15, r1
     fcc:	e0 e2       	ldi	r30, 0x20	; 32
     fce:	ce 0e       	add	r12, r30
     fd0:	d1 1c       	adc	r13, r1
     fd2:	f0 e2       	ldi	r31, 0x20	; 32
     fd4:	ef 16       	cp	r14, r31
     fd6:	f1 04       	cpc	r15, r1
     fd8:	51 f6       	brne	.-108    	; 0xf6e <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fde:	ab 85       	ldd	r26, Y+11	; 0x0b
     fe0:	bc 85       	ldd	r27, Y+12	; 0x0c
     fe2:	f2 01       	movw	r30, r4
     fe4:	80 83       	st	Z, r24
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	a2 83       	std	Z+2, r26	; 0x02
     fea:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     fec:	8d 85       	ldd	r24, Y+13	; 0x0d
     fee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff0:	af 85       	ldd	r26, Y+15	; 0x0f
     ff2:	b8 89       	ldd	r27, Y+16	; 0x10
     ff4:	84 83       	std	Z+4, r24	; 0x04
     ff6:	95 83       	std	Z+5, r25	; 0x05
     ff8:	a6 83       	std	Z+6, r26	; 0x06
     ffa:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     ffc:	ff ef       	ldi	r31, 0xFF	; 255
     ffe:	8f 1a       	sub	r8, r31
    1000:	9f 0a       	sbc	r9, r31
    1002:	88 e0       	ldi	r24, 0x08	; 8
    1004:	48 0e       	add	r4, r24
    1006:	51 1c       	adc	r5, r1
    1008:	e4 e0       	ldi	r30, 0x04	; 4
    100a:	8e 16       	cp	r8, r30
    100c:	91 04       	cpc	r9, r1
    100e:	09 f0       	breq	.+2      	; 0x1012 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
    1010:	9f cf       	rjmp	.-194    	; 0xf50 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
    1012:	8b 89       	ldd	r24, Y+19	; 0x13
    1014:	9c 89       	ldd	r25, Y+20	; 0x14
    1016:	64 96       	adiw	r28, 0x14	; 20
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	8f 90       	pop	r8
    103a:	7f 90       	pop	r7
    103c:	6f 90       	pop	r6
    103e:	5f 90       	pop	r5
    1040:	4f 90       	pop	r4
    1042:	3f 90       	pop	r3
    1044:	2f 90       	pop	r2
    1046:	08 95       	ret

00001048 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
    1048:	af 92       	push	r10
    104a:	bf 92       	push	r11
    104c:	cf 92       	push	r12
    104e:	df 92       	push	r13
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	a4 97       	sbiw	r28, 0x24	; 36
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	7c 01       	movw	r14, r24
    106e:	5b 01       	movw	r10, r22
    1070:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
    1072:	00 e0       	ldi	r16, 0x00	; 0
    1074:	10 e0       	ldi	r17, 0x00	; 0
    1076:	98 01       	movw	r18, r16
    1078:	b9 01       	movw	r22, r18
    107a:	a8 01       	movw	r20, r16
    107c:	ce 01       	movw	r24, r28
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1084:	00 e0       	ldi	r16, 0x00	; 0
    1086:	10 e0       	ldi	r17, 0x00	; 0
    1088:	98 01       	movw	r18, r16
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	60 e8       	ldi	r22, 0x80	; 128
    1090:	7f e3       	ldi	r23, 0x3F	; 63
    1092:	ce 01       	movw	r24, r28
    1094:	09 96       	adiw	r24, 0x09	; 9
    1096:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    109a:	00 e0       	ldi	r16, 0x00	; 0
    109c:	10 e0       	ldi	r17, 0x00	; 0
    109e:	98 01       	movw	r18, r16
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	60 e8       	ldi	r22, 0x80	; 128
    10a6:	7f e3       	ldi	r23, 0x3F	; 63
    10a8:	ce 01       	movw	r24, r28
    10aa:	41 96       	adiw	r24, 0x11	; 17
    10ac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    10b0:	00 e0       	ldi	r16, 0x00	; 0
    10b2:	10 e0       	ldi	r17, 0x00	; 0
    10b4:	98 01       	movw	r18, r16
    10b6:	b9 01       	movw	r22, r18
    10b8:	a8 01       	movw	r20, r16
    10ba:	ce 01       	movw	r24, r28
    10bc:	49 96       	adiw	r24, 0x19	; 25
    10be:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    10c2:	bc a2       	std	Y+36, r11	; 0x24
    10c4:	ab a2       	std	Y+35, r10	; 0x23
    10c6:	da a2       	std	Y+34, r13	; 0x22
    10c8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix),1);
    10ca:	9e 01       	movw	r18, r28
    10cc:	2f 5d       	subi	r18, 0xDF	; 223
    10ce:	3f 4f       	sbci	r19, 0xFF	; 255
    10d0:	ae 01       	movw	r20, r28
    10d2:	4d 5d       	subi	r20, 0xDD	; 221
    10d4:	5f 4f       	sbci	r21, 0xFF	; 255
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	c7 01       	movw	r24, r14
    10dc:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN5Gates8ampl2vecEiPiS0_>
    10e0:	ae 01       	movw	r20, r28
    10e2:	4f 5f       	subi	r20, 0xFF	; 255
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
    10e6:	bc 01       	movw	r22, r24
    10e8:	c7 01       	movw	r24, r14
    10ea:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	bc 01       	movw	r22, r24
    10f4:	c7 01       	movw	r24, r14
    10f6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    10fa:	a4 96       	adiw	r28, 0x24	; 36
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	df 90       	pop	r13
    1114:	cf 90       	pop	r12
    1116:	bf 90       	pop	r11
    1118:	af 90       	pop	r10
    111a:	08 95       	ret

0000111c <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	a4 97       	sbiw	r28, 0x24	; 36
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	7c 01       	movw	r14, r24
    1142:	5b 01       	movw	r10, r22
    1144:	6a 01       	movw	r12, r20
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
    1146:	00 e0       	ldi	r16, 0x00	; 0
    1148:	10 e0       	ldi	r17, 0x00	; 0
    114a:	98 01       	movw	r18, r16
    114c:	b9 01       	movw	r22, r18
    114e:	a8 01       	movw	r20, r16
    1150:	ce 01       	movw	r24, r28
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1158:	00 e0       	ldi	r16, 0x00	; 0
    115a:	10 e0       	ldi	r17, 0x00	; 0
    115c:	20 e8       	ldi	r18, 0x80	; 128
    115e:	3f eb       	ldi	r19, 0xBF	; 191
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	ba 01       	movw	r22, r20
    1166:	ce 01       	movw	r24, r28
    1168:	09 96       	adiw	r24, 0x09	; 9
    116a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    116e:	00 e0       	ldi	r16, 0x00	; 0
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	20 e8       	ldi	r18, 0x80	; 128
    1174:	3f e3       	ldi	r19, 0x3F	; 63
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	ba 01       	movw	r22, r20
    117c:	ce 01       	movw	r24, r28
    117e:	41 96       	adiw	r24, 0x11	; 17
    1180:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1184:	00 e0       	ldi	r16, 0x00	; 0
    1186:	10 e0       	ldi	r17, 0x00	; 0
    1188:	98 01       	movw	r18, r16
    118a:	b9 01       	movw	r22, r18
    118c:	a8 01       	movw	r20, r16
    118e:	ce 01       	movw	r24, r28
    1190:	49 96       	adiw	r24, 0x19	; 25
    1192:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    1196:	bc a2       	std	Y+36, r11	; 0x24
    1198:	ab a2       	std	Y+35, r10	; 0x23
    119a:	da a2       	std	Y+34, r13	; 0x22
    119c:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),y_matrix),1);
    119e:	9e 01       	movw	r18, r28
    11a0:	2f 5d       	subi	r18, 0xDF	; 223
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	ae 01       	movw	r20, r28
    11a6:	4d 5d       	subi	r20, 0xDD	; 221
    11a8:	5f 4f       	sbci	r21, 0xFF	; 255
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	c7 01       	movw	r24, r14
    11b0:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN5Gates8ampl2vecEiPiS0_>
    11b4:	ae 01       	movw	r20, r28
    11b6:	4f 5f       	subi	r20, 0xFF	; 255
    11b8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ba:	bc 01       	movw	r22, r24
    11bc:	c7 01       	movw	r24, r14
    11be:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	bc 01       	movw	r22, r24
    11c8:	c7 01       	movw	r24, r14
    11ca:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    11ce:	a4 96       	adiw	r28, 0x24	; 36
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	cf 90       	pop	r12
    11ea:	bf 90       	pop	r11
    11ec:	af 90       	pop	r10
    11ee:	08 95       	ret

000011f0 <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    11f0:	af 92       	push	r10
    11f2:	bf 92       	push	r11
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	a4 97       	sbiw	r28, 0x24	; 36
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	7c 01       	movw	r14, r24
    1216:	5b 01       	movw	r10, r22
    1218:	6a 01       	movw	r12, r20
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
    121a:	00 e0       	ldi	r16, 0x00	; 0
    121c:	10 e0       	ldi	r17, 0x00	; 0
    121e:	98 01       	movw	r18, r16
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	60 e8       	ldi	r22, 0x80	; 128
    1226:	7f e3       	ldi	r23, 0x3F	; 63
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1230:	00 e0       	ldi	r16, 0x00	; 0
    1232:	10 e0       	ldi	r17, 0x00	; 0
    1234:	98 01       	movw	r18, r16
    1236:	b9 01       	movw	r22, r18
    1238:	a8 01       	movw	r20, r16
    123a:	ce 01       	movw	r24, r28
    123c:	09 96       	adiw	r24, 0x09	; 9
    123e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1242:	00 e0       	ldi	r16, 0x00	; 0
    1244:	10 e0       	ldi	r17, 0x00	; 0
    1246:	98 01       	movw	r18, r16
    1248:	b9 01       	movw	r22, r18
    124a:	a8 01       	movw	r20, r16
    124c:	ce 01       	movw	r24, r28
    124e:	41 96       	adiw	r24, 0x11	; 17
    1250:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1254:	00 e0       	ldi	r16, 0x00	; 0
    1256:	10 e0       	ldi	r17, 0x00	; 0
    1258:	98 01       	movw	r18, r16
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	60 e8       	ldi	r22, 0x80	; 128
    1260:	7f eb       	ldi	r23, 0xBF	; 191
    1262:	ce 01       	movw	r24, r28
    1264:	49 96       	adiw	r24, 0x19	; 25
    1266:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    126a:	bc a2       	std	Y+36, r11	; 0x24
    126c:	ab a2       	std	Y+35, r10	; 0x23
    126e:	da a2       	std	Y+34, r13	; 0x22
    1270:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),z_matrix),1);
    1272:	9e 01       	movw	r18, r28
    1274:	2f 5d       	subi	r18, 0xDF	; 223
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	ae 01       	movw	r20, r28
    127a:	4d 5d       	subi	r20, 0xDD	; 221
    127c:	5f 4f       	sbci	r21, 0xFF	; 255
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	c7 01       	movw	r24, r14
    1284:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN5Gates8ampl2vecEiPiS0_>
    1288:	ae 01       	movw	r20, r28
    128a:	4f 5f       	subi	r20, 0xFF	; 255
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	bc 01       	movw	r22, r24
    1290:	c7 01       	movw	r24, r14
    1292:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1296:	41 e0       	ldi	r20, 0x01	; 1
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	bc 01       	movw	r22, r24
    129c:	c7 01       	movw	r24, r14
    129e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    12a2:	a4 96       	adiw	r28, 0x24	; 36
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	df 90       	pop	r13
    12bc:	cf 90       	pop	r12
    12be:	bf 90       	pop	r11
    12c0:	af 90       	pop	r10
    12c2:	08 95       	ret

000012c4 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    12c4:	af 92       	push	r10
    12c6:	bf 92       	push	r11
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	a4 97       	sbiw	r28, 0x24	; 36
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	7c 01       	movw	r14, r24
    12ea:	5b 01       	movw	r10, r22
    12ec:	6a 01       	movw	r12, r20
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	98 01       	movw	r18, r16
    12f4:	43 ef       	ldi	r20, 0xF3	; 243
    12f6:	54 e0       	ldi	r21, 0x04	; 4
    12f8:	65 e3       	ldi	r22, 0x35	; 53
    12fa:	7f e3       	ldi	r23, 0x3F	; 63
    12fc:	ce 01       	movw	r24, r28
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	98 01       	movw	r18, r16
    130a:	43 ef       	ldi	r20, 0xF3	; 243
    130c:	54 e0       	ldi	r21, 0x04	; 4
    130e:	65 e3       	ldi	r22, 0x35	; 53
    1310:	7f e3       	ldi	r23, 0x3F	; 63
    1312:	ce 01       	movw	r24, r28
    1314:	09 96       	adiw	r24, 0x09	; 9
    1316:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    131a:	00 e0       	ldi	r16, 0x00	; 0
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	98 01       	movw	r18, r16
    1320:	43 ef       	ldi	r20, 0xF3	; 243
    1322:	54 e0       	ldi	r21, 0x04	; 4
    1324:	65 e3       	ldi	r22, 0x35	; 53
    1326:	7f e3       	ldi	r23, 0x3F	; 63
    1328:	ce 01       	movw	r24, r28
    132a:	41 96       	adiw	r24, 0x11	; 17
    132c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1330:	00 e0       	ldi	r16, 0x00	; 0
    1332:	10 e0       	ldi	r17, 0x00	; 0
    1334:	98 01       	movw	r18, r16
    1336:	43 ef       	ldi	r20, 0xF3	; 243
    1338:	54 e0       	ldi	r21, 0x04	; 4
    133a:	65 e3       	ldi	r22, 0x35	; 53
    133c:	7f eb       	ldi	r23, 0xBF	; 191
    133e:	ce 01       	movw	r24, r28
    1340:	49 96       	adiw	r24, 0x19	; 25
    1342:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    1346:	bc a2       	std	Y+36, r11	; 0x24
    1348:	ab a2       	std	Y+35, r10	; 0x23
    134a:	da a2       	std	Y+34, r13	; 0x22
    134c:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),h_matrix),1);
    134e:	9e 01       	movw	r18, r28
    1350:	2f 5d       	subi	r18, 0xDF	; 223
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	ae 01       	movw	r20, r28
    1356:	4d 5d       	subi	r20, 0xDD	; 221
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	c7 01       	movw	r24, r14
    1360:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN5Gates8ampl2vecEiPiS0_>
    1364:	ae 01       	movw	r20, r28
    1366:	4f 5f       	subi	r20, 0xFF	; 255
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	bc 01       	movw	r22, r24
    136c:	c7 01       	movw	r24, r14
    136e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	bc 01       	movw	r22, r24
    1378:	c7 01       	movw	r24, r14
    137a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    137e:	a4 96       	adiw	r28, 0x24	; 36
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	bf 90       	pop	r11
    139c:	af 90       	pop	r10
    139e:	08 95       	ret

000013a0 <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    13a0:	af 92       	push	r10
    13a2:	bf 92       	push	r11
    13a4:	cf 92       	push	r12
    13a6:	df 92       	push	r13
    13a8:	ef 92       	push	r14
    13aa:	ff 92       	push	r15
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	a4 97       	sbiw	r28, 0x24	; 36
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	7c 01       	movw	r14, r24
    13c6:	5b 01       	movw	r10, r22
    13c8:	6a 01       	movw	r12, r20
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
    13ca:	00 e0       	ldi	r16, 0x00	; 0
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	98 01       	movw	r18, r16
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	60 e8       	ldi	r22, 0x80	; 128
    13d6:	7f e3       	ldi	r23, 0x3F	; 63
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    13e0:	00 e0       	ldi	r16, 0x00	; 0
    13e2:	10 e0       	ldi	r17, 0x00	; 0
    13e4:	98 01       	movw	r18, r16
    13e6:	b9 01       	movw	r22, r18
    13e8:	a8 01       	movw	r20, r16
    13ea:	ce 01       	movw	r24, r28
    13ec:	09 96       	adiw	r24, 0x09	; 9
    13ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    13f2:	00 e0       	ldi	r16, 0x00	; 0
    13f4:	10 e0       	ldi	r17, 0x00	; 0
    13f6:	98 01       	movw	r18, r16
    13f8:	b9 01       	movw	r22, r18
    13fa:	a8 01       	movw	r20, r16
    13fc:	ce 01       	movw	r24, r28
    13fe:	41 96       	adiw	r24, 0x11	; 17
    1400:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1404:	00 e0       	ldi	r16, 0x00	; 0
    1406:	10 e0       	ldi	r17, 0x00	; 0
    1408:	20 e8       	ldi	r18, 0x80	; 128
    140a:	3f e3       	ldi	r19, 0x3F	; 63
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	ba 01       	movw	r22, r20
    1412:	ce 01       	movw	r24, r28
    1414:	49 96       	adiw	r24, 0x19	; 25
    1416:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    141a:	bc a2       	std	Y+36, r11	; 0x24
    141c:	ab a2       	std	Y+35, r10	; 0x23
    141e:	da a2       	std	Y+34, r13	; 0x22
    1420:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),s_matrix),1);
    1422:	9e 01       	movw	r18, r28
    1424:	2f 5d       	subi	r18, 0xDF	; 223
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
    1428:	ae 01       	movw	r20, r28
    142a:	4d 5d       	subi	r20, 0xDD	; 221
    142c:	5f 4f       	sbci	r21, 0xFF	; 255
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	c7 01       	movw	r24, r14
    1434:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN5Gates8ampl2vecEiPiS0_>
    1438:	ae 01       	movw	r20, r28
    143a:	4f 5f       	subi	r20, 0xFF	; 255
    143c:	5f 4f       	sbci	r21, 0xFF	; 255
    143e:	bc 01       	movw	r22, r24
    1440:	c7 01       	movw	r24, r14
    1442:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1446:	41 e0       	ldi	r20, 0x01	; 1
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	bc 01       	movw	r22, r24
    144c:	c7 01       	movw	r24, r14
    144e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1452:	a4 96       	adiw	r28, 0x24	; 36
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	df 90       	pop	r13
    146c:	cf 90       	pop	r12
    146e:	bf 90       	pop	r11
    1470:	af 90       	pop	r10
    1472:	08 95       	ret

00001474 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    1474:	af 92       	push	r10
    1476:	bf 92       	push	r11
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	a4 97       	sbiw	r28, 0x24	; 36
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	7c 01       	movw	r14, r24
    149a:	5b 01       	movw	r10, r22
    149c:	6a 01       	movw	r12, r20
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    149e:	00 e0       	ldi	r16, 0x00	; 0
    14a0:	10 e0       	ldi	r17, 0x00	; 0
    14a2:	98 01       	movw	r18, r16
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	60 e8       	ldi	r22, 0x80	; 128
    14aa:	7f e3       	ldi	r23, 0x3F	; 63
    14ac:	ce 01       	movw	r24, r28
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    14b4:	00 e0       	ldi	r16, 0x00	; 0
    14b6:	10 e0       	ldi	r17, 0x00	; 0
    14b8:	98 01       	movw	r18, r16
    14ba:	b9 01       	movw	r22, r18
    14bc:	a8 01       	movw	r20, r16
    14be:	ce 01       	movw	r24, r28
    14c0:	09 96       	adiw	r24, 0x09	; 9
    14c2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    14c6:	00 e0       	ldi	r16, 0x00	; 0
    14c8:	10 e0       	ldi	r17, 0x00	; 0
    14ca:	98 01       	movw	r18, r16
    14cc:	b9 01       	movw	r22, r18
    14ce:	a8 01       	movw	r20, r16
    14d0:	ce 01       	movw	r24, r28
    14d2:	41 96       	adiw	r24, 0x11	; 17
    14d4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    14d8:	03 ef       	ldi	r16, 0xF3	; 243
    14da:	14 e0       	ldi	r17, 0x04	; 4
    14dc:	25 e3       	ldi	r18, 0x35	; 53
    14de:	3f e3       	ldi	r19, 0x3F	; 63
    14e0:	b9 01       	movw	r22, r18
    14e2:	a8 01       	movw	r20, r16
    14e4:	ce 01       	movw	r24, r28
    14e6:	49 96       	adiw	r24, 0x19	; 25
    14e8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    14ec:	bc a2       	std	Y+36, r11	; 0x24
    14ee:	ab a2       	std	Y+35, r10	; 0x23
    14f0:	da a2       	std	Y+34, r13	; 0x22
    14f2:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),t_matrix),1);
    14f4:	9e 01       	movw	r18, r28
    14f6:	2f 5d       	subi	r18, 0xDF	; 223
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	ae 01       	movw	r20, r28
    14fc:	4d 5d       	subi	r20, 0xDD	; 221
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	c7 01       	movw	r24, r14
    1506:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN5Gates8ampl2vecEiPiS0_>
    150a:	ae 01       	movw	r20, r28
    150c:	4f 5f       	subi	r20, 0xFF	; 255
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	bc 01       	movw	r22, r24
    1512:	c7 01       	movw	r24, r14
    1514:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	bc 01       	movw	r22, r24
    151e:	c7 01       	movw	r24, r14
    1520:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    1524:	a4 96       	adiw	r28, 0x24	; 36
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	cf 90       	pop	r12
    1540:	bf 90       	pop	r11
    1542:	af 90       	pop	r10
    1544:	08 95       	ret

00001546 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    1546:	6f 92       	push	r6
    1548:	7f 92       	push	r7
    154a:	8f 92       	push	r8
    154c:	9f 92       	push	r9
    154e:	af 92       	push	r10
    1550:	bf 92       	push	r11
    1552:	cf 92       	push	r12
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	c8 58       	subi	r28, 0x88	; 136
    1568:	d1 09       	sbc	r29, r1
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	7c 01       	movw	r14, r24
    1576:	3b 01       	movw	r6, r22
    1578:	5a 01       	movw	r10, r20
    157a:	49 01       	movw	r8, r18
    157c:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    157e:	00 e0       	ldi	r16, 0x00	; 0
    1580:	10 e0       	ldi	r17, 0x00	; 0
    1582:	98 01       	movw	r18, r16
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	60 e8       	ldi	r22, 0x80	; 128
    158a:	7f e3       	ldi	r23, 0x3F	; 63
    158c:	ce 01       	movw	r24, r28
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1594:	00 e0       	ldi	r16, 0x00	; 0
    1596:	10 e0       	ldi	r17, 0x00	; 0
    1598:	98 01       	movw	r18, r16
    159a:	b9 01       	movw	r22, r18
    159c:	a8 01       	movw	r20, r16
    159e:	ce 01       	movw	r24, r28
    15a0:	09 96       	adiw	r24, 0x09	; 9
    15a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15a6:	00 e0       	ldi	r16, 0x00	; 0
    15a8:	10 e0       	ldi	r17, 0x00	; 0
    15aa:	98 01       	movw	r18, r16
    15ac:	b9 01       	movw	r22, r18
    15ae:	a8 01       	movw	r20, r16
    15b0:	ce 01       	movw	r24, r28
    15b2:	41 96       	adiw	r24, 0x11	; 17
    15b4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15b8:	00 e0       	ldi	r16, 0x00	; 0
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	98 01       	movw	r18, r16
    15be:	b9 01       	movw	r22, r18
    15c0:	a8 01       	movw	r20, r16
    15c2:	ce 01       	movw	r24, r28
    15c4:	49 96       	adiw	r24, 0x19	; 25
    15c6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15ca:	00 e0       	ldi	r16, 0x00	; 0
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	98 01       	movw	r18, r16
    15d0:	b9 01       	movw	r22, r18
    15d2:	a8 01       	movw	r20, r16
    15d4:	ce 01       	movw	r24, r28
    15d6:	81 96       	adiw	r24, 0x21	; 33
    15d8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15dc:	00 e0       	ldi	r16, 0x00	; 0
    15de:	10 e0       	ldi	r17, 0x00	; 0
    15e0:	98 01       	movw	r18, r16
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	60 e8       	ldi	r22, 0x80	; 128
    15e8:	7f e3       	ldi	r23, 0x3F	; 63
    15ea:	ce 01       	movw	r24, r28
    15ec:	89 96       	adiw	r24, 0x29	; 41
    15ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15f2:	00 e0       	ldi	r16, 0x00	; 0
    15f4:	10 e0       	ldi	r17, 0x00	; 0
    15f6:	98 01       	movw	r18, r16
    15f8:	b9 01       	movw	r22, r18
    15fa:	a8 01       	movw	r20, r16
    15fc:	ce 01       	movw	r24, r28
    15fe:	c1 96       	adiw	r24, 0x31	; 49
    1600:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1604:	00 e0       	ldi	r16, 0x00	; 0
    1606:	10 e0       	ldi	r17, 0x00	; 0
    1608:	98 01       	movw	r18, r16
    160a:	b9 01       	movw	r22, r18
    160c:	a8 01       	movw	r20, r16
    160e:	ce 01       	movw	r24, r28
    1610:	c9 96       	adiw	r24, 0x39	; 57
    1612:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1616:	00 e0       	ldi	r16, 0x00	; 0
    1618:	10 e0       	ldi	r17, 0x00	; 0
    161a:	98 01       	movw	r18, r16
    161c:	b9 01       	movw	r22, r18
    161e:	a8 01       	movw	r20, r16
    1620:	ce 01       	movw	r24, r28
    1622:	8f 5b       	subi	r24, 0xBF	; 191
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    162a:	00 e0       	ldi	r16, 0x00	; 0
    162c:	10 e0       	ldi	r17, 0x00	; 0
    162e:	98 01       	movw	r18, r16
    1630:	b9 01       	movw	r22, r18
    1632:	a8 01       	movw	r20, r16
    1634:	ce 01       	movw	r24, r28
    1636:	87 5b       	subi	r24, 0xB7	; 183
    1638:	9f 4f       	sbci	r25, 0xFF	; 255
    163a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    163e:	00 e0       	ldi	r16, 0x00	; 0
    1640:	10 e0       	ldi	r17, 0x00	; 0
    1642:	98 01       	movw	r18, r16
    1644:	b9 01       	movw	r22, r18
    1646:	a8 01       	movw	r20, r16
    1648:	ce 01       	movw	r24, r28
    164a:	8f 5a       	subi	r24, 0xAF	; 175
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1652:	00 e0       	ldi	r16, 0x00	; 0
    1654:	10 e0       	ldi	r17, 0x00	; 0
    1656:	98 01       	movw	r18, r16
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	60 e8       	ldi	r22, 0x80	; 128
    165e:	7f e3       	ldi	r23, 0x3F	; 63
    1660:	ce 01       	movw	r24, r28
    1662:	87 5a       	subi	r24, 0xA7	; 167
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    166a:	00 e0       	ldi	r16, 0x00	; 0
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	98 01       	movw	r18, r16
    1670:	b9 01       	movw	r22, r18
    1672:	a8 01       	movw	r20, r16
    1674:	ce 01       	movw	r24, r28
    1676:	8f 59       	subi	r24, 0x9F	; 159
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    167e:	00 e0       	ldi	r16, 0x00	; 0
    1680:	10 e0       	ldi	r17, 0x00	; 0
    1682:	98 01       	movw	r18, r16
    1684:	b9 01       	movw	r22, r18
    1686:	a8 01       	movw	r20, r16
    1688:	ce 01       	movw	r24, r28
    168a:	87 59       	subi	r24, 0x97	; 151
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1692:	00 e0       	ldi	r16, 0x00	; 0
    1694:	10 e0       	ldi	r17, 0x00	; 0
    1696:	98 01       	movw	r18, r16
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	60 e8       	ldi	r22, 0x80	; 128
    169e:	7f e3       	ldi	r23, 0x3F	; 63
    16a0:	ce 01       	movw	r24, r28
    16a2:	8f 58       	subi	r24, 0x8F	; 143
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    16aa:	00 e0       	ldi	r16, 0x00	; 0
    16ac:	10 e0       	ldi	r17, 0x00	; 0
    16ae:	98 01       	movw	r18, r16
    16b0:	b9 01       	movw	r22, r18
    16b2:	a8 01       	movw	r20, r16
    16b4:	ce 01       	movw	r24, r28
    16b6:	87 58       	subi	r24, 0x87	; 135
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
    16be:	cb 57       	subi	r28, 0x7B	; 123
    16c0:	df 4f       	sbci	r29, 0xFF	; 255
    16c2:	79 82       	std	Y+1, r7	; 0x01
    16c4:	68 82       	st	Y, r6
    16c6:	c5 58       	subi	r28, 0x85	; 133
    16c8:	d0 40       	sbci	r29, 0x00	; 0
    16ca:	c9 57       	subi	r28, 0x79	; 121
    16cc:	df 4f       	sbci	r29, 0xFF	; 255
    16ce:	99 82       	std	Y+1, r9	; 0x01
    16d0:	88 82       	st	Y, r8
    16d2:	c7 58       	subi	r28, 0x87	; 135
    16d4:	d0 40       	sbci	r29, 0x00	; 0
    16d6:	cf 57       	subi	r28, 0x7F	; 127
    16d8:	df 4f       	sbci	r29, 0xFF	; 255
    16da:	b9 82       	std	Y+1, r11	; 0x01
    16dc:	a8 82       	st	Y, r10
    16de:	c1 58       	subi	r28, 0x81	; 129
    16e0:	d0 40       	sbci	r29, 0x00	; 0
    16e2:	cd 57       	subi	r28, 0x7D	; 125
    16e4:	df 4f       	sbci	r29, 0xFF	; 255
    16e6:	d9 82       	std	Y+1, r13	; 0x01
    16e8:	c8 82       	st	Y, r12
    16ea:	c3 58       	subi	r28, 0x83	; 131
    16ec:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix),2);
    16ee:	9e 01       	movw	r18, r28
    16f0:	2f 57       	subi	r18, 0x7F	; 127
    16f2:	3f 4f       	sbci	r19, 0xFF	; 255
    16f4:	ae 01       	movw	r20, r28
    16f6:	4b 57       	subi	r20, 0x7B	; 123
    16f8:	5f 4f       	sbci	r21, 0xFF	; 255
    16fa:	62 e0       	ldi	r22, 0x02	; 2
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	c7 01       	movw	r24, r14
    1700:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN5Gates8ampl2vecEiPiS0_>
    1704:	ae 01       	movw	r20, r28
    1706:	4f 5f       	subi	r20, 0xFF	; 255
    1708:	5f 4f       	sbci	r21, 0xFF	; 255
    170a:	bc 01       	movw	r22, r24
    170c:	c7 01       	movw	r24, r14
    170e:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1712:	42 e0       	ldi	r20, 0x02	; 2
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	bc 01       	movw	r22, r24
    1718:	c7 01       	movw	r24, r14
    171a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <_ZN5Gates8vec2amplEP7Complexi>
}
    171e:	c8 57       	subi	r28, 0x78	; 120
    1720:	df 4f       	sbci	r29, 0xFF	; 255
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	bf 90       	pop	r11
    173e:	af 90       	pop	r10
    1740:	9f 90       	pop	r9
    1742:	8f 90       	pop	r8
    1744:	7f 90       	pop	r7
    1746:	6f 90       	pop	r6
    1748:	08 95       	ret

0000174a <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}

Serial s;
    174a:	81 ec       	ldi	r24, 0xC1	; 193
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN6SerialC1Ev>
    1752:	08 95       	ret

00001754 <main>:
#include "qepu.h"
int main(void){
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	00 d0       	rcall	.+0      	; 0x175a <main+0x6>
    175a:	00 d0       	rcall	.+0      	; 0x175c <main+0x8>
    175c:	00 d0       	rcall	.+0      	; 0x175e <main+0xa>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN4QEPUC1Ev>
	qepu.run();
    176a:	ce 01       	movw	r24, r28
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN4QEPU3runEv>
    1772:	ff cf       	rjmp	.-2      	; 0x1772 <main+0x1e>

00001774 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	ec 01       	movw	r28, r24
    177a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN6EEPromC1Ev>
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN6SerialC1Ev>
    1786:	ce 01       	movw	r24, r28
    1788:	05 96       	adiw	r24, 0x05	; 5
    178a:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN5GatesC1Ev>
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	8a bb       	out	0x1a, r24	; 26
    1792:	1c 82       	std	Y+4, r1	; 0x04
    1794:	1b 82       	std	Y+3, r1	; 0x03
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    179c:	7b b3       	in	r23, 0x1b	; 27
    179e:	21 e0       	ldi	r18, 0x01	; 1
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	c9 01       	movw	r24, r18
    17a4:	06 2e       	mov	r0, r22
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <_ZN4QEPU10setctrlpinEii+0x10>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	0a 94       	dec	r0
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <_ZN4QEPU10setctrlpinEii+0xc>
    17b0:	80 95       	com	r24
    17b2:	87 23       	and	r24, r23
    17b4:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    17b6:	8b b3       	in	r24, 0x1b	; 27
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <_ZN4QEPU10setctrlpinEii+0x22>
    17ba:	44 0f       	add	r20, r20
    17bc:	55 1f       	adc	r21, r21
    17be:	6a 95       	dec	r22
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <_ZN4QEPU10setctrlpinEii+0x1e>
    17c2:	48 2b       	or	r20, r24
    17c4:	4b bb       	out	0x1b, r20	; 27
    17c6:	08 95       	ret

000017c8 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    17d2:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    17d4:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    17d6:	64 e0       	ldi	r22, 0x04	; 4
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	ce 01       	movw	r24, r28
    17dc:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	66 e0       	ldi	r22, 0x06	; 6
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	ce 01       	movw	r24, r28
    17ea:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	66 e0       	ldi	r22, 0x06	; 6
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	ce 01       	movw	r24, r28
    17f8:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    17fc:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	ec 01       	movw	r28, r24
    180e:	8a 01       	movw	r16, r20
	DDRB=0x00;
    1810:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    1812:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    1814:	41 e0       	ldi	r20, 0x01	; 1
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	65 e0       	ldi	r22, 0x05	; 5
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    1820:	a8 01       	movw	r20, r16
    1822:	64 e0       	ldi	r22, 0x04	; 4
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	ce 01       	movw	r24, r28
    1828:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    182c:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    182e:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    1830:	9f ef       	ldi	r25, 0xFF	; 255
    1832:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	08 95       	ret

00001840 <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    1840:	6f 92       	push	r6
    1842:	7f 92       	push	r7
    1844:	8f 92       	push	r8
    1846:	9f 92       	push	r9
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	6c 01       	movw	r12, r24
	serial.writestrln("");
    185e:	8c 01       	movw	r16, r24
    1860:	0f 5f       	subi	r16, 0xFF	; 255
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
    1864:	6f ea       	ldi	r22, 0xAF	; 175
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	c8 01       	movw	r24, r16
    186a:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    186e:	66 e8       	ldi	r22, 0x86	; 134
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	c8 01       	movw	r24, r16
    1874:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    1878:	c0 e0       	ldi	r28, 0x00	; 0
    187a:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    187c:	0f 2e       	mov	r0, r31
    187e:	f0 ea       	ldi	r31, 0xA0	; 160
    1880:	ef 2e       	mov	r14, r31
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	ff 2e       	mov	r15, r31
    1886:	f0 2d       	mov	r31, r0
    1888:	83 e0       	ldi	r24, 0x03	; 3
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
    1890:	88 2e       	mov	r8, r24
    1892:	99 2e       	mov	r9, r25
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	be 01       	movw	r22, r28
    189a:	c6 01       	movw	r24, r12
    189c:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    18a0:	9f 93       	push	r25
    18a2:	8f 93       	push	r24
    18a4:	ff 92       	push	r15
    18a6:	ef 92       	push	r14
    18a8:	9f 92       	push	r9
    18aa:	8f 92       	push	r8
    18ac:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
    18b8:	a8 2e       	mov	r10, r24
    18ba:	b9 2e       	mov	r11, r25
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	be 01       	movw	r22, r28
    18c2:	c6 01       	movw	r24, r12
    18c4:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    18c8:	9f 93       	push	r25
    18ca:	8f 93       	push	r24
    18cc:	ff 92       	push	r15
    18ce:	ef 92       	push	r14
    18d0:	bf 92       	push	r11
    18d2:	af 92       	push	r10
    18d4:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
    18e0:	68 2e       	mov	r6, r24
    18e2:	79 2e       	mov	r7, r25
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	ff 92       	push	r15
    18ea:	ef 92       	push	r14
    18ec:	7f 92       	push	r7
    18ee:	6f 92       	push	r6
    18f0:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    18f4:	63 ea       	ldi	r22, 0xA3	; 163
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	c8 01       	movw	r24, r16
    18fa:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6Serial8writestrEPc>
    18fe:	66 2d       	mov	r22, r6
    1900:	77 2d       	mov	r23, r7
    1902:	c8 01       	movw	r24, r16
    1904:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6Serial8writestrEPc>
    1908:	65 ea       	ldi	r22, 0xA5	; 165
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	c8 01       	movw	r24, r16
    190e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    1912:	68 2d       	mov	r22, r8
    1914:	79 2d       	mov	r23, r9
    1916:	c8 01       	movw	r24, r16
    1918:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    191c:	60 eb       	ldi	r22, 0xB0	; 176
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	c8 01       	movw	r24, r16
    1922:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    1926:	6a 2d       	mov	r22, r10
    1928:	7b 2d       	mov	r23, r11
    192a:	c8 01       	movw	r24, r16
    192c:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    1930:	21 96       	adiw	r28, 0x01	; 1
    1932:	8d b7       	in	r24, 0x3d	; 61
    1934:	9e b7       	in	r25, 0x3e	; 62
    1936:	42 96       	adiw	r24, 0x12	; 18
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	9e bf       	out	0x3e, r25	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	8d bf       	out	0x3d, r24	; 61
    1942:	c4 30       	cpi	r28, 0x04	; 4
    1944:	d1 05       	cpc	r29, r1
    1946:	09 f0       	breq	.+2      	; 0x194a <_ZN4QEPU7dumpmemEv+0x10a>
    1948:	9f cf       	rjmp	.-194    	; 0x1888 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	ff 90       	pop	r15
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	bf 90       	pop	r11
    195c:	af 90       	pop	r10
    195e:	9f 90       	pop	r9
    1960:	8f 90       	pop	r8
    1962:	7f 90       	pop	r7
    1964:	6f 90       	pop	r6
    1966:	08 95       	ret

00001968 <_ZN4QEPU5Utils10int2binstrEii>:

char * QEPU::Utils::int2binstr(int num,int strlength){
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	06 2f       	mov	r16, r22
    1972:	17 2f       	mov	r17, r23
    1974:	ea 01       	movw	r28, r20
    char * str = (char*)malloc(strlength + 1);
    1976:	ca 01       	movw	r24, r20
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
    if(!str) return NULL;
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	b9 f0       	breq	.+46     	; 0x19b0 <_ZN4QEPU5Utils10int2binstrEii+0x48>
    str[strlength] = 0;
    1982:	fc 01       	movw	r30, r24
    1984:	ec 0f       	add	r30, r28
    1986:	fd 1f       	adc	r31, r29
    1988:	10 82       	st	Z, r1

    // type punning because signed shift is implementation-defined
    unsigned u = *(unsigned *)&num;
    198a:	20 2f       	mov	r18, r16
    198c:	31 2f       	mov	r19, r17
    for(; strlength--; u >>= 1)
    198e:	be 01       	movw	r22, r28
    1990:	61 50       	subi	r22, 0x01	; 1
    1992:	71 09       	sbc	r23, r1
    1994:	cd 2b       	or	r28, r29
    1996:	71 f0       	breq	.+28     	; 0x19b4 <_ZN4QEPU5Utils10int2binstrEii+0x4c>
    str[strlength] = u & 1 ? '1' : '0';
    1998:	20 ff       	sbrs	r18, 0
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <_ZN4QEPU5Utils10int2binstrEii+0x38>
    199c:	41 e3       	ldi	r20, 0x31	; 49
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <_ZN4QEPU5Utils10int2binstrEii+0x3a>
    19a0:	40 e3       	ldi	r20, 0x30	; 48
    19a2:	42 93       	st	-Z, r20
    if(!str) return NULL;
    str[strlength] = 0;

    // type punning because signed shift is implementation-defined
    unsigned u = *(unsigned *)&num;
    for(; strlength--; u >>= 1)
    19a4:	36 95       	lsr	r19
    19a6:	27 95       	ror	r18
    19a8:	61 50       	subi	r22, 0x01	; 1
    19aa:	71 09       	sbc	r23, r1
    19ac:	a8 f7       	brcc	.-22     	; 0x1998 <_ZN4QEPU5Utils10int2binstrEii+0x30>
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <_ZN4QEPU5Utils10int2binstrEii+0x4c>
	}
}

char * QEPU::Utils::int2binstr(int num,int strlength){
    char * str = (char*)malloc(strlength + 1);
    if(!str) return NULL;
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    unsigned u = *(unsigned *)&num;
    for(; strlength--; u >>= 1)
    str[strlength] = u & 1 ? '1' : '0';

    return str;
}
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	08 95       	ret

000019be <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    19be:	cf 92       	push	r12
    19c0:	df 92       	push	r13
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	d6 2f       	mov	r29, r22
    19d0:	c7 2f       	mov	r28, r23
    19d2:	e6 2f       	mov	r30, r22
    19d4:	f7 2f       	mov	r31, r23
	int c_length=0;
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    19da:	21 91       	ld	r18, Z+
    19dc:	2f 3f       	cpi	r18, 0xFF	; 255
    19de:	89 f4       	brne	.+34     	; 0x1a02 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    19e0:	df 01       	movw	r26, r30
    19e2:	12 97       	sbiw	r26, 0x02	; 2
    19e4:	4c 91       	ld	r20, X
    19e6:	4f 3f       	cpi	r20, 0xFF	; 255
    19e8:	61 f4       	brne	.+24     	; 0x1a02 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    19ea:	11 97       	sbiw	r26, 0x01	; 1
    19ec:	4c 91       	ld	r20, X
    19ee:	4f 3f       	cpi	r20, 0xFF	; 255
    19f0:	41 f4       	brne	.+16     	; 0x1a02 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    19f2:	11 97       	sbiw	r26, 0x01	; 1
    19f4:	4c 91       	ld	r20, X
    19f6:	4f 3f       	cpi	r20, 0xFF	; 255
    19f8:	21 f4       	brne	.+8      	; 0x1a02 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    19fa:	11 97       	sbiw	r26, 0x01	; 1
    19fc:	2c 91       	ld	r18, X
    19fe:	2f 3f       	cpi	r18, 0xFF	; 255
    1a00:	11 f0       	breq	.+4      	; 0x1a06 <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	ea cf       	rjmp	.-44     	; 0x19da <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    1a06:	8c 01       	movw	r16, r24
    1a08:	04 50       	subi	r16, 0x04	; 4
    1a0a:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    1a0c:	6c 01       	movw	r12, r24
    1a0e:	2f ef       	ldi	r18, 0xFF	; 255
    1a10:	c2 1a       	sub	r12, r18
    1a12:	d2 0a       	sbc	r13, r18
    1a14:	76 01       	movw	r14, r12
    1a16:	ee 0c       	add	r14, r14
    1a18:	ff 1c       	adc	r15, r15
    1a1a:	c7 01       	movw	r24, r14
    1a1c:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    1a20:	10 16       	cp	r1, r16
    1a22:	11 06       	cpc	r1, r17
    1a24:	74 f4       	brge	.+28     	; 0x1a42 <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    1a26:	dc 01       	movw	r26, r24
    1a28:	ed 2f       	mov	r30, r29
    1a2a:	fc 2f       	mov	r31, r28
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	41 91       	ld	r20, Z+
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	4d 93       	st	X+, r20
    1a36:	5d 93       	st	X+, r21
    1a38:	2f 5f       	subi	r18, 0xFF	; 255
    1a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3c:	20 17       	cp	r18, r16
    1a3e:	31 07       	cpc	r19, r17
    1a40:	bc f3       	brlt	.-18     	; 0x1a30 <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    1a42:	0c 15       	cp	r16, r12
    1a44:	1d 05       	cpc	r17, r13
    1a46:	7c f4       	brge	.+30     	; 0x1a66 <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    1a48:	f7 01       	movw	r30, r14
    1a4a:	3a 97       	sbiw	r30, 0x0a	; 10
    1a4c:	e8 0f       	add	r30, r24
    1a4e:	f9 1f       	adc	r31, r25
    1a50:	25 e0       	ldi	r18, 0x05	; 5
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4f ef       	ldi	r20, 0xFF	; 255
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	41 93       	st	Z+, r20
    1a5a:	51 93       	st	Z+, r21
    1a5c:	21 50       	subi	r18, 0x01	; 1
    1a5e:	31 09       	sbc	r19, r1
    1a60:	21 15       	cp	r18, r1
    1a62:	31 05       	cpc	r19, r1
    1a64:	c9 f7       	brne	.-14     	; 0x1a58 <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	ef 90       	pop	r14
    1a72:	df 90       	pop	r13
    1a74:	cf 90       	pop	r12
    1a76:	08 95       	ret

00001a78 <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    1a78:	0f 93       	push	r16
    1a7a:	1f 93       	push	r17
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	c4 56       	subi	r28, 0x64	; 100
    1a86:	d1 09       	sbc	r29, r1
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
	//char str[countdigits(dec)+1];
	char str[100];
	sprintf(str,"%d",dec);
    1a92:	7f 93       	push	r23
    1a94:	6f 93       	push	r22
    1a96:	80 ea       	ldi	r24, 0xA0	; 160
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9f 93       	push	r25
    1a9c:	8f 93       	push	r24
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	0f 5f       	subi	r16, 0xFF	; 255
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	1f 93       	push	r17
    1aa6:	0f 93       	push	r16
    1aa8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <sprintf>
	return str;
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
}
    1ab8:	c8 01       	movw	r24, r16
    1aba:	cc 59       	subi	r28, 0x9C	; 156
    1abc:	df 4f       	sbci	r29, 0xFF	; 255
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	08 95       	ret

00001ad2 <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    1ad2:	61 15       	cp	r22, r1
    1ad4:	71 05       	cpc	r23, r1
    1ad6:	59 f0       	breq	.+22     	; 0x1aee <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ad8:	8f e9       	ldi	r24, 0x9F	; 159
    1ada:	9f e0       	ldi	r25, 0x0F	; 15
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <_ZN4QEPU5Utils5delayEi+0xa>
    1ae0:	00 c0       	rjmp	.+0      	; 0x1ae2 <_ZN4QEPU5Utils5delayEi+0x10>
    1ae2:	00 00       	nop
    1ae4:	61 50       	subi	r22, 0x01	; 1
    1ae6:	71 09       	sbc	r23, r1
    1ae8:	61 15       	cp	r22, r1
    1aea:	71 05       	cpc	r23, r1
    1aec:	a9 f7       	brne	.-22     	; 0x1ad8 <_ZN4QEPU5Utils5delayEi+0x6>
}
    1aee:	08 95       	ret

00001af0 <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    1af0:	2f 92       	push	r2
    1af2:	3f 92       	push	r3
    1af4:	4f 92       	push	r4
    1af6:	5f 92       	push	r5
    1af8:	6f 92       	push	r6
    1afa:	7f 92       	push	r7
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	ec 01       	movw	r28, r24
    1b16:	1b 01       	movw	r2, r22
    1b18:	29 01       	movw	r4, r18
    1b1a:	3a 01       	movw	r6, r20
    1b1c:	47 01       	movw	r8, r14
    1b1e:	58 01       	movw	r10, r16
	int * newthephi=(int*)malloc(sizeof(int)*2);
    1b20:	84 e0       	ldi	r24, 0x04	; 4
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 4d 14 	call	0x289a	; 0x289a <malloc>
    1b28:	6c 01       	movw	r12, r24
	
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    1b2a:	f1 01       	movw	r30, r2
    1b2c:	31 97       	sbiw	r30, 0x01	; 1
    1b2e:	e6 31       	cpi	r30, 0x16	; 22
    1b30:	f1 05       	cpc	r31, r1
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <_ZN4QEPU7executeEill+0x46>
    1b34:	47 c1       	rjmp	.+654    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
    1b36:	e6 5d       	subi	r30, 0xD6	; 214
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	b7 01       	movw	r22, r14
    1b44:	ce 01       	movw	r24, r28
    1b46:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1b4a:	9c 01       	movw	r18, r24
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	b2 01       	movw	r22, r4
    1b52:	ce 01       	movw	r24, r28
    1b54:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	ce 01       	movw	r24, r28
    1b60:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1b64:	9c 01       	movw	r18, r24
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	b2 01       	movw	r22, r4
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
		break;
    1b72:	28 c1       	rjmp	.+592    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	48 1a       	sub	r4, r24
    1b78:	51 08       	sbc	r5, r1
    1b7a:	5c 82       	std	Y+4, r5	; 0x04
    1b7c:	4b 82       	std	Y+3, r4	; 0x03
		break;
    1b7e:	22 c1       	rjmp	.+580    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    1b80:	b2 01       	movw	r22, r4
    1b82:	ce 01       	movw	r24, r28
    1b84:	02 96       	adiw	r24, 0x02	; 2
    1b86:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <_ZN4QEPU5Utils5delayEi>
    1b8a:	1c c1       	rjmp	.+568    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    1b8c:	97 01       	movw	r18, r14
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	b2 01       	movw	r22, r4
    1b94:	ce 01       	movw	r24, r28
    1b96:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
		break;
    1b9a:	14 c1       	rjmp	.+552    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    1b9c:	97 01       	movw	r18, r14
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	b2 01       	movw	r22, r4
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
		break;
    1baa:	0c c1       	rjmp	.+536    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	b2 01       	movw	r22, r4
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1bb8:	8c 01       	movw	r16, r24
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	b2 01       	movw	r22, r4
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1bc6:	a8 01       	movw	r20, r16
    1bc8:	bc 01       	movw	r22, r24
    1bca:	ce 01       	movw	r24, r28
    1bcc:	05 96       	adiw	r24, 0x05	; 5
    1bce:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN5Gates1XEii>
    1bd2:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	20 81       	ld	r18, Z
    1bd8:	31 81       	ldd	r19, Z+1	; 0x01
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	b2 01       	movw	r22, r4
    1be0:	ce 01       	movw	r24, r28
    1be2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
    1be6:	f6 01       	movw	r30, r12
    1be8:	22 81       	ldd	r18, Z+2	; 0x02
    1bea:	33 81       	ldd	r19, Z+3	; 0x03
    1bec:	41 e0       	ldi	r20, 0x01	; 1
    1bee:	50 e0       	ldi	r21, 0x00	; 0
    1bf0:	b2 01       	movw	r22, r4
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
		break;
    1bf8:	e5 c0       	rjmp	.+458    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    1bfa:	41 e0       	ldi	r20, 0x01	; 1
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	b2 01       	movw	r22, r4
    1c00:	ce 01       	movw	r24, r28
    1c02:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1c06:	8c 01       	movw	r16, r24
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	b2 01       	movw	r22, r4
    1c0e:	ce 01       	movw	r24, r28
    1c10:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1c14:	a8 01       	movw	r20, r16
    1c16:	bc 01       	movw	r22, r24
    1c18:	ce 01       	movw	r24, r28
    1c1a:	05 96       	adiw	r24, 0x05	; 5
    1c1c:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN5Gates1YEii>
    1c20:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1c22:	fc 01       	movw	r30, r24
    1c24:	20 81       	ld	r18, Z
    1c26:	31 81       	ldd	r19, Z+1	; 0x01
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	b2 01       	movw	r22, r4
    1c2e:	ce 01       	movw	r24, r28
    1c30:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
    1c34:	f6 01       	movw	r30, r12
    1c36:	22 81       	ldd	r18, Z+2	; 0x02
    1c38:	33 81       	ldd	r19, Z+3	; 0x03
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	b2 01       	movw	r22, r4
    1c40:	ce 01       	movw	r24, r28
    1c42:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
		break;
    1c46:	be c0       	rjmp	.+380    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	b2 01       	movw	r22, r4
    1c4e:	ce 01       	movw	r24, r28
    1c50:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1c54:	8c 01       	movw	r16, r24
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	b2 01       	movw	r22, r4
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1c62:	a8 01       	movw	r20, r16
    1c64:	bc 01       	movw	r22, r24
    1c66:	ce 01       	movw	r24, r28
    1c68:	05 96       	adiw	r24, 0x05	; 5
    1c6a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN5Gates1ZEii>
    1c6e:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1c70:	fc 01       	movw	r30, r24
    1c72:	20 81       	ld	r18, Z
    1c74:	31 81       	ldd	r19, Z+1	; 0x01
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	b2 01       	movw	r22, r4
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
    1c82:	f6 01       	movw	r30, r12
    1c84:	22 81       	ldd	r18, Z+2	; 0x02
    1c86:	33 81       	ldd	r19, Z+3	; 0x03
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	b2 01       	movw	r22, r4
    1c8e:	ce 01       	movw	r24, r28
    1c90:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
		break;
    1c94:	97 c0       	rjmp	.+302    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	b2 01       	movw	r22, r4
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1ca2:	8c 01       	movw	r16, r24
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	b2 01       	movw	r22, r4
    1caa:	ce 01       	movw	r24, r28
    1cac:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1cb0:	a8 01       	movw	r20, r16
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	05 96       	adiw	r24, 0x05	; 5
    1cb8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN5Gates1HEii>
    1cbc:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	20 81       	ld	r18, Z
    1cc2:	31 81       	ldd	r19, Z+1	; 0x01
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	b2 01       	movw	r22, r4
    1cca:	ce 01       	movw	r24, r28
    1ccc:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
    1cd0:	f6 01       	movw	r30, r12
    1cd2:	22 81       	ldd	r18, Z+2	; 0x02
    1cd4:	33 81       	ldd	r19, Z+3	; 0x03
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	b2 01       	movw	r22, r4
    1cdc:	ce 01       	movw	r24, r28
    1cde:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
		break;
    1ce2:	70 c0       	rjmp	.+224    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	b2 01       	movw	r22, r4
    1cea:	ce 01       	movw	r24, r28
    1cec:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1cf0:	8c 01       	movw	r16, r24
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	b2 01       	movw	r22, r4
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1cfe:	a8 01       	movw	r20, r16
    1d00:	bc 01       	movw	r22, r24
    1d02:	ce 01       	movw	r24, r28
    1d04:	05 96       	adiw	r24, 0x05	; 5
    1d06:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN5Gates1SEii>
    1d0a:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	20 81       	ld	r18, Z
    1d10:	31 81       	ldd	r19, Z+1	; 0x01
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	b2 01       	movw	r22, r4
    1d18:	ce 01       	movw	r24, r28
    1d1a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
    1d1e:	f6 01       	movw	r30, r12
    1d20:	22 81       	ldd	r18, Z+2	; 0x02
    1d22:	33 81       	ldd	r19, Z+3	; 0x03
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	b2 01       	movw	r22, r4
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
		break;
    1d30:	49 c0       	rjmp	.+146    	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	b2 01       	movw	r22, r4
    1d38:	ce 01       	movw	r24, r28
    1d3a:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1d3e:	8c 01       	movw	r16, r24
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	b2 01       	movw	r22, r4
    1d46:	ce 01       	movw	r24, r28
    1d48:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1d4c:	a8 01       	movw	r20, r16
    1d4e:	bc 01       	movw	r22, r24
    1d50:	ce 01       	movw	r24, r28
    1d52:	05 96       	adiw	r24, 0x05	; 5
    1d54:	0e 94 3a 0a 	call	0x1474	; 0x1474 <_ZN5Gates1TEii>
    1d58:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	20 81       	ld	r18, Z
    1d5e:	31 81       	ldd	r19, Z+1	; 0x01
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	b2 01       	movw	r22, r4
    1d66:	ce 01       	movw	r24, r28
    1d68:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
    1d6c:	f6 01       	movw	r30, r12
    1d6e:	22 81       	ldd	r18, Z+2	; 0x02
    1d70:	33 81       	ldd	r19, Z+3	; 0x03
    1d72:	41 e0       	ldi	r20, 0x01	; 1
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	b2 01       	movw	r22, r4
    1d78:	ce 01       	movw	r24, r28
    1d7a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN4QEPU5writeEiii>
		break;
    1d7e:	22 c0       	rjmp	.+68     	; 0x1dc4 <_ZN4QEPU7executeEill+0x2d4>
		//2 QUBIT GATES -
		case 0x16: 
			gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	b7 01       	movw	r22, r14
    1d86:	ce 01       	movw	r24, r28
    1d88:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1d8c:	8c 01       	movw	r16, r24
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	b4 01       	movw	r22, r8
    1d94:	ce 01       	movw	r24, r28
    1d96:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1d9a:	5c 01       	movw	r10, r24
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	b2 01       	movw	r22, r4
    1da2:	ce 01       	movw	r24, r28
    1da4:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1da8:	7c 01       	movw	r14, r24
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	b2 01       	movw	r22, r4
    1db0:	ce 01       	movw	r24, r28
    1db2:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN4QEPU4readEii>
    1db6:	95 01       	movw	r18, r10
    1db8:	a7 01       	movw	r20, r14
    1dba:	bc 01       	movw	r22, r24
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	05 96       	adiw	r24, 0x05	; 5
    1dc0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <_ZN5Gates3CNOEiiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    1dc4:	c6 01       	movw	r24, r12
    1dc6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <free>
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	ff 90       	pop	r15
    1dd4:	ef 90       	pop	r14
    1dd6:	df 90       	pop	r13
    1dd8:	cf 90       	pop	r12
    1dda:	bf 90       	pop	r11
    1ddc:	af 90       	pop	r10
    1dde:	9f 90       	pop	r9
    1de0:	8f 90       	pop	r8
    1de2:	7f 90       	pop	r7
    1de4:	6f 90       	pop	r6
    1de6:	5f 90       	pop	r5
    1de8:	4f 90       	pop	r4
    1dea:	3f 90       	pop	r3
    1dec:	2f 90       	pop	r2
    1dee:	08 95       	ret

00001df0 <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    1df0:	2f 92       	push	r2
    1df2:	3f 92       	push	r3
    1df4:	4f 92       	push	r4
    1df6:	5f 92       	push	r5
    1df8:	6f 92       	push	r6
    1dfa:	7f 92       	push	r7
    1dfc:	8f 92       	push	r8
    1dfe:	9f 92       	push	r9
    1e00:	af 92       	push	r10
    1e02:	bf 92       	push	r11
    1e04:	cf 92       	push	r12
    1e06:	df 92       	push	r13
    1e08:	ef 92       	push	r14
    1e0a:	ff 92       	push	r15
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	c0 57       	subi	r28, 0x70	; 112
    1e1a:	d1 09       	sbc	r29, r1
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    1e28:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN6EEProm7readallEv>
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	c3 01       	movw	r24, r6
    1e30:	02 96       	adiw	r24, 0x02	; 2
    1e32:	0e 94 df 0c 	call	0x19be	; 0x19be <_ZN4QEPU5Utils10str2intarrEPc>
    1e36:	fc 01       	movw	r30, r24
    1e38:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    1e3e:	40 85       	ldd	r20, Z+8	; 0x08
    1e40:	51 85       	ldd	r21, Z+9	; 0x09
    1e42:	4f 3f       	cpi	r20, 0xFF	; 255
    1e44:	51 05       	cpc	r21, r1
    1e46:	a1 f4       	brne	.+40     	; 0x1e70 <_ZN4QEPU3runEv+0x80>
    1e48:	46 81       	ldd	r20, Z+6	; 0x06
    1e4a:	57 81       	ldd	r21, Z+7	; 0x07
    1e4c:	4f 3f       	cpi	r20, 0xFF	; 255
    1e4e:	51 05       	cpc	r21, r1
    1e50:	79 f4       	brne	.+30     	; 0x1e70 <_ZN4QEPU3runEv+0x80>
    1e52:	44 81       	ldd	r20, Z+4	; 0x04
    1e54:	55 81       	ldd	r21, Z+5	; 0x05
    1e56:	4f 3f       	cpi	r20, 0xFF	; 255
    1e58:	51 05       	cpc	r21, r1
    1e5a:	51 f4       	brne	.+20     	; 0x1e70 <_ZN4QEPU3runEv+0x80>
    1e5c:	42 81       	ldd	r20, Z+2	; 0x02
    1e5e:	53 81       	ldd	r21, Z+3	; 0x03
    1e60:	4f 3f       	cpi	r20, 0xFF	; 255
    1e62:	51 05       	cpc	r21, r1
    1e64:	29 f4       	brne	.+10     	; 0x1e70 <_ZN4QEPU3runEv+0x80>
    1e66:	40 81       	ld	r20, Z
    1e68:	51 81       	ldd	r21, Z+1	; 0x01
    1e6a:	4f 3f       	cpi	r20, 0xFF	; 255
    1e6c:	51 05       	cpc	r21, r1
    1e6e:	21 f0       	breq	.+8      	; 0x1e78 <_ZN4QEPU3runEv+0x88>
    1e70:	2f 5f       	subi	r18, 0xFF	; 255
    1e72:	3f 4f       	sbci	r19, 0xFF	; 255
    1e74:	32 96       	adiw	r30, 0x02	; 2
    1e76:	e3 cf       	rjmp	.-58     	; 0x1e3e <_ZN4QEPU3runEv+0x4e>
    1e78:	a9 01       	movw	r20, r18
    1e7a:	44 50       	subi	r20, 0x04	; 4
    1e7c:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1e7e:	14 16       	cp	r1, r20
    1e80:	15 06       	cpc	r1, r21
    1e82:	0c f0       	brlt	.+2      	; 0x1e86 <_ZN4QEPU3runEv+0x96>
    1e84:	07 c1       	rjmp	.+526    	; 0x2094 <_ZN4QEPU3runEv+0x2a4>
    1e86:	fc 01       	movw	r30, r24
    1e88:	25 50       	subi	r18, 0x05	; 5
    1e8a:	31 09       	sbc	r19, r1
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	41 2c       	mov	r4, r1
    1e96:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    1e98:	c1 2c       	mov	r12, r1
    1e9a:	d1 2c       	mov	r13, r1
    1e9c:	0c c0       	rjmp	.+24     	; 0x1eb6 <_ZN4QEPU3runEv+0xc6>
    1e9e:	69 30       	cpi	r22, 0x09	; 9
    1ea0:	71 05       	cpc	r23, r1
    1ea2:	34 f0       	brlt	.+12     	; 0x1eb0 <_ZN4QEPU3runEv+0xc0>
    1ea4:	8f ef       	ldi	r24, 0xFF	; 255
    1ea6:	48 1a       	sub	r4, r24
    1ea8:	58 0a       	sbc	r5, r24
    1eaa:	8c 2d       	mov	r24, r12
    1eac:	9d 2d       	mov	r25, r13
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	4f 5f       	subi	r20, 0xFF	; 255
    1eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	6f 5f       	subi	r22, 0xFF	; 255
    1eba:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebc:	01 91       	ld	r16, Z+
    1ebe:	11 91       	ld	r17, Z+
    1ec0:	d2 01       	movw	r26, r4
    1ec2:	aa 0f       	add	r26, r26
    1ec4:	bb 1f       	adc	r27, r27
    1ec6:	aa 0f       	add	r26, r26
    1ec8:	bb 1f       	adc	r27, r27
    1eca:	aa 0f       	add	r26, r26
    1ecc:	bb 1f       	adc	r27, r27
    1ece:	a4 0d       	add	r26, r4
    1ed0:	b5 1d       	adc	r27, r5
    1ed2:	8a 0f       	add	r24, r26
    1ed4:	9b 1f       	adc	r25, r27
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	aa 0f       	add	r26, r26
    1eda:	bb 1f       	adc	r27, r27
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	8c 0f       	add	r24, r28
    1ee2:	9d 1f       	adc	r25, r29
    1ee4:	a8 0f       	add	r26, r24
    1ee6:	b9 1f       	adc	r27, r25
    1ee8:	0d 93       	st	X+, r16
    1eea:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1eec:	42 17       	cp	r20, r18
    1eee:	53 07       	cpc	r21, r19
    1ef0:	b1 f6       	brne	.-84     	; 0x1e9e <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1ef2:	f3 01       	movw	r30, r6
    1ef4:	14 82       	std	Z+4, r1	; 0x04
    1ef6:	13 82       	std	Z+3, r1	; 0x03
    1ef8:	14 14       	cp	r1, r4
    1efa:	15 04       	cpc	r1, r5
    1efc:	0c f0       	brlt	.+2      	; 0x1f00 <_ZN4QEPU3runEv+0x110>
    1efe:	c6 c0       	rjmp	.+396    	; 0x208c <_ZN4QEPU3runEv+0x29c>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1f04:	5e 01       	movw	r10, r28
    1f06:	f2 e6       	ldi	r31, 0x62	; 98
    1f08:	af 0e       	add	r10, r31
    1f0a:	b1 1c       	adc	r11, r1
    1f0c:	6e 01       	movw	r12, r28
    1f0e:	2b e5       	ldi	r18, 0x5B	; 91
    1f10:	c2 0e       	add	r12, r18
    1f12:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1f14:	0f 2e       	mov	r0, r31
    1f16:	fa eb       	ldi	r31, 0xBA	; 186
    1f18:	8f 2e       	mov	r8, r31
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	9f 2e       	mov	r9, r31
    1f1e:	f0 2d       	mov	r31, r0
    1f20:	ae 96       	adiw	r28, 0x2e	; 46
    1f22:	af ae       	std	Y+63, r10	; 0x3f
    1f24:	ae 97       	sbiw	r28, 0x2e	; 46
    1f26:	af 96       	adiw	r28, 0x2f	; 47
    1f28:	bf ae       	std	Y+63, r11	; 0x3f
    1f2a:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1f2c:	e0 96       	adiw	r28, 0x30	; 48
    1f2e:	cf ae       	std	Y+63, r12	; 0x3f
    1f30:	e0 97       	sbiw	r28, 0x30	; 48
    1f32:	e1 96       	adiw	r28, 0x31	; 49
    1f34:	df ae       	std	Y+63, r13	; 0x3f
    1f36:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1f38:	f5 01       	movw	r30, r10
    1f3a:	10 82       	st	Z, r1
    1f3c:	11 82       	std	Z+1, r1	; 0x01
    1f3e:	12 82       	std	Z+2, r1	; 0x02
    1f40:	13 82       	std	Z+3, r1	; 0x03
    1f42:	14 82       	std	Z+4, r1	; 0x04
    1f44:	15 82       	std	Z+5, r1	; 0x05
    1f46:	16 82       	std	Z+6, r1	; 0x06
    1f48:	f6 01       	movw	r30, r12
    1f4a:	10 82       	st	Z, r1
    1f4c:	11 82       	std	Z+1, r1	; 0x01
    1f4e:	12 82       	std	Z+2, r1	; 0x02
    1f50:	13 82       	std	Z+3, r1	; 0x03
    1f52:	14 82       	std	Z+4, r1	; 0x04
    1f54:	15 82       	std	Z+5, r1	; 0x05
    1f56:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	ee 0f       	add	r30, r30
    1f60:	ff 1f       	adc	r31, r31
    1f62:	ee 0f       	add	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	ee 0f       	add	r30, r30
    1f68:	ff 1f       	adc	r31, r31
    1f6a:	8e 0f       	add	r24, r30
    1f6c:	9f 1f       	adc	r25, r31
    1f6e:	e1 e0       	ldi	r30, 0x01	; 1
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	ec 0f       	add	r30, r28
    1f74:	fd 1f       	adc	r31, r29
    1f76:	e8 0f       	add	r30, r24
    1f78:	f9 1f       	adc	r31, r25
    1f7a:	20 80       	ld	r2, Z
    1f7c:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1f7e:	00 e0       	ldi	r16, 0x00	; 0
    1f80:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1f82:	0f 5f       	subi	r16, 0xFF	; 255
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	f3 01       	movw	r30, r6
    1f88:	83 81       	ldd	r24, Z+3	; 0x03
    1f8a:	94 81       	ldd	r25, Z+4	; 0x04
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	ee 0f       	add	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	8e 0f       	add	r24, r30
    1f9c:	9f 1f       	adc	r25, r31
    1f9e:	80 0f       	add	r24, r16
    1fa0:	91 1f       	adc	r25, r17
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	8c 0f       	add	r24, r28
    1fae:	9d 1f       	adc	r25, r29
    1fb0:	e8 0f       	add	r30, r24
    1fb2:	f9 1f       	adc	r31, r25
    1fb4:	81 81       	ldd	r24, Z+1	; 0x01
    1fb6:	8f 93       	push	r24
    1fb8:	80 81       	ld	r24, Z
    1fba:	8f 93       	push	r24
    1fbc:	bf 92       	push	r11
    1fbe:	af 92       	push	r10
    1fc0:	9f 92       	push	r9
    1fc2:	8f 92       	push	r8
    1fc4:	bf 92       	push	r11
    1fc6:	af 92       	push	r10
    1fc8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1fcc:	f3 01       	movw	r30, r6
    1fce:	83 81       	ldd	r24, Z+3	; 0x03
    1fd0:	94 81       	ldd	r25, Z+4	; 0x04
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	ee 0f       	add	r30, r30
    1fd6:	ff 1f       	adc	r31, r31
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	ee 0f       	add	r30, r30
    1fde:	ff 1f       	adc	r31, r31
    1fe0:	e8 0f       	add	r30, r24
    1fe2:	f9 1f       	adc	r31, r25
    1fe4:	e0 0f       	add	r30, r16
    1fe6:	f1 1f       	adc	r31, r17
    1fe8:	34 96       	adiw	r30, 0x04	; 4
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	8c 0f       	add	r24, r28
    1ff4:	9d 1f       	adc	r25, r29
    1ff6:	e8 0f       	add	r30, r24
    1ff8:	f9 1f       	adc	r31, r25
    1ffa:	81 81       	ldd	r24, Z+1	; 0x01
    1ffc:	8f 93       	push	r24
    1ffe:	80 81       	ld	r24, Z
    2000:	8f 93       	push	r24
    2002:	df 92       	push	r13
    2004:	cf 92       	push	r12
    2006:	9f 92       	push	r9
    2008:	8f 92       	push	r8
    200a:	df 92       	push	r13
    200c:	cf 92       	push	r12
    200e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	04 30       	cpi	r16, 0x04	; 4
    201e:	11 05       	cpc	r17, r1
    2020:	09 f0       	breq	.+2      	; 0x2024 <_ZN4QEPU3runEv+0x234>
    2022:	af cf       	rjmp	.-162    	; 0x1f82 <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    2024:	40 e1       	ldi	r20, 0x10	; 16
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	e0 96       	adiw	r28, 0x30	; 48
    202e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2030:	e0 97       	sbiw	r28, 0x30	; 48
    2032:	e1 96       	adiw	r28, 0x31	; 49
    2034:	9f ad       	ldd	r25, Y+63	; 0x3f
    2036:	e1 97       	sbiw	r28, 0x31	; 49
    2038:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <strtol>
    203c:	ad 96       	adiw	r28, 0x2d	; 45
    203e:	6c af       	std	Y+60, r22	; 0x3c
    2040:	7d af       	std	Y+61, r23	; 0x3d
    2042:	8e af       	std	Y+62, r24	; 0x3e
    2044:	9f af       	std	Y+63, r25	; 0x3f
    2046:	ad 97       	sbiw	r28, 0x2d	; 45
    2048:	40 e1       	ldi	r20, 0x10	; 16
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	60 e0       	ldi	r22, 0x00	; 0
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	ae 96       	adiw	r28, 0x2e	; 46
    2052:	8f ad       	ldd	r24, Y+63	; 0x3f
    2054:	ae 97       	sbiw	r28, 0x2e	; 46
    2056:	af 96       	adiw	r28, 0x2f	; 47
    2058:	9f ad       	ldd	r25, Y+63	; 0x3f
    205a:	af 97       	sbiw	r28, 0x2f	; 47
    205c:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <strtol>
    2060:	9b 01       	movw	r18, r22
    2062:	ac 01       	movw	r20, r24
    2064:	ad 96       	adiw	r28, 0x2d	; 45
    2066:	ec ac       	ldd	r14, Y+60	; 0x3c
    2068:	fd ac       	ldd	r15, Y+61	; 0x3d
    206a:	0e ad       	ldd	r16, Y+62	; 0x3e
    206c:	1f ad       	ldd	r17, Y+63	; 0x3f
    206e:	ad 97       	sbiw	r28, 0x2d	; 45
    2070:	b1 01       	movw	r22, r2
    2072:	c3 01       	movw	r24, r6
    2074:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    2078:	f3 01       	movw	r30, r6
    207a:	83 81       	ldd	r24, Z+3	; 0x03
    207c:	94 81       	ldd	r25, Z+4	; 0x04
    207e:	01 96       	adiw	r24, 0x01	; 1
    2080:	94 83       	std	Z+4, r25	; 0x04
    2082:	83 83       	std	Z+3, r24	; 0x03
    2084:	84 15       	cp	r24, r4
    2086:	95 05       	cpc	r25, r5
    2088:	0c f4       	brge	.+2      	; 0x208c <_ZN4QEPU3runEv+0x29c>
    208a:	56 cf       	rjmp	.-340    	; 0x1f38 <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    208c:	c3 01       	movw	r24, r6
    208e:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZN4QEPU7dumpmemEv>
    2092:	04 c0       	rjmp	.+8      	; 0x209c <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    2094:	f3 01       	movw	r30, r6
    2096:	14 82       	std	Z+4, r1	; 0x04
    2098:	13 82       	std	Z+3, r1	; 0x03
    209a:	f8 cf       	rjmp	.-16     	; 0x208c <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    209c:	c0 59       	subi	r28, 0x90	; 144
    209e:	df 4f       	sbci	r29, 0xFF	; 255
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	df 90       	pop	r13
    20b8:	cf 90       	pop	r12
    20ba:	bf 90       	pop	r11
    20bc:	af 90       	pop	r10
    20be:	9f 90       	pop	r9
    20c0:	8f 90       	pop	r8
    20c2:	7f 90       	pop	r7
    20c4:	6f 90       	pop	r6
    20c6:	5f 90       	pop	r5
    20c8:	4f 90       	pop	r4
    20ca:	3f 90       	pop	r3
    20cc:	2f 90       	pop	r2
    20ce:	08 95       	ret

000020d0 <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    20d0:	83 e3       	ldi	r24, 0x33	; 51
    20d2:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    20d4:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    20d6:	86 e8       	ldi	r24, 0x86	; 134
    20d8:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    20da:	88 e1       	ldi	r24, 0x18	; 24
    20dc:	8a b9       	out	0x0a, r24	; 10
    20de:	08 95       	ret

000020e0 <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    20e0:	5d 9b       	sbis	0x0b, 5	; 11
    20e2:	fe cf       	rjmp	.-4      	; 0x20e0 <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    20e4:	6c b9       	out	0x0c, r22	; 12
    20e6:	08 95       	ret

000020e8 <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	8c 01       	movw	r16, r24
    20f2:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    20f4:	68 81       	ld	r22, Y
    20f6:	66 23       	and	r22, r22
    20f8:	39 f0       	breq	.+14     	; 0x2108 <_ZN6Serial8writestrEPc+0x20>
    20fa:	21 96       	adiw	r28, 0x01	; 1
    20fc:	c8 01       	movw	r24, r16
    20fe:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_ZN6Serial5writeEc>
    2102:	69 91       	ld	r22, Y+
    2104:	61 11       	cpse	r22, r1
    2106:	fa cf       	rjmp	.-12     	; 0x20fc <_ZN6Serial8writestrEPc+0x14>
}
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	08 95       	ret

00002112 <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	ec 01       	movw	r28, r24
	writestr(data);
    2118:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    211c:	6d e0       	ldi	r22, 0x0D	; 13
    211e:	ce 01       	movw	r24, r28
    2120:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_ZN6Serial5writeEc>
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	08 95       	ret

0000212a <acos>:
    212a:	9f 93       	push	r25
    212c:	9f 77       	andi	r25, 0x7F	; 127
    212e:	75 d1       	rcall	.+746    	; 0x241a <__fp_arccos>
    2130:	0f 90       	pop	r0
    2132:	00 20       	and	r0, r0
    2134:	3a f4       	brpl	.+14     	; 0x2144 <acos+0x1a>
    2136:	90 58       	subi	r25, 0x80	; 128
    2138:	a2 ea       	ldi	r26, 0xA2	; 162
    213a:	2a ed       	ldi	r18, 0xDA	; 218
    213c:	3f e0       	ldi	r19, 0x0F	; 15
    213e:	49 e4       	ldi	r20, 0x49	; 73
    2140:	50 e4       	ldi	r21, 0x40	; 64
    2142:	13 d0       	rcall	.+38     	; 0x216a <__addsf3x>
    2144:	0d c2       	rjmp	.+1050   	; 0x2560 <__fp_round>

00002146 <__subsf3>:
    2146:	50 58       	subi	r21, 0x80	; 128

00002148 <__addsf3>:
    2148:	bb 27       	eor	r27, r27
    214a:	aa 27       	eor	r26, r26
    214c:	0e d0       	rcall	.+28     	; 0x216a <__addsf3x>
    214e:	08 c2       	rjmp	.+1040   	; 0x2560 <__fp_round>
    2150:	d1 d1       	rcall	.+930    	; 0x24f4 <__fp_pscA>
    2152:	30 f0       	brcs	.+12     	; 0x2160 <__addsf3+0x18>
    2154:	d6 d1       	rcall	.+940    	; 0x2502 <__fp_pscB>
    2156:	20 f0       	brcs	.+8      	; 0x2160 <__addsf3+0x18>
    2158:	31 f4       	brne	.+12     	; 0x2166 <__addsf3+0x1e>
    215a:	9f 3f       	cpi	r25, 0xFF	; 255
    215c:	11 f4       	brne	.+4      	; 0x2162 <__addsf3+0x1a>
    215e:	1e f4       	brtc	.+6      	; 0x2166 <__addsf3+0x1e>
    2160:	a1 c1       	rjmp	.+834    	; 0x24a4 <__fp_nan>
    2162:	0e f4       	brtc	.+2      	; 0x2166 <__addsf3+0x1e>
    2164:	e0 95       	com	r30
    2166:	e7 fb       	bst	r30, 7
    2168:	97 c1       	rjmp	.+814    	; 0x2498 <__fp_inf>

0000216a <__addsf3x>:
    216a:	e9 2f       	mov	r30, r25
    216c:	1b d2       	rcall	.+1078   	; 0x25a4 <__fp_split3>
    216e:	80 f3       	brcs	.-32     	; 0x2150 <__addsf3+0x8>
    2170:	ba 17       	cp	r27, r26
    2172:	62 07       	cpc	r22, r18
    2174:	73 07       	cpc	r23, r19
    2176:	84 07       	cpc	r24, r20
    2178:	95 07       	cpc	r25, r21
    217a:	18 f0       	brcs	.+6      	; 0x2182 <__addsf3x+0x18>
    217c:	71 f4       	brne	.+28     	; 0x219a <__addsf3x+0x30>
    217e:	9e f5       	brtc	.+102    	; 0x21e6 <__addsf3x+0x7c>
    2180:	33 c2       	rjmp	.+1126   	; 0x25e8 <__fp_zero>
    2182:	0e f4       	brtc	.+2      	; 0x2186 <__addsf3x+0x1c>
    2184:	e0 95       	com	r30
    2186:	0b 2e       	mov	r0, r27
    2188:	ba 2f       	mov	r27, r26
    218a:	a0 2d       	mov	r26, r0
    218c:	0b 01       	movw	r0, r22
    218e:	b9 01       	movw	r22, r18
    2190:	90 01       	movw	r18, r0
    2192:	0c 01       	movw	r0, r24
    2194:	ca 01       	movw	r24, r20
    2196:	a0 01       	movw	r20, r0
    2198:	11 24       	eor	r1, r1
    219a:	ff 27       	eor	r31, r31
    219c:	59 1b       	sub	r21, r25
    219e:	99 f0       	breq	.+38     	; 0x21c6 <__addsf3x+0x5c>
    21a0:	59 3f       	cpi	r21, 0xF9	; 249
    21a2:	50 f4       	brcc	.+20     	; 0x21b8 <__addsf3x+0x4e>
    21a4:	50 3e       	cpi	r21, 0xE0	; 224
    21a6:	68 f1       	brcs	.+90     	; 0x2202 <__addsf3x+0x98>
    21a8:	1a 16       	cp	r1, r26
    21aa:	f0 40       	sbci	r31, 0x00	; 0
    21ac:	a2 2f       	mov	r26, r18
    21ae:	23 2f       	mov	r18, r19
    21b0:	34 2f       	mov	r19, r20
    21b2:	44 27       	eor	r20, r20
    21b4:	58 5f       	subi	r21, 0xF8	; 248
    21b6:	f3 cf       	rjmp	.-26     	; 0x219e <__addsf3x+0x34>
    21b8:	46 95       	lsr	r20
    21ba:	37 95       	ror	r19
    21bc:	27 95       	ror	r18
    21be:	a7 95       	ror	r26
    21c0:	f0 40       	sbci	r31, 0x00	; 0
    21c2:	53 95       	inc	r21
    21c4:	c9 f7       	brne	.-14     	; 0x21b8 <__addsf3x+0x4e>
    21c6:	7e f4       	brtc	.+30     	; 0x21e6 <__addsf3x+0x7c>
    21c8:	1f 16       	cp	r1, r31
    21ca:	ba 0b       	sbc	r27, r26
    21cc:	62 0b       	sbc	r22, r18
    21ce:	73 0b       	sbc	r23, r19
    21d0:	84 0b       	sbc	r24, r20
    21d2:	ba f0       	brmi	.+46     	; 0x2202 <__addsf3x+0x98>
    21d4:	91 50       	subi	r25, 0x01	; 1
    21d6:	a1 f0       	breq	.+40     	; 0x2200 <__addsf3x+0x96>
    21d8:	ff 0f       	add	r31, r31
    21da:	bb 1f       	adc	r27, r27
    21dc:	66 1f       	adc	r22, r22
    21de:	77 1f       	adc	r23, r23
    21e0:	88 1f       	adc	r24, r24
    21e2:	c2 f7       	brpl	.-16     	; 0x21d4 <__addsf3x+0x6a>
    21e4:	0e c0       	rjmp	.+28     	; 0x2202 <__addsf3x+0x98>
    21e6:	ba 0f       	add	r27, r26
    21e8:	62 1f       	adc	r22, r18
    21ea:	73 1f       	adc	r23, r19
    21ec:	84 1f       	adc	r24, r20
    21ee:	48 f4       	brcc	.+18     	; 0x2202 <__addsf3x+0x98>
    21f0:	87 95       	ror	r24
    21f2:	77 95       	ror	r23
    21f4:	67 95       	ror	r22
    21f6:	b7 95       	ror	r27
    21f8:	f7 95       	ror	r31
    21fa:	9e 3f       	cpi	r25, 0xFE	; 254
    21fc:	08 f0       	brcs	.+2      	; 0x2200 <__addsf3x+0x96>
    21fe:	b3 cf       	rjmp	.-154    	; 0x2166 <__addsf3+0x1e>
    2200:	93 95       	inc	r25
    2202:	88 0f       	add	r24, r24
    2204:	08 f0       	brcs	.+2      	; 0x2208 <__addsf3x+0x9e>
    2206:	99 27       	eor	r25, r25
    2208:	ee 0f       	add	r30, r30
    220a:	97 95       	ror	r25
    220c:	87 95       	ror	r24
    220e:	08 95       	ret

00002210 <atan>:
    2210:	df 93       	push	r29
    2212:	dd 27       	eor	r29, r29
    2214:	b9 2f       	mov	r27, r25
    2216:	bf 77       	andi	r27, 0x7F	; 127
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	16 16       	cp	r1, r22
    221e:	17 06       	cpc	r1, r23
    2220:	48 07       	cpc	r20, r24
    2222:	5b 07       	cpc	r21, r27
    2224:	10 f4       	brcc	.+4      	; 0x222a <atan+0x1a>
    2226:	d9 2f       	mov	r29, r25
    2228:	ea d1       	rcall	.+980    	; 0x25fe <inverse>
    222a:	9f 93       	push	r25
    222c:	8f 93       	push	r24
    222e:	7f 93       	push	r23
    2230:	6f 93       	push	r22
    2232:	dc d2       	rcall	.+1464   	; 0x27ec <square>
    2234:	e0 e8       	ldi	r30, 0x80	; 128
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	38 d1       	rcall	.+624    	; 0x24aa <__fp_powser>
    223a:	92 d1       	rcall	.+804    	; 0x2560 <__fp_round>
    223c:	2f 91       	pop	r18
    223e:	3f 91       	pop	r19
    2240:	4f 91       	pop	r20
    2242:	5f 91       	pop	r21
    2244:	34 d2       	rcall	.+1128   	; 0x26ae <__mulsf3x>
    2246:	dd 23       	and	r29, r29
    2248:	49 f0       	breq	.+18     	; 0x225c <atan+0x4c>
    224a:	90 58       	subi	r25, 0x80	; 128
    224c:	a2 ea       	ldi	r26, 0xA2	; 162
    224e:	2a ed       	ldi	r18, 0xDA	; 218
    2250:	3f e0       	ldi	r19, 0x0F	; 15
    2252:	49 ec       	ldi	r20, 0xC9	; 201
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	d0 78       	andi	r29, 0x80	; 128
    2258:	5d 27       	eor	r21, r29
    225a:	87 df       	rcall	.-242    	; 0x216a <__addsf3x>
    225c:	df 91       	pop	r29
    225e:	80 c1       	rjmp	.+768    	; 0x2560 <__fp_round>

00002260 <__cmpsf2>:
    2260:	f7 d0       	rcall	.+494    	; 0x2450 <__fp_cmp>
    2262:	08 f4       	brcc	.+2      	; 0x2266 <__cmpsf2+0x6>
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	08 95       	ret

00002268 <cos>:
    2268:	54 d1       	rcall	.+680    	; 0x2512 <__fp_rempio2>
    226a:	e3 95       	inc	r30
    226c:	8a c1       	rjmp	.+788    	; 0x2582 <__fp_sinus>

0000226e <__divsf3>:
    226e:	0c d0       	rcall	.+24     	; 0x2288 <__divsf3x>
    2270:	77 c1       	rjmp	.+750    	; 0x2560 <__fp_round>
    2272:	47 d1       	rcall	.+654    	; 0x2502 <__fp_pscB>
    2274:	40 f0       	brcs	.+16     	; 0x2286 <__divsf3+0x18>
    2276:	3e d1       	rcall	.+636    	; 0x24f4 <__fp_pscA>
    2278:	30 f0       	brcs	.+12     	; 0x2286 <__divsf3+0x18>
    227a:	21 f4       	brne	.+8      	; 0x2284 <__divsf3+0x16>
    227c:	5f 3f       	cpi	r21, 0xFF	; 255
    227e:	19 f0       	breq	.+6      	; 0x2286 <__divsf3+0x18>
    2280:	0b c1       	rjmp	.+534    	; 0x2498 <__fp_inf>
    2282:	51 11       	cpse	r21, r1
    2284:	b2 c1       	rjmp	.+868    	; 0x25ea <__fp_szero>
    2286:	0e c1       	rjmp	.+540    	; 0x24a4 <__fp_nan>

00002288 <__divsf3x>:
    2288:	8d d1       	rcall	.+794    	; 0x25a4 <__fp_split3>
    228a:	98 f3       	brcs	.-26     	; 0x2272 <__divsf3+0x4>

0000228c <__divsf3_pse>:
    228c:	99 23       	and	r25, r25
    228e:	c9 f3       	breq	.-14     	; 0x2282 <__divsf3+0x14>
    2290:	55 23       	and	r21, r21
    2292:	b1 f3       	breq	.-20     	; 0x2280 <__divsf3+0x12>
    2294:	95 1b       	sub	r25, r21
    2296:	55 0b       	sbc	r21, r21
    2298:	bb 27       	eor	r27, r27
    229a:	aa 27       	eor	r26, r26
    229c:	62 17       	cp	r22, r18
    229e:	73 07       	cpc	r23, r19
    22a0:	84 07       	cpc	r24, r20
    22a2:	38 f0       	brcs	.+14     	; 0x22b2 <__divsf3_pse+0x26>
    22a4:	9f 5f       	subi	r25, 0xFF	; 255
    22a6:	5f 4f       	sbci	r21, 0xFF	; 255
    22a8:	22 0f       	add	r18, r18
    22aa:	33 1f       	adc	r19, r19
    22ac:	44 1f       	adc	r20, r20
    22ae:	aa 1f       	adc	r26, r26
    22b0:	a9 f3       	breq	.-22     	; 0x229c <__divsf3_pse+0x10>
    22b2:	33 d0       	rcall	.+102    	; 0x231a <__divsf3_pse+0x8e>
    22b4:	0e 2e       	mov	r0, r30
    22b6:	3a f0       	brmi	.+14     	; 0x22c6 <__divsf3_pse+0x3a>
    22b8:	e0 e8       	ldi	r30, 0x80	; 128
    22ba:	30 d0       	rcall	.+96     	; 0x231c <__divsf3_pse+0x90>
    22bc:	91 50       	subi	r25, 0x01	; 1
    22be:	50 40       	sbci	r21, 0x00	; 0
    22c0:	e6 95       	lsr	r30
    22c2:	00 1c       	adc	r0, r0
    22c4:	ca f7       	brpl	.-14     	; 0x22b8 <__divsf3_pse+0x2c>
    22c6:	29 d0       	rcall	.+82     	; 0x231a <__divsf3_pse+0x8e>
    22c8:	fe 2f       	mov	r31, r30
    22ca:	27 d0       	rcall	.+78     	; 0x231a <__divsf3_pse+0x8e>
    22cc:	66 0f       	add	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	88 1f       	adc	r24, r24
    22d2:	bb 1f       	adc	r27, r27
    22d4:	26 17       	cp	r18, r22
    22d6:	37 07       	cpc	r19, r23
    22d8:	48 07       	cpc	r20, r24
    22da:	ab 07       	cpc	r26, r27
    22dc:	b0 e8       	ldi	r27, 0x80	; 128
    22de:	09 f0       	breq	.+2      	; 0x22e2 <__divsf3_pse+0x56>
    22e0:	bb 0b       	sbc	r27, r27
    22e2:	80 2d       	mov	r24, r0
    22e4:	bf 01       	movw	r22, r30
    22e6:	ff 27       	eor	r31, r31
    22e8:	93 58       	subi	r25, 0x83	; 131
    22ea:	5f 4f       	sbci	r21, 0xFF	; 255
    22ec:	2a f0       	brmi	.+10     	; 0x22f8 <__divsf3_pse+0x6c>
    22ee:	9e 3f       	cpi	r25, 0xFE	; 254
    22f0:	51 05       	cpc	r21, r1
    22f2:	68 f0       	brcs	.+26     	; 0x230e <__divsf3_pse+0x82>
    22f4:	d1 c0       	rjmp	.+418    	; 0x2498 <__fp_inf>
    22f6:	79 c1       	rjmp	.+754    	; 0x25ea <__fp_szero>
    22f8:	5f 3f       	cpi	r21, 0xFF	; 255
    22fa:	ec f3       	brlt	.-6      	; 0x22f6 <__divsf3_pse+0x6a>
    22fc:	98 3e       	cpi	r25, 0xE8	; 232
    22fe:	dc f3       	brlt	.-10     	; 0x22f6 <__divsf3_pse+0x6a>
    2300:	86 95       	lsr	r24
    2302:	77 95       	ror	r23
    2304:	67 95       	ror	r22
    2306:	b7 95       	ror	r27
    2308:	f7 95       	ror	r31
    230a:	9f 5f       	subi	r25, 0xFF	; 255
    230c:	c9 f7       	brne	.-14     	; 0x2300 <__divsf3_pse+0x74>
    230e:	88 0f       	add	r24, r24
    2310:	91 1d       	adc	r25, r1
    2312:	96 95       	lsr	r25
    2314:	87 95       	ror	r24
    2316:	97 f9       	bld	r25, 7
    2318:	08 95       	ret
    231a:	e1 e0       	ldi	r30, 0x01	; 1
    231c:	66 0f       	add	r22, r22
    231e:	77 1f       	adc	r23, r23
    2320:	88 1f       	adc	r24, r24
    2322:	bb 1f       	adc	r27, r27
    2324:	62 17       	cp	r22, r18
    2326:	73 07       	cpc	r23, r19
    2328:	84 07       	cpc	r24, r20
    232a:	ba 07       	cpc	r27, r26
    232c:	20 f0       	brcs	.+8      	; 0x2336 <__divsf3_pse+0xaa>
    232e:	62 1b       	sub	r22, r18
    2330:	73 0b       	sbc	r23, r19
    2332:	84 0b       	sbc	r24, r20
    2334:	ba 0b       	sbc	r27, r26
    2336:	ee 1f       	adc	r30, r30
    2338:	88 f7       	brcc	.-30     	; 0x231c <__divsf3_pse+0x90>
    233a:	e0 95       	com	r30
    233c:	08 95       	ret

0000233e <__fixsfsi>:
    233e:	04 d0       	rcall	.+8      	; 0x2348 <__fixunssfsi>
    2340:	68 94       	set
    2342:	b1 11       	cpse	r27, r1
    2344:	52 c1       	rjmp	.+676    	; 0x25ea <__fp_szero>
    2346:	08 95       	ret

00002348 <__fixunssfsi>:
    2348:	35 d1       	rcall	.+618    	; 0x25b4 <__fp_splitA>
    234a:	88 f0       	brcs	.+34     	; 0x236e <__fixunssfsi+0x26>
    234c:	9f 57       	subi	r25, 0x7F	; 127
    234e:	90 f0       	brcs	.+36     	; 0x2374 <__fixunssfsi+0x2c>
    2350:	b9 2f       	mov	r27, r25
    2352:	99 27       	eor	r25, r25
    2354:	b7 51       	subi	r27, 0x17	; 23
    2356:	a0 f0       	brcs	.+40     	; 0x2380 <__fixunssfsi+0x38>
    2358:	d1 f0       	breq	.+52     	; 0x238e <__fixunssfsi+0x46>
    235a:	66 0f       	add	r22, r22
    235c:	77 1f       	adc	r23, r23
    235e:	88 1f       	adc	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	1a f0       	brmi	.+6      	; 0x236a <__fixunssfsi+0x22>
    2364:	ba 95       	dec	r27
    2366:	c9 f7       	brne	.-14     	; 0x235a <__fixunssfsi+0x12>
    2368:	12 c0       	rjmp	.+36     	; 0x238e <__fixunssfsi+0x46>
    236a:	b1 30       	cpi	r27, 0x01	; 1
    236c:	81 f0       	breq	.+32     	; 0x238e <__fixunssfsi+0x46>
    236e:	3c d1       	rcall	.+632    	; 0x25e8 <__fp_zero>
    2370:	b1 e0       	ldi	r27, 0x01	; 1
    2372:	08 95       	ret
    2374:	39 c1       	rjmp	.+626    	; 0x25e8 <__fp_zero>
    2376:	67 2f       	mov	r22, r23
    2378:	78 2f       	mov	r23, r24
    237a:	88 27       	eor	r24, r24
    237c:	b8 5f       	subi	r27, 0xF8	; 248
    237e:	39 f0       	breq	.+14     	; 0x238e <__fixunssfsi+0x46>
    2380:	b9 3f       	cpi	r27, 0xF9	; 249
    2382:	cc f3       	brlt	.-14     	; 0x2376 <__fixunssfsi+0x2e>
    2384:	86 95       	lsr	r24
    2386:	77 95       	ror	r23
    2388:	67 95       	ror	r22
    238a:	b3 95       	inc	r27
    238c:	d9 f7       	brne	.-10     	; 0x2384 <__fixunssfsi+0x3c>
    238e:	3e f4       	brtc	.+14     	; 0x239e <__fixunssfsi+0x56>
    2390:	90 95       	com	r25
    2392:	80 95       	com	r24
    2394:	70 95       	com	r23
    2396:	61 95       	neg	r22
    2398:	7f 4f       	sbci	r23, 0xFF	; 255
    239a:	8f 4f       	sbci	r24, 0xFF	; 255
    239c:	9f 4f       	sbci	r25, 0xFF	; 255
    239e:	08 95       	ret

000023a0 <__floatunsisf>:
    23a0:	e8 94       	clt
    23a2:	09 c0       	rjmp	.+18     	; 0x23b6 <__floatsisf+0x12>

000023a4 <__floatsisf>:
    23a4:	97 fb       	bst	r25, 7
    23a6:	3e f4       	brtc	.+14     	; 0x23b6 <__floatsisf+0x12>
    23a8:	90 95       	com	r25
    23aa:	80 95       	com	r24
    23ac:	70 95       	com	r23
    23ae:	61 95       	neg	r22
    23b0:	7f 4f       	sbci	r23, 0xFF	; 255
    23b2:	8f 4f       	sbci	r24, 0xFF	; 255
    23b4:	9f 4f       	sbci	r25, 0xFF	; 255
    23b6:	99 23       	and	r25, r25
    23b8:	a9 f0       	breq	.+42     	; 0x23e4 <__floatsisf+0x40>
    23ba:	f9 2f       	mov	r31, r25
    23bc:	96 e9       	ldi	r25, 0x96	; 150
    23be:	bb 27       	eor	r27, r27
    23c0:	93 95       	inc	r25
    23c2:	f6 95       	lsr	r31
    23c4:	87 95       	ror	r24
    23c6:	77 95       	ror	r23
    23c8:	67 95       	ror	r22
    23ca:	b7 95       	ror	r27
    23cc:	f1 11       	cpse	r31, r1
    23ce:	f8 cf       	rjmp	.-16     	; 0x23c0 <__floatsisf+0x1c>
    23d0:	fa f4       	brpl	.+62     	; 0x2410 <__floatsisf+0x6c>
    23d2:	bb 0f       	add	r27, r27
    23d4:	11 f4       	brne	.+4      	; 0x23da <__floatsisf+0x36>
    23d6:	60 ff       	sbrs	r22, 0
    23d8:	1b c0       	rjmp	.+54     	; 0x2410 <__floatsisf+0x6c>
    23da:	6f 5f       	subi	r22, 0xFF	; 255
    23dc:	7f 4f       	sbci	r23, 0xFF	; 255
    23de:	8f 4f       	sbci	r24, 0xFF	; 255
    23e0:	9f 4f       	sbci	r25, 0xFF	; 255
    23e2:	16 c0       	rjmp	.+44     	; 0x2410 <__floatsisf+0x6c>
    23e4:	88 23       	and	r24, r24
    23e6:	11 f0       	breq	.+4      	; 0x23ec <__floatsisf+0x48>
    23e8:	96 e9       	ldi	r25, 0x96	; 150
    23ea:	11 c0       	rjmp	.+34     	; 0x240e <__floatsisf+0x6a>
    23ec:	77 23       	and	r23, r23
    23ee:	21 f0       	breq	.+8      	; 0x23f8 <__floatsisf+0x54>
    23f0:	9e e8       	ldi	r25, 0x8E	; 142
    23f2:	87 2f       	mov	r24, r23
    23f4:	76 2f       	mov	r23, r22
    23f6:	05 c0       	rjmp	.+10     	; 0x2402 <__floatsisf+0x5e>
    23f8:	66 23       	and	r22, r22
    23fa:	71 f0       	breq	.+28     	; 0x2418 <__floatsisf+0x74>
    23fc:	96 e8       	ldi	r25, 0x86	; 134
    23fe:	86 2f       	mov	r24, r22
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	2a f0       	brmi	.+10     	; 0x2410 <__floatsisf+0x6c>
    2406:	9a 95       	dec	r25
    2408:	66 0f       	add	r22, r22
    240a:	77 1f       	adc	r23, r23
    240c:	88 1f       	adc	r24, r24
    240e:	da f7       	brpl	.-10     	; 0x2406 <__floatsisf+0x62>
    2410:	88 0f       	add	r24, r24
    2412:	96 95       	lsr	r25
    2414:	87 95       	ror	r24
    2416:	97 f9       	bld	r25, 7
    2418:	08 95       	ret

0000241a <__fp_arccos>:
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	1f 93       	push	r17
    2420:	0f 93       	push	r16
    2422:	8b 01       	movw	r16, r22
    2424:	ec 01       	movw	r28, r24
    2426:	ed ea       	ldi	r30, 0xAD	; 173
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	3f d0       	rcall	.+126    	; 0x24aa <__fp_powser>
    242c:	99 d0       	rcall	.+306    	; 0x2560 <__fp_round>
    242e:	98 01       	movw	r18, r16
    2430:	ae 01       	movw	r20, r28
    2432:	8b 01       	movw	r16, r22
    2434:	ec 01       	movw	r28, r24
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	80 e8       	ldi	r24, 0x80	; 128
    243c:	9f e3       	ldi	r25, 0x3F	; 63
    243e:	83 de       	rcall	.-762    	; 0x2146 <__subsf3>
    2440:	97 d1       	rcall	.+814    	; 0x2770 <sqrt>
    2442:	98 01       	movw	r18, r16
    2444:	ae 01       	movw	r20, r28
    2446:	0f 91       	pop	r16
    2448:	1f 91       	pop	r17
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	2f c1       	rjmp	.+606    	; 0x26ae <__mulsf3x>

00002450 <__fp_cmp>:
    2450:	99 0f       	add	r25, r25
    2452:	00 08       	sbc	r0, r0
    2454:	55 0f       	add	r21, r21
    2456:	aa 0b       	sbc	r26, r26
    2458:	e0 e8       	ldi	r30, 0x80	; 128
    245a:	fe ef       	ldi	r31, 0xFE	; 254
    245c:	16 16       	cp	r1, r22
    245e:	17 06       	cpc	r1, r23
    2460:	e8 07       	cpc	r30, r24
    2462:	f9 07       	cpc	r31, r25
    2464:	c0 f0       	brcs	.+48     	; 0x2496 <__fp_cmp+0x46>
    2466:	12 16       	cp	r1, r18
    2468:	13 06       	cpc	r1, r19
    246a:	e4 07       	cpc	r30, r20
    246c:	f5 07       	cpc	r31, r21
    246e:	98 f0       	brcs	.+38     	; 0x2496 <__fp_cmp+0x46>
    2470:	62 1b       	sub	r22, r18
    2472:	73 0b       	sbc	r23, r19
    2474:	84 0b       	sbc	r24, r20
    2476:	95 0b       	sbc	r25, r21
    2478:	39 f4       	brne	.+14     	; 0x2488 <__fp_cmp+0x38>
    247a:	0a 26       	eor	r0, r26
    247c:	61 f0       	breq	.+24     	; 0x2496 <__fp_cmp+0x46>
    247e:	23 2b       	or	r18, r19
    2480:	24 2b       	or	r18, r20
    2482:	25 2b       	or	r18, r21
    2484:	21 f4       	brne	.+8      	; 0x248e <__fp_cmp+0x3e>
    2486:	08 95       	ret
    2488:	0a 26       	eor	r0, r26
    248a:	09 f4       	brne	.+2      	; 0x248e <__fp_cmp+0x3e>
    248c:	a1 40       	sbci	r26, 0x01	; 1
    248e:	a6 95       	lsr	r26
    2490:	8f ef       	ldi	r24, 0xFF	; 255
    2492:	81 1d       	adc	r24, r1
    2494:	81 1d       	adc	r24, r1
    2496:	08 95       	ret

00002498 <__fp_inf>:
    2498:	97 f9       	bld	r25, 7
    249a:	9f 67       	ori	r25, 0x7F	; 127
    249c:	80 e8       	ldi	r24, 0x80	; 128
    249e:	70 e0       	ldi	r23, 0x00	; 0
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	08 95       	ret

000024a4 <__fp_nan>:
    24a4:	9f ef       	ldi	r25, 0xFF	; 255
    24a6:	80 ec       	ldi	r24, 0xC0	; 192
    24a8:	08 95       	ret

000024aa <__fp_powser>:
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	1f 93       	push	r17
    24b0:	0f 93       	push	r16
    24b2:	ff 92       	push	r15
    24b4:	ef 92       	push	r14
    24b6:	df 92       	push	r13
    24b8:	7b 01       	movw	r14, r22
    24ba:	8c 01       	movw	r16, r24
    24bc:	68 94       	set
    24be:	05 c0       	rjmp	.+10     	; 0x24ca <__fp_powser+0x20>
    24c0:	da 2e       	mov	r13, r26
    24c2:	ef 01       	movw	r28, r30
    24c4:	f4 d0       	rcall	.+488    	; 0x26ae <__mulsf3x>
    24c6:	fe 01       	movw	r30, r28
    24c8:	e8 94       	clt
    24ca:	a5 91       	lpm	r26, Z+
    24cc:	25 91       	lpm	r18, Z+
    24ce:	35 91       	lpm	r19, Z+
    24d0:	45 91       	lpm	r20, Z+
    24d2:	55 91       	lpm	r21, Z+
    24d4:	ae f3       	brts	.-22     	; 0x24c0 <__fp_powser+0x16>
    24d6:	ef 01       	movw	r28, r30
    24d8:	48 de       	rcall	.-880    	; 0x216a <__addsf3x>
    24da:	fe 01       	movw	r30, r28
    24dc:	97 01       	movw	r18, r14
    24de:	a8 01       	movw	r20, r16
    24e0:	da 94       	dec	r13
    24e2:	79 f7       	brne	.-34     	; 0x24c2 <__fp_powser+0x18>
    24e4:	df 90       	pop	r13
    24e6:	ef 90       	pop	r14
    24e8:	ff 90       	pop	r15
    24ea:	0f 91       	pop	r16
    24ec:	1f 91       	pop	r17
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <__fp_pscA>:
    24f4:	00 24       	eor	r0, r0
    24f6:	0a 94       	dec	r0
    24f8:	16 16       	cp	r1, r22
    24fa:	17 06       	cpc	r1, r23
    24fc:	18 06       	cpc	r1, r24
    24fe:	09 06       	cpc	r0, r25
    2500:	08 95       	ret

00002502 <__fp_pscB>:
    2502:	00 24       	eor	r0, r0
    2504:	0a 94       	dec	r0
    2506:	12 16       	cp	r1, r18
    2508:	13 06       	cpc	r1, r19
    250a:	14 06       	cpc	r1, r20
    250c:	05 06       	cpc	r0, r21
    250e:	08 95       	ret
    2510:	c9 cf       	rjmp	.-110    	; 0x24a4 <__fp_nan>

00002512 <__fp_rempio2>:
    2512:	50 d0       	rcall	.+160    	; 0x25b4 <__fp_splitA>
    2514:	e8 f3       	brcs	.-6      	; 0x2510 <__fp_pscB+0xe>
    2516:	e8 94       	clt
    2518:	e0 e0       	ldi	r30, 0x00	; 0
    251a:	bb 27       	eor	r27, r27
    251c:	9f 57       	subi	r25, 0x7F	; 127
    251e:	f0 f0       	brcs	.+60     	; 0x255c <__fp_rempio2+0x4a>
    2520:	2a ed       	ldi	r18, 0xDA	; 218
    2522:	3f e0       	ldi	r19, 0x0F	; 15
    2524:	49 ec       	ldi	r20, 0xC9	; 201
    2526:	06 c0       	rjmp	.+12     	; 0x2534 <__fp_rempio2+0x22>
    2528:	ee 0f       	add	r30, r30
    252a:	bb 0f       	add	r27, r27
    252c:	66 1f       	adc	r22, r22
    252e:	77 1f       	adc	r23, r23
    2530:	88 1f       	adc	r24, r24
    2532:	28 f0       	brcs	.+10     	; 0x253e <__fp_rempio2+0x2c>
    2534:	b2 3a       	cpi	r27, 0xA2	; 162
    2536:	62 07       	cpc	r22, r18
    2538:	73 07       	cpc	r23, r19
    253a:	84 07       	cpc	r24, r20
    253c:	28 f0       	brcs	.+10     	; 0x2548 <__fp_rempio2+0x36>
    253e:	b2 5a       	subi	r27, 0xA2	; 162
    2540:	62 0b       	sbc	r22, r18
    2542:	73 0b       	sbc	r23, r19
    2544:	84 0b       	sbc	r24, r20
    2546:	e3 95       	inc	r30
    2548:	9a 95       	dec	r25
    254a:	72 f7       	brpl	.-36     	; 0x2528 <__fp_rempio2+0x16>
    254c:	80 38       	cpi	r24, 0x80	; 128
    254e:	30 f4       	brcc	.+12     	; 0x255c <__fp_rempio2+0x4a>
    2550:	9a 95       	dec	r25
    2552:	bb 0f       	add	r27, r27
    2554:	66 1f       	adc	r22, r22
    2556:	77 1f       	adc	r23, r23
    2558:	88 1f       	adc	r24, r24
    255a:	d2 f7       	brpl	.-12     	; 0x2550 <__fp_rempio2+0x3e>
    255c:	90 48       	sbci	r25, 0x80	; 128
    255e:	4b c1       	rjmp	.+662    	; 0x27f6 <__fp_mpack_finite>

00002560 <__fp_round>:
    2560:	09 2e       	mov	r0, r25
    2562:	03 94       	inc	r0
    2564:	00 0c       	add	r0, r0
    2566:	11 f4       	brne	.+4      	; 0x256c <__fp_round+0xc>
    2568:	88 23       	and	r24, r24
    256a:	52 f0       	brmi	.+20     	; 0x2580 <__fp_round+0x20>
    256c:	bb 0f       	add	r27, r27
    256e:	40 f4       	brcc	.+16     	; 0x2580 <__fp_round+0x20>
    2570:	bf 2b       	or	r27, r31
    2572:	11 f4       	brne	.+4      	; 0x2578 <__fp_round+0x18>
    2574:	60 ff       	sbrs	r22, 0
    2576:	04 c0       	rjmp	.+8      	; 0x2580 <__fp_round+0x20>
    2578:	6f 5f       	subi	r22, 0xFF	; 255
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	8f 4f       	sbci	r24, 0xFF	; 255
    257e:	9f 4f       	sbci	r25, 0xFF	; 255
    2580:	08 95       	ret

00002582 <__fp_sinus>:
    2582:	ef 93       	push	r30
    2584:	e0 ff       	sbrs	r30, 0
    2586:	06 c0       	rjmp	.+12     	; 0x2594 <__fp_sinus+0x12>
    2588:	a2 ea       	ldi	r26, 0xA2	; 162
    258a:	2a ed       	ldi	r18, 0xDA	; 218
    258c:	3f e0       	ldi	r19, 0x0F	; 15
    258e:	49 ec       	ldi	r20, 0xC9	; 201
    2590:	5f eb       	ldi	r21, 0xBF	; 191
    2592:	eb dd       	rcall	.-1066   	; 0x216a <__addsf3x>
    2594:	e5 df       	rcall	.-54     	; 0x2560 <__fp_round>
    2596:	0f 90       	pop	r0
    2598:	03 94       	inc	r0
    259a:	01 fc       	sbrc	r0, 1
    259c:	90 58       	subi	r25, 0x80	; 128
    259e:	e5 ed       	ldi	r30, 0xD5	; 213
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	3c c1       	rjmp	.+632    	; 0x281c <__fp_powsodd>

000025a4 <__fp_split3>:
    25a4:	57 fd       	sbrc	r21, 7
    25a6:	90 58       	subi	r25, 0x80	; 128
    25a8:	44 0f       	add	r20, r20
    25aa:	55 1f       	adc	r21, r21
    25ac:	59 f0       	breq	.+22     	; 0x25c4 <__fp_splitA+0x10>
    25ae:	5f 3f       	cpi	r21, 0xFF	; 255
    25b0:	71 f0       	breq	.+28     	; 0x25ce <__fp_splitA+0x1a>
    25b2:	47 95       	ror	r20

000025b4 <__fp_splitA>:
    25b4:	88 0f       	add	r24, r24
    25b6:	97 fb       	bst	r25, 7
    25b8:	99 1f       	adc	r25, r25
    25ba:	61 f0       	breq	.+24     	; 0x25d4 <__fp_splitA+0x20>
    25bc:	9f 3f       	cpi	r25, 0xFF	; 255
    25be:	79 f0       	breq	.+30     	; 0x25de <__fp_splitA+0x2a>
    25c0:	87 95       	ror	r24
    25c2:	08 95       	ret
    25c4:	12 16       	cp	r1, r18
    25c6:	13 06       	cpc	r1, r19
    25c8:	14 06       	cpc	r1, r20
    25ca:	55 1f       	adc	r21, r21
    25cc:	f2 cf       	rjmp	.-28     	; 0x25b2 <__fp_split3+0xe>
    25ce:	46 95       	lsr	r20
    25d0:	f1 df       	rcall	.-30     	; 0x25b4 <__fp_splitA>
    25d2:	08 c0       	rjmp	.+16     	; 0x25e4 <__fp_splitA+0x30>
    25d4:	16 16       	cp	r1, r22
    25d6:	17 06       	cpc	r1, r23
    25d8:	18 06       	cpc	r1, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	f1 cf       	rjmp	.-30     	; 0x25c0 <__fp_splitA+0xc>
    25de:	86 95       	lsr	r24
    25e0:	71 05       	cpc	r23, r1
    25e2:	61 05       	cpc	r22, r1
    25e4:	08 94       	sec
    25e6:	08 95       	ret

000025e8 <__fp_zero>:
    25e8:	e8 94       	clt

000025ea <__fp_szero>:
    25ea:	bb 27       	eor	r27, r27
    25ec:	66 27       	eor	r22, r22
    25ee:	77 27       	eor	r23, r23
    25f0:	cb 01       	movw	r24, r22
    25f2:	97 f9       	bld	r25, 7
    25f4:	08 95       	ret

000025f6 <__gesf2>:
    25f6:	2c df       	rcall	.-424    	; 0x2450 <__fp_cmp>
    25f8:	08 f4       	brcc	.+2      	; 0x25fc <__gesf2+0x6>
    25fa:	8f ef       	ldi	r24, 0xFF	; 255
    25fc:	08 95       	ret

000025fe <inverse>:
    25fe:	9b 01       	movw	r18, r22
    2600:	ac 01       	movw	r20, r24
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	80 e8       	ldi	r24, 0x80	; 128
    2608:	9f e3       	ldi	r25, 0x3F	; 63
    260a:	31 ce       	rjmp	.-926    	; 0x226e <__divsf3>
    260c:	0e f0       	brts	.+2      	; 0x2610 <inverse+0x12>
    260e:	f1 c0       	rjmp	.+482    	; 0x27f2 <__fp_mpack>
    2610:	49 cf       	rjmp	.-366    	; 0x24a4 <__fp_nan>
    2612:	68 94       	set
    2614:	41 cf       	rjmp	.-382    	; 0x2498 <__fp_inf>

00002616 <log>:
    2616:	ce df       	rcall	.-100    	; 0x25b4 <__fp_splitA>
    2618:	c8 f3       	brcs	.-14     	; 0x260c <inverse+0xe>
    261a:	99 23       	and	r25, r25
    261c:	d1 f3       	breq	.-12     	; 0x2612 <inverse+0x14>
    261e:	c6 f3       	brts	.-16     	; 0x2610 <inverse+0x12>
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	1f 93       	push	r17
    2626:	0f 93       	push	r16
    2628:	ff 92       	push	r15
    262a:	c9 2f       	mov	r28, r25
    262c:	dd 27       	eor	r29, r29
    262e:	88 23       	and	r24, r24
    2630:	2a f0       	brmi	.+10     	; 0x263c <log+0x26>
    2632:	21 97       	sbiw	r28, 0x01	; 1
    2634:	66 0f       	add	r22, r22
    2636:	77 1f       	adc	r23, r23
    2638:	88 1f       	adc	r24, r24
    263a:	da f7       	brpl	.-10     	; 0x2632 <log+0x1c>
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f eb       	ldi	r21, 0xBF	; 191
    2644:	9f e3       	ldi	r25, 0x3F	; 63
    2646:	88 39       	cpi	r24, 0x98	; 152
    2648:	20 f0       	brcs	.+8      	; 0x2652 <log+0x3c>
    264a:	80 3e       	cpi	r24, 0xE0	; 224
    264c:	30 f0       	brcs	.+12     	; 0x265a <log+0x44>
    264e:	21 96       	adiw	r28, 0x01	; 1
    2650:	8f 77       	andi	r24, 0x7F	; 127
    2652:	7a dd       	rcall	.-1292   	; 0x2148 <__addsf3>
    2654:	e3 ef       	ldi	r30, 0xF3	; 243
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	03 c0       	rjmp	.+6      	; 0x2660 <log+0x4a>
    265a:	76 dd       	rcall	.-1300   	; 0x2148 <__addsf3>
    265c:	e0 e2       	ldi	r30, 0x20	; 32
    265e:	f1 e0       	ldi	r31, 0x01	; 1
    2660:	24 df       	rcall	.-440    	; 0x24aa <__fp_powser>
    2662:	8b 01       	movw	r16, r22
    2664:	be 01       	movw	r22, r28
    2666:	ec 01       	movw	r28, r24
    2668:	fb 2e       	mov	r15, r27
    266a:	6f 57       	subi	r22, 0x7F	; 127
    266c:	71 09       	sbc	r23, r1
    266e:	75 95       	asr	r23
    2670:	77 1f       	adc	r23, r23
    2672:	88 0b       	sbc	r24, r24
    2674:	99 0b       	sbc	r25, r25
    2676:	96 de       	rcall	.-724    	; 0x23a4 <__floatsisf>
    2678:	28 e1       	ldi	r18, 0x18	; 24
    267a:	32 e7       	ldi	r19, 0x72	; 114
    267c:	41 e3       	ldi	r20, 0x31	; 49
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	16 d0       	rcall	.+44     	; 0x26ae <__mulsf3x>
    2682:	af 2d       	mov	r26, r15
    2684:	98 01       	movw	r18, r16
    2686:	ae 01       	movw	r20, r28
    2688:	ff 90       	pop	r15
    268a:	0f 91       	pop	r16
    268c:	1f 91       	pop	r17
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	6b dd       	rcall	.-1322   	; 0x216a <__addsf3x>
    2694:	65 cf       	rjmp	.-310    	; 0x2560 <__fp_round>

00002696 <__mulsf3>:
    2696:	0b d0       	rcall	.+22     	; 0x26ae <__mulsf3x>
    2698:	63 cf       	rjmp	.-314    	; 0x2560 <__fp_round>
    269a:	2c df       	rcall	.-424    	; 0x24f4 <__fp_pscA>
    269c:	28 f0       	brcs	.+10     	; 0x26a8 <__mulsf3+0x12>
    269e:	31 df       	rcall	.-414    	; 0x2502 <__fp_pscB>
    26a0:	18 f0       	brcs	.+6      	; 0x26a8 <__mulsf3+0x12>
    26a2:	95 23       	and	r25, r21
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <__mulsf3+0x12>
    26a6:	f8 ce       	rjmp	.-528    	; 0x2498 <__fp_inf>
    26a8:	fd ce       	rjmp	.-518    	; 0x24a4 <__fp_nan>
    26aa:	11 24       	eor	r1, r1
    26ac:	9e cf       	rjmp	.-196    	; 0x25ea <__fp_szero>

000026ae <__mulsf3x>:
    26ae:	7a df       	rcall	.-268    	; 0x25a4 <__fp_split3>
    26b0:	a0 f3       	brcs	.-24     	; 0x269a <__mulsf3+0x4>

000026b2 <__mulsf3_pse>:
    26b2:	95 9f       	mul	r25, r21
    26b4:	d1 f3       	breq	.-12     	; 0x26aa <__mulsf3+0x14>
    26b6:	95 0f       	add	r25, r21
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	55 1f       	adc	r21, r21
    26bc:	62 9f       	mul	r22, r18
    26be:	f0 01       	movw	r30, r0
    26c0:	72 9f       	mul	r23, r18
    26c2:	bb 27       	eor	r27, r27
    26c4:	f0 0d       	add	r31, r0
    26c6:	b1 1d       	adc	r27, r1
    26c8:	63 9f       	mul	r22, r19
    26ca:	aa 27       	eor	r26, r26
    26cc:	f0 0d       	add	r31, r0
    26ce:	b1 1d       	adc	r27, r1
    26d0:	aa 1f       	adc	r26, r26
    26d2:	64 9f       	mul	r22, r20
    26d4:	66 27       	eor	r22, r22
    26d6:	b0 0d       	add	r27, r0
    26d8:	a1 1d       	adc	r26, r1
    26da:	66 1f       	adc	r22, r22
    26dc:	82 9f       	mul	r24, r18
    26de:	22 27       	eor	r18, r18
    26e0:	b0 0d       	add	r27, r0
    26e2:	a1 1d       	adc	r26, r1
    26e4:	62 1f       	adc	r22, r18
    26e6:	73 9f       	mul	r23, r19
    26e8:	b0 0d       	add	r27, r0
    26ea:	a1 1d       	adc	r26, r1
    26ec:	62 1f       	adc	r22, r18
    26ee:	83 9f       	mul	r24, r19
    26f0:	a0 0d       	add	r26, r0
    26f2:	61 1d       	adc	r22, r1
    26f4:	22 1f       	adc	r18, r18
    26f6:	74 9f       	mul	r23, r20
    26f8:	33 27       	eor	r19, r19
    26fa:	a0 0d       	add	r26, r0
    26fc:	61 1d       	adc	r22, r1
    26fe:	23 1f       	adc	r18, r19
    2700:	84 9f       	mul	r24, r20
    2702:	60 0d       	add	r22, r0
    2704:	21 1d       	adc	r18, r1
    2706:	82 2f       	mov	r24, r18
    2708:	76 2f       	mov	r23, r22
    270a:	6a 2f       	mov	r22, r26
    270c:	11 24       	eor	r1, r1
    270e:	9f 57       	subi	r25, 0x7F	; 127
    2710:	50 40       	sbci	r21, 0x00	; 0
    2712:	8a f0       	brmi	.+34     	; 0x2736 <__mulsf3_pse+0x84>
    2714:	e1 f0       	breq	.+56     	; 0x274e <__mulsf3_pse+0x9c>
    2716:	88 23       	and	r24, r24
    2718:	4a f0       	brmi	.+18     	; 0x272c <__mulsf3_pse+0x7a>
    271a:	ee 0f       	add	r30, r30
    271c:	ff 1f       	adc	r31, r31
    271e:	bb 1f       	adc	r27, r27
    2720:	66 1f       	adc	r22, r22
    2722:	77 1f       	adc	r23, r23
    2724:	88 1f       	adc	r24, r24
    2726:	91 50       	subi	r25, 0x01	; 1
    2728:	50 40       	sbci	r21, 0x00	; 0
    272a:	a9 f7       	brne	.-22     	; 0x2716 <__mulsf3_pse+0x64>
    272c:	9e 3f       	cpi	r25, 0xFE	; 254
    272e:	51 05       	cpc	r21, r1
    2730:	70 f0       	brcs	.+28     	; 0x274e <__mulsf3_pse+0x9c>
    2732:	b2 ce       	rjmp	.-668    	; 0x2498 <__fp_inf>
    2734:	5a cf       	rjmp	.-332    	; 0x25ea <__fp_szero>
    2736:	5f 3f       	cpi	r21, 0xFF	; 255
    2738:	ec f3       	brlt	.-6      	; 0x2734 <__mulsf3_pse+0x82>
    273a:	98 3e       	cpi	r25, 0xE8	; 232
    273c:	dc f3       	brlt	.-10     	; 0x2734 <__mulsf3_pse+0x82>
    273e:	86 95       	lsr	r24
    2740:	77 95       	ror	r23
    2742:	67 95       	ror	r22
    2744:	b7 95       	ror	r27
    2746:	f7 95       	ror	r31
    2748:	e7 95       	ror	r30
    274a:	9f 5f       	subi	r25, 0xFF	; 255
    274c:	c1 f7       	brne	.-16     	; 0x273e <__mulsf3_pse+0x8c>
    274e:	fe 2b       	or	r31, r30
    2750:	88 0f       	add	r24, r24
    2752:	91 1d       	adc	r25, r1
    2754:	96 95       	lsr	r25
    2756:	87 95       	ror	r24
    2758:	97 f9       	bld	r25, 7
    275a:	08 95       	ret

0000275c <sin>:
    275c:	9f 93       	push	r25
    275e:	d9 de       	rcall	.-590    	; 0x2512 <__fp_rempio2>
    2760:	0f 90       	pop	r0
    2762:	07 fc       	sbrc	r0, 7
    2764:	ee 5f       	subi	r30, 0xFE	; 254
    2766:	0d cf       	rjmp	.-486    	; 0x2582 <__fp_sinus>
    2768:	11 f4       	brne	.+4      	; 0x276e <sin+0x12>
    276a:	0e f4       	brtc	.+2      	; 0x276e <sin+0x12>
    276c:	9b ce       	rjmp	.-714    	; 0x24a4 <__fp_nan>
    276e:	41 c0       	rjmp	.+130    	; 0x27f2 <__fp_mpack>

00002770 <sqrt>:
    2770:	21 df       	rcall	.-446    	; 0x25b4 <__fp_splitA>
    2772:	d0 f3       	brcs	.-12     	; 0x2768 <sin+0xc>
    2774:	99 23       	and	r25, r25
    2776:	d9 f3       	breq	.-10     	; 0x276e <sin+0x12>
    2778:	ce f3       	brts	.-14     	; 0x276c <sin+0x10>
    277a:	9f 57       	subi	r25, 0x7F	; 127
    277c:	55 0b       	sbc	r21, r21
    277e:	87 ff       	sbrs	r24, 7
    2780:	46 d0       	rcall	.+140    	; 0x280e <__fp_norm2>
    2782:	00 24       	eor	r0, r0
    2784:	a0 e6       	ldi	r26, 0x60	; 96
    2786:	40 ea       	ldi	r20, 0xA0	; 160
    2788:	90 01       	movw	r18, r0
    278a:	80 58       	subi	r24, 0x80	; 128
    278c:	56 95       	lsr	r21
    278e:	97 95       	ror	r25
    2790:	28 f4       	brcc	.+10     	; 0x279c <sqrt+0x2c>
    2792:	80 5c       	subi	r24, 0xC0	; 192
    2794:	66 0f       	add	r22, r22
    2796:	77 1f       	adc	r23, r23
    2798:	88 1f       	adc	r24, r24
    279a:	20 f0       	brcs	.+8      	; 0x27a4 <sqrt+0x34>
    279c:	26 17       	cp	r18, r22
    279e:	37 07       	cpc	r19, r23
    27a0:	48 07       	cpc	r20, r24
    27a2:	30 f4       	brcc	.+12     	; 0x27b0 <sqrt+0x40>
    27a4:	62 1b       	sub	r22, r18
    27a6:	73 0b       	sbc	r23, r19
    27a8:	84 0b       	sbc	r24, r20
    27aa:	20 29       	or	r18, r0
    27ac:	31 29       	or	r19, r1
    27ae:	4a 2b       	or	r20, r26
    27b0:	a6 95       	lsr	r26
    27b2:	17 94       	ror	r1
    27b4:	07 94       	ror	r0
    27b6:	20 25       	eor	r18, r0
    27b8:	31 25       	eor	r19, r1
    27ba:	4a 27       	eor	r20, r26
    27bc:	58 f7       	brcc	.-42     	; 0x2794 <sqrt+0x24>
    27be:	66 0f       	add	r22, r22
    27c0:	77 1f       	adc	r23, r23
    27c2:	88 1f       	adc	r24, r24
    27c4:	20 f0       	brcs	.+8      	; 0x27ce <sqrt+0x5e>
    27c6:	26 17       	cp	r18, r22
    27c8:	37 07       	cpc	r19, r23
    27ca:	48 07       	cpc	r20, r24
    27cc:	30 f4       	brcc	.+12     	; 0x27da <sqrt+0x6a>
    27ce:	62 0b       	sbc	r22, r18
    27d0:	73 0b       	sbc	r23, r19
    27d2:	84 0b       	sbc	r24, r20
    27d4:	20 0d       	add	r18, r0
    27d6:	31 1d       	adc	r19, r1
    27d8:	41 1d       	adc	r20, r1
    27da:	a0 95       	com	r26
    27dc:	81 f7       	brne	.-32     	; 0x27be <sqrt+0x4e>
    27de:	b9 01       	movw	r22, r18
    27e0:	84 2f       	mov	r24, r20
    27e2:	91 58       	subi	r25, 0x81	; 129
    27e4:	88 0f       	add	r24, r24
    27e6:	96 95       	lsr	r25
    27e8:	87 95       	ror	r24
    27ea:	08 95       	ret

000027ec <square>:
    27ec:	9b 01       	movw	r18, r22
    27ee:	ac 01       	movw	r20, r24
    27f0:	52 cf       	rjmp	.-348    	; 0x2696 <__mulsf3>

000027f2 <__fp_mpack>:
    27f2:	9f 3f       	cpi	r25, 0xFF	; 255
    27f4:	31 f0       	breq	.+12     	; 0x2802 <__fp_mpack_finite+0xc>

000027f6 <__fp_mpack_finite>:
    27f6:	91 50       	subi	r25, 0x01	; 1
    27f8:	20 f4       	brcc	.+8      	; 0x2802 <__fp_mpack_finite+0xc>
    27fa:	87 95       	ror	r24
    27fc:	77 95       	ror	r23
    27fe:	67 95       	ror	r22
    2800:	b7 95       	ror	r27
    2802:	88 0f       	add	r24, r24
    2804:	91 1d       	adc	r25, r1
    2806:	96 95       	lsr	r25
    2808:	87 95       	ror	r24
    280a:	97 f9       	bld	r25, 7
    280c:	08 95       	ret

0000280e <__fp_norm2>:
    280e:	91 50       	subi	r25, 0x01	; 1
    2810:	50 40       	sbci	r21, 0x00	; 0
    2812:	66 0f       	add	r22, r22
    2814:	77 1f       	adc	r23, r23
    2816:	88 1f       	adc	r24, r24
    2818:	d2 f7       	brpl	.-12     	; 0x280e <__fp_norm2>
    281a:	08 95       	ret

0000281c <__fp_powsodd>:
    281c:	9f 93       	push	r25
    281e:	8f 93       	push	r24
    2820:	7f 93       	push	r23
    2822:	6f 93       	push	r22
    2824:	ff 93       	push	r31
    2826:	ef 93       	push	r30
    2828:	9b 01       	movw	r18, r22
    282a:	ac 01       	movw	r20, r24
    282c:	34 df       	rcall	.-408    	; 0x2696 <__mulsf3>
    282e:	ef 91       	pop	r30
    2830:	ff 91       	pop	r31
    2832:	3b de       	rcall	.-906    	; 0x24aa <__fp_powser>
    2834:	2f 91       	pop	r18
    2836:	3f 91       	pop	r19
    2838:	4f 91       	pop	r20
    283a:	5f 91       	pop	r21
    283c:	2c cf       	rjmp	.-424    	; 0x2696 <__mulsf3>

0000283e <__divmodhi4>:
    283e:	97 fb       	bst	r25, 7
    2840:	07 2e       	mov	r0, r23
    2842:	16 f4       	brtc	.+4      	; 0x2848 <__divmodhi4+0xa>
    2844:	00 94       	com	r0
    2846:	07 d0       	rcall	.+14     	; 0x2856 <__divmodhi4_neg1>
    2848:	77 fd       	sbrc	r23, 7
    284a:	09 d0       	rcall	.+18     	; 0x285e <__divmodhi4_neg2>
    284c:	0e 94 39 14 	call	0x2872	; 0x2872 <__udivmodhi4>
    2850:	07 fc       	sbrc	r0, 7
    2852:	05 d0       	rcall	.+10     	; 0x285e <__divmodhi4_neg2>
    2854:	3e f4       	brtc	.+14     	; 0x2864 <__divmodhi4_exit>

00002856 <__divmodhi4_neg1>:
    2856:	90 95       	com	r25
    2858:	81 95       	neg	r24
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	08 95       	ret

0000285e <__divmodhi4_neg2>:
    285e:	70 95       	com	r23
    2860:	61 95       	neg	r22
    2862:	7f 4f       	sbci	r23, 0xFF	; 255

00002864 <__divmodhi4_exit>:
    2864:	08 95       	ret

00002866 <__tablejump2__>:
    2866:	ee 0f       	add	r30, r30
    2868:	ff 1f       	adc	r31, r31

0000286a <__tablejump__>:
    286a:	05 90       	lpm	r0, Z+
    286c:	f4 91       	lpm	r31, Z
    286e:	e0 2d       	mov	r30, r0
    2870:	09 94       	ijmp

00002872 <__udivmodhi4>:
    2872:	aa 1b       	sub	r26, r26
    2874:	bb 1b       	sub	r27, r27
    2876:	51 e1       	ldi	r21, 0x11	; 17
    2878:	07 c0       	rjmp	.+14     	; 0x2888 <__udivmodhi4_ep>

0000287a <__udivmodhi4_loop>:
    287a:	aa 1f       	adc	r26, r26
    287c:	bb 1f       	adc	r27, r27
    287e:	a6 17       	cp	r26, r22
    2880:	b7 07       	cpc	r27, r23
    2882:	10 f0       	brcs	.+4      	; 0x2888 <__udivmodhi4_ep>
    2884:	a6 1b       	sub	r26, r22
    2886:	b7 0b       	sbc	r27, r23

00002888 <__udivmodhi4_ep>:
    2888:	88 1f       	adc	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	5a 95       	dec	r21
    288e:	a9 f7       	brne	.-22     	; 0x287a <__udivmodhi4_loop>
    2890:	80 95       	com	r24
    2892:	90 95       	com	r25
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	08 95       	ret

0000289a <malloc>:
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	82 30       	cpi	r24, 0x02	; 2
    28a0:	91 05       	cpc	r25, r1
    28a2:	10 f4       	brcc	.+4      	; 0x28a8 <malloc+0xe>
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	e0 91 c4 00 	lds	r30, 0x00C4
    28ac:	f0 91 c5 00 	lds	r31, 0x00C5
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	a0 e0       	ldi	r26, 0x00	; 0
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	30 97       	sbiw	r30, 0x00	; 0
    28ba:	39 f1       	breq	.+78     	; 0x290a <malloc+0x70>
    28bc:	40 81       	ld	r20, Z
    28be:	51 81       	ldd	r21, Z+1	; 0x01
    28c0:	48 17       	cp	r20, r24
    28c2:	59 07       	cpc	r21, r25
    28c4:	b8 f0       	brcs	.+46     	; 0x28f4 <malloc+0x5a>
    28c6:	48 17       	cp	r20, r24
    28c8:	59 07       	cpc	r21, r25
    28ca:	71 f4       	brne	.+28     	; 0x28e8 <malloc+0x4e>
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	93 81       	ldd	r25, Z+3	; 0x03
    28d0:	10 97       	sbiw	r26, 0x00	; 0
    28d2:	29 f0       	breq	.+10     	; 0x28de <malloc+0x44>
    28d4:	13 96       	adiw	r26, 0x03	; 3
    28d6:	9c 93       	st	X, r25
    28d8:	8e 93       	st	-X, r24
    28da:	12 97       	sbiw	r26, 0x02	; 2
    28dc:	2c c0       	rjmp	.+88     	; 0x2936 <malloc+0x9c>
    28de:	90 93 c5 00 	sts	0x00C5, r25
    28e2:	80 93 c4 00 	sts	0x00C4, r24
    28e6:	27 c0       	rjmp	.+78     	; 0x2936 <malloc+0x9c>
    28e8:	21 15       	cp	r18, r1
    28ea:	31 05       	cpc	r19, r1
    28ec:	31 f0       	breq	.+12     	; 0x28fa <malloc+0x60>
    28ee:	42 17       	cp	r20, r18
    28f0:	53 07       	cpc	r21, r19
    28f2:	18 f0       	brcs	.+6      	; 0x28fa <malloc+0x60>
    28f4:	a9 01       	movw	r20, r18
    28f6:	db 01       	movw	r26, r22
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <malloc+0x62>
    28fa:	ef 01       	movw	r28, r30
    28fc:	9a 01       	movw	r18, r20
    28fe:	bd 01       	movw	r22, r26
    2900:	df 01       	movw	r26, r30
    2902:	02 80       	ldd	r0, Z+2	; 0x02
    2904:	f3 81       	ldd	r31, Z+3	; 0x03
    2906:	e0 2d       	mov	r30, r0
    2908:	d7 cf       	rjmp	.-82     	; 0x28b8 <malloc+0x1e>
    290a:	21 15       	cp	r18, r1
    290c:	31 05       	cpc	r19, r1
    290e:	f9 f0       	breq	.+62     	; 0x294e <malloc+0xb4>
    2910:	28 1b       	sub	r18, r24
    2912:	39 0b       	sbc	r19, r25
    2914:	24 30       	cpi	r18, 0x04	; 4
    2916:	31 05       	cpc	r19, r1
    2918:	80 f4       	brcc	.+32     	; 0x293a <malloc+0xa0>
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	9b 81       	ldd	r25, Y+3	; 0x03
    291e:	61 15       	cp	r22, r1
    2920:	71 05       	cpc	r23, r1
    2922:	21 f0       	breq	.+8      	; 0x292c <malloc+0x92>
    2924:	fb 01       	movw	r30, r22
    2926:	93 83       	std	Z+3, r25	; 0x03
    2928:	82 83       	std	Z+2, r24	; 0x02
    292a:	04 c0       	rjmp	.+8      	; 0x2934 <malloc+0x9a>
    292c:	90 93 c5 00 	sts	0x00C5, r25
    2930:	80 93 c4 00 	sts	0x00C4, r24
    2934:	fe 01       	movw	r30, r28
    2936:	32 96       	adiw	r30, 0x02	; 2
    2938:	44 c0       	rjmp	.+136    	; 0x29c2 <malloc+0x128>
    293a:	fe 01       	movw	r30, r28
    293c:	e2 0f       	add	r30, r18
    293e:	f3 1f       	adc	r31, r19
    2940:	81 93       	st	Z+, r24
    2942:	91 93       	st	Z+, r25
    2944:	22 50       	subi	r18, 0x02	; 2
    2946:	31 09       	sbc	r19, r1
    2948:	39 83       	std	Y+1, r19	; 0x01
    294a:	28 83       	st	Y, r18
    294c:	3a c0       	rjmp	.+116    	; 0x29c2 <malloc+0x128>
    294e:	20 91 c2 00 	lds	r18, 0x00C2
    2952:	30 91 c3 00 	lds	r19, 0x00C3
    2956:	23 2b       	or	r18, r19
    2958:	41 f4       	brne	.+16     	; 0x296a <malloc+0xd0>
    295a:	20 91 62 00 	lds	r18, 0x0062
    295e:	30 91 63 00 	lds	r19, 0x0063
    2962:	30 93 c3 00 	sts	0x00C3, r19
    2966:	20 93 c2 00 	sts	0x00C2, r18
    296a:	20 91 60 00 	lds	r18, 0x0060
    296e:	30 91 61 00 	lds	r19, 0x0061
    2972:	21 15       	cp	r18, r1
    2974:	31 05       	cpc	r19, r1
    2976:	41 f4       	brne	.+16     	; 0x2988 <malloc+0xee>
    2978:	2d b7       	in	r18, 0x3d	; 61
    297a:	3e b7       	in	r19, 0x3e	; 62
    297c:	40 91 64 00 	lds	r20, 0x0064
    2980:	50 91 65 00 	lds	r21, 0x0065
    2984:	24 1b       	sub	r18, r20
    2986:	35 0b       	sbc	r19, r21
    2988:	e0 91 c2 00 	lds	r30, 0x00C2
    298c:	f0 91 c3 00 	lds	r31, 0x00C3
    2990:	e2 17       	cp	r30, r18
    2992:	f3 07       	cpc	r31, r19
    2994:	a0 f4       	brcc	.+40     	; 0x29be <malloc+0x124>
    2996:	2e 1b       	sub	r18, r30
    2998:	3f 0b       	sbc	r19, r31
    299a:	28 17       	cp	r18, r24
    299c:	39 07       	cpc	r19, r25
    299e:	78 f0       	brcs	.+30     	; 0x29be <malloc+0x124>
    29a0:	ac 01       	movw	r20, r24
    29a2:	4e 5f       	subi	r20, 0xFE	; 254
    29a4:	5f 4f       	sbci	r21, 0xFF	; 255
    29a6:	24 17       	cp	r18, r20
    29a8:	35 07       	cpc	r19, r21
    29aa:	48 f0       	brcs	.+18     	; 0x29be <malloc+0x124>
    29ac:	4e 0f       	add	r20, r30
    29ae:	5f 1f       	adc	r21, r31
    29b0:	50 93 c3 00 	sts	0x00C3, r21
    29b4:	40 93 c2 00 	sts	0x00C2, r20
    29b8:	81 93       	st	Z+, r24
    29ba:	91 93       	st	Z+, r25
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <malloc+0x128>
    29be:	e0 e0       	ldi	r30, 0x00	; 0
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	cf 01       	movw	r24, r30
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	08 95       	ret

000029ca <free>:
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <free+0xa>
    29d2:	87 c0       	rjmp	.+270    	; 0x2ae2 <free+0x118>
    29d4:	fc 01       	movw	r30, r24
    29d6:	32 97       	sbiw	r30, 0x02	; 2
    29d8:	13 82       	std	Z+3, r1	; 0x03
    29da:	12 82       	std	Z+2, r1	; 0x02
    29dc:	c0 91 c4 00 	lds	r28, 0x00C4
    29e0:	d0 91 c5 00 	lds	r29, 0x00C5
    29e4:	20 97       	sbiw	r28, 0x00	; 0
    29e6:	81 f4       	brne	.+32     	; 0x2a08 <free+0x3e>
    29e8:	20 81       	ld	r18, Z
    29ea:	31 81       	ldd	r19, Z+1	; 0x01
    29ec:	28 0f       	add	r18, r24
    29ee:	39 1f       	adc	r19, r25
    29f0:	80 91 c2 00 	lds	r24, 0x00C2
    29f4:	90 91 c3 00 	lds	r25, 0x00C3
    29f8:	82 17       	cp	r24, r18
    29fa:	93 07       	cpc	r25, r19
    29fc:	79 f5       	brne	.+94     	; 0x2a5c <free+0x92>
    29fe:	f0 93 c3 00 	sts	0x00C3, r31
    2a02:	e0 93 c2 00 	sts	0x00C2, r30
    2a06:	6d c0       	rjmp	.+218    	; 0x2ae2 <free+0x118>
    2a08:	de 01       	movw	r26, r28
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	ae 17       	cp	r26, r30
    2a10:	bf 07       	cpc	r27, r31
    2a12:	50 f4       	brcc	.+20     	; 0x2a28 <free+0x5e>
    2a14:	12 96       	adiw	r26, 0x02	; 2
    2a16:	4d 91       	ld	r20, X+
    2a18:	5c 91       	ld	r21, X
    2a1a:	13 97       	sbiw	r26, 0x03	; 3
    2a1c:	9d 01       	movw	r18, r26
    2a1e:	41 15       	cp	r20, r1
    2a20:	51 05       	cpc	r21, r1
    2a22:	09 f1       	breq	.+66     	; 0x2a66 <free+0x9c>
    2a24:	da 01       	movw	r26, r20
    2a26:	f3 cf       	rjmp	.-26     	; 0x2a0e <free+0x44>
    2a28:	b3 83       	std	Z+3, r27	; 0x03
    2a2a:	a2 83       	std	Z+2, r26	; 0x02
    2a2c:	40 81       	ld	r20, Z
    2a2e:	51 81       	ldd	r21, Z+1	; 0x01
    2a30:	84 0f       	add	r24, r20
    2a32:	95 1f       	adc	r25, r21
    2a34:	8a 17       	cp	r24, r26
    2a36:	9b 07       	cpc	r25, r27
    2a38:	71 f4       	brne	.+28     	; 0x2a56 <free+0x8c>
    2a3a:	8d 91       	ld	r24, X+
    2a3c:	9c 91       	ld	r25, X
    2a3e:	11 97       	sbiw	r26, 0x01	; 1
    2a40:	84 0f       	add	r24, r20
    2a42:	95 1f       	adc	r25, r21
    2a44:	02 96       	adiw	r24, 0x02	; 2
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	80 83       	st	Z, r24
    2a4a:	12 96       	adiw	r26, 0x02	; 2
    2a4c:	8d 91       	ld	r24, X+
    2a4e:	9c 91       	ld	r25, X
    2a50:	13 97       	sbiw	r26, 0x03	; 3
    2a52:	93 83       	std	Z+3, r25	; 0x03
    2a54:	82 83       	std	Z+2, r24	; 0x02
    2a56:	21 15       	cp	r18, r1
    2a58:	31 05       	cpc	r19, r1
    2a5a:	29 f4       	brne	.+10     	; 0x2a66 <free+0x9c>
    2a5c:	f0 93 c5 00 	sts	0x00C5, r31
    2a60:	e0 93 c4 00 	sts	0x00C4, r30
    2a64:	3e c0       	rjmp	.+124    	; 0x2ae2 <free+0x118>
    2a66:	d9 01       	movw	r26, r18
    2a68:	13 96       	adiw	r26, 0x03	; 3
    2a6a:	fc 93       	st	X, r31
    2a6c:	ee 93       	st	-X, r30
    2a6e:	12 97       	sbiw	r26, 0x02	; 2
    2a70:	4d 91       	ld	r20, X+
    2a72:	5d 91       	ld	r21, X+
    2a74:	a4 0f       	add	r26, r20
    2a76:	b5 1f       	adc	r27, r21
    2a78:	ea 17       	cp	r30, r26
    2a7a:	fb 07       	cpc	r31, r27
    2a7c:	79 f4       	brne	.+30     	; 0x2a9c <free+0xd2>
    2a7e:	80 81       	ld	r24, Z
    2a80:	91 81       	ldd	r25, Z+1	; 0x01
    2a82:	84 0f       	add	r24, r20
    2a84:	95 1f       	adc	r25, r21
    2a86:	02 96       	adiw	r24, 0x02	; 2
    2a88:	d9 01       	movw	r26, r18
    2a8a:	11 96       	adiw	r26, 0x01	; 1
    2a8c:	9c 93       	st	X, r25
    2a8e:	8e 93       	st	-X, r24
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	13 96       	adiw	r26, 0x03	; 3
    2a96:	9c 93       	st	X, r25
    2a98:	8e 93       	st	-X, r24
    2a9a:	12 97       	sbiw	r26, 0x02	; 2
    2a9c:	e0 e0       	ldi	r30, 0x00	; 0
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	19 f0       	breq	.+6      	; 0x2aae <free+0xe4>
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ec 01       	movw	r28, r24
    2aac:	f9 cf       	rjmp	.-14     	; 0x2aa0 <free+0xd6>
    2aae:	ce 01       	movw	r24, r28
    2ab0:	02 96       	adiw	r24, 0x02	; 2
    2ab2:	28 81       	ld	r18, Y
    2ab4:	39 81       	ldd	r19, Y+1	; 0x01
    2ab6:	82 0f       	add	r24, r18
    2ab8:	93 1f       	adc	r25, r19
    2aba:	20 91 c2 00 	lds	r18, 0x00C2
    2abe:	30 91 c3 00 	lds	r19, 0x00C3
    2ac2:	28 17       	cp	r18, r24
    2ac4:	39 07       	cpc	r19, r25
    2ac6:	69 f4       	brne	.+26     	; 0x2ae2 <free+0x118>
    2ac8:	30 97       	sbiw	r30, 0x00	; 0
    2aca:	29 f4       	brne	.+10     	; 0x2ad6 <free+0x10c>
    2acc:	10 92 c5 00 	sts	0x00C5, r1
    2ad0:	10 92 c4 00 	sts	0x00C4, r1
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <free+0x110>
    2ad6:	13 82       	std	Z+3, r1	; 0x03
    2ad8:	12 82       	std	Z+2, r1	; 0x02
    2ada:	d0 93 c3 00 	sts	0x00C3, r29
    2ade:	c0 93 c2 00 	sts	0x00C2, r28
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	08 95       	ret

00002ae8 <do_rand>:
    2ae8:	8f 92       	push	r8
    2aea:	9f 92       	push	r9
    2aec:	af 92       	push	r10
    2aee:	bf 92       	push	r11
    2af0:	cf 92       	push	r12
    2af2:	df 92       	push	r13
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	ec 01       	movw	r28, r24
    2afe:	68 81       	ld	r22, Y
    2b00:	79 81       	ldd	r23, Y+1	; 0x01
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	9b 81       	ldd	r25, Y+3	; 0x03
    2b06:	61 15       	cp	r22, r1
    2b08:	71 05       	cpc	r23, r1
    2b0a:	81 05       	cpc	r24, r1
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	21 f4       	brne	.+8      	; 0x2b18 <do_rand+0x30>
    2b10:	64 e2       	ldi	r22, 0x24	; 36
    2b12:	79 ed       	ldi	r23, 0xD9	; 217
    2b14:	8b e5       	ldi	r24, 0x5B	; 91
    2b16:	97 e0       	ldi	r25, 0x07	; 7
    2b18:	2d e1       	ldi	r18, 0x1D	; 29
    2b1a:	33 ef       	ldi	r19, 0xF3	; 243
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	50 e0       	ldi	r21, 0x00	; 0
    2b20:	0e 94 05 1a 	call	0x340a	; 0x340a <__divmodsi4>
    2b24:	49 01       	movw	r8, r18
    2b26:	5a 01       	movw	r10, r20
    2b28:	9b 01       	movw	r18, r22
    2b2a:	ac 01       	movw	r20, r24
    2b2c:	a7 ea       	ldi	r26, 0xA7	; 167
    2b2e:	b1 e4       	ldi	r27, 0x41	; 65
    2b30:	0e 94 24 1a 	call	0x3448	; 0x3448 <__muluhisi3>
    2b34:	6b 01       	movw	r12, r22
    2b36:	7c 01       	movw	r14, r24
    2b38:	ac ee       	ldi	r26, 0xEC	; 236
    2b3a:	b4 ef       	ldi	r27, 0xF4	; 244
    2b3c:	a5 01       	movw	r20, r10
    2b3e:	94 01       	movw	r18, r8
    2b40:	0e 94 32 1a 	call	0x3464	; 0x3464 <__mulohisi3>
    2b44:	c6 0e       	add	r12, r22
    2b46:	d7 1e       	adc	r13, r23
    2b48:	e8 1e       	adc	r14, r24
    2b4a:	f9 1e       	adc	r15, r25
    2b4c:	f7 fe       	sbrs	r15, 7
    2b4e:	06 c0       	rjmp	.+12     	; 0x2b5c <do_rand+0x74>
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	c8 1a       	sub	r12, r24
    2b54:	d1 08       	sbc	r13, r1
    2b56:	e1 08       	sbc	r14, r1
    2b58:	80 e8       	ldi	r24, 0x80	; 128
    2b5a:	f8 0a       	sbc	r15, r24
    2b5c:	c8 82       	st	Y, r12
    2b5e:	d9 82       	std	Y+1, r13	; 0x01
    2b60:	ea 82       	std	Y+2, r14	; 0x02
    2b62:	fb 82       	std	Y+3, r15	; 0x03
    2b64:	c6 01       	movw	r24, r12
    2b66:	9f 77       	andi	r25, 0x7F	; 127
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	ff 90       	pop	r15
    2b6e:	ef 90       	pop	r14
    2b70:	df 90       	pop	r13
    2b72:	cf 90       	pop	r12
    2b74:	bf 90       	pop	r11
    2b76:	af 90       	pop	r10
    2b78:	9f 90       	pop	r9
    2b7a:	8f 90       	pop	r8
    2b7c:	08 95       	ret

00002b7e <rand_r>:
    2b7e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <do_rand>
    2b82:	08 95       	ret

00002b84 <rand>:
    2b84:	86 e6       	ldi	r24, 0x66	; 102
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <do_rand>
    2b8c:	08 95       	ret

00002b8e <srand>:
    2b8e:	a0 e0       	ldi	r26, 0x00	; 0
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	80 93 66 00 	sts	0x0066, r24
    2b96:	90 93 67 00 	sts	0x0067, r25
    2b9a:	a0 93 68 00 	sts	0x0068, r26
    2b9e:	b0 93 69 00 	sts	0x0069, r27
    2ba2:	08 95       	ret

00002ba4 <strtol>:
    2ba4:	2f 92       	push	r2
    2ba6:	3f 92       	push	r3
    2ba8:	5f 92       	push	r5
    2baa:	6f 92       	push	r6
    2bac:	7f 92       	push	r7
    2bae:	8f 92       	push	r8
    2bb0:	9f 92       	push	r9
    2bb2:	af 92       	push	r10
    2bb4:	bf 92       	push	r11
    2bb6:	cf 92       	push	r12
    2bb8:	df 92       	push	r13
    2bba:	ef 92       	push	r14
    2bbc:	ff 92       	push	r15
    2bbe:	0f 93       	push	r16
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	8b 01       	movw	r16, r22
    2bc8:	ea 01       	movw	r28, r20
    2bca:	61 15       	cp	r22, r1
    2bcc:	71 05       	cpc	r23, r1
    2bce:	21 f0       	breq	.+8      	; 0x2bd8 <strtol+0x34>
    2bd0:	db 01       	movw	r26, r22
    2bd2:	8c 93       	st	X, r24
    2bd4:	11 96       	adiw	r26, 0x01	; 1
    2bd6:	9c 93       	st	X, r25
    2bd8:	20 97       	sbiw	r28, 0x00	; 0
    2bda:	39 f0       	breq	.+14     	; 0x2bea <strtol+0x46>
    2bdc:	9e 01       	movw	r18, r28
    2bde:	22 50       	subi	r18, 0x02	; 2
    2be0:	31 09       	sbc	r19, r1
    2be2:	23 32       	cpi	r18, 0x23	; 35
    2be4:	31 05       	cpc	r19, r1
    2be6:	08 f0       	brcs	.+2      	; 0x2bea <strtol+0x46>
    2be8:	fb c0       	rjmp	.+502    	; 0x2de0 <strtol+0x23c>
    2bea:	7c 01       	movw	r14, r24
    2bec:	67 01       	movw	r12, r14
    2bee:	bf ef       	ldi	r27, 0xFF	; 255
    2bf0:	cb 1a       	sub	r12, r27
    2bf2:	db 0a       	sbc	r13, r27
    2bf4:	56 01       	movw	r10, r12
    2bf6:	f7 01       	movw	r30, r14
    2bf8:	60 80       	ld	r6, Z
    2bfa:	86 2d       	mov	r24, r6
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <isspace>
    2c02:	89 2b       	or	r24, r25
    2c04:	11 f0       	breq	.+4      	; 0x2c0a <strtol+0x66>
    2c06:	76 01       	movw	r14, r12
    2c08:	f1 cf       	rjmp	.-30     	; 0x2bec <strtol+0x48>
    2c0a:	fd e2       	ldi	r31, 0x2D	; 45
    2c0c:	6f 12       	cpse	r6, r31
    2c0e:	0a c0       	rjmp	.+20     	; 0x2c24 <strtol+0x80>
    2c10:	57 01       	movw	r10, r14
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	a8 0e       	add	r10, r24
    2c16:	b1 1c       	adc	r11, r1
    2c18:	d7 01       	movw	r26, r14
    2c1a:	11 96       	adiw	r26, 0x01	; 1
    2c1c:	6c 90       	ld	r6, X
    2c1e:	77 24       	eor	r7, r7
    2c20:	73 94       	inc	r7
    2c22:	0b c0       	rjmp	.+22     	; 0x2c3a <strtol+0x96>
    2c24:	bb e2       	ldi	r27, 0x2B	; 43
    2c26:	6b 12       	cpse	r6, r27
    2c28:	07 c0       	rjmp	.+14     	; 0x2c38 <strtol+0x94>
    2c2a:	57 01       	movw	r10, r14
    2c2c:	e2 e0       	ldi	r30, 0x02	; 2
    2c2e:	ae 0e       	add	r10, r30
    2c30:	b1 1c       	adc	r11, r1
    2c32:	d7 01       	movw	r26, r14
    2c34:	11 96       	adiw	r26, 0x01	; 1
    2c36:	6c 90       	ld	r6, X
    2c38:	71 2c       	mov	r7, r1
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	8f 7e       	andi	r24, 0xEF	; 239
    2c3e:	89 2b       	or	r24, r25
    2c40:	89 f4       	brne	.+34     	; 0x2c64 <strtol+0xc0>
    2c42:	b0 e3       	ldi	r27, 0x30	; 48
    2c44:	6b 12       	cpse	r6, r27
    2c46:	22 c0       	rjmp	.+68     	; 0x2c8c <strtol+0xe8>
    2c48:	f5 01       	movw	r30, r10
    2c4a:	80 81       	ld	r24, Z
    2c4c:	8f 7d       	andi	r24, 0xDF	; 223
    2c4e:	88 35       	cpi	r24, 0x58	; 88
    2c50:	41 f5       	brne	.+80     	; 0x2ca2 <strtol+0xfe>
    2c52:	61 80       	ldd	r6, Z+1	; 0x01
    2c54:	f2 e0       	ldi	r31, 0x02	; 2
    2c56:	af 0e       	add	r10, r31
    2c58:	b1 1c       	adc	r11, r1
    2c5a:	87 2d       	mov	r24, r7
    2c5c:	82 60       	ori	r24, 0x02	; 2
    2c5e:	78 2e       	mov	r7, r24
    2c60:	c0 e1       	ldi	r28, 0x10	; 16
    2c62:	d0 e0       	ldi	r29, 0x00	; 0
    2c64:	c8 30       	cpi	r28, 0x08	; 8
    2c66:	d1 05       	cpc	r29, r1
    2c68:	f1 f0       	breq	.+60     	; 0x2ca6 <strtol+0x102>
    2c6a:	4c f4       	brge	.+18     	; 0x2c7e <strtol+0xda>
    2c6c:	c2 30       	cpi	r28, 0x02	; 2
    2c6e:	d1 05       	cpc	r29, r1
    2c70:	11 f5       	brne	.+68     	; 0x2cb6 <strtol+0x112>
    2c72:	c1 2c       	mov	r12, r1
    2c74:	d1 2c       	mov	r13, r1
    2c76:	e1 2c       	mov	r14, r1
    2c78:	b0 e4       	ldi	r27, 0x40	; 64
    2c7a:	fb 2e       	mov	r15, r27
    2c7c:	2f c0       	rjmp	.+94     	; 0x2cdc <strtol+0x138>
    2c7e:	ca 30       	cpi	r28, 0x0A	; 10
    2c80:	d1 05       	cpc	r29, r1
    2c82:	31 f0       	breq	.+12     	; 0x2c90 <strtol+0xec>
    2c84:	c0 31       	cpi	r28, 0x10	; 16
    2c86:	d1 05       	cpc	r29, r1
    2c88:	21 f1       	breq	.+72     	; 0x2cd2 <strtol+0x12e>
    2c8a:	15 c0       	rjmp	.+42     	; 0x2cb6 <strtol+0x112>
    2c8c:	20 97       	sbiw	r28, 0x00	; 0
    2c8e:	51 f7       	brne	.-44     	; 0x2c64 <strtol+0xc0>
    2c90:	ca e0       	ldi	r28, 0x0A	; 10
    2c92:	d0 e0       	ldi	r29, 0x00	; 0
    2c94:	ac ec       	ldi	r26, 0xCC	; 204
    2c96:	ca 2e       	mov	r12, r26
    2c98:	dc 2c       	mov	r13, r12
    2c9a:	ec 2c       	mov	r14, r12
    2c9c:	ac e0       	ldi	r26, 0x0C	; 12
    2c9e:	fa 2e       	mov	r15, r26
    2ca0:	1d c0       	rjmp	.+58     	; 0x2cdc <strtol+0x138>
    2ca2:	20 97       	sbiw	r28, 0x00	; 0
    2ca4:	f9 f6       	brne	.-66     	; 0x2c64 <strtol+0xc0>
    2ca6:	c8 e0       	ldi	r28, 0x08	; 8
    2ca8:	d0 e0       	ldi	r29, 0x00	; 0
    2caa:	c1 2c       	mov	r12, r1
    2cac:	d1 2c       	mov	r13, r1
    2cae:	e1 2c       	mov	r14, r1
    2cb0:	f0 e1       	ldi	r31, 0x10	; 16
    2cb2:	ff 2e       	mov	r15, r31
    2cb4:	13 c0       	rjmp	.+38     	; 0x2cdc <strtol+0x138>
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e8       	ldi	r25, 0x80	; 128
    2cbe:	9e 01       	movw	r18, r28
    2cc0:	44 27       	eor	r20, r20
    2cc2:	37 fd       	sbrc	r19, 7
    2cc4:	40 95       	com	r20
    2cc6:	54 2f       	mov	r21, r20
    2cc8:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <__udivmodsi4>
    2ccc:	69 01       	movw	r12, r18
    2cce:	7a 01       	movw	r14, r20
    2cd0:	05 c0       	rjmp	.+10     	; 0x2cdc <strtol+0x138>
    2cd2:	c1 2c       	mov	r12, r1
    2cd4:	d1 2c       	mov	r13, r1
    2cd6:	e1 2c       	mov	r14, r1
    2cd8:	e8 e0       	ldi	r30, 0x08	; 8
    2cda:	fe 2e       	mov	r15, r30
    2cdc:	f5 01       	movw	r30, r10
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	a9 01       	movw	r20, r18
    2ce6:	4e 01       	movw	r8, r28
    2ce8:	aa 24       	eor	r10, r10
    2cea:	97 fc       	sbrc	r9, 7
    2cec:	a0 94       	com	r10
    2cee:	ba 2c       	mov	r11, r10
    2cf0:	1f 01       	movw	r2, r30
    2cf2:	70 ed       	ldi	r23, 0xD0	; 208
    2cf4:	57 2e       	mov	r5, r23
    2cf6:	56 0c       	add	r5, r6
    2cf8:	a9 e0       	ldi	r26, 0x09	; 9
    2cfa:	a5 15       	cp	r26, r5
    2cfc:	70 f4       	brcc	.+28     	; 0x2d1a <strtol+0x176>
    2cfe:	8f eb       	ldi	r24, 0xBF	; 191
    2d00:	86 0d       	add	r24, r6
    2d02:	8a 31       	cpi	r24, 0x1A	; 26
    2d04:	18 f4       	brcc	.+6      	; 0x2d0c <strtol+0x168>
    2d06:	99 ec       	ldi	r25, 0xC9	; 201
    2d08:	59 2e       	mov	r5, r25
    2d0a:	06 c0       	rjmp	.+12     	; 0x2d18 <strtol+0x174>
    2d0c:	8f e9       	ldi	r24, 0x9F	; 159
    2d0e:	86 0d       	add	r24, r6
    2d10:	8a 31       	cpi	r24, 0x1A	; 26
    2d12:	30 f5       	brcc	.+76     	; 0x2d60 <strtol+0x1bc>
    2d14:	89 ea       	ldi	r24, 0xA9	; 169
    2d16:	58 2e       	mov	r5, r24
    2d18:	56 0c       	add	r5, r6
    2d1a:	85 2d       	mov	r24, r5
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	8c 17       	cp	r24, r28
    2d20:	9d 07       	cpc	r25, r29
    2d22:	f4 f4       	brge	.+60     	; 0x2d60 <strtol+0x1bc>
    2d24:	67 fd       	sbrc	r22, 7
    2d26:	18 c0       	rjmp	.+48     	; 0x2d58 <strtol+0x1b4>
    2d28:	c2 16       	cp	r12, r18
    2d2a:	d3 06       	cpc	r13, r19
    2d2c:	e4 06       	cpc	r14, r20
    2d2e:	f5 06       	cpc	r15, r21
    2d30:	80 f0       	brcs	.+32     	; 0x2d52 <strtol+0x1ae>
    2d32:	c5 01       	movw	r24, r10
    2d34:	b4 01       	movw	r22, r8
    2d36:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__mulsi3>
    2d3a:	9b 01       	movw	r18, r22
    2d3c:	ac 01       	movw	r20, r24
    2d3e:	25 0d       	add	r18, r5
    2d40:	31 1d       	adc	r19, r1
    2d42:	41 1d       	adc	r20, r1
    2d44:	51 1d       	adc	r21, r1
    2d46:	21 30       	cpi	r18, 0x01	; 1
    2d48:	31 05       	cpc	r19, r1
    2d4a:	41 05       	cpc	r20, r1
    2d4c:	b0 e8       	ldi	r27, 0x80	; 128
    2d4e:	5b 07       	cpc	r21, r27
    2d50:	10 f0       	brcs	.+4      	; 0x2d56 <strtol+0x1b2>
    2d52:	6f ef       	ldi	r22, 0xFF	; 255
    2d54:	01 c0       	rjmp	.+2      	; 0x2d58 <strtol+0x1b4>
    2d56:	61 e0       	ldi	r22, 0x01	; 1
    2d58:	31 96       	adiw	r30, 0x01	; 1
    2d5a:	d1 01       	movw	r26, r2
    2d5c:	6c 90       	ld	r6, X
    2d5e:	c8 cf       	rjmp	.-112    	; 0x2cf0 <strtol+0x14c>
    2d60:	87 2d       	mov	r24, r7
    2d62:	81 70       	andi	r24, 0x01	; 1
    2d64:	01 15       	cp	r16, r1
    2d66:	11 05       	cpc	r17, r1
    2d68:	71 f0       	breq	.+28     	; 0x2d86 <strtol+0x1e2>
    2d6a:	66 23       	and	r22, r22
    2d6c:	29 f0       	breq	.+10     	; 0x2d78 <strtol+0x1d4>
    2d6e:	31 97       	sbiw	r30, 0x01	; 1
    2d70:	d8 01       	movw	r26, r16
    2d72:	ed 93       	st	X+, r30
    2d74:	fc 93       	st	X, r31
    2d76:	07 c0       	rjmp	.+14     	; 0x2d86 <strtol+0x1e2>
    2d78:	71 fe       	sbrs	r7, 1
    2d7a:	19 c0       	rjmp	.+50     	; 0x2dae <strtol+0x20a>
    2d7c:	32 97       	sbiw	r30, 0x02	; 2
    2d7e:	d8 01       	movw	r26, r16
    2d80:	ed 93       	st	X+, r30
    2d82:	fc 93       	st	X, r31
    2d84:	14 c0       	rjmp	.+40     	; 0x2dae <strtol+0x20a>
    2d86:	67 ff       	sbrs	r22, 7
    2d88:	12 c0       	rjmp	.+36     	; 0x2dae <strtol+0x20a>
    2d8a:	88 23       	and	r24, r24
    2d8c:	29 f0       	breq	.+10     	; 0x2d98 <strtol+0x1f4>
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	50 e8       	ldi	r21, 0x80	; 128
    2d96:	04 c0       	rjmp	.+8      	; 0x2da0 <strtol+0x1fc>
    2d98:	2f ef       	ldi	r18, 0xFF	; 255
    2d9a:	3f ef       	ldi	r19, 0xFF	; 255
    2d9c:	4f ef       	ldi	r20, 0xFF	; 255
    2d9e:	5f e7       	ldi	r21, 0x7F	; 127
    2da0:	82 e2       	ldi	r24, 0x22	; 34
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	90 93 c7 00 	sts	0x00C7, r25
    2da8:	80 93 c6 00 	sts	0x00C6, r24
    2dac:	16 c0       	rjmp	.+44     	; 0x2dda <strtol+0x236>
    2dae:	88 23       	and	r24, r24
    2db0:	41 f0       	breq	.+16     	; 0x2dc2 <strtol+0x21e>
    2db2:	50 95       	com	r21
    2db4:	40 95       	com	r20
    2db6:	30 95       	com	r19
    2db8:	21 95       	neg	r18
    2dba:	3f 4f       	sbci	r19, 0xFF	; 255
    2dbc:	4f 4f       	sbci	r20, 0xFF	; 255
    2dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc0:	0c c0       	rjmp	.+24     	; 0x2dda <strtol+0x236>
    2dc2:	57 ff       	sbrs	r21, 7
    2dc4:	0a c0       	rjmp	.+20     	; 0x2dda <strtol+0x236>
    2dc6:	82 e2       	ldi	r24, 0x22	; 34
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	90 93 c7 00 	sts	0x00C7, r25
    2dce:	80 93 c6 00 	sts	0x00C6, r24
    2dd2:	2f ef       	ldi	r18, 0xFF	; 255
    2dd4:	3f ef       	ldi	r19, 0xFF	; 255
    2dd6:	4f ef       	ldi	r20, 0xFF	; 255
    2dd8:	5f e7       	ldi	r21, 0x7F	; 127
    2dda:	b9 01       	movw	r22, r18
    2ddc:	ca 01       	movw	r24, r20
    2dde:	04 c0       	rjmp	.+8      	; 0x2de8 <strtol+0x244>
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	1f 91       	pop	r17
    2dee:	0f 91       	pop	r16
    2df0:	ff 90       	pop	r15
    2df2:	ef 90       	pop	r14
    2df4:	df 90       	pop	r13
    2df6:	cf 90       	pop	r12
    2df8:	bf 90       	pop	r11
    2dfa:	af 90       	pop	r10
    2dfc:	9f 90       	pop	r9
    2dfe:	8f 90       	pop	r8
    2e00:	7f 90       	pop	r7
    2e02:	6f 90       	pop	r6
    2e04:	5f 90       	pop	r5
    2e06:	3f 90       	pop	r3
    2e08:	2f 90       	pop	r2
    2e0a:	08 95       	ret

00002e0c <isspace>:
    2e0c:	91 11       	cpse	r25, r1
    2e0e:	05 c2       	rjmp	.+1034   	; 0x321a <__ctype_isfalse>
    2e10:	80 32       	cpi	r24, 0x20	; 32
    2e12:	19 f0       	breq	.+6      	; 0x2e1a <isspace+0xe>
    2e14:	89 50       	subi	r24, 0x09	; 9
    2e16:	85 50       	subi	r24, 0x05	; 5
    2e18:	d0 f7       	brcc	.-12     	; 0x2e0e <isspace+0x2>
    2e1a:	08 95       	ret

00002e1c <sprintf>:
    2e1c:	ae e0       	ldi	r26, 0x0E	; 14
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e4 e1       	ldi	r30, 0x14	; 20
    2e22:	f7 e1       	ldi	r31, 0x17	; 23
    2e24:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__prologue_saves__+0x1c>
    2e28:	0d 89       	ldd	r16, Y+21	; 0x15
    2e2a:	1e 89       	ldd	r17, Y+22	; 0x16
    2e2c:	86 e0       	ldi	r24, 0x06	; 6
    2e2e:	8c 83       	std	Y+4, r24	; 0x04
    2e30:	1a 83       	std	Y+2, r17	; 0x02
    2e32:	09 83       	std	Y+1, r16	; 0x01
    2e34:	8f ef       	ldi	r24, 0xFF	; 255
    2e36:	9f e7       	ldi	r25, 0x7F	; 127
    2e38:	9e 83       	std	Y+6, r25	; 0x06
    2e3a:	8d 83       	std	Y+5, r24	; 0x05
    2e3c:	ae 01       	movw	r20, r28
    2e3e:	47 5e       	subi	r20, 0xE7	; 231
    2e40:	5f 4f       	sbci	r21, 0xFF	; 255
    2e42:	6f 89       	ldd	r22, Y+23	; 0x17
    2e44:	78 8d       	ldd	r23, Y+24	; 0x18
    2e46:	ce 01       	movw	r24, r28
    2e48:	01 96       	adiw	r24, 0x01	; 1
    2e4a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <vfprintf>
    2e4e:	ef 81       	ldd	r30, Y+7	; 0x07
    2e50:	f8 85       	ldd	r31, Y+8	; 0x08
    2e52:	e0 0f       	add	r30, r16
    2e54:	f1 1f       	adc	r31, r17
    2e56:	10 82       	st	Z, r1
    2e58:	2e 96       	adiw	r28, 0x0e	; 14
    2e5a:	e4 e0       	ldi	r30, 0x04	; 4
    2e5c:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__epilogue_restores__+0x1c>

00002e60 <vfprintf>:
    2e60:	ac e0       	ldi	r26, 0x0C	; 12
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e6 e3       	ldi	r30, 0x36	; 54
    2e66:	f7 e1       	ldi	r31, 0x17	; 23
    2e68:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__prologue_saves__>
    2e6c:	7c 01       	movw	r14, r24
    2e6e:	6b 01       	movw	r12, r22
    2e70:	8a 01       	movw	r16, r20
    2e72:	fc 01       	movw	r30, r24
    2e74:	17 82       	std	Z+7, r1	; 0x07
    2e76:	16 82       	std	Z+6, r1	; 0x06
    2e78:	83 81       	ldd	r24, Z+3	; 0x03
    2e7a:	81 ff       	sbrs	r24, 1
    2e7c:	bd c1       	rjmp	.+890    	; 0x31f8 <vfprintf+0x398>
    2e7e:	ce 01       	movw	r24, r28
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	4c 01       	movw	r8, r24
    2e84:	f7 01       	movw	r30, r14
    2e86:	93 81       	ldd	r25, Z+3	; 0x03
    2e88:	f6 01       	movw	r30, r12
    2e8a:	93 fd       	sbrc	r25, 3
    2e8c:	85 91       	lpm	r24, Z+
    2e8e:	93 ff       	sbrs	r25, 3
    2e90:	81 91       	ld	r24, Z+
    2e92:	6f 01       	movw	r12, r30
    2e94:	88 23       	and	r24, r24
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <vfprintf+0x3a>
    2e98:	ab c1       	rjmp	.+854    	; 0x31f0 <vfprintf+0x390>
    2e9a:	85 32       	cpi	r24, 0x25	; 37
    2e9c:	39 f4       	brne	.+14     	; 0x2eac <vfprintf+0x4c>
    2e9e:	93 fd       	sbrc	r25, 3
    2ea0:	85 91       	lpm	r24, Z+
    2ea2:	93 ff       	sbrs	r25, 3
    2ea4:	81 91       	ld	r24, Z+
    2ea6:	6f 01       	movw	r12, r30
    2ea8:	85 32       	cpi	r24, 0x25	; 37
    2eaa:	29 f4       	brne	.+10     	; 0x2eb6 <vfprintf+0x56>
    2eac:	b7 01       	movw	r22, r14
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    2eb4:	e7 cf       	rjmp	.-50     	; 0x2e84 <vfprintf+0x24>
    2eb6:	51 2c       	mov	r5, r1
    2eb8:	31 2c       	mov	r3, r1
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	20 32       	cpi	r18, 0x20	; 32
    2ebe:	a0 f4       	brcc	.+40     	; 0x2ee8 <vfprintf+0x88>
    2ec0:	8b 32       	cpi	r24, 0x2B	; 43
    2ec2:	69 f0       	breq	.+26     	; 0x2ede <vfprintf+0x7e>
    2ec4:	30 f4       	brcc	.+12     	; 0x2ed2 <vfprintf+0x72>
    2ec6:	80 32       	cpi	r24, 0x20	; 32
    2ec8:	59 f0       	breq	.+22     	; 0x2ee0 <vfprintf+0x80>
    2eca:	83 32       	cpi	r24, 0x23	; 35
    2ecc:	69 f4       	brne	.+26     	; 0x2ee8 <vfprintf+0x88>
    2ece:	20 61       	ori	r18, 0x10	; 16
    2ed0:	2c c0       	rjmp	.+88     	; 0x2f2a <vfprintf+0xca>
    2ed2:	8d 32       	cpi	r24, 0x2D	; 45
    2ed4:	39 f0       	breq	.+14     	; 0x2ee4 <vfprintf+0x84>
    2ed6:	80 33       	cpi	r24, 0x30	; 48
    2ed8:	39 f4       	brne	.+14     	; 0x2ee8 <vfprintf+0x88>
    2eda:	21 60       	ori	r18, 0x01	; 1
    2edc:	26 c0       	rjmp	.+76     	; 0x2f2a <vfprintf+0xca>
    2ede:	22 60       	ori	r18, 0x02	; 2
    2ee0:	24 60       	ori	r18, 0x04	; 4
    2ee2:	23 c0       	rjmp	.+70     	; 0x2f2a <vfprintf+0xca>
    2ee4:	28 60       	ori	r18, 0x08	; 8
    2ee6:	21 c0       	rjmp	.+66     	; 0x2f2a <vfprintf+0xca>
    2ee8:	27 fd       	sbrc	r18, 7
    2eea:	27 c0       	rjmp	.+78     	; 0x2f3a <vfprintf+0xda>
    2eec:	30 ed       	ldi	r19, 0xD0	; 208
    2eee:	38 0f       	add	r19, r24
    2ef0:	3a 30       	cpi	r19, 0x0A	; 10
    2ef2:	78 f4       	brcc	.+30     	; 0x2f12 <vfprintf+0xb2>
    2ef4:	26 ff       	sbrs	r18, 6
    2ef6:	06 c0       	rjmp	.+12     	; 0x2f04 <vfprintf+0xa4>
    2ef8:	fa e0       	ldi	r31, 0x0A	; 10
    2efa:	5f 9e       	mul	r5, r31
    2efc:	30 0d       	add	r19, r0
    2efe:	11 24       	eor	r1, r1
    2f00:	53 2e       	mov	r5, r19
    2f02:	13 c0       	rjmp	.+38     	; 0x2f2a <vfprintf+0xca>
    2f04:	8a e0       	ldi	r24, 0x0A	; 10
    2f06:	38 9e       	mul	r3, r24
    2f08:	30 0d       	add	r19, r0
    2f0a:	11 24       	eor	r1, r1
    2f0c:	33 2e       	mov	r3, r19
    2f0e:	20 62       	ori	r18, 0x20	; 32
    2f10:	0c c0       	rjmp	.+24     	; 0x2f2a <vfprintf+0xca>
    2f12:	8e 32       	cpi	r24, 0x2E	; 46
    2f14:	21 f4       	brne	.+8      	; 0x2f1e <vfprintf+0xbe>
    2f16:	26 fd       	sbrc	r18, 6
    2f18:	6b c1       	rjmp	.+726    	; 0x31f0 <vfprintf+0x390>
    2f1a:	20 64       	ori	r18, 0x40	; 64
    2f1c:	06 c0       	rjmp	.+12     	; 0x2f2a <vfprintf+0xca>
    2f1e:	8c 36       	cpi	r24, 0x6C	; 108
    2f20:	11 f4       	brne	.+4      	; 0x2f26 <vfprintf+0xc6>
    2f22:	20 68       	ori	r18, 0x80	; 128
    2f24:	02 c0       	rjmp	.+4      	; 0x2f2a <vfprintf+0xca>
    2f26:	88 36       	cpi	r24, 0x68	; 104
    2f28:	41 f4       	brne	.+16     	; 0x2f3a <vfprintf+0xda>
    2f2a:	f6 01       	movw	r30, r12
    2f2c:	93 fd       	sbrc	r25, 3
    2f2e:	85 91       	lpm	r24, Z+
    2f30:	93 ff       	sbrs	r25, 3
    2f32:	81 91       	ld	r24, Z+
    2f34:	6f 01       	movw	r12, r30
    2f36:	81 11       	cpse	r24, r1
    2f38:	c1 cf       	rjmp	.-126    	; 0x2ebc <vfprintf+0x5c>
    2f3a:	98 2f       	mov	r25, r24
    2f3c:	9f 7d       	andi	r25, 0xDF	; 223
    2f3e:	95 54       	subi	r25, 0x45	; 69
    2f40:	93 30       	cpi	r25, 0x03	; 3
    2f42:	28 f4       	brcc	.+10     	; 0x2f4e <vfprintf+0xee>
    2f44:	0c 5f       	subi	r16, 0xFC	; 252
    2f46:	1f 4f       	sbci	r17, 0xFF	; 255
    2f48:	ff e3       	ldi	r31, 0x3F	; 63
    2f4a:	f9 83       	std	Y+1, r31	; 0x01
    2f4c:	0d c0       	rjmp	.+26     	; 0x2f68 <vfprintf+0x108>
    2f4e:	83 36       	cpi	r24, 0x63	; 99
    2f50:	31 f0       	breq	.+12     	; 0x2f5e <vfprintf+0xfe>
    2f52:	83 37       	cpi	r24, 0x73	; 115
    2f54:	71 f0       	breq	.+28     	; 0x2f72 <vfprintf+0x112>
    2f56:	83 35       	cpi	r24, 0x53	; 83
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <vfprintf+0xfc>
    2f5a:	5b c0       	rjmp	.+182    	; 0x3012 <vfprintf+0x1b2>
    2f5c:	22 c0       	rjmp	.+68     	; 0x2fa2 <vfprintf+0x142>
    2f5e:	f8 01       	movw	r30, r16
    2f60:	80 81       	ld	r24, Z
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	0e 5f       	subi	r16, 0xFE	; 254
    2f66:	1f 4f       	sbci	r17, 0xFF	; 255
    2f68:	44 24       	eor	r4, r4
    2f6a:	43 94       	inc	r4
    2f6c:	51 2c       	mov	r5, r1
    2f6e:	54 01       	movw	r10, r8
    2f70:	15 c0       	rjmp	.+42     	; 0x2f9c <vfprintf+0x13c>
    2f72:	38 01       	movw	r6, r16
    2f74:	f2 e0       	ldi	r31, 0x02	; 2
    2f76:	6f 0e       	add	r6, r31
    2f78:	71 1c       	adc	r7, r1
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	a0 80       	ld	r10, Z
    2f7e:	b1 80       	ldd	r11, Z+1	; 0x01
    2f80:	26 ff       	sbrs	r18, 6
    2f82:	03 c0       	rjmp	.+6      	; 0x2f8a <vfprintf+0x12a>
    2f84:	65 2d       	mov	r22, r5
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <vfprintf+0x12e>
    2f8a:	6f ef       	ldi	r22, 0xFF	; 255
    2f8c:	7f ef       	ldi	r23, 0xFF	; 255
    2f8e:	c5 01       	movw	r24, r10
    2f90:	2c 87       	std	Y+12, r18	; 0x0c
    2f92:	0e 94 1b 19 	call	0x3236	; 0x3236 <strnlen>
    2f96:	2c 01       	movw	r4, r24
    2f98:	83 01       	movw	r16, r6
    2f9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f9c:	2f 77       	andi	r18, 0x7F	; 127
    2f9e:	22 2e       	mov	r2, r18
    2fa0:	17 c0       	rjmp	.+46     	; 0x2fd0 <vfprintf+0x170>
    2fa2:	38 01       	movw	r6, r16
    2fa4:	f2 e0       	ldi	r31, 0x02	; 2
    2fa6:	6f 0e       	add	r6, r31
    2fa8:	71 1c       	adc	r7, r1
    2faa:	f8 01       	movw	r30, r16
    2fac:	a0 80       	ld	r10, Z
    2fae:	b1 80       	ldd	r11, Z+1	; 0x01
    2fb0:	26 ff       	sbrs	r18, 6
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <vfprintf+0x15a>
    2fb4:	65 2d       	mov	r22, r5
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <vfprintf+0x15e>
    2fba:	6f ef       	ldi	r22, 0xFF	; 255
    2fbc:	7f ef       	ldi	r23, 0xFF	; 255
    2fbe:	c5 01       	movw	r24, r10
    2fc0:	2c 87       	std	Y+12, r18	; 0x0c
    2fc2:	0e 94 10 19 	call	0x3220	; 0x3220 <strnlen_P>
    2fc6:	2c 01       	movw	r4, r24
    2fc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fca:	20 68       	ori	r18, 0x80	; 128
    2fcc:	22 2e       	mov	r2, r18
    2fce:	83 01       	movw	r16, r6
    2fd0:	23 fc       	sbrc	r2, 3
    2fd2:	1b c0       	rjmp	.+54     	; 0x300a <vfprintf+0x1aa>
    2fd4:	83 2d       	mov	r24, r3
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	48 16       	cp	r4, r24
    2fda:	59 06       	cpc	r5, r25
    2fdc:	b0 f4       	brcc	.+44     	; 0x300a <vfprintf+0x1aa>
    2fde:	b7 01       	movw	r22, r14
    2fe0:	80 e2       	ldi	r24, 0x20	; 32
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    2fe8:	3a 94       	dec	r3
    2fea:	f4 cf       	rjmp	.-24     	; 0x2fd4 <vfprintf+0x174>
    2fec:	f5 01       	movw	r30, r10
    2fee:	27 fc       	sbrc	r2, 7
    2ff0:	85 91       	lpm	r24, Z+
    2ff2:	27 fe       	sbrs	r2, 7
    2ff4:	81 91       	ld	r24, Z+
    2ff6:	5f 01       	movw	r10, r30
    2ff8:	b7 01       	movw	r22, r14
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    3000:	31 10       	cpse	r3, r1
    3002:	3a 94       	dec	r3
    3004:	f1 e0       	ldi	r31, 0x01	; 1
    3006:	4f 1a       	sub	r4, r31
    3008:	51 08       	sbc	r5, r1
    300a:	41 14       	cp	r4, r1
    300c:	51 04       	cpc	r5, r1
    300e:	71 f7       	brne	.-36     	; 0x2fec <vfprintf+0x18c>
    3010:	e5 c0       	rjmp	.+458    	; 0x31dc <vfprintf+0x37c>
    3012:	84 36       	cpi	r24, 0x64	; 100
    3014:	11 f0       	breq	.+4      	; 0x301a <vfprintf+0x1ba>
    3016:	89 36       	cpi	r24, 0x69	; 105
    3018:	39 f5       	brne	.+78     	; 0x3068 <vfprintf+0x208>
    301a:	f8 01       	movw	r30, r16
    301c:	27 ff       	sbrs	r18, 7
    301e:	07 c0       	rjmp	.+14     	; 0x302e <vfprintf+0x1ce>
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	0c 5f       	subi	r16, 0xFC	; 252
    302a:	1f 4f       	sbci	r17, 0xFF	; 255
    302c:	08 c0       	rjmp	.+16     	; 0x303e <vfprintf+0x1de>
    302e:	60 81       	ld	r22, Z
    3030:	71 81       	ldd	r23, Z+1	; 0x01
    3032:	88 27       	eor	r24, r24
    3034:	77 fd       	sbrc	r23, 7
    3036:	80 95       	com	r24
    3038:	98 2f       	mov	r25, r24
    303a:	0e 5f       	subi	r16, 0xFE	; 254
    303c:	1f 4f       	sbci	r17, 0xFF	; 255
    303e:	2f 76       	andi	r18, 0x6F	; 111
    3040:	b2 2e       	mov	r11, r18
    3042:	97 ff       	sbrs	r25, 7
    3044:	09 c0       	rjmp	.+18     	; 0x3058 <vfprintf+0x1f8>
    3046:	90 95       	com	r25
    3048:	80 95       	com	r24
    304a:	70 95       	com	r23
    304c:	61 95       	neg	r22
    304e:	7f 4f       	sbci	r23, 0xFF	; 255
    3050:	8f 4f       	sbci	r24, 0xFF	; 255
    3052:	9f 4f       	sbci	r25, 0xFF	; 255
    3054:	20 68       	ori	r18, 0x80	; 128
    3056:	b2 2e       	mov	r11, r18
    3058:	2a e0       	ldi	r18, 0x0A	; 10
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	a4 01       	movw	r20, r8
    305e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__ultoa_invert>
    3062:	a8 2e       	mov	r10, r24
    3064:	a8 18       	sub	r10, r8
    3066:	44 c0       	rjmp	.+136    	; 0x30f0 <vfprintf+0x290>
    3068:	85 37       	cpi	r24, 0x75	; 117
    306a:	29 f4       	brne	.+10     	; 0x3076 <vfprintf+0x216>
    306c:	2f 7e       	andi	r18, 0xEF	; 239
    306e:	b2 2e       	mov	r11, r18
    3070:	2a e0       	ldi	r18, 0x0A	; 10
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	25 c0       	rjmp	.+74     	; 0x30c0 <vfprintf+0x260>
    3076:	f2 2f       	mov	r31, r18
    3078:	f9 7f       	andi	r31, 0xF9	; 249
    307a:	bf 2e       	mov	r11, r31
    307c:	8f 36       	cpi	r24, 0x6F	; 111
    307e:	c1 f0       	breq	.+48     	; 0x30b0 <vfprintf+0x250>
    3080:	18 f4       	brcc	.+6      	; 0x3088 <vfprintf+0x228>
    3082:	88 35       	cpi	r24, 0x58	; 88
    3084:	79 f0       	breq	.+30     	; 0x30a4 <vfprintf+0x244>
    3086:	b4 c0       	rjmp	.+360    	; 0x31f0 <vfprintf+0x390>
    3088:	80 37       	cpi	r24, 0x70	; 112
    308a:	19 f0       	breq	.+6      	; 0x3092 <vfprintf+0x232>
    308c:	88 37       	cpi	r24, 0x78	; 120
    308e:	21 f0       	breq	.+8      	; 0x3098 <vfprintf+0x238>
    3090:	af c0       	rjmp	.+350    	; 0x31f0 <vfprintf+0x390>
    3092:	2f 2f       	mov	r18, r31
    3094:	20 61       	ori	r18, 0x10	; 16
    3096:	b2 2e       	mov	r11, r18
    3098:	b4 fe       	sbrs	r11, 4
    309a:	0d c0       	rjmp	.+26     	; 0x30b6 <vfprintf+0x256>
    309c:	8b 2d       	mov	r24, r11
    309e:	84 60       	ori	r24, 0x04	; 4
    30a0:	b8 2e       	mov	r11, r24
    30a2:	09 c0       	rjmp	.+18     	; 0x30b6 <vfprintf+0x256>
    30a4:	24 ff       	sbrs	r18, 4
    30a6:	0a c0       	rjmp	.+20     	; 0x30bc <vfprintf+0x25c>
    30a8:	9f 2f       	mov	r25, r31
    30aa:	96 60       	ori	r25, 0x06	; 6
    30ac:	b9 2e       	mov	r11, r25
    30ae:	06 c0       	rjmp	.+12     	; 0x30bc <vfprintf+0x25c>
    30b0:	28 e0       	ldi	r18, 0x08	; 8
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	05 c0       	rjmp	.+10     	; 0x30c0 <vfprintf+0x260>
    30b6:	20 e1       	ldi	r18, 0x10	; 16
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <vfprintf+0x260>
    30bc:	20 e1       	ldi	r18, 0x10	; 16
    30be:	32 e0       	ldi	r19, 0x02	; 2
    30c0:	f8 01       	movw	r30, r16
    30c2:	b7 fe       	sbrs	r11, 7
    30c4:	07 c0       	rjmp	.+14     	; 0x30d4 <vfprintf+0x274>
    30c6:	60 81       	ld	r22, Z
    30c8:	71 81       	ldd	r23, Z+1	; 0x01
    30ca:	82 81       	ldd	r24, Z+2	; 0x02
    30cc:	93 81       	ldd	r25, Z+3	; 0x03
    30ce:	0c 5f       	subi	r16, 0xFC	; 252
    30d0:	1f 4f       	sbci	r17, 0xFF	; 255
    30d2:	06 c0       	rjmp	.+12     	; 0x30e0 <vfprintf+0x280>
    30d4:	60 81       	ld	r22, Z
    30d6:	71 81       	ldd	r23, Z+1	; 0x01
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	0e 5f       	subi	r16, 0xFE	; 254
    30de:	1f 4f       	sbci	r17, 0xFF	; 255
    30e0:	a4 01       	movw	r20, r8
    30e2:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__ultoa_invert>
    30e6:	a8 2e       	mov	r10, r24
    30e8:	a8 18       	sub	r10, r8
    30ea:	fb 2d       	mov	r31, r11
    30ec:	ff 77       	andi	r31, 0x7F	; 127
    30ee:	bf 2e       	mov	r11, r31
    30f0:	b6 fe       	sbrs	r11, 6
    30f2:	0b c0       	rjmp	.+22     	; 0x310a <vfprintf+0x2aa>
    30f4:	2b 2d       	mov	r18, r11
    30f6:	2e 7f       	andi	r18, 0xFE	; 254
    30f8:	a5 14       	cp	r10, r5
    30fa:	50 f4       	brcc	.+20     	; 0x3110 <vfprintf+0x2b0>
    30fc:	b4 fe       	sbrs	r11, 4
    30fe:	0a c0       	rjmp	.+20     	; 0x3114 <vfprintf+0x2b4>
    3100:	b2 fc       	sbrc	r11, 2
    3102:	08 c0       	rjmp	.+16     	; 0x3114 <vfprintf+0x2b4>
    3104:	2b 2d       	mov	r18, r11
    3106:	2e 7e       	andi	r18, 0xEE	; 238
    3108:	05 c0       	rjmp	.+10     	; 0x3114 <vfprintf+0x2b4>
    310a:	7a 2c       	mov	r7, r10
    310c:	2b 2d       	mov	r18, r11
    310e:	03 c0       	rjmp	.+6      	; 0x3116 <vfprintf+0x2b6>
    3110:	7a 2c       	mov	r7, r10
    3112:	01 c0       	rjmp	.+2      	; 0x3116 <vfprintf+0x2b6>
    3114:	75 2c       	mov	r7, r5
    3116:	24 ff       	sbrs	r18, 4
    3118:	0d c0       	rjmp	.+26     	; 0x3134 <vfprintf+0x2d4>
    311a:	fe 01       	movw	r30, r28
    311c:	ea 0d       	add	r30, r10
    311e:	f1 1d       	adc	r31, r1
    3120:	80 81       	ld	r24, Z
    3122:	80 33       	cpi	r24, 0x30	; 48
    3124:	11 f4       	brne	.+4      	; 0x312a <vfprintf+0x2ca>
    3126:	29 7e       	andi	r18, 0xE9	; 233
    3128:	09 c0       	rjmp	.+18     	; 0x313c <vfprintf+0x2dc>
    312a:	22 ff       	sbrs	r18, 2
    312c:	06 c0       	rjmp	.+12     	; 0x313a <vfprintf+0x2da>
    312e:	73 94       	inc	r7
    3130:	73 94       	inc	r7
    3132:	04 c0       	rjmp	.+8      	; 0x313c <vfprintf+0x2dc>
    3134:	82 2f       	mov	r24, r18
    3136:	86 78       	andi	r24, 0x86	; 134
    3138:	09 f0       	breq	.+2      	; 0x313c <vfprintf+0x2dc>
    313a:	73 94       	inc	r7
    313c:	23 fd       	sbrc	r18, 3
    313e:	13 c0       	rjmp	.+38     	; 0x3166 <vfprintf+0x306>
    3140:	20 ff       	sbrs	r18, 0
    3142:	06 c0       	rjmp	.+12     	; 0x3150 <vfprintf+0x2f0>
    3144:	5a 2c       	mov	r5, r10
    3146:	73 14       	cp	r7, r3
    3148:	18 f4       	brcc	.+6      	; 0x3150 <vfprintf+0x2f0>
    314a:	53 0c       	add	r5, r3
    314c:	57 18       	sub	r5, r7
    314e:	73 2c       	mov	r7, r3
    3150:	73 14       	cp	r7, r3
    3152:	68 f4       	brcc	.+26     	; 0x316e <vfprintf+0x30e>
    3154:	b7 01       	movw	r22, r14
    3156:	80 e2       	ldi	r24, 0x20	; 32
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	2c 87       	std	Y+12, r18	; 0x0c
    315c:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    3160:	73 94       	inc	r7
    3162:	2c 85       	ldd	r18, Y+12	; 0x0c
    3164:	f5 cf       	rjmp	.-22     	; 0x3150 <vfprintf+0x2f0>
    3166:	73 14       	cp	r7, r3
    3168:	10 f4       	brcc	.+4      	; 0x316e <vfprintf+0x30e>
    316a:	37 18       	sub	r3, r7
    316c:	01 c0       	rjmp	.+2      	; 0x3170 <vfprintf+0x310>
    316e:	31 2c       	mov	r3, r1
    3170:	24 ff       	sbrs	r18, 4
    3172:	12 c0       	rjmp	.+36     	; 0x3198 <vfprintf+0x338>
    3174:	b7 01       	movw	r22, r14
    3176:	80 e3       	ldi	r24, 0x30	; 48
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	2c 87       	std	Y+12, r18	; 0x0c
    317c:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    3180:	2c 85       	ldd	r18, Y+12	; 0x0c
    3182:	22 ff       	sbrs	r18, 2
    3184:	17 c0       	rjmp	.+46     	; 0x31b4 <vfprintf+0x354>
    3186:	21 ff       	sbrs	r18, 1
    3188:	03 c0       	rjmp	.+6      	; 0x3190 <vfprintf+0x330>
    318a:	88 e5       	ldi	r24, 0x58	; 88
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <vfprintf+0x334>
    3190:	88 e7       	ldi	r24, 0x78	; 120
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	b7 01       	movw	r22, r14
    3196:	0c c0       	rjmp	.+24     	; 0x31b0 <vfprintf+0x350>
    3198:	82 2f       	mov	r24, r18
    319a:	86 78       	andi	r24, 0x86	; 134
    319c:	59 f0       	breq	.+22     	; 0x31b4 <vfprintf+0x354>
    319e:	21 fd       	sbrc	r18, 1
    31a0:	02 c0       	rjmp	.+4      	; 0x31a6 <vfprintf+0x346>
    31a2:	80 e2       	ldi	r24, 0x20	; 32
    31a4:	01 c0       	rjmp	.+2      	; 0x31a8 <vfprintf+0x348>
    31a6:	8b e2       	ldi	r24, 0x2B	; 43
    31a8:	27 fd       	sbrc	r18, 7
    31aa:	8d e2       	ldi	r24, 0x2D	; 45
    31ac:	b7 01       	movw	r22, r14
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    31b4:	a5 14       	cp	r10, r5
    31b6:	38 f4       	brcc	.+14     	; 0x31c6 <vfprintf+0x366>
    31b8:	b7 01       	movw	r22, r14
    31ba:	80 e3       	ldi	r24, 0x30	; 48
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    31c2:	5a 94       	dec	r5
    31c4:	f7 cf       	rjmp	.-18     	; 0x31b4 <vfprintf+0x354>
    31c6:	aa 94       	dec	r10
    31c8:	f4 01       	movw	r30, r8
    31ca:	ea 0d       	add	r30, r10
    31cc:	f1 1d       	adc	r31, r1
    31ce:	80 81       	ld	r24, Z
    31d0:	b7 01       	movw	r22, r14
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    31d8:	a1 10       	cpse	r10, r1
    31da:	f5 cf       	rjmp	.-22     	; 0x31c6 <vfprintf+0x366>
    31dc:	33 20       	and	r3, r3
    31de:	09 f4       	brne	.+2      	; 0x31e2 <vfprintf+0x382>
    31e0:	51 ce       	rjmp	.-862    	; 0x2e84 <vfprintf+0x24>
    31e2:	b7 01       	movw	r22, r14
    31e4:	80 e2       	ldi	r24, 0x20	; 32
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    31ec:	3a 94       	dec	r3
    31ee:	f6 cf       	rjmp	.-20     	; 0x31dc <vfprintf+0x37c>
    31f0:	f7 01       	movw	r30, r14
    31f2:	86 81       	ldd	r24, Z+6	; 0x06
    31f4:	97 81       	ldd	r25, Z+7	; 0x07
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <vfprintf+0x39c>
    31f8:	8f ef       	ldi	r24, 0xFF	; 255
    31fa:	9f ef       	ldi	r25, 0xFF	; 255
    31fc:	2c 96       	adiw	r28, 0x0c	; 12
    31fe:	e2 e1       	ldi	r30, 0x12	; 18
    3200:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__epilogue_restores__>

00003204 <__eerd_word_m16>:
    3204:	a8 e1       	ldi	r26, 0x18	; 24
    3206:	b0 e0       	ldi	r27, 0x00	; 0
    3208:	42 e0       	ldi	r20, 0x02	; 2
    320a:	50 e0       	ldi	r21, 0x00	; 0
    320c:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <__eerd_blraw_m16>

00003210 <__eewr_word_m16>:
    3210:	0e 94 c6 19 	call	0x338c	; 0x338c <__eewr_byte_m16>
    3214:	27 2f       	mov	r18, r23
    3216:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__eewr_r18_m16>

0000321a <__ctype_isfalse>:
    321a:	99 27       	eor	r25, r25
    321c:	88 27       	eor	r24, r24

0000321e <__ctype_istrue>:
    321e:	08 95       	ret

00003220 <strnlen_P>:
    3220:	fc 01       	movw	r30, r24
    3222:	05 90       	lpm	r0, Z+
    3224:	61 50       	subi	r22, 0x01	; 1
    3226:	70 40       	sbci	r23, 0x00	; 0
    3228:	01 10       	cpse	r0, r1
    322a:	d8 f7       	brcc	.-10     	; 0x3222 <strnlen_P+0x2>
    322c:	80 95       	com	r24
    322e:	90 95       	com	r25
    3230:	8e 0f       	add	r24, r30
    3232:	9f 1f       	adc	r25, r31
    3234:	08 95       	ret

00003236 <strnlen>:
    3236:	fc 01       	movw	r30, r24
    3238:	61 50       	subi	r22, 0x01	; 1
    323a:	70 40       	sbci	r23, 0x00	; 0
    323c:	01 90       	ld	r0, Z+
    323e:	01 10       	cpse	r0, r1
    3240:	d8 f7       	brcc	.-10     	; 0x3238 <strnlen+0x2>
    3242:	80 95       	com	r24
    3244:	90 95       	com	r25
    3246:	8e 0f       	add	r24, r30
    3248:	9f 1f       	adc	r25, r31
    324a:	08 95       	ret

0000324c <fputc>:
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	18 2f       	mov	r17, r24
    3256:	09 2f       	mov	r16, r25
    3258:	eb 01       	movw	r28, r22
    325a:	8b 81       	ldd	r24, Y+3	; 0x03
    325c:	81 fd       	sbrc	r24, 1
    325e:	03 c0       	rjmp	.+6      	; 0x3266 <fputc+0x1a>
    3260:	8f ef       	ldi	r24, 0xFF	; 255
    3262:	9f ef       	ldi	r25, 0xFF	; 255
    3264:	20 c0       	rjmp	.+64     	; 0x32a6 <fputc+0x5a>
    3266:	82 ff       	sbrs	r24, 2
    3268:	10 c0       	rjmp	.+32     	; 0x328a <fputc+0x3e>
    326a:	4e 81       	ldd	r20, Y+6	; 0x06
    326c:	5f 81       	ldd	r21, Y+7	; 0x07
    326e:	2c 81       	ldd	r18, Y+4	; 0x04
    3270:	3d 81       	ldd	r19, Y+5	; 0x05
    3272:	42 17       	cp	r20, r18
    3274:	53 07       	cpc	r21, r19
    3276:	7c f4       	brge	.+30     	; 0x3296 <fputc+0x4a>
    3278:	e8 81       	ld	r30, Y
    327a:	f9 81       	ldd	r31, Y+1	; 0x01
    327c:	9f 01       	movw	r18, r30
    327e:	2f 5f       	subi	r18, 0xFF	; 255
    3280:	3f 4f       	sbci	r19, 0xFF	; 255
    3282:	39 83       	std	Y+1, r19	; 0x01
    3284:	28 83       	st	Y, r18
    3286:	10 83       	st	Z, r17
    3288:	06 c0       	rjmp	.+12     	; 0x3296 <fputc+0x4a>
    328a:	e8 85       	ldd	r30, Y+8	; 0x08
    328c:	f9 85       	ldd	r31, Y+9	; 0x09
    328e:	81 2f       	mov	r24, r17
    3290:	09 95       	icall
    3292:	89 2b       	or	r24, r25
    3294:	29 f7       	brne	.-54     	; 0x3260 <fputc+0x14>
    3296:	2e 81       	ldd	r18, Y+6	; 0x06
    3298:	3f 81       	ldd	r19, Y+7	; 0x07
    329a:	2f 5f       	subi	r18, 0xFF	; 255
    329c:	3f 4f       	sbci	r19, 0xFF	; 255
    329e:	3f 83       	std	Y+7, r19	; 0x07
    32a0:	2e 83       	std	Y+6, r18	; 0x06
    32a2:	81 2f       	mov	r24, r17
    32a4:	90 2f       	mov	r25, r16
    32a6:	df 91       	pop	r29
    32a8:	cf 91       	pop	r28
    32aa:	1f 91       	pop	r17
    32ac:	0f 91       	pop	r16
    32ae:	08 95       	ret

000032b0 <__ultoa_invert>:
    32b0:	fa 01       	movw	r30, r20
    32b2:	aa 27       	eor	r26, r26
    32b4:	28 30       	cpi	r18, 0x08	; 8
    32b6:	51 f1       	breq	.+84     	; 0x330c <__ultoa_invert+0x5c>
    32b8:	20 31       	cpi	r18, 0x10	; 16
    32ba:	81 f1       	breq	.+96     	; 0x331c <__ultoa_invert+0x6c>
    32bc:	e8 94       	clt
    32be:	6f 93       	push	r22
    32c0:	6e 7f       	andi	r22, 0xFE	; 254
    32c2:	6e 5f       	subi	r22, 0xFE	; 254
    32c4:	7f 4f       	sbci	r23, 0xFF	; 255
    32c6:	8f 4f       	sbci	r24, 0xFF	; 255
    32c8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ca:	af 4f       	sbci	r26, 0xFF	; 255
    32cc:	b1 e0       	ldi	r27, 0x01	; 1
    32ce:	3e d0       	rcall	.+124    	; 0x334c <__ultoa_invert+0x9c>
    32d0:	b4 e0       	ldi	r27, 0x04	; 4
    32d2:	3c d0       	rcall	.+120    	; 0x334c <__ultoa_invert+0x9c>
    32d4:	67 0f       	add	r22, r23
    32d6:	78 1f       	adc	r23, r24
    32d8:	89 1f       	adc	r24, r25
    32da:	9a 1f       	adc	r25, r26
    32dc:	a1 1d       	adc	r26, r1
    32de:	68 0f       	add	r22, r24
    32e0:	79 1f       	adc	r23, r25
    32e2:	8a 1f       	adc	r24, r26
    32e4:	91 1d       	adc	r25, r1
    32e6:	a1 1d       	adc	r26, r1
    32e8:	6a 0f       	add	r22, r26
    32ea:	71 1d       	adc	r23, r1
    32ec:	81 1d       	adc	r24, r1
    32ee:	91 1d       	adc	r25, r1
    32f0:	a1 1d       	adc	r26, r1
    32f2:	20 d0       	rcall	.+64     	; 0x3334 <__ultoa_invert+0x84>
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <__ultoa_invert+0x48>
    32f6:	68 94       	set
    32f8:	3f 91       	pop	r19
    32fa:	2a e0       	ldi	r18, 0x0A	; 10
    32fc:	26 9f       	mul	r18, r22
    32fe:	11 24       	eor	r1, r1
    3300:	30 19       	sub	r19, r0
    3302:	30 5d       	subi	r19, 0xD0	; 208
    3304:	31 93       	st	Z+, r19
    3306:	de f6       	brtc	.-74     	; 0x32be <__ultoa_invert+0xe>
    3308:	cf 01       	movw	r24, r30
    330a:	08 95       	ret
    330c:	46 2f       	mov	r20, r22
    330e:	47 70       	andi	r20, 0x07	; 7
    3310:	40 5d       	subi	r20, 0xD0	; 208
    3312:	41 93       	st	Z+, r20
    3314:	b3 e0       	ldi	r27, 0x03	; 3
    3316:	0f d0       	rcall	.+30     	; 0x3336 <__ultoa_invert+0x86>
    3318:	c9 f7       	brne	.-14     	; 0x330c <__ultoa_invert+0x5c>
    331a:	f6 cf       	rjmp	.-20     	; 0x3308 <__ultoa_invert+0x58>
    331c:	46 2f       	mov	r20, r22
    331e:	4f 70       	andi	r20, 0x0F	; 15
    3320:	40 5d       	subi	r20, 0xD0	; 208
    3322:	4a 33       	cpi	r20, 0x3A	; 58
    3324:	18 f0       	brcs	.+6      	; 0x332c <__ultoa_invert+0x7c>
    3326:	49 5d       	subi	r20, 0xD9	; 217
    3328:	31 fd       	sbrc	r19, 1
    332a:	40 52       	subi	r20, 0x20	; 32
    332c:	41 93       	st	Z+, r20
    332e:	02 d0       	rcall	.+4      	; 0x3334 <__ultoa_invert+0x84>
    3330:	a9 f7       	brne	.-22     	; 0x331c <__ultoa_invert+0x6c>
    3332:	ea cf       	rjmp	.-44     	; 0x3308 <__ultoa_invert+0x58>
    3334:	b4 e0       	ldi	r27, 0x04	; 4
    3336:	a6 95       	lsr	r26
    3338:	97 95       	ror	r25
    333a:	87 95       	ror	r24
    333c:	77 95       	ror	r23
    333e:	67 95       	ror	r22
    3340:	ba 95       	dec	r27
    3342:	c9 f7       	brne	.-14     	; 0x3336 <__ultoa_invert+0x86>
    3344:	00 97       	sbiw	r24, 0x00	; 0
    3346:	61 05       	cpc	r22, r1
    3348:	71 05       	cpc	r23, r1
    334a:	08 95       	ret
    334c:	9b 01       	movw	r18, r22
    334e:	ac 01       	movw	r20, r24
    3350:	0a 2e       	mov	r0, r26
    3352:	06 94       	lsr	r0
    3354:	57 95       	ror	r21
    3356:	47 95       	ror	r20
    3358:	37 95       	ror	r19
    335a:	27 95       	ror	r18
    335c:	ba 95       	dec	r27
    335e:	c9 f7       	brne	.-14     	; 0x3352 <__ultoa_invert+0xa2>
    3360:	62 0f       	add	r22, r18
    3362:	73 1f       	adc	r23, r19
    3364:	84 1f       	adc	r24, r20
    3366:	95 1f       	adc	r25, r21
    3368:	a0 1d       	adc	r26, r0
    336a:	08 95       	ret

0000336c <__eerd_block_m16>:
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22

00003370 <__eerd_blraw_m16>:
    3370:	fc 01       	movw	r30, r24
    3372:	e1 99       	sbic	0x1c, 1	; 28
    3374:	fe cf       	rjmp	.-4      	; 0x3372 <__eerd_blraw_m16+0x2>
    3376:	06 c0       	rjmp	.+12     	; 0x3384 <__eerd_blraw_m16+0x14>
    3378:	ff bb       	out	0x1f, r31	; 31
    337a:	ee bb       	out	0x1e, r30	; 30
    337c:	e0 9a       	sbi	0x1c, 0	; 28
    337e:	31 96       	adiw	r30, 0x01	; 1
    3380:	0d b2       	in	r0, 0x1d	; 29
    3382:	0d 92       	st	X+, r0
    3384:	41 50       	subi	r20, 0x01	; 1
    3386:	50 40       	sbci	r21, 0x00	; 0
    3388:	b8 f7       	brcc	.-18     	; 0x3378 <__eerd_blraw_m16+0x8>
    338a:	08 95       	ret

0000338c <__eewr_byte_m16>:
    338c:	26 2f       	mov	r18, r22

0000338e <__eewr_r18_m16>:
    338e:	e1 99       	sbic	0x1c, 1	; 28
    3390:	fe cf       	rjmp	.-4      	; 0x338e <__eewr_r18_m16>
    3392:	9f bb       	out	0x1f, r25	; 31
    3394:	8e bb       	out	0x1e, r24	; 30
    3396:	2d bb       	out	0x1d, r18	; 29
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	e2 9a       	sbi	0x1c, 2	; 28
    339e:	e1 9a       	sbi	0x1c, 1	; 28
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	08 95       	ret

000033a6 <__mulsi3>:
    33a6:	db 01       	movw	r26, r22
    33a8:	8f 93       	push	r24
    33aa:	9f 93       	push	r25
    33ac:	0e 94 24 1a 	call	0x3448	; 0x3448 <__muluhisi3>
    33b0:	bf 91       	pop	r27
    33b2:	af 91       	pop	r26
    33b4:	a2 9f       	mul	r26, r18
    33b6:	80 0d       	add	r24, r0
    33b8:	91 1d       	adc	r25, r1
    33ba:	a3 9f       	mul	r26, r19
    33bc:	90 0d       	add	r25, r0
    33be:	b2 9f       	mul	r27, r18
    33c0:	90 0d       	add	r25, r0
    33c2:	11 24       	eor	r1, r1
    33c4:	08 95       	ret

000033c6 <__udivmodsi4>:
    33c6:	a1 e2       	ldi	r26, 0x21	; 33
    33c8:	1a 2e       	mov	r1, r26
    33ca:	aa 1b       	sub	r26, r26
    33cc:	bb 1b       	sub	r27, r27
    33ce:	fd 01       	movw	r30, r26
    33d0:	0d c0       	rjmp	.+26     	; 0x33ec <__udivmodsi4_ep>

000033d2 <__udivmodsi4_loop>:
    33d2:	aa 1f       	adc	r26, r26
    33d4:	bb 1f       	adc	r27, r27
    33d6:	ee 1f       	adc	r30, r30
    33d8:	ff 1f       	adc	r31, r31
    33da:	a2 17       	cp	r26, r18
    33dc:	b3 07       	cpc	r27, r19
    33de:	e4 07       	cpc	r30, r20
    33e0:	f5 07       	cpc	r31, r21
    33e2:	20 f0       	brcs	.+8      	; 0x33ec <__udivmodsi4_ep>
    33e4:	a2 1b       	sub	r26, r18
    33e6:	b3 0b       	sbc	r27, r19
    33e8:	e4 0b       	sbc	r30, r20
    33ea:	f5 0b       	sbc	r31, r21

000033ec <__udivmodsi4_ep>:
    33ec:	66 1f       	adc	r22, r22
    33ee:	77 1f       	adc	r23, r23
    33f0:	88 1f       	adc	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	1a 94       	dec	r1
    33f6:	69 f7       	brne	.-38     	; 0x33d2 <__udivmodsi4_loop>
    33f8:	60 95       	com	r22
    33fa:	70 95       	com	r23
    33fc:	80 95       	com	r24
    33fe:	90 95       	com	r25
    3400:	9b 01       	movw	r18, r22
    3402:	ac 01       	movw	r20, r24
    3404:	bd 01       	movw	r22, r26
    3406:	cf 01       	movw	r24, r30
    3408:	08 95       	ret

0000340a <__divmodsi4>:
    340a:	05 2e       	mov	r0, r21
    340c:	97 fb       	bst	r25, 7
    340e:	1e f4       	brtc	.+6      	; 0x3416 <__divmodsi4+0xc>
    3410:	00 94       	com	r0
    3412:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__negsi2>
    3416:	57 fd       	sbrc	r21, 7
    3418:	07 d0       	rcall	.+14     	; 0x3428 <__divmodsi4_neg2>
    341a:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <__udivmodsi4>
    341e:	07 fc       	sbrc	r0, 7
    3420:	03 d0       	rcall	.+6      	; 0x3428 <__divmodsi4_neg2>
    3422:	4e f4       	brtc	.+18     	; 0x3436 <__divmodsi4_exit>
    3424:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__negsi2>

00003428 <__divmodsi4_neg2>:
    3428:	50 95       	com	r21
    342a:	40 95       	com	r20
    342c:	30 95       	com	r19
    342e:	21 95       	neg	r18
    3430:	3f 4f       	sbci	r19, 0xFF	; 255
    3432:	4f 4f       	sbci	r20, 0xFF	; 255
    3434:	5f 4f       	sbci	r21, 0xFF	; 255

00003436 <__divmodsi4_exit>:
    3436:	08 95       	ret

00003438 <__negsi2>:
    3438:	90 95       	com	r25
    343a:	80 95       	com	r24
    343c:	70 95       	com	r23
    343e:	61 95       	neg	r22
    3440:	7f 4f       	sbci	r23, 0xFF	; 255
    3442:	8f 4f       	sbci	r24, 0xFF	; 255
    3444:	9f 4f       	sbci	r25, 0xFF	; 255
    3446:	08 95       	ret

00003448 <__muluhisi3>:
    3448:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__umulhisi3>
    344c:	a5 9f       	mul	r26, r21
    344e:	90 0d       	add	r25, r0
    3450:	b4 9f       	mul	r27, r20
    3452:	90 0d       	add	r25, r0
    3454:	a4 9f       	mul	r26, r20
    3456:	80 0d       	add	r24, r0
    3458:	91 1d       	adc	r25, r1
    345a:	11 24       	eor	r1, r1
    345c:	08 95       	ret

0000345e <__mulshisi3>:
    345e:	b7 ff       	sbrs	r27, 7
    3460:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__muluhisi3>

00003464 <__mulohisi3>:
    3464:	0e 94 24 1a 	call	0x3448	; 0x3448 <__muluhisi3>
    3468:	82 1b       	sub	r24, r18
    346a:	93 0b       	sbc	r25, r19
    346c:	08 95       	ret

0000346e <__prologue_saves__>:
    346e:	2f 92       	push	r2
    3470:	3f 92       	push	r3
    3472:	4f 92       	push	r4
    3474:	5f 92       	push	r5
    3476:	6f 92       	push	r6
    3478:	7f 92       	push	r7
    347a:	8f 92       	push	r8
    347c:	9f 92       	push	r9
    347e:	af 92       	push	r10
    3480:	bf 92       	push	r11
    3482:	cf 92       	push	r12
    3484:	df 92       	push	r13
    3486:	ef 92       	push	r14
    3488:	ff 92       	push	r15
    348a:	0f 93       	push	r16
    348c:	1f 93       	push	r17
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	ca 1b       	sub	r28, r26
    3498:	db 0b       	sbc	r29, r27
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	09 94       	ijmp

000034a6 <__epilogue_restores__>:
    34a6:	2a 88       	ldd	r2, Y+18	; 0x12
    34a8:	39 88       	ldd	r3, Y+17	; 0x11
    34aa:	48 88       	ldd	r4, Y+16	; 0x10
    34ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    34ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    34b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    34b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    34b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    34b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    34b8:	b9 84       	ldd	r11, Y+9	; 0x09
    34ba:	c8 84       	ldd	r12, Y+8	; 0x08
    34bc:	df 80       	ldd	r13, Y+7	; 0x07
    34be:	ee 80       	ldd	r14, Y+6	; 0x06
    34c0:	fd 80       	ldd	r15, Y+5	; 0x05
    34c2:	0c 81       	ldd	r16, Y+4	; 0x04
    34c4:	1b 81       	ldd	r17, Y+3	; 0x03
    34c6:	aa 81       	ldd	r26, Y+2	; 0x02
    34c8:	b9 81       	ldd	r27, Y+1	; 0x01
    34ca:	ce 0f       	add	r28, r30
    34cc:	d1 1d       	adc	r29, r1
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	ed 01       	movw	r28, r26
    34da:	08 95       	ret

000034dc <__umulhisi3>:
    34dc:	a2 9f       	mul	r26, r18
    34de:	b0 01       	movw	r22, r0
    34e0:	b3 9f       	mul	r27, r19
    34e2:	c0 01       	movw	r24, r0
    34e4:	a3 9f       	mul	r26, r19
    34e6:	70 0d       	add	r23, r0
    34e8:	81 1d       	adc	r24, r1
    34ea:	11 24       	eor	r1, r1
    34ec:	91 1d       	adc	r25, r1
    34ee:	b2 9f       	mul	r27, r18
    34f0:	70 0d       	add	r23, r0
    34f2:	81 1d       	adc	r24, r1
    34f4:	11 24       	eor	r1, r1
    34f6:	91 1d       	adc	r25, r1
    34f8:	08 95       	ret

000034fa <_exit>:
    34fa:	f8 94       	cli

000034fc <__stop_program>:
    34fc:	ff cf       	rjmp	.-2      	; 0x34fc <__stop_program>
