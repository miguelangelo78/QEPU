
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002ae4  00002b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c0  008000c0  00002bd8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bd8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000058ba  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000eef  00000000  00000000  0000875e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ca6  00000000  00000000  0000964d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a88  00000000  00000000  0000a2f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a05  00000000  00000000  0000ad7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002e8c  00000000  00000000  0000b781  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0000e60d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	e3 09       	sbc	r30, r3
      56:	fe 09       	sbc	r31, r14
      58:	26 0b       	sbc	r18, r22
      5a:	26 0b       	sbc	r18, r22
      5c:	26 0b       	sbc	r18, r22
      5e:	26 0b       	sbc	r18, r22
      60:	26 0b       	sbc	r18, r22
      62:	26 0b       	sbc	r18, r22
      64:	26 0b       	sbc	r18, r22
      66:	04 0a       	sbc	r0, r20
      68:	26 0b       	sbc	r18, r22
      6a:	26 0b       	sbc	r18, r22
      6c:	26 0b       	sbc	r18, r22
      6e:	0a 0a       	sbc	r0, r26
      70:	12 0a       	sbc	r1, r18
      72:	1a 0a       	sbc	r1, r26
      74:	41 0a       	sbc	r4, r17
      76:	68 0a       	sbc	r6, r24
      78:	8f 0a       	sbc	r8, r31
      7a:	b6 0a       	sbc	r11, r22
      7c:	dd 0a       	sbc	r13, r29
      7e:	04 0b       	sbc	r16, r20
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfc>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef512>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates1ZEii+0xbe>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d6>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef746>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b8>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
      d4:	3f 00       	.word	0x003f	; ????

000000d6 <__ctors_start>:
      d6:	14 08       	sbc	r1, r4

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf e5       	ldi	r28, 0x5F	; 95
      de:	d4 e0       	ldi	r29, 0x04	; 4
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	10 e0       	ldi	r17, 0x00	; 0
      e6:	a0 e6       	ldi	r26, 0x60	; 96
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e4 ee       	ldi	r30, 0xE4	; 228
      ec:	fa e2       	ldi	r31, 0x2A	; 42
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
      f0:	05 90       	lpm	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	a0 3c       	cpi	r26, 0xC0	; 192
      f6:	b1 07       	cpc	r27, r17
      f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	a0 ec       	ldi	r26, 0xC0	; 192
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	a8 3c       	cpi	r26, 0xC8	; 200
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
     10a:	10 e0       	ldi	r17, 0x00	; 0
     10c:	c8 ed       	ldi	r28, 0xD8	; 216
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	04 c0       	rjmp	.+8      	; 0x11a <__do_global_ctors+0x10>
     112:	22 97       	sbiw	r28, 0x02	; 2
     114:	fe 01       	movw	r30, r28
     116:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__tablejump__>
     11a:	c6 3d       	cpi	r28, 0xD6	; 214
     11c:	d1 07       	cpc	r29, r17
     11e:	c9 f7       	brne	.-14     	; 0x112 <__do_global_ctors+0x8>
     120:	0e 94 19 08 	call	0x1032	; 0x1032 <main>
     124:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	fc 01       	movw	r30, r24
     132:	40 83       	st	Z, r20
     134:	51 83       	std	Z+1, r21	; 0x01
     136:	62 83       	std	Z+2, r22	; 0x02
     138:	73 83       	std	Z+3, r23	; 0x03
     13a:	04 83       	std	Z+4, r16	; 0x04
     13c:	15 83       	std	Z+5, r17	; 0x05
     13e:	26 83       	std	Z+6, r18	; 0x06
     140:	37 83       	std	Z+7, r19	; 0x07
     142:	1f 91       	pop	r17
     144:	0f 91       	pop	r16
     146:	08 95       	ret

00000148 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     148:	fc 01       	movw	r30, r24
     14a:	10 82       	st	Z, r1
     14c:	11 82       	std	Z+1, r1	; 0x01
     14e:	12 82       	std	Z+2, r1	; 0x02
     150:	13 82       	std	Z+3, r1	; 0x03
     152:	14 82       	std	Z+4, r1	; 0x04
     154:	15 82       	std	Z+5, r1	; 0x05
     156:	16 82       	std	Z+6, r1	; 0x06
     158:	17 82       	std	Z+7, r1	; 0x07
     15a:	08 95       	ret

0000015c <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     15c:	af 92       	push	r10
     15e:	bf 92       	push	r11
     160:	cf 92       	push	r12
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	68 97       	sbiw	r28, 0x18	; 24
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	0f be       	out	0x3f, r0	; 63
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	5c 01       	movw	r10, r24
     182:	09 8b       	std	Y+17, r16	; 0x11
     184:	1a 8b       	std	Y+18, r17	; 0x12
     186:	2b 8b       	std	Y+19, r18	; 0x13
     188:	3c 8b       	std	Y+20, r19	; 0x14
     18a:	4d 8b       	std	Y+21, r20	; 0x15
     18c:	5e 8b       	std	Y+22, r21	; 0x16
     18e:	6f 8b       	std	Y+23, r22	; 0x17
     190:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     192:	2d 89       	ldd	r18, Y+21	; 0x15
     194:	3e 89       	ldd	r19, Y+22	; 0x16
     196:	4f 89       	ldd	r20, Y+23	; 0x17
     198:	58 8d       	ldd	r21, Y+24	; 0x18
     19a:	fc 01       	movw	r30, r24
     19c:	64 81       	ldd	r22, Z+4	; 0x04
     19e:	75 81       	ldd	r23, Z+5	; 0x05
     1a0:	86 81       	ldd	r24, Z+6	; 0x06
     1a2:	97 81       	ldd	r25, Z+7	; 0x07
     1a4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__addsf3>
     1a8:	6b 01       	movw	r12, r22
     1aa:	7c 01       	movw	r14, r24
     1ac:	29 89       	ldd	r18, Y+17	; 0x11
     1ae:	3a 89       	ldd	r19, Y+18	; 0x12
     1b0:	4b 89       	ldd	r20, Y+19	; 0x13
     1b2:	5c 89       	ldd	r21, Y+20	; 0x14
     1b4:	f5 01       	movw	r30, r10
     1b6:	60 81       	ld	r22, Z
     1b8:	71 81       	ldd	r23, Z+1	; 0x01
     1ba:	82 81       	ldd	r24, Z+2	; 0x02
     1bc:	93 81       	ldd	r25, Z+3	; 0x03
     1be:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__addsf3>
     1c2:	ab 01       	movw	r20, r22
     1c4:	bc 01       	movw	r22, r24
     1c6:	97 01       	movw	r18, r14
     1c8:	86 01       	movw	r16, r12
     1ca:	ce 01       	movw	r24, r28
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     1d2:	88 e0       	ldi	r24, 0x08	; 8
     1d4:	fe 01       	movw	r30, r28
     1d6:	31 96       	adiw	r30, 0x01	; 1
     1d8:	de 01       	movw	r26, r28
     1da:	19 96       	adiw	r26, 0x09	; 9
     1dc:	01 90       	ld	r0, Z+
     1de:	0d 92       	st	X+, r0
     1e0:	8a 95       	dec	r24
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <_ZN7Complex3addES_+0x80>
     1e4:	29 85       	ldd	r18, Y+9	; 0x09
     1e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     1e8:	4b 85       	ldd	r20, Y+11	; 0x0b
     1ea:	5c 85       	ldd	r21, Y+12	; 0x0c
     1ec:	6d 85       	ldd	r22, Y+13	; 0x0d
     1ee:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     1f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     1f2:	98 89       	ldd	r25, Y+16	; 0x10
     1f4:	68 96       	adiw	r28, 0x18	; 24
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	f8 94       	cli
     1fa:	de bf       	out	0x3e, r29	; 62
     1fc:	0f be       	out	0x3f, r0	; 63
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	1f 91       	pop	r17
     206:	0f 91       	pop	r16
     208:	ff 90       	pop	r15
     20a:	ef 90       	pop	r14
     20c:	df 90       	pop	r13
     20e:	cf 90       	pop	r12
     210:	bf 90       	pop	r11
     212:	af 90       	pop	r10
     214:	08 95       	ret

00000216 <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     216:	4f 92       	push	r4
     218:	5f 92       	push	r5
     21a:	6f 92       	push	r6
     21c:	7f 92       	push	r7
     21e:	8f 92       	push	r8
     220:	9f 92       	push	r9
     222:	af 92       	push	r10
     224:	bf 92       	push	r11
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	a0 97       	sbiw	r28, 0x20	; 32
     23c:	0f b6       	in	r0, 0x3f	; 63
     23e:	f8 94       	cli
     240:	de bf       	out	0x3e, r29	; 62
     242:	0f be       	out	0x3f, r0	; 63
     244:	cd bf       	out	0x3d, r28	; 61
     246:	09 8b       	std	Y+17, r16	; 0x11
     248:	1a 8b       	std	Y+18, r17	; 0x12
     24a:	2b 8b       	std	Y+19, r18	; 0x13
     24c:	3c 8b       	std	Y+20, r19	; 0x14
     24e:	4d 8b       	std	Y+21, r20	; 0x15
     250:	5e 8b       	std	Y+22, r21	; 0x16
     252:	6f 8b       	std	Y+23, r22	; 0x17
     254:	78 8f       	std	Y+24, r23	; 0x18
     256:	89 88       	ldd	r8, Y+17	; 0x11
     258:	9a 88       	ldd	r9, Y+18	; 0x12
     25a:	ab 88       	ldd	r10, Y+19	; 0x13
     25c:	bc 88       	ldd	r11, Y+20	; 0x14
     25e:	2d 89       	ldd	r18, Y+21	; 0x15
     260:	3e 89       	ldd	r19, Y+22	; 0x16
     262:	4f 89       	ldd	r20, Y+23	; 0x17
     264:	58 8d       	ldd	r21, Y+24	; 0x18
     266:	2d 8f       	std	Y+29, r18	; 0x1d
     268:	3e 8f       	std	Y+30, r19	; 0x1e
     26a:	4f 8f       	std	Y+31, r20	; 0x1f
     26c:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     26e:	fc 01       	movw	r30, r24
     270:	c0 80       	ld	r12, Z
     272:	d1 80       	ldd	r13, Z+1	; 0x01
     274:	e2 80       	ldd	r14, Z+2	; 0x02
     276:	f3 80       	ldd	r15, Z+3	; 0x03
     278:	24 81       	ldd	r18, Z+4	; 0x04
     27a:	35 81       	ldd	r19, Z+5	; 0x05
     27c:	46 81       	ldd	r20, Z+6	; 0x06
     27e:	57 81       	ldd	r21, Z+7	; 0x07
     280:	29 8f       	std	Y+25, r18	; 0x19
     282:	3a 8f       	std	Y+26, r19	; 0x1a
     284:	4b 8f       	std	Y+27, r20	; 0x1b
     286:	5c 8f       	std	Y+28, r21	; 0x1c
     288:	2d 8d       	ldd	r18, Y+29	; 0x1d
     28a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     28c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     28e:	58 a1       	ldd	r21, Y+32	; 0x20
     290:	c7 01       	movw	r24, r14
     292:	b6 01       	movw	r22, r12
     294:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__mulsf3>
     298:	2b 01       	movw	r4, r22
     29a:	3c 01       	movw	r6, r24
     29c:	a5 01       	movw	r20, r10
     29e:	94 01       	movw	r18, r8
     2a0:	69 8d       	ldd	r22, Y+25	; 0x19
     2a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2a8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__mulsf3>
     2ac:	9b 01       	movw	r18, r22
     2ae:	ac 01       	movw	r20, r24
     2b0:	c3 01       	movw	r24, r6
     2b2:	b2 01       	movw	r22, r4
     2b4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__addsf3>
     2b8:	2b 01       	movw	r4, r22
     2ba:	3c 01       	movw	r6, r24
     2bc:	a5 01       	movw	r20, r10
     2be:	94 01       	movw	r18, r8
     2c0:	c7 01       	movw	r24, r14
     2c2:	b6 01       	movw	r22, r12
     2c4:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__mulsf3>
     2c8:	6b 01       	movw	r12, r22
     2ca:	7c 01       	movw	r14, r24
     2cc:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2ce:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2d0:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2d2:	58 a1       	ldd	r21, Y+32	; 0x20
     2d4:	69 8d       	ldd	r22, Y+25	; 0x19
     2d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2da:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2dc:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__mulsf3>
     2e0:	9b 01       	movw	r18, r22
     2e2:	ac 01       	movw	r20, r24
     2e4:	c7 01       	movw	r24, r14
     2e6:	b6 01       	movw	r22, r12
     2e8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__subsf3>
     2ec:	ab 01       	movw	r20, r22
     2ee:	bc 01       	movw	r22, r24
     2f0:	93 01       	movw	r18, r6
     2f2:	82 01       	movw	r16, r4
     2f4:	ce 01       	movw	r24, r28
     2f6:	01 96       	adiw	r24, 0x01	; 1
     2f8:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     2fc:	88 e0       	ldi	r24, 0x08	; 8
     2fe:	fe 01       	movw	r30, r28
     300:	31 96       	adiw	r30, 0x01	; 1
     302:	de 01       	movw	r26, r28
     304:	19 96       	adiw	r26, 0x09	; 9
     306:	01 90       	ld	r0, Z+
     308:	0d 92       	st	X+, r0
     30a:	8a 95       	dec	r24
     30c:	e1 f7       	brne	.-8      	; 0x306 <_ZN7Complex3mulES_+0xf0>
     30e:	29 85       	ldd	r18, Y+9	; 0x09
     310:	3a 85       	ldd	r19, Y+10	; 0x0a
     312:	4b 85       	ldd	r20, Y+11	; 0x0b
     314:	5c 85       	ldd	r21, Y+12	; 0x0c
     316:	6d 85       	ldd	r22, Y+13	; 0x0d
     318:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     31a:	8f 85       	ldd	r24, Y+15	; 0x0f
     31c:	98 89       	ldd	r25, Y+16	; 0x10
     31e:	a0 96       	adiw	r28, 0x20	; 32
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	cf 90       	pop	r12
     33a:	bf 90       	pop	r11
     33c:	af 90       	pop	r10
     33e:	9f 90       	pop	r9
     340:	8f 90       	pop	r8
     342:	7f 90       	pop	r7
     344:	6f 90       	pop	r6
     346:	5f 90       	pop	r5
     348:	4f 90       	pop	r4
     34a:	08 95       	ret

0000034c <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     34c:	fc 01       	movw	r30, r24
     34e:	20 81       	ld	r18, Z
     350:	31 81       	ldd	r19, Z+1	; 0x01
     352:	42 81       	ldd	r20, Z+2	; 0x02
     354:	53 81       	ldd	r21, Z+3	; 0x03
     356:	64 81       	ldd	r22, Z+4	; 0x04
     358:	75 81       	ldd	r23, Z+5	; 0x05
     35a:	86 81       	ldd	r24, Z+6	; 0x06
     35c:	97 81       	ldd	r25, Z+7	; 0x07
     35e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3>
     362:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <atan>
     366:	08 95       	ret

00000368 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     368:	85 e0       	ldi	r24, 0x05	; 5
     36a:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     36c:	81 b1       	in	r24, 0x01	; 1
     36e:	8c 7f       	andi	r24, 0xFC	; 252
     370:	81 b9       	out	0x01, r24	; 1
     372:	08 95       	ret

00000374 <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     374:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     376:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     378:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     37a:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     37c:	06 b6       	in	r0, 0x36	; 54
     37e:	07 fe       	sbrs	r0, 7
     380:	fd cf       	rjmp	.-6      	; 0x37c <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     382:	81 b1       	in	r24, 0x01	; 1
     384:	88 7f       	andi	r24, 0xF8	; 248
     386:	88 30       	cpi	r24, 0x08	; 8
     388:	09 f0       	breq	.+2      	; 0x38c <_ZN6EEProm4readEj+0x18>
     38a:	41 c0       	rjmp	.+130    	; 0x40e <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     38c:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     38e:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     390:	06 b6       	in	r0, 0x36	; 54
     392:	07 fe       	sbrs	r0, 7
     394:	fd cf       	rjmp	.-6      	; 0x390 <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     396:	81 b1       	in	r24, 0x01	; 1
     398:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     39a:	88 31       	cpi	r24, 0x18	; 24
     39c:	71 f7       	brne	.-36     	; 0x37a <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     39e:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3a0:	84 e8       	ldi	r24, 0x84	; 132
     3a2:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3a4:	06 b6       	in	r0, 0x36	; 54
     3a6:	07 fe       	sbrs	r0, 7
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3aa:	81 b1       	in	r24, 0x01	; 1
     3ac:	88 7f       	andi	r24, 0xF8	; 248
     3ae:	88 32       	cpi	r24, 0x28	; 40
     3b0:	81 f5       	brne	.+96     	; 0x412 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     3b2:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3b4:	84 e8       	ldi	r24, 0x84	; 132
     3b6:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3b8:	06 b6       	in	r0, 0x36	; 54
     3ba:	07 fe       	sbrs	r0, 7
     3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3be:	81 b1       	in	r24, 0x01	; 1
     3c0:	88 7f       	andi	r24, 0xF8	; 248
     3c2:	88 32       	cpi	r24, 0x28	; 40
     3c4:	41 f5       	brne	.+80     	; 0x416 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3c6:	84 ea       	ldi	r24, 0xA4	; 164
     3c8:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3ca:	06 b6       	in	r0, 0x36	; 54
     3cc:	07 fe       	sbrs	r0, 7
     3ce:	fd cf       	rjmp	.-6      	; 0x3ca <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     3d0:	81 b1       	in	r24, 0x01	; 1
     3d2:	88 7f       	andi	r24, 0xF8	; 248
     3d4:	80 31       	cpi	r24, 0x10	; 16
     3d6:	09 f5       	brne	.+66     	; 0x41a <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     3d8:	81 ea       	ldi	r24, 0xA1	; 161
     3da:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3dc:	84 e8       	ldi	r24, 0x84	; 132
     3de:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3e0:	06 b6       	in	r0, 0x36	; 54
     3e2:	07 fe       	sbrs	r0, 7
     3e4:	fd cf       	rjmp	.-6      	; 0x3e0 <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     3e6:	81 b1       	in	r24, 0x01	; 1
     3e8:	88 7f       	andi	r24, 0xF8	; 248
     3ea:	80 34       	cpi	r24, 0x40	; 64
     3ec:	c1 f4       	brne	.+48     	; 0x41e <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     3ee:	84 e8       	ldi	r24, 0x84	; 132
     3f0:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     3f2:	06 b6       	in	r0, 0x36	; 54
     3f4:	07 fe       	sbrs	r0, 7
     3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     3f8:	81 b1       	in	r24, 0x01	; 1
     3fa:	88 7f       	andi	r24, 0xF8	; 248
     3fc:	88 35       	cpi	r24, 0x58	; 88
     3fe:	89 f4       	brne	.+34     	; 0x422 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     400:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     402:	94 e9       	ldi	r25, 0x94	; 148
     404:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     406:	06 b6       	in	r0, 0x36	; 54
     408:	04 fc       	sbrc	r0, 4
     40a:	fd cf       	rjmp	.-6      	; 0x406 <_ZN6EEProm4readEj+0x92>
     40c:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     422:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     424:	08 95       	ret

00000426 <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	c4 56       	subi	r28, 0x64	; 100
     43c:	d1 09       	sbc	r29, r1
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	6c 01       	movw	r12, r24
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     450:	00 e0       	ldi	r16, 0x00	; 0
     452:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     454:	b8 01       	movw	r22, r16
     456:	c6 01       	movw	r24, r12
     458:	0e 94 ba 01 	call	0x374	; 0x374 <_ZN6EEProm4readEj>
     45c:	f7 01       	movw	r30, r14
     45e:	81 93       	st	Z+, r24
     460:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     462:	8f 3f       	cpi	r24, 0xFF	; 255
     464:	81 f4       	brne	.+32     	; 0x486 <__stack+0x27>
     466:	32 97       	sbiw	r30, 0x02	; 2
     468:	20 81       	ld	r18, Z
     46a:	2f 3f       	cpi	r18, 0xFF	; 255
     46c:	61 f4       	brne	.+24     	; 0x486 <__stack+0x27>
     46e:	31 97       	sbiw	r30, 0x01	; 1
     470:	20 81       	ld	r18, Z
     472:	2f 3f       	cpi	r18, 0xFF	; 255
     474:	41 f4       	brne	.+16     	; 0x486 <__stack+0x27>
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	20 81       	ld	r18, Z
     47a:	2f 3f       	cpi	r18, 0xFF	; 255
     47c:	21 f4       	brne	.+8      	; 0x486 <__stack+0x27>
     47e:	31 97       	sbiw	r30, 0x01	; 1
     480:	80 81       	ld	r24, Z
     482:	8f 3f       	cpi	r24, 0xFF	; 255
     484:	19 f0       	breq	.+6      	; 0x48c <__stack+0x2d>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     486:	0f 5f       	subi	r16, 0xFF	; 255
     488:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     48a:	e4 cf       	rjmp	.-56     	; 0x454 <_ZN6EEProm7readallEv+0x2e>
	return eeprom_mem;
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	cc 59       	subi	r28, 0x9C	; 156
     492:	df 4f       	sbci	r29, 0xFF	; 255
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	08 95       	ret

000004b0 <_ZN5Gates10setup_seedEv>:
Gates::Gates(){setup_seed();}

Serial s;
QEPU::Utils u;

void Gates::setup_seed(){
     4b0:	cf 93       	push	r28
	unsigned char oldADMUX = ADMUX;
     4b2:	c7 b1       	in	r28, 0x07	; 7
	ADMUX |=  _BV(MUX0); //choose ADC1 on PB2
     4b4:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA |= _BV(ADPS2) |_BV(ADPS1) |_BV(ADPS0); //set prescaler to max value, 128
     4b6:	86 b1       	in	r24, 0x06	; 6
     4b8:	87 60       	ori	r24, 0x07	; 7
     4ba:	86 b9       	out	0x06, r24	; 6

	ADCSRA |= _BV(ADEN); //enable the ADC
     4bc:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= _BV(ADSC);//start conversion
     4be:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & _BV(ADSC)); //wait until the hardware clears the flag. Note semicolon!
     4c0:	36 99       	sbic	0x06, 6	; 6
     4c2:	fe cf       	rjmp	.-4      	; 0x4c0 <_ZN5Gates10setup_seedEv+0x10>

	unsigned char byte1 = ADCL;
     4c4:	24 b1       	in	r18, 0x04	; 4

	ADCSRA |= _BV(ADSC);//start conversion
     4c6:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & _BV(ADSC)); //wait again note semicolon!
     4c8:	36 99       	sbic	0x06, 6	; 6
     4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <_ZN5Gates10setup_seedEv+0x18>

	unsigned char byte2 = ADCL;
     4cc:	84 b1       	in	r24, 0x04	; 4

	unsigned int seed = byte1 << 8 | byte2;
     4ce:	90 e0       	ldi	r25, 0x00	; 0

	srand(seed);
     4d0:	92 2b       	or	r25, r18
     4d2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <srand>

	ADCSRA &= ~_BV(ADEN); //disable ADC
     4d6:	37 98       	cbi	0x06, 7	; 6

	ADMUX = oldADMUX;
     4d8:	c7 b9       	out	0x07, r28	; 7
}
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <_ZN5GatesC1Ev>:
#include "gates.h"
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
Gates::Gates(){setup_seed();}
     4de:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZN5Gates10setup_seedEv>
     4e2:	08 95       	ret

000004e4 <_Z12print_statesiP7ComplexPc>:
Complex * Gates::kronecker(Complex * vec,int qb_count){
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*pow(qb_count*2,2));
	
}

void print_states(int qb_count,Complex * vec,char* message){
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	7c 01       	movw	r14, r24
     4f2:	06 2f       	mov	r16, r22
     4f4:	17 2f       	mov	r17, r23
	s.writestrln(message);
     4f6:	ba 01       	movw	r22, r20
     4f8:	81 ec       	ldi	r24, 0xC1	; 193
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count*2;i++){
     500:	ee 0c       	add	r14, r14
     502:	ff 1c       	adc	r15, r15
     504:	1e 14       	cp	r1, r14
     506:	1f 04       	cpc	r1, r15
     508:	0c f0       	brlt	.+2      	; 0x50c <_Z12print_statesiP7ComplexPc+0x28>
     50a:	47 c0       	rjmp	.+142    	; 0x59a <_Z12print_statesiP7ComplexPc+0xb6>
     50c:	c0 2f       	mov	r28, r16
     50e:	d1 2f       	mov	r29, r17
     510:	00 e0       	ldi	r16, 0x00	; 0
     512:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
     514:	6a e6       	ldi	r22, 0x6A	; 106
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	81 ec       	ldi	r24, 0xC1	; 193
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN6Serial8writestrEPc>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	4a e7       	ldi	r20, 0x7A	; 122
     526:	54 e4       	ldi	r21, 0x44	; 68
     528:	68 81       	ld	r22, Y
     52a:	79 81       	ldd	r23, Y+1	; 0x01
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	9b 81       	ldd	r25, Y+3	; 0x03
     530:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__mulsf3>
     534:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fixsfsi>
     538:	80 ec       	ldi	r24, 0xC0	; 192
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 80 09 	call	0x1300	; 0x1300 <_ZN4QEPU5Utils7int2strEi>
     540:	bc 01       	movw	r22, r24
     542:	81 ec       	ldi	r24, 0xC1	; 193
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
     54a:	6e e6       	ldi	r22, 0x6E	; 110
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	81 ec       	ldi	r24, 0xC1	; 193
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN6Serial8writestrEPc>
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	4a e7       	ldi	r20, 0x7A	; 122
     55c:	54 e4       	ldi	r21, 0x44	; 68
     55e:	6c 81       	ldd	r22, Y+4	; 0x04
     560:	7d 81       	ldd	r23, Y+5	; 0x05
     562:	8e 81       	ldd	r24, Y+6	; 0x06
     564:	9f 81       	ldd	r25, Y+7	; 0x07
     566:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__mulsf3>
     56a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fixsfsi>
     56e:	80 ec       	ldi	r24, 0xC0	; 192
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 80 09 	call	0x1300	; 0x1300 <_ZN4QEPU5Utils7int2strEi>
     576:	bc 01       	movw	r22, r24
     578:	81 ec       	ldi	r24, 0xC1	; 193
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     580:	6f ea       	ldi	r22, 0xAF	; 175
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	81 ec       	ldi	r24, 0xC1	; 193
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN6Serial10writestrlnEPc>
	
}

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count*2;i++){
     58c:	0f 5f       	subi	r16, 0xFF	; 255
     58e:	1f 4f       	sbci	r17, 0xFF	; 255
     590:	28 96       	adiw	r28, 0x08	; 8
     592:	0e 15       	cp	r16, r14
     594:	1f 05       	cpc	r17, r15
     596:	09 f0       	breq	.+2      	; 0x59a <_Z12print_statesiP7ComplexPc+0xb6>
     598:	bd cf       	rjmp	.-134    	; 0x514 <_Z12print_statesiP7ComplexPc+0x30>
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ff 90       	pop	r15
     5a4:	ef 90       	pop	r14
     5a6:	08 95       	ret

000005a8 <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     5a8:	66 0f       	add	r22, r22
     5aa:	77 1f       	adc	r23, r23
     5ac:	16 16       	cp	r1, r22
     5ae:	17 06       	cpc	r1, r23
     5b0:	34 f4       	brge	.+12     	; 0x5be <_ZN5Gates8ampl2vecEiPiS0_+0x16>
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	02 96       	adiw	r24, 0x02	; 2
     5b8:	86 17       	cp	r24, r22
     5ba:	97 07       	cpc	r25, r23
     5bc:	e4 f3       	brlt	.-8      	; 0x5b6 <_ZN5Gates8ampl2vecEiPiS0_+0xe>
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
		
	
	return kronecker(vec,qb_count*2); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
}
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	08 95       	ret

000005c4 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	8b 01       	movw	r16, r22
     5d2:	7a 01       	movw	r14, r20
	int* newthephi=(int*)malloc(sizeof(int)*2);
     5d4:	84 e0       	ldi	r24, 0x04	; 4
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <malloc>
     5dc:	ec 01       	movw	r28, r24
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
     5de:	f8 01       	movw	r30, r16
     5e0:	60 81       	ld	r22, Z
     5e2:	71 81       	ldd	r23, Z+1	; 0x01
     5e4:	82 81       	ldd	r24, Z+2	; 0x02
     5e6:	93 81       	ldd	r25, Z+3	; 0x03
     5e8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <acos>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	44 eb       	ldi	r20, 0xB4	; 180
     5f2:	53 e4       	ldi	r21, 0x43	; 67
     5f4:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__mulsf3>
     5f8:	2b ed       	ldi	r18, 0xDB	; 219
     5fa:	3f e0       	ldi	r19, 0x0F	; 15
     5fc:	49 e4       	ldi	r20, 0x49	; 73
     5fe:	50 e4       	ldi	r21, 0x40	; 64
     600:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3>
     604:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fixsfsi>
     608:	79 83       	std	Y+1, r23	; 0x01
     60a:	68 83       	st	Y, r22
	newthephi[1]=(180*vec[1].arg())/M_PI;
     60c:	c8 01       	movw	r24, r16
     60e:	08 96       	adiw	r24, 0x08	; 8
     610:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN7Complex3argEv>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	44 e3       	ldi	r20, 0x34	; 52
     61a:	53 e4       	ldi	r21, 0x43	; 67
     61c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__mulsf3>
     620:	2b ed       	ldi	r18, 0xDB	; 219
     622:	3f e0       	ldi	r19, 0x0F	; 15
     624:	49 e4       	ldi	r20, 0x49	; 73
     626:	50 e4       	ldi	r21, 0x40	; 64
     628:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3>
     62c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fixsfsi>
     630:	7b 83       	std	Y+3, r23	; 0x03
     632:	6a 83       	std	Y+2, r22	; 0x02
	
	
	print_states(qb_count,vec,"After: ");
     634:	45 e7       	ldi	r20, 0x75	; 117
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	b8 01       	movw	r22, r16
     63a:	c7 01       	movw	r24, r14
     63c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     640:	ce 01       	movw	r24, r28
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	08 95       	ret

00000650 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     650:	2f 92       	push	r2
     652:	3f 92       	push	r3
     654:	4f 92       	push	r4
     656:	5f 92       	push	r5
     658:	6f 92       	push	r6
     65a:	7f 92       	push	r7
     65c:	8f 92       	push	r8
     65e:	9f 92       	push	r9
     660:	af 92       	push	r10
     662:	bf 92       	push	r11
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	60 97       	sbiw	r28, 0x10	; 16
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	4b 01       	movw	r8, r22
     686:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     688:	80 e1       	ldi	r24, 0x10	; 16
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <malloc>
     690:	38 2e       	mov	r3, r24
     692:	29 2e       	mov	r2, r25
     694:	c8 2e       	mov	r12, r24
     696:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     698:	a1 2c       	mov	r10, r1
     69a:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     69c:	24 01       	movw	r4, r8
     69e:	88 e0       	ldi	r24, 0x08	; 8
     6a0:	48 0e       	add	r4, r24
     6a2:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     6a4:	ce 01       	movw	r24, r28
     6a6:	09 96       	adiw	r24, 0x09	; 9
     6a8:	0e 94 a4 00 	call	0x148	; 0x148 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     6ac:	75 01       	movw	r14, r10
     6ae:	ee 0c       	add	r14, r14
     6b0:	ff 1c       	adc	r15, r15
     6b2:	ee 0c       	add	r14, r14
     6b4:	ff 1c       	adc	r15, r15
     6b6:	ee 0c       	add	r14, r14
     6b8:	ff 1c       	adc	r15, r15
     6ba:	e6 0c       	add	r14, r6
     6bc:	f7 1c       	adc	r15, r7
     6be:	d7 01       	movw	r26, r14
     6c0:	0c 91       	ld	r16, X
     6c2:	11 96       	adiw	r26, 0x01	; 1
     6c4:	1c 91       	ld	r17, X
     6c6:	11 97       	sbiw	r26, 0x01	; 1
     6c8:	12 96       	adiw	r26, 0x02	; 2
     6ca:	2c 91       	ld	r18, X
     6cc:	12 97       	sbiw	r26, 0x02	; 2
     6ce:	13 96       	adiw	r26, 0x03	; 3
     6d0:	3c 91       	ld	r19, X
     6d2:	13 97       	sbiw	r26, 0x03	; 3
     6d4:	14 96       	adiw	r26, 0x04	; 4
     6d6:	4c 91       	ld	r20, X
     6d8:	14 97       	sbiw	r26, 0x04	; 4
     6da:	15 96       	adiw	r26, 0x05	; 5
     6dc:	5c 91       	ld	r21, X
     6de:	15 97       	sbiw	r26, 0x05	; 5
     6e0:	16 96       	adiw	r26, 0x06	; 6
     6e2:	6c 91       	ld	r22, X
     6e4:	16 97       	sbiw	r26, 0x06	; 6
     6e6:	17 96       	adiw	r26, 0x07	; 7
     6e8:	7c 91       	ld	r23, X
     6ea:	c4 01       	movw	r24, r8
     6ec:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN7Complex3mulES_>
     6f0:	02 2f       	mov	r16, r18
     6f2:	13 2f       	mov	r17, r19
     6f4:	24 2f       	mov	r18, r20
     6f6:	35 2f       	mov	r19, r21
     6f8:	46 2f       	mov	r20, r22
     6fa:	57 2f       	mov	r21, r23
     6fc:	68 2f       	mov	r22, r24
     6fe:	79 2f       	mov	r23, r25
     700:	ce 01       	movw	r24, r28
     702:	09 96       	adiw	r24, 0x09	; 9
     704:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN7Complex3addES_>
     708:	29 87       	std	Y+9, r18	; 0x09
     70a:	3a 87       	std	Y+10, r19	; 0x0a
     70c:	4b 87       	std	Y+11, r20	; 0x0b
     70e:	5c 87       	std	Y+12, r21	; 0x0c
     710:	6d 87       	std	Y+13, r22	; 0x0d
     712:	7e 87       	std	Y+14, r23	; 0x0e
     714:	8f 87       	std	Y+15, r24	; 0x0f
     716:	98 8b       	std	Y+16, r25	; 0x10
     718:	f7 01       	movw	r30, r14
     71a:	70 96       	adiw	r30, 0x10	; 16
     71c:	d7 01       	movw	r26, r14
     71e:	50 96       	adiw	r26, 0x10	; 16
     720:	0c 91       	ld	r16, X
     722:	11 81       	ldd	r17, Z+1	; 0x01
     724:	22 81       	ldd	r18, Z+2	; 0x02
     726:	33 81       	ldd	r19, Z+3	; 0x03
     728:	44 81       	ldd	r20, Z+4	; 0x04
     72a:	55 81       	ldd	r21, Z+5	; 0x05
     72c:	66 81       	ldd	r22, Z+6	; 0x06
     72e:	77 81       	ldd	r23, Z+7	; 0x07
     730:	c2 01       	movw	r24, r4
     732:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN7Complex3mulES_>
     736:	02 2f       	mov	r16, r18
     738:	13 2f       	mov	r17, r19
     73a:	24 2f       	mov	r18, r20
     73c:	35 2f       	mov	r19, r21
     73e:	46 2f       	mov	r20, r22
     740:	57 2f       	mov	r21, r23
     742:	68 2f       	mov	r22, r24
     744:	79 2f       	mov	r23, r25
     746:	ce 01       	movw	r24, r28
     748:	09 96       	adiw	r24, 0x09	; 9
     74a:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN7Complex3addES_>
     74e:	29 87       	std	Y+9, r18	; 0x09
     750:	3a 87       	std	Y+10, r19	; 0x0a
     752:	4b 87       	std	Y+11, r20	; 0x0b
     754:	5c 87       	std	Y+12, r21	; 0x0c
     756:	6d 87       	std	Y+13, r22	; 0x0d
     758:	7e 87       	std	Y+14, r23	; 0x0e
     75a:	8f 87       	std	Y+15, r24	; 0x0f
     75c:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     75e:	89 85       	ldd	r24, Y+9	; 0x09
     760:	9a 85       	ldd	r25, Y+10	; 0x0a
     762:	ab 85       	ldd	r26, Y+11	; 0x0b
     764:	bc 85       	ldd	r27, Y+12	; 0x0c
     766:	f6 01       	movw	r30, r12
     768:	80 83       	st	Z, r24
     76a:	91 83       	std	Z+1, r25	; 0x01
     76c:	a2 83       	std	Z+2, r26	; 0x02
     76e:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     770:	8d 85       	ldd	r24, Y+13	; 0x0d
     772:	9e 85       	ldd	r25, Y+14	; 0x0e
     774:	af 85       	ldd	r26, Y+15	; 0x0f
     776:	b8 89       	ldd	r27, Y+16	; 0x10
     778:	84 83       	std	Z+4, r24	; 0x04
     77a:	95 83       	std	Z+5, r25	; 0x05
     77c:	a6 83       	std	Z+6, r26	; 0x06
     77e:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     780:	ff ef       	ldi	r31, 0xFF	; 255
     782:	af 1a       	sub	r10, r31
     784:	bf 0a       	sbc	r11, r31
     786:	88 e0       	ldi	r24, 0x08	; 8
     788:	c8 0e       	add	r12, r24
     78a:	d1 1c       	adc	r13, r1
     78c:	a2 e0       	ldi	r26, 0x02	; 2
     78e:	aa 16       	cp	r10, r26
     790:	b1 04       	cpc	r11, r1
     792:	09 f0       	breq	.+2      	; 0x796 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     794:	87 cf       	rjmp	.-242    	; 0x6a4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     796:	83 2d       	mov	r24, r3
     798:	92 2d       	mov	r25, r2
     79a:	60 96       	adiw	r28, 0x10	; 16
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	9f 90       	pop	r9
     7bc:	8f 90       	pop	r8
     7be:	7f 90       	pop	r7
     7c0:	6f 90       	pop	r6
     7c2:	5f 90       	pop	r5
     7c4:	4f 90       	pop	r4
     7c6:	3f 90       	pop	r3
     7c8:	2f 90       	pop	r2
     7ca:	08 95       	ret

000007cc <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     7cc:	2f 92       	push	r2
     7ce:	3f 92       	push	r3
     7d0:	4f 92       	push	r4
     7d2:	5f 92       	push	r5
     7d4:	6f 92       	push	r6
     7d6:	7f 92       	push	r7
     7d8:	8f 92       	push	r8
     7da:	9f 92       	push	r9
     7dc:	af 92       	push	r10
     7de:	bf 92       	push	r11
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	64 97       	sbiw	r28, 0x14	; 20
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	4b 01       	movw	r8, r22
     802:	e4 2e       	mov	r14, r20
     804:	f5 2e       	mov	r15, r21
	print_states(2,q,"Before: ");
     806:	4d e7       	ldi	r20, 0x7D	; 125
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_Z12print_statesiP7ComplexPc>

	
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     812:	80 e2       	ldi	r24, 0x20	; 32
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <malloc>
     81a:	8b 8b       	std	Y+19, r24	; 0x13
     81c:	9c 8b       	std	Y+20, r25	; 0x14
     81e:	48 2e       	mov	r4, r24
     820:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     822:	61 2c       	mov	r6, r1
     824:	71 2c       	mov	r7, r1
     826:	e9 8a       	std	Y+17, r14	; 0x11
     828:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     82a:	21 2c       	mov	r2, r1
     82c:	31 2c       	mov	r3, r1
     82e:	ce 01       	movw	r24, r28
     830:	09 96       	adiw	r24, 0x09	; 9
     832:	0e 94 a4 00 	call	0x148	; 0x148 <_ZN7ComplexC1Ev>
     836:	c9 88       	ldd	r12, Y+17	; 0x11
     838:	da 88       	ldd	r13, Y+18	; 0x12
     83a:	e2 2c       	mov	r14, r2
     83c:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     83e:	53 01       	movw	r10, r6
     840:	aa 0c       	add	r10, r10
     842:	bb 1c       	adc	r11, r11
     844:	aa 0c       	add	r10, r10
     846:	bb 1c       	adc	r11, r11
     848:	aa 0c       	add	r10, r10
     84a:	bb 1c       	adc	r11, r11
     84c:	f5 01       	movw	r30, r10
     84e:	ec 0d       	add	r30, r12
     850:	fd 1d       	adc	r31, r13
     852:	00 81       	ld	r16, Z
     854:	11 81       	ldd	r17, Z+1	; 0x01
     856:	22 81       	ldd	r18, Z+2	; 0x02
     858:	33 81       	ldd	r19, Z+3	; 0x03
     85a:	44 81       	ldd	r20, Z+4	; 0x04
     85c:	55 81       	ldd	r21, Z+5	; 0x05
     85e:	66 81       	ldd	r22, Z+6	; 0x06
     860:	77 81       	ldd	r23, Z+7	; 0x07
     862:	c4 01       	movw	r24, r8
     864:	8e 0d       	add	r24, r14
     866:	9f 1d       	adc	r25, r15
     868:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN7Complex3mulES_>
     86c:	29 83       	std	Y+1, r18	; 0x01
     86e:	3a 83       	std	Y+2, r19	; 0x02
     870:	4b 83       	std	Y+3, r20	; 0x03
     872:	5c 83       	std	Y+4, r21	; 0x04
     874:	6d 83       	std	Y+5, r22	; 0x05
     876:	7e 83       	std	Y+6, r23	; 0x06
     878:	8f 83       	std	Y+7, r24	; 0x07
     87a:	98 87       	std	Y+8, r25	; 0x08
     87c:	02 2f       	mov	r16, r18
     87e:	13 2f       	mov	r17, r19
     880:	24 2f       	mov	r18, r20
     882:	35 2f       	mov	r19, r21
     884:	46 2f       	mov	r20, r22
     886:	57 2f       	mov	r21, r23
     888:	68 2f       	mov	r22, r24
     88a:	79 2f       	mov	r23, r25
     88c:	ce 01       	movw	r24, r28
     88e:	09 96       	adiw	r24, 0x09	; 9
     890:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN7Complex3addES_>
     894:	29 87       	std	Y+9, r18	; 0x09
     896:	3a 87       	std	Y+10, r19	; 0x0a
     898:	4b 87       	std	Y+11, r20	; 0x0b
     89a:	5c 87       	std	Y+12, r21	; 0x0c
     89c:	6d 87       	std	Y+13, r22	; 0x0d
     89e:	7e 87       	std	Y+14, r23	; 0x0e
     8a0:	8f 87       	std	Y+15, r24	; 0x0f
     8a2:	98 8b       	std	Y+16, r25	; 0x10
     8a4:	88 e0       	ldi	r24, 0x08	; 8
     8a6:	e8 0e       	add	r14, r24
     8a8:	f1 1c       	adc	r15, r1
     8aa:	e0 e2       	ldi	r30, 0x20	; 32
     8ac:	ce 0e       	add	r12, r30
     8ae:	d1 1c       	adc	r13, r1
     8b0:	f0 e2       	ldi	r31, 0x20	; 32
     8b2:	ef 16       	cp	r14, r31
     8b4:	f1 04       	cpc	r15, r1
     8b6:	51 f6       	brne	.-108    	; 0x84c <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x80>
		result[i].re=tmp.re;
     8b8:	89 85       	ldd	r24, Y+9	; 0x09
     8ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     8bc:	ab 85       	ldd	r26, Y+11	; 0x0b
     8be:	bc 85       	ldd	r27, Y+12	; 0x0c
     8c0:	f2 01       	movw	r30, r4
     8c2:	80 83       	st	Z, r24
     8c4:	91 83       	std	Z+1, r25	; 0x01
     8c6:	a2 83       	std	Z+2, r26	; 0x02
     8c8:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     8ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     8cc:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ce:	af 85       	ldd	r26, Y+15	; 0x0f
     8d0:	b8 89       	ldd	r27, Y+16	; 0x10
     8d2:	84 83       	std	Z+4, r24	; 0x04
     8d4:	95 83       	std	Z+5, r25	; 0x05
     8d6:	a6 83       	std	Z+6, r26	; 0x06
     8d8:	b7 83       	std	Z+7, r27	; 0x07
	print_states(2,q,"Before: ");

	
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     8da:	ff ef       	ldi	r31, 0xFF	; 255
     8dc:	6f 1a       	sub	r6, r31
     8de:	7f 0a       	sbc	r7, r31
     8e0:	88 e0       	ldi	r24, 0x08	; 8
     8e2:	48 0e       	add	r4, r24
     8e4:	51 1c       	adc	r5, r1
     8e6:	e4 e0       	ldi	r30, 0x04	; 4
     8e8:	6e 16       	cp	r6, r30
     8ea:	71 04       	cpc	r7, r1
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x124>
     8ee:	9f cf       	rjmp	.-194    	; 0x82e <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x62>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     8f0:	8b 89       	ldd	r24, Y+19	; 0x13
     8f2:	9c 89       	ldd	r25, Y+20	; 0x14
     8f4:	64 96       	adiw	r28, 0x14	; 20
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	df 90       	pop	r13
     90e:	cf 90       	pop	r12
     910:	bf 90       	pop	r11
     912:	af 90       	pop	r10
     914:	9f 90       	pop	r9
     916:	8f 90       	pop	r8
     918:	7f 90       	pop	r7
     91a:	6f 90       	pop	r6
     91c:	5f 90       	pop	r5
     91e:	4f 90       	pop	r4
     920:	3f 90       	pop	r3
     922:	2f 90       	pop	r2
     924:	08 95       	ret

00000926 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
     926:	af 92       	push	r10
     928:	bf 92       	push	r11
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	a4 97       	sbiw	r28, 0x24	; 36
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	7c 01       	movw	r14, r24
     94c:	5b 01       	movw	r10, r22
     94e:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
     950:	00 e0       	ldi	r16, 0x00	; 0
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	98 01       	movw	r18, r16
     956:	b9 01       	movw	r22, r18
     958:	a8 01       	movw	r20, r16
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     962:	00 e0       	ldi	r16, 0x00	; 0
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	98 01       	movw	r18, r16
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	60 e8       	ldi	r22, 0x80	; 128
     96e:	7f e3       	ldi	r23, 0x3F	; 63
     970:	ce 01       	movw	r24, r28
     972:	09 96       	adiw	r24, 0x09	; 9
     974:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     978:	00 e0       	ldi	r16, 0x00	; 0
     97a:	10 e0       	ldi	r17, 0x00	; 0
     97c:	98 01       	movw	r18, r16
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	60 e8       	ldi	r22, 0x80	; 128
     984:	7f e3       	ldi	r23, 0x3F	; 63
     986:	ce 01       	movw	r24, r28
     988:	41 96       	adiw	r24, 0x11	; 17
     98a:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     98e:	00 e0       	ldi	r16, 0x00	; 0
     990:	10 e0       	ldi	r17, 0x00	; 0
     992:	98 01       	movw	r18, r16
     994:	b9 01       	movw	r22, r18
     996:	a8 01       	movw	r20, r16
     998:	ce 01       	movw	r24, r28
     99a:	49 96       	adiw	r24, 0x19	; 25
     99c:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     9a0:	bc a2       	std	Y+36, r11	; 0x24
     9a2:	ab a2       	std	Y+35, r10	; 0x23
     9a4:	da a2       	std	Y+34, r13	; 0x22
     9a6:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix),1);
     9a8:	9e 01       	movw	r18, r28
     9aa:	2f 5d       	subi	r18, 0xDF	; 223
     9ac:	3f 4f       	sbci	r19, 0xFF	; 255
     9ae:	ae 01       	movw	r20, r28
     9b0:	4d 5d       	subi	r20, 0xDD	; 221
     9b2:	5f 4f       	sbci	r21, 0xFF	; 255
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	c7 01       	movw	r24, r14
     9ba:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN5Gates8ampl2vecEiPiS0_>
     9be:	ae 01       	movw	r20, r28
     9c0:	4f 5f       	subi	r20, 0xFF	; 255
     9c2:	5f 4f       	sbci	r21, 0xFF	; 255
     9c4:	bc 01       	movw	r22, r24
     9c6:	c7 01       	movw	r24, r14
     9c8:	0e 94 28 03 	call	0x650	; 0x650 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     9cc:	41 e0       	ldi	r20, 0x01	; 1
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	bc 01       	movw	r22, r24
     9d2:	c7 01       	movw	r24, r14
     9d4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN5Gates8vec2amplEP7Complexi>
}
     9d8:	a4 96       	adiw	r28, 0x24	; 36
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	df 90       	pop	r13
     9f2:	cf 90       	pop	r12
     9f4:	bf 90       	pop	r11
     9f6:	af 90       	pop	r10
     9f8:	08 95       	ret

000009fa <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
     9fa:	af 92       	push	r10
     9fc:	bf 92       	push	r11
     9fe:	cf 92       	push	r12
     a00:	df 92       	push	r13
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	a4 97       	sbiw	r28, 0x24	; 36
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	7c 01       	movw	r14, r24
     a20:	5b 01       	movw	r10, r22
     a22:	6a 01       	movw	r12, r20
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
     a24:	00 e0       	ldi	r16, 0x00	; 0
     a26:	10 e0       	ldi	r17, 0x00	; 0
     a28:	98 01       	movw	r18, r16
     a2a:	b9 01       	movw	r22, r18
     a2c:	a8 01       	movw	r20, r16
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     a36:	00 e0       	ldi	r16, 0x00	; 0
     a38:	10 e0       	ldi	r17, 0x00	; 0
     a3a:	20 e8       	ldi	r18, 0x80	; 128
     a3c:	3f eb       	ldi	r19, 0xBF	; 191
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	ba 01       	movw	r22, r20
     a44:	ce 01       	movw	r24, r28
     a46:	09 96       	adiw	r24, 0x09	; 9
     a48:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     a4c:	00 e0       	ldi	r16, 0x00	; 0
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	20 e8       	ldi	r18, 0x80	; 128
     a52:	3f e3       	ldi	r19, 0x3F	; 63
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	ba 01       	movw	r22, r20
     a5a:	ce 01       	movw	r24, r28
     a5c:	41 96       	adiw	r24, 0x11	; 17
     a5e:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	98 01       	movw	r18, r16
     a68:	b9 01       	movw	r22, r18
     a6a:	a8 01       	movw	r20, r16
     a6c:	ce 01       	movw	r24, r28
     a6e:	49 96       	adiw	r24, 0x19	; 25
     a70:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     a74:	bc a2       	std	Y+36, r11	; 0x24
     a76:	ab a2       	std	Y+35, r10	; 0x23
     a78:	da a2       	std	Y+34, r13	; 0x22
     a7a:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),y_matrix),1);
     a7c:	9e 01       	movw	r18, r28
     a7e:	2f 5d       	subi	r18, 0xDF	; 223
     a80:	3f 4f       	sbci	r19, 0xFF	; 255
     a82:	ae 01       	movw	r20, r28
     a84:	4d 5d       	subi	r20, 0xDD	; 221
     a86:	5f 4f       	sbci	r21, 0xFF	; 255
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	c7 01       	movw	r24, r14
     a8e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN5Gates8ampl2vecEiPiS0_>
     a92:	ae 01       	movw	r20, r28
     a94:	4f 5f       	subi	r20, 0xFF	; 255
     a96:	5f 4f       	sbci	r21, 0xFF	; 255
     a98:	bc 01       	movw	r22, r24
     a9a:	c7 01       	movw	r24, r14
     a9c:	0e 94 28 03 	call	0x650	; 0x650 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     aa0:	41 e0       	ldi	r20, 0x01	; 1
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	bc 01       	movw	r22, r24
     aa6:	c7 01       	movw	r24, r14
     aa8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN5Gates8vec2amplEP7Complexi>
}
     aac:	a4 96       	adiw	r28, 0x24	; 36
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	08 95       	ret

00000ace <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	a4 97       	sbiw	r28, 0x24	; 36
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	7c 01       	movw	r14, r24
     af4:	5b 01       	movw	r10, r22
     af6:	6a 01       	movw	r12, r20
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
     af8:	00 e0       	ldi	r16, 0x00	; 0
     afa:	10 e0       	ldi	r17, 0x00	; 0
     afc:	98 01       	movw	r18, r16
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	60 e8       	ldi	r22, 0x80	; 128
     b04:	7f e3       	ldi	r23, 0x3F	; 63
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     b0e:	00 e0       	ldi	r16, 0x00	; 0
     b10:	10 e0       	ldi	r17, 0x00	; 0
     b12:	98 01       	movw	r18, r16
     b14:	b9 01       	movw	r22, r18
     b16:	a8 01       	movw	r20, r16
     b18:	ce 01       	movw	r24, r28
     b1a:	09 96       	adiw	r24, 0x09	; 9
     b1c:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     b20:	00 e0       	ldi	r16, 0x00	; 0
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	98 01       	movw	r18, r16
     b26:	b9 01       	movw	r22, r18
     b28:	a8 01       	movw	r20, r16
     b2a:	ce 01       	movw	r24, r28
     b2c:	41 96       	adiw	r24, 0x11	; 17
     b2e:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     b32:	00 e0       	ldi	r16, 0x00	; 0
     b34:	10 e0       	ldi	r17, 0x00	; 0
     b36:	98 01       	movw	r18, r16
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	60 e8       	ldi	r22, 0x80	; 128
     b3e:	7f eb       	ldi	r23, 0xBF	; 191
     b40:	ce 01       	movw	r24, r28
     b42:	49 96       	adiw	r24, 0x19	; 25
     b44:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     b48:	bc a2       	std	Y+36, r11	; 0x24
     b4a:	ab a2       	std	Y+35, r10	; 0x23
     b4c:	da a2       	std	Y+34, r13	; 0x22
     b4e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),z_matrix),1);
     b50:	9e 01       	movw	r18, r28
     b52:	2f 5d       	subi	r18, 0xDF	; 223
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	ae 01       	movw	r20, r28
     b58:	4d 5d       	subi	r20, 0xDD	; 221
     b5a:	5f 4f       	sbci	r21, 0xFF	; 255
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	c7 01       	movw	r24, r14
     b62:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN5Gates8ampl2vecEiPiS0_>
     b66:	ae 01       	movw	r20, r28
     b68:	4f 5f       	subi	r20, 0xFF	; 255
     b6a:	5f 4f       	sbci	r21, 0xFF	; 255
     b6c:	bc 01       	movw	r22, r24
     b6e:	c7 01       	movw	r24, r14
     b70:	0e 94 28 03 	call	0x650	; 0x650 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	bc 01       	movw	r22, r24
     b7a:	c7 01       	movw	r24, r14
     b7c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN5Gates8vec2amplEP7Complexi>
}
     b80:	a4 96       	adiw	r28, 0x24	; 36
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	08 95       	ret

00000ba2 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
     ba2:	af 92       	push	r10
     ba4:	bf 92       	push	r11
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	a4 97       	sbiw	r28, 0x24	; 36
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	7c 01       	movw	r14, r24
     bc8:	5b 01       	movw	r10, r22
     bca:	6a 01       	movw	r12, r20
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
     bcc:	00 e0       	ldi	r16, 0x00	; 0
     bce:	10 e0       	ldi	r17, 0x00	; 0
     bd0:	98 01       	movw	r18, r16
     bd2:	43 ef       	ldi	r20, 0xF3	; 243
     bd4:	54 e0       	ldi	r21, 0x04	; 4
     bd6:	65 e3       	ldi	r22, 0x35	; 53
     bd8:	7f e3       	ldi	r23, 0x3F	; 63
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     be2:	00 e0       	ldi	r16, 0x00	; 0
     be4:	10 e0       	ldi	r17, 0x00	; 0
     be6:	98 01       	movw	r18, r16
     be8:	43 ef       	ldi	r20, 0xF3	; 243
     bea:	54 e0       	ldi	r21, 0x04	; 4
     bec:	65 e3       	ldi	r22, 0x35	; 53
     bee:	7f e3       	ldi	r23, 0x3F	; 63
     bf0:	ce 01       	movw	r24, r28
     bf2:	09 96       	adiw	r24, 0x09	; 9
     bf4:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     bf8:	00 e0       	ldi	r16, 0x00	; 0
     bfa:	10 e0       	ldi	r17, 0x00	; 0
     bfc:	98 01       	movw	r18, r16
     bfe:	43 ef       	ldi	r20, 0xF3	; 243
     c00:	54 e0       	ldi	r21, 0x04	; 4
     c02:	65 e3       	ldi	r22, 0x35	; 53
     c04:	7f e3       	ldi	r23, 0x3F	; 63
     c06:	ce 01       	movw	r24, r28
     c08:	41 96       	adiw	r24, 0x11	; 17
     c0a:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     c0e:	00 e0       	ldi	r16, 0x00	; 0
     c10:	10 e0       	ldi	r17, 0x00	; 0
     c12:	98 01       	movw	r18, r16
     c14:	43 ef       	ldi	r20, 0xF3	; 243
     c16:	54 e0       	ldi	r21, 0x04	; 4
     c18:	65 e3       	ldi	r22, 0x35	; 53
     c1a:	7f eb       	ldi	r23, 0xBF	; 191
     c1c:	ce 01       	movw	r24, r28
     c1e:	49 96       	adiw	r24, 0x19	; 25
     c20:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     c24:	bc a2       	std	Y+36, r11	; 0x24
     c26:	ab a2       	std	Y+35, r10	; 0x23
     c28:	da a2       	std	Y+34, r13	; 0x22
     c2a:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),h_matrix),1);
     c2c:	9e 01       	movw	r18, r28
     c2e:	2f 5d       	subi	r18, 0xDF	; 223
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	ae 01       	movw	r20, r28
     c34:	4d 5d       	subi	r20, 0xDD	; 221
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	c7 01       	movw	r24, r14
     c3e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN5Gates8ampl2vecEiPiS0_>
     c42:	ae 01       	movw	r20, r28
     c44:	4f 5f       	subi	r20, 0xFF	; 255
     c46:	5f 4f       	sbci	r21, 0xFF	; 255
     c48:	bc 01       	movw	r22, r24
     c4a:	c7 01       	movw	r24, r14
     c4c:	0e 94 28 03 	call	0x650	; 0x650 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     c50:	41 e0       	ldi	r20, 0x01	; 1
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	bc 01       	movw	r22, r24
     c56:	c7 01       	movw	r24, r14
     c58:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN5Gates8vec2amplEP7Complexi>
}
     c5c:	a4 96       	adiw	r28, 0x24	; 36
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	08 95       	ret

00000c7e <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
     c7e:	af 92       	push	r10
     c80:	bf 92       	push	r11
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	a4 97       	sbiw	r28, 0x24	; 36
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	7c 01       	movw	r14, r24
     ca4:	5b 01       	movw	r10, r22
     ca6:	6a 01       	movw	r12, r20
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
     ca8:	00 e0       	ldi	r16, 0x00	; 0
     caa:	10 e0       	ldi	r17, 0x00	; 0
     cac:	98 01       	movw	r18, r16
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	60 e8       	ldi	r22, 0x80	; 128
     cb4:	7f e3       	ldi	r23, 0x3F	; 63
     cb6:	ce 01       	movw	r24, r28
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     cbe:	00 e0       	ldi	r16, 0x00	; 0
     cc0:	10 e0       	ldi	r17, 0x00	; 0
     cc2:	98 01       	movw	r18, r16
     cc4:	b9 01       	movw	r22, r18
     cc6:	a8 01       	movw	r20, r16
     cc8:	ce 01       	movw	r24, r28
     cca:	09 96       	adiw	r24, 0x09	; 9
     ccc:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     cd0:	00 e0       	ldi	r16, 0x00	; 0
     cd2:	10 e0       	ldi	r17, 0x00	; 0
     cd4:	98 01       	movw	r18, r16
     cd6:	b9 01       	movw	r22, r18
     cd8:	a8 01       	movw	r20, r16
     cda:	ce 01       	movw	r24, r28
     cdc:	41 96       	adiw	r24, 0x11	; 17
     cde:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     ce2:	00 e0       	ldi	r16, 0x00	; 0
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	20 e8       	ldi	r18, 0x80	; 128
     ce8:	3f e3       	ldi	r19, 0x3F	; 63
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	ba 01       	movw	r22, r20
     cf0:	ce 01       	movw	r24, r28
     cf2:	49 96       	adiw	r24, 0x19	; 25
     cf4:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     cf8:	bc a2       	std	Y+36, r11	; 0x24
     cfa:	ab a2       	std	Y+35, r10	; 0x23
     cfc:	da a2       	std	Y+34, r13	; 0x22
     cfe:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),s_matrix),1);
     d00:	9e 01       	movw	r18, r28
     d02:	2f 5d       	subi	r18, 0xDF	; 223
     d04:	3f 4f       	sbci	r19, 0xFF	; 255
     d06:	ae 01       	movw	r20, r28
     d08:	4d 5d       	subi	r20, 0xDD	; 221
     d0a:	5f 4f       	sbci	r21, 0xFF	; 255
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	c7 01       	movw	r24, r14
     d12:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN5Gates8ampl2vecEiPiS0_>
     d16:	ae 01       	movw	r20, r28
     d18:	4f 5f       	subi	r20, 0xFF	; 255
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	bc 01       	movw	r22, r24
     d1e:	c7 01       	movw	r24, r14
     d20:	0e 94 28 03 	call	0x650	; 0x650 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     d24:	41 e0       	ldi	r20, 0x01	; 1
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	bc 01       	movw	r22, r24
     d2a:	c7 01       	movw	r24, r14
     d2c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN5Gates8vec2amplEP7Complexi>
}
     d30:	a4 96       	adiw	r28, 0x24	; 36
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	bf 90       	pop	r11
     d4e:	af 90       	pop	r10
     d50:	08 95       	ret

00000d52 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	a4 97       	sbiw	r28, 0x24	; 36
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	7c 01       	movw	r14, r24
     d78:	5b 01       	movw	r10, r22
     d7a:	6a 01       	movw	r12, r20
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
     d7c:	00 e0       	ldi	r16, 0x00	; 0
     d7e:	10 e0       	ldi	r17, 0x00	; 0
     d80:	98 01       	movw	r18, r16
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	60 e8       	ldi	r22, 0x80	; 128
     d88:	7f e3       	ldi	r23, 0x3F	; 63
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     d92:	00 e0       	ldi	r16, 0x00	; 0
     d94:	10 e0       	ldi	r17, 0x00	; 0
     d96:	98 01       	movw	r18, r16
     d98:	b9 01       	movw	r22, r18
     d9a:	a8 01       	movw	r20, r16
     d9c:	ce 01       	movw	r24, r28
     d9e:	09 96       	adiw	r24, 0x09	; 9
     da0:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     da4:	00 e0       	ldi	r16, 0x00	; 0
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	98 01       	movw	r18, r16
     daa:	b9 01       	movw	r22, r18
     dac:	a8 01       	movw	r20, r16
     dae:	ce 01       	movw	r24, r28
     db0:	41 96       	adiw	r24, 0x11	; 17
     db2:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     db6:	03 ef       	ldi	r16, 0xF3	; 243
     db8:	14 e0       	ldi	r17, 0x04	; 4
     dba:	25 e3       	ldi	r18, 0x35	; 53
     dbc:	3f e3       	ldi	r19, 0x3F	; 63
     dbe:	b9 01       	movw	r22, r18
     dc0:	a8 01       	movw	r20, r16
     dc2:	ce 01       	movw	r24, r28
     dc4:	49 96       	adiw	r24, 0x19	; 25
     dc6:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     dca:	bc a2       	std	Y+36, r11	; 0x24
     dcc:	ab a2       	std	Y+35, r10	; 0x23
     dce:	da a2       	std	Y+34, r13	; 0x22
     dd0:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),t_matrix),1);
     dd2:	9e 01       	movw	r18, r28
     dd4:	2f 5d       	subi	r18, 0xDF	; 223
     dd6:	3f 4f       	sbci	r19, 0xFF	; 255
     dd8:	ae 01       	movw	r20, r28
     dda:	4d 5d       	subi	r20, 0xDD	; 221
     ddc:	5f 4f       	sbci	r21, 0xFF	; 255
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	c7 01       	movw	r24, r14
     de4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN5Gates8ampl2vecEiPiS0_>
     de8:	ae 01       	movw	r20, r28
     dea:	4f 5f       	subi	r20, 0xFF	; 255
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	bc 01       	movw	r22, r24
     df0:	c7 01       	movw	r24, r14
     df2:	0e 94 28 03 	call	0x650	; 0x650 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     df6:	41 e0       	ldi	r20, 0x01	; 1
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	bc 01       	movw	r22, r24
     dfc:	c7 01       	movw	r24, r14
     dfe:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN5Gates8vec2amplEP7Complexi>
}
     e02:	a4 96       	adiw	r28, 0x24	; 36
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	df 90       	pop	r13
     e1c:	cf 90       	pop	r12
     e1e:	bf 90       	pop	r11
     e20:	af 90       	pop	r10
     e22:	08 95       	ret

00000e24 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
     e24:	6f 92       	push	r6
     e26:	7f 92       	push	r7
     e28:	8f 92       	push	r8
     e2a:	9f 92       	push	r9
     e2c:	af 92       	push	r10
     e2e:	bf 92       	push	r11
     e30:	cf 92       	push	r12
     e32:	df 92       	push	r13
     e34:	ef 92       	push	r14
     e36:	ff 92       	push	r15
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	c8 58       	subi	r28, 0x88	; 136
     e46:	d1 09       	sbc	r29, r1
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	7c 01       	movw	r14, r24
     e54:	3b 01       	movw	r6, r22
     e56:	5a 01       	movw	r10, r20
     e58:	49 01       	movw	r8, r18
     e5a:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
     e5c:	00 e0       	ldi	r16, 0x00	; 0
     e5e:	10 e0       	ldi	r17, 0x00	; 0
     e60:	98 01       	movw	r18, r16
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	60 e8       	ldi	r22, 0x80	; 128
     e68:	7f e3       	ldi	r23, 0x3F	; 63
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     e72:	00 e0       	ldi	r16, 0x00	; 0
     e74:	10 e0       	ldi	r17, 0x00	; 0
     e76:	98 01       	movw	r18, r16
     e78:	b9 01       	movw	r22, r18
     e7a:	a8 01       	movw	r20, r16
     e7c:	ce 01       	movw	r24, r28
     e7e:	09 96       	adiw	r24, 0x09	; 9
     e80:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     e84:	00 e0       	ldi	r16, 0x00	; 0
     e86:	10 e0       	ldi	r17, 0x00	; 0
     e88:	98 01       	movw	r18, r16
     e8a:	b9 01       	movw	r22, r18
     e8c:	a8 01       	movw	r20, r16
     e8e:	ce 01       	movw	r24, r28
     e90:	41 96       	adiw	r24, 0x11	; 17
     e92:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     e96:	00 e0       	ldi	r16, 0x00	; 0
     e98:	10 e0       	ldi	r17, 0x00	; 0
     e9a:	98 01       	movw	r18, r16
     e9c:	b9 01       	movw	r22, r18
     e9e:	a8 01       	movw	r20, r16
     ea0:	ce 01       	movw	r24, r28
     ea2:	49 96       	adiw	r24, 0x19	; 25
     ea4:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     ea8:	00 e0       	ldi	r16, 0x00	; 0
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	98 01       	movw	r18, r16
     eae:	b9 01       	movw	r22, r18
     eb0:	a8 01       	movw	r20, r16
     eb2:	ce 01       	movw	r24, r28
     eb4:	81 96       	adiw	r24, 0x21	; 33
     eb6:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     eba:	00 e0       	ldi	r16, 0x00	; 0
     ebc:	10 e0       	ldi	r17, 0x00	; 0
     ebe:	98 01       	movw	r18, r16
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	60 e8       	ldi	r22, 0x80	; 128
     ec6:	7f e3       	ldi	r23, 0x3F	; 63
     ec8:	ce 01       	movw	r24, r28
     eca:	89 96       	adiw	r24, 0x29	; 41
     ecc:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	10 e0       	ldi	r17, 0x00	; 0
     ed4:	98 01       	movw	r18, r16
     ed6:	b9 01       	movw	r22, r18
     ed8:	a8 01       	movw	r20, r16
     eda:	ce 01       	movw	r24, r28
     edc:	c1 96       	adiw	r24, 0x31	; 49
     ede:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     ee2:	00 e0       	ldi	r16, 0x00	; 0
     ee4:	10 e0       	ldi	r17, 0x00	; 0
     ee6:	98 01       	movw	r18, r16
     ee8:	b9 01       	movw	r22, r18
     eea:	a8 01       	movw	r20, r16
     eec:	ce 01       	movw	r24, r28
     eee:	c9 96       	adiw	r24, 0x39	; 57
     ef0:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     ef4:	00 e0       	ldi	r16, 0x00	; 0
     ef6:	10 e0       	ldi	r17, 0x00	; 0
     ef8:	98 01       	movw	r18, r16
     efa:	b9 01       	movw	r22, r18
     efc:	a8 01       	movw	r20, r16
     efe:	ce 01       	movw	r24, r28
     f00:	8f 5b       	subi	r24, 0xBF	; 191
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     f08:	00 e0       	ldi	r16, 0x00	; 0
     f0a:	10 e0       	ldi	r17, 0x00	; 0
     f0c:	98 01       	movw	r18, r16
     f0e:	b9 01       	movw	r22, r18
     f10:	a8 01       	movw	r20, r16
     f12:	ce 01       	movw	r24, r28
     f14:	87 5b       	subi	r24, 0xB7	; 183
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     f1c:	00 e0       	ldi	r16, 0x00	; 0
     f1e:	10 e0       	ldi	r17, 0x00	; 0
     f20:	98 01       	movw	r18, r16
     f22:	b9 01       	movw	r22, r18
     f24:	a8 01       	movw	r20, r16
     f26:	ce 01       	movw	r24, r28
     f28:	8f 5a       	subi	r24, 0xAF	; 175
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     f30:	00 e0       	ldi	r16, 0x00	; 0
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	98 01       	movw	r18, r16
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	60 e8       	ldi	r22, 0x80	; 128
     f3c:	7f e3       	ldi	r23, 0x3F	; 63
     f3e:	ce 01       	movw	r24, r28
     f40:	87 5a       	subi	r24, 0xA7	; 167
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     f48:	00 e0       	ldi	r16, 0x00	; 0
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	98 01       	movw	r18, r16
     f4e:	b9 01       	movw	r22, r18
     f50:	a8 01       	movw	r20, r16
     f52:	ce 01       	movw	r24, r28
     f54:	8f 59       	subi	r24, 0x9F	; 159
     f56:	9f 4f       	sbci	r25, 0xFF	; 255
     f58:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     f5c:	00 e0       	ldi	r16, 0x00	; 0
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	98 01       	movw	r18, r16
     f62:	b9 01       	movw	r22, r18
     f64:	a8 01       	movw	r20, r16
     f66:	ce 01       	movw	r24, r28
     f68:	87 59       	subi	r24, 0x97	; 151
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     f70:	00 e0       	ldi	r16, 0x00	; 0
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	98 01       	movw	r18, r16
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	60 e8       	ldi	r22, 0x80	; 128
     f7c:	7f e3       	ldi	r23, 0x3F	; 63
     f7e:	ce 01       	movw	r24, r28
     f80:	8f 58       	subi	r24, 0x8F	; 143
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
     f88:	00 e0       	ldi	r16, 0x00	; 0
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	98 01       	movw	r18, r16
     f8e:	b9 01       	movw	r22, r18
     f90:	a8 01       	movw	r20, r16
     f92:	ce 01       	movw	r24, r28
     f94:	87 58       	subi	r24, 0x87	; 135
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
     f9c:	cb 57       	subi	r28, 0x7B	; 123
     f9e:	df 4f       	sbci	r29, 0xFF	; 255
     fa0:	79 82       	std	Y+1, r7	; 0x01
     fa2:	68 82       	st	Y, r6
     fa4:	c5 58       	subi	r28, 0x85	; 133
     fa6:	d0 40       	sbci	r29, 0x00	; 0
     fa8:	c9 57       	subi	r28, 0x79	; 121
     faa:	df 4f       	sbci	r29, 0xFF	; 255
     fac:	99 82       	std	Y+1, r9	; 0x01
     fae:	88 82       	st	Y, r8
     fb0:	c7 58       	subi	r28, 0x87	; 135
     fb2:	d0 40       	sbci	r29, 0x00	; 0
     fb4:	cf 57       	subi	r28, 0x7F	; 127
     fb6:	df 4f       	sbci	r29, 0xFF	; 255
     fb8:	b9 82       	std	Y+1, r11	; 0x01
     fba:	a8 82       	st	Y, r10
     fbc:	c1 58       	subi	r28, 0x81	; 129
     fbe:	d0 40       	sbci	r29, 0x00	; 0
     fc0:	cd 57       	subi	r28, 0x7D	; 125
     fc2:	df 4f       	sbci	r29, 0xFF	; 255
     fc4:	d9 82       	std	Y+1, r13	; 0x01
     fc6:	c8 82       	st	Y, r12
     fc8:	c3 58       	subi	r28, 0x83	; 131
     fca:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix),2);
     fcc:	9e 01       	movw	r18, r28
     fce:	2f 57       	subi	r18, 0x7F	; 127
     fd0:	3f 4f       	sbci	r19, 0xFF	; 255
     fd2:	ae 01       	movw	r20, r28
     fd4:	4b 57       	subi	r20, 0x7B	; 123
     fd6:	5f 4f       	sbci	r21, 0xFF	; 255
     fd8:	62 e0       	ldi	r22, 0x02	; 2
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	c7 01       	movw	r24, r14
     fde:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN5Gates8ampl2vecEiPiS0_>
     fe2:	ae 01       	movw	r20, r28
     fe4:	4f 5f       	subi	r20, 0xFF	; 255
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	bc 01       	movw	r22, r24
     fea:	c7 01       	movw	r24, r14
     fec:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
     ff0:	42 e0       	ldi	r20, 0x02	; 2
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	bc 01       	movw	r22, r24
     ff6:	c7 01       	movw	r24, r14
     ff8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN5Gates8vec2amplEP7Complexi>
}
     ffc:	c8 57       	subi	r28, 0x78	; 120
     ffe:	df 4f       	sbci	r29, 0xFF	; 255
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	bf 90       	pop	r11
    101c:	af 90       	pop	r10
    101e:	9f 90       	pop	r9
    1020:	8f 90       	pop	r8
    1022:	7f 90       	pop	r7
    1024:	6f 90       	pop	r6
    1026:	08 95       	ret

00001028 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
Gates::Gates(){setup_seed();}

Serial s;
    1028:	81 ec       	ldi	r24, 0xC1	; 193
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <_ZN6SerialC1Ev>
    1030:	08 95       	ret

00001032 <main>:
#include "qepu.h"
int main(void){
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	00 d0       	rcall	.+0      	; 0x1038 <main+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <main+0x8>
    103a:	00 d0       	rcall	.+0      	; 0x103c <main+0xa>
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    1040:	ce 01       	movw	r24, r28
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	0e 94 29 08 	call	0x1052	; 0x1052 <_ZN4QEPUC1Ev>
	qepu.run();
    1048:	ce 01       	movw	r24, r28
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <_ZN4QEPU3runEv>
    1050:	ff cf       	rjmp	.-2      	; 0x1050 <main+0x1e>

00001052 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ec 01       	movw	r28, r24
    1058:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN6EEPromC1Ev>
    105c:	ce 01       	movw	r24, r28
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	0e 94 ac 0c 	call	0x1958	; 0x1958 <_ZN6SerialC1Ev>
    1064:	ce 01       	movw	r24, r28
    1066:	05 96       	adiw	r24, 0x05	; 5
    1068:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN5GatesC1Ev>
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	8a bb       	out	0x1a, r24	; 26
    1070:	1c 82       	std	Y+4, r1	; 0x04
    1072:	1b 82       	std	Y+3, r1	; 0x03
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    107a:	7b b3       	in	r23, 0x1b	; 27
    107c:	21 e0       	ldi	r18, 0x01	; 1
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	c9 01       	movw	r24, r18
    1082:	06 2e       	mov	r0, r22
    1084:	02 c0       	rjmp	.+4      	; 0x108a <_ZN4QEPU10setctrlpinEii+0x10>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <_ZN4QEPU10setctrlpinEii+0xc>
    108e:	80 95       	com	r24
    1090:	87 23       	and	r24, r23
    1092:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    1094:	8b b3       	in	r24, 0x1b	; 27
    1096:	02 c0       	rjmp	.+4      	; 0x109c <_ZN4QEPU10setctrlpinEii+0x22>
    1098:	44 0f       	add	r20, r20
    109a:	55 1f       	adc	r21, r21
    109c:	6a 95       	dec	r22
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <_ZN4QEPU10setctrlpinEii+0x1e>
    10a0:	48 2b       	or	r20, r24
    10a2:	4b bb       	out	0x1b, r20	; 27
    10a4:	08 95       	ret

000010a6 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    10b0:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    10b2:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    10b4:	64 e0       	ldi	r22, 0x04	; 4
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	ce 01       	movw	r24, r28
    10ba:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    10be:	41 e0       	ldi	r20, 0x01	; 1
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	66 e0       	ldi	r22, 0x06	; 6
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	ce 01       	movw	r24, r28
    10c8:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	66 e0       	ldi	r22, 0x06	; 6
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	ce 01       	movw	r24, r28
    10d6:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    10da:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	ec 01       	movw	r28, r24
    10ec:	8a 01       	movw	r16, r20
	DDRB=0x00;
    10ee:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    10f0:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	65 e0       	ldi	r22, 0x05	; 5
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    10fe:	a8 01       	movw	r20, r16
    1100:	64 e0       	ldi	r22, 0x04	; 4
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	ce 01       	movw	r24, r28
    1106:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    110a:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    110c:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    110e:	9f ef       	ldi	r25, 0xFF	; 255
    1110:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    111e:	6f 92       	push	r6
    1120:	7f 92       	push	r7
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	6c 01       	movw	r12, r24
	serial.writestrln("");
    113c:	8c 01       	movw	r16, r24
    113e:	0f 5f       	subi	r16, 0xFF	; 255
    1140:	1f 4f       	sbci	r17, 0xFF	; 255
    1142:	6f ea       	ldi	r22, 0xAF	; 175
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	c8 01       	movw	r24, r16
    1148:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    114c:	66 e8       	ldi	r22, 0x86	; 134
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	c8 01       	movw	r24, r16
    1152:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    1156:	c0 e0       	ldi	r28, 0x00	; 0
    1158:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    115a:	0f 2e       	mov	r0, r31
    115c:	f0 ea       	ldi	r31, 0xA0	; 160
    115e:	ef 2e       	mov	r14, r31
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	ff 2e       	mov	r15, r31
    1164:	f0 2d       	mov	r31, r0
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <malloc>
    116e:	88 2e       	mov	r8, r24
    1170:	99 2e       	mov	r9, r25
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	be 01       	movw	r22, r28
    1178:	c6 01       	movw	r24, r12
    117a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    117e:	9f 93       	push	r25
    1180:	8f 93       	push	r24
    1182:	ff 92       	push	r15
    1184:	ef 92       	push	r14
    1186:	9f 92       	push	r9
    1188:	8f 92       	push	r8
    118a:	0e 94 29 12 	call	0x2452	; 0x2452 <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <malloc>
    1196:	a8 2e       	mov	r10, r24
    1198:	b9 2e       	mov	r11, r25
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	be 01       	movw	r22, r28
    11a0:	c6 01       	movw	r24, r12
    11a2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    11a6:	9f 93       	push	r25
    11a8:	8f 93       	push	r24
    11aa:	ff 92       	push	r15
    11ac:	ef 92       	push	r14
    11ae:	bf 92       	push	r11
    11b0:	af 92       	push	r10
    11b2:	0e 94 29 12 	call	0x2452	; 0x2452 <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <malloc>
    11be:	68 2e       	mov	r6, r24
    11c0:	79 2e       	mov	r7, r25
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	ff 92       	push	r15
    11c8:	ef 92       	push	r14
    11ca:	7f 92       	push	r7
    11cc:	6f 92       	push	r6
    11ce:	0e 94 29 12 	call	0x2452	; 0x2452 <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    11d2:	63 ea       	ldi	r22, 0xA3	; 163
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	c8 01       	movw	r24, r16
    11d8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN6Serial8writestrEPc>
    11dc:	66 2d       	mov	r22, r6
    11de:	77 2d       	mov	r23, r7
    11e0:	c8 01       	movw	r24, r16
    11e2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN6Serial8writestrEPc>
    11e6:	65 ea       	ldi	r22, 0xA5	; 165
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	c8 01       	movw	r24, r16
    11ec:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    11f0:	68 2d       	mov	r22, r8
    11f2:	79 2d       	mov	r23, r9
    11f4:	c8 01       	movw	r24, r16
    11f6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    11fa:	60 eb       	ldi	r22, 0xB0	; 176
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	c8 01       	movw	r24, r16
    1200:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    1204:	6a 2d       	mov	r22, r10
    1206:	7b 2d       	mov	r23, r11
    1208:	c8 01       	movw	r24, r16
    120a:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    120e:	21 96       	adiw	r28, 0x01	; 1
    1210:	8d b7       	in	r24, 0x3d	; 61
    1212:	9e b7       	in	r25, 0x3e	; 62
    1214:	42 96       	adiw	r24, 0x12	; 18
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	9e bf       	out	0x3e, r25	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	8d bf       	out	0x3d, r24	; 61
    1220:	c4 30       	cpi	r28, 0x04	; 4
    1222:	d1 05       	cpc	r29, r1
    1224:	09 f0       	breq	.+2      	; 0x1228 <_ZN4QEPU7dumpmemEv+0x10a>
    1226:	9f cf       	rjmp	.-194    	; 0x1166 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	6f 90       	pop	r6
    1244:	08 95       	ret

00001246 <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	d6 2f       	mov	r29, r22
    1258:	c7 2f       	mov	r28, r23
    125a:	e6 2f       	mov	r30, r22
    125c:	f7 2f       	mov	r31, r23
	int c_length=0;
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    1262:	21 91       	ld	r18, Z+
    1264:	2f 3f       	cpi	r18, 0xFF	; 255
    1266:	89 f4       	brne	.+34     	; 0x128a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1268:	df 01       	movw	r26, r30
    126a:	12 97       	sbiw	r26, 0x02	; 2
    126c:	4c 91       	ld	r20, X
    126e:	4f 3f       	cpi	r20, 0xFF	; 255
    1270:	61 f4       	brne	.+24     	; 0x128a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1272:	11 97       	sbiw	r26, 0x01	; 1
    1274:	4c 91       	ld	r20, X
    1276:	4f 3f       	cpi	r20, 0xFF	; 255
    1278:	41 f4       	brne	.+16     	; 0x128a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    127a:	11 97       	sbiw	r26, 0x01	; 1
    127c:	4c 91       	ld	r20, X
    127e:	4f 3f       	cpi	r20, 0xFF	; 255
    1280:	21 f4       	brne	.+8      	; 0x128a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1282:	11 97       	sbiw	r26, 0x01	; 1
    1284:	2c 91       	ld	r18, X
    1286:	2f 3f       	cpi	r18, 0xFF	; 255
    1288:	11 f0       	breq	.+4      	; 0x128e <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	ea cf       	rjmp	.-44     	; 0x1262 <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    128e:	8c 01       	movw	r16, r24
    1290:	04 50       	subi	r16, 0x04	; 4
    1292:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    1294:	6c 01       	movw	r12, r24
    1296:	2f ef       	ldi	r18, 0xFF	; 255
    1298:	c2 1a       	sub	r12, r18
    129a:	d2 0a       	sbc	r13, r18
    129c:	76 01       	movw	r14, r12
    129e:	ee 0c       	add	r14, r14
    12a0:	ff 1c       	adc	r15, r15
    12a2:	c7 01       	movw	r24, r14
    12a4:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    12a8:	10 16       	cp	r1, r16
    12aa:	11 06       	cpc	r1, r17
    12ac:	74 f4       	brge	.+28     	; 0x12ca <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    12ae:	dc 01       	movw	r26, r24
    12b0:	ed 2f       	mov	r30, r29
    12b2:	fc 2f       	mov	r31, r28
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	41 91       	ld	r20, Z+
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	4d 93       	st	X+, r20
    12be:	5d 93       	st	X+, r21
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	20 17       	cp	r18, r16
    12c6:	31 07       	cpc	r19, r17
    12c8:	bc f3       	brlt	.-18     	; 0x12b8 <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    12ca:	0c 15       	cp	r16, r12
    12cc:	1d 05       	cpc	r17, r13
    12ce:	7c f4       	brge	.+30     	; 0x12ee <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    12d0:	f7 01       	movw	r30, r14
    12d2:	3a 97       	sbiw	r30, 0x0a	; 10
    12d4:	e8 0f       	add	r30, r24
    12d6:	f9 1f       	adc	r31, r25
    12d8:	25 e0       	ldi	r18, 0x05	; 5
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4f ef       	ldi	r20, 0xFF	; 255
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	41 93       	st	Z+, r20
    12e2:	51 93       	st	Z+, r21
    12e4:	21 50       	subi	r18, 0x01	; 1
    12e6:	31 09       	sbc	r19, r1
    12e8:	21 15       	cp	r18, r1
    12ea:	31 05       	cpc	r19, r1
    12ec:	c9 f7       	brne	.-14     	; 0x12e0 <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	08 95       	ret

00001300 <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	c4 56       	subi	r28, 0x64	; 100
    130e:	d1 09       	sbc	r29, r1
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
	//char str[countdigits(dec)+1];
	char str[100];
	sprintf(str,"%d",dec);
    131a:	7f 93       	push	r23
    131c:	6f 93       	push	r22
    131e:	80 ea       	ldi	r24, 0xA0	; 160
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9f 93       	push	r25
    1324:	8f 93       	push	r24
    1326:	8e 01       	movw	r16, r28
    1328:	0f 5f       	subi	r16, 0xFF	; 255
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	1f 93       	push	r17
    132e:	0f 93       	push	r16
    1330:	0e 94 29 12 	call	0x2452	; 0x2452 <sprintf>
	return str;
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
}
    1340:	c8 01       	movw	r24, r16
    1342:	cc 59       	subi	r28, 0x9C	; 156
    1344:	df 4f       	sbci	r29, 0xFF	; 255
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    135a:	61 15       	cp	r22, r1
    135c:	71 05       	cpc	r23, r1
    135e:	59 f0       	breq	.+22     	; 0x1376 <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1360:	8f e9       	ldi	r24, 0x9F	; 159
    1362:	9f e0       	ldi	r25, 0x0F	; 15
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <_ZN4QEPU5Utils5delayEi+0xa>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <_ZN4QEPU5Utils5delayEi+0x10>
    136a:	00 00       	nop
    136c:	61 50       	subi	r22, 0x01	; 1
    136e:	71 09       	sbc	r23, r1
    1370:	61 15       	cp	r22, r1
    1372:	71 05       	cpc	r23, r1
    1374:	a9 f7       	brne	.-22     	; 0x1360 <_ZN4QEPU5Utils5delayEi+0x6>
}
    1376:	08 95       	ret

00001378 <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    1378:	2f 92       	push	r2
    137a:	3f 92       	push	r3
    137c:	4f 92       	push	r4
    137e:	5f 92       	push	r5
    1380:	6f 92       	push	r6
    1382:	7f 92       	push	r7
    1384:	8f 92       	push	r8
    1386:	9f 92       	push	r9
    1388:	af 92       	push	r10
    138a:	bf 92       	push	r11
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	ec 01       	movw	r28, r24
    139e:	1b 01       	movw	r2, r22
    13a0:	29 01       	movw	r4, r18
    13a2:	3a 01       	movw	r6, r20
    13a4:	47 01       	movw	r8, r14
    13a6:	58 01       	movw	r10, r16
	int * newthephi=(int*)malloc(sizeof(int)*2);
    13a8:	84 e0       	ldi	r24, 0x04	; 4
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <malloc>
    13b0:	6c 01       	movw	r12, r24
	
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    13b2:	f1 01       	movw	r30, r2
    13b4:	31 97       	sbiw	r30, 0x01	; 1
    13b6:	e6 31       	cpi	r30, 0x16	; 22
    13b8:	f1 05       	cpc	r31, r1
    13ba:	08 f0       	brcs	.+2      	; 0x13be <_ZN4QEPU7executeEill+0x46>
    13bc:	47 c1       	rjmp	.+654    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
    13be:	e6 5d       	subi	r30, 0xD6	; 214
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	b7 01       	movw	r22, r14
    13cc:	ce 01       	movw	r24, r28
    13ce:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    13d2:	9c 01       	movw	r18, r24
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	b2 01       	movw	r22, r4
    13da:	ce 01       	movw	r24, r28
    13dc:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	b7 01       	movw	r22, r14
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    13ec:	9c 01       	movw	r18, r24
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	b2 01       	movw	r22, r4
    13f4:	ce 01       	movw	r24, r28
    13f6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
		break;
    13fa:	28 c1       	rjmp	.+592    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	48 1a       	sub	r4, r24
    1400:	51 08       	sbc	r5, r1
    1402:	5c 82       	std	Y+4, r5	; 0x04
    1404:	4b 82       	std	Y+3, r4	; 0x03
		break;
    1406:	22 c1       	rjmp	.+580    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    1408:	b2 01       	movw	r22, r4
    140a:	ce 01       	movw	r24, r28
    140c:	02 96       	adiw	r24, 0x02	; 2
    140e:	0e 94 ad 09 	call	0x135a	; 0x135a <_ZN4QEPU5Utils5delayEi>
    1412:	1c c1       	rjmp	.+568    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    1414:	97 01       	movw	r18, r14
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	b2 01       	movw	r22, r4
    141c:	ce 01       	movw	r24, r28
    141e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
		break;
    1422:	14 c1       	rjmp	.+552    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    1424:	97 01       	movw	r18, r14
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	b2 01       	movw	r22, r4
    142c:	ce 01       	movw	r24, r28
    142e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
		break;
    1432:	0c c1       	rjmp	.+536    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	b2 01       	movw	r22, r4
    143a:	ce 01       	movw	r24, r28
    143c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    1440:	8c 01       	movw	r16, r24
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	b2 01       	movw	r22, r4
    1448:	ce 01       	movw	r24, r28
    144a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    144e:	a8 01       	movw	r20, r16
    1450:	bc 01       	movw	r22, r24
    1452:	ce 01       	movw	r24, r28
    1454:	05 96       	adiw	r24, 0x05	; 5
    1456:	0e 94 93 04 	call	0x926	; 0x926 <_ZN5Gates1XEii>
    145a:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    145c:	fc 01       	movw	r30, r24
    145e:	20 81       	ld	r18, Z
    1460:	31 81       	ldd	r19, Z+1	; 0x01
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	b2 01       	movw	r22, r4
    1468:	ce 01       	movw	r24, r28
    146a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
    146e:	f6 01       	movw	r30, r12
    1470:	22 81       	ldd	r18, Z+2	; 0x02
    1472:	33 81       	ldd	r19, Z+3	; 0x03
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	b2 01       	movw	r22, r4
    147a:	ce 01       	movw	r24, r28
    147c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
		break;
    1480:	e5 c0       	rjmp	.+458    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	b2 01       	movw	r22, r4
    1488:	ce 01       	movw	r24, r28
    148a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    148e:	8c 01       	movw	r16, r24
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	b2 01       	movw	r22, r4
    1496:	ce 01       	movw	r24, r28
    1498:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    149c:	a8 01       	movw	r20, r16
    149e:	bc 01       	movw	r22, r24
    14a0:	ce 01       	movw	r24, r28
    14a2:	05 96       	adiw	r24, 0x05	; 5
    14a4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN5Gates1YEii>
    14a8:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    14aa:	fc 01       	movw	r30, r24
    14ac:	20 81       	ld	r18, Z
    14ae:	31 81       	ldd	r19, Z+1	; 0x01
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	b2 01       	movw	r22, r4
    14b6:	ce 01       	movw	r24, r28
    14b8:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
    14bc:	f6 01       	movw	r30, r12
    14be:	22 81       	ldd	r18, Z+2	; 0x02
    14c0:	33 81       	ldd	r19, Z+3	; 0x03
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	b2 01       	movw	r22, r4
    14c8:	ce 01       	movw	r24, r28
    14ca:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
		break;
    14ce:	be c0       	rjmp	.+380    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	b2 01       	movw	r22, r4
    14d6:	ce 01       	movw	r24, r28
    14d8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    14dc:	8c 01       	movw	r16, r24
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	b2 01       	movw	r22, r4
    14e4:	ce 01       	movw	r24, r28
    14e6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    14ea:	a8 01       	movw	r20, r16
    14ec:	bc 01       	movw	r22, r24
    14ee:	ce 01       	movw	r24, r28
    14f0:	05 96       	adiw	r24, 0x05	; 5
    14f2:	0e 94 67 05 	call	0xace	; 0xace <_ZN5Gates1ZEii>
    14f6:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    14f8:	fc 01       	movw	r30, r24
    14fa:	20 81       	ld	r18, Z
    14fc:	31 81       	ldd	r19, Z+1	; 0x01
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	b2 01       	movw	r22, r4
    1504:	ce 01       	movw	r24, r28
    1506:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
    150a:	f6 01       	movw	r30, r12
    150c:	22 81       	ldd	r18, Z+2	; 0x02
    150e:	33 81       	ldd	r19, Z+3	; 0x03
    1510:	41 e0       	ldi	r20, 0x01	; 1
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	b2 01       	movw	r22, r4
    1516:	ce 01       	movw	r24, r28
    1518:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
		break;
    151c:	97 c0       	rjmp	.+302    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	b2 01       	movw	r22, r4
    1524:	ce 01       	movw	r24, r28
    1526:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    152a:	8c 01       	movw	r16, r24
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	b2 01       	movw	r22, r4
    1532:	ce 01       	movw	r24, r28
    1534:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    1538:	a8 01       	movw	r20, r16
    153a:	bc 01       	movw	r22, r24
    153c:	ce 01       	movw	r24, r28
    153e:	05 96       	adiw	r24, 0x05	; 5
    1540:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN5Gates1HEii>
    1544:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1546:	fc 01       	movw	r30, r24
    1548:	20 81       	ld	r18, Z
    154a:	31 81       	ldd	r19, Z+1	; 0x01
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	b2 01       	movw	r22, r4
    1552:	ce 01       	movw	r24, r28
    1554:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
    1558:	f6 01       	movw	r30, r12
    155a:	22 81       	ldd	r18, Z+2	; 0x02
    155c:	33 81       	ldd	r19, Z+3	; 0x03
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	b2 01       	movw	r22, r4
    1564:	ce 01       	movw	r24, r28
    1566:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
		break;
    156a:	70 c0       	rjmp	.+224    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    156c:	41 e0       	ldi	r20, 0x01	; 1
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	b2 01       	movw	r22, r4
    1572:	ce 01       	movw	r24, r28
    1574:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    1578:	8c 01       	movw	r16, r24
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	b2 01       	movw	r22, r4
    1580:	ce 01       	movw	r24, r28
    1582:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    1586:	a8 01       	movw	r20, r16
    1588:	bc 01       	movw	r22, r24
    158a:	ce 01       	movw	r24, r28
    158c:	05 96       	adiw	r24, 0x05	; 5
    158e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN5Gates1SEii>
    1592:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1594:	fc 01       	movw	r30, r24
    1596:	20 81       	ld	r18, Z
    1598:	31 81       	ldd	r19, Z+1	; 0x01
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	b2 01       	movw	r22, r4
    15a0:	ce 01       	movw	r24, r28
    15a2:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
    15a6:	f6 01       	movw	r30, r12
    15a8:	22 81       	ldd	r18, Z+2	; 0x02
    15aa:	33 81       	ldd	r19, Z+3	; 0x03
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	b2 01       	movw	r22, r4
    15b2:	ce 01       	movw	r24, r28
    15b4:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
		break;
    15b8:	49 c0       	rjmp	.+146    	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    15ba:	41 e0       	ldi	r20, 0x01	; 1
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	b2 01       	movw	r22, r4
    15c0:	ce 01       	movw	r24, r28
    15c2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    15c6:	8c 01       	movw	r16, r24
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	b2 01       	movw	r22, r4
    15ce:	ce 01       	movw	r24, r28
    15d0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    15d4:	a8 01       	movw	r20, r16
    15d6:	bc 01       	movw	r22, r24
    15d8:	ce 01       	movw	r24, r28
    15da:	05 96       	adiw	r24, 0x05	; 5
    15dc:	0e 94 a9 06 	call	0xd52	; 0xd52 <_ZN5Gates1TEii>
    15e0:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    15e2:	fc 01       	movw	r30, r24
    15e4:	20 81       	ld	r18, Z
    15e6:	31 81       	ldd	r19, Z+1	; 0x01
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	b2 01       	movw	r22, r4
    15ee:	ce 01       	movw	r24, r28
    15f0:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
    15f4:	f6 01       	movw	r30, r12
    15f6:	22 81       	ldd	r18, Z+2	; 0x02
    15f8:	33 81       	ldd	r19, Z+3	; 0x03
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	b2 01       	movw	r22, r4
    1600:	ce 01       	movw	r24, r28
    1602:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN4QEPU5writeEiii>
		break;
    1606:	22 c0       	rjmp	.+68     	; 0x164c <_ZN4QEPU7executeEill+0x2d4>
		//2 QUBIT GATES -
		case 0x16: 
			gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	b7 01       	movw	r22, r14
    160e:	ce 01       	movw	r24, r28
    1610:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    1614:	8c 01       	movw	r16, r24
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	b4 01       	movw	r22, r8
    161c:	ce 01       	movw	r24, r28
    161e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    1622:	5c 01       	movw	r10, r24
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	b2 01       	movw	r22, r4
    162a:	ce 01       	movw	r24, r28
    162c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    1630:	7c 01       	movw	r14, r24
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	b2 01       	movw	r22, r4
    1638:	ce 01       	movw	r24, r28
    163a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN4QEPU4readEii>
    163e:	95 01       	movw	r18, r10
    1640:	a7 01       	movw	r20, r14
    1642:	bc 01       	movw	r22, r24
    1644:	ce 01       	movw	r24, r28
    1646:	05 96       	adiw	r24, 0x05	; 5
    1648:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN5Gates3CNOEiiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    164c:	c6 01       	movw	r24, r12
    164e:	0e 94 00 10 	call	0x2000	; 0x2000 <free>
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	bf 90       	pop	r11
    1664:	af 90       	pop	r10
    1666:	9f 90       	pop	r9
    1668:	8f 90       	pop	r8
    166a:	7f 90       	pop	r7
    166c:	6f 90       	pop	r6
    166e:	5f 90       	pop	r5
    1670:	4f 90       	pop	r4
    1672:	3f 90       	pop	r3
    1674:	2f 90       	pop	r2
    1676:	08 95       	ret

00001678 <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    1678:	2f 92       	push	r2
    167a:	3f 92       	push	r3
    167c:	4f 92       	push	r4
    167e:	5f 92       	push	r5
    1680:	6f 92       	push	r6
    1682:	7f 92       	push	r7
    1684:	8f 92       	push	r8
    1686:	9f 92       	push	r9
    1688:	af 92       	push	r10
    168a:	bf 92       	push	r11
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	c0 57       	subi	r28, 0x70	; 112
    16a2:	d1 09       	sbc	r29, r1
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    16b0:	0e 94 13 02 	call	0x426	; 0x426 <_ZN6EEProm7readallEv>
    16b4:	bc 01       	movw	r22, r24
    16b6:	c3 01       	movw	r24, r6
    16b8:	02 96       	adiw	r24, 0x02	; 2
    16ba:	0e 94 23 09 	call	0x1246	; 0x1246 <_ZN4QEPU5Utils10str2intarrEPc>
    16be:	fc 01       	movw	r30, r24
    16c0:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    16c6:	40 85       	ldd	r20, Z+8	; 0x08
    16c8:	51 85       	ldd	r21, Z+9	; 0x09
    16ca:	4f 3f       	cpi	r20, 0xFF	; 255
    16cc:	51 05       	cpc	r21, r1
    16ce:	a1 f4       	brne	.+40     	; 0x16f8 <_ZN4QEPU3runEv+0x80>
    16d0:	46 81       	ldd	r20, Z+6	; 0x06
    16d2:	57 81       	ldd	r21, Z+7	; 0x07
    16d4:	4f 3f       	cpi	r20, 0xFF	; 255
    16d6:	51 05       	cpc	r21, r1
    16d8:	79 f4       	brne	.+30     	; 0x16f8 <_ZN4QEPU3runEv+0x80>
    16da:	44 81       	ldd	r20, Z+4	; 0x04
    16dc:	55 81       	ldd	r21, Z+5	; 0x05
    16de:	4f 3f       	cpi	r20, 0xFF	; 255
    16e0:	51 05       	cpc	r21, r1
    16e2:	51 f4       	brne	.+20     	; 0x16f8 <_ZN4QEPU3runEv+0x80>
    16e4:	42 81       	ldd	r20, Z+2	; 0x02
    16e6:	53 81       	ldd	r21, Z+3	; 0x03
    16e8:	4f 3f       	cpi	r20, 0xFF	; 255
    16ea:	51 05       	cpc	r21, r1
    16ec:	29 f4       	brne	.+10     	; 0x16f8 <_ZN4QEPU3runEv+0x80>
    16ee:	40 81       	ld	r20, Z
    16f0:	51 81       	ldd	r21, Z+1	; 0x01
    16f2:	4f 3f       	cpi	r20, 0xFF	; 255
    16f4:	51 05       	cpc	r21, r1
    16f6:	21 f0       	breq	.+8      	; 0x1700 <_ZN4QEPU3runEv+0x88>
    16f8:	2f 5f       	subi	r18, 0xFF	; 255
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	32 96       	adiw	r30, 0x02	; 2
    16fe:	e3 cf       	rjmp	.-58     	; 0x16c6 <_ZN4QEPU3runEv+0x4e>
    1700:	a9 01       	movw	r20, r18
    1702:	44 50       	subi	r20, 0x04	; 4
    1704:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1706:	14 16       	cp	r1, r20
    1708:	15 06       	cpc	r1, r21
    170a:	0c f0       	brlt	.+2      	; 0x170e <_ZN4QEPU3runEv+0x96>
    170c:	07 c1       	rjmp	.+526    	; 0x191c <_ZN4QEPU3runEv+0x2a4>
    170e:	fc 01       	movw	r30, r24
    1710:	25 50       	subi	r18, 0x05	; 5
    1712:	31 09       	sbc	r19, r1
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	41 2c       	mov	r4, r1
    171e:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    1720:	c1 2c       	mov	r12, r1
    1722:	d1 2c       	mov	r13, r1
    1724:	0c c0       	rjmp	.+24     	; 0x173e <_ZN4QEPU3runEv+0xc6>
    1726:	69 30       	cpi	r22, 0x09	; 9
    1728:	71 05       	cpc	r23, r1
    172a:	34 f0       	brlt	.+12     	; 0x1738 <_ZN4QEPU3runEv+0xc0>
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	48 1a       	sub	r4, r24
    1730:	58 0a       	sbc	r5, r24
    1732:	8c 2d       	mov	r24, r12
    1734:	9d 2d       	mov	r25, r13
    1736:	01 c0       	rjmp	.+2      	; 0x173a <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    1738:	cb 01       	movw	r24, r22
    173a:	4f 5f       	subi	r20, 0xFF	; 255
    173c:	5f 4f       	sbci	r21, 0xFF	; 255
    173e:	bc 01       	movw	r22, r24
    1740:	6f 5f       	subi	r22, 0xFF	; 255
    1742:	7f 4f       	sbci	r23, 0xFF	; 255
    1744:	01 91       	ld	r16, Z+
    1746:	11 91       	ld	r17, Z+
    1748:	d2 01       	movw	r26, r4
    174a:	aa 0f       	add	r26, r26
    174c:	bb 1f       	adc	r27, r27
    174e:	aa 0f       	add	r26, r26
    1750:	bb 1f       	adc	r27, r27
    1752:	aa 0f       	add	r26, r26
    1754:	bb 1f       	adc	r27, r27
    1756:	a4 0d       	add	r26, r4
    1758:	b5 1d       	adc	r27, r5
    175a:	8a 0f       	add	r24, r26
    175c:	9b 1f       	adc	r25, r27
    175e:	dc 01       	movw	r26, r24
    1760:	aa 0f       	add	r26, r26
    1762:	bb 1f       	adc	r27, r27
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	8c 0f       	add	r24, r28
    176a:	9d 1f       	adc	r25, r29
    176c:	a8 0f       	add	r26, r24
    176e:	b9 1f       	adc	r27, r25
    1770:	0d 93       	st	X+, r16
    1772:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1774:	42 17       	cp	r20, r18
    1776:	53 07       	cpc	r21, r19
    1778:	b1 f6       	brne	.-84     	; 0x1726 <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    177a:	f3 01       	movw	r30, r6
    177c:	14 82       	std	Z+4, r1	; 0x04
    177e:	13 82       	std	Z+3, r1	; 0x03
    1780:	14 14       	cp	r1, r4
    1782:	15 04       	cpc	r1, r5
    1784:	0c f0       	brlt	.+2      	; 0x1788 <_ZN4QEPU3runEv+0x110>
    1786:	c6 c0       	rjmp	.+396    	; 0x1914 <_ZN4QEPU3runEv+0x29c>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    178c:	5e 01       	movw	r10, r28
    178e:	f2 e6       	ldi	r31, 0x62	; 98
    1790:	af 0e       	add	r10, r31
    1792:	b1 1c       	adc	r11, r1
    1794:	6e 01       	movw	r12, r28
    1796:	2b e5       	ldi	r18, 0x5B	; 91
    1798:	c2 0e       	add	r12, r18
    179a:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    179c:	0f 2e       	mov	r0, r31
    179e:	fa eb       	ldi	r31, 0xBA	; 186
    17a0:	8f 2e       	mov	r8, r31
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	9f 2e       	mov	r9, r31
    17a6:	f0 2d       	mov	r31, r0
    17a8:	ae 96       	adiw	r28, 0x2e	; 46
    17aa:	af ae       	std	Y+63, r10	; 0x3f
    17ac:	ae 97       	sbiw	r28, 0x2e	; 46
    17ae:	af 96       	adiw	r28, 0x2f	; 47
    17b0:	bf ae       	std	Y+63, r11	; 0x3f
    17b2:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    17b4:	e0 96       	adiw	r28, 0x30	; 48
    17b6:	cf ae       	std	Y+63, r12	; 0x3f
    17b8:	e0 97       	sbiw	r28, 0x30	; 48
    17ba:	e1 96       	adiw	r28, 0x31	; 49
    17bc:	df ae       	std	Y+63, r13	; 0x3f
    17be:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    17c0:	f5 01       	movw	r30, r10
    17c2:	10 82       	st	Z, r1
    17c4:	11 82       	std	Z+1, r1	; 0x01
    17c6:	12 82       	std	Z+2, r1	; 0x02
    17c8:	13 82       	std	Z+3, r1	; 0x03
    17ca:	14 82       	std	Z+4, r1	; 0x04
    17cc:	15 82       	std	Z+5, r1	; 0x05
    17ce:	16 82       	std	Z+6, r1	; 0x06
    17d0:	f6 01       	movw	r30, r12
    17d2:	10 82       	st	Z, r1
    17d4:	11 82       	std	Z+1, r1	; 0x01
    17d6:	12 82       	std	Z+2, r1	; 0x02
    17d8:	13 82       	std	Z+3, r1	; 0x03
    17da:	14 82       	std	Z+4, r1	; 0x04
    17dc:	15 82       	std	Z+5, r1	; 0x05
    17de:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	fc 01       	movw	r30, r24
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	ee 0f       	add	r30, r30
    17ec:	ff 1f       	adc	r31, r31
    17ee:	ee 0f       	add	r30, r30
    17f0:	ff 1f       	adc	r31, r31
    17f2:	8e 0f       	add	r24, r30
    17f4:	9f 1f       	adc	r25, r31
    17f6:	e1 e0       	ldi	r30, 0x01	; 1
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	ec 0f       	add	r30, r28
    17fc:	fd 1f       	adc	r31, r29
    17fe:	e8 0f       	add	r30, r24
    1800:	f9 1f       	adc	r31, r25
    1802:	20 80       	ld	r2, Z
    1804:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1806:	00 e0       	ldi	r16, 0x00	; 0
    1808:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    180a:	0f 5f       	subi	r16, 0xFF	; 255
    180c:	1f 4f       	sbci	r17, 0xFF	; 255
    180e:	f3 01       	movw	r30, r6
    1810:	83 81       	ldd	r24, Z+3	; 0x03
    1812:	94 81       	ldd	r25, Z+4	; 0x04
    1814:	fc 01       	movw	r30, r24
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	ee 0f       	add	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	8e 0f       	add	r24, r30
    1824:	9f 1f       	adc	r25, r31
    1826:	80 0f       	add	r24, r16
    1828:	91 1f       	adc	r25, r17
    182a:	fc 01       	movw	r30, r24
    182c:	ee 0f       	add	r30, r30
    182e:	ff 1f       	adc	r31, r31
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	8c 0f       	add	r24, r28
    1836:	9d 1f       	adc	r25, r29
    1838:	e8 0f       	add	r30, r24
    183a:	f9 1f       	adc	r31, r25
    183c:	81 81       	ldd	r24, Z+1	; 0x01
    183e:	8f 93       	push	r24
    1840:	80 81       	ld	r24, Z
    1842:	8f 93       	push	r24
    1844:	bf 92       	push	r11
    1846:	af 92       	push	r10
    1848:	9f 92       	push	r9
    184a:	8f 92       	push	r8
    184c:	bf 92       	push	r11
    184e:	af 92       	push	r10
    1850:	0e 94 29 12 	call	0x2452	; 0x2452 <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1854:	f3 01       	movw	r30, r6
    1856:	83 81       	ldd	r24, Z+3	; 0x03
    1858:	94 81       	ldd	r25, Z+4	; 0x04
    185a:	fc 01       	movw	r30, r24
    185c:	ee 0f       	add	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	ee 0f       	add	r30, r30
    1862:	ff 1f       	adc	r31, r31
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	e8 0f       	add	r30, r24
    186a:	f9 1f       	adc	r31, r25
    186c:	e0 0f       	add	r30, r16
    186e:	f1 1f       	adc	r31, r17
    1870:	34 96       	adiw	r30, 0x04	; 4
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	8c 0f       	add	r24, r28
    187c:	9d 1f       	adc	r25, r29
    187e:	e8 0f       	add	r30, r24
    1880:	f9 1f       	adc	r31, r25
    1882:	81 81       	ldd	r24, Z+1	; 0x01
    1884:	8f 93       	push	r24
    1886:	80 81       	ld	r24, Z
    1888:	8f 93       	push	r24
    188a:	df 92       	push	r13
    188c:	cf 92       	push	r12
    188e:	9f 92       	push	r9
    1890:	8f 92       	push	r8
    1892:	df 92       	push	r13
    1894:	cf 92       	push	r12
    1896:	0e 94 29 12 	call	0x2452	; 0x2452 <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	04 30       	cpi	r16, 0x04	; 4
    18a6:	11 05       	cpc	r17, r1
    18a8:	09 f0       	breq	.+2      	; 0x18ac <_ZN4QEPU3runEv+0x234>
    18aa:	af cf       	rjmp	.-162    	; 0x180a <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    18ac:	40 e1       	ldi	r20, 0x10	; 16
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	e0 96       	adiw	r28, 0x30	; 48
    18b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    18b8:	e0 97       	sbiw	r28, 0x30	; 48
    18ba:	e1 96       	adiw	r28, 0x31	; 49
    18bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    18be:	e1 97       	sbiw	r28, 0x31	; 49
    18c0:	0e 94 ed 10 	call	0x21da	; 0x21da <strtol>
    18c4:	ad 96       	adiw	r28, 0x2d	; 45
    18c6:	6c af       	std	Y+60, r22	; 0x3c
    18c8:	7d af       	std	Y+61, r23	; 0x3d
    18ca:	8e af       	std	Y+62, r24	; 0x3e
    18cc:	9f af       	std	Y+63, r25	; 0x3f
    18ce:	ad 97       	sbiw	r28, 0x2d	; 45
    18d0:	40 e1       	ldi	r20, 0x10	; 16
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	ae 96       	adiw	r28, 0x2e	; 46
    18da:	8f ad       	ldd	r24, Y+63	; 0x3f
    18dc:	ae 97       	sbiw	r28, 0x2e	; 46
    18de:	af 96       	adiw	r28, 0x2f	; 47
    18e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    18e2:	af 97       	sbiw	r28, 0x2f	; 47
    18e4:	0e 94 ed 10 	call	0x21da	; 0x21da <strtol>
    18e8:	9b 01       	movw	r18, r22
    18ea:	ac 01       	movw	r20, r24
    18ec:	ad 96       	adiw	r28, 0x2d	; 45
    18ee:	ec ac       	ldd	r14, Y+60	; 0x3c
    18f0:	fd ac       	ldd	r15, Y+61	; 0x3d
    18f2:	0e ad       	ldd	r16, Y+62	; 0x3e
    18f4:	1f ad       	ldd	r17, Y+63	; 0x3f
    18f6:	ad 97       	sbiw	r28, 0x2d	; 45
    18f8:	b1 01       	movw	r22, r2
    18fa:	c3 01       	movw	r24, r6
    18fc:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1900:	f3 01       	movw	r30, r6
    1902:	83 81       	ldd	r24, Z+3	; 0x03
    1904:	94 81       	ldd	r25, Z+4	; 0x04
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	94 83       	std	Z+4, r25	; 0x04
    190a:	83 83       	std	Z+3, r24	; 0x03
    190c:	84 15       	cp	r24, r4
    190e:	95 05       	cpc	r25, r5
    1910:	0c f4       	brge	.+2      	; 0x1914 <_ZN4QEPU3runEv+0x29c>
    1912:	56 cf       	rjmp	.-340    	; 0x17c0 <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    1914:	c3 01       	movw	r24, r6
    1916:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN4QEPU7dumpmemEv>
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    191c:	f3 01       	movw	r30, r6
    191e:	14 82       	std	Z+4, r1	; 0x04
    1920:	13 82       	std	Z+3, r1	; 0x03
    1922:	f8 cf       	rjmp	.-16     	; 0x1914 <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    1924:	c0 59       	subi	r28, 0x90	; 144
    1926:	df 4f       	sbci	r29, 0xFF	; 255
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	bf 90       	pop	r11
    1944:	af 90       	pop	r10
    1946:	9f 90       	pop	r9
    1948:	8f 90       	pop	r8
    194a:	7f 90       	pop	r7
    194c:	6f 90       	pop	r6
    194e:	5f 90       	pop	r5
    1950:	4f 90       	pop	r4
    1952:	3f 90       	pop	r3
    1954:	2f 90       	pop	r2
    1956:	08 95       	ret

00001958 <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    1958:	83 e3       	ldi	r24, 0x33	; 51
    195a:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    195c:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    195e:	86 e8       	ldi	r24, 0x86	; 134
    1960:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    1962:	88 e1       	ldi	r24, 0x18	; 24
    1964:	8a b9       	out	0x0a, r24	; 10
    1966:	08 95       	ret

00001968 <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    1968:	5d 9b       	sbis	0x0b, 5	; 11
    196a:	fe cf       	rjmp	.-4      	; 0x1968 <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    196c:	6c b9       	out	0x0c, r22	; 12
    196e:	08 95       	ret

00001970 <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	8c 01       	movw	r16, r24
    197a:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    197c:	68 81       	ld	r22, Y
    197e:	66 23       	and	r22, r22
    1980:	39 f0       	breq	.+14     	; 0x1990 <_ZN6Serial8writestrEPc+0x20>
    1982:	21 96       	adiw	r28, 0x01	; 1
    1984:	c8 01       	movw	r24, r16
    1986:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN6Serial5writeEc>
    198a:	69 91       	ld	r22, Y+
    198c:	61 11       	cpse	r22, r1
    198e:	fa cf       	rjmp	.-12     	; 0x1984 <_ZN6Serial8writestrEPc+0x14>
}
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	08 95       	ret

0000199a <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	ec 01       	movw	r28, r24
	writestr(data);
    19a0:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    19a4:	6d e0       	ldi	r22, 0x0D	; 13
    19a6:	ce 01       	movw	r24, r28
    19a8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN6Serial5writeEc>
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	08 95       	ret

000019b2 <acos>:
    19b2:	9f 93       	push	r25
    19b4:	9f 77       	andi	r25, 0x7F	; 127
    19b6:	31 d1       	rcall	.+610    	; 0x1c1a <__fp_arccos>
    19b8:	0f 90       	pop	r0
    19ba:	00 20       	and	r0, r0
    19bc:	3a f4       	brpl	.+14     	; 0x19cc <acos+0x1a>
    19be:	90 58       	subi	r25, 0x80	; 128
    19c0:	a2 ea       	ldi	r26, 0xA2	; 162
    19c2:	2a ed       	ldi	r18, 0xDA	; 218
    19c4:	3f e0       	ldi	r19, 0x0F	; 15
    19c6:	49 e4       	ldi	r20, 0x49	; 73
    19c8:	50 e4       	ldi	r21, 0x40	; 64
    19ca:	13 d0       	rcall	.+38     	; 0x19f2 <__addsf3x>
    19cc:	7d c1       	rjmp	.+762    	; 0x1cc8 <__fp_round>

000019ce <__subsf3>:
    19ce:	50 58       	subi	r21, 0x80	; 128

000019d0 <__addsf3>:
    19d0:	bb 27       	eor	r27, r27
    19d2:	aa 27       	eor	r26, r26
    19d4:	0e d0       	rcall	.+28     	; 0x19f2 <__addsf3x>
    19d6:	78 c1       	rjmp	.+752    	; 0x1cc8 <__fp_round>
    19d8:	69 d1       	rcall	.+722    	; 0x1cac <__fp_pscA>
    19da:	30 f0       	brcs	.+12     	; 0x19e8 <__addsf3+0x18>
    19dc:	6e d1       	rcall	.+732    	; 0x1cba <__fp_pscB>
    19de:	20 f0       	brcs	.+8      	; 0x19e8 <__addsf3+0x18>
    19e0:	31 f4       	brne	.+12     	; 0x19ee <__addsf3+0x1e>
    19e2:	9f 3f       	cpi	r25, 0xFF	; 255
    19e4:	11 f4       	brne	.+4      	; 0x19ea <__addsf3+0x1a>
    19e6:	1e f4       	brtc	.+6      	; 0x19ee <__addsf3+0x1e>
    19e8:	39 c1       	rjmp	.+626    	; 0x1c5c <__fp_nan>
    19ea:	0e f4       	brtc	.+2      	; 0x19ee <__addsf3+0x1e>
    19ec:	e0 95       	com	r30
    19ee:	e7 fb       	bst	r30, 7
    19f0:	2f c1       	rjmp	.+606    	; 0x1c50 <__fp_inf>

000019f2 <__addsf3x>:
    19f2:	e9 2f       	mov	r30, r25
    19f4:	7a d1       	rcall	.+756    	; 0x1cea <__fp_split3>
    19f6:	80 f3       	brcs	.-32     	; 0x19d8 <__addsf3+0x8>
    19f8:	ba 17       	cp	r27, r26
    19fa:	62 07       	cpc	r22, r18
    19fc:	73 07       	cpc	r23, r19
    19fe:	84 07       	cpc	r24, r20
    1a00:	95 07       	cpc	r25, r21
    1a02:	18 f0       	brcs	.+6      	; 0x1a0a <__addsf3x+0x18>
    1a04:	71 f4       	brne	.+28     	; 0x1a22 <__addsf3x+0x30>
    1a06:	9e f5       	brtc	.+102    	; 0x1a6e <__addsf3x+0x7c>
    1a08:	92 c1       	rjmp	.+804    	; 0x1d2e <__fp_zero>
    1a0a:	0e f4       	brtc	.+2      	; 0x1a0e <__addsf3x+0x1c>
    1a0c:	e0 95       	com	r30
    1a0e:	0b 2e       	mov	r0, r27
    1a10:	ba 2f       	mov	r27, r26
    1a12:	a0 2d       	mov	r26, r0
    1a14:	0b 01       	movw	r0, r22
    1a16:	b9 01       	movw	r22, r18
    1a18:	90 01       	movw	r18, r0
    1a1a:	0c 01       	movw	r0, r24
    1a1c:	ca 01       	movw	r24, r20
    1a1e:	a0 01       	movw	r20, r0
    1a20:	11 24       	eor	r1, r1
    1a22:	ff 27       	eor	r31, r31
    1a24:	59 1b       	sub	r21, r25
    1a26:	99 f0       	breq	.+38     	; 0x1a4e <__addsf3x+0x5c>
    1a28:	59 3f       	cpi	r21, 0xF9	; 249
    1a2a:	50 f4       	brcc	.+20     	; 0x1a40 <__addsf3x+0x4e>
    1a2c:	50 3e       	cpi	r21, 0xE0	; 224
    1a2e:	68 f1       	brcs	.+90     	; 0x1a8a <__addsf3x+0x98>
    1a30:	1a 16       	cp	r1, r26
    1a32:	f0 40       	sbci	r31, 0x00	; 0
    1a34:	a2 2f       	mov	r26, r18
    1a36:	23 2f       	mov	r18, r19
    1a38:	34 2f       	mov	r19, r20
    1a3a:	44 27       	eor	r20, r20
    1a3c:	58 5f       	subi	r21, 0xF8	; 248
    1a3e:	f3 cf       	rjmp	.-26     	; 0x1a26 <__addsf3x+0x34>
    1a40:	46 95       	lsr	r20
    1a42:	37 95       	ror	r19
    1a44:	27 95       	ror	r18
    1a46:	a7 95       	ror	r26
    1a48:	f0 40       	sbci	r31, 0x00	; 0
    1a4a:	53 95       	inc	r21
    1a4c:	c9 f7       	brne	.-14     	; 0x1a40 <__addsf3x+0x4e>
    1a4e:	7e f4       	brtc	.+30     	; 0x1a6e <__addsf3x+0x7c>
    1a50:	1f 16       	cp	r1, r31
    1a52:	ba 0b       	sbc	r27, r26
    1a54:	62 0b       	sbc	r22, r18
    1a56:	73 0b       	sbc	r23, r19
    1a58:	84 0b       	sbc	r24, r20
    1a5a:	ba f0       	brmi	.+46     	; 0x1a8a <__addsf3x+0x98>
    1a5c:	91 50       	subi	r25, 0x01	; 1
    1a5e:	a1 f0       	breq	.+40     	; 0x1a88 <__addsf3x+0x96>
    1a60:	ff 0f       	add	r31, r31
    1a62:	bb 1f       	adc	r27, r27
    1a64:	66 1f       	adc	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	c2 f7       	brpl	.-16     	; 0x1a5c <__addsf3x+0x6a>
    1a6c:	0e c0       	rjmp	.+28     	; 0x1a8a <__addsf3x+0x98>
    1a6e:	ba 0f       	add	r27, r26
    1a70:	62 1f       	adc	r22, r18
    1a72:	73 1f       	adc	r23, r19
    1a74:	84 1f       	adc	r24, r20
    1a76:	48 f4       	brcc	.+18     	; 0x1a8a <__addsf3x+0x98>
    1a78:	87 95       	ror	r24
    1a7a:	77 95       	ror	r23
    1a7c:	67 95       	ror	r22
    1a7e:	b7 95       	ror	r27
    1a80:	f7 95       	ror	r31
    1a82:	9e 3f       	cpi	r25, 0xFE	; 254
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <__addsf3x+0x96>
    1a86:	b3 cf       	rjmp	.-154    	; 0x19ee <__addsf3+0x1e>
    1a88:	93 95       	inc	r25
    1a8a:	88 0f       	add	r24, r24
    1a8c:	08 f0       	brcs	.+2      	; 0x1a90 <__addsf3x+0x9e>
    1a8e:	99 27       	eor	r25, r25
    1a90:	ee 0f       	add	r30, r30
    1a92:	97 95       	ror	r25
    1a94:	87 95       	ror	r24
    1a96:	08 95       	ret

00001a98 <atan>:
    1a98:	df 93       	push	r29
    1a9a:	dd 27       	eor	r29, r29
    1a9c:	b9 2f       	mov	r27, r25
    1a9e:	bf 77       	andi	r27, 0x7F	; 127
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	16 16       	cp	r1, r22
    1aa6:	17 06       	cpc	r1, r23
    1aa8:	48 07       	cpc	r20, r24
    1aaa:	5b 07       	cpc	r21, r27
    1aac:	10 f4       	brcc	.+4      	; 0x1ab2 <atan+0x1a>
    1aae:	d9 2f       	mov	r29, r25
    1ab0:	45 d1       	rcall	.+650    	; 0x1d3c <inverse>
    1ab2:	9f 93       	push	r25
    1ab4:	8f 93       	push	r24
    1ab6:	7f 93       	push	r23
    1ab8:	6f 93       	push	r22
    1aba:	ec d1       	rcall	.+984    	; 0x1e94 <square>
    1abc:	e0 e8       	ldi	r30, 0x80	; 128
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	d0 d0       	rcall	.+416    	; 0x1c62 <__fp_powser>
    1ac2:	02 d1       	rcall	.+516    	; 0x1cc8 <__fp_round>
    1ac4:	2f 91       	pop	r18
    1ac6:	3f 91       	pop	r19
    1ac8:	4f 91       	pop	r20
    1aca:	5f 91       	pop	r21
    1acc:	4a d1       	rcall	.+660    	; 0x1d62 <__mulsf3x>
    1ace:	dd 23       	and	r29, r29
    1ad0:	49 f0       	breq	.+18     	; 0x1ae4 <atan+0x4c>
    1ad2:	90 58       	subi	r25, 0x80	; 128
    1ad4:	a2 ea       	ldi	r26, 0xA2	; 162
    1ad6:	2a ed       	ldi	r18, 0xDA	; 218
    1ad8:	3f e0       	ldi	r19, 0x0F	; 15
    1ada:	49 ec       	ldi	r20, 0xC9	; 201
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	d0 78       	andi	r29, 0x80	; 128
    1ae0:	5d 27       	eor	r21, r29
    1ae2:	87 df       	rcall	.-242    	; 0x19f2 <__addsf3x>
    1ae4:	df 91       	pop	r29
    1ae6:	f0 c0       	rjmp	.+480    	; 0x1cc8 <__fp_round>

00001ae8 <__divsf3>:
    1ae8:	0c d0       	rcall	.+24     	; 0x1b02 <__divsf3x>
    1aea:	ee c0       	rjmp	.+476    	; 0x1cc8 <__fp_round>
    1aec:	e6 d0       	rcall	.+460    	; 0x1cba <__fp_pscB>
    1aee:	40 f0       	brcs	.+16     	; 0x1b00 <__divsf3+0x18>
    1af0:	dd d0       	rcall	.+442    	; 0x1cac <__fp_pscA>
    1af2:	30 f0       	brcs	.+12     	; 0x1b00 <__divsf3+0x18>
    1af4:	21 f4       	brne	.+8      	; 0x1afe <__divsf3+0x16>
    1af6:	5f 3f       	cpi	r21, 0xFF	; 255
    1af8:	19 f0       	breq	.+6      	; 0x1b00 <__divsf3+0x18>
    1afa:	aa c0       	rjmp	.+340    	; 0x1c50 <__fp_inf>
    1afc:	51 11       	cpse	r21, r1
    1afe:	18 c1       	rjmp	.+560    	; 0x1d30 <__fp_szero>
    1b00:	ad c0       	rjmp	.+346    	; 0x1c5c <__fp_nan>

00001b02 <__divsf3x>:
    1b02:	f3 d0       	rcall	.+486    	; 0x1cea <__fp_split3>
    1b04:	98 f3       	brcs	.-26     	; 0x1aec <__divsf3+0x4>

00001b06 <__divsf3_pse>:
    1b06:	99 23       	and	r25, r25
    1b08:	c9 f3       	breq	.-14     	; 0x1afc <__divsf3+0x14>
    1b0a:	55 23       	and	r21, r21
    1b0c:	b1 f3       	breq	.-20     	; 0x1afa <__divsf3+0x12>
    1b0e:	95 1b       	sub	r25, r21
    1b10:	55 0b       	sbc	r21, r21
    1b12:	bb 27       	eor	r27, r27
    1b14:	aa 27       	eor	r26, r26
    1b16:	62 17       	cp	r22, r18
    1b18:	73 07       	cpc	r23, r19
    1b1a:	84 07       	cpc	r24, r20
    1b1c:	38 f0       	brcs	.+14     	; 0x1b2c <__divsf3_pse+0x26>
    1b1e:	9f 5f       	subi	r25, 0xFF	; 255
    1b20:	5f 4f       	sbci	r21, 0xFF	; 255
    1b22:	22 0f       	add	r18, r18
    1b24:	33 1f       	adc	r19, r19
    1b26:	44 1f       	adc	r20, r20
    1b28:	aa 1f       	adc	r26, r26
    1b2a:	a9 f3       	breq	.-22     	; 0x1b16 <__divsf3_pse+0x10>
    1b2c:	33 d0       	rcall	.+102    	; 0x1b94 <__divsf3_pse+0x8e>
    1b2e:	0e 2e       	mov	r0, r30
    1b30:	3a f0       	brmi	.+14     	; 0x1b40 <__divsf3_pse+0x3a>
    1b32:	e0 e8       	ldi	r30, 0x80	; 128
    1b34:	30 d0       	rcall	.+96     	; 0x1b96 <__divsf3_pse+0x90>
    1b36:	91 50       	subi	r25, 0x01	; 1
    1b38:	50 40       	sbci	r21, 0x00	; 0
    1b3a:	e6 95       	lsr	r30
    1b3c:	00 1c       	adc	r0, r0
    1b3e:	ca f7       	brpl	.-14     	; 0x1b32 <__divsf3_pse+0x2c>
    1b40:	29 d0       	rcall	.+82     	; 0x1b94 <__divsf3_pse+0x8e>
    1b42:	fe 2f       	mov	r31, r30
    1b44:	27 d0       	rcall	.+78     	; 0x1b94 <__divsf3_pse+0x8e>
    1b46:	66 0f       	add	r22, r22
    1b48:	77 1f       	adc	r23, r23
    1b4a:	88 1f       	adc	r24, r24
    1b4c:	bb 1f       	adc	r27, r27
    1b4e:	26 17       	cp	r18, r22
    1b50:	37 07       	cpc	r19, r23
    1b52:	48 07       	cpc	r20, r24
    1b54:	ab 07       	cpc	r26, r27
    1b56:	b0 e8       	ldi	r27, 0x80	; 128
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <__divsf3_pse+0x56>
    1b5a:	bb 0b       	sbc	r27, r27
    1b5c:	80 2d       	mov	r24, r0
    1b5e:	bf 01       	movw	r22, r30
    1b60:	ff 27       	eor	r31, r31
    1b62:	93 58       	subi	r25, 0x83	; 131
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
    1b66:	2a f0       	brmi	.+10     	; 0x1b72 <__divsf3_pse+0x6c>
    1b68:	9e 3f       	cpi	r25, 0xFE	; 254
    1b6a:	51 05       	cpc	r21, r1
    1b6c:	68 f0       	brcs	.+26     	; 0x1b88 <__divsf3_pse+0x82>
    1b6e:	70 c0       	rjmp	.+224    	; 0x1c50 <__fp_inf>
    1b70:	df c0       	rjmp	.+446    	; 0x1d30 <__fp_szero>
    1b72:	5f 3f       	cpi	r21, 0xFF	; 255
    1b74:	ec f3       	brlt	.-6      	; 0x1b70 <__divsf3_pse+0x6a>
    1b76:	98 3e       	cpi	r25, 0xE8	; 232
    1b78:	dc f3       	brlt	.-10     	; 0x1b70 <__divsf3_pse+0x6a>
    1b7a:	86 95       	lsr	r24
    1b7c:	77 95       	ror	r23
    1b7e:	67 95       	ror	r22
    1b80:	b7 95       	ror	r27
    1b82:	f7 95       	ror	r31
    1b84:	9f 5f       	subi	r25, 0xFF	; 255
    1b86:	c9 f7       	brne	.-14     	; 0x1b7a <__divsf3_pse+0x74>
    1b88:	88 0f       	add	r24, r24
    1b8a:	91 1d       	adc	r25, r1
    1b8c:	96 95       	lsr	r25
    1b8e:	87 95       	ror	r24
    1b90:	97 f9       	bld	r25, 7
    1b92:	08 95       	ret
    1b94:	e1 e0       	ldi	r30, 0x01	; 1
    1b96:	66 0f       	add	r22, r22
    1b98:	77 1f       	adc	r23, r23
    1b9a:	88 1f       	adc	r24, r24
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	62 17       	cp	r22, r18
    1ba0:	73 07       	cpc	r23, r19
    1ba2:	84 07       	cpc	r24, r20
    1ba4:	ba 07       	cpc	r27, r26
    1ba6:	20 f0       	brcs	.+8      	; 0x1bb0 <__divsf3_pse+0xaa>
    1ba8:	62 1b       	sub	r22, r18
    1baa:	73 0b       	sbc	r23, r19
    1bac:	84 0b       	sbc	r24, r20
    1bae:	ba 0b       	sbc	r27, r26
    1bb0:	ee 1f       	adc	r30, r30
    1bb2:	88 f7       	brcc	.-30     	; 0x1b96 <__divsf3_pse+0x90>
    1bb4:	e0 95       	com	r30
    1bb6:	08 95       	ret

00001bb8 <__fixsfsi>:
    1bb8:	04 d0       	rcall	.+8      	; 0x1bc2 <__fixunssfsi>
    1bba:	68 94       	set
    1bbc:	b1 11       	cpse	r27, r1
    1bbe:	b8 c0       	rjmp	.+368    	; 0x1d30 <__fp_szero>
    1bc0:	08 95       	ret

00001bc2 <__fixunssfsi>:
    1bc2:	9b d0       	rcall	.+310    	; 0x1cfa <__fp_splitA>
    1bc4:	88 f0       	brcs	.+34     	; 0x1be8 <__fixunssfsi+0x26>
    1bc6:	9f 57       	subi	r25, 0x7F	; 127
    1bc8:	90 f0       	brcs	.+36     	; 0x1bee <__fixunssfsi+0x2c>
    1bca:	b9 2f       	mov	r27, r25
    1bcc:	99 27       	eor	r25, r25
    1bce:	b7 51       	subi	r27, 0x17	; 23
    1bd0:	a0 f0       	brcs	.+40     	; 0x1bfa <__fixunssfsi+0x38>
    1bd2:	d1 f0       	breq	.+52     	; 0x1c08 <__fixunssfsi+0x46>
    1bd4:	66 0f       	add	r22, r22
    1bd6:	77 1f       	adc	r23, r23
    1bd8:	88 1f       	adc	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	1a f0       	brmi	.+6      	; 0x1be4 <__fixunssfsi+0x22>
    1bde:	ba 95       	dec	r27
    1be0:	c9 f7       	brne	.-14     	; 0x1bd4 <__fixunssfsi+0x12>
    1be2:	12 c0       	rjmp	.+36     	; 0x1c08 <__fixunssfsi+0x46>
    1be4:	b1 30       	cpi	r27, 0x01	; 1
    1be6:	81 f0       	breq	.+32     	; 0x1c08 <__fixunssfsi+0x46>
    1be8:	a2 d0       	rcall	.+324    	; 0x1d2e <__fp_zero>
    1bea:	b1 e0       	ldi	r27, 0x01	; 1
    1bec:	08 95       	ret
    1bee:	9f c0       	rjmp	.+318    	; 0x1d2e <__fp_zero>
    1bf0:	67 2f       	mov	r22, r23
    1bf2:	78 2f       	mov	r23, r24
    1bf4:	88 27       	eor	r24, r24
    1bf6:	b8 5f       	subi	r27, 0xF8	; 248
    1bf8:	39 f0       	breq	.+14     	; 0x1c08 <__fixunssfsi+0x46>
    1bfa:	b9 3f       	cpi	r27, 0xF9	; 249
    1bfc:	cc f3       	brlt	.-14     	; 0x1bf0 <__fixunssfsi+0x2e>
    1bfe:	86 95       	lsr	r24
    1c00:	77 95       	ror	r23
    1c02:	67 95       	ror	r22
    1c04:	b3 95       	inc	r27
    1c06:	d9 f7       	brne	.-10     	; 0x1bfe <__fixunssfsi+0x3c>
    1c08:	3e f4       	brtc	.+14     	; 0x1c18 <__fixunssfsi+0x56>
    1c0a:	90 95       	com	r25
    1c0c:	80 95       	com	r24
    1c0e:	70 95       	com	r23
    1c10:	61 95       	neg	r22
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	8f 4f       	sbci	r24, 0xFF	; 255
    1c16:	9f 4f       	sbci	r25, 0xFF	; 255
    1c18:	08 95       	ret

00001c1a <__fp_arccos>:
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	1f 93       	push	r17
    1c20:	0f 93       	push	r16
    1c22:	8b 01       	movw	r16, r22
    1c24:	ec 01       	movw	r28, r24
    1c26:	ed ea       	ldi	r30, 0xAD	; 173
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	1b d0       	rcall	.+54     	; 0x1c62 <__fp_powser>
    1c2c:	4d d0       	rcall	.+154    	; 0x1cc8 <__fp_round>
    1c2e:	98 01       	movw	r18, r16
    1c30:	ae 01       	movw	r20, r28
    1c32:	8b 01       	movw	r16, r22
    1c34:	ec 01       	movw	r28, r24
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	80 e8       	ldi	r24, 0x80	; 128
    1c3c:	9f e3       	ldi	r25, 0x3F	; 63
    1c3e:	c7 de       	rcall	.-626    	; 0x19ce <__subsf3>
    1c40:	eb d0       	rcall	.+470    	; 0x1e18 <sqrt>
    1c42:	98 01       	movw	r18, r16
    1c44:	ae 01       	movw	r20, r28
    1c46:	0f 91       	pop	r16
    1c48:	1f 91       	pop	r17
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	89 c0       	rjmp	.+274    	; 0x1d62 <__mulsf3x>

00001c50 <__fp_inf>:
    1c50:	97 f9       	bld	r25, 7
    1c52:	9f 67       	ori	r25, 0x7F	; 127
    1c54:	80 e8       	ldi	r24, 0x80	; 128
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	08 95       	ret

00001c5c <__fp_nan>:
    1c5c:	9f ef       	ldi	r25, 0xFF	; 255
    1c5e:	80 ec       	ldi	r24, 0xC0	; 192
    1c60:	08 95       	ret

00001c62 <__fp_powser>:
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	1f 93       	push	r17
    1c68:	0f 93       	push	r16
    1c6a:	ff 92       	push	r15
    1c6c:	ef 92       	push	r14
    1c6e:	df 92       	push	r13
    1c70:	7b 01       	movw	r14, r22
    1c72:	8c 01       	movw	r16, r24
    1c74:	68 94       	set
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <__fp_powser+0x20>
    1c78:	da 2e       	mov	r13, r26
    1c7a:	ef 01       	movw	r28, r30
    1c7c:	72 d0       	rcall	.+228    	; 0x1d62 <__mulsf3x>
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e8 94       	clt
    1c82:	a5 91       	lpm	r26, Z+
    1c84:	25 91       	lpm	r18, Z+
    1c86:	35 91       	lpm	r19, Z+
    1c88:	45 91       	lpm	r20, Z+
    1c8a:	55 91       	lpm	r21, Z+
    1c8c:	ae f3       	brts	.-22     	; 0x1c78 <__fp_powser+0x16>
    1c8e:	ef 01       	movw	r28, r30
    1c90:	b0 de       	rcall	.-672    	; 0x19f2 <__addsf3x>
    1c92:	fe 01       	movw	r30, r28
    1c94:	97 01       	movw	r18, r14
    1c96:	a8 01       	movw	r20, r16
    1c98:	da 94       	dec	r13
    1c9a:	79 f7       	brne	.-34     	; 0x1c7a <__fp_powser+0x18>
    1c9c:	df 90       	pop	r13
    1c9e:	ef 90       	pop	r14
    1ca0:	ff 90       	pop	r15
    1ca2:	0f 91       	pop	r16
    1ca4:	1f 91       	pop	r17
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <__fp_pscA>:
    1cac:	00 24       	eor	r0, r0
    1cae:	0a 94       	dec	r0
    1cb0:	16 16       	cp	r1, r22
    1cb2:	17 06       	cpc	r1, r23
    1cb4:	18 06       	cpc	r1, r24
    1cb6:	09 06       	cpc	r0, r25
    1cb8:	08 95       	ret

00001cba <__fp_pscB>:
    1cba:	00 24       	eor	r0, r0
    1cbc:	0a 94       	dec	r0
    1cbe:	12 16       	cp	r1, r18
    1cc0:	13 06       	cpc	r1, r19
    1cc2:	14 06       	cpc	r1, r20
    1cc4:	05 06       	cpc	r0, r21
    1cc6:	08 95       	ret

00001cc8 <__fp_round>:
    1cc8:	09 2e       	mov	r0, r25
    1cca:	03 94       	inc	r0
    1ccc:	00 0c       	add	r0, r0
    1cce:	11 f4       	brne	.+4      	; 0x1cd4 <__fp_round+0xc>
    1cd0:	88 23       	and	r24, r24
    1cd2:	52 f0       	brmi	.+20     	; 0x1ce8 <__fp_round+0x20>
    1cd4:	bb 0f       	add	r27, r27
    1cd6:	40 f4       	brcc	.+16     	; 0x1ce8 <__fp_round+0x20>
    1cd8:	bf 2b       	or	r27, r31
    1cda:	11 f4       	brne	.+4      	; 0x1ce0 <__fp_round+0x18>
    1cdc:	60 ff       	sbrs	r22, 0
    1cde:	04 c0       	rjmp	.+8      	; 0x1ce8 <__fp_round+0x20>
    1ce0:	6f 5f       	subi	r22, 0xFF	; 255
    1ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce8:	08 95       	ret

00001cea <__fp_split3>:
    1cea:	57 fd       	sbrc	r21, 7
    1cec:	90 58       	subi	r25, 0x80	; 128
    1cee:	44 0f       	add	r20, r20
    1cf0:	55 1f       	adc	r21, r21
    1cf2:	59 f0       	breq	.+22     	; 0x1d0a <__fp_splitA+0x10>
    1cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf6:	71 f0       	breq	.+28     	; 0x1d14 <__fp_splitA+0x1a>
    1cf8:	47 95       	ror	r20

00001cfa <__fp_splitA>:
    1cfa:	88 0f       	add	r24, r24
    1cfc:	97 fb       	bst	r25, 7
    1cfe:	99 1f       	adc	r25, r25
    1d00:	61 f0       	breq	.+24     	; 0x1d1a <__fp_splitA+0x20>
    1d02:	9f 3f       	cpi	r25, 0xFF	; 255
    1d04:	79 f0       	breq	.+30     	; 0x1d24 <__fp_splitA+0x2a>
    1d06:	87 95       	ror	r24
    1d08:	08 95       	ret
    1d0a:	12 16       	cp	r1, r18
    1d0c:	13 06       	cpc	r1, r19
    1d0e:	14 06       	cpc	r1, r20
    1d10:	55 1f       	adc	r21, r21
    1d12:	f2 cf       	rjmp	.-28     	; 0x1cf8 <__fp_split3+0xe>
    1d14:	46 95       	lsr	r20
    1d16:	f1 df       	rcall	.-30     	; 0x1cfa <__fp_splitA>
    1d18:	08 c0       	rjmp	.+16     	; 0x1d2a <__fp_splitA+0x30>
    1d1a:	16 16       	cp	r1, r22
    1d1c:	17 06       	cpc	r1, r23
    1d1e:	18 06       	cpc	r1, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	f1 cf       	rjmp	.-30     	; 0x1d06 <__fp_splitA+0xc>
    1d24:	86 95       	lsr	r24
    1d26:	71 05       	cpc	r23, r1
    1d28:	61 05       	cpc	r22, r1
    1d2a:	08 94       	sec
    1d2c:	08 95       	ret

00001d2e <__fp_zero>:
    1d2e:	e8 94       	clt

00001d30 <__fp_szero>:
    1d30:	bb 27       	eor	r27, r27
    1d32:	66 27       	eor	r22, r22
    1d34:	77 27       	eor	r23, r23
    1d36:	cb 01       	movw	r24, r22
    1d38:	97 f9       	bld	r25, 7
    1d3a:	08 95       	ret

00001d3c <inverse>:
    1d3c:	9b 01       	movw	r18, r22
    1d3e:	ac 01       	movw	r20, r24
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	80 e8       	ldi	r24, 0x80	; 128
    1d46:	9f e3       	ldi	r25, 0x3F	; 63
    1d48:	cf ce       	rjmp	.-610    	; 0x1ae8 <__divsf3>

00001d4a <__mulsf3>:
    1d4a:	0b d0       	rcall	.+22     	; 0x1d62 <__mulsf3x>
    1d4c:	bd cf       	rjmp	.-134    	; 0x1cc8 <__fp_round>
    1d4e:	ae df       	rcall	.-164    	; 0x1cac <__fp_pscA>
    1d50:	28 f0       	brcs	.+10     	; 0x1d5c <__mulsf3+0x12>
    1d52:	b3 df       	rcall	.-154    	; 0x1cba <__fp_pscB>
    1d54:	18 f0       	brcs	.+6      	; 0x1d5c <__mulsf3+0x12>
    1d56:	95 23       	and	r25, r21
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <__mulsf3+0x12>
    1d5a:	7a cf       	rjmp	.-268    	; 0x1c50 <__fp_inf>
    1d5c:	7f cf       	rjmp	.-258    	; 0x1c5c <__fp_nan>
    1d5e:	11 24       	eor	r1, r1
    1d60:	e7 cf       	rjmp	.-50     	; 0x1d30 <__fp_szero>

00001d62 <__mulsf3x>:
    1d62:	c3 df       	rcall	.-122    	; 0x1cea <__fp_split3>
    1d64:	a0 f3       	brcs	.-24     	; 0x1d4e <__mulsf3+0x4>

00001d66 <__mulsf3_pse>:
    1d66:	95 9f       	mul	r25, r21
    1d68:	d1 f3       	breq	.-12     	; 0x1d5e <__mulsf3+0x14>
    1d6a:	95 0f       	add	r25, r21
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	55 1f       	adc	r21, r21
    1d70:	62 9f       	mul	r22, r18
    1d72:	f0 01       	movw	r30, r0
    1d74:	72 9f       	mul	r23, r18
    1d76:	bb 27       	eor	r27, r27
    1d78:	f0 0d       	add	r31, r0
    1d7a:	b1 1d       	adc	r27, r1
    1d7c:	63 9f       	mul	r22, r19
    1d7e:	aa 27       	eor	r26, r26
    1d80:	f0 0d       	add	r31, r0
    1d82:	b1 1d       	adc	r27, r1
    1d84:	aa 1f       	adc	r26, r26
    1d86:	64 9f       	mul	r22, r20
    1d88:	66 27       	eor	r22, r22
    1d8a:	b0 0d       	add	r27, r0
    1d8c:	a1 1d       	adc	r26, r1
    1d8e:	66 1f       	adc	r22, r22
    1d90:	82 9f       	mul	r24, r18
    1d92:	22 27       	eor	r18, r18
    1d94:	b0 0d       	add	r27, r0
    1d96:	a1 1d       	adc	r26, r1
    1d98:	62 1f       	adc	r22, r18
    1d9a:	73 9f       	mul	r23, r19
    1d9c:	b0 0d       	add	r27, r0
    1d9e:	a1 1d       	adc	r26, r1
    1da0:	62 1f       	adc	r22, r18
    1da2:	83 9f       	mul	r24, r19
    1da4:	a0 0d       	add	r26, r0
    1da6:	61 1d       	adc	r22, r1
    1da8:	22 1f       	adc	r18, r18
    1daa:	74 9f       	mul	r23, r20
    1dac:	33 27       	eor	r19, r19
    1dae:	a0 0d       	add	r26, r0
    1db0:	61 1d       	adc	r22, r1
    1db2:	23 1f       	adc	r18, r19
    1db4:	84 9f       	mul	r24, r20
    1db6:	60 0d       	add	r22, r0
    1db8:	21 1d       	adc	r18, r1
    1dba:	82 2f       	mov	r24, r18
    1dbc:	76 2f       	mov	r23, r22
    1dbe:	6a 2f       	mov	r22, r26
    1dc0:	11 24       	eor	r1, r1
    1dc2:	9f 57       	subi	r25, 0x7F	; 127
    1dc4:	50 40       	sbci	r21, 0x00	; 0
    1dc6:	8a f0       	brmi	.+34     	; 0x1dea <__mulsf3_pse+0x84>
    1dc8:	e1 f0       	breq	.+56     	; 0x1e02 <__mulsf3_pse+0x9c>
    1dca:	88 23       	and	r24, r24
    1dcc:	4a f0       	brmi	.+18     	; 0x1de0 <__mulsf3_pse+0x7a>
    1dce:	ee 0f       	add	r30, r30
    1dd0:	ff 1f       	adc	r31, r31
    1dd2:	bb 1f       	adc	r27, r27
    1dd4:	66 1f       	adc	r22, r22
    1dd6:	77 1f       	adc	r23, r23
    1dd8:	88 1f       	adc	r24, r24
    1dda:	91 50       	subi	r25, 0x01	; 1
    1ddc:	50 40       	sbci	r21, 0x00	; 0
    1dde:	a9 f7       	brne	.-22     	; 0x1dca <__mulsf3_pse+0x64>
    1de0:	9e 3f       	cpi	r25, 0xFE	; 254
    1de2:	51 05       	cpc	r21, r1
    1de4:	70 f0       	brcs	.+28     	; 0x1e02 <__mulsf3_pse+0x9c>
    1de6:	34 cf       	rjmp	.-408    	; 0x1c50 <__fp_inf>
    1de8:	a3 cf       	rjmp	.-186    	; 0x1d30 <__fp_szero>
    1dea:	5f 3f       	cpi	r21, 0xFF	; 255
    1dec:	ec f3       	brlt	.-6      	; 0x1de8 <__mulsf3_pse+0x82>
    1dee:	98 3e       	cpi	r25, 0xE8	; 232
    1df0:	dc f3       	brlt	.-10     	; 0x1de8 <__mulsf3_pse+0x82>
    1df2:	86 95       	lsr	r24
    1df4:	77 95       	ror	r23
    1df6:	67 95       	ror	r22
    1df8:	b7 95       	ror	r27
    1dfa:	f7 95       	ror	r31
    1dfc:	e7 95       	ror	r30
    1dfe:	9f 5f       	subi	r25, 0xFF	; 255
    1e00:	c1 f7       	brne	.-16     	; 0x1df2 <__mulsf3_pse+0x8c>
    1e02:	fe 2b       	or	r31, r30
    1e04:	88 0f       	add	r24, r24
    1e06:	91 1d       	adc	r25, r1
    1e08:	96 95       	lsr	r25
    1e0a:	87 95       	ror	r24
    1e0c:	97 f9       	bld	r25, 7
    1e0e:	08 95       	ret
    1e10:	11 f4       	brne	.+4      	; 0x1e16 <__mulsf3_pse+0xb0>
    1e12:	0e f4       	brtc	.+2      	; 0x1e16 <__mulsf3_pse+0xb0>
    1e14:	23 cf       	rjmp	.-442    	; 0x1c5c <__fp_nan>
    1e16:	41 c0       	rjmp	.+130    	; 0x1e9a <__fp_mpack>

00001e18 <sqrt>:
    1e18:	70 df       	rcall	.-288    	; 0x1cfa <__fp_splitA>
    1e1a:	d0 f3       	brcs	.-12     	; 0x1e10 <__mulsf3_pse+0xaa>
    1e1c:	99 23       	and	r25, r25
    1e1e:	d9 f3       	breq	.-10     	; 0x1e16 <__mulsf3_pse+0xb0>
    1e20:	ce f3       	brts	.-14     	; 0x1e14 <__mulsf3_pse+0xae>
    1e22:	9f 57       	subi	r25, 0x7F	; 127
    1e24:	55 0b       	sbc	r21, r21
    1e26:	87 ff       	sbrs	r24, 7
    1e28:	46 d0       	rcall	.+140    	; 0x1eb6 <__fp_norm2>
    1e2a:	00 24       	eor	r0, r0
    1e2c:	a0 e6       	ldi	r26, 0x60	; 96
    1e2e:	40 ea       	ldi	r20, 0xA0	; 160
    1e30:	90 01       	movw	r18, r0
    1e32:	80 58       	subi	r24, 0x80	; 128
    1e34:	56 95       	lsr	r21
    1e36:	97 95       	ror	r25
    1e38:	28 f4       	brcc	.+10     	; 0x1e44 <sqrt+0x2c>
    1e3a:	80 5c       	subi	r24, 0xC0	; 192
    1e3c:	66 0f       	add	r22, r22
    1e3e:	77 1f       	adc	r23, r23
    1e40:	88 1f       	adc	r24, r24
    1e42:	20 f0       	brcs	.+8      	; 0x1e4c <sqrt+0x34>
    1e44:	26 17       	cp	r18, r22
    1e46:	37 07       	cpc	r19, r23
    1e48:	48 07       	cpc	r20, r24
    1e4a:	30 f4       	brcc	.+12     	; 0x1e58 <sqrt+0x40>
    1e4c:	62 1b       	sub	r22, r18
    1e4e:	73 0b       	sbc	r23, r19
    1e50:	84 0b       	sbc	r24, r20
    1e52:	20 29       	or	r18, r0
    1e54:	31 29       	or	r19, r1
    1e56:	4a 2b       	or	r20, r26
    1e58:	a6 95       	lsr	r26
    1e5a:	17 94       	ror	r1
    1e5c:	07 94       	ror	r0
    1e5e:	20 25       	eor	r18, r0
    1e60:	31 25       	eor	r19, r1
    1e62:	4a 27       	eor	r20, r26
    1e64:	58 f7       	brcc	.-42     	; 0x1e3c <sqrt+0x24>
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	20 f0       	brcs	.+8      	; 0x1e76 <sqrt+0x5e>
    1e6e:	26 17       	cp	r18, r22
    1e70:	37 07       	cpc	r19, r23
    1e72:	48 07       	cpc	r20, r24
    1e74:	30 f4       	brcc	.+12     	; 0x1e82 <sqrt+0x6a>
    1e76:	62 0b       	sbc	r22, r18
    1e78:	73 0b       	sbc	r23, r19
    1e7a:	84 0b       	sbc	r24, r20
    1e7c:	20 0d       	add	r18, r0
    1e7e:	31 1d       	adc	r19, r1
    1e80:	41 1d       	adc	r20, r1
    1e82:	a0 95       	com	r26
    1e84:	81 f7       	brne	.-32     	; 0x1e66 <sqrt+0x4e>
    1e86:	b9 01       	movw	r22, r18
    1e88:	84 2f       	mov	r24, r20
    1e8a:	91 58       	subi	r25, 0x81	; 129
    1e8c:	88 0f       	add	r24, r24
    1e8e:	96 95       	lsr	r25
    1e90:	87 95       	ror	r24
    1e92:	08 95       	ret

00001e94 <square>:
    1e94:	9b 01       	movw	r18, r22
    1e96:	ac 01       	movw	r20, r24
    1e98:	58 cf       	rjmp	.-336    	; 0x1d4a <__mulsf3>

00001e9a <__fp_mpack>:
    1e9a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e9c:	31 f0       	breq	.+12     	; 0x1eaa <__fp_mpack_finite+0xc>

00001e9e <__fp_mpack_finite>:
    1e9e:	91 50       	subi	r25, 0x01	; 1
    1ea0:	20 f4       	brcc	.+8      	; 0x1eaa <__fp_mpack_finite+0xc>
    1ea2:	87 95       	ror	r24
    1ea4:	77 95       	ror	r23
    1ea6:	67 95       	ror	r22
    1ea8:	b7 95       	ror	r27
    1eaa:	88 0f       	add	r24, r24
    1eac:	91 1d       	adc	r25, r1
    1eae:	96 95       	lsr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	97 f9       	bld	r25, 7
    1eb4:	08 95       	ret

00001eb6 <__fp_norm2>:
    1eb6:	91 50       	subi	r25, 0x01	; 1
    1eb8:	50 40       	sbci	r21, 0x00	; 0
    1eba:	66 0f       	add	r22, r22
    1ebc:	77 1f       	adc	r23, r23
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	d2 f7       	brpl	.-12     	; 0x1eb6 <__fp_norm2>
    1ec2:	08 95       	ret

00001ec4 <__tablejump2__>:
    1ec4:	ee 0f       	add	r30, r30
    1ec6:	ff 1f       	adc	r31, r31

00001ec8 <__tablejump__>:
    1ec8:	05 90       	lpm	r0, Z+
    1eca:	f4 91       	lpm	r31, Z
    1ecc:	e0 2d       	mov	r30, r0
    1ece:	09 94       	ijmp

00001ed0 <malloc>:
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	10 f4       	brcc	.+4      	; 0x1ede <malloc+0xe>
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	e0 91 c4 00 	lds	r30, 0x00C4
    1ee2:	f0 91 c5 00 	lds	r31, 0x00C5
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	a0 e0       	ldi	r26, 0x00	; 0
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	30 97       	sbiw	r30, 0x00	; 0
    1ef0:	39 f1       	breq	.+78     	; 0x1f40 <malloc+0x70>
    1ef2:	40 81       	ld	r20, Z
    1ef4:	51 81       	ldd	r21, Z+1	; 0x01
    1ef6:	48 17       	cp	r20, r24
    1ef8:	59 07       	cpc	r21, r25
    1efa:	b8 f0       	brcs	.+46     	; 0x1f2a <malloc+0x5a>
    1efc:	48 17       	cp	r20, r24
    1efe:	59 07       	cpc	r21, r25
    1f00:	71 f4       	brne	.+28     	; 0x1f1e <malloc+0x4e>
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	93 81       	ldd	r25, Z+3	; 0x03
    1f06:	10 97       	sbiw	r26, 0x00	; 0
    1f08:	29 f0       	breq	.+10     	; 0x1f14 <malloc+0x44>
    1f0a:	13 96       	adiw	r26, 0x03	; 3
    1f0c:	9c 93       	st	X, r25
    1f0e:	8e 93       	st	-X, r24
    1f10:	12 97       	sbiw	r26, 0x02	; 2
    1f12:	2c c0       	rjmp	.+88     	; 0x1f6c <malloc+0x9c>
    1f14:	90 93 c5 00 	sts	0x00C5, r25
    1f18:	80 93 c4 00 	sts	0x00C4, r24
    1f1c:	27 c0       	rjmp	.+78     	; 0x1f6c <malloc+0x9c>
    1f1e:	21 15       	cp	r18, r1
    1f20:	31 05       	cpc	r19, r1
    1f22:	31 f0       	breq	.+12     	; 0x1f30 <malloc+0x60>
    1f24:	42 17       	cp	r20, r18
    1f26:	53 07       	cpc	r21, r19
    1f28:	18 f0       	brcs	.+6      	; 0x1f30 <malloc+0x60>
    1f2a:	a9 01       	movw	r20, r18
    1f2c:	db 01       	movw	r26, r22
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <malloc+0x62>
    1f30:	ef 01       	movw	r28, r30
    1f32:	9a 01       	movw	r18, r20
    1f34:	bd 01       	movw	r22, r26
    1f36:	df 01       	movw	r26, r30
    1f38:	02 80       	ldd	r0, Z+2	; 0x02
    1f3a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f3c:	e0 2d       	mov	r30, r0
    1f3e:	d7 cf       	rjmp	.-82     	; 0x1eee <malloc+0x1e>
    1f40:	21 15       	cp	r18, r1
    1f42:	31 05       	cpc	r19, r1
    1f44:	f9 f0       	breq	.+62     	; 0x1f84 <malloc+0xb4>
    1f46:	28 1b       	sub	r18, r24
    1f48:	39 0b       	sbc	r19, r25
    1f4a:	24 30       	cpi	r18, 0x04	; 4
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	80 f4       	brcc	.+32     	; 0x1f70 <malloc+0xa0>
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	9b 81       	ldd	r25, Y+3	; 0x03
    1f54:	61 15       	cp	r22, r1
    1f56:	71 05       	cpc	r23, r1
    1f58:	21 f0       	breq	.+8      	; 0x1f62 <malloc+0x92>
    1f5a:	fb 01       	movw	r30, r22
    1f5c:	93 83       	std	Z+3, r25	; 0x03
    1f5e:	82 83       	std	Z+2, r24	; 0x02
    1f60:	04 c0       	rjmp	.+8      	; 0x1f6a <malloc+0x9a>
    1f62:	90 93 c5 00 	sts	0x00C5, r25
    1f66:	80 93 c4 00 	sts	0x00C4, r24
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	32 96       	adiw	r30, 0x02	; 2
    1f6e:	44 c0       	rjmp	.+136    	; 0x1ff8 <malloc+0x128>
    1f70:	fe 01       	movw	r30, r28
    1f72:	e2 0f       	add	r30, r18
    1f74:	f3 1f       	adc	r31, r19
    1f76:	81 93       	st	Z+, r24
    1f78:	91 93       	st	Z+, r25
    1f7a:	22 50       	subi	r18, 0x02	; 2
    1f7c:	31 09       	sbc	r19, r1
    1f7e:	39 83       	std	Y+1, r19	; 0x01
    1f80:	28 83       	st	Y, r18
    1f82:	3a c0       	rjmp	.+116    	; 0x1ff8 <malloc+0x128>
    1f84:	20 91 c2 00 	lds	r18, 0x00C2
    1f88:	30 91 c3 00 	lds	r19, 0x00C3
    1f8c:	23 2b       	or	r18, r19
    1f8e:	41 f4       	brne	.+16     	; 0x1fa0 <malloc+0xd0>
    1f90:	20 91 62 00 	lds	r18, 0x0062
    1f94:	30 91 63 00 	lds	r19, 0x0063
    1f98:	30 93 c3 00 	sts	0x00C3, r19
    1f9c:	20 93 c2 00 	sts	0x00C2, r18
    1fa0:	20 91 60 00 	lds	r18, 0x0060
    1fa4:	30 91 61 00 	lds	r19, 0x0061
    1fa8:	21 15       	cp	r18, r1
    1faa:	31 05       	cpc	r19, r1
    1fac:	41 f4       	brne	.+16     	; 0x1fbe <malloc+0xee>
    1fae:	2d b7       	in	r18, 0x3d	; 61
    1fb0:	3e b7       	in	r19, 0x3e	; 62
    1fb2:	40 91 64 00 	lds	r20, 0x0064
    1fb6:	50 91 65 00 	lds	r21, 0x0065
    1fba:	24 1b       	sub	r18, r20
    1fbc:	35 0b       	sbc	r19, r21
    1fbe:	e0 91 c2 00 	lds	r30, 0x00C2
    1fc2:	f0 91 c3 00 	lds	r31, 0x00C3
    1fc6:	e2 17       	cp	r30, r18
    1fc8:	f3 07       	cpc	r31, r19
    1fca:	a0 f4       	brcc	.+40     	; 0x1ff4 <malloc+0x124>
    1fcc:	2e 1b       	sub	r18, r30
    1fce:	3f 0b       	sbc	r19, r31
    1fd0:	28 17       	cp	r18, r24
    1fd2:	39 07       	cpc	r19, r25
    1fd4:	78 f0       	brcs	.+30     	; 0x1ff4 <malloc+0x124>
    1fd6:	ac 01       	movw	r20, r24
    1fd8:	4e 5f       	subi	r20, 0xFE	; 254
    1fda:	5f 4f       	sbci	r21, 0xFF	; 255
    1fdc:	24 17       	cp	r18, r20
    1fde:	35 07       	cpc	r19, r21
    1fe0:	48 f0       	brcs	.+18     	; 0x1ff4 <malloc+0x124>
    1fe2:	4e 0f       	add	r20, r30
    1fe4:	5f 1f       	adc	r21, r31
    1fe6:	50 93 c3 00 	sts	0x00C3, r21
    1fea:	40 93 c2 00 	sts	0x00C2, r20
    1fee:	81 93       	st	Z+, r24
    1ff0:	91 93       	st	Z+, r25
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <malloc+0x128>
    1ff4:	e0 e0       	ldi	r30, 0x00	; 0
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	cf 01       	movw	r24, r30
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	08 95       	ret

00002000 <free>:
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	09 f4       	brne	.+2      	; 0x200a <free+0xa>
    2008:	87 c0       	rjmp	.+270    	; 0x2118 <free+0x118>
    200a:	fc 01       	movw	r30, r24
    200c:	32 97       	sbiw	r30, 0x02	; 2
    200e:	13 82       	std	Z+3, r1	; 0x03
    2010:	12 82       	std	Z+2, r1	; 0x02
    2012:	c0 91 c4 00 	lds	r28, 0x00C4
    2016:	d0 91 c5 00 	lds	r29, 0x00C5
    201a:	20 97       	sbiw	r28, 0x00	; 0
    201c:	81 f4       	brne	.+32     	; 0x203e <free+0x3e>
    201e:	20 81       	ld	r18, Z
    2020:	31 81       	ldd	r19, Z+1	; 0x01
    2022:	28 0f       	add	r18, r24
    2024:	39 1f       	adc	r19, r25
    2026:	80 91 c2 00 	lds	r24, 0x00C2
    202a:	90 91 c3 00 	lds	r25, 0x00C3
    202e:	82 17       	cp	r24, r18
    2030:	93 07       	cpc	r25, r19
    2032:	79 f5       	brne	.+94     	; 0x2092 <free+0x92>
    2034:	f0 93 c3 00 	sts	0x00C3, r31
    2038:	e0 93 c2 00 	sts	0x00C2, r30
    203c:	6d c0       	rjmp	.+218    	; 0x2118 <free+0x118>
    203e:	de 01       	movw	r26, r28
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	ae 17       	cp	r26, r30
    2046:	bf 07       	cpc	r27, r31
    2048:	50 f4       	brcc	.+20     	; 0x205e <free+0x5e>
    204a:	12 96       	adiw	r26, 0x02	; 2
    204c:	4d 91       	ld	r20, X+
    204e:	5c 91       	ld	r21, X
    2050:	13 97       	sbiw	r26, 0x03	; 3
    2052:	9d 01       	movw	r18, r26
    2054:	41 15       	cp	r20, r1
    2056:	51 05       	cpc	r21, r1
    2058:	09 f1       	breq	.+66     	; 0x209c <free+0x9c>
    205a:	da 01       	movw	r26, r20
    205c:	f3 cf       	rjmp	.-26     	; 0x2044 <free+0x44>
    205e:	b3 83       	std	Z+3, r27	; 0x03
    2060:	a2 83       	std	Z+2, r26	; 0x02
    2062:	40 81       	ld	r20, Z
    2064:	51 81       	ldd	r21, Z+1	; 0x01
    2066:	84 0f       	add	r24, r20
    2068:	95 1f       	adc	r25, r21
    206a:	8a 17       	cp	r24, r26
    206c:	9b 07       	cpc	r25, r27
    206e:	71 f4       	brne	.+28     	; 0x208c <free+0x8c>
    2070:	8d 91       	ld	r24, X+
    2072:	9c 91       	ld	r25, X
    2074:	11 97       	sbiw	r26, 0x01	; 1
    2076:	84 0f       	add	r24, r20
    2078:	95 1f       	adc	r25, r21
    207a:	02 96       	adiw	r24, 0x02	; 2
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	80 83       	st	Z, r24
    2080:	12 96       	adiw	r26, 0x02	; 2
    2082:	8d 91       	ld	r24, X+
    2084:	9c 91       	ld	r25, X
    2086:	13 97       	sbiw	r26, 0x03	; 3
    2088:	93 83       	std	Z+3, r25	; 0x03
    208a:	82 83       	std	Z+2, r24	; 0x02
    208c:	21 15       	cp	r18, r1
    208e:	31 05       	cpc	r19, r1
    2090:	29 f4       	brne	.+10     	; 0x209c <free+0x9c>
    2092:	f0 93 c5 00 	sts	0x00C5, r31
    2096:	e0 93 c4 00 	sts	0x00C4, r30
    209a:	3e c0       	rjmp	.+124    	; 0x2118 <free+0x118>
    209c:	d9 01       	movw	r26, r18
    209e:	13 96       	adiw	r26, 0x03	; 3
    20a0:	fc 93       	st	X, r31
    20a2:	ee 93       	st	-X, r30
    20a4:	12 97       	sbiw	r26, 0x02	; 2
    20a6:	4d 91       	ld	r20, X+
    20a8:	5d 91       	ld	r21, X+
    20aa:	a4 0f       	add	r26, r20
    20ac:	b5 1f       	adc	r27, r21
    20ae:	ea 17       	cp	r30, r26
    20b0:	fb 07       	cpc	r31, r27
    20b2:	79 f4       	brne	.+30     	; 0x20d2 <free+0xd2>
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	84 0f       	add	r24, r20
    20ba:	95 1f       	adc	r25, r21
    20bc:	02 96       	adiw	r24, 0x02	; 2
    20be:	d9 01       	movw	r26, r18
    20c0:	11 96       	adiw	r26, 0x01	; 1
    20c2:	9c 93       	st	X, r25
    20c4:	8e 93       	st	-X, r24
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	13 96       	adiw	r26, 0x03	; 3
    20cc:	9c 93       	st	X, r25
    20ce:	8e 93       	st	-X, r24
    20d0:	12 97       	sbiw	r26, 0x02	; 2
    20d2:	e0 e0       	ldi	r30, 0x00	; 0
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	9b 81       	ldd	r25, Y+3	; 0x03
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	19 f0       	breq	.+6      	; 0x20e4 <free+0xe4>
    20de:	fe 01       	movw	r30, r28
    20e0:	ec 01       	movw	r28, r24
    20e2:	f9 cf       	rjmp	.-14     	; 0x20d6 <free+0xd6>
    20e4:	ce 01       	movw	r24, r28
    20e6:	02 96       	adiw	r24, 0x02	; 2
    20e8:	28 81       	ld	r18, Y
    20ea:	39 81       	ldd	r19, Y+1	; 0x01
    20ec:	82 0f       	add	r24, r18
    20ee:	93 1f       	adc	r25, r19
    20f0:	20 91 c2 00 	lds	r18, 0x00C2
    20f4:	30 91 c3 00 	lds	r19, 0x00C3
    20f8:	28 17       	cp	r18, r24
    20fa:	39 07       	cpc	r19, r25
    20fc:	69 f4       	brne	.+26     	; 0x2118 <free+0x118>
    20fe:	30 97       	sbiw	r30, 0x00	; 0
    2100:	29 f4       	brne	.+10     	; 0x210c <free+0x10c>
    2102:	10 92 c5 00 	sts	0x00C5, r1
    2106:	10 92 c4 00 	sts	0x00C4, r1
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <free+0x110>
    210c:	13 82       	std	Z+3, r1	; 0x03
    210e:	12 82       	std	Z+2, r1	; 0x02
    2110:	d0 93 c3 00 	sts	0x00C3, r29
    2114:	c0 93 c2 00 	sts	0x00C2, r28
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	08 95       	ret

0000211e <do_rand>:
    211e:	8f 92       	push	r8
    2120:	9f 92       	push	r9
    2122:	af 92       	push	r10
    2124:	bf 92       	push	r11
    2126:	cf 92       	push	r12
    2128:	df 92       	push	r13
    212a:	ef 92       	push	r14
    212c:	ff 92       	push	r15
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	ec 01       	movw	r28, r24
    2134:	68 81       	ld	r22, Y
    2136:	79 81       	ldd	r23, Y+1	; 0x01
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	9b 81       	ldd	r25, Y+3	; 0x03
    213c:	61 15       	cp	r22, r1
    213e:	71 05       	cpc	r23, r1
    2140:	81 05       	cpc	r24, r1
    2142:	91 05       	cpc	r25, r1
    2144:	21 f4       	brne	.+8      	; 0x214e <do_rand+0x30>
    2146:	64 e2       	ldi	r22, 0x24	; 36
    2148:	79 ed       	ldi	r23, 0xD9	; 217
    214a:	8b e5       	ldi	r24, 0x5B	; 91
    214c:	97 e0       	ldi	r25, 0x07	; 7
    214e:	2d e1       	ldi	r18, 0x1D	; 29
    2150:	33 ef       	ldi	r19, 0xF3	; 243
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__divmodsi4>
    215a:	49 01       	movw	r8, r18
    215c:	5a 01       	movw	r10, r20
    215e:	9b 01       	movw	r18, r22
    2160:	ac 01       	movw	r20, r24
    2162:	a7 ea       	ldi	r26, 0xA7	; 167
    2164:	b1 e4       	ldi	r27, 0x41	; 65
    2166:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__muluhisi3>
    216a:	6b 01       	movw	r12, r22
    216c:	7c 01       	movw	r14, r24
    216e:	ac ee       	ldi	r26, 0xEC	; 236
    2170:	b4 ef       	ldi	r27, 0xF4	; 244
    2172:	a5 01       	movw	r20, r10
    2174:	94 01       	movw	r18, r8
    2176:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__mulohisi3>
    217a:	c6 0e       	add	r12, r22
    217c:	d7 1e       	adc	r13, r23
    217e:	e8 1e       	adc	r14, r24
    2180:	f9 1e       	adc	r15, r25
    2182:	f7 fe       	sbrs	r15, 7
    2184:	06 c0       	rjmp	.+12     	; 0x2192 <do_rand+0x74>
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	c8 1a       	sub	r12, r24
    218a:	d1 08       	sbc	r13, r1
    218c:	e1 08       	sbc	r14, r1
    218e:	80 e8       	ldi	r24, 0x80	; 128
    2190:	f8 0a       	sbc	r15, r24
    2192:	c8 82       	st	Y, r12
    2194:	d9 82       	std	Y+1, r13	; 0x01
    2196:	ea 82       	std	Y+2, r14	; 0x02
    2198:	fb 82       	std	Y+3, r15	; 0x03
    219a:	c6 01       	movw	r24, r12
    219c:	9f 77       	andi	r25, 0x7F	; 127
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	bf 90       	pop	r11
    21ac:	af 90       	pop	r10
    21ae:	9f 90       	pop	r9
    21b0:	8f 90       	pop	r8
    21b2:	08 95       	ret

000021b4 <rand_r>:
    21b4:	0e 94 8f 10 	call	0x211e	; 0x211e <do_rand>
    21b8:	08 95       	ret

000021ba <rand>:
    21ba:	86 e6       	ldi	r24, 0x66	; 102
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 8f 10 	call	0x211e	; 0x211e <do_rand>
    21c2:	08 95       	ret

000021c4 <srand>:
    21c4:	a0 e0       	ldi	r26, 0x00	; 0
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	80 93 66 00 	sts	0x0066, r24
    21cc:	90 93 67 00 	sts	0x0067, r25
    21d0:	a0 93 68 00 	sts	0x0068, r26
    21d4:	b0 93 69 00 	sts	0x0069, r27
    21d8:	08 95       	ret

000021da <strtol>:
    21da:	2f 92       	push	r2
    21dc:	3f 92       	push	r3
    21de:	5f 92       	push	r5
    21e0:	6f 92       	push	r6
    21e2:	7f 92       	push	r7
    21e4:	8f 92       	push	r8
    21e6:	9f 92       	push	r9
    21e8:	af 92       	push	r10
    21ea:	bf 92       	push	r11
    21ec:	cf 92       	push	r12
    21ee:	df 92       	push	r13
    21f0:	ef 92       	push	r14
    21f2:	ff 92       	push	r15
    21f4:	0f 93       	push	r16
    21f6:	1f 93       	push	r17
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
    21fc:	8b 01       	movw	r16, r22
    21fe:	ea 01       	movw	r28, r20
    2200:	61 15       	cp	r22, r1
    2202:	71 05       	cpc	r23, r1
    2204:	21 f0       	breq	.+8      	; 0x220e <strtol+0x34>
    2206:	db 01       	movw	r26, r22
    2208:	8c 93       	st	X, r24
    220a:	11 96       	adiw	r26, 0x01	; 1
    220c:	9c 93       	st	X, r25
    220e:	20 97       	sbiw	r28, 0x00	; 0
    2210:	39 f0       	breq	.+14     	; 0x2220 <strtol+0x46>
    2212:	9e 01       	movw	r18, r28
    2214:	22 50       	subi	r18, 0x02	; 2
    2216:	31 09       	sbc	r19, r1
    2218:	23 32       	cpi	r18, 0x23	; 35
    221a:	31 05       	cpc	r19, r1
    221c:	08 f0       	brcs	.+2      	; 0x2220 <strtol+0x46>
    221e:	fb c0       	rjmp	.+502    	; 0x2416 <strtol+0x23c>
    2220:	7c 01       	movw	r14, r24
    2222:	67 01       	movw	r12, r14
    2224:	bf ef       	ldi	r27, 0xFF	; 255
    2226:	cb 1a       	sub	r12, r27
    2228:	db 0a       	sbc	r13, r27
    222a:	56 01       	movw	r10, r12
    222c:	f7 01       	movw	r30, r14
    222e:	60 80       	ld	r6, Z
    2230:	86 2d       	mov	r24, r6
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 21 12 	call	0x2442	; 0x2442 <isspace>
    2238:	89 2b       	or	r24, r25
    223a:	11 f0       	breq	.+4      	; 0x2240 <strtol+0x66>
    223c:	76 01       	movw	r14, r12
    223e:	f1 cf       	rjmp	.-30     	; 0x2222 <strtol+0x48>
    2240:	fd e2       	ldi	r31, 0x2D	; 45
    2242:	6f 12       	cpse	r6, r31
    2244:	0a c0       	rjmp	.+20     	; 0x225a <strtol+0x80>
    2246:	57 01       	movw	r10, r14
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	a8 0e       	add	r10, r24
    224c:	b1 1c       	adc	r11, r1
    224e:	d7 01       	movw	r26, r14
    2250:	11 96       	adiw	r26, 0x01	; 1
    2252:	6c 90       	ld	r6, X
    2254:	77 24       	eor	r7, r7
    2256:	73 94       	inc	r7
    2258:	0b c0       	rjmp	.+22     	; 0x2270 <strtol+0x96>
    225a:	bb e2       	ldi	r27, 0x2B	; 43
    225c:	6b 12       	cpse	r6, r27
    225e:	07 c0       	rjmp	.+14     	; 0x226e <strtol+0x94>
    2260:	57 01       	movw	r10, r14
    2262:	e2 e0       	ldi	r30, 0x02	; 2
    2264:	ae 0e       	add	r10, r30
    2266:	b1 1c       	adc	r11, r1
    2268:	d7 01       	movw	r26, r14
    226a:	11 96       	adiw	r26, 0x01	; 1
    226c:	6c 90       	ld	r6, X
    226e:	71 2c       	mov	r7, r1
    2270:	ce 01       	movw	r24, r28
    2272:	8f 7e       	andi	r24, 0xEF	; 239
    2274:	89 2b       	or	r24, r25
    2276:	89 f4       	brne	.+34     	; 0x229a <strtol+0xc0>
    2278:	b0 e3       	ldi	r27, 0x30	; 48
    227a:	6b 12       	cpse	r6, r27
    227c:	22 c0       	rjmp	.+68     	; 0x22c2 <strtol+0xe8>
    227e:	f5 01       	movw	r30, r10
    2280:	80 81       	ld	r24, Z
    2282:	8f 7d       	andi	r24, 0xDF	; 223
    2284:	88 35       	cpi	r24, 0x58	; 88
    2286:	41 f5       	brne	.+80     	; 0x22d8 <strtol+0xfe>
    2288:	61 80       	ldd	r6, Z+1	; 0x01
    228a:	f2 e0       	ldi	r31, 0x02	; 2
    228c:	af 0e       	add	r10, r31
    228e:	b1 1c       	adc	r11, r1
    2290:	87 2d       	mov	r24, r7
    2292:	82 60       	ori	r24, 0x02	; 2
    2294:	78 2e       	mov	r7, r24
    2296:	c0 e1       	ldi	r28, 0x10	; 16
    2298:	d0 e0       	ldi	r29, 0x00	; 0
    229a:	c8 30       	cpi	r28, 0x08	; 8
    229c:	d1 05       	cpc	r29, r1
    229e:	f1 f0       	breq	.+60     	; 0x22dc <strtol+0x102>
    22a0:	4c f4       	brge	.+18     	; 0x22b4 <strtol+0xda>
    22a2:	c2 30       	cpi	r28, 0x02	; 2
    22a4:	d1 05       	cpc	r29, r1
    22a6:	11 f5       	brne	.+68     	; 0x22ec <strtol+0x112>
    22a8:	c1 2c       	mov	r12, r1
    22aa:	d1 2c       	mov	r13, r1
    22ac:	e1 2c       	mov	r14, r1
    22ae:	b0 e4       	ldi	r27, 0x40	; 64
    22b0:	fb 2e       	mov	r15, r27
    22b2:	2f c0       	rjmp	.+94     	; 0x2312 <strtol+0x138>
    22b4:	ca 30       	cpi	r28, 0x0A	; 10
    22b6:	d1 05       	cpc	r29, r1
    22b8:	31 f0       	breq	.+12     	; 0x22c6 <strtol+0xec>
    22ba:	c0 31       	cpi	r28, 0x10	; 16
    22bc:	d1 05       	cpc	r29, r1
    22be:	21 f1       	breq	.+72     	; 0x2308 <strtol+0x12e>
    22c0:	15 c0       	rjmp	.+42     	; 0x22ec <strtol+0x112>
    22c2:	20 97       	sbiw	r28, 0x00	; 0
    22c4:	51 f7       	brne	.-44     	; 0x229a <strtol+0xc0>
    22c6:	ca e0       	ldi	r28, 0x0A	; 10
    22c8:	d0 e0       	ldi	r29, 0x00	; 0
    22ca:	ac ec       	ldi	r26, 0xCC	; 204
    22cc:	ca 2e       	mov	r12, r26
    22ce:	dc 2c       	mov	r13, r12
    22d0:	ec 2c       	mov	r14, r12
    22d2:	ac e0       	ldi	r26, 0x0C	; 12
    22d4:	fa 2e       	mov	r15, r26
    22d6:	1d c0       	rjmp	.+58     	; 0x2312 <strtol+0x138>
    22d8:	20 97       	sbiw	r28, 0x00	; 0
    22da:	f9 f6       	brne	.-66     	; 0x229a <strtol+0xc0>
    22dc:	c8 e0       	ldi	r28, 0x08	; 8
    22de:	d0 e0       	ldi	r29, 0x00	; 0
    22e0:	c1 2c       	mov	r12, r1
    22e2:	d1 2c       	mov	r13, r1
    22e4:	e1 2c       	mov	r14, r1
    22e6:	f0 e1       	ldi	r31, 0x10	; 16
    22e8:	ff 2e       	mov	r15, r31
    22ea:	13 c0       	rjmp	.+38     	; 0x2312 <strtol+0x138>
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e8       	ldi	r25, 0x80	; 128
    22f4:	9e 01       	movw	r18, r28
    22f6:	44 27       	eor	r20, r20
    22f8:	37 fd       	sbrc	r19, 7
    22fa:	40 95       	com	r20
    22fc:	54 2f       	mov	r21, r20
    22fe:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__udivmodsi4>
    2302:	69 01       	movw	r12, r18
    2304:	7a 01       	movw	r14, r20
    2306:	05 c0       	rjmp	.+10     	; 0x2312 <strtol+0x138>
    2308:	c1 2c       	mov	r12, r1
    230a:	d1 2c       	mov	r13, r1
    230c:	e1 2c       	mov	r14, r1
    230e:	e8 e0       	ldi	r30, 0x08	; 8
    2310:	fe 2e       	mov	r15, r30
    2312:	f5 01       	movw	r30, r10
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	a9 01       	movw	r20, r18
    231c:	4e 01       	movw	r8, r28
    231e:	aa 24       	eor	r10, r10
    2320:	97 fc       	sbrc	r9, 7
    2322:	a0 94       	com	r10
    2324:	ba 2c       	mov	r11, r10
    2326:	1f 01       	movw	r2, r30
    2328:	70 ed       	ldi	r23, 0xD0	; 208
    232a:	57 2e       	mov	r5, r23
    232c:	56 0c       	add	r5, r6
    232e:	a9 e0       	ldi	r26, 0x09	; 9
    2330:	a5 15       	cp	r26, r5
    2332:	70 f4       	brcc	.+28     	; 0x2350 <strtol+0x176>
    2334:	8f eb       	ldi	r24, 0xBF	; 191
    2336:	86 0d       	add	r24, r6
    2338:	8a 31       	cpi	r24, 0x1A	; 26
    233a:	18 f4       	brcc	.+6      	; 0x2342 <strtol+0x168>
    233c:	99 ec       	ldi	r25, 0xC9	; 201
    233e:	59 2e       	mov	r5, r25
    2340:	06 c0       	rjmp	.+12     	; 0x234e <strtol+0x174>
    2342:	8f e9       	ldi	r24, 0x9F	; 159
    2344:	86 0d       	add	r24, r6
    2346:	8a 31       	cpi	r24, 0x1A	; 26
    2348:	30 f5       	brcc	.+76     	; 0x2396 <strtol+0x1bc>
    234a:	89 ea       	ldi	r24, 0xA9	; 169
    234c:	58 2e       	mov	r5, r24
    234e:	56 0c       	add	r5, r6
    2350:	85 2d       	mov	r24, r5
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	8c 17       	cp	r24, r28
    2356:	9d 07       	cpc	r25, r29
    2358:	f4 f4       	brge	.+60     	; 0x2396 <strtol+0x1bc>
    235a:	67 fd       	sbrc	r22, 7
    235c:	18 c0       	rjmp	.+48     	; 0x238e <strtol+0x1b4>
    235e:	c2 16       	cp	r12, r18
    2360:	d3 06       	cpc	r13, r19
    2362:	e4 06       	cpc	r14, r20
    2364:	f5 06       	cpc	r15, r21
    2366:	80 f0       	brcs	.+32     	; 0x2388 <strtol+0x1ae>
    2368:	c5 01       	movw	r24, r10
    236a:	b4 01       	movw	r22, r8
    236c:	0e 94 c6 14 	call	0x298c	; 0x298c <__mulsi3>
    2370:	9b 01       	movw	r18, r22
    2372:	ac 01       	movw	r20, r24
    2374:	25 0d       	add	r18, r5
    2376:	31 1d       	adc	r19, r1
    2378:	41 1d       	adc	r20, r1
    237a:	51 1d       	adc	r21, r1
    237c:	21 30       	cpi	r18, 0x01	; 1
    237e:	31 05       	cpc	r19, r1
    2380:	41 05       	cpc	r20, r1
    2382:	b0 e8       	ldi	r27, 0x80	; 128
    2384:	5b 07       	cpc	r21, r27
    2386:	10 f0       	brcs	.+4      	; 0x238c <strtol+0x1b2>
    2388:	6f ef       	ldi	r22, 0xFF	; 255
    238a:	01 c0       	rjmp	.+2      	; 0x238e <strtol+0x1b4>
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	31 96       	adiw	r30, 0x01	; 1
    2390:	d1 01       	movw	r26, r2
    2392:	6c 90       	ld	r6, X
    2394:	c8 cf       	rjmp	.-112    	; 0x2326 <strtol+0x14c>
    2396:	87 2d       	mov	r24, r7
    2398:	81 70       	andi	r24, 0x01	; 1
    239a:	01 15       	cp	r16, r1
    239c:	11 05       	cpc	r17, r1
    239e:	71 f0       	breq	.+28     	; 0x23bc <strtol+0x1e2>
    23a0:	66 23       	and	r22, r22
    23a2:	29 f0       	breq	.+10     	; 0x23ae <strtol+0x1d4>
    23a4:	31 97       	sbiw	r30, 0x01	; 1
    23a6:	d8 01       	movw	r26, r16
    23a8:	ed 93       	st	X+, r30
    23aa:	fc 93       	st	X, r31
    23ac:	07 c0       	rjmp	.+14     	; 0x23bc <strtol+0x1e2>
    23ae:	71 fe       	sbrs	r7, 1
    23b0:	19 c0       	rjmp	.+50     	; 0x23e4 <strtol+0x20a>
    23b2:	32 97       	sbiw	r30, 0x02	; 2
    23b4:	d8 01       	movw	r26, r16
    23b6:	ed 93       	st	X+, r30
    23b8:	fc 93       	st	X, r31
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <strtol+0x20a>
    23bc:	67 ff       	sbrs	r22, 7
    23be:	12 c0       	rjmp	.+36     	; 0x23e4 <strtol+0x20a>
    23c0:	88 23       	and	r24, r24
    23c2:	29 f0       	breq	.+10     	; 0x23ce <strtol+0x1f4>
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	50 e8       	ldi	r21, 0x80	; 128
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <strtol+0x1fc>
    23ce:	2f ef       	ldi	r18, 0xFF	; 255
    23d0:	3f ef       	ldi	r19, 0xFF	; 255
    23d2:	4f ef       	ldi	r20, 0xFF	; 255
    23d4:	5f e7       	ldi	r21, 0x7F	; 127
    23d6:	82 e2       	ldi	r24, 0x22	; 34
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	90 93 c7 00 	sts	0x00C7, r25
    23de:	80 93 c6 00 	sts	0x00C6, r24
    23e2:	16 c0       	rjmp	.+44     	; 0x2410 <strtol+0x236>
    23e4:	88 23       	and	r24, r24
    23e6:	41 f0       	breq	.+16     	; 0x23f8 <strtol+0x21e>
    23e8:	50 95       	com	r21
    23ea:	40 95       	com	r20
    23ec:	30 95       	com	r19
    23ee:	21 95       	neg	r18
    23f0:	3f 4f       	sbci	r19, 0xFF	; 255
    23f2:	4f 4f       	sbci	r20, 0xFF	; 255
    23f4:	5f 4f       	sbci	r21, 0xFF	; 255
    23f6:	0c c0       	rjmp	.+24     	; 0x2410 <strtol+0x236>
    23f8:	57 ff       	sbrs	r21, 7
    23fa:	0a c0       	rjmp	.+20     	; 0x2410 <strtol+0x236>
    23fc:	82 e2       	ldi	r24, 0x22	; 34
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	90 93 c7 00 	sts	0x00C7, r25
    2404:	80 93 c6 00 	sts	0x00C6, r24
    2408:	2f ef       	ldi	r18, 0xFF	; 255
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f ef       	ldi	r20, 0xFF	; 255
    240e:	5f e7       	ldi	r21, 0x7F	; 127
    2410:	b9 01       	movw	r22, r18
    2412:	ca 01       	movw	r24, r20
    2414:	04 c0       	rjmp	.+8      	; 0x241e <strtol+0x244>
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	ff 90       	pop	r15
    2428:	ef 90       	pop	r14
    242a:	df 90       	pop	r13
    242c:	cf 90       	pop	r12
    242e:	bf 90       	pop	r11
    2430:	af 90       	pop	r10
    2432:	9f 90       	pop	r9
    2434:	8f 90       	pop	r8
    2436:	7f 90       	pop	r7
    2438:	6f 90       	pop	r6
    243a:	5f 90       	pop	r5
    243c:	3f 90       	pop	r3
    243e:	2f 90       	pop	r2
    2440:	08 95       	ret

00002442 <isspace>:
    2442:	91 11       	cpse	r25, r1
    2444:	fa c1       	rjmp	.+1012   	; 0x283a <__ctype_isfalse>
    2446:	80 32       	cpi	r24, 0x20	; 32
    2448:	19 f0       	breq	.+6      	; 0x2450 <isspace+0xe>
    244a:	89 50       	subi	r24, 0x09	; 9
    244c:	85 50       	subi	r24, 0x05	; 5
    244e:	d0 f7       	brcc	.-12     	; 0x2444 <isspace+0x2>
    2450:	08 95       	ret

00002452 <sprintf>:
    2452:	ae e0       	ldi	r26, 0x0E	; 14
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	ef e2       	ldi	r30, 0x2F	; 47
    2458:	f2 e1       	ldi	r31, 0x12	; 18
    245a:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__prologue_saves__+0x1c>
    245e:	0d 89       	ldd	r16, Y+21	; 0x15
    2460:	1e 89       	ldd	r17, Y+22	; 0x16
    2462:	86 e0       	ldi	r24, 0x06	; 6
    2464:	8c 83       	std	Y+4, r24	; 0x04
    2466:	1a 83       	std	Y+2, r17	; 0x02
    2468:	09 83       	std	Y+1, r16	; 0x01
    246a:	8f ef       	ldi	r24, 0xFF	; 255
    246c:	9f e7       	ldi	r25, 0x7F	; 127
    246e:	9e 83       	std	Y+6, r25	; 0x06
    2470:	8d 83       	std	Y+5, r24	; 0x05
    2472:	ae 01       	movw	r20, r28
    2474:	47 5e       	subi	r20, 0xE7	; 231
    2476:	5f 4f       	sbci	r21, 0xFF	; 255
    2478:	6f 89       	ldd	r22, Y+23	; 0x17
    247a:	78 8d       	ldd	r23, Y+24	; 0x18
    247c:	ce 01       	movw	r24, r28
    247e:	01 96       	adiw	r24, 0x01	; 1
    2480:	0e 94 4b 12 	call	0x2496	; 0x2496 <vfprintf>
    2484:	ef 81       	ldd	r30, Y+7	; 0x07
    2486:	f8 85       	ldd	r31, Y+8	; 0x08
    2488:	e0 0f       	add	r30, r16
    248a:	f1 1f       	adc	r31, r17
    248c:	10 82       	st	Z, r1
    248e:	2e 96       	adiw	r28, 0x0e	; 14
    2490:	e4 e0       	ldi	r30, 0x04	; 4
    2492:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__epilogue_restores__+0x1c>

00002496 <vfprintf>:
    2496:	ac e0       	ldi	r26, 0x0C	; 12
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e1 e5       	ldi	r30, 0x51	; 81
    249c:	f2 e1       	ldi	r31, 0x12	; 18
    249e:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__prologue_saves__>
    24a2:	7c 01       	movw	r14, r24
    24a4:	6b 01       	movw	r12, r22
    24a6:	8a 01       	movw	r16, r20
    24a8:	fc 01       	movw	r30, r24
    24aa:	17 82       	std	Z+7, r1	; 0x07
    24ac:	16 82       	std	Z+6, r1	; 0x06
    24ae:	83 81       	ldd	r24, Z+3	; 0x03
    24b0:	81 ff       	sbrs	r24, 1
    24b2:	bd c1       	rjmp	.+890    	; 0x282e <vfprintf+0x398>
    24b4:	ce 01       	movw	r24, r28
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	4c 01       	movw	r8, r24
    24ba:	f7 01       	movw	r30, r14
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	f6 01       	movw	r30, r12
    24c0:	93 fd       	sbrc	r25, 3
    24c2:	85 91       	lpm	r24, Z+
    24c4:	93 ff       	sbrs	r25, 3
    24c6:	81 91       	ld	r24, Z+
    24c8:	6f 01       	movw	r12, r30
    24ca:	88 23       	and	r24, r24
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <vfprintf+0x3a>
    24ce:	ab c1       	rjmp	.+854    	; 0x2826 <vfprintf+0x390>
    24d0:	85 32       	cpi	r24, 0x25	; 37
    24d2:	39 f4       	brne	.+14     	; 0x24e2 <vfprintf+0x4c>
    24d4:	93 fd       	sbrc	r25, 3
    24d6:	85 91       	lpm	r24, Z+
    24d8:	93 ff       	sbrs	r25, 3
    24da:	81 91       	ld	r24, Z+
    24dc:	6f 01       	movw	r12, r30
    24de:	85 32       	cpi	r24, 0x25	; 37
    24e0:	29 f4       	brne	.+10     	; 0x24ec <vfprintf+0x56>
    24e2:	b7 01       	movw	r22, r14
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 36 14 	call	0x286c	; 0x286c <fputc>
    24ea:	e7 cf       	rjmp	.-50     	; 0x24ba <vfprintf+0x24>
    24ec:	51 2c       	mov	r5, r1
    24ee:	31 2c       	mov	r3, r1
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	20 32       	cpi	r18, 0x20	; 32
    24f4:	a0 f4       	brcc	.+40     	; 0x251e <vfprintf+0x88>
    24f6:	8b 32       	cpi	r24, 0x2B	; 43
    24f8:	69 f0       	breq	.+26     	; 0x2514 <vfprintf+0x7e>
    24fa:	30 f4       	brcc	.+12     	; 0x2508 <vfprintf+0x72>
    24fc:	80 32       	cpi	r24, 0x20	; 32
    24fe:	59 f0       	breq	.+22     	; 0x2516 <vfprintf+0x80>
    2500:	83 32       	cpi	r24, 0x23	; 35
    2502:	69 f4       	brne	.+26     	; 0x251e <vfprintf+0x88>
    2504:	20 61       	ori	r18, 0x10	; 16
    2506:	2c c0       	rjmp	.+88     	; 0x2560 <vfprintf+0xca>
    2508:	8d 32       	cpi	r24, 0x2D	; 45
    250a:	39 f0       	breq	.+14     	; 0x251a <vfprintf+0x84>
    250c:	80 33       	cpi	r24, 0x30	; 48
    250e:	39 f4       	brne	.+14     	; 0x251e <vfprintf+0x88>
    2510:	21 60       	ori	r18, 0x01	; 1
    2512:	26 c0       	rjmp	.+76     	; 0x2560 <vfprintf+0xca>
    2514:	22 60       	ori	r18, 0x02	; 2
    2516:	24 60       	ori	r18, 0x04	; 4
    2518:	23 c0       	rjmp	.+70     	; 0x2560 <vfprintf+0xca>
    251a:	28 60       	ori	r18, 0x08	; 8
    251c:	21 c0       	rjmp	.+66     	; 0x2560 <vfprintf+0xca>
    251e:	27 fd       	sbrc	r18, 7
    2520:	27 c0       	rjmp	.+78     	; 0x2570 <vfprintf+0xda>
    2522:	30 ed       	ldi	r19, 0xD0	; 208
    2524:	38 0f       	add	r19, r24
    2526:	3a 30       	cpi	r19, 0x0A	; 10
    2528:	78 f4       	brcc	.+30     	; 0x2548 <vfprintf+0xb2>
    252a:	26 ff       	sbrs	r18, 6
    252c:	06 c0       	rjmp	.+12     	; 0x253a <vfprintf+0xa4>
    252e:	fa e0       	ldi	r31, 0x0A	; 10
    2530:	5f 9e       	mul	r5, r31
    2532:	30 0d       	add	r19, r0
    2534:	11 24       	eor	r1, r1
    2536:	53 2e       	mov	r5, r19
    2538:	13 c0       	rjmp	.+38     	; 0x2560 <vfprintf+0xca>
    253a:	8a e0       	ldi	r24, 0x0A	; 10
    253c:	38 9e       	mul	r3, r24
    253e:	30 0d       	add	r19, r0
    2540:	11 24       	eor	r1, r1
    2542:	33 2e       	mov	r3, r19
    2544:	20 62       	ori	r18, 0x20	; 32
    2546:	0c c0       	rjmp	.+24     	; 0x2560 <vfprintf+0xca>
    2548:	8e 32       	cpi	r24, 0x2E	; 46
    254a:	21 f4       	brne	.+8      	; 0x2554 <vfprintf+0xbe>
    254c:	26 fd       	sbrc	r18, 6
    254e:	6b c1       	rjmp	.+726    	; 0x2826 <vfprintf+0x390>
    2550:	20 64       	ori	r18, 0x40	; 64
    2552:	06 c0       	rjmp	.+12     	; 0x2560 <vfprintf+0xca>
    2554:	8c 36       	cpi	r24, 0x6C	; 108
    2556:	11 f4       	brne	.+4      	; 0x255c <vfprintf+0xc6>
    2558:	20 68       	ori	r18, 0x80	; 128
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <vfprintf+0xca>
    255c:	88 36       	cpi	r24, 0x68	; 104
    255e:	41 f4       	brne	.+16     	; 0x2570 <vfprintf+0xda>
    2560:	f6 01       	movw	r30, r12
    2562:	93 fd       	sbrc	r25, 3
    2564:	85 91       	lpm	r24, Z+
    2566:	93 ff       	sbrs	r25, 3
    2568:	81 91       	ld	r24, Z+
    256a:	6f 01       	movw	r12, r30
    256c:	81 11       	cpse	r24, r1
    256e:	c1 cf       	rjmp	.-126    	; 0x24f2 <vfprintf+0x5c>
    2570:	98 2f       	mov	r25, r24
    2572:	9f 7d       	andi	r25, 0xDF	; 223
    2574:	95 54       	subi	r25, 0x45	; 69
    2576:	93 30       	cpi	r25, 0x03	; 3
    2578:	28 f4       	brcc	.+10     	; 0x2584 <vfprintf+0xee>
    257a:	0c 5f       	subi	r16, 0xFC	; 252
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	ff e3       	ldi	r31, 0x3F	; 63
    2580:	f9 83       	std	Y+1, r31	; 0x01
    2582:	0d c0       	rjmp	.+26     	; 0x259e <vfprintf+0x108>
    2584:	83 36       	cpi	r24, 0x63	; 99
    2586:	31 f0       	breq	.+12     	; 0x2594 <vfprintf+0xfe>
    2588:	83 37       	cpi	r24, 0x73	; 115
    258a:	71 f0       	breq	.+28     	; 0x25a8 <vfprintf+0x112>
    258c:	83 35       	cpi	r24, 0x53	; 83
    258e:	09 f0       	breq	.+2      	; 0x2592 <vfprintf+0xfc>
    2590:	5b c0       	rjmp	.+182    	; 0x2648 <vfprintf+0x1b2>
    2592:	22 c0       	rjmp	.+68     	; 0x25d8 <vfprintf+0x142>
    2594:	f8 01       	movw	r30, r16
    2596:	80 81       	ld	r24, Z
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	0e 5f       	subi	r16, 0xFE	; 254
    259c:	1f 4f       	sbci	r17, 0xFF	; 255
    259e:	44 24       	eor	r4, r4
    25a0:	43 94       	inc	r4
    25a2:	51 2c       	mov	r5, r1
    25a4:	54 01       	movw	r10, r8
    25a6:	15 c0       	rjmp	.+42     	; 0x25d2 <vfprintf+0x13c>
    25a8:	38 01       	movw	r6, r16
    25aa:	f2 e0       	ldi	r31, 0x02	; 2
    25ac:	6f 0e       	add	r6, r31
    25ae:	71 1c       	adc	r7, r1
    25b0:	f8 01       	movw	r30, r16
    25b2:	a0 80       	ld	r10, Z
    25b4:	b1 80       	ldd	r11, Z+1	; 0x01
    25b6:	26 ff       	sbrs	r18, 6
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <vfprintf+0x12a>
    25ba:	65 2d       	mov	r22, r5
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	02 c0       	rjmp	.+4      	; 0x25c4 <vfprintf+0x12e>
    25c0:	6f ef       	ldi	r22, 0xFF	; 255
    25c2:	7f ef       	ldi	r23, 0xFF	; 255
    25c4:	c5 01       	movw	r24, r10
    25c6:	2c 87       	std	Y+12, r18	; 0x0c
    25c8:	0e 94 2b 14 	call	0x2856	; 0x2856 <strnlen>
    25cc:	2c 01       	movw	r4, r24
    25ce:	83 01       	movw	r16, r6
    25d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    25d2:	2f 77       	andi	r18, 0x7F	; 127
    25d4:	22 2e       	mov	r2, r18
    25d6:	17 c0       	rjmp	.+46     	; 0x2606 <vfprintf+0x170>
    25d8:	38 01       	movw	r6, r16
    25da:	f2 e0       	ldi	r31, 0x02	; 2
    25dc:	6f 0e       	add	r6, r31
    25de:	71 1c       	adc	r7, r1
    25e0:	f8 01       	movw	r30, r16
    25e2:	a0 80       	ld	r10, Z
    25e4:	b1 80       	ldd	r11, Z+1	; 0x01
    25e6:	26 ff       	sbrs	r18, 6
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <vfprintf+0x15a>
    25ea:	65 2d       	mov	r22, r5
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <vfprintf+0x15e>
    25f0:	6f ef       	ldi	r22, 0xFF	; 255
    25f2:	7f ef       	ldi	r23, 0xFF	; 255
    25f4:	c5 01       	movw	r24, r10
    25f6:	2c 87       	std	Y+12, r18	; 0x0c
    25f8:	0e 94 20 14 	call	0x2840	; 0x2840 <strnlen_P>
    25fc:	2c 01       	movw	r4, r24
    25fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2600:	20 68       	ori	r18, 0x80	; 128
    2602:	22 2e       	mov	r2, r18
    2604:	83 01       	movw	r16, r6
    2606:	23 fc       	sbrc	r2, 3
    2608:	1b c0       	rjmp	.+54     	; 0x2640 <vfprintf+0x1aa>
    260a:	83 2d       	mov	r24, r3
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	48 16       	cp	r4, r24
    2610:	59 06       	cpc	r5, r25
    2612:	b0 f4       	brcc	.+44     	; 0x2640 <vfprintf+0x1aa>
    2614:	b7 01       	movw	r22, r14
    2616:	80 e2       	ldi	r24, 0x20	; 32
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	0e 94 36 14 	call	0x286c	; 0x286c <fputc>
    261e:	3a 94       	dec	r3
    2620:	f4 cf       	rjmp	.-24     	; 0x260a <vfprintf+0x174>
    2622:	f5 01       	movw	r30, r10
    2624:	27 fc       	sbrc	r2, 7
    2626:	85 91       	lpm	r24, Z+
    2628:	27 fe       	sbrs	r2, 7
    262a:	81 91       	ld	r24, Z+
    262c:	5f 01       	movw	r10, r30
    262e:	b7 01       	movw	r22, r14
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	0e 94 36 14 	call	0x286c	; 0x286c <fputc>
    2636:	31 10       	cpse	r3, r1
    2638:	3a 94       	dec	r3
    263a:	f1 e0       	ldi	r31, 0x01	; 1
    263c:	4f 1a       	sub	r4, r31
    263e:	51 08       	sbc	r5, r1
    2640:	41 14       	cp	r4, r1
    2642:	51 04       	cpc	r5, r1
    2644:	71 f7       	brne	.-36     	; 0x2622 <vfprintf+0x18c>
    2646:	e5 c0       	rjmp	.+458    	; 0x2812 <vfprintf+0x37c>
    2648:	84 36       	cpi	r24, 0x64	; 100
    264a:	11 f0       	breq	.+4      	; 0x2650 <vfprintf+0x1ba>
    264c:	89 36       	cpi	r24, 0x69	; 105
    264e:	39 f5       	brne	.+78     	; 0x269e <vfprintf+0x208>
    2650:	f8 01       	movw	r30, r16
    2652:	27 ff       	sbrs	r18, 7
    2654:	07 c0       	rjmp	.+14     	; 0x2664 <vfprintf+0x1ce>
    2656:	60 81       	ld	r22, Z
    2658:	71 81       	ldd	r23, Z+1	; 0x01
    265a:	82 81       	ldd	r24, Z+2	; 0x02
    265c:	93 81       	ldd	r25, Z+3	; 0x03
    265e:	0c 5f       	subi	r16, 0xFC	; 252
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	08 c0       	rjmp	.+16     	; 0x2674 <vfprintf+0x1de>
    2664:	60 81       	ld	r22, Z
    2666:	71 81       	ldd	r23, Z+1	; 0x01
    2668:	88 27       	eor	r24, r24
    266a:	77 fd       	sbrc	r23, 7
    266c:	80 95       	com	r24
    266e:	98 2f       	mov	r25, r24
    2670:	0e 5f       	subi	r16, 0xFE	; 254
    2672:	1f 4f       	sbci	r17, 0xFF	; 255
    2674:	2f 76       	andi	r18, 0x6F	; 111
    2676:	b2 2e       	mov	r11, r18
    2678:	97 ff       	sbrs	r25, 7
    267a:	09 c0       	rjmp	.+18     	; 0x268e <vfprintf+0x1f8>
    267c:	90 95       	com	r25
    267e:	80 95       	com	r24
    2680:	70 95       	com	r23
    2682:	61 95       	neg	r22
    2684:	7f 4f       	sbci	r23, 0xFF	; 255
    2686:	8f 4f       	sbci	r24, 0xFF	; 255
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	20 68       	ori	r18, 0x80	; 128
    268c:	b2 2e       	mov	r11, r18
    268e:	2a e0       	ldi	r18, 0x0A	; 10
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	a4 01       	movw	r20, r8
    2694:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__ultoa_invert>
    2698:	a8 2e       	mov	r10, r24
    269a:	a8 18       	sub	r10, r8
    269c:	44 c0       	rjmp	.+136    	; 0x2726 <vfprintf+0x290>
    269e:	85 37       	cpi	r24, 0x75	; 117
    26a0:	29 f4       	brne	.+10     	; 0x26ac <vfprintf+0x216>
    26a2:	2f 7e       	andi	r18, 0xEF	; 239
    26a4:	b2 2e       	mov	r11, r18
    26a6:	2a e0       	ldi	r18, 0x0A	; 10
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	25 c0       	rjmp	.+74     	; 0x26f6 <vfprintf+0x260>
    26ac:	f2 2f       	mov	r31, r18
    26ae:	f9 7f       	andi	r31, 0xF9	; 249
    26b0:	bf 2e       	mov	r11, r31
    26b2:	8f 36       	cpi	r24, 0x6F	; 111
    26b4:	c1 f0       	breq	.+48     	; 0x26e6 <vfprintf+0x250>
    26b6:	18 f4       	brcc	.+6      	; 0x26be <vfprintf+0x228>
    26b8:	88 35       	cpi	r24, 0x58	; 88
    26ba:	79 f0       	breq	.+30     	; 0x26da <vfprintf+0x244>
    26bc:	b4 c0       	rjmp	.+360    	; 0x2826 <vfprintf+0x390>
    26be:	80 37       	cpi	r24, 0x70	; 112
    26c0:	19 f0       	breq	.+6      	; 0x26c8 <vfprintf+0x232>
    26c2:	88 37       	cpi	r24, 0x78	; 120
    26c4:	21 f0       	breq	.+8      	; 0x26ce <vfprintf+0x238>
    26c6:	af c0       	rjmp	.+350    	; 0x2826 <vfprintf+0x390>
    26c8:	2f 2f       	mov	r18, r31
    26ca:	20 61       	ori	r18, 0x10	; 16
    26cc:	b2 2e       	mov	r11, r18
    26ce:	b4 fe       	sbrs	r11, 4
    26d0:	0d c0       	rjmp	.+26     	; 0x26ec <vfprintf+0x256>
    26d2:	8b 2d       	mov	r24, r11
    26d4:	84 60       	ori	r24, 0x04	; 4
    26d6:	b8 2e       	mov	r11, r24
    26d8:	09 c0       	rjmp	.+18     	; 0x26ec <vfprintf+0x256>
    26da:	24 ff       	sbrs	r18, 4
    26dc:	0a c0       	rjmp	.+20     	; 0x26f2 <vfprintf+0x25c>
    26de:	9f 2f       	mov	r25, r31
    26e0:	96 60       	ori	r25, 0x06	; 6
    26e2:	b9 2e       	mov	r11, r25
    26e4:	06 c0       	rjmp	.+12     	; 0x26f2 <vfprintf+0x25c>
    26e6:	28 e0       	ldi	r18, 0x08	; 8
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	05 c0       	rjmp	.+10     	; 0x26f6 <vfprintf+0x260>
    26ec:	20 e1       	ldi	r18, 0x10	; 16
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <vfprintf+0x260>
    26f2:	20 e1       	ldi	r18, 0x10	; 16
    26f4:	32 e0       	ldi	r19, 0x02	; 2
    26f6:	f8 01       	movw	r30, r16
    26f8:	b7 fe       	sbrs	r11, 7
    26fa:	07 c0       	rjmp	.+14     	; 0x270a <vfprintf+0x274>
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	0c 5f       	subi	r16, 0xFC	; 252
    2706:	1f 4f       	sbci	r17, 0xFF	; 255
    2708:	06 c0       	rjmp	.+12     	; 0x2716 <vfprintf+0x280>
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 5f       	subi	r16, 0xFE	; 254
    2714:	1f 4f       	sbci	r17, 0xFF	; 255
    2716:	a4 01       	movw	r20, r8
    2718:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__ultoa_invert>
    271c:	a8 2e       	mov	r10, r24
    271e:	a8 18       	sub	r10, r8
    2720:	fb 2d       	mov	r31, r11
    2722:	ff 77       	andi	r31, 0x7F	; 127
    2724:	bf 2e       	mov	r11, r31
    2726:	b6 fe       	sbrs	r11, 6
    2728:	0b c0       	rjmp	.+22     	; 0x2740 <vfprintf+0x2aa>
    272a:	2b 2d       	mov	r18, r11
    272c:	2e 7f       	andi	r18, 0xFE	; 254
    272e:	a5 14       	cp	r10, r5
    2730:	50 f4       	brcc	.+20     	; 0x2746 <vfprintf+0x2b0>
    2732:	b4 fe       	sbrs	r11, 4
    2734:	0a c0       	rjmp	.+20     	; 0x274a <vfprintf+0x2b4>
    2736:	b2 fc       	sbrc	r11, 2
    2738:	08 c0       	rjmp	.+16     	; 0x274a <vfprintf+0x2b4>
    273a:	2b 2d       	mov	r18, r11
    273c:	2e 7e       	andi	r18, 0xEE	; 238
    273e:	05 c0       	rjmp	.+10     	; 0x274a <vfprintf+0x2b4>
    2740:	7a 2c       	mov	r7, r10
    2742:	2b 2d       	mov	r18, r11
    2744:	03 c0       	rjmp	.+6      	; 0x274c <vfprintf+0x2b6>
    2746:	7a 2c       	mov	r7, r10
    2748:	01 c0       	rjmp	.+2      	; 0x274c <vfprintf+0x2b6>
    274a:	75 2c       	mov	r7, r5
    274c:	24 ff       	sbrs	r18, 4
    274e:	0d c0       	rjmp	.+26     	; 0x276a <vfprintf+0x2d4>
    2750:	fe 01       	movw	r30, r28
    2752:	ea 0d       	add	r30, r10
    2754:	f1 1d       	adc	r31, r1
    2756:	80 81       	ld	r24, Z
    2758:	80 33       	cpi	r24, 0x30	; 48
    275a:	11 f4       	brne	.+4      	; 0x2760 <vfprintf+0x2ca>
    275c:	29 7e       	andi	r18, 0xE9	; 233
    275e:	09 c0       	rjmp	.+18     	; 0x2772 <vfprintf+0x2dc>
    2760:	22 ff       	sbrs	r18, 2
    2762:	06 c0       	rjmp	.+12     	; 0x2770 <vfprintf+0x2da>
    2764:	73 94       	inc	r7
    2766:	73 94       	inc	r7
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <vfprintf+0x2dc>
    276a:	82 2f       	mov	r24, r18
    276c:	86 78       	andi	r24, 0x86	; 134
    276e:	09 f0       	breq	.+2      	; 0x2772 <vfprintf+0x2dc>
    2770:	73 94       	inc	r7
    2772:	23 fd       	sbrc	r18, 3
    2774:	13 c0       	rjmp	.+38     	; 0x279c <vfprintf+0x306>
    2776:	20 ff       	sbrs	r18, 0
    2778:	06 c0       	rjmp	.+12     	; 0x2786 <vfprintf+0x2f0>
    277a:	5a 2c       	mov	r5, r10
    277c:	73 14       	cp	r7, r3
    277e:	18 f4       	brcc	.+6      	; 0x2786 <vfprintf+0x2f0>
    2780:	53 0c       	add	r5, r3
    2782:	57 18       	sub	r5, r7
    2784:	73 2c       	mov	r7, r3
    2786:	73 14       	cp	r7, r3
    2788:	68 f4       	brcc	.+26     	; 0x27a4 <vfprintf+0x30e>
    278a:	b7 01       	movw	r22, r14
    278c:	80 e2       	ldi	r24, 0x20	; 32
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	2c 87       	std	Y+12, r18	; 0x0c
    2792:	0e 94 36 14 	call	0x286c	; 0x286c <fputc>
    2796:	73 94       	inc	r7
    2798:	2c 85       	ldd	r18, Y+12	; 0x0c
    279a:	f5 cf       	rjmp	.-22     	; 0x2786 <vfprintf+0x2f0>
    279c:	73 14       	cp	r7, r3
    279e:	10 f4       	brcc	.+4      	; 0x27a4 <vfprintf+0x30e>
    27a0:	37 18       	sub	r3, r7
    27a2:	01 c0       	rjmp	.+2      	; 0x27a6 <vfprintf+0x310>
    27a4:	31 2c       	mov	r3, r1
    27a6:	24 ff       	sbrs	r18, 4
    27a8:	12 c0       	rjmp	.+36     	; 0x27ce <vfprintf+0x338>
    27aa:	b7 01       	movw	r22, r14
    27ac:	80 e3       	ldi	r24, 0x30	; 48
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	2c 87       	std	Y+12, r18	; 0x0c
    27b2:	0e 94 36 14 	call	0x286c	; 0x286c <fputc>
    27b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    27b8:	22 ff       	sbrs	r18, 2
    27ba:	17 c0       	rjmp	.+46     	; 0x27ea <vfprintf+0x354>
    27bc:	21 ff       	sbrs	r18, 1
    27be:	03 c0       	rjmp	.+6      	; 0x27c6 <vfprintf+0x330>
    27c0:	88 e5       	ldi	r24, 0x58	; 88
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <vfprintf+0x334>
    27c6:	88 e7       	ldi	r24, 0x78	; 120
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	b7 01       	movw	r22, r14
    27cc:	0c c0       	rjmp	.+24     	; 0x27e6 <vfprintf+0x350>
    27ce:	82 2f       	mov	r24, r18
    27d0:	86 78       	andi	r24, 0x86	; 134
    27d2:	59 f0       	breq	.+22     	; 0x27ea <vfprintf+0x354>
    27d4:	21 fd       	sbrc	r18, 1
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <vfprintf+0x346>
    27d8:	80 e2       	ldi	r24, 0x20	; 32
    27da:	01 c0       	rjmp	.+2      	; 0x27de <vfprintf+0x348>
    27dc:	8b e2       	ldi	r24, 0x2B	; 43
    27de:	27 fd       	sbrc	r18, 7
    27e0:	8d e2       	ldi	r24, 0x2D	; 45
    27e2:	b7 01       	movw	r22, r14
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 36 14 	call	0x286c	; 0x286c <fputc>
    27ea:	a5 14       	cp	r10, r5
    27ec:	38 f4       	brcc	.+14     	; 0x27fc <vfprintf+0x366>
    27ee:	b7 01       	movw	r22, r14
    27f0:	80 e3       	ldi	r24, 0x30	; 48
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 36 14 	call	0x286c	; 0x286c <fputc>
    27f8:	5a 94       	dec	r5
    27fa:	f7 cf       	rjmp	.-18     	; 0x27ea <vfprintf+0x354>
    27fc:	aa 94       	dec	r10
    27fe:	f4 01       	movw	r30, r8
    2800:	ea 0d       	add	r30, r10
    2802:	f1 1d       	adc	r31, r1
    2804:	80 81       	ld	r24, Z
    2806:	b7 01       	movw	r22, r14
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 36 14 	call	0x286c	; 0x286c <fputc>
    280e:	a1 10       	cpse	r10, r1
    2810:	f5 cf       	rjmp	.-22     	; 0x27fc <vfprintf+0x366>
    2812:	33 20       	and	r3, r3
    2814:	09 f4       	brne	.+2      	; 0x2818 <vfprintf+0x382>
    2816:	51 ce       	rjmp	.-862    	; 0x24ba <vfprintf+0x24>
    2818:	b7 01       	movw	r22, r14
    281a:	80 e2       	ldi	r24, 0x20	; 32
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	0e 94 36 14 	call	0x286c	; 0x286c <fputc>
    2822:	3a 94       	dec	r3
    2824:	f6 cf       	rjmp	.-20     	; 0x2812 <vfprintf+0x37c>
    2826:	f7 01       	movw	r30, r14
    2828:	86 81       	ldd	r24, Z+6	; 0x06
    282a:	97 81       	ldd	r25, Z+7	; 0x07
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <vfprintf+0x39c>
    282e:	8f ef       	ldi	r24, 0xFF	; 255
    2830:	9f ef       	ldi	r25, 0xFF	; 255
    2832:	2c 96       	adiw	r28, 0x0c	; 12
    2834:	e2 e1       	ldi	r30, 0x12	; 18
    2836:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__epilogue_restores__>

0000283a <__ctype_isfalse>:
    283a:	99 27       	eor	r25, r25
    283c:	88 27       	eor	r24, r24

0000283e <__ctype_istrue>:
    283e:	08 95       	ret

00002840 <strnlen_P>:
    2840:	fc 01       	movw	r30, r24
    2842:	05 90       	lpm	r0, Z+
    2844:	61 50       	subi	r22, 0x01	; 1
    2846:	70 40       	sbci	r23, 0x00	; 0
    2848:	01 10       	cpse	r0, r1
    284a:	d8 f7       	brcc	.-10     	; 0x2842 <strnlen_P+0x2>
    284c:	80 95       	com	r24
    284e:	90 95       	com	r25
    2850:	8e 0f       	add	r24, r30
    2852:	9f 1f       	adc	r25, r31
    2854:	08 95       	ret

00002856 <strnlen>:
    2856:	fc 01       	movw	r30, r24
    2858:	61 50       	subi	r22, 0x01	; 1
    285a:	70 40       	sbci	r23, 0x00	; 0
    285c:	01 90       	ld	r0, Z+
    285e:	01 10       	cpse	r0, r1
    2860:	d8 f7       	brcc	.-10     	; 0x2858 <strnlen+0x2>
    2862:	80 95       	com	r24
    2864:	90 95       	com	r25
    2866:	8e 0f       	add	r24, r30
    2868:	9f 1f       	adc	r25, r31
    286a:	08 95       	ret

0000286c <fputc>:
    286c:	0f 93       	push	r16
    286e:	1f 93       	push	r17
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	18 2f       	mov	r17, r24
    2876:	09 2f       	mov	r16, r25
    2878:	eb 01       	movw	r28, r22
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	81 fd       	sbrc	r24, 1
    287e:	03 c0       	rjmp	.+6      	; 0x2886 <fputc+0x1a>
    2880:	8f ef       	ldi	r24, 0xFF	; 255
    2882:	9f ef       	ldi	r25, 0xFF	; 255
    2884:	20 c0       	rjmp	.+64     	; 0x28c6 <fputc+0x5a>
    2886:	82 ff       	sbrs	r24, 2
    2888:	10 c0       	rjmp	.+32     	; 0x28aa <fputc+0x3e>
    288a:	4e 81       	ldd	r20, Y+6	; 0x06
    288c:	5f 81       	ldd	r21, Y+7	; 0x07
    288e:	2c 81       	ldd	r18, Y+4	; 0x04
    2890:	3d 81       	ldd	r19, Y+5	; 0x05
    2892:	42 17       	cp	r20, r18
    2894:	53 07       	cpc	r21, r19
    2896:	7c f4       	brge	.+30     	; 0x28b6 <fputc+0x4a>
    2898:	e8 81       	ld	r30, Y
    289a:	f9 81       	ldd	r31, Y+1	; 0x01
    289c:	9f 01       	movw	r18, r30
    289e:	2f 5f       	subi	r18, 0xFF	; 255
    28a0:	3f 4f       	sbci	r19, 0xFF	; 255
    28a2:	39 83       	std	Y+1, r19	; 0x01
    28a4:	28 83       	st	Y, r18
    28a6:	10 83       	st	Z, r17
    28a8:	06 c0       	rjmp	.+12     	; 0x28b6 <fputc+0x4a>
    28aa:	e8 85       	ldd	r30, Y+8	; 0x08
    28ac:	f9 85       	ldd	r31, Y+9	; 0x09
    28ae:	81 2f       	mov	r24, r17
    28b0:	09 95       	icall
    28b2:	89 2b       	or	r24, r25
    28b4:	29 f7       	brne	.-54     	; 0x2880 <fputc+0x14>
    28b6:	2e 81       	ldd	r18, Y+6	; 0x06
    28b8:	3f 81       	ldd	r19, Y+7	; 0x07
    28ba:	2f 5f       	subi	r18, 0xFF	; 255
    28bc:	3f 4f       	sbci	r19, 0xFF	; 255
    28be:	3f 83       	std	Y+7, r19	; 0x07
    28c0:	2e 83       	std	Y+6, r18	; 0x06
    28c2:	81 2f       	mov	r24, r17
    28c4:	90 2f       	mov	r25, r16
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	1f 91       	pop	r17
    28cc:	0f 91       	pop	r16
    28ce:	08 95       	ret

000028d0 <__ultoa_invert>:
    28d0:	fa 01       	movw	r30, r20
    28d2:	aa 27       	eor	r26, r26
    28d4:	28 30       	cpi	r18, 0x08	; 8
    28d6:	51 f1       	breq	.+84     	; 0x292c <__ultoa_invert+0x5c>
    28d8:	20 31       	cpi	r18, 0x10	; 16
    28da:	81 f1       	breq	.+96     	; 0x293c <__ultoa_invert+0x6c>
    28dc:	e8 94       	clt
    28de:	6f 93       	push	r22
    28e0:	6e 7f       	andi	r22, 0xFE	; 254
    28e2:	6e 5f       	subi	r22, 0xFE	; 254
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	8f 4f       	sbci	r24, 0xFF	; 255
    28e8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ea:	af 4f       	sbci	r26, 0xFF	; 255
    28ec:	b1 e0       	ldi	r27, 0x01	; 1
    28ee:	3e d0       	rcall	.+124    	; 0x296c <__ultoa_invert+0x9c>
    28f0:	b4 e0       	ldi	r27, 0x04	; 4
    28f2:	3c d0       	rcall	.+120    	; 0x296c <__ultoa_invert+0x9c>
    28f4:	67 0f       	add	r22, r23
    28f6:	78 1f       	adc	r23, r24
    28f8:	89 1f       	adc	r24, r25
    28fa:	9a 1f       	adc	r25, r26
    28fc:	a1 1d       	adc	r26, r1
    28fe:	68 0f       	add	r22, r24
    2900:	79 1f       	adc	r23, r25
    2902:	8a 1f       	adc	r24, r26
    2904:	91 1d       	adc	r25, r1
    2906:	a1 1d       	adc	r26, r1
    2908:	6a 0f       	add	r22, r26
    290a:	71 1d       	adc	r23, r1
    290c:	81 1d       	adc	r24, r1
    290e:	91 1d       	adc	r25, r1
    2910:	a1 1d       	adc	r26, r1
    2912:	20 d0       	rcall	.+64     	; 0x2954 <__ultoa_invert+0x84>
    2914:	09 f4       	brne	.+2      	; 0x2918 <__ultoa_invert+0x48>
    2916:	68 94       	set
    2918:	3f 91       	pop	r19
    291a:	2a e0       	ldi	r18, 0x0A	; 10
    291c:	26 9f       	mul	r18, r22
    291e:	11 24       	eor	r1, r1
    2920:	30 19       	sub	r19, r0
    2922:	30 5d       	subi	r19, 0xD0	; 208
    2924:	31 93       	st	Z+, r19
    2926:	de f6       	brtc	.-74     	; 0x28de <__ultoa_invert+0xe>
    2928:	cf 01       	movw	r24, r30
    292a:	08 95       	ret
    292c:	46 2f       	mov	r20, r22
    292e:	47 70       	andi	r20, 0x07	; 7
    2930:	40 5d       	subi	r20, 0xD0	; 208
    2932:	41 93       	st	Z+, r20
    2934:	b3 e0       	ldi	r27, 0x03	; 3
    2936:	0f d0       	rcall	.+30     	; 0x2956 <__ultoa_invert+0x86>
    2938:	c9 f7       	brne	.-14     	; 0x292c <__ultoa_invert+0x5c>
    293a:	f6 cf       	rjmp	.-20     	; 0x2928 <__ultoa_invert+0x58>
    293c:	46 2f       	mov	r20, r22
    293e:	4f 70       	andi	r20, 0x0F	; 15
    2940:	40 5d       	subi	r20, 0xD0	; 208
    2942:	4a 33       	cpi	r20, 0x3A	; 58
    2944:	18 f0       	brcs	.+6      	; 0x294c <__ultoa_invert+0x7c>
    2946:	49 5d       	subi	r20, 0xD9	; 217
    2948:	31 fd       	sbrc	r19, 1
    294a:	40 52       	subi	r20, 0x20	; 32
    294c:	41 93       	st	Z+, r20
    294e:	02 d0       	rcall	.+4      	; 0x2954 <__ultoa_invert+0x84>
    2950:	a9 f7       	brne	.-22     	; 0x293c <__ultoa_invert+0x6c>
    2952:	ea cf       	rjmp	.-44     	; 0x2928 <__ultoa_invert+0x58>
    2954:	b4 e0       	ldi	r27, 0x04	; 4
    2956:	a6 95       	lsr	r26
    2958:	97 95       	ror	r25
    295a:	87 95       	ror	r24
    295c:	77 95       	ror	r23
    295e:	67 95       	ror	r22
    2960:	ba 95       	dec	r27
    2962:	c9 f7       	brne	.-14     	; 0x2956 <__ultoa_invert+0x86>
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	61 05       	cpc	r22, r1
    2968:	71 05       	cpc	r23, r1
    296a:	08 95       	ret
    296c:	9b 01       	movw	r18, r22
    296e:	ac 01       	movw	r20, r24
    2970:	0a 2e       	mov	r0, r26
    2972:	06 94       	lsr	r0
    2974:	57 95       	ror	r21
    2976:	47 95       	ror	r20
    2978:	37 95       	ror	r19
    297a:	27 95       	ror	r18
    297c:	ba 95       	dec	r27
    297e:	c9 f7       	brne	.-14     	; 0x2972 <__ultoa_invert+0xa2>
    2980:	62 0f       	add	r22, r18
    2982:	73 1f       	adc	r23, r19
    2984:	84 1f       	adc	r24, r20
    2986:	95 1f       	adc	r25, r21
    2988:	a0 1d       	adc	r26, r0
    298a:	08 95       	ret

0000298c <__mulsi3>:
    298c:	db 01       	movw	r26, r22
    298e:	8f 93       	push	r24
    2990:	9f 93       	push	r25
    2992:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__muluhisi3>
    2996:	bf 91       	pop	r27
    2998:	af 91       	pop	r26
    299a:	a2 9f       	mul	r26, r18
    299c:	80 0d       	add	r24, r0
    299e:	91 1d       	adc	r25, r1
    29a0:	a3 9f       	mul	r26, r19
    29a2:	90 0d       	add	r25, r0
    29a4:	b2 9f       	mul	r27, r18
    29a6:	90 0d       	add	r25, r0
    29a8:	11 24       	eor	r1, r1
    29aa:	08 95       	ret

000029ac <__udivmodsi4>:
    29ac:	a1 e2       	ldi	r26, 0x21	; 33
    29ae:	1a 2e       	mov	r1, r26
    29b0:	aa 1b       	sub	r26, r26
    29b2:	bb 1b       	sub	r27, r27
    29b4:	fd 01       	movw	r30, r26
    29b6:	0d c0       	rjmp	.+26     	; 0x29d2 <__udivmodsi4_ep>

000029b8 <__udivmodsi4_loop>:
    29b8:	aa 1f       	adc	r26, r26
    29ba:	bb 1f       	adc	r27, r27
    29bc:	ee 1f       	adc	r30, r30
    29be:	ff 1f       	adc	r31, r31
    29c0:	a2 17       	cp	r26, r18
    29c2:	b3 07       	cpc	r27, r19
    29c4:	e4 07       	cpc	r30, r20
    29c6:	f5 07       	cpc	r31, r21
    29c8:	20 f0       	brcs	.+8      	; 0x29d2 <__udivmodsi4_ep>
    29ca:	a2 1b       	sub	r26, r18
    29cc:	b3 0b       	sbc	r27, r19
    29ce:	e4 0b       	sbc	r30, r20
    29d0:	f5 0b       	sbc	r31, r21

000029d2 <__udivmodsi4_ep>:
    29d2:	66 1f       	adc	r22, r22
    29d4:	77 1f       	adc	r23, r23
    29d6:	88 1f       	adc	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	1a 94       	dec	r1
    29dc:	69 f7       	brne	.-38     	; 0x29b8 <__udivmodsi4_loop>
    29de:	60 95       	com	r22
    29e0:	70 95       	com	r23
    29e2:	80 95       	com	r24
    29e4:	90 95       	com	r25
    29e6:	9b 01       	movw	r18, r22
    29e8:	ac 01       	movw	r20, r24
    29ea:	bd 01       	movw	r22, r26
    29ec:	cf 01       	movw	r24, r30
    29ee:	08 95       	ret

000029f0 <__divmodsi4>:
    29f0:	05 2e       	mov	r0, r21
    29f2:	97 fb       	bst	r25, 7
    29f4:	1e f4       	brtc	.+6      	; 0x29fc <__divmodsi4+0xc>
    29f6:	00 94       	com	r0
    29f8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__negsi2>
    29fc:	57 fd       	sbrc	r21, 7
    29fe:	07 d0       	rcall	.+14     	; 0x2a0e <__divmodsi4_neg2>
    2a00:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__udivmodsi4>
    2a04:	07 fc       	sbrc	r0, 7
    2a06:	03 d0       	rcall	.+6      	; 0x2a0e <__divmodsi4_neg2>
    2a08:	4e f4       	brtc	.+18     	; 0x2a1c <__divmodsi4_exit>
    2a0a:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__negsi2>

00002a0e <__divmodsi4_neg2>:
    2a0e:	50 95       	com	r21
    2a10:	40 95       	com	r20
    2a12:	30 95       	com	r19
    2a14:	21 95       	neg	r18
    2a16:	3f 4f       	sbci	r19, 0xFF	; 255
    2a18:	4f 4f       	sbci	r20, 0xFF	; 255
    2a1a:	5f 4f       	sbci	r21, 0xFF	; 255

00002a1c <__divmodsi4_exit>:
    2a1c:	08 95       	ret

00002a1e <__negsi2>:
    2a1e:	90 95       	com	r25
    2a20:	80 95       	com	r24
    2a22:	70 95       	com	r23
    2a24:	61 95       	neg	r22
    2a26:	7f 4f       	sbci	r23, 0xFF	; 255
    2a28:	8f 4f       	sbci	r24, 0xFF	; 255
    2a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2c:	08 95       	ret

00002a2e <__muluhisi3>:
    2a2e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__umulhisi3>
    2a32:	a5 9f       	mul	r26, r21
    2a34:	90 0d       	add	r25, r0
    2a36:	b4 9f       	mul	r27, r20
    2a38:	90 0d       	add	r25, r0
    2a3a:	a4 9f       	mul	r26, r20
    2a3c:	80 0d       	add	r24, r0
    2a3e:	91 1d       	adc	r25, r1
    2a40:	11 24       	eor	r1, r1
    2a42:	08 95       	ret

00002a44 <__mulshisi3>:
    2a44:	b7 ff       	sbrs	r27, 7
    2a46:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__muluhisi3>

00002a4a <__mulohisi3>:
    2a4a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__muluhisi3>
    2a4e:	82 1b       	sub	r24, r18
    2a50:	93 0b       	sbc	r25, r19
    2a52:	08 95       	ret

00002a54 <__prologue_saves__>:
    2a54:	2f 92       	push	r2
    2a56:	3f 92       	push	r3
    2a58:	4f 92       	push	r4
    2a5a:	5f 92       	push	r5
    2a5c:	6f 92       	push	r6
    2a5e:	7f 92       	push	r7
    2a60:	8f 92       	push	r8
    2a62:	9f 92       	push	r9
    2a64:	af 92       	push	r10
    2a66:	bf 92       	push	r11
    2a68:	cf 92       	push	r12
    2a6a:	df 92       	push	r13
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	ca 1b       	sub	r28, r26
    2a7e:	db 0b       	sbc	r29, r27
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	09 94       	ijmp

00002a8c <__epilogue_restores__>:
    2a8c:	2a 88       	ldd	r2, Y+18	; 0x12
    2a8e:	39 88       	ldd	r3, Y+17	; 0x11
    2a90:	48 88       	ldd	r4, Y+16	; 0x10
    2a92:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a94:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a96:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a98:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a9e:	b9 84       	ldd	r11, Y+9	; 0x09
    2aa0:	c8 84       	ldd	r12, Y+8	; 0x08
    2aa2:	df 80       	ldd	r13, Y+7	; 0x07
    2aa4:	ee 80       	ldd	r14, Y+6	; 0x06
    2aa6:	fd 80       	ldd	r15, Y+5	; 0x05
    2aa8:	0c 81       	ldd	r16, Y+4	; 0x04
    2aaa:	1b 81       	ldd	r17, Y+3	; 0x03
    2aac:	aa 81       	ldd	r26, Y+2	; 0x02
    2aae:	b9 81       	ldd	r27, Y+1	; 0x01
    2ab0:	ce 0f       	add	r28, r30
    2ab2:	d1 1d       	adc	r29, r1
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	ed 01       	movw	r28, r26
    2ac0:	08 95       	ret

00002ac2 <__umulhisi3>:
    2ac2:	a2 9f       	mul	r26, r18
    2ac4:	b0 01       	movw	r22, r0
    2ac6:	b3 9f       	mul	r27, r19
    2ac8:	c0 01       	movw	r24, r0
    2aca:	a3 9f       	mul	r26, r19
    2acc:	70 0d       	add	r23, r0
    2ace:	81 1d       	adc	r24, r1
    2ad0:	11 24       	eor	r1, r1
    2ad2:	91 1d       	adc	r25, r1
    2ad4:	b2 9f       	mul	r27, r18
    2ad6:	70 0d       	add	r23, r0
    2ad8:	81 1d       	adc	r24, r1
    2ada:	11 24       	eor	r1, r1
    2adc:	91 1d       	adc	r25, r1
    2ade:	08 95       	ret

00002ae0 <_exit>:
    2ae0:	f8 94       	cli

00002ae2 <__stop_program>:
    2ae2:	ff cf       	rjmp	.-2      	; 0x2ae2 <__stop_program>
