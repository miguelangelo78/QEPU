
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002df4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002df4  00002e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c0  008000c0  00002ee8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005910  00000000  00000000  000031b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000eef  00000000  00000000  00008ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cba  00000000  00000000  000099b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ae8  00000000  00000000  0000a670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a16  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000306b  00000000  00000000  0000bb6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0000ebd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      54:	db 0a       	sbc	r13, r27
      56:	f6 0a       	sbc	r15, r22
      58:	1e 0c       	add	r1, r14
      5a:	1e 0c       	add	r1, r14
      5c:	1e 0c       	add	r1, r14
      5e:	1e 0c       	add	r1, r14
      60:	1e 0c       	add	r1, r14
      62:	1e 0c       	add	r1, r14
      64:	1e 0c       	add	r1, r14
      66:	fc 0a       	sbc	r15, r28
      68:	1e 0c       	add	r1, r14
      6a:	1e 0c       	add	r1, r14
      6c:	1e 0c       	add	r1, r14
      6e:	02 0b       	sbc	r16, r18
      70:	0a 0b       	sbc	r16, r26
      72:	12 0b       	sbc	r17, r18
      74:	39 0b       	sbc	r19, r25
      76:	60 0b       	sbc	r22, r16
      78:	87 0b       	sbc	r24, r23
      7a:	ae 0b       	sbc	r26, r30
      7c:	d5 0b       	sbc	r29, r21
      7e:	fc 0b       	sbc	r31, r28
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfc>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef512>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates1XEii+0x76>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d6>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef746>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b8>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
      d4:	3f 05       	cpc	r19, r15
      d6:	a8 4c       	sbci	r26, 0xC8	; 200
      d8:	cd b2       	in	r12, 0x1d	; 29
      da:	d4 4e       	sbci	r29, 0xE4	; 228
      dc:	b9 38       	cpi	r27, 0x89	; 137
      de:	36 a9       	ldd	r19, Z+54	; 0x36
      e0:	02 0c       	add	r0, r2
      e2:	50 b9       	out	0x00, r21	; 0
      e4:	91 86       	std	Z+9, r9	; 0x09
      e6:	88 08       	sbc	r8, r8
      e8:	3c a6       	std	Y+44, r3	; 0x2c
      ea:	aa aa       	std	Y+50, r10	; 0x32
      ec:	2a be       	out	0x3a, r2	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 00       	.word	0x003f	; ????

000000f4 <__ctors_start>:
      f4:	0c 09       	sbc	r16, r12

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf e5       	ldi	r28, 0x5F	; 95
      fc:	d4 e0       	ldi	r29, 0x04	; 4
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	10 e0       	ldi	r17, 0x00	; 0
     104:	a0 e6       	ldi	r26, 0x60	; 96
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e4 ef       	ldi	r30, 0xF4	; 244
     10a:	fd e2       	ldi	r31, 0x2D	; 45
     10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
     10e:	05 90       	lpm	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	a0 3c       	cpi	r26, 0xC0	; 192
     114:	b1 07       	cpc	r27, r17
     116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>

00000118 <__do_clear_bss>:
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	a0 ec       	ldi	r26, 0xC0	; 192
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
     120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
     122:	a8 3c       	cpi	r26, 0xC8	; 200
     124:	b2 07       	cpc	r27, r18
     126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>

00000128 <__do_global_ctors>:
     128:	10 e0       	ldi	r17, 0x00	; 0
     12a:	c6 ef       	ldi	r28, 0xF6	; 246
     12c:	d0 e0       	ldi	r29, 0x00	; 0
     12e:	04 c0       	rjmp	.+8      	; 0x138 <__do_global_ctors+0x10>
     130:	22 97       	sbiw	r28, 0x02	; 2
     132:	fe 01       	movw	r30, r28
     134:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__tablejump__>
     138:	c4 3f       	cpi	r28, 0xF4	; 244
     13a:	d1 07       	cpc	r29, r17
     13c:	c9 f7       	brne	.-14     	; 0x130 <__do_global_ctors+0x8>
     13e:	0e 94 11 09 	call	0x1222	; 0x1222 <main>
     142:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	fc 01       	movw	r30, r24
     150:	40 83       	st	Z, r20
     152:	51 83       	std	Z+1, r21	; 0x01
     154:	62 83       	std	Z+2, r22	; 0x02
     156:	73 83       	std	Z+3, r23	; 0x03
     158:	04 83       	std	Z+4, r16	; 0x04
     15a:	15 83       	std	Z+5, r17	; 0x05
     15c:	26 83       	std	Z+6, r18	; 0x06
     15e:	37 83       	std	Z+7, r19	; 0x07
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	08 95       	ret

00000166 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     166:	fc 01       	movw	r30, r24
     168:	10 82       	st	Z, r1
     16a:	11 82       	std	Z+1, r1	; 0x01
     16c:	12 82       	std	Z+2, r1	; 0x02
     16e:	13 82       	std	Z+3, r1	; 0x03
     170:	14 82       	std	Z+4, r1	; 0x04
     172:	15 82       	std	Z+5, r1	; 0x05
     174:	16 82       	std	Z+6, r1	; 0x06
     176:	17 82       	std	Z+7, r1	; 0x07
     178:	08 95       	ret

0000017a <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	68 97       	sbiw	r28, 0x18	; 24
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	5c 01       	movw	r10, r24
     1a0:	09 8b       	std	Y+17, r16	; 0x11
     1a2:	1a 8b       	std	Y+18, r17	; 0x12
     1a4:	2b 8b       	std	Y+19, r18	; 0x13
     1a6:	3c 8b       	std	Y+20, r19	; 0x14
     1a8:	4d 8b       	std	Y+21, r20	; 0x15
     1aa:	5e 8b       	std	Y+22, r21	; 0x16
     1ac:	6f 8b       	std	Y+23, r22	; 0x17
     1ae:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     1b0:	2d 89       	ldd	r18, Y+21	; 0x15
     1b2:	3e 89       	ldd	r19, Y+22	; 0x16
     1b4:	4f 89       	ldd	r20, Y+23	; 0x17
     1b6:	58 8d       	ldd	r21, Y+24	; 0x18
     1b8:	fc 01       	movw	r30, r24
     1ba:	64 81       	ldd	r22, Z+4	; 0x04
     1bc:	75 81       	ldd	r23, Z+5	; 0x05
     1be:	86 81       	ldd	r24, Z+6	; 0x06
     1c0:	97 81       	ldd	r25, Z+7	; 0x07
     1c2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__addsf3>
     1c6:	6b 01       	movw	r12, r22
     1c8:	7c 01       	movw	r14, r24
     1ca:	29 89       	ldd	r18, Y+17	; 0x11
     1cc:	3a 89       	ldd	r19, Y+18	; 0x12
     1ce:	4b 89       	ldd	r20, Y+19	; 0x13
     1d0:	5c 89       	ldd	r21, Y+20	; 0x14
     1d2:	f5 01       	movw	r30, r10
     1d4:	60 81       	ld	r22, Z
     1d6:	71 81       	ldd	r23, Z+1	; 0x01
     1d8:	82 81       	ldd	r24, Z+2	; 0x02
     1da:	93 81       	ldd	r25, Z+3	; 0x03
     1dc:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__addsf3>
     1e0:	ab 01       	movw	r20, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	97 01       	movw	r18, r14
     1e6:	86 01       	movw	r16, r12
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     1f0:	88 e0       	ldi	r24, 0x08	; 8
     1f2:	fe 01       	movw	r30, r28
     1f4:	31 96       	adiw	r30, 0x01	; 1
     1f6:	de 01       	movw	r26, r28
     1f8:	19 96       	adiw	r26, 0x09	; 9
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	8a 95       	dec	r24
     200:	e1 f7       	brne	.-8      	; 0x1fa <_ZN7Complex3addES_+0x80>
     202:	29 85       	ldd	r18, Y+9	; 0x09
     204:	3a 85       	ldd	r19, Y+10	; 0x0a
     206:	4b 85       	ldd	r20, Y+11	; 0x0b
     208:	5c 85       	ldd	r21, Y+12	; 0x0c
     20a:	6d 85       	ldd	r22, Y+13	; 0x0d
     20c:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     20e:	8f 85       	ldd	r24, Y+15	; 0x0f
     210:	98 89       	ldd	r25, Y+16	; 0x10
     212:	68 96       	adiw	r28, 0x18	; 24
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	08 95       	ret

00000234 <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     234:	4f 92       	push	r4
     236:	5f 92       	push	r5
     238:	6f 92       	push	r6
     23a:	7f 92       	push	r7
     23c:	8f 92       	push	r8
     23e:	9f 92       	push	r9
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	a0 97       	sbiw	r28, 0x20	; 32
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	09 8b       	std	Y+17, r16	; 0x11
     266:	1a 8b       	std	Y+18, r17	; 0x12
     268:	2b 8b       	std	Y+19, r18	; 0x13
     26a:	3c 8b       	std	Y+20, r19	; 0x14
     26c:	4d 8b       	std	Y+21, r20	; 0x15
     26e:	5e 8b       	std	Y+22, r21	; 0x16
     270:	6f 8b       	std	Y+23, r22	; 0x17
     272:	78 8f       	std	Y+24, r23	; 0x18
     274:	89 88       	ldd	r8, Y+17	; 0x11
     276:	9a 88       	ldd	r9, Y+18	; 0x12
     278:	ab 88       	ldd	r10, Y+19	; 0x13
     27a:	bc 88       	ldd	r11, Y+20	; 0x14
     27c:	2d 89       	ldd	r18, Y+21	; 0x15
     27e:	3e 89       	ldd	r19, Y+22	; 0x16
     280:	4f 89       	ldd	r20, Y+23	; 0x17
     282:	58 8d       	ldd	r21, Y+24	; 0x18
     284:	2d 8f       	std	Y+29, r18	; 0x1d
     286:	3e 8f       	std	Y+30, r19	; 0x1e
     288:	4f 8f       	std	Y+31, r20	; 0x1f
     28a:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     28c:	fc 01       	movw	r30, r24
     28e:	c0 80       	ld	r12, Z
     290:	d1 80       	ldd	r13, Z+1	; 0x01
     292:	e2 80       	ldd	r14, Z+2	; 0x02
     294:	f3 80       	ldd	r15, Z+3	; 0x03
     296:	24 81       	ldd	r18, Z+4	; 0x04
     298:	35 81       	ldd	r19, Z+5	; 0x05
     29a:	46 81       	ldd	r20, Z+6	; 0x06
     29c:	57 81       	ldd	r21, Z+7	; 0x07
     29e:	29 8f       	std	Y+25, r18	; 0x19
     2a0:	3a 8f       	std	Y+26, r19	; 0x1a
     2a2:	4b 8f       	std	Y+27, r20	; 0x1b
     2a4:	5c 8f       	std	Y+28, r21	; 0x1c
     2a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2aa:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2ac:	58 a1       	ldd	r21, Y+32	; 0x20
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     2b6:	2b 01       	movw	r4, r22
     2b8:	3c 01       	movw	r6, r24
     2ba:	a5 01       	movw	r20, r10
     2bc:	94 01       	movw	r18, r8
     2be:	69 8d       	ldd	r22, Y+25	; 0x19
     2c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2c6:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     2ca:	9b 01       	movw	r18, r22
     2cc:	ac 01       	movw	r20, r24
     2ce:	c3 01       	movw	r24, r6
     2d0:	b2 01       	movw	r22, r4
     2d2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__addsf3>
     2d6:	2b 01       	movw	r4, r22
     2d8:	3c 01       	movw	r6, r24
     2da:	a5 01       	movw	r20, r10
     2dc:	94 01       	movw	r18, r8
     2de:	c7 01       	movw	r24, r14
     2e0:	b6 01       	movw	r22, r12
     2e2:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     2e6:	6b 01       	movw	r12, r22
     2e8:	7c 01       	movw	r14, r24
     2ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2ee:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2f0:	58 a1       	ldd	r21, Y+32	; 0x20
     2f2:	69 8d       	ldd	r22, Y+25	; 0x19
     2f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2fa:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	c7 01       	movw	r24, r14
     304:	b6 01       	movw	r22, r12
     306:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__subsf3>
     30a:	ab 01       	movw	r20, r22
     30c:	bc 01       	movw	r22, r24
     30e:	93 01       	movw	r18, r6
     310:	82 01       	movw	r16, r4
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	de 01       	movw	r26, r28
     322:	19 96       	adiw	r26, 0x09	; 9
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <_ZN7Complex3mulES_+0xf0>
     32c:	29 85       	ldd	r18, Y+9	; 0x09
     32e:	3a 85       	ldd	r19, Y+10	; 0x0a
     330:	4b 85       	ldd	r20, Y+11	; 0x0b
     332:	5c 85       	ldd	r21, Y+12	; 0x0c
     334:	6d 85       	ldd	r22, Y+13	; 0x0d
     336:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     338:	8f 85       	ldd	r24, Y+15	; 0x0f
     33a:	98 89       	ldd	r25, Y+16	; 0x10
     33c:	a0 96       	adiw	r28, 0x20	; 32
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	08 95       	ret

0000036a <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     36a:	fc 01       	movw	r30, r24
     36c:	20 81       	ld	r18, Z
     36e:	31 81       	ldd	r19, Z+1	; 0x01
     370:	42 81       	ldd	r20, Z+2	; 0x02
     372:	53 81       	ldd	r21, Z+3	; 0x03
     374:	64 81       	ldd	r22, Z+4	; 0x04
     376:	75 81       	ldd	r23, Z+5	; 0x05
     378:	86 81       	ldd	r24, Z+6	; 0x06
     37a:	97 81       	ldd	r25, Z+7	; 0x07
     37c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__divsf3>
     380:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <atan>
     384:	08 95       	ret

00000386 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     386:	85 e0       	ldi	r24, 0x05	; 5
     388:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     38a:	81 b1       	in	r24, 0x01	; 1
     38c:	8c 7f       	andi	r24, 0xFC	; 252
     38e:	81 b9       	out	0x01, r24	; 1
     390:	08 95       	ret

00000392 <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     392:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     394:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     396:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     398:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     39a:	06 b6       	in	r0, 0x36	; 54
     39c:	07 fe       	sbrs	r0, 7
     39e:	fd cf       	rjmp	.-6      	; 0x39a <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     3a0:	81 b1       	in	r24, 0x01	; 1
     3a2:	88 7f       	andi	r24, 0xF8	; 248
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	09 f0       	breq	.+2      	; 0x3aa <_ZN6EEProm4readEj+0x18>
     3a8:	41 c0       	rjmp	.+130    	; 0x42c <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     3aa:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     3ac:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     3ae:	06 b6       	in	r0, 0x36	; 54
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     3b4:	81 b1       	in	r24, 0x01	; 1
     3b6:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     3b8:	88 31       	cpi	r24, 0x18	; 24
     3ba:	71 f7       	brne	.-36     	; 0x398 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     3bc:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3be:	84 e8       	ldi	r24, 0x84	; 132
     3c0:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3c2:	06 b6       	in	r0, 0x36	; 54
     3c4:	07 fe       	sbrs	r0, 7
     3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3c8:	81 b1       	in	r24, 0x01	; 1
     3ca:	88 7f       	andi	r24, 0xF8	; 248
     3cc:	88 32       	cpi	r24, 0x28	; 40
     3ce:	81 f5       	brne	.+96     	; 0x430 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     3d0:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3d2:	84 e8       	ldi	r24, 0x84	; 132
     3d4:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3d6:	06 b6       	in	r0, 0x36	; 54
     3d8:	07 fe       	sbrs	r0, 7
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3dc:	81 b1       	in	r24, 0x01	; 1
     3de:	88 7f       	andi	r24, 0xF8	; 248
     3e0:	88 32       	cpi	r24, 0x28	; 40
     3e2:	41 f5       	brne	.+80     	; 0x434 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3e4:	84 ea       	ldi	r24, 0xA4	; 164
     3e6:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3e8:	06 b6       	in	r0, 0x36	; 54
     3ea:	07 fe       	sbrs	r0, 7
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     3ee:	81 b1       	in	r24, 0x01	; 1
     3f0:	88 7f       	andi	r24, 0xF8	; 248
     3f2:	80 31       	cpi	r24, 0x10	; 16
     3f4:	09 f5       	brne	.+66     	; 0x438 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     3f6:	81 ea       	ldi	r24, 0xA1	; 161
     3f8:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3fa:	84 e8       	ldi	r24, 0x84	; 132
     3fc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3fe:	06 b6       	in	r0, 0x36	; 54
     400:	07 fe       	sbrs	r0, 7
     402:	fd cf       	rjmp	.-6      	; 0x3fe <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     404:	81 b1       	in	r24, 0x01	; 1
     406:	88 7f       	andi	r24, 0xF8	; 248
     408:	80 34       	cpi	r24, 0x40	; 64
     40a:	c1 f4       	brne	.+48     	; 0x43c <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     40c:	84 e8       	ldi	r24, 0x84	; 132
     40e:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     410:	06 b6       	in	r0, 0x36	; 54
     412:	07 fe       	sbrs	r0, 7
     414:	fd cf       	rjmp	.-6      	; 0x410 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     416:	81 b1       	in	r24, 0x01	; 1
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	88 35       	cpi	r24, 0x58	; 88
     41c:	89 f4       	brne	.+34     	; 0x440 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     41e:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     420:	94 e9       	ldi	r25, 0x94	; 148
     422:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     424:	06 b6       	in	r0, 0x36	; 54
     426:	04 fc       	sbrc	r0, 4
     428:	fd cf       	rjmp	.-6      	; 0x424 <_ZN6EEProm4readEj+0x92>
     42a:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     440:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     442:	08 95       	ret

00000444 <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	c4 56       	subi	r28, 0x64	; 100
     45a:	d1 09       	sbc	r29, r1
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	6c 01       	movw	r12, r24
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     472:	b8 01       	movw	r22, r16
     474:	c6 01       	movw	r24, r12
     476:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN6EEProm4readEj>
     47a:	f7 01       	movw	r30, r14
     47c:	81 93       	st	Z+, r24
     47e:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     480:	8f 3f       	cpi	r24, 0xFF	; 255
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	32 97       	sbiw	r30, 0x02	; 2
     486:	20 81       	ld	r18, Z
     488:	2f 3f       	cpi	r18, 0xFF	; 255
     48a:	61 f4       	brne	.+24     	; 0x4a4 <__stack+0x45>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	20 81       	ld	r18, Z
     490:	2f 3f       	cpi	r18, 0xFF	; 255
     492:	41 f4       	brne	.+16     	; 0x4a4 <__stack+0x45>
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	20 81       	ld	r18, Z
     498:	2f 3f       	cpi	r18, 0xFF	; 255
     49a:	21 f4       	brne	.+8      	; 0x4a4 <__stack+0x45>
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	8f 3f       	cpi	r24, 0xFF	; 255
     4a2:	19 f0       	breq	.+6      	; 0x4aa <__stack+0x4b>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4a4:	0f 5f       	subi	r16, 0xFF	; 255
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     4a8:	e4 cf       	rjmp	.-56     	; 0x472 <__stack+0x13>
	return eeprom_mem;
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	cc 59       	subi	r28, 0x9C	; 156
     4b0:	df 4f       	sbci	r29, 0xFF	; 255
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret

000004ce <_ZN5Gates10setup_seedEv>:
Gates::Gates(){setup_seed();}

Serial s;
QEPU::Utils u;

void Gates::setup_seed(){
     4ce:	cf 93       	push	r28
	unsigned char oldADMUX = ADMUX;
     4d0:	c7 b1       	in	r28, 0x07	; 7
	ADMUX |=  _BV(MUX0); //choose ADC1 on PB2
     4d2:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA |= _BV(ADPS2) |_BV(ADPS1) |_BV(ADPS0); //set prescaler to max value, 128
     4d4:	86 b1       	in	r24, 0x06	; 6
     4d6:	87 60       	ori	r24, 0x07	; 7
     4d8:	86 b9       	out	0x06, r24	; 6

	ADCSRA |= _BV(ADEN); //enable the ADC
     4da:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= _BV(ADSC);//start conversion
     4dc:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & _BV(ADSC)); //wait until the hardware clears the flag. Note semicolon!
     4de:	36 99       	sbic	0x06, 6	; 6
     4e0:	fe cf       	rjmp	.-4      	; 0x4de <_ZN5Gates10setup_seedEv+0x10>

	unsigned char byte1 = ADCL;
     4e2:	24 b1       	in	r18, 0x04	; 4

	ADCSRA |= _BV(ADSC);//start conversion
     4e4:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & _BV(ADSC)); //wait again note semicolon!
     4e6:	36 99       	sbic	0x06, 6	; 6
     4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <_ZN5Gates10setup_seedEv+0x18>

	unsigned char byte2 = ADCL;
     4ea:	84 b1       	in	r24, 0x04	; 4

	unsigned int seed = byte1 << 8 | byte2;
     4ec:	90 e0       	ldi	r25, 0x00	; 0

	srand(seed);
     4ee:	92 2b       	or	r25, r18
     4f0:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <srand>

	ADCSRA &= ~_BV(ADEN); //disable ADC
     4f4:	37 98       	cbi	0x06, 7	; 6

	ADMUX = oldADMUX;
     4f6:	c7 b9       	out	0x07, r28	; 7
}
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <_ZN5GatesC1Ev>:
#include "gates.h"
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
Gates::Gates(){setup_seed();}
     4fc:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN5Gates10setup_seedEv>
     500:	08 95       	ret

00000502 <_Z12print_statesiP7ComplexPc>:

Complex * kronecker(int qb_count,Complex * vec[3]){
	
}

void print_states(int qb_count,Complex * vec,char* message){
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	7c 01       	movw	r14, r24
     510:	06 2f       	mov	r16, r22
     512:	17 2f       	mov	r17, r23
	s.writestrln(message);
     514:	ba 01       	movw	r22, r20
     516:	81 ec       	ldi	r24, 0xC1	; 193
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count*2;i++){
     51e:	ee 0c       	add	r14, r14
     520:	ff 1c       	adc	r15, r15
     522:	1e 14       	cp	r1, r14
     524:	1f 04       	cpc	r1, r15
     526:	0c f0       	brlt	.+2      	; 0x52a <_Z12print_statesiP7ComplexPc+0x28>
     528:	47 c0       	rjmp	.+142    	; 0x5b8 <_Z12print_statesiP7ComplexPc+0xb6>
     52a:	c0 2f       	mov	r28, r16
     52c:	d1 2f       	mov	r29, r17
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
     532:	6a e6       	ldi	r22, 0x6A	; 106
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	81 ec       	ldi	r24, 0xC1	; 193
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6Serial8writestrEPc>
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	4a e7       	ldi	r20, 0x7A	; 122
     544:	54 e4       	ldi	r21, 0x44	; 68
     546:	68 81       	ld	r22, Y
     548:	79 81       	ldd	r23, Y+1	; 0x01
     54a:	8a 81       	ldd	r24, Y+2	; 0x02
     54c:	9b 81       	ldd	r25, Y+3	; 0x03
     54e:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     552:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fixsfsi>
     556:	80 ec       	ldi	r24, 0xC0	; 192
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN4QEPU5Utils7int2strEi>
     55e:	bc 01       	movw	r22, r24
     560:	81 ec       	ldi	r24, 0xC1	; 193
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
     568:	6e e6       	ldi	r22, 0x6E	; 110
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	81 ec       	ldi	r24, 0xC1	; 193
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6Serial8writestrEPc>
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	4a e7       	ldi	r20, 0x7A	; 122
     57a:	54 e4       	ldi	r21, 0x44	; 68
     57c:	6c 81       	ldd	r22, Y+4	; 0x04
     57e:	7d 81       	ldd	r23, Y+5	; 0x05
     580:	8e 81       	ldd	r24, Y+6	; 0x06
     582:	9f 81       	ldd	r25, Y+7	; 0x07
     584:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     588:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fixsfsi>
     58c:	80 ec       	ldi	r24, 0xC0	; 192
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN4QEPU5Utils7int2strEi>
     594:	bc 01       	movw	r22, r24
     596:	81 ec       	ldi	r24, 0xC1	; 193
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     59e:	6f ea       	ldi	r22, 0xAF	; 175
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	81 ec       	ldi	r24, 0xC1	; 193
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <_ZN6Serial10writestrlnEPc>
	
}

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count*2;i++){
     5aa:	0f 5f       	subi	r16, 0xFF	; 255
     5ac:	1f 4f       	sbci	r17, 0xFF	; 255
     5ae:	28 96       	adiw	r28, 0x08	; 8
     5b0:	0e 15       	cp	r16, r14
     5b2:	1f 05       	cpc	r17, r15
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <_Z12print_statesiP7ComplexPc+0xb6>
     5b6:	bd cf       	rjmp	.-134    	; 0x532 <_Z12print_statesiP7ComplexPc+0x30>
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	08 95       	ret

000005c6 <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     5c6:	2f 92       	push	r2
     5c8:	3f 92       	push	r3
     5ca:	4f 92       	push	r4
     5cc:	5f 92       	push	r5
     5ce:	6f 92       	push	r6
     5d0:	7f 92       	push	r7
     5d2:	8f 92       	push	r8
     5d4:	9f 92       	push	r9
     5d6:	af 92       	push	r10
     5d8:	bf 92       	push	r11
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <_ZN5Gates8ampl2vecEiPiS0_+0x26>
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <_ZN5Gates8ampl2vecEiPiS0_+0x28>
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <_ZN5Gates8ampl2vecEiPiS0_+0x2a>
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	7a 83       	std	Y+2, r23	; 0x02
     5f6:	69 83       	std	Y+1, r22	; 0x01
     5f8:	04 2f       	mov	r16, r20
     5fa:	15 2f       	mov	r17, r21
     5fc:	c2 2e       	mov	r12, r18
     5fe:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     600:	cb 01       	movw	r24, r22
     602:	82 95       	swap	r24
     604:	92 95       	swap	r25
     606:	90 7f       	andi	r25, 0xF0	; 240
     608:	98 27       	eor	r25, r24
     60a:	80 7f       	andi	r24, 0xF0	; 240
     60c:	98 27       	eor	r25, r24
     60e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <malloc>
     612:	8b 83       	std	Y+3, r24	; 0x03
     614:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     616:	29 80       	ldd	r2, Y+1	; 0x01
     618:	3a 80       	ldd	r3, Y+2	; 0x02
     61a:	22 0c       	add	r2, r2
     61c:	33 1c       	adc	r3, r3
     61e:	12 14       	cp	r1, r2
     620:	13 04       	cpc	r1, r3
     622:	0c f0       	brlt	.+2      	; 0x626 <_ZN5Gates8ampl2vecEiPiS0_+0x60>
     624:	aa c0       	rjmp	.+340    	; 0x77a <_ZN5Gates8ampl2vecEiPiS0_+0x1b4>
     626:	8d 83       	std	Y+5, r24	; 0x05
     628:	9e 83       	std	Y+6, r25	; 0x06
     62a:	e0 2e       	mov	r14, r16
     62c:	f1 2e       	mov	r15, r17
     62e:	0c 2d       	mov	r16, r12
     630:	1d 2d       	mov	r17, r13
     632:	c1 2c       	mov	r12, r1
     634:	d1 2c       	mov	r13, r1
     636:	57 01       	movw	r10, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     638:	f7 01       	movw	r30, r14
     63a:	41 90       	ld	r4, Z+
     63c:	51 90       	ld	r5, Z+
     63e:	7f 01       	movw	r14, r30
     640:	66 24       	eor	r6, r6
     642:	57 fc       	sbrc	r5, 7
     644:	60 94       	com	r6
     646:	76 2c       	mov	r7, r6
     648:	c3 01       	movw	r24, r6
     64a:	b2 01       	movw	r22, r4
     64c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__floatsisf>
     650:	2b ed       	ldi	r18, 0xDB	; 219
     652:	3f e0       	ldi	r19, 0x0F	; 15
     654:	49 e4       	ldi	r20, 0x49	; 73
     656:	50 e4       	ldi	r21, 0x40	; 64
     658:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	44 eb       	ldi	r20, 0xB4	; 180
     662:	53 e4       	ldi	r21, 0x43	; 67
     664:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__divsf3>
     668:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <cos>
     66c:	ed 81       	ldd	r30, Y+5	; 0x05
     66e:	fe 81       	ldd	r31, Y+6	; 0x06
     670:	60 83       	st	Z, r22
     672:	71 83       	std	Z+1, r23	; 0x01
     674:	82 83       	std	Z+2, r24	; 0x02
     676:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     678:	c3 01       	movw	r24, r6
     67a:	b2 01       	movw	r22, r4
     67c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__floatsisf>
     680:	2b ed       	ldi	r18, 0xDB	; 219
     682:	3f e0       	ldi	r19, 0x0F	; 15
     684:	49 e4       	ldi	r20, 0x49	; 73
     686:	50 e4       	ldi	r21, 0x40	; 64
     688:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	44 eb       	ldi	r20, 0xB4	; 180
     692:	53 e4       	ldi	r21, 0x43	; 67
     694:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__divsf3>
     698:	0e 94 79 10 	call	0x20f2	; 0x20f2 <sin>
     69c:	2b 01       	movw	r4, r22
     69e:	3c 01       	movw	r6, r24
     6a0:	48 01       	movw	r8, r16
     6a2:	f8 01       	movw	r30, r16
     6a4:	61 91       	ld	r22, Z+
     6a6:	71 91       	ld	r23, Z+
     6a8:	8f 01       	movw	r16, r30
     6aa:	88 27       	eor	r24, r24
     6ac:	77 fd       	sbrc	r23, 7
     6ae:	80 95       	com	r24
     6b0:	98 2f       	mov	r25, r24
     6b2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__floatsisf>
     6b6:	2b ed       	ldi	r18, 0xDB	; 219
     6b8:	3f e0       	ldi	r19, 0x0F	; 15
     6ba:	49 e4       	ldi	r20, 0x49	; 73
     6bc:	50 e4       	ldi	r21, 0x40	; 64
     6be:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	44 e3       	ldi	r20, 0x34	; 52
     6c8:	53 e4       	ldi	r21, 0x43	; 67
     6ca:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__divsf3>
     6ce:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <cos>
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	c3 01       	movw	r24, r6
     6d8:	b2 01       	movw	r22, r4
     6da:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     6de:	ed 81       	ldd	r30, Y+5	; 0x05
     6e0:	fe 81       	ldd	r31, Y+6	; 0x06
     6e2:	60 87       	std	Z+8, r22	; 0x08
     6e4:	71 87       	std	Z+9, r23	; 0x09
     6e6:	82 87       	std	Z+10, r24	; 0x0a
     6e8:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     6ea:	f5 01       	movw	r30, r10
     6ec:	60 81       	ld	r22, Z
     6ee:	71 81       	ldd	r23, Z+1	; 0x01
     6f0:	88 27       	eor	r24, r24
     6f2:	77 fd       	sbrc	r23, 7
     6f4:	80 95       	com	r24
     6f6:	98 2f       	mov	r25, r24
     6f8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__floatsisf>
     6fc:	2b ed       	ldi	r18, 0xDB	; 219
     6fe:	3f e0       	ldi	r19, 0x0F	; 15
     700:	49 e4       	ldi	r20, 0x49	; 73
     702:	50 e4       	ldi	r21, 0x40	; 64
     704:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	44 eb       	ldi	r20, 0xB4	; 180
     70e:	53 e4       	ldi	r21, 0x43	; 67
     710:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__divsf3>
     714:	0e 94 79 10 	call	0x20f2	; 0x20f2 <sin>
     718:	2b 01       	movw	r4, r22
     71a:	3c 01       	movw	r6, r24
     71c:	f4 01       	movw	r30, r8
     71e:	60 81       	ld	r22, Z
     720:	71 81       	ldd	r23, Z+1	; 0x01
     722:	88 27       	eor	r24, r24
     724:	77 fd       	sbrc	r23, 7
     726:	80 95       	com	r24
     728:	98 2f       	mov	r25, r24
     72a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__floatsisf>
     72e:	2b ed       	ldi	r18, 0xDB	; 219
     730:	3f e0       	ldi	r19, 0x0F	; 15
     732:	49 e4       	ldi	r20, 0x49	; 73
     734:	50 e4       	ldi	r21, 0x40	; 64
     736:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	44 e3       	ldi	r20, 0x34	; 52
     740:	53 e4       	ldi	r21, 0x43	; 67
     742:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__divsf3>
     746:	0e 94 79 10 	call	0x20f2	; 0x20f2 <sin>
     74a:	9b 01       	movw	r18, r22
     74c:	ac 01       	movw	r20, r24
     74e:	c3 01       	movw	r24, r6
     750:	b2 01       	movw	r22, r4
     752:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     756:	ed 81       	ldd	r30, Y+5	; 0x05
     758:	fe 81       	ldd	r31, Y+6	; 0x06
     75a:	64 87       	std	Z+12, r22	; 0x0c
     75c:	75 87       	std	Z+13, r23	; 0x0d
     75e:	86 87       	std	Z+14, r24	; 0x0e
     760:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     762:	f2 e0       	ldi	r31, 0x02	; 2
     764:	cf 0e       	add	r12, r31
     766:	d1 1c       	adc	r13, r1
     768:	8d 81       	ldd	r24, Y+5	; 0x05
     76a:	9e 81       	ldd	r25, Y+6	; 0x06
     76c:	40 96       	adiw	r24, 0x10	; 16
     76e:	9e 83       	std	Y+6, r25	; 0x06
     770:	8d 83       	std	Y+5, r24	; 0x05
     772:	c2 14       	cp	r12, r2
     774:	d3 04       	cpc	r13, r3
     776:	0c f4       	brge	.+2      	; 0x77a <_ZN5Gates8ampl2vecEiPiS0_+0x1b4>
     778:	5e cf       	rjmp	.-324    	; 0x636 <_ZN5Gates8ampl2vecEiPiS0_+0x70>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
		
	print_states(qb_count,vec,"Before: ");
     77a:	45 e7       	ldi	r20, 0x75	; 117
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	6b 81       	ldd	r22, Y+3	; 0x03
     780:	7c 81       	ldd	r23, Y+4	; 0x04
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	9a 81       	ldd	r25, Y+2	; 0x02
     786:	0e 94 81 02 	call	0x502	; 0x502 <_Z12print_statesiP7ComplexPc>

	return vec;
}
     78a:	8b 81       	ldd	r24, Y+3	; 0x03
     78c:	9c 81       	ldd	r25, Y+4	; 0x04
     78e:	26 96       	adiw	r28, 0x06	; 6
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	cf 90       	pop	r12
     7aa:	bf 90       	pop	r11
     7ac:	af 90       	pop	r10
     7ae:	9f 90       	pop	r9
     7b0:	8f 90       	pop	r8
     7b2:	7f 90       	pop	r7
     7b4:	6f 90       	pop	r6
     7b6:	5f 90       	pop	r5
     7b8:	4f 90       	pop	r4
     7ba:	3f 90       	pop	r3
     7bc:	2f 90       	pop	r2
     7be:	08 95       	ret

000007c0 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	8b 01       	movw	r16, r22
     7ce:	7a 01       	movw	r14, r20
	int* newthephi=(int*)malloc(sizeof(int)*2);
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <malloc>
     7d8:	ec 01       	movw	r28, r24
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
     7da:	f8 01       	movw	r30, r16
     7dc:	60 81       	ld	r22, Z
     7de:	71 81       	ldd	r23, Z+1	; 0x01
     7e0:	82 81       	ldd	r24, Z+2	; 0x02
     7e2:	93 81       	ldd	r25, Z+3	; 0x03
     7e4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <acos>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	44 eb       	ldi	r20, 0xB4	; 180
     7ee:	53 e4       	ldi	r21, 0x43	; 67
     7f0:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     7f4:	2b ed       	ldi	r18, 0xDB	; 219
     7f6:	3f e0       	ldi	r19, 0x0F	; 15
     7f8:	49 e4       	ldi	r20, 0x49	; 73
     7fa:	50 e4       	ldi	r21, 0x40	; 64
     7fc:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__divsf3>
     800:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fixsfsi>
     804:	79 83       	std	Y+1, r23	; 0x01
     806:	68 83       	st	Y, r22
	newthephi[1]=(180*vec[1].arg())/M_PI;
     808:	c8 01       	movw	r24, r16
     80a:	08 96       	adiw	r24, 0x08	; 8
     80c:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN7Complex3argEv>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	44 e3       	ldi	r20, 0x34	; 52
     816:	53 e4       	ldi	r21, 0x43	; 67
     818:	0e 94 16 10 	call	0x202c	; 0x202c <__mulsf3>
     81c:	2b ed       	ldi	r18, 0xDB	; 219
     81e:	3f e0       	ldi	r19, 0x0F	; 15
     820:	49 e4       	ldi	r20, 0x49	; 73
     822:	50 e4       	ldi	r21, 0x40	; 64
     824:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__divsf3>
     828:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__fixsfsi>
     82c:	7b 83       	std	Y+3, r23	; 0x03
     82e:	6a 83       	std	Y+2, r22	; 0x02
	
	
	print_states(qb_count,vec,"After: ");
     830:	4e e7       	ldi	r20, 0x7E	; 126
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	b8 01       	movw	r22, r16
     836:	c7 01       	movw	r24, r14
     838:	0e 94 81 02 	call	0x502	; 0x502 <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     83c:	ce 01       	movw	r24, r28
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	08 95       	ret

0000084c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     84c:	2f 92       	push	r2
     84e:	3f 92       	push	r3
     850:	4f 92       	push	r4
     852:	5f 92       	push	r5
     854:	6f 92       	push	r6
     856:	7f 92       	push	r7
     858:	8f 92       	push	r8
     85a:	9f 92       	push	r9
     85c:	af 92       	push	r10
     85e:	bf 92       	push	r11
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	60 97       	sbiw	r28, 0x10	; 16
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	4b 01       	movw	r8, r22
     882:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     884:	80 e1       	ldi	r24, 0x10	; 16
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <malloc>
     88c:	38 2e       	mov	r3, r24
     88e:	29 2e       	mov	r2, r25
     890:	c8 2e       	mov	r12, r24
     892:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     894:	a1 2c       	mov	r10, r1
     896:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     898:	24 01       	movw	r4, r8
     89a:	88 e0       	ldi	r24, 0x08	; 8
     89c:	48 0e       	add	r4, r24
     89e:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     8a0:	ce 01       	movw	r24, r28
     8a2:	09 96       	adiw	r24, 0x09	; 9
     8a4:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     8a8:	75 01       	movw	r14, r10
     8aa:	ee 0c       	add	r14, r14
     8ac:	ff 1c       	adc	r15, r15
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	ee 0c       	add	r14, r14
     8b4:	ff 1c       	adc	r15, r15
     8b6:	e6 0c       	add	r14, r6
     8b8:	f7 1c       	adc	r15, r7
     8ba:	d7 01       	movw	r26, r14
     8bc:	0c 91       	ld	r16, X
     8be:	11 96       	adiw	r26, 0x01	; 1
     8c0:	1c 91       	ld	r17, X
     8c2:	11 97       	sbiw	r26, 0x01	; 1
     8c4:	12 96       	adiw	r26, 0x02	; 2
     8c6:	2c 91       	ld	r18, X
     8c8:	12 97       	sbiw	r26, 0x02	; 2
     8ca:	13 96       	adiw	r26, 0x03	; 3
     8cc:	3c 91       	ld	r19, X
     8ce:	13 97       	sbiw	r26, 0x03	; 3
     8d0:	14 96       	adiw	r26, 0x04	; 4
     8d2:	4c 91       	ld	r20, X
     8d4:	14 97       	sbiw	r26, 0x04	; 4
     8d6:	15 96       	adiw	r26, 0x05	; 5
     8d8:	5c 91       	ld	r21, X
     8da:	15 97       	sbiw	r26, 0x05	; 5
     8dc:	16 96       	adiw	r26, 0x06	; 6
     8de:	6c 91       	ld	r22, X
     8e0:	16 97       	sbiw	r26, 0x06	; 6
     8e2:	17 96       	adiw	r26, 0x07	; 7
     8e4:	7c 91       	ld	r23, X
     8e6:	c4 01       	movw	r24, r8
     8e8:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     8ec:	02 2f       	mov	r16, r18
     8ee:	13 2f       	mov	r17, r19
     8f0:	24 2f       	mov	r18, r20
     8f2:	35 2f       	mov	r19, r21
     8f4:	46 2f       	mov	r20, r22
     8f6:	57 2f       	mov	r21, r23
     8f8:	68 2f       	mov	r22, r24
     8fa:	79 2f       	mov	r23, r25
     8fc:	ce 01       	movw	r24, r28
     8fe:	09 96       	adiw	r24, 0x09	; 9
     900:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     904:	29 87       	std	Y+9, r18	; 0x09
     906:	3a 87       	std	Y+10, r19	; 0x0a
     908:	4b 87       	std	Y+11, r20	; 0x0b
     90a:	5c 87       	std	Y+12, r21	; 0x0c
     90c:	6d 87       	std	Y+13, r22	; 0x0d
     90e:	7e 87       	std	Y+14, r23	; 0x0e
     910:	8f 87       	std	Y+15, r24	; 0x0f
     912:	98 8b       	std	Y+16, r25	; 0x10
     914:	f7 01       	movw	r30, r14
     916:	70 96       	adiw	r30, 0x10	; 16
     918:	d7 01       	movw	r26, r14
     91a:	50 96       	adiw	r26, 0x10	; 16
     91c:	0c 91       	ld	r16, X
     91e:	11 81       	ldd	r17, Z+1	; 0x01
     920:	22 81       	ldd	r18, Z+2	; 0x02
     922:	33 81       	ldd	r19, Z+3	; 0x03
     924:	44 81       	ldd	r20, Z+4	; 0x04
     926:	55 81       	ldd	r21, Z+5	; 0x05
     928:	66 81       	ldd	r22, Z+6	; 0x06
     92a:	77 81       	ldd	r23, Z+7	; 0x07
     92c:	c2 01       	movw	r24, r4
     92e:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     932:	02 2f       	mov	r16, r18
     934:	13 2f       	mov	r17, r19
     936:	24 2f       	mov	r18, r20
     938:	35 2f       	mov	r19, r21
     93a:	46 2f       	mov	r20, r22
     93c:	57 2f       	mov	r21, r23
     93e:	68 2f       	mov	r22, r24
     940:	79 2f       	mov	r23, r25
     942:	ce 01       	movw	r24, r28
     944:	09 96       	adiw	r24, 0x09	; 9
     946:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     94a:	29 87       	std	Y+9, r18	; 0x09
     94c:	3a 87       	std	Y+10, r19	; 0x0a
     94e:	4b 87       	std	Y+11, r20	; 0x0b
     950:	5c 87       	std	Y+12, r21	; 0x0c
     952:	6d 87       	std	Y+13, r22	; 0x0d
     954:	7e 87       	std	Y+14, r23	; 0x0e
     956:	8f 87       	std	Y+15, r24	; 0x0f
     958:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     95a:	89 85       	ldd	r24, Y+9	; 0x09
     95c:	9a 85       	ldd	r25, Y+10	; 0x0a
     95e:	ab 85       	ldd	r26, Y+11	; 0x0b
     960:	bc 85       	ldd	r27, Y+12	; 0x0c
     962:	f6 01       	movw	r30, r12
     964:	80 83       	st	Z, r24
     966:	91 83       	std	Z+1, r25	; 0x01
     968:	a2 83       	std	Z+2, r26	; 0x02
     96a:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     96c:	8d 85       	ldd	r24, Y+13	; 0x0d
     96e:	9e 85       	ldd	r25, Y+14	; 0x0e
     970:	af 85       	ldd	r26, Y+15	; 0x0f
     972:	b8 89       	ldd	r27, Y+16	; 0x10
     974:	84 83       	std	Z+4, r24	; 0x04
     976:	95 83       	std	Z+5, r25	; 0x05
     978:	a6 83       	std	Z+6, r26	; 0x06
     97a:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     97c:	ff ef       	ldi	r31, 0xFF	; 255
     97e:	af 1a       	sub	r10, r31
     980:	bf 0a       	sbc	r11, r31
     982:	88 e0       	ldi	r24, 0x08	; 8
     984:	c8 0e       	add	r12, r24
     986:	d1 1c       	adc	r13, r1
     988:	a2 e0       	ldi	r26, 0x02	; 2
     98a:	aa 16       	cp	r10, r26
     98c:	b1 04       	cpc	r11, r1
     98e:	09 f0       	breq	.+2      	; 0x992 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     990:	87 cf       	rjmp	.-242    	; 0x8a0 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     992:	83 2d       	mov	r24, r3
     994:	92 2d       	mov	r25, r2
     996:	60 96       	adiw	r28, 0x10	; 16
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	af 90       	pop	r10
     9b6:	9f 90       	pop	r9
     9b8:	8f 90       	pop	r8
     9ba:	7f 90       	pop	r7
     9bc:	6f 90       	pop	r6
     9be:	5f 90       	pop	r5
     9c0:	4f 90       	pop	r4
     9c2:	3f 90       	pop	r3
     9c4:	2f 90       	pop	r2
     9c6:	08 95       	ret

000009c8 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     9c8:	2f 92       	push	r2
     9ca:	3f 92       	push	r3
     9cc:	4f 92       	push	r4
     9ce:	5f 92       	push	r5
     9d0:	6f 92       	push	r6
     9d2:	7f 92       	push	r7
     9d4:	8f 92       	push	r8
     9d6:	9f 92       	push	r9
     9d8:	af 92       	push	r10
     9da:	bf 92       	push	r11
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	64 97       	sbiw	r28, 0x14	; 20
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	3b 01       	movw	r6, r22
     9fe:	e4 2e       	mov	r14, r20
     a00:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     a02:	80 e2       	ldi	r24, 0x20	; 32
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <malloc>
     a0a:	8b 8b       	std	Y+19, r24	; 0x13
     a0c:	9c 8b       	std	Y+20, r25	; 0x14
     a0e:	48 2e       	mov	r4, r24
     a10:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     a12:	81 2c       	mov	r8, r1
     a14:	91 2c       	mov	r9, r1
     a16:	e9 8a       	std	Y+17, r14	; 0x11
     a18:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     a1a:	21 2c       	mov	r2, r1
     a1c:	31 2c       	mov	r3, r1
     a1e:	ce 01       	movw	r24, r28
     a20:	09 96       	adiw	r24, 0x09	; 9
     a22:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
     a26:	c9 88       	ldd	r12, Y+17	; 0x11
     a28:	da 88       	ldd	r13, Y+18	; 0x12
     a2a:	e2 2c       	mov	r14, r2
     a2c:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     a2e:	54 01       	movw	r10, r8
     a30:	aa 0c       	add	r10, r10
     a32:	bb 1c       	adc	r11, r11
     a34:	aa 0c       	add	r10, r10
     a36:	bb 1c       	adc	r11, r11
     a38:	aa 0c       	add	r10, r10
     a3a:	bb 1c       	adc	r11, r11
     a3c:	f5 01       	movw	r30, r10
     a3e:	ec 0d       	add	r30, r12
     a40:	fd 1d       	adc	r31, r13
     a42:	00 81       	ld	r16, Z
     a44:	11 81       	ldd	r17, Z+1	; 0x01
     a46:	22 81       	ldd	r18, Z+2	; 0x02
     a48:	33 81       	ldd	r19, Z+3	; 0x03
     a4a:	44 81       	ldd	r20, Z+4	; 0x04
     a4c:	55 81       	ldd	r21, Z+5	; 0x05
     a4e:	66 81       	ldd	r22, Z+6	; 0x06
     a50:	77 81       	ldd	r23, Z+7	; 0x07
     a52:	c3 01       	movw	r24, r6
     a54:	8e 0d       	add	r24, r14
     a56:	9f 1d       	adc	r25, r15
     a58:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     a5c:	29 83       	std	Y+1, r18	; 0x01
     a5e:	3a 83       	std	Y+2, r19	; 0x02
     a60:	4b 83       	std	Y+3, r20	; 0x03
     a62:	5c 83       	std	Y+4, r21	; 0x04
     a64:	6d 83       	std	Y+5, r22	; 0x05
     a66:	7e 83       	std	Y+6, r23	; 0x06
     a68:	8f 83       	std	Y+7, r24	; 0x07
     a6a:	98 87       	std	Y+8, r25	; 0x08
     a6c:	02 2f       	mov	r16, r18
     a6e:	13 2f       	mov	r17, r19
     a70:	24 2f       	mov	r18, r20
     a72:	35 2f       	mov	r19, r21
     a74:	46 2f       	mov	r20, r22
     a76:	57 2f       	mov	r21, r23
     a78:	68 2f       	mov	r22, r24
     a7a:	79 2f       	mov	r23, r25
     a7c:	ce 01       	movw	r24, r28
     a7e:	09 96       	adiw	r24, 0x09	; 9
     a80:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     a84:	29 87       	std	Y+9, r18	; 0x09
     a86:	3a 87       	std	Y+10, r19	; 0x0a
     a88:	4b 87       	std	Y+11, r20	; 0x0b
     a8a:	5c 87       	std	Y+12, r21	; 0x0c
     a8c:	6d 87       	std	Y+13, r22	; 0x0d
     a8e:	7e 87       	std	Y+14, r23	; 0x0e
     a90:	8f 87       	std	Y+15, r24	; 0x0f
     a92:	98 8b       	std	Y+16, r25	; 0x10
     a94:	88 e0       	ldi	r24, 0x08	; 8
     a96:	e8 0e       	add	r14, r24
     a98:	f1 1c       	adc	r15, r1
     a9a:	e0 e2       	ldi	r30, 0x20	; 32
     a9c:	ce 0e       	add	r12, r30
     a9e:	d1 1c       	adc	r13, r1
     aa0:	f0 e2       	ldi	r31, 0x20	; 32
     aa2:	ef 16       	cp	r14, r31
     aa4:	f1 04       	cpc	r15, r1
     aa6:	51 f6       	brne	.-108    	; 0xa3c <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
     aa8:	89 85       	ldd	r24, Y+9	; 0x09
     aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     aac:	ab 85       	ldd	r26, Y+11	; 0x0b
     aae:	bc 85       	ldd	r27, Y+12	; 0x0c
     ab0:	f2 01       	movw	r30, r4
     ab2:	80 83       	st	Z, r24
     ab4:	91 83       	std	Z+1, r25	; 0x01
     ab6:	a2 83       	std	Z+2, r26	; 0x02
     ab8:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     aba:	8d 85       	ldd	r24, Y+13	; 0x0d
     abc:	9e 85       	ldd	r25, Y+14	; 0x0e
     abe:	af 85       	ldd	r26, Y+15	; 0x0f
     ac0:	b8 89       	ldd	r27, Y+16	; 0x10
     ac2:	84 83       	std	Z+4, r24	; 0x04
     ac4:	95 83       	std	Z+5, r25	; 0x05
     ac6:	a6 83       	std	Z+6, r26	; 0x06
     ac8:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     aca:	ff ef       	ldi	r31, 0xFF	; 255
     acc:	8f 1a       	sub	r8, r31
     ace:	9f 0a       	sbc	r9, r31
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	48 0e       	add	r4, r24
     ad4:	51 1c       	adc	r5, r1
     ad6:	e4 e0       	ldi	r30, 0x04	; 4
     ad8:	8e 16       	cp	r8, r30
     ada:	91 04       	cpc	r9, r1
     adc:	09 f0       	breq	.+2      	; 0xae0 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
     ade:	9f cf       	rjmp	.-194    	; 0xa1e <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     ae0:	8b 89       	ldd	r24, Y+19	; 0x13
     ae2:	9c 89       	ldd	r25, Y+20	; 0x14
     ae4:	64 96       	adiw	r28, 0x14	; 20
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	8f 90       	pop	r8
     b08:	7f 90       	pop	r7
     b0a:	6f 90       	pop	r6
     b0c:	5f 90       	pop	r5
     b0e:	4f 90       	pop	r4
     b10:	3f 90       	pop	r3
     b12:	2f 90       	pop	r2
     b14:	08 95       	ret

00000b16 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
     b16:	af 92       	push	r10
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	a4 97       	sbiw	r28, 0x24	; 36
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	7c 01       	movw	r14, r24
     b3c:	5b 01       	movw	r10, r22
     b3e:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
     b40:	00 e0       	ldi	r16, 0x00	; 0
     b42:	10 e0       	ldi	r17, 0x00	; 0
     b44:	98 01       	movw	r18, r16
     b46:	b9 01       	movw	r22, r18
     b48:	a8 01       	movw	r20, r16
     b4a:	ce 01       	movw	r24, r28
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     b52:	00 e0       	ldi	r16, 0x00	; 0
     b54:	10 e0       	ldi	r17, 0x00	; 0
     b56:	98 01       	movw	r18, r16
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	60 e8       	ldi	r22, 0x80	; 128
     b5e:	7f e3       	ldi	r23, 0x3F	; 63
     b60:	ce 01       	movw	r24, r28
     b62:	09 96       	adiw	r24, 0x09	; 9
     b64:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     b68:	00 e0       	ldi	r16, 0x00	; 0
     b6a:	10 e0       	ldi	r17, 0x00	; 0
     b6c:	98 01       	movw	r18, r16
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	60 e8       	ldi	r22, 0x80	; 128
     b74:	7f e3       	ldi	r23, 0x3F	; 63
     b76:	ce 01       	movw	r24, r28
     b78:	41 96       	adiw	r24, 0x11	; 17
     b7a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     b7e:	00 e0       	ldi	r16, 0x00	; 0
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	98 01       	movw	r18, r16
     b84:	b9 01       	movw	r22, r18
     b86:	a8 01       	movw	r20, r16
     b88:	ce 01       	movw	r24, r28
     b8a:	49 96       	adiw	r24, 0x19	; 25
     b8c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     b90:	bc a2       	std	Y+36, r11	; 0x24
     b92:	ab a2       	std	Y+35, r10	; 0x23
     b94:	da a2       	std	Y+34, r13	; 0x22
     b96:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix),1);
     b98:	9e 01       	movw	r18, r28
     b9a:	2f 5d       	subi	r18, 0xDF	; 223
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	ae 01       	movw	r20, r28
     ba0:	4d 5d       	subi	r20, 0xDD	; 221
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	c7 01       	movw	r24, r14
     baa:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN5Gates8ampl2vecEiPiS0_>
     bae:	ae 01       	movw	r20, r28
     bb0:	4f 5f       	subi	r20, 0xFF	; 255
     bb2:	5f 4f       	sbci	r21, 0xFF	; 255
     bb4:	bc 01       	movw	r22, r24
     bb6:	c7 01       	movw	r24, r14
     bb8:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     bbc:	41 e0       	ldi	r20, 0x01	; 1
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	bc 01       	movw	r22, r24
     bc2:	c7 01       	movw	r24, r14
     bc4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN5Gates8vec2amplEP7Complexi>
}
     bc8:	a4 96       	adiw	r28, 0x24	; 36
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	08 95       	ret

00000bea <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
     bea:	af 92       	push	r10
     bec:	bf 92       	push	r11
     bee:	cf 92       	push	r12
     bf0:	df 92       	push	r13
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	a4 97       	sbiw	r28, 0x24	; 36
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	7c 01       	movw	r14, r24
     c10:	5b 01       	movw	r10, r22
     c12:	6a 01       	movw	r12, r20
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
     c14:	00 e0       	ldi	r16, 0x00	; 0
     c16:	10 e0       	ldi	r17, 0x00	; 0
     c18:	98 01       	movw	r18, r16
     c1a:	b9 01       	movw	r22, r18
     c1c:	a8 01       	movw	r20, r16
     c1e:	ce 01       	movw	r24, r28
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     c26:	00 e0       	ldi	r16, 0x00	; 0
     c28:	10 e0       	ldi	r17, 0x00	; 0
     c2a:	20 e8       	ldi	r18, 0x80	; 128
     c2c:	3f eb       	ldi	r19, 0xBF	; 191
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	ba 01       	movw	r22, r20
     c34:	ce 01       	movw	r24, r28
     c36:	09 96       	adiw	r24, 0x09	; 9
     c38:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     c3c:	00 e0       	ldi	r16, 0x00	; 0
     c3e:	10 e0       	ldi	r17, 0x00	; 0
     c40:	20 e8       	ldi	r18, 0x80	; 128
     c42:	3f e3       	ldi	r19, 0x3F	; 63
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	ba 01       	movw	r22, r20
     c4a:	ce 01       	movw	r24, r28
     c4c:	41 96       	adiw	r24, 0x11	; 17
     c4e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     c52:	00 e0       	ldi	r16, 0x00	; 0
     c54:	10 e0       	ldi	r17, 0x00	; 0
     c56:	98 01       	movw	r18, r16
     c58:	b9 01       	movw	r22, r18
     c5a:	a8 01       	movw	r20, r16
     c5c:	ce 01       	movw	r24, r28
     c5e:	49 96       	adiw	r24, 0x19	; 25
     c60:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     c64:	bc a2       	std	Y+36, r11	; 0x24
     c66:	ab a2       	std	Y+35, r10	; 0x23
     c68:	da a2       	std	Y+34, r13	; 0x22
     c6a:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),y_matrix),1);
     c6c:	9e 01       	movw	r18, r28
     c6e:	2f 5d       	subi	r18, 0xDF	; 223
     c70:	3f 4f       	sbci	r19, 0xFF	; 255
     c72:	ae 01       	movw	r20, r28
     c74:	4d 5d       	subi	r20, 0xDD	; 221
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	c7 01       	movw	r24, r14
     c7e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN5Gates8ampl2vecEiPiS0_>
     c82:	ae 01       	movw	r20, r28
     c84:	4f 5f       	subi	r20, 0xFF	; 255
     c86:	5f 4f       	sbci	r21, 0xFF	; 255
     c88:	bc 01       	movw	r22, r24
     c8a:	c7 01       	movw	r24, r14
     c8c:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     c90:	41 e0       	ldi	r20, 0x01	; 1
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	bc 01       	movw	r22, r24
     c96:	c7 01       	movw	r24, r14
     c98:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN5Gates8vec2amplEP7Complexi>
}
     c9c:	a4 96       	adiw	r28, 0x24	; 36
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	08 95       	ret

00000cbe <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	a4 97       	sbiw	r28, 0x24	; 36
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	7c 01       	movw	r14, r24
     ce4:	5b 01       	movw	r10, r22
     ce6:	6a 01       	movw	r12, r20
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
     ce8:	00 e0       	ldi	r16, 0x00	; 0
     cea:	10 e0       	ldi	r17, 0x00	; 0
     cec:	98 01       	movw	r18, r16
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	60 e8       	ldi	r22, 0x80	; 128
     cf4:	7f e3       	ldi	r23, 0x3F	; 63
     cf6:	ce 01       	movw	r24, r28
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     cfe:	00 e0       	ldi	r16, 0x00	; 0
     d00:	10 e0       	ldi	r17, 0x00	; 0
     d02:	98 01       	movw	r18, r16
     d04:	b9 01       	movw	r22, r18
     d06:	a8 01       	movw	r20, r16
     d08:	ce 01       	movw	r24, r28
     d0a:	09 96       	adiw	r24, 0x09	; 9
     d0c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d10:	00 e0       	ldi	r16, 0x00	; 0
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	98 01       	movw	r18, r16
     d16:	b9 01       	movw	r22, r18
     d18:	a8 01       	movw	r20, r16
     d1a:	ce 01       	movw	r24, r28
     d1c:	41 96       	adiw	r24, 0x11	; 17
     d1e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d22:	00 e0       	ldi	r16, 0x00	; 0
     d24:	10 e0       	ldi	r17, 0x00	; 0
     d26:	98 01       	movw	r18, r16
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	60 e8       	ldi	r22, 0x80	; 128
     d2e:	7f eb       	ldi	r23, 0xBF	; 191
     d30:	ce 01       	movw	r24, r28
     d32:	49 96       	adiw	r24, 0x19	; 25
     d34:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     d38:	bc a2       	std	Y+36, r11	; 0x24
     d3a:	ab a2       	std	Y+35, r10	; 0x23
     d3c:	da a2       	std	Y+34, r13	; 0x22
     d3e:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),z_matrix),1);
     d40:	9e 01       	movw	r18, r28
     d42:	2f 5d       	subi	r18, 0xDF	; 223
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	ae 01       	movw	r20, r28
     d48:	4d 5d       	subi	r20, 0xDD	; 221
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	c7 01       	movw	r24, r14
     d52:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN5Gates8ampl2vecEiPiS0_>
     d56:	ae 01       	movw	r20, r28
     d58:	4f 5f       	subi	r20, 0xFF	; 255
     d5a:	5f 4f       	sbci	r21, 0xFF	; 255
     d5c:	bc 01       	movw	r22, r24
     d5e:	c7 01       	movw	r24, r14
     d60:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	bc 01       	movw	r22, r24
     d6a:	c7 01       	movw	r24, r14
     d6c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN5Gates8vec2amplEP7Complexi>
}
     d70:	a4 96       	adiw	r28, 0x24	; 36
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	bf 90       	pop	r11
     d8e:	af 90       	pop	r10
     d90:	08 95       	ret

00000d92 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
     d92:	af 92       	push	r10
     d94:	bf 92       	push	r11
     d96:	cf 92       	push	r12
     d98:	df 92       	push	r13
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	a4 97       	sbiw	r28, 0x24	; 36
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	7c 01       	movw	r14, r24
     db8:	5b 01       	movw	r10, r22
     dba:	6a 01       	movw	r12, r20
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
     dbc:	00 e0       	ldi	r16, 0x00	; 0
     dbe:	10 e0       	ldi	r17, 0x00	; 0
     dc0:	98 01       	movw	r18, r16
     dc2:	43 ef       	ldi	r20, 0xF3	; 243
     dc4:	54 e0       	ldi	r21, 0x04	; 4
     dc6:	65 e3       	ldi	r22, 0x35	; 53
     dc8:	7f e3       	ldi	r23, 0x3F	; 63
     dca:	ce 01       	movw	r24, r28
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     dd2:	00 e0       	ldi	r16, 0x00	; 0
     dd4:	10 e0       	ldi	r17, 0x00	; 0
     dd6:	98 01       	movw	r18, r16
     dd8:	43 ef       	ldi	r20, 0xF3	; 243
     dda:	54 e0       	ldi	r21, 0x04	; 4
     ddc:	65 e3       	ldi	r22, 0x35	; 53
     dde:	7f e3       	ldi	r23, 0x3F	; 63
     de0:	ce 01       	movw	r24, r28
     de2:	09 96       	adiw	r24, 0x09	; 9
     de4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     de8:	00 e0       	ldi	r16, 0x00	; 0
     dea:	10 e0       	ldi	r17, 0x00	; 0
     dec:	98 01       	movw	r18, r16
     dee:	43 ef       	ldi	r20, 0xF3	; 243
     df0:	54 e0       	ldi	r21, 0x04	; 4
     df2:	65 e3       	ldi	r22, 0x35	; 53
     df4:	7f e3       	ldi	r23, 0x3F	; 63
     df6:	ce 01       	movw	r24, r28
     df8:	41 96       	adiw	r24, 0x11	; 17
     dfa:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     dfe:	00 e0       	ldi	r16, 0x00	; 0
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	98 01       	movw	r18, r16
     e04:	43 ef       	ldi	r20, 0xF3	; 243
     e06:	54 e0       	ldi	r21, 0x04	; 4
     e08:	65 e3       	ldi	r22, 0x35	; 53
     e0a:	7f eb       	ldi	r23, 0xBF	; 191
     e0c:	ce 01       	movw	r24, r28
     e0e:	49 96       	adiw	r24, 0x19	; 25
     e10:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     e14:	bc a2       	std	Y+36, r11	; 0x24
     e16:	ab a2       	std	Y+35, r10	; 0x23
     e18:	da a2       	std	Y+34, r13	; 0x22
     e1a:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),h_matrix),1);
     e1c:	9e 01       	movw	r18, r28
     e1e:	2f 5d       	subi	r18, 0xDF	; 223
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	ae 01       	movw	r20, r28
     e24:	4d 5d       	subi	r20, 0xDD	; 221
     e26:	5f 4f       	sbci	r21, 0xFF	; 255
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	c7 01       	movw	r24, r14
     e2e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN5Gates8ampl2vecEiPiS0_>
     e32:	ae 01       	movw	r20, r28
     e34:	4f 5f       	subi	r20, 0xFF	; 255
     e36:	5f 4f       	sbci	r21, 0xFF	; 255
     e38:	bc 01       	movw	r22, r24
     e3a:	c7 01       	movw	r24, r14
     e3c:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	bc 01       	movw	r22, r24
     e46:	c7 01       	movw	r24, r14
     e48:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN5Gates8vec2amplEP7Complexi>
}
     e4c:	a4 96       	adiw	r28, 0x24	; 36
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	cf 90       	pop	r12
     e68:	bf 90       	pop	r11
     e6a:	af 90       	pop	r10
     e6c:	08 95       	ret

00000e6e <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
     e6e:	af 92       	push	r10
     e70:	bf 92       	push	r11
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	a4 97       	sbiw	r28, 0x24	; 36
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	7c 01       	movw	r14, r24
     e94:	5b 01       	movw	r10, r22
     e96:	6a 01       	movw	r12, r20
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	98 01       	movw	r18, r16
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	60 e8       	ldi	r22, 0x80	; 128
     ea4:	7f e3       	ldi	r23, 0x3F	; 63
     ea6:	ce 01       	movw	r24, r28
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     eae:	00 e0       	ldi	r16, 0x00	; 0
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	98 01       	movw	r18, r16
     eb4:	b9 01       	movw	r22, r18
     eb6:	a8 01       	movw	r20, r16
     eb8:	ce 01       	movw	r24, r28
     eba:	09 96       	adiw	r24, 0x09	; 9
     ebc:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     ec0:	00 e0       	ldi	r16, 0x00	; 0
     ec2:	10 e0       	ldi	r17, 0x00	; 0
     ec4:	98 01       	movw	r18, r16
     ec6:	b9 01       	movw	r22, r18
     ec8:	a8 01       	movw	r20, r16
     eca:	ce 01       	movw	r24, r28
     ecc:	41 96       	adiw	r24, 0x11	; 17
     ece:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     ed2:	00 e0       	ldi	r16, 0x00	; 0
     ed4:	10 e0       	ldi	r17, 0x00	; 0
     ed6:	20 e8       	ldi	r18, 0x80	; 128
     ed8:	3f e3       	ldi	r19, 0x3F	; 63
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	ba 01       	movw	r22, r20
     ee0:	ce 01       	movw	r24, r28
     ee2:	49 96       	adiw	r24, 0x19	; 25
     ee4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     ee8:	bc a2       	std	Y+36, r11	; 0x24
     eea:	ab a2       	std	Y+35, r10	; 0x23
     eec:	da a2       	std	Y+34, r13	; 0x22
     eee:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),s_matrix),1);
     ef0:	9e 01       	movw	r18, r28
     ef2:	2f 5d       	subi	r18, 0xDF	; 223
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	ae 01       	movw	r20, r28
     ef8:	4d 5d       	subi	r20, 0xDD	; 221
     efa:	5f 4f       	sbci	r21, 0xFF	; 255
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	c7 01       	movw	r24, r14
     f02:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN5Gates8ampl2vecEiPiS0_>
     f06:	ae 01       	movw	r20, r28
     f08:	4f 5f       	subi	r20, 0xFF	; 255
     f0a:	5f 4f       	sbci	r21, 0xFF	; 255
     f0c:	bc 01       	movw	r22, r24
     f0e:	c7 01       	movw	r24, r14
     f10:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     f14:	41 e0       	ldi	r20, 0x01	; 1
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	bc 01       	movw	r22, r24
     f1a:	c7 01       	movw	r24, r14
     f1c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN5Gates8vec2amplEP7Complexi>
}
     f20:	a4 96       	adiw	r28, 0x24	; 36
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	08 95       	ret

00000f42 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	a4 97       	sbiw	r28, 0x24	; 36
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	7c 01       	movw	r14, r24
     f68:	5b 01       	movw	r10, r22
     f6a:	6a 01       	movw	r12, r20
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
     f6c:	00 e0       	ldi	r16, 0x00	; 0
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	98 01       	movw	r18, r16
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	60 e8       	ldi	r22, 0x80	; 128
     f78:	7f e3       	ldi	r23, 0x3F	; 63
     f7a:	ce 01       	movw	r24, r28
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f82:	00 e0       	ldi	r16, 0x00	; 0
     f84:	10 e0       	ldi	r17, 0x00	; 0
     f86:	98 01       	movw	r18, r16
     f88:	b9 01       	movw	r22, r18
     f8a:	a8 01       	movw	r20, r16
     f8c:	ce 01       	movw	r24, r28
     f8e:	09 96       	adiw	r24, 0x09	; 9
     f90:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f94:	00 e0       	ldi	r16, 0x00	; 0
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	98 01       	movw	r18, r16
     f9a:	b9 01       	movw	r22, r18
     f9c:	a8 01       	movw	r20, r16
     f9e:	ce 01       	movw	r24, r28
     fa0:	41 96       	adiw	r24, 0x11	; 17
     fa2:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fa6:	03 ef       	ldi	r16, 0xF3	; 243
     fa8:	14 e0       	ldi	r17, 0x04	; 4
     faa:	25 e3       	ldi	r18, 0x35	; 53
     fac:	3f e3       	ldi	r19, 0x3F	; 63
     fae:	b9 01       	movw	r22, r18
     fb0:	a8 01       	movw	r20, r16
     fb2:	ce 01       	movw	r24, r28
     fb4:	49 96       	adiw	r24, 0x19	; 25
     fb6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     fba:	bc a2       	std	Y+36, r11	; 0x24
     fbc:	ab a2       	std	Y+35, r10	; 0x23
     fbe:	da a2       	std	Y+34, r13	; 0x22
     fc0:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),t_matrix),1);
     fc2:	9e 01       	movw	r18, r28
     fc4:	2f 5d       	subi	r18, 0xDF	; 223
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	ae 01       	movw	r20, r28
     fca:	4d 5d       	subi	r20, 0xDD	; 221
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	c7 01       	movw	r24, r14
     fd4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN5Gates8ampl2vecEiPiS0_>
     fd8:	ae 01       	movw	r20, r28
     fda:	4f 5f       	subi	r20, 0xFF	; 255
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	bc 01       	movw	r22, r24
     fe0:	c7 01       	movw	r24, r14
     fe2:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	bc 01       	movw	r22, r24
     fec:	c7 01       	movw	r24, r14
     fee:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN5Gates8vec2amplEP7Complexi>
}
     ff2:	a4 96       	adiw	r28, 0x24	; 36
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	df 90       	pop	r13
    100c:	cf 90       	pop	r12
    100e:	bf 90       	pop	r11
    1010:	af 90       	pop	r10
    1012:	08 95       	ret

00001014 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    1014:	6f 92       	push	r6
    1016:	7f 92       	push	r7
    1018:	8f 92       	push	r8
    101a:	9f 92       	push	r9
    101c:	af 92       	push	r10
    101e:	bf 92       	push	r11
    1020:	cf 92       	push	r12
    1022:	df 92       	push	r13
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	c8 58       	subi	r28, 0x88	; 136
    1036:	d1 09       	sbc	r29, r1
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	7c 01       	movw	r14, r24
    1044:	3b 01       	movw	r6, r22
    1046:	5a 01       	movw	r10, r20
    1048:	49 01       	movw	r8, r18
    104a:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    104c:	00 e0       	ldi	r16, 0x00	; 0
    104e:	10 e0       	ldi	r17, 0x00	; 0
    1050:	98 01       	movw	r18, r16
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	60 e8       	ldi	r22, 0x80	; 128
    1058:	7f e3       	ldi	r23, 0x3F	; 63
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1062:	00 e0       	ldi	r16, 0x00	; 0
    1064:	10 e0       	ldi	r17, 0x00	; 0
    1066:	98 01       	movw	r18, r16
    1068:	b9 01       	movw	r22, r18
    106a:	a8 01       	movw	r20, r16
    106c:	ce 01       	movw	r24, r28
    106e:	09 96       	adiw	r24, 0x09	; 9
    1070:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1074:	00 e0       	ldi	r16, 0x00	; 0
    1076:	10 e0       	ldi	r17, 0x00	; 0
    1078:	98 01       	movw	r18, r16
    107a:	b9 01       	movw	r22, r18
    107c:	a8 01       	movw	r20, r16
    107e:	ce 01       	movw	r24, r28
    1080:	41 96       	adiw	r24, 0x11	; 17
    1082:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1086:	00 e0       	ldi	r16, 0x00	; 0
    1088:	10 e0       	ldi	r17, 0x00	; 0
    108a:	98 01       	movw	r18, r16
    108c:	b9 01       	movw	r22, r18
    108e:	a8 01       	movw	r20, r16
    1090:	ce 01       	movw	r24, r28
    1092:	49 96       	adiw	r24, 0x19	; 25
    1094:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1098:	00 e0       	ldi	r16, 0x00	; 0
    109a:	10 e0       	ldi	r17, 0x00	; 0
    109c:	98 01       	movw	r18, r16
    109e:	b9 01       	movw	r22, r18
    10a0:	a8 01       	movw	r20, r16
    10a2:	ce 01       	movw	r24, r28
    10a4:	81 96       	adiw	r24, 0x21	; 33
    10a6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10aa:	00 e0       	ldi	r16, 0x00	; 0
    10ac:	10 e0       	ldi	r17, 0x00	; 0
    10ae:	98 01       	movw	r18, r16
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	60 e8       	ldi	r22, 0x80	; 128
    10b6:	7f e3       	ldi	r23, 0x3F	; 63
    10b8:	ce 01       	movw	r24, r28
    10ba:	89 96       	adiw	r24, 0x29	; 41
    10bc:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10c0:	00 e0       	ldi	r16, 0x00	; 0
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	98 01       	movw	r18, r16
    10c6:	b9 01       	movw	r22, r18
    10c8:	a8 01       	movw	r20, r16
    10ca:	ce 01       	movw	r24, r28
    10cc:	c1 96       	adiw	r24, 0x31	; 49
    10ce:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10d2:	00 e0       	ldi	r16, 0x00	; 0
    10d4:	10 e0       	ldi	r17, 0x00	; 0
    10d6:	98 01       	movw	r18, r16
    10d8:	b9 01       	movw	r22, r18
    10da:	a8 01       	movw	r20, r16
    10dc:	ce 01       	movw	r24, r28
    10de:	c9 96       	adiw	r24, 0x39	; 57
    10e0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10e4:	00 e0       	ldi	r16, 0x00	; 0
    10e6:	10 e0       	ldi	r17, 0x00	; 0
    10e8:	98 01       	movw	r18, r16
    10ea:	b9 01       	movw	r22, r18
    10ec:	a8 01       	movw	r20, r16
    10ee:	ce 01       	movw	r24, r28
    10f0:	8f 5b       	subi	r24, 0xBF	; 191
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10f8:	00 e0       	ldi	r16, 0x00	; 0
    10fa:	10 e0       	ldi	r17, 0x00	; 0
    10fc:	98 01       	movw	r18, r16
    10fe:	b9 01       	movw	r22, r18
    1100:	a8 01       	movw	r20, r16
    1102:	ce 01       	movw	r24, r28
    1104:	87 5b       	subi	r24, 0xB7	; 183
    1106:	9f 4f       	sbci	r25, 0xFF	; 255
    1108:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    110c:	00 e0       	ldi	r16, 0x00	; 0
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	98 01       	movw	r18, r16
    1112:	b9 01       	movw	r22, r18
    1114:	a8 01       	movw	r20, r16
    1116:	ce 01       	movw	r24, r28
    1118:	8f 5a       	subi	r24, 0xAF	; 175
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1120:	00 e0       	ldi	r16, 0x00	; 0
    1122:	10 e0       	ldi	r17, 0x00	; 0
    1124:	98 01       	movw	r18, r16
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	60 e8       	ldi	r22, 0x80	; 128
    112c:	7f e3       	ldi	r23, 0x3F	; 63
    112e:	ce 01       	movw	r24, r28
    1130:	87 5a       	subi	r24, 0xA7	; 167
    1132:	9f 4f       	sbci	r25, 0xFF	; 255
    1134:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1138:	00 e0       	ldi	r16, 0x00	; 0
    113a:	10 e0       	ldi	r17, 0x00	; 0
    113c:	98 01       	movw	r18, r16
    113e:	b9 01       	movw	r22, r18
    1140:	a8 01       	movw	r20, r16
    1142:	ce 01       	movw	r24, r28
    1144:	8f 59       	subi	r24, 0x9F	; 159
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    114c:	00 e0       	ldi	r16, 0x00	; 0
    114e:	10 e0       	ldi	r17, 0x00	; 0
    1150:	98 01       	movw	r18, r16
    1152:	b9 01       	movw	r22, r18
    1154:	a8 01       	movw	r20, r16
    1156:	ce 01       	movw	r24, r28
    1158:	87 59       	subi	r24, 0x97	; 151
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	10 e0       	ldi	r17, 0x00	; 0
    1164:	98 01       	movw	r18, r16
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	60 e8       	ldi	r22, 0x80	; 128
    116c:	7f e3       	ldi	r23, 0x3F	; 63
    116e:	ce 01       	movw	r24, r28
    1170:	8f 58       	subi	r24, 0x8F	; 143
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1178:	00 e0       	ldi	r16, 0x00	; 0
    117a:	10 e0       	ldi	r17, 0x00	; 0
    117c:	98 01       	movw	r18, r16
    117e:	b9 01       	movw	r22, r18
    1180:	a8 01       	movw	r20, r16
    1182:	ce 01       	movw	r24, r28
    1184:	87 58       	subi	r24, 0x87	; 135
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
    118c:	cb 57       	subi	r28, 0x7B	; 123
    118e:	df 4f       	sbci	r29, 0xFF	; 255
    1190:	79 82       	std	Y+1, r7	; 0x01
    1192:	68 82       	st	Y, r6
    1194:	c5 58       	subi	r28, 0x85	; 133
    1196:	d0 40       	sbci	r29, 0x00	; 0
    1198:	c9 57       	subi	r28, 0x79	; 121
    119a:	df 4f       	sbci	r29, 0xFF	; 255
    119c:	99 82       	std	Y+1, r9	; 0x01
    119e:	88 82       	st	Y, r8
    11a0:	c7 58       	subi	r28, 0x87	; 135
    11a2:	d0 40       	sbci	r29, 0x00	; 0
    11a4:	cf 57       	subi	r28, 0x7F	; 127
    11a6:	df 4f       	sbci	r29, 0xFF	; 255
    11a8:	b9 82       	std	Y+1, r11	; 0x01
    11aa:	a8 82       	st	Y, r10
    11ac:	c1 58       	subi	r28, 0x81	; 129
    11ae:	d0 40       	sbci	r29, 0x00	; 0
    11b0:	cd 57       	subi	r28, 0x7D	; 125
    11b2:	df 4f       	sbci	r29, 0xFF	; 255
    11b4:	d9 82       	std	Y+1, r13	; 0x01
    11b6:	c8 82       	st	Y, r12
    11b8:	c3 58       	subi	r28, 0x83	; 131
    11ba:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix),2);
    11bc:	9e 01       	movw	r18, r28
    11be:	2f 57       	subi	r18, 0x7F	; 127
    11c0:	3f 4f       	sbci	r19, 0xFF	; 255
    11c2:	ae 01       	movw	r20, r28
    11c4:	4b 57       	subi	r20, 0x7B	; 123
    11c6:	5f 4f       	sbci	r21, 0xFF	; 255
    11c8:	62 e0       	ldi	r22, 0x02	; 2
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	c7 01       	movw	r24, r14
    11ce:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN5Gates8ampl2vecEiPiS0_>
    11d2:	ae 01       	movw	r20, r28
    11d4:	4f 5f       	subi	r20, 0xFF	; 255
    11d6:	5f 4f       	sbci	r21, 0xFF	; 255
    11d8:	bc 01       	movw	r22, r24
    11da:	c7 01       	movw	r24, r14
    11dc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    11e0:	42 e0       	ldi	r20, 0x02	; 2
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	bc 01       	movw	r22, r24
    11e6:	c7 01       	movw	r24, r14
    11e8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN5Gates8vec2amplEP7Complexi>
}
    11ec:	c8 57       	subi	r28, 0x78	; 120
    11ee:	df 4f       	sbci	r29, 0xFF	; 255
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	bf 90       	pop	r11
    120c:	af 90       	pop	r10
    120e:	9f 90       	pop	r9
    1210:	8f 90       	pop	r8
    1212:	7f 90       	pop	r7
    1214:	6f 90       	pop	r6
    1216:	08 95       	ret

00001218 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
Gates::Gates(){setup_seed();}

Serial s;
    1218:	81 ec       	ldi	r24, 0xC1	; 193
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN6SerialC1Ev>
    1220:	08 95       	ret

00001222 <main>:
#include "qepu.h"
int main(void){
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	00 d0       	rcall	.+0      	; 0x1228 <main+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <main+0x8>
    122a:	00 d0       	rcall	.+0      	; 0x122c <main+0xa>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    1230:	ce 01       	movw	r24, r28
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN4QEPUC1Ev>
	qepu.run();
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN4QEPU3runEv>
    1240:	ff cf       	rjmp	.-2      	; 0x1240 <main+0x1e>

00001242 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	ec 01       	movw	r28, r24
    1248:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN6EEPromC1Ev>
    124c:	ce 01       	movw	r24, r28
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN6SerialC1Ev>
    1254:	ce 01       	movw	r24, r28
    1256:	05 96       	adiw	r24, 0x05	; 5
    1258:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN5GatesC1Ev>
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	8a bb       	out	0x1a, r24	; 26
    1260:	1c 82       	std	Y+4, r1	; 0x04
    1262:	1b 82       	std	Y+3, r1	; 0x03
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    126a:	7b b3       	in	r23, 0x1b	; 27
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	c9 01       	movw	r24, r18
    1272:	06 2e       	mov	r0, r22
    1274:	02 c0       	rjmp	.+4      	; 0x127a <_ZN4QEPU10setctrlpinEii+0x10>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <_ZN4QEPU10setctrlpinEii+0xc>
    127e:	80 95       	com	r24
    1280:	87 23       	and	r24, r23
    1282:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    1284:	8b b3       	in	r24, 0x1b	; 27
    1286:	02 c0       	rjmp	.+4      	; 0x128c <_ZN4QEPU10setctrlpinEii+0x22>
    1288:	44 0f       	add	r20, r20
    128a:	55 1f       	adc	r21, r21
    128c:	6a 95       	dec	r22
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <_ZN4QEPU10setctrlpinEii+0x1e>
    1290:	48 2b       	or	r20, r24
    1292:	4b bb       	out	0x1b, r20	; 27
    1294:	08 95       	ret

00001296 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    12a0:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    12a2:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    12a4:	64 e0       	ldi	r22, 0x04	; 4
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	ce 01       	movw	r24, r28
    12aa:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    12ae:	41 e0       	ldi	r20, 0x01	; 1
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	66 e0       	ldi	r22, 0x06	; 6
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	ce 01       	movw	r24, r28
    12b8:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	66 e0       	ldi	r22, 0x06	; 6
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	ce 01       	movw	r24, r28
    12c6:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    12ca:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
    12dc:	8a 01       	movw	r16, r20
	DDRB=0x00;
    12de:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    12e0:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	65 e0       	ldi	r22, 0x05	; 5
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    12ee:	a8 01       	movw	r20, r16
    12f0:	64 e0       	ldi	r22, 0x04	; 4
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	ce 01       	movw	r24, r28
    12f6:	0e 94 35 09 	call	0x126a	; 0x126a <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    12fa:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    12fc:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    12fe:	9f ef       	ldi	r25, 0xFF	; 255
    1300:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    130e:	6f 92       	push	r6
    1310:	7f 92       	push	r7
    1312:	8f 92       	push	r8
    1314:	9f 92       	push	r9
    1316:	af 92       	push	r10
    1318:	bf 92       	push	r11
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	6c 01       	movw	r12, r24
	serial.writestrln("");
    132c:	8c 01       	movw	r16, r24
    132e:	0f 5f       	subi	r16, 0xFF	; 255
    1330:	1f 4f       	sbci	r17, 0xFF	; 255
    1332:	6f ea       	ldi	r22, 0xAF	; 175
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	c8 01       	movw	r24, r16
    1338:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    133c:	66 e8       	ldi	r22, 0x86	; 134
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	c8 01       	movw	r24, r16
    1342:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    1346:	c0 e0       	ldi	r28, 0x00	; 0
    1348:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    134a:	0f 2e       	mov	r0, r31
    134c:	f0 ea       	ldi	r31, 0xA0	; 160
    134e:	ef 2e       	mov	r14, r31
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	ff 2e       	mov	r15, r31
    1354:	f0 2d       	mov	r31, r0
    1356:	83 e0       	ldi	r24, 0x03	; 3
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <malloc>
    135e:	88 2e       	mov	r8, r24
    1360:	99 2e       	mov	r9, r25
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	be 01       	movw	r22, r28
    1368:	c6 01       	movw	r24, r12
    136a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    136e:	9f 93       	push	r25
    1370:	8f 93       	push	r24
    1372:	ff 92       	push	r15
    1374:	ef 92       	push	r14
    1376:	9f 92       	push	r9
    1378:	8f 92       	push	r8
    137a:	0e 94 b1 13 	call	0x2762	; 0x2762 <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    137e:	83 e0       	ldi	r24, 0x03	; 3
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <malloc>
    1386:	a8 2e       	mov	r10, r24
    1388:	b9 2e       	mov	r11, r25
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	be 01       	movw	r22, r28
    1390:	c6 01       	movw	r24, r12
    1392:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    1396:	9f 93       	push	r25
    1398:	8f 93       	push	r24
    139a:	ff 92       	push	r15
    139c:	ef 92       	push	r14
    139e:	bf 92       	push	r11
    13a0:	af 92       	push	r10
    13a2:	0e 94 b1 13 	call	0x2762	; 0x2762 <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <malloc>
    13ae:	68 2e       	mov	r6, r24
    13b0:	79 2e       	mov	r7, r25
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	ff 92       	push	r15
    13b8:	ef 92       	push	r14
    13ba:	7f 92       	push	r7
    13bc:	6f 92       	push	r6
    13be:	0e 94 b1 13 	call	0x2762	; 0x2762 <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    13c2:	63 ea       	ldi	r22, 0xA3	; 163
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	c8 01       	movw	r24, r16
    13c8:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6Serial8writestrEPc>
    13cc:	66 2d       	mov	r22, r6
    13ce:	77 2d       	mov	r23, r7
    13d0:	c8 01       	movw	r24, r16
    13d2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6Serial8writestrEPc>
    13d6:	65 ea       	ldi	r22, 0xA5	; 165
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	c8 01       	movw	r24, r16
    13dc:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    13e0:	68 2d       	mov	r22, r8
    13e2:	79 2d       	mov	r23, r9
    13e4:	c8 01       	movw	r24, r16
    13e6:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    13ea:	60 eb       	ldi	r22, 0xB0	; 176
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	c8 01       	movw	r24, r16
    13f0:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    13f4:	6a 2d       	mov	r22, r10
    13f6:	7b 2d       	mov	r23, r11
    13f8:	c8 01       	movw	r24, r16
    13fa:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    13fe:	21 96       	adiw	r28, 0x01	; 1
    1400:	8d b7       	in	r24, 0x3d	; 61
    1402:	9e b7       	in	r25, 0x3e	; 62
    1404:	42 96       	adiw	r24, 0x12	; 18
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	9e bf       	out	0x3e, r25	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	8d bf       	out	0x3d, r24	; 61
    1410:	c4 30       	cpi	r28, 0x04	; 4
    1412:	d1 05       	cpc	r29, r1
    1414:	09 f0       	breq	.+2      	; 0x1418 <_ZN4QEPU7dumpmemEv+0x10a>
    1416:	9f cf       	rjmp	.-194    	; 0x1356 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	df 90       	pop	r13
    1426:	cf 90       	pop	r12
    1428:	bf 90       	pop	r11
    142a:	af 90       	pop	r10
    142c:	9f 90       	pop	r9
    142e:	8f 90       	pop	r8
    1430:	7f 90       	pop	r7
    1432:	6f 90       	pop	r6
    1434:	08 95       	ret

00001436 <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    1436:	cf 92       	push	r12
    1438:	df 92       	push	r13
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	d6 2f       	mov	r29, r22
    1448:	c7 2f       	mov	r28, r23
    144a:	e6 2f       	mov	r30, r22
    144c:	f7 2f       	mov	r31, r23
	int c_length=0;
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    1452:	21 91       	ld	r18, Z+
    1454:	2f 3f       	cpi	r18, 0xFF	; 255
    1456:	89 f4       	brne	.+34     	; 0x147a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1458:	df 01       	movw	r26, r30
    145a:	12 97       	sbiw	r26, 0x02	; 2
    145c:	4c 91       	ld	r20, X
    145e:	4f 3f       	cpi	r20, 0xFF	; 255
    1460:	61 f4       	brne	.+24     	; 0x147a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	4c 91       	ld	r20, X
    1466:	4f 3f       	cpi	r20, 0xFF	; 255
    1468:	41 f4       	brne	.+16     	; 0x147a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    146a:	11 97       	sbiw	r26, 0x01	; 1
    146c:	4c 91       	ld	r20, X
    146e:	4f 3f       	cpi	r20, 0xFF	; 255
    1470:	21 f4       	brne	.+8      	; 0x147a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1472:	11 97       	sbiw	r26, 0x01	; 1
    1474:	2c 91       	ld	r18, X
    1476:	2f 3f       	cpi	r18, 0xFF	; 255
    1478:	11 f0       	breq	.+4      	; 0x147e <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	ea cf       	rjmp	.-44     	; 0x1452 <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    147e:	8c 01       	movw	r16, r24
    1480:	04 50       	subi	r16, 0x04	; 4
    1482:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    1484:	6c 01       	movw	r12, r24
    1486:	2f ef       	ldi	r18, 0xFF	; 255
    1488:	c2 1a       	sub	r12, r18
    148a:	d2 0a       	sbc	r13, r18
    148c:	76 01       	movw	r14, r12
    148e:	ee 0c       	add	r14, r14
    1490:	ff 1c       	adc	r15, r15
    1492:	c7 01       	movw	r24, r14
    1494:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    1498:	10 16       	cp	r1, r16
    149a:	11 06       	cpc	r1, r17
    149c:	74 f4       	brge	.+28     	; 0x14ba <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    149e:	dc 01       	movw	r26, r24
    14a0:	ed 2f       	mov	r30, r29
    14a2:	fc 2f       	mov	r31, r28
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	41 91       	ld	r20, Z+
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	4d 93       	st	X+, r20
    14ae:	5d 93       	st	X+, r21
    14b0:	2f 5f       	subi	r18, 0xFF	; 255
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	20 17       	cp	r18, r16
    14b6:	31 07       	cpc	r19, r17
    14b8:	bc f3       	brlt	.-18     	; 0x14a8 <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    14ba:	0c 15       	cp	r16, r12
    14bc:	1d 05       	cpc	r17, r13
    14be:	7c f4       	brge	.+30     	; 0x14de <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    14c0:	f7 01       	movw	r30, r14
    14c2:	3a 97       	sbiw	r30, 0x0a	; 10
    14c4:	e8 0f       	add	r30, r24
    14c6:	f9 1f       	adc	r31, r25
    14c8:	25 e0       	ldi	r18, 0x05	; 5
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4f ef       	ldi	r20, 0xFF	; 255
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	41 93       	st	Z+, r20
    14d2:	51 93       	st	Z+, r21
    14d4:	21 50       	subi	r18, 0x01	; 1
    14d6:	31 09       	sbc	r19, r1
    14d8:	21 15       	cp	r18, r1
    14da:	31 05       	cpc	r19, r1
    14dc:	c9 f7       	brne	.-14     	; 0x14d0 <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	08 95       	ret

000014f0 <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	c4 56       	subi	r28, 0x64	; 100
    14fe:	d1 09       	sbc	r29, r1
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
	//char str[countdigits(dec)+1];
	char str[100];
	sprintf(str,"%d",dec);
    150a:	7f 93       	push	r23
    150c:	6f 93       	push	r22
    150e:	80 ea       	ldi	r24, 0xA0	; 160
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9f 93       	push	r25
    1514:	8f 93       	push	r24
    1516:	8e 01       	movw	r16, r28
    1518:	0f 5f       	subi	r16, 0xFF	; 255
    151a:	1f 4f       	sbci	r17, 0xFF	; 255
    151c:	1f 93       	push	r17
    151e:	0f 93       	push	r16
    1520:	0e 94 b1 13 	call	0x2762	; 0x2762 <sprintf>
	return str;
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
}
    1530:	c8 01       	movw	r24, r16
    1532:	cc 59       	subi	r28, 0x9C	; 156
    1534:	df 4f       	sbci	r29, 0xFF	; 255
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	08 95       	ret

0000154a <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    154a:	61 15       	cp	r22, r1
    154c:	71 05       	cpc	r23, r1
    154e:	59 f0       	breq	.+22     	; 0x1566 <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1550:	8f e9       	ldi	r24, 0x9F	; 159
    1552:	9f e0       	ldi	r25, 0x0F	; 15
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <_ZN4QEPU5Utils5delayEi+0xa>
    1558:	00 c0       	rjmp	.+0      	; 0x155a <_ZN4QEPU5Utils5delayEi+0x10>
    155a:	00 00       	nop
    155c:	61 50       	subi	r22, 0x01	; 1
    155e:	71 09       	sbc	r23, r1
    1560:	61 15       	cp	r22, r1
    1562:	71 05       	cpc	r23, r1
    1564:	a9 f7       	brne	.-22     	; 0x1550 <_ZN4QEPU5Utils5delayEi+0x6>
}
    1566:	08 95       	ret

00001568 <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    1568:	2f 92       	push	r2
    156a:	3f 92       	push	r3
    156c:	4f 92       	push	r4
    156e:	5f 92       	push	r5
    1570:	6f 92       	push	r6
    1572:	7f 92       	push	r7
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	ec 01       	movw	r28, r24
    158e:	1b 01       	movw	r2, r22
    1590:	29 01       	movw	r4, r18
    1592:	3a 01       	movw	r6, r20
    1594:	47 01       	movw	r8, r14
    1596:	58 01       	movw	r10, r16
	int * newthephi=(int*)malloc(sizeof(int)*2);
    1598:	84 e0       	ldi	r24, 0x04	; 4
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <malloc>
    15a0:	6c 01       	movw	r12, r24
	
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    15a2:	f1 01       	movw	r30, r2
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	e6 31       	cpi	r30, 0x16	; 22
    15a8:	f1 05       	cpc	r31, r1
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <_ZN4QEPU7executeEill+0x46>
    15ac:	47 c1       	rjmp	.+654    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
    15ae:	e6 5d       	subi	r30, 0xD6	; 214
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	b7 01       	movw	r22, r14
    15bc:	ce 01       	movw	r24, r28
    15be:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    15c2:	9c 01       	movw	r18, r24
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	b2 01       	movw	r22, r4
    15ca:	ce 01       	movw	r24, r28
    15cc:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	b7 01       	movw	r22, r14
    15d6:	ce 01       	movw	r24, r28
    15d8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    15dc:	9c 01       	movw	r18, r24
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	b2 01       	movw	r22, r4
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
		break;
    15ea:	28 c1       	rjmp	.+592    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	48 1a       	sub	r4, r24
    15f0:	51 08       	sbc	r5, r1
    15f2:	5c 82       	std	Y+4, r5	; 0x04
    15f4:	4b 82       	std	Y+3, r4	; 0x03
		break;
    15f6:	22 c1       	rjmp	.+580    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    15f8:	b2 01       	movw	r22, r4
    15fa:	ce 01       	movw	r24, r28
    15fc:	02 96       	adiw	r24, 0x02	; 2
    15fe:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN4QEPU5Utils5delayEi>
    1602:	1c c1       	rjmp	.+568    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    1604:	97 01       	movw	r18, r14
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	b2 01       	movw	r22, r4
    160c:	ce 01       	movw	r24, r28
    160e:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
		break;
    1612:	14 c1       	rjmp	.+552    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    1614:	97 01       	movw	r18, r14
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	b2 01       	movw	r22, r4
    161c:	ce 01       	movw	r24, r28
    161e:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
		break;
    1622:	0c c1       	rjmp	.+536    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	b2 01       	movw	r22, r4
    162a:	ce 01       	movw	r24, r28
    162c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    1630:	8c 01       	movw	r16, r24
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	b2 01       	movw	r22, r4
    1638:	ce 01       	movw	r24, r28
    163a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    163e:	a8 01       	movw	r20, r16
    1640:	bc 01       	movw	r22, r24
    1642:	ce 01       	movw	r24, r28
    1644:	05 96       	adiw	r24, 0x05	; 5
    1646:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZN5Gates1XEii>
    164a:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    164c:	fc 01       	movw	r30, r24
    164e:	20 81       	ld	r18, Z
    1650:	31 81       	ldd	r19, Z+1	; 0x01
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	b2 01       	movw	r22, r4
    1658:	ce 01       	movw	r24, r28
    165a:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
    165e:	f6 01       	movw	r30, r12
    1660:	22 81       	ldd	r18, Z+2	; 0x02
    1662:	33 81       	ldd	r19, Z+3	; 0x03
    1664:	41 e0       	ldi	r20, 0x01	; 1
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	b2 01       	movw	r22, r4
    166a:	ce 01       	movw	r24, r28
    166c:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
		break;
    1670:	e5 c0       	rjmp	.+458    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	b2 01       	movw	r22, r4
    1678:	ce 01       	movw	r24, r28
    167a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    167e:	8c 01       	movw	r16, r24
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	b2 01       	movw	r22, r4
    1686:	ce 01       	movw	r24, r28
    1688:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    168c:	a8 01       	movw	r20, r16
    168e:	bc 01       	movw	r22, r24
    1690:	ce 01       	movw	r24, r28
    1692:	05 96       	adiw	r24, 0x05	; 5
    1694:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN5Gates1YEii>
    1698:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    169a:	fc 01       	movw	r30, r24
    169c:	20 81       	ld	r18, Z
    169e:	31 81       	ldd	r19, Z+1	; 0x01
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	b2 01       	movw	r22, r4
    16a6:	ce 01       	movw	r24, r28
    16a8:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
    16ac:	f6 01       	movw	r30, r12
    16ae:	22 81       	ldd	r18, Z+2	; 0x02
    16b0:	33 81       	ldd	r19, Z+3	; 0x03
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	b2 01       	movw	r22, r4
    16b8:	ce 01       	movw	r24, r28
    16ba:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
		break;
    16be:	be c0       	rjmp	.+380    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    16c0:	41 e0       	ldi	r20, 0x01	; 1
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	b2 01       	movw	r22, r4
    16c6:	ce 01       	movw	r24, r28
    16c8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    16cc:	8c 01       	movw	r16, r24
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	50 e0       	ldi	r21, 0x00	; 0
    16d2:	b2 01       	movw	r22, r4
    16d4:	ce 01       	movw	r24, r28
    16d6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    16da:	a8 01       	movw	r20, r16
    16dc:	bc 01       	movw	r22, r24
    16de:	ce 01       	movw	r24, r28
    16e0:	05 96       	adiw	r24, 0x05	; 5
    16e2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN5Gates1ZEii>
    16e6:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    16e8:	fc 01       	movw	r30, r24
    16ea:	20 81       	ld	r18, Z
    16ec:	31 81       	ldd	r19, Z+1	; 0x01
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	b2 01       	movw	r22, r4
    16f4:	ce 01       	movw	r24, r28
    16f6:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
    16fa:	f6 01       	movw	r30, r12
    16fc:	22 81       	ldd	r18, Z+2	; 0x02
    16fe:	33 81       	ldd	r19, Z+3	; 0x03
    1700:	41 e0       	ldi	r20, 0x01	; 1
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	b2 01       	movw	r22, r4
    1706:	ce 01       	movw	r24, r28
    1708:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
		break;
    170c:	97 c0       	rjmp	.+302    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	b2 01       	movw	r22, r4
    1714:	ce 01       	movw	r24, r28
    1716:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    171a:	8c 01       	movw	r16, r24
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	b2 01       	movw	r22, r4
    1722:	ce 01       	movw	r24, r28
    1724:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    1728:	a8 01       	movw	r20, r16
    172a:	bc 01       	movw	r22, r24
    172c:	ce 01       	movw	r24, r28
    172e:	05 96       	adiw	r24, 0x05	; 5
    1730:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN5Gates1HEii>
    1734:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1736:	fc 01       	movw	r30, r24
    1738:	20 81       	ld	r18, Z
    173a:	31 81       	ldd	r19, Z+1	; 0x01
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	b2 01       	movw	r22, r4
    1742:	ce 01       	movw	r24, r28
    1744:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
    1748:	f6 01       	movw	r30, r12
    174a:	22 81       	ldd	r18, Z+2	; 0x02
    174c:	33 81       	ldd	r19, Z+3	; 0x03
    174e:	41 e0       	ldi	r20, 0x01	; 1
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	b2 01       	movw	r22, r4
    1754:	ce 01       	movw	r24, r28
    1756:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
		break;
    175a:	70 c0       	rjmp	.+224    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	b2 01       	movw	r22, r4
    1762:	ce 01       	movw	r24, r28
    1764:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    1768:	8c 01       	movw	r16, r24
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	b2 01       	movw	r22, r4
    1770:	ce 01       	movw	r24, r28
    1772:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    1776:	a8 01       	movw	r20, r16
    1778:	bc 01       	movw	r22, r24
    177a:	ce 01       	movw	r24, r28
    177c:	05 96       	adiw	r24, 0x05	; 5
    177e:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN5Gates1SEii>
    1782:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1784:	fc 01       	movw	r30, r24
    1786:	20 81       	ld	r18, Z
    1788:	31 81       	ldd	r19, Z+1	; 0x01
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	b2 01       	movw	r22, r4
    1790:	ce 01       	movw	r24, r28
    1792:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
    1796:	f6 01       	movw	r30, r12
    1798:	22 81       	ldd	r18, Z+2	; 0x02
    179a:	33 81       	ldd	r19, Z+3	; 0x03
    179c:	41 e0       	ldi	r20, 0x01	; 1
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	b2 01       	movw	r22, r4
    17a2:	ce 01       	movw	r24, r28
    17a4:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
		break;
    17a8:	49 c0       	rjmp	.+146    	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	b2 01       	movw	r22, r4
    17b0:	ce 01       	movw	r24, r28
    17b2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    17b6:	8c 01       	movw	r16, r24
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	b2 01       	movw	r22, r4
    17be:	ce 01       	movw	r24, r28
    17c0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    17c4:	a8 01       	movw	r20, r16
    17c6:	bc 01       	movw	r22, r24
    17c8:	ce 01       	movw	r24, r28
    17ca:	05 96       	adiw	r24, 0x05	; 5
    17cc:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN5Gates1TEii>
    17d0:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 81       	ld	r18, Z
    17d6:	31 81       	ldd	r19, Z+1	; 0x01
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	b2 01       	movw	r22, r4
    17de:	ce 01       	movw	r24, r28
    17e0:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
    17e4:	f6 01       	movw	r30, r12
    17e6:	22 81       	ldd	r18, Z+2	; 0x02
    17e8:	33 81       	ldd	r19, Z+3	; 0x03
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	b2 01       	movw	r22, r4
    17f0:	ce 01       	movw	r24, r28
    17f2:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN4QEPU5writeEiii>
		break;
    17f6:	22 c0       	rjmp	.+68     	; 0x183c <_ZN4QEPU7executeEill+0x2d4>
		//2 QUBIT GATES -
		case 0x16: 
			gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	b7 01       	movw	r22, r14
    17fe:	ce 01       	movw	r24, r28
    1800:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    1804:	8c 01       	movw	r16, r24
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	b4 01       	movw	r22, r8
    180c:	ce 01       	movw	r24, r28
    180e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    1812:	5c 01       	movw	r10, r24
    1814:	41 e0       	ldi	r20, 0x01	; 1
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	b2 01       	movw	r22, r4
    181a:	ce 01       	movw	r24, r28
    181c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    1820:	7c 01       	movw	r14, r24
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	b2 01       	movw	r22, r4
    1828:	ce 01       	movw	r24, r28
    182a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN4QEPU4readEii>
    182e:	95 01       	movw	r18, r10
    1830:	a7 01       	movw	r20, r14
    1832:	bc 01       	movw	r22, r24
    1834:	ce 01       	movw	r24, r28
    1836:	05 96       	adiw	r24, 0x05	; 5
    1838:	0e 94 0a 08 	call	0x1014	; 0x1014 <_ZN5Gates3CNOEiiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    183c:	c6 01       	movw	r24, r12
    183e:	0e 94 88 11 	call	0x2310	; 0x2310 <free>
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	bf 90       	pop	r11
    1854:	af 90       	pop	r10
    1856:	9f 90       	pop	r9
    1858:	8f 90       	pop	r8
    185a:	7f 90       	pop	r7
    185c:	6f 90       	pop	r6
    185e:	5f 90       	pop	r5
    1860:	4f 90       	pop	r4
    1862:	3f 90       	pop	r3
    1864:	2f 90       	pop	r2
    1866:	08 95       	ret

00001868 <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    1868:	2f 92       	push	r2
    186a:	3f 92       	push	r3
    186c:	4f 92       	push	r4
    186e:	5f 92       	push	r5
    1870:	6f 92       	push	r6
    1872:	7f 92       	push	r7
    1874:	8f 92       	push	r8
    1876:	9f 92       	push	r9
    1878:	af 92       	push	r10
    187a:	bf 92       	push	r11
    187c:	cf 92       	push	r12
    187e:	df 92       	push	r13
    1880:	ef 92       	push	r14
    1882:	ff 92       	push	r15
    1884:	0f 93       	push	r16
    1886:	1f 93       	push	r17
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	c0 57       	subi	r28, 0x70	; 112
    1892:	d1 09       	sbc	r29, r1
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    18a0:	0e 94 22 02 	call	0x444	; 0x444 <_ZN6EEProm7readallEv>
    18a4:	bc 01       	movw	r22, r24
    18a6:	c3 01       	movw	r24, r6
    18a8:	02 96       	adiw	r24, 0x02	; 2
    18aa:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN4QEPU5Utils10str2intarrEPc>
    18ae:	fc 01       	movw	r30, r24
    18b0:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    18b6:	40 85       	ldd	r20, Z+8	; 0x08
    18b8:	51 85       	ldd	r21, Z+9	; 0x09
    18ba:	4f 3f       	cpi	r20, 0xFF	; 255
    18bc:	51 05       	cpc	r21, r1
    18be:	a1 f4       	brne	.+40     	; 0x18e8 <_ZN4QEPU3runEv+0x80>
    18c0:	46 81       	ldd	r20, Z+6	; 0x06
    18c2:	57 81       	ldd	r21, Z+7	; 0x07
    18c4:	4f 3f       	cpi	r20, 0xFF	; 255
    18c6:	51 05       	cpc	r21, r1
    18c8:	79 f4       	brne	.+30     	; 0x18e8 <_ZN4QEPU3runEv+0x80>
    18ca:	44 81       	ldd	r20, Z+4	; 0x04
    18cc:	55 81       	ldd	r21, Z+5	; 0x05
    18ce:	4f 3f       	cpi	r20, 0xFF	; 255
    18d0:	51 05       	cpc	r21, r1
    18d2:	51 f4       	brne	.+20     	; 0x18e8 <_ZN4QEPU3runEv+0x80>
    18d4:	42 81       	ldd	r20, Z+2	; 0x02
    18d6:	53 81       	ldd	r21, Z+3	; 0x03
    18d8:	4f 3f       	cpi	r20, 0xFF	; 255
    18da:	51 05       	cpc	r21, r1
    18dc:	29 f4       	brne	.+10     	; 0x18e8 <_ZN4QEPU3runEv+0x80>
    18de:	40 81       	ld	r20, Z
    18e0:	51 81       	ldd	r21, Z+1	; 0x01
    18e2:	4f 3f       	cpi	r20, 0xFF	; 255
    18e4:	51 05       	cpc	r21, r1
    18e6:	21 f0       	breq	.+8      	; 0x18f0 <_ZN4QEPU3runEv+0x88>
    18e8:	2f 5f       	subi	r18, 0xFF	; 255
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	32 96       	adiw	r30, 0x02	; 2
    18ee:	e3 cf       	rjmp	.-58     	; 0x18b6 <_ZN4QEPU3runEv+0x4e>
    18f0:	a9 01       	movw	r20, r18
    18f2:	44 50       	subi	r20, 0x04	; 4
    18f4:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    18f6:	14 16       	cp	r1, r20
    18f8:	15 06       	cpc	r1, r21
    18fa:	0c f0       	brlt	.+2      	; 0x18fe <_ZN4QEPU3runEv+0x96>
    18fc:	07 c1       	rjmp	.+526    	; 0x1b0c <_ZN4QEPU3runEv+0x2a4>
    18fe:	fc 01       	movw	r30, r24
    1900:	25 50       	subi	r18, 0x05	; 5
    1902:	31 09       	sbc	r19, r1
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	41 2c       	mov	r4, r1
    190e:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    1910:	c1 2c       	mov	r12, r1
    1912:	d1 2c       	mov	r13, r1
    1914:	0c c0       	rjmp	.+24     	; 0x192e <_ZN4QEPU3runEv+0xc6>
    1916:	69 30       	cpi	r22, 0x09	; 9
    1918:	71 05       	cpc	r23, r1
    191a:	34 f0       	brlt	.+12     	; 0x1928 <_ZN4QEPU3runEv+0xc0>
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	48 1a       	sub	r4, r24
    1920:	58 0a       	sbc	r5, r24
    1922:	8c 2d       	mov	r24, r12
    1924:	9d 2d       	mov	r25, r13
    1926:	01 c0       	rjmp	.+2      	; 0x192a <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    1928:	cb 01       	movw	r24, r22
    192a:	4f 5f       	subi	r20, 0xFF	; 255
    192c:	5f 4f       	sbci	r21, 0xFF	; 255
    192e:	bc 01       	movw	r22, r24
    1930:	6f 5f       	subi	r22, 0xFF	; 255
    1932:	7f 4f       	sbci	r23, 0xFF	; 255
    1934:	01 91       	ld	r16, Z+
    1936:	11 91       	ld	r17, Z+
    1938:	d2 01       	movw	r26, r4
    193a:	aa 0f       	add	r26, r26
    193c:	bb 1f       	adc	r27, r27
    193e:	aa 0f       	add	r26, r26
    1940:	bb 1f       	adc	r27, r27
    1942:	aa 0f       	add	r26, r26
    1944:	bb 1f       	adc	r27, r27
    1946:	a4 0d       	add	r26, r4
    1948:	b5 1d       	adc	r27, r5
    194a:	8a 0f       	add	r24, r26
    194c:	9b 1f       	adc	r25, r27
    194e:	dc 01       	movw	r26, r24
    1950:	aa 0f       	add	r26, r26
    1952:	bb 1f       	adc	r27, r27
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	8c 0f       	add	r24, r28
    195a:	9d 1f       	adc	r25, r29
    195c:	a8 0f       	add	r26, r24
    195e:	b9 1f       	adc	r27, r25
    1960:	0d 93       	st	X+, r16
    1962:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1964:	42 17       	cp	r20, r18
    1966:	53 07       	cpc	r21, r19
    1968:	b1 f6       	brne	.-84     	; 0x1916 <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    196a:	f3 01       	movw	r30, r6
    196c:	14 82       	std	Z+4, r1	; 0x04
    196e:	13 82       	std	Z+3, r1	; 0x03
    1970:	14 14       	cp	r1, r4
    1972:	15 04       	cpc	r1, r5
    1974:	0c f0       	brlt	.+2      	; 0x1978 <_ZN4QEPU3runEv+0x110>
    1976:	c6 c0       	rjmp	.+396    	; 0x1b04 <_ZN4QEPU3runEv+0x29c>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    197c:	5e 01       	movw	r10, r28
    197e:	f2 e6       	ldi	r31, 0x62	; 98
    1980:	af 0e       	add	r10, r31
    1982:	b1 1c       	adc	r11, r1
    1984:	6e 01       	movw	r12, r28
    1986:	2b e5       	ldi	r18, 0x5B	; 91
    1988:	c2 0e       	add	r12, r18
    198a:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    198c:	0f 2e       	mov	r0, r31
    198e:	fa eb       	ldi	r31, 0xBA	; 186
    1990:	8f 2e       	mov	r8, r31
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	9f 2e       	mov	r9, r31
    1996:	f0 2d       	mov	r31, r0
    1998:	ae 96       	adiw	r28, 0x2e	; 46
    199a:	af ae       	std	Y+63, r10	; 0x3f
    199c:	ae 97       	sbiw	r28, 0x2e	; 46
    199e:	af 96       	adiw	r28, 0x2f	; 47
    19a0:	bf ae       	std	Y+63, r11	; 0x3f
    19a2:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    19a4:	e0 96       	adiw	r28, 0x30	; 48
    19a6:	cf ae       	std	Y+63, r12	; 0x3f
    19a8:	e0 97       	sbiw	r28, 0x30	; 48
    19aa:	e1 96       	adiw	r28, 0x31	; 49
    19ac:	df ae       	std	Y+63, r13	; 0x3f
    19ae:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    19b0:	f5 01       	movw	r30, r10
    19b2:	10 82       	st	Z, r1
    19b4:	11 82       	std	Z+1, r1	; 0x01
    19b6:	12 82       	std	Z+2, r1	; 0x02
    19b8:	13 82       	std	Z+3, r1	; 0x03
    19ba:	14 82       	std	Z+4, r1	; 0x04
    19bc:	15 82       	std	Z+5, r1	; 0x05
    19be:	16 82       	std	Z+6, r1	; 0x06
    19c0:	f6 01       	movw	r30, r12
    19c2:	10 82       	st	Z, r1
    19c4:	11 82       	std	Z+1, r1	; 0x01
    19c6:	12 82       	std	Z+2, r1	; 0x02
    19c8:	13 82       	std	Z+3, r1	; 0x03
    19ca:	14 82       	std	Z+4, r1	; 0x04
    19cc:	15 82       	std	Z+5, r1	; 0x05
    19ce:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	fc 01       	movw	r30, r24
    19d6:	ee 0f       	add	r30, r30
    19d8:	ff 1f       	adc	r31, r31
    19da:	ee 0f       	add	r30, r30
    19dc:	ff 1f       	adc	r31, r31
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	8e 0f       	add	r24, r30
    19e4:	9f 1f       	adc	r25, r31
    19e6:	e1 e0       	ldi	r30, 0x01	; 1
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	ec 0f       	add	r30, r28
    19ec:	fd 1f       	adc	r31, r29
    19ee:	e8 0f       	add	r30, r24
    19f0:	f9 1f       	adc	r31, r25
    19f2:	20 80       	ld	r2, Z
    19f4:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    19f6:	00 e0       	ldi	r16, 0x00	; 0
    19f8:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    19fa:	0f 5f       	subi	r16, 0xFF	; 255
    19fc:	1f 4f       	sbci	r17, 0xFF	; 255
    19fe:	f3 01       	movw	r30, r6
    1a00:	83 81       	ldd	r24, Z+3	; 0x03
    1a02:	94 81       	ldd	r25, Z+4	; 0x04
    1a04:	fc 01       	movw	r30, r24
    1a06:	ee 0f       	add	r30, r30
    1a08:	ff 1f       	adc	r31, r31
    1a0a:	ee 0f       	add	r30, r30
    1a0c:	ff 1f       	adc	r31, r31
    1a0e:	ee 0f       	add	r30, r30
    1a10:	ff 1f       	adc	r31, r31
    1a12:	8e 0f       	add	r24, r30
    1a14:	9f 1f       	adc	r25, r31
    1a16:	80 0f       	add	r24, r16
    1a18:	91 1f       	adc	r25, r17
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	8c 0f       	add	r24, r28
    1a26:	9d 1f       	adc	r25, r29
    1a28:	e8 0f       	add	r30, r24
    1a2a:	f9 1f       	adc	r31, r25
    1a2c:	81 81       	ldd	r24, Z+1	; 0x01
    1a2e:	8f 93       	push	r24
    1a30:	80 81       	ld	r24, Z
    1a32:	8f 93       	push	r24
    1a34:	bf 92       	push	r11
    1a36:	af 92       	push	r10
    1a38:	9f 92       	push	r9
    1a3a:	8f 92       	push	r8
    1a3c:	bf 92       	push	r11
    1a3e:	af 92       	push	r10
    1a40:	0e 94 b1 13 	call	0x2762	; 0x2762 <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1a44:	f3 01       	movw	r30, r6
    1a46:	83 81       	ldd	r24, Z+3	; 0x03
    1a48:	94 81       	ldd	r25, Z+4	; 0x04
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	ee 0f       	add	r30, r30
    1a4e:	ff 1f       	adc	r31, r31
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	e8 0f       	add	r30, r24
    1a5a:	f9 1f       	adc	r31, r25
    1a5c:	e0 0f       	add	r30, r16
    1a5e:	f1 1f       	adc	r31, r17
    1a60:	34 96       	adiw	r30, 0x04	; 4
    1a62:	ee 0f       	add	r30, r30
    1a64:	ff 1f       	adc	r31, r31
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	8c 0f       	add	r24, r28
    1a6c:	9d 1f       	adc	r25, r29
    1a6e:	e8 0f       	add	r30, r24
    1a70:	f9 1f       	adc	r31, r25
    1a72:	81 81       	ldd	r24, Z+1	; 0x01
    1a74:	8f 93       	push	r24
    1a76:	80 81       	ld	r24, Z
    1a78:	8f 93       	push	r24
    1a7a:	df 92       	push	r13
    1a7c:	cf 92       	push	r12
    1a7e:	9f 92       	push	r9
    1a80:	8f 92       	push	r8
    1a82:	df 92       	push	r13
    1a84:	cf 92       	push	r12
    1a86:	0e 94 b1 13 	call	0x2762	; 0x2762 <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	04 30       	cpi	r16, 0x04	; 4
    1a96:	11 05       	cpc	r17, r1
    1a98:	09 f0       	breq	.+2      	; 0x1a9c <_ZN4QEPU3runEv+0x234>
    1a9a:	af cf       	rjmp	.-162    	; 0x19fa <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    1a9c:	40 e1       	ldi	r20, 0x10	; 16
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	e0 96       	adiw	r28, 0x30	; 48
    1aa6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1aa8:	e0 97       	sbiw	r28, 0x30	; 48
    1aaa:	e1 96       	adiw	r28, 0x31	; 49
    1aac:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aae:	e1 97       	sbiw	r28, 0x31	; 49
    1ab0:	0e 94 75 12 	call	0x24ea	; 0x24ea <strtol>
    1ab4:	ad 96       	adiw	r28, 0x2d	; 45
    1ab6:	6c af       	std	Y+60, r22	; 0x3c
    1ab8:	7d af       	std	Y+61, r23	; 0x3d
    1aba:	8e af       	std	Y+62, r24	; 0x3e
    1abc:	9f af       	std	Y+63, r25	; 0x3f
    1abe:	ad 97       	sbiw	r28, 0x2d	; 45
    1ac0:	40 e1       	ldi	r20, 0x10	; 16
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	ae 96       	adiw	r28, 0x2e	; 46
    1aca:	8f ad       	ldd	r24, Y+63	; 0x3f
    1acc:	ae 97       	sbiw	r28, 0x2e	; 46
    1ace:	af 96       	adiw	r28, 0x2f	; 47
    1ad0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ad2:	af 97       	sbiw	r28, 0x2f	; 47
    1ad4:	0e 94 75 12 	call	0x24ea	; 0x24ea <strtol>
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	ad 96       	adiw	r28, 0x2d	; 45
    1ade:	ec ac       	ldd	r14, Y+60	; 0x3c
    1ae0:	fd ac       	ldd	r15, Y+61	; 0x3d
    1ae2:	0e ad       	ldd	r16, Y+62	; 0x3e
    1ae4:	1f ad       	ldd	r17, Y+63	; 0x3f
    1ae6:	ad 97       	sbiw	r28, 0x2d	; 45
    1ae8:	b1 01       	movw	r22, r2
    1aea:	c3 01       	movw	r24, r6
    1aec:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1af0:	f3 01       	movw	r30, r6
    1af2:	83 81       	ldd	r24, Z+3	; 0x03
    1af4:	94 81       	ldd	r25, Z+4	; 0x04
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	94 83       	std	Z+4, r25	; 0x04
    1afa:	83 83       	std	Z+3, r24	; 0x03
    1afc:	84 15       	cp	r24, r4
    1afe:	95 05       	cpc	r25, r5
    1b00:	0c f4       	brge	.+2      	; 0x1b04 <_ZN4QEPU3runEv+0x29c>
    1b02:	56 cf       	rjmp	.-340    	; 0x19b0 <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    1b04:	c3 01       	movw	r24, r6
    1b06:	0e 94 87 09 	call	0x130e	; 0x130e <_ZN4QEPU7dumpmemEv>
    1b0a:	04 c0       	rjmp	.+8      	; 0x1b14 <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1b0c:	f3 01       	movw	r30, r6
    1b0e:	14 82       	std	Z+4, r1	; 0x04
    1b10:	13 82       	std	Z+3, r1	; 0x03
    1b12:	f8 cf       	rjmp	.-16     	; 0x1b04 <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    1b14:	c0 59       	subi	r28, 0x90	; 144
    1b16:	df 4f       	sbci	r29, 0xFF	; 255
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	bf 90       	pop	r11
    1b34:	af 90       	pop	r10
    1b36:	9f 90       	pop	r9
    1b38:	8f 90       	pop	r8
    1b3a:	7f 90       	pop	r7
    1b3c:	6f 90       	pop	r6
    1b3e:	5f 90       	pop	r5
    1b40:	4f 90       	pop	r4
    1b42:	3f 90       	pop	r3
    1b44:	2f 90       	pop	r2
    1b46:	08 95       	ret

00001b48 <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    1b48:	83 e3       	ldi	r24, 0x33	; 51
    1b4a:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    1b4c:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    1b4e:	86 e8       	ldi	r24, 0x86	; 134
    1b50:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    1b52:	88 e1       	ldi	r24, 0x18	; 24
    1b54:	8a b9       	out	0x0a, r24	; 10
    1b56:	08 95       	ret

00001b58 <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    1b58:	5d 9b       	sbis	0x0b, 5	; 11
    1b5a:	fe cf       	rjmp	.-4      	; 0x1b58 <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    1b5c:	6c b9       	out	0x0c, r22	; 12
    1b5e:	08 95       	ret

00001b60 <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	8c 01       	movw	r16, r24
    1b6a:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    1b6c:	68 81       	ld	r22, Y
    1b6e:	66 23       	and	r22, r22
    1b70:	39 f0       	breq	.+14     	; 0x1b80 <_ZN6Serial8writestrEPc+0x20>
    1b72:	21 96       	adiw	r28, 0x01	; 1
    1b74:	c8 01       	movw	r24, r16
    1b76:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN6Serial5writeEc>
    1b7a:	69 91       	ld	r22, Y+
    1b7c:	61 11       	cpse	r22, r1
    1b7e:	fa cf       	rjmp	.-12     	; 0x1b74 <_ZN6Serial8writestrEPc+0x14>
}
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	08 95       	ret

00001b8a <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	ec 01       	movw	r28, r24
	writestr(data);
    1b90:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    1b94:	6d e0       	ldi	r22, 0x0D	; 13
    1b96:	ce 01       	movw	r24, r28
    1b98:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <_ZN6Serial5writeEc>
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	08 95       	ret

00001ba2 <acos>:
    1ba2:	9f 93       	push	r25
    1ba4:	9f 77       	andi	r25, 0x7F	; 127
    1ba6:	71 d1       	rcall	.+738    	; 0x1e8a <__fp_arccos>
    1ba8:	0f 90       	pop	r0
    1baa:	00 20       	and	r0, r0
    1bac:	3a f4       	brpl	.+14     	; 0x1bbc <acos+0x1a>
    1bae:	90 58       	subi	r25, 0x80	; 128
    1bb0:	a2 ea       	ldi	r26, 0xA2	; 162
    1bb2:	2a ed       	ldi	r18, 0xDA	; 218
    1bb4:	3f e0       	ldi	r19, 0x0F	; 15
    1bb6:	49 e4       	ldi	r20, 0x49	; 73
    1bb8:	50 e4       	ldi	r21, 0x40	; 64
    1bba:	13 d0       	rcall	.+38     	; 0x1be2 <__addsf3x>
    1bbc:	e5 c1       	rjmp	.+970    	; 0x1f88 <__fp_round>

00001bbe <__subsf3>:
    1bbe:	50 58       	subi	r21, 0x80	; 128

00001bc0 <__addsf3>:
    1bc0:	bb 27       	eor	r27, r27
    1bc2:	aa 27       	eor	r26, r26
    1bc4:	0e d0       	rcall	.+28     	; 0x1be2 <__addsf3x>
    1bc6:	e0 c1       	rjmp	.+960    	; 0x1f88 <__fp_round>
    1bc8:	a9 d1       	rcall	.+850    	; 0x1f1c <__fp_pscA>
    1bca:	30 f0       	brcs	.+12     	; 0x1bd8 <__addsf3+0x18>
    1bcc:	ae d1       	rcall	.+860    	; 0x1f2a <__fp_pscB>
    1bce:	20 f0       	brcs	.+8      	; 0x1bd8 <__addsf3+0x18>
    1bd0:	31 f4       	brne	.+12     	; 0x1bde <__addsf3+0x1e>
    1bd2:	9f 3f       	cpi	r25, 0xFF	; 255
    1bd4:	11 f4       	brne	.+4      	; 0x1bda <__addsf3+0x1a>
    1bd6:	1e f4       	brtc	.+6      	; 0x1bde <__addsf3+0x1e>
    1bd8:	79 c1       	rjmp	.+754    	; 0x1ecc <__fp_nan>
    1bda:	0e f4       	brtc	.+2      	; 0x1bde <__addsf3+0x1e>
    1bdc:	e0 95       	com	r30
    1bde:	e7 fb       	bst	r30, 7
    1be0:	6f c1       	rjmp	.+734    	; 0x1ec0 <__fp_inf>

00001be2 <__addsf3x>:
    1be2:	e9 2f       	mov	r30, r25
    1be4:	f3 d1       	rcall	.+998    	; 0x1fcc <__fp_split3>
    1be6:	80 f3       	brcs	.-32     	; 0x1bc8 <__addsf3+0x8>
    1be8:	ba 17       	cp	r27, r26
    1bea:	62 07       	cpc	r22, r18
    1bec:	73 07       	cpc	r23, r19
    1bee:	84 07       	cpc	r24, r20
    1bf0:	95 07       	cpc	r25, r21
    1bf2:	18 f0       	brcs	.+6      	; 0x1bfa <__addsf3x+0x18>
    1bf4:	71 f4       	brne	.+28     	; 0x1c12 <__addsf3x+0x30>
    1bf6:	9e f5       	brtc	.+102    	; 0x1c5e <__addsf3x+0x7c>
    1bf8:	0b c2       	rjmp	.+1046   	; 0x2010 <__fp_zero>
    1bfa:	0e f4       	brtc	.+2      	; 0x1bfe <__addsf3x+0x1c>
    1bfc:	e0 95       	com	r30
    1bfe:	0b 2e       	mov	r0, r27
    1c00:	ba 2f       	mov	r27, r26
    1c02:	a0 2d       	mov	r26, r0
    1c04:	0b 01       	movw	r0, r22
    1c06:	b9 01       	movw	r22, r18
    1c08:	90 01       	movw	r18, r0
    1c0a:	0c 01       	movw	r0, r24
    1c0c:	ca 01       	movw	r24, r20
    1c0e:	a0 01       	movw	r20, r0
    1c10:	11 24       	eor	r1, r1
    1c12:	ff 27       	eor	r31, r31
    1c14:	59 1b       	sub	r21, r25
    1c16:	99 f0       	breq	.+38     	; 0x1c3e <__addsf3x+0x5c>
    1c18:	59 3f       	cpi	r21, 0xF9	; 249
    1c1a:	50 f4       	brcc	.+20     	; 0x1c30 <__addsf3x+0x4e>
    1c1c:	50 3e       	cpi	r21, 0xE0	; 224
    1c1e:	68 f1       	brcs	.+90     	; 0x1c7a <__addsf3x+0x98>
    1c20:	1a 16       	cp	r1, r26
    1c22:	f0 40       	sbci	r31, 0x00	; 0
    1c24:	a2 2f       	mov	r26, r18
    1c26:	23 2f       	mov	r18, r19
    1c28:	34 2f       	mov	r19, r20
    1c2a:	44 27       	eor	r20, r20
    1c2c:	58 5f       	subi	r21, 0xF8	; 248
    1c2e:	f3 cf       	rjmp	.-26     	; 0x1c16 <__addsf3x+0x34>
    1c30:	46 95       	lsr	r20
    1c32:	37 95       	ror	r19
    1c34:	27 95       	ror	r18
    1c36:	a7 95       	ror	r26
    1c38:	f0 40       	sbci	r31, 0x00	; 0
    1c3a:	53 95       	inc	r21
    1c3c:	c9 f7       	brne	.-14     	; 0x1c30 <__addsf3x+0x4e>
    1c3e:	7e f4       	brtc	.+30     	; 0x1c5e <__addsf3x+0x7c>
    1c40:	1f 16       	cp	r1, r31
    1c42:	ba 0b       	sbc	r27, r26
    1c44:	62 0b       	sbc	r22, r18
    1c46:	73 0b       	sbc	r23, r19
    1c48:	84 0b       	sbc	r24, r20
    1c4a:	ba f0       	brmi	.+46     	; 0x1c7a <__addsf3x+0x98>
    1c4c:	91 50       	subi	r25, 0x01	; 1
    1c4e:	a1 f0       	breq	.+40     	; 0x1c78 <__addsf3x+0x96>
    1c50:	ff 0f       	add	r31, r31
    1c52:	bb 1f       	adc	r27, r27
    1c54:	66 1f       	adc	r22, r22
    1c56:	77 1f       	adc	r23, r23
    1c58:	88 1f       	adc	r24, r24
    1c5a:	c2 f7       	brpl	.-16     	; 0x1c4c <__addsf3x+0x6a>
    1c5c:	0e c0       	rjmp	.+28     	; 0x1c7a <__addsf3x+0x98>
    1c5e:	ba 0f       	add	r27, r26
    1c60:	62 1f       	adc	r22, r18
    1c62:	73 1f       	adc	r23, r19
    1c64:	84 1f       	adc	r24, r20
    1c66:	48 f4       	brcc	.+18     	; 0x1c7a <__addsf3x+0x98>
    1c68:	87 95       	ror	r24
    1c6a:	77 95       	ror	r23
    1c6c:	67 95       	ror	r22
    1c6e:	b7 95       	ror	r27
    1c70:	f7 95       	ror	r31
    1c72:	9e 3f       	cpi	r25, 0xFE	; 254
    1c74:	08 f0       	brcs	.+2      	; 0x1c78 <__addsf3x+0x96>
    1c76:	b3 cf       	rjmp	.-154    	; 0x1bde <__addsf3+0x1e>
    1c78:	93 95       	inc	r25
    1c7a:	88 0f       	add	r24, r24
    1c7c:	08 f0       	brcs	.+2      	; 0x1c80 <__addsf3x+0x9e>
    1c7e:	99 27       	eor	r25, r25
    1c80:	ee 0f       	add	r30, r30
    1c82:	97 95       	ror	r25
    1c84:	87 95       	ror	r24
    1c86:	08 95       	ret

00001c88 <atan>:
    1c88:	df 93       	push	r29
    1c8a:	dd 27       	eor	r29, r29
    1c8c:	b9 2f       	mov	r27, r25
    1c8e:	bf 77       	andi	r27, 0x7F	; 127
    1c90:	40 e8       	ldi	r20, 0x80	; 128
    1c92:	5f e3       	ldi	r21, 0x3F	; 63
    1c94:	16 16       	cp	r1, r22
    1c96:	17 06       	cpc	r1, r23
    1c98:	48 07       	cpc	r20, r24
    1c9a:	5b 07       	cpc	r21, r27
    1c9c:	10 f4       	brcc	.+4      	; 0x1ca2 <atan+0x1a>
    1c9e:	d9 2f       	mov	r29, r25
    1ca0:	be d1       	rcall	.+892    	; 0x201e <inverse>
    1ca2:	9f 93       	push	r25
    1ca4:	8f 93       	push	r24
    1ca6:	7f 93       	push	r23
    1ca8:	6f 93       	push	r22
    1caa:	6b d2       	rcall	.+1238   	; 0x2182 <square>
    1cac:	e0 e8       	ldi	r30, 0x80	; 128
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	10 d1       	rcall	.+544    	; 0x1ed2 <__fp_powser>
    1cb2:	6a d1       	rcall	.+724    	; 0x1f88 <__fp_round>
    1cb4:	2f 91       	pop	r18
    1cb6:	3f 91       	pop	r19
    1cb8:	4f 91       	pop	r20
    1cba:	5f 91       	pop	r21
    1cbc:	c3 d1       	rcall	.+902    	; 0x2044 <__mulsf3x>
    1cbe:	dd 23       	and	r29, r29
    1cc0:	49 f0       	breq	.+18     	; 0x1cd4 <atan+0x4c>
    1cc2:	90 58       	subi	r25, 0x80	; 128
    1cc4:	a2 ea       	ldi	r26, 0xA2	; 162
    1cc6:	2a ed       	ldi	r18, 0xDA	; 218
    1cc8:	3f e0       	ldi	r19, 0x0F	; 15
    1cca:	49 ec       	ldi	r20, 0xC9	; 201
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	d0 78       	andi	r29, 0x80	; 128
    1cd0:	5d 27       	eor	r21, r29
    1cd2:	87 df       	rcall	.-242    	; 0x1be2 <__addsf3x>
    1cd4:	df 91       	pop	r29
    1cd6:	58 c1       	rjmp	.+688    	; 0x1f88 <__fp_round>

00001cd8 <cos>:
    1cd8:	30 d1       	rcall	.+608    	; 0x1f3a <__fp_rempio2>
    1cda:	e3 95       	inc	r30
    1cdc:	66 c1       	rjmp	.+716    	; 0x1faa <__fp_sinus>

00001cde <__divsf3>:
    1cde:	0c d0       	rcall	.+24     	; 0x1cf8 <__divsf3x>
    1ce0:	53 c1       	rjmp	.+678    	; 0x1f88 <__fp_round>
    1ce2:	23 d1       	rcall	.+582    	; 0x1f2a <__fp_pscB>
    1ce4:	40 f0       	brcs	.+16     	; 0x1cf6 <__divsf3+0x18>
    1ce6:	1a d1       	rcall	.+564    	; 0x1f1c <__fp_pscA>
    1ce8:	30 f0       	brcs	.+12     	; 0x1cf6 <__divsf3+0x18>
    1cea:	21 f4       	brne	.+8      	; 0x1cf4 <__divsf3+0x16>
    1cec:	5f 3f       	cpi	r21, 0xFF	; 255
    1cee:	19 f0       	breq	.+6      	; 0x1cf6 <__divsf3+0x18>
    1cf0:	e7 c0       	rjmp	.+462    	; 0x1ec0 <__fp_inf>
    1cf2:	51 11       	cpse	r21, r1
    1cf4:	8e c1       	rjmp	.+796    	; 0x2012 <__fp_szero>
    1cf6:	ea c0       	rjmp	.+468    	; 0x1ecc <__fp_nan>

00001cf8 <__divsf3x>:
    1cf8:	69 d1       	rcall	.+722    	; 0x1fcc <__fp_split3>
    1cfa:	98 f3       	brcs	.-26     	; 0x1ce2 <__divsf3+0x4>

00001cfc <__divsf3_pse>:
    1cfc:	99 23       	and	r25, r25
    1cfe:	c9 f3       	breq	.-14     	; 0x1cf2 <__divsf3+0x14>
    1d00:	55 23       	and	r21, r21
    1d02:	b1 f3       	breq	.-20     	; 0x1cf0 <__divsf3+0x12>
    1d04:	95 1b       	sub	r25, r21
    1d06:	55 0b       	sbc	r21, r21
    1d08:	bb 27       	eor	r27, r27
    1d0a:	aa 27       	eor	r26, r26
    1d0c:	62 17       	cp	r22, r18
    1d0e:	73 07       	cpc	r23, r19
    1d10:	84 07       	cpc	r24, r20
    1d12:	38 f0       	brcs	.+14     	; 0x1d22 <__divsf3_pse+0x26>
    1d14:	9f 5f       	subi	r25, 0xFF	; 255
    1d16:	5f 4f       	sbci	r21, 0xFF	; 255
    1d18:	22 0f       	add	r18, r18
    1d1a:	33 1f       	adc	r19, r19
    1d1c:	44 1f       	adc	r20, r20
    1d1e:	aa 1f       	adc	r26, r26
    1d20:	a9 f3       	breq	.-22     	; 0x1d0c <__divsf3_pse+0x10>
    1d22:	33 d0       	rcall	.+102    	; 0x1d8a <__divsf3_pse+0x8e>
    1d24:	0e 2e       	mov	r0, r30
    1d26:	3a f0       	brmi	.+14     	; 0x1d36 <__divsf3_pse+0x3a>
    1d28:	e0 e8       	ldi	r30, 0x80	; 128
    1d2a:	30 d0       	rcall	.+96     	; 0x1d8c <__divsf3_pse+0x90>
    1d2c:	91 50       	subi	r25, 0x01	; 1
    1d2e:	50 40       	sbci	r21, 0x00	; 0
    1d30:	e6 95       	lsr	r30
    1d32:	00 1c       	adc	r0, r0
    1d34:	ca f7       	brpl	.-14     	; 0x1d28 <__divsf3_pse+0x2c>
    1d36:	29 d0       	rcall	.+82     	; 0x1d8a <__divsf3_pse+0x8e>
    1d38:	fe 2f       	mov	r31, r30
    1d3a:	27 d0       	rcall	.+78     	; 0x1d8a <__divsf3_pse+0x8e>
    1d3c:	66 0f       	add	r22, r22
    1d3e:	77 1f       	adc	r23, r23
    1d40:	88 1f       	adc	r24, r24
    1d42:	bb 1f       	adc	r27, r27
    1d44:	26 17       	cp	r18, r22
    1d46:	37 07       	cpc	r19, r23
    1d48:	48 07       	cpc	r20, r24
    1d4a:	ab 07       	cpc	r26, r27
    1d4c:	b0 e8       	ldi	r27, 0x80	; 128
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <__divsf3_pse+0x56>
    1d50:	bb 0b       	sbc	r27, r27
    1d52:	80 2d       	mov	r24, r0
    1d54:	bf 01       	movw	r22, r30
    1d56:	ff 27       	eor	r31, r31
    1d58:	93 58       	subi	r25, 0x83	; 131
    1d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5c:	2a f0       	brmi	.+10     	; 0x1d68 <__divsf3_pse+0x6c>
    1d5e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d60:	51 05       	cpc	r21, r1
    1d62:	68 f0       	brcs	.+26     	; 0x1d7e <__divsf3_pse+0x82>
    1d64:	ad c0       	rjmp	.+346    	; 0x1ec0 <__fp_inf>
    1d66:	55 c1       	rjmp	.+682    	; 0x2012 <__fp_szero>
    1d68:	5f 3f       	cpi	r21, 0xFF	; 255
    1d6a:	ec f3       	brlt	.-6      	; 0x1d66 <__divsf3_pse+0x6a>
    1d6c:	98 3e       	cpi	r25, 0xE8	; 232
    1d6e:	dc f3       	brlt	.-10     	; 0x1d66 <__divsf3_pse+0x6a>
    1d70:	86 95       	lsr	r24
    1d72:	77 95       	ror	r23
    1d74:	67 95       	ror	r22
    1d76:	b7 95       	ror	r27
    1d78:	f7 95       	ror	r31
    1d7a:	9f 5f       	subi	r25, 0xFF	; 255
    1d7c:	c9 f7       	brne	.-14     	; 0x1d70 <__divsf3_pse+0x74>
    1d7e:	88 0f       	add	r24, r24
    1d80:	91 1d       	adc	r25, r1
    1d82:	96 95       	lsr	r25
    1d84:	87 95       	ror	r24
    1d86:	97 f9       	bld	r25, 7
    1d88:	08 95       	ret
    1d8a:	e1 e0       	ldi	r30, 0x01	; 1
    1d8c:	66 0f       	add	r22, r22
    1d8e:	77 1f       	adc	r23, r23
    1d90:	88 1f       	adc	r24, r24
    1d92:	bb 1f       	adc	r27, r27
    1d94:	62 17       	cp	r22, r18
    1d96:	73 07       	cpc	r23, r19
    1d98:	84 07       	cpc	r24, r20
    1d9a:	ba 07       	cpc	r27, r26
    1d9c:	20 f0       	brcs	.+8      	; 0x1da6 <__divsf3_pse+0xaa>
    1d9e:	62 1b       	sub	r22, r18
    1da0:	73 0b       	sbc	r23, r19
    1da2:	84 0b       	sbc	r24, r20
    1da4:	ba 0b       	sbc	r27, r26
    1da6:	ee 1f       	adc	r30, r30
    1da8:	88 f7       	brcc	.-30     	; 0x1d8c <__divsf3_pse+0x90>
    1daa:	e0 95       	com	r30
    1dac:	08 95       	ret

00001dae <__fixsfsi>:
    1dae:	04 d0       	rcall	.+8      	; 0x1db8 <__fixunssfsi>
    1db0:	68 94       	set
    1db2:	b1 11       	cpse	r27, r1
    1db4:	2e c1       	rjmp	.+604    	; 0x2012 <__fp_szero>
    1db6:	08 95       	ret

00001db8 <__fixunssfsi>:
    1db8:	11 d1       	rcall	.+546    	; 0x1fdc <__fp_splitA>
    1dba:	88 f0       	brcs	.+34     	; 0x1dde <__fixunssfsi+0x26>
    1dbc:	9f 57       	subi	r25, 0x7F	; 127
    1dbe:	90 f0       	brcs	.+36     	; 0x1de4 <__fixunssfsi+0x2c>
    1dc0:	b9 2f       	mov	r27, r25
    1dc2:	99 27       	eor	r25, r25
    1dc4:	b7 51       	subi	r27, 0x17	; 23
    1dc6:	a0 f0       	brcs	.+40     	; 0x1df0 <__fixunssfsi+0x38>
    1dc8:	d1 f0       	breq	.+52     	; 0x1dfe <__fixunssfsi+0x46>
    1dca:	66 0f       	add	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	1a f0       	brmi	.+6      	; 0x1dda <__fixunssfsi+0x22>
    1dd4:	ba 95       	dec	r27
    1dd6:	c9 f7       	brne	.-14     	; 0x1dca <__fixunssfsi+0x12>
    1dd8:	12 c0       	rjmp	.+36     	; 0x1dfe <__fixunssfsi+0x46>
    1dda:	b1 30       	cpi	r27, 0x01	; 1
    1ddc:	81 f0       	breq	.+32     	; 0x1dfe <__fixunssfsi+0x46>
    1dde:	18 d1       	rcall	.+560    	; 0x2010 <__fp_zero>
    1de0:	b1 e0       	ldi	r27, 0x01	; 1
    1de2:	08 95       	ret
    1de4:	15 c1       	rjmp	.+554    	; 0x2010 <__fp_zero>
    1de6:	67 2f       	mov	r22, r23
    1de8:	78 2f       	mov	r23, r24
    1dea:	88 27       	eor	r24, r24
    1dec:	b8 5f       	subi	r27, 0xF8	; 248
    1dee:	39 f0       	breq	.+14     	; 0x1dfe <__fixunssfsi+0x46>
    1df0:	b9 3f       	cpi	r27, 0xF9	; 249
    1df2:	cc f3       	brlt	.-14     	; 0x1de6 <__fixunssfsi+0x2e>
    1df4:	86 95       	lsr	r24
    1df6:	77 95       	ror	r23
    1df8:	67 95       	ror	r22
    1dfa:	b3 95       	inc	r27
    1dfc:	d9 f7       	brne	.-10     	; 0x1df4 <__fixunssfsi+0x3c>
    1dfe:	3e f4       	brtc	.+14     	; 0x1e0e <__fixunssfsi+0x56>
    1e00:	90 95       	com	r25
    1e02:	80 95       	com	r24
    1e04:	70 95       	com	r23
    1e06:	61 95       	neg	r22
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	08 95       	ret

00001e10 <__floatunsisf>:
    1e10:	e8 94       	clt
    1e12:	09 c0       	rjmp	.+18     	; 0x1e26 <__floatsisf+0x12>

00001e14 <__floatsisf>:
    1e14:	97 fb       	bst	r25, 7
    1e16:	3e f4       	brtc	.+14     	; 0x1e26 <__floatsisf+0x12>
    1e18:	90 95       	com	r25
    1e1a:	80 95       	com	r24
    1e1c:	70 95       	com	r23
    1e1e:	61 95       	neg	r22
    1e20:	7f 4f       	sbci	r23, 0xFF	; 255
    1e22:	8f 4f       	sbci	r24, 0xFF	; 255
    1e24:	9f 4f       	sbci	r25, 0xFF	; 255
    1e26:	99 23       	and	r25, r25
    1e28:	a9 f0       	breq	.+42     	; 0x1e54 <__floatsisf+0x40>
    1e2a:	f9 2f       	mov	r31, r25
    1e2c:	96 e9       	ldi	r25, 0x96	; 150
    1e2e:	bb 27       	eor	r27, r27
    1e30:	93 95       	inc	r25
    1e32:	f6 95       	lsr	r31
    1e34:	87 95       	ror	r24
    1e36:	77 95       	ror	r23
    1e38:	67 95       	ror	r22
    1e3a:	b7 95       	ror	r27
    1e3c:	f1 11       	cpse	r31, r1
    1e3e:	f8 cf       	rjmp	.-16     	; 0x1e30 <__floatsisf+0x1c>
    1e40:	fa f4       	brpl	.+62     	; 0x1e80 <__floatsisf+0x6c>
    1e42:	bb 0f       	add	r27, r27
    1e44:	11 f4       	brne	.+4      	; 0x1e4a <__floatsisf+0x36>
    1e46:	60 ff       	sbrs	r22, 0
    1e48:	1b c0       	rjmp	.+54     	; 0x1e80 <__floatsisf+0x6c>
    1e4a:	6f 5f       	subi	r22, 0xFF	; 255
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e50:	9f 4f       	sbci	r25, 0xFF	; 255
    1e52:	16 c0       	rjmp	.+44     	; 0x1e80 <__floatsisf+0x6c>
    1e54:	88 23       	and	r24, r24
    1e56:	11 f0       	breq	.+4      	; 0x1e5c <__floatsisf+0x48>
    1e58:	96 e9       	ldi	r25, 0x96	; 150
    1e5a:	11 c0       	rjmp	.+34     	; 0x1e7e <__floatsisf+0x6a>
    1e5c:	77 23       	and	r23, r23
    1e5e:	21 f0       	breq	.+8      	; 0x1e68 <__floatsisf+0x54>
    1e60:	9e e8       	ldi	r25, 0x8E	; 142
    1e62:	87 2f       	mov	r24, r23
    1e64:	76 2f       	mov	r23, r22
    1e66:	05 c0       	rjmp	.+10     	; 0x1e72 <__floatsisf+0x5e>
    1e68:	66 23       	and	r22, r22
    1e6a:	71 f0       	breq	.+28     	; 0x1e88 <__floatsisf+0x74>
    1e6c:	96 e8       	ldi	r25, 0x86	; 134
    1e6e:	86 2f       	mov	r24, r22
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	2a f0       	brmi	.+10     	; 0x1e80 <__floatsisf+0x6c>
    1e76:	9a 95       	dec	r25
    1e78:	66 0f       	add	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	88 1f       	adc	r24, r24
    1e7e:	da f7       	brpl	.-10     	; 0x1e76 <__floatsisf+0x62>
    1e80:	88 0f       	add	r24, r24
    1e82:	96 95       	lsr	r25
    1e84:	87 95       	ror	r24
    1e86:	97 f9       	bld	r25, 7
    1e88:	08 95       	ret

00001e8a <__fp_arccos>:
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	1f 93       	push	r17
    1e90:	0f 93       	push	r16
    1e92:	8b 01       	movw	r16, r22
    1e94:	ec 01       	movw	r28, r24
    1e96:	ed ea       	ldi	r30, 0xAD	; 173
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	1b d0       	rcall	.+54     	; 0x1ed2 <__fp_powser>
    1e9c:	75 d0       	rcall	.+234    	; 0x1f88 <__fp_round>
    1e9e:	98 01       	movw	r18, r16
    1ea0:	ae 01       	movw	r20, r28
    1ea2:	8b 01       	movw	r16, r22
    1ea4:	ec 01       	movw	r28, r24
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	80 e8       	ldi	r24, 0x80	; 128
    1eac:	9f e3       	ldi	r25, 0x3F	; 63
    1eae:	87 de       	rcall	.-754    	; 0x1bbe <__subsf3>
    1eb0:	2a d1       	rcall	.+596    	; 0x2106 <sqrt>
    1eb2:	98 01       	movw	r18, r16
    1eb4:	ae 01       	movw	r20, r28
    1eb6:	0f 91       	pop	r16
    1eb8:	1f 91       	pop	r17
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	c2 c0       	rjmp	.+388    	; 0x2044 <__mulsf3x>

00001ec0 <__fp_inf>:
    1ec0:	97 f9       	bld	r25, 7
    1ec2:	9f 67       	ori	r25, 0x7F	; 127
    1ec4:	80 e8       	ldi	r24, 0x80	; 128
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	08 95       	ret

00001ecc <__fp_nan>:
    1ecc:	9f ef       	ldi	r25, 0xFF	; 255
    1ece:	80 ec       	ldi	r24, 0xC0	; 192
    1ed0:	08 95       	ret

00001ed2 <__fp_powser>:
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	1f 93       	push	r17
    1ed8:	0f 93       	push	r16
    1eda:	ff 92       	push	r15
    1edc:	ef 92       	push	r14
    1ede:	df 92       	push	r13
    1ee0:	7b 01       	movw	r14, r22
    1ee2:	8c 01       	movw	r16, r24
    1ee4:	68 94       	set
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <__fp_powser+0x20>
    1ee8:	da 2e       	mov	r13, r26
    1eea:	ef 01       	movw	r28, r30
    1eec:	ab d0       	rcall	.+342    	; 0x2044 <__mulsf3x>
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e8 94       	clt
    1ef2:	a5 91       	lpm	r26, Z+
    1ef4:	25 91       	lpm	r18, Z+
    1ef6:	35 91       	lpm	r19, Z+
    1ef8:	45 91       	lpm	r20, Z+
    1efa:	55 91       	lpm	r21, Z+
    1efc:	ae f3       	brts	.-22     	; 0x1ee8 <__fp_powser+0x16>
    1efe:	ef 01       	movw	r28, r30
    1f00:	70 de       	rcall	.-800    	; 0x1be2 <__addsf3x>
    1f02:	fe 01       	movw	r30, r28
    1f04:	97 01       	movw	r18, r14
    1f06:	a8 01       	movw	r20, r16
    1f08:	da 94       	dec	r13
    1f0a:	79 f7       	brne	.-34     	; 0x1eea <__fp_powser+0x18>
    1f0c:	df 90       	pop	r13
    1f0e:	ef 90       	pop	r14
    1f10:	ff 90       	pop	r15
    1f12:	0f 91       	pop	r16
    1f14:	1f 91       	pop	r17
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <__fp_pscA>:
    1f1c:	00 24       	eor	r0, r0
    1f1e:	0a 94       	dec	r0
    1f20:	16 16       	cp	r1, r22
    1f22:	17 06       	cpc	r1, r23
    1f24:	18 06       	cpc	r1, r24
    1f26:	09 06       	cpc	r0, r25
    1f28:	08 95       	ret

00001f2a <__fp_pscB>:
    1f2a:	00 24       	eor	r0, r0
    1f2c:	0a 94       	dec	r0
    1f2e:	12 16       	cp	r1, r18
    1f30:	13 06       	cpc	r1, r19
    1f32:	14 06       	cpc	r1, r20
    1f34:	05 06       	cpc	r0, r21
    1f36:	08 95       	ret
    1f38:	c9 cf       	rjmp	.-110    	; 0x1ecc <__fp_nan>

00001f3a <__fp_rempio2>:
    1f3a:	50 d0       	rcall	.+160    	; 0x1fdc <__fp_splitA>
    1f3c:	e8 f3       	brcs	.-6      	; 0x1f38 <__fp_pscB+0xe>
    1f3e:	e8 94       	clt
    1f40:	e0 e0       	ldi	r30, 0x00	; 0
    1f42:	bb 27       	eor	r27, r27
    1f44:	9f 57       	subi	r25, 0x7F	; 127
    1f46:	f0 f0       	brcs	.+60     	; 0x1f84 <__fp_rempio2+0x4a>
    1f48:	2a ed       	ldi	r18, 0xDA	; 218
    1f4a:	3f e0       	ldi	r19, 0x0F	; 15
    1f4c:	49 ec       	ldi	r20, 0xC9	; 201
    1f4e:	06 c0       	rjmp	.+12     	; 0x1f5c <__fp_rempio2+0x22>
    1f50:	ee 0f       	add	r30, r30
    1f52:	bb 0f       	add	r27, r27
    1f54:	66 1f       	adc	r22, r22
    1f56:	77 1f       	adc	r23, r23
    1f58:	88 1f       	adc	r24, r24
    1f5a:	28 f0       	brcs	.+10     	; 0x1f66 <__fp_rempio2+0x2c>
    1f5c:	b2 3a       	cpi	r27, 0xA2	; 162
    1f5e:	62 07       	cpc	r22, r18
    1f60:	73 07       	cpc	r23, r19
    1f62:	84 07       	cpc	r24, r20
    1f64:	28 f0       	brcs	.+10     	; 0x1f70 <__fp_rempio2+0x36>
    1f66:	b2 5a       	subi	r27, 0xA2	; 162
    1f68:	62 0b       	sbc	r22, r18
    1f6a:	73 0b       	sbc	r23, r19
    1f6c:	84 0b       	sbc	r24, r20
    1f6e:	e3 95       	inc	r30
    1f70:	9a 95       	dec	r25
    1f72:	72 f7       	brpl	.-36     	; 0x1f50 <__fp_rempio2+0x16>
    1f74:	80 38       	cpi	r24, 0x80	; 128
    1f76:	30 f4       	brcc	.+12     	; 0x1f84 <__fp_rempio2+0x4a>
    1f78:	9a 95       	dec	r25
    1f7a:	bb 0f       	add	r27, r27
    1f7c:	66 1f       	adc	r22, r22
    1f7e:	77 1f       	adc	r23, r23
    1f80:	88 1f       	adc	r24, r24
    1f82:	d2 f7       	brpl	.-12     	; 0x1f78 <__fp_rempio2+0x3e>
    1f84:	90 48       	sbci	r25, 0x80	; 128
    1f86:	02 c1       	rjmp	.+516    	; 0x218c <__fp_mpack_finite>

00001f88 <__fp_round>:
    1f88:	09 2e       	mov	r0, r25
    1f8a:	03 94       	inc	r0
    1f8c:	00 0c       	add	r0, r0
    1f8e:	11 f4       	brne	.+4      	; 0x1f94 <__fp_round+0xc>
    1f90:	88 23       	and	r24, r24
    1f92:	52 f0       	brmi	.+20     	; 0x1fa8 <__fp_round+0x20>
    1f94:	bb 0f       	add	r27, r27
    1f96:	40 f4       	brcc	.+16     	; 0x1fa8 <__fp_round+0x20>
    1f98:	bf 2b       	or	r27, r31
    1f9a:	11 f4       	brne	.+4      	; 0x1fa0 <__fp_round+0x18>
    1f9c:	60 ff       	sbrs	r22, 0
    1f9e:	04 c0       	rjmp	.+8      	; 0x1fa8 <__fp_round+0x20>
    1fa0:	6f 5f       	subi	r22, 0xFF	; 255
    1fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa8:	08 95       	ret

00001faa <__fp_sinus>:
    1faa:	ef 93       	push	r30
    1fac:	e0 ff       	sbrs	r30, 0
    1fae:	06 c0       	rjmp	.+12     	; 0x1fbc <__fp_sinus+0x12>
    1fb0:	a2 ea       	ldi	r26, 0xA2	; 162
    1fb2:	2a ed       	ldi	r18, 0xDA	; 218
    1fb4:	3f e0       	ldi	r19, 0x0F	; 15
    1fb6:	49 ec       	ldi	r20, 0xC9	; 201
    1fb8:	5f eb       	ldi	r21, 0xBF	; 191
    1fba:	13 de       	rcall	.-986    	; 0x1be2 <__addsf3x>
    1fbc:	e5 df       	rcall	.-54     	; 0x1f88 <__fp_round>
    1fbe:	0f 90       	pop	r0
    1fc0:	03 94       	inc	r0
    1fc2:	01 fc       	sbrc	r0, 1
    1fc4:	90 58       	subi	r25, 0x80	; 128
    1fc6:	e5 ed       	ldi	r30, 0xD5	; 213
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	f3 c0       	rjmp	.+486    	; 0x21b2 <__fp_powsodd>

00001fcc <__fp_split3>:
    1fcc:	57 fd       	sbrc	r21, 7
    1fce:	90 58       	subi	r25, 0x80	; 128
    1fd0:	44 0f       	add	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	59 f0       	breq	.+22     	; 0x1fec <__fp_splitA+0x10>
    1fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd8:	71 f0       	breq	.+28     	; 0x1ff6 <__fp_splitA+0x1a>
    1fda:	47 95       	ror	r20

00001fdc <__fp_splitA>:
    1fdc:	88 0f       	add	r24, r24
    1fde:	97 fb       	bst	r25, 7
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	61 f0       	breq	.+24     	; 0x1ffc <__fp_splitA+0x20>
    1fe4:	9f 3f       	cpi	r25, 0xFF	; 255
    1fe6:	79 f0       	breq	.+30     	; 0x2006 <__fp_splitA+0x2a>
    1fe8:	87 95       	ror	r24
    1fea:	08 95       	ret
    1fec:	12 16       	cp	r1, r18
    1fee:	13 06       	cpc	r1, r19
    1ff0:	14 06       	cpc	r1, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	f2 cf       	rjmp	.-28     	; 0x1fda <__fp_split3+0xe>
    1ff6:	46 95       	lsr	r20
    1ff8:	f1 df       	rcall	.-30     	; 0x1fdc <__fp_splitA>
    1ffa:	08 c0       	rjmp	.+16     	; 0x200c <__fp_splitA+0x30>
    1ffc:	16 16       	cp	r1, r22
    1ffe:	17 06       	cpc	r1, r23
    2000:	18 06       	cpc	r1, r24
    2002:	99 1f       	adc	r25, r25
    2004:	f1 cf       	rjmp	.-30     	; 0x1fe8 <__fp_splitA+0xc>
    2006:	86 95       	lsr	r24
    2008:	71 05       	cpc	r23, r1
    200a:	61 05       	cpc	r22, r1
    200c:	08 94       	sec
    200e:	08 95       	ret

00002010 <__fp_zero>:
    2010:	e8 94       	clt

00002012 <__fp_szero>:
    2012:	bb 27       	eor	r27, r27
    2014:	66 27       	eor	r22, r22
    2016:	77 27       	eor	r23, r23
    2018:	cb 01       	movw	r24, r22
    201a:	97 f9       	bld	r25, 7
    201c:	08 95       	ret

0000201e <inverse>:
    201e:	9b 01       	movw	r18, r22
    2020:	ac 01       	movw	r20, r24
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	80 e8       	ldi	r24, 0x80	; 128
    2028:	9f e3       	ldi	r25, 0x3F	; 63
    202a:	59 ce       	rjmp	.-846    	; 0x1cde <__divsf3>

0000202c <__mulsf3>:
    202c:	0b d0       	rcall	.+22     	; 0x2044 <__mulsf3x>
    202e:	ac cf       	rjmp	.-168    	; 0x1f88 <__fp_round>
    2030:	75 df       	rcall	.-278    	; 0x1f1c <__fp_pscA>
    2032:	28 f0       	brcs	.+10     	; 0x203e <__mulsf3+0x12>
    2034:	7a df       	rcall	.-268    	; 0x1f2a <__fp_pscB>
    2036:	18 f0       	brcs	.+6      	; 0x203e <__mulsf3+0x12>
    2038:	95 23       	and	r25, r21
    203a:	09 f0       	breq	.+2      	; 0x203e <__mulsf3+0x12>
    203c:	41 cf       	rjmp	.-382    	; 0x1ec0 <__fp_inf>
    203e:	46 cf       	rjmp	.-372    	; 0x1ecc <__fp_nan>
    2040:	11 24       	eor	r1, r1
    2042:	e7 cf       	rjmp	.-50     	; 0x2012 <__fp_szero>

00002044 <__mulsf3x>:
    2044:	c3 df       	rcall	.-122    	; 0x1fcc <__fp_split3>
    2046:	a0 f3       	brcs	.-24     	; 0x2030 <__mulsf3+0x4>

00002048 <__mulsf3_pse>:
    2048:	95 9f       	mul	r25, r21
    204a:	d1 f3       	breq	.-12     	; 0x2040 <__mulsf3+0x14>
    204c:	95 0f       	add	r25, r21
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	55 1f       	adc	r21, r21
    2052:	62 9f       	mul	r22, r18
    2054:	f0 01       	movw	r30, r0
    2056:	72 9f       	mul	r23, r18
    2058:	bb 27       	eor	r27, r27
    205a:	f0 0d       	add	r31, r0
    205c:	b1 1d       	adc	r27, r1
    205e:	63 9f       	mul	r22, r19
    2060:	aa 27       	eor	r26, r26
    2062:	f0 0d       	add	r31, r0
    2064:	b1 1d       	adc	r27, r1
    2066:	aa 1f       	adc	r26, r26
    2068:	64 9f       	mul	r22, r20
    206a:	66 27       	eor	r22, r22
    206c:	b0 0d       	add	r27, r0
    206e:	a1 1d       	adc	r26, r1
    2070:	66 1f       	adc	r22, r22
    2072:	82 9f       	mul	r24, r18
    2074:	22 27       	eor	r18, r18
    2076:	b0 0d       	add	r27, r0
    2078:	a1 1d       	adc	r26, r1
    207a:	62 1f       	adc	r22, r18
    207c:	73 9f       	mul	r23, r19
    207e:	b0 0d       	add	r27, r0
    2080:	a1 1d       	adc	r26, r1
    2082:	62 1f       	adc	r22, r18
    2084:	83 9f       	mul	r24, r19
    2086:	a0 0d       	add	r26, r0
    2088:	61 1d       	adc	r22, r1
    208a:	22 1f       	adc	r18, r18
    208c:	74 9f       	mul	r23, r20
    208e:	33 27       	eor	r19, r19
    2090:	a0 0d       	add	r26, r0
    2092:	61 1d       	adc	r22, r1
    2094:	23 1f       	adc	r18, r19
    2096:	84 9f       	mul	r24, r20
    2098:	60 0d       	add	r22, r0
    209a:	21 1d       	adc	r18, r1
    209c:	82 2f       	mov	r24, r18
    209e:	76 2f       	mov	r23, r22
    20a0:	6a 2f       	mov	r22, r26
    20a2:	11 24       	eor	r1, r1
    20a4:	9f 57       	subi	r25, 0x7F	; 127
    20a6:	50 40       	sbci	r21, 0x00	; 0
    20a8:	8a f0       	brmi	.+34     	; 0x20cc <__mulsf3_pse+0x84>
    20aa:	e1 f0       	breq	.+56     	; 0x20e4 <__mulsf3_pse+0x9c>
    20ac:	88 23       	and	r24, r24
    20ae:	4a f0       	brmi	.+18     	; 0x20c2 <__mulsf3_pse+0x7a>
    20b0:	ee 0f       	add	r30, r30
    20b2:	ff 1f       	adc	r31, r31
    20b4:	bb 1f       	adc	r27, r27
    20b6:	66 1f       	adc	r22, r22
    20b8:	77 1f       	adc	r23, r23
    20ba:	88 1f       	adc	r24, r24
    20bc:	91 50       	subi	r25, 0x01	; 1
    20be:	50 40       	sbci	r21, 0x00	; 0
    20c0:	a9 f7       	brne	.-22     	; 0x20ac <__mulsf3_pse+0x64>
    20c2:	9e 3f       	cpi	r25, 0xFE	; 254
    20c4:	51 05       	cpc	r21, r1
    20c6:	70 f0       	brcs	.+28     	; 0x20e4 <__mulsf3_pse+0x9c>
    20c8:	fb ce       	rjmp	.-522    	; 0x1ec0 <__fp_inf>
    20ca:	a3 cf       	rjmp	.-186    	; 0x2012 <__fp_szero>
    20cc:	5f 3f       	cpi	r21, 0xFF	; 255
    20ce:	ec f3       	brlt	.-6      	; 0x20ca <__mulsf3_pse+0x82>
    20d0:	98 3e       	cpi	r25, 0xE8	; 232
    20d2:	dc f3       	brlt	.-10     	; 0x20ca <__mulsf3_pse+0x82>
    20d4:	86 95       	lsr	r24
    20d6:	77 95       	ror	r23
    20d8:	67 95       	ror	r22
    20da:	b7 95       	ror	r27
    20dc:	f7 95       	ror	r31
    20de:	e7 95       	ror	r30
    20e0:	9f 5f       	subi	r25, 0xFF	; 255
    20e2:	c1 f7       	brne	.-16     	; 0x20d4 <__mulsf3_pse+0x8c>
    20e4:	fe 2b       	or	r31, r30
    20e6:	88 0f       	add	r24, r24
    20e8:	91 1d       	adc	r25, r1
    20ea:	96 95       	lsr	r25
    20ec:	87 95       	ror	r24
    20ee:	97 f9       	bld	r25, 7
    20f0:	08 95       	ret

000020f2 <sin>:
    20f2:	9f 93       	push	r25
    20f4:	22 df       	rcall	.-444    	; 0x1f3a <__fp_rempio2>
    20f6:	0f 90       	pop	r0
    20f8:	07 fc       	sbrc	r0, 7
    20fa:	ee 5f       	subi	r30, 0xFE	; 254
    20fc:	56 cf       	rjmp	.-340    	; 0x1faa <__fp_sinus>
    20fe:	11 f4       	brne	.+4      	; 0x2104 <sin+0x12>
    2100:	0e f4       	brtc	.+2      	; 0x2104 <sin+0x12>
    2102:	e4 ce       	rjmp	.-568    	; 0x1ecc <__fp_nan>
    2104:	41 c0       	rjmp	.+130    	; 0x2188 <__fp_mpack>

00002106 <sqrt>:
    2106:	6a df       	rcall	.-300    	; 0x1fdc <__fp_splitA>
    2108:	d0 f3       	brcs	.-12     	; 0x20fe <sin+0xc>
    210a:	99 23       	and	r25, r25
    210c:	d9 f3       	breq	.-10     	; 0x2104 <sin+0x12>
    210e:	ce f3       	brts	.-14     	; 0x2102 <sin+0x10>
    2110:	9f 57       	subi	r25, 0x7F	; 127
    2112:	55 0b       	sbc	r21, r21
    2114:	87 ff       	sbrs	r24, 7
    2116:	46 d0       	rcall	.+140    	; 0x21a4 <__fp_norm2>
    2118:	00 24       	eor	r0, r0
    211a:	a0 e6       	ldi	r26, 0x60	; 96
    211c:	40 ea       	ldi	r20, 0xA0	; 160
    211e:	90 01       	movw	r18, r0
    2120:	80 58       	subi	r24, 0x80	; 128
    2122:	56 95       	lsr	r21
    2124:	97 95       	ror	r25
    2126:	28 f4       	brcc	.+10     	; 0x2132 <sqrt+0x2c>
    2128:	80 5c       	subi	r24, 0xC0	; 192
    212a:	66 0f       	add	r22, r22
    212c:	77 1f       	adc	r23, r23
    212e:	88 1f       	adc	r24, r24
    2130:	20 f0       	brcs	.+8      	; 0x213a <sqrt+0x34>
    2132:	26 17       	cp	r18, r22
    2134:	37 07       	cpc	r19, r23
    2136:	48 07       	cpc	r20, r24
    2138:	30 f4       	brcc	.+12     	; 0x2146 <sqrt+0x40>
    213a:	62 1b       	sub	r22, r18
    213c:	73 0b       	sbc	r23, r19
    213e:	84 0b       	sbc	r24, r20
    2140:	20 29       	or	r18, r0
    2142:	31 29       	or	r19, r1
    2144:	4a 2b       	or	r20, r26
    2146:	a6 95       	lsr	r26
    2148:	17 94       	ror	r1
    214a:	07 94       	ror	r0
    214c:	20 25       	eor	r18, r0
    214e:	31 25       	eor	r19, r1
    2150:	4a 27       	eor	r20, r26
    2152:	58 f7       	brcc	.-42     	; 0x212a <sqrt+0x24>
    2154:	66 0f       	add	r22, r22
    2156:	77 1f       	adc	r23, r23
    2158:	88 1f       	adc	r24, r24
    215a:	20 f0       	brcs	.+8      	; 0x2164 <sqrt+0x5e>
    215c:	26 17       	cp	r18, r22
    215e:	37 07       	cpc	r19, r23
    2160:	48 07       	cpc	r20, r24
    2162:	30 f4       	brcc	.+12     	; 0x2170 <sqrt+0x6a>
    2164:	62 0b       	sbc	r22, r18
    2166:	73 0b       	sbc	r23, r19
    2168:	84 0b       	sbc	r24, r20
    216a:	20 0d       	add	r18, r0
    216c:	31 1d       	adc	r19, r1
    216e:	41 1d       	adc	r20, r1
    2170:	a0 95       	com	r26
    2172:	81 f7       	brne	.-32     	; 0x2154 <sqrt+0x4e>
    2174:	b9 01       	movw	r22, r18
    2176:	84 2f       	mov	r24, r20
    2178:	91 58       	subi	r25, 0x81	; 129
    217a:	88 0f       	add	r24, r24
    217c:	96 95       	lsr	r25
    217e:	87 95       	ror	r24
    2180:	08 95       	ret

00002182 <square>:
    2182:	9b 01       	movw	r18, r22
    2184:	ac 01       	movw	r20, r24
    2186:	52 cf       	rjmp	.-348    	; 0x202c <__mulsf3>

00002188 <__fp_mpack>:
    2188:	9f 3f       	cpi	r25, 0xFF	; 255
    218a:	31 f0       	breq	.+12     	; 0x2198 <__fp_mpack_finite+0xc>

0000218c <__fp_mpack_finite>:
    218c:	91 50       	subi	r25, 0x01	; 1
    218e:	20 f4       	brcc	.+8      	; 0x2198 <__fp_mpack_finite+0xc>
    2190:	87 95       	ror	r24
    2192:	77 95       	ror	r23
    2194:	67 95       	ror	r22
    2196:	b7 95       	ror	r27
    2198:	88 0f       	add	r24, r24
    219a:	91 1d       	adc	r25, r1
    219c:	96 95       	lsr	r25
    219e:	87 95       	ror	r24
    21a0:	97 f9       	bld	r25, 7
    21a2:	08 95       	ret

000021a4 <__fp_norm2>:
    21a4:	91 50       	subi	r25, 0x01	; 1
    21a6:	50 40       	sbci	r21, 0x00	; 0
    21a8:	66 0f       	add	r22, r22
    21aa:	77 1f       	adc	r23, r23
    21ac:	88 1f       	adc	r24, r24
    21ae:	d2 f7       	brpl	.-12     	; 0x21a4 <__fp_norm2>
    21b0:	08 95       	ret

000021b2 <__fp_powsodd>:
    21b2:	9f 93       	push	r25
    21b4:	8f 93       	push	r24
    21b6:	7f 93       	push	r23
    21b8:	6f 93       	push	r22
    21ba:	ff 93       	push	r31
    21bc:	ef 93       	push	r30
    21be:	9b 01       	movw	r18, r22
    21c0:	ac 01       	movw	r20, r24
    21c2:	34 df       	rcall	.-408    	; 0x202c <__mulsf3>
    21c4:	ef 91       	pop	r30
    21c6:	ff 91       	pop	r31
    21c8:	84 de       	rcall	.-760    	; 0x1ed2 <__fp_powser>
    21ca:	2f 91       	pop	r18
    21cc:	3f 91       	pop	r19
    21ce:	4f 91       	pop	r20
    21d0:	5f 91       	pop	r21
    21d2:	2c cf       	rjmp	.-424    	; 0x202c <__mulsf3>

000021d4 <__tablejump2__>:
    21d4:	ee 0f       	add	r30, r30
    21d6:	ff 1f       	adc	r31, r31

000021d8 <__tablejump__>:
    21d8:	05 90       	lpm	r0, Z+
    21da:	f4 91       	lpm	r31, Z
    21dc:	e0 2d       	mov	r30, r0
    21de:	09 94       	ijmp

000021e0 <malloc>:
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	82 30       	cpi	r24, 0x02	; 2
    21e6:	91 05       	cpc	r25, r1
    21e8:	10 f4       	brcc	.+4      	; 0x21ee <malloc+0xe>
    21ea:	82 e0       	ldi	r24, 0x02	; 2
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	e0 91 c4 00 	lds	r30, 0x00C4
    21f2:	f0 91 c5 00 	lds	r31, 0x00C5
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	a0 e0       	ldi	r26, 0x00	; 0
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	30 97       	sbiw	r30, 0x00	; 0
    2200:	39 f1       	breq	.+78     	; 0x2250 <malloc+0x70>
    2202:	40 81       	ld	r20, Z
    2204:	51 81       	ldd	r21, Z+1	; 0x01
    2206:	48 17       	cp	r20, r24
    2208:	59 07       	cpc	r21, r25
    220a:	b8 f0       	brcs	.+46     	; 0x223a <malloc+0x5a>
    220c:	48 17       	cp	r20, r24
    220e:	59 07       	cpc	r21, r25
    2210:	71 f4       	brne	.+28     	; 0x222e <malloc+0x4e>
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	10 97       	sbiw	r26, 0x00	; 0
    2218:	29 f0       	breq	.+10     	; 0x2224 <malloc+0x44>
    221a:	13 96       	adiw	r26, 0x03	; 3
    221c:	9c 93       	st	X, r25
    221e:	8e 93       	st	-X, r24
    2220:	12 97       	sbiw	r26, 0x02	; 2
    2222:	2c c0       	rjmp	.+88     	; 0x227c <malloc+0x9c>
    2224:	90 93 c5 00 	sts	0x00C5, r25
    2228:	80 93 c4 00 	sts	0x00C4, r24
    222c:	27 c0       	rjmp	.+78     	; 0x227c <malloc+0x9c>
    222e:	21 15       	cp	r18, r1
    2230:	31 05       	cpc	r19, r1
    2232:	31 f0       	breq	.+12     	; 0x2240 <malloc+0x60>
    2234:	42 17       	cp	r20, r18
    2236:	53 07       	cpc	r21, r19
    2238:	18 f0       	brcs	.+6      	; 0x2240 <malloc+0x60>
    223a:	a9 01       	movw	r20, r18
    223c:	db 01       	movw	r26, r22
    223e:	01 c0       	rjmp	.+2      	; 0x2242 <malloc+0x62>
    2240:	ef 01       	movw	r28, r30
    2242:	9a 01       	movw	r18, r20
    2244:	bd 01       	movw	r22, r26
    2246:	df 01       	movw	r26, r30
    2248:	02 80       	ldd	r0, Z+2	; 0x02
    224a:	f3 81       	ldd	r31, Z+3	; 0x03
    224c:	e0 2d       	mov	r30, r0
    224e:	d7 cf       	rjmp	.-82     	; 0x21fe <malloc+0x1e>
    2250:	21 15       	cp	r18, r1
    2252:	31 05       	cpc	r19, r1
    2254:	f9 f0       	breq	.+62     	; 0x2294 <malloc+0xb4>
    2256:	28 1b       	sub	r18, r24
    2258:	39 0b       	sbc	r19, r25
    225a:	24 30       	cpi	r18, 0x04	; 4
    225c:	31 05       	cpc	r19, r1
    225e:	80 f4       	brcc	.+32     	; 0x2280 <malloc+0xa0>
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	61 15       	cp	r22, r1
    2266:	71 05       	cpc	r23, r1
    2268:	21 f0       	breq	.+8      	; 0x2272 <malloc+0x92>
    226a:	fb 01       	movw	r30, r22
    226c:	93 83       	std	Z+3, r25	; 0x03
    226e:	82 83       	std	Z+2, r24	; 0x02
    2270:	04 c0       	rjmp	.+8      	; 0x227a <malloc+0x9a>
    2272:	90 93 c5 00 	sts	0x00C5, r25
    2276:	80 93 c4 00 	sts	0x00C4, r24
    227a:	fe 01       	movw	r30, r28
    227c:	32 96       	adiw	r30, 0x02	; 2
    227e:	44 c0       	rjmp	.+136    	; 0x2308 <malloc+0x128>
    2280:	fe 01       	movw	r30, r28
    2282:	e2 0f       	add	r30, r18
    2284:	f3 1f       	adc	r31, r19
    2286:	81 93       	st	Z+, r24
    2288:	91 93       	st	Z+, r25
    228a:	22 50       	subi	r18, 0x02	; 2
    228c:	31 09       	sbc	r19, r1
    228e:	39 83       	std	Y+1, r19	; 0x01
    2290:	28 83       	st	Y, r18
    2292:	3a c0       	rjmp	.+116    	; 0x2308 <malloc+0x128>
    2294:	20 91 c2 00 	lds	r18, 0x00C2
    2298:	30 91 c3 00 	lds	r19, 0x00C3
    229c:	23 2b       	or	r18, r19
    229e:	41 f4       	brne	.+16     	; 0x22b0 <malloc+0xd0>
    22a0:	20 91 62 00 	lds	r18, 0x0062
    22a4:	30 91 63 00 	lds	r19, 0x0063
    22a8:	30 93 c3 00 	sts	0x00C3, r19
    22ac:	20 93 c2 00 	sts	0x00C2, r18
    22b0:	20 91 60 00 	lds	r18, 0x0060
    22b4:	30 91 61 00 	lds	r19, 0x0061
    22b8:	21 15       	cp	r18, r1
    22ba:	31 05       	cpc	r19, r1
    22bc:	41 f4       	brne	.+16     	; 0x22ce <malloc+0xee>
    22be:	2d b7       	in	r18, 0x3d	; 61
    22c0:	3e b7       	in	r19, 0x3e	; 62
    22c2:	40 91 64 00 	lds	r20, 0x0064
    22c6:	50 91 65 00 	lds	r21, 0x0065
    22ca:	24 1b       	sub	r18, r20
    22cc:	35 0b       	sbc	r19, r21
    22ce:	e0 91 c2 00 	lds	r30, 0x00C2
    22d2:	f0 91 c3 00 	lds	r31, 0x00C3
    22d6:	e2 17       	cp	r30, r18
    22d8:	f3 07       	cpc	r31, r19
    22da:	a0 f4       	brcc	.+40     	; 0x2304 <malloc+0x124>
    22dc:	2e 1b       	sub	r18, r30
    22de:	3f 0b       	sbc	r19, r31
    22e0:	28 17       	cp	r18, r24
    22e2:	39 07       	cpc	r19, r25
    22e4:	78 f0       	brcs	.+30     	; 0x2304 <malloc+0x124>
    22e6:	ac 01       	movw	r20, r24
    22e8:	4e 5f       	subi	r20, 0xFE	; 254
    22ea:	5f 4f       	sbci	r21, 0xFF	; 255
    22ec:	24 17       	cp	r18, r20
    22ee:	35 07       	cpc	r19, r21
    22f0:	48 f0       	brcs	.+18     	; 0x2304 <malloc+0x124>
    22f2:	4e 0f       	add	r20, r30
    22f4:	5f 1f       	adc	r21, r31
    22f6:	50 93 c3 00 	sts	0x00C3, r21
    22fa:	40 93 c2 00 	sts	0x00C2, r20
    22fe:	81 93       	st	Z+, r24
    2300:	91 93       	st	Z+, r25
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <malloc+0x128>
    2304:	e0 e0       	ldi	r30, 0x00	; 0
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	cf 01       	movw	r24, r30
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	08 95       	ret

00002310 <free>:
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	09 f4       	brne	.+2      	; 0x231a <free+0xa>
    2318:	87 c0       	rjmp	.+270    	; 0x2428 <free+0x118>
    231a:	fc 01       	movw	r30, r24
    231c:	32 97       	sbiw	r30, 0x02	; 2
    231e:	13 82       	std	Z+3, r1	; 0x03
    2320:	12 82       	std	Z+2, r1	; 0x02
    2322:	c0 91 c4 00 	lds	r28, 0x00C4
    2326:	d0 91 c5 00 	lds	r29, 0x00C5
    232a:	20 97       	sbiw	r28, 0x00	; 0
    232c:	81 f4       	brne	.+32     	; 0x234e <free+0x3e>
    232e:	20 81       	ld	r18, Z
    2330:	31 81       	ldd	r19, Z+1	; 0x01
    2332:	28 0f       	add	r18, r24
    2334:	39 1f       	adc	r19, r25
    2336:	80 91 c2 00 	lds	r24, 0x00C2
    233a:	90 91 c3 00 	lds	r25, 0x00C3
    233e:	82 17       	cp	r24, r18
    2340:	93 07       	cpc	r25, r19
    2342:	79 f5       	brne	.+94     	; 0x23a2 <free+0x92>
    2344:	f0 93 c3 00 	sts	0x00C3, r31
    2348:	e0 93 c2 00 	sts	0x00C2, r30
    234c:	6d c0       	rjmp	.+218    	; 0x2428 <free+0x118>
    234e:	de 01       	movw	r26, r28
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	ae 17       	cp	r26, r30
    2356:	bf 07       	cpc	r27, r31
    2358:	50 f4       	brcc	.+20     	; 0x236e <free+0x5e>
    235a:	12 96       	adiw	r26, 0x02	; 2
    235c:	4d 91       	ld	r20, X+
    235e:	5c 91       	ld	r21, X
    2360:	13 97       	sbiw	r26, 0x03	; 3
    2362:	9d 01       	movw	r18, r26
    2364:	41 15       	cp	r20, r1
    2366:	51 05       	cpc	r21, r1
    2368:	09 f1       	breq	.+66     	; 0x23ac <free+0x9c>
    236a:	da 01       	movw	r26, r20
    236c:	f3 cf       	rjmp	.-26     	; 0x2354 <free+0x44>
    236e:	b3 83       	std	Z+3, r27	; 0x03
    2370:	a2 83       	std	Z+2, r26	; 0x02
    2372:	40 81       	ld	r20, Z
    2374:	51 81       	ldd	r21, Z+1	; 0x01
    2376:	84 0f       	add	r24, r20
    2378:	95 1f       	adc	r25, r21
    237a:	8a 17       	cp	r24, r26
    237c:	9b 07       	cpc	r25, r27
    237e:	71 f4       	brne	.+28     	; 0x239c <free+0x8c>
    2380:	8d 91       	ld	r24, X+
    2382:	9c 91       	ld	r25, X
    2384:	11 97       	sbiw	r26, 0x01	; 1
    2386:	84 0f       	add	r24, r20
    2388:	95 1f       	adc	r25, r21
    238a:	02 96       	adiw	r24, 0x02	; 2
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	80 83       	st	Z, r24
    2390:	12 96       	adiw	r26, 0x02	; 2
    2392:	8d 91       	ld	r24, X+
    2394:	9c 91       	ld	r25, X
    2396:	13 97       	sbiw	r26, 0x03	; 3
    2398:	93 83       	std	Z+3, r25	; 0x03
    239a:	82 83       	std	Z+2, r24	; 0x02
    239c:	21 15       	cp	r18, r1
    239e:	31 05       	cpc	r19, r1
    23a0:	29 f4       	brne	.+10     	; 0x23ac <free+0x9c>
    23a2:	f0 93 c5 00 	sts	0x00C5, r31
    23a6:	e0 93 c4 00 	sts	0x00C4, r30
    23aa:	3e c0       	rjmp	.+124    	; 0x2428 <free+0x118>
    23ac:	d9 01       	movw	r26, r18
    23ae:	13 96       	adiw	r26, 0x03	; 3
    23b0:	fc 93       	st	X, r31
    23b2:	ee 93       	st	-X, r30
    23b4:	12 97       	sbiw	r26, 0x02	; 2
    23b6:	4d 91       	ld	r20, X+
    23b8:	5d 91       	ld	r21, X+
    23ba:	a4 0f       	add	r26, r20
    23bc:	b5 1f       	adc	r27, r21
    23be:	ea 17       	cp	r30, r26
    23c0:	fb 07       	cpc	r31, r27
    23c2:	79 f4       	brne	.+30     	; 0x23e2 <free+0xd2>
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	84 0f       	add	r24, r20
    23ca:	95 1f       	adc	r25, r21
    23cc:	02 96       	adiw	r24, 0x02	; 2
    23ce:	d9 01       	movw	r26, r18
    23d0:	11 96       	adiw	r26, 0x01	; 1
    23d2:	9c 93       	st	X, r25
    23d4:	8e 93       	st	-X, r24
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	13 96       	adiw	r26, 0x03	; 3
    23dc:	9c 93       	st	X, r25
    23de:	8e 93       	st	-X, r24
    23e0:	12 97       	sbiw	r26, 0x02	; 2
    23e2:	e0 e0       	ldi	r30, 0x00	; 0
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	19 f0       	breq	.+6      	; 0x23f4 <free+0xe4>
    23ee:	fe 01       	movw	r30, r28
    23f0:	ec 01       	movw	r28, r24
    23f2:	f9 cf       	rjmp	.-14     	; 0x23e6 <free+0xd6>
    23f4:	ce 01       	movw	r24, r28
    23f6:	02 96       	adiw	r24, 0x02	; 2
    23f8:	28 81       	ld	r18, Y
    23fa:	39 81       	ldd	r19, Y+1	; 0x01
    23fc:	82 0f       	add	r24, r18
    23fe:	93 1f       	adc	r25, r19
    2400:	20 91 c2 00 	lds	r18, 0x00C2
    2404:	30 91 c3 00 	lds	r19, 0x00C3
    2408:	28 17       	cp	r18, r24
    240a:	39 07       	cpc	r19, r25
    240c:	69 f4       	brne	.+26     	; 0x2428 <free+0x118>
    240e:	30 97       	sbiw	r30, 0x00	; 0
    2410:	29 f4       	brne	.+10     	; 0x241c <free+0x10c>
    2412:	10 92 c5 00 	sts	0x00C5, r1
    2416:	10 92 c4 00 	sts	0x00C4, r1
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <free+0x110>
    241c:	13 82       	std	Z+3, r1	; 0x03
    241e:	12 82       	std	Z+2, r1	; 0x02
    2420:	d0 93 c3 00 	sts	0x00C3, r29
    2424:	c0 93 c2 00 	sts	0x00C2, r28
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	08 95       	ret

0000242e <do_rand>:
    242e:	8f 92       	push	r8
    2430:	9f 92       	push	r9
    2432:	af 92       	push	r10
    2434:	bf 92       	push	r11
    2436:	cf 92       	push	r12
    2438:	df 92       	push	r13
    243a:	ef 92       	push	r14
    243c:	ff 92       	push	r15
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	ec 01       	movw	r28, r24
    2444:	68 81       	ld	r22, Y
    2446:	79 81       	ldd	r23, Y+1	; 0x01
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	9b 81       	ldd	r25, Y+3	; 0x03
    244c:	61 15       	cp	r22, r1
    244e:	71 05       	cpc	r23, r1
    2450:	81 05       	cpc	r24, r1
    2452:	91 05       	cpc	r25, r1
    2454:	21 f4       	brne	.+8      	; 0x245e <do_rand+0x30>
    2456:	64 e2       	ldi	r22, 0x24	; 36
    2458:	79 ed       	ldi	r23, 0xD9	; 217
    245a:	8b e5       	ldi	r24, 0x5B	; 91
    245c:	97 e0       	ldi	r25, 0x07	; 7
    245e:	2d e1       	ldi	r18, 0x1D	; 29
    2460:	33 ef       	ldi	r19, 0xF3	; 243
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__divmodsi4>
    246a:	49 01       	movw	r8, r18
    246c:	5a 01       	movw	r10, r20
    246e:	9b 01       	movw	r18, r22
    2470:	ac 01       	movw	r20, r24
    2472:	a7 ea       	ldi	r26, 0xA7	; 167
    2474:	b1 e4       	ldi	r27, 0x41	; 65
    2476:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__muluhisi3>
    247a:	6b 01       	movw	r12, r22
    247c:	7c 01       	movw	r14, r24
    247e:	ac ee       	ldi	r26, 0xEC	; 236
    2480:	b4 ef       	ldi	r27, 0xF4	; 244
    2482:	a5 01       	movw	r20, r10
    2484:	94 01       	movw	r18, r8
    2486:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__mulohisi3>
    248a:	c6 0e       	add	r12, r22
    248c:	d7 1e       	adc	r13, r23
    248e:	e8 1e       	adc	r14, r24
    2490:	f9 1e       	adc	r15, r25
    2492:	f7 fe       	sbrs	r15, 7
    2494:	06 c0       	rjmp	.+12     	; 0x24a2 <do_rand+0x74>
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	c8 1a       	sub	r12, r24
    249a:	d1 08       	sbc	r13, r1
    249c:	e1 08       	sbc	r14, r1
    249e:	80 e8       	ldi	r24, 0x80	; 128
    24a0:	f8 0a       	sbc	r15, r24
    24a2:	c8 82       	st	Y, r12
    24a4:	d9 82       	std	Y+1, r13	; 0x01
    24a6:	ea 82       	std	Y+2, r14	; 0x02
    24a8:	fb 82       	std	Y+3, r15	; 0x03
    24aa:	c6 01       	movw	r24, r12
    24ac:	9f 77       	andi	r25, 0x7F	; 127
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	ff 90       	pop	r15
    24b4:	ef 90       	pop	r14
    24b6:	df 90       	pop	r13
    24b8:	cf 90       	pop	r12
    24ba:	bf 90       	pop	r11
    24bc:	af 90       	pop	r10
    24be:	9f 90       	pop	r9
    24c0:	8f 90       	pop	r8
    24c2:	08 95       	ret

000024c4 <rand_r>:
    24c4:	0e 94 17 12 	call	0x242e	; 0x242e <do_rand>
    24c8:	08 95       	ret

000024ca <rand>:
    24ca:	86 e6       	ldi	r24, 0x66	; 102
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0e 94 17 12 	call	0x242e	; 0x242e <do_rand>
    24d2:	08 95       	ret

000024d4 <srand>:
    24d4:	a0 e0       	ldi	r26, 0x00	; 0
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	80 93 66 00 	sts	0x0066, r24
    24dc:	90 93 67 00 	sts	0x0067, r25
    24e0:	a0 93 68 00 	sts	0x0068, r26
    24e4:	b0 93 69 00 	sts	0x0069, r27
    24e8:	08 95       	ret

000024ea <strtol>:
    24ea:	2f 92       	push	r2
    24ec:	3f 92       	push	r3
    24ee:	5f 92       	push	r5
    24f0:	6f 92       	push	r6
    24f2:	7f 92       	push	r7
    24f4:	8f 92       	push	r8
    24f6:	9f 92       	push	r9
    24f8:	af 92       	push	r10
    24fa:	bf 92       	push	r11
    24fc:	cf 92       	push	r12
    24fe:	df 92       	push	r13
    2500:	ef 92       	push	r14
    2502:	ff 92       	push	r15
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	8b 01       	movw	r16, r22
    250e:	ea 01       	movw	r28, r20
    2510:	61 15       	cp	r22, r1
    2512:	71 05       	cpc	r23, r1
    2514:	21 f0       	breq	.+8      	; 0x251e <strtol+0x34>
    2516:	db 01       	movw	r26, r22
    2518:	8c 93       	st	X, r24
    251a:	11 96       	adiw	r26, 0x01	; 1
    251c:	9c 93       	st	X, r25
    251e:	20 97       	sbiw	r28, 0x00	; 0
    2520:	39 f0       	breq	.+14     	; 0x2530 <strtol+0x46>
    2522:	9e 01       	movw	r18, r28
    2524:	22 50       	subi	r18, 0x02	; 2
    2526:	31 09       	sbc	r19, r1
    2528:	23 32       	cpi	r18, 0x23	; 35
    252a:	31 05       	cpc	r19, r1
    252c:	08 f0       	brcs	.+2      	; 0x2530 <strtol+0x46>
    252e:	fb c0       	rjmp	.+502    	; 0x2726 <strtol+0x23c>
    2530:	7c 01       	movw	r14, r24
    2532:	67 01       	movw	r12, r14
    2534:	bf ef       	ldi	r27, 0xFF	; 255
    2536:	cb 1a       	sub	r12, r27
    2538:	db 0a       	sbc	r13, r27
    253a:	56 01       	movw	r10, r12
    253c:	f7 01       	movw	r30, r14
    253e:	60 80       	ld	r6, Z
    2540:	86 2d       	mov	r24, r6
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 a9 13 	call	0x2752	; 0x2752 <isspace>
    2548:	89 2b       	or	r24, r25
    254a:	11 f0       	breq	.+4      	; 0x2550 <strtol+0x66>
    254c:	76 01       	movw	r14, r12
    254e:	f1 cf       	rjmp	.-30     	; 0x2532 <strtol+0x48>
    2550:	fd e2       	ldi	r31, 0x2D	; 45
    2552:	6f 12       	cpse	r6, r31
    2554:	0a c0       	rjmp	.+20     	; 0x256a <strtol+0x80>
    2556:	57 01       	movw	r10, r14
    2558:	82 e0       	ldi	r24, 0x02	; 2
    255a:	a8 0e       	add	r10, r24
    255c:	b1 1c       	adc	r11, r1
    255e:	d7 01       	movw	r26, r14
    2560:	11 96       	adiw	r26, 0x01	; 1
    2562:	6c 90       	ld	r6, X
    2564:	77 24       	eor	r7, r7
    2566:	73 94       	inc	r7
    2568:	0b c0       	rjmp	.+22     	; 0x2580 <strtol+0x96>
    256a:	bb e2       	ldi	r27, 0x2B	; 43
    256c:	6b 12       	cpse	r6, r27
    256e:	07 c0       	rjmp	.+14     	; 0x257e <strtol+0x94>
    2570:	57 01       	movw	r10, r14
    2572:	e2 e0       	ldi	r30, 0x02	; 2
    2574:	ae 0e       	add	r10, r30
    2576:	b1 1c       	adc	r11, r1
    2578:	d7 01       	movw	r26, r14
    257a:	11 96       	adiw	r26, 0x01	; 1
    257c:	6c 90       	ld	r6, X
    257e:	71 2c       	mov	r7, r1
    2580:	ce 01       	movw	r24, r28
    2582:	8f 7e       	andi	r24, 0xEF	; 239
    2584:	89 2b       	or	r24, r25
    2586:	89 f4       	brne	.+34     	; 0x25aa <strtol+0xc0>
    2588:	b0 e3       	ldi	r27, 0x30	; 48
    258a:	6b 12       	cpse	r6, r27
    258c:	22 c0       	rjmp	.+68     	; 0x25d2 <strtol+0xe8>
    258e:	f5 01       	movw	r30, r10
    2590:	80 81       	ld	r24, Z
    2592:	8f 7d       	andi	r24, 0xDF	; 223
    2594:	88 35       	cpi	r24, 0x58	; 88
    2596:	41 f5       	brne	.+80     	; 0x25e8 <strtol+0xfe>
    2598:	61 80       	ldd	r6, Z+1	; 0x01
    259a:	f2 e0       	ldi	r31, 0x02	; 2
    259c:	af 0e       	add	r10, r31
    259e:	b1 1c       	adc	r11, r1
    25a0:	87 2d       	mov	r24, r7
    25a2:	82 60       	ori	r24, 0x02	; 2
    25a4:	78 2e       	mov	r7, r24
    25a6:	c0 e1       	ldi	r28, 0x10	; 16
    25a8:	d0 e0       	ldi	r29, 0x00	; 0
    25aa:	c8 30       	cpi	r28, 0x08	; 8
    25ac:	d1 05       	cpc	r29, r1
    25ae:	f1 f0       	breq	.+60     	; 0x25ec <strtol+0x102>
    25b0:	4c f4       	brge	.+18     	; 0x25c4 <strtol+0xda>
    25b2:	c2 30       	cpi	r28, 0x02	; 2
    25b4:	d1 05       	cpc	r29, r1
    25b6:	11 f5       	brne	.+68     	; 0x25fc <strtol+0x112>
    25b8:	c1 2c       	mov	r12, r1
    25ba:	d1 2c       	mov	r13, r1
    25bc:	e1 2c       	mov	r14, r1
    25be:	b0 e4       	ldi	r27, 0x40	; 64
    25c0:	fb 2e       	mov	r15, r27
    25c2:	2f c0       	rjmp	.+94     	; 0x2622 <strtol+0x138>
    25c4:	ca 30       	cpi	r28, 0x0A	; 10
    25c6:	d1 05       	cpc	r29, r1
    25c8:	31 f0       	breq	.+12     	; 0x25d6 <strtol+0xec>
    25ca:	c0 31       	cpi	r28, 0x10	; 16
    25cc:	d1 05       	cpc	r29, r1
    25ce:	21 f1       	breq	.+72     	; 0x2618 <strtol+0x12e>
    25d0:	15 c0       	rjmp	.+42     	; 0x25fc <strtol+0x112>
    25d2:	20 97       	sbiw	r28, 0x00	; 0
    25d4:	51 f7       	brne	.-44     	; 0x25aa <strtol+0xc0>
    25d6:	ca e0       	ldi	r28, 0x0A	; 10
    25d8:	d0 e0       	ldi	r29, 0x00	; 0
    25da:	ac ec       	ldi	r26, 0xCC	; 204
    25dc:	ca 2e       	mov	r12, r26
    25de:	dc 2c       	mov	r13, r12
    25e0:	ec 2c       	mov	r14, r12
    25e2:	ac e0       	ldi	r26, 0x0C	; 12
    25e4:	fa 2e       	mov	r15, r26
    25e6:	1d c0       	rjmp	.+58     	; 0x2622 <strtol+0x138>
    25e8:	20 97       	sbiw	r28, 0x00	; 0
    25ea:	f9 f6       	brne	.-66     	; 0x25aa <strtol+0xc0>
    25ec:	c8 e0       	ldi	r28, 0x08	; 8
    25ee:	d0 e0       	ldi	r29, 0x00	; 0
    25f0:	c1 2c       	mov	r12, r1
    25f2:	d1 2c       	mov	r13, r1
    25f4:	e1 2c       	mov	r14, r1
    25f6:	f0 e1       	ldi	r31, 0x10	; 16
    25f8:	ff 2e       	mov	r15, r31
    25fa:	13 c0       	rjmp	.+38     	; 0x2622 <strtol+0x138>
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e8       	ldi	r25, 0x80	; 128
    2604:	9e 01       	movw	r18, r28
    2606:	44 27       	eor	r20, r20
    2608:	37 fd       	sbrc	r19, 7
    260a:	40 95       	com	r20
    260c:	54 2f       	mov	r21, r20
    260e:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__udivmodsi4>
    2612:	69 01       	movw	r12, r18
    2614:	7a 01       	movw	r14, r20
    2616:	05 c0       	rjmp	.+10     	; 0x2622 <strtol+0x138>
    2618:	c1 2c       	mov	r12, r1
    261a:	d1 2c       	mov	r13, r1
    261c:	e1 2c       	mov	r14, r1
    261e:	e8 e0       	ldi	r30, 0x08	; 8
    2620:	fe 2e       	mov	r15, r30
    2622:	f5 01       	movw	r30, r10
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	a9 01       	movw	r20, r18
    262c:	4e 01       	movw	r8, r28
    262e:	aa 24       	eor	r10, r10
    2630:	97 fc       	sbrc	r9, 7
    2632:	a0 94       	com	r10
    2634:	ba 2c       	mov	r11, r10
    2636:	1f 01       	movw	r2, r30
    2638:	70 ed       	ldi	r23, 0xD0	; 208
    263a:	57 2e       	mov	r5, r23
    263c:	56 0c       	add	r5, r6
    263e:	a9 e0       	ldi	r26, 0x09	; 9
    2640:	a5 15       	cp	r26, r5
    2642:	70 f4       	brcc	.+28     	; 0x2660 <strtol+0x176>
    2644:	8f eb       	ldi	r24, 0xBF	; 191
    2646:	86 0d       	add	r24, r6
    2648:	8a 31       	cpi	r24, 0x1A	; 26
    264a:	18 f4       	brcc	.+6      	; 0x2652 <strtol+0x168>
    264c:	99 ec       	ldi	r25, 0xC9	; 201
    264e:	59 2e       	mov	r5, r25
    2650:	06 c0       	rjmp	.+12     	; 0x265e <strtol+0x174>
    2652:	8f e9       	ldi	r24, 0x9F	; 159
    2654:	86 0d       	add	r24, r6
    2656:	8a 31       	cpi	r24, 0x1A	; 26
    2658:	30 f5       	brcc	.+76     	; 0x26a6 <strtol+0x1bc>
    265a:	89 ea       	ldi	r24, 0xA9	; 169
    265c:	58 2e       	mov	r5, r24
    265e:	56 0c       	add	r5, r6
    2660:	85 2d       	mov	r24, r5
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	8c 17       	cp	r24, r28
    2666:	9d 07       	cpc	r25, r29
    2668:	f4 f4       	brge	.+60     	; 0x26a6 <strtol+0x1bc>
    266a:	67 fd       	sbrc	r22, 7
    266c:	18 c0       	rjmp	.+48     	; 0x269e <strtol+0x1b4>
    266e:	c2 16       	cp	r12, r18
    2670:	d3 06       	cpc	r13, r19
    2672:	e4 06       	cpc	r14, r20
    2674:	f5 06       	cpc	r15, r21
    2676:	80 f0       	brcs	.+32     	; 0x2698 <strtol+0x1ae>
    2678:	c5 01       	movw	r24, r10
    267a:	b4 01       	movw	r22, r8
    267c:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__mulsi3>
    2680:	9b 01       	movw	r18, r22
    2682:	ac 01       	movw	r20, r24
    2684:	25 0d       	add	r18, r5
    2686:	31 1d       	adc	r19, r1
    2688:	41 1d       	adc	r20, r1
    268a:	51 1d       	adc	r21, r1
    268c:	21 30       	cpi	r18, 0x01	; 1
    268e:	31 05       	cpc	r19, r1
    2690:	41 05       	cpc	r20, r1
    2692:	b0 e8       	ldi	r27, 0x80	; 128
    2694:	5b 07       	cpc	r21, r27
    2696:	10 f0       	brcs	.+4      	; 0x269c <strtol+0x1b2>
    2698:	6f ef       	ldi	r22, 0xFF	; 255
    269a:	01 c0       	rjmp	.+2      	; 0x269e <strtol+0x1b4>
    269c:	61 e0       	ldi	r22, 0x01	; 1
    269e:	31 96       	adiw	r30, 0x01	; 1
    26a0:	d1 01       	movw	r26, r2
    26a2:	6c 90       	ld	r6, X
    26a4:	c8 cf       	rjmp	.-112    	; 0x2636 <strtol+0x14c>
    26a6:	87 2d       	mov	r24, r7
    26a8:	81 70       	andi	r24, 0x01	; 1
    26aa:	01 15       	cp	r16, r1
    26ac:	11 05       	cpc	r17, r1
    26ae:	71 f0       	breq	.+28     	; 0x26cc <strtol+0x1e2>
    26b0:	66 23       	and	r22, r22
    26b2:	29 f0       	breq	.+10     	; 0x26be <strtol+0x1d4>
    26b4:	31 97       	sbiw	r30, 0x01	; 1
    26b6:	d8 01       	movw	r26, r16
    26b8:	ed 93       	st	X+, r30
    26ba:	fc 93       	st	X, r31
    26bc:	07 c0       	rjmp	.+14     	; 0x26cc <strtol+0x1e2>
    26be:	71 fe       	sbrs	r7, 1
    26c0:	19 c0       	rjmp	.+50     	; 0x26f4 <strtol+0x20a>
    26c2:	32 97       	sbiw	r30, 0x02	; 2
    26c4:	d8 01       	movw	r26, r16
    26c6:	ed 93       	st	X+, r30
    26c8:	fc 93       	st	X, r31
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <strtol+0x20a>
    26cc:	67 ff       	sbrs	r22, 7
    26ce:	12 c0       	rjmp	.+36     	; 0x26f4 <strtol+0x20a>
    26d0:	88 23       	and	r24, r24
    26d2:	29 f0       	breq	.+10     	; 0x26de <strtol+0x1f4>
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	50 e8       	ldi	r21, 0x80	; 128
    26dc:	04 c0       	rjmp	.+8      	; 0x26e6 <strtol+0x1fc>
    26de:	2f ef       	ldi	r18, 0xFF	; 255
    26e0:	3f ef       	ldi	r19, 0xFF	; 255
    26e2:	4f ef       	ldi	r20, 0xFF	; 255
    26e4:	5f e7       	ldi	r21, 0x7F	; 127
    26e6:	82 e2       	ldi	r24, 0x22	; 34
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	90 93 c7 00 	sts	0x00C7, r25
    26ee:	80 93 c6 00 	sts	0x00C6, r24
    26f2:	16 c0       	rjmp	.+44     	; 0x2720 <strtol+0x236>
    26f4:	88 23       	and	r24, r24
    26f6:	41 f0       	breq	.+16     	; 0x2708 <strtol+0x21e>
    26f8:	50 95       	com	r21
    26fa:	40 95       	com	r20
    26fc:	30 95       	com	r19
    26fe:	21 95       	neg	r18
    2700:	3f 4f       	sbci	r19, 0xFF	; 255
    2702:	4f 4f       	sbci	r20, 0xFF	; 255
    2704:	5f 4f       	sbci	r21, 0xFF	; 255
    2706:	0c c0       	rjmp	.+24     	; 0x2720 <strtol+0x236>
    2708:	57 ff       	sbrs	r21, 7
    270a:	0a c0       	rjmp	.+20     	; 0x2720 <strtol+0x236>
    270c:	82 e2       	ldi	r24, 0x22	; 34
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	90 93 c7 00 	sts	0x00C7, r25
    2714:	80 93 c6 00 	sts	0x00C6, r24
    2718:	2f ef       	ldi	r18, 0xFF	; 255
    271a:	3f ef       	ldi	r19, 0xFF	; 255
    271c:	4f ef       	ldi	r20, 0xFF	; 255
    271e:	5f e7       	ldi	r21, 0x7F	; 127
    2720:	b9 01       	movw	r22, r18
    2722:	ca 01       	movw	r24, r20
    2724:	04 c0       	rjmp	.+8      	; 0x272e <strtol+0x244>
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	df 90       	pop	r13
    273c:	cf 90       	pop	r12
    273e:	bf 90       	pop	r11
    2740:	af 90       	pop	r10
    2742:	9f 90       	pop	r9
    2744:	8f 90       	pop	r8
    2746:	7f 90       	pop	r7
    2748:	6f 90       	pop	r6
    274a:	5f 90       	pop	r5
    274c:	3f 90       	pop	r3
    274e:	2f 90       	pop	r2
    2750:	08 95       	ret

00002752 <isspace>:
    2752:	91 11       	cpse	r25, r1
    2754:	fa c1       	rjmp	.+1012   	; 0x2b4a <__ctype_isfalse>
    2756:	80 32       	cpi	r24, 0x20	; 32
    2758:	19 f0       	breq	.+6      	; 0x2760 <isspace+0xe>
    275a:	89 50       	subi	r24, 0x09	; 9
    275c:	85 50       	subi	r24, 0x05	; 5
    275e:	d0 f7       	brcc	.-12     	; 0x2754 <isspace+0x2>
    2760:	08 95       	ret

00002762 <sprintf>:
    2762:	ae e0       	ldi	r26, 0x0E	; 14
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e7 eb       	ldi	r30, 0xB7	; 183
    2768:	f3 e1       	ldi	r31, 0x13	; 19
    276a:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__prologue_saves__+0x1c>
    276e:	0d 89       	ldd	r16, Y+21	; 0x15
    2770:	1e 89       	ldd	r17, Y+22	; 0x16
    2772:	86 e0       	ldi	r24, 0x06	; 6
    2774:	8c 83       	std	Y+4, r24	; 0x04
    2776:	1a 83       	std	Y+2, r17	; 0x02
    2778:	09 83       	std	Y+1, r16	; 0x01
    277a:	8f ef       	ldi	r24, 0xFF	; 255
    277c:	9f e7       	ldi	r25, 0x7F	; 127
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	8d 83       	std	Y+5, r24	; 0x05
    2782:	ae 01       	movw	r20, r28
    2784:	47 5e       	subi	r20, 0xE7	; 231
    2786:	5f 4f       	sbci	r21, 0xFF	; 255
    2788:	6f 89       	ldd	r22, Y+23	; 0x17
    278a:	78 8d       	ldd	r23, Y+24	; 0x18
    278c:	ce 01       	movw	r24, r28
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <vfprintf>
    2794:	ef 81       	ldd	r30, Y+7	; 0x07
    2796:	f8 85       	ldd	r31, Y+8	; 0x08
    2798:	e0 0f       	add	r30, r16
    279a:	f1 1f       	adc	r31, r17
    279c:	10 82       	st	Z, r1
    279e:	2e 96       	adiw	r28, 0x0e	; 14
    27a0:	e4 e0       	ldi	r30, 0x04	; 4
    27a2:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__epilogue_restores__+0x1c>

000027a6 <vfprintf>:
    27a6:	ac e0       	ldi	r26, 0x0C	; 12
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e9 ed       	ldi	r30, 0xD9	; 217
    27ac:	f3 e1       	ldi	r31, 0x13	; 19
    27ae:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__>
    27b2:	7c 01       	movw	r14, r24
    27b4:	6b 01       	movw	r12, r22
    27b6:	8a 01       	movw	r16, r20
    27b8:	fc 01       	movw	r30, r24
    27ba:	17 82       	std	Z+7, r1	; 0x07
    27bc:	16 82       	std	Z+6, r1	; 0x06
    27be:	83 81       	ldd	r24, Z+3	; 0x03
    27c0:	81 ff       	sbrs	r24, 1
    27c2:	bd c1       	rjmp	.+890    	; 0x2b3e <vfprintf+0x398>
    27c4:	ce 01       	movw	r24, r28
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	4c 01       	movw	r8, r24
    27ca:	f7 01       	movw	r30, r14
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	f6 01       	movw	r30, r12
    27d0:	93 fd       	sbrc	r25, 3
    27d2:	85 91       	lpm	r24, Z+
    27d4:	93 ff       	sbrs	r25, 3
    27d6:	81 91       	ld	r24, Z+
    27d8:	6f 01       	movw	r12, r30
    27da:	88 23       	and	r24, r24
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <vfprintf+0x3a>
    27de:	ab c1       	rjmp	.+854    	; 0x2b36 <vfprintf+0x390>
    27e0:	85 32       	cpi	r24, 0x25	; 37
    27e2:	39 f4       	brne	.+14     	; 0x27f2 <vfprintf+0x4c>
    27e4:	93 fd       	sbrc	r25, 3
    27e6:	85 91       	lpm	r24, Z+
    27e8:	93 ff       	sbrs	r25, 3
    27ea:	81 91       	ld	r24, Z+
    27ec:	6f 01       	movw	r12, r30
    27ee:	85 32       	cpi	r24, 0x25	; 37
    27f0:	29 f4       	brne	.+10     	; 0x27fc <vfprintf+0x56>
    27f2:	b7 01       	movw	r22, r14
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <fputc>
    27fa:	e7 cf       	rjmp	.-50     	; 0x27ca <vfprintf+0x24>
    27fc:	51 2c       	mov	r5, r1
    27fe:	31 2c       	mov	r3, r1
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	20 32       	cpi	r18, 0x20	; 32
    2804:	a0 f4       	brcc	.+40     	; 0x282e <vfprintf+0x88>
    2806:	8b 32       	cpi	r24, 0x2B	; 43
    2808:	69 f0       	breq	.+26     	; 0x2824 <vfprintf+0x7e>
    280a:	30 f4       	brcc	.+12     	; 0x2818 <vfprintf+0x72>
    280c:	80 32       	cpi	r24, 0x20	; 32
    280e:	59 f0       	breq	.+22     	; 0x2826 <vfprintf+0x80>
    2810:	83 32       	cpi	r24, 0x23	; 35
    2812:	69 f4       	brne	.+26     	; 0x282e <vfprintf+0x88>
    2814:	20 61       	ori	r18, 0x10	; 16
    2816:	2c c0       	rjmp	.+88     	; 0x2870 <vfprintf+0xca>
    2818:	8d 32       	cpi	r24, 0x2D	; 45
    281a:	39 f0       	breq	.+14     	; 0x282a <vfprintf+0x84>
    281c:	80 33       	cpi	r24, 0x30	; 48
    281e:	39 f4       	brne	.+14     	; 0x282e <vfprintf+0x88>
    2820:	21 60       	ori	r18, 0x01	; 1
    2822:	26 c0       	rjmp	.+76     	; 0x2870 <vfprintf+0xca>
    2824:	22 60       	ori	r18, 0x02	; 2
    2826:	24 60       	ori	r18, 0x04	; 4
    2828:	23 c0       	rjmp	.+70     	; 0x2870 <vfprintf+0xca>
    282a:	28 60       	ori	r18, 0x08	; 8
    282c:	21 c0       	rjmp	.+66     	; 0x2870 <vfprintf+0xca>
    282e:	27 fd       	sbrc	r18, 7
    2830:	27 c0       	rjmp	.+78     	; 0x2880 <vfprintf+0xda>
    2832:	30 ed       	ldi	r19, 0xD0	; 208
    2834:	38 0f       	add	r19, r24
    2836:	3a 30       	cpi	r19, 0x0A	; 10
    2838:	78 f4       	brcc	.+30     	; 0x2858 <vfprintf+0xb2>
    283a:	26 ff       	sbrs	r18, 6
    283c:	06 c0       	rjmp	.+12     	; 0x284a <vfprintf+0xa4>
    283e:	fa e0       	ldi	r31, 0x0A	; 10
    2840:	5f 9e       	mul	r5, r31
    2842:	30 0d       	add	r19, r0
    2844:	11 24       	eor	r1, r1
    2846:	53 2e       	mov	r5, r19
    2848:	13 c0       	rjmp	.+38     	; 0x2870 <vfprintf+0xca>
    284a:	8a e0       	ldi	r24, 0x0A	; 10
    284c:	38 9e       	mul	r3, r24
    284e:	30 0d       	add	r19, r0
    2850:	11 24       	eor	r1, r1
    2852:	33 2e       	mov	r3, r19
    2854:	20 62       	ori	r18, 0x20	; 32
    2856:	0c c0       	rjmp	.+24     	; 0x2870 <vfprintf+0xca>
    2858:	8e 32       	cpi	r24, 0x2E	; 46
    285a:	21 f4       	brne	.+8      	; 0x2864 <vfprintf+0xbe>
    285c:	26 fd       	sbrc	r18, 6
    285e:	6b c1       	rjmp	.+726    	; 0x2b36 <vfprintf+0x390>
    2860:	20 64       	ori	r18, 0x40	; 64
    2862:	06 c0       	rjmp	.+12     	; 0x2870 <vfprintf+0xca>
    2864:	8c 36       	cpi	r24, 0x6C	; 108
    2866:	11 f4       	brne	.+4      	; 0x286c <vfprintf+0xc6>
    2868:	20 68       	ori	r18, 0x80	; 128
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <vfprintf+0xca>
    286c:	88 36       	cpi	r24, 0x68	; 104
    286e:	41 f4       	brne	.+16     	; 0x2880 <vfprintf+0xda>
    2870:	f6 01       	movw	r30, r12
    2872:	93 fd       	sbrc	r25, 3
    2874:	85 91       	lpm	r24, Z+
    2876:	93 ff       	sbrs	r25, 3
    2878:	81 91       	ld	r24, Z+
    287a:	6f 01       	movw	r12, r30
    287c:	81 11       	cpse	r24, r1
    287e:	c1 cf       	rjmp	.-126    	; 0x2802 <vfprintf+0x5c>
    2880:	98 2f       	mov	r25, r24
    2882:	9f 7d       	andi	r25, 0xDF	; 223
    2884:	95 54       	subi	r25, 0x45	; 69
    2886:	93 30       	cpi	r25, 0x03	; 3
    2888:	28 f4       	brcc	.+10     	; 0x2894 <vfprintf+0xee>
    288a:	0c 5f       	subi	r16, 0xFC	; 252
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	ff e3       	ldi	r31, 0x3F	; 63
    2890:	f9 83       	std	Y+1, r31	; 0x01
    2892:	0d c0       	rjmp	.+26     	; 0x28ae <vfprintf+0x108>
    2894:	83 36       	cpi	r24, 0x63	; 99
    2896:	31 f0       	breq	.+12     	; 0x28a4 <vfprintf+0xfe>
    2898:	83 37       	cpi	r24, 0x73	; 115
    289a:	71 f0       	breq	.+28     	; 0x28b8 <vfprintf+0x112>
    289c:	83 35       	cpi	r24, 0x53	; 83
    289e:	09 f0       	breq	.+2      	; 0x28a2 <vfprintf+0xfc>
    28a0:	5b c0       	rjmp	.+182    	; 0x2958 <vfprintf+0x1b2>
    28a2:	22 c0       	rjmp	.+68     	; 0x28e8 <vfprintf+0x142>
    28a4:	f8 01       	movw	r30, r16
    28a6:	80 81       	ld	r24, Z
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	0e 5f       	subi	r16, 0xFE	; 254
    28ac:	1f 4f       	sbci	r17, 0xFF	; 255
    28ae:	44 24       	eor	r4, r4
    28b0:	43 94       	inc	r4
    28b2:	51 2c       	mov	r5, r1
    28b4:	54 01       	movw	r10, r8
    28b6:	15 c0       	rjmp	.+42     	; 0x28e2 <vfprintf+0x13c>
    28b8:	38 01       	movw	r6, r16
    28ba:	f2 e0       	ldi	r31, 0x02	; 2
    28bc:	6f 0e       	add	r6, r31
    28be:	71 1c       	adc	r7, r1
    28c0:	f8 01       	movw	r30, r16
    28c2:	a0 80       	ld	r10, Z
    28c4:	b1 80       	ldd	r11, Z+1	; 0x01
    28c6:	26 ff       	sbrs	r18, 6
    28c8:	03 c0       	rjmp	.+6      	; 0x28d0 <vfprintf+0x12a>
    28ca:	65 2d       	mov	r22, r5
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	02 c0       	rjmp	.+4      	; 0x28d4 <vfprintf+0x12e>
    28d0:	6f ef       	ldi	r22, 0xFF	; 255
    28d2:	7f ef       	ldi	r23, 0xFF	; 255
    28d4:	c5 01       	movw	r24, r10
    28d6:	2c 87       	std	Y+12, r18	; 0x0c
    28d8:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <strnlen>
    28dc:	2c 01       	movw	r4, r24
    28de:	83 01       	movw	r16, r6
    28e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    28e2:	2f 77       	andi	r18, 0x7F	; 127
    28e4:	22 2e       	mov	r2, r18
    28e6:	17 c0       	rjmp	.+46     	; 0x2916 <vfprintf+0x170>
    28e8:	38 01       	movw	r6, r16
    28ea:	f2 e0       	ldi	r31, 0x02	; 2
    28ec:	6f 0e       	add	r6, r31
    28ee:	71 1c       	adc	r7, r1
    28f0:	f8 01       	movw	r30, r16
    28f2:	a0 80       	ld	r10, Z
    28f4:	b1 80       	ldd	r11, Z+1	; 0x01
    28f6:	26 ff       	sbrs	r18, 6
    28f8:	03 c0       	rjmp	.+6      	; 0x2900 <vfprintf+0x15a>
    28fa:	65 2d       	mov	r22, r5
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <vfprintf+0x15e>
    2900:	6f ef       	ldi	r22, 0xFF	; 255
    2902:	7f ef       	ldi	r23, 0xFF	; 255
    2904:	c5 01       	movw	r24, r10
    2906:	2c 87       	std	Y+12, r18	; 0x0c
    2908:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <strnlen_P>
    290c:	2c 01       	movw	r4, r24
    290e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2910:	20 68       	ori	r18, 0x80	; 128
    2912:	22 2e       	mov	r2, r18
    2914:	83 01       	movw	r16, r6
    2916:	23 fc       	sbrc	r2, 3
    2918:	1b c0       	rjmp	.+54     	; 0x2950 <vfprintf+0x1aa>
    291a:	83 2d       	mov	r24, r3
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	48 16       	cp	r4, r24
    2920:	59 06       	cpc	r5, r25
    2922:	b0 f4       	brcc	.+44     	; 0x2950 <vfprintf+0x1aa>
    2924:	b7 01       	movw	r22, r14
    2926:	80 e2       	ldi	r24, 0x20	; 32
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <fputc>
    292e:	3a 94       	dec	r3
    2930:	f4 cf       	rjmp	.-24     	; 0x291a <vfprintf+0x174>
    2932:	f5 01       	movw	r30, r10
    2934:	27 fc       	sbrc	r2, 7
    2936:	85 91       	lpm	r24, Z+
    2938:	27 fe       	sbrs	r2, 7
    293a:	81 91       	ld	r24, Z+
    293c:	5f 01       	movw	r10, r30
    293e:	b7 01       	movw	r22, r14
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <fputc>
    2946:	31 10       	cpse	r3, r1
    2948:	3a 94       	dec	r3
    294a:	f1 e0       	ldi	r31, 0x01	; 1
    294c:	4f 1a       	sub	r4, r31
    294e:	51 08       	sbc	r5, r1
    2950:	41 14       	cp	r4, r1
    2952:	51 04       	cpc	r5, r1
    2954:	71 f7       	brne	.-36     	; 0x2932 <vfprintf+0x18c>
    2956:	e5 c0       	rjmp	.+458    	; 0x2b22 <vfprintf+0x37c>
    2958:	84 36       	cpi	r24, 0x64	; 100
    295a:	11 f0       	breq	.+4      	; 0x2960 <vfprintf+0x1ba>
    295c:	89 36       	cpi	r24, 0x69	; 105
    295e:	39 f5       	brne	.+78     	; 0x29ae <vfprintf+0x208>
    2960:	f8 01       	movw	r30, r16
    2962:	27 ff       	sbrs	r18, 7
    2964:	07 c0       	rjmp	.+14     	; 0x2974 <vfprintf+0x1ce>
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	0c 5f       	subi	r16, 0xFC	; 252
    2970:	1f 4f       	sbci	r17, 0xFF	; 255
    2972:	08 c0       	rjmp	.+16     	; 0x2984 <vfprintf+0x1de>
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	88 27       	eor	r24, r24
    297a:	77 fd       	sbrc	r23, 7
    297c:	80 95       	com	r24
    297e:	98 2f       	mov	r25, r24
    2980:	0e 5f       	subi	r16, 0xFE	; 254
    2982:	1f 4f       	sbci	r17, 0xFF	; 255
    2984:	2f 76       	andi	r18, 0x6F	; 111
    2986:	b2 2e       	mov	r11, r18
    2988:	97 ff       	sbrs	r25, 7
    298a:	09 c0       	rjmp	.+18     	; 0x299e <vfprintf+0x1f8>
    298c:	90 95       	com	r25
    298e:	80 95       	com	r24
    2990:	70 95       	com	r23
    2992:	61 95       	neg	r22
    2994:	7f 4f       	sbci	r23, 0xFF	; 255
    2996:	8f 4f       	sbci	r24, 0xFF	; 255
    2998:	9f 4f       	sbci	r25, 0xFF	; 255
    299a:	20 68       	ori	r18, 0x80	; 128
    299c:	b2 2e       	mov	r11, r18
    299e:	2a e0       	ldi	r18, 0x0A	; 10
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	a4 01       	movw	r20, r8
    29a4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__ultoa_invert>
    29a8:	a8 2e       	mov	r10, r24
    29aa:	a8 18       	sub	r10, r8
    29ac:	44 c0       	rjmp	.+136    	; 0x2a36 <vfprintf+0x290>
    29ae:	85 37       	cpi	r24, 0x75	; 117
    29b0:	29 f4       	brne	.+10     	; 0x29bc <vfprintf+0x216>
    29b2:	2f 7e       	andi	r18, 0xEF	; 239
    29b4:	b2 2e       	mov	r11, r18
    29b6:	2a e0       	ldi	r18, 0x0A	; 10
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	25 c0       	rjmp	.+74     	; 0x2a06 <vfprintf+0x260>
    29bc:	f2 2f       	mov	r31, r18
    29be:	f9 7f       	andi	r31, 0xF9	; 249
    29c0:	bf 2e       	mov	r11, r31
    29c2:	8f 36       	cpi	r24, 0x6F	; 111
    29c4:	c1 f0       	breq	.+48     	; 0x29f6 <vfprintf+0x250>
    29c6:	18 f4       	brcc	.+6      	; 0x29ce <vfprintf+0x228>
    29c8:	88 35       	cpi	r24, 0x58	; 88
    29ca:	79 f0       	breq	.+30     	; 0x29ea <vfprintf+0x244>
    29cc:	b4 c0       	rjmp	.+360    	; 0x2b36 <vfprintf+0x390>
    29ce:	80 37       	cpi	r24, 0x70	; 112
    29d0:	19 f0       	breq	.+6      	; 0x29d8 <vfprintf+0x232>
    29d2:	88 37       	cpi	r24, 0x78	; 120
    29d4:	21 f0       	breq	.+8      	; 0x29de <vfprintf+0x238>
    29d6:	af c0       	rjmp	.+350    	; 0x2b36 <vfprintf+0x390>
    29d8:	2f 2f       	mov	r18, r31
    29da:	20 61       	ori	r18, 0x10	; 16
    29dc:	b2 2e       	mov	r11, r18
    29de:	b4 fe       	sbrs	r11, 4
    29e0:	0d c0       	rjmp	.+26     	; 0x29fc <vfprintf+0x256>
    29e2:	8b 2d       	mov	r24, r11
    29e4:	84 60       	ori	r24, 0x04	; 4
    29e6:	b8 2e       	mov	r11, r24
    29e8:	09 c0       	rjmp	.+18     	; 0x29fc <vfprintf+0x256>
    29ea:	24 ff       	sbrs	r18, 4
    29ec:	0a c0       	rjmp	.+20     	; 0x2a02 <vfprintf+0x25c>
    29ee:	9f 2f       	mov	r25, r31
    29f0:	96 60       	ori	r25, 0x06	; 6
    29f2:	b9 2e       	mov	r11, r25
    29f4:	06 c0       	rjmp	.+12     	; 0x2a02 <vfprintf+0x25c>
    29f6:	28 e0       	ldi	r18, 0x08	; 8
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	05 c0       	rjmp	.+10     	; 0x2a06 <vfprintf+0x260>
    29fc:	20 e1       	ldi	r18, 0x10	; 16
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <vfprintf+0x260>
    2a02:	20 e1       	ldi	r18, 0x10	; 16
    2a04:	32 e0       	ldi	r19, 0x02	; 2
    2a06:	f8 01       	movw	r30, r16
    2a08:	b7 fe       	sbrs	r11, 7
    2a0a:	07 c0       	rjmp	.+14     	; 0x2a1a <vfprintf+0x274>
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	0c 5f       	subi	r16, 0xFC	; 252
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	06 c0       	rjmp	.+12     	; 0x2a26 <vfprintf+0x280>
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	0e 5f       	subi	r16, 0xFE	; 254
    2a24:	1f 4f       	sbci	r17, 0xFF	; 255
    2a26:	a4 01       	movw	r20, r8
    2a28:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__ultoa_invert>
    2a2c:	a8 2e       	mov	r10, r24
    2a2e:	a8 18       	sub	r10, r8
    2a30:	fb 2d       	mov	r31, r11
    2a32:	ff 77       	andi	r31, 0x7F	; 127
    2a34:	bf 2e       	mov	r11, r31
    2a36:	b6 fe       	sbrs	r11, 6
    2a38:	0b c0       	rjmp	.+22     	; 0x2a50 <vfprintf+0x2aa>
    2a3a:	2b 2d       	mov	r18, r11
    2a3c:	2e 7f       	andi	r18, 0xFE	; 254
    2a3e:	a5 14       	cp	r10, r5
    2a40:	50 f4       	brcc	.+20     	; 0x2a56 <vfprintf+0x2b0>
    2a42:	b4 fe       	sbrs	r11, 4
    2a44:	0a c0       	rjmp	.+20     	; 0x2a5a <vfprintf+0x2b4>
    2a46:	b2 fc       	sbrc	r11, 2
    2a48:	08 c0       	rjmp	.+16     	; 0x2a5a <vfprintf+0x2b4>
    2a4a:	2b 2d       	mov	r18, r11
    2a4c:	2e 7e       	andi	r18, 0xEE	; 238
    2a4e:	05 c0       	rjmp	.+10     	; 0x2a5a <vfprintf+0x2b4>
    2a50:	7a 2c       	mov	r7, r10
    2a52:	2b 2d       	mov	r18, r11
    2a54:	03 c0       	rjmp	.+6      	; 0x2a5c <vfprintf+0x2b6>
    2a56:	7a 2c       	mov	r7, r10
    2a58:	01 c0       	rjmp	.+2      	; 0x2a5c <vfprintf+0x2b6>
    2a5a:	75 2c       	mov	r7, r5
    2a5c:	24 ff       	sbrs	r18, 4
    2a5e:	0d c0       	rjmp	.+26     	; 0x2a7a <vfprintf+0x2d4>
    2a60:	fe 01       	movw	r30, r28
    2a62:	ea 0d       	add	r30, r10
    2a64:	f1 1d       	adc	r31, r1
    2a66:	80 81       	ld	r24, Z
    2a68:	80 33       	cpi	r24, 0x30	; 48
    2a6a:	11 f4       	brne	.+4      	; 0x2a70 <vfprintf+0x2ca>
    2a6c:	29 7e       	andi	r18, 0xE9	; 233
    2a6e:	09 c0       	rjmp	.+18     	; 0x2a82 <vfprintf+0x2dc>
    2a70:	22 ff       	sbrs	r18, 2
    2a72:	06 c0       	rjmp	.+12     	; 0x2a80 <vfprintf+0x2da>
    2a74:	73 94       	inc	r7
    2a76:	73 94       	inc	r7
    2a78:	04 c0       	rjmp	.+8      	; 0x2a82 <vfprintf+0x2dc>
    2a7a:	82 2f       	mov	r24, r18
    2a7c:	86 78       	andi	r24, 0x86	; 134
    2a7e:	09 f0       	breq	.+2      	; 0x2a82 <vfprintf+0x2dc>
    2a80:	73 94       	inc	r7
    2a82:	23 fd       	sbrc	r18, 3
    2a84:	13 c0       	rjmp	.+38     	; 0x2aac <vfprintf+0x306>
    2a86:	20 ff       	sbrs	r18, 0
    2a88:	06 c0       	rjmp	.+12     	; 0x2a96 <vfprintf+0x2f0>
    2a8a:	5a 2c       	mov	r5, r10
    2a8c:	73 14       	cp	r7, r3
    2a8e:	18 f4       	brcc	.+6      	; 0x2a96 <vfprintf+0x2f0>
    2a90:	53 0c       	add	r5, r3
    2a92:	57 18       	sub	r5, r7
    2a94:	73 2c       	mov	r7, r3
    2a96:	73 14       	cp	r7, r3
    2a98:	68 f4       	brcc	.+26     	; 0x2ab4 <vfprintf+0x30e>
    2a9a:	b7 01       	movw	r22, r14
    2a9c:	80 e2       	ldi	r24, 0x20	; 32
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	2c 87       	std	Y+12, r18	; 0x0c
    2aa2:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <fputc>
    2aa6:	73 94       	inc	r7
    2aa8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2aaa:	f5 cf       	rjmp	.-22     	; 0x2a96 <vfprintf+0x2f0>
    2aac:	73 14       	cp	r7, r3
    2aae:	10 f4       	brcc	.+4      	; 0x2ab4 <vfprintf+0x30e>
    2ab0:	37 18       	sub	r3, r7
    2ab2:	01 c0       	rjmp	.+2      	; 0x2ab6 <vfprintf+0x310>
    2ab4:	31 2c       	mov	r3, r1
    2ab6:	24 ff       	sbrs	r18, 4
    2ab8:	12 c0       	rjmp	.+36     	; 0x2ade <vfprintf+0x338>
    2aba:	b7 01       	movw	r22, r14
    2abc:	80 e3       	ldi	r24, 0x30	; 48
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	2c 87       	std	Y+12, r18	; 0x0c
    2ac2:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <fputc>
    2ac6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ac8:	22 ff       	sbrs	r18, 2
    2aca:	17 c0       	rjmp	.+46     	; 0x2afa <vfprintf+0x354>
    2acc:	21 ff       	sbrs	r18, 1
    2ace:	03 c0       	rjmp	.+6      	; 0x2ad6 <vfprintf+0x330>
    2ad0:	88 e5       	ldi	r24, 0x58	; 88
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <vfprintf+0x334>
    2ad6:	88 e7       	ldi	r24, 0x78	; 120
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	b7 01       	movw	r22, r14
    2adc:	0c c0       	rjmp	.+24     	; 0x2af6 <vfprintf+0x350>
    2ade:	82 2f       	mov	r24, r18
    2ae0:	86 78       	andi	r24, 0x86	; 134
    2ae2:	59 f0       	breq	.+22     	; 0x2afa <vfprintf+0x354>
    2ae4:	21 fd       	sbrc	r18, 1
    2ae6:	02 c0       	rjmp	.+4      	; 0x2aec <vfprintf+0x346>
    2ae8:	80 e2       	ldi	r24, 0x20	; 32
    2aea:	01 c0       	rjmp	.+2      	; 0x2aee <vfprintf+0x348>
    2aec:	8b e2       	ldi	r24, 0x2B	; 43
    2aee:	27 fd       	sbrc	r18, 7
    2af0:	8d e2       	ldi	r24, 0x2D	; 45
    2af2:	b7 01       	movw	r22, r14
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <fputc>
    2afa:	a5 14       	cp	r10, r5
    2afc:	38 f4       	brcc	.+14     	; 0x2b0c <vfprintf+0x366>
    2afe:	b7 01       	movw	r22, r14
    2b00:	80 e3       	ldi	r24, 0x30	; 48
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <fputc>
    2b08:	5a 94       	dec	r5
    2b0a:	f7 cf       	rjmp	.-18     	; 0x2afa <vfprintf+0x354>
    2b0c:	aa 94       	dec	r10
    2b0e:	f4 01       	movw	r30, r8
    2b10:	ea 0d       	add	r30, r10
    2b12:	f1 1d       	adc	r31, r1
    2b14:	80 81       	ld	r24, Z
    2b16:	b7 01       	movw	r22, r14
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <fputc>
    2b1e:	a1 10       	cpse	r10, r1
    2b20:	f5 cf       	rjmp	.-22     	; 0x2b0c <vfprintf+0x366>
    2b22:	33 20       	and	r3, r3
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <vfprintf+0x382>
    2b26:	51 ce       	rjmp	.-862    	; 0x27ca <vfprintf+0x24>
    2b28:	b7 01       	movw	r22, r14
    2b2a:	80 e2       	ldi	r24, 0x20	; 32
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <fputc>
    2b32:	3a 94       	dec	r3
    2b34:	f6 cf       	rjmp	.-20     	; 0x2b22 <vfprintf+0x37c>
    2b36:	f7 01       	movw	r30, r14
    2b38:	86 81       	ldd	r24, Z+6	; 0x06
    2b3a:	97 81       	ldd	r25, Z+7	; 0x07
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <vfprintf+0x39c>
    2b3e:	8f ef       	ldi	r24, 0xFF	; 255
    2b40:	9f ef       	ldi	r25, 0xFF	; 255
    2b42:	2c 96       	adiw	r28, 0x0c	; 12
    2b44:	e2 e1       	ldi	r30, 0x12	; 18
    2b46:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__>

00002b4a <__ctype_isfalse>:
    2b4a:	99 27       	eor	r25, r25
    2b4c:	88 27       	eor	r24, r24

00002b4e <__ctype_istrue>:
    2b4e:	08 95       	ret

00002b50 <strnlen_P>:
    2b50:	fc 01       	movw	r30, r24
    2b52:	05 90       	lpm	r0, Z+
    2b54:	61 50       	subi	r22, 0x01	; 1
    2b56:	70 40       	sbci	r23, 0x00	; 0
    2b58:	01 10       	cpse	r0, r1
    2b5a:	d8 f7       	brcc	.-10     	; 0x2b52 <strnlen_P+0x2>
    2b5c:	80 95       	com	r24
    2b5e:	90 95       	com	r25
    2b60:	8e 0f       	add	r24, r30
    2b62:	9f 1f       	adc	r25, r31
    2b64:	08 95       	ret

00002b66 <strnlen>:
    2b66:	fc 01       	movw	r30, r24
    2b68:	61 50       	subi	r22, 0x01	; 1
    2b6a:	70 40       	sbci	r23, 0x00	; 0
    2b6c:	01 90       	ld	r0, Z+
    2b6e:	01 10       	cpse	r0, r1
    2b70:	d8 f7       	brcc	.-10     	; 0x2b68 <strnlen+0x2>
    2b72:	80 95       	com	r24
    2b74:	90 95       	com	r25
    2b76:	8e 0f       	add	r24, r30
    2b78:	9f 1f       	adc	r25, r31
    2b7a:	08 95       	ret

00002b7c <fputc>:
    2b7c:	0f 93       	push	r16
    2b7e:	1f 93       	push	r17
    2b80:	cf 93       	push	r28
    2b82:	df 93       	push	r29
    2b84:	18 2f       	mov	r17, r24
    2b86:	09 2f       	mov	r16, r25
    2b88:	eb 01       	movw	r28, r22
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	81 fd       	sbrc	r24, 1
    2b8e:	03 c0       	rjmp	.+6      	; 0x2b96 <fputc+0x1a>
    2b90:	8f ef       	ldi	r24, 0xFF	; 255
    2b92:	9f ef       	ldi	r25, 0xFF	; 255
    2b94:	20 c0       	rjmp	.+64     	; 0x2bd6 <fputc+0x5a>
    2b96:	82 ff       	sbrs	r24, 2
    2b98:	10 c0       	rjmp	.+32     	; 0x2bba <fputc+0x3e>
    2b9a:	4e 81       	ldd	r20, Y+6	; 0x06
    2b9c:	5f 81       	ldd	r21, Y+7	; 0x07
    2b9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba2:	42 17       	cp	r20, r18
    2ba4:	53 07       	cpc	r21, r19
    2ba6:	7c f4       	brge	.+30     	; 0x2bc6 <fputc+0x4a>
    2ba8:	e8 81       	ld	r30, Y
    2baa:	f9 81       	ldd	r31, Y+1	; 0x01
    2bac:	9f 01       	movw	r18, r30
    2bae:	2f 5f       	subi	r18, 0xFF	; 255
    2bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb2:	39 83       	std	Y+1, r19	; 0x01
    2bb4:	28 83       	st	Y, r18
    2bb6:	10 83       	st	Z, r17
    2bb8:	06 c0       	rjmp	.+12     	; 0x2bc6 <fputc+0x4a>
    2bba:	e8 85       	ldd	r30, Y+8	; 0x08
    2bbc:	f9 85       	ldd	r31, Y+9	; 0x09
    2bbe:	81 2f       	mov	r24, r17
    2bc0:	09 95       	icall
    2bc2:	89 2b       	or	r24, r25
    2bc4:	29 f7       	brne	.-54     	; 0x2b90 <fputc+0x14>
    2bc6:	2e 81       	ldd	r18, Y+6	; 0x06
    2bc8:	3f 81       	ldd	r19, Y+7	; 0x07
    2bca:	2f 5f       	subi	r18, 0xFF	; 255
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	3f 83       	std	Y+7, r19	; 0x07
    2bd0:	2e 83       	std	Y+6, r18	; 0x06
    2bd2:	81 2f       	mov	r24, r17
    2bd4:	90 2f       	mov	r25, r16
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	08 95       	ret

00002be0 <__ultoa_invert>:
    2be0:	fa 01       	movw	r30, r20
    2be2:	aa 27       	eor	r26, r26
    2be4:	28 30       	cpi	r18, 0x08	; 8
    2be6:	51 f1       	breq	.+84     	; 0x2c3c <__ultoa_invert+0x5c>
    2be8:	20 31       	cpi	r18, 0x10	; 16
    2bea:	81 f1       	breq	.+96     	; 0x2c4c <__ultoa_invert+0x6c>
    2bec:	e8 94       	clt
    2bee:	6f 93       	push	r22
    2bf0:	6e 7f       	andi	r22, 0xFE	; 254
    2bf2:	6e 5f       	subi	r22, 0xFE	; 254
    2bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf6:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfa:	af 4f       	sbci	r26, 0xFF	; 255
    2bfc:	b1 e0       	ldi	r27, 0x01	; 1
    2bfe:	3e d0       	rcall	.+124    	; 0x2c7c <__ultoa_invert+0x9c>
    2c00:	b4 e0       	ldi	r27, 0x04	; 4
    2c02:	3c d0       	rcall	.+120    	; 0x2c7c <__ultoa_invert+0x9c>
    2c04:	67 0f       	add	r22, r23
    2c06:	78 1f       	adc	r23, r24
    2c08:	89 1f       	adc	r24, r25
    2c0a:	9a 1f       	adc	r25, r26
    2c0c:	a1 1d       	adc	r26, r1
    2c0e:	68 0f       	add	r22, r24
    2c10:	79 1f       	adc	r23, r25
    2c12:	8a 1f       	adc	r24, r26
    2c14:	91 1d       	adc	r25, r1
    2c16:	a1 1d       	adc	r26, r1
    2c18:	6a 0f       	add	r22, r26
    2c1a:	71 1d       	adc	r23, r1
    2c1c:	81 1d       	adc	r24, r1
    2c1e:	91 1d       	adc	r25, r1
    2c20:	a1 1d       	adc	r26, r1
    2c22:	20 d0       	rcall	.+64     	; 0x2c64 <__ultoa_invert+0x84>
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <__ultoa_invert+0x48>
    2c26:	68 94       	set
    2c28:	3f 91       	pop	r19
    2c2a:	2a e0       	ldi	r18, 0x0A	; 10
    2c2c:	26 9f       	mul	r18, r22
    2c2e:	11 24       	eor	r1, r1
    2c30:	30 19       	sub	r19, r0
    2c32:	30 5d       	subi	r19, 0xD0	; 208
    2c34:	31 93       	st	Z+, r19
    2c36:	de f6       	brtc	.-74     	; 0x2bee <__ultoa_invert+0xe>
    2c38:	cf 01       	movw	r24, r30
    2c3a:	08 95       	ret
    2c3c:	46 2f       	mov	r20, r22
    2c3e:	47 70       	andi	r20, 0x07	; 7
    2c40:	40 5d       	subi	r20, 0xD0	; 208
    2c42:	41 93       	st	Z+, r20
    2c44:	b3 e0       	ldi	r27, 0x03	; 3
    2c46:	0f d0       	rcall	.+30     	; 0x2c66 <__ultoa_invert+0x86>
    2c48:	c9 f7       	brne	.-14     	; 0x2c3c <__ultoa_invert+0x5c>
    2c4a:	f6 cf       	rjmp	.-20     	; 0x2c38 <__ultoa_invert+0x58>
    2c4c:	46 2f       	mov	r20, r22
    2c4e:	4f 70       	andi	r20, 0x0F	; 15
    2c50:	40 5d       	subi	r20, 0xD0	; 208
    2c52:	4a 33       	cpi	r20, 0x3A	; 58
    2c54:	18 f0       	brcs	.+6      	; 0x2c5c <__ultoa_invert+0x7c>
    2c56:	49 5d       	subi	r20, 0xD9	; 217
    2c58:	31 fd       	sbrc	r19, 1
    2c5a:	40 52       	subi	r20, 0x20	; 32
    2c5c:	41 93       	st	Z+, r20
    2c5e:	02 d0       	rcall	.+4      	; 0x2c64 <__ultoa_invert+0x84>
    2c60:	a9 f7       	brne	.-22     	; 0x2c4c <__ultoa_invert+0x6c>
    2c62:	ea cf       	rjmp	.-44     	; 0x2c38 <__ultoa_invert+0x58>
    2c64:	b4 e0       	ldi	r27, 0x04	; 4
    2c66:	a6 95       	lsr	r26
    2c68:	97 95       	ror	r25
    2c6a:	87 95       	ror	r24
    2c6c:	77 95       	ror	r23
    2c6e:	67 95       	ror	r22
    2c70:	ba 95       	dec	r27
    2c72:	c9 f7       	brne	.-14     	; 0x2c66 <__ultoa_invert+0x86>
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	61 05       	cpc	r22, r1
    2c78:	71 05       	cpc	r23, r1
    2c7a:	08 95       	ret
    2c7c:	9b 01       	movw	r18, r22
    2c7e:	ac 01       	movw	r20, r24
    2c80:	0a 2e       	mov	r0, r26
    2c82:	06 94       	lsr	r0
    2c84:	57 95       	ror	r21
    2c86:	47 95       	ror	r20
    2c88:	37 95       	ror	r19
    2c8a:	27 95       	ror	r18
    2c8c:	ba 95       	dec	r27
    2c8e:	c9 f7       	brne	.-14     	; 0x2c82 <__ultoa_invert+0xa2>
    2c90:	62 0f       	add	r22, r18
    2c92:	73 1f       	adc	r23, r19
    2c94:	84 1f       	adc	r24, r20
    2c96:	95 1f       	adc	r25, r21
    2c98:	a0 1d       	adc	r26, r0
    2c9a:	08 95       	ret

00002c9c <__mulsi3>:
    2c9c:	db 01       	movw	r26, r22
    2c9e:	8f 93       	push	r24
    2ca0:	9f 93       	push	r25
    2ca2:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__muluhisi3>
    2ca6:	bf 91       	pop	r27
    2ca8:	af 91       	pop	r26
    2caa:	a2 9f       	mul	r26, r18
    2cac:	80 0d       	add	r24, r0
    2cae:	91 1d       	adc	r25, r1
    2cb0:	a3 9f       	mul	r26, r19
    2cb2:	90 0d       	add	r25, r0
    2cb4:	b2 9f       	mul	r27, r18
    2cb6:	90 0d       	add	r25, r0
    2cb8:	11 24       	eor	r1, r1
    2cba:	08 95       	ret

00002cbc <__udivmodsi4>:
    2cbc:	a1 e2       	ldi	r26, 0x21	; 33
    2cbe:	1a 2e       	mov	r1, r26
    2cc0:	aa 1b       	sub	r26, r26
    2cc2:	bb 1b       	sub	r27, r27
    2cc4:	fd 01       	movw	r30, r26
    2cc6:	0d c0       	rjmp	.+26     	; 0x2ce2 <__udivmodsi4_ep>

00002cc8 <__udivmodsi4_loop>:
    2cc8:	aa 1f       	adc	r26, r26
    2cca:	bb 1f       	adc	r27, r27
    2ccc:	ee 1f       	adc	r30, r30
    2cce:	ff 1f       	adc	r31, r31
    2cd0:	a2 17       	cp	r26, r18
    2cd2:	b3 07       	cpc	r27, r19
    2cd4:	e4 07       	cpc	r30, r20
    2cd6:	f5 07       	cpc	r31, r21
    2cd8:	20 f0       	brcs	.+8      	; 0x2ce2 <__udivmodsi4_ep>
    2cda:	a2 1b       	sub	r26, r18
    2cdc:	b3 0b       	sbc	r27, r19
    2cde:	e4 0b       	sbc	r30, r20
    2ce0:	f5 0b       	sbc	r31, r21

00002ce2 <__udivmodsi4_ep>:
    2ce2:	66 1f       	adc	r22, r22
    2ce4:	77 1f       	adc	r23, r23
    2ce6:	88 1f       	adc	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	1a 94       	dec	r1
    2cec:	69 f7       	brne	.-38     	; 0x2cc8 <__udivmodsi4_loop>
    2cee:	60 95       	com	r22
    2cf0:	70 95       	com	r23
    2cf2:	80 95       	com	r24
    2cf4:	90 95       	com	r25
    2cf6:	9b 01       	movw	r18, r22
    2cf8:	ac 01       	movw	r20, r24
    2cfa:	bd 01       	movw	r22, r26
    2cfc:	cf 01       	movw	r24, r30
    2cfe:	08 95       	ret

00002d00 <__divmodsi4>:
    2d00:	05 2e       	mov	r0, r21
    2d02:	97 fb       	bst	r25, 7
    2d04:	1e f4       	brtc	.+6      	; 0x2d0c <__divmodsi4+0xc>
    2d06:	00 94       	com	r0
    2d08:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__negsi2>
    2d0c:	57 fd       	sbrc	r21, 7
    2d0e:	07 d0       	rcall	.+14     	; 0x2d1e <__divmodsi4_neg2>
    2d10:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__udivmodsi4>
    2d14:	07 fc       	sbrc	r0, 7
    2d16:	03 d0       	rcall	.+6      	; 0x2d1e <__divmodsi4_neg2>
    2d18:	4e f4       	brtc	.+18     	; 0x2d2c <__divmodsi4_exit>
    2d1a:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__negsi2>

00002d1e <__divmodsi4_neg2>:
    2d1e:	50 95       	com	r21
    2d20:	40 95       	com	r20
    2d22:	30 95       	com	r19
    2d24:	21 95       	neg	r18
    2d26:	3f 4f       	sbci	r19, 0xFF	; 255
    2d28:	4f 4f       	sbci	r20, 0xFF	; 255
    2d2a:	5f 4f       	sbci	r21, 0xFF	; 255

00002d2c <__divmodsi4_exit>:
    2d2c:	08 95       	ret

00002d2e <__negsi2>:
    2d2e:	90 95       	com	r25
    2d30:	80 95       	com	r24
    2d32:	70 95       	com	r23
    2d34:	61 95       	neg	r22
    2d36:	7f 4f       	sbci	r23, 0xFF	; 255
    2d38:	8f 4f       	sbci	r24, 0xFF	; 255
    2d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3c:	08 95       	ret

00002d3e <__muluhisi3>:
    2d3e:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__umulhisi3>
    2d42:	a5 9f       	mul	r26, r21
    2d44:	90 0d       	add	r25, r0
    2d46:	b4 9f       	mul	r27, r20
    2d48:	90 0d       	add	r25, r0
    2d4a:	a4 9f       	mul	r26, r20
    2d4c:	80 0d       	add	r24, r0
    2d4e:	91 1d       	adc	r25, r1
    2d50:	11 24       	eor	r1, r1
    2d52:	08 95       	ret

00002d54 <__mulshisi3>:
    2d54:	b7 ff       	sbrs	r27, 7
    2d56:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__muluhisi3>

00002d5a <__mulohisi3>:
    2d5a:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__muluhisi3>
    2d5e:	82 1b       	sub	r24, r18
    2d60:	93 0b       	sbc	r25, r19
    2d62:	08 95       	ret

00002d64 <__prologue_saves__>:
    2d64:	2f 92       	push	r2
    2d66:	3f 92       	push	r3
    2d68:	4f 92       	push	r4
    2d6a:	5f 92       	push	r5
    2d6c:	6f 92       	push	r6
    2d6e:	7f 92       	push	r7
    2d70:	8f 92       	push	r8
    2d72:	9f 92       	push	r9
    2d74:	af 92       	push	r10
    2d76:	bf 92       	push	r11
    2d78:	cf 92       	push	r12
    2d7a:	df 92       	push	r13
    2d7c:	ef 92       	push	r14
    2d7e:	ff 92       	push	r15
    2d80:	0f 93       	push	r16
    2d82:	1f 93       	push	r17
    2d84:	cf 93       	push	r28
    2d86:	df 93       	push	r29
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	ca 1b       	sub	r28, r26
    2d8e:	db 0b       	sbc	r29, r27
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	09 94       	ijmp

00002d9c <__epilogue_restores__>:
    2d9c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d9e:	39 88       	ldd	r3, Y+17	; 0x11
    2da0:	48 88       	ldd	r4, Y+16	; 0x10
    2da2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2da4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2da6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2da8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2daa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dac:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dae:	b9 84       	ldd	r11, Y+9	; 0x09
    2db0:	c8 84       	ldd	r12, Y+8	; 0x08
    2db2:	df 80       	ldd	r13, Y+7	; 0x07
    2db4:	ee 80       	ldd	r14, Y+6	; 0x06
    2db6:	fd 80       	ldd	r15, Y+5	; 0x05
    2db8:	0c 81       	ldd	r16, Y+4	; 0x04
    2dba:	1b 81       	ldd	r17, Y+3	; 0x03
    2dbc:	aa 81       	ldd	r26, Y+2	; 0x02
    2dbe:	b9 81       	ldd	r27, Y+1	; 0x01
    2dc0:	ce 0f       	add	r28, r30
    2dc2:	d1 1d       	adc	r29, r1
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	ed 01       	movw	r28, r26
    2dd0:	08 95       	ret

00002dd2 <__umulhisi3>:
    2dd2:	a2 9f       	mul	r26, r18
    2dd4:	b0 01       	movw	r22, r0
    2dd6:	b3 9f       	mul	r27, r19
    2dd8:	c0 01       	movw	r24, r0
    2dda:	a3 9f       	mul	r26, r19
    2ddc:	70 0d       	add	r23, r0
    2dde:	81 1d       	adc	r24, r1
    2de0:	11 24       	eor	r1, r1
    2de2:	91 1d       	adc	r25, r1
    2de4:	b2 9f       	mul	r27, r18
    2de6:	70 0d       	add	r23, r0
    2de8:	81 1d       	adc	r24, r1
    2dea:	11 24       	eor	r1, r1
    2dec:	91 1d       	adc	r25, r1
    2dee:	08 95       	ret

00002df0 <_exit>:
    2df0:	f8 94       	cli

00002df2 <__stop_program>:
    2df2:	ff cf       	rjmp	.-2      	; 0x2df2 <__stop_program>
