
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003176  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00003176  0000322a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000cc  008000cc  00003296  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00003296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005c55  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f88  00000000  00000000  000091c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d6f  00000000  00000000  0000a149  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b50  00000000  00000000  0000aeb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a75  00000000  00000000  0000ba08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033f5  00000000  00000000  0000c47d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000f872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      54:	24 0c       	add	r2, r4
      56:	3f 0c       	add	r3, r15
      58:	67 0d       	add	r22, r7
      5a:	67 0d       	add	r22, r7
      5c:	67 0d       	add	r22, r7
      5e:	67 0d       	add	r22, r7
      60:	67 0d       	add	r22, r7
      62:	67 0d       	add	r22, r7
      64:	67 0d       	add	r22, r7
      66:	45 0c       	add	r4, r5
      68:	67 0d       	add	r22, r7
      6a:	67 0d       	add	r22, r7
      6c:	67 0d       	add	r22, r7
      6e:	4b 0c       	add	r4, r11
      70:	53 0c       	add	r5, r3
      72:	5b 0c       	add	r5, r11
      74:	82 0c       	add	r8, r2
      76:	a9 0c       	add	r10, r9
      78:	d0 0c       	add	r13, r0
      7a:	f7 0c       	add	r15, r7
      7c:	1e 0d       	add	r17, r14
      7e:	45 0d       	add	r20, r5
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfa>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef510>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0xae>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d4>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef744>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b6>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f0>
      d4:	3f 05       	cpc	r19, r15
      d6:	a8 4c       	sbci	r26, 0xC8	; 200
      d8:	cd b2       	in	r12, 0x1d	; 29
      da:	d4 4e       	sbci	r29, 0xE4	; 228
      dc:	b9 38       	cpi	r27, 0x89	; 137
      de:	36 a9       	ldd	r19, Z+54	; 0x36
      e0:	02 0c       	add	r0, r2
      e2:	50 b9       	out	0x00, r21	; 0
      e4:	91 86       	std	Z+9, r9	; 0x09
      e6:	88 08       	sbc	r8, r8
      e8:	3c a6       	std	Y+44, r3	; 0x2c
      ea:	aa aa       	std	Y+50, r10	; 0x32
      ec:	2a be       	out	0x3a, r2	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 00       	.word	0x003f	; ????

000000f4 <__ctors_start>:
      f4:	55 0a       	sbc	r5, r21

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf e5       	ldi	r28, 0x5F	; 95
      fc:	d4 e0       	ldi	r29, 0x04	; 4
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	10 e0       	ldi	r17, 0x00	; 0
     104:	a0 e6       	ldi	r26, 0x60	; 96
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e6 e7       	ldi	r30, 0x76	; 118
     10a:	f1 e3       	ldi	r31, 0x31	; 49
     10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
     10e:	05 90       	lpm	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	ac 3c       	cpi	r26, 0xCC	; 204
     114:	b1 07       	cpc	r27, r17
     116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>

00000118 <__do_clear_bss>:
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	ac ec       	ldi	r26, 0xCC	; 204
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
     120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
     122:	a4 3d       	cpi	r26, 0xD4	; 212
     124:	b2 07       	cpc	r27, r18
     126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>

00000128 <__do_global_ctors>:
     128:	10 e0       	ldi	r17, 0x00	; 0
     12a:	c6 ef       	ldi	r28, 0xF6	; 246
     12c:	d0 e0       	ldi	r29, 0x00	; 0
     12e:	04 c0       	rjmp	.+8      	; 0x138 <__do_global_ctors+0x10>
     130:	22 97       	sbiw	r28, 0x02	; 2
     132:	fe 01       	movw	r30, r28
     134:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__tablejump__>
     138:	c4 3f       	cpi	r28, 0xF4	; 244
     13a:	d1 07       	cpc	r29, r17
     13c:	c9 f7       	brne	.-14     	; 0x130 <__do_global_ctors+0x8>
     13e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <main>
     142:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	fc 01       	movw	r30, r24
     150:	40 83       	st	Z, r20
     152:	51 83       	std	Z+1, r21	; 0x01
     154:	62 83       	std	Z+2, r22	; 0x02
     156:	73 83       	std	Z+3, r23	; 0x03
     158:	04 83       	std	Z+4, r16	; 0x04
     15a:	15 83       	std	Z+5, r17	; 0x05
     15c:	26 83       	std	Z+6, r18	; 0x06
     15e:	37 83       	std	Z+7, r19	; 0x07
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	08 95       	ret

00000166 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     166:	fc 01       	movw	r30, r24
     168:	10 82       	st	Z, r1
     16a:	11 82       	std	Z+1, r1	; 0x01
     16c:	12 82       	std	Z+2, r1	; 0x02
     16e:	13 82       	std	Z+3, r1	; 0x03
     170:	14 82       	std	Z+4, r1	; 0x04
     172:	15 82       	std	Z+5, r1	; 0x05
     174:	16 82       	std	Z+6, r1	; 0x06
     176:	17 82       	std	Z+7, r1	; 0x07
     178:	08 95       	ret

0000017a <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	68 97       	sbiw	r28, 0x18	; 24
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	5c 01       	movw	r10, r24
     1a0:	09 8b       	std	Y+17, r16	; 0x11
     1a2:	1a 8b       	std	Y+18, r17	; 0x12
     1a4:	2b 8b       	std	Y+19, r18	; 0x13
     1a6:	3c 8b       	std	Y+20, r19	; 0x14
     1a8:	4d 8b       	std	Y+21, r20	; 0x15
     1aa:	5e 8b       	std	Y+22, r21	; 0x16
     1ac:	6f 8b       	std	Y+23, r22	; 0x17
     1ae:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     1b0:	2d 89       	ldd	r18, Y+21	; 0x15
     1b2:	3e 89       	ldd	r19, Y+22	; 0x16
     1b4:	4f 89       	ldd	r20, Y+23	; 0x17
     1b6:	58 8d       	ldd	r21, Y+24	; 0x18
     1b8:	fc 01       	movw	r30, r24
     1ba:	64 81       	ldd	r22, Z+4	; 0x04
     1bc:	75 81       	ldd	r23, Z+5	; 0x05
     1be:	86 81       	ldd	r24, Z+6	; 0x06
     1c0:	97 81       	ldd	r25, Z+7	; 0x07
     1c2:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__addsf3>
     1c6:	6b 01       	movw	r12, r22
     1c8:	7c 01       	movw	r14, r24
     1ca:	29 89       	ldd	r18, Y+17	; 0x11
     1cc:	3a 89       	ldd	r19, Y+18	; 0x12
     1ce:	4b 89       	ldd	r20, Y+19	; 0x13
     1d0:	5c 89       	ldd	r21, Y+20	; 0x14
     1d2:	f5 01       	movw	r30, r10
     1d4:	60 81       	ld	r22, Z
     1d6:	71 81       	ldd	r23, Z+1	; 0x01
     1d8:	82 81       	ldd	r24, Z+2	; 0x02
     1da:	93 81       	ldd	r25, Z+3	; 0x03
     1dc:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__addsf3>
     1e0:	ab 01       	movw	r20, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	97 01       	movw	r18, r14
     1e6:	86 01       	movw	r16, r12
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     1f0:	88 e0       	ldi	r24, 0x08	; 8
     1f2:	fe 01       	movw	r30, r28
     1f4:	31 96       	adiw	r30, 0x01	; 1
     1f6:	de 01       	movw	r26, r28
     1f8:	19 96       	adiw	r26, 0x09	; 9
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	8a 95       	dec	r24
     200:	e1 f7       	brne	.-8      	; 0x1fa <_ZN7Complex3addES_+0x80>
     202:	29 85       	ldd	r18, Y+9	; 0x09
     204:	3a 85       	ldd	r19, Y+10	; 0x0a
     206:	4b 85       	ldd	r20, Y+11	; 0x0b
     208:	5c 85       	ldd	r21, Y+12	; 0x0c
     20a:	6d 85       	ldd	r22, Y+13	; 0x0d
     20c:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     20e:	8f 85       	ldd	r24, Y+15	; 0x0f
     210:	98 89       	ldd	r25, Y+16	; 0x10
     212:	68 96       	adiw	r28, 0x18	; 24
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	08 95       	ret

00000234 <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     234:	4f 92       	push	r4
     236:	5f 92       	push	r5
     238:	6f 92       	push	r6
     23a:	7f 92       	push	r7
     23c:	8f 92       	push	r8
     23e:	9f 92       	push	r9
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	a0 97       	sbiw	r28, 0x20	; 32
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	09 8b       	std	Y+17, r16	; 0x11
     266:	1a 8b       	std	Y+18, r17	; 0x12
     268:	2b 8b       	std	Y+19, r18	; 0x13
     26a:	3c 8b       	std	Y+20, r19	; 0x14
     26c:	4d 8b       	std	Y+21, r20	; 0x15
     26e:	5e 8b       	std	Y+22, r21	; 0x16
     270:	6f 8b       	std	Y+23, r22	; 0x17
     272:	78 8f       	std	Y+24, r23	; 0x18
     274:	89 88       	ldd	r8, Y+17	; 0x11
     276:	9a 88       	ldd	r9, Y+18	; 0x12
     278:	ab 88       	ldd	r10, Y+19	; 0x13
     27a:	bc 88       	ldd	r11, Y+20	; 0x14
     27c:	2d 89       	ldd	r18, Y+21	; 0x15
     27e:	3e 89       	ldd	r19, Y+22	; 0x16
     280:	4f 89       	ldd	r20, Y+23	; 0x17
     282:	58 8d       	ldd	r21, Y+24	; 0x18
     284:	2d 8f       	std	Y+29, r18	; 0x1d
     286:	3e 8f       	std	Y+30, r19	; 0x1e
     288:	4f 8f       	std	Y+31, r20	; 0x1f
     28a:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     28c:	fc 01       	movw	r30, r24
     28e:	c0 80       	ld	r12, Z
     290:	d1 80       	ldd	r13, Z+1	; 0x01
     292:	e2 80       	ldd	r14, Z+2	; 0x02
     294:	f3 80       	ldd	r15, Z+3	; 0x03
     296:	24 81       	ldd	r18, Z+4	; 0x04
     298:	35 81       	ldd	r19, Z+5	; 0x05
     29a:	46 81       	ldd	r20, Z+6	; 0x06
     29c:	57 81       	ldd	r21, Z+7	; 0x07
     29e:	29 8f       	std	Y+25, r18	; 0x19
     2a0:	3a 8f       	std	Y+26, r19	; 0x1a
     2a2:	4b 8f       	std	Y+27, r20	; 0x1b
     2a4:	5c 8f       	std	Y+28, r21	; 0x1c
     2a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2aa:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2ac:	58 a1       	ldd	r21, Y+32	; 0x20
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     2b6:	2b 01       	movw	r4, r22
     2b8:	3c 01       	movw	r6, r24
     2ba:	a5 01       	movw	r20, r10
     2bc:	94 01       	movw	r18, r8
     2be:	69 8d       	ldd	r22, Y+25	; 0x19
     2c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2c6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     2ca:	9b 01       	movw	r18, r22
     2cc:	ac 01       	movw	r20, r24
     2ce:	c3 01       	movw	r24, r6
     2d0:	b2 01       	movw	r22, r4
     2d2:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__addsf3>
     2d6:	2b 01       	movw	r4, r22
     2d8:	3c 01       	movw	r6, r24
     2da:	a5 01       	movw	r20, r10
     2dc:	94 01       	movw	r18, r8
     2de:	c7 01       	movw	r24, r14
     2e0:	b6 01       	movw	r22, r12
     2e2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     2e6:	6b 01       	movw	r12, r22
     2e8:	7c 01       	movw	r14, r24
     2ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2ee:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2f0:	58 a1       	ldd	r21, Y+32	; 0x20
     2f2:	69 8d       	ldd	r22, Y+25	; 0x19
     2f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2fa:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	c7 01       	movw	r24, r14
     304:	b6 01       	movw	r22, r12
     306:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__subsf3>
     30a:	ab 01       	movw	r20, r22
     30c:	bc 01       	movw	r22, r24
     30e:	93 01       	movw	r18, r6
     310:	82 01       	movw	r16, r4
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	de 01       	movw	r26, r28
     322:	19 96       	adiw	r26, 0x09	; 9
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <_ZN7Complex3mulES_+0xf0>
     32c:	29 85       	ldd	r18, Y+9	; 0x09
     32e:	3a 85       	ldd	r19, Y+10	; 0x0a
     330:	4b 85       	ldd	r20, Y+11	; 0x0b
     332:	5c 85       	ldd	r21, Y+12	; 0x0c
     334:	6d 85       	ldd	r22, Y+13	; 0x0d
     336:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     338:	8f 85       	ldd	r24, Y+15	; 0x0f
     33a:	98 89       	ldd	r25, Y+16	; 0x10
     33c:	a0 96       	adiw	r28, 0x20	; 32
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	08 95       	ret

0000036a <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     36a:	fc 01       	movw	r30, r24
     36c:	20 81       	ld	r18, Z
     36e:	31 81       	ldd	r19, Z+1	; 0x01
     370:	42 81       	ldd	r20, Z+2	; 0x02
     372:	53 81       	ldd	r21, Z+3	; 0x03
     374:	64 81       	ldd	r22, Z+4	; 0x04
     376:	75 81       	ldd	r23, Z+5	; 0x05
     378:	86 81       	ldd	r24, Z+6	; 0x06
     37a:	97 81       	ldd	r25, Z+7	; 0x07
     37c:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__divsf3>
     380:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <atan>
     384:	08 95       	ret

00000386 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     386:	85 e0       	ldi	r24, 0x05	; 5
     388:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     38a:	81 b1       	in	r24, 0x01	; 1
     38c:	8c 7f       	andi	r24, 0xFC	; 252
     38e:	81 b9       	out	0x01, r24	; 1
     390:	08 95       	ret

00000392 <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     392:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     394:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     396:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     398:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     39a:	06 b6       	in	r0, 0x36	; 54
     39c:	07 fe       	sbrs	r0, 7
     39e:	fd cf       	rjmp	.-6      	; 0x39a <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     3a0:	81 b1       	in	r24, 0x01	; 1
     3a2:	88 7f       	andi	r24, 0xF8	; 248
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	09 f0       	breq	.+2      	; 0x3aa <_ZN6EEProm4readEj+0x18>
     3a8:	41 c0       	rjmp	.+130    	; 0x42c <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     3aa:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     3ac:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     3ae:	06 b6       	in	r0, 0x36	; 54
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     3b4:	81 b1       	in	r24, 0x01	; 1
     3b6:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     3b8:	88 31       	cpi	r24, 0x18	; 24
     3ba:	71 f7       	brne	.-36     	; 0x398 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     3bc:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3be:	84 e8       	ldi	r24, 0x84	; 132
     3c0:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3c2:	06 b6       	in	r0, 0x36	; 54
     3c4:	07 fe       	sbrs	r0, 7
     3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3c8:	81 b1       	in	r24, 0x01	; 1
     3ca:	88 7f       	andi	r24, 0xF8	; 248
     3cc:	88 32       	cpi	r24, 0x28	; 40
     3ce:	81 f5       	brne	.+96     	; 0x430 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     3d0:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3d2:	84 e8       	ldi	r24, 0x84	; 132
     3d4:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3d6:	06 b6       	in	r0, 0x36	; 54
     3d8:	07 fe       	sbrs	r0, 7
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3dc:	81 b1       	in	r24, 0x01	; 1
     3de:	88 7f       	andi	r24, 0xF8	; 248
     3e0:	88 32       	cpi	r24, 0x28	; 40
     3e2:	41 f5       	brne	.+80     	; 0x434 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3e4:	84 ea       	ldi	r24, 0xA4	; 164
     3e6:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3e8:	06 b6       	in	r0, 0x36	; 54
     3ea:	07 fe       	sbrs	r0, 7
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     3ee:	81 b1       	in	r24, 0x01	; 1
     3f0:	88 7f       	andi	r24, 0xF8	; 248
     3f2:	80 31       	cpi	r24, 0x10	; 16
     3f4:	09 f5       	brne	.+66     	; 0x438 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     3f6:	81 ea       	ldi	r24, 0xA1	; 161
     3f8:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3fa:	84 e8       	ldi	r24, 0x84	; 132
     3fc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3fe:	06 b6       	in	r0, 0x36	; 54
     400:	07 fe       	sbrs	r0, 7
     402:	fd cf       	rjmp	.-6      	; 0x3fe <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     404:	81 b1       	in	r24, 0x01	; 1
     406:	88 7f       	andi	r24, 0xF8	; 248
     408:	80 34       	cpi	r24, 0x40	; 64
     40a:	c1 f4       	brne	.+48     	; 0x43c <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     40c:	84 e8       	ldi	r24, 0x84	; 132
     40e:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     410:	06 b6       	in	r0, 0x36	; 54
     412:	07 fe       	sbrs	r0, 7
     414:	fd cf       	rjmp	.-6      	; 0x410 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     416:	81 b1       	in	r24, 0x01	; 1
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	88 35       	cpi	r24, 0x58	; 88
     41c:	89 f4       	brne	.+34     	; 0x440 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     41e:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     420:	94 e9       	ldi	r25, 0x94	; 148
     422:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     424:	06 b6       	in	r0, 0x36	; 54
     426:	04 fc       	sbrc	r0, 4
     428:	fd cf       	rjmp	.-6      	; 0x424 <_ZN6EEProm4readEj+0x92>
     42a:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     440:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     442:	08 95       	ret

00000444 <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	c4 56       	subi	r28, 0x64	; 100
     45a:	d1 09       	sbc	r29, r1
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	6c 01       	movw	r12, r24
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     472:	b8 01       	movw	r22, r16
     474:	c6 01       	movw	r24, r12
     476:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN6EEProm4readEj>
     47a:	f7 01       	movw	r30, r14
     47c:	81 93       	st	Z+, r24
     47e:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     480:	8f 3f       	cpi	r24, 0xFF	; 255
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	32 97       	sbiw	r30, 0x02	; 2
     486:	20 81       	ld	r18, Z
     488:	2f 3f       	cpi	r18, 0xFF	; 255
     48a:	61 f4       	brne	.+24     	; 0x4a4 <__stack+0x45>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	20 81       	ld	r18, Z
     490:	2f 3f       	cpi	r18, 0xFF	; 255
     492:	41 f4       	brne	.+16     	; 0x4a4 <__stack+0x45>
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	20 81       	ld	r18, Z
     498:	2f 3f       	cpi	r18, 0xFF	; 255
     49a:	21 f4       	brne	.+8      	; 0x4a4 <__stack+0x45>
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	8f 3f       	cpi	r24, 0xFF	; 255
     4a2:	19 f0       	breq	.+6      	; 0x4aa <__stack+0x4b>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4a4:	0f 5f       	subi	r16, 0xFF	; 255
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     4a8:	e4 cf       	rjmp	.-56     	; 0x472 <__stack+0x13>
	return eeprom_mem;
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	cc 59       	subi	r28, 0x9C	; 156
     4b0:	df 4f       	sbci	r29, 0xFF	; 255
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret

000004ce <_Z12print_statesiP7ComplexPc>:

Serial s;
QEPU::Utils u;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	7c 01       	movw	r14, r24
     4dc:	06 2f       	mov	r16, r22
     4de:	17 2f       	mov	r17, r23
	s.writestrln(message);
     4e0:	ba 01       	movw	r22, r20
     4e2:	8d ec       	ldi	r24, 0xCD	; 205
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     4ea:	1e 14       	cp	r1, r14
     4ec:	1f 04       	cpc	r1, r15
     4ee:	0c f0       	brlt	.+2      	; 0x4f2 <_Z12print_statesiP7ComplexPc+0x24>
     4f0:	47 c0       	rjmp	.+142    	; 0x580 <_Z12print_statesiP7ComplexPc+0xb2>
     4f2:	c0 2f       	mov	r28, r16
     4f4:	d1 2f       	mov	r29, r17
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
     4fa:	6a e6       	ldi	r22, 0x6A	; 106
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	8d ec       	ldi	r24, 0xCD	; 205
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6Serial8writestrEPc>
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	4a e7       	ldi	r20, 0x7A	; 122
     50c:	54 e4       	ldi	r21, 0x44	; 68
     50e:	68 81       	ld	r22, Y
     510:	79 81       	ldd	r23, Y+1	; 0x01
     512:	8a 81       	ldd	r24, Y+2	; 0x02
     514:	9b 81       	ldd	r25, Y+3	; 0x03
     516:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     51a:	0e 94 20 10 	call	0x2040	; 0x2040 <__fixsfsi>
     51e:	8c ec       	ldi	r24, 0xCC	; 204
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_ZN4QEPU5Utils7int2strEi>
     526:	bc 01       	movw	r22, r24
     528:	8d ec       	ldi	r24, 0xCD	; 205
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
     530:	6e e6       	ldi	r22, 0x6E	; 110
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	8d ec       	ldi	r24, 0xCD	; 205
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6Serial8writestrEPc>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	4a e7       	ldi	r20, 0x7A	; 122
     542:	54 e4       	ldi	r21, 0x44	; 68
     544:	6c 81       	ldd	r22, Y+4	; 0x04
     546:	7d 81       	ldd	r23, Y+5	; 0x05
     548:	8e 81       	ldd	r24, Y+6	; 0x06
     54a:	9f 81       	ldd	r25, Y+7	; 0x07
     54c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     550:	0e 94 20 10 	call	0x2040	; 0x2040 <__fixsfsi>
     554:	8c ec       	ldi	r24, 0xCC	; 204
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_ZN4QEPU5Utils7int2strEi>
     55c:	bc 01       	movw	r22, r24
     55e:	8d ec       	ldi	r24, 0xCD	; 205
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     566:	6b eb       	ldi	r22, 0xBB	; 187
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	8d ec       	ldi	r24, 0xCD	; 205
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial10writestrlnEPc>
QEPU::Utils u;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     572:	0f 5f       	subi	r16, 0xFF	; 255
     574:	1f 4f       	sbci	r17, 0xFF	; 255
     576:	28 96       	adiw	r28, 0x08	; 8
     578:	0e 15       	cp	r16, r14
     57a:	1f 05       	cpc	r17, r15
     57c:	09 f0       	breq	.+2      	; 0x580 <_Z12print_statesiP7ComplexPc+0xb2>
     57e:	bd cf       	rjmp	.-134    	; 0x4fa <_Z12print_statesiP7ComplexPc+0x2c>
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	08 95       	ret

0000058e <_ZN5Gates10setup_seedEv>:

void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__eerd_word_m16>
     596:	0e 94 03 14 	call	0x2806	; 0x2806 <srand>
	eeprom_write_word(&randinit,rand()%10000);
     59a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <rand>
     59e:	60 e1       	ldi	r22, 0x10	; 16
     5a0:	77 e2       	ldi	r23, 0x27	; 39
     5a2:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__divmodhi4>
     5a6:	bc 01       	movw	r22, r24
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__eewr_word_m16>
     5b0:	08 95       	ret

000005b2 <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}
     5b2:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN5Gates10setup_seedEv>
     5b6:	08 95       	ret

000005b8 <_ZN5Gates5touchEd>:
void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

int Gates::touch(double probability){
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	6a 01       	movw	r12, r20
     5c6:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     5c8:	0e 94 fe 13 	call	0x27fc	; 0x27fc <rand>
     5cc:	ec 01       	movw	r28, r24
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	3e ef       	ldi	r19, 0xFE	; 254
     5d2:	4f ef       	ldi	r20, 0xFF	; 255
     5d4:	56 e4       	ldi	r21, 0x46	; 70
     5d6:	c7 01       	movw	r24, r14
     5d8:	b6 01       	movw	r22, r12
     5da:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     5de:	6b 01       	movw	r12, r22
     5e0:	7c 01       	movw	r14, r24
     5e2:	be 01       	movw	r22, r28
     5e4:	88 27       	eor	r24, r24
     5e6:	77 fd       	sbrc	r23, 7
     5e8:	80 95       	com	r24
     5ea:	98 2f       	mov	r25, r24
     5ec:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__floatsisf>
     5f0:	9b 01       	movw	r18, r22
     5f2:	ac 01       	movw	r20, r24
     5f4:	c1 e0       	ldi	r28, 0x01	; 1
     5f6:	d0 e0       	ldi	r29, 0x00	; 0
     5f8:	c7 01       	movw	r24, r14
     5fa:	b6 01       	movw	r22, r12
     5fc:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__gesf2>
     600:	88 23       	and	r24, r24
     602:	14 f4       	brge	.+4      	; 0x608 <_ZN5Gates5touchEd+0x50>
     604:	c0 e0       	ldi	r28, 0x00	; 0
     606:	d0 e0       	ldi	r29, 0x00	; 0
}
     608:	ce 01       	movw	r24, r28
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	df 90       	pop	r13
     614:	cf 90       	pop	r12
     616:	08 95       	ret

00000618 <_ZN5Gates9kroneckerEP7Complexi>:
int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
	return result;
}

Complex * Gates::kronecker(Complex * vec,int qb_count){
     618:	2f 92       	push	r2
     61a:	3f 92       	push	r3
     61c:	4f 92       	push	r4
     61e:	5f 92       	push	r5
     620:	6f 92       	push	r6
     622:	7f 92       	push	r7
     624:	8f 92       	push	r8
     626:	9f 92       	push	r9
     628:	af 92       	push	r10
     62a:	bf 92       	push	r11
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	00 d0       	rcall	.+0      	; 0x63e <_ZN5Gates9kroneckerEP7Complexi+0x26>
     63e:	00 d0       	rcall	.+0      	; 0x640 <_ZN5Gates9kroneckerEP7Complexi+0x28>
     640:	00 d0       	rcall	.+0      	; 0x642 <_ZN5Gates9kroneckerEP7Complexi+0x2a>
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	7c 01       	movw	r14, r24
     648:	4b 01       	movw	r8, r22
     64a:	3a 01       	movw	r6, r20
	if(qb_count==1) return vec;
     64c:	41 30       	cpi	r20, 0x01	; 1
     64e:	51 05       	cpc	r21, r1
     650:	09 f4       	brne	.+2      	; 0x654 <_ZN5Gates9kroneckerEP7Complexi+0x3c>
     652:	bf c0       	rjmp	.+382    	; 0x7d2 <_ZN5Gates9kroneckerEP7Complexi+0x1ba>
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     654:	14 16       	cp	r1, r20
     656:	15 06       	cpc	r1, r21
     658:	0c f0       	brlt	.+2      	; 0x65c <_ZN5Gates9kroneckerEP7Complexi+0x44>
     65a:	be c0       	rjmp	.+380    	; 0x7d8 <_ZN5Gates9kroneckerEP7Complexi+0x1c0>
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	a1 e0       	ldi	r26, 0x01	; 1
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	be 83       	std	Y+6, r27	; 0x06
     666:	ad 83       	std	Y+5, r26	; 0x05
     668:	ed 81       	ldd	r30, Y+5	; 0x05
     66a:	fe 81       	ldd	r31, Y+6	; 0x06
     66c:	ee 0f       	add	r30, r30
     66e:	ff 1f       	adc	r31, r31
     670:	fe 83       	std	Y+6, r31	; 0x06
     672:	ed 83       	std	Y+5, r30	; 0x05
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	86 15       	cp	r24, r6
     678:	97 05       	cpc	r25, r7
     67a:	b1 f7       	brne	.-20     	; 0x668 <_ZN5Gates9kroneckerEP7Complexi+0x50>
}

Complex * Gates::kronecker(Complex * vec,int qb_count){
	if(qb_count==1) return vec;
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     67c:	cf 01       	movw	r24, r30
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
     68e:	38 2e       	mov	r3, r24
     690:	29 2e       	mov	r2, r25
	print_states(2*2,vec,"Before: ");
     692:	45 e7       	ldi	r20, 0x75	; 117
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	b4 01       	movw	r22, r8
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>
	*/
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     6a0:	2d 81       	ldd	r18, Y+5	; 0x05
     6a2:	3e 81       	ldd	r19, Y+6	; 0x06
     6a4:	12 16       	cp	r1, r18
     6a6:	13 06       	cpc	r1, r19
     6a8:	0c f4       	brge	.+2      	; 0x6ac <_ZN5Gates9kroneckerEP7Complexi+0x94>
     6aa:	a7 c0       	rjmp	.+334    	; 0x7fa <_ZN5Gates9kroneckerEP7Complexi+0x1e2>
     6ac:	3f c0       	rjmp	.+126    	; 0x72c <_ZN5Gates9kroneckerEP7Complexi+0x114>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	9a 81       	ldd	r25, Y+2	; 0x02
     6b2:	8e 17       	cp	r24, r30
     6b4:	9f 07       	cpc	r25, r31
     6b6:	29 f4       	brne	.+10     	; 0x6c2 <_ZN5Gates9kroneckerEP7Complexi+0xaa>
     6b8:	9f ef       	ldi	r25, 0xFF	; 255
     6ba:	49 1a       	sub	r4, r25
     6bc:	59 0a       	sbc	r5, r25
     6be:	eb 81       	ldd	r30, Y+3	; 0x03
     6c0:	fc 81       	ldd	r31, Y+4	; 0x04
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     6c2:	3f 01       	movw	r6, r30
     6c4:	af ef       	ldi	r26, 0xFF	; 255
     6c6:	6a 1a       	sub	r6, r26
     6c8:	7a 0a       	sbc	r7, r26
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	ee 0f       	add	r30, r30
     6d4:	ff 1f       	adc	r31, r31
     6d6:	e8 0d       	add	r30, r8
     6d8:	f9 1d       	adc	r31, r9
     6da:	00 81       	ld	r16, Z
     6dc:	11 81       	ldd	r17, Z+1	; 0x01
     6de:	22 81       	ldd	r18, Z+2	; 0x02
     6e0:	33 81       	ldd	r19, Z+3	; 0x03
     6e2:	44 81       	ldd	r20, Z+4	; 0x04
     6e4:	55 81       	ldd	r21, Z+5	; 0x05
     6e6:	66 81       	ldd	r22, Z+6	; 0x06
     6e8:	77 81       	ldd	r23, Z+7	; 0x07
     6ea:	c2 01       	movw	r24, r4
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	88 0d       	add	r24, r8
     6fa:	99 1d       	adc	r25, r9
     6fc:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     700:	f6 01       	movw	r30, r12
     702:	20 83       	st	Z, r18
     704:	31 83       	std	Z+1, r19	; 0x01
     706:	42 83       	std	Z+2, r20	; 0x02
     708:	53 83       	std	Z+3, r21	; 0x03
     70a:	64 83       	std	Z+4, r22	; 0x04
     70c:	75 83       	std	Z+5, r23	; 0x05
     70e:	86 83       	std	Z+6, r24	; 0x06
     710:	97 83       	std	Z+7, r25	; 0x07
	*/
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     712:	ff ef       	ldi	r31, 0xFF	; 255
     714:	af 1a       	sub	r10, r31
     716:	bf 0a       	sbc	r11, r31
     718:	28 e0       	ldi	r18, 0x08	; 8
     71a:	c2 0e       	add	r12, r18
     71c:	d1 1c       	adc	r13, r1
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	9e 81       	ldd	r25, Y+6	; 0x06
     722:	a8 16       	cp	r10, r24
     724:	b9 06       	cpc	r11, r25
     726:	14 f4       	brge	.+4      	; 0x72c <_ZN5Gates9kroneckerEP7Complexi+0x114>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     728:	f3 01       	movw	r30, r6
     72a:	c1 cf       	rjmp	.-126    	; 0x6ae <_ZN5Gates9kroneckerEP7Complexi+0x96>
     72c:	43 2c       	mov	r4, r3
     72e:	52 2c       	mov	r5, r2
	}
	
	//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
	int binary_touch=1;
	while(binary_touch)	for(int i=0;i<kron_size;i++)
     730:	00 e0       	ldi	r16, 0x00	; 0
     732:	10 e0       	ldi	r17, 0x00	; 0
     734:	42 c0       	rjmp	.+132    	; 0x7ba <_ZN5Gates9kroneckerEP7Complexi+0x1a2>
		if(touch(kronvec[i].re)==binary_touch){
     736:	56 01       	movw	r10, r12
     738:	d6 01       	movw	r26, r12
     73a:	4d 91       	ld	r20, X+
     73c:	5d 91       	ld	r21, X+
     73e:	6d 91       	ld	r22, X+
     740:	7c 91       	ld	r23, X
     742:	c7 01       	movw	r24, r14
     744:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN5Gates5touchEd>
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	59 f5       	brne	.+86     	; 0x7a2 <_ZN5Gates9kroneckerEP7Complexi+0x18a>
     74c:	8d 81       	ldd	r24, Y+5	; 0x05
     74e:	9e 81       	ldd	r25, Y+6	; 0x06
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	88 0d       	add	r24, r8
     75e:	99 1d       	adc	r25, r9
     760:	f4 01       	movw	r30, r8
			for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     762:	10 82       	st	Z, r1
     764:	11 82       	std	Z+1, r1	; 0x01
     766:	12 82       	std	Z+2, r1	; 0x02
     768:	13 82       	std	Z+3, r1	; 0x03
     76a:	14 82       	std	Z+4, r1	; 0x04
     76c:	15 82       	std	Z+5, r1	; 0x05
     76e:	16 82       	std	Z+6, r1	; 0x06
     770:	17 82       	std	Z+7, r1	; 0x07
     772:	38 96       	adiw	r30, 0x08	; 8
     774:	e8 17       	cp	r30, r24
     776:	f9 07       	cpc	r31, r25
     778:	a1 f7       	brne	.-24     	; 0x762 <_ZN5Gates9kroneckerEP7Complexi+0x14a>
			kronvec[i].re=binary_touch;
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 e8       	ldi	r26, 0x80	; 128
     780:	bf e3       	ldi	r27, 0x3F	; 63
     782:	f5 01       	movw	r30, r10
     784:	80 83       	st	Z, r24
     786:	91 83       	std	Z+1, r25	; 0x01
     788:	a2 83       	std	Z+2, r26	; 0x02
     78a:	b3 83       	std	Z+3, r27	; 0x03
			binary_touch=0;
			break;
		}
	
	print_states(kron_size,kronvec,"Kronecker: ");
     78c:	4e e7       	ldi	r20, 0x7E	; 126
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	63 2d       	mov	r22, r3
     792:	72 2d       	mov	r23, r2
     794:	8d 81       	ldd	r24, Y+5	; 0x05
     796:	9e 81       	ldd	r25, Y+6	; 0x06
     798:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>

	return kronvec;
     79c:	83 2d       	mov	r24, r3
     79e:	92 2d       	mov	r25, r2
     7a0:	3b c0       	rjmp	.+118    	; 0x818 <_ZN5Gates9kroneckerEP7Complexi+0x200>
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
	}
	
	//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
	int binary_touch=1;
	while(binary_touch)	for(int i=0;i<kron_size;i++)
     7a2:	ff ef       	ldi	r31, 0xFF	; 255
     7a4:	6f 1a       	sub	r6, r31
     7a6:	7f 0a       	sbc	r7, r31
     7a8:	28 e0       	ldi	r18, 0x08	; 8
     7aa:	c2 0e       	add	r12, r18
     7ac:	d1 1c       	adc	r13, r1
     7ae:	8d 81       	ldd	r24, Y+5	; 0x05
     7b0:	9e 81       	ldd	r25, Y+6	; 0x06
     7b2:	68 16       	cp	r6, r24
     7b4:	79 06       	cpc	r7, r25
     7b6:	09 f0       	breq	.+2      	; 0x7ba <_ZN5Gates9kroneckerEP7Complexi+0x1a2>
     7b8:	be cf       	rjmp	.-132    	; 0x736 <_ZN5Gates9kroneckerEP7Complexi+0x11e>
     7ba:	ad 81       	ldd	r26, Y+5	; 0x05
     7bc:	be 81       	ldd	r27, Y+6	; 0x06
     7be:	1a 16       	cp	r1, r26
     7c0:	1b 06       	cpc	r1, r27
     7c2:	dc f7       	brge	.-10     	; 0x7ba <_ZN5Gates9kroneckerEP7Complexi+0x1a2>
     7c4:	84 2c       	mov	r8, r4
     7c6:	95 2c       	mov	r9, r5
     7c8:	c4 2c       	mov	r12, r4
     7ca:	d5 2c       	mov	r13, r5
     7cc:	60 2e       	mov	r6, r16
     7ce:	71 2e       	mov	r7, r17
     7d0:	b2 cf       	rjmp	.-156    	; 0x736 <_ZN5Gates9kroneckerEP7Complexi+0x11e>
	int result=1; for(int i=0;i<exp;i++) result*=base;
	return result;
}

Complex * Gates::kronecker(Complex * vec,int qb_count){
	if(qb_count==1) return vec;
     7d2:	86 2f       	mov	r24, r22
     7d4:	99 2d       	mov	r25, r9
     7d6:	20 c0       	rjmp	.+64     	; 0x818 <_ZN5Gates9kroneckerEP7Complexi+0x200>
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     7d8:	88 e0       	ldi	r24, 0x08	; 8
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
     7e0:	38 2e       	mov	r3, r24
     7e2:	29 2e       	mov	r2, r25
	print_states(2*2,vec,"Before: ");
     7e4:	45 e7       	ldi	r20, 0x75	; 117
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	b4 01       	movw	r22, r8
     7ea:	84 e0       	ldi	r24, 0x04	; 4
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>
     7f2:	e1 e0       	ldi	r30, 0x01	; 1
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	fe 83       	std	Y+6, r31	; 0x06
     7f8:	ed 83       	std	Y+5, r30	; 0x05
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     7fa:	93 01       	movw	r18, r6
     7fc:	22 0f       	add	r18, r18
     7fe:	33 1f       	adc	r19, r19
     800:	3a 83       	std	Y+2, r19	; 0x02
     802:	29 83       	std	Y+1, r18	; 0x01
     804:	c3 2c       	mov	r12, r3
     806:	d2 2c       	mov	r13, r2
     808:	f3 01       	movw	r30, r6
     80a:	a1 2c       	mov	r10, r1
     80c:	b1 2c       	mov	r11, r1
     80e:	41 2c       	mov	r4, r1
     810:	51 2c       	mov	r5, r1
     812:	6b 82       	std	Y+3, r6	; 0x03
     814:	7c 82       	std	Y+4, r7	; 0x04
     816:	4b cf       	rjmp	.-362    	; 0x6ae <_ZN5Gates9kroneckerEP7Complexi+0x96>
		}
	
	print_states(kron_size,kronvec,"Kronecker: ");

	return kronvec;
}
     818:	26 96       	adiw	r28, 0x06	; 6
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	bf 90       	pop	r11
     836:	af 90       	pop	r10
     838:	9f 90       	pop	r9
     83a:	8f 90       	pop	r8
     83c:	7f 90       	pop	r7
     83e:	6f 90       	pop	r6
     840:	5f 90       	pop	r5
     842:	4f 90       	pop	r4
     844:	3f 90       	pop	r3
     846:	2f 90       	pop	r2
     848:	08 95       	ret

0000084a <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     84a:	2f 92       	push	r2
     84c:	3f 92       	push	r3
     84e:	4f 92       	push	r4
     850:	5f 92       	push	r5
     852:	6f 92       	push	r6
     854:	7f 92       	push	r7
     856:	8f 92       	push	r8
     858:	9f 92       	push	r9
     85a:	af 92       	push	r10
     85c:	bf 92       	push	r11
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	28 97       	sbiw	r28, 0x08	; 8
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	9e 83       	std	Y+6, r25	; 0x06
     880:	8d 83       	std	Y+5, r24	; 0x05
     882:	7a 83       	std	Y+2, r23	; 0x02
     884:	69 83       	std	Y+1, r22	; 0x01
     886:	04 2f       	mov	r16, r20
     888:	15 2f       	mov	r17, r21
     88a:	c2 2e       	mov	r12, r18
     88c:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     88e:	cb 01       	movw	r24, r22
     890:	82 95       	swap	r24
     892:	92 95       	swap	r25
     894:	90 7f       	andi	r25, 0xF0	; 240
     896:	98 27       	eor	r25, r24
     898:	80 7f       	andi	r24, 0xF0	; 240
     89a:	98 27       	eor	r25, r24
     89c:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
     8a0:	8b 83       	std	Y+3, r24	; 0x03
     8a2:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     8a4:	29 80       	ldd	r2, Y+1	; 0x01
     8a6:	3a 80       	ldd	r3, Y+2	; 0x02
     8a8:	22 0c       	add	r2, r2
     8aa:	33 1c       	adc	r3, r3
     8ac:	12 14       	cp	r1, r2
     8ae:	13 04       	cpc	r1, r3
     8b0:	0c f0       	brlt	.+2      	; 0x8b4 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     8b2:	ac c0       	rjmp	.+344    	; 0xa0c <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     8b4:	a8 2e       	mov	r10, r24
     8b6:	b9 2e       	mov	r11, r25
     8b8:	e0 2e       	mov	r14, r16
     8ba:	f1 2e       	mov	r15, r17
     8bc:	0c 2d       	mov	r16, r12
     8be:	1d 2d       	mov	r17, r13
     8c0:	81 2c       	mov	r8, r1
     8c2:	91 2c       	mov	r9, r1
     8c4:	b8 86       	std	Y+8, r11	; 0x08
     8c6:	af 82       	std	Y+7, r10	; 0x07
     8c8:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     8ca:	f7 01       	movw	r30, r14
     8cc:	41 90       	ld	r4, Z+
     8ce:	51 90       	ld	r5, Z+
     8d0:	7f 01       	movw	r14, r30
     8d2:	66 24       	eor	r6, r6
     8d4:	57 fc       	sbrc	r5, 7
     8d6:	60 94       	com	r6
     8d8:	76 2c       	mov	r7, r6
     8da:	c3 01       	movw	r24, r6
     8dc:	b2 01       	movw	r22, r4
     8de:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__floatsisf>
     8e2:	2b ed       	ldi	r18, 0xDB	; 219
     8e4:	3f e0       	ldi	r19, 0x0F	; 15
     8e6:	49 e4       	ldi	r20, 0x49	; 73
     8e8:	50 e4       	ldi	r21, 0x40	; 64
     8ea:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	44 eb       	ldi	r20, 0xB4	; 180
     8f4:	53 e4       	ldi	r21, 0x43	; 67
     8f6:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__divsf3>
     8fa:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <cos>
     8fe:	ef 81       	ldd	r30, Y+7	; 0x07
     900:	f8 85       	ldd	r31, Y+8	; 0x08
     902:	60 83       	st	Z, r22
     904:	71 83       	std	Z+1, r23	; 0x01
     906:	82 83       	std	Z+2, r24	; 0x02
     908:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     90a:	c3 01       	movw	r24, r6
     90c:	b2 01       	movw	r22, r4
     90e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__floatsisf>
     912:	2b ed       	ldi	r18, 0xDB	; 219
     914:	3f e0       	ldi	r19, 0x0F	; 15
     916:	49 e4       	ldi	r20, 0x49	; 73
     918:	50 e4       	ldi	r21, 0x40	; 64
     91a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	44 eb       	ldi	r20, 0xB4	; 180
     924:	53 e4       	ldi	r21, 0x43	; 67
     926:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__divsf3>
     92a:	0e 94 c6 11 	call	0x238c	; 0x238c <sin>
     92e:	2b 01       	movw	r4, r22
     930:	3c 01       	movw	r6, r24
     932:	58 01       	movw	r10, r16
     934:	f8 01       	movw	r30, r16
     936:	61 91       	ld	r22, Z+
     938:	71 91       	ld	r23, Z+
     93a:	8f 01       	movw	r16, r30
     93c:	88 27       	eor	r24, r24
     93e:	77 fd       	sbrc	r23, 7
     940:	80 95       	com	r24
     942:	98 2f       	mov	r25, r24
     944:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__floatsisf>
     948:	2b ed       	ldi	r18, 0xDB	; 219
     94a:	3f e0       	ldi	r19, 0x0F	; 15
     94c:	49 e4       	ldi	r20, 0x49	; 73
     94e:	50 e4       	ldi	r21, 0x40	; 64
     950:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	44 e3       	ldi	r20, 0x34	; 52
     95a:	53 e4       	ldi	r21, 0x43	; 67
     95c:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__divsf3>
     960:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <cos>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	c3 01       	movw	r24, r6
     96a:	b2 01       	movw	r22, r4
     96c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     970:	ef 81       	ldd	r30, Y+7	; 0x07
     972:	f8 85       	ldd	r31, Y+8	; 0x08
     974:	60 87       	std	Z+8, r22	; 0x08
     976:	71 87       	std	Z+9, r23	; 0x09
     978:	82 87       	std	Z+10, r24	; 0x0a
     97a:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     97c:	f6 01       	movw	r30, r12
     97e:	60 81       	ld	r22, Z
     980:	71 81       	ldd	r23, Z+1	; 0x01
     982:	88 27       	eor	r24, r24
     984:	77 fd       	sbrc	r23, 7
     986:	80 95       	com	r24
     988:	98 2f       	mov	r25, r24
     98a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__floatsisf>
     98e:	2b ed       	ldi	r18, 0xDB	; 219
     990:	3f e0       	ldi	r19, 0x0F	; 15
     992:	49 e4       	ldi	r20, 0x49	; 73
     994:	50 e4       	ldi	r21, 0x40	; 64
     996:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	44 eb       	ldi	r20, 0xB4	; 180
     9a0:	53 e4       	ldi	r21, 0x43	; 67
     9a2:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__divsf3>
     9a6:	0e 94 c6 11 	call	0x238c	; 0x238c <sin>
     9aa:	2b 01       	movw	r4, r22
     9ac:	3c 01       	movw	r6, r24
     9ae:	f5 01       	movw	r30, r10
     9b0:	60 81       	ld	r22, Z
     9b2:	71 81       	ldd	r23, Z+1	; 0x01
     9b4:	88 27       	eor	r24, r24
     9b6:	77 fd       	sbrc	r23, 7
     9b8:	80 95       	com	r24
     9ba:	98 2f       	mov	r25, r24
     9bc:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__floatsisf>
     9c0:	2b ed       	ldi	r18, 0xDB	; 219
     9c2:	3f e0       	ldi	r19, 0x0F	; 15
     9c4:	49 e4       	ldi	r20, 0x49	; 73
     9c6:	50 e4       	ldi	r21, 0x40	; 64
     9c8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	44 e3       	ldi	r20, 0x34	; 52
     9d2:	53 e4       	ldi	r21, 0x43	; 67
     9d4:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__divsf3>
     9d8:	0e 94 c6 11 	call	0x238c	; 0x238c <sin>
     9dc:	9b 01       	movw	r18, r22
     9de:	ac 01       	movw	r20, r24
     9e0:	c3 01       	movw	r24, r6
     9e2:	b2 01       	movw	r22, r4
     9e4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     9e8:	ef 81       	ldd	r30, Y+7	; 0x07
     9ea:	f8 85       	ldd	r31, Y+8	; 0x08
     9ec:	64 87       	std	Z+12, r22	; 0x0c
     9ee:	75 87       	std	Z+13, r23	; 0x0d
     9f0:	86 87       	std	Z+14, r24	; 0x0e
     9f2:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     9f4:	f2 e0       	ldi	r31, 0x02	; 2
     9f6:	8f 0e       	add	r8, r31
     9f8:	91 1c       	adc	r9, r1
     9fa:	8f 81       	ldd	r24, Y+7	; 0x07
     9fc:	98 85       	ldd	r25, Y+8	; 0x08
     9fe:	40 96       	adiw	r24, 0x10	; 16
     a00:	98 87       	std	Y+8, r25	; 0x08
     a02:	8f 83       	std	Y+7, r24	; 0x07
     a04:	82 14       	cp	r8, r2
     a06:	93 04       	cpc	r9, r3
     a08:	0c f4       	brge	.+2      	; 0xa0c <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     a0a:	5e cf       	rjmp	.-324    	; 0x8c8 <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
	return kronecker(vec,qb_count); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     a0c:	49 81       	ldd	r20, Y+1	; 0x01
     a0e:	5a 81       	ldd	r21, Y+2	; 0x02
     a10:	6b 81       	ldd	r22, Y+3	; 0x03
     a12:	7c 81       	ldd	r23, Y+4	; 0x04
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	9e 81       	ldd	r25, Y+6	; 0x06
     a18:	0e 94 0c 03 	call	0x618	; 0x618 <_ZN5Gates9kroneckerEP7Complexi>
}
     a1c:	28 96       	adiw	r28, 0x08	; 8
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	bf 90       	pop	r11
     a3a:	af 90       	pop	r10
     a3c:	9f 90       	pop	r9
     a3e:	8f 90       	pop	r8
     a40:	7f 90       	pop	r7
     a42:	6f 90       	pop	r6
     a44:	5f 90       	pop	r5
     a46:	4f 90       	pop	r4
     a48:	3f 90       	pop	r3
     a4a:	2f 90       	pop	r2
     a4c:	08 95       	ret

00000a4e <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	8b 01       	movw	r16, r22
     a5c:	7a 01       	movw	r14, r20
	int* newthephi=(int*)malloc(sizeof(int)*2);
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
     a66:	ec 01       	movw	r28, r24
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
     a68:	f8 01       	movw	r30, r16
     a6a:	60 81       	ld	r22, Z
     a6c:	71 81       	ldd	r23, Z+1	; 0x01
     a6e:	82 81       	ldd	r24, Z+2	; 0x02
     a70:	93 81       	ldd	r25, Z+3	; 0x03
     a72:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <acos>
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	44 eb       	ldi	r20, 0xB4	; 180
     a7c:	53 e4       	ldi	r21, 0x43	; 67
     a7e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     a82:	2b ed       	ldi	r18, 0xDB	; 219
     a84:	3f e0       	ldi	r19, 0x0F	; 15
     a86:	49 e4       	ldi	r20, 0x49	; 73
     a88:	50 e4       	ldi	r21, 0x40	; 64
     a8a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__divsf3>
     a8e:	0e 94 20 10 	call	0x2040	; 0x2040 <__fixsfsi>
     a92:	79 83       	std	Y+1, r23	; 0x01
     a94:	68 83       	st	Y, r22
	newthephi[1]=(180*vec[1].arg())/M_PI;
     a96:	c8 01       	movw	r24, r16
     a98:	08 96       	adiw	r24, 0x08	; 8
     a9a:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN7Complex3argEv>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	44 e3       	ldi	r20, 0x34	; 52
     aa4:	53 e4       	ldi	r21, 0x43	; 67
     aa6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
     aaa:	2b ed       	ldi	r18, 0xDB	; 219
     aac:	3f e0       	ldi	r19, 0x0F	; 15
     aae:	49 e4       	ldi	r20, 0x49	; 73
     ab0:	50 e4       	ldi	r21, 0x40	; 64
     ab2:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__divsf3>
     ab6:	0e 94 20 10 	call	0x2040	; 0x2040 <__fixsfsi>
     aba:	7b 83       	std	Y+3, r23	; 0x03
     abc:	6a 83       	std	Y+2, r22	; 0x02
	
	
	print_states(qb_count*2,vec,"After: ");
     abe:	4a e8       	ldi	r20, 0x8A	; 138
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	b8 01       	movw	r22, r16
     ac4:	c7 01       	movw	r24, r14
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     ace:	ce 01       	movw	r24, r28
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     ade:	2f 92       	push	r2
     ae0:	3f 92       	push	r3
     ae2:	4f 92       	push	r4
     ae4:	5f 92       	push	r5
     ae6:	6f 92       	push	r6
     ae8:	7f 92       	push	r7
     aea:	8f 92       	push	r8
     aec:	9f 92       	push	r9
     aee:	af 92       	push	r10
     af0:	bf 92       	push	r11
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	60 97       	sbiw	r28, 0x10	; 16
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	4b 01       	movw	r8, r22
     b14:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     b16:	80 e1       	ldi	r24, 0x10	; 16
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
     b1e:	38 2e       	mov	r3, r24
     b20:	29 2e       	mov	r2, r25
     b22:	c8 2e       	mov	r12, r24
     b24:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     b26:	a1 2c       	mov	r10, r1
     b28:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     b2a:	24 01       	movw	r4, r8
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	48 0e       	add	r4, r24
     b30:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     b32:	ce 01       	movw	r24, r28
     b34:	09 96       	adiw	r24, 0x09	; 9
     b36:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     b3a:	75 01       	movw	r14, r10
     b3c:	ee 0c       	add	r14, r14
     b3e:	ff 1c       	adc	r15, r15
     b40:	ee 0c       	add	r14, r14
     b42:	ff 1c       	adc	r15, r15
     b44:	ee 0c       	add	r14, r14
     b46:	ff 1c       	adc	r15, r15
     b48:	e6 0c       	add	r14, r6
     b4a:	f7 1c       	adc	r15, r7
     b4c:	d7 01       	movw	r26, r14
     b4e:	0c 91       	ld	r16, X
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	1c 91       	ld	r17, X
     b54:	11 97       	sbiw	r26, 0x01	; 1
     b56:	12 96       	adiw	r26, 0x02	; 2
     b58:	2c 91       	ld	r18, X
     b5a:	12 97       	sbiw	r26, 0x02	; 2
     b5c:	13 96       	adiw	r26, 0x03	; 3
     b5e:	3c 91       	ld	r19, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	14 96       	adiw	r26, 0x04	; 4
     b64:	4c 91       	ld	r20, X
     b66:	14 97       	sbiw	r26, 0x04	; 4
     b68:	15 96       	adiw	r26, 0x05	; 5
     b6a:	5c 91       	ld	r21, X
     b6c:	15 97       	sbiw	r26, 0x05	; 5
     b6e:	16 96       	adiw	r26, 0x06	; 6
     b70:	6c 91       	ld	r22, X
     b72:	16 97       	sbiw	r26, 0x06	; 6
     b74:	17 96       	adiw	r26, 0x07	; 7
     b76:	7c 91       	ld	r23, X
     b78:	c4 01       	movw	r24, r8
     b7a:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     b7e:	02 2f       	mov	r16, r18
     b80:	13 2f       	mov	r17, r19
     b82:	24 2f       	mov	r18, r20
     b84:	35 2f       	mov	r19, r21
     b86:	46 2f       	mov	r20, r22
     b88:	57 2f       	mov	r21, r23
     b8a:	68 2f       	mov	r22, r24
     b8c:	79 2f       	mov	r23, r25
     b8e:	ce 01       	movw	r24, r28
     b90:	09 96       	adiw	r24, 0x09	; 9
     b92:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     b96:	29 87       	std	Y+9, r18	; 0x09
     b98:	3a 87       	std	Y+10, r19	; 0x0a
     b9a:	4b 87       	std	Y+11, r20	; 0x0b
     b9c:	5c 87       	std	Y+12, r21	; 0x0c
     b9e:	6d 87       	std	Y+13, r22	; 0x0d
     ba0:	7e 87       	std	Y+14, r23	; 0x0e
     ba2:	8f 87       	std	Y+15, r24	; 0x0f
     ba4:	98 8b       	std	Y+16, r25	; 0x10
     ba6:	f7 01       	movw	r30, r14
     ba8:	70 96       	adiw	r30, 0x10	; 16
     baa:	d7 01       	movw	r26, r14
     bac:	50 96       	adiw	r26, 0x10	; 16
     bae:	0c 91       	ld	r16, X
     bb0:	11 81       	ldd	r17, Z+1	; 0x01
     bb2:	22 81       	ldd	r18, Z+2	; 0x02
     bb4:	33 81       	ldd	r19, Z+3	; 0x03
     bb6:	44 81       	ldd	r20, Z+4	; 0x04
     bb8:	55 81       	ldd	r21, Z+5	; 0x05
     bba:	66 81       	ldd	r22, Z+6	; 0x06
     bbc:	77 81       	ldd	r23, Z+7	; 0x07
     bbe:	c2 01       	movw	r24, r4
     bc0:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     bc4:	02 2f       	mov	r16, r18
     bc6:	13 2f       	mov	r17, r19
     bc8:	24 2f       	mov	r18, r20
     bca:	35 2f       	mov	r19, r21
     bcc:	46 2f       	mov	r20, r22
     bce:	57 2f       	mov	r21, r23
     bd0:	68 2f       	mov	r22, r24
     bd2:	79 2f       	mov	r23, r25
     bd4:	ce 01       	movw	r24, r28
     bd6:	09 96       	adiw	r24, 0x09	; 9
     bd8:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     bdc:	29 87       	std	Y+9, r18	; 0x09
     bde:	3a 87       	std	Y+10, r19	; 0x0a
     be0:	4b 87       	std	Y+11, r20	; 0x0b
     be2:	5c 87       	std	Y+12, r21	; 0x0c
     be4:	6d 87       	std	Y+13, r22	; 0x0d
     be6:	7e 87       	std	Y+14, r23	; 0x0e
     be8:	8f 87       	std	Y+15, r24	; 0x0f
     bea:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     bec:	89 85       	ldd	r24, Y+9	; 0x09
     bee:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf0:	ab 85       	ldd	r26, Y+11	; 0x0b
     bf2:	bc 85       	ldd	r27, Y+12	; 0x0c
     bf4:	f6 01       	movw	r30, r12
     bf6:	80 83       	st	Z, r24
     bf8:	91 83       	std	Z+1, r25	; 0x01
     bfa:	a2 83       	std	Z+2, r26	; 0x02
     bfc:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     c00:	9e 85       	ldd	r25, Y+14	; 0x0e
     c02:	af 85       	ldd	r26, Y+15	; 0x0f
     c04:	b8 89       	ldd	r27, Y+16	; 0x10
     c06:	84 83       	std	Z+4, r24	; 0x04
     c08:	95 83       	std	Z+5, r25	; 0x05
     c0a:	a6 83       	std	Z+6, r26	; 0x06
     c0c:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     c0e:	ff ef       	ldi	r31, 0xFF	; 255
     c10:	af 1a       	sub	r10, r31
     c12:	bf 0a       	sbc	r11, r31
     c14:	88 e0       	ldi	r24, 0x08	; 8
     c16:	c8 0e       	add	r12, r24
     c18:	d1 1c       	adc	r13, r1
     c1a:	a2 e0       	ldi	r26, 0x02	; 2
     c1c:	aa 16       	cp	r10, r26
     c1e:	b1 04       	cpc	r11, r1
     c20:	09 f0       	breq	.+2      	; 0xc24 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     c22:	87 cf       	rjmp	.-242    	; 0xb32 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     c24:	83 2d       	mov	r24, r3
     c26:	92 2d       	mov	r25, r2
     c28:	60 96       	adiw	r28, 0x10	; 16
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	8f 90       	pop	r8
     c4c:	7f 90       	pop	r7
     c4e:	6f 90       	pop	r6
     c50:	5f 90       	pop	r5
     c52:	4f 90       	pop	r4
     c54:	3f 90       	pop	r3
     c56:	2f 90       	pop	r2
     c58:	08 95       	ret

00000c5a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     c5a:	2f 92       	push	r2
     c5c:	3f 92       	push	r3
     c5e:	4f 92       	push	r4
     c60:	5f 92       	push	r5
     c62:	6f 92       	push	r6
     c64:	7f 92       	push	r7
     c66:	8f 92       	push	r8
     c68:	9f 92       	push	r9
     c6a:	af 92       	push	r10
     c6c:	bf 92       	push	r11
     c6e:	cf 92       	push	r12
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	64 97       	sbiw	r28, 0x14	; 20
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	3b 01       	movw	r6, r22
     c90:	e4 2e       	mov	r14, r20
     c92:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     c94:	80 e2       	ldi	r24, 0x20	; 32
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
     c9c:	8b 8b       	std	Y+19, r24	; 0x13
     c9e:	9c 8b       	std	Y+20, r25	; 0x14
     ca0:	48 2e       	mov	r4, r24
     ca2:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     ca4:	81 2c       	mov	r8, r1
     ca6:	91 2c       	mov	r9, r1
     ca8:	e9 8a       	std	Y+17, r14	; 0x11
     caa:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     cac:	21 2c       	mov	r2, r1
     cae:	31 2c       	mov	r3, r1
     cb0:	ce 01       	movw	r24, r28
     cb2:	09 96       	adiw	r24, 0x09	; 9
     cb4:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
     cb8:	c9 88       	ldd	r12, Y+17	; 0x11
     cba:	da 88       	ldd	r13, Y+18	; 0x12
     cbc:	e2 2c       	mov	r14, r2
     cbe:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     cc0:	54 01       	movw	r10, r8
     cc2:	aa 0c       	add	r10, r10
     cc4:	bb 1c       	adc	r11, r11
     cc6:	aa 0c       	add	r10, r10
     cc8:	bb 1c       	adc	r11, r11
     cca:	aa 0c       	add	r10, r10
     ccc:	bb 1c       	adc	r11, r11
     cce:	f5 01       	movw	r30, r10
     cd0:	ec 0d       	add	r30, r12
     cd2:	fd 1d       	adc	r31, r13
     cd4:	00 81       	ld	r16, Z
     cd6:	11 81       	ldd	r17, Z+1	; 0x01
     cd8:	22 81       	ldd	r18, Z+2	; 0x02
     cda:	33 81       	ldd	r19, Z+3	; 0x03
     cdc:	44 81       	ldd	r20, Z+4	; 0x04
     cde:	55 81       	ldd	r21, Z+5	; 0x05
     ce0:	66 81       	ldd	r22, Z+6	; 0x06
     ce2:	77 81       	ldd	r23, Z+7	; 0x07
     ce4:	c3 01       	movw	r24, r6
     ce6:	8e 0d       	add	r24, r14
     ce8:	9f 1d       	adc	r25, r15
     cea:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     cee:	29 83       	std	Y+1, r18	; 0x01
     cf0:	3a 83       	std	Y+2, r19	; 0x02
     cf2:	4b 83       	std	Y+3, r20	; 0x03
     cf4:	5c 83       	std	Y+4, r21	; 0x04
     cf6:	6d 83       	std	Y+5, r22	; 0x05
     cf8:	7e 83       	std	Y+6, r23	; 0x06
     cfa:	8f 83       	std	Y+7, r24	; 0x07
     cfc:	98 87       	std	Y+8, r25	; 0x08
     cfe:	02 2f       	mov	r16, r18
     d00:	13 2f       	mov	r17, r19
     d02:	24 2f       	mov	r18, r20
     d04:	35 2f       	mov	r19, r21
     d06:	46 2f       	mov	r20, r22
     d08:	57 2f       	mov	r21, r23
     d0a:	68 2f       	mov	r22, r24
     d0c:	79 2f       	mov	r23, r25
     d0e:	ce 01       	movw	r24, r28
     d10:	09 96       	adiw	r24, 0x09	; 9
     d12:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     d16:	29 87       	std	Y+9, r18	; 0x09
     d18:	3a 87       	std	Y+10, r19	; 0x0a
     d1a:	4b 87       	std	Y+11, r20	; 0x0b
     d1c:	5c 87       	std	Y+12, r21	; 0x0c
     d1e:	6d 87       	std	Y+13, r22	; 0x0d
     d20:	7e 87       	std	Y+14, r23	; 0x0e
     d22:	8f 87       	std	Y+15, r24	; 0x0f
     d24:	98 8b       	std	Y+16, r25	; 0x10
     d26:	88 e0       	ldi	r24, 0x08	; 8
     d28:	e8 0e       	add	r14, r24
     d2a:	f1 1c       	adc	r15, r1
     d2c:	e0 e2       	ldi	r30, 0x20	; 32
     d2e:	ce 0e       	add	r12, r30
     d30:	d1 1c       	adc	r13, r1
     d32:	f0 e2       	ldi	r31, 0x20	; 32
     d34:	ef 16       	cp	r14, r31
     d36:	f1 04       	cpc	r15, r1
     d38:	51 f6       	brne	.-108    	; 0xcce <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
     d3a:	89 85       	ldd	r24, Y+9	; 0x09
     d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3e:	ab 85       	ldd	r26, Y+11	; 0x0b
     d40:	bc 85       	ldd	r27, Y+12	; 0x0c
     d42:	f2 01       	movw	r30, r4
     d44:	80 83       	st	Z, r24
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	a2 83       	std	Z+2, r26	; 0x02
     d4a:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d50:	af 85       	ldd	r26, Y+15	; 0x0f
     d52:	b8 89       	ldd	r27, Y+16	; 0x10
     d54:	84 83       	std	Z+4, r24	; 0x04
     d56:	95 83       	std	Z+5, r25	; 0x05
     d58:	a6 83       	std	Z+6, r26	; 0x06
     d5a:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     d5c:	ff ef       	ldi	r31, 0xFF	; 255
     d5e:	8f 1a       	sub	r8, r31
     d60:	9f 0a       	sbc	r9, r31
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	48 0e       	add	r4, r24
     d66:	51 1c       	adc	r5, r1
     d68:	e4 e0       	ldi	r30, 0x04	; 4
     d6a:	8e 16       	cp	r8, r30
     d6c:	91 04       	cpc	r9, r1
     d6e:	09 f0       	breq	.+2      	; 0xd72 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
     d70:	9f cf       	rjmp	.-194    	; 0xcb0 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     d72:	8b 89       	ldd	r24, Y+19	; 0x13
     d74:	9c 89       	ldd	r25, Y+20	; 0x14
     d76:	64 96       	adiw	r28, 0x14	; 20
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	bf 90       	pop	r11
     d94:	af 90       	pop	r10
     d96:	9f 90       	pop	r9
     d98:	8f 90       	pop	r8
     d9a:	7f 90       	pop	r7
     d9c:	6f 90       	pop	r6
     d9e:	5f 90       	pop	r5
     da0:	4f 90       	pop	r4
     da2:	3f 90       	pop	r3
     da4:	2f 90       	pop	r2
     da6:	08 95       	ret

00000da8 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
     da8:	af 92       	push	r10
     daa:	bf 92       	push	r11
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	a4 97       	sbiw	r28, 0x24	; 36
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	7c 01       	movw	r14, r24
     dce:	5b 01       	movw	r10, r22
     dd0:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
     dd2:	00 e0       	ldi	r16, 0x00	; 0
     dd4:	10 e0       	ldi	r17, 0x00	; 0
     dd6:	98 01       	movw	r18, r16
     dd8:	b9 01       	movw	r22, r18
     dda:	a8 01       	movw	r20, r16
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     de4:	00 e0       	ldi	r16, 0x00	; 0
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	98 01       	movw	r18, r16
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	60 e8       	ldi	r22, 0x80	; 128
     df0:	7f e3       	ldi	r23, 0x3F	; 63
     df2:	ce 01       	movw	r24, r28
     df4:	09 96       	adiw	r24, 0x09	; 9
     df6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     dfa:	00 e0       	ldi	r16, 0x00	; 0
     dfc:	10 e0       	ldi	r17, 0x00	; 0
     dfe:	98 01       	movw	r18, r16
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	60 e8       	ldi	r22, 0x80	; 128
     e06:	7f e3       	ldi	r23, 0x3F	; 63
     e08:	ce 01       	movw	r24, r28
     e0a:	41 96       	adiw	r24, 0x11	; 17
     e0c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e10:	00 e0       	ldi	r16, 0x00	; 0
     e12:	10 e0       	ldi	r17, 0x00	; 0
     e14:	98 01       	movw	r18, r16
     e16:	b9 01       	movw	r22, r18
     e18:	a8 01       	movw	r20, r16
     e1a:	ce 01       	movw	r24, r28
     e1c:	49 96       	adiw	r24, 0x19	; 25
     e1e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     e22:	bc a2       	std	Y+36, r11	; 0x24
     e24:	ab a2       	std	Y+35, r10	; 0x23
     e26:	da a2       	std	Y+34, r13	; 0x22
     e28:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix),1);
     e2a:	9e 01       	movw	r18, r28
     e2c:	2f 5d       	subi	r18, 0xDF	; 223
     e2e:	3f 4f       	sbci	r19, 0xFF	; 255
     e30:	ae 01       	movw	r20, r28
     e32:	4d 5d       	subi	r20, 0xDD	; 221
     e34:	5f 4f       	sbci	r21, 0xFF	; 255
     e36:	61 e0       	ldi	r22, 0x01	; 1
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	c7 01       	movw	r24, r14
     e3c:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN5Gates8ampl2vecEiPiS0_>
     e40:	ae 01       	movw	r20, r28
     e42:	4f 5f       	subi	r20, 0xFF	; 255
     e44:	5f 4f       	sbci	r21, 0xFF	; 255
     e46:	bc 01       	movw	r22, r24
     e48:	c7 01       	movw	r24, r14
     e4a:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	bc 01       	movw	r22, r24
     e54:	c7 01       	movw	r24, r14
     e56:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8vec2amplEP7Complexi>
}
     e5a:	a4 96       	adiw	r28, 0x24	; 36
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	bf 90       	pop	r11
     e78:	af 90       	pop	r10
     e7a:	08 95       	ret

00000e7c <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
     e7c:	af 92       	push	r10
     e7e:	bf 92       	push	r11
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	a4 97       	sbiw	r28, 0x24	; 36
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	7c 01       	movw	r14, r24
     ea2:	5b 01       	movw	r10, r22
     ea4:	6a 01       	movw	r12, r20
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
     ea6:	00 e0       	ldi	r16, 0x00	; 0
     ea8:	10 e0       	ldi	r17, 0x00	; 0
     eaa:	98 01       	movw	r18, r16
     eac:	b9 01       	movw	r22, r18
     eae:	a8 01       	movw	r20, r16
     eb0:	ce 01       	movw	r24, r28
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     eb8:	00 e0       	ldi	r16, 0x00	; 0
     eba:	10 e0       	ldi	r17, 0x00	; 0
     ebc:	20 e8       	ldi	r18, 0x80	; 128
     ebe:	3f eb       	ldi	r19, 0xBF	; 191
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	ba 01       	movw	r22, r20
     ec6:	ce 01       	movw	r24, r28
     ec8:	09 96       	adiw	r24, 0x09	; 9
     eca:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     ece:	00 e0       	ldi	r16, 0x00	; 0
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	20 e8       	ldi	r18, 0x80	; 128
     ed4:	3f e3       	ldi	r19, 0x3F	; 63
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	ba 01       	movw	r22, r20
     edc:	ce 01       	movw	r24, r28
     ede:	41 96       	adiw	r24, 0x11	; 17
     ee0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     ee4:	00 e0       	ldi	r16, 0x00	; 0
     ee6:	10 e0       	ldi	r17, 0x00	; 0
     ee8:	98 01       	movw	r18, r16
     eea:	b9 01       	movw	r22, r18
     eec:	a8 01       	movw	r20, r16
     eee:	ce 01       	movw	r24, r28
     ef0:	49 96       	adiw	r24, 0x19	; 25
     ef2:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     ef6:	bc a2       	std	Y+36, r11	; 0x24
     ef8:	ab a2       	std	Y+35, r10	; 0x23
     efa:	da a2       	std	Y+34, r13	; 0x22
     efc:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),y_matrix),1);
     efe:	9e 01       	movw	r18, r28
     f00:	2f 5d       	subi	r18, 0xDF	; 223
     f02:	3f 4f       	sbci	r19, 0xFF	; 255
     f04:	ae 01       	movw	r20, r28
     f06:	4d 5d       	subi	r20, 0xDD	; 221
     f08:	5f 4f       	sbci	r21, 0xFF	; 255
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	c7 01       	movw	r24, r14
     f10:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN5Gates8ampl2vecEiPiS0_>
     f14:	ae 01       	movw	r20, r28
     f16:	4f 5f       	subi	r20, 0xFF	; 255
     f18:	5f 4f       	sbci	r21, 0xFF	; 255
     f1a:	bc 01       	movw	r22, r24
     f1c:	c7 01       	movw	r24, r14
     f1e:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	bc 01       	movw	r22, r24
     f28:	c7 01       	movw	r24, r14
     f2a:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8vec2amplEP7Complexi>
}
     f2e:	a4 96       	adiw	r28, 0x24	; 36
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	08 95       	ret

00000f50 <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	a4 97       	sbiw	r28, 0x24	; 36
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	7c 01       	movw	r14, r24
     f76:	5b 01       	movw	r10, r22
     f78:	6a 01       	movw	r12, r20
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
     f7a:	00 e0       	ldi	r16, 0x00	; 0
     f7c:	10 e0       	ldi	r17, 0x00	; 0
     f7e:	98 01       	movw	r18, r16
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	60 e8       	ldi	r22, 0x80	; 128
     f86:	7f e3       	ldi	r23, 0x3F	; 63
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f90:	00 e0       	ldi	r16, 0x00	; 0
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	98 01       	movw	r18, r16
     f96:	b9 01       	movw	r22, r18
     f98:	a8 01       	movw	r20, r16
     f9a:	ce 01       	movw	r24, r28
     f9c:	09 96       	adiw	r24, 0x09	; 9
     f9e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fa2:	00 e0       	ldi	r16, 0x00	; 0
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	98 01       	movw	r18, r16
     fa8:	b9 01       	movw	r22, r18
     faa:	a8 01       	movw	r20, r16
     fac:	ce 01       	movw	r24, r28
     fae:	41 96       	adiw	r24, 0x11	; 17
     fb0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fb4:	00 e0       	ldi	r16, 0x00	; 0
     fb6:	10 e0       	ldi	r17, 0x00	; 0
     fb8:	98 01       	movw	r18, r16
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	60 e8       	ldi	r22, 0x80	; 128
     fc0:	7f eb       	ldi	r23, 0xBF	; 191
     fc2:	ce 01       	movw	r24, r28
     fc4:	49 96       	adiw	r24, 0x19	; 25
     fc6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     fca:	bc a2       	std	Y+36, r11	; 0x24
     fcc:	ab a2       	std	Y+35, r10	; 0x23
     fce:	da a2       	std	Y+34, r13	; 0x22
     fd0:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),z_matrix),1);
     fd2:	9e 01       	movw	r18, r28
     fd4:	2f 5d       	subi	r18, 0xDF	; 223
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	ae 01       	movw	r20, r28
     fda:	4d 5d       	subi	r20, 0xDD	; 221
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	c7 01       	movw	r24, r14
     fe4:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN5Gates8ampl2vecEiPiS0_>
     fe8:	ae 01       	movw	r20, r28
     fea:	4f 5f       	subi	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	bc 01       	movw	r22, r24
     ff0:	c7 01       	movw	r24, r14
     ff2:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	bc 01       	movw	r22, r24
     ffc:	c7 01       	movw	r24, r14
     ffe:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8vec2amplEP7Complexi>
}
    1002:	a4 96       	adiw	r28, 0x24	; 36
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	df 90       	pop	r13
    101c:	cf 90       	pop	r12
    101e:	bf 90       	pop	r11
    1020:	af 90       	pop	r10
    1022:	08 95       	ret

00001024 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    1024:	af 92       	push	r10
    1026:	bf 92       	push	r11
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	a4 97       	sbiw	r28, 0x24	; 36
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	7c 01       	movw	r14, r24
    104a:	5b 01       	movw	r10, r22
    104c:	6a 01       	movw	r12, r20
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    104e:	00 e0       	ldi	r16, 0x00	; 0
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	98 01       	movw	r18, r16
    1054:	43 ef       	ldi	r20, 0xF3	; 243
    1056:	54 e0       	ldi	r21, 0x04	; 4
    1058:	65 e3       	ldi	r22, 0x35	; 53
    105a:	7f e3       	ldi	r23, 0x3F	; 63
    105c:	ce 01       	movw	r24, r28
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1064:	00 e0       	ldi	r16, 0x00	; 0
    1066:	10 e0       	ldi	r17, 0x00	; 0
    1068:	98 01       	movw	r18, r16
    106a:	43 ef       	ldi	r20, 0xF3	; 243
    106c:	54 e0       	ldi	r21, 0x04	; 4
    106e:	65 e3       	ldi	r22, 0x35	; 53
    1070:	7f e3       	ldi	r23, 0x3F	; 63
    1072:	ce 01       	movw	r24, r28
    1074:	09 96       	adiw	r24, 0x09	; 9
    1076:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    107a:	00 e0       	ldi	r16, 0x00	; 0
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	98 01       	movw	r18, r16
    1080:	43 ef       	ldi	r20, 0xF3	; 243
    1082:	54 e0       	ldi	r21, 0x04	; 4
    1084:	65 e3       	ldi	r22, 0x35	; 53
    1086:	7f e3       	ldi	r23, 0x3F	; 63
    1088:	ce 01       	movw	r24, r28
    108a:	41 96       	adiw	r24, 0x11	; 17
    108c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1090:	00 e0       	ldi	r16, 0x00	; 0
    1092:	10 e0       	ldi	r17, 0x00	; 0
    1094:	98 01       	movw	r18, r16
    1096:	43 ef       	ldi	r20, 0xF3	; 243
    1098:	54 e0       	ldi	r21, 0x04	; 4
    109a:	65 e3       	ldi	r22, 0x35	; 53
    109c:	7f eb       	ldi	r23, 0xBF	; 191
    109e:	ce 01       	movw	r24, r28
    10a0:	49 96       	adiw	r24, 0x19	; 25
    10a2:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    10a6:	bc a2       	std	Y+36, r11	; 0x24
    10a8:	ab a2       	std	Y+35, r10	; 0x23
    10aa:	da a2       	std	Y+34, r13	; 0x22
    10ac:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),h_matrix),1);
    10ae:	9e 01       	movw	r18, r28
    10b0:	2f 5d       	subi	r18, 0xDF	; 223
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	ae 01       	movw	r20, r28
    10b6:	4d 5d       	subi	r20, 0xDD	; 221
    10b8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ba:	61 e0       	ldi	r22, 0x01	; 1
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	c7 01       	movw	r24, r14
    10c0:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN5Gates8ampl2vecEiPiS0_>
    10c4:	ae 01       	movw	r20, r28
    10c6:	4f 5f       	subi	r20, 0xFF	; 255
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	bc 01       	movw	r22, r24
    10cc:	c7 01       	movw	r24, r14
    10ce:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    10d2:	41 e0       	ldi	r20, 0x01	; 1
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	bc 01       	movw	r22, r24
    10d8:	c7 01       	movw	r24, r14
    10da:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8vec2amplEP7Complexi>
}
    10de:	a4 96       	adiw	r28, 0x24	; 36
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	08 95       	ret

00001100 <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    1100:	af 92       	push	r10
    1102:	bf 92       	push	r11
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	a4 97       	sbiw	r28, 0x24	; 36
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	7c 01       	movw	r14, r24
    1126:	5b 01       	movw	r10, r22
    1128:	6a 01       	movw	r12, r20
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
    112a:	00 e0       	ldi	r16, 0x00	; 0
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	98 01       	movw	r18, r16
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	60 e8       	ldi	r22, 0x80	; 128
    1136:	7f e3       	ldi	r23, 0x3F	; 63
    1138:	ce 01       	movw	r24, r28
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1140:	00 e0       	ldi	r16, 0x00	; 0
    1142:	10 e0       	ldi	r17, 0x00	; 0
    1144:	98 01       	movw	r18, r16
    1146:	b9 01       	movw	r22, r18
    1148:	a8 01       	movw	r20, r16
    114a:	ce 01       	movw	r24, r28
    114c:	09 96       	adiw	r24, 0x09	; 9
    114e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1152:	00 e0       	ldi	r16, 0x00	; 0
    1154:	10 e0       	ldi	r17, 0x00	; 0
    1156:	98 01       	movw	r18, r16
    1158:	b9 01       	movw	r22, r18
    115a:	a8 01       	movw	r20, r16
    115c:	ce 01       	movw	r24, r28
    115e:	41 96       	adiw	r24, 0x11	; 17
    1160:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1164:	00 e0       	ldi	r16, 0x00	; 0
    1166:	10 e0       	ldi	r17, 0x00	; 0
    1168:	20 e8       	ldi	r18, 0x80	; 128
    116a:	3f e3       	ldi	r19, 0x3F	; 63
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	ba 01       	movw	r22, r20
    1172:	ce 01       	movw	r24, r28
    1174:	49 96       	adiw	r24, 0x19	; 25
    1176:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    117a:	bc a2       	std	Y+36, r11	; 0x24
    117c:	ab a2       	std	Y+35, r10	; 0x23
    117e:	da a2       	std	Y+34, r13	; 0x22
    1180:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),s_matrix),1);
    1182:	9e 01       	movw	r18, r28
    1184:	2f 5d       	subi	r18, 0xDF	; 223
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	ae 01       	movw	r20, r28
    118a:	4d 5d       	subi	r20, 0xDD	; 221
    118c:	5f 4f       	sbci	r21, 0xFF	; 255
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	c7 01       	movw	r24, r14
    1194:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN5Gates8ampl2vecEiPiS0_>
    1198:	ae 01       	movw	r20, r28
    119a:	4f 5f       	subi	r20, 0xFF	; 255
    119c:	5f 4f       	sbci	r21, 0xFF	; 255
    119e:	bc 01       	movw	r22, r24
    11a0:	c7 01       	movw	r24, r14
    11a2:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    11a6:	41 e0       	ldi	r20, 0x01	; 1
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	bc 01       	movw	r22, r24
    11ac:	c7 01       	movw	r24, r14
    11ae:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8vec2amplEP7Complexi>
}
    11b2:	a4 96       	adiw	r28, 0x24	; 36
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	bf 90       	pop	r11
    11d0:	af 90       	pop	r10
    11d2:	08 95       	ret

000011d4 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    11d4:	af 92       	push	r10
    11d6:	bf 92       	push	r11
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	a4 97       	sbiw	r28, 0x24	; 36
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	7c 01       	movw	r14, r24
    11fa:	5b 01       	movw	r10, r22
    11fc:	6a 01       	movw	r12, r20
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    11fe:	00 e0       	ldi	r16, 0x00	; 0
    1200:	10 e0       	ldi	r17, 0x00	; 0
    1202:	98 01       	movw	r18, r16
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	60 e8       	ldi	r22, 0x80	; 128
    120a:	7f e3       	ldi	r23, 0x3F	; 63
    120c:	ce 01       	movw	r24, r28
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1214:	00 e0       	ldi	r16, 0x00	; 0
    1216:	10 e0       	ldi	r17, 0x00	; 0
    1218:	98 01       	movw	r18, r16
    121a:	b9 01       	movw	r22, r18
    121c:	a8 01       	movw	r20, r16
    121e:	ce 01       	movw	r24, r28
    1220:	09 96       	adiw	r24, 0x09	; 9
    1222:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	98 01       	movw	r18, r16
    122c:	b9 01       	movw	r22, r18
    122e:	a8 01       	movw	r20, r16
    1230:	ce 01       	movw	r24, r28
    1232:	41 96       	adiw	r24, 0x11	; 17
    1234:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1238:	03 ef       	ldi	r16, 0xF3	; 243
    123a:	14 e0       	ldi	r17, 0x04	; 4
    123c:	25 e3       	ldi	r18, 0x35	; 53
    123e:	3f e3       	ldi	r19, 0x3F	; 63
    1240:	b9 01       	movw	r22, r18
    1242:	a8 01       	movw	r20, r16
    1244:	ce 01       	movw	r24, r28
    1246:	49 96       	adiw	r24, 0x19	; 25
    1248:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    124c:	bc a2       	std	Y+36, r11	; 0x24
    124e:	ab a2       	std	Y+35, r10	; 0x23
    1250:	da a2       	std	Y+34, r13	; 0x22
    1252:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),t_matrix),1);
    1254:	9e 01       	movw	r18, r28
    1256:	2f 5d       	subi	r18, 0xDF	; 223
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	ae 01       	movw	r20, r28
    125c:	4d 5d       	subi	r20, 0xDD	; 221
    125e:	5f 4f       	sbci	r21, 0xFF	; 255
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	c7 01       	movw	r24, r14
    1266:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN5Gates8ampl2vecEiPiS0_>
    126a:	ae 01       	movw	r20, r28
    126c:	4f 5f       	subi	r20, 0xFF	; 255
    126e:	5f 4f       	sbci	r21, 0xFF	; 255
    1270:	bc 01       	movw	r22, r24
    1272:	c7 01       	movw	r24, r14
    1274:	0e 94 6f 05 	call	0xade	; 0xade <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1278:	41 e0       	ldi	r20, 0x01	; 1
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	bc 01       	movw	r22, r24
    127e:	c7 01       	movw	r24, r14
    1280:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8vec2amplEP7Complexi>
}
    1284:	a4 96       	adiw	r28, 0x24	; 36
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	bf 90       	pop	r11
    12a2:	af 90       	pop	r10
    12a4:	08 95       	ret

000012a6 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    12a6:	6f 92       	push	r6
    12a8:	7f 92       	push	r7
    12aa:	8f 92       	push	r8
    12ac:	9f 92       	push	r9
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	c8 58       	subi	r28, 0x88	; 136
    12c8:	d1 09       	sbc	r29, r1
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	7c 01       	movw	r14, r24
    12d6:	3b 01       	movw	r6, r22
    12d8:	5a 01       	movw	r10, r20
    12da:	49 01       	movw	r8, r18
    12dc:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    12de:	00 e0       	ldi	r16, 0x00	; 0
    12e0:	10 e0       	ldi	r17, 0x00	; 0
    12e2:	98 01       	movw	r18, r16
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	60 e8       	ldi	r22, 0x80	; 128
    12ea:	7f e3       	ldi	r23, 0x3F	; 63
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    12f4:	00 e0       	ldi	r16, 0x00	; 0
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	98 01       	movw	r18, r16
    12fa:	b9 01       	movw	r22, r18
    12fc:	a8 01       	movw	r20, r16
    12fe:	ce 01       	movw	r24, r28
    1300:	09 96       	adiw	r24, 0x09	; 9
    1302:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1306:	00 e0       	ldi	r16, 0x00	; 0
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	98 01       	movw	r18, r16
    130c:	b9 01       	movw	r22, r18
    130e:	a8 01       	movw	r20, r16
    1310:	ce 01       	movw	r24, r28
    1312:	41 96       	adiw	r24, 0x11	; 17
    1314:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1318:	00 e0       	ldi	r16, 0x00	; 0
    131a:	10 e0       	ldi	r17, 0x00	; 0
    131c:	98 01       	movw	r18, r16
    131e:	b9 01       	movw	r22, r18
    1320:	a8 01       	movw	r20, r16
    1322:	ce 01       	movw	r24, r28
    1324:	49 96       	adiw	r24, 0x19	; 25
    1326:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	98 01       	movw	r18, r16
    1330:	b9 01       	movw	r22, r18
    1332:	a8 01       	movw	r20, r16
    1334:	ce 01       	movw	r24, r28
    1336:	81 96       	adiw	r24, 0x21	; 33
    1338:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    133c:	00 e0       	ldi	r16, 0x00	; 0
    133e:	10 e0       	ldi	r17, 0x00	; 0
    1340:	98 01       	movw	r18, r16
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	60 e8       	ldi	r22, 0x80	; 128
    1348:	7f e3       	ldi	r23, 0x3F	; 63
    134a:	ce 01       	movw	r24, r28
    134c:	89 96       	adiw	r24, 0x29	; 41
    134e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1352:	00 e0       	ldi	r16, 0x00	; 0
    1354:	10 e0       	ldi	r17, 0x00	; 0
    1356:	98 01       	movw	r18, r16
    1358:	b9 01       	movw	r22, r18
    135a:	a8 01       	movw	r20, r16
    135c:	ce 01       	movw	r24, r28
    135e:	c1 96       	adiw	r24, 0x31	; 49
    1360:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1364:	00 e0       	ldi	r16, 0x00	; 0
    1366:	10 e0       	ldi	r17, 0x00	; 0
    1368:	98 01       	movw	r18, r16
    136a:	b9 01       	movw	r22, r18
    136c:	a8 01       	movw	r20, r16
    136e:	ce 01       	movw	r24, r28
    1370:	c9 96       	adiw	r24, 0x39	; 57
    1372:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1376:	00 e0       	ldi	r16, 0x00	; 0
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	98 01       	movw	r18, r16
    137c:	b9 01       	movw	r22, r18
    137e:	a8 01       	movw	r20, r16
    1380:	ce 01       	movw	r24, r28
    1382:	8f 5b       	subi	r24, 0xBF	; 191
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    138a:	00 e0       	ldi	r16, 0x00	; 0
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	98 01       	movw	r18, r16
    1390:	b9 01       	movw	r22, r18
    1392:	a8 01       	movw	r20, r16
    1394:	ce 01       	movw	r24, r28
    1396:	87 5b       	subi	r24, 0xB7	; 183
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    139e:	00 e0       	ldi	r16, 0x00	; 0
    13a0:	10 e0       	ldi	r17, 0x00	; 0
    13a2:	98 01       	movw	r18, r16
    13a4:	b9 01       	movw	r22, r18
    13a6:	a8 01       	movw	r20, r16
    13a8:	ce 01       	movw	r24, r28
    13aa:	8f 5a       	subi	r24, 0xAF	; 175
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    13b2:	00 e0       	ldi	r16, 0x00	; 0
    13b4:	10 e0       	ldi	r17, 0x00	; 0
    13b6:	98 01       	movw	r18, r16
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	60 e8       	ldi	r22, 0x80	; 128
    13be:	7f e3       	ldi	r23, 0x3F	; 63
    13c0:	ce 01       	movw	r24, r28
    13c2:	87 5a       	subi	r24, 0xA7	; 167
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    13ca:	00 e0       	ldi	r16, 0x00	; 0
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	98 01       	movw	r18, r16
    13d0:	b9 01       	movw	r22, r18
    13d2:	a8 01       	movw	r20, r16
    13d4:	ce 01       	movw	r24, r28
    13d6:	8f 59       	subi	r24, 0x9F	; 159
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    13de:	00 e0       	ldi	r16, 0x00	; 0
    13e0:	10 e0       	ldi	r17, 0x00	; 0
    13e2:	98 01       	movw	r18, r16
    13e4:	b9 01       	movw	r22, r18
    13e6:	a8 01       	movw	r20, r16
    13e8:	ce 01       	movw	r24, r28
    13ea:	87 59       	subi	r24, 0x97	; 151
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    13f2:	00 e0       	ldi	r16, 0x00	; 0
    13f4:	10 e0       	ldi	r17, 0x00	; 0
    13f6:	98 01       	movw	r18, r16
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	60 e8       	ldi	r22, 0x80	; 128
    13fe:	7f e3       	ldi	r23, 0x3F	; 63
    1400:	ce 01       	movw	r24, r28
    1402:	8f 58       	subi	r24, 0x8F	; 143
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    140a:	00 e0       	ldi	r16, 0x00	; 0
    140c:	10 e0       	ldi	r17, 0x00	; 0
    140e:	98 01       	movw	r18, r16
    1410:	b9 01       	movw	r22, r18
    1412:	a8 01       	movw	r20, r16
    1414:	ce 01       	movw	r24, r28
    1416:	87 58       	subi	r24, 0x87	; 135
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
    141e:	cb 57       	subi	r28, 0x7B	; 123
    1420:	df 4f       	sbci	r29, 0xFF	; 255
    1422:	79 82       	std	Y+1, r7	; 0x01
    1424:	68 82       	st	Y, r6
    1426:	c5 58       	subi	r28, 0x85	; 133
    1428:	d0 40       	sbci	r29, 0x00	; 0
    142a:	c9 57       	subi	r28, 0x79	; 121
    142c:	df 4f       	sbci	r29, 0xFF	; 255
    142e:	99 82       	std	Y+1, r9	; 0x01
    1430:	88 82       	st	Y, r8
    1432:	c7 58       	subi	r28, 0x87	; 135
    1434:	d0 40       	sbci	r29, 0x00	; 0
    1436:	cf 57       	subi	r28, 0x7F	; 127
    1438:	df 4f       	sbci	r29, 0xFF	; 255
    143a:	b9 82       	std	Y+1, r11	; 0x01
    143c:	a8 82       	st	Y, r10
    143e:	c1 58       	subi	r28, 0x81	; 129
    1440:	d0 40       	sbci	r29, 0x00	; 0
    1442:	cd 57       	subi	r28, 0x7D	; 125
    1444:	df 4f       	sbci	r29, 0xFF	; 255
    1446:	d9 82       	std	Y+1, r13	; 0x01
    1448:	c8 82       	st	Y, r12
    144a:	c3 58       	subi	r28, 0x83	; 131
    144c:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix),2);
    144e:	9e 01       	movw	r18, r28
    1450:	2f 57       	subi	r18, 0x7F	; 127
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	ae 01       	movw	r20, r28
    1456:	4b 57       	subi	r20, 0x7B	; 123
    1458:	5f 4f       	sbci	r21, 0xFF	; 255
    145a:	62 e0       	ldi	r22, 0x02	; 2
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	c7 01       	movw	r24, r14
    1460:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN5Gates8ampl2vecEiPiS0_>
    1464:	ae 01       	movw	r20, r28
    1466:	4f 5f       	subi	r20, 0xFF	; 255
    1468:	5f 4f       	sbci	r21, 0xFF	; 255
    146a:	bc 01       	movw	r22, r24
    146c:	c7 01       	movw	r24, r14
    146e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1472:	42 e0       	ldi	r20, 0x02	; 2
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	bc 01       	movw	r22, r24
    1478:	c7 01       	movw	r24, r14
    147a:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8vec2amplEP7Complexi>
}
    147e:	c8 57       	subi	r28, 0x78	; 120
    1480:	df 4f       	sbci	r29, 0xFF	; 255
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	cf 90       	pop	r12
    149c:	bf 90       	pop	r11
    149e:	af 90       	pop	r10
    14a0:	9f 90       	pop	r9
    14a2:	8f 90       	pop	r8
    14a4:	7f 90       	pop	r7
    14a6:	6f 90       	pop	r6
    14a8:	08 95       	ret

000014aa <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}

Serial s;
    14aa:	8d ec       	ldi	r24, 0xCD	; 205
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <_ZN6SerialC1Ev>
    14b2:	08 95       	ret

000014b4 <main>:
#include "qepu.h"
int main(void){
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <main+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <main+0x8>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <main+0xa>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    14c2:	ce 01       	movw	r24, r28
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN4QEPUC1Ev>
	qepu.run();
    14ca:	ce 01       	movw	r24, r28
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZN4QEPU3runEv>
    14d2:	ff cf       	rjmp	.-2      	; 0x14d2 <main+0x1e>

000014d4 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	ec 01       	movw	r28, r24
    14da:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN6EEPromC1Ev>
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <_ZN6SerialC1Ev>
    14e6:	ce 01       	movw	r24, r28
    14e8:	05 96       	adiw	r24, 0x05	; 5
    14ea:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN5GatesC1Ev>
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	8a bb       	out	0x1a, r24	; 26
    14f2:	1c 82       	std	Y+4, r1	; 0x04
    14f4:	1b 82       	std	Y+3, r1	; 0x03
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    14fc:	7b b3       	in	r23, 0x1b	; 27
    14fe:	21 e0       	ldi	r18, 0x01	; 1
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	c9 01       	movw	r24, r18
    1504:	06 2e       	mov	r0, r22
    1506:	02 c0       	rjmp	.+4      	; 0x150c <_ZN4QEPU10setctrlpinEii+0x10>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <_ZN4QEPU10setctrlpinEii+0xc>
    1510:	80 95       	com	r24
    1512:	87 23       	and	r24, r23
    1514:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    1516:	8b b3       	in	r24, 0x1b	; 27
    1518:	02 c0       	rjmp	.+4      	; 0x151e <_ZN4QEPU10setctrlpinEii+0x22>
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	6a 95       	dec	r22
    1520:	e2 f7       	brpl	.-8      	; 0x151a <_ZN4QEPU10setctrlpinEii+0x1e>
    1522:	48 2b       	or	r20, r24
    1524:	4b bb       	out	0x1b, r20	; 27
    1526:	08 95       	ret

00001528 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    1532:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    1534:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    1536:	64 e0       	ldi	r22, 0x04	; 4
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	ce 01       	movw	r24, r28
    153c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	66 e0       	ldi	r22, 0x06	; 6
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	ce 01       	movw	r24, r28
    154a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	66 e0       	ldi	r22, 0x06	; 6
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	ce 01       	movw	r24, r28
    1558:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    155c:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	ec 01       	movw	r28, r24
    156e:	8a 01       	movw	r16, r20
	DDRB=0x00;
    1570:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    1572:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	65 e0       	ldi	r22, 0x05	; 5
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    1580:	a8 01       	movw	r20, r16
    1582:	64 e0       	ldi	r22, 0x04	; 4
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	ce 01       	movw	r24, r28
    1588:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    158c:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    158e:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    1590:	9f ef       	ldi	r25, 0xFF	; 255
    1592:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    15a0:	6f 92       	push	r6
    15a2:	7f 92       	push	r7
    15a4:	8f 92       	push	r8
    15a6:	9f 92       	push	r9
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	6c 01       	movw	r12, r24
	serial.writestrln("");
    15be:	8c 01       	movw	r16, r24
    15c0:	0f 5f       	subi	r16, 0xFF	; 255
    15c2:	1f 4f       	sbci	r17, 0xFF	; 255
    15c4:	6b eb       	ldi	r22, 0xBB	; 187
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	c8 01       	movw	r24, r16
    15ca:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    15ce:	62 e9       	ldi	r22, 0x92	; 146
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	c8 01       	movw	r24, r16
    15d4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    15d8:	c0 e0       	ldi	r28, 0x00	; 0
    15da:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    15dc:	0f 2e       	mov	r0, r31
    15de:	fc ea       	ldi	r31, 0xAC	; 172
    15e0:	ef 2e       	mov	r14, r31
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	ff 2e       	mov	r15, r31
    15e6:	f0 2d       	mov	r31, r0
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
    15f0:	88 2e       	mov	r8, r24
    15f2:	99 2e       	mov	r9, r25
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	be 01       	movw	r22, r28
    15fa:	c6 01       	movw	r24, r12
    15fc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1600:	9f 93       	push	r25
    1602:	8f 93       	push	r24
    1604:	ff 92       	push	r15
    1606:	ef 92       	push	r14
    1608:	9f 92       	push	r9
    160a:	8f 92       	push	r8
    160c:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
    1618:	a8 2e       	mov	r10, r24
    161a:	b9 2e       	mov	r11, r25
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	be 01       	movw	r22, r28
    1622:	c6 01       	movw	r24, r12
    1624:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1628:	9f 93       	push	r25
    162a:	8f 93       	push	r24
    162c:	ff 92       	push	r15
    162e:	ef 92       	push	r14
    1630:	bf 92       	push	r11
    1632:	af 92       	push	r10
    1634:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
    1640:	68 2e       	mov	r6, r24
    1642:	79 2e       	mov	r7, r25
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	ff 92       	push	r15
    164a:	ef 92       	push	r14
    164c:	7f 92       	push	r7
    164e:	6f 92       	push	r6
    1650:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    1654:	6f ea       	ldi	r22, 0xAF	; 175
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	c8 01       	movw	r24, r16
    165a:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6Serial8writestrEPc>
    165e:	66 2d       	mov	r22, r6
    1660:	77 2d       	mov	r23, r7
    1662:	c8 01       	movw	r24, r16
    1664:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6Serial8writestrEPc>
    1668:	61 eb       	ldi	r22, 0xB1	; 177
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	c8 01       	movw	r24, r16
    166e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    1672:	68 2d       	mov	r22, r8
    1674:	79 2d       	mov	r23, r9
    1676:	c8 01       	movw	r24, r16
    1678:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    167c:	6c eb       	ldi	r22, 0xBC	; 188
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	c8 01       	movw	r24, r16
    1682:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    1686:	6a 2d       	mov	r22, r10
    1688:	7b 2d       	mov	r23, r11
    168a:	c8 01       	movw	r24, r16
    168c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    1690:	21 96       	adiw	r28, 0x01	; 1
    1692:	8d b7       	in	r24, 0x3d	; 61
    1694:	9e b7       	in	r25, 0x3e	; 62
    1696:	42 96       	adiw	r24, 0x12	; 18
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	9e bf       	out	0x3e, r25	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	8d bf       	out	0x3d, r24	; 61
    16a2:	c4 30       	cpi	r28, 0x04	; 4
    16a4:	d1 05       	cpc	r29, r1
    16a6:	09 f0       	breq	.+2      	; 0x16aa <_ZN4QEPU7dumpmemEv+0x10a>
    16a8:	9f cf       	rjmp	.-194    	; 0x15e8 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	cf 90       	pop	r12
    16ba:	bf 90       	pop	r11
    16bc:	af 90       	pop	r10
    16be:	9f 90       	pop	r9
    16c0:	8f 90       	pop	r8
    16c2:	7f 90       	pop	r7
    16c4:	6f 90       	pop	r6
    16c6:	08 95       	ret

000016c8 <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    16c8:	cf 92       	push	r12
    16ca:	df 92       	push	r13
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	d6 2f       	mov	r29, r22
    16da:	c7 2f       	mov	r28, r23
    16dc:	e6 2f       	mov	r30, r22
    16de:	f7 2f       	mov	r31, r23
	int c_length=0;
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    16e4:	21 91       	ld	r18, Z+
    16e6:	2f 3f       	cpi	r18, 0xFF	; 255
    16e8:	89 f4       	brne	.+34     	; 0x170c <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    16ea:	df 01       	movw	r26, r30
    16ec:	12 97       	sbiw	r26, 0x02	; 2
    16ee:	4c 91       	ld	r20, X
    16f0:	4f 3f       	cpi	r20, 0xFF	; 255
    16f2:	61 f4       	brne	.+24     	; 0x170c <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    16f4:	11 97       	sbiw	r26, 0x01	; 1
    16f6:	4c 91       	ld	r20, X
    16f8:	4f 3f       	cpi	r20, 0xFF	; 255
    16fa:	41 f4       	brne	.+16     	; 0x170c <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    16fc:	11 97       	sbiw	r26, 0x01	; 1
    16fe:	4c 91       	ld	r20, X
    1700:	4f 3f       	cpi	r20, 0xFF	; 255
    1702:	21 f4       	brne	.+8      	; 0x170c <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1704:	11 97       	sbiw	r26, 0x01	; 1
    1706:	2c 91       	ld	r18, X
    1708:	2f 3f       	cpi	r18, 0xFF	; 255
    170a:	11 f0       	breq	.+4      	; 0x1710 <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	ea cf       	rjmp	.-44     	; 0x16e4 <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    1710:	8c 01       	movw	r16, r24
    1712:	04 50       	subi	r16, 0x04	; 4
    1714:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    1716:	6c 01       	movw	r12, r24
    1718:	2f ef       	ldi	r18, 0xFF	; 255
    171a:	c2 1a       	sub	r12, r18
    171c:	d2 0a       	sbc	r13, r18
    171e:	76 01       	movw	r14, r12
    1720:	ee 0c       	add	r14, r14
    1722:	ff 1c       	adc	r15, r15
    1724:	c7 01       	movw	r24, r14
    1726:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    172a:	10 16       	cp	r1, r16
    172c:	11 06       	cpc	r1, r17
    172e:	74 f4       	brge	.+28     	; 0x174c <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    1730:	dc 01       	movw	r26, r24
    1732:	ed 2f       	mov	r30, r29
    1734:	fc 2f       	mov	r31, r28
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	41 91       	ld	r20, Z+
    173c:	50 e0       	ldi	r21, 0x00	; 0
    173e:	4d 93       	st	X+, r20
    1740:	5d 93       	st	X+, r21
    1742:	2f 5f       	subi	r18, 0xFF	; 255
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	20 17       	cp	r18, r16
    1748:	31 07       	cpc	r19, r17
    174a:	bc f3       	brlt	.-18     	; 0x173a <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    174c:	0c 15       	cp	r16, r12
    174e:	1d 05       	cpc	r17, r13
    1750:	7c f4       	brge	.+30     	; 0x1770 <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    1752:	f7 01       	movw	r30, r14
    1754:	3a 97       	sbiw	r30, 0x0a	; 10
    1756:	e8 0f       	add	r30, r24
    1758:	f9 1f       	adc	r31, r25
    175a:	25 e0       	ldi	r18, 0x05	; 5
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4f ef       	ldi	r20, 0xFF	; 255
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	41 93       	st	Z+, r20
    1764:	51 93       	st	Z+, r21
    1766:	21 50       	subi	r18, 0x01	; 1
    1768:	31 09       	sbc	r19, r1
    176a:	21 15       	cp	r18, r1
    176c:	31 05       	cpc	r19, r1
    176e:	c9 f7       	brne	.-14     	; 0x1762 <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	08 95       	ret

00001782 <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	c4 56       	subi	r28, 0x64	; 100
    1790:	d1 09       	sbc	r29, r1
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
	//char str[countdigits(dec)+1];
	char str[100];
	sprintf(str,"%d",dec);
    179c:	7f 93       	push	r23
    179e:	6f 93       	push	r22
    17a0:	8c ea       	ldi	r24, 0xAC	; 172
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9f 93       	push	r25
    17a6:	8f 93       	push	r24
    17a8:	8e 01       	movw	r16, r28
    17aa:	0f 5f       	subi	r16, 0xFF	; 255
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	1f 93       	push	r17
    17b0:	0f 93       	push	r16
    17b2:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
	return str;
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
}
    17c2:	c8 01       	movw	r24, r16
    17c4:	cc 59       	subi	r28, 0x9C	; 156
    17c6:	df 4f       	sbci	r29, 0xFF	; 255
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    17dc:	61 15       	cp	r22, r1
    17de:	71 05       	cpc	r23, r1
    17e0:	59 f0       	breq	.+22     	; 0x17f8 <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17e2:	8f e9       	ldi	r24, 0x9F	; 159
    17e4:	9f e0       	ldi	r25, 0x0F	; 15
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <_ZN4QEPU5Utils5delayEi+0xa>
    17ea:	00 c0       	rjmp	.+0      	; 0x17ec <_ZN4QEPU5Utils5delayEi+0x10>
    17ec:	00 00       	nop
    17ee:	61 50       	subi	r22, 0x01	; 1
    17f0:	71 09       	sbc	r23, r1
    17f2:	61 15       	cp	r22, r1
    17f4:	71 05       	cpc	r23, r1
    17f6:	a9 f7       	brne	.-22     	; 0x17e2 <_ZN4QEPU5Utils5delayEi+0x6>
}
    17f8:	08 95       	ret

000017fa <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    17fa:	2f 92       	push	r2
    17fc:	3f 92       	push	r3
    17fe:	4f 92       	push	r4
    1800:	5f 92       	push	r5
    1802:	6f 92       	push	r6
    1804:	7f 92       	push	r7
    1806:	8f 92       	push	r8
    1808:	9f 92       	push	r9
    180a:	af 92       	push	r10
    180c:	bf 92       	push	r11
    180e:	cf 92       	push	r12
    1810:	df 92       	push	r13
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	ec 01       	movw	r28, r24
    1820:	1b 01       	movw	r2, r22
    1822:	29 01       	movw	r4, r18
    1824:	3a 01       	movw	r6, r20
    1826:	47 01       	movw	r8, r14
    1828:	58 01       	movw	r10, r16
	int * newthephi=(int*)malloc(sizeof(int)*2);
    182a:	84 e0       	ldi	r24, 0x04	; 4
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 89 12 	call	0x2512	; 0x2512 <malloc>
    1832:	6c 01       	movw	r12, r24
	
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    1834:	f1 01       	movw	r30, r2
    1836:	31 97       	sbiw	r30, 0x01	; 1
    1838:	e6 31       	cpi	r30, 0x16	; 22
    183a:	f1 05       	cpc	r31, r1
    183c:	08 f0       	brcs	.+2      	; 0x1840 <_ZN4QEPU7executeEill+0x46>
    183e:	47 c1       	rjmp	.+654    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
    1840:	e6 5d       	subi	r30, 0xD6	; 214
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	b7 01       	movw	r22, r14
    184e:	ce 01       	movw	r24, r28
    1850:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1854:	9c 01       	movw	r18, r24
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	b2 01       	movw	r22, r4
    185c:	ce 01       	movw	r24, r28
    185e:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	b7 01       	movw	r22, r14
    1868:	ce 01       	movw	r24, r28
    186a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    186e:	9c 01       	movw	r18, r24
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	b2 01       	movw	r22, r4
    1876:	ce 01       	movw	r24, r28
    1878:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
		break;
    187c:	28 c1       	rjmp	.+592    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	48 1a       	sub	r4, r24
    1882:	51 08       	sbc	r5, r1
    1884:	5c 82       	std	Y+4, r5	; 0x04
    1886:	4b 82       	std	Y+3, r4	; 0x03
		break;
    1888:	22 c1       	rjmp	.+580    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    188a:	b2 01       	movw	r22, r4
    188c:	ce 01       	movw	r24, r28
    188e:	02 96       	adiw	r24, 0x02	; 2
    1890:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN4QEPU5Utils5delayEi>
    1894:	1c c1       	rjmp	.+568    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    1896:	97 01       	movw	r18, r14
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	b2 01       	movw	r22, r4
    189e:	ce 01       	movw	r24, r28
    18a0:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
		break;
    18a4:	14 c1       	rjmp	.+552    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    18a6:	97 01       	movw	r18, r14
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	b2 01       	movw	r22, r4
    18ae:	ce 01       	movw	r24, r28
    18b0:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
		break;
    18b4:	0c c1       	rjmp	.+536    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	b2 01       	movw	r22, r4
    18bc:	ce 01       	movw	r24, r28
    18be:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    18c2:	8c 01       	movw	r16, r24
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	b2 01       	movw	r22, r4
    18ca:	ce 01       	movw	r24, r28
    18cc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    18d0:	a8 01       	movw	r20, r16
    18d2:	bc 01       	movw	r22, r24
    18d4:	ce 01       	movw	r24, r28
    18d6:	05 96       	adiw	r24, 0x05	; 5
    18d8:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN5Gates1XEii>
    18dc:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    18de:	fc 01       	movw	r30, r24
    18e0:	20 81       	ld	r18, Z
    18e2:	31 81       	ldd	r19, Z+1	; 0x01
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	b2 01       	movw	r22, r4
    18ea:	ce 01       	movw	r24, r28
    18ec:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
    18f0:	f6 01       	movw	r30, r12
    18f2:	22 81       	ldd	r18, Z+2	; 0x02
    18f4:	33 81       	ldd	r19, Z+3	; 0x03
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	b2 01       	movw	r22, r4
    18fc:	ce 01       	movw	r24, r28
    18fe:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
		break;
    1902:	e5 c0       	rjmp	.+458    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	b2 01       	movw	r22, r4
    190a:	ce 01       	movw	r24, r28
    190c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1910:	8c 01       	movw	r16, r24
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	b2 01       	movw	r22, r4
    1918:	ce 01       	movw	r24, r28
    191a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    191e:	a8 01       	movw	r20, r16
    1920:	bc 01       	movw	r22, r24
    1922:	ce 01       	movw	r24, r28
    1924:	05 96       	adiw	r24, 0x05	; 5
    1926:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZN5Gates1YEii>
    192a:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    192c:	fc 01       	movw	r30, r24
    192e:	20 81       	ld	r18, Z
    1930:	31 81       	ldd	r19, Z+1	; 0x01
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	b2 01       	movw	r22, r4
    1938:	ce 01       	movw	r24, r28
    193a:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
    193e:	f6 01       	movw	r30, r12
    1940:	22 81       	ldd	r18, Z+2	; 0x02
    1942:	33 81       	ldd	r19, Z+3	; 0x03
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	b2 01       	movw	r22, r4
    194a:	ce 01       	movw	r24, r28
    194c:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
		break;
    1950:	be c0       	rjmp	.+380    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	b2 01       	movw	r22, r4
    1958:	ce 01       	movw	r24, r28
    195a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    195e:	8c 01       	movw	r16, r24
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	b2 01       	movw	r22, r4
    1966:	ce 01       	movw	r24, r28
    1968:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    196c:	a8 01       	movw	r20, r16
    196e:	bc 01       	movw	r22, r24
    1970:	ce 01       	movw	r24, r28
    1972:	05 96       	adiw	r24, 0x05	; 5
    1974:	0e 94 a8 07 	call	0xf50	; 0xf50 <_ZN5Gates1ZEii>
    1978:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    197a:	fc 01       	movw	r30, r24
    197c:	20 81       	ld	r18, Z
    197e:	31 81       	ldd	r19, Z+1	; 0x01
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	b2 01       	movw	r22, r4
    1986:	ce 01       	movw	r24, r28
    1988:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
    198c:	f6 01       	movw	r30, r12
    198e:	22 81       	ldd	r18, Z+2	; 0x02
    1990:	33 81       	ldd	r19, Z+3	; 0x03
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	b2 01       	movw	r22, r4
    1998:	ce 01       	movw	r24, r28
    199a:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
		break;
    199e:	97 c0       	rjmp	.+302    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	b2 01       	movw	r22, r4
    19a6:	ce 01       	movw	r24, r28
    19a8:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    19ac:	8c 01       	movw	r16, r24
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	b2 01       	movw	r22, r4
    19b4:	ce 01       	movw	r24, r28
    19b6:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    19ba:	a8 01       	movw	r20, r16
    19bc:	bc 01       	movw	r22, r24
    19be:	ce 01       	movw	r24, r28
    19c0:	05 96       	adiw	r24, 0x05	; 5
    19c2:	0e 94 12 08 	call	0x1024	; 0x1024 <_ZN5Gates1HEii>
    19c6:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    19c8:	fc 01       	movw	r30, r24
    19ca:	20 81       	ld	r18, Z
    19cc:	31 81       	ldd	r19, Z+1	; 0x01
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	b2 01       	movw	r22, r4
    19d4:	ce 01       	movw	r24, r28
    19d6:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
    19da:	f6 01       	movw	r30, r12
    19dc:	22 81       	ldd	r18, Z+2	; 0x02
    19de:	33 81       	ldd	r19, Z+3	; 0x03
    19e0:	41 e0       	ldi	r20, 0x01	; 1
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	b2 01       	movw	r22, r4
    19e6:	ce 01       	movw	r24, r28
    19e8:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
		break;
    19ec:	70 c0       	rjmp	.+224    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    19ee:	41 e0       	ldi	r20, 0x01	; 1
    19f0:	50 e0       	ldi	r21, 0x00	; 0
    19f2:	b2 01       	movw	r22, r4
    19f4:	ce 01       	movw	r24, r28
    19f6:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    19fa:	8c 01       	movw	r16, r24
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	b2 01       	movw	r22, r4
    1a02:	ce 01       	movw	r24, r28
    1a04:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1a08:	a8 01       	movw	r20, r16
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	05 96       	adiw	r24, 0x05	; 5
    1a10:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN5Gates1SEii>
    1a14:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1a16:	fc 01       	movw	r30, r24
    1a18:	20 81       	ld	r18, Z
    1a1a:	31 81       	ldd	r19, Z+1	; 0x01
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	b2 01       	movw	r22, r4
    1a22:	ce 01       	movw	r24, r28
    1a24:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
    1a28:	f6 01       	movw	r30, r12
    1a2a:	22 81       	ldd	r18, Z+2	; 0x02
    1a2c:	33 81       	ldd	r19, Z+3	; 0x03
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	b2 01       	movw	r22, r4
    1a34:	ce 01       	movw	r24, r28
    1a36:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
		break;
    1a3a:	49 c0       	rjmp	.+146    	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	b2 01       	movw	r22, r4
    1a42:	ce 01       	movw	r24, r28
    1a44:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1a48:	8c 01       	movw	r16, r24
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	b2 01       	movw	r22, r4
    1a50:	ce 01       	movw	r24, r28
    1a52:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1a56:	a8 01       	movw	r20, r16
    1a58:	bc 01       	movw	r22, r24
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	05 96       	adiw	r24, 0x05	; 5
    1a5e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_ZN5Gates1TEii>
    1a62:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1a64:	fc 01       	movw	r30, r24
    1a66:	20 81       	ld	r18, Z
    1a68:	31 81       	ldd	r19, Z+1	; 0x01
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	50 e0       	ldi	r21, 0x00	; 0
    1a6e:	b2 01       	movw	r22, r4
    1a70:	ce 01       	movw	r24, r28
    1a72:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
    1a76:	f6 01       	movw	r30, r12
    1a78:	22 81       	ldd	r18, Z+2	; 0x02
    1a7a:	33 81       	ldd	r19, Z+3	; 0x03
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	b2 01       	movw	r22, r4
    1a82:	ce 01       	movw	r24, r28
    1a84:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN4QEPU5writeEiii>
		break;
    1a88:	22 c0       	rjmp	.+68     	; 0x1ace <_ZN4QEPU7executeEill+0x2d4>
		//2 QUBIT GATES -
		case 0x16: 
			gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	b7 01       	movw	r22, r14
    1a90:	ce 01       	movw	r24, r28
    1a92:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1a96:	8c 01       	movw	r16, r24
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	b4 01       	movw	r22, r8
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1aa4:	5c 01       	movw	r10, r24
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	b2 01       	movw	r22, r4
    1aac:	ce 01       	movw	r24, r28
    1aae:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1ab2:	7c 01       	movw	r14, r24
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	b2 01       	movw	r22, r4
    1aba:	ce 01       	movw	r24, r28
    1abc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN4QEPU4readEii>
    1ac0:	95 01       	movw	r18, r10
    1ac2:	a7 01       	movw	r20, r14
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	05 96       	adiw	r24, 0x05	; 5
    1aca:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_ZN5Gates3CNOEiiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    1ace:	c6 01       	movw	r24, r12
    1ad0:	0e 94 21 13 	call	0x2642	; 0x2642 <free>
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	bf 90       	pop	r11
    1ae6:	af 90       	pop	r10
    1ae8:	9f 90       	pop	r9
    1aea:	8f 90       	pop	r8
    1aec:	7f 90       	pop	r7
    1aee:	6f 90       	pop	r6
    1af0:	5f 90       	pop	r5
    1af2:	4f 90       	pop	r4
    1af4:	3f 90       	pop	r3
    1af6:	2f 90       	pop	r2
    1af8:	08 95       	ret

00001afa <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    1afa:	2f 92       	push	r2
    1afc:	3f 92       	push	r3
    1afe:	4f 92       	push	r4
    1b00:	5f 92       	push	r5
    1b02:	6f 92       	push	r6
    1b04:	7f 92       	push	r7
    1b06:	8f 92       	push	r8
    1b08:	9f 92       	push	r9
    1b0a:	af 92       	push	r10
    1b0c:	bf 92       	push	r11
    1b0e:	cf 92       	push	r12
    1b10:	df 92       	push	r13
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	c0 57       	subi	r28, 0x70	; 112
    1b24:	d1 09       	sbc	r29, r1
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    1b32:	0e 94 22 02 	call	0x444	; 0x444 <_ZN6EEProm7readallEv>
    1b36:	bc 01       	movw	r22, r24
    1b38:	c3 01       	movw	r24, r6
    1b3a:	02 96       	adiw	r24, 0x02	; 2
    1b3c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN4QEPU5Utils10str2intarrEPc>
    1b40:	fc 01       	movw	r30, r24
    1b42:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    1b48:	40 85       	ldd	r20, Z+8	; 0x08
    1b4a:	51 85       	ldd	r21, Z+9	; 0x09
    1b4c:	4f 3f       	cpi	r20, 0xFF	; 255
    1b4e:	51 05       	cpc	r21, r1
    1b50:	a1 f4       	brne	.+40     	; 0x1b7a <_ZN4QEPU3runEv+0x80>
    1b52:	46 81       	ldd	r20, Z+6	; 0x06
    1b54:	57 81       	ldd	r21, Z+7	; 0x07
    1b56:	4f 3f       	cpi	r20, 0xFF	; 255
    1b58:	51 05       	cpc	r21, r1
    1b5a:	79 f4       	brne	.+30     	; 0x1b7a <_ZN4QEPU3runEv+0x80>
    1b5c:	44 81       	ldd	r20, Z+4	; 0x04
    1b5e:	55 81       	ldd	r21, Z+5	; 0x05
    1b60:	4f 3f       	cpi	r20, 0xFF	; 255
    1b62:	51 05       	cpc	r21, r1
    1b64:	51 f4       	brne	.+20     	; 0x1b7a <_ZN4QEPU3runEv+0x80>
    1b66:	42 81       	ldd	r20, Z+2	; 0x02
    1b68:	53 81       	ldd	r21, Z+3	; 0x03
    1b6a:	4f 3f       	cpi	r20, 0xFF	; 255
    1b6c:	51 05       	cpc	r21, r1
    1b6e:	29 f4       	brne	.+10     	; 0x1b7a <_ZN4QEPU3runEv+0x80>
    1b70:	40 81       	ld	r20, Z
    1b72:	51 81       	ldd	r21, Z+1	; 0x01
    1b74:	4f 3f       	cpi	r20, 0xFF	; 255
    1b76:	51 05       	cpc	r21, r1
    1b78:	21 f0       	breq	.+8      	; 0x1b82 <_ZN4QEPU3runEv+0x88>
    1b7a:	2f 5f       	subi	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	32 96       	adiw	r30, 0x02	; 2
    1b80:	e3 cf       	rjmp	.-58     	; 0x1b48 <_ZN4QEPU3runEv+0x4e>
    1b82:	a9 01       	movw	r20, r18
    1b84:	44 50       	subi	r20, 0x04	; 4
    1b86:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1b88:	14 16       	cp	r1, r20
    1b8a:	15 06       	cpc	r1, r21
    1b8c:	0c f0       	brlt	.+2      	; 0x1b90 <_ZN4QEPU3runEv+0x96>
    1b8e:	07 c1       	rjmp	.+526    	; 0x1d9e <_ZN4QEPU3runEv+0x2a4>
    1b90:	fc 01       	movw	r30, r24
    1b92:	25 50       	subi	r18, 0x05	; 5
    1b94:	31 09       	sbc	r19, r1
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	41 2c       	mov	r4, r1
    1ba0:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    1ba2:	c1 2c       	mov	r12, r1
    1ba4:	d1 2c       	mov	r13, r1
    1ba6:	0c c0       	rjmp	.+24     	; 0x1bc0 <_ZN4QEPU3runEv+0xc6>
    1ba8:	69 30       	cpi	r22, 0x09	; 9
    1baa:	71 05       	cpc	r23, r1
    1bac:	34 f0       	brlt	.+12     	; 0x1bba <_ZN4QEPU3runEv+0xc0>
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	48 1a       	sub	r4, r24
    1bb2:	58 0a       	sbc	r5, r24
    1bb4:	8c 2d       	mov	r24, r12
    1bb6:	9d 2d       	mov	r25, r13
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    1bba:	cb 01       	movw	r24, r22
    1bbc:	4f 5f       	subi	r20, 0xFF	; 255
    1bbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	6f 5f       	subi	r22, 0xFF	; 255
    1bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc6:	01 91       	ld	r16, Z+
    1bc8:	11 91       	ld	r17, Z+
    1bca:	d2 01       	movw	r26, r4
    1bcc:	aa 0f       	add	r26, r26
    1bce:	bb 1f       	adc	r27, r27
    1bd0:	aa 0f       	add	r26, r26
    1bd2:	bb 1f       	adc	r27, r27
    1bd4:	aa 0f       	add	r26, r26
    1bd6:	bb 1f       	adc	r27, r27
    1bd8:	a4 0d       	add	r26, r4
    1bda:	b5 1d       	adc	r27, r5
    1bdc:	8a 0f       	add	r24, r26
    1bde:	9b 1f       	adc	r25, r27
    1be0:	dc 01       	movw	r26, r24
    1be2:	aa 0f       	add	r26, r26
    1be4:	bb 1f       	adc	r27, r27
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	8c 0f       	add	r24, r28
    1bec:	9d 1f       	adc	r25, r29
    1bee:	a8 0f       	add	r26, r24
    1bf0:	b9 1f       	adc	r27, r25
    1bf2:	0d 93       	st	X+, r16
    1bf4:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1bf6:	42 17       	cp	r20, r18
    1bf8:	53 07       	cpc	r21, r19
    1bfa:	b1 f6       	brne	.-84     	; 0x1ba8 <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1bfc:	f3 01       	movw	r30, r6
    1bfe:	14 82       	std	Z+4, r1	; 0x04
    1c00:	13 82       	std	Z+3, r1	; 0x03
    1c02:	14 14       	cp	r1, r4
    1c04:	15 04       	cpc	r1, r5
    1c06:	0c f0       	brlt	.+2      	; 0x1c0a <_ZN4QEPU3runEv+0x110>
    1c08:	c6 c0       	rjmp	.+396    	; 0x1d96 <_ZN4QEPU3runEv+0x29c>
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1c0e:	5e 01       	movw	r10, r28
    1c10:	f2 e6       	ldi	r31, 0x62	; 98
    1c12:	af 0e       	add	r10, r31
    1c14:	b1 1c       	adc	r11, r1
    1c16:	6e 01       	movw	r12, r28
    1c18:	2b e5       	ldi	r18, 0x5B	; 91
    1c1a:	c2 0e       	add	r12, r18
    1c1c:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1c1e:	0f 2e       	mov	r0, r31
    1c20:	f6 ec       	ldi	r31, 0xC6	; 198
    1c22:	8f 2e       	mov	r8, r31
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	9f 2e       	mov	r9, r31
    1c28:	f0 2d       	mov	r31, r0
    1c2a:	ae 96       	adiw	r28, 0x2e	; 46
    1c2c:	af ae       	std	Y+63, r10	; 0x3f
    1c2e:	ae 97       	sbiw	r28, 0x2e	; 46
    1c30:	af 96       	adiw	r28, 0x2f	; 47
    1c32:	bf ae       	std	Y+63, r11	; 0x3f
    1c34:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1c36:	e0 96       	adiw	r28, 0x30	; 48
    1c38:	cf ae       	std	Y+63, r12	; 0x3f
    1c3a:	e0 97       	sbiw	r28, 0x30	; 48
    1c3c:	e1 96       	adiw	r28, 0x31	; 49
    1c3e:	df ae       	std	Y+63, r13	; 0x3f
    1c40:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1c42:	f5 01       	movw	r30, r10
    1c44:	10 82       	st	Z, r1
    1c46:	11 82       	std	Z+1, r1	; 0x01
    1c48:	12 82       	std	Z+2, r1	; 0x02
    1c4a:	13 82       	std	Z+3, r1	; 0x03
    1c4c:	14 82       	std	Z+4, r1	; 0x04
    1c4e:	15 82       	std	Z+5, r1	; 0x05
    1c50:	16 82       	std	Z+6, r1	; 0x06
    1c52:	f6 01       	movw	r30, r12
    1c54:	10 82       	st	Z, r1
    1c56:	11 82       	std	Z+1, r1	; 0x01
    1c58:	12 82       	std	Z+2, r1	; 0x02
    1c5a:	13 82       	std	Z+3, r1	; 0x03
    1c5c:	14 82       	std	Z+4, r1	; 0x04
    1c5e:	15 82       	std	Z+5, r1	; 0x05
    1c60:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	fc 01       	movw	r30, r24
    1c68:	ee 0f       	add	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	ee 0f       	add	r30, r30
    1c6e:	ff 1f       	adc	r31, r31
    1c70:	ee 0f       	add	r30, r30
    1c72:	ff 1f       	adc	r31, r31
    1c74:	8e 0f       	add	r24, r30
    1c76:	9f 1f       	adc	r25, r31
    1c78:	e1 e0       	ldi	r30, 0x01	; 1
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	ec 0f       	add	r30, r28
    1c7e:	fd 1f       	adc	r31, r29
    1c80:	e8 0f       	add	r30, r24
    1c82:	f9 1f       	adc	r31, r25
    1c84:	20 80       	ld	r2, Z
    1c86:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1c8c:	0f 5f       	subi	r16, 0xFF	; 255
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	f3 01       	movw	r30, r6
    1c92:	83 81       	ldd	r24, Z+3	; 0x03
    1c94:	94 81       	ldd	r25, Z+4	; 0x04
    1c96:	fc 01       	movw	r30, r24
    1c98:	ee 0f       	add	r30, r30
    1c9a:	ff 1f       	adc	r31, r31
    1c9c:	ee 0f       	add	r30, r30
    1c9e:	ff 1f       	adc	r31, r31
    1ca0:	ee 0f       	add	r30, r30
    1ca2:	ff 1f       	adc	r31, r31
    1ca4:	8e 0f       	add	r24, r30
    1ca6:	9f 1f       	adc	r25, r31
    1ca8:	80 0f       	add	r24, r16
    1caa:	91 1f       	adc	r25, r17
    1cac:	fc 01       	movw	r30, r24
    1cae:	ee 0f       	add	r30, r30
    1cb0:	ff 1f       	adc	r31, r31
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	8c 0f       	add	r24, r28
    1cb8:	9d 1f       	adc	r25, r29
    1cba:	e8 0f       	add	r30, r24
    1cbc:	f9 1f       	adc	r31, r25
    1cbe:	81 81       	ldd	r24, Z+1	; 0x01
    1cc0:	8f 93       	push	r24
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8f 93       	push	r24
    1cc6:	bf 92       	push	r11
    1cc8:	af 92       	push	r10
    1cca:	9f 92       	push	r9
    1ccc:	8f 92       	push	r8
    1cce:	bf 92       	push	r11
    1cd0:	af 92       	push	r10
    1cd2:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1cd6:	f3 01       	movw	r30, r6
    1cd8:	83 81       	ldd	r24, Z+3	; 0x03
    1cda:	94 81       	ldd	r25, Z+4	; 0x04
    1cdc:	fc 01       	movw	r30, r24
    1cde:	ee 0f       	add	r30, r30
    1ce0:	ff 1f       	adc	r31, r31
    1ce2:	ee 0f       	add	r30, r30
    1ce4:	ff 1f       	adc	r31, r31
    1ce6:	ee 0f       	add	r30, r30
    1ce8:	ff 1f       	adc	r31, r31
    1cea:	e8 0f       	add	r30, r24
    1cec:	f9 1f       	adc	r31, r25
    1cee:	e0 0f       	add	r30, r16
    1cf0:	f1 1f       	adc	r31, r17
    1cf2:	34 96       	adiw	r30, 0x04	; 4
    1cf4:	ee 0f       	add	r30, r30
    1cf6:	ff 1f       	adc	r31, r31
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	8c 0f       	add	r24, r28
    1cfe:	9d 1f       	adc	r25, r29
    1d00:	e8 0f       	add	r30, r24
    1d02:	f9 1f       	adc	r31, r25
    1d04:	81 81       	ldd	r24, Z+1	; 0x01
    1d06:	8f 93       	push	r24
    1d08:	80 81       	ld	r24, Z
    1d0a:	8f 93       	push	r24
    1d0c:	df 92       	push	r13
    1d0e:	cf 92       	push	r12
    1d10:	9f 92       	push	r9
    1d12:	8f 92       	push	r8
    1d14:	df 92       	push	r13
    1d16:	cf 92       	push	r12
    1d18:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	04 30       	cpi	r16, 0x04	; 4
    1d28:	11 05       	cpc	r17, r1
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <_ZN4QEPU3runEv+0x234>
    1d2c:	af cf       	rjmp	.-162    	; 0x1c8c <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    1d2e:	40 e1       	ldi	r20, 0x10	; 16
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	e0 96       	adiw	r28, 0x30	; 48
    1d38:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d3a:	e0 97       	sbiw	r28, 0x30	; 48
    1d3c:	e1 96       	adiw	r28, 0x31	; 49
    1d3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d40:	e1 97       	sbiw	r28, 0x31	; 49
    1d42:	0e 94 0e 14 	call	0x281c	; 0x281c <strtol>
    1d46:	ad 96       	adiw	r28, 0x2d	; 45
    1d48:	6c af       	std	Y+60, r22	; 0x3c
    1d4a:	7d af       	std	Y+61, r23	; 0x3d
    1d4c:	8e af       	std	Y+62, r24	; 0x3e
    1d4e:	9f af       	std	Y+63, r25	; 0x3f
    1d50:	ad 97       	sbiw	r28, 0x2d	; 45
    1d52:	40 e1       	ldi	r20, 0x10	; 16
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	ae 96       	adiw	r28, 0x2e	; 46
    1d5c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d5e:	ae 97       	sbiw	r28, 0x2e	; 46
    1d60:	af 96       	adiw	r28, 0x2f	; 47
    1d62:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d64:	af 97       	sbiw	r28, 0x2f	; 47
    1d66:	0e 94 0e 14 	call	0x281c	; 0x281c <strtol>
    1d6a:	9b 01       	movw	r18, r22
    1d6c:	ac 01       	movw	r20, r24
    1d6e:	ad 96       	adiw	r28, 0x2d	; 45
    1d70:	ec ac       	ldd	r14, Y+60	; 0x3c
    1d72:	fd ac       	ldd	r15, Y+61	; 0x3d
    1d74:	0e ad       	ldd	r16, Y+62	; 0x3e
    1d76:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d78:	ad 97       	sbiw	r28, 0x2d	; 45
    1d7a:	b1 01       	movw	r22, r2
    1d7c:	c3 01       	movw	r24, r6
    1d7e:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1d82:	f3 01       	movw	r30, r6
    1d84:	83 81       	ldd	r24, Z+3	; 0x03
    1d86:	94 81       	ldd	r25, Z+4	; 0x04
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	94 83       	std	Z+4, r25	; 0x04
    1d8c:	83 83       	std	Z+3, r24	; 0x03
    1d8e:	84 15       	cp	r24, r4
    1d90:	95 05       	cpc	r25, r5
    1d92:	0c f4       	brge	.+2      	; 0x1d96 <_ZN4QEPU3runEv+0x29c>
    1d94:	56 cf       	rjmp	.-340    	; 0x1c42 <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    1d96:	c3 01       	movw	r24, r6
    1d98:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN4QEPU7dumpmemEv>
    1d9c:	04 c0       	rjmp	.+8      	; 0x1da6 <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1d9e:	f3 01       	movw	r30, r6
    1da0:	14 82       	std	Z+4, r1	; 0x04
    1da2:	13 82       	std	Z+3, r1	; 0x03
    1da4:	f8 cf       	rjmp	.-16     	; 0x1d96 <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    1da6:	c0 59       	subi	r28, 0x90	; 144
    1da8:	df 4f       	sbci	r29, 0xFF	; 255
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	df 90       	pop	r13
    1dc2:	cf 90       	pop	r12
    1dc4:	bf 90       	pop	r11
    1dc6:	af 90       	pop	r10
    1dc8:	9f 90       	pop	r9
    1dca:	8f 90       	pop	r8
    1dcc:	7f 90       	pop	r7
    1dce:	6f 90       	pop	r6
    1dd0:	5f 90       	pop	r5
    1dd2:	4f 90       	pop	r4
    1dd4:	3f 90       	pop	r3
    1dd6:	2f 90       	pop	r2
    1dd8:	08 95       	ret

00001dda <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    1dda:	83 e3       	ldi	r24, 0x33	; 51
    1ddc:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    1dde:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    1de0:	86 e8       	ldi	r24, 0x86	; 134
    1de2:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    1de4:	88 e1       	ldi	r24, 0x18	; 24
    1de6:	8a b9       	out	0x0a, r24	; 10
    1de8:	08 95       	ret

00001dea <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    1dea:	5d 9b       	sbis	0x0b, 5	; 11
    1dec:	fe cf       	rjmp	.-4      	; 0x1dea <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    1dee:	6c b9       	out	0x0c, r22	; 12
    1df0:	08 95       	ret

00001df2 <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	8c 01       	movw	r16, r24
    1dfc:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    1dfe:	68 81       	ld	r22, Y
    1e00:	66 23       	and	r22, r22
    1e02:	39 f0       	breq	.+14     	; 0x1e12 <_ZN6Serial8writestrEPc+0x20>
    1e04:	21 96       	adiw	r28, 0x01	; 1
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN6Serial5writeEc>
    1e0c:	69 91       	ld	r22, Y+
    1e0e:	61 11       	cpse	r22, r1
    1e10:	fa cf       	rjmp	.-12     	; 0x1e06 <_ZN6Serial8writestrEPc+0x14>
}
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	08 95       	ret

00001e1c <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	ec 01       	movw	r28, r24
	writestr(data);
    1e22:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    1e26:	6d e0       	ldi	r22, 0x0D	; 13
    1e28:	ce 01       	movw	r24, r28
    1e2a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN6Serial5writeEc>
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	08 95       	ret

00001e34 <acos>:
    1e34:	9f 93       	push	r25
    1e36:	9f 77       	andi	r25, 0x7F	; 127
    1e38:	71 d1       	rcall	.+738    	; 0x211c <__fp_arccos>
    1e3a:	0f 90       	pop	r0
    1e3c:	00 20       	and	r0, r0
    1e3e:	3a f4       	brpl	.+14     	; 0x1e4e <acos+0x1a>
    1e40:	90 58       	subi	r25, 0x80	; 128
    1e42:	a2 ea       	ldi	r26, 0xA2	; 162
    1e44:	2a ed       	ldi	r18, 0xDA	; 218
    1e46:	3f e0       	ldi	r19, 0x0F	; 15
    1e48:	49 e4       	ldi	r20, 0x49	; 73
    1e4a:	50 e4       	ldi	r21, 0x40	; 64
    1e4c:	13 d0       	rcall	.+38     	; 0x1e74 <__addsf3x>
    1e4e:	e5 c1       	rjmp	.+970    	; 0x221a <__fp_round>

00001e50 <__subsf3>:
    1e50:	50 58       	subi	r21, 0x80	; 128

00001e52 <__addsf3>:
    1e52:	bb 27       	eor	r27, r27
    1e54:	aa 27       	eor	r26, r26
    1e56:	0e d0       	rcall	.+28     	; 0x1e74 <__addsf3x>
    1e58:	e0 c1       	rjmp	.+960    	; 0x221a <__fp_round>
    1e5a:	a9 d1       	rcall	.+850    	; 0x21ae <__fp_pscA>
    1e5c:	30 f0       	brcs	.+12     	; 0x1e6a <__addsf3+0x18>
    1e5e:	ae d1       	rcall	.+860    	; 0x21bc <__fp_pscB>
    1e60:	20 f0       	brcs	.+8      	; 0x1e6a <__addsf3+0x18>
    1e62:	31 f4       	brne	.+12     	; 0x1e70 <__addsf3+0x1e>
    1e64:	9f 3f       	cpi	r25, 0xFF	; 255
    1e66:	11 f4       	brne	.+4      	; 0x1e6c <__addsf3+0x1a>
    1e68:	1e f4       	brtc	.+6      	; 0x1e70 <__addsf3+0x1e>
    1e6a:	79 c1       	rjmp	.+754    	; 0x215e <__fp_nan>
    1e6c:	0e f4       	brtc	.+2      	; 0x1e70 <__addsf3+0x1e>
    1e6e:	e0 95       	com	r30
    1e70:	e7 fb       	bst	r30, 7
    1e72:	6f c1       	rjmp	.+734    	; 0x2152 <__fp_inf>

00001e74 <__addsf3x>:
    1e74:	e9 2f       	mov	r30, r25
    1e76:	f3 d1       	rcall	.+998    	; 0x225e <__fp_split3>
    1e78:	80 f3       	brcs	.-32     	; 0x1e5a <__addsf3+0x8>
    1e7a:	ba 17       	cp	r27, r26
    1e7c:	62 07       	cpc	r22, r18
    1e7e:	73 07       	cpc	r23, r19
    1e80:	84 07       	cpc	r24, r20
    1e82:	95 07       	cpc	r25, r21
    1e84:	18 f0       	brcs	.+6      	; 0x1e8c <__addsf3x+0x18>
    1e86:	71 f4       	brne	.+28     	; 0x1ea4 <__addsf3x+0x30>
    1e88:	9e f5       	brtc	.+102    	; 0x1ef0 <__addsf3x+0x7c>
    1e8a:	0b c2       	rjmp	.+1046   	; 0x22a2 <__fp_zero>
    1e8c:	0e f4       	brtc	.+2      	; 0x1e90 <__addsf3x+0x1c>
    1e8e:	e0 95       	com	r30
    1e90:	0b 2e       	mov	r0, r27
    1e92:	ba 2f       	mov	r27, r26
    1e94:	a0 2d       	mov	r26, r0
    1e96:	0b 01       	movw	r0, r22
    1e98:	b9 01       	movw	r22, r18
    1e9a:	90 01       	movw	r18, r0
    1e9c:	0c 01       	movw	r0, r24
    1e9e:	ca 01       	movw	r24, r20
    1ea0:	a0 01       	movw	r20, r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	ff 27       	eor	r31, r31
    1ea6:	59 1b       	sub	r21, r25
    1ea8:	99 f0       	breq	.+38     	; 0x1ed0 <__addsf3x+0x5c>
    1eaa:	59 3f       	cpi	r21, 0xF9	; 249
    1eac:	50 f4       	brcc	.+20     	; 0x1ec2 <__addsf3x+0x4e>
    1eae:	50 3e       	cpi	r21, 0xE0	; 224
    1eb0:	68 f1       	brcs	.+90     	; 0x1f0c <__addsf3x+0x98>
    1eb2:	1a 16       	cp	r1, r26
    1eb4:	f0 40       	sbci	r31, 0x00	; 0
    1eb6:	a2 2f       	mov	r26, r18
    1eb8:	23 2f       	mov	r18, r19
    1eba:	34 2f       	mov	r19, r20
    1ebc:	44 27       	eor	r20, r20
    1ebe:	58 5f       	subi	r21, 0xF8	; 248
    1ec0:	f3 cf       	rjmp	.-26     	; 0x1ea8 <__addsf3x+0x34>
    1ec2:	46 95       	lsr	r20
    1ec4:	37 95       	ror	r19
    1ec6:	27 95       	ror	r18
    1ec8:	a7 95       	ror	r26
    1eca:	f0 40       	sbci	r31, 0x00	; 0
    1ecc:	53 95       	inc	r21
    1ece:	c9 f7       	brne	.-14     	; 0x1ec2 <__addsf3x+0x4e>
    1ed0:	7e f4       	brtc	.+30     	; 0x1ef0 <__addsf3x+0x7c>
    1ed2:	1f 16       	cp	r1, r31
    1ed4:	ba 0b       	sbc	r27, r26
    1ed6:	62 0b       	sbc	r22, r18
    1ed8:	73 0b       	sbc	r23, r19
    1eda:	84 0b       	sbc	r24, r20
    1edc:	ba f0       	brmi	.+46     	; 0x1f0c <__addsf3x+0x98>
    1ede:	91 50       	subi	r25, 0x01	; 1
    1ee0:	a1 f0       	breq	.+40     	; 0x1f0a <__addsf3x+0x96>
    1ee2:	ff 0f       	add	r31, r31
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	66 1f       	adc	r22, r22
    1ee8:	77 1f       	adc	r23, r23
    1eea:	88 1f       	adc	r24, r24
    1eec:	c2 f7       	brpl	.-16     	; 0x1ede <__addsf3x+0x6a>
    1eee:	0e c0       	rjmp	.+28     	; 0x1f0c <__addsf3x+0x98>
    1ef0:	ba 0f       	add	r27, r26
    1ef2:	62 1f       	adc	r22, r18
    1ef4:	73 1f       	adc	r23, r19
    1ef6:	84 1f       	adc	r24, r20
    1ef8:	48 f4       	brcc	.+18     	; 0x1f0c <__addsf3x+0x98>
    1efa:	87 95       	ror	r24
    1efc:	77 95       	ror	r23
    1efe:	67 95       	ror	r22
    1f00:	b7 95       	ror	r27
    1f02:	f7 95       	ror	r31
    1f04:	9e 3f       	cpi	r25, 0xFE	; 254
    1f06:	08 f0       	brcs	.+2      	; 0x1f0a <__addsf3x+0x96>
    1f08:	b3 cf       	rjmp	.-154    	; 0x1e70 <__addsf3+0x1e>
    1f0a:	93 95       	inc	r25
    1f0c:	88 0f       	add	r24, r24
    1f0e:	08 f0       	brcs	.+2      	; 0x1f12 <__addsf3x+0x9e>
    1f10:	99 27       	eor	r25, r25
    1f12:	ee 0f       	add	r30, r30
    1f14:	97 95       	ror	r25
    1f16:	87 95       	ror	r24
    1f18:	08 95       	ret

00001f1a <atan>:
    1f1a:	df 93       	push	r29
    1f1c:	dd 27       	eor	r29, r29
    1f1e:	b9 2f       	mov	r27, r25
    1f20:	bf 77       	andi	r27, 0x7F	; 127
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	16 16       	cp	r1, r22
    1f28:	17 06       	cpc	r1, r23
    1f2a:	48 07       	cpc	r20, r24
    1f2c:	5b 07       	cpc	r21, r27
    1f2e:	10 f4       	brcc	.+4      	; 0x1f34 <atan+0x1a>
    1f30:	d9 2f       	mov	r29, r25
    1f32:	c2 d1       	rcall	.+900    	; 0x22b8 <inverse>
    1f34:	9f 93       	push	r25
    1f36:	8f 93       	push	r24
    1f38:	7f 93       	push	r23
    1f3a:	6f 93       	push	r22
    1f3c:	6f d2       	rcall	.+1246   	; 0x241c <square>
    1f3e:	e0 e8       	ldi	r30, 0x80	; 128
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	10 d1       	rcall	.+544    	; 0x2164 <__fp_powser>
    1f44:	6a d1       	rcall	.+724    	; 0x221a <__fp_round>
    1f46:	2f 91       	pop	r18
    1f48:	3f 91       	pop	r19
    1f4a:	4f 91       	pop	r20
    1f4c:	5f 91       	pop	r21
    1f4e:	c7 d1       	rcall	.+910    	; 0x22de <__mulsf3x>
    1f50:	dd 23       	and	r29, r29
    1f52:	49 f0       	breq	.+18     	; 0x1f66 <atan+0x4c>
    1f54:	90 58       	subi	r25, 0x80	; 128
    1f56:	a2 ea       	ldi	r26, 0xA2	; 162
    1f58:	2a ed       	ldi	r18, 0xDA	; 218
    1f5a:	3f e0       	ldi	r19, 0x0F	; 15
    1f5c:	49 ec       	ldi	r20, 0xC9	; 201
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	d0 78       	andi	r29, 0x80	; 128
    1f62:	5d 27       	eor	r21, r29
    1f64:	87 df       	rcall	.-242    	; 0x1e74 <__addsf3x>
    1f66:	df 91       	pop	r29
    1f68:	58 c1       	rjmp	.+688    	; 0x221a <__fp_round>

00001f6a <cos>:
    1f6a:	30 d1       	rcall	.+608    	; 0x21cc <__fp_rempio2>
    1f6c:	e3 95       	inc	r30
    1f6e:	66 c1       	rjmp	.+716    	; 0x223c <__fp_sinus>

00001f70 <__divsf3>:
    1f70:	0c d0       	rcall	.+24     	; 0x1f8a <__divsf3x>
    1f72:	53 c1       	rjmp	.+678    	; 0x221a <__fp_round>
    1f74:	23 d1       	rcall	.+582    	; 0x21bc <__fp_pscB>
    1f76:	40 f0       	brcs	.+16     	; 0x1f88 <__divsf3+0x18>
    1f78:	1a d1       	rcall	.+564    	; 0x21ae <__fp_pscA>
    1f7a:	30 f0       	brcs	.+12     	; 0x1f88 <__divsf3+0x18>
    1f7c:	21 f4       	brne	.+8      	; 0x1f86 <__divsf3+0x16>
    1f7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f80:	19 f0       	breq	.+6      	; 0x1f88 <__divsf3+0x18>
    1f82:	e7 c0       	rjmp	.+462    	; 0x2152 <__fp_inf>
    1f84:	51 11       	cpse	r21, r1
    1f86:	8e c1       	rjmp	.+796    	; 0x22a4 <__fp_szero>
    1f88:	ea c0       	rjmp	.+468    	; 0x215e <__fp_nan>

00001f8a <__divsf3x>:
    1f8a:	69 d1       	rcall	.+722    	; 0x225e <__fp_split3>
    1f8c:	98 f3       	brcs	.-26     	; 0x1f74 <__divsf3+0x4>

00001f8e <__divsf3_pse>:
    1f8e:	99 23       	and	r25, r25
    1f90:	c9 f3       	breq	.-14     	; 0x1f84 <__divsf3+0x14>
    1f92:	55 23       	and	r21, r21
    1f94:	b1 f3       	breq	.-20     	; 0x1f82 <__divsf3+0x12>
    1f96:	95 1b       	sub	r25, r21
    1f98:	55 0b       	sbc	r21, r21
    1f9a:	bb 27       	eor	r27, r27
    1f9c:	aa 27       	eor	r26, r26
    1f9e:	62 17       	cp	r22, r18
    1fa0:	73 07       	cpc	r23, r19
    1fa2:	84 07       	cpc	r24, r20
    1fa4:	38 f0       	brcs	.+14     	; 0x1fb4 <__divsf3_pse+0x26>
    1fa6:	9f 5f       	subi	r25, 0xFF	; 255
    1fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1faa:	22 0f       	add	r18, r18
    1fac:	33 1f       	adc	r19, r19
    1fae:	44 1f       	adc	r20, r20
    1fb0:	aa 1f       	adc	r26, r26
    1fb2:	a9 f3       	breq	.-22     	; 0x1f9e <__divsf3_pse+0x10>
    1fb4:	33 d0       	rcall	.+102    	; 0x201c <__divsf3_pse+0x8e>
    1fb6:	0e 2e       	mov	r0, r30
    1fb8:	3a f0       	brmi	.+14     	; 0x1fc8 <__divsf3_pse+0x3a>
    1fba:	e0 e8       	ldi	r30, 0x80	; 128
    1fbc:	30 d0       	rcall	.+96     	; 0x201e <__divsf3_pse+0x90>
    1fbe:	91 50       	subi	r25, 0x01	; 1
    1fc0:	50 40       	sbci	r21, 0x00	; 0
    1fc2:	e6 95       	lsr	r30
    1fc4:	00 1c       	adc	r0, r0
    1fc6:	ca f7       	brpl	.-14     	; 0x1fba <__divsf3_pse+0x2c>
    1fc8:	29 d0       	rcall	.+82     	; 0x201c <__divsf3_pse+0x8e>
    1fca:	fe 2f       	mov	r31, r30
    1fcc:	27 d0       	rcall	.+78     	; 0x201c <__divsf3_pse+0x8e>
    1fce:	66 0f       	add	r22, r22
    1fd0:	77 1f       	adc	r23, r23
    1fd2:	88 1f       	adc	r24, r24
    1fd4:	bb 1f       	adc	r27, r27
    1fd6:	26 17       	cp	r18, r22
    1fd8:	37 07       	cpc	r19, r23
    1fda:	48 07       	cpc	r20, r24
    1fdc:	ab 07       	cpc	r26, r27
    1fde:	b0 e8       	ldi	r27, 0x80	; 128
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <__divsf3_pse+0x56>
    1fe2:	bb 0b       	sbc	r27, r27
    1fe4:	80 2d       	mov	r24, r0
    1fe6:	bf 01       	movw	r22, r30
    1fe8:	ff 27       	eor	r31, r31
    1fea:	93 58       	subi	r25, 0x83	; 131
    1fec:	5f 4f       	sbci	r21, 0xFF	; 255
    1fee:	2a f0       	brmi	.+10     	; 0x1ffa <__divsf3_pse+0x6c>
    1ff0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ff2:	51 05       	cpc	r21, r1
    1ff4:	68 f0       	brcs	.+26     	; 0x2010 <__divsf3_pse+0x82>
    1ff6:	ad c0       	rjmp	.+346    	; 0x2152 <__fp_inf>
    1ff8:	55 c1       	rjmp	.+682    	; 0x22a4 <__fp_szero>
    1ffa:	5f 3f       	cpi	r21, 0xFF	; 255
    1ffc:	ec f3       	brlt	.-6      	; 0x1ff8 <__divsf3_pse+0x6a>
    1ffe:	98 3e       	cpi	r25, 0xE8	; 232
    2000:	dc f3       	brlt	.-10     	; 0x1ff8 <__divsf3_pse+0x6a>
    2002:	86 95       	lsr	r24
    2004:	77 95       	ror	r23
    2006:	67 95       	ror	r22
    2008:	b7 95       	ror	r27
    200a:	f7 95       	ror	r31
    200c:	9f 5f       	subi	r25, 0xFF	; 255
    200e:	c9 f7       	brne	.-14     	; 0x2002 <__divsf3_pse+0x74>
    2010:	88 0f       	add	r24, r24
    2012:	91 1d       	adc	r25, r1
    2014:	96 95       	lsr	r25
    2016:	87 95       	ror	r24
    2018:	97 f9       	bld	r25, 7
    201a:	08 95       	ret
    201c:	e1 e0       	ldi	r30, 0x01	; 1
    201e:	66 0f       	add	r22, r22
    2020:	77 1f       	adc	r23, r23
    2022:	88 1f       	adc	r24, r24
    2024:	bb 1f       	adc	r27, r27
    2026:	62 17       	cp	r22, r18
    2028:	73 07       	cpc	r23, r19
    202a:	84 07       	cpc	r24, r20
    202c:	ba 07       	cpc	r27, r26
    202e:	20 f0       	brcs	.+8      	; 0x2038 <__divsf3_pse+0xaa>
    2030:	62 1b       	sub	r22, r18
    2032:	73 0b       	sbc	r23, r19
    2034:	84 0b       	sbc	r24, r20
    2036:	ba 0b       	sbc	r27, r26
    2038:	ee 1f       	adc	r30, r30
    203a:	88 f7       	brcc	.-30     	; 0x201e <__divsf3_pse+0x90>
    203c:	e0 95       	com	r30
    203e:	08 95       	ret

00002040 <__fixsfsi>:
    2040:	04 d0       	rcall	.+8      	; 0x204a <__fixunssfsi>
    2042:	68 94       	set
    2044:	b1 11       	cpse	r27, r1
    2046:	2e c1       	rjmp	.+604    	; 0x22a4 <__fp_szero>
    2048:	08 95       	ret

0000204a <__fixunssfsi>:
    204a:	11 d1       	rcall	.+546    	; 0x226e <__fp_splitA>
    204c:	88 f0       	brcs	.+34     	; 0x2070 <__fixunssfsi+0x26>
    204e:	9f 57       	subi	r25, 0x7F	; 127
    2050:	90 f0       	brcs	.+36     	; 0x2076 <__fixunssfsi+0x2c>
    2052:	b9 2f       	mov	r27, r25
    2054:	99 27       	eor	r25, r25
    2056:	b7 51       	subi	r27, 0x17	; 23
    2058:	a0 f0       	brcs	.+40     	; 0x2082 <__fixunssfsi+0x38>
    205a:	d1 f0       	breq	.+52     	; 0x2090 <__fixunssfsi+0x46>
    205c:	66 0f       	add	r22, r22
    205e:	77 1f       	adc	r23, r23
    2060:	88 1f       	adc	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	1a f0       	brmi	.+6      	; 0x206c <__fixunssfsi+0x22>
    2066:	ba 95       	dec	r27
    2068:	c9 f7       	brne	.-14     	; 0x205c <__fixunssfsi+0x12>
    206a:	12 c0       	rjmp	.+36     	; 0x2090 <__fixunssfsi+0x46>
    206c:	b1 30       	cpi	r27, 0x01	; 1
    206e:	81 f0       	breq	.+32     	; 0x2090 <__fixunssfsi+0x46>
    2070:	18 d1       	rcall	.+560    	; 0x22a2 <__fp_zero>
    2072:	b1 e0       	ldi	r27, 0x01	; 1
    2074:	08 95       	ret
    2076:	15 c1       	rjmp	.+554    	; 0x22a2 <__fp_zero>
    2078:	67 2f       	mov	r22, r23
    207a:	78 2f       	mov	r23, r24
    207c:	88 27       	eor	r24, r24
    207e:	b8 5f       	subi	r27, 0xF8	; 248
    2080:	39 f0       	breq	.+14     	; 0x2090 <__fixunssfsi+0x46>
    2082:	b9 3f       	cpi	r27, 0xF9	; 249
    2084:	cc f3       	brlt	.-14     	; 0x2078 <__fixunssfsi+0x2e>
    2086:	86 95       	lsr	r24
    2088:	77 95       	ror	r23
    208a:	67 95       	ror	r22
    208c:	b3 95       	inc	r27
    208e:	d9 f7       	brne	.-10     	; 0x2086 <__fixunssfsi+0x3c>
    2090:	3e f4       	brtc	.+14     	; 0x20a0 <__fixunssfsi+0x56>
    2092:	90 95       	com	r25
    2094:	80 95       	com	r24
    2096:	70 95       	com	r23
    2098:	61 95       	neg	r22
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	8f 4f       	sbci	r24, 0xFF	; 255
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	08 95       	ret

000020a2 <__floatunsisf>:
    20a2:	e8 94       	clt
    20a4:	09 c0       	rjmp	.+18     	; 0x20b8 <__floatsisf+0x12>

000020a6 <__floatsisf>:
    20a6:	97 fb       	bst	r25, 7
    20a8:	3e f4       	brtc	.+14     	; 0x20b8 <__floatsisf+0x12>
    20aa:	90 95       	com	r25
    20ac:	80 95       	com	r24
    20ae:	70 95       	com	r23
    20b0:	61 95       	neg	r22
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255
    20b4:	8f 4f       	sbci	r24, 0xFF	; 255
    20b6:	9f 4f       	sbci	r25, 0xFF	; 255
    20b8:	99 23       	and	r25, r25
    20ba:	a9 f0       	breq	.+42     	; 0x20e6 <__floatsisf+0x40>
    20bc:	f9 2f       	mov	r31, r25
    20be:	96 e9       	ldi	r25, 0x96	; 150
    20c0:	bb 27       	eor	r27, r27
    20c2:	93 95       	inc	r25
    20c4:	f6 95       	lsr	r31
    20c6:	87 95       	ror	r24
    20c8:	77 95       	ror	r23
    20ca:	67 95       	ror	r22
    20cc:	b7 95       	ror	r27
    20ce:	f1 11       	cpse	r31, r1
    20d0:	f8 cf       	rjmp	.-16     	; 0x20c2 <__floatsisf+0x1c>
    20d2:	fa f4       	brpl	.+62     	; 0x2112 <__floatsisf+0x6c>
    20d4:	bb 0f       	add	r27, r27
    20d6:	11 f4       	brne	.+4      	; 0x20dc <__floatsisf+0x36>
    20d8:	60 ff       	sbrs	r22, 0
    20da:	1b c0       	rjmp	.+54     	; 0x2112 <__floatsisf+0x6c>
    20dc:	6f 5f       	subi	r22, 0xFF	; 255
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	8f 4f       	sbci	r24, 0xFF	; 255
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	16 c0       	rjmp	.+44     	; 0x2112 <__floatsisf+0x6c>
    20e6:	88 23       	and	r24, r24
    20e8:	11 f0       	breq	.+4      	; 0x20ee <__floatsisf+0x48>
    20ea:	96 e9       	ldi	r25, 0x96	; 150
    20ec:	11 c0       	rjmp	.+34     	; 0x2110 <__floatsisf+0x6a>
    20ee:	77 23       	and	r23, r23
    20f0:	21 f0       	breq	.+8      	; 0x20fa <__floatsisf+0x54>
    20f2:	9e e8       	ldi	r25, 0x8E	; 142
    20f4:	87 2f       	mov	r24, r23
    20f6:	76 2f       	mov	r23, r22
    20f8:	05 c0       	rjmp	.+10     	; 0x2104 <__floatsisf+0x5e>
    20fa:	66 23       	and	r22, r22
    20fc:	71 f0       	breq	.+28     	; 0x211a <__floatsisf+0x74>
    20fe:	96 e8       	ldi	r25, 0x86	; 134
    2100:	86 2f       	mov	r24, r22
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	2a f0       	brmi	.+10     	; 0x2112 <__floatsisf+0x6c>
    2108:	9a 95       	dec	r25
    210a:	66 0f       	add	r22, r22
    210c:	77 1f       	adc	r23, r23
    210e:	88 1f       	adc	r24, r24
    2110:	da f7       	brpl	.-10     	; 0x2108 <__floatsisf+0x62>
    2112:	88 0f       	add	r24, r24
    2114:	96 95       	lsr	r25
    2116:	87 95       	ror	r24
    2118:	97 f9       	bld	r25, 7
    211a:	08 95       	ret

0000211c <__fp_arccos>:
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	1f 93       	push	r17
    2122:	0f 93       	push	r16
    2124:	8b 01       	movw	r16, r22
    2126:	ec 01       	movw	r28, r24
    2128:	ed ea       	ldi	r30, 0xAD	; 173
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	1b d0       	rcall	.+54     	; 0x2164 <__fp_powser>
    212e:	75 d0       	rcall	.+234    	; 0x221a <__fp_round>
    2130:	98 01       	movw	r18, r16
    2132:	ae 01       	movw	r20, r28
    2134:	8b 01       	movw	r16, r22
    2136:	ec 01       	movw	r28, r24
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	80 e8       	ldi	r24, 0x80	; 128
    213e:	9f e3       	ldi	r25, 0x3F	; 63
    2140:	87 de       	rcall	.-754    	; 0x1e50 <__subsf3>
    2142:	2e d1       	rcall	.+604    	; 0x23a0 <sqrt>
    2144:	98 01       	movw	r18, r16
    2146:	ae 01       	movw	r20, r28
    2148:	0f 91       	pop	r16
    214a:	1f 91       	pop	r17
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	c6 c0       	rjmp	.+396    	; 0x22de <__mulsf3x>

00002152 <__fp_inf>:
    2152:	97 f9       	bld	r25, 7
    2154:	9f 67       	ori	r25, 0x7F	; 127
    2156:	80 e8       	ldi	r24, 0x80	; 128
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	08 95       	ret

0000215e <__fp_nan>:
    215e:	9f ef       	ldi	r25, 0xFF	; 255
    2160:	80 ec       	ldi	r24, 0xC0	; 192
    2162:	08 95       	ret

00002164 <__fp_powser>:
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	1f 93       	push	r17
    216a:	0f 93       	push	r16
    216c:	ff 92       	push	r15
    216e:	ef 92       	push	r14
    2170:	df 92       	push	r13
    2172:	7b 01       	movw	r14, r22
    2174:	8c 01       	movw	r16, r24
    2176:	68 94       	set
    2178:	05 c0       	rjmp	.+10     	; 0x2184 <__fp_powser+0x20>
    217a:	da 2e       	mov	r13, r26
    217c:	ef 01       	movw	r28, r30
    217e:	af d0       	rcall	.+350    	; 0x22de <__mulsf3x>
    2180:	fe 01       	movw	r30, r28
    2182:	e8 94       	clt
    2184:	a5 91       	lpm	r26, Z+
    2186:	25 91       	lpm	r18, Z+
    2188:	35 91       	lpm	r19, Z+
    218a:	45 91       	lpm	r20, Z+
    218c:	55 91       	lpm	r21, Z+
    218e:	ae f3       	brts	.-22     	; 0x217a <__fp_powser+0x16>
    2190:	ef 01       	movw	r28, r30
    2192:	70 de       	rcall	.-800    	; 0x1e74 <__addsf3x>
    2194:	fe 01       	movw	r30, r28
    2196:	97 01       	movw	r18, r14
    2198:	a8 01       	movw	r20, r16
    219a:	da 94       	dec	r13
    219c:	79 f7       	brne	.-34     	; 0x217c <__fp_powser+0x18>
    219e:	df 90       	pop	r13
    21a0:	ef 90       	pop	r14
    21a2:	ff 90       	pop	r15
    21a4:	0f 91       	pop	r16
    21a6:	1f 91       	pop	r17
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <__fp_pscA>:
    21ae:	00 24       	eor	r0, r0
    21b0:	0a 94       	dec	r0
    21b2:	16 16       	cp	r1, r22
    21b4:	17 06       	cpc	r1, r23
    21b6:	18 06       	cpc	r1, r24
    21b8:	09 06       	cpc	r0, r25
    21ba:	08 95       	ret

000021bc <__fp_pscB>:
    21bc:	00 24       	eor	r0, r0
    21be:	0a 94       	dec	r0
    21c0:	12 16       	cp	r1, r18
    21c2:	13 06       	cpc	r1, r19
    21c4:	14 06       	cpc	r1, r20
    21c6:	05 06       	cpc	r0, r21
    21c8:	08 95       	ret
    21ca:	c9 cf       	rjmp	.-110    	; 0x215e <__fp_nan>

000021cc <__fp_rempio2>:
    21cc:	50 d0       	rcall	.+160    	; 0x226e <__fp_splitA>
    21ce:	e8 f3       	brcs	.-6      	; 0x21ca <__fp_pscB+0xe>
    21d0:	e8 94       	clt
    21d2:	e0 e0       	ldi	r30, 0x00	; 0
    21d4:	bb 27       	eor	r27, r27
    21d6:	9f 57       	subi	r25, 0x7F	; 127
    21d8:	f0 f0       	brcs	.+60     	; 0x2216 <__fp_rempio2+0x4a>
    21da:	2a ed       	ldi	r18, 0xDA	; 218
    21dc:	3f e0       	ldi	r19, 0x0F	; 15
    21de:	49 ec       	ldi	r20, 0xC9	; 201
    21e0:	06 c0       	rjmp	.+12     	; 0x21ee <__fp_rempio2+0x22>
    21e2:	ee 0f       	add	r30, r30
    21e4:	bb 0f       	add	r27, r27
    21e6:	66 1f       	adc	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	88 1f       	adc	r24, r24
    21ec:	28 f0       	brcs	.+10     	; 0x21f8 <__fp_rempio2+0x2c>
    21ee:	b2 3a       	cpi	r27, 0xA2	; 162
    21f0:	62 07       	cpc	r22, r18
    21f2:	73 07       	cpc	r23, r19
    21f4:	84 07       	cpc	r24, r20
    21f6:	28 f0       	brcs	.+10     	; 0x2202 <__fp_rempio2+0x36>
    21f8:	b2 5a       	subi	r27, 0xA2	; 162
    21fa:	62 0b       	sbc	r22, r18
    21fc:	73 0b       	sbc	r23, r19
    21fe:	84 0b       	sbc	r24, r20
    2200:	e3 95       	inc	r30
    2202:	9a 95       	dec	r25
    2204:	72 f7       	brpl	.-36     	; 0x21e2 <__fp_rempio2+0x16>
    2206:	80 38       	cpi	r24, 0x80	; 128
    2208:	30 f4       	brcc	.+12     	; 0x2216 <__fp_rempio2+0x4a>
    220a:	9a 95       	dec	r25
    220c:	bb 0f       	add	r27, r27
    220e:	66 1f       	adc	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	88 1f       	adc	r24, r24
    2214:	d2 f7       	brpl	.-12     	; 0x220a <__fp_rempio2+0x3e>
    2216:	90 48       	sbci	r25, 0x80	; 128
    2218:	2a c1       	rjmp	.+596    	; 0x246e <__fp_mpack_finite>

0000221a <__fp_round>:
    221a:	09 2e       	mov	r0, r25
    221c:	03 94       	inc	r0
    221e:	00 0c       	add	r0, r0
    2220:	11 f4       	brne	.+4      	; 0x2226 <__fp_round+0xc>
    2222:	88 23       	and	r24, r24
    2224:	52 f0       	brmi	.+20     	; 0x223a <__fp_round+0x20>
    2226:	bb 0f       	add	r27, r27
    2228:	40 f4       	brcc	.+16     	; 0x223a <__fp_round+0x20>
    222a:	bf 2b       	or	r27, r31
    222c:	11 f4       	brne	.+4      	; 0x2232 <__fp_round+0x18>
    222e:	60 ff       	sbrs	r22, 0
    2230:	04 c0       	rjmp	.+8      	; 0x223a <__fp_round+0x20>
    2232:	6f 5f       	subi	r22, 0xFF	; 255
    2234:	7f 4f       	sbci	r23, 0xFF	; 255
    2236:	8f 4f       	sbci	r24, 0xFF	; 255
    2238:	9f 4f       	sbci	r25, 0xFF	; 255
    223a:	08 95       	ret

0000223c <__fp_sinus>:
    223c:	ef 93       	push	r30
    223e:	e0 ff       	sbrs	r30, 0
    2240:	06 c0       	rjmp	.+12     	; 0x224e <__fp_sinus+0x12>
    2242:	a2 ea       	ldi	r26, 0xA2	; 162
    2244:	2a ed       	ldi	r18, 0xDA	; 218
    2246:	3f e0       	ldi	r19, 0x0F	; 15
    2248:	49 ec       	ldi	r20, 0xC9	; 201
    224a:	5f eb       	ldi	r21, 0xBF	; 191
    224c:	13 de       	rcall	.-986    	; 0x1e74 <__addsf3x>
    224e:	e5 df       	rcall	.-54     	; 0x221a <__fp_round>
    2250:	0f 90       	pop	r0
    2252:	03 94       	inc	r0
    2254:	01 fc       	sbrc	r0, 1
    2256:	90 58       	subi	r25, 0x80	; 128
    2258:	e5 ed       	ldi	r30, 0xD5	; 213
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	1b c1       	rjmp	.+566    	; 0x2494 <__fp_powsodd>

0000225e <__fp_split3>:
    225e:	57 fd       	sbrc	r21, 7
    2260:	90 58       	subi	r25, 0x80	; 128
    2262:	44 0f       	add	r20, r20
    2264:	55 1f       	adc	r21, r21
    2266:	59 f0       	breq	.+22     	; 0x227e <__fp_splitA+0x10>
    2268:	5f 3f       	cpi	r21, 0xFF	; 255
    226a:	71 f0       	breq	.+28     	; 0x2288 <__fp_splitA+0x1a>
    226c:	47 95       	ror	r20

0000226e <__fp_splitA>:
    226e:	88 0f       	add	r24, r24
    2270:	97 fb       	bst	r25, 7
    2272:	99 1f       	adc	r25, r25
    2274:	61 f0       	breq	.+24     	; 0x228e <__fp_splitA+0x20>
    2276:	9f 3f       	cpi	r25, 0xFF	; 255
    2278:	79 f0       	breq	.+30     	; 0x2298 <__fp_splitA+0x2a>
    227a:	87 95       	ror	r24
    227c:	08 95       	ret
    227e:	12 16       	cp	r1, r18
    2280:	13 06       	cpc	r1, r19
    2282:	14 06       	cpc	r1, r20
    2284:	55 1f       	adc	r21, r21
    2286:	f2 cf       	rjmp	.-28     	; 0x226c <__fp_split3+0xe>
    2288:	46 95       	lsr	r20
    228a:	f1 df       	rcall	.-30     	; 0x226e <__fp_splitA>
    228c:	08 c0       	rjmp	.+16     	; 0x229e <__fp_splitA+0x30>
    228e:	16 16       	cp	r1, r22
    2290:	17 06       	cpc	r1, r23
    2292:	18 06       	cpc	r1, r24
    2294:	99 1f       	adc	r25, r25
    2296:	f1 cf       	rjmp	.-30     	; 0x227a <__fp_splitA+0xc>
    2298:	86 95       	lsr	r24
    229a:	71 05       	cpc	r23, r1
    229c:	61 05       	cpc	r22, r1
    229e:	08 94       	sec
    22a0:	08 95       	ret

000022a2 <__fp_zero>:
    22a2:	e8 94       	clt

000022a4 <__fp_szero>:
    22a4:	bb 27       	eor	r27, r27
    22a6:	66 27       	eor	r22, r22
    22a8:	77 27       	eor	r23, r23
    22aa:	cb 01       	movw	r24, r22
    22ac:	97 f9       	bld	r25, 7
    22ae:	08 95       	ret

000022b0 <__gesf2>:
    22b0:	b8 d0       	rcall	.+368    	; 0x2422 <__fp_cmp>
    22b2:	08 f4       	brcc	.+2      	; 0x22b6 <__gesf2+0x6>
    22b4:	8f ef       	ldi	r24, 0xFF	; 255
    22b6:	08 95       	ret

000022b8 <inverse>:
    22b8:	9b 01       	movw	r18, r22
    22ba:	ac 01       	movw	r20, r24
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	80 e8       	ldi	r24, 0x80	; 128
    22c2:	9f e3       	ldi	r25, 0x3F	; 63
    22c4:	55 ce       	rjmp	.-854    	; 0x1f70 <__divsf3>

000022c6 <__mulsf3>:
    22c6:	0b d0       	rcall	.+22     	; 0x22de <__mulsf3x>
    22c8:	a8 cf       	rjmp	.-176    	; 0x221a <__fp_round>
    22ca:	71 df       	rcall	.-286    	; 0x21ae <__fp_pscA>
    22cc:	28 f0       	brcs	.+10     	; 0x22d8 <__mulsf3+0x12>
    22ce:	76 df       	rcall	.-276    	; 0x21bc <__fp_pscB>
    22d0:	18 f0       	brcs	.+6      	; 0x22d8 <__mulsf3+0x12>
    22d2:	95 23       	and	r25, r21
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <__mulsf3+0x12>
    22d6:	3d cf       	rjmp	.-390    	; 0x2152 <__fp_inf>
    22d8:	42 cf       	rjmp	.-380    	; 0x215e <__fp_nan>
    22da:	11 24       	eor	r1, r1
    22dc:	e3 cf       	rjmp	.-58     	; 0x22a4 <__fp_szero>

000022de <__mulsf3x>:
    22de:	bf df       	rcall	.-130    	; 0x225e <__fp_split3>
    22e0:	a0 f3       	brcs	.-24     	; 0x22ca <__mulsf3+0x4>

000022e2 <__mulsf3_pse>:
    22e2:	95 9f       	mul	r25, r21
    22e4:	d1 f3       	breq	.-12     	; 0x22da <__mulsf3+0x14>
    22e6:	95 0f       	add	r25, r21
    22e8:	50 e0       	ldi	r21, 0x00	; 0
    22ea:	55 1f       	adc	r21, r21
    22ec:	62 9f       	mul	r22, r18
    22ee:	f0 01       	movw	r30, r0
    22f0:	72 9f       	mul	r23, r18
    22f2:	bb 27       	eor	r27, r27
    22f4:	f0 0d       	add	r31, r0
    22f6:	b1 1d       	adc	r27, r1
    22f8:	63 9f       	mul	r22, r19
    22fa:	aa 27       	eor	r26, r26
    22fc:	f0 0d       	add	r31, r0
    22fe:	b1 1d       	adc	r27, r1
    2300:	aa 1f       	adc	r26, r26
    2302:	64 9f       	mul	r22, r20
    2304:	66 27       	eor	r22, r22
    2306:	b0 0d       	add	r27, r0
    2308:	a1 1d       	adc	r26, r1
    230a:	66 1f       	adc	r22, r22
    230c:	82 9f       	mul	r24, r18
    230e:	22 27       	eor	r18, r18
    2310:	b0 0d       	add	r27, r0
    2312:	a1 1d       	adc	r26, r1
    2314:	62 1f       	adc	r22, r18
    2316:	73 9f       	mul	r23, r19
    2318:	b0 0d       	add	r27, r0
    231a:	a1 1d       	adc	r26, r1
    231c:	62 1f       	adc	r22, r18
    231e:	83 9f       	mul	r24, r19
    2320:	a0 0d       	add	r26, r0
    2322:	61 1d       	adc	r22, r1
    2324:	22 1f       	adc	r18, r18
    2326:	74 9f       	mul	r23, r20
    2328:	33 27       	eor	r19, r19
    232a:	a0 0d       	add	r26, r0
    232c:	61 1d       	adc	r22, r1
    232e:	23 1f       	adc	r18, r19
    2330:	84 9f       	mul	r24, r20
    2332:	60 0d       	add	r22, r0
    2334:	21 1d       	adc	r18, r1
    2336:	82 2f       	mov	r24, r18
    2338:	76 2f       	mov	r23, r22
    233a:	6a 2f       	mov	r22, r26
    233c:	11 24       	eor	r1, r1
    233e:	9f 57       	subi	r25, 0x7F	; 127
    2340:	50 40       	sbci	r21, 0x00	; 0
    2342:	8a f0       	brmi	.+34     	; 0x2366 <__mulsf3_pse+0x84>
    2344:	e1 f0       	breq	.+56     	; 0x237e <__mulsf3_pse+0x9c>
    2346:	88 23       	and	r24, r24
    2348:	4a f0       	brmi	.+18     	; 0x235c <__mulsf3_pse+0x7a>
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	bb 1f       	adc	r27, r27
    2350:	66 1f       	adc	r22, r22
    2352:	77 1f       	adc	r23, r23
    2354:	88 1f       	adc	r24, r24
    2356:	91 50       	subi	r25, 0x01	; 1
    2358:	50 40       	sbci	r21, 0x00	; 0
    235a:	a9 f7       	brne	.-22     	; 0x2346 <__mulsf3_pse+0x64>
    235c:	9e 3f       	cpi	r25, 0xFE	; 254
    235e:	51 05       	cpc	r21, r1
    2360:	70 f0       	brcs	.+28     	; 0x237e <__mulsf3_pse+0x9c>
    2362:	f7 ce       	rjmp	.-530    	; 0x2152 <__fp_inf>
    2364:	9f cf       	rjmp	.-194    	; 0x22a4 <__fp_szero>
    2366:	5f 3f       	cpi	r21, 0xFF	; 255
    2368:	ec f3       	brlt	.-6      	; 0x2364 <__mulsf3_pse+0x82>
    236a:	98 3e       	cpi	r25, 0xE8	; 232
    236c:	dc f3       	brlt	.-10     	; 0x2364 <__mulsf3_pse+0x82>
    236e:	86 95       	lsr	r24
    2370:	77 95       	ror	r23
    2372:	67 95       	ror	r22
    2374:	b7 95       	ror	r27
    2376:	f7 95       	ror	r31
    2378:	e7 95       	ror	r30
    237a:	9f 5f       	subi	r25, 0xFF	; 255
    237c:	c1 f7       	brne	.-16     	; 0x236e <__mulsf3_pse+0x8c>
    237e:	fe 2b       	or	r31, r30
    2380:	88 0f       	add	r24, r24
    2382:	91 1d       	adc	r25, r1
    2384:	96 95       	lsr	r25
    2386:	87 95       	ror	r24
    2388:	97 f9       	bld	r25, 7
    238a:	08 95       	ret

0000238c <sin>:
    238c:	9f 93       	push	r25
    238e:	1e df       	rcall	.-452    	; 0x21cc <__fp_rempio2>
    2390:	0f 90       	pop	r0
    2392:	07 fc       	sbrc	r0, 7
    2394:	ee 5f       	subi	r30, 0xFE	; 254
    2396:	52 cf       	rjmp	.-348    	; 0x223c <__fp_sinus>
    2398:	11 f4       	brne	.+4      	; 0x239e <sin+0x12>
    239a:	0e f4       	brtc	.+2      	; 0x239e <sin+0x12>
    239c:	e0 ce       	rjmp	.-576    	; 0x215e <__fp_nan>
    239e:	65 c0       	rjmp	.+202    	; 0x246a <__fp_mpack>

000023a0 <sqrt>:
    23a0:	66 df       	rcall	.-308    	; 0x226e <__fp_splitA>
    23a2:	d0 f3       	brcs	.-12     	; 0x2398 <sin+0xc>
    23a4:	99 23       	and	r25, r25
    23a6:	d9 f3       	breq	.-10     	; 0x239e <sin+0x12>
    23a8:	ce f3       	brts	.-14     	; 0x239c <sin+0x10>
    23aa:	9f 57       	subi	r25, 0x7F	; 127
    23ac:	55 0b       	sbc	r21, r21
    23ae:	87 ff       	sbrs	r24, 7
    23b0:	6a d0       	rcall	.+212    	; 0x2486 <__fp_norm2>
    23b2:	00 24       	eor	r0, r0
    23b4:	a0 e6       	ldi	r26, 0x60	; 96
    23b6:	40 ea       	ldi	r20, 0xA0	; 160
    23b8:	90 01       	movw	r18, r0
    23ba:	80 58       	subi	r24, 0x80	; 128
    23bc:	56 95       	lsr	r21
    23be:	97 95       	ror	r25
    23c0:	28 f4       	brcc	.+10     	; 0x23cc <sqrt+0x2c>
    23c2:	80 5c       	subi	r24, 0xC0	; 192
    23c4:	66 0f       	add	r22, r22
    23c6:	77 1f       	adc	r23, r23
    23c8:	88 1f       	adc	r24, r24
    23ca:	20 f0       	brcs	.+8      	; 0x23d4 <sqrt+0x34>
    23cc:	26 17       	cp	r18, r22
    23ce:	37 07       	cpc	r19, r23
    23d0:	48 07       	cpc	r20, r24
    23d2:	30 f4       	brcc	.+12     	; 0x23e0 <sqrt+0x40>
    23d4:	62 1b       	sub	r22, r18
    23d6:	73 0b       	sbc	r23, r19
    23d8:	84 0b       	sbc	r24, r20
    23da:	20 29       	or	r18, r0
    23dc:	31 29       	or	r19, r1
    23de:	4a 2b       	or	r20, r26
    23e0:	a6 95       	lsr	r26
    23e2:	17 94       	ror	r1
    23e4:	07 94       	ror	r0
    23e6:	20 25       	eor	r18, r0
    23e8:	31 25       	eor	r19, r1
    23ea:	4a 27       	eor	r20, r26
    23ec:	58 f7       	brcc	.-42     	; 0x23c4 <sqrt+0x24>
    23ee:	66 0f       	add	r22, r22
    23f0:	77 1f       	adc	r23, r23
    23f2:	88 1f       	adc	r24, r24
    23f4:	20 f0       	brcs	.+8      	; 0x23fe <sqrt+0x5e>
    23f6:	26 17       	cp	r18, r22
    23f8:	37 07       	cpc	r19, r23
    23fa:	48 07       	cpc	r20, r24
    23fc:	30 f4       	brcc	.+12     	; 0x240a <sqrt+0x6a>
    23fe:	62 0b       	sbc	r22, r18
    2400:	73 0b       	sbc	r23, r19
    2402:	84 0b       	sbc	r24, r20
    2404:	20 0d       	add	r18, r0
    2406:	31 1d       	adc	r19, r1
    2408:	41 1d       	adc	r20, r1
    240a:	a0 95       	com	r26
    240c:	81 f7       	brne	.-32     	; 0x23ee <sqrt+0x4e>
    240e:	b9 01       	movw	r22, r18
    2410:	84 2f       	mov	r24, r20
    2412:	91 58       	subi	r25, 0x81	; 129
    2414:	88 0f       	add	r24, r24
    2416:	96 95       	lsr	r25
    2418:	87 95       	ror	r24
    241a:	08 95       	ret

0000241c <square>:
    241c:	9b 01       	movw	r18, r22
    241e:	ac 01       	movw	r20, r24
    2420:	52 cf       	rjmp	.-348    	; 0x22c6 <__mulsf3>

00002422 <__fp_cmp>:
    2422:	99 0f       	add	r25, r25
    2424:	00 08       	sbc	r0, r0
    2426:	55 0f       	add	r21, r21
    2428:	aa 0b       	sbc	r26, r26
    242a:	e0 e8       	ldi	r30, 0x80	; 128
    242c:	fe ef       	ldi	r31, 0xFE	; 254
    242e:	16 16       	cp	r1, r22
    2430:	17 06       	cpc	r1, r23
    2432:	e8 07       	cpc	r30, r24
    2434:	f9 07       	cpc	r31, r25
    2436:	c0 f0       	brcs	.+48     	; 0x2468 <__fp_cmp+0x46>
    2438:	12 16       	cp	r1, r18
    243a:	13 06       	cpc	r1, r19
    243c:	e4 07       	cpc	r30, r20
    243e:	f5 07       	cpc	r31, r21
    2440:	98 f0       	brcs	.+38     	; 0x2468 <__fp_cmp+0x46>
    2442:	62 1b       	sub	r22, r18
    2444:	73 0b       	sbc	r23, r19
    2446:	84 0b       	sbc	r24, r20
    2448:	95 0b       	sbc	r25, r21
    244a:	39 f4       	brne	.+14     	; 0x245a <__fp_cmp+0x38>
    244c:	0a 26       	eor	r0, r26
    244e:	61 f0       	breq	.+24     	; 0x2468 <__fp_cmp+0x46>
    2450:	23 2b       	or	r18, r19
    2452:	24 2b       	or	r18, r20
    2454:	25 2b       	or	r18, r21
    2456:	21 f4       	brne	.+8      	; 0x2460 <__fp_cmp+0x3e>
    2458:	08 95       	ret
    245a:	0a 26       	eor	r0, r26
    245c:	09 f4       	brne	.+2      	; 0x2460 <__fp_cmp+0x3e>
    245e:	a1 40       	sbci	r26, 0x01	; 1
    2460:	a6 95       	lsr	r26
    2462:	8f ef       	ldi	r24, 0xFF	; 255
    2464:	81 1d       	adc	r24, r1
    2466:	81 1d       	adc	r24, r1
    2468:	08 95       	ret

0000246a <__fp_mpack>:
    246a:	9f 3f       	cpi	r25, 0xFF	; 255
    246c:	31 f0       	breq	.+12     	; 0x247a <__fp_mpack_finite+0xc>

0000246e <__fp_mpack_finite>:
    246e:	91 50       	subi	r25, 0x01	; 1
    2470:	20 f4       	brcc	.+8      	; 0x247a <__fp_mpack_finite+0xc>
    2472:	87 95       	ror	r24
    2474:	77 95       	ror	r23
    2476:	67 95       	ror	r22
    2478:	b7 95       	ror	r27
    247a:	88 0f       	add	r24, r24
    247c:	91 1d       	adc	r25, r1
    247e:	96 95       	lsr	r25
    2480:	87 95       	ror	r24
    2482:	97 f9       	bld	r25, 7
    2484:	08 95       	ret

00002486 <__fp_norm2>:
    2486:	91 50       	subi	r25, 0x01	; 1
    2488:	50 40       	sbci	r21, 0x00	; 0
    248a:	66 0f       	add	r22, r22
    248c:	77 1f       	adc	r23, r23
    248e:	88 1f       	adc	r24, r24
    2490:	d2 f7       	brpl	.-12     	; 0x2486 <__fp_norm2>
    2492:	08 95       	ret

00002494 <__fp_powsodd>:
    2494:	9f 93       	push	r25
    2496:	8f 93       	push	r24
    2498:	7f 93       	push	r23
    249a:	6f 93       	push	r22
    249c:	ff 93       	push	r31
    249e:	ef 93       	push	r30
    24a0:	9b 01       	movw	r18, r22
    24a2:	ac 01       	movw	r20, r24
    24a4:	10 df       	rcall	.-480    	; 0x22c6 <__mulsf3>
    24a6:	ef 91       	pop	r30
    24a8:	ff 91       	pop	r31
    24aa:	5c de       	rcall	.-840    	; 0x2164 <__fp_powser>
    24ac:	2f 91       	pop	r18
    24ae:	3f 91       	pop	r19
    24b0:	4f 91       	pop	r20
    24b2:	5f 91       	pop	r21
    24b4:	08 cf       	rjmp	.-496    	; 0x22c6 <__mulsf3>

000024b6 <__divmodhi4>:
    24b6:	97 fb       	bst	r25, 7
    24b8:	07 2e       	mov	r0, r23
    24ba:	16 f4       	brtc	.+4      	; 0x24c0 <__divmodhi4+0xa>
    24bc:	00 94       	com	r0
    24be:	07 d0       	rcall	.+14     	; 0x24ce <__divmodhi4_neg1>
    24c0:	77 fd       	sbrc	r23, 7
    24c2:	09 d0       	rcall	.+18     	; 0x24d6 <__divmodhi4_neg2>
    24c4:	0e 94 75 12 	call	0x24ea	; 0x24ea <__udivmodhi4>
    24c8:	07 fc       	sbrc	r0, 7
    24ca:	05 d0       	rcall	.+10     	; 0x24d6 <__divmodhi4_neg2>
    24cc:	3e f4       	brtc	.+14     	; 0x24dc <__divmodhi4_exit>

000024ce <__divmodhi4_neg1>:
    24ce:	90 95       	com	r25
    24d0:	81 95       	neg	r24
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	08 95       	ret

000024d6 <__divmodhi4_neg2>:
    24d6:	70 95       	com	r23
    24d8:	61 95       	neg	r22
    24da:	7f 4f       	sbci	r23, 0xFF	; 255

000024dc <__divmodhi4_exit>:
    24dc:	08 95       	ret

000024de <__tablejump2__>:
    24de:	ee 0f       	add	r30, r30
    24e0:	ff 1f       	adc	r31, r31

000024e2 <__tablejump__>:
    24e2:	05 90       	lpm	r0, Z+
    24e4:	f4 91       	lpm	r31, Z
    24e6:	e0 2d       	mov	r30, r0
    24e8:	09 94       	ijmp

000024ea <__udivmodhi4>:
    24ea:	aa 1b       	sub	r26, r26
    24ec:	bb 1b       	sub	r27, r27
    24ee:	51 e1       	ldi	r21, 0x11	; 17
    24f0:	07 c0       	rjmp	.+14     	; 0x2500 <__udivmodhi4_ep>

000024f2 <__udivmodhi4_loop>:
    24f2:	aa 1f       	adc	r26, r26
    24f4:	bb 1f       	adc	r27, r27
    24f6:	a6 17       	cp	r26, r22
    24f8:	b7 07       	cpc	r27, r23
    24fa:	10 f0       	brcs	.+4      	; 0x2500 <__udivmodhi4_ep>
    24fc:	a6 1b       	sub	r26, r22
    24fe:	b7 0b       	sbc	r27, r23

00002500 <__udivmodhi4_ep>:
    2500:	88 1f       	adc	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	5a 95       	dec	r21
    2506:	a9 f7       	brne	.-22     	; 0x24f2 <__udivmodhi4_loop>
    2508:	80 95       	com	r24
    250a:	90 95       	com	r25
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	08 95       	ret

00002512 <malloc>:
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	82 30       	cpi	r24, 0x02	; 2
    2518:	91 05       	cpc	r25, r1
    251a:	10 f4       	brcc	.+4      	; 0x2520 <malloc+0xe>
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	e0 91 d0 00 	lds	r30, 0x00D0
    2524:	f0 91 d1 00 	lds	r31, 0x00D1
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	a0 e0       	ldi	r26, 0x00	; 0
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	30 97       	sbiw	r30, 0x00	; 0
    2532:	39 f1       	breq	.+78     	; 0x2582 <malloc+0x70>
    2534:	40 81       	ld	r20, Z
    2536:	51 81       	ldd	r21, Z+1	; 0x01
    2538:	48 17       	cp	r20, r24
    253a:	59 07       	cpc	r21, r25
    253c:	b8 f0       	brcs	.+46     	; 0x256c <malloc+0x5a>
    253e:	48 17       	cp	r20, r24
    2540:	59 07       	cpc	r21, r25
    2542:	71 f4       	brne	.+28     	; 0x2560 <malloc+0x4e>
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	10 97       	sbiw	r26, 0x00	; 0
    254a:	29 f0       	breq	.+10     	; 0x2556 <malloc+0x44>
    254c:	13 96       	adiw	r26, 0x03	; 3
    254e:	9c 93       	st	X, r25
    2550:	8e 93       	st	-X, r24
    2552:	12 97       	sbiw	r26, 0x02	; 2
    2554:	2c c0       	rjmp	.+88     	; 0x25ae <malloc+0x9c>
    2556:	90 93 d1 00 	sts	0x00D1, r25
    255a:	80 93 d0 00 	sts	0x00D0, r24
    255e:	27 c0       	rjmp	.+78     	; 0x25ae <malloc+0x9c>
    2560:	21 15       	cp	r18, r1
    2562:	31 05       	cpc	r19, r1
    2564:	31 f0       	breq	.+12     	; 0x2572 <malloc+0x60>
    2566:	42 17       	cp	r20, r18
    2568:	53 07       	cpc	r21, r19
    256a:	18 f0       	brcs	.+6      	; 0x2572 <malloc+0x60>
    256c:	a9 01       	movw	r20, r18
    256e:	db 01       	movw	r26, r22
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <malloc+0x62>
    2572:	ef 01       	movw	r28, r30
    2574:	9a 01       	movw	r18, r20
    2576:	bd 01       	movw	r22, r26
    2578:	df 01       	movw	r26, r30
    257a:	02 80       	ldd	r0, Z+2	; 0x02
    257c:	f3 81       	ldd	r31, Z+3	; 0x03
    257e:	e0 2d       	mov	r30, r0
    2580:	d7 cf       	rjmp	.-82     	; 0x2530 <malloc+0x1e>
    2582:	21 15       	cp	r18, r1
    2584:	31 05       	cpc	r19, r1
    2586:	f9 f0       	breq	.+62     	; 0x25c6 <malloc+0xb4>
    2588:	28 1b       	sub	r18, r24
    258a:	39 0b       	sbc	r19, r25
    258c:	24 30       	cpi	r18, 0x04	; 4
    258e:	31 05       	cpc	r19, r1
    2590:	80 f4       	brcc	.+32     	; 0x25b2 <malloc+0xa0>
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	9b 81       	ldd	r25, Y+3	; 0x03
    2596:	61 15       	cp	r22, r1
    2598:	71 05       	cpc	r23, r1
    259a:	21 f0       	breq	.+8      	; 0x25a4 <malloc+0x92>
    259c:	fb 01       	movw	r30, r22
    259e:	93 83       	std	Z+3, r25	; 0x03
    25a0:	82 83       	std	Z+2, r24	; 0x02
    25a2:	04 c0       	rjmp	.+8      	; 0x25ac <malloc+0x9a>
    25a4:	90 93 d1 00 	sts	0x00D1, r25
    25a8:	80 93 d0 00 	sts	0x00D0, r24
    25ac:	fe 01       	movw	r30, r28
    25ae:	32 96       	adiw	r30, 0x02	; 2
    25b0:	44 c0       	rjmp	.+136    	; 0x263a <malloc+0x128>
    25b2:	fe 01       	movw	r30, r28
    25b4:	e2 0f       	add	r30, r18
    25b6:	f3 1f       	adc	r31, r19
    25b8:	81 93       	st	Z+, r24
    25ba:	91 93       	st	Z+, r25
    25bc:	22 50       	subi	r18, 0x02	; 2
    25be:	31 09       	sbc	r19, r1
    25c0:	39 83       	std	Y+1, r19	; 0x01
    25c2:	28 83       	st	Y, r18
    25c4:	3a c0       	rjmp	.+116    	; 0x263a <malloc+0x128>
    25c6:	20 91 ce 00 	lds	r18, 0x00CE
    25ca:	30 91 cf 00 	lds	r19, 0x00CF
    25ce:	23 2b       	or	r18, r19
    25d0:	41 f4       	brne	.+16     	; 0x25e2 <malloc+0xd0>
    25d2:	20 91 62 00 	lds	r18, 0x0062
    25d6:	30 91 63 00 	lds	r19, 0x0063
    25da:	30 93 cf 00 	sts	0x00CF, r19
    25de:	20 93 ce 00 	sts	0x00CE, r18
    25e2:	20 91 60 00 	lds	r18, 0x0060
    25e6:	30 91 61 00 	lds	r19, 0x0061
    25ea:	21 15       	cp	r18, r1
    25ec:	31 05       	cpc	r19, r1
    25ee:	41 f4       	brne	.+16     	; 0x2600 <malloc+0xee>
    25f0:	2d b7       	in	r18, 0x3d	; 61
    25f2:	3e b7       	in	r19, 0x3e	; 62
    25f4:	40 91 64 00 	lds	r20, 0x0064
    25f8:	50 91 65 00 	lds	r21, 0x0065
    25fc:	24 1b       	sub	r18, r20
    25fe:	35 0b       	sbc	r19, r21
    2600:	e0 91 ce 00 	lds	r30, 0x00CE
    2604:	f0 91 cf 00 	lds	r31, 0x00CF
    2608:	e2 17       	cp	r30, r18
    260a:	f3 07       	cpc	r31, r19
    260c:	a0 f4       	brcc	.+40     	; 0x2636 <malloc+0x124>
    260e:	2e 1b       	sub	r18, r30
    2610:	3f 0b       	sbc	r19, r31
    2612:	28 17       	cp	r18, r24
    2614:	39 07       	cpc	r19, r25
    2616:	78 f0       	brcs	.+30     	; 0x2636 <malloc+0x124>
    2618:	ac 01       	movw	r20, r24
    261a:	4e 5f       	subi	r20, 0xFE	; 254
    261c:	5f 4f       	sbci	r21, 0xFF	; 255
    261e:	24 17       	cp	r18, r20
    2620:	35 07       	cpc	r19, r21
    2622:	48 f0       	brcs	.+18     	; 0x2636 <malloc+0x124>
    2624:	4e 0f       	add	r20, r30
    2626:	5f 1f       	adc	r21, r31
    2628:	50 93 cf 00 	sts	0x00CF, r21
    262c:	40 93 ce 00 	sts	0x00CE, r20
    2630:	81 93       	st	Z+, r24
    2632:	91 93       	st	Z+, r25
    2634:	02 c0       	rjmp	.+4      	; 0x263a <malloc+0x128>
    2636:	e0 e0       	ldi	r30, 0x00	; 0
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	cf 01       	movw	r24, r30
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	08 95       	ret

00002642 <free>:
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	09 f4       	brne	.+2      	; 0x264c <free+0xa>
    264a:	87 c0       	rjmp	.+270    	; 0x275a <free+0x118>
    264c:	fc 01       	movw	r30, r24
    264e:	32 97       	sbiw	r30, 0x02	; 2
    2650:	13 82       	std	Z+3, r1	; 0x03
    2652:	12 82       	std	Z+2, r1	; 0x02
    2654:	c0 91 d0 00 	lds	r28, 0x00D0
    2658:	d0 91 d1 00 	lds	r29, 0x00D1
    265c:	20 97       	sbiw	r28, 0x00	; 0
    265e:	81 f4       	brne	.+32     	; 0x2680 <free+0x3e>
    2660:	20 81       	ld	r18, Z
    2662:	31 81       	ldd	r19, Z+1	; 0x01
    2664:	28 0f       	add	r18, r24
    2666:	39 1f       	adc	r19, r25
    2668:	80 91 ce 00 	lds	r24, 0x00CE
    266c:	90 91 cf 00 	lds	r25, 0x00CF
    2670:	82 17       	cp	r24, r18
    2672:	93 07       	cpc	r25, r19
    2674:	79 f5       	brne	.+94     	; 0x26d4 <free+0x92>
    2676:	f0 93 cf 00 	sts	0x00CF, r31
    267a:	e0 93 ce 00 	sts	0x00CE, r30
    267e:	6d c0       	rjmp	.+218    	; 0x275a <free+0x118>
    2680:	de 01       	movw	r26, r28
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	ae 17       	cp	r26, r30
    2688:	bf 07       	cpc	r27, r31
    268a:	50 f4       	brcc	.+20     	; 0x26a0 <free+0x5e>
    268c:	12 96       	adiw	r26, 0x02	; 2
    268e:	4d 91       	ld	r20, X+
    2690:	5c 91       	ld	r21, X
    2692:	13 97       	sbiw	r26, 0x03	; 3
    2694:	9d 01       	movw	r18, r26
    2696:	41 15       	cp	r20, r1
    2698:	51 05       	cpc	r21, r1
    269a:	09 f1       	breq	.+66     	; 0x26de <free+0x9c>
    269c:	da 01       	movw	r26, r20
    269e:	f3 cf       	rjmp	.-26     	; 0x2686 <free+0x44>
    26a0:	b3 83       	std	Z+3, r27	; 0x03
    26a2:	a2 83       	std	Z+2, r26	; 0x02
    26a4:	40 81       	ld	r20, Z
    26a6:	51 81       	ldd	r21, Z+1	; 0x01
    26a8:	84 0f       	add	r24, r20
    26aa:	95 1f       	adc	r25, r21
    26ac:	8a 17       	cp	r24, r26
    26ae:	9b 07       	cpc	r25, r27
    26b0:	71 f4       	brne	.+28     	; 0x26ce <free+0x8c>
    26b2:	8d 91       	ld	r24, X+
    26b4:	9c 91       	ld	r25, X
    26b6:	11 97       	sbiw	r26, 0x01	; 1
    26b8:	84 0f       	add	r24, r20
    26ba:	95 1f       	adc	r25, r21
    26bc:	02 96       	adiw	r24, 0x02	; 2
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    26c2:	12 96       	adiw	r26, 0x02	; 2
    26c4:	8d 91       	ld	r24, X+
    26c6:	9c 91       	ld	r25, X
    26c8:	13 97       	sbiw	r26, 0x03	; 3
    26ca:	93 83       	std	Z+3, r25	; 0x03
    26cc:	82 83       	std	Z+2, r24	; 0x02
    26ce:	21 15       	cp	r18, r1
    26d0:	31 05       	cpc	r19, r1
    26d2:	29 f4       	brne	.+10     	; 0x26de <free+0x9c>
    26d4:	f0 93 d1 00 	sts	0x00D1, r31
    26d8:	e0 93 d0 00 	sts	0x00D0, r30
    26dc:	3e c0       	rjmp	.+124    	; 0x275a <free+0x118>
    26de:	d9 01       	movw	r26, r18
    26e0:	13 96       	adiw	r26, 0x03	; 3
    26e2:	fc 93       	st	X, r31
    26e4:	ee 93       	st	-X, r30
    26e6:	12 97       	sbiw	r26, 0x02	; 2
    26e8:	4d 91       	ld	r20, X+
    26ea:	5d 91       	ld	r21, X+
    26ec:	a4 0f       	add	r26, r20
    26ee:	b5 1f       	adc	r27, r21
    26f0:	ea 17       	cp	r30, r26
    26f2:	fb 07       	cpc	r31, r27
    26f4:	79 f4       	brne	.+30     	; 0x2714 <free+0xd2>
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	84 0f       	add	r24, r20
    26fc:	95 1f       	adc	r25, r21
    26fe:	02 96       	adiw	r24, 0x02	; 2
    2700:	d9 01       	movw	r26, r18
    2702:	11 96       	adiw	r26, 0x01	; 1
    2704:	9c 93       	st	X, r25
    2706:	8e 93       	st	-X, r24
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	93 81       	ldd	r25, Z+3	; 0x03
    270c:	13 96       	adiw	r26, 0x03	; 3
    270e:	9c 93       	st	X, r25
    2710:	8e 93       	st	-X, r24
    2712:	12 97       	sbiw	r26, 0x02	; 2
    2714:	e0 e0       	ldi	r30, 0x00	; 0
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	9b 81       	ldd	r25, Y+3	; 0x03
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	19 f0       	breq	.+6      	; 0x2726 <free+0xe4>
    2720:	fe 01       	movw	r30, r28
    2722:	ec 01       	movw	r28, r24
    2724:	f9 cf       	rjmp	.-14     	; 0x2718 <free+0xd6>
    2726:	ce 01       	movw	r24, r28
    2728:	02 96       	adiw	r24, 0x02	; 2
    272a:	28 81       	ld	r18, Y
    272c:	39 81       	ldd	r19, Y+1	; 0x01
    272e:	82 0f       	add	r24, r18
    2730:	93 1f       	adc	r25, r19
    2732:	20 91 ce 00 	lds	r18, 0x00CE
    2736:	30 91 cf 00 	lds	r19, 0x00CF
    273a:	28 17       	cp	r18, r24
    273c:	39 07       	cpc	r19, r25
    273e:	69 f4       	brne	.+26     	; 0x275a <free+0x118>
    2740:	30 97       	sbiw	r30, 0x00	; 0
    2742:	29 f4       	brne	.+10     	; 0x274e <free+0x10c>
    2744:	10 92 d1 00 	sts	0x00D1, r1
    2748:	10 92 d0 00 	sts	0x00D0, r1
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <free+0x110>
    274e:	13 82       	std	Z+3, r1	; 0x03
    2750:	12 82       	std	Z+2, r1	; 0x02
    2752:	d0 93 cf 00 	sts	0x00CF, r29
    2756:	c0 93 ce 00 	sts	0x00CE, r28
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret

00002760 <do_rand>:
    2760:	8f 92       	push	r8
    2762:	9f 92       	push	r9
    2764:	af 92       	push	r10
    2766:	bf 92       	push	r11
    2768:	cf 92       	push	r12
    276a:	df 92       	push	r13
    276c:	ef 92       	push	r14
    276e:	ff 92       	push	r15
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	ec 01       	movw	r28, r24
    2776:	68 81       	ld	r22, Y
    2778:	79 81       	ldd	r23, Y+1	; 0x01
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	61 15       	cp	r22, r1
    2780:	71 05       	cpc	r23, r1
    2782:	81 05       	cpc	r24, r1
    2784:	91 05       	cpc	r25, r1
    2786:	21 f4       	brne	.+8      	; 0x2790 <do_rand+0x30>
    2788:	64 e2       	ldi	r22, 0x24	; 36
    278a:	79 ed       	ldi	r23, 0xD9	; 217
    278c:	8b e5       	ldi	r24, 0x5B	; 91
    278e:	97 e0       	ldi	r25, 0x07	; 7
    2790:	2d e1       	ldi	r18, 0x1D	; 29
    2792:	33 ef       	ldi	r19, 0xF3	; 243
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	0e 94 41 18 	call	0x3082	; 0x3082 <__divmodsi4>
    279c:	49 01       	movw	r8, r18
    279e:	5a 01       	movw	r10, r20
    27a0:	9b 01       	movw	r18, r22
    27a2:	ac 01       	movw	r20, r24
    27a4:	a7 ea       	ldi	r26, 0xA7	; 167
    27a6:	b1 e4       	ldi	r27, 0x41	; 65
    27a8:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__muluhisi3>
    27ac:	6b 01       	movw	r12, r22
    27ae:	7c 01       	movw	r14, r24
    27b0:	ac ee       	ldi	r26, 0xEC	; 236
    27b2:	b4 ef       	ldi	r27, 0xF4	; 244
    27b4:	a5 01       	movw	r20, r10
    27b6:	94 01       	movw	r18, r8
    27b8:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulohisi3>
    27bc:	c6 0e       	add	r12, r22
    27be:	d7 1e       	adc	r13, r23
    27c0:	e8 1e       	adc	r14, r24
    27c2:	f9 1e       	adc	r15, r25
    27c4:	f7 fe       	sbrs	r15, 7
    27c6:	06 c0       	rjmp	.+12     	; 0x27d4 <do_rand+0x74>
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	c8 1a       	sub	r12, r24
    27cc:	d1 08       	sbc	r13, r1
    27ce:	e1 08       	sbc	r14, r1
    27d0:	80 e8       	ldi	r24, 0x80	; 128
    27d2:	f8 0a       	sbc	r15, r24
    27d4:	c8 82       	st	Y, r12
    27d6:	d9 82       	std	Y+1, r13	; 0x01
    27d8:	ea 82       	std	Y+2, r14	; 0x02
    27da:	fb 82       	std	Y+3, r15	; 0x03
    27dc:	c6 01       	movw	r24, r12
    27de:	9f 77       	andi	r25, 0x7F	; 127
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	ff 90       	pop	r15
    27e6:	ef 90       	pop	r14
    27e8:	df 90       	pop	r13
    27ea:	cf 90       	pop	r12
    27ec:	bf 90       	pop	r11
    27ee:	af 90       	pop	r10
    27f0:	9f 90       	pop	r9
    27f2:	8f 90       	pop	r8
    27f4:	08 95       	ret

000027f6 <rand_r>:
    27f6:	0e 94 b0 13 	call	0x2760	; 0x2760 <do_rand>
    27fa:	08 95       	ret

000027fc <rand>:
    27fc:	86 e6       	ldi	r24, 0x66	; 102
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 b0 13 	call	0x2760	; 0x2760 <do_rand>
    2804:	08 95       	ret

00002806 <srand>:
    2806:	a0 e0       	ldi	r26, 0x00	; 0
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	80 93 66 00 	sts	0x0066, r24
    280e:	90 93 67 00 	sts	0x0067, r25
    2812:	a0 93 68 00 	sts	0x0068, r26
    2816:	b0 93 69 00 	sts	0x0069, r27
    281a:	08 95       	ret

0000281c <strtol>:
    281c:	2f 92       	push	r2
    281e:	3f 92       	push	r3
    2820:	5f 92       	push	r5
    2822:	6f 92       	push	r6
    2824:	7f 92       	push	r7
    2826:	8f 92       	push	r8
    2828:	9f 92       	push	r9
    282a:	af 92       	push	r10
    282c:	bf 92       	push	r11
    282e:	cf 92       	push	r12
    2830:	df 92       	push	r13
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	8b 01       	movw	r16, r22
    2840:	ea 01       	movw	r28, r20
    2842:	61 15       	cp	r22, r1
    2844:	71 05       	cpc	r23, r1
    2846:	21 f0       	breq	.+8      	; 0x2850 <strtol+0x34>
    2848:	db 01       	movw	r26, r22
    284a:	8c 93       	st	X, r24
    284c:	11 96       	adiw	r26, 0x01	; 1
    284e:	9c 93       	st	X, r25
    2850:	20 97       	sbiw	r28, 0x00	; 0
    2852:	39 f0       	breq	.+14     	; 0x2862 <strtol+0x46>
    2854:	9e 01       	movw	r18, r28
    2856:	22 50       	subi	r18, 0x02	; 2
    2858:	31 09       	sbc	r19, r1
    285a:	23 32       	cpi	r18, 0x23	; 35
    285c:	31 05       	cpc	r19, r1
    285e:	08 f0       	brcs	.+2      	; 0x2862 <strtol+0x46>
    2860:	fb c0       	rjmp	.+502    	; 0x2a58 <strtol+0x23c>
    2862:	7c 01       	movw	r14, r24
    2864:	67 01       	movw	r12, r14
    2866:	bf ef       	ldi	r27, 0xFF	; 255
    2868:	cb 1a       	sub	r12, r27
    286a:	db 0a       	sbc	r13, r27
    286c:	56 01       	movw	r10, r12
    286e:	f7 01       	movw	r30, r14
    2870:	60 80       	ld	r6, Z
    2872:	86 2d       	mov	r24, r6
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	0e 94 42 15 	call	0x2a84	; 0x2a84 <isspace>
    287a:	89 2b       	or	r24, r25
    287c:	11 f0       	breq	.+4      	; 0x2882 <strtol+0x66>
    287e:	76 01       	movw	r14, r12
    2880:	f1 cf       	rjmp	.-30     	; 0x2864 <strtol+0x48>
    2882:	fd e2       	ldi	r31, 0x2D	; 45
    2884:	6f 12       	cpse	r6, r31
    2886:	0a c0       	rjmp	.+20     	; 0x289c <strtol+0x80>
    2888:	57 01       	movw	r10, r14
    288a:	82 e0       	ldi	r24, 0x02	; 2
    288c:	a8 0e       	add	r10, r24
    288e:	b1 1c       	adc	r11, r1
    2890:	d7 01       	movw	r26, r14
    2892:	11 96       	adiw	r26, 0x01	; 1
    2894:	6c 90       	ld	r6, X
    2896:	77 24       	eor	r7, r7
    2898:	73 94       	inc	r7
    289a:	0b c0       	rjmp	.+22     	; 0x28b2 <strtol+0x96>
    289c:	bb e2       	ldi	r27, 0x2B	; 43
    289e:	6b 12       	cpse	r6, r27
    28a0:	07 c0       	rjmp	.+14     	; 0x28b0 <strtol+0x94>
    28a2:	57 01       	movw	r10, r14
    28a4:	e2 e0       	ldi	r30, 0x02	; 2
    28a6:	ae 0e       	add	r10, r30
    28a8:	b1 1c       	adc	r11, r1
    28aa:	d7 01       	movw	r26, r14
    28ac:	11 96       	adiw	r26, 0x01	; 1
    28ae:	6c 90       	ld	r6, X
    28b0:	71 2c       	mov	r7, r1
    28b2:	ce 01       	movw	r24, r28
    28b4:	8f 7e       	andi	r24, 0xEF	; 239
    28b6:	89 2b       	or	r24, r25
    28b8:	89 f4       	brne	.+34     	; 0x28dc <strtol+0xc0>
    28ba:	b0 e3       	ldi	r27, 0x30	; 48
    28bc:	6b 12       	cpse	r6, r27
    28be:	22 c0       	rjmp	.+68     	; 0x2904 <strtol+0xe8>
    28c0:	f5 01       	movw	r30, r10
    28c2:	80 81       	ld	r24, Z
    28c4:	8f 7d       	andi	r24, 0xDF	; 223
    28c6:	88 35       	cpi	r24, 0x58	; 88
    28c8:	41 f5       	brne	.+80     	; 0x291a <strtol+0xfe>
    28ca:	61 80       	ldd	r6, Z+1	; 0x01
    28cc:	f2 e0       	ldi	r31, 0x02	; 2
    28ce:	af 0e       	add	r10, r31
    28d0:	b1 1c       	adc	r11, r1
    28d2:	87 2d       	mov	r24, r7
    28d4:	82 60       	ori	r24, 0x02	; 2
    28d6:	78 2e       	mov	r7, r24
    28d8:	c0 e1       	ldi	r28, 0x10	; 16
    28da:	d0 e0       	ldi	r29, 0x00	; 0
    28dc:	c8 30       	cpi	r28, 0x08	; 8
    28de:	d1 05       	cpc	r29, r1
    28e0:	f1 f0       	breq	.+60     	; 0x291e <strtol+0x102>
    28e2:	4c f4       	brge	.+18     	; 0x28f6 <strtol+0xda>
    28e4:	c2 30       	cpi	r28, 0x02	; 2
    28e6:	d1 05       	cpc	r29, r1
    28e8:	11 f5       	brne	.+68     	; 0x292e <strtol+0x112>
    28ea:	c1 2c       	mov	r12, r1
    28ec:	d1 2c       	mov	r13, r1
    28ee:	e1 2c       	mov	r14, r1
    28f0:	b0 e4       	ldi	r27, 0x40	; 64
    28f2:	fb 2e       	mov	r15, r27
    28f4:	2f c0       	rjmp	.+94     	; 0x2954 <strtol+0x138>
    28f6:	ca 30       	cpi	r28, 0x0A	; 10
    28f8:	d1 05       	cpc	r29, r1
    28fa:	31 f0       	breq	.+12     	; 0x2908 <strtol+0xec>
    28fc:	c0 31       	cpi	r28, 0x10	; 16
    28fe:	d1 05       	cpc	r29, r1
    2900:	21 f1       	breq	.+72     	; 0x294a <strtol+0x12e>
    2902:	15 c0       	rjmp	.+42     	; 0x292e <strtol+0x112>
    2904:	20 97       	sbiw	r28, 0x00	; 0
    2906:	51 f7       	brne	.-44     	; 0x28dc <strtol+0xc0>
    2908:	ca e0       	ldi	r28, 0x0A	; 10
    290a:	d0 e0       	ldi	r29, 0x00	; 0
    290c:	ac ec       	ldi	r26, 0xCC	; 204
    290e:	ca 2e       	mov	r12, r26
    2910:	dc 2c       	mov	r13, r12
    2912:	ec 2c       	mov	r14, r12
    2914:	ac e0       	ldi	r26, 0x0C	; 12
    2916:	fa 2e       	mov	r15, r26
    2918:	1d c0       	rjmp	.+58     	; 0x2954 <strtol+0x138>
    291a:	20 97       	sbiw	r28, 0x00	; 0
    291c:	f9 f6       	brne	.-66     	; 0x28dc <strtol+0xc0>
    291e:	c8 e0       	ldi	r28, 0x08	; 8
    2920:	d0 e0       	ldi	r29, 0x00	; 0
    2922:	c1 2c       	mov	r12, r1
    2924:	d1 2c       	mov	r13, r1
    2926:	e1 2c       	mov	r14, r1
    2928:	f0 e1       	ldi	r31, 0x10	; 16
    292a:	ff 2e       	mov	r15, r31
    292c:	13 c0       	rjmp	.+38     	; 0x2954 <strtol+0x138>
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e8       	ldi	r25, 0x80	; 128
    2936:	9e 01       	movw	r18, r28
    2938:	44 27       	eor	r20, r20
    293a:	37 fd       	sbrc	r19, 7
    293c:	40 95       	com	r20
    293e:	54 2f       	mov	r21, r20
    2940:	0e 94 1f 18 	call	0x303e	; 0x303e <__udivmodsi4>
    2944:	69 01       	movw	r12, r18
    2946:	7a 01       	movw	r14, r20
    2948:	05 c0       	rjmp	.+10     	; 0x2954 <strtol+0x138>
    294a:	c1 2c       	mov	r12, r1
    294c:	d1 2c       	mov	r13, r1
    294e:	e1 2c       	mov	r14, r1
    2950:	e8 e0       	ldi	r30, 0x08	; 8
    2952:	fe 2e       	mov	r15, r30
    2954:	f5 01       	movw	r30, r10
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	a9 01       	movw	r20, r18
    295e:	4e 01       	movw	r8, r28
    2960:	aa 24       	eor	r10, r10
    2962:	97 fc       	sbrc	r9, 7
    2964:	a0 94       	com	r10
    2966:	ba 2c       	mov	r11, r10
    2968:	1f 01       	movw	r2, r30
    296a:	70 ed       	ldi	r23, 0xD0	; 208
    296c:	57 2e       	mov	r5, r23
    296e:	56 0c       	add	r5, r6
    2970:	a9 e0       	ldi	r26, 0x09	; 9
    2972:	a5 15       	cp	r26, r5
    2974:	70 f4       	brcc	.+28     	; 0x2992 <strtol+0x176>
    2976:	8f eb       	ldi	r24, 0xBF	; 191
    2978:	86 0d       	add	r24, r6
    297a:	8a 31       	cpi	r24, 0x1A	; 26
    297c:	18 f4       	brcc	.+6      	; 0x2984 <strtol+0x168>
    297e:	99 ec       	ldi	r25, 0xC9	; 201
    2980:	59 2e       	mov	r5, r25
    2982:	06 c0       	rjmp	.+12     	; 0x2990 <strtol+0x174>
    2984:	8f e9       	ldi	r24, 0x9F	; 159
    2986:	86 0d       	add	r24, r6
    2988:	8a 31       	cpi	r24, 0x1A	; 26
    298a:	30 f5       	brcc	.+76     	; 0x29d8 <strtol+0x1bc>
    298c:	89 ea       	ldi	r24, 0xA9	; 169
    298e:	58 2e       	mov	r5, r24
    2990:	56 0c       	add	r5, r6
    2992:	85 2d       	mov	r24, r5
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	8c 17       	cp	r24, r28
    2998:	9d 07       	cpc	r25, r29
    299a:	f4 f4       	brge	.+60     	; 0x29d8 <strtol+0x1bc>
    299c:	67 fd       	sbrc	r22, 7
    299e:	18 c0       	rjmp	.+48     	; 0x29d0 <strtol+0x1b4>
    29a0:	c2 16       	cp	r12, r18
    29a2:	d3 06       	cpc	r13, r19
    29a4:	e4 06       	cpc	r14, r20
    29a6:	f5 06       	cpc	r15, r21
    29a8:	80 f0       	brcs	.+32     	; 0x29ca <strtol+0x1ae>
    29aa:	c5 01       	movw	r24, r10
    29ac:	b4 01       	movw	r22, r8
    29ae:	0e 94 0f 18 	call	0x301e	; 0x301e <__mulsi3>
    29b2:	9b 01       	movw	r18, r22
    29b4:	ac 01       	movw	r20, r24
    29b6:	25 0d       	add	r18, r5
    29b8:	31 1d       	adc	r19, r1
    29ba:	41 1d       	adc	r20, r1
    29bc:	51 1d       	adc	r21, r1
    29be:	21 30       	cpi	r18, 0x01	; 1
    29c0:	31 05       	cpc	r19, r1
    29c2:	41 05       	cpc	r20, r1
    29c4:	b0 e8       	ldi	r27, 0x80	; 128
    29c6:	5b 07       	cpc	r21, r27
    29c8:	10 f0       	brcs	.+4      	; 0x29ce <strtol+0x1b2>
    29ca:	6f ef       	ldi	r22, 0xFF	; 255
    29cc:	01 c0       	rjmp	.+2      	; 0x29d0 <strtol+0x1b4>
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	31 96       	adiw	r30, 0x01	; 1
    29d2:	d1 01       	movw	r26, r2
    29d4:	6c 90       	ld	r6, X
    29d6:	c8 cf       	rjmp	.-112    	; 0x2968 <strtol+0x14c>
    29d8:	87 2d       	mov	r24, r7
    29da:	81 70       	andi	r24, 0x01	; 1
    29dc:	01 15       	cp	r16, r1
    29de:	11 05       	cpc	r17, r1
    29e0:	71 f0       	breq	.+28     	; 0x29fe <strtol+0x1e2>
    29e2:	66 23       	and	r22, r22
    29e4:	29 f0       	breq	.+10     	; 0x29f0 <strtol+0x1d4>
    29e6:	31 97       	sbiw	r30, 0x01	; 1
    29e8:	d8 01       	movw	r26, r16
    29ea:	ed 93       	st	X+, r30
    29ec:	fc 93       	st	X, r31
    29ee:	07 c0       	rjmp	.+14     	; 0x29fe <strtol+0x1e2>
    29f0:	71 fe       	sbrs	r7, 1
    29f2:	19 c0       	rjmp	.+50     	; 0x2a26 <strtol+0x20a>
    29f4:	32 97       	sbiw	r30, 0x02	; 2
    29f6:	d8 01       	movw	r26, r16
    29f8:	ed 93       	st	X+, r30
    29fa:	fc 93       	st	X, r31
    29fc:	14 c0       	rjmp	.+40     	; 0x2a26 <strtol+0x20a>
    29fe:	67 ff       	sbrs	r22, 7
    2a00:	12 c0       	rjmp	.+36     	; 0x2a26 <strtol+0x20a>
    2a02:	88 23       	and	r24, r24
    2a04:	29 f0       	breq	.+10     	; 0x2a10 <strtol+0x1f4>
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e0       	ldi	r20, 0x00	; 0
    2a0c:	50 e8       	ldi	r21, 0x80	; 128
    2a0e:	04 c0       	rjmp	.+8      	; 0x2a18 <strtol+0x1fc>
    2a10:	2f ef       	ldi	r18, 0xFF	; 255
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	4f ef       	ldi	r20, 0xFF	; 255
    2a16:	5f e7       	ldi	r21, 0x7F	; 127
    2a18:	82 e2       	ldi	r24, 0x22	; 34
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	90 93 d3 00 	sts	0x00D3, r25
    2a20:	80 93 d2 00 	sts	0x00D2, r24
    2a24:	16 c0       	rjmp	.+44     	; 0x2a52 <strtol+0x236>
    2a26:	88 23       	and	r24, r24
    2a28:	41 f0       	breq	.+16     	; 0x2a3a <strtol+0x21e>
    2a2a:	50 95       	com	r21
    2a2c:	40 95       	com	r20
    2a2e:	30 95       	com	r19
    2a30:	21 95       	neg	r18
    2a32:	3f 4f       	sbci	r19, 0xFF	; 255
    2a34:	4f 4f       	sbci	r20, 0xFF	; 255
    2a36:	5f 4f       	sbci	r21, 0xFF	; 255
    2a38:	0c c0       	rjmp	.+24     	; 0x2a52 <strtol+0x236>
    2a3a:	57 ff       	sbrs	r21, 7
    2a3c:	0a c0       	rjmp	.+20     	; 0x2a52 <strtol+0x236>
    2a3e:	82 e2       	ldi	r24, 0x22	; 34
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	90 93 d3 00 	sts	0x00D3, r25
    2a46:	80 93 d2 00 	sts	0x00D2, r24
    2a4a:	2f ef       	ldi	r18, 0xFF	; 255
    2a4c:	3f ef       	ldi	r19, 0xFF	; 255
    2a4e:	4f ef       	ldi	r20, 0xFF	; 255
    2a50:	5f e7       	ldi	r21, 0x7F	; 127
    2a52:	b9 01       	movw	r22, r18
    2a54:	ca 01       	movw	r24, r20
    2a56:	04 c0       	rjmp	.+8      	; 0x2a60 <strtol+0x244>
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	70 e0       	ldi	r23, 0x00	; 0
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	df 91       	pop	r29
    2a62:	cf 91       	pop	r28
    2a64:	1f 91       	pop	r17
    2a66:	0f 91       	pop	r16
    2a68:	ff 90       	pop	r15
    2a6a:	ef 90       	pop	r14
    2a6c:	df 90       	pop	r13
    2a6e:	cf 90       	pop	r12
    2a70:	bf 90       	pop	r11
    2a72:	af 90       	pop	r10
    2a74:	9f 90       	pop	r9
    2a76:	8f 90       	pop	r8
    2a78:	7f 90       	pop	r7
    2a7a:	6f 90       	pop	r6
    2a7c:	5f 90       	pop	r5
    2a7e:	3f 90       	pop	r3
    2a80:	2f 90       	pop	r2
    2a82:	08 95       	ret

00002a84 <isspace>:
    2a84:	91 11       	cpse	r25, r1
    2a86:	05 c2       	rjmp	.+1034   	; 0x2e92 <__ctype_isfalse>
    2a88:	80 32       	cpi	r24, 0x20	; 32
    2a8a:	19 f0       	breq	.+6      	; 0x2a92 <isspace+0xe>
    2a8c:	89 50       	subi	r24, 0x09	; 9
    2a8e:	85 50       	subi	r24, 0x05	; 5
    2a90:	d0 f7       	brcc	.-12     	; 0x2a86 <isspace+0x2>
    2a92:	08 95       	ret

00002a94 <sprintf>:
    2a94:	ae e0       	ldi	r26, 0x0E	; 14
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e0 e5       	ldi	r30, 0x50	; 80
    2a9a:	f5 e1       	ldi	r31, 0x15	; 21
    2a9c:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__prologue_saves__+0x1c>
    2aa0:	0d 89       	ldd	r16, Y+21	; 0x15
    2aa2:	1e 89       	ldd	r17, Y+22	; 0x16
    2aa4:	86 e0       	ldi	r24, 0x06	; 6
    2aa6:	8c 83       	std	Y+4, r24	; 0x04
    2aa8:	1a 83       	std	Y+2, r17	; 0x02
    2aaa:	09 83       	std	Y+1, r16	; 0x01
    2aac:	8f ef       	ldi	r24, 0xFF	; 255
    2aae:	9f e7       	ldi	r25, 0x7F	; 127
    2ab0:	9e 83       	std	Y+6, r25	; 0x06
    2ab2:	8d 83       	std	Y+5, r24	; 0x05
    2ab4:	ae 01       	movw	r20, r28
    2ab6:	47 5e       	subi	r20, 0xE7	; 231
    2ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aba:	6f 89       	ldd	r22, Y+23	; 0x17
    2abc:	78 8d       	ldd	r23, Y+24	; 0x18
    2abe:	ce 01       	movw	r24, r28
    2ac0:	01 96       	adiw	r24, 0x01	; 1
    2ac2:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vfprintf>
    2ac6:	ef 81       	ldd	r30, Y+7	; 0x07
    2ac8:	f8 85       	ldd	r31, Y+8	; 0x08
    2aca:	e0 0f       	add	r30, r16
    2acc:	f1 1f       	adc	r31, r17
    2ace:	10 82       	st	Z, r1
    2ad0:	2e 96       	adiw	r28, 0x0e	; 14
    2ad2:	e4 e0       	ldi	r30, 0x04	; 4
    2ad4:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__epilogue_restores__+0x1c>

00002ad8 <vfprintf>:
    2ad8:	ac e0       	ldi	r26, 0x0C	; 12
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e2 e7       	ldi	r30, 0x72	; 114
    2ade:	f5 e1       	ldi	r31, 0x15	; 21
    2ae0:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__>
    2ae4:	7c 01       	movw	r14, r24
    2ae6:	6b 01       	movw	r12, r22
    2ae8:	8a 01       	movw	r16, r20
    2aea:	fc 01       	movw	r30, r24
    2aec:	17 82       	std	Z+7, r1	; 0x07
    2aee:	16 82       	std	Z+6, r1	; 0x06
    2af0:	83 81       	ldd	r24, Z+3	; 0x03
    2af2:	81 ff       	sbrs	r24, 1
    2af4:	bd c1       	rjmp	.+890    	; 0x2e70 <vfprintf+0x398>
    2af6:	ce 01       	movw	r24, r28
    2af8:	01 96       	adiw	r24, 0x01	; 1
    2afa:	4c 01       	movw	r8, r24
    2afc:	f7 01       	movw	r30, r14
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	f6 01       	movw	r30, r12
    2b02:	93 fd       	sbrc	r25, 3
    2b04:	85 91       	lpm	r24, Z+
    2b06:	93 ff       	sbrs	r25, 3
    2b08:	81 91       	ld	r24, Z+
    2b0a:	6f 01       	movw	r12, r30
    2b0c:	88 23       	and	r24, r24
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <vfprintf+0x3a>
    2b10:	ab c1       	rjmp	.+854    	; 0x2e68 <vfprintf+0x390>
    2b12:	85 32       	cpi	r24, 0x25	; 37
    2b14:	39 f4       	brne	.+14     	; 0x2b24 <vfprintf+0x4c>
    2b16:	93 fd       	sbrc	r25, 3
    2b18:	85 91       	lpm	r24, Z+
    2b1a:	93 ff       	sbrs	r25, 3
    2b1c:	81 91       	ld	r24, Z+
    2b1e:	6f 01       	movw	r12, r30
    2b20:	85 32       	cpi	r24, 0x25	; 37
    2b22:	29 f4       	brne	.+10     	; 0x2b2e <vfprintf+0x56>
    2b24:	b7 01       	movw	r22, r14
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <fputc>
    2b2c:	e7 cf       	rjmp	.-50     	; 0x2afc <vfprintf+0x24>
    2b2e:	51 2c       	mov	r5, r1
    2b30:	31 2c       	mov	r3, r1
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	20 32       	cpi	r18, 0x20	; 32
    2b36:	a0 f4       	brcc	.+40     	; 0x2b60 <vfprintf+0x88>
    2b38:	8b 32       	cpi	r24, 0x2B	; 43
    2b3a:	69 f0       	breq	.+26     	; 0x2b56 <vfprintf+0x7e>
    2b3c:	30 f4       	brcc	.+12     	; 0x2b4a <vfprintf+0x72>
    2b3e:	80 32       	cpi	r24, 0x20	; 32
    2b40:	59 f0       	breq	.+22     	; 0x2b58 <vfprintf+0x80>
    2b42:	83 32       	cpi	r24, 0x23	; 35
    2b44:	69 f4       	brne	.+26     	; 0x2b60 <vfprintf+0x88>
    2b46:	20 61       	ori	r18, 0x10	; 16
    2b48:	2c c0       	rjmp	.+88     	; 0x2ba2 <vfprintf+0xca>
    2b4a:	8d 32       	cpi	r24, 0x2D	; 45
    2b4c:	39 f0       	breq	.+14     	; 0x2b5c <vfprintf+0x84>
    2b4e:	80 33       	cpi	r24, 0x30	; 48
    2b50:	39 f4       	brne	.+14     	; 0x2b60 <vfprintf+0x88>
    2b52:	21 60       	ori	r18, 0x01	; 1
    2b54:	26 c0       	rjmp	.+76     	; 0x2ba2 <vfprintf+0xca>
    2b56:	22 60       	ori	r18, 0x02	; 2
    2b58:	24 60       	ori	r18, 0x04	; 4
    2b5a:	23 c0       	rjmp	.+70     	; 0x2ba2 <vfprintf+0xca>
    2b5c:	28 60       	ori	r18, 0x08	; 8
    2b5e:	21 c0       	rjmp	.+66     	; 0x2ba2 <vfprintf+0xca>
    2b60:	27 fd       	sbrc	r18, 7
    2b62:	27 c0       	rjmp	.+78     	; 0x2bb2 <vfprintf+0xda>
    2b64:	30 ed       	ldi	r19, 0xD0	; 208
    2b66:	38 0f       	add	r19, r24
    2b68:	3a 30       	cpi	r19, 0x0A	; 10
    2b6a:	78 f4       	brcc	.+30     	; 0x2b8a <vfprintf+0xb2>
    2b6c:	26 ff       	sbrs	r18, 6
    2b6e:	06 c0       	rjmp	.+12     	; 0x2b7c <vfprintf+0xa4>
    2b70:	fa e0       	ldi	r31, 0x0A	; 10
    2b72:	5f 9e       	mul	r5, r31
    2b74:	30 0d       	add	r19, r0
    2b76:	11 24       	eor	r1, r1
    2b78:	53 2e       	mov	r5, r19
    2b7a:	13 c0       	rjmp	.+38     	; 0x2ba2 <vfprintf+0xca>
    2b7c:	8a e0       	ldi	r24, 0x0A	; 10
    2b7e:	38 9e       	mul	r3, r24
    2b80:	30 0d       	add	r19, r0
    2b82:	11 24       	eor	r1, r1
    2b84:	33 2e       	mov	r3, r19
    2b86:	20 62       	ori	r18, 0x20	; 32
    2b88:	0c c0       	rjmp	.+24     	; 0x2ba2 <vfprintf+0xca>
    2b8a:	8e 32       	cpi	r24, 0x2E	; 46
    2b8c:	21 f4       	brne	.+8      	; 0x2b96 <vfprintf+0xbe>
    2b8e:	26 fd       	sbrc	r18, 6
    2b90:	6b c1       	rjmp	.+726    	; 0x2e68 <vfprintf+0x390>
    2b92:	20 64       	ori	r18, 0x40	; 64
    2b94:	06 c0       	rjmp	.+12     	; 0x2ba2 <vfprintf+0xca>
    2b96:	8c 36       	cpi	r24, 0x6C	; 108
    2b98:	11 f4       	brne	.+4      	; 0x2b9e <vfprintf+0xc6>
    2b9a:	20 68       	ori	r18, 0x80	; 128
    2b9c:	02 c0       	rjmp	.+4      	; 0x2ba2 <vfprintf+0xca>
    2b9e:	88 36       	cpi	r24, 0x68	; 104
    2ba0:	41 f4       	brne	.+16     	; 0x2bb2 <vfprintf+0xda>
    2ba2:	f6 01       	movw	r30, r12
    2ba4:	93 fd       	sbrc	r25, 3
    2ba6:	85 91       	lpm	r24, Z+
    2ba8:	93 ff       	sbrs	r25, 3
    2baa:	81 91       	ld	r24, Z+
    2bac:	6f 01       	movw	r12, r30
    2bae:	81 11       	cpse	r24, r1
    2bb0:	c1 cf       	rjmp	.-126    	; 0x2b34 <vfprintf+0x5c>
    2bb2:	98 2f       	mov	r25, r24
    2bb4:	9f 7d       	andi	r25, 0xDF	; 223
    2bb6:	95 54       	subi	r25, 0x45	; 69
    2bb8:	93 30       	cpi	r25, 0x03	; 3
    2bba:	28 f4       	brcc	.+10     	; 0x2bc6 <vfprintf+0xee>
    2bbc:	0c 5f       	subi	r16, 0xFC	; 252
    2bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc0:	ff e3       	ldi	r31, 0x3F	; 63
    2bc2:	f9 83       	std	Y+1, r31	; 0x01
    2bc4:	0d c0       	rjmp	.+26     	; 0x2be0 <vfprintf+0x108>
    2bc6:	83 36       	cpi	r24, 0x63	; 99
    2bc8:	31 f0       	breq	.+12     	; 0x2bd6 <vfprintf+0xfe>
    2bca:	83 37       	cpi	r24, 0x73	; 115
    2bcc:	71 f0       	breq	.+28     	; 0x2bea <vfprintf+0x112>
    2bce:	83 35       	cpi	r24, 0x53	; 83
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <vfprintf+0xfc>
    2bd2:	5b c0       	rjmp	.+182    	; 0x2c8a <vfprintf+0x1b2>
    2bd4:	22 c0       	rjmp	.+68     	; 0x2c1a <vfprintf+0x142>
    2bd6:	f8 01       	movw	r30, r16
    2bd8:	80 81       	ld	r24, Z
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	0e 5f       	subi	r16, 0xFE	; 254
    2bde:	1f 4f       	sbci	r17, 0xFF	; 255
    2be0:	44 24       	eor	r4, r4
    2be2:	43 94       	inc	r4
    2be4:	51 2c       	mov	r5, r1
    2be6:	54 01       	movw	r10, r8
    2be8:	15 c0       	rjmp	.+42     	; 0x2c14 <vfprintf+0x13c>
    2bea:	38 01       	movw	r6, r16
    2bec:	f2 e0       	ldi	r31, 0x02	; 2
    2bee:	6f 0e       	add	r6, r31
    2bf0:	71 1c       	adc	r7, r1
    2bf2:	f8 01       	movw	r30, r16
    2bf4:	a0 80       	ld	r10, Z
    2bf6:	b1 80       	ldd	r11, Z+1	; 0x01
    2bf8:	26 ff       	sbrs	r18, 6
    2bfa:	03 c0       	rjmp	.+6      	; 0x2c02 <vfprintf+0x12a>
    2bfc:	65 2d       	mov	r22, r5
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <vfprintf+0x12e>
    2c02:	6f ef       	ldi	r22, 0xFF	; 255
    2c04:	7f ef       	ldi	r23, 0xFF	; 255
    2c06:	c5 01       	movw	r24, r10
    2c08:	2c 87       	std	Y+12, r18	; 0x0c
    2c0a:	0e 94 57 17 	call	0x2eae	; 0x2eae <strnlen>
    2c0e:	2c 01       	movw	r4, r24
    2c10:	83 01       	movw	r16, r6
    2c12:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c14:	2f 77       	andi	r18, 0x7F	; 127
    2c16:	22 2e       	mov	r2, r18
    2c18:	17 c0       	rjmp	.+46     	; 0x2c48 <vfprintf+0x170>
    2c1a:	38 01       	movw	r6, r16
    2c1c:	f2 e0       	ldi	r31, 0x02	; 2
    2c1e:	6f 0e       	add	r6, r31
    2c20:	71 1c       	adc	r7, r1
    2c22:	f8 01       	movw	r30, r16
    2c24:	a0 80       	ld	r10, Z
    2c26:	b1 80       	ldd	r11, Z+1	; 0x01
    2c28:	26 ff       	sbrs	r18, 6
    2c2a:	03 c0       	rjmp	.+6      	; 0x2c32 <vfprintf+0x15a>
    2c2c:	65 2d       	mov	r22, r5
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	02 c0       	rjmp	.+4      	; 0x2c36 <vfprintf+0x15e>
    2c32:	6f ef       	ldi	r22, 0xFF	; 255
    2c34:	7f ef       	ldi	r23, 0xFF	; 255
    2c36:	c5 01       	movw	r24, r10
    2c38:	2c 87       	std	Y+12, r18	; 0x0c
    2c3a:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <strnlen_P>
    2c3e:	2c 01       	movw	r4, r24
    2c40:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c42:	20 68       	ori	r18, 0x80	; 128
    2c44:	22 2e       	mov	r2, r18
    2c46:	83 01       	movw	r16, r6
    2c48:	23 fc       	sbrc	r2, 3
    2c4a:	1b c0       	rjmp	.+54     	; 0x2c82 <vfprintf+0x1aa>
    2c4c:	83 2d       	mov	r24, r3
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	48 16       	cp	r4, r24
    2c52:	59 06       	cpc	r5, r25
    2c54:	b0 f4       	brcc	.+44     	; 0x2c82 <vfprintf+0x1aa>
    2c56:	b7 01       	movw	r22, r14
    2c58:	80 e2       	ldi	r24, 0x20	; 32
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <fputc>
    2c60:	3a 94       	dec	r3
    2c62:	f4 cf       	rjmp	.-24     	; 0x2c4c <vfprintf+0x174>
    2c64:	f5 01       	movw	r30, r10
    2c66:	27 fc       	sbrc	r2, 7
    2c68:	85 91       	lpm	r24, Z+
    2c6a:	27 fe       	sbrs	r2, 7
    2c6c:	81 91       	ld	r24, Z+
    2c6e:	5f 01       	movw	r10, r30
    2c70:	b7 01       	movw	r22, r14
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <fputc>
    2c78:	31 10       	cpse	r3, r1
    2c7a:	3a 94       	dec	r3
    2c7c:	f1 e0       	ldi	r31, 0x01	; 1
    2c7e:	4f 1a       	sub	r4, r31
    2c80:	51 08       	sbc	r5, r1
    2c82:	41 14       	cp	r4, r1
    2c84:	51 04       	cpc	r5, r1
    2c86:	71 f7       	brne	.-36     	; 0x2c64 <vfprintf+0x18c>
    2c88:	e5 c0       	rjmp	.+458    	; 0x2e54 <vfprintf+0x37c>
    2c8a:	84 36       	cpi	r24, 0x64	; 100
    2c8c:	11 f0       	breq	.+4      	; 0x2c92 <vfprintf+0x1ba>
    2c8e:	89 36       	cpi	r24, 0x69	; 105
    2c90:	39 f5       	brne	.+78     	; 0x2ce0 <vfprintf+0x208>
    2c92:	f8 01       	movw	r30, r16
    2c94:	27 ff       	sbrs	r18, 7
    2c96:	07 c0       	rjmp	.+14     	; 0x2ca6 <vfprintf+0x1ce>
    2c98:	60 81       	ld	r22, Z
    2c9a:	71 81       	ldd	r23, Z+1	; 0x01
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	0c 5f       	subi	r16, 0xFC	; 252
    2ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca4:	08 c0       	rjmp	.+16     	; 0x2cb6 <vfprintf+0x1de>
    2ca6:	60 81       	ld	r22, Z
    2ca8:	71 81       	ldd	r23, Z+1	; 0x01
    2caa:	88 27       	eor	r24, r24
    2cac:	77 fd       	sbrc	r23, 7
    2cae:	80 95       	com	r24
    2cb0:	98 2f       	mov	r25, r24
    2cb2:	0e 5f       	subi	r16, 0xFE	; 254
    2cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb6:	2f 76       	andi	r18, 0x6F	; 111
    2cb8:	b2 2e       	mov	r11, r18
    2cba:	97 ff       	sbrs	r25, 7
    2cbc:	09 c0       	rjmp	.+18     	; 0x2cd0 <vfprintf+0x1f8>
    2cbe:	90 95       	com	r25
    2cc0:	80 95       	com	r24
    2cc2:	70 95       	com	r23
    2cc4:	61 95       	neg	r22
    2cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ccc:	20 68       	ori	r18, 0x80	; 128
    2cce:	b2 2e       	mov	r11, r18
    2cd0:	2a e0       	ldi	r18, 0x0A	; 10
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	a4 01       	movw	r20, r8
    2cd6:	0e 94 94 17 	call	0x2f28	; 0x2f28 <__ultoa_invert>
    2cda:	a8 2e       	mov	r10, r24
    2cdc:	a8 18       	sub	r10, r8
    2cde:	44 c0       	rjmp	.+136    	; 0x2d68 <vfprintf+0x290>
    2ce0:	85 37       	cpi	r24, 0x75	; 117
    2ce2:	29 f4       	brne	.+10     	; 0x2cee <vfprintf+0x216>
    2ce4:	2f 7e       	andi	r18, 0xEF	; 239
    2ce6:	b2 2e       	mov	r11, r18
    2ce8:	2a e0       	ldi	r18, 0x0A	; 10
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	25 c0       	rjmp	.+74     	; 0x2d38 <vfprintf+0x260>
    2cee:	f2 2f       	mov	r31, r18
    2cf0:	f9 7f       	andi	r31, 0xF9	; 249
    2cf2:	bf 2e       	mov	r11, r31
    2cf4:	8f 36       	cpi	r24, 0x6F	; 111
    2cf6:	c1 f0       	breq	.+48     	; 0x2d28 <vfprintf+0x250>
    2cf8:	18 f4       	brcc	.+6      	; 0x2d00 <vfprintf+0x228>
    2cfa:	88 35       	cpi	r24, 0x58	; 88
    2cfc:	79 f0       	breq	.+30     	; 0x2d1c <vfprintf+0x244>
    2cfe:	b4 c0       	rjmp	.+360    	; 0x2e68 <vfprintf+0x390>
    2d00:	80 37       	cpi	r24, 0x70	; 112
    2d02:	19 f0       	breq	.+6      	; 0x2d0a <vfprintf+0x232>
    2d04:	88 37       	cpi	r24, 0x78	; 120
    2d06:	21 f0       	breq	.+8      	; 0x2d10 <vfprintf+0x238>
    2d08:	af c0       	rjmp	.+350    	; 0x2e68 <vfprintf+0x390>
    2d0a:	2f 2f       	mov	r18, r31
    2d0c:	20 61       	ori	r18, 0x10	; 16
    2d0e:	b2 2e       	mov	r11, r18
    2d10:	b4 fe       	sbrs	r11, 4
    2d12:	0d c0       	rjmp	.+26     	; 0x2d2e <vfprintf+0x256>
    2d14:	8b 2d       	mov	r24, r11
    2d16:	84 60       	ori	r24, 0x04	; 4
    2d18:	b8 2e       	mov	r11, r24
    2d1a:	09 c0       	rjmp	.+18     	; 0x2d2e <vfprintf+0x256>
    2d1c:	24 ff       	sbrs	r18, 4
    2d1e:	0a c0       	rjmp	.+20     	; 0x2d34 <vfprintf+0x25c>
    2d20:	9f 2f       	mov	r25, r31
    2d22:	96 60       	ori	r25, 0x06	; 6
    2d24:	b9 2e       	mov	r11, r25
    2d26:	06 c0       	rjmp	.+12     	; 0x2d34 <vfprintf+0x25c>
    2d28:	28 e0       	ldi	r18, 0x08	; 8
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	05 c0       	rjmp	.+10     	; 0x2d38 <vfprintf+0x260>
    2d2e:	20 e1       	ldi	r18, 0x10	; 16
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <vfprintf+0x260>
    2d34:	20 e1       	ldi	r18, 0x10	; 16
    2d36:	32 e0       	ldi	r19, 0x02	; 2
    2d38:	f8 01       	movw	r30, r16
    2d3a:	b7 fe       	sbrs	r11, 7
    2d3c:	07 c0       	rjmp	.+14     	; 0x2d4c <vfprintf+0x274>
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	0c 5f       	subi	r16, 0xFC	; 252
    2d48:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4a:	06 c0       	rjmp	.+12     	; 0x2d58 <vfprintf+0x280>
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	0e 5f       	subi	r16, 0xFE	; 254
    2d56:	1f 4f       	sbci	r17, 0xFF	; 255
    2d58:	a4 01       	movw	r20, r8
    2d5a:	0e 94 94 17 	call	0x2f28	; 0x2f28 <__ultoa_invert>
    2d5e:	a8 2e       	mov	r10, r24
    2d60:	a8 18       	sub	r10, r8
    2d62:	fb 2d       	mov	r31, r11
    2d64:	ff 77       	andi	r31, 0x7F	; 127
    2d66:	bf 2e       	mov	r11, r31
    2d68:	b6 fe       	sbrs	r11, 6
    2d6a:	0b c0       	rjmp	.+22     	; 0x2d82 <vfprintf+0x2aa>
    2d6c:	2b 2d       	mov	r18, r11
    2d6e:	2e 7f       	andi	r18, 0xFE	; 254
    2d70:	a5 14       	cp	r10, r5
    2d72:	50 f4       	brcc	.+20     	; 0x2d88 <vfprintf+0x2b0>
    2d74:	b4 fe       	sbrs	r11, 4
    2d76:	0a c0       	rjmp	.+20     	; 0x2d8c <vfprintf+0x2b4>
    2d78:	b2 fc       	sbrc	r11, 2
    2d7a:	08 c0       	rjmp	.+16     	; 0x2d8c <vfprintf+0x2b4>
    2d7c:	2b 2d       	mov	r18, r11
    2d7e:	2e 7e       	andi	r18, 0xEE	; 238
    2d80:	05 c0       	rjmp	.+10     	; 0x2d8c <vfprintf+0x2b4>
    2d82:	7a 2c       	mov	r7, r10
    2d84:	2b 2d       	mov	r18, r11
    2d86:	03 c0       	rjmp	.+6      	; 0x2d8e <vfprintf+0x2b6>
    2d88:	7a 2c       	mov	r7, r10
    2d8a:	01 c0       	rjmp	.+2      	; 0x2d8e <vfprintf+0x2b6>
    2d8c:	75 2c       	mov	r7, r5
    2d8e:	24 ff       	sbrs	r18, 4
    2d90:	0d c0       	rjmp	.+26     	; 0x2dac <vfprintf+0x2d4>
    2d92:	fe 01       	movw	r30, r28
    2d94:	ea 0d       	add	r30, r10
    2d96:	f1 1d       	adc	r31, r1
    2d98:	80 81       	ld	r24, Z
    2d9a:	80 33       	cpi	r24, 0x30	; 48
    2d9c:	11 f4       	brne	.+4      	; 0x2da2 <vfprintf+0x2ca>
    2d9e:	29 7e       	andi	r18, 0xE9	; 233
    2da0:	09 c0       	rjmp	.+18     	; 0x2db4 <vfprintf+0x2dc>
    2da2:	22 ff       	sbrs	r18, 2
    2da4:	06 c0       	rjmp	.+12     	; 0x2db2 <vfprintf+0x2da>
    2da6:	73 94       	inc	r7
    2da8:	73 94       	inc	r7
    2daa:	04 c0       	rjmp	.+8      	; 0x2db4 <vfprintf+0x2dc>
    2dac:	82 2f       	mov	r24, r18
    2dae:	86 78       	andi	r24, 0x86	; 134
    2db0:	09 f0       	breq	.+2      	; 0x2db4 <vfprintf+0x2dc>
    2db2:	73 94       	inc	r7
    2db4:	23 fd       	sbrc	r18, 3
    2db6:	13 c0       	rjmp	.+38     	; 0x2dde <vfprintf+0x306>
    2db8:	20 ff       	sbrs	r18, 0
    2dba:	06 c0       	rjmp	.+12     	; 0x2dc8 <vfprintf+0x2f0>
    2dbc:	5a 2c       	mov	r5, r10
    2dbe:	73 14       	cp	r7, r3
    2dc0:	18 f4       	brcc	.+6      	; 0x2dc8 <vfprintf+0x2f0>
    2dc2:	53 0c       	add	r5, r3
    2dc4:	57 18       	sub	r5, r7
    2dc6:	73 2c       	mov	r7, r3
    2dc8:	73 14       	cp	r7, r3
    2dca:	68 f4       	brcc	.+26     	; 0x2de6 <vfprintf+0x30e>
    2dcc:	b7 01       	movw	r22, r14
    2dce:	80 e2       	ldi	r24, 0x20	; 32
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	2c 87       	std	Y+12, r18	; 0x0c
    2dd4:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <fputc>
    2dd8:	73 94       	inc	r7
    2dda:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ddc:	f5 cf       	rjmp	.-22     	; 0x2dc8 <vfprintf+0x2f0>
    2dde:	73 14       	cp	r7, r3
    2de0:	10 f4       	brcc	.+4      	; 0x2de6 <vfprintf+0x30e>
    2de2:	37 18       	sub	r3, r7
    2de4:	01 c0       	rjmp	.+2      	; 0x2de8 <vfprintf+0x310>
    2de6:	31 2c       	mov	r3, r1
    2de8:	24 ff       	sbrs	r18, 4
    2dea:	12 c0       	rjmp	.+36     	; 0x2e10 <vfprintf+0x338>
    2dec:	b7 01       	movw	r22, r14
    2dee:	80 e3       	ldi	r24, 0x30	; 48
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	2c 87       	std	Y+12, r18	; 0x0c
    2df4:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <fputc>
    2df8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dfa:	22 ff       	sbrs	r18, 2
    2dfc:	17 c0       	rjmp	.+46     	; 0x2e2c <vfprintf+0x354>
    2dfe:	21 ff       	sbrs	r18, 1
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <vfprintf+0x330>
    2e02:	88 e5       	ldi	r24, 0x58	; 88
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <vfprintf+0x334>
    2e08:	88 e7       	ldi	r24, 0x78	; 120
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	b7 01       	movw	r22, r14
    2e0e:	0c c0       	rjmp	.+24     	; 0x2e28 <vfprintf+0x350>
    2e10:	82 2f       	mov	r24, r18
    2e12:	86 78       	andi	r24, 0x86	; 134
    2e14:	59 f0       	breq	.+22     	; 0x2e2c <vfprintf+0x354>
    2e16:	21 fd       	sbrc	r18, 1
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <vfprintf+0x346>
    2e1a:	80 e2       	ldi	r24, 0x20	; 32
    2e1c:	01 c0       	rjmp	.+2      	; 0x2e20 <vfprintf+0x348>
    2e1e:	8b e2       	ldi	r24, 0x2B	; 43
    2e20:	27 fd       	sbrc	r18, 7
    2e22:	8d e2       	ldi	r24, 0x2D	; 45
    2e24:	b7 01       	movw	r22, r14
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <fputc>
    2e2c:	a5 14       	cp	r10, r5
    2e2e:	38 f4       	brcc	.+14     	; 0x2e3e <vfprintf+0x366>
    2e30:	b7 01       	movw	r22, r14
    2e32:	80 e3       	ldi	r24, 0x30	; 48
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <fputc>
    2e3a:	5a 94       	dec	r5
    2e3c:	f7 cf       	rjmp	.-18     	; 0x2e2c <vfprintf+0x354>
    2e3e:	aa 94       	dec	r10
    2e40:	f4 01       	movw	r30, r8
    2e42:	ea 0d       	add	r30, r10
    2e44:	f1 1d       	adc	r31, r1
    2e46:	80 81       	ld	r24, Z
    2e48:	b7 01       	movw	r22, r14
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <fputc>
    2e50:	a1 10       	cpse	r10, r1
    2e52:	f5 cf       	rjmp	.-22     	; 0x2e3e <vfprintf+0x366>
    2e54:	33 20       	and	r3, r3
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <vfprintf+0x382>
    2e58:	51 ce       	rjmp	.-862    	; 0x2afc <vfprintf+0x24>
    2e5a:	b7 01       	movw	r22, r14
    2e5c:	80 e2       	ldi	r24, 0x20	; 32
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <fputc>
    2e64:	3a 94       	dec	r3
    2e66:	f6 cf       	rjmp	.-20     	; 0x2e54 <vfprintf+0x37c>
    2e68:	f7 01       	movw	r30, r14
    2e6a:	86 81       	ldd	r24, Z+6	; 0x06
    2e6c:	97 81       	ldd	r25, Z+7	; 0x07
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <vfprintf+0x39c>
    2e70:	8f ef       	ldi	r24, 0xFF	; 255
    2e72:	9f ef       	ldi	r25, 0xFF	; 255
    2e74:	2c 96       	adiw	r28, 0x0c	; 12
    2e76:	e2 e1       	ldi	r30, 0x12	; 18
    2e78:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__>

00002e7c <__eerd_word_m16>:
    2e7c:	a8 e1       	ldi	r26, 0x18	; 24
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	42 e0       	ldi	r20, 0x02	; 2
    2e82:	50 e0       	ldi	r21, 0x00	; 0
    2e84:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__eerd_blraw_m16>

00002e88 <__eewr_word_m16>:
    2e88:	0e 94 02 18 	call	0x3004	; 0x3004 <__eewr_byte_m16>
    2e8c:	27 2f       	mov	r18, r23
    2e8e:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__eewr_r18_m16>

00002e92 <__ctype_isfalse>:
    2e92:	99 27       	eor	r25, r25
    2e94:	88 27       	eor	r24, r24

00002e96 <__ctype_istrue>:
    2e96:	08 95       	ret

00002e98 <strnlen_P>:
    2e98:	fc 01       	movw	r30, r24
    2e9a:	05 90       	lpm	r0, Z+
    2e9c:	61 50       	subi	r22, 0x01	; 1
    2e9e:	70 40       	sbci	r23, 0x00	; 0
    2ea0:	01 10       	cpse	r0, r1
    2ea2:	d8 f7       	brcc	.-10     	; 0x2e9a <strnlen_P+0x2>
    2ea4:	80 95       	com	r24
    2ea6:	90 95       	com	r25
    2ea8:	8e 0f       	add	r24, r30
    2eaa:	9f 1f       	adc	r25, r31
    2eac:	08 95       	ret

00002eae <strnlen>:
    2eae:	fc 01       	movw	r30, r24
    2eb0:	61 50       	subi	r22, 0x01	; 1
    2eb2:	70 40       	sbci	r23, 0x00	; 0
    2eb4:	01 90       	ld	r0, Z+
    2eb6:	01 10       	cpse	r0, r1
    2eb8:	d8 f7       	brcc	.-10     	; 0x2eb0 <strnlen+0x2>
    2eba:	80 95       	com	r24
    2ebc:	90 95       	com	r25
    2ebe:	8e 0f       	add	r24, r30
    2ec0:	9f 1f       	adc	r25, r31
    2ec2:	08 95       	ret

00002ec4 <fputc>:
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	18 2f       	mov	r17, r24
    2ece:	09 2f       	mov	r16, r25
    2ed0:	eb 01       	movw	r28, r22
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	81 fd       	sbrc	r24, 1
    2ed6:	03 c0       	rjmp	.+6      	; 0x2ede <fputc+0x1a>
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	9f ef       	ldi	r25, 0xFF	; 255
    2edc:	20 c0       	rjmp	.+64     	; 0x2f1e <fputc+0x5a>
    2ede:	82 ff       	sbrs	r24, 2
    2ee0:	10 c0       	rjmp	.+32     	; 0x2f02 <fputc+0x3e>
    2ee2:	4e 81       	ldd	r20, Y+6	; 0x06
    2ee4:	5f 81       	ldd	r21, Y+7	; 0x07
    2ee6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ee8:	3d 81       	ldd	r19, Y+5	; 0x05
    2eea:	42 17       	cp	r20, r18
    2eec:	53 07       	cpc	r21, r19
    2eee:	7c f4       	brge	.+30     	; 0x2f0e <fputc+0x4a>
    2ef0:	e8 81       	ld	r30, Y
    2ef2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ef4:	9f 01       	movw	r18, r30
    2ef6:	2f 5f       	subi	r18, 0xFF	; 255
    2ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    2efa:	39 83       	std	Y+1, r19	; 0x01
    2efc:	28 83       	st	Y, r18
    2efe:	10 83       	st	Z, r17
    2f00:	06 c0       	rjmp	.+12     	; 0x2f0e <fputc+0x4a>
    2f02:	e8 85       	ldd	r30, Y+8	; 0x08
    2f04:	f9 85       	ldd	r31, Y+9	; 0x09
    2f06:	81 2f       	mov	r24, r17
    2f08:	09 95       	icall
    2f0a:	89 2b       	or	r24, r25
    2f0c:	29 f7       	brne	.-54     	; 0x2ed8 <fputc+0x14>
    2f0e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f10:	3f 81       	ldd	r19, Y+7	; 0x07
    2f12:	2f 5f       	subi	r18, 0xFF	; 255
    2f14:	3f 4f       	sbci	r19, 0xFF	; 255
    2f16:	3f 83       	std	Y+7, r19	; 0x07
    2f18:	2e 83       	std	Y+6, r18	; 0x06
    2f1a:	81 2f       	mov	r24, r17
    2f1c:	90 2f       	mov	r25, r16
    2f1e:	df 91       	pop	r29
    2f20:	cf 91       	pop	r28
    2f22:	1f 91       	pop	r17
    2f24:	0f 91       	pop	r16
    2f26:	08 95       	ret

00002f28 <__ultoa_invert>:
    2f28:	fa 01       	movw	r30, r20
    2f2a:	aa 27       	eor	r26, r26
    2f2c:	28 30       	cpi	r18, 0x08	; 8
    2f2e:	51 f1       	breq	.+84     	; 0x2f84 <__ultoa_invert+0x5c>
    2f30:	20 31       	cpi	r18, 0x10	; 16
    2f32:	81 f1       	breq	.+96     	; 0x2f94 <__ultoa_invert+0x6c>
    2f34:	e8 94       	clt
    2f36:	6f 93       	push	r22
    2f38:	6e 7f       	andi	r22, 0xFE	; 254
    2f3a:	6e 5f       	subi	r22, 0xFE	; 254
    2f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f40:	9f 4f       	sbci	r25, 0xFF	; 255
    2f42:	af 4f       	sbci	r26, 0xFF	; 255
    2f44:	b1 e0       	ldi	r27, 0x01	; 1
    2f46:	3e d0       	rcall	.+124    	; 0x2fc4 <__ultoa_invert+0x9c>
    2f48:	b4 e0       	ldi	r27, 0x04	; 4
    2f4a:	3c d0       	rcall	.+120    	; 0x2fc4 <__ultoa_invert+0x9c>
    2f4c:	67 0f       	add	r22, r23
    2f4e:	78 1f       	adc	r23, r24
    2f50:	89 1f       	adc	r24, r25
    2f52:	9a 1f       	adc	r25, r26
    2f54:	a1 1d       	adc	r26, r1
    2f56:	68 0f       	add	r22, r24
    2f58:	79 1f       	adc	r23, r25
    2f5a:	8a 1f       	adc	r24, r26
    2f5c:	91 1d       	adc	r25, r1
    2f5e:	a1 1d       	adc	r26, r1
    2f60:	6a 0f       	add	r22, r26
    2f62:	71 1d       	adc	r23, r1
    2f64:	81 1d       	adc	r24, r1
    2f66:	91 1d       	adc	r25, r1
    2f68:	a1 1d       	adc	r26, r1
    2f6a:	20 d0       	rcall	.+64     	; 0x2fac <__ultoa_invert+0x84>
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <__ultoa_invert+0x48>
    2f6e:	68 94       	set
    2f70:	3f 91       	pop	r19
    2f72:	2a e0       	ldi	r18, 0x0A	; 10
    2f74:	26 9f       	mul	r18, r22
    2f76:	11 24       	eor	r1, r1
    2f78:	30 19       	sub	r19, r0
    2f7a:	30 5d       	subi	r19, 0xD0	; 208
    2f7c:	31 93       	st	Z+, r19
    2f7e:	de f6       	brtc	.-74     	; 0x2f36 <__ultoa_invert+0xe>
    2f80:	cf 01       	movw	r24, r30
    2f82:	08 95       	ret
    2f84:	46 2f       	mov	r20, r22
    2f86:	47 70       	andi	r20, 0x07	; 7
    2f88:	40 5d       	subi	r20, 0xD0	; 208
    2f8a:	41 93       	st	Z+, r20
    2f8c:	b3 e0       	ldi	r27, 0x03	; 3
    2f8e:	0f d0       	rcall	.+30     	; 0x2fae <__ultoa_invert+0x86>
    2f90:	c9 f7       	brne	.-14     	; 0x2f84 <__ultoa_invert+0x5c>
    2f92:	f6 cf       	rjmp	.-20     	; 0x2f80 <__ultoa_invert+0x58>
    2f94:	46 2f       	mov	r20, r22
    2f96:	4f 70       	andi	r20, 0x0F	; 15
    2f98:	40 5d       	subi	r20, 0xD0	; 208
    2f9a:	4a 33       	cpi	r20, 0x3A	; 58
    2f9c:	18 f0       	brcs	.+6      	; 0x2fa4 <__ultoa_invert+0x7c>
    2f9e:	49 5d       	subi	r20, 0xD9	; 217
    2fa0:	31 fd       	sbrc	r19, 1
    2fa2:	40 52       	subi	r20, 0x20	; 32
    2fa4:	41 93       	st	Z+, r20
    2fa6:	02 d0       	rcall	.+4      	; 0x2fac <__ultoa_invert+0x84>
    2fa8:	a9 f7       	brne	.-22     	; 0x2f94 <__ultoa_invert+0x6c>
    2faa:	ea cf       	rjmp	.-44     	; 0x2f80 <__ultoa_invert+0x58>
    2fac:	b4 e0       	ldi	r27, 0x04	; 4
    2fae:	a6 95       	lsr	r26
    2fb0:	97 95       	ror	r25
    2fb2:	87 95       	ror	r24
    2fb4:	77 95       	ror	r23
    2fb6:	67 95       	ror	r22
    2fb8:	ba 95       	dec	r27
    2fba:	c9 f7       	brne	.-14     	; 0x2fae <__ultoa_invert+0x86>
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	61 05       	cpc	r22, r1
    2fc0:	71 05       	cpc	r23, r1
    2fc2:	08 95       	ret
    2fc4:	9b 01       	movw	r18, r22
    2fc6:	ac 01       	movw	r20, r24
    2fc8:	0a 2e       	mov	r0, r26
    2fca:	06 94       	lsr	r0
    2fcc:	57 95       	ror	r21
    2fce:	47 95       	ror	r20
    2fd0:	37 95       	ror	r19
    2fd2:	27 95       	ror	r18
    2fd4:	ba 95       	dec	r27
    2fd6:	c9 f7       	brne	.-14     	; 0x2fca <__ultoa_invert+0xa2>
    2fd8:	62 0f       	add	r22, r18
    2fda:	73 1f       	adc	r23, r19
    2fdc:	84 1f       	adc	r24, r20
    2fde:	95 1f       	adc	r25, r21
    2fe0:	a0 1d       	adc	r26, r0
    2fe2:	08 95       	ret

00002fe4 <__eerd_block_m16>:
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22

00002fe8 <__eerd_blraw_m16>:
    2fe8:	fc 01       	movw	r30, r24
    2fea:	e1 99       	sbic	0x1c, 1	; 28
    2fec:	fe cf       	rjmp	.-4      	; 0x2fea <__eerd_blraw_m16+0x2>
    2fee:	06 c0       	rjmp	.+12     	; 0x2ffc <__eerd_blraw_m16+0x14>
    2ff0:	ff bb       	out	0x1f, r31	; 31
    2ff2:	ee bb       	out	0x1e, r30	; 30
    2ff4:	e0 9a       	sbi	0x1c, 0	; 28
    2ff6:	31 96       	adiw	r30, 0x01	; 1
    2ff8:	0d b2       	in	r0, 0x1d	; 29
    2ffa:	0d 92       	st	X+, r0
    2ffc:	41 50       	subi	r20, 0x01	; 1
    2ffe:	50 40       	sbci	r21, 0x00	; 0
    3000:	b8 f7       	brcc	.-18     	; 0x2ff0 <__eerd_blraw_m16+0x8>
    3002:	08 95       	ret

00003004 <__eewr_byte_m16>:
    3004:	26 2f       	mov	r18, r22

00003006 <__eewr_r18_m16>:
    3006:	e1 99       	sbic	0x1c, 1	; 28
    3008:	fe cf       	rjmp	.-4      	; 0x3006 <__eewr_r18_m16>
    300a:	9f bb       	out	0x1f, r25	; 31
    300c:	8e bb       	out	0x1e, r24	; 30
    300e:	2d bb       	out	0x1d, r18	; 29
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	e2 9a       	sbi	0x1c, 2	; 28
    3016:	e1 9a       	sbi	0x1c, 1	; 28
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	08 95       	ret

0000301e <__mulsi3>:
    301e:	db 01       	movw	r26, r22
    3020:	8f 93       	push	r24
    3022:	9f 93       	push	r25
    3024:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__muluhisi3>
    3028:	bf 91       	pop	r27
    302a:	af 91       	pop	r26
    302c:	a2 9f       	mul	r26, r18
    302e:	80 0d       	add	r24, r0
    3030:	91 1d       	adc	r25, r1
    3032:	a3 9f       	mul	r26, r19
    3034:	90 0d       	add	r25, r0
    3036:	b2 9f       	mul	r27, r18
    3038:	90 0d       	add	r25, r0
    303a:	11 24       	eor	r1, r1
    303c:	08 95       	ret

0000303e <__udivmodsi4>:
    303e:	a1 e2       	ldi	r26, 0x21	; 33
    3040:	1a 2e       	mov	r1, r26
    3042:	aa 1b       	sub	r26, r26
    3044:	bb 1b       	sub	r27, r27
    3046:	fd 01       	movw	r30, r26
    3048:	0d c0       	rjmp	.+26     	; 0x3064 <__udivmodsi4_ep>

0000304a <__udivmodsi4_loop>:
    304a:	aa 1f       	adc	r26, r26
    304c:	bb 1f       	adc	r27, r27
    304e:	ee 1f       	adc	r30, r30
    3050:	ff 1f       	adc	r31, r31
    3052:	a2 17       	cp	r26, r18
    3054:	b3 07       	cpc	r27, r19
    3056:	e4 07       	cpc	r30, r20
    3058:	f5 07       	cpc	r31, r21
    305a:	20 f0       	brcs	.+8      	; 0x3064 <__udivmodsi4_ep>
    305c:	a2 1b       	sub	r26, r18
    305e:	b3 0b       	sbc	r27, r19
    3060:	e4 0b       	sbc	r30, r20
    3062:	f5 0b       	sbc	r31, r21

00003064 <__udivmodsi4_ep>:
    3064:	66 1f       	adc	r22, r22
    3066:	77 1f       	adc	r23, r23
    3068:	88 1f       	adc	r24, r24
    306a:	99 1f       	adc	r25, r25
    306c:	1a 94       	dec	r1
    306e:	69 f7       	brne	.-38     	; 0x304a <__udivmodsi4_loop>
    3070:	60 95       	com	r22
    3072:	70 95       	com	r23
    3074:	80 95       	com	r24
    3076:	90 95       	com	r25
    3078:	9b 01       	movw	r18, r22
    307a:	ac 01       	movw	r20, r24
    307c:	bd 01       	movw	r22, r26
    307e:	cf 01       	movw	r24, r30
    3080:	08 95       	ret

00003082 <__divmodsi4>:
    3082:	05 2e       	mov	r0, r21
    3084:	97 fb       	bst	r25, 7
    3086:	1e f4       	brtc	.+6      	; 0x308e <__divmodsi4+0xc>
    3088:	00 94       	com	r0
    308a:	0e 94 58 18 	call	0x30b0	; 0x30b0 <__negsi2>
    308e:	57 fd       	sbrc	r21, 7
    3090:	07 d0       	rcall	.+14     	; 0x30a0 <__divmodsi4_neg2>
    3092:	0e 94 1f 18 	call	0x303e	; 0x303e <__udivmodsi4>
    3096:	07 fc       	sbrc	r0, 7
    3098:	03 d0       	rcall	.+6      	; 0x30a0 <__divmodsi4_neg2>
    309a:	4e f4       	brtc	.+18     	; 0x30ae <__divmodsi4_exit>
    309c:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__negsi2>

000030a0 <__divmodsi4_neg2>:
    30a0:	50 95       	com	r21
    30a2:	40 95       	com	r20
    30a4:	30 95       	com	r19
    30a6:	21 95       	neg	r18
    30a8:	3f 4f       	sbci	r19, 0xFF	; 255
    30aa:	4f 4f       	sbci	r20, 0xFF	; 255
    30ac:	5f 4f       	sbci	r21, 0xFF	; 255

000030ae <__divmodsi4_exit>:
    30ae:	08 95       	ret

000030b0 <__negsi2>:
    30b0:	90 95       	com	r25
    30b2:	80 95       	com	r24
    30b4:	70 95       	com	r23
    30b6:	61 95       	neg	r22
    30b8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ba:	8f 4f       	sbci	r24, 0xFF	; 255
    30bc:	9f 4f       	sbci	r25, 0xFF	; 255
    30be:	08 95       	ret

000030c0 <__muluhisi3>:
    30c0:	0e 94 aa 18 	call	0x3154	; 0x3154 <__umulhisi3>
    30c4:	a5 9f       	mul	r26, r21
    30c6:	90 0d       	add	r25, r0
    30c8:	b4 9f       	mul	r27, r20
    30ca:	90 0d       	add	r25, r0
    30cc:	a4 9f       	mul	r26, r20
    30ce:	80 0d       	add	r24, r0
    30d0:	91 1d       	adc	r25, r1
    30d2:	11 24       	eor	r1, r1
    30d4:	08 95       	ret

000030d6 <__mulshisi3>:
    30d6:	b7 ff       	sbrs	r27, 7
    30d8:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__muluhisi3>

000030dc <__mulohisi3>:
    30dc:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__muluhisi3>
    30e0:	82 1b       	sub	r24, r18
    30e2:	93 0b       	sbc	r25, r19
    30e4:	08 95       	ret

000030e6 <__prologue_saves__>:
    30e6:	2f 92       	push	r2
    30e8:	3f 92       	push	r3
    30ea:	4f 92       	push	r4
    30ec:	5f 92       	push	r5
    30ee:	6f 92       	push	r6
    30f0:	7f 92       	push	r7
    30f2:	8f 92       	push	r8
    30f4:	9f 92       	push	r9
    30f6:	af 92       	push	r10
    30f8:	bf 92       	push	r11
    30fa:	cf 92       	push	r12
    30fc:	df 92       	push	r13
    30fe:	ef 92       	push	r14
    3100:	ff 92       	push	r15
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	ca 1b       	sub	r28, r26
    3110:	db 0b       	sbc	r29, r27
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	09 94       	ijmp

0000311e <__epilogue_restores__>:
    311e:	2a 88       	ldd	r2, Y+18	; 0x12
    3120:	39 88       	ldd	r3, Y+17	; 0x11
    3122:	48 88       	ldd	r4, Y+16	; 0x10
    3124:	5f 84       	ldd	r5, Y+15	; 0x0f
    3126:	6e 84       	ldd	r6, Y+14	; 0x0e
    3128:	7d 84       	ldd	r7, Y+13	; 0x0d
    312a:	8c 84       	ldd	r8, Y+12	; 0x0c
    312c:	9b 84       	ldd	r9, Y+11	; 0x0b
    312e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3130:	b9 84       	ldd	r11, Y+9	; 0x09
    3132:	c8 84       	ldd	r12, Y+8	; 0x08
    3134:	df 80       	ldd	r13, Y+7	; 0x07
    3136:	ee 80       	ldd	r14, Y+6	; 0x06
    3138:	fd 80       	ldd	r15, Y+5	; 0x05
    313a:	0c 81       	ldd	r16, Y+4	; 0x04
    313c:	1b 81       	ldd	r17, Y+3	; 0x03
    313e:	aa 81       	ldd	r26, Y+2	; 0x02
    3140:	b9 81       	ldd	r27, Y+1	; 0x01
    3142:	ce 0f       	add	r28, r30
    3144:	d1 1d       	adc	r29, r1
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61
    3150:	ed 01       	movw	r28, r26
    3152:	08 95       	ret

00003154 <__umulhisi3>:
    3154:	a2 9f       	mul	r26, r18
    3156:	b0 01       	movw	r22, r0
    3158:	b3 9f       	mul	r27, r19
    315a:	c0 01       	movw	r24, r0
    315c:	a3 9f       	mul	r26, r19
    315e:	70 0d       	add	r23, r0
    3160:	81 1d       	adc	r24, r1
    3162:	11 24       	eor	r1, r1
    3164:	91 1d       	adc	r25, r1
    3166:	b2 9f       	mul	r27, r18
    3168:	70 0d       	add	r23, r0
    316a:	81 1d       	adc	r24, r1
    316c:	11 24       	eor	r1, r1
    316e:	91 1d       	adc	r25, r1
    3170:	08 95       	ret

00003172 <_exit>:
    3172:	f8 94       	cli

00003174 <__stop_program>:
    3174:	ff cf       	rjmp	.-2      	; 0x3174 <__stop_program>
