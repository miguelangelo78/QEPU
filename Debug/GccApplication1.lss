
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002e56  00002eea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c0  008000c0  00002f4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f4a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00002fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005ade  00000000  00000000  0000321e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f70  00000000  00000000  00008cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cd9  00000000  00000000  00009c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b0c  00000000  00000000  0000a948  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a40  00000000  00000000  0000b454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000032a3  00000000  00000000  0000be94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  0000f137  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      54:	0c 0b       	sbc	r16, r28
      56:	27 0b       	sbc	r18, r23
      58:	4f 0c       	add	r4, r15
      5a:	4f 0c       	add	r4, r15
      5c:	4f 0c       	add	r4, r15
      5e:	4f 0c       	add	r4, r15
      60:	4f 0c       	add	r4, r15
      62:	4f 0c       	add	r4, r15
      64:	4f 0c       	add	r4, r15
      66:	2d 0b       	sbc	r18, r29
      68:	4f 0c       	add	r4, r15
      6a:	4f 0c       	add	r4, r15
      6c:	4f 0c       	add	r4, r15
      6e:	33 0b       	sbc	r19, r19
      70:	3b 0b       	sbc	r19, r27
      72:	43 0b       	sbc	r20, r19
      74:	6a 0b       	sbc	r22, r26
      76:	91 0b       	sbc	r25, r17
      78:	b8 0b       	sbc	r27, r24
      7a:	df 0b       	sbc	r29, r31
      7c:	06 0c       	add	r0, r6
      7e:	2d 0c       	add	r2, r13
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfc>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef512>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates1XEii+0x14>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d6>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef746>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b8>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
      d4:	3f 05       	cpc	r19, r15
      d6:	a8 4c       	sbci	r26, 0xC8	; 200
      d8:	cd b2       	in	r12, 0x1d	; 29
      da:	d4 4e       	sbci	r29, 0xE4	; 228
      dc:	b9 38       	cpi	r27, 0x89	; 137
      de:	36 a9       	ldd	r19, Z+54	; 0x36
      e0:	02 0c       	add	r0, r2
      e2:	50 b9       	out	0x00, r21	; 0
      e4:	91 86       	std	Z+9, r9	; 0x09
      e6:	88 08       	sbc	r8, r8
      e8:	3c a6       	std	Y+44, r3	; 0x2c
      ea:	aa aa       	std	Y+50, r10	; 0x32
      ec:	2a be       	out	0x3a, r2	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 00       	.word	0x003f	; ????

000000f4 <__ctors_start>:
      f4:	3d 09       	sbc	r19, r13

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf e5       	ldi	r28, 0x5F	; 95
      fc:	d4 e0       	ldi	r29, 0x04	; 4
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	10 e0       	ldi	r17, 0x00	; 0
     104:	a0 e6       	ldi	r26, 0x60	; 96
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e6 e5       	ldi	r30, 0x56	; 86
     10a:	fe e2       	ldi	r31, 0x2E	; 46
     10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
     10e:	05 90       	lpm	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	a0 3c       	cpi	r26, 0xC0	; 192
     114:	b1 07       	cpc	r27, r17
     116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>

00000118 <__do_clear_bss>:
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	a0 ec       	ldi	r26, 0xC0	; 192
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
     120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
     122:	a8 3c       	cpi	r26, 0xC8	; 200
     124:	b2 07       	cpc	r27, r18
     126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>

00000128 <__do_global_ctors>:
     128:	10 e0       	ldi	r17, 0x00	; 0
     12a:	c6 ef       	ldi	r28, 0xF6	; 246
     12c:	d0 e0       	ldi	r29, 0x00	; 0
     12e:	04 c0       	rjmp	.+8      	; 0x138 <__do_global_ctors+0x10>
     130:	22 97       	sbiw	r28, 0x02	; 2
     132:	fe 01       	movw	r30, r28
     134:	0e 94 1d 11 	call	0x223a	; 0x223a <__tablejump__>
     138:	c4 3f       	cpi	r28, 0xF4	; 244
     13a:	d1 07       	cpc	r29, r17
     13c:	c9 f7       	brne	.-14     	; 0x130 <__do_global_ctors+0x8>
     13e:	0e 94 42 09 	call	0x1284	; 0x1284 <main>
     142:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	fc 01       	movw	r30, r24
     150:	40 83       	st	Z, r20
     152:	51 83       	std	Z+1, r21	; 0x01
     154:	62 83       	std	Z+2, r22	; 0x02
     156:	73 83       	std	Z+3, r23	; 0x03
     158:	04 83       	std	Z+4, r16	; 0x04
     15a:	15 83       	std	Z+5, r17	; 0x05
     15c:	26 83       	std	Z+6, r18	; 0x06
     15e:	37 83       	std	Z+7, r19	; 0x07
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	08 95       	ret

00000166 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     166:	fc 01       	movw	r30, r24
     168:	10 82       	st	Z, r1
     16a:	11 82       	std	Z+1, r1	; 0x01
     16c:	12 82       	std	Z+2, r1	; 0x02
     16e:	13 82       	std	Z+3, r1	; 0x03
     170:	14 82       	std	Z+4, r1	; 0x04
     172:	15 82       	std	Z+5, r1	; 0x05
     174:	16 82       	std	Z+6, r1	; 0x06
     176:	17 82       	std	Z+7, r1	; 0x07
     178:	08 95       	ret

0000017a <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	68 97       	sbiw	r28, 0x18	; 24
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	5c 01       	movw	r10, r24
     1a0:	09 8b       	std	Y+17, r16	; 0x11
     1a2:	1a 8b       	std	Y+18, r17	; 0x12
     1a4:	2b 8b       	std	Y+19, r18	; 0x13
     1a6:	3c 8b       	std	Y+20, r19	; 0x14
     1a8:	4d 8b       	std	Y+21, r20	; 0x15
     1aa:	5e 8b       	std	Y+22, r21	; 0x16
     1ac:	6f 8b       	std	Y+23, r22	; 0x17
     1ae:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     1b0:	2d 89       	ldd	r18, Y+21	; 0x15
     1b2:	3e 89       	ldd	r19, Y+22	; 0x16
     1b4:	4f 89       	ldd	r20, Y+23	; 0x17
     1b6:	58 8d       	ldd	r21, Y+24	; 0x18
     1b8:	fc 01       	movw	r30, r24
     1ba:	64 81       	ldd	r22, Z+4	; 0x04
     1bc:	75 81       	ldd	r23, Z+5	; 0x05
     1be:	86 81       	ldd	r24, Z+6	; 0x06
     1c0:	97 81       	ldd	r25, Z+7	; 0x07
     1c2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__addsf3>
     1c6:	6b 01       	movw	r12, r22
     1c8:	7c 01       	movw	r14, r24
     1ca:	29 89       	ldd	r18, Y+17	; 0x11
     1cc:	3a 89       	ldd	r19, Y+18	; 0x12
     1ce:	4b 89       	ldd	r20, Y+19	; 0x13
     1d0:	5c 89       	ldd	r21, Y+20	; 0x14
     1d2:	f5 01       	movw	r30, r10
     1d4:	60 81       	ld	r22, Z
     1d6:	71 81       	ldd	r23, Z+1	; 0x01
     1d8:	82 81       	ldd	r24, Z+2	; 0x02
     1da:	93 81       	ldd	r25, Z+3	; 0x03
     1dc:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__addsf3>
     1e0:	ab 01       	movw	r20, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	97 01       	movw	r18, r14
     1e6:	86 01       	movw	r16, r12
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     1f0:	88 e0       	ldi	r24, 0x08	; 8
     1f2:	fe 01       	movw	r30, r28
     1f4:	31 96       	adiw	r30, 0x01	; 1
     1f6:	de 01       	movw	r26, r28
     1f8:	19 96       	adiw	r26, 0x09	; 9
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	8a 95       	dec	r24
     200:	e1 f7       	brne	.-8      	; 0x1fa <_ZN7Complex3addES_+0x80>
     202:	29 85       	ldd	r18, Y+9	; 0x09
     204:	3a 85       	ldd	r19, Y+10	; 0x0a
     206:	4b 85       	ldd	r20, Y+11	; 0x0b
     208:	5c 85       	ldd	r21, Y+12	; 0x0c
     20a:	6d 85       	ldd	r22, Y+13	; 0x0d
     20c:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     20e:	8f 85       	ldd	r24, Y+15	; 0x0f
     210:	98 89       	ldd	r25, Y+16	; 0x10
     212:	68 96       	adiw	r28, 0x18	; 24
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	08 95       	ret

00000234 <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     234:	4f 92       	push	r4
     236:	5f 92       	push	r5
     238:	6f 92       	push	r6
     23a:	7f 92       	push	r7
     23c:	8f 92       	push	r8
     23e:	9f 92       	push	r9
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	a0 97       	sbiw	r28, 0x20	; 32
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	09 8b       	std	Y+17, r16	; 0x11
     266:	1a 8b       	std	Y+18, r17	; 0x12
     268:	2b 8b       	std	Y+19, r18	; 0x13
     26a:	3c 8b       	std	Y+20, r19	; 0x14
     26c:	4d 8b       	std	Y+21, r20	; 0x15
     26e:	5e 8b       	std	Y+22, r21	; 0x16
     270:	6f 8b       	std	Y+23, r22	; 0x17
     272:	78 8f       	std	Y+24, r23	; 0x18
     274:	89 88       	ldd	r8, Y+17	; 0x11
     276:	9a 88       	ldd	r9, Y+18	; 0x12
     278:	ab 88       	ldd	r10, Y+19	; 0x13
     27a:	bc 88       	ldd	r11, Y+20	; 0x14
     27c:	2d 89       	ldd	r18, Y+21	; 0x15
     27e:	3e 89       	ldd	r19, Y+22	; 0x16
     280:	4f 89       	ldd	r20, Y+23	; 0x17
     282:	58 8d       	ldd	r21, Y+24	; 0x18
     284:	2d 8f       	std	Y+29, r18	; 0x1d
     286:	3e 8f       	std	Y+30, r19	; 0x1e
     288:	4f 8f       	std	Y+31, r20	; 0x1f
     28a:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     28c:	fc 01       	movw	r30, r24
     28e:	c0 80       	ld	r12, Z
     290:	d1 80       	ldd	r13, Z+1	; 0x01
     292:	e2 80       	ldd	r14, Z+2	; 0x02
     294:	f3 80       	ldd	r15, Z+3	; 0x03
     296:	24 81       	ldd	r18, Z+4	; 0x04
     298:	35 81       	ldd	r19, Z+5	; 0x05
     29a:	46 81       	ldd	r20, Z+6	; 0x06
     29c:	57 81       	ldd	r21, Z+7	; 0x07
     29e:	29 8f       	std	Y+25, r18	; 0x19
     2a0:	3a 8f       	std	Y+26, r19	; 0x1a
     2a2:	4b 8f       	std	Y+27, r20	; 0x1b
     2a4:	5c 8f       	std	Y+28, r21	; 0x1c
     2a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2aa:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2ac:	58 a1       	ldd	r21, Y+32	; 0x20
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     2b6:	2b 01       	movw	r4, r22
     2b8:	3c 01       	movw	r6, r24
     2ba:	a5 01       	movw	r20, r10
     2bc:	94 01       	movw	r18, r8
     2be:	69 8d       	ldd	r22, Y+25	; 0x19
     2c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2c6:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     2ca:	9b 01       	movw	r18, r22
     2cc:	ac 01       	movw	r20, r24
     2ce:	c3 01       	movw	r24, r6
     2d0:	b2 01       	movw	r22, r4
     2d2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__addsf3>
     2d6:	2b 01       	movw	r4, r22
     2d8:	3c 01       	movw	r6, r24
     2da:	a5 01       	movw	r20, r10
     2dc:	94 01       	movw	r18, r8
     2de:	c7 01       	movw	r24, r14
     2e0:	b6 01       	movw	r22, r12
     2e2:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     2e6:	6b 01       	movw	r12, r22
     2e8:	7c 01       	movw	r14, r24
     2ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2ee:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2f0:	58 a1       	ldd	r21, Y+32	; 0x20
     2f2:	69 8d       	ldd	r22, Y+25	; 0x19
     2f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2fa:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	c7 01       	movw	r24, r14
     304:	b6 01       	movw	r22, r12
     306:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__subsf3>
     30a:	ab 01       	movw	r20, r22
     30c:	bc 01       	movw	r22, r24
     30e:	93 01       	movw	r18, r6
     310:	82 01       	movw	r16, r4
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	de 01       	movw	r26, r28
     322:	19 96       	adiw	r26, 0x09	; 9
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <_ZN7Complex3mulES_+0xf0>
     32c:	29 85       	ldd	r18, Y+9	; 0x09
     32e:	3a 85       	ldd	r19, Y+10	; 0x0a
     330:	4b 85       	ldd	r20, Y+11	; 0x0b
     332:	5c 85       	ldd	r21, Y+12	; 0x0c
     334:	6d 85       	ldd	r22, Y+13	; 0x0d
     336:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     338:	8f 85       	ldd	r24, Y+15	; 0x0f
     33a:	98 89       	ldd	r25, Y+16	; 0x10
     33c:	a0 96       	adiw	r28, 0x20	; 32
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	08 95       	ret

0000036a <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     36a:	fc 01       	movw	r30, r24
     36c:	20 81       	ld	r18, Z
     36e:	31 81       	ldd	r19, Z+1	; 0x01
     370:	42 81       	ldd	r20, Z+2	; 0x02
     372:	53 81       	ldd	r21, Z+3	; 0x03
     374:	64 81       	ldd	r22, Z+4	; 0x04
     376:	75 81       	ldd	r23, Z+5	; 0x05
     378:	86 81       	ldd	r24, Z+6	; 0x06
     37a:	97 81       	ldd	r25, Z+7	; 0x07
     37c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__divsf3>
     380:	0e 94 75 0e 	call	0x1cea	; 0x1cea <atan>
     384:	08 95       	ret

00000386 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     386:	85 e0       	ldi	r24, 0x05	; 5
     388:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     38a:	81 b1       	in	r24, 0x01	; 1
     38c:	8c 7f       	andi	r24, 0xFC	; 252
     38e:	81 b9       	out	0x01, r24	; 1
     390:	08 95       	ret

00000392 <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     392:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     394:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     396:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     398:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     39a:	06 b6       	in	r0, 0x36	; 54
     39c:	07 fe       	sbrs	r0, 7
     39e:	fd cf       	rjmp	.-6      	; 0x39a <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     3a0:	81 b1       	in	r24, 0x01	; 1
     3a2:	88 7f       	andi	r24, 0xF8	; 248
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	09 f0       	breq	.+2      	; 0x3aa <_ZN6EEProm4readEj+0x18>
     3a8:	41 c0       	rjmp	.+130    	; 0x42c <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     3aa:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     3ac:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     3ae:	06 b6       	in	r0, 0x36	; 54
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     3b4:	81 b1       	in	r24, 0x01	; 1
     3b6:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     3b8:	88 31       	cpi	r24, 0x18	; 24
     3ba:	71 f7       	brne	.-36     	; 0x398 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     3bc:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3be:	84 e8       	ldi	r24, 0x84	; 132
     3c0:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3c2:	06 b6       	in	r0, 0x36	; 54
     3c4:	07 fe       	sbrs	r0, 7
     3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3c8:	81 b1       	in	r24, 0x01	; 1
     3ca:	88 7f       	andi	r24, 0xF8	; 248
     3cc:	88 32       	cpi	r24, 0x28	; 40
     3ce:	81 f5       	brne	.+96     	; 0x430 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     3d0:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3d2:	84 e8       	ldi	r24, 0x84	; 132
     3d4:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3d6:	06 b6       	in	r0, 0x36	; 54
     3d8:	07 fe       	sbrs	r0, 7
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3dc:	81 b1       	in	r24, 0x01	; 1
     3de:	88 7f       	andi	r24, 0xF8	; 248
     3e0:	88 32       	cpi	r24, 0x28	; 40
     3e2:	41 f5       	brne	.+80     	; 0x434 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3e4:	84 ea       	ldi	r24, 0xA4	; 164
     3e6:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3e8:	06 b6       	in	r0, 0x36	; 54
     3ea:	07 fe       	sbrs	r0, 7
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     3ee:	81 b1       	in	r24, 0x01	; 1
     3f0:	88 7f       	andi	r24, 0xF8	; 248
     3f2:	80 31       	cpi	r24, 0x10	; 16
     3f4:	09 f5       	brne	.+66     	; 0x438 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     3f6:	81 ea       	ldi	r24, 0xA1	; 161
     3f8:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3fa:	84 e8       	ldi	r24, 0x84	; 132
     3fc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3fe:	06 b6       	in	r0, 0x36	; 54
     400:	07 fe       	sbrs	r0, 7
     402:	fd cf       	rjmp	.-6      	; 0x3fe <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     404:	81 b1       	in	r24, 0x01	; 1
     406:	88 7f       	andi	r24, 0xF8	; 248
     408:	80 34       	cpi	r24, 0x40	; 64
     40a:	c1 f4       	brne	.+48     	; 0x43c <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     40c:	84 e8       	ldi	r24, 0x84	; 132
     40e:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     410:	06 b6       	in	r0, 0x36	; 54
     412:	07 fe       	sbrs	r0, 7
     414:	fd cf       	rjmp	.-6      	; 0x410 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     416:	81 b1       	in	r24, 0x01	; 1
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	88 35       	cpi	r24, 0x58	; 88
     41c:	89 f4       	brne	.+34     	; 0x440 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     41e:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     420:	94 e9       	ldi	r25, 0x94	; 148
     422:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     424:	06 b6       	in	r0, 0x36	; 54
     426:	04 fc       	sbrc	r0, 4
     428:	fd cf       	rjmp	.-6      	; 0x424 <_ZN6EEProm4readEj+0x92>
     42a:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     440:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     442:	08 95       	ret

00000444 <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	c4 56       	subi	r28, 0x64	; 100
     45a:	d1 09       	sbc	r29, r1
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	6c 01       	movw	r12, r24
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     472:	b8 01       	movw	r22, r16
     474:	c6 01       	movw	r24, r12
     476:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN6EEProm4readEj>
     47a:	f7 01       	movw	r30, r14
     47c:	81 93       	st	Z+, r24
     47e:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     480:	8f 3f       	cpi	r24, 0xFF	; 255
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	32 97       	sbiw	r30, 0x02	; 2
     486:	20 81       	ld	r18, Z
     488:	2f 3f       	cpi	r18, 0xFF	; 255
     48a:	61 f4       	brne	.+24     	; 0x4a4 <__stack+0x45>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	20 81       	ld	r18, Z
     490:	2f 3f       	cpi	r18, 0xFF	; 255
     492:	41 f4       	brne	.+16     	; 0x4a4 <__stack+0x45>
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	20 81       	ld	r18, Z
     498:	2f 3f       	cpi	r18, 0xFF	; 255
     49a:	21 f4       	brne	.+8      	; 0x4a4 <__stack+0x45>
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	8f 3f       	cpi	r24, 0xFF	; 255
     4a2:	19 f0       	breq	.+6      	; 0x4aa <__stack+0x4b>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4a4:	0f 5f       	subi	r16, 0xFF	; 255
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     4a8:	e4 cf       	rjmp	.-56     	; 0x472 <__stack+0x13>
	return eeprom_mem;
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	cc 59       	subi	r28, 0x9C	; 156
     4b0:	df 4f       	sbci	r29, 0xFF	; 255
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret

000004ce <_Z12print_statesiP7ComplexPc>:
Gates::Gates(){setup_seed();}

Serial s;
QEPU::Utils u;

void print_states(int qb_count,Complex * vec,char* message){
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	7c 01       	movw	r14, r24
     4dc:	06 2f       	mov	r16, r22
     4de:	17 2f       	mov	r17, r23
	s.writestrln(message);
     4e0:	ba 01       	movw	r22, r20
     4e2:	81 ec       	ldi	r24, 0xC1	; 193
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count*2;i++){
     4ea:	ee 0c       	add	r14, r14
     4ec:	ff 1c       	adc	r15, r15
     4ee:	1e 14       	cp	r1, r14
     4f0:	1f 04       	cpc	r1, r15
     4f2:	0c f0       	brlt	.+2      	; 0x4f6 <_Z12print_statesiP7ComplexPc+0x28>
     4f4:	47 c0       	rjmp	.+142    	; 0x584 <_Z12print_statesiP7ComplexPc+0xb6>
     4f6:	c0 2f       	mov	r28, r16
     4f8:	d1 2f       	mov	r29, r17
     4fa:	00 e0       	ldi	r16, 0x00	; 0
     4fc:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
     4fe:	6a e6       	ldi	r22, 0x6A	; 106
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	81 ec       	ldi	r24, 0xC1	; 193
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN6Serial8writestrEPc>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	4a e7       	ldi	r20, 0x7A	; 122
     510:	54 e4       	ldi	r21, 0x44	; 68
     512:	68 81       	ld	r22, Y
     514:	79 81       	ldd	r23, Y+1	; 0x01
     516:	8a 81       	ldd	r24, Y+2	; 0x02
     518:	9b 81       	ldd	r25, Y+3	; 0x03
     51a:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     51e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__fixsfsi>
     522:	80 ec       	ldi	r24, 0xC0	; 192
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5Utils7int2strEi>
     52a:	bc 01       	movw	r22, r24
     52c:	81 ec       	ldi	r24, 0xC1	; 193
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
     534:	6e e6       	ldi	r22, 0x6E	; 110
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	81 ec       	ldi	r24, 0xC1	; 193
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN6Serial8writestrEPc>
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	4a e7       	ldi	r20, 0x7A	; 122
     546:	54 e4       	ldi	r21, 0x44	; 68
     548:	6c 81       	ldd	r22, Y+4	; 0x04
     54a:	7d 81       	ldd	r23, Y+5	; 0x05
     54c:	8e 81       	ldd	r24, Y+6	; 0x06
     54e:	9f 81       	ldd	r25, Y+7	; 0x07
     550:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     554:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__fixsfsi>
     558:	80 ec       	ldi	r24, 0xC0	; 192
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5Utils7int2strEi>
     560:	bc 01       	movw	r22, r24
     562:	81 ec       	ldi	r24, 0xC1	; 193
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     56a:	6f ea       	ldi	r22, 0xAF	; 175
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	81 ec       	ldi	r24, 0xC1	; 193
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <_ZN6Serial10writestrlnEPc>
Serial s;
QEPU::Utils u;

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count*2;i++){
     576:	0f 5f       	subi	r16, 0xFF	; 255
     578:	1f 4f       	sbci	r17, 0xFF	; 255
     57a:	28 96       	adiw	r28, 0x08	; 8
     57c:	0e 15       	cp	r16, r14
     57e:	1f 05       	cpc	r17, r15
     580:	09 f0       	breq	.+2      	; 0x584 <_Z12print_statesiP7ComplexPc+0xb6>
     582:	bd cf       	rjmp	.-134    	; 0x4fe <_Z12print_statesiP7ComplexPc+0x30>
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	08 95       	ret

00000592 <_ZN5Gates10setup_seedEv>:

void Gates::setup_seed(){
     592:	cf 93       	push	r28
	unsigned char oldADMUX = ADMUX;
     594:	c7 b1       	in	r28, 0x07	; 7
	ADMUX |=  _BV(MUX0); //choose ADC1 on PB2
     596:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA |= _BV(ADPS2) |_BV(ADPS1) |_BV(ADPS0); //set prescaler to max value, 128
     598:	86 b1       	in	r24, 0x06	; 6
     59a:	87 60       	ori	r24, 0x07	; 7
     59c:	86 b9       	out	0x06, r24	; 6

	ADCSRA |= _BV(ADEN); //enable the ADC
     59e:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= _BV(ADSC);//start conversion
     5a0:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & _BV(ADSC)); //wait until the hardware clears the flag. Note semicolon!
     5a2:	36 99       	sbic	0x06, 6	; 6
     5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <_ZN5Gates10setup_seedEv+0x10>

	unsigned char byte1 = ADCL;
     5a6:	24 b1       	in	r18, 0x04	; 4

	ADCSRA |= _BV(ADSC);//start conversion
     5a8:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & _BV(ADSC)); //wait again note semicolon!
     5aa:	36 99       	sbic	0x06, 6	; 6
     5ac:	fe cf       	rjmp	.-4      	; 0x5aa <_ZN5Gates10setup_seedEv+0x18>

	unsigned char byte2 = ADCL;
     5ae:	84 b1       	in	r24, 0x04	; 4

	unsigned int seed = byte1 << 8 | byte2;
     5b0:	90 e0       	ldi	r25, 0x00	; 0

	srand(seed);
     5b2:	92 2b       	or	r25, r18
     5b4:	0e 94 9b 12 	call	0x2536	; 0x2536 <srand>

	ADCSRA &= ~_BV(ADEN); //disable ADC
     5b8:	37 98       	cbi	0x06, 7	; 6

	ADMUX = oldADMUX;
     5ba:	c7 b9       	out	0x07, r28	; 7
}
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <_ZN5GatesC1Ev>:
#include "gates.h"
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
Gates::Gates(){setup_seed();}
     5c0:	0e 94 c9 02 	call	0x592	; 0x592 <_ZN5Gates10setup_seedEv>
     5c4:	08 95       	ret

000005c6 <_ZN5Gates9kroneckerEP7Complexi>:
int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
	return result;
}

Complex * Gates::kronecker(Complex * vec,int qb_count){
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	8b 01       	movw	r16, r22
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     5d0:	14 16       	cp	r1, r20
     5d2:	15 06       	cpc	r1, r21
     5d4:	64 f4       	brge	.+24     	; 0x5ee <_ZN5Gates9kroneckerEP7Complexi+0x28>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	2f 5f       	subi	r18, 0xFF	; 255
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	24 17       	cp	r18, r20
     5e8:	35 07       	cpc	r19, r21
     5ea:	c9 f7       	brne	.-14     	; 0x5de <_ZN5Gates9kroneckerEP7Complexi+0x18>
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <_ZN5Gates9kroneckerEP7Complexi+0x2c>
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
	return result;
}

Complex * Gates::kronecker(Complex * vec,int qb_count){
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	0e 94 21 11 	call	0x2242	; 0x2242 <malloc>
     602:	ec 01       	movw	r28, r24
	print_states(2,vec,"Before: ");
     604:	45 e7       	ldi	r20, 0x75	; 117
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	b8 01       	movw	r22, r16
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>
	// Vec[2]=Alpha2 Vec[3]=Beta2
	// kronvec[0]=vec[0]*vec[2] kronvec[1]=vec[0]*vec[3]
	// kronvec[2]=vec[1]*vec[2] kronvec[3]=vec[1]*vec[3]
	
	return kronvec;
}
     612:	ce 01       	movw	r24, r28
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	08 95       	ret

0000061e <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     61e:	2f 92       	push	r2
     620:	3f 92       	push	r3
     622:	4f 92       	push	r4
     624:	5f 92       	push	r5
     626:	6f 92       	push	r6
     628:	7f 92       	push	r7
     62a:	8f 92       	push	r8
     62c:	9f 92       	push	r9
     62e:	af 92       	push	r10
     630:	bf 92       	push	r11
     632:	cf 92       	push	r12
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	28 97       	sbiw	r28, 0x08	; 8
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	9e 83       	std	Y+6, r25	; 0x06
     654:	8d 83       	std	Y+5, r24	; 0x05
     656:	7a 83       	std	Y+2, r23	; 0x02
     658:	69 83       	std	Y+1, r22	; 0x01
     65a:	04 2f       	mov	r16, r20
     65c:	15 2f       	mov	r17, r21
     65e:	c2 2e       	mov	r12, r18
     660:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     662:	cb 01       	movw	r24, r22
     664:	82 95       	swap	r24
     666:	92 95       	swap	r25
     668:	90 7f       	andi	r25, 0xF0	; 240
     66a:	98 27       	eor	r25, r24
     66c:	80 7f       	andi	r24, 0xF0	; 240
     66e:	98 27       	eor	r25, r24
     670:	0e 94 21 11 	call	0x2242	; 0x2242 <malloc>
     674:	8b 83       	std	Y+3, r24	; 0x03
     676:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     678:	29 80       	ldd	r2, Y+1	; 0x01
     67a:	3a 80       	ldd	r3, Y+2	; 0x02
     67c:	22 0c       	add	r2, r2
     67e:	33 1c       	adc	r3, r3
     680:	12 14       	cp	r1, r2
     682:	13 04       	cpc	r1, r3
     684:	0c f0       	brlt	.+2      	; 0x688 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     686:	ac c0       	rjmp	.+344    	; 0x7e0 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     688:	a8 2e       	mov	r10, r24
     68a:	b9 2e       	mov	r11, r25
     68c:	e0 2e       	mov	r14, r16
     68e:	f1 2e       	mov	r15, r17
     690:	0c 2d       	mov	r16, r12
     692:	1d 2d       	mov	r17, r13
     694:	81 2c       	mov	r8, r1
     696:	91 2c       	mov	r9, r1
     698:	b8 86       	std	Y+8, r11	; 0x08
     69a:	af 82       	std	Y+7, r10	; 0x07
     69c:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     69e:	f7 01       	movw	r30, r14
     6a0:	41 90       	ld	r4, Z+
     6a2:	51 90       	ld	r5, Z+
     6a4:	7f 01       	movw	r14, r30
     6a6:	66 24       	eor	r6, r6
     6a8:	57 fc       	sbrc	r5, 7
     6aa:	60 94       	com	r6
     6ac:	76 2c       	mov	r7, r6
     6ae:	c3 01       	movw	r24, r6
     6b0:	b2 01       	movw	r22, r4
     6b2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__floatsisf>
     6b6:	2b ed       	ldi	r18, 0xDB	; 219
     6b8:	3f e0       	ldi	r19, 0x0F	; 15
     6ba:	49 e4       	ldi	r20, 0x49	; 73
     6bc:	50 e4       	ldi	r21, 0x40	; 64
     6be:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	44 eb       	ldi	r20, 0xB4	; 180
     6c8:	53 e4       	ldi	r21, 0x43	; 67
     6ca:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__divsf3>
     6ce:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <cos>
     6d2:	ef 81       	ldd	r30, Y+7	; 0x07
     6d4:	f8 85       	ldd	r31, Y+8	; 0x08
     6d6:	60 83       	st	Z, r22
     6d8:	71 83       	std	Z+1, r23	; 0x01
     6da:	82 83       	std	Z+2, r24	; 0x02
     6dc:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     6de:	c3 01       	movw	r24, r6
     6e0:	b2 01       	movw	r22, r4
     6e2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__floatsisf>
     6e6:	2b ed       	ldi	r18, 0xDB	; 219
     6e8:	3f e0       	ldi	r19, 0x0F	; 15
     6ea:	49 e4       	ldi	r20, 0x49	; 73
     6ec:	50 e4       	ldi	r21, 0x40	; 64
     6ee:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	44 eb       	ldi	r20, 0xB4	; 180
     6f8:	53 e4       	ldi	r21, 0x43	; 67
     6fa:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__divsf3>
     6fe:	0e 94 aa 10 	call	0x2154	; 0x2154 <sin>
     702:	2b 01       	movw	r4, r22
     704:	3c 01       	movw	r6, r24
     706:	58 01       	movw	r10, r16
     708:	f8 01       	movw	r30, r16
     70a:	61 91       	ld	r22, Z+
     70c:	71 91       	ld	r23, Z+
     70e:	8f 01       	movw	r16, r30
     710:	88 27       	eor	r24, r24
     712:	77 fd       	sbrc	r23, 7
     714:	80 95       	com	r24
     716:	98 2f       	mov	r25, r24
     718:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__floatsisf>
     71c:	2b ed       	ldi	r18, 0xDB	; 219
     71e:	3f e0       	ldi	r19, 0x0F	; 15
     720:	49 e4       	ldi	r20, 0x49	; 73
     722:	50 e4       	ldi	r21, 0x40	; 64
     724:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	44 e3       	ldi	r20, 0x34	; 52
     72e:	53 e4       	ldi	r21, 0x43	; 67
     730:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__divsf3>
     734:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <cos>
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	c3 01       	movw	r24, r6
     73e:	b2 01       	movw	r22, r4
     740:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     744:	ef 81       	ldd	r30, Y+7	; 0x07
     746:	f8 85       	ldd	r31, Y+8	; 0x08
     748:	60 87       	std	Z+8, r22	; 0x08
     74a:	71 87       	std	Z+9, r23	; 0x09
     74c:	82 87       	std	Z+10, r24	; 0x0a
     74e:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     750:	f6 01       	movw	r30, r12
     752:	60 81       	ld	r22, Z
     754:	71 81       	ldd	r23, Z+1	; 0x01
     756:	88 27       	eor	r24, r24
     758:	77 fd       	sbrc	r23, 7
     75a:	80 95       	com	r24
     75c:	98 2f       	mov	r25, r24
     75e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__floatsisf>
     762:	2b ed       	ldi	r18, 0xDB	; 219
     764:	3f e0       	ldi	r19, 0x0F	; 15
     766:	49 e4       	ldi	r20, 0x49	; 73
     768:	50 e4       	ldi	r21, 0x40	; 64
     76a:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	44 eb       	ldi	r20, 0xB4	; 180
     774:	53 e4       	ldi	r21, 0x43	; 67
     776:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__divsf3>
     77a:	0e 94 aa 10 	call	0x2154	; 0x2154 <sin>
     77e:	2b 01       	movw	r4, r22
     780:	3c 01       	movw	r6, r24
     782:	f5 01       	movw	r30, r10
     784:	60 81       	ld	r22, Z
     786:	71 81       	ldd	r23, Z+1	; 0x01
     788:	88 27       	eor	r24, r24
     78a:	77 fd       	sbrc	r23, 7
     78c:	80 95       	com	r24
     78e:	98 2f       	mov	r25, r24
     790:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__floatsisf>
     794:	2b ed       	ldi	r18, 0xDB	; 219
     796:	3f e0       	ldi	r19, 0x0F	; 15
     798:	49 e4       	ldi	r20, 0x49	; 73
     79a:	50 e4       	ldi	r21, 0x40	; 64
     79c:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	44 e3       	ldi	r20, 0x34	; 52
     7a6:	53 e4       	ldi	r21, 0x43	; 67
     7a8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__divsf3>
     7ac:	0e 94 aa 10 	call	0x2154	; 0x2154 <sin>
     7b0:	9b 01       	movw	r18, r22
     7b2:	ac 01       	movw	r20, r24
     7b4:	c3 01       	movw	r24, r6
     7b6:	b2 01       	movw	r22, r4
     7b8:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     7bc:	ef 81       	ldd	r30, Y+7	; 0x07
     7be:	f8 85       	ldd	r31, Y+8	; 0x08
     7c0:	64 87       	std	Z+12, r22	; 0x0c
     7c2:	75 87       	std	Z+13, r23	; 0x0d
     7c4:	86 87       	std	Z+14, r24	; 0x0e
     7c6:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     7c8:	f2 e0       	ldi	r31, 0x02	; 2
     7ca:	8f 0e       	add	r8, r31
     7cc:	91 1c       	adc	r9, r1
     7ce:	8f 81       	ldd	r24, Y+7	; 0x07
     7d0:	98 85       	ldd	r25, Y+8	; 0x08
     7d2:	40 96       	adiw	r24, 0x10	; 16
     7d4:	98 87       	std	Y+8, r25	; 0x08
     7d6:	8f 83       	std	Y+7, r24	; 0x07
     7d8:	82 14       	cp	r8, r2
     7da:	93 04       	cpc	r9, r3
     7dc:	0c f4       	brge	.+2      	; 0x7e0 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     7de:	5e cf       	rjmp	.-324    	; 0x69c <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
	return kronecker(vec,qb_count); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     7e0:	49 81       	ldd	r20, Y+1	; 0x01
     7e2:	5a 81       	ldd	r21, Y+2	; 0x02
     7e4:	6b 81       	ldd	r22, Y+3	; 0x03
     7e6:	7c 81       	ldd	r23, Y+4	; 0x04
     7e8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ea:	9e 81       	ldd	r25, Y+6	; 0x06
     7ec:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN5Gates9kroneckerEP7Complexi>
}
     7f0:	28 96       	adiw	r28, 0x08	; 8
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	bf 90       	pop	r11
     80e:	af 90       	pop	r10
     810:	9f 90       	pop	r9
     812:	8f 90       	pop	r8
     814:	7f 90       	pop	r7
     816:	6f 90       	pop	r6
     818:	5f 90       	pop	r5
     81a:	4f 90       	pop	r4
     81c:	3f 90       	pop	r3
     81e:	2f 90       	pop	r2
     820:	08 95       	ret

00000822 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	8b 01       	movw	r16, r22
     830:	7a 01       	movw	r14, r20
	int* newthephi=(int*)malloc(sizeof(int)*2);
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 21 11 	call	0x2242	; 0x2242 <malloc>
     83a:	ec 01       	movw	r28, r24
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
     83c:	f8 01       	movw	r30, r16
     83e:	60 81       	ld	r22, Z
     840:	71 81       	ldd	r23, Z+1	; 0x01
     842:	82 81       	ldd	r24, Z+2	; 0x02
     844:	93 81       	ldd	r25, Z+3	; 0x03
     846:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <acos>
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	44 eb       	ldi	r20, 0xB4	; 180
     850:	53 e4       	ldi	r21, 0x43	; 67
     852:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     856:	2b ed       	ldi	r18, 0xDB	; 219
     858:	3f e0       	ldi	r19, 0x0F	; 15
     85a:	49 e4       	ldi	r20, 0x49	; 73
     85c:	50 e4       	ldi	r21, 0x40	; 64
     85e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__divsf3>
     862:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__fixsfsi>
     866:	79 83       	std	Y+1, r23	; 0x01
     868:	68 83       	st	Y, r22
	newthephi[1]=(180*vec[1].arg())/M_PI;
     86a:	c8 01       	movw	r24, r16
     86c:	08 96       	adiw	r24, 0x08	; 8
     86e:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN7Complex3argEv>
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	44 e3       	ldi	r20, 0x34	; 52
     878:	53 e4       	ldi	r21, 0x43	; 67
     87a:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3>
     87e:	2b ed       	ldi	r18, 0xDB	; 219
     880:	3f e0       	ldi	r19, 0x0F	; 15
     882:	49 e4       	ldi	r20, 0x49	; 73
     884:	50 e4       	ldi	r21, 0x40	; 64
     886:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__divsf3>
     88a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__fixsfsi>
     88e:	7b 83       	std	Y+3, r23	; 0x03
     890:	6a 83       	std	Y+2, r22	; 0x02
	
	
	print_states(qb_count,vec,"After: ");
     892:	4e e7       	ldi	r20, 0x7E	; 126
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	b8 01       	movw	r22, r16
     898:	c7 01       	movw	r24, r14
     89a:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     89e:	ce 01       	movw	r24, r28
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     8ae:	2f 92       	push	r2
     8b0:	3f 92       	push	r3
     8b2:	4f 92       	push	r4
     8b4:	5f 92       	push	r5
     8b6:	6f 92       	push	r6
     8b8:	7f 92       	push	r7
     8ba:	8f 92       	push	r8
     8bc:	9f 92       	push	r9
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	60 97       	sbiw	r28, 0x10	; 16
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	4b 01       	movw	r8, r22
     8e4:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     8e6:	80 e1       	ldi	r24, 0x10	; 16
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 21 11 	call	0x2242	; 0x2242 <malloc>
     8ee:	38 2e       	mov	r3, r24
     8f0:	29 2e       	mov	r2, r25
     8f2:	c8 2e       	mov	r12, r24
     8f4:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     8f6:	a1 2c       	mov	r10, r1
     8f8:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     8fa:	24 01       	movw	r4, r8
     8fc:	88 e0       	ldi	r24, 0x08	; 8
     8fe:	48 0e       	add	r4, r24
     900:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     902:	ce 01       	movw	r24, r28
     904:	09 96       	adiw	r24, 0x09	; 9
     906:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     90a:	75 01       	movw	r14, r10
     90c:	ee 0c       	add	r14, r14
     90e:	ff 1c       	adc	r15, r15
     910:	ee 0c       	add	r14, r14
     912:	ff 1c       	adc	r15, r15
     914:	ee 0c       	add	r14, r14
     916:	ff 1c       	adc	r15, r15
     918:	e6 0c       	add	r14, r6
     91a:	f7 1c       	adc	r15, r7
     91c:	d7 01       	movw	r26, r14
     91e:	0c 91       	ld	r16, X
     920:	11 96       	adiw	r26, 0x01	; 1
     922:	1c 91       	ld	r17, X
     924:	11 97       	sbiw	r26, 0x01	; 1
     926:	12 96       	adiw	r26, 0x02	; 2
     928:	2c 91       	ld	r18, X
     92a:	12 97       	sbiw	r26, 0x02	; 2
     92c:	13 96       	adiw	r26, 0x03	; 3
     92e:	3c 91       	ld	r19, X
     930:	13 97       	sbiw	r26, 0x03	; 3
     932:	14 96       	adiw	r26, 0x04	; 4
     934:	4c 91       	ld	r20, X
     936:	14 97       	sbiw	r26, 0x04	; 4
     938:	15 96       	adiw	r26, 0x05	; 5
     93a:	5c 91       	ld	r21, X
     93c:	15 97       	sbiw	r26, 0x05	; 5
     93e:	16 96       	adiw	r26, 0x06	; 6
     940:	6c 91       	ld	r22, X
     942:	16 97       	sbiw	r26, 0x06	; 6
     944:	17 96       	adiw	r26, 0x07	; 7
     946:	7c 91       	ld	r23, X
     948:	c4 01       	movw	r24, r8
     94a:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     94e:	02 2f       	mov	r16, r18
     950:	13 2f       	mov	r17, r19
     952:	24 2f       	mov	r18, r20
     954:	35 2f       	mov	r19, r21
     956:	46 2f       	mov	r20, r22
     958:	57 2f       	mov	r21, r23
     95a:	68 2f       	mov	r22, r24
     95c:	79 2f       	mov	r23, r25
     95e:	ce 01       	movw	r24, r28
     960:	09 96       	adiw	r24, 0x09	; 9
     962:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     966:	29 87       	std	Y+9, r18	; 0x09
     968:	3a 87       	std	Y+10, r19	; 0x0a
     96a:	4b 87       	std	Y+11, r20	; 0x0b
     96c:	5c 87       	std	Y+12, r21	; 0x0c
     96e:	6d 87       	std	Y+13, r22	; 0x0d
     970:	7e 87       	std	Y+14, r23	; 0x0e
     972:	8f 87       	std	Y+15, r24	; 0x0f
     974:	98 8b       	std	Y+16, r25	; 0x10
     976:	f7 01       	movw	r30, r14
     978:	70 96       	adiw	r30, 0x10	; 16
     97a:	d7 01       	movw	r26, r14
     97c:	50 96       	adiw	r26, 0x10	; 16
     97e:	0c 91       	ld	r16, X
     980:	11 81       	ldd	r17, Z+1	; 0x01
     982:	22 81       	ldd	r18, Z+2	; 0x02
     984:	33 81       	ldd	r19, Z+3	; 0x03
     986:	44 81       	ldd	r20, Z+4	; 0x04
     988:	55 81       	ldd	r21, Z+5	; 0x05
     98a:	66 81       	ldd	r22, Z+6	; 0x06
     98c:	77 81       	ldd	r23, Z+7	; 0x07
     98e:	c2 01       	movw	r24, r4
     990:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     994:	02 2f       	mov	r16, r18
     996:	13 2f       	mov	r17, r19
     998:	24 2f       	mov	r18, r20
     99a:	35 2f       	mov	r19, r21
     99c:	46 2f       	mov	r20, r22
     99e:	57 2f       	mov	r21, r23
     9a0:	68 2f       	mov	r22, r24
     9a2:	79 2f       	mov	r23, r25
     9a4:	ce 01       	movw	r24, r28
     9a6:	09 96       	adiw	r24, 0x09	; 9
     9a8:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     9ac:	29 87       	std	Y+9, r18	; 0x09
     9ae:	3a 87       	std	Y+10, r19	; 0x0a
     9b0:	4b 87       	std	Y+11, r20	; 0x0b
     9b2:	5c 87       	std	Y+12, r21	; 0x0c
     9b4:	6d 87       	std	Y+13, r22	; 0x0d
     9b6:	7e 87       	std	Y+14, r23	; 0x0e
     9b8:	8f 87       	std	Y+15, r24	; 0x0f
     9ba:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     9bc:	89 85       	ldd	r24, Y+9	; 0x09
     9be:	9a 85       	ldd	r25, Y+10	; 0x0a
     9c0:	ab 85       	ldd	r26, Y+11	; 0x0b
     9c2:	bc 85       	ldd	r27, Y+12	; 0x0c
     9c4:	f6 01       	movw	r30, r12
     9c6:	80 83       	st	Z, r24
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	a2 83       	std	Z+2, r26	; 0x02
     9cc:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     9ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     9d0:	9e 85       	ldd	r25, Y+14	; 0x0e
     9d2:	af 85       	ldd	r26, Y+15	; 0x0f
     9d4:	b8 89       	ldd	r27, Y+16	; 0x10
     9d6:	84 83       	std	Z+4, r24	; 0x04
     9d8:	95 83       	std	Z+5, r25	; 0x05
     9da:	a6 83       	std	Z+6, r26	; 0x06
     9dc:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     9de:	ff ef       	ldi	r31, 0xFF	; 255
     9e0:	af 1a       	sub	r10, r31
     9e2:	bf 0a       	sbc	r11, r31
     9e4:	88 e0       	ldi	r24, 0x08	; 8
     9e6:	c8 0e       	add	r12, r24
     9e8:	d1 1c       	adc	r13, r1
     9ea:	a2 e0       	ldi	r26, 0x02	; 2
     9ec:	aa 16       	cp	r10, r26
     9ee:	b1 04       	cpc	r11, r1
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     9f2:	87 cf       	rjmp	.-242    	; 0x902 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     9f4:	83 2d       	mov	r24, r3
     9f6:	92 2d       	mov	r25, r2
     9f8:	60 96       	adiw	r28, 0x10	; 16
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	bf 90       	pop	r11
     a16:	af 90       	pop	r10
     a18:	9f 90       	pop	r9
     a1a:	8f 90       	pop	r8
     a1c:	7f 90       	pop	r7
     a1e:	6f 90       	pop	r6
     a20:	5f 90       	pop	r5
     a22:	4f 90       	pop	r4
     a24:	3f 90       	pop	r3
     a26:	2f 90       	pop	r2
     a28:	08 95       	ret

00000a2a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     a2a:	2f 92       	push	r2
     a2c:	3f 92       	push	r3
     a2e:	4f 92       	push	r4
     a30:	5f 92       	push	r5
     a32:	6f 92       	push	r6
     a34:	7f 92       	push	r7
     a36:	8f 92       	push	r8
     a38:	9f 92       	push	r9
     a3a:	af 92       	push	r10
     a3c:	bf 92       	push	r11
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	64 97       	sbiw	r28, 0x14	; 20
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	3b 01       	movw	r6, r22
     a60:	e4 2e       	mov	r14, r20
     a62:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     a64:	80 e2       	ldi	r24, 0x20	; 32
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 21 11 	call	0x2242	; 0x2242 <malloc>
     a6c:	8b 8b       	std	Y+19, r24	; 0x13
     a6e:	9c 8b       	std	Y+20, r25	; 0x14
     a70:	48 2e       	mov	r4, r24
     a72:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     a74:	81 2c       	mov	r8, r1
     a76:	91 2c       	mov	r9, r1
     a78:	e9 8a       	std	Y+17, r14	; 0x11
     a7a:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     a7c:	21 2c       	mov	r2, r1
     a7e:	31 2c       	mov	r3, r1
     a80:	ce 01       	movw	r24, r28
     a82:	09 96       	adiw	r24, 0x09	; 9
     a84:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
     a88:	c9 88       	ldd	r12, Y+17	; 0x11
     a8a:	da 88       	ldd	r13, Y+18	; 0x12
     a8c:	e2 2c       	mov	r14, r2
     a8e:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     a90:	54 01       	movw	r10, r8
     a92:	aa 0c       	add	r10, r10
     a94:	bb 1c       	adc	r11, r11
     a96:	aa 0c       	add	r10, r10
     a98:	bb 1c       	adc	r11, r11
     a9a:	aa 0c       	add	r10, r10
     a9c:	bb 1c       	adc	r11, r11
     a9e:	f5 01       	movw	r30, r10
     aa0:	ec 0d       	add	r30, r12
     aa2:	fd 1d       	adc	r31, r13
     aa4:	00 81       	ld	r16, Z
     aa6:	11 81       	ldd	r17, Z+1	; 0x01
     aa8:	22 81       	ldd	r18, Z+2	; 0x02
     aaa:	33 81       	ldd	r19, Z+3	; 0x03
     aac:	44 81       	ldd	r20, Z+4	; 0x04
     aae:	55 81       	ldd	r21, Z+5	; 0x05
     ab0:	66 81       	ldd	r22, Z+6	; 0x06
     ab2:	77 81       	ldd	r23, Z+7	; 0x07
     ab4:	c3 01       	movw	r24, r6
     ab6:	8e 0d       	add	r24, r14
     ab8:	9f 1d       	adc	r25, r15
     aba:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     abe:	29 83       	std	Y+1, r18	; 0x01
     ac0:	3a 83       	std	Y+2, r19	; 0x02
     ac2:	4b 83       	std	Y+3, r20	; 0x03
     ac4:	5c 83       	std	Y+4, r21	; 0x04
     ac6:	6d 83       	std	Y+5, r22	; 0x05
     ac8:	7e 83       	std	Y+6, r23	; 0x06
     aca:	8f 83       	std	Y+7, r24	; 0x07
     acc:	98 87       	std	Y+8, r25	; 0x08
     ace:	02 2f       	mov	r16, r18
     ad0:	13 2f       	mov	r17, r19
     ad2:	24 2f       	mov	r18, r20
     ad4:	35 2f       	mov	r19, r21
     ad6:	46 2f       	mov	r20, r22
     ad8:	57 2f       	mov	r21, r23
     ada:	68 2f       	mov	r22, r24
     adc:	79 2f       	mov	r23, r25
     ade:	ce 01       	movw	r24, r28
     ae0:	09 96       	adiw	r24, 0x09	; 9
     ae2:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     ae6:	29 87       	std	Y+9, r18	; 0x09
     ae8:	3a 87       	std	Y+10, r19	; 0x0a
     aea:	4b 87       	std	Y+11, r20	; 0x0b
     aec:	5c 87       	std	Y+12, r21	; 0x0c
     aee:	6d 87       	std	Y+13, r22	; 0x0d
     af0:	7e 87       	std	Y+14, r23	; 0x0e
     af2:	8f 87       	std	Y+15, r24	; 0x0f
     af4:	98 8b       	std	Y+16, r25	; 0x10
     af6:	88 e0       	ldi	r24, 0x08	; 8
     af8:	e8 0e       	add	r14, r24
     afa:	f1 1c       	adc	r15, r1
     afc:	e0 e2       	ldi	r30, 0x20	; 32
     afe:	ce 0e       	add	r12, r30
     b00:	d1 1c       	adc	r13, r1
     b02:	f0 e2       	ldi	r31, 0x20	; 32
     b04:	ef 16       	cp	r14, r31
     b06:	f1 04       	cpc	r15, r1
     b08:	51 f6       	brne	.-108    	; 0xa9e <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
     b0a:	89 85       	ldd	r24, Y+9	; 0x09
     b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b0e:	ab 85       	ldd	r26, Y+11	; 0x0b
     b10:	bc 85       	ldd	r27, Y+12	; 0x0c
     b12:	f2 01       	movw	r30, r4
     b14:	80 83       	st	Z, r24
     b16:	91 83       	std	Z+1, r25	; 0x01
     b18:	a2 83       	std	Z+2, r26	; 0x02
     b1a:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b20:	af 85       	ldd	r26, Y+15	; 0x0f
     b22:	b8 89       	ldd	r27, Y+16	; 0x10
     b24:	84 83       	std	Z+4, r24	; 0x04
     b26:	95 83       	std	Z+5, r25	; 0x05
     b28:	a6 83       	std	Z+6, r26	; 0x06
     b2a:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     b2c:	ff ef       	ldi	r31, 0xFF	; 255
     b2e:	8f 1a       	sub	r8, r31
     b30:	9f 0a       	sbc	r9, r31
     b32:	88 e0       	ldi	r24, 0x08	; 8
     b34:	48 0e       	add	r4, r24
     b36:	51 1c       	adc	r5, r1
     b38:	e4 e0       	ldi	r30, 0x04	; 4
     b3a:	8e 16       	cp	r8, r30
     b3c:	91 04       	cpc	r9, r1
     b3e:	09 f0       	breq	.+2      	; 0xb42 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
     b40:	9f cf       	rjmp	.-194    	; 0xa80 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     b42:	8b 89       	ldd	r24, Y+19	; 0x13
     b44:	9c 89       	ldd	r25, Y+20	; 0x14
     b46:	64 96       	adiw	r28, 0x14	; 20
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	bf 90       	pop	r11
     b64:	af 90       	pop	r10
     b66:	9f 90       	pop	r9
     b68:	8f 90       	pop	r8
     b6a:	7f 90       	pop	r7
     b6c:	6f 90       	pop	r6
     b6e:	5f 90       	pop	r5
     b70:	4f 90       	pop	r4
     b72:	3f 90       	pop	r3
     b74:	2f 90       	pop	r2
     b76:	08 95       	ret

00000b78 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
     b78:	af 92       	push	r10
     b7a:	bf 92       	push	r11
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	a4 97       	sbiw	r28, 0x24	; 36
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	7c 01       	movw	r14, r24
     b9e:	5b 01       	movw	r10, r22
     ba0:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
     ba2:	00 e0       	ldi	r16, 0x00	; 0
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	98 01       	movw	r18, r16
     ba8:	b9 01       	movw	r22, r18
     baa:	a8 01       	movw	r20, r16
     bac:	ce 01       	movw	r24, r28
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     bb4:	00 e0       	ldi	r16, 0x00	; 0
     bb6:	10 e0       	ldi	r17, 0x00	; 0
     bb8:	98 01       	movw	r18, r16
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	60 e8       	ldi	r22, 0x80	; 128
     bc0:	7f e3       	ldi	r23, 0x3F	; 63
     bc2:	ce 01       	movw	r24, r28
     bc4:	09 96       	adiw	r24, 0x09	; 9
     bc6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     bca:	00 e0       	ldi	r16, 0x00	; 0
     bcc:	10 e0       	ldi	r17, 0x00	; 0
     bce:	98 01       	movw	r18, r16
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	60 e8       	ldi	r22, 0x80	; 128
     bd6:	7f e3       	ldi	r23, 0x3F	; 63
     bd8:	ce 01       	movw	r24, r28
     bda:	41 96       	adiw	r24, 0x11	; 17
     bdc:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     be0:	00 e0       	ldi	r16, 0x00	; 0
     be2:	10 e0       	ldi	r17, 0x00	; 0
     be4:	98 01       	movw	r18, r16
     be6:	b9 01       	movw	r22, r18
     be8:	a8 01       	movw	r20, r16
     bea:	ce 01       	movw	r24, r28
     bec:	49 96       	adiw	r24, 0x19	; 25
     bee:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     bf2:	bc a2       	std	Y+36, r11	; 0x24
     bf4:	ab a2       	std	Y+35, r10	; 0x23
     bf6:	da a2       	std	Y+34, r13	; 0x22
     bf8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix),1);
     bfa:	9e 01       	movw	r18, r28
     bfc:	2f 5d       	subi	r18, 0xDF	; 223
     bfe:	3f 4f       	sbci	r19, 0xFF	; 255
     c00:	ae 01       	movw	r20, r28
     c02:	4d 5d       	subi	r20, 0xDD	; 221
     c04:	5f 4f       	sbci	r21, 0xFF	; 255
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	c7 01       	movw	r24, r14
     c0c:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN5Gates8ampl2vecEiPiS0_>
     c10:	ae 01       	movw	r20, r28
     c12:	4f 5f       	subi	r20, 0xFF	; 255
     c14:	5f 4f       	sbci	r21, 0xFF	; 255
     c16:	bc 01       	movw	r22, r24
     c18:	c7 01       	movw	r24, r14
     c1a:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	bc 01       	movw	r22, r24
     c24:	c7 01       	movw	r24, r14
     c26:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5Gates8vec2amplEP7Complexi>
}
     c2a:	a4 96       	adiw	r28, 0x24	; 36
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	08 95       	ret

00000c4c <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	a4 97       	sbiw	r28, 0x24	; 36
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	7c 01       	movw	r14, r24
     c72:	5b 01       	movw	r10, r22
     c74:	6a 01       	movw	r12, r20
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
     c76:	00 e0       	ldi	r16, 0x00	; 0
     c78:	10 e0       	ldi	r17, 0x00	; 0
     c7a:	98 01       	movw	r18, r16
     c7c:	b9 01       	movw	r22, r18
     c7e:	a8 01       	movw	r20, r16
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     c88:	00 e0       	ldi	r16, 0x00	; 0
     c8a:	10 e0       	ldi	r17, 0x00	; 0
     c8c:	20 e8       	ldi	r18, 0x80	; 128
     c8e:	3f eb       	ldi	r19, 0xBF	; 191
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	ba 01       	movw	r22, r20
     c96:	ce 01       	movw	r24, r28
     c98:	09 96       	adiw	r24, 0x09	; 9
     c9a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     c9e:	00 e0       	ldi	r16, 0x00	; 0
     ca0:	10 e0       	ldi	r17, 0x00	; 0
     ca2:	20 e8       	ldi	r18, 0x80	; 128
     ca4:	3f e3       	ldi	r19, 0x3F	; 63
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	ba 01       	movw	r22, r20
     cac:	ce 01       	movw	r24, r28
     cae:	41 96       	adiw	r24, 0x11	; 17
     cb0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     cb4:	00 e0       	ldi	r16, 0x00	; 0
     cb6:	10 e0       	ldi	r17, 0x00	; 0
     cb8:	98 01       	movw	r18, r16
     cba:	b9 01       	movw	r22, r18
     cbc:	a8 01       	movw	r20, r16
     cbe:	ce 01       	movw	r24, r28
     cc0:	49 96       	adiw	r24, 0x19	; 25
     cc2:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     cc6:	bc a2       	std	Y+36, r11	; 0x24
     cc8:	ab a2       	std	Y+35, r10	; 0x23
     cca:	da a2       	std	Y+34, r13	; 0x22
     ccc:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),y_matrix),1);
     cce:	9e 01       	movw	r18, r28
     cd0:	2f 5d       	subi	r18, 0xDF	; 223
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	ae 01       	movw	r20, r28
     cd6:	4d 5d       	subi	r20, 0xDD	; 221
     cd8:	5f 4f       	sbci	r21, 0xFF	; 255
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	c7 01       	movw	r24, r14
     ce0:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN5Gates8ampl2vecEiPiS0_>
     ce4:	ae 01       	movw	r20, r28
     ce6:	4f 5f       	subi	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	bc 01       	movw	r22, r24
     cec:	c7 01       	movw	r24, r14
     cee:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	bc 01       	movw	r22, r24
     cf8:	c7 01       	movw	r24, r14
     cfa:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5Gates8vec2amplEP7Complexi>
}
     cfe:	a4 96       	adiw	r28, 0x24	; 36
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	ff 90       	pop	r15
     d14:	ef 90       	pop	r14
     d16:	df 90       	pop	r13
     d18:	cf 90       	pop	r12
     d1a:	bf 90       	pop	r11
     d1c:	af 90       	pop	r10
     d1e:	08 95       	ret

00000d20 <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
     d20:	af 92       	push	r10
     d22:	bf 92       	push	r11
     d24:	cf 92       	push	r12
     d26:	df 92       	push	r13
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	a4 97       	sbiw	r28, 0x24	; 36
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	7c 01       	movw	r14, r24
     d46:	5b 01       	movw	r10, r22
     d48:	6a 01       	movw	r12, r20
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
     d4a:	00 e0       	ldi	r16, 0x00	; 0
     d4c:	10 e0       	ldi	r17, 0x00	; 0
     d4e:	98 01       	movw	r18, r16
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	60 e8       	ldi	r22, 0x80	; 128
     d56:	7f e3       	ldi	r23, 0x3F	; 63
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d60:	00 e0       	ldi	r16, 0x00	; 0
     d62:	10 e0       	ldi	r17, 0x00	; 0
     d64:	98 01       	movw	r18, r16
     d66:	b9 01       	movw	r22, r18
     d68:	a8 01       	movw	r20, r16
     d6a:	ce 01       	movw	r24, r28
     d6c:	09 96       	adiw	r24, 0x09	; 9
     d6e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d72:	00 e0       	ldi	r16, 0x00	; 0
     d74:	10 e0       	ldi	r17, 0x00	; 0
     d76:	98 01       	movw	r18, r16
     d78:	b9 01       	movw	r22, r18
     d7a:	a8 01       	movw	r20, r16
     d7c:	ce 01       	movw	r24, r28
     d7e:	41 96       	adiw	r24, 0x11	; 17
     d80:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d84:	00 e0       	ldi	r16, 0x00	; 0
     d86:	10 e0       	ldi	r17, 0x00	; 0
     d88:	98 01       	movw	r18, r16
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	60 e8       	ldi	r22, 0x80	; 128
     d90:	7f eb       	ldi	r23, 0xBF	; 191
     d92:	ce 01       	movw	r24, r28
     d94:	49 96       	adiw	r24, 0x19	; 25
     d96:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     d9a:	bc a2       	std	Y+36, r11	; 0x24
     d9c:	ab a2       	std	Y+35, r10	; 0x23
     d9e:	da a2       	std	Y+34, r13	; 0x22
     da0:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),z_matrix),1);
     da2:	9e 01       	movw	r18, r28
     da4:	2f 5d       	subi	r18, 0xDF	; 223
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	ae 01       	movw	r20, r28
     daa:	4d 5d       	subi	r20, 0xDD	; 221
     dac:	5f 4f       	sbci	r21, 0xFF	; 255
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	c7 01       	movw	r24, r14
     db4:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN5Gates8ampl2vecEiPiS0_>
     db8:	ae 01       	movw	r20, r28
     dba:	4f 5f       	subi	r20, 0xFF	; 255
     dbc:	5f 4f       	sbci	r21, 0xFF	; 255
     dbe:	bc 01       	movw	r22, r24
     dc0:	c7 01       	movw	r24, r14
     dc2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     dc6:	41 e0       	ldi	r20, 0x01	; 1
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	bc 01       	movw	r22, r24
     dcc:	c7 01       	movw	r24, r14
     dce:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5Gates8vec2amplEP7Complexi>
}
     dd2:	a4 96       	adiw	r28, 0x24	; 36
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	bf 90       	pop	r11
     df0:	af 90       	pop	r10
     df2:	08 95       	ret

00000df4 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	a4 97       	sbiw	r28, 0x24	; 36
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	7c 01       	movw	r14, r24
     e1a:	5b 01       	movw	r10, r22
     e1c:	6a 01       	movw	r12, r20
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	98 01       	movw	r18, r16
     e24:	43 ef       	ldi	r20, 0xF3	; 243
     e26:	54 e0       	ldi	r21, 0x04	; 4
     e28:	65 e3       	ldi	r22, 0x35	; 53
     e2a:	7f e3       	ldi	r23, 0x3F	; 63
     e2c:	ce 01       	movw	r24, r28
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e34:	00 e0       	ldi	r16, 0x00	; 0
     e36:	10 e0       	ldi	r17, 0x00	; 0
     e38:	98 01       	movw	r18, r16
     e3a:	43 ef       	ldi	r20, 0xF3	; 243
     e3c:	54 e0       	ldi	r21, 0x04	; 4
     e3e:	65 e3       	ldi	r22, 0x35	; 53
     e40:	7f e3       	ldi	r23, 0x3F	; 63
     e42:	ce 01       	movw	r24, r28
     e44:	09 96       	adiw	r24, 0x09	; 9
     e46:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e4a:	00 e0       	ldi	r16, 0x00	; 0
     e4c:	10 e0       	ldi	r17, 0x00	; 0
     e4e:	98 01       	movw	r18, r16
     e50:	43 ef       	ldi	r20, 0xF3	; 243
     e52:	54 e0       	ldi	r21, 0x04	; 4
     e54:	65 e3       	ldi	r22, 0x35	; 53
     e56:	7f e3       	ldi	r23, 0x3F	; 63
     e58:	ce 01       	movw	r24, r28
     e5a:	41 96       	adiw	r24, 0x11	; 17
     e5c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e60:	00 e0       	ldi	r16, 0x00	; 0
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	98 01       	movw	r18, r16
     e66:	43 ef       	ldi	r20, 0xF3	; 243
     e68:	54 e0       	ldi	r21, 0x04	; 4
     e6a:	65 e3       	ldi	r22, 0x35	; 53
     e6c:	7f eb       	ldi	r23, 0xBF	; 191
     e6e:	ce 01       	movw	r24, r28
     e70:	49 96       	adiw	r24, 0x19	; 25
     e72:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     e76:	bc a2       	std	Y+36, r11	; 0x24
     e78:	ab a2       	std	Y+35, r10	; 0x23
     e7a:	da a2       	std	Y+34, r13	; 0x22
     e7c:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),h_matrix),1);
     e7e:	9e 01       	movw	r18, r28
     e80:	2f 5d       	subi	r18, 0xDF	; 223
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	ae 01       	movw	r20, r28
     e86:	4d 5d       	subi	r20, 0xDD	; 221
     e88:	5f 4f       	sbci	r21, 0xFF	; 255
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	c7 01       	movw	r24, r14
     e90:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN5Gates8ampl2vecEiPiS0_>
     e94:	ae 01       	movw	r20, r28
     e96:	4f 5f       	subi	r20, 0xFF	; 255
     e98:	5f 4f       	sbci	r21, 0xFF	; 255
     e9a:	bc 01       	movw	r22, r24
     e9c:	c7 01       	movw	r24, r14
     e9e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     ea2:	41 e0       	ldi	r20, 0x01	; 1
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	bc 01       	movw	r22, r24
     ea8:	c7 01       	movw	r24, r14
     eaa:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5Gates8vec2amplEP7Complexi>
}
     eae:	a4 96       	adiw	r28, 0x24	; 36
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	bf 90       	pop	r11
     ecc:	af 90       	pop	r10
     ece:	08 95       	ret

00000ed0 <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
     ed0:	af 92       	push	r10
     ed2:	bf 92       	push	r11
     ed4:	cf 92       	push	r12
     ed6:	df 92       	push	r13
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	a4 97       	sbiw	r28, 0x24	; 36
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	7c 01       	movw	r14, r24
     ef6:	5b 01       	movw	r10, r22
     ef8:	6a 01       	movw	r12, r20
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
     efa:	00 e0       	ldi	r16, 0x00	; 0
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	98 01       	movw	r18, r16
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	60 e8       	ldi	r22, 0x80	; 128
     f06:	7f e3       	ldi	r23, 0x3F	; 63
     f08:	ce 01       	movw	r24, r28
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f10:	00 e0       	ldi	r16, 0x00	; 0
     f12:	10 e0       	ldi	r17, 0x00	; 0
     f14:	98 01       	movw	r18, r16
     f16:	b9 01       	movw	r22, r18
     f18:	a8 01       	movw	r20, r16
     f1a:	ce 01       	movw	r24, r28
     f1c:	09 96       	adiw	r24, 0x09	; 9
     f1e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f22:	00 e0       	ldi	r16, 0x00	; 0
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	98 01       	movw	r18, r16
     f28:	b9 01       	movw	r22, r18
     f2a:	a8 01       	movw	r20, r16
     f2c:	ce 01       	movw	r24, r28
     f2e:	41 96       	adiw	r24, 0x11	; 17
     f30:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f34:	00 e0       	ldi	r16, 0x00	; 0
     f36:	10 e0       	ldi	r17, 0x00	; 0
     f38:	20 e8       	ldi	r18, 0x80	; 128
     f3a:	3f e3       	ldi	r19, 0x3F	; 63
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	ba 01       	movw	r22, r20
     f42:	ce 01       	movw	r24, r28
     f44:	49 96       	adiw	r24, 0x19	; 25
     f46:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     f4a:	bc a2       	std	Y+36, r11	; 0x24
     f4c:	ab a2       	std	Y+35, r10	; 0x23
     f4e:	da a2       	std	Y+34, r13	; 0x22
     f50:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),s_matrix),1);
     f52:	9e 01       	movw	r18, r28
     f54:	2f 5d       	subi	r18, 0xDF	; 223
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	ae 01       	movw	r20, r28
     f5a:	4d 5d       	subi	r20, 0xDD	; 221
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	c7 01       	movw	r24, r14
     f64:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN5Gates8ampl2vecEiPiS0_>
     f68:	ae 01       	movw	r20, r28
     f6a:	4f 5f       	subi	r20, 0xFF	; 255
     f6c:	5f 4f       	sbci	r21, 0xFF	; 255
     f6e:	bc 01       	movw	r22, r24
     f70:	c7 01       	movw	r24, r14
     f72:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	bc 01       	movw	r22, r24
     f7c:	c7 01       	movw	r24, r14
     f7e:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5Gates8vec2amplEP7Complexi>
}
     f82:	a4 96       	adiw	r28, 0x24	; 36
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	cf 90       	pop	r12
     f9e:	bf 90       	pop	r11
     fa0:	af 90       	pop	r10
     fa2:	08 95       	ret

00000fa4 <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	a4 97       	sbiw	r28, 0x24	; 36
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	7c 01       	movw	r14, r24
     fca:	5b 01       	movw	r10, r22
     fcc:	6a 01       	movw	r12, r20
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
     fce:	00 e0       	ldi	r16, 0x00	; 0
     fd0:	10 e0       	ldi	r17, 0x00	; 0
     fd2:	98 01       	movw	r18, r16
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	60 e8       	ldi	r22, 0x80	; 128
     fda:	7f e3       	ldi	r23, 0x3F	; 63
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fe4:	00 e0       	ldi	r16, 0x00	; 0
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	98 01       	movw	r18, r16
     fea:	b9 01       	movw	r22, r18
     fec:	a8 01       	movw	r20, r16
     fee:	ce 01       	movw	r24, r28
     ff0:	09 96       	adiw	r24, 0x09	; 9
     ff2:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     ff6:	00 e0       	ldi	r16, 0x00	; 0
     ff8:	10 e0       	ldi	r17, 0x00	; 0
     ffa:	98 01       	movw	r18, r16
     ffc:	b9 01       	movw	r22, r18
     ffe:	a8 01       	movw	r20, r16
    1000:	ce 01       	movw	r24, r28
    1002:	41 96       	adiw	r24, 0x11	; 17
    1004:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1008:	03 ef       	ldi	r16, 0xF3	; 243
    100a:	14 e0       	ldi	r17, 0x04	; 4
    100c:	25 e3       	ldi	r18, 0x35	; 53
    100e:	3f e3       	ldi	r19, 0x3F	; 63
    1010:	b9 01       	movw	r22, r18
    1012:	a8 01       	movw	r20, r16
    1014:	ce 01       	movw	r24, r28
    1016:	49 96       	adiw	r24, 0x19	; 25
    1018:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    101c:	bc a2       	std	Y+36, r11	; 0x24
    101e:	ab a2       	std	Y+35, r10	; 0x23
    1020:	da a2       	std	Y+34, r13	; 0x22
    1022:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),t_matrix),1);
    1024:	9e 01       	movw	r18, r28
    1026:	2f 5d       	subi	r18, 0xDF	; 223
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	ae 01       	movw	r20, r28
    102c:	4d 5d       	subi	r20, 0xDD	; 221
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	c7 01       	movw	r24, r14
    1036:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN5Gates8ampl2vecEiPiS0_>
    103a:	ae 01       	movw	r20, r28
    103c:	4f 5f       	subi	r20, 0xFF	; 255
    103e:	5f 4f       	sbci	r21, 0xFF	; 255
    1040:	bc 01       	movw	r22, r24
    1042:	c7 01       	movw	r24, r14
    1044:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1048:	41 e0       	ldi	r20, 0x01	; 1
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	bc 01       	movw	r22, r24
    104e:	c7 01       	movw	r24, r14
    1050:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5Gates8vec2amplEP7Complexi>
}
    1054:	a4 96       	adiw	r28, 0x24	; 36
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	08 95       	ret

00001076 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    1076:	6f 92       	push	r6
    1078:	7f 92       	push	r7
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	c8 58       	subi	r28, 0x88	; 136
    1098:	d1 09       	sbc	r29, r1
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	7c 01       	movw	r14, r24
    10a6:	3b 01       	movw	r6, r22
    10a8:	5a 01       	movw	r10, r20
    10aa:	49 01       	movw	r8, r18
    10ac:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    10ae:	00 e0       	ldi	r16, 0x00	; 0
    10b0:	10 e0       	ldi	r17, 0x00	; 0
    10b2:	98 01       	movw	r18, r16
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	60 e8       	ldi	r22, 0x80	; 128
    10ba:	7f e3       	ldi	r23, 0x3F	; 63
    10bc:	ce 01       	movw	r24, r28
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10c4:	00 e0       	ldi	r16, 0x00	; 0
    10c6:	10 e0       	ldi	r17, 0x00	; 0
    10c8:	98 01       	movw	r18, r16
    10ca:	b9 01       	movw	r22, r18
    10cc:	a8 01       	movw	r20, r16
    10ce:	ce 01       	movw	r24, r28
    10d0:	09 96       	adiw	r24, 0x09	; 9
    10d2:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10d6:	00 e0       	ldi	r16, 0x00	; 0
    10d8:	10 e0       	ldi	r17, 0x00	; 0
    10da:	98 01       	movw	r18, r16
    10dc:	b9 01       	movw	r22, r18
    10de:	a8 01       	movw	r20, r16
    10e0:	ce 01       	movw	r24, r28
    10e2:	41 96       	adiw	r24, 0x11	; 17
    10e4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10e8:	00 e0       	ldi	r16, 0x00	; 0
    10ea:	10 e0       	ldi	r17, 0x00	; 0
    10ec:	98 01       	movw	r18, r16
    10ee:	b9 01       	movw	r22, r18
    10f0:	a8 01       	movw	r20, r16
    10f2:	ce 01       	movw	r24, r28
    10f4:	49 96       	adiw	r24, 0x19	; 25
    10f6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10fa:	00 e0       	ldi	r16, 0x00	; 0
    10fc:	10 e0       	ldi	r17, 0x00	; 0
    10fe:	98 01       	movw	r18, r16
    1100:	b9 01       	movw	r22, r18
    1102:	a8 01       	movw	r20, r16
    1104:	ce 01       	movw	r24, r28
    1106:	81 96       	adiw	r24, 0x21	; 33
    1108:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    110c:	00 e0       	ldi	r16, 0x00	; 0
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	98 01       	movw	r18, r16
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	60 e8       	ldi	r22, 0x80	; 128
    1118:	7f e3       	ldi	r23, 0x3F	; 63
    111a:	ce 01       	movw	r24, r28
    111c:	89 96       	adiw	r24, 0x29	; 41
    111e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1122:	00 e0       	ldi	r16, 0x00	; 0
    1124:	10 e0       	ldi	r17, 0x00	; 0
    1126:	98 01       	movw	r18, r16
    1128:	b9 01       	movw	r22, r18
    112a:	a8 01       	movw	r20, r16
    112c:	ce 01       	movw	r24, r28
    112e:	c1 96       	adiw	r24, 0x31	; 49
    1130:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1134:	00 e0       	ldi	r16, 0x00	; 0
    1136:	10 e0       	ldi	r17, 0x00	; 0
    1138:	98 01       	movw	r18, r16
    113a:	b9 01       	movw	r22, r18
    113c:	a8 01       	movw	r20, r16
    113e:	ce 01       	movw	r24, r28
    1140:	c9 96       	adiw	r24, 0x39	; 57
    1142:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1146:	00 e0       	ldi	r16, 0x00	; 0
    1148:	10 e0       	ldi	r17, 0x00	; 0
    114a:	98 01       	movw	r18, r16
    114c:	b9 01       	movw	r22, r18
    114e:	a8 01       	movw	r20, r16
    1150:	ce 01       	movw	r24, r28
    1152:	8f 5b       	subi	r24, 0xBF	; 191
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    115a:	00 e0       	ldi	r16, 0x00	; 0
    115c:	10 e0       	ldi	r17, 0x00	; 0
    115e:	98 01       	movw	r18, r16
    1160:	b9 01       	movw	r22, r18
    1162:	a8 01       	movw	r20, r16
    1164:	ce 01       	movw	r24, r28
    1166:	87 5b       	subi	r24, 0xB7	; 183
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    116e:	00 e0       	ldi	r16, 0x00	; 0
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	98 01       	movw	r18, r16
    1174:	b9 01       	movw	r22, r18
    1176:	a8 01       	movw	r20, r16
    1178:	ce 01       	movw	r24, r28
    117a:	8f 5a       	subi	r24, 0xAF	; 175
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1182:	00 e0       	ldi	r16, 0x00	; 0
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	98 01       	movw	r18, r16
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	60 e8       	ldi	r22, 0x80	; 128
    118e:	7f e3       	ldi	r23, 0x3F	; 63
    1190:	ce 01       	movw	r24, r28
    1192:	87 5a       	subi	r24, 0xA7	; 167
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    119a:	00 e0       	ldi	r16, 0x00	; 0
    119c:	10 e0       	ldi	r17, 0x00	; 0
    119e:	98 01       	movw	r18, r16
    11a0:	b9 01       	movw	r22, r18
    11a2:	a8 01       	movw	r20, r16
    11a4:	ce 01       	movw	r24, r28
    11a6:	8f 59       	subi	r24, 0x9F	; 159
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    11ae:	00 e0       	ldi	r16, 0x00	; 0
    11b0:	10 e0       	ldi	r17, 0x00	; 0
    11b2:	98 01       	movw	r18, r16
    11b4:	b9 01       	movw	r22, r18
    11b6:	a8 01       	movw	r20, r16
    11b8:	ce 01       	movw	r24, r28
    11ba:	87 59       	subi	r24, 0x97	; 151
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    11c2:	00 e0       	ldi	r16, 0x00	; 0
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	98 01       	movw	r18, r16
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	60 e8       	ldi	r22, 0x80	; 128
    11ce:	7f e3       	ldi	r23, 0x3F	; 63
    11d0:	ce 01       	movw	r24, r28
    11d2:	8f 58       	subi	r24, 0x8F	; 143
    11d4:	9f 4f       	sbci	r25, 0xFF	; 255
    11d6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	98 01       	movw	r18, r16
    11e0:	b9 01       	movw	r22, r18
    11e2:	a8 01       	movw	r20, r16
    11e4:	ce 01       	movw	r24, r28
    11e6:	87 58       	subi	r24, 0x87	; 135
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
    11ee:	cb 57       	subi	r28, 0x7B	; 123
    11f0:	df 4f       	sbci	r29, 0xFF	; 255
    11f2:	79 82       	std	Y+1, r7	; 0x01
    11f4:	68 82       	st	Y, r6
    11f6:	c5 58       	subi	r28, 0x85	; 133
    11f8:	d0 40       	sbci	r29, 0x00	; 0
    11fa:	c9 57       	subi	r28, 0x79	; 121
    11fc:	df 4f       	sbci	r29, 0xFF	; 255
    11fe:	99 82       	std	Y+1, r9	; 0x01
    1200:	88 82       	st	Y, r8
    1202:	c7 58       	subi	r28, 0x87	; 135
    1204:	d0 40       	sbci	r29, 0x00	; 0
    1206:	cf 57       	subi	r28, 0x7F	; 127
    1208:	df 4f       	sbci	r29, 0xFF	; 255
    120a:	b9 82       	std	Y+1, r11	; 0x01
    120c:	a8 82       	st	Y, r10
    120e:	c1 58       	subi	r28, 0x81	; 129
    1210:	d0 40       	sbci	r29, 0x00	; 0
    1212:	cd 57       	subi	r28, 0x7D	; 125
    1214:	df 4f       	sbci	r29, 0xFF	; 255
    1216:	d9 82       	std	Y+1, r13	; 0x01
    1218:	c8 82       	st	Y, r12
    121a:	c3 58       	subi	r28, 0x83	; 131
    121c:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix),2);
    121e:	9e 01       	movw	r18, r28
    1220:	2f 57       	subi	r18, 0x7F	; 127
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	ae 01       	movw	r20, r28
    1226:	4b 57       	subi	r20, 0x7B	; 123
    1228:	5f 4f       	sbci	r21, 0xFF	; 255
    122a:	62 e0       	ldi	r22, 0x02	; 2
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	c7 01       	movw	r24, r14
    1230:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN5Gates8ampl2vecEiPiS0_>
    1234:	ae 01       	movw	r20, r28
    1236:	4f 5f       	subi	r20, 0xFF	; 255
    1238:	5f 4f       	sbci	r21, 0xFF	; 255
    123a:	bc 01       	movw	r22, r24
    123c:	c7 01       	movw	r24, r14
    123e:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    1242:	42 e0       	ldi	r20, 0x02	; 2
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	bc 01       	movw	r22, r24
    1248:	c7 01       	movw	r24, r14
    124a:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5Gates8vec2amplEP7Complexi>
}
    124e:	c8 57       	subi	r28, 0x78	; 120
    1250:	df 4f       	sbci	r29, 0xFF	; 255
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	cf 90       	pop	r12
    126c:	bf 90       	pop	r11
    126e:	af 90       	pop	r10
    1270:	9f 90       	pop	r9
    1272:	8f 90       	pop	r8
    1274:	7f 90       	pop	r7
    1276:	6f 90       	pop	r6
    1278:	08 95       	ret

0000127a <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
Gates::Gates(){setup_seed();}

Serial s;
    127a:	81 ec       	ldi	r24, 0xC1	; 193
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6SerialC1Ev>
    1282:	08 95       	ret

00001284 <main>:
#include "qepu.h"
int main(void){
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	00 d0       	rcall	.+0      	; 0x128a <main+0x6>
    128a:	00 d0       	rcall	.+0      	; 0x128c <main+0x8>
    128c:	00 d0       	rcall	.+0      	; 0x128e <main+0xa>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN4QEPUC1Ev>
	qepu.run();
    129a:	ce 01       	movw	r24, r28
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <_ZN4QEPU3runEv>
    12a2:	ff cf       	rjmp	.-2      	; 0x12a2 <main+0x1e>

000012a4 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	ec 01       	movw	r28, r24
    12aa:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN6EEPromC1Ev>
    12ae:	ce 01       	movw	r24, r28
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6SerialC1Ev>
    12b6:	ce 01       	movw	r24, r28
    12b8:	05 96       	adiw	r24, 0x05	; 5
    12ba:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN5GatesC1Ev>
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	8a bb       	out	0x1a, r24	; 26
    12c2:	1c 82       	std	Y+4, r1	; 0x04
    12c4:	1b 82       	std	Y+3, r1	; 0x03
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    12cc:	7b b3       	in	r23, 0x1b	; 27
    12ce:	21 e0       	ldi	r18, 0x01	; 1
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	c9 01       	movw	r24, r18
    12d4:	06 2e       	mov	r0, r22
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <_ZN4QEPU10setctrlpinEii+0x10>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <_ZN4QEPU10setctrlpinEii+0xc>
    12e0:	80 95       	com	r24
    12e2:	87 23       	and	r24, r23
    12e4:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    12e6:	8b b3       	in	r24, 0x1b	; 27
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <_ZN4QEPU10setctrlpinEii+0x22>
    12ea:	44 0f       	add	r20, r20
    12ec:	55 1f       	adc	r21, r21
    12ee:	6a 95       	dec	r22
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <_ZN4QEPU10setctrlpinEii+0x1e>
    12f2:	48 2b       	or	r20, r24
    12f4:	4b bb       	out	0x1b, r20	; 27
    12f6:	08 95       	ret

000012f8 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    1302:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    1304:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    1306:	64 e0       	ldi	r22, 0x04	; 4
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	ce 01       	movw	r24, r28
    130c:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    1310:	41 e0       	ldi	r20, 0x01	; 1
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	66 e0       	ldi	r22, 0x06	; 6
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	ce 01       	movw	r24, r28
    131a:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	66 e0       	ldi	r22, 0x06	; 6
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	ce 01       	movw	r24, r28
    1328:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    132c:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	ec 01       	movw	r28, r24
    133e:	8a 01       	movw	r16, r20
	DDRB=0x00;
    1340:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    1342:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	65 e0       	ldi	r22, 0x05	; 5
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    1350:	a8 01       	movw	r20, r16
    1352:	64 e0       	ldi	r22, 0x04	; 4
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	ce 01       	movw	r24, r28
    1358:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    135c:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    135e:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    1360:	9f ef       	ldi	r25, 0xFF	; 255
    1362:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	08 95       	ret

00001370 <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    1370:	6f 92       	push	r6
    1372:	7f 92       	push	r7
    1374:	8f 92       	push	r8
    1376:	9f 92       	push	r9
    1378:	af 92       	push	r10
    137a:	bf 92       	push	r11
    137c:	cf 92       	push	r12
    137e:	df 92       	push	r13
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	6c 01       	movw	r12, r24
	serial.writestrln("");
    138e:	8c 01       	movw	r16, r24
    1390:	0f 5f       	subi	r16, 0xFF	; 255
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	6f ea       	ldi	r22, 0xAF	; 175
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	c8 01       	movw	r24, r16
    139a:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    139e:	66 e8       	ldi	r22, 0x86	; 134
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	c8 01       	movw	r24, r16
    13a4:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    13a8:	c0 e0       	ldi	r28, 0x00	; 0
    13aa:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    13ac:	0f 2e       	mov	r0, r31
    13ae:	f0 ea       	ldi	r31, 0xA0	; 160
    13b0:	ef 2e       	mov	r14, r31
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	ff 2e       	mov	r15, r31
    13b6:	f0 2d       	mov	r31, r0
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 21 11 	call	0x2242	; 0x2242 <malloc>
    13c0:	88 2e       	mov	r8, r24
    13c2:	99 2e       	mov	r9, r25
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	be 01       	movw	r22, r28
    13ca:	c6 01       	movw	r24, r12
    13cc:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    13d0:	9f 93       	push	r25
    13d2:	8f 93       	push	r24
    13d4:	ff 92       	push	r15
    13d6:	ef 92       	push	r14
    13d8:	9f 92       	push	r9
    13da:	8f 92       	push	r8
    13dc:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 21 11 	call	0x2242	; 0x2242 <malloc>
    13e8:	a8 2e       	mov	r10, r24
    13ea:	b9 2e       	mov	r11, r25
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	be 01       	movw	r22, r28
    13f2:	c6 01       	movw	r24, r12
    13f4:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    13f8:	9f 93       	push	r25
    13fa:	8f 93       	push	r24
    13fc:	ff 92       	push	r15
    13fe:	ef 92       	push	r14
    1400:	bf 92       	push	r11
    1402:	af 92       	push	r10
    1404:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 21 11 	call	0x2242	; 0x2242 <malloc>
    1410:	68 2e       	mov	r6, r24
    1412:	79 2e       	mov	r7, r25
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	ff 92       	push	r15
    141a:	ef 92       	push	r14
    141c:	7f 92       	push	r7
    141e:	6f 92       	push	r6
    1420:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    1424:	63 ea       	ldi	r22, 0xA3	; 163
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	c8 01       	movw	r24, r16
    142a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN6Serial8writestrEPc>
    142e:	66 2d       	mov	r22, r6
    1430:	77 2d       	mov	r23, r7
    1432:	c8 01       	movw	r24, r16
    1434:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN6Serial8writestrEPc>
    1438:	65 ea       	ldi	r22, 0xA5	; 165
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	c8 01       	movw	r24, r16
    143e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    1442:	68 2d       	mov	r22, r8
    1444:	79 2d       	mov	r23, r9
    1446:	c8 01       	movw	r24, r16
    1448:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    144c:	60 eb       	ldi	r22, 0xB0	; 176
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	c8 01       	movw	r24, r16
    1452:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    1456:	6a 2d       	mov	r22, r10
    1458:	7b 2d       	mov	r23, r11
    145a:	c8 01       	movw	r24, r16
    145c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    1460:	21 96       	adiw	r28, 0x01	; 1
    1462:	8d b7       	in	r24, 0x3d	; 61
    1464:	9e b7       	in	r25, 0x3e	; 62
    1466:	42 96       	adiw	r24, 0x12	; 18
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	9e bf       	out	0x3e, r25	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	8d bf       	out	0x3d, r24	; 61
    1472:	c4 30       	cpi	r28, 0x04	; 4
    1474:	d1 05       	cpc	r29, r1
    1476:	09 f0       	breq	.+2      	; 0x147a <_ZN4QEPU7dumpmemEv+0x10a>
    1478:	9f cf       	rjmp	.-194    	; 0x13b8 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	df 90       	pop	r13
    1488:	cf 90       	pop	r12
    148a:	bf 90       	pop	r11
    148c:	af 90       	pop	r10
    148e:	9f 90       	pop	r9
    1490:	8f 90       	pop	r8
    1492:	7f 90       	pop	r7
    1494:	6f 90       	pop	r6
    1496:	08 95       	ret

00001498 <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    1498:	cf 92       	push	r12
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	d6 2f       	mov	r29, r22
    14aa:	c7 2f       	mov	r28, r23
    14ac:	e6 2f       	mov	r30, r22
    14ae:	f7 2f       	mov	r31, r23
	int c_length=0;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    14b4:	21 91       	ld	r18, Z+
    14b6:	2f 3f       	cpi	r18, 0xFF	; 255
    14b8:	89 f4       	brne	.+34     	; 0x14dc <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    14ba:	df 01       	movw	r26, r30
    14bc:	12 97       	sbiw	r26, 0x02	; 2
    14be:	4c 91       	ld	r20, X
    14c0:	4f 3f       	cpi	r20, 0xFF	; 255
    14c2:	61 f4       	brne	.+24     	; 0x14dc <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    14c4:	11 97       	sbiw	r26, 0x01	; 1
    14c6:	4c 91       	ld	r20, X
    14c8:	4f 3f       	cpi	r20, 0xFF	; 255
    14ca:	41 f4       	brne	.+16     	; 0x14dc <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    14cc:	11 97       	sbiw	r26, 0x01	; 1
    14ce:	4c 91       	ld	r20, X
    14d0:	4f 3f       	cpi	r20, 0xFF	; 255
    14d2:	21 f4       	brne	.+8      	; 0x14dc <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    14d4:	11 97       	sbiw	r26, 0x01	; 1
    14d6:	2c 91       	ld	r18, X
    14d8:	2f 3f       	cpi	r18, 0xFF	; 255
    14da:	11 f0       	breq	.+4      	; 0x14e0 <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	ea cf       	rjmp	.-44     	; 0x14b4 <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    14e0:	8c 01       	movw	r16, r24
    14e2:	04 50       	subi	r16, 0x04	; 4
    14e4:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    14e6:	6c 01       	movw	r12, r24
    14e8:	2f ef       	ldi	r18, 0xFF	; 255
    14ea:	c2 1a       	sub	r12, r18
    14ec:	d2 0a       	sbc	r13, r18
    14ee:	76 01       	movw	r14, r12
    14f0:	ee 0c       	add	r14, r14
    14f2:	ff 1c       	adc	r15, r15
    14f4:	c7 01       	movw	r24, r14
    14f6:	0e 94 21 11 	call	0x2242	; 0x2242 <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    14fa:	10 16       	cp	r1, r16
    14fc:	11 06       	cpc	r1, r17
    14fe:	74 f4       	brge	.+28     	; 0x151c <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    1500:	dc 01       	movw	r26, r24
    1502:	ed 2f       	mov	r30, r29
    1504:	fc 2f       	mov	r31, r28
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	41 91       	ld	r20, Z+
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	4d 93       	st	X+, r20
    1510:	5d 93       	st	X+, r21
    1512:	2f 5f       	subi	r18, 0xFF	; 255
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
    1516:	20 17       	cp	r18, r16
    1518:	31 07       	cpc	r19, r17
    151a:	bc f3       	brlt	.-18     	; 0x150a <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    151c:	0c 15       	cp	r16, r12
    151e:	1d 05       	cpc	r17, r13
    1520:	7c f4       	brge	.+30     	; 0x1540 <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    1522:	f7 01       	movw	r30, r14
    1524:	3a 97       	sbiw	r30, 0x0a	; 10
    1526:	e8 0f       	add	r30, r24
    1528:	f9 1f       	adc	r31, r25
    152a:	25 e0       	ldi	r18, 0x05	; 5
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	4f ef       	ldi	r20, 0xFF	; 255
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	41 93       	st	Z+, r20
    1534:	51 93       	st	Z+, r21
    1536:	21 50       	subi	r18, 0x01	; 1
    1538:	31 09       	sbc	r19, r1
    153a:	21 15       	cp	r18, r1
    153c:	31 05       	cpc	r19, r1
    153e:	c9 f7       	brne	.-14     	; 0x1532 <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	08 95       	ret

00001552 <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	c4 56       	subi	r28, 0x64	; 100
    1560:	d1 09       	sbc	r29, r1
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
	//char str[countdigits(dec)+1];
	char str[100];
	sprintf(str,"%d",dec);
    156c:	7f 93       	push	r23
    156e:	6f 93       	push	r22
    1570:	80 ea       	ldi	r24, 0xA0	; 160
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9f 93       	push	r25
    1576:	8f 93       	push	r24
    1578:	8e 01       	movw	r16, r28
    157a:	0f 5f       	subi	r16, 0xFF	; 255
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
    157e:	1f 93       	push	r17
    1580:	0f 93       	push	r16
    1582:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <sprintf>
	return str;
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
}
    1592:	c8 01       	movw	r24, r16
    1594:	cc 59       	subi	r28, 0x9C	; 156
    1596:	df 4f       	sbci	r29, 0xFF	; 255
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	08 95       	ret

000015ac <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    15ac:	61 15       	cp	r22, r1
    15ae:	71 05       	cpc	r23, r1
    15b0:	59 f0       	breq	.+22     	; 0x15c8 <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15b2:	8f e9       	ldi	r24, 0x9F	; 159
    15b4:	9f e0       	ldi	r25, 0x0F	; 15
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <_ZN4QEPU5Utils5delayEi+0xa>
    15ba:	00 c0       	rjmp	.+0      	; 0x15bc <_ZN4QEPU5Utils5delayEi+0x10>
    15bc:	00 00       	nop
    15be:	61 50       	subi	r22, 0x01	; 1
    15c0:	71 09       	sbc	r23, r1
    15c2:	61 15       	cp	r22, r1
    15c4:	71 05       	cpc	r23, r1
    15c6:	a9 f7       	brne	.-22     	; 0x15b2 <_ZN4QEPU5Utils5delayEi+0x6>
}
    15c8:	08 95       	ret

000015ca <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    15ca:	2f 92       	push	r2
    15cc:	3f 92       	push	r3
    15ce:	4f 92       	push	r4
    15d0:	5f 92       	push	r5
    15d2:	6f 92       	push	r6
    15d4:	7f 92       	push	r7
    15d6:	8f 92       	push	r8
    15d8:	9f 92       	push	r9
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	ec 01       	movw	r28, r24
    15f0:	1b 01       	movw	r2, r22
    15f2:	29 01       	movw	r4, r18
    15f4:	3a 01       	movw	r6, r20
    15f6:	47 01       	movw	r8, r14
    15f8:	58 01       	movw	r10, r16
	int * newthephi=(int*)malloc(sizeof(int)*2);
    15fa:	84 e0       	ldi	r24, 0x04	; 4
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 21 11 	call	0x2242	; 0x2242 <malloc>
    1602:	6c 01       	movw	r12, r24
	
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    1604:	f1 01       	movw	r30, r2
    1606:	31 97       	sbiw	r30, 0x01	; 1
    1608:	e6 31       	cpi	r30, 0x16	; 22
    160a:	f1 05       	cpc	r31, r1
    160c:	08 f0       	brcs	.+2      	; 0x1610 <_ZN4QEPU7executeEill+0x46>
    160e:	47 c1       	rjmp	.+654    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
    1610:	e6 5d       	subi	r30, 0xD6	; 214
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	b7 01       	movw	r22, r14
    161e:	ce 01       	movw	r24, r28
    1620:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    1624:	9c 01       	movw	r18, r24
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	b2 01       	movw	r22, r4
    162c:	ce 01       	movw	r24, r28
    162e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	b7 01       	movw	r22, r14
    1638:	ce 01       	movw	r24, r28
    163a:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    163e:	9c 01       	movw	r18, r24
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	b2 01       	movw	r22, r4
    1646:	ce 01       	movw	r24, r28
    1648:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
		break;
    164c:	28 c1       	rjmp	.+592    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	48 1a       	sub	r4, r24
    1652:	51 08       	sbc	r5, r1
    1654:	5c 82       	std	Y+4, r5	; 0x04
    1656:	4b 82       	std	Y+3, r4	; 0x03
		break;
    1658:	22 c1       	rjmp	.+580    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    165a:	b2 01       	movw	r22, r4
    165c:	ce 01       	movw	r24, r28
    165e:	02 96       	adiw	r24, 0x02	; 2
    1660:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_ZN4QEPU5Utils5delayEi>
    1664:	1c c1       	rjmp	.+568    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    1666:	97 01       	movw	r18, r14
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	b2 01       	movw	r22, r4
    166e:	ce 01       	movw	r24, r28
    1670:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
		break;
    1674:	14 c1       	rjmp	.+552    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    1676:	97 01       	movw	r18, r14
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	b2 01       	movw	r22, r4
    167e:	ce 01       	movw	r24, r28
    1680:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
		break;
    1684:	0c c1       	rjmp	.+536    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	b2 01       	movw	r22, r4
    168c:	ce 01       	movw	r24, r28
    168e:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    1692:	8c 01       	movw	r16, r24
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	b2 01       	movw	r22, r4
    169a:	ce 01       	movw	r24, r28
    169c:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    16a0:	a8 01       	movw	r20, r16
    16a2:	bc 01       	movw	r22, r24
    16a4:	ce 01       	movw	r24, r28
    16a6:	05 96       	adiw	r24, 0x05	; 5
    16a8:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN5Gates1XEii>
    16ac:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    16ae:	fc 01       	movw	r30, r24
    16b0:	20 81       	ld	r18, Z
    16b2:	31 81       	ldd	r19, Z+1	; 0x01
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	b2 01       	movw	r22, r4
    16ba:	ce 01       	movw	r24, r28
    16bc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
    16c0:	f6 01       	movw	r30, r12
    16c2:	22 81       	ldd	r18, Z+2	; 0x02
    16c4:	33 81       	ldd	r19, Z+3	; 0x03
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	b2 01       	movw	r22, r4
    16cc:	ce 01       	movw	r24, r28
    16ce:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
		break;
    16d2:	e5 c0       	rjmp	.+458    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	b2 01       	movw	r22, r4
    16da:	ce 01       	movw	r24, r28
    16dc:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    16e0:	8c 01       	movw	r16, r24
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	b2 01       	movw	r22, r4
    16e8:	ce 01       	movw	r24, r28
    16ea:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    16ee:	a8 01       	movw	r20, r16
    16f0:	bc 01       	movw	r22, r24
    16f2:	ce 01       	movw	r24, r28
    16f4:	05 96       	adiw	r24, 0x05	; 5
    16f6:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN5Gates1YEii>
    16fa:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 81       	ld	r18, Z
    1700:	31 81       	ldd	r19, Z+1	; 0x01
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	b2 01       	movw	r22, r4
    1708:	ce 01       	movw	r24, r28
    170a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
    170e:	f6 01       	movw	r30, r12
    1710:	22 81       	ldd	r18, Z+2	; 0x02
    1712:	33 81       	ldd	r19, Z+3	; 0x03
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	b2 01       	movw	r22, r4
    171a:	ce 01       	movw	r24, r28
    171c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
		break;
    1720:	be c0       	rjmp	.+380    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	b2 01       	movw	r22, r4
    1728:	ce 01       	movw	r24, r28
    172a:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    172e:	8c 01       	movw	r16, r24
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	b2 01       	movw	r22, r4
    1736:	ce 01       	movw	r24, r28
    1738:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    173c:	a8 01       	movw	r20, r16
    173e:	bc 01       	movw	r22, r24
    1740:	ce 01       	movw	r24, r28
    1742:	05 96       	adiw	r24, 0x05	; 5
    1744:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN5Gates1ZEii>
    1748:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    174a:	fc 01       	movw	r30, r24
    174c:	20 81       	ld	r18, Z
    174e:	31 81       	ldd	r19, Z+1	; 0x01
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	b2 01       	movw	r22, r4
    1756:	ce 01       	movw	r24, r28
    1758:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
    175c:	f6 01       	movw	r30, r12
    175e:	22 81       	ldd	r18, Z+2	; 0x02
    1760:	33 81       	ldd	r19, Z+3	; 0x03
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	b2 01       	movw	r22, r4
    1768:	ce 01       	movw	r24, r28
    176a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
		break;
    176e:	97 c0       	rjmp	.+302    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    1770:	41 e0       	ldi	r20, 0x01	; 1
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	b2 01       	movw	r22, r4
    1776:	ce 01       	movw	r24, r28
    1778:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    177c:	8c 01       	movw	r16, r24
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	b2 01       	movw	r22, r4
    1784:	ce 01       	movw	r24, r28
    1786:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    178a:	a8 01       	movw	r20, r16
    178c:	bc 01       	movw	r22, r24
    178e:	ce 01       	movw	r24, r28
    1790:	05 96       	adiw	r24, 0x05	; 5
    1792:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_ZN5Gates1HEii>
    1796:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1798:	fc 01       	movw	r30, r24
    179a:	20 81       	ld	r18, Z
    179c:	31 81       	ldd	r19, Z+1	; 0x01
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	b2 01       	movw	r22, r4
    17a4:	ce 01       	movw	r24, r28
    17a6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
    17aa:	f6 01       	movw	r30, r12
    17ac:	22 81       	ldd	r18, Z+2	; 0x02
    17ae:	33 81       	ldd	r19, Z+3	; 0x03
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	b2 01       	movw	r22, r4
    17b6:	ce 01       	movw	r24, r28
    17b8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
		break;
    17bc:	70 c0       	rjmp	.+224    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	b2 01       	movw	r22, r4
    17c4:	ce 01       	movw	r24, r28
    17c6:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    17ca:	8c 01       	movw	r16, r24
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	b2 01       	movw	r22, r4
    17d2:	ce 01       	movw	r24, r28
    17d4:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    17d8:	a8 01       	movw	r20, r16
    17da:	bc 01       	movw	r22, r24
    17dc:	ce 01       	movw	r24, r28
    17de:	05 96       	adiw	r24, 0x05	; 5
    17e0:	0e 94 68 07 	call	0xed0	; 0xed0 <_ZN5Gates1SEii>
    17e4:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    17e6:	fc 01       	movw	r30, r24
    17e8:	20 81       	ld	r18, Z
    17ea:	31 81       	ldd	r19, Z+1	; 0x01
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	b2 01       	movw	r22, r4
    17f2:	ce 01       	movw	r24, r28
    17f4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
    17f8:	f6 01       	movw	r30, r12
    17fa:	22 81       	ldd	r18, Z+2	; 0x02
    17fc:	33 81       	ldd	r19, Z+3	; 0x03
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	b2 01       	movw	r22, r4
    1804:	ce 01       	movw	r24, r28
    1806:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
		break;
    180a:	49 c0       	rjmp	.+146    	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	b2 01       	movw	r22, r4
    1812:	ce 01       	movw	r24, r28
    1814:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    1818:	8c 01       	movw	r16, r24
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	b2 01       	movw	r22, r4
    1820:	ce 01       	movw	r24, r28
    1822:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    1826:	a8 01       	movw	r20, r16
    1828:	bc 01       	movw	r22, r24
    182a:	ce 01       	movw	r24, r28
    182c:	05 96       	adiw	r24, 0x05	; 5
    182e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_ZN5Gates1TEii>
    1832:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1834:	fc 01       	movw	r30, r24
    1836:	20 81       	ld	r18, Z
    1838:	31 81       	ldd	r19, Z+1	; 0x01
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	b2 01       	movw	r22, r4
    1840:	ce 01       	movw	r24, r28
    1842:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
    1846:	f6 01       	movw	r30, r12
    1848:	22 81       	ldd	r18, Z+2	; 0x02
    184a:	33 81       	ldd	r19, Z+3	; 0x03
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	b2 01       	movw	r22, r4
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN4QEPU5writeEiii>
		break;
    1858:	22 c0       	rjmp	.+68     	; 0x189e <_ZN4QEPU7executeEill+0x2d4>
		//2 QUBIT GATES -
		case 0x16: 
			gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    185a:	41 e0       	ldi	r20, 0x01	; 1
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	b7 01       	movw	r22, r14
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    1866:	8c 01       	movw	r16, r24
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	b4 01       	movw	r22, r8
    186e:	ce 01       	movw	r24, r28
    1870:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    1874:	5c 01       	movw	r10, r24
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	b2 01       	movw	r22, r4
    187c:	ce 01       	movw	r24, r28
    187e:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    1882:	7c 01       	movw	r14, r24
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	b2 01       	movw	r22, r4
    188a:	ce 01       	movw	r24, r28
    188c:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN4QEPU4readEii>
    1890:	95 01       	movw	r18, r10
    1892:	a7 01       	movw	r20, r14
    1894:	bc 01       	movw	r22, r24
    1896:	ce 01       	movw	r24, r28
    1898:	05 96       	adiw	r24, 0x05	; 5
    189a:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZN5Gates3CNOEiiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    189e:	c6 01       	movw	r24, r12
    18a0:	0e 94 b9 11 	call	0x2372	; 0x2372 <free>
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	ff 90       	pop	r15
    18ae:	ef 90       	pop	r14
    18b0:	df 90       	pop	r13
    18b2:	cf 90       	pop	r12
    18b4:	bf 90       	pop	r11
    18b6:	af 90       	pop	r10
    18b8:	9f 90       	pop	r9
    18ba:	8f 90       	pop	r8
    18bc:	7f 90       	pop	r7
    18be:	6f 90       	pop	r6
    18c0:	5f 90       	pop	r5
    18c2:	4f 90       	pop	r4
    18c4:	3f 90       	pop	r3
    18c6:	2f 90       	pop	r2
    18c8:	08 95       	ret

000018ca <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    18ca:	2f 92       	push	r2
    18cc:	3f 92       	push	r3
    18ce:	4f 92       	push	r4
    18d0:	5f 92       	push	r5
    18d2:	6f 92       	push	r6
    18d4:	7f 92       	push	r7
    18d6:	8f 92       	push	r8
    18d8:	9f 92       	push	r9
    18da:	af 92       	push	r10
    18dc:	bf 92       	push	r11
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	c0 57       	subi	r28, 0x70	; 112
    18f4:	d1 09       	sbc	r29, r1
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    1902:	0e 94 22 02 	call	0x444	; 0x444 <_ZN6EEProm7readallEv>
    1906:	bc 01       	movw	r22, r24
    1908:	c3 01       	movw	r24, r6
    190a:	02 96       	adiw	r24, 0x02	; 2
    190c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <_ZN4QEPU5Utils10str2intarrEPc>
    1910:	fc 01       	movw	r30, r24
    1912:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    1918:	40 85       	ldd	r20, Z+8	; 0x08
    191a:	51 85       	ldd	r21, Z+9	; 0x09
    191c:	4f 3f       	cpi	r20, 0xFF	; 255
    191e:	51 05       	cpc	r21, r1
    1920:	a1 f4       	brne	.+40     	; 0x194a <_ZN4QEPU3runEv+0x80>
    1922:	46 81       	ldd	r20, Z+6	; 0x06
    1924:	57 81       	ldd	r21, Z+7	; 0x07
    1926:	4f 3f       	cpi	r20, 0xFF	; 255
    1928:	51 05       	cpc	r21, r1
    192a:	79 f4       	brne	.+30     	; 0x194a <_ZN4QEPU3runEv+0x80>
    192c:	44 81       	ldd	r20, Z+4	; 0x04
    192e:	55 81       	ldd	r21, Z+5	; 0x05
    1930:	4f 3f       	cpi	r20, 0xFF	; 255
    1932:	51 05       	cpc	r21, r1
    1934:	51 f4       	brne	.+20     	; 0x194a <_ZN4QEPU3runEv+0x80>
    1936:	42 81       	ldd	r20, Z+2	; 0x02
    1938:	53 81       	ldd	r21, Z+3	; 0x03
    193a:	4f 3f       	cpi	r20, 0xFF	; 255
    193c:	51 05       	cpc	r21, r1
    193e:	29 f4       	brne	.+10     	; 0x194a <_ZN4QEPU3runEv+0x80>
    1940:	40 81       	ld	r20, Z
    1942:	51 81       	ldd	r21, Z+1	; 0x01
    1944:	4f 3f       	cpi	r20, 0xFF	; 255
    1946:	51 05       	cpc	r21, r1
    1948:	21 f0       	breq	.+8      	; 0x1952 <_ZN4QEPU3runEv+0x88>
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	32 96       	adiw	r30, 0x02	; 2
    1950:	e3 cf       	rjmp	.-58     	; 0x1918 <_ZN4QEPU3runEv+0x4e>
    1952:	a9 01       	movw	r20, r18
    1954:	44 50       	subi	r20, 0x04	; 4
    1956:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1958:	14 16       	cp	r1, r20
    195a:	15 06       	cpc	r1, r21
    195c:	0c f0       	brlt	.+2      	; 0x1960 <_ZN4QEPU3runEv+0x96>
    195e:	07 c1       	rjmp	.+526    	; 0x1b6e <_ZN4QEPU3runEv+0x2a4>
    1960:	fc 01       	movw	r30, r24
    1962:	25 50       	subi	r18, 0x05	; 5
    1964:	31 09       	sbc	r19, r1
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	41 2c       	mov	r4, r1
    1970:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    1972:	c1 2c       	mov	r12, r1
    1974:	d1 2c       	mov	r13, r1
    1976:	0c c0       	rjmp	.+24     	; 0x1990 <_ZN4QEPU3runEv+0xc6>
    1978:	69 30       	cpi	r22, 0x09	; 9
    197a:	71 05       	cpc	r23, r1
    197c:	34 f0       	brlt	.+12     	; 0x198a <_ZN4QEPU3runEv+0xc0>
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	48 1a       	sub	r4, r24
    1982:	58 0a       	sbc	r5, r24
    1984:	8c 2d       	mov	r24, r12
    1986:	9d 2d       	mov	r25, r13
    1988:	01 c0       	rjmp	.+2      	; 0x198c <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    198a:	cb 01       	movw	r24, r22
    198c:	4f 5f       	subi	r20, 0xFF	; 255
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	bc 01       	movw	r22, r24
    1992:	6f 5f       	subi	r22, 0xFF	; 255
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	01 91       	ld	r16, Z+
    1998:	11 91       	ld	r17, Z+
    199a:	d2 01       	movw	r26, r4
    199c:	aa 0f       	add	r26, r26
    199e:	bb 1f       	adc	r27, r27
    19a0:	aa 0f       	add	r26, r26
    19a2:	bb 1f       	adc	r27, r27
    19a4:	aa 0f       	add	r26, r26
    19a6:	bb 1f       	adc	r27, r27
    19a8:	a4 0d       	add	r26, r4
    19aa:	b5 1d       	adc	r27, r5
    19ac:	8a 0f       	add	r24, r26
    19ae:	9b 1f       	adc	r25, r27
    19b0:	dc 01       	movw	r26, r24
    19b2:	aa 0f       	add	r26, r26
    19b4:	bb 1f       	adc	r27, r27
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	8c 0f       	add	r24, r28
    19bc:	9d 1f       	adc	r25, r29
    19be:	a8 0f       	add	r26, r24
    19c0:	b9 1f       	adc	r27, r25
    19c2:	0d 93       	st	X+, r16
    19c4:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    19c6:	42 17       	cp	r20, r18
    19c8:	53 07       	cpc	r21, r19
    19ca:	b1 f6       	brne	.-84     	; 0x1978 <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    19cc:	f3 01       	movw	r30, r6
    19ce:	14 82       	std	Z+4, r1	; 0x04
    19d0:	13 82       	std	Z+3, r1	; 0x03
    19d2:	14 14       	cp	r1, r4
    19d4:	15 04       	cpc	r1, r5
    19d6:	0c f0       	brlt	.+2      	; 0x19da <_ZN4QEPU3runEv+0x110>
    19d8:	c6 c0       	rjmp	.+396    	; 0x1b66 <_ZN4QEPU3runEv+0x29c>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    19de:	5e 01       	movw	r10, r28
    19e0:	f2 e6       	ldi	r31, 0x62	; 98
    19e2:	af 0e       	add	r10, r31
    19e4:	b1 1c       	adc	r11, r1
    19e6:	6e 01       	movw	r12, r28
    19e8:	2b e5       	ldi	r18, 0x5B	; 91
    19ea:	c2 0e       	add	r12, r18
    19ec:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    19ee:	0f 2e       	mov	r0, r31
    19f0:	fa eb       	ldi	r31, 0xBA	; 186
    19f2:	8f 2e       	mov	r8, r31
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	9f 2e       	mov	r9, r31
    19f8:	f0 2d       	mov	r31, r0
    19fa:	ae 96       	adiw	r28, 0x2e	; 46
    19fc:	af ae       	std	Y+63, r10	; 0x3f
    19fe:	ae 97       	sbiw	r28, 0x2e	; 46
    1a00:	af 96       	adiw	r28, 0x2f	; 47
    1a02:	bf ae       	std	Y+63, r11	; 0x3f
    1a04:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1a06:	e0 96       	adiw	r28, 0x30	; 48
    1a08:	cf ae       	std	Y+63, r12	; 0x3f
    1a0a:	e0 97       	sbiw	r28, 0x30	; 48
    1a0c:	e1 96       	adiw	r28, 0x31	; 49
    1a0e:	df ae       	std	Y+63, r13	; 0x3f
    1a10:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1a12:	f5 01       	movw	r30, r10
    1a14:	10 82       	st	Z, r1
    1a16:	11 82       	std	Z+1, r1	; 0x01
    1a18:	12 82       	std	Z+2, r1	; 0x02
    1a1a:	13 82       	std	Z+3, r1	; 0x03
    1a1c:	14 82       	std	Z+4, r1	; 0x04
    1a1e:	15 82       	std	Z+5, r1	; 0x05
    1a20:	16 82       	std	Z+6, r1	; 0x06
    1a22:	f6 01       	movw	r30, r12
    1a24:	10 82       	st	Z, r1
    1a26:	11 82       	std	Z+1, r1	; 0x01
    1a28:	12 82       	std	Z+2, r1	; 0x02
    1a2a:	13 82       	std	Z+3, r1	; 0x03
    1a2c:	14 82       	std	Z+4, r1	; 0x04
    1a2e:	15 82       	std	Z+5, r1	; 0x05
    1a30:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	fc 01       	movw	r30, r24
    1a38:	ee 0f       	add	r30, r30
    1a3a:	ff 1f       	adc	r31, r31
    1a3c:	ee 0f       	add	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	ee 0f       	add	r30, r30
    1a42:	ff 1f       	adc	r31, r31
    1a44:	8e 0f       	add	r24, r30
    1a46:	9f 1f       	adc	r25, r31
    1a48:	e1 e0       	ldi	r30, 0x01	; 1
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	ec 0f       	add	r30, r28
    1a4e:	fd 1f       	adc	r31, r29
    1a50:	e8 0f       	add	r30, r24
    1a52:	f9 1f       	adc	r31, r25
    1a54:	20 80       	ld	r2, Z
    1a56:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1a58:	00 e0       	ldi	r16, 0x00	; 0
    1a5a:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1a5c:	0f 5f       	subi	r16, 0xFF	; 255
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	f3 01       	movw	r30, r6
    1a62:	83 81       	ldd	r24, Z+3	; 0x03
    1a64:	94 81       	ldd	r25, Z+4	; 0x04
    1a66:	fc 01       	movw	r30, r24
    1a68:	ee 0f       	add	r30, r30
    1a6a:	ff 1f       	adc	r31, r31
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	8e 0f       	add	r24, r30
    1a76:	9f 1f       	adc	r25, r31
    1a78:	80 0f       	add	r24, r16
    1a7a:	91 1f       	adc	r25, r17
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	8c 0f       	add	r24, r28
    1a88:	9d 1f       	adc	r25, r29
    1a8a:	e8 0f       	add	r30, r24
    1a8c:	f9 1f       	adc	r31, r25
    1a8e:	81 81       	ldd	r24, Z+1	; 0x01
    1a90:	8f 93       	push	r24
    1a92:	80 81       	ld	r24, Z
    1a94:	8f 93       	push	r24
    1a96:	bf 92       	push	r11
    1a98:	af 92       	push	r10
    1a9a:	9f 92       	push	r9
    1a9c:	8f 92       	push	r8
    1a9e:	bf 92       	push	r11
    1aa0:	af 92       	push	r10
    1aa2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1aa6:	f3 01       	movw	r30, r6
    1aa8:	83 81       	ldd	r24, Z+3	; 0x03
    1aaa:	94 81       	ldd	r25, Z+4	; 0x04
    1aac:	fc 01       	movw	r30, r24
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	ee 0f       	add	r30, r30
    1ab4:	ff 1f       	adc	r31, r31
    1ab6:	ee 0f       	add	r30, r30
    1ab8:	ff 1f       	adc	r31, r31
    1aba:	e8 0f       	add	r30, r24
    1abc:	f9 1f       	adc	r31, r25
    1abe:	e0 0f       	add	r30, r16
    1ac0:	f1 1f       	adc	r31, r17
    1ac2:	34 96       	adiw	r30, 0x04	; 4
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	8c 0f       	add	r24, r28
    1ace:	9d 1f       	adc	r25, r29
    1ad0:	e8 0f       	add	r30, r24
    1ad2:	f9 1f       	adc	r31, r25
    1ad4:	81 81       	ldd	r24, Z+1	; 0x01
    1ad6:	8f 93       	push	r24
    1ad8:	80 81       	ld	r24, Z
    1ada:	8f 93       	push	r24
    1adc:	df 92       	push	r13
    1ade:	cf 92       	push	r12
    1ae0:	9f 92       	push	r9
    1ae2:	8f 92       	push	r8
    1ae4:	df 92       	push	r13
    1ae6:	cf 92       	push	r12
    1ae8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	04 30       	cpi	r16, 0x04	; 4
    1af8:	11 05       	cpc	r17, r1
    1afa:	09 f0       	breq	.+2      	; 0x1afe <_ZN4QEPU3runEv+0x234>
    1afc:	af cf       	rjmp	.-162    	; 0x1a5c <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    1afe:	40 e1       	ldi	r20, 0x10	; 16
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	e0 96       	adiw	r28, 0x30	; 48
    1b08:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b0a:	e0 97       	sbiw	r28, 0x30	; 48
    1b0c:	e1 96       	adiw	r28, 0x31	; 49
    1b0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b10:	e1 97       	sbiw	r28, 0x31	; 49
    1b12:	0e 94 a6 12 	call	0x254c	; 0x254c <strtol>
    1b16:	ad 96       	adiw	r28, 0x2d	; 45
    1b18:	6c af       	std	Y+60, r22	; 0x3c
    1b1a:	7d af       	std	Y+61, r23	; 0x3d
    1b1c:	8e af       	std	Y+62, r24	; 0x3e
    1b1e:	9f af       	std	Y+63, r25	; 0x3f
    1b20:	ad 97       	sbiw	r28, 0x2d	; 45
    1b22:	40 e1       	ldi	r20, 0x10	; 16
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	ae 96       	adiw	r28, 0x2e	; 46
    1b2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b2e:	ae 97       	sbiw	r28, 0x2e	; 46
    1b30:	af 96       	adiw	r28, 0x2f	; 47
    1b32:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b34:	af 97       	sbiw	r28, 0x2f	; 47
    1b36:	0e 94 a6 12 	call	0x254c	; 0x254c <strtol>
    1b3a:	9b 01       	movw	r18, r22
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	ad 96       	adiw	r28, 0x2d	; 45
    1b40:	ec ac       	ldd	r14, Y+60	; 0x3c
    1b42:	fd ac       	ldd	r15, Y+61	; 0x3d
    1b44:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b46:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b48:	ad 97       	sbiw	r28, 0x2d	; 45
    1b4a:	b1 01       	movw	r22, r2
    1b4c:	c3 01       	movw	r24, r6
    1b4e:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1b52:	f3 01       	movw	r30, r6
    1b54:	83 81       	ldd	r24, Z+3	; 0x03
    1b56:	94 81       	ldd	r25, Z+4	; 0x04
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	94 83       	std	Z+4, r25	; 0x04
    1b5c:	83 83       	std	Z+3, r24	; 0x03
    1b5e:	84 15       	cp	r24, r4
    1b60:	95 05       	cpc	r25, r5
    1b62:	0c f4       	brge	.+2      	; 0x1b66 <_ZN4QEPU3runEv+0x29c>
    1b64:	56 cf       	rjmp	.-340    	; 0x1a12 <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    1b66:	c3 01       	movw	r24, r6
    1b68:	0e 94 b8 09 	call	0x1370	; 0x1370 <_ZN4QEPU7dumpmemEv>
    1b6c:	04 c0       	rjmp	.+8      	; 0x1b76 <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1b6e:	f3 01       	movw	r30, r6
    1b70:	14 82       	std	Z+4, r1	; 0x04
    1b72:	13 82       	std	Z+3, r1	; 0x03
    1b74:	f8 cf       	rjmp	.-16     	; 0x1b66 <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    1b76:	c0 59       	subi	r28, 0x90	; 144
    1b78:	df 4f       	sbci	r29, 0xFF	; 255
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	df 90       	pop	r13
    1b92:	cf 90       	pop	r12
    1b94:	bf 90       	pop	r11
    1b96:	af 90       	pop	r10
    1b98:	9f 90       	pop	r9
    1b9a:	8f 90       	pop	r8
    1b9c:	7f 90       	pop	r7
    1b9e:	6f 90       	pop	r6
    1ba0:	5f 90       	pop	r5
    1ba2:	4f 90       	pop	r4
    1ba4:	3f 90       	pop	r3
    1ba6:	2f 90       	pop	r2
    1ba8:	08 95       	ret

00001baa <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    1baa:	83 e3       	ldi	r24, 0x33	; 51
    1bac:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    1bae:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    1bb0:	86 e8       	ldi	r24, 0x86	; 134
    1bb2:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    1bb4:	88 e1       	ldi	r24, 0x18	; 24
    1bb6:	8a b9       	out	0x0a, r24	; 10
    1bb8:	08 95       	ret

00001bba <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    1bba:	5d 9b       	sbis	0x0b, 5	; 11
    1bbc:	fe cf       	rjmp	.-4      	; 0x1bba <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    1bbe:	6c b9       	out	0x0c, r22	; 12
    1bc0:	08 95       	ret

00001bc2 <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	8c 01       	movw	r16, r24
    1bcc:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    1bce:	68 81       	ld	r22, Y
    1bd0:	66 23       	and	r22, r22
    1bd2:	39 f0       	breq	.+14     	; 0x1be2 <_ZN6Serial8writestrEPc+0x20>
    1bd4:	21 96       	adiw	r28, 0x01	; 1
    1bd6:	c8 01       	movw	r24, r16
    1bd8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_ZN6Serial5writeEc>
    1bdc:	69 91       	ld	r22, Y+
    1bde:	61 11       	cpse	r22, r1
    1be0:	fa cf       	rjmp	.-12     	; 0x1bd6 <_ZN6Serial8writestrEPc+0x14>
}
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	08 95       	ret

00001bec <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	ec 01       	movw	r28, r24
	writestr(data);
    1bf2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    1bf6:	6d e0       	ldi	r22, 0x0D	; 13
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_ZN6Serial5writeEc>
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	08 95       	ret

00001c04 <acos>:
    1c04:	9f 93       	push	r25
    1c06:	9f 77       	andi	r25, 0x7F	; 127
    1c08:	71 d1       	rcall	.+738    	; 0x1eec <__fp_arccos>
    1c0a:	0f 90       	pop	r0
    1c0c:	00 20       	and	r0, r0
    1c0e:	3a f4       	brpl	.+14     	; 0x1c1e <acos+0x1a>
    1c10:	90 58       	subi	r25, 0x80	; 128
    1c12:	a2 ea       	ldi	r26, 0xA2	; 162
    1c14:	2a ed       	ldi	r18, 0xDA	; 218
    1c16:	3f e0       	ldi	r19, 0x0F	; 15
    1c18:	49 e4       	ldi	r20, 0x49	; 73
    1c1a:	50 e4       	ldi	r21, 0x40	; 64
    1c1c:	13 d0       	rcall	.+38     	; 0x1c44 <__addsf3x>
    1c1e:	e5 c1       	rjmp	.+970    	; 0x1fea <__fp_round>

00001c20 <__subsf3>:
    1c20:	50 58       	subi	r21, 0x80	; 128

00001c22 <__addsf3>:
    1c22:	bb 27       	eor	r27, r27
    1c24:	aa 27       	eor	r26, r26
    1c26:	0e d0       	rcall	.+28     	; 0x1c44 <__addsf3x>
    1c28:	e0 c1       	rjmp	.+960    	; 0x1fea <__fp_round>
    1c2a:	a9 d1       	rcall	.+850    	; 0x1f7e <__fp_pscA>
    1c2c:	30 f0       	brcs	.+12     	; 0x1c3a <__addsf3+0x18>
    1c2e:	ae d1       	rcall	.+860    	; 0x1f8c <__fp_pscB>
    1c30:	20 f0       	brcs	.+8      	; 0x1c3a <__addsf3+0x18>
    1c32:	31 f4       	brne	.+12     	; 0x1c40 <__addsf3+0x1e>
    1c34:	9f 3f       	cpi	r25, 0xFF	; 255
    1c36:	11 f4       	brne	.+4      	; 0x1c3c <__addsf3+0x1a>
    1c38:	1e f4       	brtc	.+6      	; 0x1c40 <__addsf3+0x1e>
    1c3a:	79 c1       	rjmp	.+754    	; 0x1f2e <__fp_nan>
    1c3c:	0e f4       	brtc	.+2      	; 0x1c40 <__addsf3+0x1e>
    1c3e:	e0 95       	com	r30
    1c40:	e7 fb       	bst	r30, 7
    1c42:	6f c1       	rjmp	.+734    	; 0x1f22 <__fp_inf>

00001c44 <__addsf3x>:
    1c44:	e9 2f       	mov	r30, r25
    1c46:	f3 d1       	rcall	.+998    	; 0x202e <__fp_split3>
    1c48:	80 f3       	brcs	.-32     	; 0x1c2a <__addsf3+0x8>
    1c4a:	ba 17       	cp	r27, r26
    1c4c:	62 07       	cpc	r22, r18
    1c4e:	73 07       	cpc	r23, r19
    1c50:	84 07       	cpc	r24, r20
    1c52:	95 07       	cpc	r25, r21
    1c54:	18 f0       	brcs	.+6      	; 0x1c5c <__addsf3x+0x18>
    1c56:	71 f4       	brne	.+28     	; 0x1c74 <__addsf3x+0x30>
    1c58:	9e f5       	brtc	.+102    	; 0x1cc0 <__addsf3x+0x7c>
    1c5a:	0b c2       	rjmp	.+1046   	; 0x2072 <__fp_zero>
    1c5c:	0e f4       	brtc	.+2      	; 0x1c60 <__addsf3x+0x1c>
    1c5e:	e0 95       	com	r30
    1c60:	0b 2e       	mov	r0, r27
    1c62:	ba 2f       	mov	r27, r26
    1c64:	a0 2d       	mov	r26, r0
    1c66:	0b 01       	movw	r0, r22
    1c68:	b9 01       	movw	r22, r18
    1c6a:	90 01       	movw	r18, r0
    1c6c:	0c 01       	movw	r0, r24
    1c6e:	ca 01       	movw	r24, r20
    1c70:	a0 01       	movw	r20, r0
    1c72:	11 24       	eor	r1, r1
    1c74:	ff 27       	eor	r31, r31
    1c76:	59 1b       	sub	r21, r25
    1c78:	99 f0       	breq	.+38     	; 0x1ca0 <__addsf3x+0x5c>
    1c7a:	59 3f       	cpi	r21, 0xF9	; 249
    1c7c:	50 f4       	brcc	.+20     	; 0x1c92 <__addsf3x+0x4e>
    1c7e:	50 3e       	cpi	r21, 0xE0	; 224
    1c80:	68 f1       	brcs	.+90     	; 0x1cdc <__addsf3x+0x98>
    1c82:	1a 16       	cp	r1, r26
    1c84:	f0 40       	sbci	r31, 0x00	; 0
    1c86:	a2 2f       	mov	r26, r18
    1c88:	23 2f       	mov	r18, r19
    1c8a:	34 2f       	mov	r19, r20
    1c8c:	44 27       	eor	r20, r20
    1c8e:	58 5f       	subi	r21, 0xF8	; 248
    1c90:	f3 cf       	rjmp	.-26     	; 0x1c78 <__addsf3x+0x34>
    1c92:	46 95       	lsr	r20
    1c94:	37 95       	ror	r19
    1c96:	27 95       	ror	r18
    1c98:	a7 95       	ror	r26
    1c9a:	f0 40       	sbci	r31, 0x00	; 0
    1c9c:	53 95       	inc	r21
    1c9e:	c9 f7       	brne	.-14     	; 0x1c92 <__addsf3x+0x4e>
    1ca0:	7e f4       	brtc	.+30     	; 0x1cc0 <__addsf3x+0x7c>
    1ca2:	1f 16       	cp	r1, r31
    1ca4:	ba 0b       	sbc	r27, r26
    1ca6:	62 0b       	sbc	r22, r18
    1ca8:	73 0b       	sbc	r23, r19
    1caa:	84 0b       	sbc	r24, r20
    1cac:	ba f0       	brmi	.+46     	; 0x1cdc <__addsf3x+0x98>
    1cae:	91 50       	subi	r25, 0x01	; 1
    1cb0:	a1 f0       	breq	.+40     	; 0x1cda <__addsf3x+0x96>
    1cb2:	ff 0f       	add	r31, r31
    1cb4:	bb 1f       	adc	r27, r27
    1cb6:	66 1f       	adc	r22, r22
    1cb8:	77 1f       	adc	r23, r23
    1cba:	88 1f       	adc	r24, r24
    1cbc:	c2 f7       	brpl	.-16     	; 0x1cae <__addsf3x+0x6a>
    1cbe:	0e c0       	rjmp	.+28     	; 0x1cdc <__addsf3x+0x98>
    1cc0:	ba 0f       	add	r27, r26
    1cc2:	62 1f       	adc	r22, r18
    1cc4:	73 1f       	adc	r23, r19
    1cc6:	84 1f       	adc	r24, r20
    1cc8:	48 f4       	brcc	.+18     	; 0x1cdc <__addsf3x+0x98>
    1cca:	87 95       	ror	r24
    1ccc:	77 95       	ror	r23
    1cce:	67 95       	ror	r22
    1cd0:	b7 95       	ror	r27
    1cd2:	f7 95       	ror	r31
    1cd4:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <__addsf3x+0x96>
    1cd8:	b3 cf       	rjmp	.-154    	; 0x1c40 <__addsf3+0x1e>
    1cda:	93 95       	inc	r25
    1cdc:	88 0f       	add	r24, r24
    1cde:	08 f0       	brcs	.+2      	; 0x1ce2 <__addsf3x+0x9e>
    1ce0:	99 27       	eor	r25, r25
    1ce2:	ee 0f       	add	r30, r30
    1ce4:	97 95       	ror	r25
    1ce6:	87 95       	ror	r24
    1ce8:	08 95       	ret

00001cea <atan>:
    1cea:	df 93       	push	r29
    1cec:	dd 27       	eor	r29, r29
    1cee:	b9 2f       	mov	r27, r25
    1cf0:	bf 77       	andi	r27, 0x7F	; 127
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	16 16       	cp	r1, r22
    1cf8:	17 06       	cpc	r1, r23
    1cfa:	48 07       	cpc	r20, r24
    1cfc:	5b 07       	cpc	r21, r27
    1cfe:	10 f4       	brcc	.+4      	; 0x1d04 <atan+0x1a>
    1d00:	d9 2f       	mov	r29, r25
    1d02:	be d1       	rcall	.+892    	; 0x2080 <inverse>
    1d04:	9f 93       	push	r25
    1d06:	8f 93       	push	r24
    1d08:	7f 93       	push	r23
    1d0a:	6f 93       	push	r22
    1d0c:	6b d2       	rcall	.+1238   	; 0x21e4 <square>
    1d0e:	e0 e8       	ldi	r30, 0x80	; 128
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	10 d1       	rcall	.+544    	; 0x1f34 <__fp_powser>
    1d14:	6a d1       	rcall	.+724    	; 0x1fea <__fp_round>
    1d16:	2f 91       	pop	r18
    1d18:	3f 91       	pop	r19
    1d1a:	4f 91       	pop	r20
    1d1c:	5f 91       	pop	r21
    1d1e:	c3 d1       	rcall	.+902    	; 0x20a6 <__mulsf3x>
    1d20:	dd 23       	and	r29, r29
    1d22:	49 f0       	breq	.+18     	; 0x1d36 <atan+0x4c>
    1d24:	90 58       	subi	r25, 0x80	; 128
    1d26:	a2 ea       	ldi	r26, 0xA2	; 162
    1d28:	2a ed       	ldi	r18, 0xDA	; 218
    1d2a:	3f e0       	ldi	r19, 0x0F	; 15
    1d2c:	49 ec       	ldi	r20, 0xC9	; 201
    1d2e:	5f e3       	ldi	r21, 0x3F	; 63
    1d30:	d0 78       	andi	r29, 0x80	; 128
    1d32:	5d 27       	eor	r21, r29
    1d34:	87 df       	rcall	.-242    	; 0x1c44 <__addsf3x>
    1d36:	df 91       	pop	r29
    1d38:	58 c1       	rjmp	.+688    	; 0x1fea <__fp_round>

00001d3a <cos>:
    1d3a:	30 d1       	rcall	.+608    	; 0x1f9c <__fp_rempio2>
    1d3c:	e3 95       	inc	r30
    1d3e:	66 c1       	rjmp	.+716    	; 0x200c <__fp_sinus>

00001d40 <__divsf3>:
    1d40:	0c d0       	rcall	.+24     	; 0x1d5a <__divsf3x>
    1d42:	53 c1       	rjmp	.+678    	; 0x1fea <__fp_round>
    1d44:	23 d1       	rcall	.+582    	; 0x1f8c <__fp_pscB>
    1d46:	40 f0       	brcs	.+16     	; 0x1d58 <__divsf3+0x18>
    1d48:	1a d1       	rcall	.+564    	; 0x1f7e <__fp_pscA>
    1d4a:	30 f0       	brcs	.+12     	; 0x1d58 <__divsf3+0x18>
    1d4c:	21 f4       	brne	.+8      	; 0x1d56 <__divsf3+0x16>
    1d4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d50:	19 f0       	breq	.+6      	; 0x1d58 <__divsf3+0x18>
    1d52:	e7 c0       	rjmp	.+462    	; 0x1f22 <__fp_inf>
    1d54:	51 11       	cpse	r21, r1
    1d56:	8e c1       	rjmp	.+796    	; 0x2074 <__fp_szero>
    1d58:	ea c0       	rjmp	.+468    	; 0x1f2e <__fp_nan>

00001d5a <__divsf3x>:
    1d5a:	69 d1       	rcall	.+722    	; 0x202e <__fp_split3>
    1d5c:	98 f3       	brcs	.-26     	; 0x1d44 <__divsf3+0x4>

00001d5e <__divsf3_pse>:
    1d5e:	99 23       	and	r25, r25
    1d60:	c9 f3       	breq	.-14     	; 0x1d54 <__divsf3+0x14>
    1d62:	55 23       	and	r21, r21
    1d64:	b1 f3       	breq	.-20     	; 0x1d52 <__divsf3+0x12>
    1d66:	95 1b       	sub	r25, r21
    1d68:	55 0b       	sbc	r21, r21
    1d6a:	bb 27       	eor	r27, r27
    1d6c:	aa 27       	eor	r26, r26
    1d6e:	62 17       	cp	r22, r18
    1d70:	73 07       	cpc	r23, r19
    1d72:	84 07       	cpc	r24, r20
    1d74:	38 f0       	brcs	.+14     	; 0x1d84 <__divsf3_pse+0x26>
    1d76:	9f 5f       	subi	r25, 0xFF	; 255
    1d78:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7a:	22 0f       	add	r18, r18
    1d7c:	33 1f       	adc	r19, r19
    1d7e:	44 1f       	adc	r20, r20
    1d80:	aa 1f       	adc	r26, r26
    1d82:	a9 f3       	breq	.-22     	; 0x1d6e <__divsf3_pse+0x10>
    1d84:	33 d0       	rcall	.+102    	; 0x1dec <__divsf3_pse+0x8e>
    1d86:	0e 2e       	mov	r0, r30
    1d88:	3a f0       	brmi	.+14     	; 0x1d98 <__divsf3_pse+0x3a>
    1d8a:	e0 e8       	ldi	r30, 0x80	; 128
    1d8c:	30 d0       	rcall	.+96     	; 0x1dee <__divsf3_pse+0x90>
    1d8e:	91 50       	subi	r25, 0x01	; 1
    1d90:	50 40       	sbci	r21, 0x00	; 0
    1d92:	e6 95       	lsr	r30
    1d94:	00 1c       	adc	r0, r0
    1d96:	ca f7       	brpl	.-14     	; 0x1d8a <__divsf3_pse+0x2c>
    1d98:	29 d0       	rcall	.+82     	; 0x1dec <__divsf3_pse+0x8e>
    1d9a:	fe 2f       	mov	r31, r30
    1d9c:	27 d0       	rcall	.+78     	; 0x1dec <__divsf3_pse+0x8e>
    1d9e:	66 0f       	add	r22, r22
    1da0:	77 1f       	adc	r23, r23
    1da2:	88 1f       	adc	r24, r24
    1da4:	bb 1f       	adc	r27, r27
    1da6:	26 17       	cp	r18, r22
    1da8:	37 07       	cpc	r19, r23
    1daa:	48 07       	cpc	r20, r24
    1dac:	ab 07       	cpc	r26, r27
    1dae:	b0 e8       	ldi	r27, 0x80	; 128
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <__divsf3_pse+0x56>
    1db2:	bb 0b       	sbc	r27, r27
    1db4:	80 2d       	mov	r24, r0
    1db6:	bf 01       	movw	r22, r30
    1db8:	ff 27       	eor	r31, r31
    1dba:	93 58       	subi	r25, 0x83	; 131
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	2a f0       	brmi	.+10     	; 0x1dca <__divsf3_pse+0x6c>
    1dc0:	9e 3f       	cpi	r25, 0xFE	; 254
    1dc2:	51 05       	cpc	r21, r1
    1dc4:	68 f0       	brcs	.+26     	; 0x1de0 <__divsf3_pse+0x82>
    1dc6:	ad c0       	rjmp	.+346    	; 0x1f22 <__fp_inf>
    1dc8:	55 c1       	rjmp	.+682    	; 0x2074 <__fp_szero>
    1dca:	5f 3f       	cpi	r21, 0xFF	; 255
    1dcc:	ec f3       	brlt	.-6      	; 0x1dc8 <__divsf3_pse+0x6a>
    1dce:	98 3e       	cpi	r25, 0xE8	; 232
    1dd0:	dc f3       	brlt	.-10     	; 0x1dc8 <__divsf3_pse+0x6a>
    1dd2:	86 95       	lsr	r24
    1dd4:	77 95       	ror	r23
    1dd6:	67 95       	ror	r22
    1dd8:	b7 95       	ror	r27
    1dda:	f7 95       	ror	r31
    1ddc:	9f 5f       	subi	r25, 0xFF	; 255
    1dde:	c9 f7       	brne	.-14     	; 0x1dd2 <__divsf3_pse+0x74>
    1de0:	88 0f       	add	r24, r24
    1de2:	91 1d       	adc	r25, r1
    1de4:	96 95       	lsr	r25
    1de6:	87 95       	ror	r24
    1de8:	97 f9       	bld	r25, 7
    1dea:	08 95       	ret
    1dec:	e1 e0       	ldi	r30, 0x01	; 1
    1dee:	66 0f       	add	r22, r22
    1df0:	77 1f       	adc	r23, r23
    1df2:	88 1f       	adc	r24, r24
    1df4:	bb 1f       	adc	r27, r27
    1df6:	62 17       	cp	r22, r18
    1df8:	73 07       	cpc	r23, r19
    1dfa:	84 07       	cpc	r24, r20
    1dfc:	ba 07       	cpc	r27, r26
    1dfe:	20 f0       	brcs	.+8      	; 0x1e08 <__divsf3_pse+0xaa>
    1e00:	62 1b       	sub	r22, r18
    1e02:	73 0b       	sbc	r23, r19
    1e04:	84 0b       	sbc	r24, r20
    1e06:	ba 0b       	sbc	r27, r26
    1e08:	ee 1f       	adc	r30, r30
    1e0a:	88 f7       	brcc	.-30     	; 0x1dee <__divsf3_pse+0x90>
    1e0c:	e0 95       	com	r30
    1e0e:	08 95       	ret

00001e10 <__fixsfsi>:
    1e10:	04 d0       	rcall	.+8      	; 0x1e1a <__fixunssfsi>
    1e12:	68 94       	set
    1e14:	b1 11       	cpse	r27, r1
    1e16:	2e c1       	rjmp	.+604    	; 0x2074 <__fp_szero>
    1e18:	08 95       	ret

00001e1a <__fixunssfsi>:
    1e1a:	11 d1       	rcall	.+546    	; 0x203e <__fp_splitA>
    1e1c:	88 f0       	brcs	.+34     	; 0x1e40 <__fixunssfsi+0x26>
    1e1e:	9f 57       	subi	r25, 0x7F	; 127
    1e20:	90 f0       	brcs	.+36     	; 0x1e46 <__fixunssfsi+0x2c>
    1e22:	b9 2f       	mov	r27, r25
    1e24:	99 27       	eor	r25, r25
    1e26:	b7 51       	subi	r27, 0x17	; 23
    1e28:	a0 f0       	brcs	.+40     	; 0x1e52 <__fixunssfsi+0x38>
    1e2a:	d1 f0       	breq	.+52     	; 0x1e60 <__fixunssfsi+0x46>
    1e2c:	66 0f       	add	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	88 1f       	adc	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	1a f0       	brmi	.+6      	; 0x1e3c <__fixunssfsi+0x22>
    1e36:	ba 95       	dec	r27
    1e38:	c9 f7       	brne	.-14     	; 0x1e2c <__fixunssfsi+0x12>
    1e3a:	12 c0       	rjmp	.+36     	; 0x1e60 <__fixunssfsi+0x46>
    1e3c:	b1 30       	cpi	r27, 0x01	; 1
    1e3e:	81 f0       	breq	.+32     	; 0x1e60 <__fixunssfsi+0x46>
    1e40:	18 d1       	rcall	.+560    	; 0x2072 <__fp_zero>
    1e42:	b1 e0       	ldi	r27, 0x01	; 1
    1e44:	08 95       	ret
    1e46:	15 c1       	rjmp	.+554    	; 0x2072 <__fp_zero>
    1e48:	67 2f       	mov	r22, r23
    1e4a:	78 2f       	mov	r23, r24
    1e4c:	88 27       	eor	r24, r24
    1e4e:	b8 5f       	subi	r27, 0xF8	; 248
    1e50:	39 f0       	breq	.+14     	; 0x1e60 <__fixunssfsi+0x46>
    1e52:	b9 3f       	cpi	r27, 0xF9	; 249
    1e54:	cc f3       	brlt	.-14     	; 0x1e48 <__fixunssfsi+0x2e>
    1e56:	86 95       	lsr	r24
    1e58:	77 95       	ror	r23
    1e5a:	67 95       	ror	r22
    1e5c:	b3 95       	inc	r27
    1e5e:	d9 f7       	brne	.-10     	; 0x1e56 <__fixunssfsi+0x3c>
    1e60:	3e f4       	brtc	.+14     	; 0x1e70 <__fixunssfsi+0x56>
    1e62:	90 95       	com	r25
    1e64:	80 95       	com	r24
    1e66:	70 95       	com	r23
    1e68:	61 95       	neg	r22
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	08 95       	ret

00001e72 <__floatunsisf>:
    1e72:	e8 94       	clt
    1e74:	09 c0       	rjmp	.+18     	; 0x1e88 <__floatsisf+0x12>

00001e76 <__floatsisf>:
    1e76:	97 fb       	bst	r25, 7
    1e78:	3e f4       	brtc	.+14     	; 0x1e88 <__floatsisf+0x12>
    1e7a:	90 95       	com	r25
    1e7c:	80 95       	com	r24
    1e7e:	70 95       	com	r23
    1e80:	61 95       	neg	r22
    1e82:	7f 4f       	sbci	r23, 0xFF	; 255
    1e84:	8f 4f       	sbci	r24, 0xFF	; 255
    1e86:	9f 4f       	sbci	r25, 0xFF	; 255
    1e88:	99 23       	and	r25, r25
    1e8a:	a9 f0       	breq	.+42     	; 0x1eb6 <__floatsisf+0x40>
    1e8c:	f9 2f       	mov	r31, r25
    1e8e:	96 e9       	ldi	r25, 0x96	; 150
    1e90:	bb 27       	eor	r27, r27
    1e92:	93 95       	inc	r25
    1e94:	f6 95       	lsr	r31
    1e96:	87 95       	ror	r24
    1e98:	77 95       	ror	r23
    1e9a:	67 95       	ror	r22
    1e9c:	b7 95       	ror	r27
    1e9e:	f1 11       	cpse	r31, r1
    1ea0:	f8 cf       	rjmp	.-16     	; 0x1e92 <__floatsisf+0x1c>
    1ea2:	fa f4       	brpl	.+62     	; 0x1ee2 <__floatsisf+0x6c>
    1ea4:	bb 0f       	add	r27, r27
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <__floatsisf+0x36>
    1ea8:	60 ff       	sbrs	r22, 0
    1eaa:	1b c0       	rjmp	.+54     	; 0x1ee2 <__floatsisf+0x6c>
    1eac:	6f 5f       	subi	r22, 0xFF	; 255
    1eae:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb4:	16 c0       	rjmp	.+44     	; 0x1ee2 <__floatsisf+0x6c>
    1eb6:	88 23       	and	r24, r24
    1eb8:	11 f0       	breq	.+4      	; 0x1ebe <__floatsisf+0x48>
    1eba:	96 e9       	ldi	r25, 0x96	; 150
    1ebc:	11 c0       	rjmp	.+34     	; 0x1ee0 <__floatsisf+0x6a>
    1ebe:	77 23       	and	r23, r23
    1ec0:	21 f0       	breq	.+8      	; 0x1eca <__floatsisf+0x54>
    1ec2:	9e e8       	ldi	r25, 0x8E	; 142
    1ec4:	87 2f       	mov	r24, r23
    1ec6:	76 2f       	mov	r23, r22
    1ec8:	05 c0       	rjmp	.+10     	; 0x1ed4 <__floatsisf+0x5e>
    1eca:	66 23       	and	r22, r22
    1ecc:	71 f0       	breq	.+28     	; 0x1eea <__floatsisf+0x74>
    1ece:	96 e8       	ldi	r25, 0x86	; 134
    1ed0:	86 2f       	mov	r24, r22
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	2a f0       	brmi	.+10     	; 0x1ee2 <__floatsisf+0x6c>
    1ed8:	9a 95       	dec	r25
    1eda:	66 0f       	add	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	88 1f       	adc	r24, r24
    1ee0:	da f7       	brpl	.-10     	; 0x1ed8 <__floatsisf+0x62>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	96 95       	lsr	r25
    1ee6:	87 95       	ror	r24
    1ee8:	97 f9       	bld	r25, 7
    1eea:	08 95       	ret

00001eec <__fp_arccos>:
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	1f 93       	push	r17
    1ef2:	0f 93       	push	r16
    1ef4:	8b 01       	movw	r16, r22
    1ef6:	ec 01       	movw	r28, r24
    1ef8:	ed ea       	ldi	r30, 0xAD	; 173
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	1b d0       	rcall	.+54     	; 0x1f34 <__fp_powser>
    1efe:	75 d0       	rcall	.+234    	; 0x1fea <__fp_round>
    1f00:	98 01       	movw	r18, r16
    1f02:	ae 01       	movw	r20, r28
    1f04:	8b 01       	movw	r16, r22
    1f06:	ec 01       	movw	r28, r24
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	80 e8       	ldi	r24, 0x80	; 128
    1f0e:	9f e3       	ldi	r25, 0x3F	; 63
    1f10:	87 de       	rcall	.-754    	; 0x1c20 <__subsf3>
    1f12:	2a d1       	rcall	.+596    	; 0x2168 <sqrt>
    1f14:	98 01       	movw	r18, r16
    1f16:	ae 01       	movw	r20, r28
    1f18:	0f 91       	pop	r16
    1f1a:	1f 91       	pop	r17
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	c2 c0       	rjmp	.+388    	; 0x20a6 <__mulsf3x>

00001f22 <__fp_inf>:
    1f22:	97 f9       	bld	r25, 7
    1f24:	9f 67       	ori	r25, 0x7F	; 127
    1f26:	80 e8       	ldi	r24, 0x80	; 128
    1f28:	70 e0       	ldi	r23, 0x00	; 0
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	08 95       	ret

00001f2e <__fp_nan>:
    1f2e:	9f ef       	ldi	r25, 0xFF	; 255
    1f30:	80 ec       	ldi	r24, 0xC0	; 192
    1f32:	08 95       	ret

00001f34 <__fp_powser>:
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	1f 93       	push	r17
    1f3a:	0f 93       	push	r16
    1f3c:	ff 92       	push	r15
    1f3e:	ef 92       	push	r14
    1f40:	df 92       	push	r13
    1f42:	7b 01       	movw	r14, r22
    1f44:	8c 01       	movw	r16, r24
    1f46:	68 94       	set
    1f48:	05 c0       	rjmp	.+10     	; 0x1f54 <__fp_powser+0x20>
    1f4a:	da 2e       	mov	r13, r26
    1f4c:	ef 01       	movw	r28, r30
    1f4e:	ab d0       	rcall	.+342    	; 0x20a6 <__mulsf3x>
    1f50:	fe 01       	movw	r30, r28
    1f52:	e8 94       	clt
    1f54:	a5 91       	lpm	r26, Z+
    1f56:	25 91       	lpm	r18, Z+
    1f58:	35 91       	lpm	r19, Z+
    1f5a:	45 91       	lpm	r20, Z+
    1f5c:	55 91       	lpm	r21, Z+
    1f5e:	ae f3       	brts	.-22     	; 0x1f4a <__fp_powser+0x16>
    1f60:	ef 01       	movw	r28, r30
    1f62:	70 de       	rcall	.-800    	; 0x1c44 <__addsf3x>
    1f64:	fe 01       	movw	r30, r28
    1f66:	97 01       	movw	r18, r14
    1f68:	a8 01       	movw	r20, r16
    1f6a:	da 94       	dec	r13
    1f6c:	79 f7       	brne	.-34     	; 0x1f4c <__fp_powser+0x18>
    1f6e:	df 90       	pop	r13
    1f70:	ef 90       	pop	r14
    1f72:	ff 90       	pop	r15
    1f74:	0f 91       	pop	r16
    1f76:	1f 91       	pop	r17
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <__fp_pscA>:
    1f7e:	00 24       	eor	r0, r0
    1f80:	0a 94       	dec	r0
    1f82:	16 16       	cp	r1, r22
    1f84:	17 06       	cpc	r1, r23
    1f86:	18 06       	cpc	r1, r24
    1f88:	09 06       	cpc	r0, r25
    1f8a:	08 95       	ret

00001f8c <__fp_pscB>:
    1f8c:	00 24       	eor	r0, r0
    1f8e:	0a 94       	dec	r0
    1f90:	12 16       	cp	r1, r18
    1f92:	13 06       	cpc	r1, r19
    1f94:	14 06       	cpc	r1, r20
    1f96:	05 06       	cpc	r0, r21
    1f98:	08 95       	ret
    1f9a:	c9 cf       	rjmp	.-110    	; 0x1f2e <__fp_nan>

00001f9c <__fp_rempio2>:
    1f9c:	50 d0       	rcall	.+160    	; 0x203e <__fp_splitA>
    1f9e:	e8 f3       	brcs	.-6      	; 0x1f9a <__fp_pscB+0xe>
    1fa0:	e8 94       	clt
    1fa2:	e0 e0       	ldi	r30, 0x00	; 0
    1fa4:	bb 27       	eor	r27, r27
    1fa6:	9f 57       	subi	r25, 0x7F	; 127
    1fa8:	f0 f0       	brcs	.+60     	; 0x1fe6 <__fp_rempio2+0x4a>
    1faa:	2a ed       	ldi	r18, 0xDA	; 218
    1fac:	3f e0       	ldi	r19, 0x0F	; 15
    1fae:	49 ec       	ldi	r20, 0xC9	; 201
    1fb0:	06 c0       	rjmp	.+12     	; 0x1fbe <__fp_rempio2+0x22>
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	bb 0f       	add	r27, r27
    1fb6:	66 1f       	adc	r22, r22
    1fb8:	77 1f       	adc	r23, r23
    1fba:	88 1f       	adc	r24, r24
    1fbc:	28 f0       	brcs	.+10     	; 0x1fc8 <__fp_rempio2+0x2c>
    1fbe:	b2 3a       	cpi	r27, 0xA2	; 162
    1fc0:	62 07       	cpc	r22, r18
    1fc2:	73 07       	cpc	r23, r19
    1fc4:	84 07       	cpc	r24, r20
    1fc6:	28 f0       	brcs	.+10     	; 0x1fd2 <__fp_rempio2+0x36>
    1fc8:	b2 5a       	subi	r27, 0xA2	; 162
    1fca:	62 0b       	sbc	r22, r18
    1fcc:	73 0b       	sbc	r23, r19
    1fce:	84 0b       	sbc	r24, r20
    1fd0:	e3 95       	inc	r30
    1fd2:	9a 95       	dec	r25
    1fd4:	72 f7       	brpl	.-36     	; 0x1fb2 <__fp_rempio2+0x16>
    1fd6:	80 38       	cpi	r24, 0x80	; 128
    1fd8:	30 f4       	brcc	.+12     	; 0x1fe6 <__fp_rempio2+0x4a>
    1fda:	9a 95       	dec	r25
    1fdc:	bb 0f       	add	r27, r27
    1fde:	66 1f       	adc	r22, r22
    1fe0:	77 1f       	adc	r23, r23
    1fe2:	88 1f       	adc	r24, r24
    1fe4:	d2 f7       	brpl	.-12     	; 0x1fda <__fp_rempio2+0x3e>
    1fe6:	90 48       	sbci	r25, 0x80	; 128
    1fe8:	02 c1       	rjmp	.+516    	; 0x21ee <__fp_mpack_finite>

00001fea <__fp_round>:
    1fea:	09 2e       	mov	r0, r25
    1fec:	03 94       	inc	r0
    1fee:	00 0c       	add	r0, r0
    1ff0:	11 f4       	brne	.+4      	; 0x1ff6 <__fp_round+0xc>
    1ff2:	88 23       	and	r24, r24
    1ff4:	52 f0       	brmi	.+20     	; 0x200a <__fp_round+0x20>
    1ff6:	bb 0f       	add	r27, r27
    1ff8:	40 f4       	brcc	.+16     	; 0x200a <__fp_round+0x20>
    1ffa:	bf 2b       	or	r27, r31
    1ffc:	11 f4       	brne	.+4      	; 0x2002 <__fp_round+0x18>
    1ffe:	60 ff       	sbrs	r22, 0
    2000:	04 c0       	rjmp	.+8      	; 0x200a <__fp_round+0x20>
    2002:	6f 5f       	subi	r22, 0xFF	; 255
    2004:	7f 4f       	sbci	r23, 0xFF	; 255
    2006:	8f 4f       	sbci	r24, 0xFF	; 255
    2008:	9f 4f       	sbci	r25, 0xFF	; 255
    200a:	08 95       	ret

0000200c <__fp_sinus>:
    200c:	ef 93       	push	r30
    200e:	e0 ff       	sbrs	r30, 0
    2010:	06 c0       	rjmp	.+12     	; 0x201e <__fp_sinus+0x12>
    2012:	a2 ea       	ldi	r26, 0xA2	; 162
    2014:	2a ed       	ldi	r18, 0xDA	; 218
    2016:	3f e0       	ldi	r19, 0x0F	; 15
    2018:	49 ec       	ldi	r20, 0xC9	; 201
    201a:	5f eb       	ldi	r21, 0xBF	; 191
    201c:	13 de       	rcall	.-986    	; 0x1c44 <__addsf3x>
    201e:	e5 df       	rcall	.-54     	; 0x1fea <__fp_round>
    2020:	0f 90       	pop	r0
    2022:	03 94       	inc	r0
    2024:	01 fc       	sbrc	r0, 1
    2026:	90 58       	subi	r25, 0x80	; 128
    2028:	e5 ed       	ldi	r30, 0xD5	; 213
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	f3 c0       	rjmp	.+486    	; 0x2214 <__fp_powsodd>

0000202e <__fp_split3>:
    202e:	57 fd       	sbrc	r21, 7
    2030:	90 58       	subi	r25, 0x80	; 128
    2032:	44 0f       	add	r20, r20
    2034:	55 1f       	adc	r21, r21
    2036:	59 f0       	breq	.+22     	; 0x204e <__fp_splitA+0x10>
    2038:	5f 3f       	cpi	r21, 0xFF	; 255
    203a:	71 f0       	breq	.+28     	; 0x2058 <__fp_splitA+0x1a>
    203c:	47 95       	ror	r20

0000203e <__fp_splitA>:
    203e:	88 0f       	add	r24, r24
    2040:	97 fb       	bst	r25, 7
    2042:	99 1f       	adc	r25, r25
    2044:	61 f0       	breq	.+24     	; 0x205e <__fp_splitA+0x20>
    2046:	9f 3f       	cpi	r25, 0xFF	; 255
    2048:	79 f0       	breq	.+30     	; 0x2068 <__fp_splitA+0x2a>
    204a:	87 95       	ror	r24
    204c:	08 95       	ret
    204e:	12 16       	cp	r1, r18
    2050:	13 06       	cpc	r1, r19
    2052:	14 06       	cpc	r1, r20
    2054:	55 1f       	adc	r21, r21
    2056:	f2 cf       	rjmp	.-28     	; 0x203c <__fp_split3+0xe>
    2058:	46 95       	lsr	r20
    205a:	f1 df       	rcall	.-30     	; 0x203e <__fp_splitA>
    205c:	08 c0       	rjmp	.+16     	; 0x206e <__fp_splitA+0x30>
    205e:	16 16       	cp	r1, r22
    2060:	17 06       	cpc	r1, r23
    2062:	18 06       	cpc	r1, r24
    2064:	99 1f       	adc	r25, r25
    2066:	f1 cf       	rjmp	.-30     	; 0x204a <__fp_splitA+0xc>
    2068:	86 95       	lsr	r24
    206a:	71 05       	cpc	r23, r1
    206c:	61 05       	cpc	r22, r1
    206e:	08 94       	sec
    2070:	08 95       	ret

00002072 <__fp_zero>:
    2072:	e8 94       	clt

00002074 <__fp_szero>:
    2074:	bb 27       	eor	r27, r27
    2076:	66 27       	eor	r22, r22
    2078:	77 27       	eor	r23, r23
    207a:	cb 01       	movw	r24, r22
    207c:	97 f9       	bld	r25, 7
    207e:	08 95       	ret

00002080 <inverse>:
    2080:	9b 01       	movw	r18, r22
    2082:	ac 01       	movw	r20, r24
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	80 e8       	ldi	r24, 0x80	; 128
    208a:	9f e3       	ldi	r25, 0x3F	; 63
    208c:	59 ce       	rjmp	.-846    	; 0x1d40 <__divsf3>

0000208e <__mulsf3>:
    208e:	0b d0       	rcall	.+22     	; 0x20a6 <__mulsf3x>
    2090:	ac cf       	rjmp	.-168    	; 0x1fea <__fp_round>
    2092:	75 df       	rcall	.-278    	; 0x1f7e <__fp_pscA>
    2094:	28 f0       	brcs	.+10     	; 0x20a0 <__mulsf3+0x12>
    2096:	7a df       	rcall	.-268    	; 0x1f8c <__fp_pscB>
    2098:	18 f0       	brcs	.+6      	; 0x20a0 <__mulsf3+0x12>
    209a:	95 23       	and	r25, r21
    209c:	09 f0       	breq	.+2      	; 0x20a0 <__mulsf3+0x12>
    209e:	41 cf       	rjmp	.-382    	; 0x1f22 <__fp_inf>
    20a0:	46 cf       	rjmp	.-372    	; 0x1f2e <__fp_nan>
    20a2:	11 24       	eor	r1, r1
    20a4:	e7 cf       	rjmp	.-50     	; 0x2074 <__fp_szero>

000020a6 <__mulsf3x>:
    20a6:	c3 df       	rcall	.-122    	; 0x202e <__fp_split3>
    20a8:	a0 f3       	brcs	.-24     	; 0x2092 <__mulsf3+0x4>

000020aa <__mulsf3_pse>:
    20aa:	95 9f       	mul	r25, r21
    20ac:	d1 f3       	breq	.-12     	; 0x20a2 <__mulsf3+0x14>
    20ae:	95 0f       	add	r25, r21
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	55 1f       	adc	r21, r21
    20b4:	62 9f       	mul	r22, r18
    20b6:	f0 01       	movw	r30, r0
    20b8:	72 9f       	mul	r23, r18
    20ba:	bb 27       	eor	r27, r27
    20bc:	f0 0d       	add	r31, r0
    20be:	b1 1d       	adc	r27, r1
    20c0:	63 9f       	mul	r22, r19
    20c2:	aa 27       	eor	r26, r26
    20c4:	f0 0d       	add	r31, r0
    20c6:	b1 1d       	adc	r27, r1
    20c8:	aa 1f       	adc	r26, r26
    20ca:	64 9f       	mul	r22, r20
    20cc:	66 27       	eor	r22, r22
    20ce:	b0 0d       	add	r27, r0
    20d0:	a1 1d       	adc	r26, r1
    20d2:	66 1f       	adc	r22, r22
    20d4:	82 9f       	mul	r24, r18
    20d6:	22 27       	eor	r18, r18
    20d8:	b0 0d       	add	r27, r0
    20da:	a1 1d       	adc	r26, r1
    20dc:	62 1f       	adc	r22, r18
    20de:	73 9f       	mul	r23, r19
    20e0:	b0 0d       	add	r27, r0
    20e2:	a1 1d       	adc	r26, r1
    20e4:	62 1f       	adc	r22, r18
    20e6:	83 9f       	mul	r24, r19
    20e8:	a0 0d       	add	r26, r0
    20ea:	61 1d       	adc	r22, r1
    20ec:	22 1f       	adc	r18, r18
    20ee:	74 9f       	mul	r23, r20
    20f0:	33 27       	eor	r19, r19
    20f2:	a0 0d       	add	r26, r0
    20f4:	61 1d       	adc	r22, r1
    20f6:	23 1f       	adc	r18, r19
    20f8:	84 9f       	mul	r24, r20
    20fa:	60 0d       	add	r22, r0
    20fc:	21 1d       	adc	r18, r1
    20fe:	82 2f       	mov	r24, r18
    2100:	76 2f       	mov	r23, r22
    2102:	6a 2f       	mov	r22, r26
    2104:	11 24       	eor	r1, r1
    2106:	9f 57       	subi	r25, 0x7F	; 127
    2108:	50 40       	sbci	r21, 0x00	; 0
    210a:	8a f0       	brmi	.+34     	; 0x212e <__mulsf3_pse+0x84>
    210c:	e1 f0       	breq	.+56     	; 0x2146 <__mulsf3_pse+0x9c>
    210e:	88 23       	and	r24, r24
    2110:	4a f0       	brmi	.+18     	; 0x2124 <__mulsf3_pse+0x7a>
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	bb 1f       	adc	r27, r27
    2118:	66 1f       	adc	r22, r22
    211a:	77 1f       	adc	r23, r23
    211c:	88 1f       	adc	r24, r24
    211e:	91 50       	subi	r25, 0x01	; 1
    2120:	50 40       	sbci	r21, 0x00	; 0
    2122:	a9 f7       	brne	.-22     	; 0x210e <__mulsf3_pse+0x64>
    2124:	9e 3f       	cpi	r25, 0xFE	; 254
    2126:	51 05       	cpc	r21, r1
    2128:	70 f0       	brcs	.+28     	; 0x2146 <__mulsf3_pse+0x9c>
    212a:	fb ce       	rjmp	.-522    	; 0x1f22 <__fp_inf>
    212c:	a3 cf       	rjmp	.-186    	; 0x2074 <__fp_szero>
    212e:	5f 3f       	cpi	r21, 0xFF	; 255
    2130:	ec f3       	brlt	.-6      	; 0x212c <__mulsf3_pse+0x82>
    2132:	98 3e       	cpi	r25, 0xE8	; 232
    2134:	dc f3       	brlt	.-10     	; 0x212c <__mulsf3_pse+0x82>
    2136:	86 95       	lsr	r24
    2138:	77 95       	ror	r23
    213a:	67 95       	ror	r22
    213c:	b7 95       	ror	r27
    213e:	f7 95       	ror	r31
    2140:	e7 95       	ror	r30
    2142:	9f 5f       	subi	r25, 0xFF	; 255
    2144:	c1 f7       	brne	.-16     	; 0x2136 <__mulsf3_pse+0x8c>
    2146:	fe 2b       	or	r31, r30
    2148:	88 0f       	add	r24, r24
    214a:	91 1d       	adc	r25, r1
    214c:	96 95       	lsr	r25
    214e:	87 95       	ror	r24
    2150:	97 f9       	bld	r25, 7
    2152:	08 95       	ret

00002154 <sin>:
    2154:	9f 93       	push	r25
    2156:	22 df       	rcall	.-444    	; 0x1f9c <__fp_rempio2>
    2158:	0f 90       	pop	r0
    215a:	07 fc       	sbrc	r0, 7
    215c:	ee 5f       	subi	r30, 0xFE	; 254
    215e:	56 cf       	rjmp	.-340    	; 0x200c <__fp_sinus>
    2160:	11 f4       	brne	.+4      	; 0x2166 <sin+0x12>
    2162:	0e f4       	brtc	.+2      	; 0x2166 <sin+0x12>
    2164:	e4 ce       	rjmp	.-568    	; 0x1f2e <__fp_nan>
    2166:	41 c0       	rjmp	.+130    	; 0x21ea <__fp_mpack>

00002168 <sqrt>:
    2168:	6a df       	rcall	.-300    	; 0x203e <__fp_splitA>
    216a:	d0 f3       	brcs	.-12     	; 0x2160 <sin+0xc>
    216c:	99 23       	and	r25, r25
    216e:	d9 f3       	breq	.-10     	; 0x2166 <sin+0x12>
    2170:	ce f3       	brts	.-14     	; 0x2164 <sin+0x10>
    2172:	9f 57       	subi	r25, 0x7F	; 127
    2174:	55 0b       	sbc	r21, r21
    2176:	87 ff       	sbrs	r24, 7
    2178:	46 d0       	rcall	.+140    	; 0x2206 <__fp_norm2>
    217a:	00 24       	eor	r0, r0
    217c:	a0 e6       	ldi	r26, 0x60	; 96
    217e:	40 ea       	ldi	r20, 0xA0	; 160
    2180:	90 01       	movw	r18, r0
    2182:	80 58       	subi	r24, 0x80	; 128
    2184:	56 95       	lsr	r21
    2186:	97 95       	ror	r25
    2188:	28 f4       	brcc	.+10     	; 0x2194 <sqrt+0x2c>
    218a:	80 5c       	subi	r24, 0xC0	; 192
    218c:	66 0f       	add	r22, r22
    218e:	77 1f       	adc	r23, r23
    2190:	88 1f       	adc	r24, r24
    2192:	20 f0       	brcs	.+8      	; 0x219c <sqrt+0x34>
    2194:	26 17       	cp	r18, r22
    2196:	37 07       	cpc	r19, r23
    2198:	48 07       	cpc	r20, r24
    219a:	30 f4       	brcc	.+12     	; 0x21a8 <sqrt+0x40>
    219c:	62 1b       	sub	r22, r18
    219e:	73 0b       	sbc	r23, r19
    21a0:	84 0b       	sbc	r24, r20
    21a2:	20 29       	or	r18, r0
    21a4:	31 29       	or	r19, r1
    21a6:	4a 2b       	or	r20, r26
    21a8:	a6 95       	lsr	r26
    21aa:	17 94       	ror	r1
    21ac:	07 94       	ror	r0
    21ae:	20 25       	eor	r18, r0
    21b0:	31 25       	eor	r19, r1
    21b2:	4a 27       	eor	r20, r26
    21b4:	58 f7       	brcc	.-42     	; 0x218c <sqrt+0x24>
    21b6:	66 0f       	add	r22, r22
    21b8:	77 1f       	adc	r23, r23
    21ba:	88 1f       	adc	r24, r24
    21bc:	20 f0       	brcs	.+8      	; 0x21c6 <sqrt+0x5e>
    21be:	26 17       	cp	r18, r22
    21c0:	37 07       	cpc	r19, r23
    21c2:	48 07       	cpc	r20, r24
    21c4:	30 f4       	brcc	.+12     	; 0x21d2 <sqrt+0x6a>
    21c6:	62 0b       	sbc	r22, r18
    21c8:	73 0b       	sbc	r23, r19
    21ca:	84 0b       	sbc	r24, r20
    21cc:	20 0d       	add	r18, r0
    21ce:	31 1d       	adc	r19, r1
    21d0:	41 1d       	adc	r20, r1
    21d2:	a0 95       	com	r26
    21d4:	81 f7       	brne	.-32     	; 0x21b6 <sqrt+0x4e>
    21d6:	b9 01       	movw	r22, r18
    21d8:	84 2f       	mov	r24, r20
    21da:	91 58       	subi	r25, 0x81	; 129
    21dc:	88 0f       	add	r24, r24
    21de:	96 95       	lsr	r25
    21e0:	87 95       	ror	r24
    21e2:	08 95       	ret

000021e4 <square>:
    21e4:	9b 01       	movw	r18, r22
    21e6:	ac 01       	movw	r20, r24
    21e8:	52 cf       	rjmp	.-348    	; 0x208e <__mulsf3>

000021ea <__fp_mpack>:
    21ea:	9f 3f       	cpi	r25, 0xFF	; 255
    21ec:	31 f0       	breq	.+12     	; 0x21fa <__fp_mpack_finite+0xc>

000021ee <__fp_mpack_finite>:
    21ee:	91 50       	subi	r25, 0x01	; 1
    21f0:	20 f4       	brcc	.+8      	; 0x21fa <__fp_mpack_finite+0xc>
    21f2:	87 95       	ror	r24
    21f4:	77 95       	ror	r23
    21f6:	67 95       	ror	r22
    21f8:	b7 95       	ror	r27
    21fa:	88 0f       	add	r24, r24
    21fc:	91 1d       	adc	r25, r1
    21fe:	96 95       	lsr	r25
    2200:	87 95       	ror	r24
    2202:	97 f9       	bld	r25, 7
    2204:	08 95       	ret

00002206 <__fp_norm2>:
    2206:	91 50       	subi	r25, 0x01	; 1
    2208:	50 40       	sbci	r21, 0x00	; 0
    220a:	66 0f       	add	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	88 1f       	adc	r24, r24
    2210:	d2 f7       	brpl	.-12     	; 0x2206 <__fp_norm2>
    2212:	08 95       	ret

00002214 <__fp_powsodd>:
    2214:	9f 93       	push	r25
    2216:	8f 93       	push	r24
    2218:	7f 93       	push	r23
    221a:	6f 93       	push	r22
    221c:	ff 93       	push	r31
    221e:	ef 93       	push	r30
    2220:	9b 01       	movw	r18, r22
    2222:	ac 01       	movw	r20, r24
    2224:	34 df       	rcall	.-408    	; 0x208e <__mulsf3>
    2226:	ef 91       	pop	r30
    2228:	ff 91       	pop	r31
    222a:	84 de       	rcall	.-760    	; 0x1f34 <__fp_powser>
    222c:	2f 91       	pop	r18
    222e:	3f 91       	pop	r19
    2230:	4f 91       	pop	r20
    2232:	5f 91       	pop	r21
    2234:	2c cf       	rjmp	.-424    	; 0x208e <__mulsf3>

00002236 <__tablejump2__>:
    2236:	ee 0f       	add	r30, r30
    2238:	ff 1f       	adc	r31, r31

0000223a <__tablejump__>:
    223a:	05 90       	lpm	r0, Z+
    223c:	f4 91       	lpm	r31, Z
    223e:	e0 2d       	mov	r30, r0
    2240:	09 94       	ijmp

00002242 <malloc>:
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	91 05       	cpc	r25, r1
    224a:	10 f4       	brcc	.+4      	; 0x2250 <malloc+0xe>
    224c:	82 e0       	ldi	r24, 0x02	; 2
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	e0 91 c4 00 	lds	r30, 0x00C4
    2254:	f0 91 c5 00 	lds	r31, 0x00C5
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	a0 e0       	ldi	r26, 0x00	; 0
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	30 97       	sbiw	r30, 0x00	; 0
    2262:	39 f1       	breq	.+78     	; 0x22b2 <malloc+0x70>
    2264:	40 81       	ld	r20, Z
    2266:	51 81       	ldd	r21, Z+1	; 0x01
    2268:	48 17       	cp	r20, r24
    226a:	59 07       	cpc	r21, r25
    226c:	b8 f0       	brcs	.+46     	; 0x229c <malloc+0x5a>
    226e:	48 17       	cp	r20, r24
    2270:	59 07       	cpc	r21, r25
    2272:	71 f4       	brne	.+28     	; 0x2290 <malloc+0x4e>
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	10 97       	sbiw	r26, 0x00	; 0
    227a:	29 f0       	breq	.+10     	; 0x2286 <malloc+0x44>
    227c:	13 96       	adiw	r26, 0x03	; 3
    227e:	9c 93       	st	X, r25
    2280:	8e 93       	st	-X, r24
    2282:	12 97       	sbiw	r26, 0x02	; 2
    2284:	2c c0       	rjmp	.+88     	; 0x22de <malloc+0x9c>
    2286:	90 93 c5 00 	sts	0x00C5, r25
    228a:	80 93 c4 00 	sts	0x00C4, r24
    228e:	27 c0       	rjmp	.+78     	; 0x22de <malloc+0x9c>
    2290:	21 15       	cp	r18, r1
    2292:	31 05       	cpc	r19, r1
    2294:	31 f0       	breq	.+12     	; 0x22a2 <malloc+0x60>
    2296:	42 17       	cp	r20, r18
    2298:	53 07       	cpc	r21, r19
    229a:	18 f0       	brcs	.+6      	; 0x22a2 <malloc+0x60>
    229c:	a9 01       	movw	r20, r18
    229e:	db 01       	movw	r26, r22
    22a0:	01 c0       	rjmp	.+2      	; 0x22a4 <malloc+0x62>
    22a2:	ef 01       	movw	r28, r30
    22a4:	9a 01       	movw	r18, r20
    22a6:	bd 01       	movw	r22, r26
    22a8:	df 01       	movw	r26, r30
    22aa:	02 80       	ldd	r0, Z+2	; 0x02
    22ac:	f3 81       	ldd	r31, Z+3	; 0x03
    22ae:	e0 2d       	mov	r30, r0
    22b0:	d7 cf       	rjmp	.-82     	; 0x2260 <malloc+0x1e>
    22b2:	21 15       	cp	r18, r1
    22b4:	31 05       	cpc	r19, r1
    22b6:	f9 f0       	breq	.+62     	; 0x22f6 <malloc+0xb4>
    22b8:	28 1b       	sub	r18, r24
    22ba:	39 0b       	sbc	r19, r25
    22bc:	24 30       	cpi	r18, 0x04	; 4
    22be:	31 05       	cpc	r19, r1
    22c0:	80 f4       	brcc	.+32     	; 0x22e2 <malloc+0xa0>
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	9b 81       	ldd	r25, Y+3	; 0x03
    22c6:	61 15       	cp	r22, r1
    22c8:	71 05       	cpc	r23, r1
    22ca:	21 f0       	breq	.+8      	; 0x22d4 <malloc+0x92>
    22cc:	fb 01       	movw	r30, r22
    22ce:	93 83       	std	Z+3, r25	; 0x03
    22d0:	82 83       	std	Z+2, r24	; 0x02
    22d2:	04 c0       	rjmp	.+8      	; 0x22dc <malloc+0x9a>
    22d4:	90 93 c5 00 	sts	0x00C5, r25
    22d8:	80 93 c4 00 	sts	0x00C4, r24
    22dc:	fe 01       	movw	r30, r28
    22de:	32 96       	adiw	r30, 0x02	; 2
    22e0:	44 c0       	rjmp	.+136    	; 0x236a <malloc+0x128>
    22e2:	fe 01       	movw	r30, r28
    22e4:	e2 0f       	add	r30, r18
    22e6:	f3 1f       	adc	r31, r19
    22e8:	81 93       	st	Z+, r24
    22ea:	91 93       	st	Z+, r25
    22ec:	22 50       	subi	r18, 0x02	; 2
    22ee:	31 09       	sbc	r19, r1
    22f0:	39 83       	std	Y+1, r19	; 0x01
    22f2:	28 83       	st	Y, r18
    22f4:	3a c0       	rjmp	.+116    	; 0x236a <malloc+0x128>
    22f6:	20 91 c2 00 	lds	r18, 0x00C2
    22fa:	30 91 c3 00 	lds	r19, 0x00C3
    22fe:	23 2b       	or	r18, r19
    2300:	41 f4       	brne	.+16     	; 0x2312 <malloc+0xd0>
    2302:	20 91 62 00 	lds	r18, 0x0062
    2306:	30 91 63 00 	lds	r19, 0x0063
    230a:	30 93 c3 00 	sts	0x00C3, r19
    230e:	20 93 c2 00 	sts	0x00C2, r18
    2312:	20 91 60 00 	lds	r18, 0x0060
    2316:	30 91 61 00 	lds	r19, 0x0061
    231a:	21 15       	cp	r18, r1
    231c:	31 05       	cpc	r19, r1
    231e:	41 f4       	brne	.+16     	; 0x2330 <malloc+0xee>
    2320:	2d b7       	in	r18, 0x3d	; 61
    2322:	3e b7       	in	r19, 0x3e	; 62
    2324:	40 91 64 00 	lds	r20, 0x0064
    2328:	50 91 65 00 	lds	r21, 0x0065
    232c:	24 1b       	sub	r18, r20
    232e:	35 0b       	sbc	r19, r21
    2330:	e0 91 c2 00 	lds	r30, 0x00C2
    2334:	f0 91 c3 00 	lds	r31, 0x00C3
    2338:	e2 17       	cp	r30, r18
    233a:	f3 07       	cpc	r31, r19
    233c:	a0 f4       	brcc	.+40     	; 0x2366 <malloc+0x124>
    233e:	2e 1b       	sub	r18, r30
    2340:	3f 0b       	sbc	r19, r31
    2342:	28 17       	cp	r18, r24
    2344:	39 07       	cpc	r19, r25
    2346:	78 f0       	brcs	.+30     	; 0x2366 <malloc+0x124>
    2348:	ac 01       	movw	r20, r24
    234a:	4e 5f       	subi	r20, 0xFE	; 254
    234c:	5f 4f       	sbci	r21, 0xFF	; 255
    234e:	24 17       	cp	r18, r20
    2350:	35 07       	cpc	r19, r21
    2352:	48 f0       	brcs	.+18     	; 0x2366 <malloc+0x124>
    2354:	4e 0f       	add	r20, r30
    2356:	5f 1f       	adc	r21, r31
    2358:	50 93 c3 00 	sts	0x00C3, r21
    235c:	40 93 c2 00 	sts	0x00C2, r20
    2360:	81 93       	st	Z+, r24
    2362:	91 93       	st	Z+, r25
    2364:	02 c0       	rjmp	.+4      	; 0x236a <malloc+0x128>
    2366:	e0 e0       	ldi	r30, 0x00	; 0
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	cf 01       	movw	r24, r30
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	08 95       	ret

00002372 <free>:
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	09 f4       	brne	.+2      	; 0x237c <free+0xa>
    237a:	87 c0       	rjmp	.+270    	; 0x248a <free+0x118>
    237c:	fc 01       	movw	r30, r24
    237e:	32 97       	sbiw	r30, 0x02	; 2
    2380:	13 82       	std	Z+3, r1	; 0x03
    2382:	12 82       	std	Z+2, r1	; 0x02
    2384:	c0 91 c4 00 	lds	r28, 0x00C4
    2388:	d0 91 c5 00 	lds	r29, 0x00C5
    238c:	20 97       	sbiw	r28, 0x00	; 0
    238e:	81 f4       	brne	.+32     	; 0x23b0 <free+0x3e>
    2390:	20 81       	ld	r18, Z
    2392:	31 81       	ldd	r19, Z+1	; 0x01
    2394:	28 0f       	add	r18, r24
    2396:	39 1f       	adc	r19, r25
    2398:	80 91 c2 00 	lds	r24, 0x00C2
    239c:	90 91 c3 00 	lds	r25, 0x00C3
    23a0:	82 17       	cp	r24, r18
    23a2:	93 07       	cpc	r25, r19
    23a4:	79 f5       	brne	.+94     	; 0x2404 <free+0x92>
    23a6:	f0 93 c3 00 	sts	0x00C3, r31
    23aa:	e0 93 c2 00 	sts	0x00C2, r30
    23ae:	6d c0       	rjmp	.+218    	; 0x248a <free+0x118>
    23b0:	de 01       	movw	r26, r28
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	ae 17       	cp	r26, r30
    23b8:	bf 07       	cpc	r27, r31
    23ba:	50 f4       	brcc	.+20     	; 0x23d0 <free+0x5e>
    23bc:	12 96       	adiw	r26, 0x02	; 2
    23be:	4d 91       	ld	r20, X+
    23c0:	5c 91       	ld	r21, X
    23c2:	13 97       	sbiw	r26, 0x03	; 3
    23c4:	9d 01       	movw	r18, r26
    23c6:	41 15       	cp	r20, r1
    23c8:	51 05       	cpc	r21, r1
    23ca:	09 f1       	breq	.+66     	; 0x240e <free+0x9c>
    23cc:	da 01       	movw	r26, r20
    23ce:	f3 cf       	rjmp	.-26     	; 0x23b6 <free+0x44>
    23d0:	b3 83       	std	Z+3, r27	; 0x03
    23d2:	a2 83       	std	Z+2, r26	; 0x02
    23d4:	40 81       	ld	r20, Z
    23d6:	51 81       	ldd	r21, Z+1	; 0x01
    23d8:	84 0f       	add	r24, r20
    23da:	95 1f       	adc	r25, r21
    23dc:	8a 17       	cp	r24, r26
    23de:	9b 07       	cpc	r25, r27
    23e0:	71 f4       	brne	.+28     	; 0x23fe <free+0x8c>
    23e2:	8d 91       	ld	r24, X+
    23e4:	9c 91       	ld	r25, X
    23e6:	11 97       	sbiw	r26, 0x01	; 1
    23e8:	84 0f       	add	r24, r20
    23ea:	95 1f       	adc	r25, r21
    23ec:	02 96       	adiw	r24, 0x02	; 2
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
    23f2:	12 96       	adiw	r26, 0x02	; 2
    23f4:	8d 91       	ld	r24, X+
    23f6:	9c 91       	ld	r25, X
    23f8:	13 97       	sbiw	r26, 0x03	; 3
    23fa:	93 83       	std	Z+3, r25	; 0x03
    23fc:	82 83       	std	Z+2, r24	; 0x02
    23fe:	21 15       	cp	r18, r1
    2400:	31 05       	cpc	r19, r1
    2402:	29 f4       	brne	.+10     	; 0x240e <free+0x9c>
    2404:	f0 93 c5 00 	sts	0x00C5, r31
    2408:	e0 93 c4 00 	sts	0x00C4, r30
    240c:	3e c0       	rjmp	.+124    	; 0x248a <free+0x118>
    240e:	d9 01       	movw	r26, r18
    2410:	13 96       	adiw	r26, 0x03	; 3
    2412:	fc 93       	st	X, r31
    2414:	ee 93       	st	-X, r30
    2416:	12 97       	sbiw	r26, 0x02	; 2
    2418:	4d 91       	ld	r20, X+
    241a:	5d 91       	ld	r21, X+
    241c:	a4 0f       	add	r26, r20
    241e:	b5 1f       	adc	r27, r21
    2420:	ea 17       	cp	r30, r26
    2422:	fb 07       	cpc	r31, r27
    2424:	79 f4       	brne	.+30     	; 0x2444 <free+0xd2>
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	84 0f       	add	r24, r20
    242c:	95 1f       	adc	r25, r21
    242e:	02 96       	adiw	r24, 0x02	; 2
    2430:	d9 01       	movw	r26, r18
    2432:	11 96       	adiw	r26, 0x01	; 1
    2434:	9c 93       	st	X, r25
    2436:	8e 93       	st	-X, r24
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	13 96       	adiw	r26, 0x03	; 3
    243e:	9c 93       	st	X, r25
    2440:	8e 93       	st	-X, r24
    2442:	12 97       	sbiw	r26, 0x02	; 2
    2444:	e0 e0       	ldi	r30, 0x00	; 0
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	9b 81       	ldd	r25, Y+3	; 0x03
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	19 f0       	breq	.+6      	; 0x2456 <free+0xe4>
    2450:	fe 01       	movw	r30, r28
    2452:	ec 01       	movw	r28, r24
    2454:	f9 cf       	rjmp	.-14     	; 0x2448 <free+0xd6>
    2456:	ce 01       	movw	r24, r28
    2458:	02 96       	adiw	r24, 0x02	; 2
    245a:	28 81       	ld	r18, Y
    245c:	39 81       	ldd	r19, Y+1	; 0x01
    245e:	82 0f       	add	r24, r18
    2460:	93 1f       	adc	r25, r19
    2462:	20 91 c2 00 	lds	r18, 0x00C2
    2466:	30 91 c3 00 	lds	r19, 0x00C3
    246a:	28 17       	cp	r18, r24
    246c:	39 07       	cpc	r19, r25
    246e:	69 f4       	brne	.+26     	; 0x248a <free+0x118>
    2470:	30 97       	sbiw	r30, 0x00	; 0
    2472:	29 f4       	brne	.+10     	; 0x247e <free+0x10c>
    2474:	10 92 c5 00 	sts	0x00C5, r1
    2478:	10 92 c4 00 	sts	0x00C4, r1
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <free+0x110>
    247e:	13 82       	std	Z+3, r1	; 0x03
    2480:	12 82       	std	Z+2, r1	; 0x02
    2482:	d0 93 c3 00 	sts	0x00C3, r29
    2486:	c0 93 c2 00 	sts	0x00C2, r28
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	08 95       	ret

00002490 <do_rand>:
    2490:	8f 92       	push	r8
    2492:	9f 92       	push	r9
    2494:	af 92       	push	r10
    2496:	bf 92       	push	r11
    2498:	cf 92       	push	r12
    249a:	df 92       	push	r13
    249c:	ef 92       	push	r14
    249e:	ff 92       	push	r15
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	ec 01       	movw	r28, r24
    24a6:	68 81       	ld	r22, Y
    24a8:	79 81       	ldd	r23, Y+1	; 0x01
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	9b 81       	ldd	r25, Y+3	; 0x03
    24ae:	61 15       	cp	r22, r1
    24b0:	71 05       	cpc	r23, r1
    24b2:	81 05       	cpc	r24, r1
    24b4:	91 05       	cpc	r25, r1
    24b6:	21 f4       	brne	.+8      	; 0x24c0 <do_rand+0x30>
    24b8:	64 e2       	ldi	r22, 0x24	; 36
    24ba:	79 ed       	ldi	r23, 0xD9	; 217
    24bc:	8b e5       	ldi	r24, 0x5B	; 91
    24be:	97 e0       	ldi	r25, 0x07	; 7
    24c0:	2d e1       	ldi	r18, 0x1D	; 29
    24c2:	33 ef       	ldi	r19, 0xF3	; 243
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
    24cc:	49 01       	movw	r8, r18
    24ce:	5a 01       	movw	r10, r20
    24d0:	9b 01       	movw	r18, r22
    24d2:	ac 01       	movw	r20, r24
    24d4:	a7 ea       	ldi	r26, 0xA7	; 167
    24d6:	b1 e4       	ldi	r27, 0x41	; 65
    24d8:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muluhisi3>
    24dc:	6b 01       	movw	r12, r22
    24de:	7c 01       	movw	r14, r24
    24e0:	ac ee       	ldi	r26, 0xEC	; 236
    24e2:	b4 ef       	ldi	r27, 0xF4	; 244
    24e4:	a5 01       	movw	r20, r10
    24e6:	94 01       	movw	r18, r8
    24e8:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__mulohisi3>
    24ec:	c6 0e       	add	r12, r22
    24ee:	d7 1e       	adc	r13, r23
    24f0:	e8 1e       	adc	r14, r24
    24f2:	f9 1e       	adc	r15, r25
    24f4:	f7 fe       	sbrs	r15, 7
    24f6:	06 c0       	rjmp	.+12     	; 0x2504 <do_rand+0x74>
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	c8 1a       	sub	r12, r24
    24fc:	d1 08       	sbc	r13, r1
    24fe:	e1 08       	sbc	r14, r1
    2500:	80 e8       	ldi	r24, 0x80	; 128
    2502:	f8 0a       	sbc	r15, r24
    2504:	c8 82       	st	Y, r12
    2506:	d9 82       	std	Y+1, r13	; 0x01
    2508:	ea 82       	std	Y+2, r14	; 0x02
    250a:	fb 82       	std	Y+3, r15	; 0x03
    250c:	c6 01       	movw	r24, r12
    250e:	9f 77       	andi	r25, 0x7F	; 127
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	df 90       	pop	r13
    251a:	cf 90       	pop	r12
    251c:	bf 90       	pop	r11
    251e:	af 90       	pop	r10
    2520:	9f 90       	pop	r9
    2522:	8f 90       	pop	r8
    2524:	08 95       	ret

00002526 <rand_r>:
    2526:	0e 94 48 12 	call	0x2490	; 0x2490 <do_rand>
    252a:	08 95       	ret

0000252c <rand>:
    252c:	86 e6       	ldi	r24, 0x66	; 102
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 48 12 	call	0x2490	; 0x2490 <do_rand>
    2534:	08 95       	ret

00002536 <srand>:
    2536:	a0 e0       	ldi	r26, 0x00	; 0
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	80 93 66 00 	sts	0x0066, r24
    253e:	90 93 67 00 	sts	0x0067, r25
    2542:	a0 93 68 00 	sts	0x0068, r26
    2546:	b0 93 69 00 	sts	0x0069, r27
    254a:	08 95       	ret

0000254c <strtol>:
    254c:	2f 92       	push	r2
    254e:	3f 92       	push	r3
    2550:	5f 92       	push	r5
    2552:	6f 92       	push	r6
    2554:	7f 92       	push	r7
    2556:	8f 92       	push	r8
    2558:	9f 92       	push	r9
    255a:	af 92       	push	r10
    255c:	bf 92       	push	r11
    255e:	cf 92       	push	r12
    2560:	df 92       	push	r13
    2562:	ef 92       	push	r14
    2564:	ff 92       	push	r15
    2566:	0f 93       	push	r16
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	8b 01       	movw	r16, r22
    2570:	ea 01       	movw	r28, r20
    2572:	61 15       	cp	r22, r1
    2574:	71 05       	cpc	r23, r1
    2576:	21 f0       	breq	.+8      	; 0x2580 <strtol+0x34>
    2578:	db 01       	movw	r26, r22
    257a:	8c 93       	st	X, r24
    257c:	11 96       	adiw	r26, 0x01	; 1
    257e:	9c 93       	st	X, r25
    2580:	20 97       	sbiw	r28, 0x00	; 0
    2582:	39 f0       	breq	.+14     	; 0x2592 <strtol+0x46>
    2584:	9e 01       	movw	r18, r28
    2586:	22 50       	subi	r18, 0x02	; 2
    2588:	31 09       	sbc	r19, r1
    258a:	23 32       	cpi	r18, 0x23	; 35
    258c:	31 05       	cpc	r19, r1
    258e:	08 f0       	brcs	.+2      	; 0x2592 <strtol+0x46>
    2590:	fb c0       	rjmp	.+502    	; 0x2788 <strtol+0x23c>
    2592:	7c 01       	movw	r14, r24
    2594:	67 01       	movw	r12, r14
    2596:	bf ef       	ldi	r27, 0xFF	; 255
    2598:	cb 1a       	sub	r12, r27
    259a:	db 0a       	sbc	r13, r27
    259c:	56 01       	movw	r10, r12
    259e:	f7 01       	movw	r30, r14
    25a0:	60 80       	ld	r6, Z
    25a2:	86 2d       	mov	r24, r6
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e 94 da 13 	call	0x27b4	; 0x27b4 <isspace>
    25aa:	89 2b       	or	r24, r25
    25ac:	11 f0       	breq	.+4      	; 0x25b2 <strtol+0x66>
    25ae:	76 01       	movw	r14, r12
    25b0:	f1 cf       	rjmp	.-30     	; 0x2594 <strtol+0x48>
    25b2:	fd e2       	ldi	r31, 0x2D	; 45
    25b4:	6f 12       	cpse	r6, r31
    25b6:	0a c0       	rjmp	.+20     	; 0x25cc <strtol+0x80>
    25b8:	57 01       	movw	r10, r14
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	a8 0e       	add	r10, r24
    25be:	b1 1c       	adc	r11, r1
    25c0:	d7 01       	movw	r26, r14
    25c2:	11 96       	adiw	r26, 0x01	; 1
    25c4:	6c 90       	ld	r6, X
    25c6:	77 24       	eor	r7, r7
    25c8:	73 94       	inc	r7
    25ca:	0b c0       	rjmp	.+22     	; 0x25e2 <strtol+0x96>
    25cc:	bb e2       	ldi	r27, 0x2B	; 43
    25ce:	6b 12       	cpse	r6, r27
    25d0:	07 c0       	rjmp	.+14     	; 0x25e0 <strtol+0x94>
    25d2:	57 01       	movw	r10, r14
    25d4:	e2 e0       	ldi	r30, 0x02	; 2
    25d6:	ae 0e       	add	r10, r30
    25d8:	b1 1c       	adc	r11, r1
    25da:	d7 01       	movw	r26, r14
    25dc:	11 96       	adiw	r26, 0x01	; 1
    25de:	6c 90       	ld	r6, X
    25e0:	71 2c       	mov	r7, r1
    25e2:	ce 01       	movw	r24, r28
    25e4:	8f 7e       	andi	r24, 0xEF	; 239
    25e6:	89 2b       	or	r24, r25
    25e8:	89 f4       	brne	.+34     	; 0x260c <strtol+0xc0>
    25ea:	b0 e3       	ldi	r27, 0x30	; 48
    25ec:	6b 12       	cpse	r6, r27
    25ee:	22 c0       	rjmp	.+68     	; 0x2634 <strtol+0xe8>
    25f0:	f5 01       	movw	r30, r10
    25f2:	80 81       	ld	r24, Z
    25f4:	8f 7d       	andi	r24, 0xDF	; 223
    25f6:	88 35       	cpi	r24, 0x58	; 88
    25f8:	41 f5       	brne	.+80     	; 0x264a <strtol+0xfe>
    25fa:	61 80       	ldd	r6, Z+1	; 0x01
    25fc:	f2 e0       	ldi	r31, 0x02	; 2
    25fe:	af 0e       	add	r10, r31
    2600:	b1 1c       	adc	r11, r1
    2602:	87 2d       	mov	r24, r7
    2604:	82 60       	ori	r24, 0x02	; 2
    2606:	78 2e       	mov	r7, r24
    2608:	c0 e1       	ldi	r28, 0x10	; 16
    260a:	d0 e0       	ldi	r29, 0x00	; 0
    260c:	c8 30       	cpi	r28, 0x08	; 8
    260e:	d1 05       	cpc	r29, r1
    2610:	f1 f0       	breq	.+60     	; 0x264e <strtol+0x102>
    2612:	4c f4       	brge	.+18     	; 0x2626 <strtol+0xda>
    2614:	c2 30       	cpi	r28, 0x02	; 2
    2616:	d1 05       	cpc	r29, r1
    2618:	11 f5       	brne	.+68     	; 0x265e <strtol+0x112>
    261a:	c1 2c       	mov	r12, r1
    261c:	d1 2c       	mov	r13, r1
    261e:	e1 2c       	mov	r14, r1
    2620:	b0 e4       	ldi	r27, 0x40	; 64
    2622:	fb 2e       	mov	r15, r27
    2624:	2f c0       	rjmp	.+94     	; 0x2684 <strtol+0x138>
    2626:	ca 30       	cpi	r28, 0x0A	; 10
    2628:	d1 05       	cpc	r29, r1
    262a:	31 f0       	breq	.+12     	; 0x2638 <strtol+0xec>
    262c:	c0 31       	cpi	r28, 0x10	; 16
    262e:	d1 05       	cpc	r29, r1
    2630:	21 f1       	breq	.+72     	; 0x267a <strtol+0x12e>
    2632:	15 c0       	rjmp	.+42     	; 0x265e <strtol+0x112>
    2634:	20 97       	sbiw	r28, 0x00	; 0
    2636:	51 f7       	brne	.-44     	; 0x260c <strtol+0xc0>
    2638:	ca e0       	ldi	r28, 0x0A	; 10
    263a:	d0 e0       	ldi	r29, 0x00	; 0
    263c:	ac ec       	ldi	r26, 0xCC	; 204
    263e:	ca 2e       	mov	r12, r26
    2640:	dc 2c       	mov	r13, r12
    2642:	ec 2c       	mov	r14, r12
    2644:	ac e0       	ldi	r26, 0x0C	; 12
    2646:	fa 2e       	mov	r15, r26
    2648:	1d c0       	rjmp	.+58     	; 0x2684 <strtol+0x138>
    264a:	20 97       	sbiw	r28, 0x00	; 0
    264c:	f9 f6       	brne	.-66     	; 0x260c <strtol+0xc0>
    264e:	c8 e0       	ldi	r28, 0x08	; 8
    2650:	d0 e0       	ldi	r29, 0x00	; 0
    2652:	c1 2c       	mov	r12, r1
    2654:	d1 2c       	mov	r13, r1
    2656:	e1 2c       	mov	r14, r1
    2658:	f0 e1       	ldi	r31, 0x10	; 16
    265a:	ff 2e       	mov	r15, r31
    265c:	13 c0       	rjmp	.+38     	; 0x2684 <strtol+0x138>
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e8       	ldi	r25, 0x80	; 128
    2666:	9e 01       	movw	r18, r28
    2668:	44 27       	eor	r20, r20
    266a:	37 fd       	sbrc	r19, 7
    266c:	40 95       	com	r20
    266e:	54 2f       	mov	r21, r20
    2670:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__udivmodsi4>
    2674:	69 01       	movw	r12, r18
    2676:	7a 01       	movw	r14, r20
    2678:	05 c0       	rjmp	.+10     	; 0x2684 <strtol+0x138>
    267a:	c1 2c       	mov	r12, r1
    267c:	d1 2c       	mov	r13, r1
    267e:	e1 2c       	mov	r14, r1
    2680:	e8 e0       	ldi	r30, 0x08	; 8
    2682:	fe 2e       	mov	r15, r30
    2684:	f5 01       	movw	r30, r10
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	a9 01       	movw	r20, r18
    268e:	4e 01       	movw	r8, r28
    2690:	aa 24       	eor	r10, r10
    2692:	97 fc       	sbrc	r9, 7
    2694:	a0 94       	com	r10
    2696:	ba 2c       	mov	r11, r10
    2698:	1f 01       	movw	r2, r30
    269a:	70 ed       	ldi	r23, 0xD0	; 208
    269c:	57 2e       	mov	r5, r23
    269e:	56 0c       	add	r5, r6
    26a0:	a9 e0       	ldi	r26, 0x09	; 9
    26a2:	a5 15       	cp	r26, r5
    26a4:	70 f4       	brcc	.+28     	; 0x26c2 <strtol+0x176>
    26a6:	8f eb       	ldi	r24, 0xBF	; 191
    26a8:	86 0d       	add	r24, r6
    26aa:	8a 31       	cpi	r24, 0x1A	; 26
    26ac:	18 f4       	brcc	.+6      	; 0x26b4 <strtol+0x168>
    26ae:	99 ec       	ldi	r25, 0xC9	; 201
    26b0:	59 2e       	mov	r5, r25
    26b2:	06 c0       	rjmp	.+12     	; 0x26c0 <strtol+0x174>
    26b4:	8f e9       	ldi	r24, 0x9F	; 159
    26b6:	86 0d       	add	r24, r6
    26b8:	8a 31       	cpi	r24, 0x1A	; 26
    26ba:	30 f5       	brcc	.+76     	; 0x2708 <strtol+0x1bc>
    26bc:	89 ea       	ldi	r24, 0xA9	; 169
    26be:	58 2e       	mov	r5, r24
    26c0:	56 0c       	add	r5, r6
    26c2:	85 2d       	mov	r24, r5
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	8c 17       	cp	r24, r28
    26c8:	9d 07       	cpc	r25, r29
    26ca:	f4 f4       	brge	.+60     	; 0x2708 <strtol+0x1bc>
    26cc:	67 fd       	sbrc	r22, 7
    26ce:	18 c0       	rjmp	.+48     	; 0x2700 <strtol+0x1b4>
    26d0:	c2 16       	cp	r12, r18
    26d2:	d3 06       	cpc	r13, r19
    26d4:	e4 06       	cpc	r14, r20
    26d6:	f5 06       	cpc	r15, r21
    26d8:	80 f0       	brcs	.+32     	; 0x26fa <strtol+0x1ae>
    26da:	c5 01       	movw	r24, r10
    26dc:	b4 01       	movw	r22, r8
    26de:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__mulsi3>
    26e2:	9b 01       	movw	r18, r22
    26e4:	ac 01       	movw	r20, r24
    26e6:	25 0d       	add	r18, r5
    26e8:	31 1d       	adc	r19, r1
    26ea:	41 1d       	adc	r20, r1
    26ec:	51 1d       	adc	r21, r1
    26ee:	21 30       	cpi	r18, 0x01	; 1
    26f0:	31 05       	cpc	r19, r1
    26f2:	41 05       	cpc	r20, r1
    26f4:	b0 e8       	ldi	r27, 0x80	; 128
    26f6:	5b 07       	cpc	r21, r27
    26f8:	10 f0       	brcs	.+4      	; 0x26fe <strtol+0x1b2>
    26fa:	6f ef       	ldi	r22, 0xFF	; 255
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <strtol+0x1b4>
    26fe:	61 e0       	ldi	r22, 0x01	; 1
    2700:	31 96       	adiw	r30, 0x01	; 1
    2702:	d1 01       	movw	r26, r2
    2704:	6c 90       	ld	r6, X
    2706:	c8 cf       	rjmp	.-112    	; 0x2698 <strtol+0x14c>
    2708:	87 2d       	mov	r24, r7
    270a:	81 70       	andi	r24, 0x01	; 1
    270c:	01 15       	cp	r16, r1
    270e:	11 05       	cpc	r17, r1
    2710:	71 f0       	breq	.+28     	; 0x272e <strtol+0x1e2>
    2712:	66 23       	and	r22, r22
    2714:	29 f0       	breq	.+10     	; 0x2720 <strtol+0x1d4>
    2716:	31 97       	sbiw	r30, 0x01	; 1
    2718:	d8 01       	movw	r26, r16
    271a:	ed 93       	st	X+, r30
    271c:	fc 93       	st	X, r31
    271e:	07 c0       	rjmp	.+14     	; 0x272e <strtol+0x1e2>
    2720:	71 fe       	sbrs	r7, 1
    2722:	19 c0       	rjmp	.+50     	; 0x2756 <strtol+0x20a>
    2724:	32 97       	sbiw	r30, 0x02	; 2
    2726:	d8 01       	movw	r26, r16
    2728:	ed 93       	st	X+, r30
    272a:	fc 93       	st	X, r31
    272c:	14 c0       	rjmp	.+40     	; 0x2756 <strtol+0x20a>
    272e:	67 ff       	sbrs	r22, 7
    2730:	12 c0       	rjmp	.+36     	; 0x2756 <strtol+0x20a>
    2732:	88 23       	and	r24, r24
    2734:	29 f0       	breq	.+10     	; 0x2740 <strtol+0x1f4>
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	50 e8       	ldi	r21, 0x80	; 128
    273e:	04 c0       	rjmp	.+8      	; 0x2748 <strtol+0x1fc>
    2740:	2f ef       	ldi	r18, 0xFF	; 255
    2742:	3f ef       	ldi	r19, 0xFF	; 255
    2744:	4f ef       	ldi	r20, 0xFF	; 255
    2746:	5f e7       	ldi	r21, 0x7F	; 127
    2748:	82 e2       	ldi	r24, 0x22	; 34
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	90 93 c7 00 	sts	0x00C7, r25
    2750:	80 93 c6 00 	sts	0x00C6, r24
    2754:	16 c0       	rjmp	.+44     	; 0x2782 <strtol+0x236>
    2756:	88 23       	and	r24, r24
    2758:	41 f0       	breq	.+16     	; 0x276a <strtol+0x21e>
    275a:	50 95       	com	r21
    275c:	40 95       	com	r20
    275e:	30 95       	com	r19
    2760:	21 95       	neg	r18
    2762:	3f 4f       	sbci	r19, 0xFF	; 255
    2764:	4f 4f       	sbci	r20, 0xFF	; 255
    2766:	5f 4f       	sbci	r21, 0xFF	; 255
    2768:	0c c0       	rjmp	.+24     	; 0x2782 <strtol+0x236>
    276a:	57 ff       	sbrs	r21, 7
    276c:	0a c0       	rjmp	.+20     	; 0x2782 <strtol+0x236>
    276e:	82 e2       	ldi	r24, 0x22	; 34
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	90 93 c7 00 	sts	0x00C7, r25
    2776:	80 93 c6 00 	sts	0x00C6, r24
    277a:	2f ef       	ldi	r18, 0xFF	; 255
    277c:	3f ef       	ldi	r19, 0xFF	; 255
    277e:	4f ef       	ldi	r20, 0xFF	; 255
    2780:	5f e7       	ldi	r21, 0x7F	; 127
    2782:	b9 01       	movw	r22, r18
    2784:	ca 01       	movw	r24, r20
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <strtol+0x244>
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	70 e0       	ldi	r23, 0x00	; 0
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	ff 90       	pop	r15
    279a:	ef 90       	pop	r14
    279c:	df 90       	pop	r13
    279e:	cf 90       	pop	r12
    27a0:	bf 90       	pop	r11
    27a2:	af 90       	pop	r10
    27a4:	9f 90       	pop	r9
    27a6:	8f 90       	pop	r8
    27a8:	7f 90       	pop	r7
    27aa:	6f 90       	pop	r6
    27ac:	5f 90       	pop	r5
    27ae:	3f 90       	pop	r3
    27b0:	2f 90       	pop	r2
    27b2:	08 95       	ret

000027b4 <isspace>:
    27b4:	91 11       	cpse	r25, r1
    27b6:	fa c1       	rjmp	.+1012   	; 0x2bac <__ctype_isfalse>
    27b8:	80 32       	cpi	r24, 0x20	; 32
    27ba:	19 f0       	breq	.+6      	; 0x27c2 <isspace+0xe>
    27bc:	89 50       	subi	r24, 0x09	; 9
    27be:	85 50       	subi	r24, 0x05	; 5
    27c0:	d0 f7       	brcc	.-12     	; 0x27b6 <isspace+0x2>
    27c2:	08 95       	ret

000027c4 <sprintf>:
    27c4:	ae e0       	ldi	r26, 0x0E	; 14
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e8 ee       	ldi	r30, 0xE8	; 232
    27ca:	f3 e1       	ldi	r31, 0x13	; 19
    27cc:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__+0x1c>
    27d0:	0d 89       	ldd	r16, Y+21	; 0x15
    27d2:	1e 89       	ldd	r17, Y+22	; 0x16
    27d4:	86 e0       	ldi	r24, 0x06	; 6
    27d6:	8c 83       	std	Y+4, r24	; 0x04
    27d8:	1a 83       	std	Y+2, r17	; 0x02
    27da:	09 83       	std	Y+1, r16	; 0x01
    27dc:	8f ef       	ldi	r24, 0xFF	; 255
    27de:	9f e7       	ldi	r25, 0x7F	; 127
    27e0:	9e 83       	std	Y+6, r25	; 0x06
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	ae 01       	movw	r20, r28
    27e6:	47 5e       	subi	r20, 0xE7	; 231
    27e8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ea:	6f 89       	ldd	r22, Y+23	; 0x17
    27ec:	78 8d       	ldd	r23, Y+24	; 0x18
    27ee:	ce 01       	movw	r24, r28
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	0e 94 04 14 	call	0x2808	; 0x2808 <vfprintf>
    27f6:	ef 81       	ldd	r30, Y+7	; 0x07
    27f8:	f8 85       	ldd	r31, Y+8	; 0x08
    27fa:	e0 0f       	add	r30, r16
    27fc:	f1 1f       	adc	r31, r17
    27fe:	10 82       	st	Z, r1
    2800:	2e 96       	adiw	r28, 0x0e	; 14
    2802:	e4 e0       	ldi	r30, 0x04	; 4
    2804:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__+0x1c>

00002808 <vfprintf>:
    2808:	ac e0       	ldi	r26, 0x0C	; 12
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	ea e0       	ldi	r30, 0x0A	; 10
    280e:	f4 e1       	ldi	r31, 0x14	; 20
    2810:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__prologue_saves__>
    2814:	7c 01       	movw	r14, r24
    2816:	6b 01       	movw	r12, r22
    2818:	8a 01       	movw	r16, r20
    281a:	fc 01       	movw	r30, r24
    281c:	17 82       	std	Z+7, r1	; 0x07
    281e:	16 82       	std	Z+6, r1	; 0x06
    2820:	83 81       	ldd	r24, Z+3	; 0x03
    2822:	81 ff       	sbrs	r24, 1
    2824:	bd c1       	rjmp	.+890    	; 0x2ba0 <vfprintf+0x398>
    2826:	ce 01       	movw	r24, r28
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	4c 01       	movw	r8, r24
    282c:	f7 01       	movw	r30, r14
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	f6 01       	movw	r30, r12
    2832:	93 fd       	sbrc	r25, 3
    2834:	85 91       	lpm	r24, Z+
    2836:	93 ff       	sbrs	r25, 3
    2838:	81 91       	ld	r24, Z+
    283a:	6f 01       	movw	r12, r30
    283c:	88 23       	and	r24, r24
    283e:	09 f4       	brne	.+2      	; 0x2842 <vfprintf+0x3a>
    2840:	ab c1       	rjmp	.+854    	; 0x2b98 <vfprintf+0x390>
    2842:	85 32       	cpi	r24, 0x25	; 37
    2844:	39 f4       	brne	.+14     	; 0x2854 <vfprintf+0x4c>
    2846:	93 fd       	sbrc	r25, 3
    2848:	85 91       	lpm	r24, Z+
    284a:	93 ff       	sbrs	r25, 3
    284c:	81 91       	ld	r24, Z+
    284e:	6f 01       	movw	r12, r30
    2850:	85 32       	cpi	r24, 0x25	; 37
    2852:	29 f4       	brne	.+10     	; 0x285e <vfprintf+0x56>
    2854:	b7 01       	movw	r22, r14
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 ef 15 	call	0x2bde	; 0x2bde <fputc>
    285c:	e7 cf       	rjmp	.-50     	; 0x282c <vfprintf+0x24>
    285e:	51 2c       	mov	r5, r1
    2860:	31 2c       	mov	r3, r1
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	20 32       	cpi	r18, 0x20	; 32
    2866:	a0 f4       	brcc	.+40     	; 0x2890 <vfprintf+0x88>
    2868:	8b 32       	cpi	r24, 0x2B	; 43
    286a:	69 f0       	breq	.+26     	; 0x2886 <vfprintf+0x7e>
    286c:	30 f4       	brcc	.+12     	; 0x287a <vfprintf+0x72>
    286e:	80 32       	cpi	r24, 0x20	; 32
    2870:	59 f0       	breq	.+22     	; 0x2888 <vfprintf+0x80>
    2872:	83 32       	cpi	r24, 0x23	; 35
    2874:	69 f4       	brne	.+26     	; 0x2890 <vfprintf+0x88>
    2876:	20 61       	ori	r18, 0x10	; 16
    2878:	2c c0       	rjmp	.+88     	; 0x28d2 <vfprintf+0xca>
    287a:	8d 32       	cpi	r24, 0x2D	; 45
    287c:	39 f0       	breq	.+14     	; 0x288c <vfprintf+0x84>
    287e:	80 33       	cpi	r24, 0x30	; 48
    2880:	39 f4       	brne	.+14     	; 0x2890 <vfprintf+0x88>
    2882:	21 60       	ori	r18, 0x01	; 1
    2884:	26 c0       	rjmp	.+76     	; 0x28d2 <vfprintf+0xca>
    2886:	22 60       	ori	r18, 0x02	; 2
    2888:	24 60       	ori	r18, 0x04	; 4
    288a:	23 c0       	rjmp	.+70     	; 0x28d2 <vfprintf+0xca>
    288c:	28 60       	ori	r18, 0x08	; 8
    288e:	21 c0       	rjmp	.+66     	; 0x28d2 <vfprintf+0xca>
    2890:	27 fd       	sbrc	r18, 7
    2892:	27 c0       	rjmp	.+78     	; 0x28e2 <vfprintf+0xda>
    2894:	30 ed       	ldi	r19, 0xD0	; 208
    2896:	38 0f       	add	r19, r24
    2898:	3a 30       	cpi	r19, 0x0A	; 10
    289a:	78 f4       	brcc	.+30     	; 0x28ba <vfprintf+0xb2>
    289c:	26 ff       	sbrs	r18, 6
    289e:	06 c0       	rjmp	.+12     	; 0x28ac <vfprintf+0xa4>
    28a0:	fa e0       	ldi	r31, 0x0A	; 10
    28a2:	5f 9e       	mul	r5, r31
    28a4:	30 0d       	add	r19, r0
    28a6:	11 24       	eor	r1, r1
    28a8:	53 2e       	mov	r5, r19
    28aa:	13 c0       	rjmp	.+38     	; 0x28d2 <vfprintf+0xca>
    28ac:	8a e0       	ldi	r24, 0x0A	; 10
    28ae:	38 9e       	mul	r3, r24
    28b0:	30 0d       	add	r19, r0
    28b2:	11 24       	eor	r1, r1
    28b4:	33 2e       	mov	r3, r19
    28b6:	20 62       	ori	r18, 0x20	; 32
    28b8:	0c c0       	rjmp	.+24     	; 0x28d2 <vfprintf+0xca>
    28ba:	8e 32       	cpi	r24, 0x2E	; 46
    28bc:	21 f4       	brne	.+8      	; 0x28c6 <vfprintf+0xbe>
    28be:	26 fd       	sbrc	r18, 6
    28c0:	6b c1       	rjmp	.+726    	; 0x2b98 <vfprintf+0x390>
    28c2:	20 64       	ori	r18, 0x40	; 64
    28c4:	06 c0       	rjmp	.+12     	; 0x28d2 <vfprintf+0xca>
    28c6:	8c 36       	cpi	r24, 0x6C	; 108
    28c8:	11 f4       	brne	.+4      	; 0x28ce <vfprintf+0xc6>
    28ca:	20 68       	ori	r18, 0x80	; 128
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <vfprintf+0xca>
    28ce:	88 36       	cpi	r24, 0x68	; 104
    28d0:	41 f4       	brne	.+16     	; 0x28e2 <vfprintf+0xda>
    28d2:	f6 01       	movw	r30, r12
    28d4:	93 fd       	sbrc	r25, 3
    28d6:	85 91       	lpm	r24, Z+
    28d8:	93 ff       	sbrs	r25, 3
    28da:	81 91       	ld	r24, Z+
    28dc:	6f 01       	movw	r12, r30
    28de:	81 11       	cpse	r24, r1
    28e0:	c1 cf       	rjmp	.-126    	; 0x2864 <vfprintf+0x5c>
    28e2:	98 2f       	mov	r25, r24
    28e4:	9f 7d       	andi	r25, 0xDF	; 223
    28e6:	95 54       	subi	r25, 0x45	; 69
    28e8:	93 30       	cpi	r25, 0x03	; 3
    28ea:	28 f4       	brcc	.+10     	; 0x28f6 <vfprintf+0xee>
    28ec:	0c 5f       	subi	r16, 0xFC	; 252
    28ee:	1f 4f       	sbci	r17, 0xFF	; 255
    28f0:	ff e3       	ldi	r31, 0x3F	; 63
    28f2:	f9 83       	std	Y+1, r31	; 0x01
    28f4:	0d c0       	rjmp	.+26     	; 0x2910 <vfprintf+0x108>
    28f6:	83 36       	cpi	r24, 0x63	; 99
    28f8:	31 f0       	breq	.+12     	; 0x2906 <vfprintf+0xfe>
    28fa:	83 37       	cpi	r24, 0x73	; 115
    28fc:	71 f0       	breq	.+28     	; 0x291a <vfprintf+0x112>
    28fe:	83 35       	cpi	r24, 0x53	; 83
    2900:	09 f0       	breq	.+2      	; 0x2904 <vfprintf+0xfc>
    2902:	5b c0       	rjmp	.+182    	; 0x29ba <vfprintf+0x1b2>
    2904:	22 c0       	rjmp	.+68     	; 0x294a <vfprintf+0x142>
    2906:	f8 01       	movw	r30, r16
    2908:	80 81       	ld	r24, Z
    290a:	89 83       	std	Y+1, r24	; 0x01
    290c:	0e 5f       	subi	r16, 0xFE	; 254
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	44 24       	eor	r4, r4
    2912:	43 94       	inc	r4
    2914:	51 2c       	mov	r5, r1
    2916:	54 01       	movw	r10, r8
    2918:	15 c0       	rjmp	.+42     	; 0x2944 <vfprintf+0x13c>
    291a:	38 01       	movw	r6, r16
    291c:	f2 e0       	ldi	r31, 0x02	; 2
    291e:	6f 0e       	add	r6, r31
    2920:	71 1c       	adc	r7, r1
    2922:	f8 01       	movw	r30, r16
    2924:	a0 80       	ld	r10, Z
    2926:	b1 80       	ldd	r11, Z+1	; 0x01
    2928:	26 ff       	sbrs	r18, 6
    292a:	03 c0       	rjmp	.+6      	; 0x2932 <vfprintf+0x12a>
    292c:	65 2d       	mov	r22, r5
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <vfprintf+0x12e>
    2932:	6f ef       	ldi	r22, 0xFF	; 255
    2934:	7f ef       	ldi	r23, 0xFF	; 255
    2936:	c5 01       	movw	r24, r10
    2938:	2c 87       	std	Y+12, r18	; 0x0c
    293a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <strnlen>
    293e:	2c 01       	movw	r4, r24
    2940:	83 01       	movw	r16, r6
    2942:	2c 85       	ldd	r18, Y+12	; 0x0c
    2944:	2f 77       	andi	r18, 0x7F	; 127
    2946:	22 2e       	mov	r2, r18
    2948:	17 c0       	rjmp	.+46     	; 0x2978 <vfprintf+0x170>
    294a:	38 01       	movw	r6, r16
    294c:	f2 e0       	ldi	r31, 0x02	; 2
    294e:	6f 0e       	add	r6, r31
    2950:	71 1c       	adc	r7, r1
    2952:	f8 01       	movw	r30, r16
    2954:	a0 80       	ld	r10, Z
    2956:	b1 80       	ldd	r11, Z+1	; 0x01
    2958:	26 ff       	sbrs	r18, 6
    295a:	03 c0       	rjmp	.+6      	; 0x2962 <vfprintf+0x15a>
    295c:	65 2d       	mov	r22, r5
    295e:	70 e0       	ldi	r23, 0x00	; 0
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <vfprintf+0x15e>
    2962:	6f ef       	ldi	r22, 0xFF	; 255
    2964:	7f ef       	ldi	r23, 0xFF	; 255
    2966:	c5 01       	movw	r24, r10
    2968:	2c 87       	std	Y+12, r18	; 0x0c
    296a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <strnlen_P>
    296e:	2c 01       	movw	r4, r24
    2970:	2c 85       	ldd	r18, Y+12	; 0x0c
    2972:	20 68       	ori	r18, 0x80	; 128
    2974:	22 2e       	mov	r2, r18
    2976:	83 01       	movw	r16, r6
    2978:	23 fc       	sbrc	r2, 3
    297a:	1b c0       	rjmp	.+54     	; 0x29b2 <vfprintf+0x1aa>
    297c:	83 2d       	mov	r24, r3
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	48 16       	cp	r4, r24
    2982:	59 06       	cpc	r5, r25
    2984:	b0 f4       	brcc	.+44     	; 0x29b2 <vfprintf+0x1aa>
    2986:	b7 01       	movw	r22, r14
    2988:	80 e2       	ldi	r24, 0x20	; 32
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <fputc>
    2990:	3a 94       	dec	r3
    2992:	f4 cf       	rjmp	.-24     	; 0x297c <vfprintf+0x174>
    2994:	f5 01       	movw	r30, r10
    2996:	27 fc       	sbrc	r2, 7
    2998:	85 91       	lpm	r24, Z+
    299a:	27 fe       	sbrs	r2, 7
    299c:	81 91       	ld	r24, Z+
    299e:	5f 01       	movw	r10, r30
    29a0:	b7 01       	movw	r22, r14
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <fputc>
    29a8:	31 10       	cpse	r3, r1
    29aa:	3a 94       	dec	r3
    29ac:	f1 e0       	ldi	r31, 0x01	; 1
    29ae:	4f 1a       	sub	r4, r31
    29b0:	51 08       	sbc	r5, r1
    29b2:	41 14       	cp	r4, r1
    29b4:	51 04       	cpc	r5, r1
    29b6:	71 f7       	brne	.-36     	; 0x2994 <vfprintf+0x18c>
    29b8:	e5 c0       	rjmp	.+458    	; 0x2b84 <vfprintf+0x37c>
    29ba:	84 36       	cpi	r24, 0x64	; 100
    29bc:	11 f0       	breq	.+4      	; 0x29c2 <vfprintf+0x1ba>
    29be:	89 36       	cpi	r24, 0x69	; 105
    29c0:	39 f5       	brne	.+78     	; 0x2a10 <vfprintf+0x208>
    29c2:	f8 01       	movw	r30, r16
    29c4:	27 ff       	sbrs	r18, 7
    29c6:	07 c0       	rjmp	.+14     	; 0x29d6 <vfprintf+0x1ce>
    29c8:	60 81       	ld	r22, Z
    29ca:	71 81       	ldd	r23, Z+1	; 0x01
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	0c 5f       	subi	r16, 0xFC	; 252
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	08 c0       	rjmp	.+16     	; 0x29e6 <vfprintf+0x1de>
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	88 27       	eor	r24, r24
    29dc:	77 fd       	sbrc	r23, 7
    29de:	80 95       	com	r24
    29e0:	98 2f       	mov	r25, r24
    29e2:	0e 5f       	subi	r16, 0xFE	; 254
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	2f 76       	andi	r18, 0x6F	; 111
    29e8:	b2 2e       	mov	r11, r18
    29ea:	97 ff       	sbrs	r25, 7
    29ec:	09 c0       	rjmp	.+18     	; 0x2a00 <vfprintf+0x1f8>
    29ee:	90 95       	com	r25
    29f0:	80 95       	com	r24
    29f2:	70 95       	com	r23
    29f4:	61 95       	neg	r22
    29f6:	7f 4f       	sbci	r23, 0xFF	; 255
    29f8:	8f 4f       	sbci	r24, 0xFF	; 255
    29fa:	9f 4f       	sbci	r25, 0xFF	; 255
    29fc:	20 68       	ori	r18, 0x80	; 128
    29fe:	b2 2e       	mov	r11, r18
    2a00:	2a e0       	ldi	r18, 0x0A	; 10
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	a4 01       	movw	r20, r8
    2a06:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__ultoa_invert>
    2a0a:	a8 2e       	mov	r10, r24
    2a0c:	a8 18       	sub	r10, r8
    2a0e:	44 c0       	rjmp	.+136    	; 0x2a98 <vfprintf+0x290>
    2a10:	85 37       	cpi	r24, 0x75	; 117
    2a12:	29 f4       	brne	.+10     	; 0x2a1e <vfprintf+0x216>
    2a14:	2f 7e       	andi	r18, 0xEF	; 239
    2a16:	b2 2e       	mov	r11, r18
    2a18:	2a e0       	ldi	r18, 0x0A	; 10
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	25 c0       	rjmp	.+74     	; 0x2a68 <vfprintf+0x260>
    2a1e:	f2 2f       	mov	r31, r18
    2a20:	f9 7f       	andi	r31, 0xF9	; 249
    2a22:	bf 2e       	mov	r11, r31
    2a24:	8f 36       	cpi	r24, 0x6F	; 111
    2a26:	c1 f0       	breq	.+48     	; 0x2a58 <vfprintf+0x250>
    2a28:	18 f4       	brcc	.+6      	; 0x2a30 <vfprintf+0x228>
    2a2a:	88 35       	cpi	r24, 0x58	; 88
    2a2c:	79 f0       	breq	.+30     	; 0x2a4c <vfprintf+0x244>
    2a2e:	b4 c0       	rjmp	.+360    	; 0x2b98 <vfprintf+0x390>
    2a30:	80 37       	cpi	r24, 0x70	; 112
    2a32:	19 f0       	breq	.+6      	; 0x2a3a <vfprintf+0x232>
    2a34:	88 37       	cpi	r24, 0x78	; 120
    2a36:	21 f0       	breq	.+8      	; 0x2a40 <vfprintf+0x238>
    2a38:	af c0       	rjmp	.+350    	; 0x2b98 <vfprintf+0x390>
    2a3a:	2f 2f       	mov	r18, r31
    2a3c:	20 61       	ori	r18, 0x10	; 16
    2a3e:	b2 2e       	mov	r11, r18
    2a40:	b4 fe       	sbrs	r11, 4
    2a42:	0d c0       	rjmp	.+26     	; 0x2a5e <vfprintf+0x256>
    2a44:	8b 2d       	mov	r24, r11
    2a46:	84 60       	ori	r24, 0x04	; 4
    2a48:	b8 2e       	mov	r11, r24
    2a4a:	09 c0       	rjmp	.+18     	; 0x2a5e <vfprintf+0x256>
    2a4c:	24 ff       	sbrs	r18, 4
    2a4e:	0a c0       	rjmp	.+20     	; 0x2a64 <vfprintf+0x25c>
    2a50:	9f 2f       	mov	r25, r31
    2a52:	96 60       	ori	r25, 0x06	; 6
    2a54:	b9 2e       	mov	r11, r25
    2a56:	06 c0       	rjmp	.+12     	; 0x2a64 <vfprintf+0x25c>
    2a58:	28 e0       	ldi	r18, 0x08	; 8
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	05 c0       	rjmp	.+10     	; 0x2a68 <vfprintf+0x260>
    2a5e:	20 e1       	ldi	r18, 0x10	; 16
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <vfprintf+0x260>
    2a64:	20 e1       	ldi	r18, 0x10	; 16
    2a66:	32 e0       	ldi	r19, 0x02	; 2
    2a68:	f8 01       	movw	r30, r16
    2a6a:	b7 fe       	sbrs	r11, 7
    2a6c:	07 c0       	rjmp	.+14     	; 0x2a7c <vfprintf+0x274>
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	0c 5f       	subi	r16, 0xFC	; 252
    2a78:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7a:	06 c0       	rjmp	.+12     	; 0x2a88 <vfprintf+0x280>
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 5f       	subi	r16, 0xFE	; 254
    2a86:	1f 4f       	sbci	r17, 0xFF	; 255
    2a88:	a4 01       	movw	r20, r8
    2a8a:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__ultoa_invert>
    2a8e:	a8 2e       	mov	r10, r24
    2a90:	a8 18       	sub	r10, r8
    2a92:	fb 2d       	mov	r31, r11
    2a94:	ff 77       	andi	r31, 0x7F	; 127
    2a96:	bf 2e       	mov	r11, r31
    2a98:	b6 fe       	sbrs	r11, 6
    2a9a:	0b c0       	rjmp	.+22     	; 0x2ab2 <vfprintf+0x2aa>
    2a9c:	2b 2d       	mov	r18, r11
    2a9e:	2e 7f       	andi	r18, 0xFE	; 254
    2aa0:	a5 14       	cp	r10, r5
    2aa2:	50 f4       	brcc	.+20     	; 0x2ab8 <vfprintf+0x2b0>
    2aa4:	b4 fe       	sbrs	r11, 4
    2aa6:	0a c0       	rjmp	.+20     	; 0x2abc <vfprintf+0x2b4>
    2aa8:	b2 fc       	sbrc	r11, 2
    2aaa:	08 c0       	rjmp	.+16     	; 0x2abc <vfprintf+0x2b4>
    2aac:	2b 2d       	mov	r18, r11
    2aae:	2e 7e       	andi	r18, 0xEE	; 238
    2ab0:	05 c0       	rjmp	.+10     	; 0x2abc <vfprintf+0x2b4>
    2ab2:	7a 2c       	mov	r7, r10
    2ab4:	2b 2d       	mov	r18, r11
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <vfprintf+0x2b6>
    2ab8:	7a 2c       	mov	r7, r10
    2aba:	01 c0       	rjmp	.+2      	; 0x2abe <vfprintf+0x2b6>
    2abc:	75 2c       	mov	r7, r5
    2abe:	24 ff       	sbrs	r18, 4
    2ac0:	0d c0       	rjmp	.+26     	; 0x2adc <vfprintf+0x2d4>
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ea 0d       	add	r30, r10
    2ac6:	f1 1d       	adc	r31, r1
    2ac8:	80 81       	ld	r24, Z
    2aca:	80 33       	cpi	r24, 0x30	; 48
    2acc:	11 f4       	brne	.+4      	; 0x2ad2 <vfprintf+0x2ca>
    2ace:	29 7e       	andi	r18, 0xE9	; 233
    2ad0:	09 c0       	rjmp	.+18     	; 0x2ae4 <vfprintf+0x2dc>
    2ad2:	22 ff       	sbrs	r18, 2
    2ad4:	06 c0       	rjmp	.+12     	; 0x2ae2 <vfprintf+0x2da>
    2ad6:	73 94       	inc	r7
    2ad8:	73 94       	inc	r7
    2ada:	04 c0       	rjmp	.+8      	; 0x2ae4 <vfprintf+0x2dc>
    2adc:	82 2f       	mov	r24, r18
    2ade:	86 78       	andi	r24, 0x86	; 134
    2ae0:	09 f0       	breq	.+2      	; 0x2ae4 <vfprintf+0x2dc>
    2ae2:	73 94       	inc	r7
    2ae4:	23 fd       	sbrc	r18, 3
    2ae6:	13 c0       	rjmp	.+38     	; 0x2b0e <vfprintf+0x306>
    2ae8:	20 ff       	sbrs	r18, 0
    2aea:	06 c0       	rjmp	.+12     	; 0x2af8 <vfprintf+0x2f0>
    2aec:	5a 2c       	mov	r5, r10
    2aee:	73 14       	cp	r7, r3
    2af0:	18 f4       	brcc	.+6      	; 0x2af8 <vfprintf+0x2f0>
    2af2:	53 0c       	add	r5, r3
    2af4:	57 18       	sub	r5, r7
    2af6:	73 2c       	mov	r7, r3
    2af8:	73 14       	cp	r7, r3
    2afa:	68 f4       	brcc	.+26     	; 0x2b16 <vfprintf+0x30e>
    2afc:	b7 01       	movw	r22, r14
    2afe:	80 e2       	ldi	r24, 0x20	; 32
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	2c 87       	std	Y+12, r18	; 0x0c
    2b04:	0e 94 ef 15 	call	0x2bde	; 0x2bde <fputc>
    2b08:	73 94       	inc	r7
    2b0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b0c:	f5 cf       	rjmp	.-22     	; 0x2af8 <vfprintf+0x2f0>
    2b0e:	73 14       	cp	r7, r3
    2b10:	10 f4       	brcc	.+4      	; 0x2b16 <vfprintf+0x30e>
    2b12:	37 18       	sub	r3, r7
    2b14:	01 c0       	rjmp	.+2      	; 0x2b18 <vfprintf+0x310>
    2b16:	31 2c       	mov	r3, r1
    2b18:	24 ff       	sbrs	r18, 4
    2b1a:	12 c0       	rjmp	.+36     	; 0x2b40 <vfprintf+0x338>
    2b1c:	b7 01       	movw	r22, r14
    2b1e:	80 e3       	ldi	r24, 0x30	; 48
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	2c 87       	std	Y+12, r18	; 0x0c
    2b24:	0e 94 ef 15 	call	0x2bde	; 0x2bde <fputc>
    2b28:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b2a:	22 ff       	sbrs	r18, 2
    2b2c:	17 c0       	rjmp	.+46     	; 0x2b5c <vfprintf+0x354>
    2b2e:	21 ff       	sbrs	r18, 1
    2b30:	03 c0       	rjmp	.+6      	; 0x2b38 <vfprintf+0x330>
    2b32:	88 e5       	ldi	r24, 0x58	; 88
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <vfprintf+0x334>
    2b38:	88 e7       	ldi	r24, 0x78	; 120
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	b7 01       	movw	r22, r14
    2b3e:	0c c0       	rjmp	.+24     	; 0x2b58 <vfprintf+0x350>
    2b40:	82 2f       	mov	r24, r18
    2b42:	86 78       	andi	r24, 0x86	; 134
    2b44:	59 f0       	breq	.+22     	; 0x2b5c <vfprintf+0x354>
    2b46:	21 fd       	sbrc	r18, 1
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <vfprintf+0x346>
    2b4a:	80 e2       	ldi	r24, 0x20	; 32
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <vfprintf+0x348>
    2b4e:	8b e2       	ldi	r24, 0x2B	; 43
    2b50:	27 fd       	sbrc	r18, 7
    2b52:	8d e2       	ldi	r24, 0x2D	; 45
    2b54:	b7 01       	movw	r22, r14
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 ef 15 	call	0x2bde	; 0x2bde <fputc>
    2b5c:	a5 14       	cp	r10, r5
    2b5e:	38 f4       	brcc	.+14     	; 0x2b6e <vfprintf+0x366>
    2b60:	b7 01       	movw	r22, r14
    2b62:	80 e3       	ldi	r24, 0x30	; 48
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	0e 94 ef 15 	call	0x2bde	; 0x2bde <fputc>
    2b6a:	5a 94       	dec	r5
    2b6c:	f7 cf       	rjmp	.-18     	; 0x2b5c <vfprintf+0x354>
    2b6e:	aa 94       	dec	r10
    2b70:	f4 01       	movw	r30, r8
    2b72:	ea 0d       	add	r30, r10
    2b74:	f1 1d       	adc	r31, r1
    2b76:	80 81       	ld	r24, Z
    2b78:	b7 01       	movw	r22, r14
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <fputc>
    2b80:	a1 10       	cpse	r10, r1
    2b82:	f5 cf       	rjmp	.-22     	; 0x2b6e <vfprintf+0x366>
    2b84:	33 20       	and	r3, r3
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <vfprintf+0x382>
    2b88:	51 ce       	rjmp	.-862    	; 0x282c <vfprintf+0x24>
    2b8a:	b7 01       	movw	r22, r14
    2b8c:	80 e2       	ldi	r24, 0x20	; 32
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	0e 94 ef 15 	call	0x2bde	; 0x2bde <fputc>
    2b94:	3a 94       	dec	r3
    2b96:	f6 cf       	rjmp	.-20     	; 0x2b84 <vfprintf+0x37c>
    2b98:	f7 01       	movw	r30, r14
    2b9a:	86 81       	ldd	r24, Z+6	; 0x06
    2b9c:	97 81       	ldd	r25, Z+7	; 0x07
    2b9e:	02 c0       	rjmp	.+4      	; 0x2ba4 <vfprintf+0x39c>
    2ba0:	8f ef       	ldi	r24, 0xFF	; 255
    2ba2:	9f ef       	ldi	r25, 0xFF	; 255
    2ba4:	2c 96       	adiw	r28, 0x0c	; 12
    2ba6:	e2 e1       	ldi	r30, 0x12	; 18
    2ba8:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__epilogue_restores__>

00002bac <__ctype_isfalse>:
    2bac:	99 27       	eor	r25, r25
    2bae:	88 27       	eor	r24, r24

00002bb0 <__ctype_istrue>:
    2bb0:	08 95       	ret

00002bb2 <strnlen_P>:
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	05 90       	lpm	r0, Z+
    2bb6:	61 50       	subi	r22, 0x01	; 1
    2bb8:	70 40       	sbci	r23, 0x00	; 0
    2bba:	01 10       	cpse	r0, r1
    2bbc:	d8 f7       	brcc	.-10     	; 0x2bb4 <strnlen_P+0x2>
    2bbe:	80 95       	com	r24
    2bc0:	90 95       	com	r25
    2bc2:	8e 0f       	add	r24, r30
    2bc4:	9f 1f       	adc	r25, r31
    2bc6:	08 95       	ret

00002bc8 <strnlen>:
    2bc8:	fc 01       	movw	r30, r24
    2bca:	61 50       	subi	r22, 0x01	; 1
    2bcc:	70 40       	sbci	r23, 0x00	; 0
    2bce:	01 90       	ld	r0, Z+
    2bd0:	01 10       	cpse	r0, r1
    2bd2:	d8 f7       	brcc	.-10     	; 0x2bca <strnlen+0x2>
    2bd4:	80 95       	com	r24
    2bd6:	90 95       	com	r25
    2bd8:	8e 0f       	add	r24, r30
    2bda:	9f 1f       	adc	r25, r31
    2bdc:	08 95       	ret

00002bde <fputc>:
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	18 2f       	mov	r17, r24
    2be8:	09 2f       	mov	r16, r25
    2bea:	eb 01       	movw	r28, r22
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	81 fd       	sbrc	r24, 1
    2bf0:	03 c0       	rjmp	.+6      	; 0x2bf8 <fputc+0x1a>
    2bf2:	8f ef       	ldi	r24, 0xFF	; 255
    2bf4:	9f ef       	ldi	r25, 0xFF	; 255
    2bf6:	20 c0       	rjmp	.+64     	; 0x2c38 <fputc+0x5a>
    2bf8:	82 ff       	sbrs	r24, 2
    2bfa:	10 c0       	rjmp	.+32     	; 0x2c1c <fputc+0x3e>
    2bfc:	4e 81       	ldd	r20, Y+6	; 0x06
    2bfe:	5f 81       	ldd	r21, Y+7	; 0x07
    2c00:	2c 81       	ldd	r18, Y+4	; 0x04
    2c02:	3d 81       	ldd	r19, Y+5	; 0x05
    2c04:	42 17       	cp	r20, r18
    2c06:	53 07       	cpc	r21, r19
    2c08:	7c f4       	brge	.+30     	; 0x2c28 <fputc+0x4a>
    2c0a:	e8 81       	ld	r30, Y
    2c0c:	f9 81       	ldd	r31, Y+1	; 0x01
    2c0e:	9f 01       	movw	r18, r30
    2c10:	2f 5f       	subi	r18, 0xFF	; 255
    2c12:	3f 4f       	sbci	r19, 0xFF	; 255
    2c14:	39 83       	std	Y+1, r19	; 0x01
    2c16:	28 83       	st	Y, r18
    2c18:	10 83       	st	Z, r17
    2c1a:	06 c0       	rjmp	.+12     	; 0x2c28 <fputc+0x4a>
    2c1c:	e8 85       	ldd	r30, Y+8	; 0x08
    2c1e:	f9 85       	ldd	r31, Y+9	; 0x09
    2c20:	81 2f       	mov	r24, r17
    2c22:	09 95       	icall
    2c24:	89 2b       	or	r24, r25
    2c26:	29 f7       	brne	.-54     	; 0x2bf2 <fputc+0x14>
    2c28:	2e 81       	ldd	r18, Y+6	; 0x06
    2c2a:	3f 81       	ldd	r19, Y+7	; 0x07
    2c2c:	2f 5f       	subi	r18, 0xFF	; 255
    2c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c30:	3f 83       	std	Y+7, r19	; 0x07
    2c32:	2e 83       	std	Y+6, r18	; 0x06
    2c34:	81 2f       	mov	r24, r17
    2c36:	90 2f       	mov	r25, r16
    2c38:	df 91       	pop	r29
    2c3a:	cf 91       	pop	r28
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	08 95       	ret

00002c42 <__ultoa_invert>:
    2c42:	fa 01       	movw	r30, r20
    2c44:	aa 27       	eor	r26, r26
    2c46:	28 30       	cpi	r18, 0x08	; 8
    2c48:	51 f1       	breq	.+84     	; 0x2c9e <__ultoa_invert+0x5c>
    2c4a:	20 31       	cpi	r18, 0x10	; 16
    2c4c:	81 f1       	breq	.+96     	; 0x2cae <__ultoa_invert+0x6c>
    2c4e:	e8 94       	clt
    2c50:	6f 93       	push	r22
    2c52:	6e 7f       	andi	r22, 0xFE	; 254
    2c54:	6e 5f       	subi	r22, 0xFE	; 254
    2c56:	7f 4f       	sbci	r23, 0xFF	; 255
    2c58:	8f 4f       	sbci	r24, 0xFF	; 255
    2c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5c:	af 4f       	sbci	r26, 0xFF	; 255
    2c5e:	b1 e0       	ldi	r27, 0x01	; 1
    2c60:	3e d0       	rcall	.+124    	; 0x2cde <__ultoa_invert+0x9c>
    2c62:	b4 e0       	ldi	r27, 0x04	; 4
    2c64:	3c d0       	rcall	.+120    	; 0x2cde <__ultoa_invert+0x9c>
    2c66:	67 0f       	add	r22, r23
    2c68:	78 1f       	adc	r23, r24
    2c6a:	89 1f       	adc	r24, r25
    2c6c:	9a 1f       	adc	r25, r26
    2c6e:	a1 1d       	adc	r26, r1
    2c70:	68 0f       	add	r22, r24
    2c72:	79 1f       	adc	r23, r25
    2c74:	8a 1f       	adc	r24, r26
    2c76:	91 1d       	adc	r25, r1
    2c78:	a1 1d       	adc	r26, r1
    2c7a:	6a 0f       	add	r22, r26
    2c7c:	71 1d       	adc	r23, r1
    2c7e:	81 1d       	adc	r24, r1
    2c80:	91 1d       	adc	r25, r1
    2c82:	a1 1d       	adc	r26, r1
    2c84:	20 d0       	rcall	.+64     	; 0x2cc6 <__ultoa_invert+0x84>
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <__ultoa_invert+0x48>
    2c88:	68 94       	set
    2c8a:	3f 91       	pop	r19
    2c8c:	2a e0       	ldi	r18, 0x0A	; 10
    2c8e:	26 9f       	mul	r18, r22
    2c90:	11 24       	eor	r1, r1
    2c92:	30 19       	sub	r19, r0
    2c94:	30 5d       	subi	r19, 0xD0	; 208
    2c96:	31 93       	st	Z+, r19
    2c98:	de f6       	brtc	.-74     	; 0x2c50 <__ultoa_invert+0xe>
    2c9a:	cf 01       	movw	r24, r30
    2c9c:	08 95       	ret
    2c9e:	46 2f       	mov	r20, r22
    2ca0:	47 70       	andi	r20, 0x07	; 7
    2ca2:	40 5d       	subi	r20, 0xD0	; 208
    2ca4:	41 93       	st	Z+, r20
    2ca6:	b3 e0       	ldi	r27, 0x03	; 3
    2ca8:	0f d0       	rcall	.+30     	; 0x2cc8 <__ultoa_invert+0x86>
    2caa:	c9 f7       	brne	.-14     	; 0x2c9e <__ultoa_invert+0x5c>
    2cac:	f6 cf       	rjmp	.-20     	; 0x2c9a <__ultoa_invert+0x58>
    2cae:	46 2f       	mov	r20, r22
    2cb0:	4f 70       	andi	r20, 0x0F	; 15
    2cb2:	40 5d       	subi	r20, 0xD0	; 208
    2cb4:	4a 33       	cpi	r20, 0x3A	; 58
    2cb6:	18 f0       	brcs	.+6      	; 0x2cbe <__ultoa_invert+0x7c>
    2cb8:	49 5d       	subi	r20, 0xD9	; 217
    2cba:	31 fd       	sbrc	r19, 1
    2cbc:	40 52       	subi	r20, 0x20	; 32
    2cbe:	41 93       	st	Z+, r20
    2cc0:	02 d0       	rcall	.+4      	; 0x2cc6 <__ultoa_invert+0x84>
    2cc2:	a9 f7       	brne	.-22     	; 0x2cae <__ultoa_invert+0x6c>
    2cc4:	ea cf       	rjmp	.-44     	; 0x2c9a <__ultoa_invert+0x58>
    2cc6:	b4 e0       	ldi	r27, 0x04	; 4
    2cc8:	a6 95       	lsr	r26
    2cca:	97 95       	ror	r25
    2ccc:	87 95       	ror	r24
    2cce:	77 95       	ror	r23
    2cd0:	67 95       	ror	r22
    2cd2:	ba 95       	dec	r27
    2cd4:	c9 f7       	brne	.-14     	; 0x2cc8 <__ultoa_invert+0x86>
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	61 05       	cpc	r22, r1
    2cda:	71 05       	cpc	r23, r1
    2cdc:	08 95       	ret
    2cde:	9b 01       	movw	r18, r22
    2ce0:	ac 01       	movw	r20, r24
    2ce2:	0a 2e       	mov	r0, r26
    2ce4:	06 94       	lsr	r0
    2ce6:	57 95       	ror	r21
    2ce8:	47 95       	ror	r20
    2cea:	37 95       	ror	r19
    2cec:	27 95       	ror	r18
    2cee:	ba 95       	dec	r27
    2cf0:	c9 f7       	brne	.-14     	; 0x2ce4 <__ultoa_invert+0xa2>
    2cf2:	62 0f       	add	r22, r18
    2cf4:	73 1f       	adc	r23, r19
    2cf6:	84 1f       	adc	r24, r20
    2cf8:	95 1f       	adc	r25, r21
    2cfa:	a0 1d       	adc	r26, r0
    2cfc:	08 95       	ret

00002cfe <__mulsi3>:
    2cfe:	db 01       	movw	r26, r22
    2d00:	8f 93       	push	r24
    2d02:	9f 93       	push	r25
    2d04:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muluhisi3>
    2d08:	bf 91       	pop	r27
    2d0a:	af 91       	pop	r26
    2d0c:	a2 9f       	mul	r26, r18
    2d0e:	80 0d       	add	r24, r0
    2d10:	91 1d       	adc	r25, r1
    2d12:	a3 9f       	mul	r26, r19
    2d14:	90 0d       	add	r25, r0
    2d16:	b2 9f       	mul	r27, r18
    2d18:	90 0d       	add	r25, r0
    2d1a:	11 24       	eor	r1, r1
    2d1c:	08 95       	ret

00002d1e <__udivmodsi4>:
    2d1e:	a1 e2       	ldi	r26, 0x21	; 33
    2d20:	1a 2e       	mov	r1, r26
    2d22:	aa 1b       	sub	r26, r26
    2d24:	bb 1b       	sub	r27, r27
    2d26:	fd 01       	movw	r30, r26
    2d28:	0d c0       	rjmp	.+26     	; 0x2d44 <__udivmodsi4_ep>

00002d2a <__udivmodsi4_loop>:
    2d2a:	aa 1f       	adc	r26, r26
    2d2c:	bb 1f       	adc	r27, r27
    2d2e:	ee 1f       	adc	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	a2 17       	cp	r26, r18
    2d34:	b3 07       	cpc	r27, r19
    2d36:	e4 07       	cpc	r30, r20
    2d38:	f5 07       	cpc	r31, r21
    2d3a:	20 f0       	brcs	.+8      	; 0x2d44 <__udivmodsi4_ep>
    2d3c:	a2 1b       	sub	r26, r18
    2d3e:	b3 0b       	sbc	r27, r19
    2d40:	e4 0b       	sbc	r30, r20
    2d42:	f5 0b       	sbc	r31, r21

00002d44 <__udivmodsi4_ep>:
    2d44:	66 1f       	adc	r22, r22
    2d46:	77 1f       	adc	r23, r23
    2d48:	88 1f       	adc	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	1a 94       	dec	r1
    2d4e:	69 f7       	brne	.-38     	; 0x2d2a <__udivmodsi4_loop>
    2d50:	60 95       	com	r22
    2d52:	70 95       	com	r23
    2d54:	80 95       	com	r24
    2d56:	90 95       	com	r25
    2d58:	9b 01       	movw	r18, r22
    2d5a:	ac 01       	movw	r20, r24
    2d5c:	bd 01       	movw	r22, r26
    2d5e:	cf 01       	movw	r24, r30
    2d60:	08 95       	ret

00002d62 <__divmodsi4>:
    2d62:	05 2e       	mov	r0, r21
    2d64:	97 fb       	bst	r25, 7
    2d66:	1e f4       	brtc	.+6      	; 0x2d6e <__divmodsi4+0xc>
    2d68:	00 94       	com	r0
    2d6a:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__negsi2>
    2d6e:	57 fd       	sbrc	r21, 7
    2d70:	07 d0       	rcall	.+14     	; 0x2d80 <__divmodsi4_neg2>
    2d72:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__udivmodsi4>
    2d76:	07 fc       	sbrc	r0, 7
    2d78:	03 d0       	rcall	.+6      	; 0x2d80 <__divmodsi4_neg2>
    2d7a:	4e f4       	brtc	.+18     	; 0x2d8e <__divmodsi4_exit>
    2d7c:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__negsi2>

00002d80 <__divmodsi4_neg2>:
    2d80:	50 95       	com	r21
    2d82:	40 95       	com	r20
    2d84:	30 95       	com	r19
    2d86:	21 95       	neg	r18
    2d88:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d8c:	5f 4f       	sbci	r21, 0xFF	; 255

00002d8e <__divmodsi4_exit>:
    2d8e:	08 95       	ret

00002d90 <__negsi2>:
    2d90:	90 95       	com	r25
    2d92:	80 95       	com	r24
    2d94:	70 95       	com	r23
    2d96:	61 95       	neg	r22
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9e:	08 95       	ret

00002da0 <__muluhisi3>:
    2da0:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__umulhisi3>
    2da4:	a5 9f       	mul	r26, r21
    2da6:	90 0d       	add	r25, r0
    2da8:	b4 9f       	mul	r27, r20
    2daa:	90 0d       	add	r25, r0
    2dac:	a4 9f       	mul	r26, r20
    2dae:	80 0d       	add	r24, r0
    2db0:	91 1d       	adc	r25, r1
    2db2:	11 24       	eor	r1, r1
    2db4:	08 95       	ret

00002db6 <__mulshisi3>:
    2db6:	b7 ff       	sbrs	r27, 7
    2db8:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__muluhisi3>

00002dbc <__mulohisi3>:
    2dbc:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__muluhisi3>
    2dc0:	82 1b       	sub	r24, r18
    2dc2:	93 0b       	sbc	r25, r19
    2dc4:	08 95       	ret

00002dc6 <__prologue_saves__>:
    2dc6:	2f 92       	push	r2
    2dc8:	3f 92       	push	r3
    2dca:	4f 92       	push	r4
    2dcc:	5f 92       	push	r5
    2dce:	6f 92       	push	r6
    2dd0:	7f 92       	push	r7
    2dd2:	8f 92       	push	r8
    2dd4:	9f 92       	push	r9
    2dd6:	af 92       	push	r10
    2dd8:	bf 92       	push	r11
    2dda:	cf 92       	push	r12
    2ddc:	df 92       	push	r13
    2dde:	ef 92       	push	r14
    2de0:	ff 92       	push	r15
    2de2:	0f 93       	push	r16
    2de4:	1f 93       	push	r17
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	ca 1b       	sub	r28, r26
    2df0:	db 0b       	sbc	r29, r27
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	09 94       	ijmp

00002dfe <__epilogue_restores__>:
    2dfe:	2a 88       	ldd	r2, Y+18	; 0x12
    2e00:	39 88       	ldd	r3, Y+17	; 0x11
    2e02:	48 88       	ldd	r4, Y+16	; 0x10
    2e04:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e06:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e08:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e10:	b9 84       	ldd	r11, Y+9	; 0x09
    2e12:	c8 84       	ldd	r12, Y+8	; 0x08
    2e14:	df 80       	ldd	r13, Y+7	; 0x07
    2e16:	ee 80       	ldd	r14, Y+6	; 0x06
    2e18:	fd 80       	ldd	r15, Y+5	; 0x05
    2e1a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e1c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e1e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e20:	b9 81       	ldd	r27, Y+1	; 0x01
    2e22:	ce 0f       	add	r28, r30
    2e24:	d1 1d       	adc	r29, r1
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	ed 01       	movw	r28, r26
    2e32:	08 95       	ret

00002e34 <__umulhisi3>:
    2e34:	a2 9f       	mul	r26, r18
    2e36:	b0 01       	movw	r22, r0
    2e38:	b3 9f       	mul	r27, r19
    2e3a:	c0 01       	movw	r24, r0
    2e3c:	a3 9f       	mul	r26, r19
    2e3e:	70 0d       	add	r23, r0
    2e40:	81 1d       	adc	r24, r1
    2e42:	11 24       	eor	r1, r1
    2e44:	91 1d       	adc	r25, r1
    2e46:	b2 9f       	mul	r27, r18
    2e48:	70 0d       	add	r23, r0
    2e4a:	81 1d       	adc	r24, r1
    2e4c:	11 24       	eor	r1, r1
    2e4e:	91 1d       	adc	r25, r1
    2e50:	08 95       	ret

00002e52 <_exit>:
    2e52:	f8 94       	cli

00002e54 <__stop_program>:
    2e54:	ff cf       	rjmp	.-2      	; 0x2e54 <__stop_program>
