
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003440  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00003440  000034f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000f4  008000f4  00003588  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00003588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000358a  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000035e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005f6d  00000000  00000000  00003866  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9b  00000000  00000000  000097d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d9b  00000000  00000000  0000a76e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bbc  00000000  00000000  0000b50c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ad4  00000000  00000000  0000c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003742  00000000  00000000  0000cb9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  000102de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      54:	40 0d       	add	r20, r0
      56:	5b 0d       	add	r21, r11
      58:	83 0e       	add	r8, r19
      5a:	83 0e       	add	r8, r19
      5c:	83 0e       	add	r8, r19
      5e:	83 0e       	add	r8, r19
      60:	83 0e       	add	r8, r19
      62:	83 0e       	add	r8, r19
      64:	83 0e       	add	r8, r19
      66:	61 0d       	add	r22, r1
      68:	83 0e       	add	r8, r19
      6a:	83 0e       	add	r8, r19
      6c:	83 0e       	add	r8, r19
      6e:	67 0d       	add	r22, r7
      70:	6f 0d       	add	r22, r15
      72:	77 0d       	add	r23, r7
      74:	9e 0d       	add	r25, r14
      76:	c5 0d       	add	r28, r5
      78:	ec 0d       	add	r30, r12
      7a:	13 0e       	add	r1, r19
      7c:	3a 0e       	add	r3, r26
      7e:	61 0e       	add	r6, r17
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfa>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef510>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates8ampl2vecEiPiS0_+0x13e>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d4>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef744>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b6>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f0>
      d4:	3f 05       	cpc	r19, r15
      d6:	a8 4c       	sbci	r26, 0xC8	; 200
      d8:	cd b2       	in	r12, 0x1d	; 29
      da:	d4 4e       	sbci	r29, 0xE4	; 228
      dc:	b9 38       	cpi	r27, 0x89	; 137
      de:	36 a9       	ldd	r19, Z+54	; 0x36
      e0:	02 0c       	add	r0, r2
      e2:	50 b9       	out	0x00, r21	; 0
      e4:	91 86       	std	Z+9, r9	; 0x09
      e6:	88 08       	sbc	r8, r8
      e8:	3c a6       	std	Y+44, r3	; 0x2c
      ea:	aa aa       	std	Y+50, r10	; 0x32
      ec:	2a be       	out	0x3a, r2	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 08       	sbc	r3, r15
      f4:	00 00       	nop
      f6:	00 be       	out	0x30, r0	; 48
      f8:	92 24       	eor	r9, r2
      fa:	49 12       	cpse	r4, r25
      fc:	3e ab       	std	Y+54, r19	; 0x36
      fe:	aa aa       	std	Y+50, r10	; 0x32
     100:	2a be       	out	0x3a, r2	; 58
     102:	cd cc       	rjmp	.-1638   	; 0xfffffa9e <__eeprom_end+0xff7efa9c>
     104:	cc 4c       	sbci	r28, 0xCC	; 204
     106:	3e 00       	.word	0x003e	; ????
     108:	00 00       	nop
     10a:	80 be       	out	0x30, r8	; 48
     10c:	ab aa       	std	Y+51, r10	; 0x33
     10e:	aa aa       	std	Y+50, r10	; 0x32
     110:	3e 00       	.word	0x003e	; ????
     112:	00 00       	nop
     114:	00 bf       	out	0x30, r16	; 48
     116:	00 00       	nop
     118:	00 80       	ld	r0, Z
     11a:	3f 00       	.word	0x003f	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	08 41       	sbci	r16, 0x18	; 24
     122:	78 d3       	rcall	.+1776   	; 0x814 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x1a2>
     124:	bb 43       	sbci	r27, 0x3B	; 59
     126:	87 d1       	rcall	.+782    	; 0x436 <_ZN6EEProm4readEj+0x4a>
     128:	13 3d       	cpi	r17, 0xD3	; 211
     12a:	19 0e       	add	r1, r25
     12c:	3c c3       	rjmp	.+1656   	; 0x7a6 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x134>
     12e:	bd 42       	sbci	r27, 0x2D	; 45
     130:	82 ad       	ldd	r24, Z+58	; 0x3a
     132:	2b 3e       	cpi	r18, 0xEB	; 235
     134:	68 ec       	ldi	r22, 0xC8	; 200
     136:	82 76       	andi	r24, 0x62	; 98
     138:	be d9       	rcall	.-3204   	; 0xfffff4b6 <__eeprom_end+0xff7ef4b4>
     13a:	8f e1       	ldi	r24, 0x1F	; 31
     13c:	a9 3e       	cpi	r26, 0xE9	; 233
     13e:	4c 80       	ldd	r4, Y+4	; 0x04
     140:	ef ff       	.word	0xffef	; ????
     142:	be 01       	movw	r22, r28
     144:	c4 ff       	sbrs	r28, 4
     146:	7f 3f       	cpi	r23, 0xFF	; 255
     148:	00 00       	nop
     14a:	00 00       	nop
	...

0000014e <__ctors_start>:
     14e:	71 0b       	sbc	r23, r17

00000150 <__ctors_end>:
     150:	11 24       	eor	r1, r1
     152:	1f be       	out	0x3f, r1	; 63
     154:	cf e5       	ldi	r28, 0x5F	; 95
     156:	d4 e0       	ldi	r29, 0x04	; 4
     158:	de bf       	out	0x3e, r29	; 62
     15a:	cd bf       	out	0x3d, r28	; 61

0000015c <__do_copy_data>:
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	a0 e6       	ldi	r26, 0x60	; 96
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	e0 e4       	ldi	r30, 0x40	; 64
     164:	f4 e3       	ldi	r31, 0x34	; 52
     166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x10>
     168:	05 90       	lpm	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	a4 3f       	cpi	r26, 0xF4	; 244
     16e:	b1 07       	cpc	r27, r17
     170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0xc>

00000172 <__do_clear_bss>:
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	a4 ef       	ldi	r26, 0xF4	; 244
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
     17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
     17c:	ac 3f       	cpi	r26, 0xFC	; 252
     17e:	b2 07       	cpc	r27, r18
     180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>

00000182 <__do_global_ctors>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	c0 e5       	ldi	r28, 0x50	; 80
     186:	d1 e0       	ldi	r29, 0x01	; 1
     188:	04 c0       	rjmp	.+8      	; 0x192 <__do_global_ctors+0x10>
     18a:	22 97       	sbiw	r28, 0x02	; 2
     18c:	fe 01       	movw	r30, r28
     18e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__tablejump__>
     192:	ce 34       	cpi	r28, 0x4E	; 78
     194:	d1 07       	cpc	r29, r17
     196:	c9 f7       	brne	.-14     	; 0x18a <__do_global_ctors+0x8>
     198:	0e 94 76 0b 	call	0x16ec	; 0x16ec <main>
     19c:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	fc 01       	movw	r30, r24
     1aa:	40 83       	st	Z, r20
     1ac:	51 83       	std	Z+1, r21	; 0x01
     1ae:	62 83       	std	Z+2, r22	; 0x02
     1b0:	73 83       	std	Z+3, r23	; 0x03
     1b2:	04 83       	std	Z+4, r16	; 0x04
     1b4:	15 83       	std	Z+5, r17	; 0x05
     1b6:	26 83       	std	Z+6, r18	; 0x06
     1b8:	37 83       	std	Z+7, r19	; 0x07
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	08 95       	ret

000001c0 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     1c0:	fc 01       	movw	r30, r24
     1c2:	10 82       	st	Z, r1
     1c4:	11 82       	std	Z+1, r1	; 0x01
     1c6:	12 82       	std	Z+2, r1	; 0x02
     1c8:	13 82       	std	Z+3, r1	; 0x03
     1ca:	14 82       	std	Z+4, r1	; 0x04
     1cc:	15 82       	std	Z+5, r1	; 0x05
     1ce:	16 82       	std	Z+6, r1	; 0x06
     1d0:	17 82       	std	Z+7, r1	; 0x07
     1d2:	08 95       	ret

000001d4 <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     1d4:	af 92       	push	r10
     1d6:	bf 92       	push	r11
     1d8:	cf 92       	push	r12
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	68 97       	sbiw	r28, 0x18	; 24
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	5c 01       	movw	r10, r24
     1fa:	09 8b       	std	Y+17, r16	; 0x11
     1fc:	1a 8b       	std	Y+18, r17	; 0x12
     1fe:	2b 8b       	std	Y+19, r18	; 0x13
     200:	3c 8b       	std	Y+20, r19	; 0x14
     202:	4d 8b       	std	Y+21, r20	; 0x15
     204:	5e 8b       	std	Y+22, r21	; 0x16
     206:	6f 8b       	std	Y+23, r22	; 0x17
     208:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     20a:	2d 89       	ldd	r18, Y+21	; 0x15
     20c:	3e 89       	ldd	r19, Y+22	; 0x16
     20e:	4f 89       	ldd	r20, Y+23	; 0x17
     210:	58 8d       	ldd	r21, Y+24	; 0x18
     212:	fc 01       	movw	r30, r24
     214:	64 81       	ldd	r22, Z+4	; 0x04
     216:	75 81       	ldd	r23, Z+5	; 0x05
     218:	86 81       	ldd	r24, Z+6	; 0x06
     21a:	97 81       	ldd	r25, Z+7	; 0x07
     21c:	0e 94 45 10 	call	0x208a	; 0x208a <__addsf3>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24
     224:	29 89       	ldd	r18, Y+17	; 0x11
     226:	3a 89       	ldd	r19, Y+18	; 0x12
     228:	4b 89       	ldd	r20, Y+19	; 0x13
     22a:	5c 89       	ldd	r21, Y+20	; 0x14
     22c:	f5 01       	movw	r30, r10
     22e:	60 81       	ld	r22, Z
     230:	71 81       	ldd	r23, Z+1	; 0x01
     232:	82 81       	ldd	r24, Z+2	; 0x02
     234:	93 81       	ldd	r25, Z+3	; 0x03
     236:	0e 94 45 10 	call	0x208a	; 0x208a <__addsf3>
     23a:	ab 01       	movw	r20, r22
     23c:	bc 01       	movw	r22, r24
     23e:	97 01       	movw	r18, r14
     240:	86 01       	movw	r16, r12
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	fe 01       	movw	r30, r28
     24e:	31 96       	adiw	r30, 0x01	; 1
     250:	de 01       	movw	r26, r28
     252:	19 96       	adiw	r26, 0x09	; 9
     254:	01 90       	ld	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	8a 95       	dec	r24
     25a:	e1 f7       	brne	.-8      	; 0x254 <_ZN7Complex3addES_+0x80>
     25c:	29 85       	ldd	r18, Y+9	; 0x09
     25e:	3a 85       	ldd	r19, Y+10	; 0x0a
     260:	4b 85       	ldd	r20, Y+11	; 0x0b
     262:	5c 85       	ldd	r21, Y+12	; 0x0c
     264:	6d 85       	ldd	r22, Y+13	; 0x0d
     266:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     268:	8f 85       	ldd	r24, Y+15	; 0x0f
     26a:	98 89       	ldd	r25, Y+16	; 0x10
     26c:	68 96       	adiw	r28, 0x18	; 24
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	df 90       	pop	r13
     286:	cf 90       	pop	r12
     288:	bf 90       	pop	r11
     28a:	af 90       	pop	r10
     28c:	08 95       	ret

0000028e <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     28e:	4f 92       	push	r4
     290:	5f 92       	push	r5
     292:	6f 92       	push	r6
     294:	7f 92       	push	r7
     296:	8f 92       	push	r8
     298:	9f 92       	push	r9
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	a0 97       	sbiw	r28, 0x20	; 32
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	09 8b       	std	Y+17, r16	; 0x11
     2c0:	1a 8b       	std	Y+18, r17	; 0x12
     2c2:	2b 8b       	std	Y+19, r18	; 0x13
     2c4:	3c 8b       	std	Y+20, r19	; 0x14
     2c6:	4d 8b       	std	Y+21, r20	; 0x15
     2c8:	5e 8b       	std	Y+22, r21	; 0x16
     2ca:	6f 8b       	std	Y+23, r22	; 0x17
     2cc:	78 8f       	std	Y+24, r23	; 0x18
     2ce:	89 88       	ldd	r8, Y+17	; 0x11
     2d0:	9a 88       	ldd	r9, Y+18	; 0x12
     2d2:	ab 88       	ldd	r10, Y+19	; 0x13
     2d4:	bc 88       	ldd	r11, Y+20	; 0x14
     2d6:	2d 89       	ldd	r18, Y+21	; 0x15
     2d8:	3e 89       	ldd	r19, Y+22	; 0x16
     2da:	4f 89       	ldd	r20, Y+23	; 0x17
     2dc:	58 8d       	ldd	r21, Y+24	; 0x18
     2de:	2d 8f       	std	Y+29, r18	; 0x1d
     2e0:	3e 8f       	std	Y+30, r19	; 0x1e
     2e2:	4f 8f       	std	Y+31, r20	; 0x1f
     2e4:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     2e6:	fc 01       	movw	r30, r24
     2e8:	c0 80       	ld	r12, Z
     2ea:	d1 80       	ldd	r13, Z+1	; 0x01
     2ec:	e2 80       	ldd	r14, Z+2	; 0x02
     2ee:	f3 80       	ldd	r15, Z+3	; 0x03
     2f0:	24 81       	ldd	r18, Z+4	; 0x04
     2f2:	35 81       	ldd	r19, Z+5	; 0x05
     2f4:	46 81       	ldd	r20, Z+6	; 0x06
     2f6:	57 81       	ldd	r21, Z+7	; 0x07
     2f8:	29 8f       	std	Y+25, r18	; 0x19
     2fa:	3a 8f       	std	Y+26, r19	; 0x1a
     2fc:	4b 8f       	std	Y+27, r20	; 0x1b
     2fe:	5c 8f       	std	Y+28, r21	; 0x1c
     300:	2d 8d       	ldd	r18, Y+29	; 0x1d
     302:	3e 8d       	ldd	r19, Y+30	; 0x1e
     304:	4f 8d       	ldd	r20, Y+31	; 0x1f
     306:	58 a1       	ldd	r21, Y+32	; 0x20
     308:	c7 01       	movw	r24, r14
     30a:	b6 01       	movw	r22, r12
     30c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     310:	2b 01       	movw	r4, r22
     312:	3c 01       	movw	r6, r24
     314:	a5 01       	movw	r20, r10
     316:	94 01       	movw	r18, r8
     318:	69 8d       	ldd	r22, Y+25	; 0x19
     31a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     31c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     31e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     320:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	c3 01       	movw	r24, r6
     32a:	b2 01       	movw	r22, r4
     32c:	0e 94 45 10 	call	0x208a	; 0x208a <__addsf3>
     330:	2b 01       	movw	r4, r22
     332:	3c 01       	movw	r6, r24
     334:	a5 01       	movw	r20, r10
     336:	94 01       	movw	r18, r8
     338:	c7 01       	movw	r24, r14
     33a:	b6 01       	movw	r22, r12
     33c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     340:	6b 01       	movw	r12, r22
     342:	7c 01       	movw	r14, r24
     344:	2d 8d       	ldd	r18, Y+29	; 0x1d
     346:	3e 8d       	ldd	r19, Y+30	; 0x1e
     348:	4f 8d       	ldd	r20, Y+31	; 0x1f
     34a:	58 a1       	ldd	r21, Y+32	; 0x20
     34c:	69 8d       	ldd	r22, Y+25	; 0x19
     34e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     350:	8b 8d       	ldd	r24, Y+27	; 0x1b
     352:	9c 8d       	ldd	r25, Y+28	; 0x1c
     354:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     358:	9b 01       	movw	r18, r22
     35a:	ac 01       	movw	r20, r24
     35c:	c7 01       	movw	r24, r14
     35e:	b6 01       	movw	r22, r12
     360:	0e 94 44 10 	call	0x2088	; 0x2088 <__subsf3>
     364:	ab 01       	movw	r20, r22
     366:	bc 01       	movw	r22, r24
     368:	93 01       	movw	r18, r6
     36a:	82 01       	movw	r16, r4
     36c:	ce 01       	movw	r24, r28
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     374:	88 e0       	ldi	r24, 0x08	; 8
     376:	fe 01       	movw	r30, r28
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	de 01       	movw	r26, r28
     37c:	19 96       	adiw	r26, 0x09	; 9
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <_ZN7Complex3mulES_+0xf0>
     386:	29 85       	ldd	r18, Y+9	; 0x09
     388:	3a 85       	ldd	r19, Y+10	; 0x0a
     38a:	4b 85       	ldd	r20, Y+11	; 0x0b
     38c:	5c 85       	ldd	r21, Y+12	; 0x0c
     38e:	6d 85       	ldd	r22, Y+13	; 0x0d
     390:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     392:	8f 85       	ldd	r24, Y+15	; 0x0f
     394:	98 89       	ldd	r25, Y+16	; 0x10
     396:	a0 96       	adiw	r28, 0x20	; 32
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	bf 90       	pop	r11
     3b4:	af 90       	pop	r10
     3b6:	9f 90       	pop	r9
     3b8:	8f 90       	pop	r8
     3ba:	7f 90       	pop	r7
     3bc:	6f 90       	pop	r6
     3be:	5f 90       	pop	r5
     3c0:	4f 90       	pop	r4
     3c2:	08 95       	ret

000003c4 <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 81       	ld	r18, Z
     3c8:	31 81       	ldd	r19, Z+1	; 0x01
     3ca:	42 81       	ldd	r20, Z+2	; 0x02
     3cc:	53 81       	ldd	r21, Z+3	; 0x03
     3ce:	64 81       	ldd	r22, Z+4	; 0x04
     3d0:	75 81       	ldd	r23, Z+5	; 0x05
     3d2:	86 81       	ldd	r24, Z+6	; 0x06
     3d4:	97 81       	ldd	r25, Z+7	; 0x07
     3d6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divsf3>
     3da:	0e 94 a9 10 	call	0x2152	; 0x2152 <atan>
     3de:	08 95       	ret

000003e0 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     3e0:	85 e0       	ldi	r24, 0x05	; 5
     3e2:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     3e4:	81 b1       	in	r24, 0x01	; 1
     3e6:	8c 7f       	andi	r24, 0xFC	; 252
     3e8:	81 b9       	out	0x01, r24	; 1
     3ea:	08 95       	ret

000003ec <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3ec:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     3ee:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     3f0:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3f2:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     3f4:	06 b6       	in	r0, 0x36	; 54
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     3fa:	81 b1       	in	r24, 0x01	; 1
     3fc:	88 7f       	andi	r24, 0xF8	; 248
     3fe:	88 30       	cpi	r24, 0x08	; 8
     400:	09 f0       	breq	.+2      	; 0x404 <_ZN6EEProm4readEj+0x18>
     402:	41 c0       	rjmp	.+130    	; 0x486 <__stack+0x27>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     404:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     406:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     408:	06 b6       	in	r0, 0x36	; 54
     40a:	07 fe       	sbrs	r0, 7
     40c:	fd cf       	rjmp	.-6      	; 0x408 <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     40e:	81 b1       	in	r24, 0x01	; 1
     410:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     412:	88 31       	cpi	r24, 0x18	; 24
     414:	71 f7       	brne	.-36     	; 0x3f2 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     416:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     418:	84 e8       	ldi	r24, 0x84	; 132
     41a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     41c:	06 b6       	in	r0, 0x36	; 54
     41e:	07 fe       	sbrs	r0, 7
     420:	fd cf       	rjmp	.-6      	; 0x41c <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     422:	81 b1       	in	r24, 0x01	; 1
     424:	88 7f       	andi	r24, 0xF8	; 248
     426:	88 32       	cpi	r24, 0x28	; 40
     428:	81 f5       	brne	.+96     	; 0x48a <__stack+0x2b>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     42a:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     42c:	84 e8       	ldi	r24, 0x84	; 132
     42e:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     430:	06 b6       	in	r0, 0x36	; 54
     432:	07 fe       	sbrs	r0, 7
     434:	fd cf       	rjmp	.-6      	; 0x430 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     436:	81 b1       	in	r24, 0x01	; 1
     438:	88 7f       	andi	r24, 0xF8	; 248
     43a:	88 32       	cpi	r24, 0x28	; 40
     43c:	41 f5       	brne	.+80     	; 0x48e <__stack+0x2f>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     43e:	84 ea       	ldi	r24, 0xA4	; 164
     440:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     442:	06 b6       	in	r0, 0x36	; 54
     444:	07 fe       	sbrs	r0, 7
     446:	fd cf       	rjmp	.-6      	; 0x442 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     448:	81 b1       	in	r24, 0x01	; 1
     44a:	88 7f       	andi	r24, 0xF8	; 248
     44c:	80 31       	cpi	r24, 0x10	; 16
     44e:	09 f5       	brne	.+66     	; 0x492 <__stack+0x33>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     450:	81 ea       	ldi	r24, 0xA1	; 161
     452:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     454:	84 e8       	ldi	r24, 0x84	; 132
     456:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     458:	06 b6       	in	r0, 0x36	; 54
     45a:	07 fe       	sbrs	r0, 7
     45c:	fd cf       	rjmp	.-6      	; 0x458 <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     45e:	81 b1       	in	r24, 0x01	; 1
     460:	88 7f       	andi	r24, 0xF8	; 248
     462:	80 34       	cpi	r24, 0x40	; 64
     464:	c1 f4       	brne	.+48     	; 0x496 <__stack+0x37>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     466:	84 e8       	ldi	r24, 0x84	; 132
     468:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     46a:	06 b6       	in	r0, 0x36	; 54
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <__stack+0xb>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     470:	81 b1       	in	r24, 0x01	; 1
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	88 35       	cpi	r24, 0x58	; 88
     476:	89 f4       	brne	.+34     	; 0x49a <__stack+0x3b>
		return FALSE;

	//Read the data
	data=TWDR;
     478:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     47a:	94 e9       	ldi	r25, 0x94	; 148
     47c:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     47e:	06 b6       	in	r0, 0x36	; 54
     480:	04 fc       	sbrc	r0, 4
     482:	fd cf       	rjmp	.-6      	; 0x47e <__stack+0x1f>
     484:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     49a:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     49c:	08 95       	ret

0000049e <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	c4 56       	subi	r28, 0x64	; 100
     4b4:	d1 09       	sbc	r29, r1
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	6c 01       	movw	r12, r24
     4c2:	ce 01       	movw	r24, r28
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     4cc:	b8 01       	movw	r22, r16
     4ce:	c6 01       	movw	r24, r12
     4d0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN6EEProm4readEj>
     4d4:	f7 01       	movw	r30, r14
     4d6:	81 93       	st	Z+, r24
     4d8:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     4da:	8f 3f       	cpi	r24, 0xFF	; 255
     4dc:	81 f4       	brne	.+32     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4de:	32 97       	sbiw	r30, 0x02	; 2
     4e0:	20 81       	ld	r18, Z
     4e2:	2f 3f       	cpi	r18, 0xFF	; 255
     4e4:	61 f4       	brne	.+24     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4e6:	31 97       	sbiw	r30, 0x01	; 1
     4e8:	20 81       	ld	r18, Z
     4ea:	2f 3f       	cpi	r18, 0xFF	; 255
     4ec:	41 f4       	brne	.+16     	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	20 81       	ld	r18, Z
     4f2:	2f 3f       	cpi	r18, 0xFF	; 255
     4f4:	21 f4       	brne	.+8      	; 0x4fe <_ZN6EEProm7readallEv+0x60>
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	8f 3f       	cpi	r24, 0xFF	; 255
     4fc:	19 f0       	breq	.+6      	; 0x504 <_ZN6EEProm7readallEv+0x66>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4fe:	0f 5f       	subi	r16, 0xFF	; 255
     500:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     502:	e4 cf       	rjmp	.-56     	; 0x4cc <_ZN6EEProm7readallEv+0x2e>
	return eeprom_mem;
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	cc 59       	subi	r28, 0x9C	; 156
     50a:	df 4f       	sbci	r29, 0xFF	; 255
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	cf 90       	pop	r12
     526:	08 95       	ret

00000528 <_Z12print_statesiP7ComplexPc>:

Serial s;
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	7c 01       	movw	r14, r24
     536:	06 2f       	mov	r16, r22
     538:	17 2f       	mov	r17, r23
	s.writestrln(message);
     53a:	ba 01       	movw	r22, r20
     53c:	85 ef       	ldi	r24, 0xF5	; 245
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 2a 10 	call	0x2054	; 0x2054 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     544:	1e 14       	cp	r1, r14
     546:	1f 04       	cpc	r1, r15
     548:	0c f0       	brlt	.+2      	; 0x54c <_Z12print_statesiP7ComplexPc+0x24>
     54a:	47 c0       	rjmp	.+142    	; 0x5da <_Z12print_statesiP7ComplexPc+0xb2>
     54c:	c0 2f       	mov	r28, r16
     54e:	d1 2f       	mov	r29, r17
     550:	00 e0       	ldi	r16, 0x00	; 0
     552:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
     554:	6a e6       	ldi	r22, 0x6A	; 106
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	85 ef       	ldi	r24, 0xF5	; 245
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN6Serial8writestrEPc>
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	4a e7       	ldi	r20, 0x7A	; 122
     566:	54 e4       	ldi	r21, 0x44	; 68
     568:	68 81       	ld	r22, Y
     56a:	79 81       	ldd	r23, Y+1	; 0x01
     56c:	8a 81       	ldd	r24, Y+2	; 0x02
     56e:	9b 81       	ldd	r25, Y+3	; 0x03
     570:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     574:	0e 94 40 11 	call	0x2280	; 0x2280 <__fixsfsi>
     578:	84 ef       	ldi	r24, 0xF4	; 244
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZN4QEPU5Utils7int2strEi>
     580:	bc 01       	movw	r22, r24
     582:	85 ef       	ldi	r24, 0xF5	; 245
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
     58a:	6e e6       	ldi	r22, 0x6E	; 110
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	85 ef       	ldi	r24, 0xF5	; 245
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN6Serial8writestrEPc>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	4a e7       	ldi	r20, 0x7A	; 122
     59c:	54 e4       	ldi	r21, 0x44	; 68
     59e:	6c 81       	ldd	r22, Y+4	; 0x04
     5a0:	7d 81       	ldd	r23, Y+5	; 0x05
     5a2:	8e 81       	ldd	r24, Y+6	; 0x06
     5a4:	9f 81       	ldd	r25, Y+7	; 0x07
     5a6:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     5aa:	0e 94 40 11 	call	0x2280	; 0x2280 <__fixsfsi>
     5ae:	84 ef       	ldi	r24, 0xF4	; 244
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZN4QEPU5Utils7int2strEi>
     5b6:	bc 01       	movw	r22, r24
     5b8:	85 ef       	ldi	r24, 0xF5	; 245
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN6Serial8writestrEPc>
		s.writestrln("");
     5c0:	64 ee       	ldi	r22, 0xE4	; 228
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	85 ef       	ldi	r24, 0xF5	; 245
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 2a 10 	call	0x2054	; 0x2054 <_ZN6Serial10writestrlnEPc>
QEPU::Utils utils;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     5cc:	0f 5f       	subi	r16, 0xFF	; 255
     5ce:	1f 4f       	sbci	r17, 0xFF	; 255
     5d0:	28 96       	adiw	r28, 0x08	; 8
     5d2:	0e 15       	cp	r16, r14
     5d4:	1f 05       	cpc	r17, r15
     5d6:	09 f0       	breq	.+2      	; 0x5da <_Z12print_statesiP7ComplexPc+0xb2>
     5d8:	bd cf       	rjmp	.-134    	; 0x554 <_Z12print_statesiP7ComplexPc+0x2c>
		s.writestr("R: "); s.writestr(utils.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(utils.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	08 95       	ret

000005e8 <_ZN5Gates10setup_seedEv>:

void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 a3 18 	call	0x3146	; 0x3146 <__eerd_word_m16>
     5f0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <srand>
	eeprom_write_word(&randinit,rand()%10000);
     5f4:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <rand>
     5f8:	60 e1       	ldi	r22, 0x10	; 16
     5fa:	77 e2       	ldi	r23, 0x27	; 39
     5fc:	0e 94 c0 13 	call	0x2780	; 0x2780 <__divmodhi4>
     600:	bc 01       	movw	r22, r24
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 a9 18 	call	0x3152	; 0x3152 <__eewr_word_m16>
     60a:	08 95       	ret

0000060c <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}
     60c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN5Gates10setup_seedEv>
     610:	08 95       	ret

00000612 <_ZN5Gates5touchEd>:
void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

int Gates::touch(double probability){
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	6a 01       	movw	r12, r20
     620:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     622:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <rand>
     626:	ec 01       	movw	r28, r24
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	3e ef       	ldi	r19, 0xFE	; 254
     62c:	4f ef       	ldi	r20, 0xFF	; 255
     62e:	56 e4       	ldi	r21, 0x46	; 70
     630:	c7 01       	movw	r24, r14
     632:	b6 01       	movw	r22, r12
     634:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     638:	6b 01       	movw	r12, r22
     63a:	7c 01       	movw	r14, r24
     63c:	be 01       	movw	r22, r28
     63e:	88 27       	eor	r24, r24
     640:	77 fd       	sbrc	r23, 7
     642:	80 95       	com	r24
     644:	98 2f       	mov	r25, r24
     646:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
     64a:	9b 01       	movw	r18, r22
     64c:	ac 01       	movw	r20, r24
     64e:	c1 e0       	ldi	r28, 0x01	; 1
     650:	d0 e0       	ldi	r29, 0x00	; 0
     652:	c7 01       	movw	r24, r14
     654:	b6 01       	movw	r22, r12
     656:	0e 94 9c 12 	call	0x2538	; 0x2538 <__gesf2>
     65a:	88 23       	and	r24, r24
     65c:	14 f4       	brge	.+4      	; 0x662 <_ZN5Gates5touchEd+0x50>
     65e:	c0 e0       	ldi	r28, 0x00	; 0
     660:	d0 e0       	ldi	r29, 0x00	; 0
}
     662:	ce 01       	movw	r24, r28
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <_ZN5Gates17reverse_kroneckerEP7Complexi>:
int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
	return result;
}

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
     672:	3f 92       	push	r3
     674:	4f 92       	push	r4
     676:	5f 92       	push	r5
     678:	6f 92       	push	r6
     67a:	7f 92       	push	r7
     67c:	8f 92       	push	r8
     67e:	9f 92       	push	r9
     680:	af 92       	push	r10
     682:	bf 92       	push	r11
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	a4 97       	sbiw	r28, 0x24	; 36
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	c6 2e       	mov	r12, r22
     6a6:	d7 2e       	mov	r13, r23
     6a8:	2a 01       	movw	r4, r20
	int reversed_kron_size=(log(kron_size)/log(2))*2;
     6aa:	ba 01       	movw	r22, r20
     6ac:	88 27       	eor	r24, r24
     6ae:	77 fd       	sbrc	r23, 7
     6b0:	80 95       	com	r24
     6b2:	98 2f       	mov	r25, r24
     6b4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
     6b8:	0e 94 ac 12 	call	0x2558	; 0x2558 <log>
     6bc:	28 e1       	ldi	r18, 0x18	; 24
     6be:	32 e7       	ldi	r19, 0x72	; 114
     6c0:	41 e3       	ldi	r20, 0x31	; 49
     6c2:	5f e3       	ldi	r21, 0x3F	; 63
     6c4:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divsf3>
     6c8:	9b 01       	movw	r18, r22
     6ca:	ac 01       	movw	r20, r24
     6cc:	0e 94 45 10 	call	0x208a	; 0x208a <__addsf3>
     6d0:	0e 94 40 11 	call	0x2280	; 0x2280 <__fixsfsi>
     6d4:	69 a3       	std	Y+33, r22	; 0x21
     6d6:	7a a3       	std	Y+34, r23	; 0x22
     6d8:	8b a3       	std	Y+35, r24	; 0x23
     6da:	9c a3       	std	Y+36, r25	; 0x24
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
     6dc:	89 a1       	ldd	r24, Y+33	; 0x21
     6de:	9a a1       	ldd	r25, Y+34	; 0x22
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
     6f0:	3c 01       	movw	r6, r24
		
	for(int i=0;i<kron_size;i+=2)
     6f2:	14 14       	cp	r1, r4
     6f4:	15 04       	cpc	r1, r5
     6f6:	0c f0       	brlt	.+2      	; 0x6fa <_ZN5Gates17reverse_kroneckerEP7Complexi+0x88>
     6f8:	72 c0       	rjmp	.+228    	; 0x7de <_ZN5Gates17reverse_kroneckerEP7Complexi+0x16c>
     6fa:	ec 2c       	mov	r14, r12
     6fc:	fd 2c       	mov	r15, r13
     6fe:	4c 01       	movw	r8, r24
     700:	5c 01       	movw	r10, r24
     702:	88 e0       	ldi	r24, 0x08	; 8
     704:	a8 0e       	add	r10, r24
     706:	b1 1c       	adc	r11, r1
     708:	c1 2c       	mov	r12, r1
     70a:	d1 2c       	mov	r13, r1
		if(kron[i].re==1){
			reversed_kronecker[i]=Complex(0,0); reversed_kronecker[i+1]=Complex(1,0);
		}else{
			reversed_kronecker[i]=Complex(1,0); reversed_kronecker[i+1]=Complex(0,0);
     70c:	68 94       	set
     70e:	33 24       	eor	r3, r3
     710:	33 f8       	bld	r3, 3
Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i+=2)
		if(kron[i].re==1){
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e8       	ldi	r20, 0x80	; 128
     718:	5f e3       	ldi	r21, 0x3F	; 63
     71a:	f7 01       	movw	r30, r14
     71c:	60 81       	ld	r22, Z
     71e:	71 81       	ldd	r23, Z+1	; 0x01
     720:	82 81       	ldd	r24, Z+2	; 0x02
     722:	93 81       	ldd	r25, Z+3	; 0x03
     724:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__cmpsf2>
     728:	81 11       	cpse	r24, r1
     72a:	25 c0       	rjmp	.+74     	; 0x776 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x104>
			reversed_kronecker[i]=Complex(0,0); reversed_kronecker[i+1]=Complex(1,0);
     72c:	00 e0       	ldi	r16, 0x00	; 0
     72e:	10 e0       	ldi	r17, 0x00	; 0
     730:	98 01       	movw	r18, r16
     732:	b9 01       	movw	r22, r18
     734:	a8 01       	movw	r20, r16
     736:	ce 01       	movw	r24, r28
     738:	49 96       	adiw	r24, 0x19	; 25
     73a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     73e:	fe 01       	movw	r30, r28
     740:	79 96       	adiw	r30, 0x19	; 25
     742:	d4 01       	movw	r26, r8
     744:	83 2d       	mov	r24, r3
     746:	01 90       	ld	r0, Z+
     748:	0d 92       	st	X+, r0
     74a:	8a 95       	dec	r24
     74c:	e1 f7       	brne	.-8      	; 0x746 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xd4>
     74e:	00 e0       	ldi	r16, 0x00	; 0
     750:	10 e0       	ldi	r17, 0x00	; 0
     752:	98 01       	movw	r18, r16
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	60 e8       	ldi	r22, 0x80	; 128
     75a:	7f e3       	ldi	r23, 0x3F	; 63
     75c:	ce 01       	movw	r24, r28
     75e:	41 96       	adiw	r24, 0x11	; 17
     760:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     764:	fe 01       	movw	r30, r28
     766:	71 96       	adiw	r30, 0x11	; 17
     768:	d5 01       	movw	r26, r10
     76a:	83 2d       	mov	r24, r3
     76c:	01 90       	ld	r0, Z+
     76e:	0d 92       	st	X+, r0
     770:	8a 95       	dec	r24
     772:	e1 f7       	brne	.-8      	; 0x76c <_ZN5Gates17reverse_kroneckerEP7Complexi+0xfa>
     774:	24 c0       	rjmp	.+72     	; 0x7be <_ZN5Gates17reverse_kroneckerEP7Complexi+0x14c>
		}else{
			reversed_kronecker[i]=Complex(1,0); reversed_kronecker[i+1]=Complex(0,0);
     776:	00 e0       	ldi	r16, 0x00	; 0
     778:	10 e0       	ldi	r17, 0x00	; 0
     77a:	98 01       	movw	r18, r16
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	60 e8       	ldi	r22, 0x80	; 128
     782:	7f e3       	ldi	r23, 0x3F	; 63
     784:	ce 01       	movw	r24, r28
     786:	09 96       	adiw	r24, 0x09	; 9
     788:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     78c:	fe 01       	movw	r30, r28
     78e:	39 96       	adiw	r30, 0x09	; 9
     790:	d4 01       	movw	r26, r8
     792:	83 2d       	mov	r24, r3
     794:	01 90       	ld	r0, Z+
     796:	0d 92       	st	X+, r0
     798:	8a 95       	dec	r24
     79a:	e1 f7       	brne	.-8      	; 0x794 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x122>
     79c:	00 e0       	ldi	r16, 0x00	; 0
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	98 01       	movw	r18, r16
     7a2:	b9 01       	movw	r22, r18
     7a4:	a8 01       	movw	r20, r16
     7a6:	ce 01       	movw	r24, r28
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
     7ae:	fe 01       	movw	r30, r28
     7b0:	31 96       	adiw	r30, 0x01	; 1
     7b2:	d5 01       	movw	r26, r10
     7b4:	83 2d       	mov	r24, r3
     7b6:	01 90       	ld	r0, Z+
     7b8:	0d 92       	st	X+, r0
     7ba:	8a 95       	dec	r24
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <_ZN5Gates17reverse_kroneckerEP7Complexi+0x144>

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	int reversed_kron_size=(log(kron_size)/log(2))*2;
	Complex * reversed_kronecker=(Complex*)malloc(sizeof(Complex)*reversed_kron_size);
		
	for(int i=0;i<kron_size;i+=2)
     7be:	f2 e0       	ldi	r31, 0x02	; 2
     7c0:	cf 0e       	add	r12, r31
     7c2:	d1 1c       	adc	r13, r1
     7c4:	80 e1       	ldi	r24, 0x10	; 16
     7c6:	e8 0e       	add	r14, r24
     7c8:	f1 1c       	adc	r15, r1
     7ca:	e0 e1       	ldi	r30, 0x10	; 16
     7cc:	8e 0e       	add	r8, r30
     7ce:	91 1c       	adc	r9, r1
     7d0:	f0 e1       	ldi	r31, 0x10	; 16
     7d2:	af 0e       	add	r10, r31
     7d4:	b1 1c       	adc	r11, r1
     7d6:	c4 14       	cp	r12, r4
     7d8:	d5 04       	cpc	r13, r5
     7da:	0c f4       	brge	.+2      	; 0x7de <_ZN5Gates17reverse_kroneckerEP7Complexi+0x16c>
     7dc:	9a cf       	rjmp	.-204    	; 0x712 <_ZN5Gates17reverse_kroneckerEP7Complexi+0xa0>
			reversed_kronecker[i]=Complex(0,0); reversed_kronecker[i+1]=Complex(1,0);
		}else{
			reversed_kronecker[i]=Complex(1,0); reversed_kronecker[i+1]=Complex(0,0);
		}
		
	print_states(reversed_kron_size,reversed_kronecker,"REVERSED KRONECKER AFTER MULTIPLICATION:");
     7de:	45 e7       	ldi	r20, 0x75	; 117
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	b3 01       	movw	r22, r6
     7e4:	89 a1       	ldd	r24, Y+33	; 0x21
     7e6:	9a a1       	ldd	r25, Y+34	; 0x22
     7e8:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	return reversed_kronecker;
}
     7ec:	c3 01       	movw	r24, r6
     7ee:	a4 96       	adiw	r28, 0x24	; 36
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	bf 90       	pop	r11
     80c:	af 90       	pop	r10
     80e:	9f 90       	pop	r9
     810:	8f 90       	pop	r8
     812:	7f 90       	pop	r7
     814:	6f 90       	pop	r6
     816:	5f 90       	pop	r5
     818:	4f 90       	pop	r4
     81a:	3f 90       	pop	r3
     81c:	08 95       	ret

0000081e <_ZN5Gates9kroneckerEP7Complexii>:

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     81e:	2f 92       	push	r2
     820:	3f 92       	push	r3
     822:	4f 92       	push	r4
     824:	5f 92       	push	r5
     826:	6f 92       	push	r6
     828:	7f 92       	push	r7
     82a:	8f 92       	push	r8
     82c:	9f 92       	push	r9
     82e:	af 92       	push	r10
     830:	bf 92       	push	r11
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	28 97       	sbiw	r28, 0x08	; 8
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
     852:	7c 01       	movw	r14, r24
     854:	5b 01       	movw	r10, r22
     856:	4a 01       	movw	r8, r20
     858:	3e 83       	std	Y+6, r19	; 0x06
     85a:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     85c:	41 30       	cpi	r20, 0x01	; 1
     85e:	51 05       	cpc	r21, r1
     860:	09 f4       	brne	.+2      	; 0x864 <_ZN5Gates9kroneckerEP7Complexii+0x46>
     862:	b8 c0       	rjmp	.+368    	; 0x9d4 <_ZN5Gates9kroneckerEP7Complexii+0x1b6>
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     864:	14 16       	cp	r1, r20
     866:	15 06       	cpc	r1, r21
     868:	0c f0       	brlt	.+2      	; 0x86c <_ZN5Gates9kroneckerEP7Complexii+0x4e>
     86a:	b7 c0       	rjmp	.+366    	; 0x9da <_ZN5Gates9kroneckerEP7Complexii+0x1bc>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	01 e0       	ldi	r16, 0x01	; 1
     872:	10 e0       	ldi	r17, 0x00	; 0
     874:	00 0f       	add	r16, r16
     876:	11 1f       	adc	r17, r17
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	88 15       	cp	r24, r8
     87c:	99 05       	cpc	r25, r9
     87e:	d1 f7       	brne	.-12     	; 0x874 <_ZN5Gates9kroneckerEP7Complexii+0x56>
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     880:	c8 01       	movw	r24, r16
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	9a 83       	std	Y+2, r25	; 0x02
	print_states(2*2,vec,"Before: ");
     896:	4e e9       	ldi	r20, 0x9E	; 158
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	b5 01       	movw	r22, r10
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	*/
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     8a4:	10 16       	cp	r1, r16
     8a6:	11 06       	cpc	r1, r17
     8a8:	0c f4       	brge	.+2      	; 0x8ac <_ZN5Gates9kroneckerEP7Complexii+0x8e>
     8aa:	a6 c0       	rjmp	.+332    	; 0x9f8 <_ZN5Gates9kroneckerEP7Complexii+0x1da>
     8ac:	40 c0       	rjmp	.+128    	; 0x92e <_ZN5Gates9kroneckerEP7Complexii+0x110>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     8ae:	2e 16       	cp	r2, r30
     8b0:	3f 06       	cpc	r3, r31
     8b2:	29 f4       	brne	.+10     	; 0x8be <_ZN5Gates9kroneckerEP7Complexii+0xa0>
     8b4:	9f ef       	ldi	r25, 0xFF	; 255
     8b6:	49 1a       	sub	r4, r25
     8b8:	59 0a       	sbc	r5, r25
     8ba:	eb 81       	ldd	r30, Y+3	; 0x03
     8bc:	fc 81       	ldd	r31, Y+4	; 0x04
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     8be:	7f 01       	movw	r14, r30
     8c0:	af ef       	ldi	r26, 0xFF	; 255
     8c2:	ea 1a       	sub	r14, r26
     8c4:	fa 0a       	sbc	r15, r26
     8c6:	ee 0f       	add	r30, r30
     8c8:	ff 1f       	adc	r31, r31
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	ee 0f       	add	r30, r30
     8d0:	ff 1f       	adc	r31, r31
     8d2:	ea 0d       	add	r30, r10
     8d4:	fb 1d       	adc	r31, r11
     8d6:	00 81       	ld	r16, Z
     8d8:	11 81       	ldd	r17, Z+1	; 0x01
     8da:	22 81       	ldd	r18, Z+2	; 0x02
     8dc:	33 81       	ldd	r19, Z+3	; 0x03
     8de:	44 81       	ldd	r20, Z+4	; 0x04
     8e0:	55 81       	ldd	r21, Z+5	; 0x05
     8e2:	66 81       	ldd	r22, Z+6	; 0x06
     8e4:	77 81       	ldd	r23, Z+7	; 0x07
     8e6:	c2 01       	movw	r24, r4
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	8a 0d       	add	r24, r10
     8f6:	9b 1d       	adc	r25, r11
     8f8:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     8fc:	ef 81       	ldd	r30, Y+7	; 0x07
     8fe:	f8 85       	ldd	r31, Y+8	; 0x08
     900:	20 83       	st	Z, r18
     902:	31 83       	std	Z+1, r19	; 0x01
     904:	42 83       	std	Z+2, r20	; 0x02
     906:	53 83       	std	Z+3, r21	; 0x03
     908:	64 83       	std	Z+4, r22	; 0x04
     90a:	75 83       	std	Z+5, r23	; 0x05
     90c:	86 83       	std	Z+6, r24	; 0x06
     90e:	97 83       	std	Z+7, r25	; 0x07
	*/
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     910:	ff ef       	ldi	r31, 0xFF	; 255
     912:	6f 1a       	sub	r6, r31
     914:	7f 0a       	sbc	r7, r31
     916:	8f 81       	ldd	r24, Y+7	; 0x07
     918:	98 85       	ldd	r25, Y+8	; 0x08
     91a:	08 96       	adiw	r24, 0x08	; 8
     91c:	98 87       	std	Y+8, r25	; 0x08
     91e:	8f 83       	std	Y+7, r24	; 0x07
     920:	6c 14       	cp	r6, r12
     922:	7d 04       	cpc	r7, r13
     924:	14 f4       	brge	.+4      	; 0x92a <_ZN5Gates9kroneckerEP7Complexii+0x10c>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     926:	f7 01       	movw	r30, r14
     928:	c2 cf       	rjmp	.-124    	; 0x8ae <_ZN5Gates9kroneckerEP7Complexii+0x90>
     92a:	86 01       	movw	r16, r12
     92c:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     92e:	ad 81       	ldd	r26, Y+5	; 0x05
     930:	be 81       	ldd	r27, Y+6	; 0x06
     932:	ab 2b       	or	r26, r27
     934:	b1 f5       	brne	.+108    	; 0x9a2 <_ZN5Gates9kroneckerEP7Complexii+0x184>
     936:	44 c0       	rjmp	.+136    	; 0x9c0 <_ZN5Gates9kroneckerEP7Complexii+0x1a2>
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     938:	58 01       	movw	r10, r16
     93a:	f8 01       	movw	r30, r16
     93c:	40 81       	ld	r20, Z
     93e:	51 81       	ldd	r21, Z+1	; 0x01
     940:	62 81       	ldd	r22, Z+2	; 0x02
     942:	73 81       	ldd	r23, Z+3	; 0x03
     944:	c7 01       	movw	r24, r14
     946:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Gates5touchEd>
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	09 f5       	brne	.+66     	; 0x990 <_ZN5Gates9kroneckerEP7Complexii+0x172>
     94e:	84 01       	movw	r16, r8
     950:	c8 01       	movw	r24, r16
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	86 0d       	add	r24, r6
     960:	97 1d       	adc	r25, r7
     962:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     964:	10 82       	st	Z, r1
     966:	11 82       	std	Z+1, r1	; 0x01
     968:	12 82       	std	Z+2, r1	; 0x02
     96a:	13 82       	std	Z+3, r1	; 0x03
     96c:	14 82       	std	Z+4, r1	; 0x04
     96e:	15 82       	std	Z+5, r1	; 0x05
     970:	16 82       	std	Z+6, r1	; 0x06
     972:	17 82       	std	Z+7, r1	; 0x07
     974:	38 96       	adiw	r30, 0x08	; 8
     976:	e8 17       	cp	r30, r24
     978:	f9 07       	cpc	r31, r25
     97a:	a1 f7       	brne	.-24     	; 0x964 <_ZN5Gates9kroneckerEP7Complexii+0x146>
				kronvec[i].re=binary_touch;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a0 e8       	ldi	r26, 0x80	; 128
     982:	bf e3       	ldi	r27, 0x3F	; 63
     984:	f5 01       	movw	r30, r10
     986:	80 83       	st	Z, r24
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	a2 83       	std	Z+2, r26	; 0x02
     98c:	b3 83       	std	Z+3, r27	; 0x03
     98e:	18 c0       	rjmp	.+48     	; 0x9c0 <_ZN5Gates9kroneckerEP7Complexii+0x1a2>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     990:	ff ef       	ldi	r31, 0xFF	; 255
     992:	cf 1a       	sub	r12, r31
     994:	df 0a       	sbc	r13, r31
     996:	08 5f       	subi	r16, 0xF8	; 248
     998:	1f 4f       	sbci	r17, 0xFF	; 255
     99a:	c8 14       	cp	r12, r8
     99c:	d9 04       	cpc	r13, r9
     99e:	61 f6       	brne	.-104    	; 0x938 <_ZN5Gates9kroneckerEP7Complexii+0x11a>
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <_ZN5Gates9kroneckerEP7Complexii+0x18e>
     9a2:	49 80       	ldd	r4, Y+1	; 0x01
     9a4:	5a 80       	ldd	r5, Y+2	; 0x02
     9a6:	21 2c       	mov	r2, r1
     9a8:	31 2c       	mov	r3, r1
     9aa:	48 01       	movw	r8, r16
     9ac:	18 14       	cp	r1, r8
     9ae:	19 04       	cpc	r1, r9
     9b0:	ec f7       	brge	.-6      	; 0x9ac <_ZN5Gates9kroneckerEP7Complexii+0x18e>
     9b2:	64 2c       	mov	r6, r4
     9b4:	75 2c       	mov	r7, r5
     9b6:	04 2d       	mov	r16, r4
     9b8:	15 2d       	mov	r17, r5
     9ba:	c2 2c       	mov	r12, r2
     9bc:	d3 2c       	mov	r13, r3
     9be:	bc cf       	rjmp	.-136    	; 0x938 <_ZN5Gates9kroneckerEP7Complexii+0x11a>
				kronvec[i].re=binary_touch;
				binary_touch=0;
				break;
			}
	}
	print_states(kron_size,kronvec,"Kronecker: ");
     9c0:	47 ea       	ldi	r20, 0xA7	; 167
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	69 81       	ldd	r22, Y+1	; 0x01
     9c6:	7a 81       	ldd	r23, Y+2	; 0x02
     9c8:	c8 01       	movw	r24, r16
     9ca:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>

	return kronvec;
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	9a 81       	ldd	r25, Y+2	; 0x02
     9d2:	24 c0       	rjmp	.+72     	; 0xa1c <_ZN5Gates9kroneckerEP7Complexii+0x1fe>
	print_states(reversed_kron_size,reversed_kronecker,"REVERSED KRONECKER AFTER MULTIPLICATION:");
	return reversed_kronecker;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     9d4:	86 2f       	mov	r24, r22
     9d6:	9b 2d       	mov	r25, r11
     9d8:	21 c0       	rjmp	.+66     	; 0xa1c <_ZN5Gates9kroneckerEP7Complexii+0x1fe>
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     9da:	88 e0       	ldi	r24, 0x08	; 8
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	9a 83       	std	Y+2, r25	; 0x02
	print_states(2*2,vec,"Before: ");
     9e6:	4e e9       	ldi	r20, 0x9E	; 158
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	b5 01       	movw	r22, r10
     9ec:	84 e0       	ldi	r24, 0x04	; 4
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
     9f4:	01 e0       	ldi	r16, 0x01	; 1
     9f6:	10 e0       	ldi	r17, 0x00	; 0
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     9f8:	14 01       	movw	r2, r8
     9fa:	22 0c       	add	r2, r2
     9fc:	33 1c       	adc	r3, r3
     9fe:	c9 80       	ldd	r12, Y+1	; 0x01
     a00:	da 80       	ldd	r13, Y+2	; 0x02
     a02:	f4 01       	movw	r30, r8
     a04:	61 2c       	mov	r6, r1
     a06:	71 2c       	mov	r7, r1
     a08:	41 2c       	mov	r4, r1
     a0a:	51 2c       	mov	r5, r1
     a0c:	8b 82       	std	Y+3, r8	; 0x03
     a0e:	9c 82       	std	Y+4, r9	; 0x04
     a10:	c6 01       	movw	r24, r12
     a12:	68 01       	movw	r12, r16
     a14:	47 01       	movw	r8, r14
     a16:	98 87       	std	Y+8, r25	; 0x08
     a18:	8f 83       	std	Y+7, r24	; 0x07
     a1a:	49 cf       	rjmp	.-366    	; 0x8ae <_ZN5Gates9kroneckerEP7Complexii+0x90>
			}
	}
	print_states(kron_size,kronvec,"Kronecker: ");

	return kronvec;
}
     a1c:	28 96       	adiw	r28, 0x08	; 8
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	bf 90       	pop	r11
     a3a:	af 90       	pop	r10
     a3c:	9f 90       	pop	r9
     a3e:	8f 90       	pop	r8
     a40:	7f 90       	pop	r7
     a42:	6f 90       	pop	r6
     a44:	5f 90       	pop	r5
     a46:	4f 90       	pop	r4
     a48:	3f 90       	pop	r3
     a4a:	2f 90       	pop	r2
     a4c:	08 95       	ret

00000a4e <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     a4e:	2f 92       	push	r2
     a50:	3f 92       	push	r3
     a52:	4f 92       	push	r4
     a54:	5f 92       	push	r5
     a56:	6f 92       	push	r6
     a58:	7f 92       	push	r7
     a5a:	8f 92       	push	r8
     a5c:	9f 92       	push	r9
     a5e:	af 92       	push	r10
     a60:	bf 92       	push	r11
     a62:	cf 92       	push	r12
     a64:	df 92       	push	r13
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	28 97       	sbiw	r28, 0x08	; 8
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	9e 83       	std	Y+6, r25	; 0x06
     a84:	8d 83       	std	Y+5, r24	; 0x05
     a86:	7a 83       	std	Y+2, r23	; 0x02
     a88:	69 83       	std	Y+1, r22	; 0x01
     a8a:	04 2f       	mov	r16, r20
     a8c:	15 2f       	mov	r17, r21
     a8e:	c2 2e       	mov	r12, r18
     a90:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     a92:	cb 01       	movw	r24, r22
     a94:	82 95       	swap	r24
     a96:	92 95       	swap	r25
     a98:	90 7f       	andi	r25, 0xF0	; 240
     a9a:	98 27       	eor	r25, r24
     a9c:	80 7f       	andi	r24, 0xF0	; 240
     a9e:	98 27       	eor	r25, r24
     aa0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
     aa4:	8b 83       	std	Y+3, r24	; 0x03
     aa6:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     aa8:	29 80       	ldd	r2, Y+1	; 0x01
     aaa:	3a 80       	ldd	r3, Y+2	; 0x02
     aac:	22 0c       	add	r2, r2
     aae:	33 1c       	adc	r3, r3
     ab0:	12 14       	cp	r1, r2
     ab2:	13 04       	cpc	r1, r3
     ab4:	0c f0       	brlt	.+2      	; 0xab8 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     ab6:	ac c0       	rjmp	.+344    	; 0xc10 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     ab8:	a8 2e       	mov	r10, r24
     aba:	b9 2e       	mov	r11, r25
     abc:	e0 2e       	mov	r14, r16
     abe:	f1 2e       	mov	r15, r17
     ac0:	0c 2d       	mov	r16, r12
     ac2:	1d 2d       	mov	r17, r13
     ac4:	81 2c       	mov	r8, r1
     ac6:	91 2c       	mov	r9, r1
     ac8:	b8 86       	std	Y+8, r11	; 0x08
     aca:	af 82       	std	Y+7, r10	; 0x07
     acc:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     ace:	f7 01       	movw	r30, r14
     ad0:	41 90       	ld	r4, Z+
     ad2:	51 90       	ld	r5, Z+
     ad4:	7f 01       	movw	r14, r30
     ad6:	66 24       	eor	r6, r6
     ad8:	57 fc       	sbrc	r5, 7
     ada:	60 94       	com	r6
     adc:	76 2c       	mov	r7, r6
     ade:	c3 01       	movw	r24, r6
     ae0:	b2 01       	movw	r22, r4
     ae2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
     ae6:	2b ed       	ldi	r18, 0xDB	; 219
     ae8:	3f e0       	ldi	r19, 0x0F	; 15
     aea:	49 e4       	ldi	r20, 0x49	; 73
     aec:	50 e4       	ldi	r21, 0x40	; 64
     aee:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	44 eb       	ldi	r20, 0xB4	; 180
     af8:	53 e4       	ldi	r21, 0x43	; 67
     afa:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divsf3>
     afe:	0e 94 d5 10 	call	0x21aa	; 0x21aa <cos>
     b02:	ef 81       	ldd	r30, Y+7	; 0x07
     b04:	f8 85       	ldd	r31, Y+8	; 0x08
     b06:	60 83       	st	Z, r22
     b08:	71 83       	std	Z+1, r23	; 0x01
     b0a:	82 83       	std	Z+2, r24	; 0x02
     b0c:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     b0e:	c3 01       	movw	r24, r6
     b10:	b2 01       	movw	r22, r4
     b12:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
     b16:	2b ed       	ldi	r18, 0xDB	; 219
     b18:	3f e0       	ldi	r19, 0x0F	; 15
     b1a:	49 e4       	ldi	r20, 0x49	; 73
     b1c:	50 e4       	ldi	r21, 0x40	; 64
     b1e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	44 eb       	ldi	r20, 0xB4	; 180
     b28:	53 e4       	ldi	r21, 0x43	; 67
     b2a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divsf3>
     b2e:	0e 94 4f 13 	call	0x269e	; 0x269e <sin>
     b32:	2b 01       	movw	r4, r22
     b34:	3c 01       	movw	r6, r24
     b36:	58 01       	movw	r10, r16
     b38:	f8 01       	movw	r30, r16
     b3a:	61 91       	ld	r22, Z+
     b3c:	71 91       	ld	r23, Z+
     b3e:	8f 01       	movw	r16, r30
     b40:	88 27       	eor	r24, r24
     b42:	77 fd       	sbrc	r23, 7
     b44:	80 95       	com	r24
     b46:	98 2f       	mov	r25, r24
     b48:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
     b4c:	2b ed       	ldi	r18, 0xDB	; 219
     b4e:	3f e0       	ldi	r19, 0x0F	; 15
     b50:	49 e4       	ldi	r20, 0x49	; 73
     b52:	50 e4       	ldi	r21, 0x40	; 64
     b54:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	44 e3       	ldi	r20, 0x34	; 52
     b5e:	53 e4       	ldi	r21, 0x43	; 67
     b60:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divsf3>
     b64:	0e 94 d5 10 	call	0x21aa	; 0x21aa <cos>
     b68:	9b 01       	movw	r18, r22
     b6a:	ac 01       	movw	r20, r24
     b6c:	c3 01       	movw	r24, r6
     b6e:	b2 01       	movw	r22, r4
     b70:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     b74:	ef 81       	ldd	r30, Y+7	; 0x07
     b76:	f8 85       	ldd	r31, Y+8	; 0x08
     b78:	60 87       	std	Z+8, r22	; 0x08
     b7a:	71 87       	std	Z+9, r23	; 0x09
     b7c:	82 87       	std	Z+10, r24	; 0x0a
     b7e:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     b80:	f6 01       	movw	r30, r12
     b82:	60 81       	ld	r22, Z
     b84:	71 81       	ldd	r23, Z+1	; 0x01
     b86:	88 27       	eor	r24, r24
     b88:	77 fd       	sbrc	r23, 7
     b8a:	80 95       	com	r24
     b8c:	98 2f       	mov	r25, r24
     b8e:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
     b92:	2b ed       	ldi	r18, 0xDB	; 219
     b94:	3f e0       	ldi	r19, 0x0F	; 15
     b96:	49 e4       	ldi	r20, 0x49	; 73
     b98:	50 e4       	ldi	r21, 0x40	; 64
     b9a:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	44 eb       	ldi	r20, 0xB4	; 180
     ba4:	53 e4       	ldi	r21, 0x43	; 67
     ba6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divsf3>
     baa:	0e 94 4f 13 	call	0x269e	; 0x269e <sin>
     bae:	2b 01       	movw	r4, r22
     bb0:	3c 01       	movw	r6, r24
     bb2:	f5 01       	movw	r30, r10
     bb4:	60 81       	ld	r22, Z
     bb6:	71 81       	ldd	r23, Z+1	; 0x01
     bb8:	88 27       	eor	r24, r24
     bba:	77 fd       	sbrc	r23, 7
     bbc:	80 95       	com	r24
     bbe:	98 2f       	mov	r25, r24
     bc0:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__floatsisf>
     bc4:	2b ed       	ldi	r18, 0xDB	; 219
     bc6:	3f e0       	ldi	r19, 0x0F	; 15
     bc8:	49 e4       	ldi	r20, 0x49	; 73
     bca:	50 e4       	ldi	r21, 0x40	; 64
     bcc:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	44 e3       	ldi	r20, 0x34	; 52
     bd6:	53 e4       	ldi	r21, 0x43	; 67
     bd8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divsf3>
     bdc:	0e 94 4f 13 	call	0x269e	; 0x269e <sin>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
     be4:	c3 01       	movw	r24, r6
     be6:	b2 01       	movw	r22, r4
     be8:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     bec:	ef 81       	ldd	r30, Y+7	; 0x07
     bee:	f8 85       	ldd	r31, Y+8	; 0x08
     bf0:	64 87       	std	Z+12, r22	; 0x0c
     bf2:	75 87       	std	Z+13, r23	; 0x0d
     bf4:	86 87       	std	Z+14, r24	; 0x0e
     bf6:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     bf8:	f2 e0       	ldi	r31, 0x02	; 2
     bfa:	8f 0e       	add	r8, r31
     bfc:	91 1c       	adc	r9, r1
     bfe:	8f 81       	ldd	r24, Y+7	; 0x07
     c00:	98 85       	ldd	r25, Y+8	; 0x08
     c02:	40 96       	adiw	r24, 0x10	; 16
     c04:	98 87       	std	Y+8, r25	; 0x08
     c06:	8f 83       	std	Y+7, r24	; 0x07
     c08:	82 14       	cp	r8, r2
     c0a:	93 04       	cpc	r9, r3
     c0c:	0c f4       	brge	.+2      	; 0xc10 <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     c0e:	5e cf       	rjmp	.-324    	; 0xacc <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     c10:	21 e0       	ldi	r18, 0x01	; 1
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	49 81       	ldd	r20, Y+1	; 0x01
     c16:	5a 81       	ldd	r21, Y+2	; 0x02
     c18:	6b 81       	ldd	r22, Y+3	; 0x03
     c1a:	7c 81       	ldd	r23, Y+4	; 0x04
     c1c:	8d 81       	ldd	r24, Y+5	; 0x05
     c1e:	9e 81       	ldd	r25, Y+6	; 0x06
     c20:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN5Gates9kroneckerEP7Complexii>
}
     c24:	28 96       	adiw	r28, 0x08	; 8
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
     c40:	bf 90       	pop	r11
     c42:	af 90       	pop	r10
     c44:	9f 90       	pop	r9
     c46:	8f 90       	pop	r8
     c48:	7f 90       	pop	r7
     c4a:	6f 90       	pop	r6
     c4c:	5f 90       	pop	r5
     c4e:	4f 90       	pop	r4
     c50:	3f 90       	pop	r3
     c52:	2f 90       	pop	r2
     c54:	08 95       	ret

00000c56 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	8b 01       	movw	r16, r22
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     c64:	14 16       	cp	r1, r20
     c66:	15 06       	cpc	r1, r21
     c68:	64 f4       	brge	.+24     	; 0xc82 <_ZN5Gates8vec2amplEP7Complexi+0x2c>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	c1 e0       	ldi	r28, 0x01	; 1
     c70:	d0 e0       	ldi	r29, 0x00	; 0
     c72:	cc 0f       	add	r28, r28
     c74:	dd 1f       	adc	r29, r29
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	24 17       	cp	r18, r20
     c7c:	35 07       	cpc	r19, r21
     c7e:	c9 f7       	brne	.-14     	; 0xc72 <_ZN5Gates8vec2amplEP7Complexi+0x1c>
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <_ZN5Gates8vec2amplEP7Complexi+0x30>
     c82:	c1 e0       	ldi	r28, 0x01	; 1
     c84:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
}
int * Gates::vec2ampl(Complex * vec,int qb_count){
	int kron_size=custom_pow(2,qb_count);
	if(qb_count>1) vec=reverse_kronecker(vec,kron_size);
     c86:	42 30       	cpi	r20, 0x02	; 2
     c88:	51 05       	cpc	r21, r1
     c8a:	2c f0       	brlt	.+10     	; 0xc96 <_ZN5Gates8vec2amplEP7Complexi+0x40>
     c8c:	ae 01       	movw	r20, r28
     c8e:	b8 01       	movw	r22, r16
     c90:	0e 94 39 03 	call	0x672	; 0x672 <_ZN5Gates17reverse_kroneckerEP7Complexi>
     c94:	8c 01       	movw	r16, r24
	int* newthephi=(int*)malloc(sizeof(int)*2);
     c96:	84 e0       	ldi	r24, 0x04	; 4
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
     c9e:	7c 01       	movw	r14, r24
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
     ca0:	f8 01       	movw	r30, r16
     ca2:	60 81       	ld	r22, Z
     ca4:	71 81       	ldd	r23, Z+1	; 0x01
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	0e 94 36 10 	call	0x206c	; 0x206c <acos>
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	44 eb       	ldi	r20, 0xB4	; 180
     cb4:	53 e4       	ldi	r21, 0x43	; 67
     cb6:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     cba:	2b ed       	ldi	r18, 0xDB	; 219
     cbc:	3f e0       	ldi	r19, 0x0F	; 15
     cbe:	49 e4       	ldi	r20, 0x49	; 73
     cc0:	50 e4       	ldi	r21, 0x40	; 64
     cc2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divsf3>
     cc6:	0e 94 40 11 	call	0x2280	; 0x2280 <__fixsfsi>
     cca:	f7 01       	movw	r30, r14
     ccc:	71 83       	std	Z+1, r23	; 0x01
     cce:	60 83       	st	Z, r22
	newthephi[1]=(180*vec[1].arg())/M_PI;
     cd0:	c8 01       	movw	r24, r16
     cd2:	08 96       	adiw	r24, 0x08	; 8
     cd4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN7Complex3argEv>
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	44 e3       	ldi	r20, 0x34	; 52
     cde:	53 e4       	ldi	r21, 0x43	; 67
     ce0:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__mulsf3>
     ce4:	2b ed       	ldi	r18, 0xDB	; 219
     ce6:	3f e0       	ldi	r19, 0x0F	; 15
     ce8:	49 e4       	ldi	r20, 0x49	; 73
     cea:	50 e4       	ldi	r21, 0x40	; 64
     cec:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divsf3>
     cf0:	0e 94 40 11 	call	0x2280	; 0x2280 <__fixsfsi>
     cf4:	f7 01       	movw	r30, r14
     cf6:	73 83       	std	Z+3, r23	; 0x03
     cf8:	62 83       	std	Z+2, r22	; 0x02
	
	print_states(kron_size,vec,"After: ");
     cfa:	43 eb       	ldi	r20, 0xB3	; 179
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	b8 01       	movw	r22, r16
     d00:	ce 01       	movw	r24, r28
     d02:	0e 94 94 02 	call	0x528	; 0x528 <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     d06:	c7 01       	movw	r24, r14
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	08 95       	ret

00000d16 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     d16:	2f 92       	push	r2
     d18:	3f 92       	push	r3
     d1a:	4f 92       	push	r4
     d1c:	5f 92       	push	r5
     d1e:	6f 92       	push	r6
     d20:	7f 92       	push	r7
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	60 97       	sbiw	r28, 0x10	; 16
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	4b 01       	movw	r8, r22
     d4c:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     d4e:	80 e1       	ldi	r24, 0x10	; 16
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
     d56:	38 2e       	mov	r3, r24
     d58:	29 2e       	mov	r2, r25
     d5a:	c8 2e       	mov	r12, r24
     d5c:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     d5e:	a1 2c       	mov	r10, r1
     d60:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     d62:	24 01       	movw	r4, r8
     d64:	88 e0       	ldi	r24, 0x08	; 8
     d66:	48 0e       	add	r4, r24
     d68:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     d6a:	ce 01       	movw	r24, r28
     d6c:	09 96       	adiw	r24, 0x09	; 9
     d6e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     d72:	75 01       	movw	r14, r10
     d74:	ee 0c       	add	r14, r14
     d76:	ff 1c       	adc	r15, r15
     d78:	ee 0c       	add	r14, r14
     d7a:	ff 1c       	adc	r15, r15
     d7c:	ee 0c       	add	r14, r14
     d7e:	ff 1c       	adc	r15, r15
     d80:	e6 0c       	add	r14, r6
     d82:	f7 1c       	adc	r15, r7
     d84:	d7 01       	movw	r26, r14
     d86:	0c 91       	ld	r16, X
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	12 96       	adiw	r26, 0x02	; 2
     d90:	2c 91       	ld	r18, X
     d92:	12 97       	sbiw	r26, 0x02	; 2
     d94:	13 96       	adiw	r26, 0x03	; 3
     d96:	3c 91       	ld	r19, X
     d98:	13 97       	sbiw	r26, 0x03	; 3
     d9a:	14 96       	adiw	r26, 0x04	; 4
     d9c:	4c 91       	ld	r20, X
     d9e:	14 97       	sbiw	r26, 0x04	; 4
     da0:	15 96       	adiw	r26, 0x05	; 5
     da2:	5c 91       	ld	r21, X
     da4:	15 97       	sbiw	r26, 0x05	; 5
     da6:	16 96       	adiw	r26, 0x06	; 6
     da8:	6c 91       	ld	r22, X
     daa:	16 97       	sbiw	r26, 0x06	; 6
     dac:	17 96       	adiw	r26, 0x07	; 7
     dae:	7c 91       	ld	r23, X
     db0:	c4 01       	movw	r24, r8
     db2:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     db6:	02 2f       	mov	r16, r18
     db8:	13 2f       	mov	r17, r19
     dba:	24 2f       	mov	r18, r20
     dbc:	35 2f       	mov	r19, r21
     dbe:	46 2f       	mov	r20, r22
     dc0:	57 2f       	mov	r21, r23
     dc2:	68 2f       	mov	r22, r24
     dc4:	79 2f       	mov	r23, r25
     dc6:	ce 01       	movw	r24, r28
     dc8:	09 96       	adiw	r24, 0x09	; 9
     dca:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     dce:	29 87       	std	Y+9, r18	; 0x09
     dd0:	3a 87       	std	Y+10, r19	; 0x0a
     dd2:	4b 87       	std	Y+11, r20	; 0x0b
     dd4:	5c 87       	std	Y+12, r21	; 0x0c
     dd6:	6d 87       	std	Y+13, r22	; 0x0d
     dd8:	7e 87       	std	Y+14, r23	; 0x0e
     dda:	8f 87       	std	Y+15, r24	; 0x0f
     ddc:	98 8b       	std	Y+16, r25	; 0x10
     dde:	f7 01       	movw	r30, r14
     de0:	70 96       	adiw	r30, 0x10	; 16
     de2:	d7 01       	movw	r26, r14
     de4:	50 96       	adiw	r26, 0x10	; 16
     de6:	0c 91       	ld	r16, X
     de8:	11 81       	ldd	r17, Z+1	; 0x01
     dea:	22 81       	ldd	r18, Z+2	; 0x02
     dec:	33 81       	ldd	r19, Z+3	; 0x03
     dee:	44 81       	ldd	r20, Z+4	; 0x04
     df0:	55 81       	ldd	r21, Z+5	; 0x05
     df2:	66 81       	ldd	r22, Z+6	; 0x06
     df4:	77 81       	ldd	r23, Z+7	; 0x07
     df6:	c2 01       	movw	r24, r4
     df8:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     dfc:	02 2f       	mov	r16, r18
     dfe:	13 2f       	mov	r17, r19
     e00:	24 2f       	mov	r18, r20
     e02:	35 2f       	mov	r19, r21
     e04:	46 2f       	mov	r20, r22
     e06:	57 2f       	mov	r21, r23
     e08:	68 2f       	mov	r22, r24
     e0a:	79 2f       	mov	r23, r25
     e0c:	ce 01       	movw	r24, r28
     e0e:	09 96       	adiw	r24, 0x09	; 9
     e10:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     e14:	29 87       	std	Y+9, r18	; 0x09
     e16:	3a 87       	std	Y+10, r19	; 0x0a
     e18:	4b 87       	std	Y+11, r20	; 0x0b
     e1a:	5c 87       	std	Y+12, r21	; 0x0c
     e1c:	6d 87       	std	Y+13, r22	; 0x0d
     e1e:	7e 87       	std	Y+14, r23	; 0x0e
     e20:	8f 87       	std	Y+15, r24	; 0x0f
     e22:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     e24:	89 85       	ldd	r24, Y+9	; 0x09
     e26:	9a 85       	ldd	r25, Y+10	; 0x0a
     e28:	ab 85       	ldd	r26, Y+11	; 0x0b
     e2a:	bc 85       	ldd	r27, Y+12	; 0x0c
     e2c:	f6 01       	movw	r30, r12
     e2e:	80 83       	st	Z, r24
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	a2 83       	std	Z+2, r26	; 0x02
     e34:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     e36:	8d 85       	ldd	r24, Y+13	; 0x0d
     e38:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3a:	af 85       	ldd	r26, Y+15	; 0x0f
     e3c:	b8 89       	ldd	r27, Y+16	; 0x10
     e3e:	84 83       	std	Z+4, r24	; 0x04
     e40:	95 83       	std	Z+5, r25	; 0x05
     e42:	a6 83       	std	Z+6, r26	; 0x06
     e44:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     e46:	ff ef       	ldi	r31, 0xFF	; 255
     e48:	af 1a       	sub	r10, r31
     e4a:	bf 0a       	sbc	r11, r31
     e4c:	88 e0       	ldi	r24, 0x08	; 8
     e4e:	c8 0e       	add	r12, r24
     e50:	d1 1c       	adc	r13, r1
     e52:	a2 e0       	ldi	r26, 0x02	; 2
     e54:	aa 16       	cp	r10, r26
     e56:	b1 04       	cpc	r11, r1
     e58:	09 f0       	breq	.+2      	; 0xe5c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     e5a:	87 cf       	rjmp	.-242    	; 0xd6a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     e5c:	83 2d       	mov	r24, r3
     e5e:	92 2d       	mov	r25, r2
     e60:	60 96       	adiw	r28, 0x10	; 16
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	bf 90       	pop	r11
     e7e:	af 90       	pop	r10
     e80:	9f 90       	pop	r9
     e82:	8f 90       	pop	r8
     e84:	7f 90       	pop	r7
     e86:	6f 90       	pop	r6
     e88:	5f 90       	pop	r5
     e8a:	4f 90       	pop	r4
     e8c:	3f 90       	pop	r3
     e8e:	2f 90       	pop	r2
     e90:	08 95       	ret

00000e92 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     e92:	2f 92       	push	r2
     e94:	3f 92       	push	r3
     e96:	4f 92       	push	r4
     e98:	5f 92       	push	r5
     e9a:	6f 92       	push	r6
     e9c:	7f 92       	push	r7
     e9e:	8f 92       	push	r8
     ea0:	9f 92       	push	r9
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	64 97       	sbiw	r28, 0x14	; 20
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	3b 01       	movw	r6, r22
     ec8:	e4 2e       	mov	r14, r20
     eca:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     ecc:	80 e2       	ldi	r24, 0x20	; 32
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
     ed4:	8b 8b       	std	Y+19, r24	; 0x13
     ed6:	9c 8b       	std	Y+20, r25	; 0x14
     ed8:	48 2e       	mov	r4, r24
     eda:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     edc:	81 2c       	mov	r8, r1
     ede:	91 2c       	mov	r9, r1
     ee0:	e9 8a       	std	Y+17, r14	; 0x11
     ee2:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     ee4:	21 2c       	mov	r2, r1
     ee6:	31 2c       	mov	r3, r1
     ee8:	ce 01       	movw	r24, r28
     eea:	09 96       	adiw	r24, 0x09	; 9
     eec:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN7ComplexC1Ev>
     ef0:	c9 88       	ldd	r12, Y+17	; 0x11
     ef2:	da 88       	ldd	r13, Y+18	; 0x12
     ef4:	e2 2c       	mov	r14, r2
     ef6:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     ef8:	54 01       	movw	r10, r8
     efa:	aa 0c       	add	r10, r10
     efc:	bb 1c       	adc	r11, r11
     efe:	aa 0c       	add	r10, r10
     f00:	bb 1c       	adc	r11, r11
     f02:	aa 0c       	add	r10, r10
     f04:	bb 1c       	adc	r11, r11
     f06:	f5 01       	movw	r30, r10
     f08:	ec 0d       	add	r30, r12
     f0a:	fd 1d       	adc	r31, r13
     f0c:	00 81       	ld	r16, Z
     f0e:	11 81       	ldd	r17, Z+1	; 0x01
     f10:	22 81       	ldd	r18, Z+2	; 0x02
     f12:	33 81       	ldd	r19, Z+3	; 0x03
     f14:	44 81       	ldd	r20, Z+4	; 0x04
     f16:	55 81       	ldd	r21, Z+5	; 0x05
     f18:	66 81       	ldd	r22, Z+6	; 0x06
     f1a:	77 81       	ldd	r23, Z+7	; 0x07
     f1c:	c3 01       	movw	r24, r6
     f1e:	8e 0d       	add	r24, r14
     f20:	9f 1d       	adc	r25, r15
     f22:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN7Complex3mulES_>
     f26:	29 83       	std	Y+1, r18	; 0x01
     f28:	3a 83       	std	Y+2, r19	; 0x02
     f2a:	4b 83       	std	Y+3, r20	; 0x03
     f2c:	5c 83       	std	Y+4, r21	; 0x04
     f2e:	6d 83       	std	Y+5, r22	; 0x05
     f30:	7e 83       	std	Y+6, r23	; 0x06
     f32:	8f 83       	std	Y+7, r24	; 0x07
     f34:	98 87       	std	Y+8, r25	; 0x08
     f36:	02 2f       	mov	r16, r18
     f38:	13 2f       	mov	r17, r19
     f3a:	24 2f       	mov	r18, r20
     f3c:	35 2f       	mov	r19, r21
     f3e:	46 2f       	mov	r20, r22
     f40:	57 2f       	mov	r21, r23
     f42:	68 2f       	mov	r22, r24
     f44:	79 2f       	mov	r23, r25
     f46:	ce 01       	movw	r24, r28
     f48:	09 96       	adiw	r24, 0x09	; 9
     f4a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7Complex3addES_>
     f4e:	29 87       	std	Y+9, r18	; 0x09
     f50:	3a 87       	std	Y+10, r19	; 0x0a
     f52:	4b 87       	std	Y+11, r20	; 0x0b
     f54:	5c 87       	std	Y+12, r21	; 0x0c
     f56:	6d 87       	std	Y+13, r22	; 0x0d
     f58:	7e 87       	std	Y+14, r23	; 0x0e
     f5a:	8f 87       	std	Y+15, r24	; 0x0f
     f5c:	98 8b       	std	Y+16, r25	; 0x10
     f5e:	88 e0       	ldi	r24, 0x08	; 8
     f60:	e8 0e       	add	r14, r24
     f62:	f1 1c       	adc	r15, r1
     f64:	e0 e2       	ldi	r30, 0x20	; 32
     f66:	ce 0e       	add	r12, r30
     f68:	d1 1c       	adc	r13, r1
     f6a:	f0 e2       	ldi	r31, 0x20	; 32
     f6c:	ef 16       	cp	r14, r31
     f6e:	f1 04       	cpc	r15, r1
     f70:	51 f6       	brne	.-108    	; 0xf06 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	ab 85       	ldd	r26, Y+11	; 0x0b
     f78:	bc 85       	ldd	r27, Y+12	; 0x0c
     f7a:	f2 01       	movw	r30, r4
     f7c:	80 83       	st	Z, r24
     f7e:	91 83       	std	Z+1, r25	; 0x01
     f80:	a2 83       	std	Z+2, r26	; 0x02
     f82:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	af 85       	ldd	r26, Y+15	; 0x0f
     f8a:	b8 89       	ldd	r27, Y+16	; 0x10
     f8c:	84 83       	std	Z+4, r24	; 0x04
     f8e:	95 83       	std	Z+5, r25	; 0x05
     f90:	a6 83       	std	Z+6, r26	; 0x06
     f92:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     f94:	ff ef       	ldi	r31, 0xFF	; 255
     f96:	8f 1a       	sub	r8, r31
     f98:	9f 0a       	sbc	r9, r31
     f9a:	88 e0       	ldi	r24, 0x08	; 8
     f9c:	48 0e       	add	r4, r24
     f9e:	51 1c       	adc	r5, r1
     fa0:	e4 e0       	ldi	r30, 0x04	; 4
     fa2:	8e 16       	cp	r8, r30
     fa4:	91 04       	cpc	r9, r1
     fa6:	09 f0       	breq	.+2      	; 0xfaa <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
     fa8:	9f cf       	rjmp	.-194    	; 0xee8 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     faa:	8b 89       	ldd	r24, Y+19	; 0x13
     fac:	9c 89       	ldd	r25, Y+20	; 0x14
     fae:	64 96       	adiw	r28, 0x14	; 20
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	cf 90       	pop	r12
     fca:	bf 90       	pop	r11
     fcc:	af 90       	pop	r10
     fce:	9f 90       	pop	r9
     fd0:	8f 90       	pop	r8
     fd2:	7f 90       	pop	r7
     fd4:	6f 90       	pop	r6
     fd6:	5f 90       	pop	r5
     fd8:	4f 90       	pop	r4
     fda:	3f 90       	pop	r3
     fdc:	2f 90       	pop	r2
     fde:	08 95       	ret

00000fe0 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	a4 97       	sbiw	r28, 0x24	; 36
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	7c 01       	movw	r14, r24
    1006:	5b 01       	movw	r10, r22
    1008:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
    100a:	00 e0       	ldi	r16, 0x00	; 0
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	98 01       	movw	r18, r16
    1010:	b9 01       	movw	r22, r18
    1012:	a8 01       	movw	r20, r16
    1014:	ce 01       	movw	r24, r28
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    101c:	00 e0       	ldi	r16, 0x00	; 0
    101e:	10 e0       	ldi	r17, 0x00	; 0
    1020:	98 01       	movw	r18, r16
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	60 e8       	ldi	r22, 0x80	; 128
    1028:	7f e3       	ldi	r23, 0x3F	; 63
    102a:	ce 01       	movw	r24, r28
    102c:	09 96       	adiw	r24, 0x09	; 9
    102e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	10 e0       	ldi	r17, 0x00	; 0
    1036:	98 01       	movw	r18, r16
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	60 e8       	ldi	r22, 0x80	; 128
    103e:	7f e3       	ldi	r23, 0x3F	; 63
    1040:	ce 01       	movw	r24, r28
    1042:	41 96       	adiw	r24, 0x11	; 17
    1044:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1048:	00 e0       	ldi	r16, 0x00	; 0
    104a:	10 e0       	ldi	r17, 0x00	; 0
    104c:	98 01       	movw	r18, r16
    104e:	b9 01       	movw	r22, r18
    1050:	a8 01       	movw	r20, r16
    1052:	ce 01       	movw	r24, r28
    1054:	49 96       	adiw	r24, 0x19	; 25
    1056:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    105a:	bc a2       	std	Y+36, r11	; 0x24
    105c:	ab a2       	std	Y+35, r10	; 0x23
    105e:	da a2       	std	Y+34, r13	; 0x22
    1060:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix),1);
    1062:	9e 01       	movw	r18, r28
    1064:	2f 5d       	subi	r18, 0xDF	; 223
    1066:	3f 4f       	sbci	r19, 0xFF	; 255
    1068:	ae 01       	movw	r20, r28
    106a:	4d 5d       	subi	r20, 0xDD	; 221
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	c7 01       	movw	r24, r14
    1074:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8ampl2vecEiPiS0_>
    1078:	ae 01       	movw	r20, r28
    107a:	4f 5f       	subi	r20, 0xFF	; 255
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	bc 01       	movw	r22, r24
    1080:	c7 01       	movw	r24, r14
    1082:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	bc 01       	movw	r22, r24
    108c:	c7 01       	movw	r24, r14
    108e:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN5Gates8vec2amplEP7Complexi>
}
    1092:	a4 96       	adiw	r28, 0x24	; 36
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	08 95       	ret

000010b4 <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	a4 97       	sbiw	r28, 0x24	; 36
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	7c 01       	movw	r14, r24
    10da:	5b 01       	movw	r10, r22
    10dc:	6a 01       	movw	r12, r20
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
    10de:	00 e0       	ldi	r16, 0x00	; 0
    10e0:	10 e0       	ldi	r17, 0x00	; 0
    10e2:	98 01       	movw	r18, r16
    10e4:	b9 01       	movw	r22, r18
    10e6:	a8 01       	movw	r20, r16
    10e8:	ce 01       	movw	r24, r28
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    10f0:	00 e0       	ldi	r16, 0x00	; 0
    10f2:	10 e0       	ldi	r17, 0x00	; 0
    10f4:	20 e8       	ldi	r18, 0x80	; 128
    10f6:	3f eb       	ldi	r19, 0xBF	; 191
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	ba 01       	movw	r22, r20
    10fe:	ce 01       	movw	r24, r28
    1100:	09 96       	adiw	r24, 0x09	; 9
    1102:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1106:	00 e0       	ldi	r16, 0x00	; 0
    1108:	10 e0       	ldi	r17, 0x00	; 0
    110a:	20 e8       	ldi	r18, 0x80	; 128
    110c:	3f e3       	ldi	r19, 0x3F	; 63
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	ba 01       	movw	r22, r20
    1114:	ce 01       	movw	r24, r28
    1116:	41 96       	adiw	r24, 0x11	; 17
    1118:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    111c:	00 e0       	ldi	r16, 0x00	; 0
    111e:	10 e0       	ldi	r17, 0x00	; 0
    1120:	98 01       	movw	r18, r16
    1122:	b9 01       	movw	r22, r18
    1124:	a8 01       	movw	r20, r16
    1126:	ce 01       	movw	r24, r28
    1128:	49 96       	adiw	r24, 0x19	; 25
    112a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    112e:	bc a2       	std	Y+36, r11	; 0x24
    1130:	ab a2       	std	Y+35, r10	; 0x23
    1132:	da a2       	std	Y+34, r13	; 0x22
    1134:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),y_matrix),1);
    1136:	9e 01       	movw	r18, r28
    1138:	2f 5d       	subi	r18, 0xDF	; 223
    113a:	3f 4f       	sbci	r19, 0xFF	; 255
    113c:	ae 01       	movw	r20, r28
    113e:	4d 5d       	subi	r20, 0xDD	; 221
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	c7 01       	movw	r24, r14
    1148:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8ampl2vecEiPiS0_>
    114c:	ae 01       	movw	r20, r28
    114e:	4f 5f       	subi	r20, 0xFF	; 255
    1150:	5f 4f       	sbci	r21, 0xFF	; 255
    1152:	bc 01       	movw	r22, r24
    1154:	c7 01       	movw	r24, r14
    1156:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	bc 01       	movw	r22, r24
    1160:	c7 01       	movw	r24, r14
    1162:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN5Gates8vec2amplEP7Complexi>
}
    1166:	a4 96       	adiw	r28, 0x24	; 36
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	df 90       	pop	r13
    1180:	cf 90       	pop	r12
    1182:	bf 90       	pop	r11
    1184:	af 90       	pop	r10
    1186:	08 95       	ret

00001188 <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
    1188:	af 92       	push	r10
    118a:	bf 92       	push	r11
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	a4 97       	sbiw	r28, 0x24	; 36
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	7c 01       	movw	r14, r24
    11ae:	5b 01       	movw	r10, r22
    11b0:	6a 01       	movw	r12, r20
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
    11b2:	00 e0       	ldi	r16, 0x00	; 0
    11b4:	10 e0       	ldi	r17, 0x00	; 0
    11b6:	98 01       	movw	r18, r16
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	60 e8       	ldi	r22, 0x80	; 128
    11be:	7f e3       	ldi	r23, 0x3F	; 63
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    11c8:	00 e0       	ldi	r16, 0x00	; 0
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	98 01       	movw	r18, r16
    11ce:	b9 01       	movw	r22, r18
    11d0:	a8 01       	movw	r20, r16
    11d2:	ce 01       	movw	r24, r28
    11d4:	09 96       	adiw	r24, 0x09	; 9
    11d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	98 01       	movw	r18, r16
    11e0:	b9 01       	movw	r22, r18
    11e2:	a8 01       	movw	r20, r16
    11e4:	ce 01       	movw	r24, r28
    11e6:	41 96       	adiw	r24, 0x11	; 17
    11e8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    11ec:	00 e0       	ldi	r16, 0x00	; 0
    11ee:	10 e0       	ldi	r17, 0x00	; 0
    11f0:	98 01       	movw	r18, r16
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	60 e8       	ldi	r22, 0x80	; 128
    11f8:	7f eb       	ldi	r23, 0xBF	; 191
    11fa:	ce 01       	movw	r24, r28
    11fc:	49 96       	adiw	r24, 0x19	; 25
    11fe:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    1202:	bc a2       	std	Y+36, r11	; 0x24
    1204:	ab a2       	std	Y+35, r10	; 0x23
    1206:	da a2       	std	Y+34, r13	; 0x22
    1208:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),z_matrix),1);
    120a:	9e 01       	movw	r18, r28
    120c:	2f 5d       	subi	r18, 0xDF	; 223
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	ae 01       	movw	r20, r28
    1212:	4d 5d       	subi	r20, 0xDD	; 221
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	c7 01       	movw	r24, r14
    121c:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8ampl2vecEiPiS0_>
    1220:	ae 01       	movw	r20, r28
    1222:	4f 5f       	subi	r20, 0xFF	; 255
    1224:	5f 4f       	sbci	r21, 0xFF	; 255
    1226:	bc 01       	movw	r22, r24
    1228:	c7 01       	movw	r24, r14
    122a:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	bc 01       	movw	r22, r24
    1234:	c7 01       	movw	r24, r14
    1236:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN5Gates8vec2amplEP7Complexi>
}
    123a:	a4 96       	adiw	r28, 0x24	; 36
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	08 95       	ret

0000125c <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    125c:	af 92       	push	r10
    125e:	bf 92       	push	r11
    1260:	cf 92       	push	r12
    1262:	df 92       	push	r13
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	a4 97       	sbiw	r28, 0x24	; 36
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	7c 01       	movw	r14, r24
    1282:	5b 01       	movw	r10, r22
    1284:	6a 01       	movw	r12, r20
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    1286:	00 e0       	ldi	r16, 0x00	; 0
    1288:	10 e0       	ldi	r17, 0x00	; 0
    128a:	98 01       	movw	r18, r16
    128c:	43 ef       	ldi	r20, 0xF3	; 243
    128e:	54 e0       	ldi	r21, 0x04	; 4
    1290:	65 e3       	ldi	r22, 0x35	; 53
    1292:	7f e3       	ldi	r23, 0x3F	; 63
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    129c:	00 e0       	ldi	r16, 0x00	; 0
    129e:	10 e0       	ldi	r17, 0x00	; 0
    12a0:	98 01       	movw	r18, r16
    12a2:	43 ef       	ldi	r20, 0xF3	; 243
    12a4:	54 e0       	ldi	r21, 0x04	; 4
    12a6:	65 e3       	ldi	r22, 0x35	; 53
    12a8:	7f e3       	ldi	r23, 0x3F	; 63
    12aa:	ce 01       	movw	r24, r28
    12ac:	09 96       	adiw	r24, 0x09	; 9
    12ae:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    12b2:	00 e0       	ldi	r16, 0x00	; 0
    12b4:	10 e0       	ldi	r17, 0x00	; 0
    12b6:	98 01       	movw	r18, r16
    12b8:	43 ef       	ldi	r20, 0xF3	; 243
    12ba:	54 e0       	ldi	r21, 0x04	; 4
    12bc:	65 e3       	ldi	r22, 0x35	; 53
    12be:	7f e3       	ldi	r23, 0x3F	; 63
    12c0:	ce 01       	movw	r24, r28
    12c2:	41 96       	adiw	r24, 0x11	; 17
    12c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    12c8:	00 e0       	ldi	r16, 0x00	; 0
    12ca:	10 e0       	ldi	r17, 0x00	; 0
    12cc:	98 01       	movw	r18, r16
    12ce:	43 ef       	ldi	r20, 0xF3	; 243
    12d0:	54 e0       	ldi	r21, 0x04	; 4
    12d2:	65 e3       	ldi	r22, 0x35	; 53
    12d4:	7f eb       	ldi	r23, 0xBF	; 191
    12d6:	ce 01       	movw	r24, r28
    12d8:	49 96       	adiw	r24, 0x19	; 25
    12da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    12de:	bc a2       	std	Y+36, r11	; 0x24
    12e0:	ab a2       	std	Y+35, r10	; 0x23
    12e2:	da a2       	std	Y+34, r13	; 0x22
    12e4:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),h_matrix),1);
    12e6:	9e 01       	movw	r18, r28
    12e8:	2f 5d       	subi	r18, 0xDF	; 223
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
    12ec:	ae 01       	movw	r20, r28
    12ee:	4d 5d       	subi	r20, 0xDD	; 221
    12f0:	5f 4f       	sbci	r21, 0xFF	; 255
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	c7 01       	movw	r24, r14
    12f8:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8ampl2vecEiPiS0_>
    12fc:	ae 01       	movw	r20, r28
    12fe:	4f 5f       	subi	r20, 0xFF	; 255
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    1302:	bc 01       	movw	r22, r24
    1304:	c7 01       	movw	r24, r14
    1306:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	bc 01       	movw	r22, r24
    1310:	c7 01       	movw	r24, r14
    1312:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN5Gates8vec2amplEP7Complexi>
}
    1316:	a4 96       	adiw	r28, 0x24	; 36
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	bf 90       	pop	r11
    1334:	af 90       	pop	r10
    1336:	08 95       	ret

00001338 <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    1338:	af 92       	push	r10
    133a:	bf 92       	push	r11
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	a4 97       	sbiw	r28, 0x24	; 36
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	7c 01       	movw	r14, r24
    135e:	5b 01       	movw	r10, r22
    1360:	6a 01       	movw	r12, r20
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
    1362:	00 e0       	ldi	r16, 0x00	; 0
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	98 01       	movw	r18, r16
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	60 e8       	ldi	r22, 0x80	; 128
    136e:	7f e3       	ldi	r23, 0x3F	; 63
    1370:	ce 01       	movw	r24, r28
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1378:	00 e0       	ldi	r16, 0x00	; 0
    137a:	10 e0       	ldi	r17, 0x00	; 0
    137c:	98 01       	movw	r18, r16
    137e:	b9 01       	movw	r22, r18
    1380:	a8 01       	movw	r20, r16
    1382:	ce 01       	movw	r24, r28
    1384:	09 96       	adiw	r24, 0x09	; 9
    1386:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    138a:	00 e0       	ldi	r16, 0x00	; 0
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	98 01       	movw	r18, r16
    1390:	b9 01       	movw	r22, r18
    1392:	a8 01       	movw	r20, r16
    1394:	ce 01       	movw	r24, r28
    1396:	41 96       	adiw	r24, 0x11	; 17
    1398:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    139c:	00 e0       	ldi	r16, 0x00	; 0
    139e:	10 e0       	ldi	r17, 0x00	; 0
    13a0:	20 e8       	ldi	r18, 0x80	; 128
    13a2:	3f e3       	ldi	r19, 0x3F	; 63
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	ba 01       	movw	r22, r20
    13aa:	ce 01       	movw	r24, r28
    13ac:	49 96       	adiw	r24, 0x19	; 25
    13ae:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    13b2:	bc a2       	std	Y+36, r11	; 0x24
    13b4:	ab a2       	std	Y+35, r10	; 0x23
    13b6:	da a2       	std	Y+34, r13	; 0x22
    13b8:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),s_matrix),1);
    13ba:	9e 01       	movw	r18, r28
    13bc:	2f 5d       	subi	r18, 0xDF	; 223
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	ae 01       	movw	r20, r28
    13c2:	4d 5d       	subi	r20, 0xDD	; 221
    13c4:	5f 4f       	sbci	r21, 0xFF	; 255
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	c7 01       	movw	r24, r14
    13cc:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8ampl2vecEiPiS0_>
    13d0:	ae 01       	movw	r20, r28
    13d2:	4f 5f       	subi	r20, 0xFF	; 255
    13d4:	5f 4f       	sbci	r21, 0xFF	; 255
    13d6:	bc 01       	movw	r22, r24
    13d8:	c7 01       	movw	r24, r14
    13da:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	bc 01       	movw	r22, r24
    13e4:	c7 01       	movw	r24, r14
    13e6:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN5Gates8vec2amplEP7Complexi>
}
    13ea:	a4 96       	adiw	r28, 0x24	; 36
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	df 90       	pop	r13
    1404:	cf 90       	pop	r12
    1406:	bf 90       	pop	r11
    1408:	af 90       	pop	r10
    140a:	08 95       	ret

0000140c <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    140c:	af 92       	push	r10
    140e:	bf 92       	push	r11
    1410:	cf 92       	push	r12
    1412:	df 92       	push	r13
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	a4 97       	sbiw	r28, 0x24	; 36
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	7c 01       	movw	r14, r24
    1432:	5b 01       	movw	r10, r22
    1434:	6a 01       	movw	r12, r20
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    1436:	00 e0       	ldi	r16, 0x00	; 0
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	98 01       	movw	r18, r16
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	60 e8       	ldi	r22, 0x80	; 128
    1442:	7f e3       	ldi	r23, 0x3F	; 63
    1444:	ce 01       	movw	r24, r28
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    144c:	00 e0       	ldi	r16, 0x00	; 0
    144e:	10 e0       	ldi	r17, 0x00	; 0
    1450:	98 01       	movw	r18, r16
    1452:	b9 01       	movw	r22, r18
    1454:	a8 01       	movw	r20, r16
    1456:	ce 01       	movw	r24, r28
    1458:	09 96       	adiw	r24, 0x09	; 9
    145a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    145e:	00 e0       	ldi	r16, 0x00	; 0
    1460:	10 e0       	ldi	r17, 0x00	; 0
    1462:	98 01       	movw	r18, r16
    1464:	b9 01       	movw	r22, r18
    1466:	a8 01       	movw	r20, r16
    1468:	ce 01       	movw	r24, r28
    146a:	41 96       	adiw	r24, 0x11	; 17
    146c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1470:	03 ef       	ldi	r16, 0xF3	; 243
    1472:	14 e0       	ldi	r17, 0x04	; 4
    1474:	25 e3       	ldi	r18, 0x35	; 53
    1476:	3f e3       	ldi	r19, 0x3F	; 63
    1478:	b9 01       	movw	r22, r18
    147a:	a8 01       	movw	r20, r16
    147c:	ce 01       	movw	r24, r28
    147e:	49 96       	adiw	r24, 0x19	; 25
    1480:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    1484:	bc a2       	std	Y+36, r11	; 0x24
    1486:	ab a2       	std	Y+35, r10	; 0x23
    1488:	da a2       	std	Y+34, r13	; 0x22
    148a:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),t_matrix),1);
    148c:	9e 01       	movw	r18, r28
    148e:	2f 5d       	subi	r18, 0xDF	; 223
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	ae 01       	movw	r20, r28
    1494:	4d 5d       	subi	r20, 0xDD	; 221
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	61 e0       	ldi	r22, 0x01	; 1
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	c7 01       	movw	r24, r14
    149e:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8ampl2vecEiPiS0_>
    14a2:	ae 01       	movw	r20, r28
    14a4:	4f 5f       	subi	r20, 0xFF	; 255
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
    14a8:	bc 01       	movw	r22, r24
    14aa:	c7 01       	movw	r24, r14
    14ac:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	bc 01       	movw	r22, r24
    14b6:	c7 01       	movw	r24, r14
    14b8:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN5Gates8vec2amplEP7Complexi>
}
    14bc:	a4 96       	adiw	r28, 0x24	; 36
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	bf 90       	pop	r11
    14da:	af 90       	pop	r10
    14dc:	08 95       	ret

000014de <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    14de:	6f 92       	push	r6
    14e0:	7f 92       	push	r7
    14e2:	8f 92       	push	r8
    14e4:	9f 92       	push	r9
    14e6:	af 92       	push	r10
    14e8:	bf 92       	push	r11
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	c8 58       	subi	r28, 0x88	; 136
    1500:	d1 09       	sbc	r29, r1
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	7c 01       	movw	r14, r24
    150e:	3b 01       	movw	r6, r22
    1510:	5a 01       	movw	r10, r20
    1512:	49 01       	movw	r8, r18
    1514:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1516:	00 e0       	ldi	r16, 0x00	; 0
    1518:	10 e0       	ldi	r17, 0x00	; 0
    151a:	98 01       	movw	r18, r16
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	60 e8       	ldi	r22, 0x80	; 128
    1522:	7f e3       	ldi	r23, 0x3F	; 63
    1524:	ce 01       	movw	r24, r28
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    152c:	00 e0       	ldi	r16, 0x00	; 0
    152e:	10 e0       	ldi	r17, 0x00	; 0
    1530:	98 01       	movw	r18, r16
    1532:	b9 01       	movw	r22, r18
    1534:	a8 01       	movw	r20, r16
    1536:	ce 01       	movw	r24, r28
    1538:	09 96       	adiw	r24, 0x09	; 9
    153a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	10 e0       	ldi	r17, 0x00	; 0
    1542:	98 01       	movw	r18, r16
    1544:	b9 01       	movw	r22, r18
    1546:	a8 01       	movw	r20, r16
    1548:	ce 01       	movw	r24, r28
    154a:	41 96       	adiw	r24, 0x11	; 17
    154c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1550:	00 e0       	ldi	r16, 0x00	; 0
    1552:	10 e0       	ldi	r17, 0x00	; 0
    1554:	98 01       	movw	r18, r16
    1556:	b9 01       	movw	r22, r18
    1558:	a8 01       	movw	r20, r16
    155a:	ce 01       	movw	r24, r28
    155c:	49 96       	adiw	r24, 0x19	; 25
    155e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1562:	00 e0       	ldi	r16, 0x00	; 0
    1564:	10 e0       	ldi	r17, 0x00	; 0
    1566:	98 01       	movw	r18, r16
    1568:	b9 01       	movw	r22, r18
    156a:	a8 01       	movw	r20, r16
    156c:	ce 01       	movw	r24, r28
    156e:	81 96       	adiw	r24, 0x21	; 33
    1570:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1574:	00 e0       	ldi	r16, 0x00	; 0
    1576:	10 e0       	ldi	r17, 0x00	; 0
    1578:	98 01       	movw	r18, r16
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	60 e8       	ldi	r22, 0x80	; 128
    1580:	7f e3       	ldi	r23, 0x3F	; 63
    1582:	ce 01       	movw	r24, r28
    1584:	89 96       	adiw	r24, 0x29	; 41
    1586:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    158a:	00 e0       	ldi	r16, 0x00	; 0
    158c:	10 e0       	ldi	r17, 0x00	; 0
    158e:	98 01       	movw	r18, r16
    1590:	b9 01       	movw	r22, r18
    1592:	a8 01       	movw	r20, r16
    1594:	ce 01       	movw	r24, r28
    1596:	c1 96       	adiw	r24, 0x31	; 49
    1598:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    159c:	00 e0       	ldi	r16, 0x00	; 0
    159e:	10 e0       	ldi	r17, 0x00	; 0
    15a0:	98 01       	movw	r18, r16
    15a2:	b9 01       	movw	r22, r18
    15a4:	a8 01       	movw	r20, r16
    15a6:	ce 01       	movw	r24, r28
    15a8:	c9 96       	adiw	r24, 0x39	; 57
    15aa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15ae:	00 e0       	ldi	r16, 0x00	; 0
    15b0:	10 e0       	ldi	r17, 0x00	; 0
    15b2:	98 01       	movw	r18, r16
    15b4:	b9 01       	movw	r22, r18
    15b6:	a8 01       	movw	r20, r16
    15b8:	ce 01       	movw	r24, r28
    15ba:	8f 5b       	subi	r24, 0xBF	; 191
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15c2:	00 e0       	ldi	r16, 0x00	; 0
    15c4:	10 e0       	ldi	r17, 0x00	; 0
    15c6:	98 01       	movw	r18, r16
    15c8:	b9 01       	movw	r22, r18
    15ca:	a8 01       	movw	r20, r16
    15cc:	ce 01       	movw	r24, r28
    15ce:	87 5b       	subi	r24, 0xB7	; 183
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15d6:	00 e0       	ldi	r16, 0x00	; 0
    15d8:	10 e0       	ldi	r17, 0x00	; 0
    15da:	98 01       	movw	r18, r16
    15dc:	b9 01       	movw	r22, r18
    15de:	a8 01       	movw	r20, r16
    15e0:	ce 01       	movw	r24, r28
    15e2:	8f 5a       	subi	r24, 0xAF	; 175
    15e4:	9f 4f       	sbci	r25, 0xFF	; 255
    15e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    15ea:	00 e0       	ldi	r16, 0x00	; 0
    15ec:	10 e0       	ldi	r17, 0x00	; 0
    15ee:	98 01       	movw	r18, r16
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	60 e8       	ldi	r22, 0x80	; 128
    15f6:	7f e3       	ldi	r23, 0x3F	; 63
    15f8:	ce 01       	movw	r24, r28
    15fa:	87 5a       	subi	r24, 0xA7	; 167
    15fc:	9f 4f       	sbci	r25, 0xFF	; 255
    15fe:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1602:	00 e0       	ldi	r16, 0x00	; 0
    1604:	10 e0       	ldi	r17, 0x00	; 0
    1606:	98 01       	movw	r18, r16
    1608:	b9 01       	movw	r22, r18
    160a:	a8 01       	movw	r20, r16
    160c:	ce 01       	movw	r24, r28
    160e:	8f 59       	subi	r24, 0x9F	; 159
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1616:	00 e0       	ldi	r16, 0x00	; 0
    1618:	10 e0       	ldi	r17, 0x00	; 0
    161a:	98 01       	movw	r18, r16
    161c:	b9 01       	movw	r22, r18
    161e:	a8 01       	movw	r20, r16
    1620:	ce 01       	movw	r24, r28
    1622:	87 59       	subi	r24, 0x97	; 151
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    162a:	00 e0       	ldi	r16, 0x00	; 0
    162c:	10 e0       	ldi	r17, 0x00	; 0
    162e:	98 01       	movw	r18, r16
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	60 e8       	ldi	r22, 0x80	; 128
    1636:	7f e3       	ldi	r23, 0x3F	; 63
    1638:	ce 01       	movw	r24, r28
    163a:	8f 58       	subi	r24, 0x8F	; 143
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
    1642:	00 e0       	ldi	r16, 0x00	; 0
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	98 01       	movw	r18, r16
    1648:	b9 01       	movw	r22, r18
    164a:	a8 01       	movw	r20, r16
    164c:	ce 01       	movw	r24, r28
    164e:	87 58       	subi	r24, 0x87	; 135
    1650:	9f 4f       	sbci	r25, 0xFF	; 255
    1652:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
    1656:	cb 57       	subi	r28, 0x7B	; 123
    1658:	df 4f       	sbci	r29, 0xFF	; 255
    165a:	79 82       	std	Y+1, r7	; 0x01
    165c:	68 82       	st	Y, r6
    165e:	c5 58       	subi	r28, 0x85	; 133
    1660:	d0 40       	sbci	r29, 0x00	; 0
    1662:	c9 57       	subi	r28, 0x79	; 121
    1664:	df 4f       	sbci	r29, 0xFF	; 255
    1666:	99 82       	std	Y+1, r9	; 0x01
    1668:	88 82       	st	Y, r8
    166a:	c7 58       	subi	r28, 0x87	; 135
    166c:	d0 40       	sbci	r29, 0x00	; 0
    166e:	cf 57       	subi	r28, 0x7F	; 127
    1670:	df 4f       	sbci	r29, 0xFF	; 255
    1672:	b9 82       	std	Y+1, r11	; 0x01
    1674:	a8 82       	st	Y, r10
    1676:	c1 58       	subi	r28, 0x81	; 129
    1678:	d0 40       	sbci	r29, 0x00	; 0
    167a:	cd 57       	subi	r28, 0x7D	; 125
    167c:	df 4f       	sbci	r29, 0xFF	; 255
    167e:	d9 82       	std	Y+1, r13	; 0x01
    1680:	c8 82       	st	Y, r12
    1682:	c3 58       	subi	r28, 0x83	; 131
    1684:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix),2);
    1686:	9e 01       	movw	r18, r28
    1688:	2f 57       	subi	r18, 0x7F	; 127
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	ae 01       	movw	r20, r28
    168e:	4b 57       	subi	r20, 0x7B	; 123
    1690:	5f 4f       	sbci	r21, 0xFF	; 255
    1692:	62 e0       	ldi	r22, 0x02	; 2
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	c7 01       	movw	r24, r14
    1698:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN5Gates8ampl2vecEiPiS0_>
    169c:	ae 01       	movw	r20, r28
    169e:	4f 5f       	subi	r20, 0xFF	; 255
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255
    16a2:	bc 01       	movw	r22, r24
    16a4:	c7 01       	movw	r24, r14
    16a6:	0e 94 49 07 	call	0xe92	; 0xe92 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    16aa:	42 e0       	ldi	r20, 0x02	; 2
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	bc 01       	movw	r22, r24
    16b0:	c7 01       	movw	r24, r14
    16b2:	0e 94 2b 06 	call	0xc56	; 0xc56 <_ZN5Gates8vec2amplEP7Complexi>
}
    16b6:	c8 57       	subi	r28, 0x78	; 120
    16b8:	df 4f       	sbci	r29, 0xFF	; 255
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	bf 90       	pop	r11
    16d6:	af 90       	pop	r10
    16d8:	9f 90       	pop	r9
    16da:	8f 90       	pop	r8
    16dc:	7f 90       	pop	r7
    16de:	6f 90       	pop	r6
    16e0:	08 95       	ret

000016e2 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}

Serial s;
    16e2:	85 ef       	ldi	r24, 0xF5	; 245
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN6SerialC1Ev>
    16ea:	08 95       	ret

000016ec <main>:
#include "qepu.h"
int main(void){
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <main+0x6>
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <main+0x8>
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <main+0xa>
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    16fa:	ce 01       	movw	r24, r28
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN4QEPUC1Ev>
	qepu.run();
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN4QEPU3runEv>
    170a:	ff cf       	rjmp	.-2      	; 0x170a <main+0x1e>

0000170c <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	ec 01       	movw	r28, r24
    1712:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN6EEPromC1Ev>
    1716:	ce 01       	movw	r24, r28
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN6SerialC1Ev>
    171e:	ce 01       	movw	r24, r28
    1720:	05 96       	adiw	r24, 0x05	; 5
    1722:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN5GatesC1Ev>
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	8a bb       	out	0x1a, r24	; 26
    172a:	1c 82       	std	Y+4, r1	; 0x04
    172c:	1b 82       	std	Y+3, r1	; 0x03
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    1734:	7b b3       	in	r23, 0x1b	; 27
    1736:	21 e0       	ldi	r18, 0x01	; 1
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	c9 01       	movw	r24, r18
    173c:	06 2e       	mov	r0, r22
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <_ZN4QEPU10setctrlpinEii+0x10>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <_ZN4QEPU10setctrlpinEii+0xc>
    1748:	80 95       	com	r24
    174a:	87 23       	and	r24, r23
    174c:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    174e:	8b b3       	in	r24, 0x1b	; 27
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <_ZN4QEPU10setctrlpinEii+0x22>
    1752:	44 0f       	add	r20, r20
    1754:	55 1f       	adc	r21, r21
    1756:	6a 95       	dec	r22
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <_ZN4QEPU10setctrlpinEii+0x1e>
    175a:	48 2b       	or	r20, r24
    175c:	4b bb       	out	0x1b, r20	; 27
    175e:	08 95       	ret

00001760 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    176a:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    176c:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    176e:	64 e0       	ldi	r22, 0x04	; 4
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	ce 01       	movw	r24, r28
    1774:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	66 e0       	ldi	r22, 0x06	; 6
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	ce 01       	movw	r24, r28
    1782:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	66 e0       	ldi	r22, 0x06	; 6
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    1794:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	ec 01       	movw	r28, r24
    17a6:	8a 01       	movw	r16, r20
	DDRB=0x00;
    17a8:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    17aa:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    17ac:	41 e0       	ldi	r20, 0x01	; 1
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	65 e0       	ldi	r22, 0x05	; 5
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    17b8:	a8 01       	movw	r20, r16
    17ba:	64 e0       	ldi	r22, 0x04	; 4
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	ce 01       	movw	r24, r28
    17c0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    17c4:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    17c6:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    17c8:	9f ef       	ldi	r25, 0xFF	; 255
    17ca:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	08 95       	ret

000017d8 <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    17d8:	6f 92       	push	r6
    17da:	7f 92       	push	r7
    17dc:	8f 92       	push	r8
    17de:	9f 92       	push	r9
    17e0:	af 92       	push	r10
    17e2:	bf 92       	push	r11
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	6c 01       	movw	r12, r24
	serial.writestrln("");
    17f6:	8c 01       	movw	r16, r24
    17f8:	0f 5f       	subi	r16, 0xFF	; 255
    17fa:	1f 4f       	sbci	r17, 0xFF	; 255
    17fc:	64 ee       	ldi	r22, 0xE4	; 228
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	c8 01       	movw	r24, r16
    1802:	0e 94 2a 10 	call	0x2054	; 0x2054 <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    1806:	6b eb       	ldi	r22, 0xBB	; 187
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	c8 01       	movw	r24, r16
    180c:	0e 94 2a 10 	call	0x2054	; 0x2054 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    1810:	c0 e0       	ldi	r28, 0x00	; 0
    1812:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    1814:	0f 2e       	mov	r0, r31
    1816:	f5 ed       	ldi	r31, 0xD5	; 213
    1818:	ef 2e       	mov	r14, r31
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	ff 2e       	mov	r15, r31
    181e:	f0 2d       	mov	r31, r0
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
    1828:	88 2e       	mov	r8, r24
    182a:	99 2e       	mov	r9, r25
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	be 01       	movw	r22, r28
    1832:	c6 01       	movw	r24, r12
    1834:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1838:	9f 93       	push	r25
    183a:	8f 93       	push	r24
    183c:	ff 92       	push	r15
    183e:	ef 92       	push	r14
    1840:	9f 92       	push	r9
    1842:	8f 92       	push	r8
    1844:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
    1850:	a8 2e       	mov	r10, r24
    1852:	b9 2e       	mov	r11, r25
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	be 01       	movw	r22, r28
    185a:	c6 01       	movw	r24, r12
    185c:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1860:	9f 93       	push	r25
    1862:	8f 93       	push	r24
    1864:	ff 92       	push	r15
    1866:	ef 92       	push	r14
    1868:	bf 92       	push	r11
    186a:	af 92       	push	r10
    186c:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
    1878:	68 2e       	mov	r6, r24
    187a:	79 2e       	mov	r7, r25
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	ff 92       	push	r15
    1882:	ef 92       	push	r14
    1884:	7f 92       	push	r7
    1886:	6f 92       	push	r6
    1888:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    188c:	68 ed       	ldi	r22, 0xD8	; 216
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	c8 01       	movw	r24, r16
    1892:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN6Serial8writestrEPc>
    1896:	66 2d       	mov	r22, r6
    1898:	77 2d       	mov	r23, r7
    189a:	c8 01       	movw	r24, r16
    189c:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN6Serial8writestrEPc>
    18a0:	6a ed       	ldi	r22, 0xDA	; 218
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	c8 01       	movw	r24, r16
    18a6:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    18aa:	68 2d       	mov	r22, r8
    18ac:	79 2d       	mov	r23, r9
    18ae:	c8 01       	movw	r24, r16
    18b0:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    18b4:	65 ee       	ldi	r22, 0xE5	; 229
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	c8 01       	movw	r24, r16
    18ba:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    18be:	6a 2d       	mov	r22, r10
    18c0:	7b 2d       	mov	r23, r11
    18c2:	c8 01       	movw	r24, r16
    18c4:	0e 94 2a 10 	call	0x2054	; 0x2054 <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    18c8:	21 96       	adiw	r28, 0x01	; 1
    18ca:	8d b7       	in	r24, 0x3d	; 61
    18cc:	9e b7       	in	r25, 0x3e	; 62
    18ce:	42 96       	adiw	r24, 0x12	; 18
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	9e bf       	out	0x3e, r25	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	8d bf       	out	0x3d, r24	; 61
    18da:	c4 30       	cpi	r28, 0x04	; 4
    18dc:	d1 05       	cpc	r29, r1
    18de:	09 f0       	breq	.+2      	; 0x18e2 <_ZN4QEPU7dumpmemEv+0x10a>
    18e0:	9f cf       	rjmp	.-194    	; 0x1820 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	9f 90       	pop	r9
    18f8:	8f 90       	pop	r8
    18fa:	7f 90       	pop	r7
    18fc:	6f 90       	pop	r6
    18fe:	08 95       	ret

00001900 <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    1900:	cf 92       	push	r12
    1902:	df 92       	push	r13
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	d6 2f       	mov	r29, r22
    1912:	c7 2f       	mov	r28, r23
    1914:	e6 2f       	mov	r30, r22
    1916:	f7 2f       	mov	r31, r23
	int c_length=0;
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    191c:	21 91       	ld	r18, Z+
    191e:	2f 3f       	cpi	r18, 0xFF	; 255
    1920:	89 f4       	brne	.+34     	; 0x1944 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1922:	df 01       	movw	r26, r30
    1924:	12 97       	sbiw	r26, 0x02	; 2
    1926:	4c 91       	ld	r20, X
    1928:	4f 3f       	cpi	r20, 0xFF	; 255
    192a:	61 f4       	brne	.+24     	; 0x1944 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    192c:	11 97       	sbiw	r26, 0x01	; 1
    192e:	4c 91       	ld	r20, X
    1930:	4f 3f       	cpi	r20, 0xFF	; 255
    1932:	41 f4       	brne	.+16     	; 0x1944 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1934:	11 97       	sbiw	r26, 0x01	; 1
    1936:	4c 91       	ld	r20, X
    1938:	4f 3f       	cpi	r20, 0xFF	; 255
    193a:	21 f4       	brne	.+8      	; 0x1944 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    193c:	11 97       	sbiw	r26, 0x01	; 1
    193e:	2c 91       	ld	r18, X
    1940:	2f 3f       	cpi	r18, 0xFF	; 255
    1942:	11 f0       	breq	.+4      	; 0x1948 <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	ea cf       	rjmp	.-44     	; 0x191c <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    1948:	8c 01       	movw	r16, r24
    194a:	04 50       	subi	r16, 0x04	; 4
    194c:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    194e:	6c 01       	movw	r12, r24
    1950:	2f ef       	ldi	r18, 0xFF	; 255
    1952:	c2 1a       	sub	r12, r18
    1954:	d2 0a       	sbc	r13, r18
    1956:	76 01       	movw	r14, r12
    1958:	ee 0c       	add	r14, r14
    195a:	ff 1c       	adc	r15, r15
    195c:	c7 01       	movw	r24, r14
    195e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    1962:	10 16       	cp	r1, r16
    1964:	11 06       	cpc	r1, r17
    1966:	74 f4       	brge	.+28     	; 0x1984 <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    1968:	dc 01       	movw	r26, r24
    196a:	ed 2f       	mov	r30, r29
    196c:	fc 2f       	mov	r31, r28
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	41 91       	ld	r20, Z+
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	4d 93       	st	X+, r20
    1978:	5d 93       	st	X+, r21
    197a:	2f 5f       	subi	r18, 0xFF	; 255
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	20 17       	cp	r18, r16
    1980:	31 07       	cpc	r19, r17
    1982:	bc f3       	brlt	.-18     	; 0x1972 <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    1984:	0c 15       	cp	r16, r12
    1986:	1d 05       	cpc	r17, r13
    1988:	7c f4       	brge	.+30     	; 0x19a8 <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    198a:	f7 01       	movw	r30, r14
    198c:	3a 97       	sbiw	r30, 0x0a	; 10
    198e:	e8 0f       	add	r30, r24
    1990:	f9 1f       	adc	r31, r25
    1992:	25 e0       	ldi	r18, 0x05	; 5
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	4f ef       	ldi	r20, 0xFF	; 255
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	41 93       	st	Z+, r20
    199c:	51 93       	st	Z+, r21
    199e:	21 50       	subi	r18, 0x01	; 1
    19a0:	31 09       	sbc	r19, r1
    19a2:	21 15       	cp	r18, r1
    19a4:	31 05       	cpc	r19, r1
    19a6:	c9 f7       	brne	.-14     	; 0x199a <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	08 95       	ret

000019ba <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	c4 56       	subi	r28, 0x64	; 100
    19c8:	d1 09       	sbc	r29, r1
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
	//char str[countdigits(dec)+1];
	char str[100];
	sprintf(str,"%d",dec);
    19d4:	7f 93       	push	r23
    19d6:	6f 93       	push	r22
    19d8:	85 ed       	ldi	r24, 0xD5	; 213
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9f 93       	push	r25
    19de:	8f 93       	push	r24
    19e0:	8e 01       	movw	r16, r28
    19e2:	0f 5f       	subi	r16, 0xFF	; 255
    19e4:	1f 4f       	sbci	r17, 0xFF	; 255
    19e6:	1f 93       	push	r17
    19e8:	0f 93       	push	r16
    19ea:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <sprintf>
	return str;
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
}
    19fa:	c8 01       	movw	r24, r16
    19fc:	cc 59       	subi	r28, 0x9C	; 156
    19fe:	df 4f       	sbci	r29, 0xFF	; 255
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	08 95       	ret

00001a14 <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    1a14:	61 15       	cp	r22, r1
    1a16:	71 05       	cpc	r23, r1
    1a18:	59 f0       	breq	.+22     	; 0x1a30 <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a1a:	8f e9       	ldi	r24, 0x9F	; 159
    1a1c:	9f e0       	ldi	r25, 0x0F	; 15
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <_ZN4QEPU5Utils5delayEi+0xa>
    1a22:	00 c0       	rjmp	.+0      	; 0x1a24 <_ZN4QEPU5Utils5delayEi+0x10>
    1a24:	00 00       	nop
    1a26:	61 50       	subi	r22, 0x01	; 1
    1a28:	71 09       	sbc	r23, r1
    1a2a:	61 15       	cp	r22, r1
    1a2c:	71 05       	cpc	r23, r1
    1a2e:	a9 f7       	brne	.-22     	; 0x1a1a <_ZN4QEPU5Utils5delayEi+0x6>
}
    1a30:	08 95       	ret

00001a32 <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    1a32:	2f 92       	push	r2
    1a34:	3f 92       	push	r3
    1a36:	4f 92       	push	r4
    1a38:	5f 92       	push	r5
    1a3a:	6f 92       	push	r6
    1a3c:	7f 92       	push	r7
    1a3e:	8f 92       	push	r8
    1a40:	9f 92       	push	r9
    1a42:	af 92       	push	r10
    1a44:	bf 92       	push	r11
    1a46:	cf 92       	push	r12
    1a48:	df 92       	push	r13
    1a4a:	ef 92       	push	r14
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	ec 01       	movw	r28, r24
    1a58:	1b 01       	movw	r2, r22
    1a5a:	29 01       	movw	r4, r18
    1a5c:	3a 01       	movw	r6, r20
    1a5e:	47 01       	movw	r8, r14
    1a60:	58 01       	movw	r10, r16
	int * newthephi=(int*)malloc(sizeof(int)*2);
    1a62:	84 e0       	ldi	r24, 0x04	; 4
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 ee 13 	call	0x27dc	; 0x27dc <malloc>
    1a6a:	6c 01       	movw	r12, r24
	
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    1a6c:	f1 01       	movw	r30, r2
    1a6e:	31 97       	sbiw	r30, 0x01	; 1
    1a70:	e6 31       	cpi	r30, 0x16	; 22
    1a72:	f1 05       	cpc	r31, r1
    1a74:	08 f0       	brcs	.+2      	; 0x1a78 <_ZN4QEPU7executeEill+0x46>
    1a76:	47 c1       	rjmp	.+654    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
    1a78:	e6 5d       	subi	r30, 0xD6	; 214
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	b7 01       	movw	r22, r14
    1a86:	ce 01       	movw	r24, r28
    1a88:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1a8c:	9c 01       	movw	r18, r24
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	b2 01       	movw	r22, r4
    1a94:	ce 01       	movw	r24, r28
    1a96:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	b7 01       	movw	r22, r14
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1aa6:	9c 01       	movw	r18, r24
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	b2 01       	movw	r22, r4
    1aae:	ce 01       	movw	r24, r28
    1ab0:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
		break;
    1ab4:	28 c1       	rjmp	.+592    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	48 1a       	sub	r4, r24
    1aba:	51 08       	sbc	r5, r1
    1abc:	5c 82       	std	Y+4, r5	; 0x04
    1abe:	4b 82       	std	Y+3, r4	; 0x03
		break;
    1ac0:	22 c1       	rjmp	.+580    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    1ac2:	b2 01       	movw	r22, r4
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	02 96       	adiw	r24, 0x02	; 2
    1ac8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_ZN4QEPU5Utils5delayEi>
    1acc:	1c c1       	rjmp	.+568    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    1ace:	97 01       	movw	r18, r14
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	b2 01       	movw	r22, r4
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
		break;
    1adc:	14 c1       	rjmp	.+552    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    1ade:	97 01       	movw	r18, r14
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	b2 01       	movw	r22, r4
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
		break;
    1aec:	0c c1       	rjmp	.+536    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	b2 01       	movw	r22, r4
    1af4:	ce 01       	movw	r24, r28
    1af6:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1afa:	8c 01       	movw	r16, r24
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	b2 01       	movw	r22, r4
    1b02:	ce 01       	movw	r24, r28
    1b04:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1b08:	a8 01       	movw	r20, r16
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	05 96       	adiw	r24, 0x05	; 5
    1b10:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <_ZN5Gates1XEii>
    1b14:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1b16:	fc 01       	movw	r30, r24
    1b18:	20 81       	ld	r18, Z
    1b1a:	31 81       	ldd	r19, Z+1	; 0x01
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	b2 01       	movw	r22, r4
    1b22:	ce 01       	movw	r24, r28
    1b24:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
    1b28:	f6 01       	movw	r30, r12
    1b2a:	22 81       	ldd	r18, Z+2	; 0x02
    1b2c:	33 81       	ldd	r19, Z+3	; 0x03
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	50 e0       	ldi	r21, 0x00	; 0
    1b32:	b2 01       	movw	r22, r4
    1b34:	ce 01       	movw	r24, r28
    1b36:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
		break;
    1b3a:	e5 c0       	rjmp	.+458    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    1b3c:	41 e0       	ldi	r20, 0x01	; 1
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	b2 01       	movw	r22, r4
    1b42:	ce 01       	movw	r24, r28
    1b44:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1b48:	8c 01       	movw	r16, r24
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	b2 01       	movw	r22, r4
    1b50:	ce 01       	movw	r24, r28
    1b52:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1b56:	a8 01       	movw	r20, r16
    1b58:	bc 01       	movw	r22, r24
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	05 96       	adiw	r24, 0x05	; 5
    1b5e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN5Gates1YEii>
    1b62:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1b64:	fc 01       	movw	r30, r24
    1b66:	20 81       	ld	r18, Z
    1b68:	31 81       	ldd	r19, Z+1	; 0x01
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	b2 01       	movw	r22, r4
    1b70:	ce 01       	movw	r24, r28
    1b72:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
    1b76:	f6 01       	movw	r30, r12
    1b78:	22 81       	ldd	r18, Z+2	; 0x02
    1b7a:	33 81       	ldd	r19, Z+3	; 0x03
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	b2 01       	movw	r22, r4
    1b82:	ce 01       	movw	r24, r28
    1b84:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
		break;
    1b88:	be c0       	rjmp	.+380    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	b2 01       	movw	r22, r4
    1b90:	ce 01       	movw	r24, r28
    1b92:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1b96:	8c 01       	movw	r16, r24
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	b2 01       	movw	r22, r4
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1ba4:	a8 01       	movw	r20, r16
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	ce 01       	movw	r24, r28
    1baa:	05 96       	adiw	r24, 0x05	; 5
    1bac:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN5Gates1ZEii>
    1bb0:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	20 81       	ld	r18, Z
    1bb6:	31 81       	ldd	r19, Z+1	; 0x01
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	b2 01       	movw	r22, r4
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
    1bc4:	f6 01       	movw	r30, r12
    1bc6:	22 81       	ldd	r18, Z+2	; 0x02
    1bc8:	33 81       	ldd	r19, Z+3	; 0x03
    1bca:	41 e0       	ldi	r20, 0x01	; 1
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	b2 01       	movw	r22, r4
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
		break;
    1bd6:	97 c0       	rjmp	.+302    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	b2 01       	movw	r22, r4
    1bde:	ce 01       	movw	r24, r28
    1be0:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1be4:	8c 01       	movw	r16, r24
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	b2 01       	movw	r22, r4
    1bec:	ce 01       	movw	r24, r28
    1bee:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1bf2:	a8 01       	movw	r20, r16
    1bf4:	bc 01       	movw	r22, r24
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	05 96       	adiw	r24, 0x05	; 5
    1bfa:	0e 94 2e 09 	call	0x125c	; 0x125c <_ZN5Gates1HEii>
    1bfe:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1c00:	fc 01       	movw	r30, r24
    1c02:	20 81       	ld	r18, Z
    1c04:	31 81       	ldd	r19, Z+1	; 0x01
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	b2 01       	movw	r22, r4
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
    1c12:	f6 01       	movw	r30, r12
    1c14:	22 81       	ldd	r18, Z+2	; 0x02
    1c16:	33 81       	ldd	r19, Z+3	; 0x03
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	b2 01       	movw	r22, r4
    1c1e:	ce 01       	movw	r24, r28
    1c20:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
		break;
    1c24:	70 c0       	rjmp	.+224    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	b2 01       	movw	r22, r4
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1c32:	8c 01       	movw	r16, r24
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	b2 01       	movw	r22, r4
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1c40:	a8 01       	movw	r20, r16
    1c42:	bc 01       	movw	r22, r24
    1c44:	ce 01       	movw	r24, r28
    1c46:	05 96       	adiw	r24, 0x05	; 5
    1c48:	0e 94 9c 09 	call	0x1338	; 0x1338 <_ZN5Gates1SEii>
    1c4c:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 81       	ld	r18, Z
    1c52:	31 81       	ldd	r19, Z+1	; 0x01
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	b2 01       	movw	r22, r4
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
    1c60:	f6 01       	movw	r30, r12
    1c62:	22 81       	ldd	r18, Z+2	; 0x02
    1c64:	33 81       	ldd	r19, Z+3	; 0x03
    1c66:	41 e0       	ldi	r20, 0x01	; 1
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	b2 01       	movw	r22, r4
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
		break;
    1c72:	49 c0       	rjmp	.+146    	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	b2 01       	movw	r22, r4
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1c80:	8c 01       	movw	r16, r24
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	b2 01       	movw	r22, r4
    1c88:	ce 01       	movw	r24, r28
    1c8a:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1c8e:	a8 01       	movw	r20, r16
    1c90:	bc 01       	movw	r22, r24
    1c92:	ce 01       	movw	r24, r28
    1c94:	05 96       	adiw	r24, 0x05	; 5
    1c96:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN5Gates1TEii>
    1c9a:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 81       	ld	r18, Z
    1ca0:	31 81       	ldd	r19, Z+1	; 0x01
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	b2 01       	movw	r22, r4
    1ca8:	ce 01       	movw	r24, r28
    1caa:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
    1cae:	f6 01       	movw	r30, r12
    1cb0:	22 81       	ldd	r18, Z+2	; 0x02
    1cb2:	33 81       	ldd	r19, Z+3	; 0x03
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	b2 01       	movw	r22, r4
    1cba:	ce 01       	movw	r24, r28
    1cbc:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN4QEPU5writeEiii>
		break;
    1cc0:	22 c0       	rjmp	.+68     	; 0x1d06 <_ZN4QEPU7executeEill+0x2d4>
		//2 QUBIT GATES -
		case 0x16: 
			gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	b7 01       	movw	r22, r14
    1cc8:	ce 01       	movw	r24, r28
    1cca:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1cce:	8c 01       	movw	r16, r24
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	b4 01       	movw	r22, r8
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1cdc:	5c 01       	movw	r10, r24
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	b2 01       	movw	r22, r4
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1cea:	7c 01       	movw	r14, r24
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	b2 01       	movw	r22, r4
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN4QEPU4readEii>
    1cf8:	95 01       	movw	r18, r10
    1cfa:	a7 01       	movw	r20, r14
    1cfc:	bc 01       	movw	r22, r24
    1cfe:	ce 01       	movw	r24, r28
    1d00:	05 96       	adiw	r24, 0x05	; 5
    1d02:	0e 94 6f 0a 	call	0x14de	; 0x14de <_ZN5Gates3CNOEiiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    1d06:	c6 01       	movw	r24, r12
    1d08:	0e 94 86 14 	call	0x290c	; 0x290c <free>
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	df 90       	pop	r13
    1d1a:	cf 90       	pop	r12
    1d1c:	bf 90       	pop	r11
    1d1e:	af 90       	pop	r10
    1d20:	9f 90       	pop	r9
    1d22:	8f 90       	pop	r8
    1d24:	7f 90       	pop	r7
    1d26:	6f 90       	pop	r6
    1d28:	5f 90       	pop	r5
    1d2a:	4f 90       	pop	r4
    1d2c:	3f 90       	pop	r3
    1d2e:	2f 90       	pop	r2
    1d30:	08 95       	ret

00001d32 <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    1d32:	2f 92       	push	r2
    1d34:	3f 92       	push	r3
    1d36:	4f 92       	push	r4
    1d38:	5f 92       	push	r5
    1d3a:	6f 92       	push	r6
    1d3c:	7f 92       	push	r7
    1d3e:	8f 92       	push	r8
    1d40:	9f 92       	push	r9
    1d42:	af 92       	push	r10
    1d44:	bf 92       	push	r11
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	c0 57       	subi	r28, 0x70	; 112
    1d5c:	d1 09       	sbc	r29, r1
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    1d6a:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN6EEProm7readallEv>
    1d6e:	bc 01       	movw	r22, r24
    1d70:	c3 01       	movw	r24, r6
    1d72:	02 96       	adiw	r24, 0x02	; 2
    1d74:	0e 94 80 0c 	call	0x1900	; 0x1900 <_ZN4QEPU5Utils10str2intarrEPc>
    1d78:	fc 01       	movw	r30, r24
    1d7a:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    1d80:	40 85       	ldd	r20, Z+8	; 0x08
    1d82:	51 85       	ldd	r21, Z+9	; 0x09
    1d84:	4f 3f       	cpi	r20, 0xFF	; 255
    1d86:	51 05       	cpc	r21, r1
    1d88:	a1 f4       	brne	.+40     	; 0x1db2 <_ZN4QEPU3runEv+0x80>
    1d8a:	46 81       	ldd	r20, Z+6	; 0x06
    1d8c:	57 81       	ldd	r21, Z+7	; 0x07
    1d8e:	4f 3f       	cpi	r20, 0xFF	; 255
    1d90:	51 05       	cpc	r21, r1
    1d92:	79 f4       	brne	.+30     	; 0x1db2 <_ZN4QEPU3runEv+0x80>
    1d94:	44 81       	ldd	r20, Z+4	; 0x04
    1d96:	55 81       	ldd	r21, Z+5	; 0x05
    1d98:	4f 3f       	cpi	r20, 0xFF	; 255
    1d9a:	51 05       	cpc	r21, r1
    1d9c:	51 f4       	brne	.+20     	; 0x1db2 <_ZN4QEPU3runEv+0x80>
    1d9e:	42 81       	ldd	r20, Z+2	; 0x02
    1da0:	53 81       	ldd	r21, Z+3	; 0x03
    1da2:	4f 3f       	cpi	r20, 0xFF	; 255
    1da4:	51 05       	cpc	r21, r1
    1da6:	29 f4       	brne	.+10     	; 0x1db2 <_ZN4QEPU3runEv+0x80>
    1da8:	40 81       	ld	r20, Z
    1daa:	51 81       	ldd	r21, Z+1	; 0x01
    1dac:	4f 3f       	cpi	r20, 0xFF	; 255
    1dae:	51 05       	cpc	r21, r1
    1db0:	21 f0       	breq	.+8      	; 0x1dba <_ZN4QEPU3runEv+0x88>
    1db2:	2f 5f       	subi	r18, 0xFF	; 255
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	32 96       	adiw	r30, 0x02	; 2
    1db8:	e3 cf       	rjmp	.-58     	; 0x1d80 <_ZN4QEPU3runEv+0x4e>
    1dba:	a9 01       	movw	r20, r18
    1dbc:	44 50       	subi	r20, 0x04	; 4
    1dbe:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1dc0:	14 16       	cp	r1, r20
    1dc2:	15 06       	cpc	r1, r21
    1dc4:	0c f0       	brlt	.+2      	; 0x1dc8 <_ZN4QEPU3runEv+0x96>
    1dc6:	07 c1       	rjmp	.+526    	; 0x1fd6 <_ZN4QEPU3runEv+0x2a4>
    1dc8:	fc 01       	movw	r30, r24
    1dca:	25 50       	subi	r18, 0x05	; 5
    1dcc:	31 09       	sbc	r19, r1
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	41 2c       	mov	r4, r1
    1dd8:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    1dda:	c1 2c       	mov	r12, r1
    1ddc:	d1 2c       	mov	r13, r1
    1dde:	0c c0       	rjmp	.+24     	; 0x1df8 <_ZN4QEPU3runEv+0xc6>
    1de0:	69 30       	cpi	r22, 0x09	; 9
    1de2:	71 05       	cpc	r23, r1
    1de4:	34 f0       	brlt	.+12     	; 0x1df2 <_ZN4QEPU3runEv+0xc0>
    1de6:	8f ef       	ldi	r24, 0xFF	; 255
    1de8:	48 1a       	sub	r4, r24
    1dea:	58 0a       	sbc	r5, r24
    1dec:	8c 2d       	mov	r24, r12
    1dee:	9d 2d       	mov	r25, r13
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    1df2:	cb 01       	movw	r24, r22
    1df4:	4f 5f       	subi	r20, 0xFF	; 255
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	bc 01       	movw	r22, r24
    1dfa:	6f 5f       	subi	r22, 0xFF	; 255
    1dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfe:	01 91       	ld	r16, Z+
    1e00:	11 91       	ld	r17, Z+
    1e02:	d2 01       	movw	r26, r4
    1e04:	aa 0f       	add	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	aa 0f       	add	r26, r26
    1e0a:	bb 1f       	adc	r27, r27
    1e0c:	aa 0f       	add	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	a4 0d       	add	r26, r4
    1e12:	b5 1d       	adc	r27, r5
    1e14:	8a 0f       	add	r24, r26
    1e16:	9b 1f       	adc	r25, r27
    1e18:	dc 01       	movw	r26, r24
    1e1a:	aa 0f       	add	r26, r26
    1e1c:	bb 1f       	adc	r27, r27
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	8c 0f       	add	r24, r28
    1e24:	9d 1f       	adc	r25, r29
    1e26:	a8 0f       	add	r26, r24
    1e28:	b9 1f       	adc	r27, r25
    1e2a:	0d 93       	st	X+, r16
    1e2c:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1e2e:	42 17       	cp	r20, r18
    1e30:	53 07       	cpc	r21, r19
    1e32:	b1 f6       	brne	.-84     	; 0x1de0 <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1e34:	f3 01       	movw	r30, r6
    1e36:	14 82       	std	Z+4, r1	; 0x04
    1e38:	13 82       	std	Z+3, r1	; 0x03
    1e3a:	14 14       	cp	r1, r4
    1e3c:	15 04       	cpc	r1, r5
    1e3e:	0c f0       	brlt	.+2      	; 0x1e42 <_ZN4QEPU3runEv+0x110>
    1e40:	c6 c0       	rjmp	.+396    	; 0x1fce <_ZN4QEPU3runEv+0x29c>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1e46:	5e 01       	movw	r10, r28
    1e48:	f2 e6       	ldi	r31, 0x62	; 98
    1e4a:	af 0e       	add	r10, r31
    1e4c:	b1 1c       	adc	r11, r1
    1e4e:	6e 01       	movw	r12, r28
    1e50:	2b e5       	ldi	r18, 0x5B	; 91
    1e52:	c2 0e       	add	r12, r18
    1e54:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1e56:	0f 2e       	mov	r0, r31
    1e58:	ff ee       	ldi	r31, 0xEF	; 239
    1e5a:	8f 2e       	mov	r8, r31
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	9f 2e       	mov	r9, r31
    1e60:	f0 2d       	mov	r31, r0
    1e62:	ae 96       	adiw	r28, 0x2e	; 46
    1e64:	af ae       	std	Y+63, r10	; 0x3f
    1e66:	ae 97       	sbiw	r28, 0x2e	; 46
    1e68:	af 96       	adiw	r28, 0x2f	; 47
    1e6a:	bf ae       	std	Y+63, r11	; 0x3f
    1e6c:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1e6e:	e0 96       	adiw	r28, 0x30	; 48
    1e70:	cf ae       	std	Y+63, r12	; 0x3f
    1e72:	e0 97       	sbiw	r28, 0x30	; 48
    1e74:	e1 96       	adiw	r28, 0x31	; 49
    1e76:	df ae       	std	Y+63, r13	; 0x3f
    1e78:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1e7a:	f5 01       	movw	r30, r10
    1e7c:	10 82       	st	Z, r1
    1e7e:	11 82       	std	Z+1, r1	; 0x01
    1e80:	12 82       	std	Z+2, r1	; 0x02
    1e82:	13 82       	std	Z+3, r1	; 0x03
    1e84:	14 82       	std	Z+4, r1	; 0x04
    1e86:	15 82       	std	Z+5, r1	; 0x05
    1e88:	16 82       	std	Z+6, r1	; 0x06
    1e8a:	f6 01       	movw	r30, r12
    1e8c:	10 82       	st	Z, r1
    1e8e:	11 82       	std	Z+1, r1	; 0x01
    1e90:	12 82       	std	Z+2, r1	; 0x02
    1e92:	13 82       	std	Z+3, r1	; 0x03
    1e94:	14 82       	std	Z+4, r1	; 0x04
    1e96:	15 82       	std	Z+5, r1	; 0x05
    1e98:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	ee 0f       	add	r30, r30
    1ea6:	ff 1f       	adc	r31, r31
    1ea8:	ee 0f       	add	r30, r30
    1eaa:	ff 1f       	adc	r31, r31
    1eac:	8e 0f       	add	r24, r30
    1eae:	9f 1f       	adc	r25, r31
    1eb0:	e1 e0       	ldi	r30, 0x01	; 1
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	ec 0f       	add	r30, r28
    1eb6:	fd 1f       	adc	r31, r29
    1eb8:	e8 0f       	add	r30, r24
    1eba:	f9 1f       	adc	r31, r25
    1ebc:	20 80       	ld	r2, Z
    1ebe:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1ec0:	00 e0       	ldi	r16, 0x00	; 0
    1ec2:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1ec4:	0f 5f       	subi	r16, 0xFF	; 255
    1ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec8:	f3 01       	movw	r30, r6
    1eca:	83 81       	ldd	r24, Z+3	; 0x03
    1ecc:	94 81       	ldd	r25, Z+4	; 0x04
    1ece:	fc 01       	movw	r30, r24
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	ee 0f       	add	r30, r30
    1eda:	ff 1f       	adc	r31, r31
    1edc:	8e 0f       	add	r24, r30
    1ede:	9f 1f       	adc	r25, r31
    1ee0:	80 0f       	add	r24, r16
    1ee2:	91 1f       	adc	r25, r17
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	8c 0f       	add	r24, r28
    1ef0:	9d 1f       	adc	r25, r29
    1ef2:	e8 0f       	add	r30, r24
    1ef4:	f9 1f       	adc	r31, r25
    1ef6:	81 81       	ldd	r24, Z+1	; 0x01
    1ef8:	8f 93       	push	r24
    1efa:	80 81       	ld	r24, Z
    1efc:	8f 93       	push	r24
    1efe:	bf 92       	push	r11
    1f00:	af 92       	push	r10
    1f02:	9f 92       	push	r9
    1f04:	8f 92       	push	r8
    1f06:	bf 92       	push	r11
    1f08:	af 92       	push	r10
    1f0a:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1f0e:	f3 01       	movw	r30, r6
    1f10:	83 81       	ldd	r24, Z+3	; 0x03
    1f12:	94 81       	ldd	r25, Z+4	; 0x04
    1f14:	fc 01       	movw	r30, r24
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	ff 1f       	adc	r31, r31
    1f1e:	ee 0f       	add	r30, r30
    1f20:	ff 1f       	adc	r31, r31
    1f22:	e8 0f       	add	r30, r24
    1f24:	f9 1f       	adc	r31, r25
    1f26:	e0 0f       	add	r30, r16
    1f28:	f1 1f       	adc	r31, r17
    1f2a:	34 96       	adiw	r30, 0x04	; 4
    1f2c:	ee 0f       	add	r30, r30
    1f2e:	ff 1f       	adc	r31, r31
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	8c 0f       	add	r24, r28
    1f36:	9d 1f       	adc	r25, r29
    1f38:	e8 0f       	add	r30, r24
    1f3a:	f9 1f       	adc	r31, r25
    1f3c:	81 81       	ldd	r24, Z+1	; 0x01
    1f3e:	8f 93       	push	r24
    1f40:	80 81       	ld	r24, Z
    1f42:	8f 93       	push	r24
    1f44:	df 92       	push	r13
    1f46:	cf 92       	push	r12
    1f48:	9f 92       	push	r9
    1f4a:	8f 92       	push	r8
    1f4c:	df 92       	push	r13
    1f4e:	cf 92       	push	r12
    1f50:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	04 30       	cpi	r16, 0x04	; 4
    1f60:	11 05       	cpc	r17, r1
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <_ZN4QEPU3runEv+0x234>
    1f64:	af cf       	rjmp	.-162    	; 0x1ec4 <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    1f66:	40 e1       	ldi	r20, 0x10	; 16
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	e0 96       	adiw	r28, 0x30	; 48
    1f70:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f72:	e0 97       	sbiw	r28, 0x30	; 48
    1f74:	e1 96       	adiw	r28, 0x31	; 49
    1f76:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f78:	e1 97       	sbiw	r28, 0x31	; 49
    1f7a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <strtol>
    1f7e:	ad 96       	adiw	r28, 0x2d	; 45
    1f80:	6c af       	std	Y+60, r22	; 0x3c
    1f82:	7d af       	std	Y+61, r23	; 0x3d
    1f84:	8e af       	std	Y+62, r24	; 0x3e
    1f86:	9f af       	std	Y+63, r25	; 0x3f
    1f88:	ad 97       	sbiw	r28, 0x2d	; 45
    1f8a:	40 e1       	ldi	r20, 0x10	; 16
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	ae 96       	adiw	r28, 0x2e	; 46
    1f94:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f96:	ae 97       	sbiw	r28, 0x2e	; 46
    1f98:	af 96       	adiw	r28, 0x2f	; 47
    1f9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f9c:	af 97       	sbiw	r28, 0x2f	; 47
    1f9e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <strtol>
    1fa2:	9b 01       	movw	r18, r22
    1fa4:	ac 01       	movw	r20, r24
    1fa6:	ad 96       	adiw	r28, 0x2d	; 45
    1fa8:	ec ac       	ldd	r14, Y+60	; 0x3c
    1faa:	fd ac       	ldd	r15, Y+61	; 0x3d
    1fac:	0e ad       	ldd	r16, Y+62	; 0x3e
    1fae:	1f ad       	ldd	r17, Y+63	; 0x3f
    1fb0:	ad 97       	sbiw	r28, 0x2d	; 45
    1fb2:	b1 01       	movw	r22, r2
    1fb4:	c3 01       	movw	r24, r6
    1fb6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1fba:	f3 01       	movw	r30, r6
    1fbc:	83 81       	ldd	r24, Z+3	; 0x03
    1fbe:	94 81       	ldd	r25, Z+4	; 0x04
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	94 83       	std	Z+4, r25	; 0x04
    1fc4:	83 83       	std	Z+3, r24	; 0x03
    1fc6:	84 15       	cp	r24, r4
    1fc8:	95 05       	cpc	r25, r5
    1fca:	0c f4       	brge	.+2      	; 0x1fce <_ZN4QEPU3runEv+0x29c>
    1fcc:	56 cf       	rjmp	.-340    	; 0x1e7a <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    1fce:	c3 01       	movw	r24, r6
    1fd0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN4QEPU7dumpmemEv>
    1fd4:	04 c0       	rjmp	.+8      	; 0x1fde <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1fd6:	f3 01       	movw	r30, r6
    1fd8:	14 82       	std	Z+4, r1	; 0x04
    1fda:	13 82       	std	Z+3, r1	; 0x03
    1fdc:	f8 cf       	rjmp	.-16     	; 0x1fce <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    1fde:	c0 59       	subi	r28, 0x90	; 144
    1fe0:	df 4f       	sbci	r29, 0xFF	; 255
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	df 90       	pop	r13
    1ffa:	cf 90       	pop	r12
    1ffc:	bf 90       	pop	r11
    1ffe:	af 90       	pop	r10
    2000:	9f 90       	pop	r9
    2002:	8f 90       	pop	r8
    2004:	7f 90       	pop	r7
    2006:	6f 90       	pop	r6
    2008:	5f 90       	pop	r5
    200a:	4f 90       	pop	r4
    200c:	3f 90       	pop	r3
    200e:	2f 90       	pop	r2
    2010:	08 95       	ret

00002012 <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    2012:	83 e3       	ldi	r24, 0x33	; 51
    2014:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    2016:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    2018:	86 e8       	ldi	r24, 0x86	; 134
    201a:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    201c:	88 e1       	ldi	r24, 0x18	; 24
    201e:	8a b9       	out	0x0a, r24	; 10
    2020:	08 95       	ret

00002022 <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    2022:	5d 9b       	sbis	0x0b, 5	; 11
    2024:	fe cf       	rjmp	.-4      	; 0x2022 <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    2026:	6c b9       	out	0x0c, r22	; 12
    2028:	08 95       	ret

0000202a <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    202a:	0f 93       	push	r16
    202c:	1f 93       	push	r17
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    2032:	8c 01       	movw	r16, r24
    2034:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    2036:	68 81       	ld	r22, Y
    2038:	66 23       	and	r22, r22
    203a:	39 f0       	breq	.+14     	; 0x204a <_ZN6Serial8writestrEPc+0x20>
    203c:	21 96       	adiw	r28, 0x01	; 1
    203e:	c8 01       	movw	r24, r16
    2040:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN6Serial5writeEc>
    2044:	69 91       	ld	r22, Y+
    2046:	61 11       	cpse	r22, r1
    2048:	fa cf       	rjmp	.-12     	; 0x203e <_ZN6Serial8writestrEPc+0x14>
}
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	08 95       	ret

00002054 <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	ec 01       	movw	r28, r24
	writestr(data);
    205a:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    205e:	6d e0       	ldi	r22, 0x0D	; 13
    2060:	ce 01       	movw	r24, r28
    2062:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN6Serial5writeEc>
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <acos>:
    206c:	9f 93       	push	r25
    206e:	9f 77       	andi	r25, 0x7F	; 127
    2070:	75 d1       	rcall	.+746    	; 0x235c <__fp_arccos>
    2072:	0f 90       	pop	r0
    2074:	00 20       	and	r0, r0
    2076:	3a f4       	brpl	.+14     	; 0x2086 <acos+0x1a>
    2078:	90 58       	subi	r25, 0x80	; 128
    207a:	a2 ea       	ldi	r26, 0xA2	; 162
    207c:	2a ed       	ldi	r18, 0xDA	; 218
    207e:	3f e0       	ldi	r19, 0x0F	; 15
    2080:	49 e4       	ldi	r20, 0x49	; 73
    2082:	50 e4       	ldi	r21, 0x40	; 64
    2084:	13 d0       	rcall	.+38     	; 0x20ac <__addsf3x>
    2086:	0d c2       	rjmp	.+1050   	; 0x24a2 <__fp_round>

00002088 <__subsf3>:
    2088:	50 58       	subi	r21, 0x80	; 128

0000208a <__addsf3>:
    208a:	bb 27       	eor	r27, r27
    208c:	aa 27       	eor	r26, r26
    208e:	0e d0       	rcall	.+28     	; 0x20ac <__addsf3x>
    2090:	08 c2       	rjmp	.+1040   	; 0x24a2 <__fp_round>
    2092:	d1 d1       	rcall	.+930    	; 0x2436 <__fp_pscA>
    2094:	30 f0       	brcs	.+12     	; 0x20a2 <__addsf3+0x18>
    2096:	d6 d1       	rcall	.+940    	; 0x2444 <__fp_pscB>
    2098:	20 f0       	brcs	.+8      	; 0x20a2 <__addsf3+0x18>
    209a:	31 f4       	brne	.+12     	; 0x20a8 <__addsf3+0x1e>
    209c:	9f 3f       	cpi	r25, 0xFF	; 255
    209e:	11 f4       	brne	.+4      	; 0x20a4 <__addsf3+0x1a>
    20a0:	1e f4       	brtc	.+6      	; 0x20a8 <__addsf3+0x1e>
    20a2:	a1 c1       	rjmp	.+834    	; 0x23e6 <__fp_nan>
    20a4:	0e f4       	brtc	.+2      	; 0x20a8 <__addsf3+0x1e>
    20a6:	e0 95       	com	r30
    20a8:	e7 fb       	bst	r30, 7
    20aa:	97 c1       	rjmp	.+814    	; 0x23da <__fp_inf>

000020ac <__addsf3x>:
    20ac:	e9 2f       	mov	r30, r25
    20ae:	1b d2       	rcall	.+1078   	; 0x24e6 <__fp_split3>
    20b0:	80 f3       	brcs	.-32     	; 0x2092 <__addsf3+0x8>
    20b2:	ba 17       	cp	r27, r26
    20b4:	62 07       	cpc	r22, r18
    20b6:	73 07       	cpc	r23, r19
    20b8:	84 07       	cpc	r24, r20
    20ba:	95 07       	cpc	r25, r21
    20bc:	18 f0       	brcs	.+6      	; 0x20c4 <__addsf3x+0x18>
    20be:	71 f4       	brne	.+28     	; 0x20dc <__addsf3x+0x30>
    20c0:	9e f5       	brtc	.+102    	; 0x2128 <__addsf3x+0x7c>
    20c2:	33 c2       	rjmp	.+1126   	; 0x252a <__fp_zero>
    20c4:	0e f4       	brtc	.+2      	; 0x20c8 <__addsf3x+0x1c>
    20c6:	e0 95       	com	r30
    20c8:	0b 2e       	mov	r0, r27
    20ca:	ba 2f       	mov	r27, r26
    20cc:	a0 2d       	mov	r26, r0
    20ce:	0b 01       	movw	r0, r22
    20d0:	b9 01       	movw	r22, r18
    20d2:	90 01       	movw	r18, r0
    20d4:	0c 01       	movw	r0, r24
    20d6:	ca 01       	movw	r24, r20
    20d8:	a0 01       	movw	r20, r0
    20da:	11 24       	eor	r1, r1
    20dc:	ff 27       	eor	r31, r31
    20de:	59 1b       	sub	r21, r25
    20e0:	99 f0       	breq	.+38     	; 0x2108 <__addsf3x+0x5c>
    20e2:	59 3f       	cpi	r21, 0xF9	; 249
    20e4:	50 f4       	brcc	.+20     	; 0x20fa <__addsf3x+0x4e>
    20e6:	50 3e       	cpi	r21, 0xE0	; 224
    20e8:	68 f1       	brcs	.+90     	; 0x2144 <__addsf3x+0x98>
    20ea:	1a 16       	cp	r1, r26
    20ec:	f0 40       	sbci	r31, 0x00	; 0
    20ee:	a2 2f       	mov	r26, r18
    20f0:	23 2f       	mov	r18, r19
    20f2:	34 2f       	mov	r19, r20
    20f4:	44 27       	eor	r20, r20
    20f6:	58 5f       	subi	r21, 0xF8	; 248
    20f8:	f3 cf       	rjmp	.-26     	; 0x20e0 <__addsf3x+0x34>
    20fa:	46 95       	lsr	r20
    20fc:	37 95       	ror	r19
    20fe:	27 95       	ror	r18
    2100:	a7 95       	ror	r26
    2102:	f0 40       	sbci	r31, 0x00	; 0
    2104:	53 95       	inc	r21
    2106:	c9 f7       	brne	.-14     	; 0x20fa <__addsf3x+0x4e>
    2108:	7e f4       	brtc	.+30     	; 0x2128 <__addsf3x+0x7c>
    210a:	1f 16       	cp	r1, r31
    210c:	ba 0b       	sbc	r27, r26
    210e:	62 0b       	sbc	r22, r18
    2110:	73 0b       	sbc	r23, r19
    2112:	84 0b       	sbc	r24, r20
    2114:	ba f0       	brmi	.+46     	; 0x2144 <__addsf3x+0x98>
    2116:	91 50       	subi	r25, 0x01	; 1
    2118:	a1 f0       	breq	.+40     	; 0x2142 <__addsf3x+0x96>
    211a:	ff 0f       	add	r31, r31
    211c:	bb 1f       	adc	r27, r27
    211e:	66 1f       	adc	r22, r22
    2120:	77 1f       	adc	r23, r23
    2122:	88 1f       	adc	r24, r24
    2124:	c2 f7       	brpl	.-16     	; 0x2116 <__addsf3x+0x6a>
    2126:	0e c0       	rjmp	.+28     	; 0x2144 <__addsf3x+0x98>
    2128:	ba 0f       	add	r27, r26
    212a:	62 1f       	adc	r22, r18
    212c:	73 1f       	adc	r23, r19
    212e:	84 1f       	adc	r24, r20
    2130:	48 f4       	brcc	.+18     	; 0x2144 <__addsf3x+0x98>
    2132:	87 95       	ror	r24
    2134:	77 95       	ror	r23
    2136:	67 95       	ror	r22
    2138:	b7 95       	ror	r27
    213a:	f7 95       	ror	r31
    213c:	9e 3f       	cpi	r25, 0xFE	; 254
    213e:	08 f0       	brcs	.+2      	; 0x2142 <__addsf3x+0x96>
    2140:	b3 cf       	rjmp	.-154    	; 0x20a8 <__addsf3+0x1e>
    2142:	93 95       	inc	r25
    2144:	88 0f       	add	r24, r24
    2146:	08 f0       	brcs	.+2      	; 0x214a <__addsf3x+0x9e>
    2148:	99 27       	eor	r25, r25
    214a:	ee 0f       	add	r30, r30
    214c:	97 95       	ror	r25
    214e:	87 95       	ror	r24
    2150:	08 95       	ret

00002152 <atan>:
    2152:	df 93       	push	r29
    2154:	dd 27       	eor	r29, r29
    2156:	b9 2f       	mov	r27, r25
    2158:	bf 77       	andi	r27, 0x7F	; 127
    215a:	40 e8       	ldi	r20, 0x80	; 128
    215c:	5f e3       	ldi	r21, 0x3F	; 63
    215e:	16 16       	cp	r1, r22
    2160:	17 06       	cpc	r1, r23
    2162:	48 07       	cpc	r20, r24
    2164:	5b 07       	cpc	r21, r27
    2166:	10 f4       	brcc	.+4      	; 0x216c <atan+0x1a>
    2168:	d9 2f       	mov	r29, r25
    216a:	ea d1       	rcall	.+980    	; 0x2540 <inverse>
    216c:	9f 93       	push	r25
    216e:	8f 93       	push	r24
    2170:	7f 93       	push	r23
    2172:	6f 93       	push	r22
    2174:	dc d2       	rcall	.+1464   	; 0x272e <square>
    2176:	e0 e8       	ldi	r30, 0x80	; 128
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	38 d1       	rcall	.+624    	; 0x23ec <__fp_powser>
    217c:	92 d1       	rcall	.+804    	; 0x24a2 <__fp_round>
    217e:	2f 91       	pop	r18
    2180:	3f 91       	pop	r19
    2182:	4f 91       	pop	r20
    2184:	5f 91       	pop	r21
    2186:	34 d2       	rcall	.+1128   	; 0x25f0 <__mulsf3x>
    2188:	dd 23       	and	r29, r29
    218a:	49 f0       	breq	.+18     	; 0x219e <atan+0x4c>
    218c:	90 58       	subi	r25, 0x80	; 128
    218e:	a2 ea       	ldi	r26, 0xA2	; 162
    2190:	2a ed       	ldi	r18, 0xDA	; 218
    2192:	3f e0       	ldi	r19, 0x0F	; 15
    2194:	49 ec       	ldi	r20, 0xC9	; 201
    2196:	5f e3       	ldi	r21, 0x3F	; 63
    2198:	d0 78       	andi	r29, 0x80	; 128
    219a:	5d 27       	eor	r21, r29
    219c:	87 df       	rcall	.-242    	; 0x20ac <__addsf3x>
    219e:	df 91       	pop	r29
    21a0:	80 c1       	rjmp	.+768    	; 0x24a2 <__fp_round>

000021a2 <__cmpsf2>:
    21a2:	f7 d0       	rcall	.+494    	; 0x2392 <__fp_cmp>
    21a4:	08 f4       	brcc	.+2      	; 0x21a8 <__cmpsf2+0x6>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	08 95       	ret

000021aa <cos>:
    21aa:	54 d1       	rcall	.+680    	; 0x2454 <__fp_rempio2>
    21ac:	e3 95       	inc	r30
    21ae:	8a c1       	rjmp	.+788    	; 0x24c4 <__fp_sinus>

000021b0 <__divsf3>:
    21b0:	0c d0       	rcall	.+24     	; 0x21ca <__divsf3x>
    21b2:	77 c1       	rjmp	.+750    	; 0x24a2 <__fp_round>
    21b4:	47 d1       	rcall	.+654    	; 0x2444 <__fp_pscB>
    21b6:	40 f0       	brcs	.+16     	; 0x21c8 <__divsf3+0x18>
    21b8:	3e d1       	rcall	.+636    	; 0x2436 <__fp_pscA>
    21ba:	30 f0       	brcs	.+12     	; 0x21c8 <__divsf3+0x18>
    21bc:	21 f4       	brne	.+8      	; 0x21c6 <__divsf3+0x16>
    21be:	5f 3f       	cpi	r21, 0xFF	; 255
    21c0:	19 f0       	breq	.+6      	; 0x21c8 <__divsf3+0x18>
    21c2:	0b c1       	rjmp	.+534    	; 0x23da <__fp_inf>
    21c4:	51 11       	cpse	r21, r1
    21c6:	b2 c1       	rjmp	.+868    	; 0x252c <__fp_szero>
    21c8:	0e c1       	rjmp	.+540    	; 0x23e6 <__fp_nan>

000021ca <__divsf3x>:
    21ca:	8d d1       	rcall	.+794    	; 0x24e6 <__fp_split3>
    21cc:	98 f3       	brcs	.-26     	; 0x21b4 <__divsf3+0x4>

000021ce <__divsf3_pse>:
    21ce:	99 23       	and	r25, r25
    21d0:	c9 f3       	breq	.-14     	; 0x21c4 <__divsf3+0x14>
    21d2:	55 23       	and	r21, r21
    21d4:	b1 f3       	breq	.-20     	; 0x21c2 <__divsf3+0x12>
    21d6:	95 1b       	sub	r25, r21
    21d8:	55 0b       	sbc	r21, r21
    21da:	bb 27       	eor	r27, r27
    21dc:	aa 27       	eor	r26, r26
    21de:	62 17       	cp	r22, r18
    21e0:	73 07       	cpc	r23, r19
    21e2:	84 07       	cpc	r24, r20
    21e4:	38 f0       	brcs	.+14     	; 0x21f4 <__divsf3_pse+0x26>
    21e6:	9f 5f       	subi	r25, 0xFF	; 255
    21e8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ea:	22 0f       	add	r18, r18
    21ec:	33 1f       	adc	r19, r19
    21ee:	44 1f       	adc	r20, r20
    21f0:	aa 1f       	adc	r26, r26
    21f2:	a9 f3       	breq	.-22     	; 0x21de <__divsf3_pse+0x10>
    21f4:	33 d0       	rcall	.+102    	; 0x225c <__divsf3_pse+0x8e>
    21f6:	0e 2e       	mov	r0, r30
    21f8:	3a f0       	brmi	.+14     	; 0x2208 <__divsf3_pse+0x3a>
    21fa:	e0 e8       	ldi	r30, 0x80	; 128
    21fc:	30 d0       	rcall	.+96     	; 0x225e <__divsf3_pse+0x90>
    21fe:	91 50       	subi	r25, 0x01	; 1
    2200:	50 40       	sbci	r21, 0x00	; 0
    2202:	e6 95       	lsr	r30
    2204:	00 1c       	adc	r0, r0
    2206:	ca f7       	brpl	.-14     	; 0x21fa <__divsf3_pse+0x2c>
    2208:	29 d0       	rcall	.+82     	; 0x225c <__divsf3_pse+0x8e>
    220a:	fe 2f       	mov	r31, r30
    220c:	27 d0       	rcall	.+78     	; 0x225c <__divsf3_pse+0x8e>
    220e:	66 0f       	add	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	88 1f       	adc	r24, r24
    2214:	bb 1f       	adc	r27, r27
    2216:	26 17       	cp	r18, r22
    2218:	37 07       	cpc	r19, r23
    221a:	48 07       	cpc	r20, r24
    221c:	ab 07       	cpc	r26, r27
    221e:	b0 e8       	ldi	r27, 0x80	; 128
    2220:	09 f0       	breq	.+2      	; 0x2224 <__divsf3_pse+0x56>
    2222:	bb 0b       	sbc	r27, r27
    2224:	80 2d       	mov	r24, r0
    2226:	bf 01       	movw	r22, r30
    2228:	ff 27       	eor	r31, r31
    222a:	93 58       	subi	r25, 0x83	; 131
    222c:	5f 4f       	sbci	r21, 0xFF	; 255
    222e:	2a f0       	brmi	.+10     	; 0x223a <__divsf3_pse+0x6c>
    2230:	9e 3f       	cpi	r25, 0xFE	; 254
    2232:	51 05       	cpc	r21, r1
    2234:	68 f0       	brcs	.+26     	; 0x2250 <__divsf3_pse+0x82>
    2236:	d1 c0       	rjmp	.+418    	; 0x23da <__fp_inf>
    2238:	79 c1       	rjmp	.+754    	; 0x252c <__fp_szero>
    223a:	5f 3f       	cpi	r21, 0xFF	; 255
    223c:	ec f3       	brlt	.-6      	; 0x2238 <__divsf3_pse+0x6a>
    223e:	98 3e       	cpi	r25, 0xE8	; 232
    2240:	dc f3       	brlt	.-10     	; 0x2238 <__divsf3_pse+0x6a>
    2242:	86 95       	lsr	r24
    2244:	77 95       	ror	r23
    2246:	67 95       	ror	r22
    2248:	b7 95       	ror	r27
    224a:	f7 95       	ror	r31
    224c:	9f 5f       	subi	r25, 0xFF	; 255
    224e:	c9 f7       	brne	.-14     	; 0x2242 <__divsf3_pse+0x74>
    2250:	88 0f       	add	r24, r24
    2252:	91 1d       	adc	r25, r1
    2254:	96 95       	lsr	r25
    2256:	87 95       	ror	r24
    2258:	97 f9       	bld	r25, 7
    225a:	08 95       	ret
    225c:	e1 e0       	ldi	r30, 0x01	; 1
    225e:	66 0f       	add	r22, r22
    2260:	77 1f       	adc	r23, r23
    2262:	88 1f       	adc	r24, r24
    2264:	bb 1f       	adc	r27, r27
    2266:	62 17       	cp	r22, r18
    2268:	73 07       	cpc	r23, r19
    226a:	84 07       	cpc	r24, r20
    226c:	ba 07       	cpc	r27, r26
    226e:	20 f0       	brcs	.+8      	; 0x2278 <__divsf3_pse+0xaa>
    2270:	62 1b       	sub	r22, r18
    2272:	73 0b       	sbc	r23, r19
    2274:	84 0b       	sbc	r24, r20
    2276:	ba 0b       	sbc	r27, r26
    2278:	ee 1f       	adc	r30, r30
    227a:	88 f7       	brcc	.-30     	; 0x225e <__divsf3_pse+0x90>
    227c:	e0 95       	com	r30
    227e:	08 95       	ret

00002280 <__fixsfsi>:
    2280:	04 d0       	rcall	.+8      	; 0x228a <__fixunssfsi>
    2282:	68 94       	set
    2284:	b1 11       	cpse	r27, r1
    2286:	52 c1       	rjmp	.+676    	; 0x252c <__fp_szero>
    2288:	08 95       	ret

0000228a <__fixunssfsi>:
    228a:	35 d1       	rcall	.+618    	; 0x24f6 <__fp_splitA>
    228c:	88 f0       	brcs	.+34     	; 0x22b0 <__fixunssfsi+0x26>
    228e:	9f 57       	subi	r25, 0x7F	; 127
    2290:	90 f0       	brcs	.+36     	; 0x22b6 <__fixunssfsi+0x2c>
    2292:	b9 2f       	mov	r27, r25
    2294:	99 27       	eor	r25, r25
    2296:	b7 51       	subi	r27, 0x17	; 23
    2298:	a0 f0       	brcs	.+40     	; 0x22c2 <__fixunssfsi+0x38>
    229a:	d1 f0       	breq	.+52     	; 0x22d0 <__fixunssfsi+0x46>
    229c:	66 0f       	add	r22, r22
    229e:	77 1f       	adc	r23, r23
    22a0:	88 1f       	adc	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	1a f0       	brmi	.+6      	; 0x22ac <__fixunssfsi+0x22>
    22a6:	ba 95       	dec	r27
    22a8:	c9 f7       	brne	.-14     	; 0x229c <__fixunssfsi+0x12>
    22aa:	12 c0       	rjmp	.+36     	; 0x22d0 <__fixunssfsi+0x46>
    22ac:	b1 30       	cpi	r27, 0x01	; 1
    22ae:	81 f0       	breq	.+32     	; 0x22d0 <__fixunssfsi+0x46>
    22b0:	3c d1       	rcall	.+632    	; 0x252a <__fp_zero>
    22b2:	b1 e0       	ldi	r27, 0x01	; 1
    22b4:	08 95       	ret
    22b6:	39 c1       	rjmp	.+626    	; 0x252a <__fp_zero>
    22b8:	67 2f       	mov	r22, r23
    22ba:	78 2f       	mov	r23, r24
    22bc:	88 27       	eor	r24, r24
    22be:	b8 5f       	subi	r27, 0xF8	; 248
    22c0:	39 f0       	breq	.+14     	; 0x22d0 <__fixunssfsi+0x46>
    22c2:	b9 3f       	cpi	r27, 0xF9	; 249
    22c4:	cc f3       	brlt	.-14     	; 0x22b8 <__fixunssfsi+0x2e>
    22c6:	86 95       	lsr	r24
    22c8:	77 95       	ror	r23
    22ca:	67 95       	ror	r22
    22cc:	b3 95       	inc	r27
    22ce:	d9 f7       	brne	.-10     	; 0x22c6 <__fixunssfsi+0x3c>
    22d0:	3e f4       	brtc	.+14     	; 0x22e0 <__fixunssfsi+0x56>
    22d2:	90 95       	com	r25
    22d4:	80 95       	com	r24
    22d6:	70 95       	com	r23
    22d8:	61 95       	neg	r22
    22da:	7f 4f       	sbci	r23, 0xFF	; 255
    22dc:	8f 4f       	sbci	r24, 0xFF	; 255
    22de:	9f 4f       	sbci	r25, 0xFF	; 255
    22e0:	08 95       	ret

000022e2 <__floatunsisf>:
    22e2:	e8 94       	clt
    22e4:	09 c0       	rjmp	.+18     	; 0x22f8 <__floatsisf+0x12>

000022e6 <__floatsisf>:
    22e6:	97 fb       	bst	r25, 7
    22e8:	3e f4       	brtc	.+14     	; 0x22f8 <__floatsisf+0x12>
    22ea:	90 95       	com	r25
    22ec:	80 95       	com	r24
    22ee:	70 95       	com	r23
    22f0:	61 95       	neg	r22
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	8f 4f       	sbci	r24, 0xFF	; 255
    22f6:	9f 4f       	sbci	r25, 0xFF	; 255
    22f8:	99 23       	and	r25, r25
    22fa:	a9 f0       	breq	.+42     	; 0x2326 <__floatsisf+0x40>
    22fc:	f9 2f       	mov	r31, r25
    22fe:	96 e9       	ldi	r25, 0x96	; 150
    2300:	bb 27       	eor	r27, r27
    2302:	93 95       	inc	r25
    2304:	f6 95       	lsr	r31
    2306:	87 95       	ror	r24
    2308:	77 95       	ror	r23
    230a:	67 95       	ror	r22
    230c:	b7 95       	ror	r27
    230e:	f1 11       	cpse	r31, r1
    2310:	f8 cf       	rjmp	.-16     	; 0x2302 <__floatsisf+0x1c>
    2312:	fa f4       	brpl	.+62     	; 0x2352 <__floatsisf+0x6c>
    2314:	bb 0f       	add	r27, r27
    2316:	11 f4       	brne	.+4      	; 0x231c <__floatsisf+0x36>
    2318:	60 ff       	sbrs	r22, 0
    231a:	1b c0       	rjmp	.+54     	; 0x2352 <__floatsisf+0x6c>
    231c:	6f 5f       	subi	r22, 0xFF	; 255
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	8f 4f       	sbci	r24, 0xFF	; 255
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	16 c0       	rjmp	.+44     	; 0x2352 <__floatsisf+0x6c>
    2326:	88 23       	and	r24, r24
    2328:	11 f0       	breq	.+4      	; 0x232e <__floatsisf+0x48>
    232a:	96 e9       	ldi	r25, 0x96	; 150
    232c:	11 c0       	rjmp	.+34     	; 0x2350 <__floatsisf+0x6a>
    232e:	77 23       	and	r23, r23
    2330:	21 f0       	breq	.+8      	; 0x233a <__floatsisf+0x54>
    2332:	9e e8       	ldi	r25, 0x8E	; 142
    2334:	87 2f       	mov	r24, r23
    2336:	76 2f       	mov	r23, r22
    2338:	05 c0       	rjmp	.+10     	; 0x2344 <__floatsisf+0x5e>
    233a:	66 23       	and	r22, r22
    233c:	71 f0       	breq	.+28     	; 0x235a <__floatsisf+0x74>
    233e:	96 e8       	ldi	r25, 0x86	; 134
    2340:	86 2f       	mov	r24, r22
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	2a f0       	brmi	.+10     	; 0x2352 <__floatsisf+0x6c>
    2348:	9a 95       	dec	r25
    234a:	66 0f       	add	r22, r22
    234c:	77 1f       	adc	r23, r23
    234e:	88 1f       	adc	r24, r24
    2350:	da f7       	brpl	.-10     	; 0x2348 <__floatsisf+0x62>
    2352:	88 0f       	add	r24, r24
    2354:	96 95       	lsr	r25
    2356:	87 95       	ror	r24
    2358:	97 f9       	bld	r25, 7
    235a:	08 95       	ret

0000235c <__fp_arccos>:
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	1f 93       	push	r17
    2362:	0f 93       	push	r16
    2364:	8b 01       	movw	r16, r22
    2366:	ec 01       	movw	r28, r24
    2368:	ed ea       	ldi	r30, 0xAD	; 173
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	3f d0       	rcall	.+126    	; 0x23ec <__fp_powser>
    236e:	99 d0       	rcall	.+306    	; 0x24a2 <__fp_round>
    2370:	98 01       	movw	r18, r16
    2372:	ae 01       	movw	r20, r28
    2374:	8b 01       	movw	r16, r22
    2376:	ec 01       	movw	r28, r24
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	80 e8       	ldi	r24, 0x80	; 128
    237e:	9f e3       	ldi	r25, 0x3F	; 63
    2380:	83 de       	rcall	.-762    	; 0x2088 <__subsf3>
    2382:	97 d1       	rcall	.+814    	; 0x26b2 <sqrt>
    2384:	98 01       	movw	r18, r16
    2386:	ae 01       	movw	r20, r28
    2388:	0f 91       	pop	r16
    238a:	1f 91       	pop	r17
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	2f c1       	rjmp	.+606    	; 0x25f0 <__mulsf3x>

00002392 <__fp_cmp>:
    2392:	99 0f       	add	r25, r25
    2394:	00 08       	sbc	r0, r0
    2396:	55 0f       	add	r21, r21
    2398:	aa 0b       	sbc	r26, r26
    239a:	e0 e8       	ldi	r30, 0x80	; 128
    239c:	fe ef       	ldi	r31, 0xFE	; 254
    239e:	16 16       	cp	r1, r22
    23a0:	17 06       	cpc	r1, r23
    23a2:	e8 07       	cpc	r30, r24
    23a4:	f9 07       	cpc	r31, r25
    23a6:	c0 f0       	brcs	.+48     	; 0x23d8 <__fp_cmp+0x46>
    23a8:	12 16       	cp	r1, r18
    23aa:	13 06       	cpc	r1, r19
    23ac:	e4 07       	cpc	r30, r20
    23ae:	f5 07       	cpc	r31, r21
    23b0:	98 f0       	brcs	.+38     	; 0x23d8 <__fp_cmp+0x46>
    23b2:	62 1b       	sub	r22, r18
    23b4:	73 0b       	sbc	r23, r19
    23b6:	84 0b       	sbc	r24, r20
    23b8:	95 0b       	sbc	r25, r21
    23ba:	39 f4       	brne	.+14     	; 0x23ca <__fp_cmp+0x38>
    23bc:	0a 26       	eor	r0, r26
    23be:	61 f0       	breq	.+24     	; 0x23d8 <__fp_cmp+0x46>
    23c0:	23 2b       	or	r18, r19
    23c2:	24 2b       	or	r18, r20
    23c4:	25 2b       	or	r18, r21
    23c6:	21 f4       	brne	.+8      	; 0x23d0 <__fp_cmp+0x3e>
    23c8:	08 95       	ret
    23ca:	0a 26       	eor	r0, r26
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <__fp_cmp+0x3e>
    23ce:	a1 40       	sbci	r26, 0x01	; 1
    23d0:	a6 95       	lsr	r26
    23d2:	8f ef       	ldi	r24, 0xFF	; 255
    23d4:	81 1d       	adc	r24, r1
    23d6:	81 1d       	adc	r24, r1
    23d8:	08 95       	ret

000023da <__fp_inf>:
    23da:	97 f9       	bld	r25, 7
    23dc:	9f 67       	ori	r25, 0x7F	; 127
    23de:	80 e8       	ldi	r24, 0x80	; 128
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	08 95       	ret

000023e6 <__fp_nan>:
    23e6:	9f ef       	ldi	r25, 0xFF	; 255
    23e8:	80 ec       	ldi	r24, 0xC0	; 192
    23ea:	08 95       	ret

000023ec <__fp_powser>:
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	1f 93       	push	r17
    23f2:	0f 93       	push	r16
    23f4:	ff 92       	push	r15
    23f6:	ef 92       	push	r14
    23f8:	df 92       	push	r13
    23fa:	7b 01       	movw	r14, r22
    23fc:	8c 01       	movw	r16, r24
    23fe:	68 94       	set
    2400:	05 c0       	rjmp	.+10     	; 0x240c <__fp_powser+0x20>
    2402:	da 2e       	mov	r13, r26
    2404:	ef 01       	movw	r28, r30
    2406:	f4 d0       	rcall	.+488    	; 0x25f0 <__mulsf3x>
    2408:	fe 01       	movw	r30, r28
    240a:	e8 94       	clt
    240c:	a5 91       	lpm	r26, Z+
    240e:	25 91       	lpm	r18, Z+
    2410:	35 91       	lpm	r19, Z+
    2412:	45 91       	lpm	r20, Z+
    2414:	55 91       	lpm	r21, Z+
    2416:	ae f3       	brts	.-22     	; 0x2402 <__fp_powser+0x16>
    2418:	ef 01       	movw	r28, r30
    241a:	48 de       	rcall	.-880    	; 0x20ac <__addsf3x>
    241c:	fe 01       	movw	r30, r28
    241e:	97 01       	movw	r18, r14
    2420:	a8 01       	movw	r20, r16
    2422:	da 94       	dec	r13
    2424:	79 f7       	brne	.-34     	; 0x2404 <__fp_powser+0x18>
    2426:	df 90       	pop	r13
    2428:	ef 90       	pop	r14
    242a:	ff 90       	pop	r15
    242c:	0f 91       	pop	r16
    242e:	1f 91       	pop	r17
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <__fp_pscA>:
    2436:	00 24       	eor	r0, r0
    2438:	0a 94       	dec	r0
    243a:	16 16       	cp	r1, r22
    243c:	17 06       	cpc	r1, r23
    243e:	18 06       	cpc	r1, r24
    2440:	09 06       	cpc	r0, r25
    2442:	08 95       	ret

00002444 <__fp_pscB>:
    2444:	00 24       	eor	r0, r0
    2446:	0a 94       	dec	r0
    2448:	12 16       	cp	r1, r18
    244a:	13 06       	cpc	r1, r19
    244c:	14 06       	cpc	r1, r20
    244e:	05 06       	cpc	r0, r21
    2450:	08 95       	ret
    2452:	c9 cf       	rjmp	.-110    	; 0x23e6 <__fp_nan>

00002454 <__fp_rempio2>:
    2454:	50 d0       	rcall	.+160    	; 0x24f6 <__fp_splitA>
    2456:	e8 f3       	brcs	.-6      	; 0x2452 <__fp_pscB+0xe>
    2458:	e8 94       	clt
    245a:	e0 e0       	ldi	r30, 0x00	; 0
    245c:	bb 27       	eor	r27, r27
    245e:	9f 57       	subi	r25, 0x7F	; 127
    2460:	f0 f0       	brcs	.+60     	; 0x249e <__fp_rempio2+0x4a>
    2462:	2a ed       	ldi	r18, 0xDA	; 218
    2464:	3f e0       	ldi	r19, 0x0F	; 15
    2466:	49 ec       	ldi	r20, 0xC9	; 201
    2468:	06 c0       	rjmp	.+12     	; 0x2476 <__fp_rempio2+0x22>
    246a:	ee 0f       	add	r30, r30
    246c:	bb 0f       	add	r27, r27
    246e:	66 1f       	adc	r22, r22
    2470:	77 1f       	adc	r23, r23
    2472:	88 1f       	adc	r24, r24
    2474:	28 f0       	brcs	.+10     	; 0x2480 <__fp_rempio2+0x2c>
    2476:	b2 3a       	cpi	r27, 0xA2	; 162
    2478:	62 07       	cpc	r22, r18
    247a:	73 07       	cpc	r23, r19
    247c:	84 07       	cpc	r24, r20
    247e:	28 f0       	brcs	.+10     	; 0x248a <__fp_rempio2+0x36>
    2480:	b2 5a       	subi	r27, 0xA2	; 162
    2482:	62 0b       	sbc	r22, r18
    2484:	73 0b       	sbc	r23, r19
    2486:	84 0b       	sbc	r24, r20
    2488:	e3 95       	inc	r30
    248a:	9a 95       	dec	r25
    248c:	72 f7       	brpl	.-36     	; 0x246a <__fp_rempio2+0x16>
    248e:	80 38       	cpi	r24, 0x80	; 128
    2490:	30 f4       	brcc	.+12     	; 0x249e <__fp_rempio2+0x4a>
    2492:	9a 95       	dec	r25
    2494:	bb 0f       	add	r27, r27
    2496:	66 1f       	adc	r22, r22
    2498:	77 1f       	adc	r23, r23
    249a:	88 1f       	adc	r24, r24
    249c:	d2 f7       	brpl	.-12     	; 0x2492 <__fp_rempio2+0x3e>
    249e:	90 48       	sbci	r25, 0x80	; 128
    24a0:	4b c1       	rjmp	.+662    	; 0x2738 <__fp_mpack_finite>

000024a2 <__fp_round>:
    24a2:	09 2e       	mov	r0, r25
    24a4:	03 94       	inc	r0
    24a6:	00 0c       	add	r0, r0
    24a8:	11 f4       	brne	.+4      	; 0x24ae <__fp_round+0xc>
    24aa:	88 23       	and	r24, r24
    24ac:	52 f0       	brmi	.+20     	; 0x24c2 <__fp_round+0x20>
    24ae:	bb 0f       	add	r27, r27
    24b0:	40 f4       	brcc	.+16     	; 0x24c2 <__fp_round+0x20>
    24b2:	bf 2b       	or	r27, r31
    24b4:	11 f4       	brne	.+4      	; 0x24ba <__fp_round+0x18>
    24b6:	60 ff       	sbrs	r22, 0
    24b8:	04 c0       	rjmp	.+8      	; 0x24c2 <__fp_round+0x20>
    24ba:	6f 5f       	subi	r22, 0xFF	; 255
    24bc:	7f 4f       	sbci	r23, 0xFF	; 255
    24be:	8f 4f       	sbci	r24, 0xFF	; 255
    24c0:	9f 4f       	sbci	r25, 0xFF	; 255
    24c2:	08 95       	ret

000024c4 <__fp_sinus>:
    24c4:	ef 93       	push	r30
    24c6:	e0 ff       	sbrs	r30, 0
    24c8:	06 c0       	rjmp	.+12     	; 0x24d6 <__fp_sinus+0x12>
    24ca:	a2 ea       	ldi	r26, 0xA2	; 162
    24cc:	2a ed       	ldi	r18, 0xDA	; 218
    24ce:	3f e0       	ldi	r19, 0x0F	; 15
    24d0:	49 ec       	ldi	r20, 0xC9	; 201
    24d2:	5f eb       	ldi	r21, 0xBF	; 191
    24d4:	eb dd       	rcall	.-1066   	; 0x20ac <__addsf3x>
    24d6:	e5 df       	rcall	.-54     	; 0x24a2 <__fp_round>
    24d8:	0f 90       	pop	r0
    24da:	03 94       	inc	r0
    24dc:	01 fc       	sbrc	r0, 1
    24de:	90 58       	subi	r25, 0x80	; 128
    24e0:	e5 ed       	ldi	r30, 0xD5	; 213
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	3c c1       	rjmp	.+632    	; 0x275e <__fp_powsodd>

000024e6 <__fp_split3>:
    24e6:	57 fd       	sbrc	r21, 7
    24e8:	90 58       	subi	r25, 0x80	; 128
    24ea:	44 0f       	add	r20, r20
    24ec:	55 1f       	adc	r21, r21
    24ee:	59 f0       	breq	.+22     	; 0x2506 <__fp_splitA+0x10>
    24f0:	5f 3f       	cpi	r21, 0xFF	; 255
    24f2:	71 f0       	breq	.+28     	; 0x2510 <__fp_splitA+0x1a>
    24f4:	47 95       	ror	r20

000024f6 <__fp_splitA>:
    24f6:	88 0f       	add	r24, r24
    24f8:	97 fb       	bst	r25, 7
    24fa:	99 1f       	adc	r25, r25
    24fc:	61 f0       	breq	.+24     	; 0x2516 <__fp_splitA+0x20>
    24fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2500:	79 f0       	breq	.+30     	; 0x2520 <__fp_splitA+0x2a>
    2502:	87 95       	ror	r24
    2504:	08 95       	ret
    2506:	12 16       	cp	r1, r18
    2508:	13 06       	cpc	r1, r19
    250a:	14 06       	cpc	r1, r20
    250c:	55 1f       	adc	r21, r21
    250e:	f2 cf       	rjmp	.-28     	; 0x24f4 <__fp_split3+0xe>
    2510:	46 95       	lsr	r20
    2512:	f1 df       	rcall	.-30     	; 0x24f6 <__fp_splitA>
    2514:	08 c0       	rjmp	.+16     	; 0x2526 <__fp_splitA+0x30>
    2516:	16 16       	cp	r1, r22
    2518:	17 06       	cpc	r1, r23
    251a:	18 06       	cpc	r1, r24
    251c:	99 1f       	adc	r25, r25
    251e:	f1 cf       	rjmp	.-30     	; 0x2502 <__fp_splitA+0xc>
    2520:	86 95       	lsr	r24
    2522:	71 05       	cpc	r23, r1
    2524:	61 05       	cpc	r22, r1
    2526:	08 94       	sec
    2528:	08 95       	ret

0000252a <__fp_zero>:
    252a:	e8 94       	clt

0000252c <__fp_szero>:
    252c:	bb 27       	eor	r27, r27
    252e:	66 27       	eor	r22, r22
    2530:	77 27       	eor	r23, r23
    2532:	cb 01       	movw	r24, r22
    2534:	97 f9       	bld	r25, 7
    2536:	08 95       	ret

00002538 <__gesf2>:
    2538:	2c df       	rcall	.-424    	; 0x2392 <__fp_cmp>
    253a:	08 f4       	brcc	.+2      	; 0x253e <__gesf2+0x6>
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	08 95       	ret

00002540 <inverse>:
    2540:	9b 01       	movw	r18, r22
    2542:	ac 01       	movw	r20, r24
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	70 e0       	ldi	r23, 0x00	; 0
    2548:	80 e8       	ldi	r24, 0x80	; 128
    254a:	9f e3       	ldi	r25, 0x3F	; 63
    254c:	31 ce       	rjmp	.-926    	; 0x21b0 <__divsf3>
    254e:	0e f0       	brts	.+2      	; 0x2552 <inverse+0x12>
    2550:	f1 c0       	rjmp	.+482    	; 0x2734 <__fp_mpack>
    2552:	49 cf       	rjmp	.-366    	; 0x23e6 <__fp_nan>
    2554:	68 94       	set
    2556:	41 cf       	rjmp	.-382    	; 0x23da <__fp_inf>

00002558 <log>:
    2558:	ce df       	rcall	.-100    	; 0x24f6 <__fp_splitA>
    255a:	c8 f3       	brcs	.-14     	; 0x254e <inverse+0xe>
    255c:	99 23       	and	r25, r25
    255e:	d1 f3       	breq	.-12     	; 0x2554 <inverse+0x14>
    2560:	c6 f3       	brts	.-16     	; 0x2552 <inverse+0x12>
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	1f 93       	push	r17
    2568:	0f 93       	push	r16
    256a:	ff 92       	push	r15
    256c:	c9 2f       	mov	r28, r25
    256e:	dd 27       	eor	r29, r29
    2570:	88 23       	and	r24, r24
    2572:	2a f0       	brmi	.+10     	; 0x257e <log+0x26>
    2574:	21 97       	sbiw	r28, 0x01	; 1
    2576:	66 0f       	add	r22, r22
    2578:	77 1f       	adc	r23, r23
    257a:	88 1f       	adc	r24, r24
    257c:	da f7       	brpl	.-10     	; 0x2574 <log+0x1c>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f eb       	ldi	r21, 0xBF	; 191
    2586:	9f e3       	ldi	r25, 0x3F	; 63
    2588:	88 39       	cpi	r24, 0x98	; 152
    258a:	20 f0       	brcs	.+8      	; 0x2594 <log+0x3c>
    258c:	80 3e       	cpi	r24, 0xE0	; 224
    258e:	30 f0       	brcs	.+12     	; 0x259c <log+0x44>
    2590:	21 96       	adiw	r28, 0x01	; 1
    2592:	8f 77       	andi	r24, 0x7F	; 127
    2594:	7a dd       	rcall	.-1292   	; 0x208a <__addsf3>
    2596:	e3 ef       	ldi	r30, 0xF3	; 243
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <log+0x4a>
    259c:	76 dd       	rcall	.-1300   	; 0x208a <__addsf3>
    259e:	e0 e2       	ldi	r30, 0x20	; 32
    25a0:	f1 e0       	ldi	r31, 0x01	; 1
    25a2:	24 df       	rcall	.-440    	; 0x23ec <__fp_powser>
    25a4:	8b 01       	movw	r16, r22
    25a6:	be 01       	movw	r22, r28
    25a8:	ec 01       	movw	r28, r24
    25aa:	fb 2e       	mov	r15, r27
    25ac:	6f 57       	subi	r22, 0x7F	; 127
    25ae:	71 09       	sbc	r23, r1
    25b0:	75 95       	asr	r23
    25b2:	77 1f       	adc	r23, r23
    25b4:	88 0b       	sbc	r24, r24
    25b6:	99 0b       	sbc	r25, r25
    25b8:	96 de       	rcall	.-724    	; 0x22e6 <__floatsisf>
    25ba:	28 e1       	ldi	r18, 0x18	; 24
    25bc:	32 e7       	ldi	r19, 0x72	; 114
    25be:	41 e3       	ldi	r20, 0x31	; 49
    25c0:	5f e3       	ldi	r21, 0x3F	; 63
    25c2:	16 d0       	rcall	.+44     	; 0x25f0 <__mulsf3x>
    25c4:	af 2d       	mov	r26, r15
    25c6:	98 01       	movw	r18, r16
    25c8:	ae 01       	movw	r20, r28
    25ca:	ff 90       	pop	r15
    25cc:	0f 91       	pop	r16
    25ce:	1f 91       	pop	r17
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	6b dd       	rcall	.-1322   	; 0x20ac <__addsf3x>
    25d6:	65 cf       	rjmp	.-310    	; 0x24a2 <__fp_round>

000025d8 <__mulsf3>:
    25d8:	0b d0       	rcall	.+22     	; 0x25f0 <__mulsf3x>
    25da:	63 cf       	rjmp	.-314    	; 0x24a2 <__fp_round>
    25dc:	2c df       	rcall	.-424    	; 0x2436 <__fp_pscA>
    25de:	28 f0       	brcs	.+10     	; 0x25ea <__mulsf3+0x12>
    25e0:	31 df       	rcall	.-414    	; 0x2444 <__fp_pscB>
    25e2:	18 f0       	brcs	.+6      	; 0x25ea <__mulsf3+0x12>
    25e4:	95 23       	and	r25, r21
    25e6:	09 f0       	breq	.+2      	; 0x25ea <__mulsf3+0x12>
    25e8:	f8 ce       	rjmp	.-528    	; 0x23da <__fp_inf>
    25ea:	fd ce       	rjmp	.-518    	; 0x23e6 <__fp_nan>
    25ec:	11 24       	eor	r1, r1
    25ee:	9e cf       	rjmp	.-196    	; 0x252c <__fp_szero>

000025f0 <__mulsf3x>:
    25f0:	7a df       	rcall	.-268    	; 0x24e6 <__fp_split3>
    25f2:	a0 f3       	brcs	.-24     	; 0x25dc <__mulsf3+0x4>

000025f4 <__mulsf3_pse>:
    25f4:	95 9f       	mul	r25, r21
    25f6:	d1 f3       	breq	.-12     	; 0x25ec <__mulsf3+0x14>
    25f8:	95 0f       	add	r25, r21
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	55 1f       	adc	r21, r21
    25fe:	62 9f       	mul	r22, r18
    2600:	f0 01       	movw	r30, r0
    2602:	72 9f       	mul	r23, r18
    2604:	bb 27       	eor	r27, r27
    2606:	f0 0d       	add	r31, r0
    2608:	b1 1d       	adc	r27, r1
    260a:	63 9f       	mul	r22, r19
    260c:	aa 27       	eor	r26, r26
    260e:	f0 0d       	add	r31, r0
    2610:	b1 1d       	adc	r27, r1
    2612:	aa 1f       	adc	r26, r26
    2614:	64 9f       	mul	r22, r20
    2616:	66 27       	eor	r22, r22
    2618:	b0 0d       	add	r27, r0
    261a:	a1 1d       	adc	r26, r1
    261c:	66 1f       	adc	r22, r22
    261e:	82 9f       	mul	r24, r18
    2620:	22 27       	eor	r18, r18
    2622:	b0 0d       	add	r27, r0
    2624:	a1 1d       	adc	r26, r1
    2626:	62 1f       	adc	r22, r18
    2628:	73 9f       	mul	r23, r19
    262a:	b0 0d       	add	r27, r0
    262c:	a1 1d       	adc	r26, r1
    262e:	62 1f       	adc	r22, r18
    2630:	83 9f       	mul	r24, r19
    2632:	a0 0d       	add	r26, r0
    2634:	61 1d       	adc	r22, r1
    2636:	22 1f       	adc	r18, r18
    2638:	74 9f       	mul	r23, r20
    263a:	33 27       	eor	r19, r19
    263c:	a0 0d       	add	r26, r0
    263e:	61 1d       	adc	r22, r1
    2640:	23 1f       	adc	r18, r19
    2642:	84 9f       	mul	r24, r20
    2644:	60 0d       	add	r22, r0
    2646:	21 1d       	adc	r18, r1
    2648:	82 2f       	mov	r24, r18
    264a:	76 2f       	mov	r23, r22
    264c:	6a 2f       	mov	r22, r26
    264e:	11 24       	eor	r1, r1
    2650:	9f 57       	subi	r25, 0x7F	; 127
    2652:	50 40       	sbci	r21, 0x00	; 0
    2654:	8a f0       	brmi	.+34     	; 0x2678 <__mulsf3_pse+0x84>
    2656:	e1 f0       	breq	.+56     	; 0x2690 <__mulsf3_pse+0x9c>
    2658:	88 23       	and	r24, r24
    265a:	4a f0       	brmi	.+18     	; 0x266e <__mulsf3_pse+0x7a>
    265c:	ee 0f       	add	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	bb 1f       	adc	r27, r27
    2662:	66 1f       	adc	r22, r22
    2664:	77 1f       	adc	r23, r23
    2666:	88 1f       	adc	r24, r24
    2668:	91 50       	subi	r25, 0x01	; 1
    266a:	50 40       	sbci	r21, 0x00	; 0
    266c:	a9 f7       	brne	.-22     	; 0x2658 <__mulsf3_pse+0x64>
    266e:	9e 3f       	cpi	r25, 0xFE	; 254
    2670:	51 05       	cpc	r21, r1
    2672:	70 f0       	brcs	.+28     	; 0x2690 <__mulsf3_pse+0x9c>
    2674:	b2 ce       	rjmp	.-668    	; 0x23da <__fp_inf>
    2676:	5a cf       	rjmp	.-332    	; 0x252c <__fp_szero>
    2678:	5f 3f       	cpi	r21, 0xFF	; 255
    267a:	ec f3       	brlt	.-6      	; 0x2676 <__mulsf3_pse+0x82>
    267c:	98 3e       	cpi	r25, 0xE8	; 232
    267e:	dc f3       	brlt	.-10     	; 0x2676 <__mulsf3_pse+0x82>
    2680:	86 95       	lsr	r24
    2682:	77 95       	ror	r23
    2684:	67 95       	ror	r22
    2686:	b7 95       	ror	r27
    2688:	f7 95       	ror	r31
    268a:	e7 95       	ror	r30
    268c:	9f 5f       	subi	r25, 0xFF	; 255
    268e:	c1 f7       	brne	.-16     	; 0x2680 <__mulsf3_pse+0x8c>
    2690:	fe 2b       	or	r31, r30
    2692:	88 0f       	add	r24, r24
    2694:	91 1d       	adc	r25, r1
    2696:	96 95       	lsr	r25
    2698:	87 95       	ror	r24
    269a:	97 f9       	bld	r25, 7
    269c:	08 95       	ret

0000269e <sin>:
    269e:	9f 93       	push	r25
    26a0:	d9 de       	rcall	.-590    	; 0x2454 <__fp_rempio2>
    26a2:	0f 90       	pop	r0
    26a4:	07 fc       	sbrc	r0, 7
    26a6:	ee 5f       	subi	r30, 0xFE	; 254
    26a8:	0d cf       	rjmp	.-486    	; 0x24c4 <__fp_sinus>
    26aa:	11 f4       	brne	.+4      	; 0x26b0 <sin+0x12>
    26ac:	0e f4       	brtc	.+2      	; 0x26b0 <sin+0x12>
    26ae:	9b ce       	rjmp	.-714    	; 0x23e6 <__fp_nan>
    26b0:	41 c0       	rjmp	.+130    	; 0x2734 <__fp_mpack>

000026b2 <sqrt>:
    26b2:	21 df       	rcall	.-446    	; 0x24f6 <__fp_splitA>
    26b4:	d0 f3       	brcs	.-12     	; 0x26aa <sin+0xc>
    26b6:	99 23       	and	r25, r25
    26b8:	d9 f3       	breq	.-10     	; 0x26b0 <sin+0x12>
    26ba:	ce f3       	brts	.-14     	; 0x26ae <sin+0x10>
    26bc:	9f 57       	subi	r25, 0x7F	; 127
    26be:	55 0b       	sbc	r21, r21
    26c0:	87 ff       	sbrs	r24, 7
    26c2:	46 d0       	rcall	.+140    	; 0x2750 <__fp_norm2>
    26c4:	00 24       	eor	r0, r0
    26c6:	a0 e6       	ldi	r26, 0x60	; 96
    26c8:	40 ea       	ldi	r20, 0xA0	; 160
    26ca:	90 01       	movw	r18, r0
    26cc:	80 58       	subi	r24, 0x80	; 128
    26ce:	56 95       	lsr	r21
    26d0:	97 95       	ror	r25
    26d2:	28 f4       	brcc	.+10     	; 0x26de <sqrt+0x2c>
    26d4:	80 5c       	subi	r24, 0xC0	; 192
    26d6:	66 0f       	add	r22, r22
    26d8:	77 1f       	adc	r23, r23
    26da:	88 1f       	adc	r24, r24
    26dc:	20 f0       	brcs	.+8      	; 0x26e6 <sqrt+0x34>
    26de:	26 17       	cp	r18, r22
    26e0:	37 07       	cpc	r19, r23
    26e2:	48 07       	cpc	r20, r24
    26e4:	30 f4       	brcc	.+12     	; 0x26f2 <sqrt+0x40>
    26e6:	62 1b       	sub	r22, r18
    26e8:	73 0b       	sbc	r23, r19
    26ea:	84 0b       	sbc	r24, r20
    26ec:	20 29       	or	r18, r0
    26ee:	31 29       	or	r19, r1
    26f0:	4a 2b       	or	r20, r26
    26f2:	a6 95       	lsr	r26
    26f4:	17 94       	ror	r1
    26f6:	07 94       	ror	r0
    26f8:	20 25       	eor	r18, r0
    26fa:	31 25       	eor	r19, r1
    26fc:	4a 27       	eor	r20, r26
    26fe:	58 f7       	brcc	.-42     	; 0x26d6 <sqrt+0x24>
    2700:	66 0f       	add	r22, r22
    2702:	77 1f       	adc	r23, r23
    2704:	88 1f       	adc	r24, r24
    2706:	20 f0       	brcs	.+8      	; 0x2710 <sqrt+0x5e>
    2708:	26 17       	cp	r18, r22
    270a:	37 07       	cpc	r19, r23
    270c:	48 07       	cpc	r20, r24
    270e:	30 f4       	brcc	.+12     	; 0x271c <sqrt+0x6a>
    2710:	62 0b       	sbc	r22, r18
    2712:	73 0b       	sbc	r23, r19
    2714:	84 0b       	sbc	r24, r20
    2716:	20 0d       	add	r18, r0
    2718:	31 1d       	adc	r19, r1
    271a:	41 1d       	adc	r20, r1
    271c:	a0 95       	com	r26
    271e:	81 f7       	brne	.-32     	; 0x2700 <sqrt+0x4e>
    2720:	b9 01       	movw	r22, r18
    2722:	84 2f       	mov	r24, r20
    2724:	91 58       	subi	r25, 0x81	; 129
    2726:	88 0f       	add	r24, r24
    2728:	96 95       	lsr	r25
    272a:	87 95       	ror	r24
    272c:	08 95       	ret

0000272e <square>:
    272e:	9b 01       	movw	r18, r22
    2730:	ac 01       	movw	r20, r24
    2732:	52 cf       	rjmp	.-348    	; 0x25d8 <__mulsf3>

00002734 <__fp_mpack>:
    2734:	9f 3f       	cpi	r25, 0xFF	; 255
    2736:	31 f0       	breq	.+12     	; 0x2744 <__fp_mpack_finite+0xc>

00002738 <__fp_mpack_finite>:
    2738:	91 50       	subi	r25, 0x01	; 1
    273a:	20 f4       	brcc	.+8      	; 0x2744 <__fp_mpack_finite+0xc>
    273c:	87 95       	ror	r24
    273e:	77 95       	ror	r23
    2740:	67 95       	ror	r22
    2742:	b7 95       	ror	r27
    2744:	88 0f       	add	r24, r24
    2746:	91 1d       	adc	r25, r1
    2748:	96 95       	lsr	r25
    274a:	87 95       	ror	r24
    274c:	97 f9       	bld	r25, 7
    274e:	08 95       	ret

00002750 <__fp_norm2>:
    2750:	91 50       	subi	r25, 0x01	; 1
    2752:	50 40       	sbci	r21, 0x00	; 0
    2754:	66 0f       	add	r22, r22
    2756:	77 1f       	adc	r23, r23
    2758:	88 1f       	adc	r24, r24
    275a:	d2 f7       	brpl	.-12     	; 0x2750 <__fp_norm2>
    275c:	08 95       	ret

0000275e <__fp_powsodd>:
    275e:	9f 93       	push	r25
    2760:	8f 93       	push	r24
    2762:	7f 93       	push	r23
    2764:	6f 93       	push	r22
    2766:	ff 93       	push	r31
    2768:	ef 93       	push	r30
    276a:	9b 01       	movw	r18, r22
    276c:	ac 01       	movw	r20, r24
    276e:	34 df       	rcall	.-408    	; 0x25d8 <__mulsf3>
    2770:	ef 91       	pop	r30
    2772:	ff 91       	pop	r31
    2774:	3b de       	rcall	.-906    	; 0x23ec <__fp_powser>
    2776:	2f 91       	pop	r18
    2778:	3f 91       	pop	r19
    277a:	4f 91       	pop	r20
    277c:	5f 91       	pop	r21
    277e:	2c cf       	rjmp	.-424    	; 0x25d8 <__mulsf3>

00002780 <__divmodhi4>:
    2780:	97 fb       	bst	r25, 7
    2782:	07 2e       	mov	r0, r23
    2784:	16 f4       	brtc	.+4      	; 0x278a <__divmodhi4+0xa>
    2786:	00 94       	com	r0
    2788:	07 d0       	rcall	.+14     	; 0x2798 <__divmodhi4_neg1>
    278a:	77 fd       	sbrc	r23, 7
    278c:	09 d0       	rcall	.+18     	; 0x27a0 <__divmodhi4_neg2>
    278e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodhi4>
    2792:	07 fc       	sbrc	r0, 7
    2794:	05 d0       	rcall	.+10     	; 0x27a0 <__divmodhi4_neg2>
    2796:	3e f4       	brtc	.+14     	; 0x27a6 <__divmodhi4_exit>

00002798 <__divmodhi4_neg1>:
    2798:	90 95       	com	r25
    279a:	81 95       	neg	r24
    279c:	9f 4f       	sbci	r25, 0xFF	; 255
    279e:	08 95       	ret

000027a0 <__divmodhi4_neg2>:
    27a0:	70 95       	com	r23
    27a2:	61 95       	neg	r22
    27a4:	7f 4f       	sbci	r23, 0xFF	; 255

000027a6 <__divmodhi4_exit>:
    27a6:	08 95       	ret

000027a8 <__tablejump2__>:
    27a8:	ee 0f       	add	r30, r30
    27aa:	ff 1f       	adc	r31, r31

000027ac <__tablejump__>:
    27ac:	05 90       	lpm	r0, Z+
    27ae:	f4 91       	lpm	r31, Z
    27b0:	e0 2d       	mov	r30, r0
    27b2:	09 94       	ijmp

000027b4 <__udivmodhi4>:
    27b4:	aa 1b       	sub	r26, r26
    27b6:	bb 1b       	sub	r27, r27
    27b8:	51 e1       	ldi	r21, 0x11	; 17
    27ba:	07 c0       	rjmp	.+14     	; 0x27ca <__udivmodhi4_ep>

000027bc <__udivmodhi4_loop>:
    27bc:	aa 1f       	adc	r26, r26
    27be:	bb 1f       	adc	r27, r27
    27c0:	a6 17       	cp	r26, r22
    27c2:	b7 07       	cpc	r27, r23
    27c4:	10 f0       	brcs	.+4      	; 0x27ca <__udivmodhi4_ep>
    27c6:	a6 1b       	sub	r26, r22
    27c8:	b7 0b       	sbc	r27, r23

000027ca <__udivmodhi4_ep>:
    27ca:	88 1f       	adc	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	5a 95       	dec	r21
    27d0:	a9 f7       	brne	.-22     	; 0x27bc <__udivmodhi4_loop>
    27d2:	80 95       	com	r24
    27d4:	90 95       	com	r25
    27d6:	bc 01       	movw	r22, r24
    27d8:	cd 01       	movw	r24, r26
    27da:	08 95       	ret

000027dc <malloc>:
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	82 30       	cpi	r24, 0x02	; 2
    27e2:	91 05       	cpc	r25, r1
    27e4:	10 f4       	brcc	.+4      	; 0x27ea <malloc+0xe>
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	e0 91 f8 00 	lds	r30, 0x00F8
    27ee:	f0 91 f9 00 	lds	r31, 0x00F9
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	a0 e0       	ldi	r26, 0x00	; 0
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	30 97       	sbiw	r30, 0x00	; 0
    27fc:	39 f1       	breq	.+78     	; 0x284c <malloc+0x70>
    27fe:	40 81       	ld	r20, Z
    2800:	51 81       	ldd	r21, Z+1	; 0x01
    2802:	48 17       	cp	r20, r24
    2804:	59 07       	cpc	r21, r25
    2806:	b8 f0       	brcs	.+46     	; 0x2836 <malloc+0x5a>
    2808:	48 17       	cp	r20, r24
    280a:	59 07       	cpc	r21, r25
    280c:	71 f4       	brne	.+28     	; 0x282a <malloc+0x4e>
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	10 97       	sbiw	r26, 0x00	; 0
    2814:	29 f0       	breq	.+10     	; 0x2820 <malloc+0x44>
    2816:	13 96       	adiw	r26, 0x03	; 3
    2818:	9c 93       	st	X, r25
    281a:	8e 93       	st	-X, r24
    281c:	12 97       	sbiw	r26, 0x02	; 2
    281e:	2c c0       	rjmp	.+88     	; 0x2878 <malloc+0x9c>
    2820:	90 93 f9 00 	sts	0x00F9, r25
    2824:	80 93 f8 00 	sts	0x00F8, r24
    2828:	27 c0       	rjmp	.+78     	; 0x2878 <malloc+0x9c>
    282a:	21 15       	cp	r18, r1
    282c:	31 05       	cpc	r19, r1
    282e:	31 f0       	breq	.+12     	; 0x283c <malloc+0x60>
    2830:	42 17       	cp	r20, r18
    2832:	53 07       	cpc	r21, r19
    2834:	18 f0       	brcs	.+6      	; 0x283c <malloc+0x60>
    2836:	a9 01       	movw	r20, r18
    2838:	db 01       	movw	r26, r22
    283a:	01 c0       	rjmp	.+2      	; 0x283e <malloc+0x62>
    283c:	ef 01       	movw	r28, r30
    283e:	9a 01       	movw	r18, r20
    2840:	bd 01       	movw	r22, r26
    2842:	df 01       	movw	r26, r30
    2844:	02 80       	ldd	r0, Z+2	; 0x02
    2846:	f3 81       	ldd	r31, Z+3	; 0x03
    2848:	e0 2d       	mov	r30, r0
    284a:	d7 cf       	rjmp	.-82     	; 0x27fa <malloc+0x1e>
    284c:	21 15       	cp	r18, r1
    284e:	31 05       	cpc	r19, r1
    2850:	f9 f0       	breq	.+62     	; 0x2890 <malloc+0xb4>
    2852:	28 1b       	sub	r18, r24
    2854:	39 0b       	sbc	r19, r25
    2856:	24 30       	cpi	r18, 0x04	; 4
    2858:	31 05       	cpc	r19, r1
    285a:	80 f4       	brcc	.+32     	; 0x287c <malloc+0xa0>
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	9b 81       	ldd	r25, Y+3	; 0x03
    2860:	61 15       	cp	r22, r1
    2862:	71 05       	cpc	r23, r1
    2864:	21 f0       	breq	.+8      	; 0x286e <malloc+0x92>
    2866:	fb 01       	movw	r30, r22
    2868:	93 83       	std	Z+3, r25	; 0x03
    286a:	82 83       	std	Z+2, r24	; 0x02
    286c:	04 c0       	rjmp	.+8      	; 0x2876 <malloc+0x9a>
    286e:	90 93 f9 00 	sts	0x00F9, r25
    2872:	80 93 f8 00 	sts	0x00F8, r24
    2876:	fe 01       	movw	r30, r28
    2878:	32 96       	adiw	r30, 0x02	; 2
    287a:	44 c0       	rjmp	.+136    	; 0x2904 <malloc+0x128>
    287c:	fe 01       	movw	r30, r28
    287e:	e2 0f       	add	r30, r18
    2880:	f3 1f       	adc	r31, r19
    2882:	81 93       	st	Z+, r24
    2884:	91 93       	st	Z+, r25
    2886:	22 50       	subi	r18, 0x02	; 2
    2888:	31 09       	sbc	r19, r1
    288a:	39 83       	std	Y+1, r19	; 0x01
    288c:	28 83       	st	Y, r18
    288e:	3a c0       	rjmp	.+116    	; 0x2904 <malloc+0x128>
    2890:	20 91 f6 00 	lds	r18, 0x00F6
    2894:	30 91 f7 00 	lds	r19, 0x00F7
    2898:	23 2b       	or	r18, r19
    289a:	41 f4       	brne	.+16     	; 0x28ac <malloc+0xd0>
    289c:	20 91 62 00 	lds	r18, 0x0062
    28a0:	30 91 63 00 	lds	r19, 0x0063
    28a4:	30 93 f7 00 	sts	0x00F7, r19
    28a8:	20 93 f6 00 	sts	0x00F6, r18
    28ac:	20 91 60 00 	lds	r18, 0x0060
    28b0:	30 91 61 00 	lds	r19, 0x0061
    28b4:	21 15       	cp	r18, r1
    28b6:	31 05       	cpc	r19, r1
    28b8:	41 f4       	brne	.+16     	; 0x28ca <malloc+0xee>
    28ba:	2d b7       	in	r18, 0x3d	; 61
    28bc:	3e b7       	in	r19, 0x3e	; 62
    28be:	40 91 64 00 	lds	r20, 0x0064
    28c2:	50 91 65 00 	lds	r21, 0x0065
    28c6:	24 1b       	sub	r18, r20
    28c8:	35 0b       	sbc	r19, r21
    28ca:	e0 91 f6 00 	lds	r30, 0x00F6
    28ce:	f0 91 f7 00 	lds	r31, 0x00F7
    28d2:	e2 17       	cp	r30, r18
    28d4:	f3 07       	cpc	r31, r19
    28d6:	a0 f4       	brcc	.+40     	; 0x2900 <malloc+0x124>
    28d8:	2e 1b       	sub	r18, r30
    28da:	3f 0b       	sbc	r19, r31
    28dc:	28 17       	cp	r18, r24
    28de:	39 07       	cpc	r19, r25
    28e0:	78 f0       	brcs	.+30     	; 0x2900 <malloc+0x124>
    28e2:	ac 01       	movw	r20, r24
    28e4:	4e 5f       	subi	r20, 0xFE	; 254
    28e6:	5f 4f       	sbci	r21, 0xFF	; 255
    28e8:	24 17       	cp	r18, r20
    28ea:	35 07       	cpc	r19, r21
    28ec:	48 f0       	brcs	.+18     	; 0x2900 <malloc+0x124>
    28ee:	4e 0f       	add	r20, r30
    28f0:	5f 1f       	adc	r21, r31
    28f2:	50 93 f7 00 	sts	0x00F7, r21
    28f6:	40 93 f6 00 	sts	0x00F6, r20
    28fa:	81 93       	st	Z+, r24
    28fc:	91 93       	st	Z+, r25
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <malloc+0x128>
    2900:	e0 e0       	ldi	r30, 0x00	; 0
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	cf 01       	movw	r24, r30
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	08 95       	ret

0000290c <free>:
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	09 f4       	brne	.+2      	; 0x2916 <free+0xa>
    2914:	87 c0       	rjmp	.+270    	; 0x2a24 <free+0x118>
    2916:	fc 01       	movw	r30, r24
    2918:	32 97       	sbiw	r30, 0x02	; 2
    291a:	13 82       	std	Z+3, r1	; 0x03
    291c:	12 82       	std	Z+2, r1	; 0x02
    291e:	c0 91 f8 00 	lds	r28, 0x00F8
    2922:	d0 91 f9 00 	lds	r29, 0x00F9
    2926:	20 97       	sbiw	r28, 0x00	; 0
    2928:	81 f4       	brne	.+32     	; 0x294a <free+0x3e>
    292a:	20 81       	ld	r18, Z
    292c:	31 81       	ldd	r19, Z+1	; 0x01
    292e:	28 0f       	add	r18, r24
    2930:	39 1f       	adc	r19, r25
    2932:	80 91 f6 00 	lds	r24, 0x00F6
    2936:	90 91 f7 00 	lds	r25, 0x00F7
    293a:	82 17       	cp	r24, r18
    293c:	93 07       	cpc	r25, r19
    293e:	79 f5       	brne	.+94     	; 0x299e <free+0x92>
    2940:	f0 93 f7 00 	sts	0x00F7, r31
    2944:	e0 93 f6 00 	sts	0x00F6, r30
    2948:	6d c0       	rjmp	.+218    	; 0x2a24 <free+0x118>
    294a:	de 01       	movw	r26, r28
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	ae 17       	cp	r26, r30
    2952:	bf 07       	cpc	r27, r31
    2954:	50 f4       	brcc	.+20     	; 0x296a <free+0x5e>
    2956:	12 96       	adiw	r26, 0x02	; 2
    2958:	4d 91       	ld	r20, X+
    295a:	5c 91       	ld	r21, X
    295c:	13 97       	sbiw	r26, 0x03	; 3
    295e:	9d 01       	movw	r18, r26
    2960:	41 15       	cp	r20, r1
    2962:	51 05       	cpc	r21, r1
    2964:	09 f1       	breq	.+66     	; 0x29a8 <free+0x9c>
    2966:	da 01       	movw	r26, r20
    2968:	f3 cf       	rjmp	.-26     	; 0x2950 <free+0x44>
    296a:	b3 83       	std	Z+3, r27	; 0x03
    296c:	a2 83       	std	Z+2, r26	; 0x02
    296e:	40 81       	ld	r20, Z
    2970:	51 81       	ldd	r21, Z+1	; 0x01
    2972:	84 0f       	add	r24, r20
    2974:	95 1f       	adc	r25, r21
    2976:	8a 17       	cp	r24, r26
    2978:	9b 07       	cpc	r25, r27
    297a:	71 f4       	brne	.+28     	; 0x2998 <free+0x8c>
    297c:	8d 91       	ld	r24, X+
    297e:	9c 91       	ld	r25, X
    2980:	11 97       	sbiw	r26, 0x01	; 1
    2982:	84 0f       	add	r24, r20
    2984:	95 1f       	adc	r25, r21
    2986:	02 96       	adiw	r24, 0x02	; 2
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	80 83       	st	Z, r24
    298c:	12 96       	adiw	r26, 0x02	; 2
    298e:	8d 91       	ld	r24, X+
    2990:	9c 91       	ld	r25, X
    2992:	13 97       	sbiw	r26, 0x03	; 3
    2994:	93 83       	std	Z+3, r25	; 0x03
    2996:	82 83       	std	Z+2, r24	; 0x02
    2998:	21 15       	cp	r18, r1
    299a:	31 05       	cpc	r19, r1
    299c:	29 f4       	brne	.+10     	; 0x29a8 <free+0x9c>
    299e:	f0 93 f9 00 	sts	0x00F9, r31
    29a2:	e0 93 f8 00 	sts	0x00F8, r30
    29a6:	3e c0       	rjmp	.+124    	; 0x2a24 <free+0x118>
    29a8:	d9 01       	movw	r26, r18
    29aa:	13 96       	adiw	r26, 0x03	; 3
    29ac:	fc 93       	st	X, r31
    29ae:	ee 93       	st	-X, r30
    29b0:	12 97       	sbiw	r26, 0x02	; 2
    29b2:	4d 91       	ld	r20, X+
    29b4:	5d 91       	ld	r21, X+
    29b6:	a4 0f       	add	r26, r20
    29b8:	b5 1f       	adc	r27, r21
    29ba:	ea 17       	cp	r30, r26
    29bc:	fb 07       	cpc	r31, r27
    29be:	79 f4       	brne	.+30     	; 0x29de <free+0xd2>
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	84 0f       	add	r24, r20
    29c6:	95 1f       	adc	r25, r21
    29c8:	02 96       	adiw	r24, 0x02	; 2
    29ca:	d9 01       	movw	r26, r18
    29cc:	11 96       	adiw	r26, 0x01	; 1
    29ce:	9c 93       	st	X, r25
    29d0:	8e 93       	st	-X, r24
    29d2:	82 81       	ldd	r24, Z+2	; 0x02
    29d4:	93 81       	ldd	r25, Z+3	; 0x03
    29d6:	13 96       	adiw	r26, 0x03	; 3
    29d8:	9c 93       	st	X, r25
    29da:	8e 93       	st	-X, r24
    29dc:	12 97       	sbiw	r26, 0x02	; 2
    29de:	e0 e0       	ldi	r30, 0x00	; 0
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	8a 81       	ldd	r24, Y+2	; 0x02
    29e4:	9b 81       	ldd	r25, Y+3	; 0x03
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	19 f0       	breq	.+6      	; 0x29f0 <free+0xe4>
    29ea:	fe 01       	movw	r30, r28
    29ec:	ec 01       	movw	r28, r24
    29ee:	f9 cf       	rjmp	.-14     	; 0x29e2 <free+0xd6>
    29f0:	ce 01       	movw	r24, r28
    29f2:	02 96       	adiw	r24, 0x02	; 2
    29f4:	28 81       	ld	r18, Y
    29f6:	39 81       	ldd	r19, Y+1	; 0x01
    29f8:	82 0f       	add	r24, r18
    29fa:	93 1f       	adc	r25, r19
    29fc:	20 91 f6 00 	lds	r18, 0x00F6
    2a00:	30 91 f7 00 	lds	r19, 0x00F7
    2a04:	28 17       	cp	r18, r24
    2a06:	39 07       	cpc	r19, r25
    2a08:	69 f4       	brne	.+26     	; 0x2a24 <free+0x118>
    2a0a:	30 97       	sbiw	r30, 0x00	; 0
    2a0c:	29 f4       	brne	.+10     	; 0x2a18 <free+0x10c>
    2a0e:	10 92 f9 00 	sts	0x00F9, r1
    2a12:	10 92 f8 00 	sts	0x00F8, r1
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <free+0x110>
    2a18:	13 82       	std	Z+3, r1	; 0x03
    2a1a:	12 82       	std	Z+2, r1	; 0x02
    2a1c:	d0 93 f7 00 	sts	0x00F7, r29
    2a20:	c0 93 f6 00 	sts	0x00F6, r28
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	08 95       	ret

00002a2a <do_rand>:
    2a2a:	8f 92       	push	r8
    2a2c:	9f 92       	push	r9
    2a2e:	af 92       	push	r10
    2a30:	bf 92       	push	r11
    2a32:	cf 92       	push	r12
    2a34:	df 92       	push	r13
    2a36:	ef 92       	push	r14
    2a38:	ff 92       	push	r15
    2a3a:	cf 93       	push	r28
    2a3c:	df 93       	push	r29
    2a3e:	ec 01       	movw	r28, r24
    2a40:	68 81       	ld	r22, Y
    2a42:	79 81       	ldd	r23, Y+1	; 0x01
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	9b 81       	ldd	r25, Y+3	; 0x03
    2a48:	61 15       	cp	r22, r1
    2a4a:	71 05       	cpc	r23, r1
    2a4c:	81 05       	cpc	r24, r1
    2a4e:	91 05       	cpc	r25, r1
    2a50:	21 f4       	brne	.+8      	; 0x2a5a <do_rand+0x30>
    2a52:	64 e2       	ldi	r22, 0x24	; 36
    2a54:	79 ed       	ldi	r23, 0xD9	; 217
    2a56:	8b e5       	ldi	r24, 0x5B	; 91
    2a58:	97 e0       	ldi	r25, 0x07	; 7
    2a5a:	2d e1       	ldi	r18, 0x1D	; 29
    2a5c:	33 ef       	ldi	r19, 0xF3	; 243
    2a5e:	41 e0       	ldi	r20, 0x01	; 1
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	0e 94 a6 19 	call	0x334c	; 0x334c <__divmodsi4>
    2a66:	49 01       	movw	r8, r18
    2a68:	5a 01       	movw	r10, r20
    2a6a:	9b 01       	movw	r18, r22
    2a6c:	ac 01       	movw	r20, r24
    2a6e:	a7 ea       	ldi	r26, 0xA7	; 167
    2a70:	b1 e4       	ldi	r27, 0x41	; 65
    2a72:	0e 94 c5 19 	call	0x338a	; 0x338a <__muluhisi3>
    2a76:	6b 01       	movw	r12, r22
    2a78:	7c 01       	movw	r14, r24
    2a7a:	ac ee       	ldi	r26, 0xEC	; 236
    2a7c:	b4 ef       	ldi	r27, 0xF4	; 244
    2a7e:	a5 01       	movw	r20, r10
    2a80:	94 01       	movw	r18, r8
    2a82:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__mulohisi3>
    2a86:	c6 0e       	add	r12, r22
    2a88:	d7 1e       	adc	r13, r23
    2a8a:	e8 1e       	adc	r14, r24
    2a8c:	f9 1e       	adc	r15, r25
    2a8e:	f7 fe       	sbrs	r15, 7
    2a90:	06 c0       	rjmp	.+12     	; 0x2a9e <do_rand+0x74>
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	c8 1a       	sub	r12, r24
    2a96:	d1 08       	sbc	r13, r1
    2a98:	e1 08       	sbc	r14, r1
    2a9a:	80 e8       	ldi	r24, 0x80	; 128
    2a9c:	f8 0a       	sbc	r15, r24
    2a9e:	c8 82       	st	Y, r12
    2aa0:	d9 82       	std	Y+1, r13	; 0x01
    2aa2:	ea 82       	std	Y+2, r14	; 0x02
    2aa4:	fb 82       	std	Y+3, r15	; 0x03
    2aa6:	c6 01       	movw	r24, r12
    2aa8:	9f 77       	andi	r25, 0x7F	; 127
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	ff 90       	pop	r15
    2ab0:	ef 90       	pop	r14
    2ab2:	df 90       	pop	r13
    2ab4:	cf 90       	pop	r12
    2ab6:	bf 90       	pop	r11
    2ab8:	af 90       	pop	r10
    2aba:	9f 90       	pop	r9
    2abc:	8f 90       	pop	r8
    2abe:	08 95       	ret

00002ac0 <rand_r>:
    2ac0:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <do_rand>
    2ac4:	08 95       	ret

00002ac6 <rand>:
    2ac6:	86 e6       	ldi	r24, 0x66	; 102
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <do_rand>
    2ace:	08 95       	ret

00002ad0 <srand>:
    2ad0:	a0 e0       	ldi	r26, 0x00	; 0
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	80 93 66 00 	sts	0x0066, r24
    2ad8:	90 93 67 00 	sts	0x0067, r25
    2adc:	a0 93 68 00 	sts	0x0068, r26
    2ae0:	b0 93 69 00 	sts	0x0069, r27
    2ae4:	08 95       	ret

00002ae6 <strtol>:
    2ae6:	2f 92       	push	r2
    2ae8:	3f 92       	push	r3
    2aea:	5f 92       	push	r5
    2aec:	6f 92       	push	r6
    2aee:	7f 92       	push	r7
    2af0:	8f 92       	push	r8
    2af2:	9f 92       	push	r9
    2af4:	af 92       	push	r10
    2af6:	bf 92       	push	r11
    2af8:	cf 92       	push	r12
    2afa:	df 92       	push	r13
    2afc:	ef 92       	push	r14
    2afe:	ff 92       	push	r15
    2b00:	0f 93       	push	r16
    2b02:	1f 93       	push	r17
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	8b 01       	movw	r16, r22
    2b0a:	ea 01       	movw	r28, r20
    2b0c:	61 15       	cp	r22, r1
    2b0e:	71 05       	cpc	r23, r1
    2b10:	21 f0       	breq	.+8      	; 0x2b1a <strtol+0x34>
    2b12:	db 01       	movw	r26, r22
    2b14:	8c 93       	st	X, r24
    2b16:	11 96       	adiw	r26, 0x01	; 1
    2b18:	9c 93       	st	X, r25
    2b1a:	20 97       	sbiw	r28, 0x00	; 0
    2b1c:	39 f0       	breq	.+14     	; 0x2b2c <strtol+0x46>
    2b1e:	9e 01       	movw	r18, r28
    2b20:	22 50       	subi	r18, 0x02	; 2
    2b22:	31 09       	sbc	r19, r1
    2b24:	23 32       	cpi	r18, 0x23	; 35
    2b26:	31 05       	cpc	r19, r1
    2b28:	08 f0       	brcs	.+2      	; 0x2b2c <strtol+0x46>
    2b2a:	fb c0       	rjmp	.+502    	; 0x2d22 <strtol+0x23c>
    2b2c:	7c 01       	movw	r14, r24
    2b2e:	67 01       	movw	r12, r14
    2b30:	bf ef       	ldi	r27, 0xFF	; 255
    2b32:	cb 1a       	sub	r12, r27
    2b34:	db 0a       	sbc	r13, r27
    2b36:	56 01       	movw	r10, r12
    2b38:	f7 01       	movw	r30, r14
    2b3a:	60 80       	ld	r6, Z
    2b3c:	86 2d       	mov	r24, r6
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <isspace>
    2b44:	89 2b       	or	r24, r25
    2b46:	11 f0       	breq	.+4      	; 0x2b4c <strtol+0x66>
    2b48:	76 01       	movw	r14, r12
    2b4a:	f1 cf       	rjmp	.-30     	; 0x2b2e <strtol+0x48>
    2b4c:	fd e2       	ldi	r31, 0x2D	; 45
    2b4e:	6f 12       	cpse	r6, r31
    2b50:	0a c0       	rjmp	.+20     	; 0x2b66 <strtol+0x80>
    2b52:	57 01       	movw	r10, r14
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	a8 0e       	add	r10, r24
    2b58:	b1 1c       	adc	r11, r1
    2b5a:	d7 01       	movw	r26, r14
    2b5c:	11 96       	adiw	r26, 0x01	; 1
    2b5e:	6c 90       	ld	r6, X
    2b60:	77 24       	eor	r7, r7
    2b62:	73 94       	inc	r7
    2b64:	0b c0       	rjmp	.+22     	; 0x2b7c <strtol+0x96>
    2b66:	bb e2       	ldi	r27, 0x2B	; 43
    2b68:	6b 12       	cpse	r6, r27
    2b6a:	07 c0       	rjmp	.+14     	; 0x2b7a <strtol+0x94>
    2b6c:	57 01       	movw	r10, r14
    2b6e:	e2 e0       	ldi	r30, 0x02	; 2
    2b70:	ae 0e       	add	r10, r30
    2b72:	b1 1c       	adc	r11, r1
    2b74:	d7 01       	movw	r26, r14
    2b76:	11 96       	adiw	r26, 0x01	; 1
    2b78:	6c 90       	ld	r6, X
    2b7a:	71 2c       	mov	r7, r1
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	8f 7e       	andi	r24, 0xEF	; 239
    2b80:	89 2b       	or	r24, r25
    2b82:	89 f4       	brne	.+34     	; 0x2ba6 <strtol+0xc0>
    2b84:	b0 e3       	ldi	r27, 0x30	; 48
    2b86:	6b 12       	cpse	r6, r27
    2b88:	22 c0       	rjmp	.+68     	; 0x2bce <strtol+0xe8>
    2b8a:	f5 01       	movw	r30, r10
    2b8c:	80 81       	ld	r24, Z
    2b8e:	8f 7d       	andi	r24, 0xDF	; 223
    2b90:	88 35       	cpi	r24, 0x58	; 88
    2b92:	41 f5       	brne	.+80     	; 0x2be4 <strtol+0xfe>
    2b94:	61 80       	ldd	r6, Z+1	; 0x01
    2b96:	f2 e0       	ldi	r31, 0x02	; 2
    2b98:	af 0e       	add	r10, r31
    2b9a:	b1 1c       	adc	r11, r1
    2b9c:	87 2d       	mov	r24, r7
    2b9e:	82 60       	ori	r24, 0x02	; 2
    2ba0:	78 2e       	mov	r7, r24
    2ba2:	c0 e1       	ldi	r28, 0x10	; 16
    2ba4:	d0 e0       	ldi	r29, 0x00	; 0
    2ba6:	c8 30       	cpi	r28, 0x08	; 8
    2ba8:	d1 05       	cpc	r29, r1
    2baa:	f1 f0       	breq	.+60     	; 0x2be8 <strtol+0x102>
    2bac:	4c f4       	brge	.+18     	; 0x2bc0 <strtol+0xda>
    2bae:	c2 30       	cpi	r28, 0x02	; 2
    2bb0:	d1 05       	cpc	r29, r1
    2bb2:	11 f5       	brne	.+68     	; 0x2bf8 <strtol+0x112>
    2bb4:	c1 2c       	mov	r12, r1
    2bb6:	d1 2c       	mov	r13, r1
    2bb8:	e1 2c       	mov	r14, r1
    2bba:	b0 e4       	ldi	r27, 0x40	; 64
    2bbc:	fb 2e       	mov	r15, r27
    2bbe:	2f c0       	rjmp	.+94     	; 0x2c1e <strtol+0x138>
    2bc0:	ca 30       	cpi	r28, 0x0A	; 10
    2bc2:	d1 05       	cpc	r29, r1
    2bc4:	31 f0       	breq	.+12     	; 0x2bd2 <strtol+0xec>
    2bc6:	c0 31       	cpi	r28, 0x10	; 16
    2bc8:	d1 05       	cpc	r29, r1
    2bca:	21 f1       	breq	.+72     	; 0x2c14 <strtol+0x12e>
    2bcc:	15 c0       	rjmp	.+42     	; 0x2bf8 <strtol+0x112>
    2bce:	20 97       	sbiw	r28, 0x00	; 0
    2bd0:	51 f7       	brne	.-44     	; 0x2ba6 <strtol+0xc0>
    2bd2:	ca e0       	ldi	r28, 0x0A	; 10
    2bd4:	d0 e0       	ldi	r29, 0x00	; 0
    2bd6:	ac ec       	ldi	r26, 0xCC	; 204
    2bd8:	ca 2e       	mov	r12, r26
    2bda:	dc 2c       	mov	r13, r12
    2bdc:	ec 2c       	mov	r14, r12
    2bde:	ac e0       	ldi	r26, 0x0C	; 12
    2be0:	fa 2e       	mov	r15, r26
    2be2:	1d c0       	rjmp	.+58     	; 0x2c1e <strtol+0x138>
    2be4:	20 97       	sbiw	r28, 0x00	; 0
    2be6:	f9 f6       	brne	.-66     	; 0x2ba6 <strtol+0xc0>
    2be8:	c8 e0       	ldi	r28, 0x08	; 8
    2bea:	d0 e0       	ldi	r29, 0x00	; 0
    2bec:	c1 2c       	mov	r12, r1
    2bee:	d1 2c       	mov	r13, r1
    2bf0:	e1 2c       	mov	r14, r1
    2bf2:	f0 e1       	ldi	r31, 0x10	; 16
    2bf4:	ff 2e       	mov	r15, r31
    2bf6:	13 c0       	rjmp	.+38     	; 0x2c1e <strtol+0x138>
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	70 e0       	ldi	r23, 0x00	; 0
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	90 e8       	ldi	r25, 0x80	; 128
    2c00:	9e 01       	movw	r18, r28
    2c02:	44 27       	eor	r20, r20
    2c04:	37 fd       	sbrc	r19, 7
    2c06:	40 95       	com	r20
    2c08:	54 2f       	mov	r21, r20
    2c0a:	0e 94 84 19 	call	0x3308	; 0x3308 <__udivmodsi4>
    2c0e:	69 01       	movw	r12, r18
    2c10:	7a 01       	movw	r14, r20
    2c12:	05 c0       	rjmp	.+10     	; 0x2c1e <strtol+0x138>
    2c14:	c1 2c       	mov	r12, r1
    2c16:	d1 2c       	mov	r13, r1
    2c18:	e1 2c       	mov	r14, r1
    2c1a:	e8 e0       	ldi	r30, 0x08	; 8
    2c1c:	fe 2e       	mov	r15, r30
    2c1e:	f5 01       	movw	r30, r10
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	a9 01       	movw	r20, r18
    2c28:	4e 01       	movw	r8, r28
    2c2a:	aa 24       	eor	r10, r10
    2c2c:	97 fc       	sbrc	r9, 7
    2c2e:	a0 94       	com	r10
    2c30:	ba 2c       	mov	r11, r10
    2c32:	1f 01       	movw	r2, r30
    2c34:	70 ed       	ldi	r23, 0xD0	; 208
    2c36:	57 2e       	mov	r5, r23
    2c38:	56 0c       	add	r5, r6
    2c3a:	a9 e0       	ldi	r26, 0x09	; 9
    2c3c:	a5 15       	cp	r26, r5
    2c3e:	70 f4       	brcc	.+28     	; 0x2c5c <strtol+0x176>
    2c40:	8f eb       	ldi	r24, 0xBF	; 191
    2c42:	86 0d       	add	r24, r6
    2c44:	8a 31       	cpi	r24, 0x1A	; 26
    2c46:	18 f4       	brcc	.+6      	; 0x2c4e <strtol+0x168>
    2c48:	99 ec       	ldi	r25, 0xC9	; 201
    2c4a:	59 2e       	mov	r5, r25
    2c4c:	06 c0       	rjmp	.+12     	; 0x2c5a <strtol+0x174>
    2c4e:	8f e9       	ldi	r24, 0x9F	; 159
    2c50:	86 0d       	add	r24, r6
    2c52:	8a 31       	cpi	r24, 0x1A	; 26
    2c54:	30 f5       	brcc	.+76     	; 0x2ca2 <strtol+0x1bc>
    2c56:	89 ea       	ldi	r24, 0xA9	; 169
    2c58:	58 2e       	mov	r5, r24
    2c5a:	56 0c       	add	r5, r6
    2c5c:	85 2d       	mov	r24, r5
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	8c 17       	cp	r24, r28
    2c62:	9d 07       	cpc	r25, r29
    2c64:	f4 f4       	brge	.+60     	; 0x2ca2 <strtol+0x1bc>
    2c66:	67 fd       	sbrc	r22, 7
    2c68:	18 c0       	rjmp	.+48     	; 0x2c9a <strtol+0x1b4>
    2c6a:	c2 16       	cp	r12, r18
    2c6c:	d3 06       	cpc	r13, r19
    2c6e:	e4 06       	cpc	r14, r20
    2c70:	f5 06       	cpc	r15, r21
    2c72:	80 f0       	brcs	.+32     	; 0x2c94 <strtol+0x1ae>
    2c74:	c5 01       	movw	r24, r10
    2c76:	b4 01       	movw	r22, r8
    2c78:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__mulsi3>
    2c7c:	9b 01       	movw	r18, r22
    2c7e:	ac 01       	movw	r20, r24
    2c80:	25 0d       	add	r18, r5
    2c82:	31 1d       	adc	r19, r1
    2c84:	41 1d       	adc	r20, r1
    2c86:	51 1d       	adc	r21, r1
    2c88:	21 30       	cpi	r18, 0x01	; 1
    2c8a:	31 05       	cpc	r19, r1
    2c8c:	41 05       	cpc	r20, r1
    2c8e:	b0 e8       	ldi	r27, 0x80	; 128
    2c90:	5b 07       	cpc	r21, r27
    2c92:	10 f0       	brcs	.+4      	; 0x2c98 <strtol+0x1b2>
    2c94:	6f ef       	ldi	r22, 0xFF	; 255
    2c96:	01 c0       	rjmp	.+2      	; 0x2c9a <strtol+0x1b4>
    2c98:	61 e0       	ldi	r22, 0x01	; 1
    2c9a:	31 96       	adiw	r30, 0x01	; 1
    2c9c:	d1 01       	movw	r26, r2
    2c9e:	6c 90       	ld	r6, X
    2ca0:	c8 cf       	rjmp	.-112    	; 0x2c32 <strtol+0x14c>
    2ca2:	87 2d       	mov	r24, r7
    2ca4:	81 70       	andi	r24, 0x01	; 1
    2ca6:	01 15       	cp	r16, r1
    2ca8:	11 05       	cpc	r17, r1
    2caa:	71 f0       	breq	.+28     	; 0x2cc8 <strtol+0x1e2>
    2cac:	66 23       	and	r22, r22
    2cae:	29 f0       	breq	.+10     	; 0x2cba <strtol+0x1d4>
    2cb0:	31 97       	sbiw	r30, 0x01	; 1
    2cb2:	d8 01       	movw	r26, r16
    2cb4:	ed 93       	st	X+, r30
    2cb6:	fc 93       	st	X, r31
    2cb8:	07 c0       	rjmp	.+14     	; 0x2cc8 <strtol+0x1e2>
    2cba:	71 fe       	sbrs	r7, 1
    2cbc:	19 c0       	rjmp	.+50     	; 0x2cf0 <strtol+0x20a>
    2cbe:	32 97       	sbiw	r30, 0x02	; 2
    2cc0:	d8 01       	movw	r26, r16
    2cc2:	ed 93       	st	X+, r30
    2cc4:	fc 93       	st	X, r31
    2cc6:	14 c0       	rjmp	.+40     	; 0x2cf0 <strtol+0x20a>
    2cc8:	67 ff       	sbrs	r22, 7
    2cca:	12 c0       	rjmp	.+36     	; 0x2cf0 <strtol+0x20a>
    2ccc:	88 23       	and	r24, r24
    2cce:	29 f0       	breq	.+10     	; 0x2cda <strtol+0x1f4>
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	50 e8       	ldi	r21, 0x80	; 128
    2cd8:	04 c0       	rjmp	.+8      	; 0x2ce2 <strtol+0x1fc>
    2cda:	2f ef       	ldi	r18, 0xFF	; 255
    2cdc:	3f ef       	ldi	r19, 0xFF	; 255
    2cde:	4f ef       	ldi	r20, 0xFF	; 255
    2ce0:	5f e7       	ldi	r21, 0x7F	; 127
    2ce2:	82 e2       	ldi	r24, 0x22	; 34
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	90 93 fb 00 	sts	0x00FB, r25
    2cea:	80 93 fa 00 	sts	0x00FA, r24
    2cee:	16 c0       	rjmp	.+44     	; 0x2d1c <strtol+0x236>
    2cf0:	88 23       	and	r24, r24
    2cf2:	41 f0       	breq	.+16     	; 0x2d04 <strtol+0x21e>
    2cf4:	50 95       	com	r21
    2cf6:	40 95       	com	r20
    2cf8:	30 95       	com	r19
    2cfa:	21 95       	neg	r18
    2cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfe:	4f 4f       	sbci	r20, 0xFF	; 255
    2d00:	5f 4f       	sbci	r21, 0xFF	; 255
    2d02:	0c c0       	rjmp	.+24     	; 0x2d1c <strtol+0x236>
    2d04:	57 ff       	sbrs	r21, 7
    2d06:	0a c0       	rjmp	.+20     	; 0x2d1c <strtol+0x236>
    2d08:	82 e2       	ldi	r24, 0x22	; 34
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	90 93 fb 00 	sts	0x00FB, r25
    2d10:	80 93 fa 00 	sts	0x00FA, r24
    2d14:	2f ef       	ldi	r18, 0xFF	; 255
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f ef       	ldi	r20, 0xFF	; 255
    2d1a:	5f e7       	ldi	r21, 0x7F	; 127
    2d1c:	b9 01       	movw	r22, r18
    2d1e:	ca 01       	movw	r24, r20
    2d20:	04 c0       	rjmp	.+8      	; 0x2d2a <strtol+0x244>
    2d22:	60 e0       	ldi	r22, 0x00	; 0
    2d24:	70 e0       	ldi	r23, 0x00	; 0
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	ff 90       	pop	r15
    2d34:	ef 90       	pop	r14
    2d36:	df 90       	pop	r13
    2d38:	cf 90       	pop	r12
    2d3a:	bf 90       	pop	r11
    2d3c:	af 90       	pop	r10
    2d3e:	9f 90       	pop	r9
    2d40:	8f 90       	pop	r8
    2d42:	7f 90       	pop	r7
    2d44:	6f 90       	pop	r6
    2d46:	5f 90       	pop	r5
    2d48:	3f 90       	pop	r3
    2d4a:	2f 90       	pop	r2
    2d4c:	08 95       	ret

00002d4e <isspace>:
    2d4e:	91 11       	cpse	r25, r1
    2d50:	05 c2       	rjmp	.+1034   	; 0x315c <__ctype_isfalse>
    2d52:	80 32       	cpi	r24, 0x20	; 32
    2d54:	19 f0       	breq	.+6      	; 0x2d5c <isspace+0xe>
    2d56:	89 50       	subi	r24, 0x09	; 9
    2d58:	85 50       	subi	r24, 0x05	; 5
    2d5a:	d0 f7       	brcc	.-12     	; 0x2d50 <isspace+0x2>
    2d5c:	08 95       	ret

00002d5e <sprintf>:
    2d5e:	ae e0       	ldi	r26, 0x0E	; 14
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e5 eb       	ldi	r30, 0xB5	; 181
    2d64:	f6 e1       	ldi	r31, 0x16	; 22
    2d66:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__prologue_saves__+0x1c>
    2d6a:	0d 89       	ldd	r16, Y+21	; 0x15
    2d6c:	1e 89       	ldd	r17, Y+22	; 0x16
    2d6e:	86 e0       	ldi	r24, 0x06	; 6
    2d70:	8c 83       	std	Y+4, r24	; 0x04
    2d72:	1a 83       	std	Y+2, r17	; 0x02
    2d74:	09 83       	std	Y+1, r16	; 0x01
    2d76:	8f ef       	ldi	r24, 0xFF	; 255
    2d78:	9f e7       	ldi	r25, 0x7F	; 127
    2d7a:	9e 83       	std	Y+6, r25	; 0x06
    2d7c:	8d 83       	std	Y+5, r24	; 0x05
    2d7e:	ae 01       	movw	r20, r28
    2d80:	47 5e       	subi	r20, 0xE7	; 231
    2d82:	5f 4f       	sbci	r21, 0xFF	; 255
    2d84:	6f 89       	ldd	r22, Y+23	; 0x17
    2d86:	78 8d       	ldd	r23, Y+24	; 0x18
    2d88:	ce 01       	movw	r24, r28
    2d8a:	01 96       	adiw	r24, 0x01	; 1
    2d8c:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vfprintf>
    2d90:	ef 81       	ldd	r30, Y+7	; 0x07
    2d92:	f8 85       	ldd	r31, Y+8	; 0x08
    2d94:	e0 0f       	add	r30, r16
    2d96:	f1 1f       	adc	r31, r17
    2d98:	10 82       	st	Z, r1
    2d9a:	2e 96       	adiw	r28, 0x0e	; 14
    2d9c:	e4 e0       	ldi	r30, 0x04	; 4
    2d9e:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__epilogue_restores__+0x1c>

00002da2 <vfprintf>:
    2da2:	ac e0       	ldi	r26, 0x0C	; 12
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e7 ed       	ldi	r30, 0xD7	; 215
    2da8:	f6 e1       	ldi	r31, 0x16	; 22
    2daa:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__>
    2dae:	7c 01       	movw	r14, r24
    2db0:	6b 01       	movw	r12, r22
    2db2:	8a 01       	movw	r16, r20
    2db4:	fc 01       	movw	r30, r24
    2db6:	17 82       	std	Z+7, r1	; 0x07
    2db8:	16 82       	std	Z+6, r1	; 0x06
    2dba:	83 81       	ldd	r24, Z+3	; 0x03
    2dbc:	81 ff       	sbrs	r24, 1
    2dbe:	bd c1       	rjmp	.+890    	; 0x313a <vfprintf+0x398>
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	01 96       	adiw	r24, 0x01	; 1
    2dc4:	4c 01       	movw	r8, r24
    2dc6:	f7 01       	movw	r30, r14
    2dc8:	93 81       	ldd	r25, Z+3	; 0x03
    2dca:	f6 01       	movw	r30, r12
    2dcc:	93 fd       	sbrc	r25, 3
    2dce:	85 91       	lpm	r24, Z+
    2dd0:	93 ff       	sbrs	r25, 3
    2dd2:	81 91       	ld	r24, Z+
    2dd4:	6f 01       	movw	r12, r30
    2dd6:	88 23       	and	r24, r24
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <vfprintf+0x3a>
    2dda:	ab c1       	rjmp	.+854    	; 0x3132 <vfprintf+0x390>
    2ddc:	85 32       	cpi	r24, 0x25	; 37
    2dde:	39 f4       	brne	.+14     	; 0x2dee <vfprintf+0x4c>
    2de0:	93 fd       	sbrc	r25, 3
    2de2:	85 91       	lpm	r24, Z+
    2de4:	93 ff       	sbrs	r25, 3
    2de6:	81 91       	ld	r24, Z+
    2de8:	6f 01       	movw	r12, r30
    2dea:	85 32       	cpi	r24, 0x25	; 37
    2dec:	29 f4       	brne	.+10     	; 0x2df8 <vfprintf+0x56>
    2dee:	b7 01       	movw	r22, r14
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2df6:	e7 cf       	rjmp	.-50     	; 0x2dc6 <vfprintf+0x24>
    2df8:	51 2c       	mov	r5, r1
    2dfa:	31 2c       	mov	r3, r1
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	20 32       	cpi	r18, 0x20	; 32
    2e00:	a0 f4       	brcc	.+40     	; 0x2e2a <vfprintf+0x88>
    2e02:	8b 32       	cpi	r24, 0x2B	; 43
    2e04:	69 f0       	breq	.+26     	; 0x2e20 <vfprintf+0x7e>
    2e06:	30 f4       	brcc	.+12     	; 0x2e14 <vfprintf+0x72>
    2e08:	80 32       	cpi	r24, 0x20	; 32
    2e0a:	59 f0       	breq	.+22     	; 0x2e22 <vfprintf+0x80>
    2e0c:	83 32       	cpi	r24, 0x23	; 35
    2e0e:	69 f4       	brne	.+26     	; 0x2e2a <vfprintf+0x88>
    2e10:	20 61       	ori	r18, 0x10	; 16
    2e12:	2c c0       	rjmp	.+88     	; 0x2e6c <vfprintf+0xca>
    2e14:	8d 32       	cpi	r24, 0x2D	; 45
    2e16:	39 f0       	breq	.+14     	; 0x2e26 <vfprintf+0x84>
    2e18:	80 33       	cpi	r24, 0x30	; 48
    2e1a:	39 f4       	brne	.+14     	; 0x2e2a <vfprintf+0x88>
    2e1c:	21 60       	ori	r18, 0x01	; 1
    2e1e:	26 c0       	rjmp	.+76     	; 0x2e6c <vfprintf+0xca>
    2e20:	22 60       	ori	r18, 0x02	; 2
    2e22:	24 60       	ori	r18, 0x04	; 4
    2e24:	23 c0       	rjmp	.+70     	; 0x2e6c <vfprintf+0xca>
    2e26:	28 60       	ori	r18, 0x08	; 8
    2e28:	21 c0       	rjmp	.+66     	; 0x2e6c <vfprintf+0xca>
    2e2a:	27 fd       	sbrc	r18, 7
    2e2c:	27 c0       	rjmp	.+78     	; 0x2e7c <vfprintf+0xda>
    2e2e:	30 ed       	ldi	r19, 0xD0	; 208
    2e30:	38 0f       	add	r19, r24
    2e32:	3a 30       	cpi	r19, 0x0A	; 10
    2e34:	78 f4       	brcc	.+30     	; 0x2e54 <vfprintf+0xb2>
    2e36:	26 ff       	sbrs	r18, 6
    2e38:	06 c0       	rjmp	.+12     	; 0x2e46 <vfprintf+0xa4>
    2e3a:	fa e0       	ldi	r31, 0x0A	; 10
    2e3c:	5f 9e       	mul	r5, r31
    2e3e:	30 0d       	add	r19, r0
    2e40:	11 24       	eor	r1, r1
    2e42:	53 2e       	mov	r5, r19
    2e44:	13 c0       	rjmp	.+38     	; 0x2e6c <vfprintf+0xca>
    2e46:	8a e0       	ldi	r24, 0x0A	; 10
    2e48:	38 9e       	mul	r3, r24
    2e4a:	30 0d       	add	r19, r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	33 2e       	mov	r3, r19
    2e50:	20 62       	ori	r18, 0x20	; 32
    2e52:	0c c0       	rjmp	.+24     	; 0x2e6c <vfprintf+0xca>
    2e54:	8e 32       	cpi	r24, 0x2E	; 46
    2e56:	21 f4       	brne	.+8      	; 0x2e60 <vfprintf+0xbe>
    2e58:	26 fd       	sbrc	r18, 6
    2e5a:	6b c1       	rjmp	.+726    	; 0x3132 <vfprintf+0x390>
    2e5c:	20 64       	ori	r18, 0x40	; 64
    2e5e:	06 c0       	rjmp	.+12     	; 0x2e6c <vfprintf+0xca>
    2e60:	8c 36       	cpi	r24, 0x6C	; 108
    2e62:	11 f4       	brne	.+4      	; 0x2e68 <vfprintf+0xc6>
    2e64:	20 68       	ori	r18, 0x80	; 128
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <vfprintf+0xca>
    2e68:	88 36       	cpi	r24, 0x68	; 104
    2e6a:	41 f4       	brne	.+16     	; 0x2e7c <vfprintf+0xda>
    2e6c:	f6 01       	movw	r30, r12
    2e6e:	93 fd       	sbrc	r25, 3
    2e70:	85 91       	lpm	r24, Z+
    2e72:	93 ff       	sbrs	r25, 3
    2e74:	81 91       	ld	r24, Z+
    2e76:	6f 01       	movw	r12, r30
    2e78:	81 11       	cpse	r24, r1
    2e7a:	c1 cf       	rjmp	.-126    	; 0x2dfe <vfprintf+0x5c>
    2e7c:	98 2f       	mov	r25, r24
    2e7e:	9f 7d       	andi	r25, 0xDF	; 223
    2e80:	95 54       	subi	r25, 0x45	; 69
    2e82:	93 30       	cpi	r25, 0x03	; 3
    2e84:	28 f4       	brcc	.+10     	; 0x2e90 <vfprintf+0xee>
    2e86:	0c 5f       	subi	r16, 0xFC	; 252
    2e88:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8a:	ff e3       	ldi	r31, 0x3F	; 63
    2e8c:	f9 83       	std	Y+1, r31	; 0x01
    2e8e:	0d c0       	rjmp	.+26     	; 0x2eaa <vfprintf+0x108>
    2e90:	83 36       	cpi	r24, 0x63	; 99
    2e92:	31 f0       	breq	.+12     	; 0x2ea0 <vfprintf+0xfe>
    2e94:	83 37       	cpi	r24, 0x73	; 115
    2e96:	71 f0       	breq	.+28     	; 0x2eb4 <vfprintf+0x112>
    2e98:	83 35       	cpi	r24, 0x53	; 83
    2e9a:	09 f0       	breq	.+2      	; 0x2e9e <vfprintf+0xfc>
    2e9c:	5b c0       	rjmp	.+182    	; 0x2f54 <vfprintf+0x1b2>
    2e9e:	22 c0       	rjmp	.+68     	; 0x2ee4 <vfprintf+0x142>
    2ea0:	f8 01       	movw	r30, r16
    2ea2:	80 81       	ld	r24, Z
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    2ea6:	0e 5f       	subi	r16, 0xFE	; 254
    2ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eaa:	44 24       	eor	r4, r4
    2eac:	43 94       	inc	r4
    2eae:	51 2c       	mov	r5, r1
    2eb0:	54 01       	movw	r10, r8
    2eb2:	15 c0       	rjmp	.+42     	; 0x2ede <vfprintf+0x13c>
    2eb4:	38 01       	movw	r6, r16
    2eb6:	f2 e0       	ldi	r31, 0x02	; 2
    2eb8:	6f 0e       	add	r6, r31
    2eba:	71 1c       	adc	r7, r1
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	a0 80       	ld	r10, Z
    2ec0:	b1 80       	ldd	r11, Z+1	; 0x01
    2ec2:	26 ff       	sbrs	r18, 6
    2ec4:	03 c0       	rjmp	.+6      	; 0x2ecc <vfprintf+0x12a>
    2ec6:	65 2d       	mov	r22, r5
    2ec8:	70 e0       	ldi	r23, 0x00	; 0
    2eca:	02 c0       	rjmp	.+4      	; 0x2ed0 <vfprintf+0x12e>
    2ecc:	6f ef       	ldi	r22, 0xFF	; 255
    2ece:	7f ef       	ldi	r23, 0xFF	; 255
    2ed0:	c5 01       	movw	r24, r10
    2ed2:	2c 87       	std	Y+12, r18	; 0x0c
    2ed4:	0e 94 bc 18 	call	0x3178	; 0x3178 <strnlen>
    2ed8:	2c 01       	movw	r4, r24
    2eda:	83 01       	movw	r16, r6
    2edc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ede:	2f 77       	andi	r18, 0x7F	; 127
    2ee0:	22 2e       	mov	r2, r18
    2ee2:	17 c0       	rjmp	.+46     	; 0x2f12 <vfprintf+0x170>
    2ee4:	38 01       	movw	r6, r16
    2ee6:	f2 e0       	ldi	r31, 0x02	; 2
    2ee8:	6f 0e       	add	r6, r31
    2eea:	71 1c       	adc	r7, r1
    2eec:	f8 01       	movw	r30, r16
    2eee:	a0 80       	ld	r10, Z
    2ef0:	b1 80       	ldd	r11, Z+1	; 0x01
    2ef2:	26 ff       	sbrs	r18, 6
    2ef4:	03 c0       	rjmp	.+6      	; 0x2efc <vfprintf+0x15a>
    2ef6:	65 2d       	mov	r22, r5
    2ef8:	70 e0       	ldi	r23, 0x00	; 0
    2efa:	02 c0       	rjmp	.+4      	; 0x2f00 <vfprintf+0x15e>
    2efc:	6f ef       	ldi	r22, 0xFF	; 255
    2efe:	7f ef       	ldi	r23, 0xFF	; 255
    2f00:	c5 01       	movw	r24, r10
    2f02:	2c 87       	std	Y+12, r18	; 0x0c
    2f04:	0e 94 b1 18 	call	0x3162	; 0x3162 <strnlen_P>
    2f08:	2c 01       	movw	r4, r24
    2f0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f0c:	20 68       	ori	r18, 0x80	; 128
    2f0e:	22 2e       	mov	r2, r18
    2f10:	83 01       	movw	r16, r6
    2f12:	23 fc       	sbrc	r2, 3
    2f14:	1b c0       	rjmp	.+54     	; 0x2f4c <vfprintf+0x1aa>
    2f16:	83 2d       	mov	r24, r3
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	48 16       	cp	r4, r24
    2f1c:	59 06       	cpc	r5, r25
    2f1e:	b0 f4       	brcc	.+44     	; 0x2f4c <vfprintf+0x1aa>
    2f20:	b7 01       	movw	r22, r14
    2f22:	80 e2       	ldi	r24, 0x20	; 32
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2f2a:	3a 94       	dec	r3
    2f2c:	f4 cf       	rjmp	.-24     	; 0x2f16 <vfprintf+0x174>
    2f2e:	f5 01       	movw	r30, r10
    2f30:	27 fc       	sbrc	r2, 7
    2f32:	85 91       	lpm	r24, Z+
    2f34:	27 fe       	sbrs	r2, 7
    2f36:	81 91       	ld	r24, Z+
    2f38:	5f 01       	movw	r10, r30
    2f3a:	b7 01       	movw	r22, r14
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    2f42:	31 10       	cpse	r3, r1
    2f44:	3a 94       	dec	r3
    2f46:	f1 e0       	ldi	r31, 0x01	; 1
    2f48:	4f 1a       	sub	r4, r31
    2f4a:	51 08       	sbc	r5, r1
    2f4c:	41 14       	cp	r4, r1
    2f4e:	51 04       	cpc	r5, r1
    2f50:	71 f7       	brne	.-36     	; 0x2f2e <vfprintf+0x18c>
    2f52:	e5 c0       	rjmp	.+458    	; 0x311e <vfprintf+0x37c>
    2f54:	84 36       	cpi	r24, 0x64	; 100
    2f56:	11 f0       	breq	.+4      	; 0x2f5c <vfprintf+0x1ba>
    2f58:	89 36       	cpi	r24, 0x69	; 105
    2f5a:	39 f5       	brne	.+78     	; 0x2faa <vfprintf+0x208>
    2f5c:	f8 01       	movw	r30, r16
    2f5e:	27 ff       	sbrs	r18, 7
    2f60:	07 c0       	rjmp	.+14     	; 0x2f70 <vfprintf+0x1ce>
    2f62:	60 81       	ld	r22, Z
    2f64:	71 81       	ldd	r23, Z+1	; 0x01
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	0c 5f       	subi	r16, 0xFC	; 252
    2f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6e:	08 c0       	rjmp	.+16     	; 0x2f80 <vfprintf+0x1de>
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	88 27       	eor	r24, r24
    2f76:	77 fd       	sbrc	r23, 7
    2f78:	80 95       	com	r24
    2f7a:	98 2f       	mov	r25, r24
    2f7c:	0e 5f       	subi	r16, 0xFE	; 254
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f80:	2f 76       	andi	r18, 0x6F	; 111
    2f82:	b2 2e       	mov	r11, r18
    2f84:	97 ff       	sbrs	r25, 7
    2f86:	09 c0       	rjmp	.+18     	; 0x2f9a <vfprintf+0x1f8>
    2f88:	90 95       	com	r25
    2f8a:	80 95       	com	r24
    2f8c:	70 95       	com	r23
    2f8e:	61 95       	neg	r22
    2f90:	7f 4f       	sbci	r23, 0xFF	; 255
    2f92:	8f 4f       	sbci	r24, 0xFF	; 255
    2f94:	9f 4f       	sbci	r25, 0xFF	; 255
    2f96:	20 68       	ori	r18, 0x80	; 128
    2f98:	b2 2e       	mov	r11, r18
    2f9a:	2a e0       	ldi	r18, 0x0A	; 10
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	a4 01       	movw	r20, r8
    2fa0:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <__ultoa_invert>
    2fa4:	a8 2e       	mov	r10, r24
    2fa6:	a8 18       	sub	r10, r8
    2fa8:	44 c0       	rjmp	.+136    	; 0x3032 <vfprintf+0x290>
    2faa:	85 37       	cpi	r24, 0x75	; 117
    2fac:	29 f4       	brne	.+10     	; 0x2fb8 <vfprintf+0x216>
    2fae:	2f 7e       	andi	r18, 0xEF	; 239
    2fb0:	b2 2e       	mov	r11, r18
    2fb2:	2a e0       	ldi	r18, 0x0A	; 10
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	25 c0       	rjmp	.+74     	; 0x3002 <vfprintf+0x260>
    2fb8:	f2 2f       	mov	r31, r18
    2fba:	f9 7f       	andi	r31, 0xF9	; 249
    2fbc:	bf 2e       	mov	r11, r31
    2fbe:	8f 36       	cpi	r24, 0x6F	; 111
    2fc0:	c1 f0       	breq	.+48     	; 0x2ff2 <vfprintf+0x250>
    2fc2:	18 f4       	brcc	.+6      	; 0x2fca <vfprintf+0x228>
    2fc4:	88 35       	cpi	r24, 0x58	; 88
    2fc6:	79 f0       	breq	.+30     	; 0x2fe6 <vfprintf+0x244>
    2fc8:	b4 c0       	rjmp	.+360    	; 0x3132 <vfprintf+0x390>
    2fca:	80 37       	cpi	r24, 0x70	; 112
    2fcc:	19 f0       	breq	.+6      	; 0x2fd4 <vfprintf+0x232>
    2fce:	88 37       	cpi	r24, 0x78	; 120
    2fd0:	21 f0       	breq	.+8      	; 0x2fda <vfprintf+0x238>
    2fd2:	af c0       	rjmp	.+350    	; 0x3132 <vfprintf+0x390>
    2fd4:	2f 2f       	mov	r18, r31
    2fd6:	20 61       	ori	r18, 0x10	; 16
    2fd8:	b2 2e       	mov	r11, r18
    2fda:	b4 fe       	sbrs	r11, 4
    2fdc:	0d c0       	rjmp	.+26     	; 0x2ff8 <vfprintf+0x256>
    2fde:	8b 2d       	mov	r24, r11
    2fe0:	84 60       	ori	r24, 0x04	; 4
    2fe2:	b8 2e       	mov	r11, r24
    2fe4:	09 c0       	rjmp	.+18     	; 0x2ff8 <vfprintf+0x256>
    2fe6:	24 ff       	sbrs	r18, 4
    2fe8:	0a c0       	rjmp	.+20     	; 0x2ffe <vfprintf+0x25c>
    2fea:	9f 2f       	mov	r25, r31
    2fec:	96 60       	ori	r25, 0x06	; 6
    2fee:	b9 2e       	mov	r11, r25
    2ff0:	06 c0       	rjmp	.+12     	; 0x2ffe <vfprintf+0x25c>
    2ff2:	28 e0       	ldi	r18, 0x08	; 8
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	05 c0       	rjmp	.+10     	; 0x3002 <vfprintf+0x260>
    2ff8:	20 e1       	ldi	r18, 0x10	; 16
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	02 c0       	rjmp	.+4      	; 0x3002 <vfprintf+0x260>
    2ffe:	20 e1       	ldi	r18, 0x10	; 16
    3000:	32 e0       	ldi	r19, 0x02	; 2
    3002:	f8 01       	movw	r30, r16
    3004:	b7 fe       	sbrs	r11, 7
    3006:	07 c0       	rjmp	.+14     	; 0x3016 <vfprintf+0x274>
    3008:	60 81       	ld	r22, Z
    300a:	71 81       	ldd	r23, Z+1	; 0x01
    300c:	82 81       	ldd	r24, Z+2	; 0x02
    300e:	93 81       	ldd	r25, Z+3	; 0x03
    3010:	0c 5f       	subi	r16, 0xFC	; 252
    3012:	1f 4f       	sbci	r17, 0xFF	; 255
    3014:	06 c0       	rjmp	.+12     	; 0x3022 <vfprintf+0x280>
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	0e 5f       	subi	r16, 0xFE	; 254
    3020:	1f 4f       	sbci	r17, 0xFF	; 255
    3022:	a4 01       	movw	r20, r8
    3024:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <__ultoa_invert>
    3028:	a8 2e       	mov	r10, r24
    302a:	a8 18       	sub	r10, r8
    302c:	fb 2d       	mov	r31, r11
    302e:	ff 77       	andi	r31, 0x7F	; 127
    3030:	bf 2e       	mov	r11, r31
    3032:	b6 fe       	sbrs	r11, 6
    3034:	0b c0       	rjmp	.+22     	; 0x304c <vfprintf+0x2aa>
    3036:	2b 2d       	mov	r18, r11
    3038:	2e 7f       	andi	r18, 0xFE	; 254
    303a:	a5 14       	cp	r10, r5
    303c:	50 f4       	brcc	.+20     	; 0x3052 <vfprintf+0x2b0>
    303e:	b4 fe       	sbrs	r11, 4
    3040:	0a c0       	rjmp	.+20     	; 0x3056 <vfprintf+0x2b4>
    3042:	b2 fc       	sbrc	r11, 2
    3044:	08 c0       	rjmp	.+16     	; 0x3056 <vfprintf+0x2b4>
    3046:	2b 2d       	mov	r18, r11
    3048:	2e 7e       	andi	r18, 0xEE	; 238
    304a:	05 c0       	rjmp	.+10     	; 0x3056 <vfprintf+0x2b4>
    304c:	7a 2c       	mov	r7, r10
    304e:	2b 2d       	mov	r18, r11
    3050:	03 c0       	rjmp	.+6      	; 0x3058 <vfprintf+0x2b6>
    3052:	7a 2c       	mov	r7, r10
    3054:	01 c0       	rjmp	.+2      	; 0x3058 <vfprintf+0x2b6>
    3056:	75 2c       	mov	r7, r5
    3058:	24 ff       	sbrs	r18, 4
    305a:	0d c0       	rjmp	.+26     	; 0x3076 <vfprintf+0x2d4>
    305c:	fe 01       	movw	r30, r28
    305e:	ea 0d       	add	r30, r10
    3060:	f1 1d       	adc	r31, r1
    3062:	80 81       	ld	r24, Z
    3064:	80 33       	cpi	r24, 0x30	; 48
    3066:	11 f4       	brne	.+4      	; 0x306c <vfprintf+0x2ca>
    3068:	29 7e       	andi	r18, 0xE9	; 233
    306a:	09 c0       	rjmp	.+18     	; 0x307e <vfprintf+0x2dc>
    306c:	22 ff       	sbrs	r18, 2
    306e:	06 c0       	rjmp	.+12     	; 0x307c <vfprintf+0x2da>
    3070:	73 94       	inc	r7
    3072:	73 94       	inc	r7
    3074:	04 c0       	rjmp	.+8      	; 0x307e <vfprintf+0x2dc>
    3076:	82 2f       	mov	r24, r18
    3078:	86 78       	andi	r24, 0x86	; 134
    307a:	09 f0       	breq	.+2      	; 0x307e <vfprintf+0x2dc>
    307c:	73 94       	inc	r7
    307e:	23 fd       	sbrc	r18, 3
    3080:	13 c0       	rjmp	.+38     	; 0x30a8 <vfprintf+0x306>
    3082:	20 ff       	sbrs	r18, 0
    3084:	06 c0       	rjmp	.+12     	; 0x3092 <vfprintf+0x2f0>
    3086:	5a 2c       	mov	r5, r10
    3088:	73 14       	cp	r7, r3
    308a:	18 f4       	brcc	.+6      	; 0x3092 <vfprintf+0x2f0>
    308c:	53 0c       	add	r5, r3
    308e:	57 18       	sub	r5, r7
    3090:	73 2c       	mov	r7, r3
    3092:	73 14       	cp	r7, r3
    3094:	68 f4       	brcc	.+26     	; 0x30b0 <vfprintf+0x30e>
    3096:	b7 01       	movw	r22, r14
    3098:	80 e2       	ldi	r24, 0x20	; 32
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	2c 87       	std	Y+12, r18	; 0x0c
    309e:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    30a2:	73 94       	inc	r7
    30a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    30a6:	f5 cf       	rjmp	.-22     	; 0x3092 <vfprintf+0x2f0>
    30a8:	73 14       	cp	r7, r3
    30aa:	10 f4       	brcc	.+4      	; 0x30b0 <vfprintf+0x30e>
    30ac:	37 18       	sub	r3, r7
    30ae:	01 c0       	rjmp	.+2      	; 0x30b2 <vfprintf+0x310>
    30b0:	31 2c       	mov	r3, r1
    30b2:	24 ff       	sbrs	r18, 4
    30b4:	12 c0       	rjmp	.+36     	; 0x30da <vfprintf+0x338>
    30b6:	b7 01       	movw	r22, r14
    30b8:	80 e3       	ldi	r24, 0x30	; 48
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	2c 87       	std	Y+12, r18	; 0x0c
    30be:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    30c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    30c4:	22 ff       	sbrs	r18, 2
    30c6:	17 c0       	rjmp	.+46     	; 0x30f6 <vfprintf+0x354>
    30c8:	21 ff       	sbrs	r18, 1
    30ca:	03 c0       	rjmp	.+6      	; 0x30d2 <vfprintf+0x330>
    30cc:	88 e5       	ldi	r24, 0x58	; 88
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <vfprintf+0x334>
    30d2:	88 e7       	ldi	r24, 0x78	; 120
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	b7 01       	movw	r22, r14
    30d8:	0c c0       	rjmp	.+24     	; 0x30f2 <vfprintf+0x350>
    30da:	82 2f       	mov	r24, r18
    30dc:	86 78       	andi	r24, 0x86	; 134
    30de:	59 f0       	breq	.+22     	; 0x30f6 <vfprintf+0x354>
    30e0:	21 fd       	sbrc	r18, 1
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <vfprintf+0x346>
    30e4:	80 e2       	ldi	r24, 0x20	; 32
    30e6:	01 c0       	rjmp	.+2      	; 0x30ea <vfprintf+0x348>
    30e8:	8b e2       	ldi	r24, 0x2B	; 43
    30ea:	27 fd       	sbrc	r18, 7
    30ec:	8d e2       	ldi	r24, 0x2D	; 45
    30ee:	b7 01       	movw	r22, r14
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    30f6:	a5 14       	cp	r10, r5
    30f8:	38 f4       	brcc	.+14     	; 0x3108 <vfprintf+0x366>
    30fa:	b7 01       	movw	r22, r14
    30fc:	80 e3       	ldi	r24, 0x30	; 48
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    3104:	5a 94       	dec	r5
    3106:	f7 cf       	rjmp	.-18     	; 0x30f6 <vfprintf+0x354>
    3108:	aa 94       	dec	r10
    310a:	f4 01       	movw	r30, r8
    310c:	ea 0d       	add	r30, r10
    310e:	f1 1d       	adc	r31, r1
    3110:	80 81       	ld	r24, Z
    3112:	b7 01       	movw	r22, r14
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    311a:	a1 10       	cpse	r10, r1
    311c:	f5 cf       	rjmp	.-22     	; 0x3108 <vfprintf+0x366>
    311e:	33 20       	and	r3, r3
    3120:	09 f4       	brne	.+2      	; 0x3124 <vfprintf+0x382>
    3122:	51 ce       	rjmp	.-862    	; 0x2dc6 <vfprintf+0x24>
    3124:	b7 01       	movw	r22, r14
    3126:	80 e2       	ldi	r24, 0x20	; 32
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	0e 94 c7 18 	call	0x318e	; 0x318e <fputc>
    312e:	3a 94       	dec	r3
    3130:	f6 cf       	rjmp	.-20     	; 0x311e <vfprintf+0x37c>
    3132:	f7 01       	movw	r30, r14
    3134:	86 81       	ldd	r24, Z+6	; 0x06
    3136:	97 81       	ldd	r25, Z+7	; 0x07
    3138:	02 c0       	rjmp	.+4      	; 0x313e <vfprintf+0x39c>
    313a:	8f ef       	ldi	r24, 0xFF	; 255
    313c:	9f ef       	ldi	r25, 0xFF	; 255
    313e:	2c 96       	adiw	r28, 0x0c	; 12
    3140:	e2 e1       	ldi	r30, 0x12	; 18
    3142:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__>

00003146 <__eerd_word_m16>:
    3146:	a8 e1       	ldi	r26, 0x18	; 24
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	42 e0       	ldi	r20, 0x02	; 2
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__eerd_blraw_m16>

00003152 <__eewr_word_m16>:
    3152:	0e 94 67 19 	call	0x32ce	; 0x32ce <__eewr_byte_m16>
    3156:	27 2f       	mov	r18, r23
    3158:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__eewr_r18_m16>

0000315c <__ctype_isfalse>:
    315c:	99 27       	eor	r25, r25
    315e:	88 27       	eor	r24, r24

00003160 <__ctype_istrue>:
    3160:	08 95       	ret

00003162 <strnlen_P>:
    3162:	fc 01       	movw	r30, r24
    3164:	05 90       	lpm	r0, Z+
    3166:	61 50       	subi	r22, 0x01	; 1
    3168:	70 40       	sbci	r23, 0x00	; 0
    316a:	01 10       	cpse	r0, r1
    316c:	d8 f7       	brcc	.-10     	; 0x3164 <strnlen_P+0x2>
    316e:	80 95       	com	r24
    3170:	90 95       	com	r25
    3172:	8e 0f       	add	r24, r30
    3174:	9f 1f       	adc	r25, r31
    3176:	08 95       	ret

00003178 <strnlen>:
    3178:	fc 01       	movw	r30, r24
    317a:	61 50       	subi	r22, 0x01	; 1
    317c:	70 40       	sbci	r23, 0x00	; 0
    317e:	01 90       	ld	r0, Z+
    3180:	01 10       	cpse	r0, r1
    3182:	d8 f7       	brcc	.-10     	; 0x317a <strnlen+0x2>
    3184:	80 95       	com	r24
    3186:	90 95       	com	r25
    3188:	8e 0f       	add	r24, r30
    318a:	9f 1f       	adc	r25, r31
    318c:	08 95       	ret

0000318e <fputc>:
    318e:	0f 93       	push	r16
    3190:	1f 93       	push	r17
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	18 2f       	mov	r17, r24
    3198:	09 2f       	mov	r16, r25
    319a:	eb 01       	movw	r28, r22
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	81 fd       	sbrc	r24, 1
    31a0:	03 c0       	rjmp	.+6      	; 0x31a8 <fputc+0x1a>
    31a2:	8f ef       	ldi	r24, 0xFF	; 255
    31a4:	9f ef       	ldi	r25, 0xFF	; 255
    31a6:	20 c0       	rjmp	.+64     	; 0x31e8 <fputc+0x5a>
    31a8:	82 ff       	sbrs	r24, 2
    31aa:	10 c0       	rjmp	.+32     	; 0x31cc <fputc+0x3e>
    31ac:	4e 81       	ldd	r20, Y+6	; 0x06
    31ae:	5f 81       	ldd	r21, Y+7	; 0x07
    31b0:	2c 81       	ldd	r18, Y+4	; 0x04
    31b2:	3d 81       	ldd	r19, Y+5	; 0x05
    31b4:	42 17       	cp	r20, r18
    31b6:	53 07       	cpc	r21, r19
    31b8:	7c f4       	brge	.+30     	; 0x31d8 <fputc+0x4a>
    31ba:	e8 81       	ld	r30, Y
    31bc:	f9 81       	ldd	r31, Y+1	; 0x01
    31be:	9f 01       	movw	r18, r30
    31c0:	2f 5f       	subi	r18, 0xFF	; 255
    31c2:	3f 4f       	sbci	r19, 0xFF	; 255
    31c4:	39 83       	std	Y+1, r19	; 0x01
    31c6:	28 83       	st	Y, r18
    31c8:	10 83       	st	Z, r17
    31ca:	06 c0       	rjmp	.+12     	; 0x31d8 <fputc+0x4a>
    31cc:	e8 85       	ldd	r30, Y+8	; 0x08
    31ce:	f9 85       	ldd	r31, Y+9	; 0x09
    31d0:	81 2f       	mov	r24, r17
    31d2:	09 95       	icall
    31d4:	89 2b       	or	r24, r25
    31d6:	29 f7       	brne	.-54     	; 0x31a2 <fputc+0x14>
    31d8:	2e 81       	ldd	r18, Y+6	; 0x06
    31da:	3f 81       	ldd	r19, Y+7	; 0x07
    31dc:	2f 5f       	subi	r18, 0xFF	; 255
    31de:	3f 4f       	sbci	r19, 0xFF	; 255
    31e0:	3f 83       	std	Y+7, r19	; 0x07
    31e2:	2e 83       	std	Y+6, r18	; 0x06
    31e4:	81 2f       	mov	r24, r17
    31e6:	90 2f       	mov	r25, r16
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	08 95       	ret

000031f2 <__ultoa_invert>:
    31f2:	fa 01       	movw	r30, r20
    31f4:	aa 27       	eor	r26, r26
    31f6:	28 30       	cpi	r18, 0x08	; 8
    31f8:	51 f1       	breq	.+84     	; 0x324e <__ultoa_invert+0x5c>
    31fa:	20 31       	cpi	r18, 0x10	; 16
    31fc:	81 f1       	breq	.+96     	; 0x325e <__ultoa_invert+0x6c>
    31fe:	e8 94       	clt
    3200:	6f 93       	push	r22
    3202:	6e 7f       	andi	r22, 0xFE	; 254
    3204:	6e 5f       	subi	r22, 0xFE	; 254
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	8f 4f       	sbci	r24, 0xFF	; 255
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	af 4f       	sbci	r26, 0xFF	; 255
    320e:	b1 e0       	ldi	r27, 0x01	; 1
    3210:	3e d0       	rcall	.+124    	; 0x328e <__ultoa_invert+0x9c>
    3212:	b4 e0       	ldi	r27, 0x04	; 4
    3214:	3c d0       	rcall	.+120    	; 0x328e <__ultoa_invert+0x9c>
    3216:	67 0f       	add	r22, r23
    3218:	78 1f       	adc	r23, r24
    321a:	89 1f       	adc	r24, r25
    321c:	9a 1f       	adc	r25, r26
    321e:	a1 1d       	adc	r26, r1
    3220:	68 0f       	add	r22, r24
    3222:	79 1f       	adc	r23, r25
    3224:	8a 1f       	adc	r24, r26
    3226:	91 1d       	adc	r25, r1
    3228:	a1 1d       	adc	r26, r1
    322a:	6a 0f       	add	r22, r26
    322c:	71 1d       	adc	r23, r1
    322e:	81 1d       	adc	r24, r1
    3230:	91 1d       	adc	r25, r1
    3232:	a1 1d       	adc	r26, r1
    3234:	20 d0       	rcall	.+64     	; 0x3276 <__ultoa_invert+0x84>
    3236:	09 f4       	brne	.+2      	; 0x323a <__ultoa_invert+0x48>
    3238:	68 94       	set
    323a:	3f 91       	pop	r19
    323c:	2a e0       	ldi	r18, 0x0A	; 10
    323e:	26 9f       	mul	r18, r22
    3240:	11 24       	eor	r1, r1
    3242:	30 19       	sub	r19, r0
    3244:	30 5d       	subi	r19, 0xD0	; 208
    3246:	31 93       	st	Z+, r19
    3248:	de f6       	brtc	.-74     	; 0x3200 <__ultoa_invert+0xe>
    324a:	cf 01       	movw	r24, r30
    324c:	08 95       	ret
    324e:	46 2f       	mov	r20, r22
    3250:	47 70       	andi	r20, 0x07	; 7
    3252:	40 5d       	subi	r20, 0xD0	; 208
    3254:	41 93       	st	Z+, r20
    3256:	b3 e0       	ldi	r27, 0x03	; 3
    3258:	0f d0       	rcall	.+30     	; 0x3278 <__ultoa_invert+0x86>
    325a:	c9 f7       	brne	.-14     	; 0x324e <__ultoa_invert+0x5c>
    325c:	f6 cf       	rjmp	.-20     	; 0x324a <__ultoa_invert+0x58>
    325e:	46 2f       	mov	r20, r22
    3260:	4f 70       	andi	r20, 0x0F	; 15
    3262:	40 5d       	subi	r20, 0xD0	; 208
    3264:	4a 33       	cpi	r20, 0x3A	; 58
    3266:	18 f0       	brcs	.+6      	; 0x326e <__ultoa_invert+0x7c>
    3268:	49 5d       	subi	r20, 0xD9	; 217
    326a:	31 fd       	sbrc	r19, 1
    326c:	40 52       	subi	r20, 0x20	; 32
    326e:	41 93       	st	Z+, r20
    3270:	02 d0       	rcall	.+4      	; 0x3276 <__ultoa_invert+0x84>
    3272:	a9 f7       	brne	.-22     	; 0x325e <__ultoa_invert+0x6c>
    3274:	ea cf       	rjmp	.-44     	; 0x324a <__ultoa_invert+0x58>
    3276:	b4 e0       	ldi	r27, 0x04	; 4
    3278:	a6 95       	lsr	r26
    327a:	97 95       	ror	r25
    327c:	87 95       	ror	r24
    327e:	77 95       	ror	r23
    3280:	67 95       	ror	r22
    3282:	ba 95       	dec	r27
    3284:	c9 f7       	brne	.-14     	; 0x3278 <__ultoa_invert+0x86>
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	61 05       	cpc	r22, r1
    328a:	71 05       	cpc	r23, r1
    328c:	08 95       	ret
    328e:	9b 01       	movw	r18, r22
    3290:	ac 01       	movw	r20, r24
    3292:	0a 2e       	mov	r0, r26
    3294:	06 94       	lsr	r0
    3296:	57 95       	ror	r21
    3298:	47 95       	ror	r20
    329a:	37 95       	ror	r19
    329c:	27 95       	ror	r18
    329e:	ba 95       	dec	r27
    32a0:	c9 f7       	brne	.-14     	; 0x3294 <__ultoa_invert+0xa2>
    32a2:	62 0f       	add	r22, r18
    32a4:	73 1f       	adc	r23, r19
    32a6:	84 1f       	adc	r24, r20
    32a8:	95 1f       	adc	r25, r21
    32aa:	a0 1d       	adc	r26, r0
    32ac:	08 95       	ret

000032ae <__eerd_block_m16>:
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22

000032b2 <__eerd_blraw_m16>:
    32b2:	fc 01       	movw	r30, r24
    32b4:	e1 99       	sbic	0x1c, 1	; 28
    32b6:	fe cf       	rjmp	.-4      	; 0x32b4 <__eerd_blraw_m16+0x2>
    32b8:	06 c0       	rjmp	.+12     	; 0x32c6 <__eerd_blraw_m16+0x14>
    32ba:	ff bb       	out	0x1f, r31	; 31
    32bc:	ee bb       	out	0x1e, r30	; 30
    32be:	e0 9a       	sbi	0x1c, 0	; 28
    32c0:	31 96       	adiw	r30, 0x01	; 1
    32c2:	0d b2       	in	r0, 0x1d	; 29
    32c4:	0d 92       	st	X+, r0
    32c6:	41 50       	subi	r20, 0x01	; 1
    32c8:	50 40       	sbci	r21, 0x00	; 0
    32ca:	b8 f7       	brcc	.-18     	; 0x32ba <__eerd_blraw_m16+0x8>
    32cc:	08 95       	ret

000032ce <__eewr_byte_m16>:
    32ce:	26 2f       	mov	r18, r22

000032d0 <__eewr_r18_m16>:
    32d0:	e1 99       	sbic	0x1c, 1	; 28
    32d2:	fe cf       	rjmp	.-4      	; 0x32d0 <__eewr_r18_m16>
    32d4:	9f bb       	out	0x1f, r25	; 31
    32d6:	8e bb       	out	0x1e, r24	; 30
    32d8:	2d bb       	out	0x1d, r18	; 29
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	e2 9a       	sbi	0x1c, 2	; 28
    32e0:	e1 9a       	sbi	0x1c, 1	; 28
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	01 96       	adiw	r24, 0x01	; 1
    32e6:	08 95       	ret

000032e8 <__mulsi3>:
    32e8:	db 01       	movw	r26, r22
    32ea:	8f 93       	push	r24
    32ec:	9f 93       	push	r25
    32ee:	0e 94 c5 19 	call	0x338a	; 0x338a <__muluhisi3>
    32f2:	bf 91       	pop	r27
    32f4:	af 91       	pop	r26
    32f6:	a2 9f       	mul	r26, r18
    32f8:	80 0d       	add	r24, r0
    32fa:	91 1d       	adc	r25, r1
    32fc:	a3 9f       	mul	r26, r19
    32fe:	90 0d       	add	r25, r0
    3300:	b2 9f       	mul	r27, r18
    3302:	90 0d       	add	r25, r0
    3304:	11 24       	eor	r1, r1
    3306:	08 95       	ret

00003308 <__udivmodsi4>:
    3308:	a1 e2       	ldi	r26, 0x21	; 33
    330a:	1a 2e       	mov	r1, r26
    330c:	aa 1b       	sub	r26, r26
    330e:	bb 1b       	sub	r27, r27
    3310:	fd 01       	movw	r30, r26
    3312:	0d c0       	rjmp	.+26     	; 0x332e <__udivmodsi4_ep>

00003314 <__udivmodsi4_loop>:
    3314:	aa 1f       	adc	r26, r26
    3316:	bb 1f       	adc	r27, r27
    3318:	ee 1f       	adc	r30, r30
    331a:	ff 1f       	adc	r31, r31
    331c:	a2 17       	cp	r26, r18
    331e:	b3 07       	cpc	r27, r19
    3320:	e4 07       	cpc	r30, r20
    3322:	f5 07       	cpc	r31, r21
    3324:	20 f0       	brcs	.+8      	; 0x332e <__udivmodsi4_ep>
    3326:	a2 1b       	sub	r26, r18
    3328:	b3 0b       	sbc	r27, r19
    332a:	e4 0b       	sbc	r30, r20
    332c:	f5 0b       	sbc	r31, r21

0000332e <__udivmodsi4_ep>:
    332e:	66 1f       	adc	r22, r22
    3330:	77 1f       	adc	r23, r23
    3332:	88 1f       	adc	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	1a 94       	dec	r1
    3338:	69 f7       	brne	.-38     	; 0x3314 <__udivmodsi4_loop>
    333a:	60 95       	com	r22
    333c:	70 95       	com	r23
    333e:	80 95       	com	r24
    3340:	90 95       	com	r25
    3342:	9b 01       	movw	r18, r22
    3344:	ac 01       	movw	r20, r24
    3346:	bd 01       	movw	r22, r26
    3348:	cf 01       	movw	r24, r30
    334a:	08 95       	ret

0000334c <__divmodsi4>:
    334c:	05 2e       	mov	r0, r21
    334e:	97 fb       	bst	r25, 7
    3350:	1e f4       	brtc	.+6      	; 0x3358 <__divmodsi4+0xc>
    3352:	00 94       	com	r0
    3354:	0e 94 bd 19 	call	0x337a	; 0x337a <__negsi2>
    3358:	57 fd       	sbrc	r21, 7
    335a:	07 d0       	rcall	.+14     	; 0x336a <__divmodsi4_neg2>
    335c:	0e 94 84 19 	call	0x3308	; 0x3308 <__udivmodsi4>
    3360:	07 fc       	sbrc	r0, 7
    3362:	03 d0       	rcall	.+6      	; 0x336a <__divmodsi4_neg2>
    3364:	4e f4       	brtc	.+18     	; 0x3378 <__divmodsi4_exit>
    3366:	0c 94 bd 19 	jmp	0x337a	; 0x337a <__negsi2>

0000336a <__divmodsi4_neg2>:
    336a:	50 95       	com	r21
    336c:	40 95       	com	r20
    336e:	30 95       	com	r19
    3370:	21 95       	neg	r18
    3372:	3f 4f       	sbci	r19, 0xFF	; 255
    3374:	4f 4f       	sbci	r20, 0xFF	; 255
    3376:	5f 4f       	sbci	r21, 0xFF	; 255

00003378 <__divmodsi4_exit>:
    3378:	08 95       	ret

0000337a <__negsi2>:
    337a:	90 95       	com	r25
    337c:	80 95       	com	r24
    337e:	70 95       	com	r23
    3380:	61 95       	neg	r22
    3382:	7f 4f       	sbci	r23, 0xFF	; 255
    3384:	8f 4f       	sbci	r24, 0xFF	; 255
    3386:	9f 4f       	sbci	r25, 0xFF	; 255
    3388:	08 95       	ret

0000338a <__muluhisi3>:
    338a:	0e 94 0f 1a 	call	0x341e	; 0x341e <__umulhisi3>
    338e:	a5 9f       	mul	r26, r21
    3390:	90 0d       	add	r25, r0
    3392:	b4 9f       	mul	r27, r20
    3394:	90 0d       	add	r25, r0
    3396:	a4 9f       	mul	r26, r20
    3398:	80 0d       	add	r24, r0
    339a:	91 1d       	adc	r25, r1
    339c:	11 24       	eor	r1, r1
    339e:	08 95       	ret

000033a0 <__mulshisi3>:
    33a0:	b7 ff       	sbrs	r27, 7
    33a2:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__muluhisi3>

000033a6 <__mulohisi3>:
    33a6:	0e 94 c5 19 	call	0x338a	; 0x338a <__muluhisi3>
    33aa:	82 1b       	sub	r24, r18
    33ac:	93 0b       	sbc	r25, r19
    33ae:	08 95       	ret

000033b0 <__prologue_saves__>:
    33b0:	2f 92       	push	r2
    33b2:	3f 92       	push	r3
    33b4:	4f 92       	push	r4
    33b6:	5f 92       	push	r5
    33b8:	6f 92       	push	r6
    33ba:	7f 92       	push	r7
    33bc:	8f 92       	push	r8
    33be:	9f 92       	push	r9
    33c0:	af 92       	push	r10
    33c2:	bf 92       	push	r11
    33c4:	cf 92       	push	r12
    33c6:	df 92       	push	r13
    33c8:	ef 92       	push	r14
    33ca:	ff 92       	push	r15
    33cc:	0f 93       	push	r16
    33ce:	1f 93       	push	r17
    33d0:	cf 93       	push	r28
    33d2:	df 93       	push	r29
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	ca 1b       	sub	r28, r26
    33da:	db 0b       	sbc	r29, r27
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	cd bf       	out	0x3d, r28	; 61
    33e6:	09 94       	ijmp

000033e8 <__epilogue_restores__>:
    33e8:	2a 88       	ldd	r2, Y+18	; 0x12
    33ea:	39 88       	ldd	r3, Y+17	; 0x11
    33ec:	48 88       	ldd	r4, Y+16	; 0x10
    33ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    33f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    33f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    33f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    33f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    33f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    33fa:	b9 84       	ldd	r11, Y+9	; 0x09
    33fc:	c8 84       	ldd	r12, Y+8	; 0x08
    33fe:	df 80       	ldd	r13, Y+7	; 0x07
    3400:	ee 80       	ldd	r14, Y+6	; 0x06
    3402:	fd 80       	ldd	r15, Y+5	; 0x05
    3404:	0c 81       	ldd	r16, Y+4	; 0x04
    3406:	1b 81       	ldd	r17, Y+3	; 0x03
    3408:	aa 81       	ldd	r26, Y+2	; 0x02
    340a:	b9 81       	ldd	r27, Y+1	; 0x01
    340c:	ce 0f       	add	r28, r30
    340e:	d1 1d       	adc	r29, r1
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	ed 01       	movw	r28, r26
    341c:	08 95       	ret

0000341e <__umulhisi3>:
    341e:	a2 9f       	mul	r26, r18
    3420:	b0 01       	movw	r22, r0
    3422:	b3 9f       	mul	r27, r19
    3424:	c0 01       	movw	r24, r0
    3426:	a3 9f       	mul	r26, r19
    3428:	70 0d       	add	r23, r0
    342a:	81 1d       	adc	r24, r1
    342c:	11 24       	eor	r1, r1
    342e:	91 1d       	adc	r25, r1
    3430:	b2 9f       	mul	r27, r18
    3432:	70 0d       	add	r23, r0
    3434:	81 1d       	adc	r24, r1
    3436:	11 24       	eor	r1, r1
    3438:	91 1d       	adc	r25, r1
    343a:	08 95       	ret

0000343c <_exit>:
    343c:	f8 94       	cli

0000343e <__stop_program>:
    343e:	ff cf       	rjmp	.-2      	; 0x343e <__stop_program>
