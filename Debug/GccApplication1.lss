
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002e3e  00002ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c0  008000c0  00002f32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f32  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00002f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005ae5  00000000  00000000  00003206  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f70  00000000  00000000  00008ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cd8  00000000  00000000  00009c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000af8  00000000  00000000  0000a934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a40  00000000  00000000  0000b42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000031a8  00000000  00000000  0000be6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  0000f014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      54:	00 0b       	sbc	r16, r16
      56:	1b 0b       	sbc	r17, r27
      58:	43 0c       	add	r4, r3
      5a:	43 0c       	add	r4, r3
      5c:	43 0c       	add	r4, r3
      5e:	43 0c       	add	r4, r3
      60:	43 0c       	add	r4, r3
      62:	43 0c       	add	r4, r3
      64:	43 0c       	add	r4, r3
      66:	21 0b       	sbc	r18, r17
      68:	43 0c       	add	r4, r3
      6a:	43 0c       	add	r4, r3
      6c:	43 0c       	add	r4, r3
      6e:	27 0b       	sbc	r18, r23
      70:	2f 0b       	sbc	r18, r31
      72:	37 0b       	sbc	r19, r23
      74:	5e 0b       	sbc	r21, r30
      76:	85 0b       	sbc	r24, r21
      78:	ac 0b       	sbc	r26, r28
      7a:	d3 0b       	sbc	r29, r19
      7c:	fa 0b       	sbc	r31, r26
      7e:	21 0c       	add	r2, r1
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfc>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef512>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates1XEii+0x2c>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d6>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef746>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b8>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
      d4:	3f 05       	cpc	r19, r15
      d6:	a8 4c       	sbci	r26, 0xC8	; 200
      d8:	cd b2       	in	r12, 0x1d	; 29
      da:	d4 4e       	sbci	r29, 0xE4	; 228
      dc:	b9 38       	cpi	r27, 0x89	; 137
      de:	36 a9       	ldd	r19, Z+54	; 0x36
      e0:	02 0c       	add	r0, r2
      e2:	50 b9       	out	0x00, r21	; 0
      e4:	91 86       	std	Z+9, r9	; 0x09
      e6:	88 08       	sbc	r8, r8
      e8:	3c a6       	std	Y+44, r3	; 0x2c
      ea:	aa aa       	std	Y+50, r10	; 0x32
      ec:	2a be       	out	0x3a, r2	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 00       	.word	0x003f	; ????

000000f4 <__ctors_start>:
      f4:	31 09       	sbc	r19, r1

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf e5       	ldi	r28, 0x5F	; 95
      fc:	d4 e0       	ldi	r29, 0x04	; 4
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	10 e0       	ldi	r17, 0x00	; 0
     104:	a0 e6       	ldi	r26, 0x60	; 96
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	ee e3       	ldi	r30, 0x3E	; 62
     10a:	fe e2       	ldi	r31, 0x2E	; 46
     10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
     10e:	05 90       	lpm	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	a0 3c       	cpi	r26, 0xC0	; 192
     114:	b1 07       	cpc	r27, r17
     116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>

00000118 <__do_clear_bss>:
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	a0 ec       	ldi	r26, 0xC0	; 192
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
     120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
     122:	a8 3c       	cpi	r26, 0xC8	; 200
     124:	b2 07       	cpc	r27, r18
     126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>

00000128 <__do_global_ctors>:
     128:	10 e0       	ldi	r17, 0x00	; 0
     12a:	c6 ef       	ldi	r28, 0xF6	; 246
     12c:	d0 e0       	ldi	r29, 0x00	; 0
     12e:	04 c0       	rjmp	.+8      	; 0x138 <__do_global_ctors+0x10>
     130:	22 97       	sbiw	r28, 0x02	; 2
     132:	fe 01       	movw	r30, r28
     134:	0e 94 11 11 	call	0x2222	; 0x2222 <__tablejump__>
     138:	c4 3f       	cpi	r28, 0xF4	; 244
     13a:	d1 07       	cpc	r29, r17
     13c:	c9 f7       	brne	.-14     	; 0x130 <__do_global_ctors+0x8>
     13e:	0e 94 36 09 	call	0x126c	; 0x126c <main>
     142:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	fc 01       	movw	r30, r24
     150:	40 83       	st	Z, r20
     152:	51 83       	std	Z+1, r21	; 0x01
     154:	62 83       	std	Z+2, r22	; 0x02
     156:	73 83       	std	Z+3, r23	; 0x03
     158:	04 83       	std	Z+4, r16	; 0x04
     15a:	15 83       	std	Z+5, r17	; 0x05
     15c:	26 83       	std	Z+6, r18	; 0x06
     15e:	37 83       	std	Z+7, r19	; 0x07
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	08 95       	ret

00000166 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     166:	fc 01       	movw	r30, r24
     168:	10 82       	st	Z, r1
     16a:	11 82       	std	Z+1, r1	; 0x01
     16c:	12 82       	std	Z+2, r1	; 0x02
     16e:	13 82       	std	Z+3, r1	; 0x03
     170:	14 82       	std	Z+4, r1	; 0x04
     172:	15 82       	std	Z+5, r1	; 0x05
     174:	16 82       	std	Z+6, r1	; 0x06
     176:	17 82       	std	Z+7, r1	; 0x07
     178:	08 95       	ret

0000017a <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	68 97       	sbiw	r28, 0x18	; 24
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	5c 01       	movw	r10, r24
     1a0:	09 8b       	std	Y+17, r16	; 0x11
     1a2:	1a 8b       	std	Y+18, r17	; 0x12
     1a4:	2b 8b       	std	Y+19, r18	; 0x13
     1a6:	3c 8b       	std	Y+20, r19	; 0x14
     1a8:	4d 8b       	std	Y+21, r20	; 0x15
     1aa:	5e 8b       	std	Y+22, r21	; 0x16
     1ac:	6f 8b       	std	Y+23, r22	; 0x17
     1ae:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     1b0:	2d 89       	ldd	r18, Y+21	; 0x15
     1b2:	3e 89       	ldd	r19, Y+22	; 0x16
     1b4:	4f 89       	ldd	r20, Y+23	; 0x17
     1b6:	58 8d       	ldd	r21, Y+24	; 0x18
     1b8:	fc 01       	movw	r30, r24
     1ba:	64 81       	ldd	r22, Z+4	; 0x04
     1bc:	75 81       	ldd	r23, Z+5	; 0x05
     1be:	86 81       	ldd	r24, Z+6	; 0x06
     1c0:	97 81       	ldd	r25, Z+7	; 0x07
     1c2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__addsf3>
     1c6:	6b 01       	movw	r12, r22
     1c8:	7c 01       	movw	r14, r24
     1ca:	29 89       	ldd	r18, Y+17	; 0x11
     1cc:	3a 89       	ldd	r19, Y+18	; 0x12
     1ce:	4b 89       	ldd	r20, Y+19	; 0x13
     1d0:	5c 89       	ldd	r21, Y+20	; 0x14
     1d2:	f5 01       	movw	r30, r10
     1d4:	60 81       	ld	r22, Z
     1d6:	71 81       	ldd	r23, Z+1	; 0x01
     1d8:	82 81       	ldd	r24, Z+2	; 0x02
     1da:	93 81       	ldd	r25, Z+3	; 0x03
     1dc:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__addsf3>
     1e0:	ab 01       	movw	r20, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	97 01       	movw	r18, r14
     1e6:	86 01       	movw	r16, r12
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     1f0:	88 e0       	ldi	r24, 0x08	; 8
     1f2:	fe 01       	movw	r30, r28
     1f4:	31 96       	adiw	r30, 0x01	; 1
     1f6:	de 01       	movw	r26, r28
     1f8:	19 96       	adiw	r26, 0x09	; 9
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	8a 95       	dec	r24
     200:	e1 f7       	brne	.-8      	; 0x1fa <_ZN7Complex3addES_+0x80>
     202:	29 85       	ldd	r18, Y+9	; 0x09
     204:	3a 85       	ldd	r19, Y+10	; 0x0a
     206:	4b 85       	ldd	r20, Y+11	; 0x0b
     208:	5c 85       	ldd	r21, Y+12	; 0x0c
     20a:	6d 85       	ldd	r22, Y+13	; 0x0d
     20c:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     20e:	8f 85       	ldd	r24, Y+15	; 0x0f
     210:	98 89       	ldd	r25, Y+16	; 0x10
     212:	68 96       	adiw	r28, 0x18	; 24
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	08 95       	ret

00000234 <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     234:	4f 92       	push	r4
     236:	5f 92       	push	r5
     238:	6f 92       	push	r6
     23a:	7f 92       	push	r7
     23c:	8f 92       	push	r8
     23e:	9f 92       	push	r9
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	a0 97       	sbiw	r28, 0x20	; 32
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	09 8b       	std	Y+17, r16	; 0x11
     266:	1a 8b       	std	Y+18, r17	; 0x12
     268:	2b 8b       	std	Y+19, r18	; 0x13
     26a:	3c 8b       	std	Y+20, r19	; 0x14
     26c:	4d 8b       	std	Y+21, r20	; 0x15
     26e:	5e 8b       	std	Y+22, r21	; 0x16
     270:	6f 8b       	std	Y+23, r22	; 0x17
     272:	78 8f       	std	Y+24, r23	; 0x18
     274:	89 88       	ldd	r8, Y+17	; 0x11
     276:	9a 88       	ldd	r9, Y+18	; 0x12
     278:	ab 88       	ldd	r10, Y+19	; 0x13
     27a:	bc 88       	ldd	r11, Y+20	; 0x14
     27c:	2d 89       	ldd	r18, Y+21	; 0x15
     27e:	3e 89       	ldd	r19, Y+22	; 0x16
     280:	4f 89       	ldd	r20, Y+23	; 0x17
     282:	58 8d       	ldd	r21, Y+24	; 0x18
     284:	2d 8f       	std	Y+29, r18	; 0x1d
     286:	3e 8f       	std	Y+30, r19	; 0x1e
     288:	4f 8f       	std	Y+31, r20	; 0x1f
     28a:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     28c:	fc 01       	movw	r30, r24
     28e:	c0 80       	ld	r12, Z
     290:	d1 80       	ldd	r13, Z+1	; 0x01
     292:	e2 80       	ldd	r14, Z+2	; 0x02
     294:	f3 80       	ldd	r15, Z+3	; 0x03
     296:	24 81       	ldd	r18, Z+4	; 0x04
     298:	35 81       	ldd	r19, Z+5	; 0x05
     29a:	46 81       	ldd	r20, Z+6	; 0x06
     29c:	57 81       	ldd	r21, Z+7	; 0x07
     29e:	29 8f       	std	Y+25, r18	; 0x19
     2a0:	3a 8f       	std	Y+26, r19	; 0x1a
     2a2:	4b 8f       	std	Y+27, r20	; 0x1b
     2a4:	5c 8f       	std	Y+28, r21	; 0x1c
     2a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2aa:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2ac:	58 a1       	ldd	r21, Y+32	; 0x20
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     2b6:	2b 01       	movw	r4, r22
     2b8:	3c 01       	movw	r6, r24
     2ba:	a5 01       	movw	r20, r10
     2bc:	94 01       	movw	r18, r8
     2be:	69 8d       	ldd	r22, Y+25	; 0x19
     2c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2c6:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     2ca:	9b 01       	movw	r18, r22
     2cc:	ac 01       	movw	r20, r24
     2ce:	c3 01       	movw	r24, r6
     2d0:	b2 01       	movw	r22, r4
     2d2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__addsf3>
     2d6:	2b 01       	movw	r4, r22
     2d8:	3c 01       	movw	r6, r24
     2da:	a5 01       	movw	r20, r10
     2dc:	94 01       	movw	r18, r8
     2de:	c7 01       	movw	r24, r14
     2e0:	b6 01       	movw	r22, r12
     2e2:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     2e6:	6b 01       	movw	r12, r22
     2e8:	7c 01       	movw	r14, r24
     2ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2ee:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2f0:	58 a1       	ldd	r21, Y+32	; 0x20
     2f2:	69 8d       	ldd	r22, Y+25	; 0x19
     2f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2fa:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	c7 01       	movw	r24, r14
     304:	b6 01       	movw	r22, r12
     306:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__subsf3>
     30a:	ab 01       	movw	r20, r22
     30c:	bc 01       	movw	r22, r24
     30e:	93 01       	movw	r18, r6
     310:	82 01       	movw	r16, r4
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	de 01       	movw	r26, r28
     322:	19 96       	adiw	r26, 0x09	; 9
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <_ZN7Complex3mulES_+0xf0>
     32c:	29 85       	ldd	r18, Y+9	; 0x09
     32e:	3a 85       	ldd	r19, Y+10	; 0x0a
     330:	4b 85       	ldd	r20, Y+11	; 0x0b
     332:	5c 85       	ldd	r21, Y+12	; 0x0c
     334:	6d 85       	ldd	r22, Y+13	; 0x0d
     336:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     338:	8f 85       	ldd	r24, Y+15	; 0x0f
     33a:	98 89       	ldd	r25, Y+16	; 0x10
     33c:	a0 96       	adiw	r28, 0x20	; 32
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	08 95       	ret

0000036a <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     36a:	fc 01       	movw	r30, r24
     36c:	20 81       	ld	r18, Z
     36e:	31 81       	ldd	r19, Z+1	; 0x01
     370:	42 81       	ldd	r20, Z+2	; 0x02
     372:	53 81       	ldd	r21, Z+3	; 0x03
     374:	64 81       	ldd	r22, Z+4	; 0x04
     376:	75 81       	ldd	r23, Z+5	; 0x05
     378:	86 81       	ldd	r24, Z+6	; 0x06
     37a:	97 81       	ldd	r25, Z+7	; 0x07
     37c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__divsf3>
     380:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <atan>
     384:	08 95       	ret

00000386 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     386:	85 e0       	ldi	r24, 0x05	; 5
     388:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     38a:	81 b1       	in	r24, 0x01	; 1
     38c:	8c 7f       	andi	r24, 0xFC	; 252
     38e:	81 b9       	out	0x01, r24	; 1
     390:	08 95       	ret

00000392 <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     392:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     394:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     396:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     398:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     39a:	06 b6       	in	r0, 0x36	; 54
     39c:	07 fe       	sbrs	r0, 7
     39e:	fd cf       	rjmp	.-6      	; 0x39a <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     3a0:	81 b1       	in	r24, 0x01	; 1
     3a2:	88 7f       	andi	r24, 0xF8	; 248
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	09 f0       	breq	.+2      	; 0x3aa <_ZN6EEProm4readEj+0x18>
     3a8:	41 c0       	rjmp	.+130    	; 0x42c <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     3aa:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     3ac:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     3ae:	06 b6       	in	r0, 0x36	; 54
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     3b4:	81 b1       	in	r24, 0x01	; 1
     3b6:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     3b8:	88 31       	cpi	r24, 0x18	; 24
     3ba:	71 f7       	brne	.-36     	; 0x398 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     3bc:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3be:	84 e8       	ldi	r24, 0x84	; 132
     3c0:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3c2:	06 b6       	in	r0, 0x36	; 54
     3c4:	07 fe       	sbrs	r0, 7
     3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3c8:	81 b1       	in	r24, 0x01	; 1
     3ca:	88 7f       	andi	r24, 0xF8	; 248
     3cc:	88 32       	cpi	r24, 0x28	; 40
     3ce:	81 f5       	brne	.+96     	; 0x430 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     3d0:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3d2:	84 e8       	ldi	r24, 0x84	; 132
     3d4:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3d6:	06 b6       	in	r0, 0x36	; 54
     3d8:	07 fe       	sbrs	r0, 7
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3dc:	81 b1       	in	r24, 0x01	; 1
     3de:	88 7f       	andi	r24, 0xF8	; 248
     3e0:	88 32       	cpi	r24, 0x28	; 40
     3e2:	41 f5       	brne	.+80     	; 0x434 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3e4:	84 ea       	ldi	r24, 0xA4	; 164
     3e6:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3e8:	06 b6       	in	r0, 0x36	; 54
     3ea:	07 fe       	sbrs	r0, 7
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     3ee:	81 b1       	in	r24, 0x01	; 1
     3f0:	88 7f       	andi	r24, 0xF8	; 248
     3f2:	80 31       	cpi	r24, 0x10	; 16
     3f4:	09 f5       	brne	.+66     	; 0x438 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     3f6:	81 ea       	ldi	r24, 0xA1	; 161
     3f8:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3fa:	84 e8       	ldi	r24, 0x84	; 132
     3fc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3fe:	06 b6       	in	r0, 0x36	; 54
     400:	07 fe       	sbrs	r0, 7
     402:	fd cf       	rjmp	.-6      	; 0x3fe <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     404:	81 b1       	in	r24, 0x01	; 1
     406:	88 7f       	andi	r24, 0xF8	; 248
     408:	80 34       	cpi	r24, 0x40	; 64
     40a:	c1 f4       	brne	.+48     	; 0x43c <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     40c:	84 e8       	ldi	r24, 0x84	; 132
     40e:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     410:	06 b6       	in	r0, 0x36	; 54
     412:	07 fe       	sbrs	r0, 7
     414:	fd cf       	rjmp	.-6      	; 0x410 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     416:	81 b1       	in	r24, 0x01	; 1
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	88 35       	cpi	r24, 0x58	; 88
     41c:	89 f4       	brne	.+34     	; 0x440 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     41e:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     420:	94 e9       	ldi	r25, 0x94	; 148
     422:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     424:	06 b6       	in	r0, 0x36	; 54
     426:	04 fc       	sbrc	r0, 4
     428:	fd cf       	rjmp	.-6      	; 0x424 <_ZN6EEProm4readEj+0x92>
     42a:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     440:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     442:	08 95       	ret

00000444 <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	c4 56       	subi	r28, 0x64	; 100
     45a:	d1 09       	sbc	r29, r1
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	6c 01       	movw	r12, r24
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     472:	b8 01       	movw	r22, r16
     474:	c6 01       	movw	r24, r12
     476:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN6EEProm4readEj>
     47a:	f7 01       	movw	r30, r14
     47c:	81 93       	st	Z+, r24
     47e:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     480:	8f 3f       	cpi	r24, 0xFF	; 255
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	32 97       	sbiw	r30, 0x02	; 2
     486:	20 81       	ld	r18, Z
     488:	2f 3f       	cpi	r18, 0xFF	; 255
     48a:	61 f4       	brne	.+24     	; 0x4a4 <__stack+0x45>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	20 81       	ld	r18, Z
     490:	2f 3f       	cpi	r18, 0xFF	; 255
     492:	41 f4       	brne	.+16     	; 0x4a4 <__stack+0x45>
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	20 81       	ld	r18, Z
     498:	2f 3f       	cpi	r18, 0xFF	; 255
     49a:	21 f4       	brne	.+8      	; 0x4a4 <__stack+0x45>
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	8f 3f       	cpi	r24, 0xFF	; 255
     4a2:	19 f0       	breq	.+6      	; 0x4aa <__stack+0x4b>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4a4:	0f 5f       	subi	r16, 0xFF	; 255
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     4a8:	e4 cf       	rjmp	.-56     	; 0x472 <__stack+0x13>
	return eeprom_mem;
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	cc 59       	subi	r28, 0x9C	; 156
     4b0:	df 4f       	sbci	r29, 0xFF	; 255
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret

000004ce <_Z12print_statesiP7ComplexPc>:
Gates::Gates(){setup_seed();}

Serial s;
QEPU::Utils u;

void print_states(int qb_count,Complex * vec,char* message){
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	7c 01       	movw	r14, r24
     4dc:	06 2f       	mov	r16, r22
     4de:	17 2f       	mov	r17, r23
	s.writestrln(message);
     4e0:	ba 01       	movw	r22, r20
     4e2:	81 ec       	ldi	r24, 0xC1	; 193
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count*2;i++){
     4ea:	ee 0c       	add	r14, r14
     4ec:	ff 1c       	adc	r15, r15
     4ee:	1e 14       	cp	r1, r14
     4f0:	1f 04       	cpc	r1, r15
     4f2:	0c f0       	brlt	.+2      	; 0x4f6 <_Z12print_statesiP7ComplexPc+0x28>
     4f4:	47 c0       	rjmp	.+142    	; 0x584 <_Z12print_statesiP7ComplexPc+0xb6>
     4f6:	c0 2f       	mov	r28, r16
     4f8:	d1 2f       	mov	r29, r17
     4fa:	00 e0       	ldi	r16, 0x00	; 0
     4fc:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
     4fe:	6a e6       	ldi	r22, 0x6A	; 106
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	81 ec       	ldi	r24, 0xC1	; 193
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6Serial8writestrEPc>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	4a e7       	ldi	r20, 0x7A	; 122
     510:	54 e4       	ldi	r21, 0x44	; 68
     512:	68 81       	ld	r22, Y
     514:	79 81       	ldd	r23, Y+1	; 0x01
     516:	8a 81       	ldd	r24, Y+2	; 0x02
     518:	9b 81       	ldd	r25, Y+3	; 0x03
     51a:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     51e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__fixsfsi>
     522:	80 ec       	ldi	r24, 0xC0	; 192
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 9d 0a 	call	0x153a	; 0x153a <_ZN4QEPU5Utils7int2strEi>
     52a:	bc 01       	movw	r22, r24
     52c:	81 ec       	ldi	r24, 0xC1	; 193
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
     534:	6e e6       	ldi	r22, 0x6E	; 110
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	81 ec       	ldi	r24, 0xC1	; 193
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6Serial8writestrEPc>
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	4a e7       	ldi	r20, 0x7A	; 122
     546:	54 e4       	ldi	r21, 0x44	; 68
     548:	6c 81       	ldd	r22, Y+4	; 0x04
     54a:	7d 81       	ldd	r23, Y+5	; 0x05
     54c:	8e 81       	ldd	r24, Y+6	; 0x06
     54e:	9f 81       	ldd	r25, Y+7	; 0x07
     550:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     554:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__fixsfsi>
     558:	80 ec       	ldi	r24, 0xC0	; 192
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 9d 0a 	call	0x153a	; 0x153a <_ZN4QEPU5Utils7int2strEi>
     560:	bc 01       	movw	r22, r24
     562:	81 ec       	ldi	r24, 0xC1	; 193
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6Serial8writestrEPc>
		s.writestrln("");
     56a:	6f ea       	ldi	r22, 0xAF	; 175
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	81 ec       	ldi	r24, 0xC1	; 193
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN6Serial10writestrlnEPc>
Serial s;
QEPU::Utils u;

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count*2;i++){
     576:	0f 5f       	subi	r16, 0xFF	; 255
     578:	1f 4f       	sbci	r17, 0xFF	; 255
     57a:	28 96       	adiw	r28, 0x08	; 8
     57c:	0e 15       	cp	r16, r14
     57e:	1f 05       	cpc	r17, r15
     580:	09 f0       	breq	.+2      	; 0x584 <_Z12print_statesiP7ComplexPc+0xb6>
     582:	bd cf       	rjmp	.-134    	; 0x4fe <_Z12print_statesiP7ComplexPc+0x30>
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	08 95       	ret

00000592 <_ZN5Gates10setup_seedEv>:

void Gates::setup_seed(){
     592:	cf 93       	push	r28
	unsigned char oldADMUX = ADMUX;
     594:	c7 b1       	in	r28, 0x07	; 7
	ADMUX |=  _BV(MUX0); //choose ADC1 on PB2
     596:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA |= _BV(ADPS2) |_BV(ADPS1) |_BV(ADPS0); //set prescaler to max value, 128
     598:	86 b1       	in	r24, 0x06	; 6
     59a:	87 60       	ori	r24, 0x07	; 7
     59c:	86 b9       	out	0x06, r24	; 6

	ADCSRA |= _BV(ADEN); //enable the ADC
     59e:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= _BV(ADSC);//start conversion
     5a0:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & _BV(ADSC)); //wait until the hardware clears the flag. Note semicolon!
     5a2:	36 99       	sbic	0x06, 6	; 6
     5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <_ZN5Gates10setup_seedEv+0x10>

	unsigned char byte1 = ADCL;
     5a6:	24 b1       	in	r18, 0x04	; 4

	ADCSRA |= _BV(ADSC);//start conversion
     5a8:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & _BV(ADSC)); //wait again note semicolon!
     5aa:	36 99       	sbic	0x06, 6	; 6
     5ac:	fe cf       	rjmp	.-4      	; 0x5aa <_ZN5Gates10setup_seedEv+0x18>

	unsigned char byte2 = ADCL;
     5ae:	84 b1       	in	r24, 0x04	; 4

	unsigned int seed = byte1 << 8 | byte2;
     5b0:	90 e0       	ldi	r25, 0x00	; 0

	srand(seed);
     5b2:	92 2b       	or	r25, r18
     5b4:	0e 94 8f 12 	call	0x251e	; 0x251e <srand>

	ADCSRA &= ~_BV(ADEN); //disable ADC
     5b8:	37 98       	cbi	0x06, 7	; 6

	ADMUX = oldADMUX;
     5ba:	c7 b9       	out	0x07, r28	; 7
}
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <_ZN5GatesC1Ev>:
#include "gates.h"
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
Gates::Gates(){setup_seed();}
     5c0:	0e 94 c9 02 	call	0x592	; 0x592 <_ZN5Gates10setup_seedEv>
     5c4:	08 95       	ret

000005c6 <_ZN5Gates9kroneckerEP7Complexi>:
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     5c6:	14 16       	cp	r1, r20
     5c8:	15 06       	cpc	r1, r21
     5ca:	64 f4       	brge	.+24     	; 0x5e4 <_ZN5Gates9kroneckerEP7Complexi+0x1e>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	2f 5f       	subi	r18, 0xFF	; 255
     5da:	3f 4f       	sbci	r19, 0xFF	; 255
     5dc:	24 17       	cp	r18, r20
     5de:	35 07       	cpc	r19, r21
     5e0:	c9 f7       	brne	.-14     	; 0x5d4 <_ZN5Gates9kroneckerEP7Complexi+0xe>
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <_ZN5Gates9kroneckerEP7Complexi+0x22>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0
	return result;
}

Complex * Gates::kronecker(Complex * vec,int qb_count){
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	0e 94 15 11 	call	0x222a	; 0x222a <malloc>
	
	return kronvec;
}
     5f8:	08 95       	ret

000005fa <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     5fa:	2f 92       	push	r2
     5fc:	3f 92       	push	r3
     5fe:	4f 92       	push	r4
     600:	5f 92       	push	r5
     602:	6f 92       	push	r6
     604:	7f 92       	push	r7
     606:	8f 92       	push	r8
     608:	9f 92       	push	r9
     60a:	af 92       	push	r10
     60c:	bf 92       	push	r11
     60e:	cf 92       	push	r12
     610:	df 92       	push	r13
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	28 97       	sbiw	r28, 0x08	; 8
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	9e 83       	std	Y+6, r25	; 0x06
     630:	8d 83       	std	Y+5, r24	; 0x05
     632:	7a 83       	std	Y+2, r23	; 0x02
     634:	69 83       	std	Y+1, r22	; 0x01
     636:	04 2f       	mov	r16, r20
     638:	15 2f       	mov	r17, r21
     63a:	c2 2e       	mov	r12, r18
     63c:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     63e:	cb 01       	movw	r24, r22
     640:	82 95       	swap	r24
     642:	92 95       	swap	r25
     644:	90 7f       	andi	r25, 0xF0	; 240
     646:	98 27       	eor	r25, r24
     648:	80 7f       	andi	r24, 0xF0	; 240
     64a:	98 27       	eor	r25, r24
     64c:	0e 94 15 11 	call	0x222a	; 0x222a <malloc>
     650:	8b 83       	std	Y+3, r24	; 0x03
     652:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     654:	29 80       	ldd	r2, Y+1	; 0x01
     656:	3a 80       	ldd	r3, Y+2	; 0x02
     658:	22 0c       	add	r2, r2
     65a:	33 1c       	adc	r3, r3
     65c:	12 14       	cp	r1, r2
     65e:	13 04       	cpc	r1, r3
     660:	0c f0       	brlt	.+2      	; 0x664 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     662:	ac c0       	rjmp	.+344    	; 0x7bc <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     664:	a8 2e       	mov	r10, r24
     666:	b9 2e       	mov	r11, r25
     668:	e0 2e       	mov	r14, r16
     66a:	f1 2e       	mov	r15, r17
     66c:	0c 2d       	mov	r16, r12
     66e:	1d 2d       	mov	r17, r13
     670:	81 2c       	mov	r8, r1
     672:	91 2c       	mov	r9, r1
     674:	b8 86       	std	Y+8, r11	; 0x08
     676:	af 82       	std	Y+7, r10	; 0x07
     678:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     67a:	f7 01       	movw	r30, r14
     67c:	41 90       	ld	r4, Z+
     67e:	51 90       	ld	r5, Z+
     680:	7f 01       	movw	r14, r30
     682:	66 24       	eor	r6, r6
     684:	57 fc       	sbrc	r5, 7
     686:	60 94       	com	r6
     688:	76 2c       	mov	r7, r6
     68a:	c3 01       	movw	r24, r6
     68c:	b2 01       	movw	r22, r4
     68e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__floatsisf>
     692:	2b ed       	ldi	r18, 0xDB	; 219
     694:	3f e0       	ldi	r19, 0x0F	; 15
     696:	49 e4       	ldi	r20, 0x49	; 73
     698:	50 e4       	ldi	r21, 0x40	; 64
     69a:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	44 eb       	ldi	r20, 0xB4	; 180
     6a4:	53 e4       	ldi	r21, 0x43	; 67
     6a6:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__divsf3>
     6aa:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <cos>
     6ae:	ef 81       	ldd	r30, Y+7	; 0x07
     6b0:	f8 85       	ldd	r31, Y+8	; 0x08
     6b2:	60 83       	st	Z, r22
     6b4:	71 83       	std	Z+1, r23	; 0x01
     6b6:	82 83       	std	Z+2, r24	; 0x02
     6b8:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     6ba:	c3 01       	movw	r24, r6
     6bc:	b2 01       	movw	r22, r4
     6be:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__floatsisf>
     6c2:	2b ed       	ldi	r18, 0xDB	; 219
     6c4:	3f e0       	ldi	r19, 0x0F	; 15
     6c6:	49 e4       	ldi	r20, 0x49	; 73
     6c8:	50 e4       	ldi	r21, 0x40	; 64
     6ca:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	44 eb       	ldi	r20, 0xB4	; 180
     6d4:	53 e4       	ldi	r21, 0x43	; 67
     6d6:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__divsf3>
     6da:	0e 94 9e 10 	call	0x213c	; 0x213c <sin>
     6de:	2b 01       	movw	r4, r22
     6e0:	3c 01       	movw	r6, r24
     6e2:	58 01       	movw	r10, r16
     6e4:	f8 01       	movw	r30, r16
     6e6:	61 91       	ld	r22, Z+
     6e8:	71 91       	ld	r23, Z+
     6ea:	8f 01       	movw	r16, r30
     6ec:	88 27       	eor	r24, r24
     6ee:	77 fd       	sbrc	r23, 7
     6f0:	80 95       	com	r24
     6f2:	98 2f       	mov	r25, r24
     6f4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__floatsisf>
     6f8:	2b ed       	ldi	r18, 0xDB	; 219
     6fa:	3f e0       	ldi	r19, 0x0F	; 15
     6fc:	49 e4       	ldi	r20, 0x49	; 73
     6fe:	50 e4       	ldi	r21, 0x40	; 64
     700:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	44 e3       	ldi	r20, 0x34	; 52
     70a:	53 e4       	ldi	r21, 0x43	; 67
     70c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__divsf3>
     710:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <cos>
     714:	9b 01       	movw	r18, r22
     716:	ac 01       	movw	r20, r24
     718:	c3 01       	movw	r24, r6
     71a:	b2 01       	movw	r22, r4
     71c:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     720:	ef 81       	ldd	r30, Y+7	; 0x07
     722:	f8 85       	ldd	r31, Y+8	; 0x08
     724:	60 87       	std	Z+8, r22	; 0x08
     726:	71 87       	std	Z+9, r23	; 0x09
     728:	82 87       	std	Z+10, r24	; 0x0a
     72a:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     72c:	f6 01       	movw	r30, r12
     72e:	60 81       	ld	r22, Z
     730:	71 81       	ldd	r23, Z+1	; 0x01
     732:	88 27       	eor	r24, r24
     734:	77 fd       	sbrc	r23, 7
     736:	80 95       	com	r24
     738:	98 2f       	mov	r25, r24
     73a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__floatsisf>
     73e:	2b ed       	ldi	r18, 0xDB	; 219
     740:	3f e0       	ldi	r19, 0x0F	; 15
     742:	49 e4       	ldi	r20, 0x49	; 73
     744:	50 e4       	ldi	r21, 0x40	; 64
     746:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	44 eb       	ldi	r20, 0xB4	; 180
     750:	53 e4       	ldi	r21, 0x43	; 67
     752:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__divsf3>
     756:	0e 94 9e 10 	call	0x213c	; 0x213c <sin>
     75a:	2b 01       	movw	r4, r22
     75c:	3c 01       	movw	r6, r24
     75e:	f5 01       	movw	r30, r10
     760:	60 81       	ld	r22, Z
     762:	71 81       	ldd	r23, Z+1	; 0x01
     764:	88 27       	eor	r24, r24
     766:	77 fd       	sbrc	r23, 7
     768:	80 95       	com	r24
     76a:	98 2f       	mov	r25, r24
     76c:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__floatsisf>
     770:	2b ed       	ldi	r18, 0xDB	; 219
     772:	3f e0       	ldi	r19, 0x0F	; 15
     774:	49 e4       	ldi	r20, 0x49	; 73
     776:	50 e4       	ldi	r21, 0x40	; 64
     778:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	44 e3       	ldi	r20, 0x34	; 52
     782:	53 e4       	ldi	r21, 0x43	; 67
     784:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__divsf3>
     788:	0e 94 9e 10 	call	0x213c	; 0x213c <sin>
     78c:	9b 01       	movw	r18, r22
     78e:	ac 01       	movw	r20, r24
     790:	c3 01       	movw	r24, r6
     792:	b2 01       	movw	r22, r4
     794:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     798:	ef 81       	ldd	r30, Y+7	; 0x07
     79a:	f8 85       	ldd	r31, Y+8	; 0x08
     79c:	64 87       	std	Z+12, r22	; 0x0c
     79e:	75 87       	std	Z+13, r23	; 0x0d
     7a0:	86 87       	std	Z+14, r24	; 0x0e
     7a2:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     7a4:	f2 e0       	ldi	r31, 0x02	; 2
     7a6:	8f 0e       	add	r8, r31
     7a8:	91 1c       	adc	r9, r1
     7aa:	8f 81       	ldd	r24, Y+7	; 0x07
     7ac:	98 85       	ldd	r25, Y+8	; 0x08
     7ae:	40 96       	adiw	r24, 0x10	; 16
     7b0:	98 87       	std	Y+8, r25	; 0x08
     7b2:	8f 83       	std	Y+7, r24	; 0x07
     7b4:	82 14       	cp	r8, r2
     7b6:	93 04       	cpc	r9, r3
     7b8:	0c f4       	brge	.+2      	; 0x7bc <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     7ba:	5e cf       	rjmp	.-324    	; 0x678 <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
	return kronecker(vec,qb_count); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     7bc:	49 81       	ldd	r20, Y+1	; 0x01
     7be:	5a 81       	ldd	r21, Y+2	; 0x02
     7c0:	6b 81       	ldd	r22, Y+3	; 0x03
     7c2:	7c 81       	ldd	r23, Y+4	; 0x04
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	9e 81       	ldd	r25, Y+6	; 0x06
     7c8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN5Gates9kroneckerEP7Complexi>
}
     7cc:	28 96       	adiw	r28, 0x08	; 8
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	bf 90       	pop	r11
     7ea:	af 90       	pop	r10
     7ec:	9f 90       	pop	r9
     7ee:	8f 90       	pop	r8
     7f0:	7f 90       	pop	r7
     7f2:	6f 90       	pop	r6
     7f4:	5f 90       	pop	r5
     7f6:	4f 90       	pop	r4
     7f8:	3f 90       	pop	r3
     7fa:	2f 90       	pop	r2
     7fc:	08 95       	ret

000007fe <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	8b 01       	movw	r16, r22
     80c:	7a 01       	movw	r14, r20
	int* newthephi=(int*)malloc(sizeof(int)*2);
     80e:	84 e0       	ldi	r24, 0x04	; 4
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 15 11 	call	0x222a	; 0x222a <malloc>
     816:	ec 01       	movw	r28, r24
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
     818:	f8 01       	movw	r30, r16
     81a:	60 81       	ld	r22, Z
     81c:	71 81       	ldd	r23, Z+1	; 0x01
     81e:	82 81       	ldd	r24, Z+2	; 0x02
     820:	93 81       	ldd	r25, Z+3	; 0x03
     822:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <acos>
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	44 eb       	ldi	r20, 0xB4	; 180
     82c:	53 e4       	ldi	r21, 0x43	; 67
     82e:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     832:	2b ed       	ldi	r18, 0xDB	; 219
     834:	3f e0       	ldi	r19, 0x0F	; 15
     836:	49 e4       	ldi	r20, 0x49	; 73
     838:	50 e4       	ldi	r21, 0x40	; 64
     83a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__divsf3>
     83e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__fixsfsi>
     842:	79 83       	std	Y+1, r23	; 0x01
     844:	68 83       	st	Y, r22
	newthephi[1]=(180*vec[1].arg())/M_PI;
     846:	c8 01       	movw	r24, r16
     848:	08 96       	adiw	r24, 0x08	; 8
     84a:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN7Complex3argEv>
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	44 e3       	ldi	r20, 0x34	; 52
     854:	53 e4       	ldi	r21, 0x43	; 67
     856:	0e 94 3b 10 	call	0x2076	; 0x2076 <__mulsf3>
     85a:	2b ed       	ldi	r18, 0xDB	; 219
     85c:	3f e0       	ldi	r19, 0x0F	; 15
     85e:	49 e4       	ldi	r20, 0x49	; 73
     860:	50 e4       	ldi	r21, 0x40	; 64
     862:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__divsf3>
     866:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__fixsfsi>
     86a:	7b 83       	std	Y+3, r23	; 0x03
     86c:	6a 83       	std	Y+2, r22	; 0x02
	
	
	print_states(qb_count,vec,"After: ");
     86e:	45 e7       	ldi	r20, 0x75	; 117
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	b8 01       	movw	r22, r16
     874:	c7 01       	movw	r24, r14
     876:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     87a:	ce 01       	movw	r24, r28
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	08 95       	ret

0000088a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     88a:	2f 92       	push	r2
     88c:	3f 92       	push	r3
     88e:	4f 92       	push	r4
     890:	5f 92       	push	r5
     892:	6f 92       	push	r6
     894:	7f 92       	push	r7
     896:	8f 92       	push	r8
     898:	9f 92       	push	r9
     89a:	af 92       	push	r10
     89c:	bf 92       	push	r11
     89e:	cf 92       	push	r12
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	60 97       	sbiw	r28, 0x10	; 16
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	4b 01       	movw	r8, r22
     8c0:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     8c2:	80 e1       	ldi	r24, 0x10	; 16
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 15 11 	call	0x222a	; 0x222a <malloc>
     8ca:	38 2e       	mov	r3, r24
     8cc:	29 2e       	mov	r2, r25
     8ce:	c8 2e       	mov	r12, r24
     8d0:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     8d2:	a1 2c       	mov	r10, r1
     8d4:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     8d6:	24 01       	movw	r4, r8
     8d8:	88 e0       	ldi	r24, 0x08	; 8
     8da:	48 0e       	add	r4, r24
     8dc:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     8de:	ce 01       	movw	r24, r28
     8e0:	09 96       	adiw	r24, 0x09	; 9
     8e2:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     8e6:	75 01       	movw	r14, r10
     8e8:	ee 0c       	add	r14, r14
     8ea:	ff 1c       	adc	r15, r15
     8ec:	ee 0c       	add	r14, r14
     8ee:	ff 1c       	adc	r15, r15
     8f0:	ee 0c       	add	r14, r14
     8f2:	ff 1c       	adc	r15, r15
     8f4:	e6 0c       	add	r14, r6
     8f6:	f7 1c       	adc	r15, r7
     8f8:	d7 01       	movw	r26, r14
     8fa:	0c 91       	ld	r16, X
     8fc:	11 96       	adiw	r26, 0x01	; 1
     8fe:	1c 91       	ld	r17, X
     900:	11 97       	sbiw	r26, 0x01	; 1
     902:	12 96       	adiw	r26, 0x02	; 2
     904:	2c 91       	ld	r18, X
     906:	12 97       	sbiw	r26, 0x02	; 2
     908:	13 96       	adiw	r26, 0x03	; 3
     90a:	3c 91       	ld	r19, X
     90c:	13 97       	sbiw	r26, 0x03	; 3
     90e:	14 96       	adiw	r26, 0x04	; 4
     910:	4c 91       	ld	r20, X
     912:	14 97       	sbiw	r26, 0x04	; 4
     914:	15 96       	adiw	r26, 0x05	; 5
     916:	5c 91       	ld	r21, X
     918:	15 97       	sbiw	r26, 0x05	; 5
     91a:	16 96       	adiw	r26, 0x06	; 6
     91c:	6c 91       	ld	r22, X
     91e:	16 97       	sbiw	r26, 0x06	; 6
     920:	17 96       	adiw	r26, 0x07	; 7
     922:	7c 91       	ld	r23, X
     924:	c4 01       	movw	r24, r8
     926:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     92a:	02 2f       	mov	r16, r18
     92c:	13 2f       	mov	r17, r19
     92e:	24 2f       	mov	r18, r20
     930:	35 2f       	mov	r19, r21
     932:	46 2f       	mov	r20, r22
     934:	57 2f       	mov	r21, r23
     936:	68 2f       	mov	r22, r24
     938:	79 2f       	mov	r23, r25
     93a:	ce 01       	movw	r24, r28
     93c:	09 96       	adiw	r24, 0x09	; 9
     93e:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     942:	29 87       	std	Y+9, r18	; 0x09
     944:	3a 87       	std	Y+10, r19	; 0x0a
     946:	4b 87       	std	Y+11, r20	; 0x0b
     948:	5c 87       	std	Y+12, r21	; 0x0c
     94a:	6d 87       	std	Y+13, r22	; 0x0d
     94c:	7e 87       	std	Y+14, r23	; 0x0e
     94e:	8f 87       	std	Y+15, r24	; 0x0f
     950:	98 8b       	std	Y+16, r25	; 0x10
     952:	f7 01       	movw	r30, r14
     954:	70 96       	adiw	r30, 0x10	; 16
     956:	d7 01       	movw	r26, r14
     958:	50 96       	adiw	r26, 0x10	; 16
     95a:	0c 91       	ld	r16, X
     95c:	11 81       	ldd	r17, Z+1	; 0x01
     95e:	22 81       	ldd	r18, Z+2	; 0x02
     960:	33 81       	ldd	r19, Z+3	; 0x03
     962:	44 81       	ldd	r20, Z+4	; 0x04
     964:	55 81       	ldd	r21, Z+5	; 0x05
     966:	66 81       	ldd	r22, Z+6	; 0x06
     968:	77 81       	ldd	r23, Z+7	; 0x07
     96a:	c2 01       	movw	r24, r4
     96c:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     970:	02 2f       	mov	r16, r18
     972:	13 2f       	mov	r17, r19
     974:	24 2f       	mov	r18, r20
     976:	35 2f       	mov	r19, r21
     978:	46 2f       	mov	r20, r22
     97a:	57 2f       	mov	r21, r23
     97c:	68 2f       	mov	r22, r24
     97e:	79 2f       	mov	r23, r25
     980:	ce 01       	movw	r24, r28
     982:	09 96       	adiw	r24, 0x09	; 9
     984:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     988:	29 87       	std	Y+9, r18	; 0x09
     98a:	3a 87       	std	Y+10, r19	; 0x0a
     98c:	4b 87       	std	Y+11, r20	; 0x0b
     98e:	5c 87       	std	Y+12, r21	; 0x0c
     990:	6d 87       	std	Y+13, r22	; 0x0d
     992:	7e 87       	std	Y+14, r23	; 0x0e
     994:	8f 87       	std	Y+15, r24	; 0x0f
     996:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     998:	89 85       	ldd	r24, Y+9	; 0x09
     99a:	9a 85       	ldd	r25, Y+10	; 0x0a
     99c:	ab 85       	ldd	r26, Y+11	; 0x0b
     99e:	bc 85       	ldd	r27, Y+12	; 0x0c
     9a0:	f6 01       	movw	r30, r12
     9a2:	80 83       	st	Z, r24
     9a4:	91 83       	std	Z+1, r25	; 0x01
     9a6:	a2 83       	std	Z+2, r26	; 0x02
     9a8:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     9aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ac:	9e 85       	ldd	r25, Y+14	; 0x0e
     9ae:	af 85       	ldd	r26, Y+15	; 0x0f
     9b0:	b8 89       	ldd	r27, Y+16	; 0x10
     9b2:	84 83       	std	Z+4, r24	; 0x04
     9b4:	95 83       	std	Z+5, r25	; 0x05
     9b6:	a6 83       	std	Z+6, r26	; 0x06
     9b8:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     9ba:	ff ef       	ldi	r31, 0xFF	; 255
     9bc:	af 1a       	sub	r10, r31
     9be:	bf 0a       	sbc	r11, r31
     9c0:	88 e0       	ldi	r24, 0x08	; 8
     9c2:	c8 0e       	add	r12, r24
     9c4:	d1 1c       	adc	r13, r1
     9c6:	a2 e0       	ldi	r26, 0x02	; 2
     9c8:	aa 16       	cp	r10, r26
     9ca:	b1 04       	cpc	r11, r1
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     9ce:	87 cf       	rjmp	.-242    	; 0x8de <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     9d0:	83 2d       	mov	r24, r3
     9d2:	92 2d       	mov	r25, r2
     9d4:	60 96       	adiw	r28, 0x10	; 16
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	df 90       	pop	r13
     9ee:	cf 90       	pop	r12
     9f0:	bf 90       	pop	r11
     9f2:	af 90       	pop	r10
     9f4:	9f 90       	pop	r9
     9f6:	8f 90       	pop	r8
     9f8:	7f 90       	pop	r7
     9fa:	6f 90       	pop	r6
     9fc:	5f 90       	pop	r5
     9fe:	4f 90       	pop	r4
     a00:	3f 90       	pop	r3
     a02:	2f 90       	pop	r2
     a04:	08 95       	ret

00000a06 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     a06:	2f 92       	push	r2
     a08:	3f 92       	push	r3
     a0a:	4f 92       	push	r4
     a0c:	5f 92       	push	r5
     a0e:	6f 92       	push	r6
     a10:	7f 92       	push	r7
     a12:	8f 92       	push	r8
     a14:	9f 92       	push	r9
     a16:	af 92       	push	r10
     a18:	bf 92       	push	r11
     a1a:	cf 92       	push	r12
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	64 97       	sbiw	r28, 0x14	; 20
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	4b 01       	movw	r8, r22
     a3c:	e4 2e       	mov	r14, r20
     a3e:	f5 2e       	mov	r15, r21
	print_states(2,q,"Before: ");
     a40:	4d e7       	ldi	r20, 0x7D	; 125
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>

	
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     a4c:	80 e2       	ldi	r24, 0x20	; 32
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 15 11 	call	0x222a	; 0x222a <malloc>
     a54:	8b 8b       	std	Y+19, r24	; 0x13
     a56:	9c 8b       	std	Y+20, r25	; 0x14
     a58:	48 2e       	mov	r4, r24
     a5a:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     a5c:	61 2c       	mov	r6, r1
     a5e:	71 2c       	mov	r7, r1
     a60:	e9 8a       	std	Y+17, r14	; 0x11
     a62:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     a64:	21 2c       	mov	r2, r1
     a66:	31 2c       	mov	r3, r1
     a68:	ce 01       	movw	r24, r28
     a6a:	09 96       	adiw	r24, 0x09	; 9
     a6c:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
     a70:	c9 88       	ldd	r12, Y+17	; 0x11
     a72:	da 88       	ldd	r13, Y+18	; 0x12
     a74:	e2 2c       	mov	r14, r2
     a76:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     a78:	53 01       	movw	r10, r6
     a7a:	aa 0c       	add	r10, r10
     a7c:	bb 1c       	adc	r11, r11
     a7e:	aa 0c       	add	r10, r10
     a80:	bb 1c       	adc	r11, r11
     a82:	aa 0c       	add	r10, r10
     a84:	bb 1c       	adc	r11, r11
     a86:	f5 01       	movw	r30, r10
     a88:	ec 0d       	add	r30, r12
     a8a:	fd 1d       	adc	r31, r13
     a8c:	00 81       	ld	r16, Z
     a8e:	11 81       	ldd	r17, Z+1	; 0x01
     a90:	22 81       	ldd	r18, Z+2	; 0x02
     a92:	33 81       	ldd	r19, Z+3	; 0x03
     a94:	44 81       	ldd	r20, Z+4	; 0x04
     a96:	55 81       	ldd	r21, Z+5	; 0x05
     a98:	66 81       	ldd	r22, Z+6	; 0x06
     a9a:	77 81       	ldd	r23, Z+7	; 0x07
     a9c:	c4 01       	movw	r24, r8
     a9e:	8e 0d       	add	r24, r14
     aa0:	9f 1d       	adc	r25, r15
     aa2:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     aa6:	29 83       	std	Y+1, r18	; 0x01
     aa8:	3a 83       	std	Y+2, r19	; 0x02
     aaa:	4b 83       	std	Y+3, r20	; 0x03
     aac:	5c 83       	std	Y+4, r21	; 0x04
     aae:	6d 83       	std	Y+5, r22	; 0x05
     ab0:	7e 83       	std	Y+6, r23	; 0x06
     ab2:	8f 83       	std	Y+7, r24	; 0x07
     ab4:	98 87       	std	Y+8, r25	; 0x08
     ab6:	02 2f       	mov	r16, r18
     ab8:	13 2f       	mov	r17, r19
     aba:	24 2f       	mov	r18, r20
     abc:	35 2f       	mov	r19, r21
     abe:	46 2f       	mov	r20, r22
     ac0:	57 2f       	mov	r21, r23
     ac2:	68 2f       	mov	r22, r24
     ac4:	79 2f       	mov	r23, r25
     ac6:	ce 01       	movw	r24, r28
     ac8:	09 96       	adiw	r24, 0x09	; 9
     aca:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     ace:	29 87       	std	Y+9, r18	; 0x09
     ad0:	3a 87       	std	Y+10, r19	; 0x0a
     ad2:	4b 87       	std	Y+11, r20	; 0x0b
     ad4:	5c 87       	std	Y+12, r21	; 0x0c
     ad6:	6d 87       	std	Y+13, r22	; 0x0d
     ad8:	7e 87       	std	Y+14, r23	; 0x0e
     ada:	8f 87       	std	Y+15, r24	; 0x0f
     adc:	98 8b       	std	Y+16, r25	; 0x10
     ade:	88 e0       	ldi	r24, 0x08	; 8
     ae0:	e8 0e       	add	r14, r24
     ae2:	f1 1c       	adc	r15, r1
     ae4:	e0 e2       	ldi	r30, 0x20	; 32
     ae6:	ce 0e       	add	r12, r30
     ae8:	d1 1c       	adc	r13, r1
     aea:	f0 e2       	ldi	r31, 0x20	; 32
     aec:	ef 16       	cp	r14, r31
     aee:	f1 04       	cpc	r15, r1
     af0:	51 f6       	brne	.-108    	; 0xa86 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x80>
		result[i].re=tmp.re;
     af2:	89 85       	ldd	r24, Y+9	; 0x09
     af4:	9a 85       	ldd	r25, Y+10	; 0x0a
     af6:	ab 85       	ldd	r26, Y+11	; 0x0b
     af8:	bc 85       	ldd	r27, Y+12	; 0x0c
     afa:	f2 01       	movw	r30, r4
     afc:	80 83       	st	Z, r24
     afe:	91 83       	std	Z+1, r25	; 0x01
     b00:	a2 83       	std	Z+2, r26	; 0x02
     b02:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     b04:	8d 85       	ldd	r24, Y+13	; 0x0d
     b06:	9e 85       	ldd	r25, Y+14	; 0x0e
     b08:	af 85       	ldd	r26, Y+15	; 0x0f
     b0a:	b8 89       	ldd	r27, Y+16	; 0x10
     b0c:	84 83       	std	Z+4, r24	; 0x04
     b0e:	95 83       	std	Z+5, r25	; 0x05
     b10:	a6 83       	std	Z+6, r26	; 0x06
     b12:	b7 83       	std	Z+7, r27	; 0x07
	print_states(2,q,"Before: ");

	
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     b14:	ff ef       	ldi	r31, 0xFF	; 255
     b16:	6f 1a       	sub	r6, r31
     b18:	7f 0a       	sbc	r7, r31
     b1a:	88 e0       	ldi	r24, 0x08	; 8
     b1c:	48 0e       	add	r4, r24
     b1e:	51 1c       	adc	r5, r1
     b20:	e4 e0       	ldi	r30, 0x04	; 4
     b22:	6e 16       	cp	r6, r30
     b24:	71 04       	cpc	r7, r1
     b26:	09 f0       	breq	.+2      	; 0xb2a <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x124>
     b28:	9f cf       	rjmp	.-194    	; 0xa68 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x62>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     b2a:	8b 89       	ldd	r24, Y+19	; 0x13
     b2c:	9c 89       	ldd	r25, Y+20	; 0x14
     b2e:	64 96       	adiw	r28, 0x14	; 20
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	bf 90       	pop	r11
     b4c:	af 90       	pop	r10
     b4e:	9f 90       	pop	r9
     b50:	8f 90       	pop	r8
     b52:	7f 90       	pop	r7
     b54:	6f 90       	pop	r6
     b56:	5f 90       	pop	r5
     b58:	4f 90       	pop	r4
     b5a:	3f 90       	pop	r3
     b5c:	2f 90       	pop	r2
     b5e:	08 95       	ret

00000b60 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
     b60:	af 92       	push	r10
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	a4 97       	sbiw	r28, 0x24	; 36
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	7c 01       	movw	r14, r24
     b86:	5b 01       	movw	r10, r22
     b88:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
     b8a:	00 e0       	ldi	r16, 0x00	; 0
     b8c:	10 e0       	ldi	r17, 0x00	; 0
     b8e:	98 01       	movw	r18, r16
     b90:	b9 01       	movw	r22, r18
     b92:	a8 01       	movw	r20, r16
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     b9c:	00 e0       	ldi	r16, 0x00	; 0
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	98 01       	movw	r18, r16
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	60 e8       	ldi	r22, 0x80	; 128
     ba8:	7f e3       	ldi	r23, 0x3F	; 63
     baa:	ce 01       	movw	r24, r28
     bac:	09 96       	adiw	r24, 0x09	; 9
     bae:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     bb2:	00 e0       	ldi	r16, 0x00	; 0
     bb4:	10 e0       	ldi	r17, 0x00	; 0
     bb6:	98 01       	movw	r18, r16
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	60 e8       	ldi	r22, 0x80	; 128
     bbe:	7f e3       	ldi	r23, 0x3F	; 63
     bc0:	ce 01       	movw	r24, r28
     bc2:	41 96       	adiw	r24, 0x11	; 17
     bc4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     bc8:	00 e0       	ldi	r16, 0x00	; 0
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	98 01       	movw	r18, r16
     bce:	b9 01       	movw	r22, r18
     bd0:	a8 01       	movw	r20, r16
     bd2:	ce 01       	movw	r24, r28
     bd4:	49 96       	adiw	r24, 0x19	; 25
     bd6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     bda:	bc a2       	std	Y+36, r11	; 0x24
     bdc:	ab a2       	std	Y+35, r10	; 0x23
     bde:	da a2       	std	Y+34, r13	; 0x22
     be0:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix),1);
     be2:	9e 01       	movw	r18, r28
     be4:	2f 5d       	subi	r18, 0xDF	; 223
     be6:	3f 4f       	sbci	r19, 0xFF	; 255
     be8:	ae 01       	movw	r20, r28
     bea:	4d 5d       	subi	r20, 0xDD	; 221
     bec:	5f 4f       	sbci	r21, 0xFF	; 255
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	c7 01       	movw	r24, r14
     bf4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN5Gates8ampl2vecEiPiS0_>
     bf8:	ae 01       	movw	r20, r28
     bfa:	4f 5f       	subi	r20, 0xFF	; 255
     bfc:	5f 4f       	sbci	r21, 0xFF	; 255
     bfe:	bc 01       	movw	r22, r24
     c00:	c7 01       	movw	r24, r14
     c02:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     c06:	41 e0       	ldi	r20, 0x01	; 1
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	bc 01       	movw	r22, r24
     c0c:	c7 01       	movw	r24, r14
     c0e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN5Gates8vec2amplEP7Complexi>
}
     c12:	a4 96       	adiw	r28, 0x24	; 36
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	bf 90       	pop	r11
     c30:	af 90       	pop	r10
     c32:	08 95       	ret

00000c34 <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
     c34:	af 92       	push	r10
     c36:	bf 92       	push	r11
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	a4 97       	sbiw	r28, 0x24	; 36
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	7c 01       	movw	r14, r24
     c5a:	5b 01       	movw	r10, r22
     c5c:	6a 01       	movw	r12, r20
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
     c5e:	00 e0       	ldi	r16, 0x00	; 0
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	98 01       	movw	r18, r16
     c64:	b9 01       	movw	r22, r18
     c66:	a8 01       	movw	r20, r16
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     c70:	00 e0       	ldi	r16, 0x00	; 0
     c72:	10 e0       	ldi	r17, 0x00	; 0
     c74:	20 e8       	ldi	r18, 0x80	; 128
     c76:	3f eb       	ldi	r19, 0xBF	; 191
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	ba 01       	movw	r22, r20
     c7e:	ce 01       	movw	r24, r28
     c80:	09 96       	adiw	r24, 0x09	; 9
     c82:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     c86:	00 e0       	ldi	r16, 0x00	; 0
     c88:	10 e0       	ldi	r17, 0x00	; 0
     c8a:	20 e8       	ldi	r18, 0x80	; 128
     c8c:	3f e3       	ldi	r19, 0x3F	; 63
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	ba 01       	movw	r22, r20
     c94:	ce 01       	movw	r24, r28
     c96:	41 96       	adiw	r24, 0x11	; 17
     c98:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     c9c:	00 e0       	ldi	r16, 0x00	; 0
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	98 01       	movw	r18, r16
     ca2:	b9 01       	movw	r22, r18
     ca4:	a8 01       	movw	r20, r16
     ca6:	ce 01       	movw	r24, r28
     ca8:	49 96       	adiw	r24, 0x19	; 25
     caa:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     cae:	bc a2       	std	Y+36, r11	; 0x24
     cb0:	ab a2       	std	Y+35, r10	; 0x23
     cb2:	da a2       	std	Y+34, r13	; 0x22
     cb4:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),y_matrix),1);
     cb6:	9e 01       	movw	r18, r28
     cb8:	2f 5d       	subi	r18, 0xDF	; 223
     cba:	3f 4f       	sbci	r19, 0xFF	; 255
     cbc:	ae 01       	movw	r20, r28
     cbe:	4d 5d       	subi	r20, 0xDD	; 221
     cc0:	5f 4f       	sbci	r21, 0xFF	; 255
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	c7 01       	movw	r24, r14
     cc8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN5Gates8ampl2vecEiPiS0_>
     ccc:	ae 01       	movw	r20, r28
     cce:	4f 5f       	subi	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	bc 01       	movw	r22, r24
     cd4:	c7 01       	movw	r24, r14
     cd6:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	bc 01       	movw	r22, r24
     ce0:	c7 01       	movw	r24, r14
     ce2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN5Gates8vec2amplEP7Complexi>
}
     ce6:	a4 96       	adiw	r28, 0x24	; 36
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	bf 90       	pop	r11
     d04:	af 90       	pop	r10
     d06:	08 95       	ret

00000d08 <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
     d08:	af 92       	push	r10
     d0a:	bf 92       	push	r11
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	a4 97       	sbiw	r28, 0x24	; 36
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	7c 01       	movw	r14, r24
     d2e:	5b 01       	movw	r10, r22
     d30:	6a 01       	movw	r12, r20
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
     d32:	00 e0       	ldi	r16, 0x00	; 0
     d34:	10 e0       	ldi	r17, 0x00	; 0
     d36:	98 01       	movw	r18, r16
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	60 e8       	ldi	r22, 0x80	; 128
     d3e:	7f e3       	ldi	r23, 0x3F	; 63
     d40:	ce 01       	movw	r24, r28
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d48:	00 e0       	ldi	r16, 0x00	; 0
     d4a:	10 e0       	ldi	r17, 0x00	; 0
     d4c:	98 01       	movw	r18, r16
     d4e:	b9 01       	movw	r22, r18
     d50:	a8 01       	movw	r20, r16
     d52:	ce 01       	movw	r24, r28
     d54:	09 96       	adiw	r24, 0x09	; 9
     d56:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d5a:	00 e0       	ldi	r16, 0x00	; 0
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	98 01       	movw	r18, r16
     d60:	b9 01       	movw	r22, r18
     d62:	a8 01       	movw	r20, r16
     d64:	ce 01       	movw	r24, r28
     d66:	41 96       	adiw	r24, 0x11	; 17
     d68:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d6c:	00 e0       	ldi	r16, 0x00	; 0
     d6e:	10 e0       	ldi	r17, 0x00	; 0
     d70:	98 01       	movw	r18, r16
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	60 e8       	ldi	r22, 0x80	; 128
     d78:	7f eb       	ldi	r23, 0xBF	; 191
     d7a:	ce 01       	movw	r24, r28
     d7c:	49 96       	adiw	r24, 0x19	; 25
     d7e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     d82:	bc a2       	std	Y+36, r11	; 0x24
     d84:	ab a2       	std	Y+35, r10	; 0x23
     d86:	da a2       	std	Y+34, r13	; 0x22
     d88:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),z_matrix),1);
     d8a:	9e 01       	movw	r18, r28
     d8c:	2f 5d       	subi	r18, 0xDF	; 223
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	ae 01       	movw	r20, r28
     d92:	4d 5d       	subi	r20, 0xDD	; 221
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	61 e0       	ldi	r22, 0x01	; 1
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	c7 01       	movw	r24, r14
     d9c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN5Gates8ampl2vecEiPiS0_>
     da0:	ae 01       	movw	r20, r28
     da2:	4f 5f       	subi	r20, 0xFF	; 255
     da4:	5f 4f       	sbci	r21, 0xFF	; 255
     da6:	bc 01       	movw	r22, r24
     da8:	c7 01       	movw	r24, r14
     daa:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	bc 01       	movw	r22, r24
     db4:	c7 01       	movw	r24, r14
     db6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN5Gates8vec2amplEP7Complexi>
}
     dba:	a4 96       	adiw	r28, 0x24	; 36
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	08 95       	ret

00000ddc <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
     ddc:	af 92       	push	r10
     dde:	bf 92       	push	r11
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	a4 97       	sbiw	r28, 0x24	; 36
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	7c 01       	movw	r14, r24
     e02:	5b 01       	movw	r10, r22
     e04:	6a 01       	movw	r12, r20
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
     e06:	00 e0       	ldi	r16, 0x00	; 0
     e08:	10 e0       	ldi	r17, 0x00	; 0
     e0a:	98 01       	movw	r18, r16
     e0c:	43 ef       	ldi	r20, 0xF3	; 243
     e0e:	54 e0       	ldi	r21, 0x04	; 4
     e10:	65 e3       	ldi	r22, 0x35	; 53
     e12:	7f e3       	ldi	r23, 0x3F	; 63
     e14:	ce 01       	movw	r24, r28
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e1c:	00 e0       	ldi	r16, 0x00	; 0
     e1e:	10 e0       	ldi	r17, 0x00	; 0
     e20:	98 01       	movw	r18, r16
     e22:	43 ef       	ldi	r20, 0xF3	; 243
     e24:	54 e0       	ldi	r21, 0x04	; 4
     e26:	65 e3       	ldi	r22, 0x35	; 53
     e28:	7f e3       	ldi	r23, 0x3F	; 63
     e2a:	ce 01       	movw	r24, r28
     e2c:	09 96       	adiw	r24, 0x09	; 9
     e2e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e32:	00 e0       	ldi	r16, 0x00	; 0
     e34:	10 e0       	ldi	r17, 0x00	; 0
     e36:	98 01       	movw	r18, r16
     e38:	43 ef       	ldi	r20, 0xF3	; 243
     e3a:	54 e0       	ldi	r21, 0x04	; 4
     e3c:	65 e3       	ldi	r22, 0x35	; 53
     e3e:	7f e3       	ldi	r23, 0x3F	; 63
     e40:	ce 01       	movw	r24, r28
     e42:	41 96       	adiw	r24, 0x11	; 17
     e44:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	10 e0       	ldi	r17, 0x00	; 0
     e4c:	98 01       	movw	r18, r16
     e4e:	43 ef       	ldi	r20, 0xF3	; 243
     e50:	54 e0       	ldi	r21, 0x04	; 4
     e52:	65 e3       	ldi	r22, 0x35	; 53
     e54:	7f eb       	ldi	r23, 0xBF	; 191
     e56:	ce 01       	movw	r24, r28
     e58:	49 96       	adiw	r24, 0x19	; 25
     e5a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     e5e:	bc a2       	std	Y+36, r11	; 0x24
     e60:	ab a2       	std	Y+35, r10	; 0x23
     e62:	da a2       	std	Y+34, r13	; 0x22
     e64:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),h_matrix),1);
     e66:	9e 01       	movw	r18, r28
     e68:	2f 5d       	subi	r18, 0xDF	; 223
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	ae 01       	movw	r20, r28
     e6e:	4d 5d       	subi	r20, 0xDD	; 221
     e70:	5f 4f       	sbci	r21, 0xFF	; 255
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	c7 01       	movw	r24, r14
     e78:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN5Gates8ampl2vecEiPiS0_>
     e7c:	ae 01       	movw	r20, r28
     e7e:	4f 5f       	subi	r20, 0xFF	; 255
     e80:	5f 4f       	sbci	r21, 0xFF	; 255
     e82:	bc 01       	movw	r22, r24
     e84:	c7 01       	movw	r24, r14
     e86:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     e8a:	41 e0       	ldi	r20, 0x01	; 1
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	bc 01       	movw	r22, r24
     e90:	c7 01       	movw	r24, r14
     e92:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN5Gates8vec2amplEP7Complexi>
}
     e96:	a4 96       	adiw	r28, 0x24	; 36
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	af 90       	pop	r10
     eb6:	08 95       	ret

00000eb8 <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	a4 97       	sbiw	r28, 0x24	; 36
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	7c 01       	movw	r14, r24
     ede:	5b 01       	movw	r10, r22
     ee0:	6a 01       	movw	r12, r20
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
     ee2:	00 e0       	ldi	r16, 0x00	; 0
     ee4:	10 e0       	ldi	r17, 0x00	; 0
     ee6:	98 01       	movw	r18, r16
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	60 e8       	ldi	r22, 0x80	; 128
     eee:	7f e3       	ldi	r23, 0x3F	; 63
     ef0:	ce 01       	movw	r24, r28
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     ef8:	00 e0       	ldi	r16, 0x00	; 0
     efa:	10 e0       	ldi	r17, 0x00	; 0
     efc:	98 01       	movw	r18, r16
     efe:	b9 01       	movw	r22, r18
     f00:	a8 01       	movw	r20, r16
     f02:	ce 01       	movw	r24, r28
     f04:	09 96       	adiw	r24, 0x09	; 9
     f06:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f0a:	00 e0       	ldi	r16, 0x00	; 0
     f0c:	10 e0       	ldi	r17, 0x00	; 0
     f0e:	98 01       	movw	r18, r16
     f10:	b9 01       	movw	r22, r18
     f12:	a8 01       	movw	r20, r16
     f14:	ce 01       	movw	r24, r28
     f16:	41 96       	adiw	r24, 0x11	; 17
     f18:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f1c:	00 e0       	ldi	r16, 0x00	; 0
     f1e:	10 e0       	ldi	r17, 0x00	; 0
     f20:	20 e8       	ldi	r18, 0x80	; 128
     f22:	3f e3       	ldi	r19, 0x3F	; 63
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	ba 01       	movw	r22, r20
     f2a:	ce 01       	movw	r24, r28
     f2c:	49 96       	adiw	r24, 0x19	; 25
     f2e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     f32:	bc a2       	std	Y+36, r11	; 0x24
     f34:	ab a2       	std	Y+35, r10	; 0x23
     f36:	da a2       	std	Y+34, r13	; 0x22
     f38:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),s_matrix),1);
     f3a:	9e 01       	movw	r18, r28
     f3c:	2f 5d       	subi	r18, 0xDF	; 223
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	ae 01       	movw	r20, r28
     f42:	4d 5d       	subi	r20, 0xDD	; 221
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	c7 01       	movw	r24, r14
     f4c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN5Gates8ampl2vecEiPiS0_>
     f50:	ae 01       	movw	r20, r28
     f52:	4f 5f       	subi	r20, 0xFF	; 255
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	bc 01       	movw	r22, r24
     f58:	c7 01       	movw	r24, r14
     f5a:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     f5e:	41 e0       	ldi	r20, 0x01	; 1
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	bc 01       	movw	r22, r24
     f64:	c7 01       	movw	r24, r14
     f66:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN5Gates8vec2amplEP7Complexi>
}
     f6a:	a4 96       	adiw	r28, 0x24	; 36
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	bf 90       	pop	r11
     f88:	af 90       	pop	r10
     f8a:	08 95       	ret

00000f8c <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
     f8c:	af 92       	push	r10
     f8e:	bf 92       	push	r11
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	a4 97       	sbiw	r28, 0x24	; 36
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	7c 01       	movw	r14, r24
     fb2:	5b 01       	movw	r10, r22
     fb4:	6a 01       	movw	r12, r20
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
     fb6:	00 e0       	ldi	r16, 0x00	; 0
     fb8:	10 e0       	ldi	r17, 0x00	; 0
     fba:	98 01       	movw	r18, r16
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	60 e8       	ldi	r22, 0x80	; 128
     fc2:	7f e3       	ldi	r23, 0x3F	; 63
     fc4:	ce 01       	movw	r24, r28
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fcc:	00 e0       	ldi	r16, 0x00	; 0
     fce:	10 e0       	ldi	r17, 0x00	; 0
     fd0:	98 01       	movw	r18, r16
     fd2:	b9 01       	movw	r22, r18
     fd4:	a8 01       	movw	r20, r16
     fd6:	ce 01       	movw	r24, r28
     fd8:	09 96       	adiw	r24, 0x09	; 9
     fda:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fde:	00 e0       	ldi	r16, 0x00	; 0
     fe0:	10 e0       	ldi	r17, 0x00	; 0
     fe2:	98 01       	movw	r18, r16
     fe4:	b9 01       	movw	r22, r18
     fe6:	a8 01       	movw	r20, r16
     fe8:	ce 01       	movw	r24, r28
     fea:	41 96       	adiw	r24, 0x11	; 17
     fec:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     ff0:	03 ef       	ldi	r16, 0xF3	; 243
     ff2:	14 e0       	ldi	r17, 0x04	; 4
     ff4:	25 e3       	ldi	r18, 0x35	; 53
     ff6:	3f e3       	ldi	r19, 0x3F	; 63
     ff8:	b9 01       	movw	r22, r18
     ffa:	a8 01       	movw	r20, r16
     ffc:	ce 01       	movw	r24, r28
     ffe:	49 96       	adiw	r24, 0x19	; 25
    1000:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    1004:	bc a2       	std	Y+36, r11	; 0x24
    1006:	ab a2       	std	Y+35, r10	; 0x23
    1008:	da a2       	std	Y+34, r13	; 0x22
    100a:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),t_matrix),1);
    100c:	9e 01       	movw	r18, r28
    100e:	2f 5d       	subi	r18, 0xDF	; 223
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
    1012:	ae 01       	movw	r20, r28
    1014:	4d 5d       	subi	r20, 0xDD	; 221
    1016:	5f 4f       	sbci	r21, 0xFF	; 255
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	c7 01       	movw	r24, r14
    101e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN5Gates8ampl2vecEiPiS0_>
    1022:	ae 01       	movw	r20, r28
    1024:	4f 5f       	subi	r20, 0xFF	; 255
    1026:	5f 4f       	sbci	r21, 0xFF	; 255
    1028:	bc 01       	movw	r22, r24
    102a:	c7 01       	movw	r24, r14
    102c:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	bc 01       	movw	r22, r24
    1036:	c7 01       	movw	r24, r14
    1038:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN5Gates8vec2amplEP7Complexi>
}
    103c:	a4 96       	adiw	r28, 0x24	; 36
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	bf 90       	pop	r11
    105a:	af 90       	pop	r10
    105c:	08 95       	ret

0000105e <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    105e:	6f 92       	push	r6
    1060:	7f 92       	push	r7
    1062:	8f 92       	push	r8
    1064:	9f 92       	push	r9
    1066:	af 92       	push	r10
    1068:	bf 92       	push	r11
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	c8 58       	subi	r28, 0x88	; 136
    1080:	d1 09       	sbc	r29, r1
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	7c 01       	movw	r14, r24
    108e:	3b 01       	movw	r6, r22
    1090:	5a 01       	movw	r10, r20
    1092:	49 01       	movw	r8, r18
    1094:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1096:	00 e0       	ldi	r16, 0x00	; 0
    1098:	10 e0       	ldi	r17, 0x00	; 0
    109a:	98 01       	movw	r18, r16
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	60 e8       	ldi	r22, 0x80	; 128
    10a2:	7f e3       	ldi	r23, 0x3F	; 63
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10ac:	00 e0       	ldi	r16, 0x00	; 0
    10ae:	10 e0       	ldi	r17, 0x00	; 0
    10b0:	98 01       	movw	r18, r16
    10b2:	b9 01       	movw	r22, r18
    10b4:	a8 01       	movw	r20, r16
    10b6:	ce 01       	movw	r24, r28
    10b8:	09 96       	adiw	r24, 0x09	; 9
    10ba:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10be:	00 e0       	ldi	r16, 0x00	; 0
    10c0:	10 e0       	ldi	r17, 0x00	; 0
    10c2:	98 01       	movw	r18, r16
    10c4:	b9 01       	movw	r22, r18
    10c6:	a8 01       	movw	r20, r16
    10c8:	ce 01       	movw	r24, r28
    10ca:	41 96       	adiw	r24, 0x11	; 17
    10cc:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10d0:	00 e0       	ldi	r16, 0x00	; 0
    10d2:	10 e0       	ldi	r17, 0x00	; 0
    10d4:	98 01       	movw	r18, r16
    10d6:	b9 01       	movw	r22, r18
    10d8:	a8 01       	movw	r20, r16
    10da:	ce 01       	movw	r24, r28
    10dc:	49 96       	adiw	r24, 0x19	; 25
    10de:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10e2:	00 e0       	ldi	r16, 0x00	; 0
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	98 01       	movw	r18, r16
    10e8:	b9 01       	movw	r22, r18
    10ea:	a8 01       	movw	r20, r16
    10ec:	ce 01       	movw	r24, r28
    10ee:	81 96       	adiw	r24, 0x21	; 33
    10f0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10f4:	00 e0       	ldi	r16, 0x00	; 0
    10f6:	10 e0       	ldi	r17, 0x00	; 0
    10f8:	98 01       	movw	r18, r16
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	60 e8       	ldi	r22, 0x80	; 128
    1100:	7f e3       	ldi	r23, 0x3F	; 63
    1102:	ce 01       	movw	r24, r28
    1104:	89 96       	adiw	r24, 0x29	; 41
    1106:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    110a:	00 e0       	ldi	r16, 0x00	; 0
    110c:	10 e0       	ldi	r17, 0x00	; 0
    110e:	98 01       	movw	r18, r16
    1110:	b9 01       	movw	r22, r18
    1112:	a8 01       	movw	r20, r16
    1114:	ce 01       	movw	r24, r28
    1116:	c1 96       	adiw	r24, 0x31	; 49
    1118:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    111c:	00 e0       	ldi	r16, 0x00	; 0
    111e:	10 e0       	ldi	r17, 0x00	; 0
    1120:	98 01       	movw	r18, r16
    1122:	b9 01       	movw	r22, r18
    1124:	a8 01       	movw	r20, r16
    1126:	ce 01       	movw	r24, r28
    1128:	c9 96       	adiw	r24, 0x39	; 57
    112a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    112e:	00 e0       	ldi	r16, 0x00	; 0
    1130:	10 e0       	ldi	r17, 0x00	; 0
    1132:	98 01       	movw	r18, r16
    1134:	b9 01       	movw	r22, r18
    1136:	a8 01       	movw	r20, r16
    1138:	ce 01       	movw	r24, r28
    113a:	8f 5b       	subi	r24, 0xBF	; 191
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1142:	00 e0       	ldi	r16, 0x00	; 0
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	98 01       	movw	r18, r16
    1148:	b9 01       	movw	r22, r18
    114a:	a8 01       	movw	r20, r16
    114c:	ce 01       	movw	r24, r28
    114e:	87 5b       	subi	r24, 0xB7	; 183
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
    1152:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1156:	00 e0       	ldi	r16, 0x00	; 0
    1158:	10 e0       	ldi	r17, 0x00	; 0
    115a:	98 01       	movw	r18, r16
    115c:	b9 01       	movw	r22, r18
    115e:	a8 01       	movw	r20, r16
    1160:	ce 01       	movw	r24, r28
    1162:	8f 5a       	subi	r24, 0xAF	; 175
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    116a:	00 e0       	ldi	r16, 0x00	; 0
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	98 01       	movw	r18, r16
    1170:	40 e0       	ldi	r20, 0x00	; 0
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	60 e8       	ldi	r22, 0x80	; 128
    1176:	7f e3       	ldi	r23, 0x3F	; 63
    1178:	ce 01       	movw	r24, r28
    117a:	87 5a       	subi	r24, 0xA7	; 167
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1182:	00 e0       	ldi	r16, 0x00	; 0
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	98 01       	movw	r18, r16
    1188:	b9 01       	movw	r22, r18
    118a:	a8 01       	movw	r20, r16
    118c:	ce 01       	movw	r24, r28
    118e:	8f 59       	subi	r24, 0x9F	; 159
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1196:	00 e0       	ldi	r16, 0x00	; 0
    1198:	10 e0       	ldi	r17, 0x00	; 0
    119a:	98 01       	movw	r18, r16
    119c:	b9 01       	movw	r22, r18
    119e:	a8 01       	movw	r20, r16
    11a0:	ce 01       	movw	r24, r28
    11a2:	87 59       	subi	r24, 0x97	; 151
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    11aa:	00 e0       	ldi	r16, 0x00	; 0
    11ac:	10 e0       	ldi	r17, 0x00	; 0
    11ae:	98 01       	movw	r18, r16
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	60 e8       	ldi	r22, 0x80	; 128
    11b6:	7f e3       	ldi	r23, 0x3F	; 63
    11b8:	ce 01       	movw	r24, r28
    11ba:	8f 58       	subi	r24, 0x8F	; 143
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    11c2:	00 e0       	ldi	r16, 0x00	; 0
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	98 01       	movw	r18, r16
    11c8:	b9 01       	movw	r22, r18
    11ca:	a8 01       	movw	r20, r16
    11cc:	ce 01       	movw	r24, r28
    11ce:	87 58       	subi	r24, 0x87	; 135
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
    11d6:	cb 57       	subi	r28, 0x7B	; 123
    11d8:	df 4f       	sbci	r29, 0xFF	; 255
    11da:	79 82       	std	Y+1, r7	; 0x01
    11dc:	68 82       	st	Y, r6
    11de:	c5 58       	subi	r28, 0x85	; 133
    11e0:	d0 40       	sbci	r29, 0x00	; 0
    11e2:	c9 57       	subi	r28, 0x79	; 121
    11e4:	df 4f       	sbci	r29, 0xFF	; 255
    11e6:	99 82       	std	Y+1, r9	; 0x01
    11e8:	88 82       	st	Y, r8
    11ea:	c7 58       	subi	r28, 0x87	; 135
    11ec:	d0 40       	sbci	r29, 0x00	; 0
    11ee:	cf 57       	subi	r28, 0x7F	; 127
    11f0:	df 4f       	sbci	r29, 0xFF	; 255
    11f2:	b9 82       	std	Y+1, r11	; 0x01
    11f4:	a8 82       	st	Y, r10
    11f6:	c1 58       	subi	r28, 0x81	; 129
    11f8:	d0 40       	sbci	r29, 0x00	; 0
    11fa:	cd 57       	subi	r28, 0x7D	; 125
    11fc:	df 4f       	sbci	r29, 0xFF	; 255
    11fe:	d9 82       	std	Y+1, r13	; 0x01
    1200:	c8 82       	st	Y, r12
    1202:	c3 58       	subi	r28, 0x83	; 131
    1204:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix),2);
    1206:	9e 01       	movw	r18, r28
    1208:	2f 57       	subi	r18, 0x7F	; 127
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	ae 01       	movw	r20, r28
    120e:	4b 57       	subi	r20, 0x7B	; 123
    1210:	5f 4f       	sbci	r21, 0xFF	; 255
    1212:	62 e0       	ldi	r22, 0x02	; 2
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	c7 01       	movw	r24, r14
    1218:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN5Gates8ampl2vecEiPiS0_>
    121c:	ae 01       	movw	r20, r28
    121e:	4f 5f       	subi	r20, 0xFF	; 255
    1220:	5f 4f       	sbci	r21, 0xFF	; 255
    1222:	bc 01       	movw	r22, r24
    1224:	c7 01       	movw	r24, r14
    1226:	0e 94 03 05 	call	0xa06	; 0xa06 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    122a:	42 e0       	ldi	r20, 0x02	; 2
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	bc 01       	movw	r22, r24
    1230:	c7 01       	movw	r24, r14
    1232:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN5Gates8vec2amplEP7Complexi>
}
    1236:	c8 57       	subi	r28, 0x78	; 120
    1238:	df 4f       	sbci	r29, 0xFF	; 255
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	bf 90       	pop	r11
    1256:	af 90       	pop	r10
    1258:	9f 90       	pop	r9
    125a:	8f 90       	pop	r8
    125c:	7f 90       	pop	r7
    125e:	6f 90       	pop	r6
    1260:	08 95       	ret

00001262 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
Gates::Gates(){setup_seed();}

Serial s;
    1262:	81 ec       	ldi	r24, 0xC1	; 193
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN6SerialC1Ev>
    126a:	08 95       	ret

0000126c <main>:
#include "qepu.h"
int main(void){
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	00 d0       	rcall	.+0      	; 0x1272 <main+0x6>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <main+0x8>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <main+0xa>
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    127a:	ce 01       	movw	r24, r28
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	0e 94 46 09 	call	0x128c	; 0x128c <_ZN4QEPUC1Ev>
	qepu.run();
    1282:	ce 01       	movw	r24, r28
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN4QEPU3runEv>
    128a:	ff cf       	rjmp	.-2      	; 0x128a <main+0x1e>

0000128c <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	ec 01       	movw	r28, r24
    1292:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN6EEPromC1Ev>
    1296:	ce 01       	movw	r24, r28
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN6SerialC1Ev>
    129e:	ce 01       	movw	r24, r28
    12a0:	05 96       	adiw	r24, 0x05	; 5
    12a2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN5GatesC1Ev>
    12a6:	8f ef       	ldi	r24, 0xFF	; 255
    12a8:	8a bb       	out	0x1a, r24	; 26
    12aa:	1c 82       	std	Y+4, r1	; 0x04
    12ac:	1b 82       	std	Y+3, r1	; 0x03
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    12b4:	7b b3       	in	r23, 0x1b	; 27
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	c9 01       	movw	r24, r18
    12bc:	06 2e       	mov	r0, r22
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <_ZN4QEPU10setctrlpinEii+0x10>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <_ZN4QEPU10setctrlpinEii+0xc>
    12c8:	80 95       	com	r24
    12ca:	87 23       	and	r24, r23
    12cc:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    12ce:	8b b3       	in	r24, 0x1b	; 27
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <_ZN4QEPU10setctrlpinEii+0x22>
    12d2:	44 0f       	add	r20, r20
    12d4:	55 1f       	adc	r21, r21
    12d6:	6a 95       	dec	r22
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <_ZN4QEPU10setctrlpinEii+0x1e>
    12da:	48 2b       	or	r20, r24
    12dc:	4b bb       	out	0x1b, r20	; 27
    12de:	08 95       	ret

000012e0 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    12ea:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    12ec:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    12ee:	64 e0       	ldi	r22, 0x04	; 4
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	ce 01       	movw	r24, r28
    12f4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	66 e0       	ldi	r22, 0x06	; 6
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	ce 01       	movw	r24, r28
    1302:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	66 e0       	ldi	r22, 0x06	; 6
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	ce 01       	movw	r24, r28
    1310:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    1314:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	08 95       	ret

0000131c <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	ec 01       	movw	r28, r24
    1326:	8a 01       	movw	r16, r20
	DDRB=0x00;
    1328:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    132a:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	65 e0       	ldi	r22, 0x05	; 5
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    1338:	a8 01       	movw	r20, r16
    133a:	64 e0       	ldi	r22, 0x04	; 4
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	ce 01       	movw	r24, r28
    1340:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    1344:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    1346:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    1348:	9f ef       	ldi	r25, 0xFF	; 255
    134a:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	08 95       	ret

00001358 <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    1358:	6f 92       	push	r6
    135a:	7f 92       	push	r7
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	6c 01       	movw	r12, r24
	serial.writestrln("");
    1376:	8c 01       	movw	r16, r24
    1378:	0f 5f       	subi	r16, 0xFF	; 255
    137a:	1f 4f       	sbci	r17, 0xFF	; 255
    137c:	6f ea       	ldi	r22, 0xAF	; 175
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	c8 01       	movw	r24, r16
    1382:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    1386:	66 e8       	ldi	r22, 0x86	; 134
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	c8 01       	movw	r24, r16
    138c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    1390:	c0 e0       	ldi	r28, 0x00	; 0
    1392:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    1394:	0f 2e       	mov	r0, r31
    1396:	f0 ea       	ldi	r31, 0xA0	; 160
    1398:	ef 2e       	mov	r14, r31
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	ff 2e       	mov	r15, r31
    139e:	f0 2d       	mov	r31, r0
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 15 11 	call	0x222a	; 0x222a <malloc>
    13a8:	88 2e       	mov	r8, r24
    13aa:	99 2e       	mov	r9, r25
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	be 01       	movw	r22, r28
    13b2:	c6 01       	movw	r24, r12
    13b4:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    13b8:	9f 93       	push	r25
    13ba:	8f 93       	push	r24
    13bc:	ff 92       	push	r15
    13be:	ef 92       	push	r14
    13c0:	9f 92       	push	r9
    13c2:	8f 92       	push	r8
    13c4:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 15 11 	call	0x222a	; 0x222a <malloc>
    13d0:	a8 2e       	mov	r10, r24
    13d2:	b9 2e       	mov	r11, r25
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	be 01       	movw	r22, r28
    13da:	c6 01       	movw	r24, r12
    13dc:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    13e0:	9f 93       	push	r25
    13e2:	8f 93       	push	r24
    13e4:	ff 92       	push	r15
    13e6:	ef 92       	push	r14
    13e8:	bf 92       	push	r11
    13ea:	af 92       	push	r10
    13ec:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 15 11 	call	0x222a	; 0x222a <malloc>
    13f8:	68 2e       	mov	r6, r24
    13fa:	79 2e       	mov	r7, r25
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	ff 92       	push	r15
    1402:	ef 92       	push	r14
    1404:	7f 92       	push	r7
    1406:	6f 92       	push	r6
    1408:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    140c:	63 ea       	ldi	r22, 0xA3	; 163
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	c8 01       	movw	r24, r16
    1412:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6Serial8writestrEPc>
    1416:	66 2d       	mov	r22, r6
    1418:	77 2d       	mov	r23, r7
    141a:	c8 01       	movw	r24, r16
    141c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6Serial8writestrEPc>
    1420:	65 ea       	ldi	r22, 0xA5	; 165
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	c8 01       	movw	r24, r16
    1426:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    142a:	68 2d       	mov	r22, r8
    142c:	79 2d       	mov	r23, r9
    142e:	c8 01       	movw	r24, r16
    1430:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    1434:	60 eb       	ldi	r22, 0xB0	; 176
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	c8 01       	movw	r24, r16
    143a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    143e:	6a 2d       	mov	r22, r10
    1440:	7b 2d       	mov	r23, r11
    1442:	c8 01       	movw	r24, r16
    1444:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    1448:	21 96       	adiw	r28, 0x01	; 1
    144a:	8d b7       	in	r24, 0x3d	; 61
    144c:	9e b7       	in	r25, 0x3e	; 62
    144e:	42 96       	adiw	r24, 0x12	; 18
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	9e bf       	out	0x3e, r25	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	8d bf       	out	0x3d, r24	; 61
    145a:	c4 30       	cpi	r28, 0x04	; 4
    145c:	d1 05       	cpc	r29, r1
    145e:	09 f0       	breq	.+2      	; 0x1462 <_ZN4QEPU7dumpmemEv+0x10a>
    1460:	9f cf       	rjmp	.-194    	; 0x13a0 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	bf 90       	pop	r11
    1474:	af 90       	pop	r10
    1476:	9f 90       	pop	r9
    1478:	8f 90       	pop	r8
    147a:	7f 90       	pop	r7
    147c:	6f 90       	pop	r6
    147e:	08 95       	ret

00001480 <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	d6 2f       	mov	r29, r22
    1492:	c7 2f       	mov	r28, r23
    1494:	e6 2f       	mov	r30, r22
    1496:	f7 2f       	mov	r31, r23
	int c_length=0;
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    149c:	21 91       	ld	r18, Z+
    149e:	2f 3f       	cpi	r18, 0xFF	; 255
    14a0:	89 f4       	brne	.+34     	; 0x14c4 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    14a2:	df 01       	movw	r26, r30
    14a4:	12 97       	sbiw	r26, 0x02	; 2
    14a6:	4c 91       	ld	r20, X
    14a8:	4f 3f       	cpi	r20, 0xFF	; 255
    14aa:	61 f4       	brne	.+24     	; 0x14c4 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    14ac:	11 97       	sbiw	r26, 0x01	; 1
    14ae:	4c 91       	ld	r20, X
    14b0:	4f 3f       	cpi	r20, 0xFF	; 255
    14b2:	41 f4       	brne	.+16     	; 0x14c4 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    14b4:	11 97       	sbiw	r26, 0x01	; 1
    14b6:	4c 91       	ld	r20, X
    14b8:	4f 3f       	cpi	r20, 0xFF	; 255
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    14bc:	11 97       	sbiw	r26, 0x01	; 1
    14be:	2c 91       	ld	r18, X
    14c0:	2f 3f       	cpi	r18, 0xFF	; 255
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	ea cf       	rjmp	.-44     	; 0x149c <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    14c8:	8c 01       	movw	r16, r24
    14ca:	04 50       	subi	r16, 0x04	; 4
    14cc:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    14ce:	6c 01       	movw	r12, r24
    14d0:	2f ef       	ldi	r18, 0xFF	; 255
    14d2:	c2 1a       	sub	r12, r18
    14d4:	d2 0a       	sbc	r13, r18
    14d6:	76 01       	movw	r14, r12
    14d8:	ee 0c       	add	r14, r14
    14da:	ff 1c       	adc	r15, r15
    14dc:	c7 01       	movw	r24, r14
    14de:	0e 94 15 11 	call	0x222a	; 0x222a <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    14e2:	10 16       	cp	r1, r16
    14e4:	11 06       	cpc	r1, r17
    14e6:	74 f4       	brge	.+28     	; 0x1504 <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    14e8:	dc 01       	movw	r26, r24
    14ea:	ed 2f       	mov	r30, r29
    14ec:	fc 2f       	mov	r31, r28
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	41 91       	ld	r20, Z+
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	4d 93       	st	X+, r20
    14f8:	5d 93       	st	X+, r21
    14fa:	2f 5f       	subi	r18, 0xFF	; 255
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	20 17       	cp	r18, r16
    1500:	31 07       	cpc	r19, r17
    1502:	bc f3       	brlt	.-18     	; 0x14f2 <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    1504:	0c 15       	cp	r16, r12
    1506:	1d 05       	cpc	r17, r13
    1508:	7c f4       	brge	.+30     	; 0x1528 <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    150a:	f7 01       	movw	r30, r14
    150c:	3a 97       	sbiw	r30, 0x0a	; 10
    150e:	e8 0f       	add	r30, r24
    1510:	f9 1f       	adc	r31, r25
    1512:	25 e0       	ldi	r18, 0x05	; 5
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	4f ef       	ldi	r20, 0xFF	; 255
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	41 93       	st	Z+, r20
    151c:	51 93       	st	Z+, r21
    151e:	21 50       	subi	r18, 0x01	; 1
    1520:	31 09       	sbc	r19, r1
    1522:	21 15       	cp	r18, r1
    1524:	31 05       	cpc	r19, r1
    1526:	c9 f7       	brne	.-14     	; 0x151a <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	08 95       	ret

0000153a <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	c4 56       	subi	r28, 0x64	; 100
    1548:	d1 09       	sbc	r29, r1
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
	//char str[countdigits(dec)+1];
	char str[100];
	sprintf(str,"%d",dec);
    1554:	7f 93       	push	r23
    1556:	6f 93       	push	r22
    1558:	80 ea       	ldi	r24, 0xA0	; 160
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9f 93       	push	r25
    155e:	8f 93       	push	r24
    1560:	8e 01       	movw	r16, r28
    1562:	0f 5f       	subi	r16, 0xFF	; 255
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	1f 93       	push	r17
    1568:	0f 93       	push	r16
    156a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sprintf>
	return str;
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
}
    157a:	c8 01       	movw	r24, r16
    157c:	cc 59       	subi	r28, 0x9C	; 156
    157e:	df 4f       	sbci	r29, 0xFF	; 255
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    1594:	61 15       	cp	r22, r1
    1596:	71 05       	cpc	r23, r1
    1598:	59 f0       	breq	.+22     	; 0x15b0 <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    159a:	8f e9       	ldi	r24, 0x9F	; 159
    159c:	9f e0       	ldi	r25, 0x0F	; 15
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <_ZN4QEPU5Utils5delayEi+0xa>
    15a2:	00 c0       	rjmp	.+0      	; 0x15a4 <_ZN4QEPU5Utils5delayEi+0x10>
    15a4:	00 00       	nop
    15a6:	61 50       	subi	r22, 0x01	; 1
    15a8:	71 09       	sbc	r23, r1
    15aa:	61 15       	cp	r22, r1
    15ac:	71 05       	cpc	r23, r1
    15ae:	a9 f7       	brne	.-22     	; 0x159a <_ZN4QEPU5Utils5delayEi+0x6>
}
    15b0:	08 95       	ret

000015b2 <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    15b2:	2f 92       	push	r2
    15b4:	3f 92       	push	r3
    15b6:	4f 92       	push	r4
    15b8:	5f 92       	push	r5
    15ba:	6f 92       	push	r6
    15bc:	7f 92       	push	r7
    15be:	8f 92       	push	r8
    15c0:	9f 92       	push	r9
    15c2:	af 92       	push	r10
    15c4:	bf 92       	push	r11
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	ec 01       	movw	r28, r24
    15d8:	1b 01       	movw	r2, r22
    15da:	29 01       	movw	r4, r18
    15dc:	3a 01       	movw	r6, r20
    15de:	47 01       	movw	r8, r14
    15e0:	58 01       	movw	r10, r16
	int * newthephi=(int*)malloc(sizeof(int)*2);
    15e2:	84 e0       	ldi	r24, 0x04	; 4
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 15 11 	call	0x222a	; 0x222a <malloc>
    15ea:	6c 01       	movw	r12, r24
	
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    15ec:	f1 01       	movw	r30, r2
    15ee:	31 97       	sbiw	r30, 0x01	; 1
    15f0:	e6 31       	cpi	r30, 0x16	; 22
    15f2:	f1 05       	cpc	r31, r1
    15f4:	08 f0       	brcs	.+2      	; 0x15f8 <_ZN4QEPU7executeEill+0x46>
    15f6:	47 c1       	rjmp	.+654    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
    15f8:	e6 5d       	subi	r30, 0xD6	; 214
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	b7 01       	movw	r22, r14
    1606:	ce 01       	movw	r24, r28
    1608:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    160c:	9c 01       	movw	r18, r24
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	b2 01       	movw	r22, r4
    1614:	ce 01       	movw	r24, r28
    1616:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	b7 01       	movw	r22, r14
    1620:	ce 01       	movw	r24, r28
    1622:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    1626:	9c 01       	movw	r18, r24
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	b2 01       	movw	r22, r4
    162e:	ce 01       	movw	r24, r28
    1630:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
		break;
    1634:	28 c1       	rjmp	.+592    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	48 1a       	sub	r4, r24
    163a:	51 08       	sbc	r5, r1
    163c:	5c 82       	std	Y+4, r5	; 0x04
    163e:	4b 82       	std	Y+3, r4	; 0x03
		break;
    1640:	22 c1       	rjmp	.+580    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    1642:	b2 01       	movw	r22, r4
    1644:	ce 01       	movw	r24, r28
    1646:	02 96       	adiw	r24, 0x02	; 2
    1648:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN4QEPU5Utils5delayEi>
    164c:	1c c1       	rjmp	.+568    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    164e:	97 01       	movw	r18, r14
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	b2 01       	movw	r22, r4
    1656:	ce 01       	movw	r24, r28
    1658:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
		break;
    165c:	14 c1       	rjmp	.+552    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    165e:	97 01       	movw	r18, r14
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	b2 01       	movw	r22, r4
    1666:	ce 01       	movw	r24, r28
    1668:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
		break;
    166c:	0c c1       	rjmp	.+536    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	b2 01       	movw	r22, r4
    1674:	ce 01       	movw	r24, r28
    1676:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    167a:	8c 01       	movw	r16, r24
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	b2 01       	movw	r22, r4
    1682:	ce 01       	movw	r24, r28
    1684:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    1688:	a8 01       	movw	r20, r16
    168a:	bc 01       	movw	r22, r24
    168c:	ce 01       	movw	r24, r28
    168e:	05 96       	adiw	r24, 0x05	; 5
    1690:	0e 94 b0 05 	call	0xb60	; 0xb60 <_ZN5Gates1XEii>
    1694:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1696:	fc 01       	movw	r30, r24
    1698:	20 81       	ld	r18, Z
    169a:	31 81       	ldd	r19, Z+1	; 0x01
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	b2 01       	movw	r22, r4
    16a2:	ce 01       	movw	r24, r28
    16a4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
    16a8:	f6 01       	movw	r30, r12
    16aa:	22 81       	ldd	r18, Z+2	; 0x02
    16ac:	33 81       	ldd	r19, Z+3	; 0x03
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	b2 01       	movw	r22, r4
    16b4:	ce 01       	movw	r24, r28
    16b6:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
		break;
    16ba:	e5 c0       	rjmp	.+458    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	b2 01       	movw	r22, r4
    16c2:	ce 01       	movw	r24, r28
    16c4:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    16c8:	8c 01       	movw	r16, r24
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	b2 01       	movw	r22, r4
    16d0:	ce 01       	movw	r24, r28
    16d2:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    16d6:	a8 01       	movw	r20, r16
    16d8:	bc 01       	movw	r22, r24
    16da:	ce 01       	movw	r24, r28
    16dc:	05 96       	adiw	r24, 0x05	; 5
    16de:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN5Gates1YEii>
    16e2:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 81       	ld	r18, Z
    16e8:	31 81       	ldd	r19, Z+1	; 0x01
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	b2 01       	movw	r22, r4
    16f0:	ce 01       	movw	r24, r28
    16f2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
    16f6:	f6 01       	movw	r30, r12
    16f8:	22 81       	ldd	r18, Z+2	; 0x02
    16fa:	33 81       	ldd	r19, Z+3	; 0x03
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	b2 01       	movw	r22, r4
    1702:	ce 01       	movw	r24, r28
    1704:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
		break;
    1708:	be c0       	rjmp	.+380    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    170a:	41 e0       	ldi	r20, 0x01	; 1
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	b2 01       	movw	r22, r4
    1710:	ce 01       	movw	r24, r28
    1712:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    1716:	8c 01       	movw	r16, r24
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	b2 01       	movw	r22, r4
    171e:	ce 01       	movw	r24, r28
    1720:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    1724:	a8 01       	movw	r20, r16
    1726:	bc 01       	movw	r22, r24
    1728:	ce 01       	movw	r24, r28
    172a:	05 96       	adiw	r24, 0x05	; 5
    172c:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN5Gates1ZEii>
    1730:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1732:	fc 01       	movw	r30, r24
    1734:	20 81       	ld	r18, Z
    1736:	31 81       	ldd	r19, Z+1	; 0x01
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	b2 01       	movw	r22, r4
    173e:	ce 01       	movw	r24, r28
    1740:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
    1744:	f6 01       	movw	r30, r12
    1746:	22 81       	ldd	r18, Z+2	; 0x02
    1748:	33 81       	ldd	r19, Z+3	; 0x03
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	b2 01       	movw	r22, r4
    1750:	ce 01       	movw	r24, r28
    1752:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
		break;
    1756:	97 c0       	rjmp	.+302    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	b2 01       	movw	r22, r4
    175e:	ce 01       	movw	r24, r28
    1760:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    1764:	8c 01       	movw	r16, r24
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	b2 01       	movw	r22, r4
    176c:	ce 01       	movw	r24, r28
    176e:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    1772:	a8 01       	movw	r20, r16
    1774:	bc 01       	movw	r22, r24
    1776:	ce 01       	movw	r24, r28
    1778:	05 96       	adiw	r24, 0x05	; 5
    177a:	0e 94 ee 06 	call	0xddc	; 0xddc <_ZN5Gates1HEii>
    177e:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1780:	fc 01       	movw	r30, r24
    1782:	20 81       	ld	r18, Z
    1784:	31 81       	ldd	r19, Z+1	; 0x01
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	b2 01       	movw	r22, r4
    178c:	ce 01       	movw	r24, r28
    178e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
    1792:	f6 01       	movw	r30, r12
    1794:	22 81       	ldd	r18, Z+2	; 0x02
    1796:	33 81       	ldd	r19, Z+3	; 0x03
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	b2 01       	movw	r22, r4
    179e:	ce 01       	movw	r24, r28
    17a0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
		break;
    17a4:	70 c0       	rjmp	.+224    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	b2 01       	movw	r22, r4
    17ac:	ce 01       	movw	r24, r28
    17ae:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    17b2:	8c 01       	movw	r16, r24
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	b2 01       	movw	r22, r4
    17ba:	ce 01       	movw	r24, r28
    17bc:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    17c0:	a8 01       	movw	r20, r16
    17c2:	bc 01       	movw	r22, r24
    17c4:	ce 01       	movw	r24, r28
    17c6:	05 96       	adiw	r24, 0x05	; 5
    17c8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <_ZN5Gates1SEii>
    17cc:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    17ce:	fc 01       	movw	r30, r24
    17d0:	20 81       	ld	r18, Z
    17d2:	31 81       	ldd	r19, Z+1	; 0x01
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	b2 01       	movw	r22, r4
    17da:	ce 01       	movw	r24, r28
    17dc:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
    17e0:	f6 01       	movw	r30, r12
    17e2:	22 81       	ldd	r18, Z+2	; 0x02
    17e4:	33 81       	ldd	r19, Z+3	; 0x03
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	b2 01       	movw	r22, r4
    17ec:	ce 01       	movw	r24, r28
    17ee:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
		break;
    17f2:	49 c0       	rjmp	.+146    	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	b2 01       	movw	r22, r4
    17fa:	ce 01       	movw	r24, r28
    17fc:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    1800:	8c 01       	movw	r16, r24
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	b2 01       	movw	r22, r4
    1808:	ce 01       	movw	r24, r28
    180a:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    180e:	a8 01       	movw	r20, r16
    1810:	bc 01       	movw	r22, r24
    1812:	ce 01       	movw	r24, r28
    1814:	05 96       	adiw	r24, 0x05	; 5
    1816:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN5Gates1TEii>
    181a:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    181c:	fc 01       	movw	r30, r24
    181e:	20 81       	ld	r18, Z
    1820:	31 81       	ldd	r19, Z+1	; 0x01
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	b2 01       	movw	r22, r4
    1828:	ce 01       	movw	r24, r28
    182a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
    182e:	f6 01       	movw	r30, r12
    1830:	22 81       	ldd	r18, Z+2	; 0x02
    1832:	33 81       	ldd	r19, Z+3	; 0x03
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	b2 01       	movw	r22, r4
    183a:	ce 01       	movw	r24, r28
    183c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN4QEPU5writeEiii>
		break;
    1840:	22 c0       	rjmp	.+68     	; 0x1886 <_ZN4QEPU7executeEill+0x2d4>
		//2 QUBIT GATES -
		case 0x16: 
			gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	b7 01       	movw	r22, r14
    1848:	ce 01       	movw	r24, r28
    184a:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    184e:	8c 01       	movw	r16, r24
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	b4 01       	movw	r22, r8
    1856:	ce 01       	movw	r24, r28
    1858:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    185c:	5c 01       	movw	r10, r24
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	b2 01       	movw	r22, r4
    1864:	ce 01       	movw	r24, r28
    1866:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    186a:	7c 01       	movw	r14, r24
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	b2 01       	movw	r22, r4
    1872:	ce 01       	movw	r24, r28
    1874:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN4QEPU4readEii>
    1878:	95 01       	movw	r18, r10
    187a:	a7 01       	movw	r20, r14
    187c:	bc 01       	movw	r22, r24
    187e:	ce 01       	movw	r24, r28
    1880:	05 96       	adiw	r24, 0x05	; 5
    1882:	0e 94 2f 08 	call	0x105e	; 0x105e <_ZN5Gates3CNOEiiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    1886:	c6 01       	movw	r24, r12
    1888:	0e 94 ad 11 	call	0x235a	; 0x235a <free>
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	df 90       	pop	r13
    189a:	cf 90       	pop	r12
    189c:	bf 90       	pop	r11
    189e:	af 90       	pop	r10
    18a0:	9f 90       	pop	r9
    18a2:	8f 90       	pop	r8
    18a4:	7f 90       	pop	r7
    18a6:	6f 90       	pop	r6
    18a8:	5f 90       	pop	r5
    18aa:	4f 90       	pop	r4
    18ac:	3f 90       	pop	r3
    18ae:	2f 90       	pop	r2
    18b0:	08 95       	ret

000018b2 <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    18b2:	2f 92       	push	r2
    18b4:	3f 92       	push	r3
    18b6:	4f 92       	push	r4
    18b8:	5f 92       	push	r5
    18ba:	6f 92       	push	r6
    18bc:	7f 92       	push	r7
    18be:	8f 92       	push	r8
    18c0:	9f 92       	push	r9
    18c2:	af 92       	push	r10
    18c4:	bf 92       	push	r11
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	c0 57       	subi	r28, 0x70	; 112
    18dc:	d1 09       	sbc	r29, r1
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    18ea:	0e 94 22 02 	call	0x444	; 0x444 <_ZN6EEProm7readallEv>
    18ee:	bc 01       	movw	r22, r24
    18f0:	c3 01       	movw	r24, r6
    18f2:	02 96       	adiw	r24, 0x02	; 2
    18f4:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN4QEPU5Utils10str2intarrEPc>
    18f8:	fc 01       	movw	r30, r24
    18fa:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    1900:	40 85       	ldd	r20, Z+8	; 0x08
    1902:	51 85       	ldd	r21, Z+9	; 0x09
    1904:	4f 3f       	cpi	r20, 0xFF	; 255
    1906:	51 05       	cpc	r21, r1
    1908:	a1 f4       	brne	.+40     	; 0x1932 <_ZN4QEPU3runEv+0x80>
    190a:	46 81       	ldd	r20, Z+6	; 0x06
    190c:	57 81       	ldd	r21, Z+7	; 0x07
    190e:	4f 3f       	cpi	r20, 0xFF	; 255
    1910:	51 05       	cpc	r21, r1
    1912:	79 f4       	brne	.+30     	; 0x1932 <_ZN4QEPU3runEv+0x80>
    1914:	44 81       	ldd	r20, Z+4	; 0x04
    1916:	55 81       	ldd	r21, Z+5	; 0x05
    1918:	4f 3f       	cpi	r20, 0xFF	; 255
    191a:	51 05       	cpc	r21, r1
    191c:	51 f4       	brne	.+20     	; 0x1932 <_ZN4QEPU3runEv+0x80>
    191e:	42 81       	ldd	r20, Z+2	; 0x02
    1920:	53 81       	ldd	r21, Z+3	; 0x03
    1922:	4f 3f       	cpi	r20, 0xFF	; 255
    1924:	51 05       	cpc	r21, r1
    1926:	29 f4       	brne	.+10     	; 0x1932 <_ZN4QEPU3runEv+0x80>
    1928:	40 81       	ld	r20, Z
    192a:	51 81       	ldd	r21, Z+1	; 0x01
    192c:	4f 3f       	cpi	r20, 0xFF	; 255
    192e:	51 05       	cpc	r21, r1
    1930:	21 f0       	breq	.+8      	; 0x193a <_ZN4QEPU3runEv+0x88>
    1932:	2f 5f       	subi	r18, 0xFF	; 255
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	32 96       	adiw	r30, 0x02	; 2
    1938:	e3 cf       	rjmp	.-58     	; 0x1900 <_ZN4QEPU3runEv+0x4e>
    193a:	a9 01       	movw	r20, r18
    193c:	44 50       	subi	r20, 0x04	; 4
    193e:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1940:	14 16       	cp	r1, r20
    1942:	15 06       	cpc	r1, r21
    1944:	0c f0       	brlt	.+2      	; 0x1948 <_ZN4QEPU3runEv+0x96>
    1946:	07 c1       	rjmp	.+526    	; 0x1b56 <_ZN4QEPU3runEv+0x2a4>
    1948:	fc 01       	movw	r30, r24
    194a:	25 50       	subi	r18, 0x05	; 5
    194c:	31 09       	sbc	r19, r1
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	41 2c       	mov	r4, r1
    1958:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    195a:	c1 2c       	mov	r12, r1
    195c:	d1 2c       	mov	r13, r1
    195e:	0c c0       	rjmp	.+24     	; 0x1978 <_ZN4QEPU3runEv+0xc6>
    1960:	69 30       	cpi	r22, 0x09	; 9
    1962:	71 05       	cpc	r23, r1
    1964:	34 f0       	brlt	.+12     	; 0x1972 <_ZN4QEPU3runEv+0xc0>
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	48 1a       	sub	r4, r24
    196a:	58 0a       	sbc	r5, r24
    196c:	8c 2d       	mov	r24, r12
    196e:	9d 2d       	mov	r25, r13
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    1972:	cb 01       	movw	r24, r22
    1974:	4f 5f       	subi	r20, 0xFF	; 255
    1976:	5f 4f       	sbci	r21, 0xFF	; 255
    1978:	bc 01       	movw	r22, r24
    197a:	6f 5f       	subi	r22, 0xFF	; 255
    197c:	7f 4f       	sbci	r23, 0xFF	; 255
    197e:	01 91       	ld	r16, Z+
    1980:	11 91       	ld	r17, Z+
    1982:	d2 01       	movw	r26, r4
    1984:	aa 0f       	add	r26, r26
    1986:	bb 1f       	adc	r27, r27
    1988:	aa 0f       	add	r26, r26
    198a:	bb 1f       	adc	r27, r27
    198c:	aa 0f       	add	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	a4 0d       	add	r26, r4
    1992:	b5 1d       	adc	r27, r5
    1994:	8a 0f       	add	r24, r26
    1996:	9b 1f       	adc	r25, r27
    1998:	dc 01       	movw	r26, r24
    199a:	aa 0f       	add	r26, r26
    199c:	bb 1f       	adc	r27, r27
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	8c 0f       	add	r24, r28
    19a4:	9d 1f       	adc	r25, r29
    19a6:	a8 0f       	add	r26, r24
    19a8:	b9 1f       	adc	r27, r25
    19aa:	0d 93       	st	X+, r16
    19ac:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    19ae:	42 17       	cp	r20, r18
    19b0:	53 07       	cpc	r21, r19
    19b2:	b1 f6       	brne	.-84     	; 0x1960 <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    19b4:	f3 01       	movw	r30, r6
    19b6:	14 82       	std	Z+4, r1	; 0x04
    19b8:	13 82       	std	Z+3, r1	; 0x03
    19ba:	14 14       	cp	r1, r4
    19bc:	15 04       	cpc	r1, r5
    19be:	0c f0       	brlt	.+2      	; 0x19c2 <_ZN4QEPU3runEv+0x110>
    19c0:	c6 c0       	rjmp	.+396    	; 0x1b4e <_ZN4QEPU3runEv+0x29c>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    19c6:	5e 01       	movw	r10, r28
    19c8:	f2 e6       	ldi	r31, 0x62	; 98
    19ca:	af 0e       	add	r10, r31
    19cc:	b1 1c       	adc	r11, r1
    19ce:	6e 01       	movw	r12, r28
    19d0:	2b e5       	ldi	r18, 0x5B	; 91
    19d2:	c2 0e       	add	r12, r18
    19d4:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    19d6:	0f 2e       	mov	r0, r31
    19d8:	fa eb       	ldi	r31, 0xBA	; 186
    19da:	8f 2e       	mov	r8, r31
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	9f 2e       	mov	r9, r31
    19e0:	f0 2d       	mov	r31, r0
    19e2:	ae 96       	adiw	r28, 0x2e	; 46
    19e4:	af ae       	std	Y+63, r10	; 0x3f
    19e6:	ae 97       	sbiw	r28, 0x2e	; 46
    19e8:	af 96       	adiw	r28, 0x2f	; 47
    19ea:	bf ae       	std	Y+63, r11	; 0x3f
    19ec:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    19ee:	e0 96       	adiw	r28, 0x30	; 48
    19f0:	cf ae       	std	Y+63, r12	; 0x3f
    19f2:	e0 97       	sbiw	r28, 0x30	; 48
    19f4:	e1 96       	adiw	r28, 0x31	; 49
    19f6:	df ae       	std	Y+63, r13	; 0x3f
    19f8:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    19fa:	f5 01       	movw	r30, r10
    19fc:	10 82       	st	Z, r1
    19fe:	11 82       	std	Z+1, r1	; 0x01
    1a00:	12 82       	std	Z+2, r1	; 0x02
    1a02:	13 82       	std	Z+3, r1	; 0x03
    1a04:	14 82       	std	Z+4, r1	; 0x04
    1a06:	15 82       	std	Z+5, r1	; 0x05
    1a08:	16 82       	std	Z+6, r1	; 0x06
    1a0a:	f6 01       	movw	r30, r12
    1a0c:	10 82       	st	Z, r1
    1a0e:	11 82       	std	Z+1, r1	; 0x01
    1a10:	12 82       	std	Z+2, r1	; 0x02
    1a12:	13 82       	std	Z+3, r1	; 0x03
    1a14:	14 82       	std	Z+4, r1	; 0x04
    1a16:	15 82       	std	Z+5, r1	; 0x05
    1a18:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	fc 01       	movw	r30, r24
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	ee 0f       	add	r30, r30
    1a2a:	ff 1f       	adc	r31, r31
    1a2c:	8e 0f       	add	r24, r30
    1a2e:	9f 1f       	adc	r25, r31
    1a30:	e1 e0       	ldi	r30, 0x01	; 1
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	ec 0f       	add	r30, r28
    1a36:	fd 1f       	adc	r31, r29
    1a38:	e8 0f       	add	r30, r24
    1a3a:	f9 1f       	adc	r31, r25
    1a3c:	20 80       	ld	r2, Z
    1a3e:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1a44:	0f 5f       	subi	r16, 0xFF	; 255
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	f3 01       	movw	r30, r6
    1a4a:	83 81       	ldd	r24, Z+3	; 0x03
    1a4c:	94 81       	ldd	r25, Z+4	; 0x04
    1a4e:	fc 01       	movw	r30, r24
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	ee 0f       	add	r30, r30
    1a5a:	ff 1f       	adc	r31, r31
    1a5c:	8e 0f       	add	r24, r30
    1a5e:	9f 1f       	adc	r25, r31
    1a60:	80 0f       	add	r24, r16
    1a62:	91 1f       	adc	r25, r17
    1a64:	fc 01       	movw	r30, r24
    1a66:	ee 0f       	add	r30, r30
    1a68:	ff 1f       	adc	r31, r31
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	8c 0f       	add	r24, r28
    1a70:	9d 1f       	adc	r25, r29
    1a72:	e8 0f       	add	r30, r24
    1a74:	f9 1f       	adc	r31, r25
    1a76:	81 81       	ldd	r24, Z+1	; 0x01
    1a78:	8f 93       	push	r24
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8f 93       	push	r24
    1a7e:	bf 92       	push	r11
    1a80:	af 92       	push	r10
    1a82:	9f 92       	push	r9
    1a84:	8f 92       	push	r8
    1a86:	bf 92       	push	r11
    1a88:	af 92       	push	r10
    1a8a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1a8e:	f3 01       	movw	r30, r6
    1a90:	83 81       	ldd	r24, Z+3	; 0x03
    1a92:	94 81       	ldd	r25, Z+4	; 0x04
    1a94:	fc 01       	movw	r30, r24
    1a96:	ee 0f       	add	r30, r30
    1a98:	ff 1f       	adc	r31, r31
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	ff 1f       	adc	r31, r31
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	e8 0f       	add	r30, r24
    1aa4:	f9 1f       	adc	r31, r25
    1aa6:	e0 0f       	add	r30, r16
    1aa8:	f1 1f       	adc	r31, r17
    1aaa:	34 96       	adiw	r30, 0x04	; 4
    1aac:	ee 0f       	add	r30, r30
    1aae:	ff 1f       	adc	r31, r31
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	8c 0f       	add	r24, r28
    1ab6:	9d 1f       	adc	r25, r29
    1ab8:	e8 0f       	add	r30, r24
    1aba:	f9 1f       	adc	r31, r25
    1abc:	81 81       	ldd	r24, Z+1	; 0x01
    1abe:	8f 93       	push	r24
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8f 93       	push	r24
    1ac4:	df 92       	push	r13
    1ac6:	cf 92       	push	r12
    1ac8:	9f 92       	push	r9
    1aca:	8f 92       	push	r8
    1acc:	df 92       	push	r13
    1ace:	cf 92       	push	r12
    1ad0:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	04 30       	cpi	r16, 0x04	; 4
    1ae0:	11 05       	cpc	r17, r1
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <_ZN4QEPU3runEv+0x234>
    1ae4:	af cf       	rjmp	.-162    	; 0x1a44 <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    1ae6:	40 e1       	ldi	r20, 0x10	; 16
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	e0 96       	adiw	r28, 0x30	; 48
    1af0:	8f ad       	ldd	r24, Y+63	; 0x3f
    1af2:	e0 97       	sbiw	r28, 0x30	; 48
    1af4:	e1 96       	adiw	r28, 0x31	; 49
    1af6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1af8:	e1 97       	sbiw	r28, 0x31	; 49
    1afa:	0e 94 9a 12 	call	0x2534	; 0x2534 <strtol>
    1afe:	ad 96       	adiw	r28, 0x2d	; 45
    1b00:	6c af       	std	Y+60, r22	; 0x3c
    1b02:	7d af       	std	Y+61, r23	; 0x3d
    1b04:	8e af       	std	Y+62, r24	; 0x3e
    1b06:	9f af       	std	Y+63, r25	; 0x3f
    1b08:	ad 97       	sbiw	r28, 0x2d	; 45
    1b0a:	40 e1       	ldi	r20, 0x10	; 16
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	ae 96       	adiw	r28, 0x2e	; 46
    1b14:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b16:	ae 97       	sbiw	r28, 0x2e	; 46
    1b18:	af 96       	adiw	r28, 0x2f	; 47
    1b1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b1c:	af 97       	sbiw	r28, 0x2f	; 47
    1b1e:	0e 94 9a 12 	call	0x2534	; 0x2534 <strtol>
    1b22:	9b 01       	movw	r18, r22
    1b24:	ac 01       	movw	r20, r24
    1b26:	ad 96       	adiw	r28, 0x2d	; 45
    1b28:	ec ac       	ldd	r14, Y+60	; 0x3c
    1b2a:	fd ac       	ldd	r15, Y+61	; 0x3d
    1b2c:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b2e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b30:	ad 97       	sbiw	r28, 0x2d	; 45
    1b32:	b1 01       	movw	r22, r2
    1b34:	c3 01       	movw	r24, r6
    1b36:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1b3a:	f3 01       	movw	r30, r6
    1b3c:	83 81       	ldd	r24, Z+3	; 0x03
    1b3e:	94 81       	ldd	r25, Z+4	; 0x04
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	94 83       	std	Z+4, r25	; 0x04
    1b44:	83 83       	std	Z+3, r24	; 0x03
    1b46:	84 15       	cp	r24, r4
    1b48:	95 05       	cpc	r25, r5
    1b4a:	0c f4       	brge	.+2      	; 0x1b4e <_ZN4QEPU3runEv+0x29c>
    1b4c:	56 cf       	rjmp	.-340    	; 0x19fa <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    1b4e:	c3 01       	movw	r24, r6
    1b50:	0e 94 ac 09 	call	0x1358	; 0x1358 <_ZN4QEPU7dumpmemEv>
    1b54:	04 c0       	rjmp	.+8      	; 0x1b5e <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1b56:	f3 01       	movw	r30, r6
    1b58:	14 82       	std	Z+4, r1	; 0x04
    1b5a:	13 82       	std	Z+3, r1	; 0x03
    1b5c:	f8 cf       	rjmp	.-16     	; 0x1b4e <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    1b5e:	c0 59       	subi	r28, 0x90	; 144
    1b60:	df 4f       	sbci	r29, 0xFF	; 255
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	ff 90       	pop	r15
    1b76:	ef 90       	pop	r14
    1b78:	df 90       	pop	r13
    1b7a:	cf 90       	pop	r12
    1b7c:	bf 90       	pop	r11
    1b7e:	af 90       	pop	r10
    1b80:	9f 90       	pop	r9
    1b82:	8f 90       	pop	r8
    1b84:	7f 90       	pop	r7
    1b86:	6f 90       	pop	r6
    1b88:	5f 90       	pop	r5
    1b8a:	4f 90       	pop	r4
    1b8c:	3f 90       	pop	r3
    1b8e:	2f 90       	pop	r2
    1b90:	08 95       	ret

00001b92 <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    1b92:	83 e3       	ldi	r24, 0x33	; 51
    1b94:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    1b96:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    1b98:	86 e8       	ldi	r24, 0x86	; 134
    1b9a:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    1b9c:	88 e1       	ldi	r24, 0x18	; 24
    1b9e:	8a b9       	out	0x0a, r24	; 10
    1ba0:	08 95       	ret

00001ba2 <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    1ba2:	5d 9b       	sbis	0x0b, 5	; 11
    1ba4:	fe cf       	rjmp	.-4      	; 0x1ba2 <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    1ba6:	6c b9       	out	0x0c, r22	; 12
    1ba8:	08 95       	ret

00001baa <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	8c 01       	movw	r16, r24
    1bb4:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    1bb6:	68 81       	ld	r22, Y
    1bb8:	66 23       	and	r22, r22
    1bba:	39 f0       	breq	.+14     	; 0x1bca <_ZN6Serial8writestrEPc+0x20>
    1bbc:	21 96       	adiw	r28, 0x01	; 1
    1bbe:	c8 01       	movw	r24, r16
    1bc0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN6Serial5writeEc>
    1bc4:	69 91       	ld	r22, Y+
    1bc6:	61 11       	cpse	r22, r1
    1bc8:	fa cf       	rjmp	.-12     	; 0x1bbe <_ZN6Serial8writestrEPc+0x14>
}
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	08 95       	ret

00001bd4 <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	ec 01       	movw	r28, r24
	writestr(data);
    1bda:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    1bde:	6d e0       	ldi	r22, 0x0D	; 13
    1be0:	ce 01       	movw	r24, r28
    1be2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN6Serial5writeEc>
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	08 95       	ret

00001bec <acos>:
    1bec:	9f 93       	push	r25
    1bee:	9f 77       	andi	r25, 0x7F	; 127
    1bf0:	71 d1       	rcall	.+738    	; 0x1ed4 <__fp_arccos>
    1bf2:	0f 90       	pop	r0
    1bf4:	00 20       	and	r0, r0
    1bf6:	3a f4       	brpl	.+14     	; 0x1c06 <acos+0x1a>
    1bf8:	90 58       	subi	r25, 0x80	; 128
    1bfa:	a2 ea       	ldi	r26, 0xA2	; 162
    1bfc:	2a ed       	ldi	r18, 0xDA	; 218
    1bfe:	3f e0       	ldi	r19, 0x0F	; 15
    1c00:	49 e4       	ldi	r20, 0x49	; 73
    1c02:	50 e4       	ldi	r21, 0x40	; 64
    1c04:	13 d0       	rcall	.+38     	; 0x1c2c <__addsf3x>
    1c06:	e5 c1       	rjmp	.+970    	; 0x1fd2 <__fp_round>

00001c08 <__subsf3>:
    1c08:	50 58       	subi	r21, 0x80	; 128

00001c0a <__addsf3>:
    1c0a:	bb 27       	eor	r27, r27
    1c0c:	aa 27       	eor	r26, r26
    1c0e:	0e d0       	rcall	.+28     	; 0x1c2c <__addsf3x>
    1c10:	e0 c1       	rjmp	.+960    	; 0x1fd2 <__fp_round>
    1c12:	a9 d1       	rcall	.+850    	; 0x1f66 <__fp_pscA>
    1c14:	30 f0       	brcs	.+12     	; 0x1c22 <__addsf3+0x18>
    1c16:	ae d1       	rcall	.+860    	; 0x1f74 <__fp_pscB>
    1c18:	20 f0       	brcs	.+8      	; 0x1c22 <__addsf3+0x18>
    1c1a:	31 f4       	brne	.+12     	; 0x1c28 <__addsf3+0x1e>
    1c1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <__addsf3+0x1a>
    1c20:	1e f4       	brtc	.+6      	; 0x1c28 <__addsf3+0x1e>
    1c22:	79 c1       	rjmp	.+754    	; 0x1f16 <__fp_nan>
    1c24:	0e f4       	brtc	.+2      	; 0x1c28 <__addsf3+0x1e>
    1c26:	e0 95       	com	r30
    1c28:	e7 fb       	bst	r30, 7
    1c2a:	6f c1       	rjmp	.+734    	; 0x1f0a <__fp_inf>

00001c2c <__addsf3x>:
    1c2c:	e9 2f       	mov	r30, r25
    1c2e:	f3 d1       	rcall	.+998    	; 0x2016 <__fp_split3>
    1c30:	80 f3       	brcs	.-32     	; 0x1c12 <__addsf3+0x8>
    1c32:	ba 17       	cp	r27, r26
    1c34:	62 07       	cpc	r22, r18
    1c36:	73 07       	cpc	r23, r19
    1c38:	84 07       	cpc	r24, r20
    1c3a:	95 07       	cpc	r25, r21
    1c3c:	18 f0       	brcs	.+6      	; 0x1c44 <__addsf3x+0x18>
    1c3e:	71 f4       	brne	.+28     	; 0x1c5c <__addsf3x+0x30>
    1c40:	9e f5       	brtc	.+102    	; 0x1ca8 <__addsf3x+0x7c>
    1c42:	0b c2       	rjmp	.+1046   	; 0x205a <__fp_zero>
    1c44:	0e f4       	brtc	.+2      	; 0x1c48 <__addsf3x+0x1c>
    1c46:	e0 95       	com	r30
    1c48:	0b 2e       	mov	r0, r27
    1c4a:	ba 2f       	mov	r27, r26
    1c4c:	a0 2d       	mov	r26, r0
    1c4e:	0b 01       	movw	r0, r22
    1c50:	b9 01       	movw	r22, r18
    1c52:	90 01       	movw	r18, r0
    1c54:	0c 01       	movw	r0, r24
    1c56:	ca 01       	movw	r24, r20
    1c58:	a0 01       	movw	r20, r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	ff 27       	eor	r31, r31
    1c5e:	59 1b       	sub	r21, r25
    1c60:	99 f0       	breq	.+38     	; 0x1c88 <__addsf3x+0x5c>
    1c62:	59 3f       	cpi	r21, 0xF9	; 249
    1c64:	50 f4       	brcc	.+20     	; 0x1c7a <__addsf3x+0x4e>
    1c66:	50 3e       	cpi	r21, 0xE0	; 224
    1c68:	68 f1       	brcs	.+90     	; 0x1cc4 <__addsf3x+0x98>
    1c6a:	1a 16       	cp	r1, r26
    1c6c:	f0 40       	sbci	r31, 0x00	; 0
    1c6e:	a2 2f       	mov	r26, r18
    1c70:	23 2f       	mov	r18, r19
    1c72:	34 2f       	mov	r19, r20
    1c74:	44 27       	eor	r20, r20
    1c76:	58 5f       	subi	r21, 0xF8	; 248
    1c78:	f3 cf       	rjmp	.-26     	; 0x1c60 <__addsf3x+0x34>
    1c7a:	46 95       	lsr	r20
    1c7c:	37 95       	ror	r19
    1c7e:	27 95       	ror	r18
    1c80:	a7 95       	ror	r26
    1c82:	f0 40       	sbci	r31, 0x00	; 0
    1c84:	53 95       	inc	r21
    1c86:	c9 f7       	brne	.-14     	; 0x1c7a <__addsf3x+0x4e>
    1c88:	7e f4       	brtc	.+30     	; 0x1ca8 <__addsf3x+0x7c>
    1c8a:	1f 16       	cp	r1, r31
    1c8c:	ba 0b       	sbc	r27, r26
    1c8e:	62 0b       	sbc	r22, r18
    1c90:	73 0b       	sbc	r23, r19
    1c92:	84 0b       	sbc	r24, r20
    1c94:	ba f0       	brmi	.+46     	; 0x1cc4 <__addsf3x+0x98>
    1c96:	91 50       	subi	r25, 0x01	; 1
    1c98:	a1 f0       	breq	.+40     	; 0x1cc2 <__addsf3x+0x96>
    1c9a:	ff 0f       	add	r31, r31
    1c9c:	bb 1f       	adc	r27, r27
    1c9e:	66 1f       	adc	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	88 1f       	adc	r24, r24
    1ca4:	c2 f7       	brpl	.-16     	; 0x1c96 <__addsf3x+0x6a>
    1ca6:	0e c0       	rjmp	.+28     	; 0x1cc4 <__addsf3x+0x98>
    1ca8:	ba 0f       	add	r27, r26
    1caa:	62 1f       	adc	r22, r18
    1cac:	73 1f       	adc	r23, r19
    1cae:	84 1f       	adc	r24, r20
    1cb0:	48 f4       	brcc	.+18     	; 0x1cc4 <__addsf3x+0x98>
    1cb2:	87 95       	ror	r24
    1cb4:	77 95       	ror	r23
    1cb6:	67 95       	ror	r22
    1cb8:	b7 95       	ror	r27
    1cba:	f7 95       	ror	r31
    1cbc:	9e 3f       	cpi	r25, 0xFE	; 254
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <__addsf3x+0x96>
    1cc0:	b3 cf       	rjmp	.-154    	; 0x1c28 <__addsf3+0x1e>
    1cc2:	93 95       	inc	r25
    1cc4:	88 0f       	add	r24, r24
    1cc6:	08 f0       	brcs	.+2      	; 0x1cca <__addsf3x+0x9e>
    1cc8:	99 27       	eor	r25, r25
    1cca:	ee 0f       	add	r30, r30
    1ccc:	97 95       	ror	r25
    1cce:	87 95       	ror	r24
    1cd0:	08 95       	ret

00001cd2 <atan>:
    1cd2:	df 93       	push	r29
    1cd4:	dd 27       	eor	r29, r29
    1cd6:	b9 2f       	mov	r27, r25
    1cd8:	bf 77       	andi	r27, 0x7F	; 127
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	16 16       	cp	r1, r22
    1ce0:	17 06       	cpc	r1, r23
    1ce2:	48 07       	cpc	r20, r24
    1ce4:	5b 07       	cpc	r21, r27
    1ce6:	10 f4       	brcc	.+4      	; 0x1cec <atan+0x1a>
    1ce8:	d9 2f       	mov	r29, r25
    1cea:	be d1       	rcall	.+892    	; 0x2068 <inverse>
    1cec:	9f 93       	push	r25
    1cee:	8f 93       	push	r24
    1cf0:	7f 93       	push	r23
    1cf2:	6f 93       	push	r22
    1cf4:	6b d2       	rcall	.+1238   	; 0x21cc <square>
    1cf6:	e0 e8       	ldi	r30, 0x80	; 128
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	10 d1       	rcall	.+544    	; 0x1f1c <__fp_powser>
    1cfc:	6a d1       	rcall	.+724    	; 0x1fd2 <__fp_round>
    1cfe:	2f 91       	pop	r18
    1d00:	3f 91       	pop	r19
    1d02:	4f 91       	pop	r20
    1d04:	5f 91       	pop	r21
    1d06:	c3 d1       	rcall	.+902    	; 0x208e <__mulsf3x>
    1d08:	dd 23       	and	r29, r29
    1d0a:	49 f0       	breq	.+18     	; 0x1d1e <atan+0x4c>
    1d0c:	90 58       	subi	r25, 0x80	; 128
    1d0e:	a2 ea       	ldi	r26, 0xA2	; 162
    1d10:	2a ed       	ldi	r18, 0xDA	; 218
    1d12:	3f e0       	ldi	r19, 0x0F	; 15
    1d14:	49 ec       	ldi	r20, 0xC9	; 201
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	d0 78       	andi	r29, 0x80	; 128
    1d1a:	5d 27       	eor	r21, r29
    1d1c:	87 df       	rcall	.-242    	; 0x1c2c <__addsf3x>
    1d1e:	df 91       	pop	r29
    1d20:	58 c1       	rjmp	.+688    	; 0x1fd2 <__fp_round>

00001d22 <cos>:
    1d22:	30 d1       	rcall	.+608    	; 0x1f84 <__fp_rempio2>
    1d24:	e3 95       	inc	r30
    1d26:	66 c1       	rjmp	.+716    	; 0x1ff4 <__fp_sinus>

00001d28 <__divsf3>:
    1d28:	0c d0       	rcall	.+24     	; 0x1d42 <__divsf3x>
    1d2a:	53 c1       	rjmp	.+678    	; 0x1fd2 <__fp_round>
    1d2c:	23 d1       	rcall	.+582    	; 0x1f74 <__fp_pscB>
    1d2e:	40 f0       	brcs	.+16     	; 0x1d40 <__divsf3+0x18>
    1d30:	1a d1       	rcall	.+564    	; 0x1f66 <__fp_pscA>
    1d32:	30 f0       	brcs	.+12     	; 0x1d40 <__divsf3+0x18>
    1d34:	21 f4       	brne	.+8      	; 0x1d3e <__divsf3+0x16>
    1d36:	5f 3f       	cpi	r21, 0xFF	; 255
    1d38:	19 f0       	breq	.+6      	; 0x1d40 <__divsf3+0x18>
    1d3a:	e7 c0       	rjmp	.+462    	; 0x1f0a <__fp_inf>
    1d3c:	51 11       	cpse	r21, r1
    1d3e:	8e c1       	rjmp	.+796    	; 0x205c <__fp_szero>
    1d40:	ea c0       	rjmp	.+468    	; 0x1f16 <__fp_nan>

00001d42 <__divsf3x>:
    1d42:	69 d1       	rcall	.+722    	; 0x2016 <__fp_split3>
    1d44:	98 f3       	brcs	.-26     	; 0x1d2c <__divsf3+0x4>

00001d46 <__divsf3_pse>:
    1d46:	99 23       	and	r25, r25
    1d48:	c9 f3       	breq	.-14     	; 0x1d3c <__divsf3+0x14>
    1d4a:	55 23       	and	r21, r21
    1d4c:	b1 f3       	breq	.-20     	; 0x1d3a <__divsf3+0x12>
    1d4e:	95 1b       	sub	r25, r21
    1d50:	55 0b       	sbc	r21, r21
    1d52:	bb 27       	eor	r27, r27
    1d54:	aa 27       	eor	r26, r26
    1d56:	62 17       	cp	r22, r18
    1d58:	73 07       	cpc	r23, r19
    1d5a:	84 07       	cpc	r24, r20
    1d5c:	38 f0       	brcs	.+14     	; 0x1d6c <__divsf3_pse+0x26>
    1d5e:	9f 5f       	subi	r25, 0xFF	; 255
    1d60:	5f 4f       	sbci	r21, 0xFF	; 255
    1d62:	22 0f       	add	r18, r18
    1d64:	33 1f       	adc	r19, r19
    1d66:	44 1f       	adc	r20, r20
    1d68:	aa 1f       	adc	r26, r26
    1d6a:	a9 f3       	breq	.-22     	; 0x1d56 <__divsf3_pse+0x10>
    1d6c:	33 d0       	rcall	.+102    	; 0x1dd4 <__divsf3_pse+0x8e>
    1d6e:	0e 2e       	mov	r0, r30
    1d70:	3a f0       	brmi	.+14     	; 0x1d80 <__divsf3_pse+0x3a>
    1d72:	e0 e8       	ldi	r30, 0x80	; 128
    1d74:	30 d0       	rcall	.+96     	; 0x1dd6 <__divsf3_pse+0x90>
    1d76:	91 50       	subi	r25, 0x01	; 1
    1d78:	50 40       	sbci	r21, 0x00	; 0
    1d7a:	e6 95       	lsr	r30
    1d7c:	00 1c       	adc	r0, r0
    1d7e:	ca f7       	brpl	.-14     	; 0x1d72 <__divsf3_pse+0x2c>
    1d80:	29 d0       	rcall	.+82     	; 0x1dd4 <__divsf3_pse+0x8e>
    1d82:	fe 2f       	mov	r31, r30
    1d84:	27 d0       	rcall	.+78     	; 0x1dd4 <__divsf3_pse+0x8e>
    1d86:	66 0f       	add	r22, r22
    1d88:	77 1f       	adc	r23, r23
    1d8a:	88 1f       	adc	r24, r24
    1d8c:	bb 1f       	adc	r27, r27
    1d8e:	26 17       	cp	r18, r22
    1d90:	37 07       	cpc	r19, r23
    1d92:	48 07       	cpc	r20, r24
    1d94:	ab 07       	cpc	r26, r27
    1d96:	b0 e8       	ldi	r27, 0x80	; 128
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <__divsf3_pse+0x56>
    1d9a:	bb 0b       	sbc	r27, r27
    1d9c:	80 2d       	mov	r24, r0
    1d9e:	bf 01       	movw	r22, r30
    1da0:	ff 27       	eor	r31, r31
    1da2:	93 58       	subi	r25, 0x83	; 131
    1da4:	5f 4f       	sbci	r21, 0xFF	; 255
    1da6:	2a f0       	brmi	.+10     	; 0x1db2 <__divsf3_pse+0x6c>
    1da8:	9e 3f       	cpi	r25, 0xFE	; 254
    1daa:	51 05       	cpc	r21, r1
    1dac:	68 f0       	brcs	.+26     	; 0x1dc8 <__divsf3_pse+0x82>
    1dae:	ad c0       	rjmp	.+346    	; 0x1f0a <__fp_inf>
    1db0:	55 c1       	rjmp	.+682    	; 0x205c <__fp_szero>
    1db2:	5f 3f       	cpi	r21, 0xFF	; 255
    1db4:	ec f3       	brlt	.-6      	; 0x1db0 <__divsf3_pse+0x6a>
    1db6:	98 3e       	cpi	r25, 0xE8	; 232
    1db8:	dc f3       	brlt	.-10     	; 0x1db0 <__divsf3_pse+0x6a>
    1dba:	86 95       	lsr	r24
    1dbc:	77 95       	ror	r23
    1dbe:	67 95       	ror	r22
    1dc0:	b7 95       	ror	r27
    1dc2:	f7 95       	ror	r31
    1dc4:	9f 5f       	subi	r25, 0xFF	; 255
    1dc6:	c9 f7       	brne	.-14     	; 0x1dba <__divsf3_pse+0x74>
    1dc8:	88 0f       	add	r24, r24
    1dca:	91 1d       	adc	r25, r1
    1dcc:	96 95       	lsr	r25
    1dce:	87 95       	ror	r24
    1dd0:	97 f9       	bld	r25, 7
    1dd2:	08 95       	ret
    1dd4:	e1 e0       	ldi	r30, 0x01	; 1
    1dd6:	66 0f       	add	r22, r22
    1dd8:	77 1f       	adc	r23, r23
    1dda:	88 1f       	adc	r24, r24
    1ddc:	bb 1f       	adc	r27, r27
    1dde:	62 17       	cp	r22, r18
    1de0:	73 07       	cpc	r23, r19
    1de2:	84 07       	cpc	r24, r20
    1de4:	ba 07       	cpc	r27, r26
    1de6:	20 f0       	brcs	.+8      	; 0x1df0 <__divsf3_pse+0xaa>
    1de8:	62 1b       	sub	r22, r18
    1dea:	73 0b       	sbc	r23, r19
    1dec:	84 0b       	sbc	r24, r20
    1dee:	ba 0b       	sbc	r27, r26
    1df0:	ee 1f       	adc	r30, r30
    1df2:	88 f7       	brcc	.-30     	; 0x1dd6 <__divsf3_pse+0x90>
    1df4:	e0 95       	com	r30
    1df6:	08 95       	ret

00001df8 <__fixsfsi>:
    1df8:	04 d0       	rcall	.+8      	; 0x1e02 <__fixunssfsi>
    1dfa:	68 94       	set
    1dfc:	b1 11       	cpse	r27, r1
    1dfe:	2e c1       	rjmp	.+604    	; 0x205c <__fp_szero>
    1e00:	08 95       	ret

00001e02 <__fixunssfsi>:
    1e02:	11 d1       	rcall	.+546    	; 0x2026 <__fp_splitA>
    1e04:	88 f0       	brcs	.+34     	; 0x1e28 <__fixunssfsi+0x26>
    1e06:	9f 57       	subi	r25, 0x7F	; 127
    1e08:	90 f0       	brcs	.+36     	; 0x1e2e <__fixunssfsi+0x2c>
    1e0a:	b9 2f       	mov	r27, r25
    1e0c:	99 27       	eor	r25, r25
    1e0e:	b7 51       	subi	r27, 0x17	; 23
    1e10:	a0 f0       	brcs	.+40     	; 0x1e3a <__fixunssfsi+0x38>
    1e12:	d1 f0       	breq	.+52     	; 0x1e48 <__fixunssfsi+0x46>
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	1a f0       	brmi	.+6      	; 0x1e24 <__fixunssfsi+0x22>
    1e1e:	ba 95       	dec	r27
    1e20:	c9 f7       	brne	.-14     	; 0x1e14 <__fixunssfsi+0x12>
    1e22:	12 c0       	rjmp	.+36     	; 0x1e48 <__fixunssfsi+0x46>
    1e24:	b1 30       	cpi	r27, 0x01	; 1
    1e26:	81 f0       	breq	.+32     	; 0x1e48 <__fixunssfsi+0x46>
    1e28:	18 d1       	rcall	.+560    	; 0x205a <__fp_zero>
    1e2a:	b1 e0       	ldi	r27, 0x01	; 1
    1e2c:	08 95       	ret
    1e2e:	15 c1       	rjmp	.+554    	; 0x205a <__fp_zero>
    1e30:	67 2f       	mov	r22, r23
    1e32:	78 2f       	mov	r23, r24
    1e34:	88 27       	eor	r24, r24
    1e36:	b8 5f       	subi	r27, 0xF8	; 248
    1e38:	39 f0       	breq	.+14     	; 0x1e48 <__fixunssfsi+0x46>
    1e3a:	b9 3f       	cpi	r27, 0xF9	; 249
    1e3c:	cc f3       	brlt	.-14     	; 0x1e30 <__fixunssfsi+0x2e>
    1e3e:	86 95       	lsr	r24
    1e40:	77 95       	ror	r23
    1e42:	67 95       	ror	r22
    1e44:	b3 95       	inc	r27
    1e46:	d9 f7       	brne	.-10     	; 0x1e3e <__fixunssfsi+0x3c>
    1e48:	3e f4       	brtc	.+14     	; 0x1e58 <__fixunssfsi+0x56>
    1e4a:	90 95       	com	r25
    1e4c:	80 95       	com	r24
    1e4e:	70 95       	com	r23
    1e50:	61 95       	neg	r22
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	8f 4f       	sbci	r24, 0xFF	; 255
    1e56:	9f 4f       	sbci	r25, 0xFF	; 255
    1e58:	08 95       	ret

00001e5a <__floatunsisf>:
    1e5a:	e8 94       	clt
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <__floatsisf+0x12>

00001e5e <__floatsisf>:
    1e5e:	97 fb       	bst	r25, 7
    1e60:	3e f4       	brtc	.+14     	; 0x1e70 <__floatsisf+0x12>
    1e62:	90 95       	com	r25
    1e64:	80 95       	com	r24
    1e66:	70 95       	com	r23
    1e68:	61 95       	neg	r22
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	99 23       	and	r25, r25
    1e72:	a9 f0       	breq	.+42     	; 0x1e9e <__floatsisf+0x40>
    1e74:	f9 2f       	mov	r31, r25
    1e76:	96 e9       	ldi	r25, 0x96	; 150
    1e78:	bb 27       	eor	r27, r27
    1e7a:	93 95       	inc	r25
    1e7c:	f6 95       	lsr	r31
    1e7e:	87 95       	ror	r24
    1e80:	77 95       	ror	r23
    1e82:	67 95       	ror	r22
    1e84:	b7 95       	ror	r27
    1e86:	f1 11       	cpse	r31, r1
    1e88:	f8 cf       	rjmp	.-16     	; 0x1e7a <__floatsisf+0x1c>
    1e8a:	fa f4       	brpl	.+62     	; 0x1eca <__floatsisf+0x6c>
    1e8c:	bb 0f       	add	r27, r27
    1e8e:	11 f4       	brne	.+4      	; 0x1e94 <__floatsisf+0x36>
    1e90:	60 ff       	sbrs	r22, 0
    1e92:	1b c0       	rjmp	.+54     	; 0x1eca <__floatsisf+0x6c>
    1e94:	6f 5f       	subi	r22, 0xFF	; 255
    1e96:	7f 4f       	sbci	r23, 0xFF	; 255
    1e98:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9c:	16 c0       	rjmp	.+44     	; 0x1eca <__floatsisf+0x6c>
    1e9e:	88 23       	and	r24, r24
    1ea0:	11 f0       	breq	.+4      	; 0x1ea6 <__floatsisf+0x48>
    1ea2:	96 e9       	ldi	r25, 0x96	; 150
    1ea4:	11 c0       	rjmp	.+34     	; 0x1ec8 <__floatsisf+0x6a>
    1ea6:	77 23       	and	r23, r23
    1ea8:	21 f0       	breq	.+8      	; 0x1eb2 <__floatsisf+0x54>
    1eaa:	9e e8       	ldi	r25, 0x8E	; 142
    1eac:	87 2f       	mov	r24, r23
    1eae:	76 2f       	mov	r23, r22
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <__floatsisf+0x5e>
    1eb2:	66 23       	and	r22, r22
    1eb4:	71 f0       	breq	.+28     	; 0x1ed2 <__floatsisf+0x74>
    1eb6:	96 e8       	ldi	r25, 0x86	; 134
    1eb8:	86 2f       	mov	r24, r22
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	2a f0       	brmi	.+10     	; 0x1eca <__floatsisf+0x6c>
    1ec0:	9a 95       	dec	r25
    1ec2:	66 0f       	add	r22, r22
    1ec4:	77 1f       	adc	r23, r23
    1ec6:	88 1f       	adc	r24, r24
    1ec8:	da f7       	brpl	.-10     	; 0x1ec0 <__floatsisf+0x62>
    1eca:	88 0f       	add	r24, r24
    1ecc:	96 95       	lsr	r25
    1ece:	87 95       	ror	r24
    1ed0:	97 f9       	bld	r25, 7
    1ed2:	08 95       	ret

00001ed4 <__fp_arccos>:
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	1f 93       	push	r17
    1eda:	0f 93       	push	r16
    1edc:	8b 01       	movw	r16, r22
    1ede:	ec 01       	movw	r28, r24
    1ee0:	ed ea       	ldi	r30, 0xAD	; 173
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	1b d0       	rcall	.+54     	; 0x1f1c <__fp_powser>
    1ee6:	75 d0       	rcall	.+234    	; 0x1fd2 <__fp_round>
    1ee8:	98 01       	movw	r18, r16
    1eea:	ae 01       	movw	r20, r28
    1eec:	8b 01       	movw	r16, r22
    1eee:	ec 01       	movw	r28, r24
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	80 e8       	ldi	r24, 0x80	; 128
    1ef6:	9f e3       	ldi	r25, 0x3F	; 63
    1ef8:	87 de       	rcall	.-754    	; 0x1c08 <__subsf3>
    1efa:	2a d1       	rcall	.+596    	; 0x2150 <sqrt>
    1efc:	98 01       	movw	r18, r16
    1efe:	ae 01       	movw	r20, r28
    1f00:	0f 91       	pop	r16
    1f02:	1f 91       	pop	r17
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	c2 c0       	rjmp	.+388    	; 0x208e <__mulsf3x>

00001f0a <__fp_inf>:
    1f0a:	97 f9       	bld	r25, 7
    1f0c:	9f 67       	ori	r25, 0x7F	; 127
    1f0e:	80 e8       	ldi	r24, 0x80	; 128
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	08 95       	ret

00001f16 <__fp_nan>:
    1f16:	9f ef       	ldi	r25, 0xFF	; 255
    1f18:	80 ec       	ldi	r24, 0xC0	; 192
    1f1a:	08 95       	ret

00001f1c <__fp_powser>:
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	1f 93       	push	r17
    1f22:	0f 93       	push	r16
    1f24:	ff 92       	push	r15
    1f26:	ef 92       	push	r14
    1f28:	df 92       	push	r13
    1f2a:	7b 01       	movw	r14, r22
    1f2c:	8c 01       	movw	r16, r24
    1f2e:	68 94       	set
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <__fp_powser+0x20>
    1f32:	da 2e       	mov	r13, r26
    1f34:	ef 01       	movw	r28, r30
    1f36:	ab d0       	rcall	.+342    	; 0x208e <__mulsf3x>
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e8 94       	clt
    1f3c:	a5 91       	lpm	r26, Z+
    1f3e:	25 91       	lpm	r18, Z+
    1f40:	35 91       	lpm	r19, Z+
    1f42:	45 91       	lpm	r20, Z+
    1f44:	55 91       	lpm	r21, Z+
    1f46:	ae f3       	brts	.-22     	; 0x1f32 <__fp_powser+0x16>
    1f48:	ef 01       	movw	r28, r30
    1f4a:	70 de       	rcall	.-800    	; 0x1c2c <__addsf3x>
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	97 01       	movw	r18, r14
    1f50:	a8 01       	movw	r20, r16
    1f52:	da 94       	dec	r13
    1f54:	79 f7       	brne	.-34     	; 0x1f34 <__fp_powser+0x18>
    1f56:	df 90       	pop	r13
    1f58:	ef 90       	pop	r14
    1f5a:	ff 90       	pop	r15
    1f5c:	0f 91       	pop	r16
    1f5e:	1f 91       	pop	r17
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <__fp_pscA>:
    1f66:	00 24       	eor	r0, r0
    1f68:	0a 94       	dec	r0
    1f6a:	16 16       	cp	r1, r22
    1f6c:	17 06       	cpc	r1, r23
    1f6e:	18 06       	cpc	r1, r24
    1f70:	09 06       	cpc	r0, r25
    1f72:	08 95       	ret

00001f74 <__fp_pscB>:
    1f74:	00 24       	eor	r0, r0
    1f76:	0a 94       	dec	r0
    1f78:	12 16       	cp	r1, r18
    1f7a:	13 06       	cpc	r1, r19
    1f7c:	14 06       	cpc	r1, r20
    1f7e:	05 06       	cpc	r0, r21
    1f80:	08 95       	ret
    1f82:	c9 cf       	rjmp	.-110    	; 0x1f16 <__fp_nan>

00001f84 <__fp_rempio2>:
    1f84:	50 d0       	rcall	.+160    	; 0x2026 <__fp_splitA>
    1f86:	e8 f3       	brcs	.-6      	; 0x1f82 <__fp_pscB+0xe>
    1f88:	e8 94       	clt
    1f8a:	e0 e0       	ldi	r30, 0x00	; 0
    1f8c:	bb 27       	eor	r27, r27
    1f8e:	9f 57       	subi	r25, 0x7F	; 127
    1f90:	f0 f0       	brcs	.+60     	; 0x1fce <__fp_rempio2+0x4a>
    1f92:	2a ed       	ldi	r18, 0xDA	; 218
    1f94:	3f e0       	ldi	r19, 0x0F	; 15
    1f96:	49 ec       	ldi	r20, 0xC9	; 201
    1f98:	06 c0       	rjmp	.+12     	; 0x1fa6 <__fp_rempio2+0x22>
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	bb 0f       	add	r27, r27
    1f9e:	66 1f       	adc	r22, r22
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	88 1f       	adc	r24, r24
    1fa4:	28 f0       	brcs	.+10     	; 0x1fb0 <__fp_rempio2+0x2c>
    1fa6:	b2 3a       	cpi	r27, 0xA2	; 162
    1fa8:	62 07       	cpc	r22, r18
    1faa:	73 07       	cpc	r23, r19
    1fac:	84 07       	cpc	r24, r20
    1fae:	28 f0       	brcs	.+10     	; 0x1fba <__fp_rempio2+0x36>
    1fb0:	b2 5a       	subi	r27, 0xA2	; 162
    1fb2:	62 0b       	sbc	r22, r18
    1fb4:	73 0b       	sbc	r23, r19
    1fb6:	84 0b       	sbc	r24, r20
    1fb8:	e3 95       	inc	r30
    1fba:	9a 95       	dec	r25
    1fbc:	72 f7       	brpl	.-36     	; 0x1f9a <__fp_rempio2+0x16>
    1fbe:	80 38       	cpi	r24, 0x80	; 128
    1fc0:	30 f4       	brcc	.+12     	; 0x1fce <__fp_rempio2+0x4a>
    1fc2:	9a 95       	dec	r25
    1fc4:	bb 0f       	add	r27, r27
    1fc6:	66 1f       	adc	r22, r22
    1fc8:	77 1f       	adc	r23, r23
    1fca:	88 1f       	adc	r24, r24
    1fcc:	d2 f7       	brpl	.-12     	; 0x1fc2 <__fp_rempio2+0x3e>
    1fce:	90 48       	sbci	r25, 0x80	; 128
    1fd0:	02 c1       	rjmp	.+516    	; 0x21d6 <__fp_mpack_finite>

00001fd2 <__fp_round>:
    1fd2:	09 2e       	mov	r0, r25
    1fd4:	03 94       	inc	r0
    1fd6:	00 0c       	add	r0, r0
    1fd8:	11 f4       	brne	.+4      	; 0x1fde <__fp_round+0xc>
    1fda:	88 23       	and	r24, r24
    1fdc:	52 f0       	brmi	.+20     	; 0x1ff2 <__fp_round+0x20>
    1fde:	bb 0f       	add	r27, r27
    1fe0:	40 f4       	brcc	.+16     	; 0x1ff2 <__fp_round+0x20>
    1fe2:	bf 2b       	or	r27, r31
    1fe4:	11 f4       	brne	.+4      	; 0x1fea <__fp_round+0x18>
    1fe6:	60 ff       	sbrs	r22, 0
    1fe8:	04 c0       	rjmp	.+8      	; 0x1ff2 <__fp_round+0x20>
    1fea:	6f 5f       	subi	r22, 0xFF	; 255
    1fec:	7f 4f       	sbci	r23, 0xFF	; 255
    1fee:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff2:	08 95       	ret

00001ff4 <__fp_sinus>:
    1ff4:	ef 93       	push	r30
    1ff6:	e0 ff       	sbrs	r30, 0
    1ff8:	06 c0       	rjmp	.+12     	; 0x2006 <__fp_sinus+0x12>
    1ffa:	a2 ea       	ldi	r26, 0xA2	; 162
    1ffc:	2a ed       	ldi	r18, 0xDA	; 218
    1ffe:	3f e0       	ldi	r19, 0x0F	; 15
    2000:	49 ec       	ldi	r20, 0xC9	; 201
    2002:	5f eb       	ldi	r21, 0xBF	; 191
    2004:	13 de       	rcall	.-986    	; 0x1c2c <__addsf3x>
    2006:	e5 df       	rcall	.-54     	; 0x1fd2 <__fp_round>
    2008:	0f 90       	pop	r0
    200a:	03 94       	inc	r0
    200c:	01 fc       	sbrc	r0, 1
    200e:	90 58       	subi	r25, 0x80	; 128
    2010:	e5 ed       	ldi	r30, 0xD5	; 213
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	f3 c0       	rjmp	.+486    	; 0x21fc <__fp_powsodd>

00002016 <__fp_split3>:
    2016:	57 fd       	sbrc	r21, 7
    2018:	90 58       	subi	r25, 0x80	; 128
    201a:	44 0f       	add	r20, r20
    201c:	55 1f       	adc	r21, r21
    201e:	59 f0       	breq	.+22     	; 0x2036 <__fp_splitA+0x10>
    2020:	5f 3f       	cpi	r21, 0xFF	; 255
    2022:	71 f0       	breq	.+28     	; 0x2040 <__fp_splitA+0x1a>
    2024:	47 95       	ror	r20

00002026 <__fp_splitA>:
    2026:	88 0f       	add	r24, r24
    2028:	97 fb       	bst	r25, 7
    202a:	99 1f       	adc	r25, r25
    202c:	61 f0       	breq	.+24     	; 0x2046 <__fp_splitA+0x20>
    202e:	9f 3f       	cpi	r25, 0xFF	; 255
    2030:	79 f0       	breq	.+30     	; 0x2050 <__fp_splitA+0x2a>
    2032:	87 95       	ror	r24
    2034:	08 95       	ret
    2036:	12 16       	cp	r1, r18
    2038:	13 06       	cpc	r1, r19
    203a:	14 06       	cpc	r1, r20
    203c:	55 1f       	adc	r21, r21
    203e:	f2 cf       	rjmp	.-28     	; 0x2024 <__fp_split3+0xe>
    2040:	46 95       	lsr	r20
    2042:	f1 df       	rcall	.-30     	; 0x2026 <__fp_splitA>
    2044:	08 c0       	rjmp	.+16     	; 0x2056 <__fp_splitA+0x30>
    2046:	16 16       	cp	r1, r22
    2048:	17 06       	cpc	r1, r23
    204a:	18 06       	cpc	r1, r24
    204c:	99 1f       	adc	r25, r25
    204e:	f1 cf       	rjmp	.-30     	; 0x2032 <__fp_splitA+0xc>
    2050:	86 95       	lsr	r24
    2052:	71 05       	cpc	r23, r1
    2054:	61 05       	cpc	r22, r1
    2056:	08 94       	sec
    2058:	08 95       	ret

0000205a <__fp_zero>:
    205a:	e8 94       	clt

0000205c <__fp_szero>:
    205c:	bb 27       	eor	r27, r27
    205e:	66 27       	eor	r22, r22
    2060:	77 27       	eor	r23, r23
    2062:	cb 01       	movw	r24, r22
    2064:	97 f9       	bld	r25, 7
    2066:	08 95       	ret

00002068 <inverse>:
    2068:	9b 01       	movw	r18, r22
    206a:	ac 01       	movw	r20, r24
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	80 e8       	ldi	r24, 0x80	; 128
    2072:	9f e3       	ldi	r25, 0x3F	; 63
    2074:	59 ce       	rjmp	.-846    	; 0x1d28 <__divsf3>

00002076 <__mulsf3>:
    2076:	0b d0       	rcall	.+22     	; 0x208e <__mulsf3x>
    2078:	ac cf       	rjmp	.-168    	; 0x1fd2 <__fp_round>
    207a:	75 df       	rcall	.-278    	; 0x1f66 <__fp_pscA>
    207c:	28 f0       	brcs	.+10     	; 0x2088 <__mulsf3+0x12>
    207e:	7a df       	rcall	.-268    	; 0x1f74 <__fp_pscB>
    2080:	18 f0       	brcs	.+6      	; 0x2088 <__mulsf3+0x12>
    2082:	95 23       	and	r25, r21
    2084:	09 f0       	breq	.+2      	; 0x2088 <__mulsf3+0x12>
    2086:	41 cf       	rjmp	.-382    	; 0x1f0a <__fp_inf>
    2088:	46 cf       	rjmp	.-372    	; 0x1f16 <__fp_nan>
    208a:	11 24       	eor	r1, r1
    208c:	e7 cf       	rjmp	.-50     	; 0x205c <__fp_szero>

0000208e <__mulsf3x>:
    208e:	c3 df       	rcall	.-122    	; 0x2016 <__fp_split3>
    2090:	a0 f3       	brcs	.-24     	; 0x207a <__mulsf3+0x4>

00002092 <__mulsf3_pse>:
    2092:	95 9f       	mul	r25, r21
    2094:	d1 f3       	breq	.-12     	; 0x208a <__mulsf3+0x14>
    2096:	95 0f       	add	r25, r21
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	55 1f       	adc	r21, r21
    209c:	62 9f       	mul	r22, r18
    209e:	f0 01       	movw	r30, r0
    20a0:	72 9f       	mul	r23, r18
    20a2:	bb 27       	eor	r27, r27
    20a4:	f0 0d       	add	r31, r0
    20a6:	b1 1d       	adc	r27, r1
    20a8:	63 9f       	mul	r22, r19
    20aa:	aa 27       	eor	r26, r26
    20ac:	f0 0d       	add	r31, r0
    20ae:	b1 1d       	adc	r27, r1
    20b0:	aa 1f       	adc	r26, r26
    20b2:	64 9f       	mul	r22, r20
    20b4:	66 27       	eor	r22, r22
    20b6:	b0 0d       	add	r27, r0
    20b8:	a1 1d       	adc	r26, r1
    20ba:	66 1f       	adc	r22, r22
    20bc:	82 9f       	mul	r24, r18
    20be:	22 27       	eor	r18, r18
    20c0:	b0 0d       	add	r27, r0
    20c2:	a1 1d       	adc	r26, r1
    20c4:	62 1f       	adc	r22, r18
    20c6:	73 9f       	mul	r23, r19
    20c8:	b0 0d       	add	r27, r0
    20ca:	a1 1d       	adc	r26, r1
    20cc:	62 1f       	adc	r22, r18
    20ce:	83 9f       	mul	r24, r19
    20d0:	a0 0d       	add	r26, r0
    20d2:	61 1d       	adc	r22, r1
    20d4:	22 1f       	adc	r18, r18
    20d6:	74 9f       	mul	r23, r20
    20d8:	33 27       	eor	r19, r19
    20da:	a0 0d       	add	r26, r0
    20dc:	61 1d       	adc	r22, r1
    20de:	23 1f       	adc	r18, r19
    20e0:	84 9f       	mul	r24, r20
    20e2:	60 0d       	add	r22, r0
    20e4:	21 1d       	adc	r18, r1
    20e6:	82 2f       	mov	r24, r18
    20e8:	76 2f       	mov	r23, r22
    20ea:	6a 2f       	mov	r22, r26
    20ec:	11 24       	eor	r1, r1
    20ee:	9f 57       	subi	r25, 0x7F	; 127
    20f0:	50 40       	sbci	r21, 0x00	; 0
    20f2:	8a f0       	brmi	.+34     	; 0x2116 <__mulsf3_pse+0x84>
    20f4:	e1 f0       	breq	.+56     	; 0x212e <__mulsf3_pse+0x9c>
    20f6:	88 23       	and	r24, r24
    20f8:	4a f0       	brmi	.+18     	; 0x210c <__mulsf3_pse+0x7a>
    20fa:	ee 0f       	add	r30, r30
    20fc:	ff 1f       	adc	r31, r31
    20fe:	bb 1f       	adc	r27, r27
    2100:	66 1f       	adc	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	91 50       	subi	r25, 0x01	; 1
    2108:	50 40       	sbci	r21, 0x00	; 0
    210a:	a9 f7       	brne	.-22     	; 0x20f6 <__mulsf3_pse+0x64>
    210c:	9e 3f       	cpi	r25, 0xFE	; 254
    210e:	51 05       	cpc	r21, r1
    2110:	70 f0       	brcs	.+28     	; 0x212e <__mulsf3_pse+0x9c>
    2112:	fb ce       	rjmp	.-522    	; 0x1f0a <__fp_inf>
    2114:	a3 cf       	rjmp	.-186    	; 0x205c <__fp_szero>
    2116:	5f 3f       	cpi	r21, 0xFF	; 255
    2118:	ec f3       	brlt	.-6      	; 0x2114 <__mulsf3_pse+0x82>
    211a:	98 3e       	cpi	r25, 0xE8	; 232
    211c:	dc f3       	brlt	.-10     	; 0x2114 <__mulsf3_pse+0x82>
    211e:	86 95       	lsr	r24
    2120:	77 95       	ror	r23
    2122:	67 95       	ror	r22
    2124:	b7 95       	ror	r27
    2126:	f7 95       	ror	r31
    2128:	e7 95       	ror	r30
    212a:	9f 5f       	subi	r25, 0xFF	; 255
    212c:	c1 f7       	brne	.-16     	; 0x211e <__mulsf3_pse+0x8c>
    212e:	fe 2b       	or	r31, r30
    2130:	88 0f       	add	r24, r24
    2132:	91 1d       	adc	r25, r1
    2134:	96 95       	lsr	r25
    2136:	87 95       	ror	r24
    2138:	97 f9       	bld	r25, 7
    213a:	08 95       	ret

0000213c <sin>:
    213c:	9f 93       	push	r25
    213e:	22 df       	rcall	.-444    	; 0x1f84 <__fp_rempio2>
    2140:	0f 90       	pop	r0
    2142:	07 fc       	sbrc	r0, 7
    2144:	ee 5f       	subi	r30, 0xFE	; 254
    2146:	56 cf       	rjmp	.-340    	; 0x1ff4 <__fp_sinus>
    2148:	11 f4       	brne	.+4      	; 0x214e <sin+0x12>
    214a:	0e f4       	brtc	.+2      	; 0x214e <sin+0x12>
    214c:	e4 ce       	rjmp	.-568    	; 0x1f16 <__fp_nan>
    214e:	41 c0       	rjmp	.+130    	; 0x21d2 <__fp_mpack>

00002150 <sqrt>:
    2150:	6a df       	rcall	.-300    	; 0x2026 <__fp_splitA>
    2152:	d0 f3       	brcs	.-12     	; 0x2148 <sin+0xc>
    2154:	99 23       	and	r25, r25
    2156:	d9 f3       	breq	.-10     	; 0x214e <sin+0x12>
    2158:	ce f3       	brts	.-14     	; 0x214c <sin+0x10>
    215a:	9f 57       	subi	r25, 0x7F	; 127
    215c:	55 0b       	sbc	r21, r21
    215e:	87 ff       	sbrs	r24, 7
    2160:	46 d0       	rcall	.+140    	; 0x21ee <__fp_norm2>
    2162:	00 24       	eor	r0, r0
    2164:	a0 e6       	ldi	r26, 0x60	; 96
    2166:	40 ea       	ldi	r20, 0xA0	; 160
    2168:	90 01       	movw	r18, r0
    216a:	80 58       	subi	r24, 0x80	; 128
    216c:	56 95       	lsr	r21
    216e:	97 95       	ror	r25
    2170:	28 f4       	brcc	.+10     	; 0x217c <sqrt+0x2c>
    2172:	80 5c       	subi	r24, 0xC0	; 192
    2174:	66 0f       	add	r22, r22
    2176:	77 1f       	adc	r23, r23
    2178:	88 1f       	adc	r24, r24
    217a:	20 f0       	brcs	.+8      	; 0x2184 <sqrt+0x34>
    217c:	26 17       	cp	r18, r22
    217e:	37 07       	cpc	r19, r23
    2180:	48 07       	cpc	r20, r24
    2182:	30 f4       	brcc	.+12     	; 0x2190 <sqrt+0x40>
    2184:	62 1b       	sub	r22, r18
    2186:	73 0b       	sbc	r23, r19
    2188:	84 0b       	sbc	r24, r20
    218a:	20 29       	or	r18, r0
    218c:	31 29       	or	r19, r1
    218e:	4a 2b       	or	r20, r26
    2190:	a6 95       	lsr	r26
    2192:	17 94       	ror	r1
    2194:	07 94       	ror	r0
    2196:	20 25       	eor	r18, r0
    2198:	31 25       	eor	r19, r1
    219a:	4a 27       	eor	r20, r26
    219c:	58 f7       	brcc	.-42     	; 0x2174 <sqrt+0x24>
    219e:	66 0f       	add	r22, r22
    21a0:	77 1f       	adc	r23, r23
    21a2:	88 1f       	adc	r24, r24
    21a4:	20 f0       	brcs	.+8      	; 0x21ae <sqrt+0x5e>
    21a6:	26 17       	cp	r18, r22
    21a8:	37 07       	cpc	r19, r23
    21aa:	48 07       	cpc	r20, r24
    21ac:	30 f4       	brcc	.+12     	; 0x21ba <sqrt+0x6a>
    21ae:	62 0b       	sbc	r22, r18
    21b0:	73 0b       	sbc	r23, r19
    21b2:	84 0b       	sbc	r24, r20
    21b4:	20 0d       	add	r18, r0
    21b6:	31 1d       	adc	r19, r1
    21b8:	41 1d       	adc	r20, r1
    21ba:	a0 95       	com	r26
    21bc:	81 f7       	brne	.-32     	; 0x219e <sqrt+0x4e>
    21be:	b9 01       	movw	r22, r18
    21c0:	84 2f       	mov	r24, r20
    21c2:	91 58       	subi	r25, 0x81	; 129
    21c4:	88 0f       	add	r24, r24
    21c6:	96 95       	lsr	r25
    21c8:	87 95       	ror	r24
    21ca:	08 95       	ret

000021cc <square>:
    21cc:	9b 01       	movw	r18, r22
    21ce:	ac 01       	movw	r20, r24
    21d0:	52 cf       	rjmp	.-348    	; 0x2076 <__mulsf3>

000021d2 <__fp_mpack>:
    21d2:	9f 3f       	cpi	r25, 0xFF	; 255
    21d4:	31 f0       	breq	.+12     	; 0x21e2 <__fp_mpack_finite+0xc>

000021d6 <__fp_mpack_finite>:
    21d6:	91 50       	subi	r25, 0x01	; 1
    21d8:	20 f4       	brcc	.+8      	; 0x21e2 <__fp_mpack_finite+0xc>
    21da:	87 95       	ror	r24
    21dc:	77 95       	ror	r23
    21de:	67 95       	ror	r22
    21e0:	b7 95       	ror	r27
    21e2:	88 0f       	add	r24, r24
    21e4:	91 1d       	adc	r25, r1
    21e6:	96 95       	lsr	r25
    21e8:	87 95       	ror	r24
    21ea:	97 f9       	bld	r25, 7
    21ec:	08 95       	ret

000021ee <__fp_norm2>:
    21ee:	91 50       	subi	r25, 0x01	; 1
    21f0:	50 40       	sbci	r21, 0x00	; 0
    21f2:	66 0f       	add	r22, r22
    21f4:	77 1f       	adc	r23, r23
    21f6:	88 1f       	adc	r24, r24
    21f8:	d2 f7       	brpl	.-12     	; 0x21ee <__fp_norm2>
    21fa:	08 95       	ret

000021fc <__fp_powsodd>:
    21fc:	9f 93       	push	r25
    21fe:	8f 93       	push	r24
    2200:	7f 93       	push	r23
    2202:	6f 93       	push	r22
    2204:	ff 93       	push	r31
    2206:	ef 93       	push	r30
    2208:	9b 01       	movw	r18, r22
    220a:	ac 01       	movw	r20, r24
    220c:	34 df       	rcall	.-408    	; 0x2076 <__mulsf3>
    220e:	ef 91       	pop	r30
    2210:	ff 91       	pop	r31
    2212:	84 de       	rcall	.-760    	; 0x1f1c <__fp_powser>
    2214:	2f 91       	pop	r18
    2216:	3f 91       	pop	r19
    2218:	4f 91       	pop	r20
    221a:	5f 91       	pop	r21
    221c:	2c cf       	rjmp	.-424    	; 0x2076 <__mulsf3>

0000221e <__tablejump2__>:
    221e:	ee 0f       	add	r30, r30
    2220:	ff 1f       	adc	r31, r31

00002222 <__tablejump__>:
    2222:	05 90       	lpm	r0, Z+
    2224:	f4 91       	lpm	r31, Z
    2226:	e0 2d       	mov	r30, r0
    2228:	09 94       	ijmp

0000222a <malloc>:
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	91 05       	cpc	r25, r1
    2232:	10 f4       	brcc	.+4      	; 0x2238 <malloc+0xe>
    2234:	82 e0       	ldi	r24, 0x02	; 2
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	e0 91 c4 00 	lds	r30, 0x00C4
    223c:	f0 91 c5 00 	lds	r31, 0x00C5
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	a0 e0       	ldi	r26, 0x00	; 0
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	30 97       	sbiw	r30, 0x00	; 0
    224a:	39 f1       	breq	.+78     	; 0x229a <malloc+0x70>
    224c:	40 81       	ld	r20, Z
    224e:	51 81       	ldd	r21, Z+1	; 0x01
    2250:	48 17       	cp	r20, r24
    2252:	59 07       	cpc	r21, r25
    2254:	b8 f0       	brcs	.+46     	; 0x2284 <malloc+0x5a>
    2256:	48 17       	cp	r20, r24
    2258:	59 07       	cpc	r21, r25
    225a:	71 f4       	brne	.+28     	; 0x2278 <malloc+0x4e>
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	93 81       	ldd	r25, Z+3	; 0x03
    2260:	10 97       	sbiw	r26, 0x00	; 0
    2262:	29 f0       	breq	.+10     	; 0x226e <malloc+0x44>
    2264:	13 96       	adiw	r26, 0x03	; 3
    2266:	9c 93       	st	X, r25
    2268:	8e 93       	st	-X, r24
    226a:	12 97       	sbiw	r26, 0x02	; 2
    226c:	2c c0       	rjmp	.+88     	; 0x22c6 <malloc+0x9c>
    226e:	90 93 c5 00 	sts	0x00C5, r25
    2272:	80 93 c4 00 	sts	0x00C4, r24
    2276:	27 c0       	rjmp	.+78     	; 0x22c6 <malloc+0x9c>
    2278:	21 15       	cp	r18, r1
    227a:	31 05       	cpc	r19, r1
    227c:	31 f0       	breq	.+12     	; 0x228a <malloc+0x60>
    227e:	42 17       	cp	r20, r18
    2280:	53 07       	cpc	r21, r19
    2282:	18 f0       	brcs	.+6      	; 0x228a <malloc+0x60>
    2284:	a9 01       	movw	r20, r18
    2286:	db 01       	movw	r26, r22
    2288:	01 c0       	rjmp	.+2      	; 0x228c <malloc+0x62>
    228a:	ef 01       	movw	r28, r30
    228c:	9a 01       	movw	r18, r20
    228e:	bd 01       	movw	r22, r26
    2290:	df 01       	movw	r26, r30
    2292:	02 80       	ldd	r0, Z+2	; 0x02
    2294:	f3 81       	ldd	r31, Z+3	; 0x03
    2296:	e0 2d       	mov	r30, r0
    2298:	d7 cf       	rjmp	.-82     	; 0x2248 <malloc+0x1e>
    229a:	21 15       	cp	r18, r1
    229c:	31 05       	cpc	r19, r1
    229e:	f9 f0       	breq	.+62     	; 0x22de <malloc+0xb4>
    22a0:	28 1b       	sub	r18, r24
    22a2:	39 0b       	sbc	r19, r25
    22a4:	24 30       	cpi	r18, 0x04	; 4
    22a6:	31 05       	cpc	r19, r1
    22a8:	80 f4       	brcc	.+32     	; 0x22ca <malloc+0xa0>
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	61 15       	cp	r22, r1
    22b0:	71 05       	cpc	r23, r1
    22b2:	21 f0       	breq	.+8      	; 0x22bc <malloc+0x92>
    22b4:	fb 01       	movw	r30, r22
    22b6:	93 83       	std	Z+3, r25	; 0x03
    22b8:	82 83       	std	Z+2, r24	; 0x02
    22ba:	04 c0       	rjmp	.+8      	; 0x22c4 <malloc+0x9a>
    22bc:	90 93 c5 00 	sts	0x00C5, r25
    22c0:	80 93 c4 00 	sts	0x00C4, r24
    22c4:	fe 01       	movw	r30, r28
    22c6:	32 96       	adiw	r30, 0x02	; 2
    22c8:	44 c0       	rjmp	.+136    	; 0x2352 <malloc+0x128>
    22ca:	fe 01       	movw	r30, r28
    22cc:	e2 0f       	add	r30, r18
    22ce:	f3 1f       	adc	r31, r19
    22d0:	81 93       	st	Z+, r24
    22d2:	91 93       	st	Z+, r25
    22d4:	22 50       	subi	r18, 0x02	; 2
    22d6:	31 09       	sbc	r19, r1
    22d8:	39 83       	std	Y+1, r19	; 0x01
    22da:	28 83       	st	Y, r18
    22dc:	3a c0       	rjmp	.+116    	; 0x2352 <malloc+0x128>
    22de:	20 91 c2 00 	lds	r18, 0x00C2
    22e2:	30 91 c3 00 	lds	r19, 0x00C3
    22e6:	23 2b       	or	r18, r19
    22e8:	41 f4       	brne	.+16     	; 0x22fa <malloc+0xd0>
    22ea:	20 91 62 00 	lds	r18, 0x0062
    22ee:	30 91 63 00 	lds	r19, 0x0063
    22f2:	30 93 c3 00 	sts	0x00C3, r19
    22f6:	20 93 c2 00 	sts	0x00C2, r18
    22fa:	20 91 60 00 	lds	r18, 0x0060
    22fe:	30 91 61 00 	lds	r19, 0x0061
    2302:	21 15       	cp	r18, r1
    2304:	31 05       	cpc	r19, r1
    2306:	41 f4       	brne	.+16     	; 0x2318 <malloc+0xee>
    2308:	2d b7       	in	r18, 0x3d	; 61
    230a:	3e b7       	in	r19, 0x3e	; 62
    230c:	40 91 64 00 	lds	r20, 0x0064
    2310:	50 91 65 00 	lds	r21, 0x0065
    2314:	24 1b       	sub	r18, r20
    2316:	35 0b       	sbc	r19, r21
    2318:	e0 91 c2 00 	lds	r30, 0x00C2
    231c:	f0 91 c3 00 	lds	r31, 0x00C3
    2320:	e2 17       	cp	r30, r18
    2322:	f3 07       	cpc	r31, r19
    2324:	a0 f4       	brcc	.+40     	; 0x234e <malloc+0x124>
    2326:	2e 1b       	sub	r18, r30
    2328:	3f 0b       	sbc	r19, r31
    232a:	28 17       	cp	r18, r24
    232c:	39 07       	cpc	r19, r25
    232e:	78 f0       	brcs	.+30     	; 0x234e <malloc+0x124>
    2330:	ac 01       	movw	r20, r24
    2332:	4e 5f       	subi	r20, 0xFE	; 254
    2334:	5f 4f       	sbci	r21, 0xFF	; 255
    2336:	24 17       	cp	r18, r20
    2338:	35 07       	cpc	r19, r21
    233a:	48 f0       	brcs	.+18     	; 0x234e <malloc+0x124>
    233c:	4e 0f       	add	r20, r30
    233e:	5f 1f       	adc	r21, r31
    2340:	50 93 c3 00 	sts	0x00C3, r21
    2344:	40 93 c2 00 	sts	0x00C2, r20
    2348:	81 93       	st	Z+, r24
    234a:	91 93       	st	Z+, r25
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <malloc+0x128>
    234e:	e0 e0       	ldi	r30, 0x00	; 0
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	cf 01       	movw	r24, r30
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	08 95       	ret

0000235a <free>:
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	09 f4       	brne	.+2      	; 0x2364 <free+0xa>
    2362:	87 c0       	rjmp	.+270    	; 0x2472 <free+0x118>
    2364:	fc 01       	movw	r30, r24
    2366:	32 97       	sbiw	r30, 0x02	; 2
    2368:	13 82       	std	Z+3, r1	; 0x03
    236a:	12 82       	std	Z+2, r1	; 0x02
    236c:	c0 91 c4 00 	lds	r28, 0x00C4
    2370:	d0 91 c5 00 	lds	r29, 0x00C5
    2374:	20 97       	sbiw	r28, 0x00	; 0
    2376:	81 f4       	brne	.+32     	; 0x2398 <free+0x3e>
    2378:	20 81       	ld	r18, Z
    237a:	31 81       	ldd	r19, Z+1	; 0x01
    237c:	28 0f       	add	r18, r24
    237e:	39 1f       	adc	r19, r25
    2380:	80 91 c2 00 	lds	r24, 0x00C2
    2384:	90 91 c3 00 	lds	r25, 0x00C3
    2388:	82 17       	cp	r24, r18
    238a:	93 07       	cpc	r25, r19
    238c:	79 f5       	brne	.+94     	; 0x23ec <free+0x92>
    238e:	f0 93 c3 00 	sts	0x00C3, r31
    2392:	e0 93 c2 00 	sts	0x00C2, r30
    2396:	6d c0       	rjmp	.+218    	; 0x2472 <free+0x118>
    2398:	de 01       	movw	r26, r28
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	ae 17       	cp	r26, r30
    23a0:	bf 07       	cpc	r27, r31
    23a2:	50 f4       	brcc	.+20     	; 0x23b8 <free+0x5e>
    23a4:	12 96       	adiw	r26, 0x02	; 2
    23a6:	4d 91       	ld	r20, X+
    23a8:	5c 91       	ld	r21, X
    23aa:	13 97       	sbiw	r26, 0x03	; 3
    23ac:	9d 01       	movw	r18, r26
    23ae:	41 15       	cp	r20, r1
    23b0:	51 05       	cpc	r21, r1
    23b2:	09 f1       	breq	.+66     	; 0x23f6 <free+0x9c>
    23b4:	da 01       	movw	r26, r20
    23b6:	f3 cf       	rjmp	.-26     	; 0x239e <free+0x44>
    23b8:	b3 83       	std	Z+3, r27	; 0x03
    23ba:	a2 83       	std	Z+2, r26	; 0x02
    23bc:	40 81       	ld	r20, Z
    23be:	51 81       	ldd	r21, Z+1	; 0x01
    23c0:	84 0f       	add	r24, r20
    23c2:	95 1f       	adc	r25, r21
    23c4:	8a 17       	cp	r24, r26
    23c6:	9b 07       	cpc	r25, r27
    23c8:	71 f4       	brne	.+28     	; 0x23e6 <free+0x8c>
    23ca:	8d 91       	ld	r24, X+
    23cc:	9c 91       	ld	r25, X
    23ce:	11 97       	sbiw	r26, 0x01	; 1
    23d0:	84 0f       	add	r24, r20
    23d2:	95 1f       	adc	r25, r21
    23d4:	02 96       	adiw	r24, 0x02	; 2
    23d6:	91 83       	std	Z+1, r25	; 0x01
    23d8:	80 83       	st	Z, r24
    23da:	12 96       	adiw	r26, 0x02	; 2
    23dc:	8d 91       	ld	r24, X+
    23de:	9c 91       	ld	r25, X
    23e0:	13 97       	sbiw	r26, 0x03	; 3
    23e2:	93 83       	std	Z+3, r25	; 0x03
    23e4:	82 83       	std	Z+2, r24	; 0x02
    23e6:	21 15       	cp	r18, r1
    23e8:	31 05       	cpc	r19, r1
    23ea:	29 f4       	brne	.+10     	; 0x23f6 <free+0x9c>
    23ec:	f0 93 c5 00 	sts	0x00C5, r31
    23f0:	e0 93 c4 00 	sts	0x00C4, r30
    23f4:	3e c0       	rjmp	.+124    	; 0x2472 <free+0x118>
    23f6:	d9 01       	movw	r26, r18
    23f8:	13 96       	adiw	r26, 0x03	; 3
    23fa:	fc 93       	st	X, r31
    23fc:	ee 93       	st	-X, r30
    23fe:	12 97       	sbiw	r26, 0x02	; 2
    2400:	4d 91       	ld	r20, X+
    2402:	5d 91       	ld	r21, X+
    2404:	a4 0f       	add	r26, r20
    2406:	b5 1f       	adc	r27, r21
    2408:	ea 17       	cp	r30, r26
    240a:	fb 07       	cpc	r31, r27
    240c:	79 f4       	brne	.+30     	; 0x242c <free+0xd2>
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	84 0f       	add	r24, r20
    2414:	95 1f       	adc	r25, r21
    2416:	02 96       	adiw	r24, 0x02	; 2
    2418:	d9 01       	movw	r26, r18
    241a:	11 96       	adiw	r26, 0x01	; 1
    241c:	9c 93       	st	X, r25
    241e:	8e 93       	st	-X, r24
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	13 96       	adiw	r26, 0x03	; 3
    2426:	9c 93       	st	X, r25
    2428:	8e 93       	st	-X, r24
    242a:	12 97       	sbiw	r26, 0x02	; 2
    242c:	e0 e0       	ldi	r30, 0x00	; 0
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	9b 81       	ldd	r25, Y+3	; 0x03
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	19 f0       	breq	.+6      	; 0x243e <free+0xe4>
    2438:	fe 01       	movw	r30, r28
    243a:	ec 01       	movw	r28, r24
    243c:	f9 cf       	rjmp	.-14     	; 0x2430 <free+0xd6>
    243e:	ce 01       	movw	r24, r28
    2440:	02 96       	adiw	r24, 0x02	; 2
    2442:	28 81       	ld	r18, Y
    2444:	39 81       	ldd	r19, Y+1	; 0x01
    2446:	82 0f       	add	r24, r18
    2448:	93 1f       	adc	r25, r19
    244a:	20 91 c2 00 	lds	r18, 0x00C2
    244e:	30 91 c3 00 	lds	r19, 0x00C3
    2452:	28 17       	cp	r18, r24
    2454:	39 07       	cpc	r19, r25
    2456:	69 f4       	brne	.+26     	; 0x2472 <free+0x118>
    2458:	30 97       	sbiw	r30, 0x00	; 0
    245a:	29 f4       	brne	.+10     	; 0x2466 <free+0x10c>
    245c:	10 92 c5 00 	sts	0x00C5, r1
    2460:	10 92 c4 00 	sts	0x00C4, r1
    2464:	02 c0       	rjmp	.+4      	; 0x246a <free+0x110>
    2466:	13 82       	std	Z+3, r1	; 0x03
    2468:	12 82       	std	Z+2, r1	; 0x02
    246a:	d0 93 c3 00 	sts	0x00C3, r29
    246e:	c0 93 c2 00 	sts	0x00C2, r28
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	08 95       	ret

00002478 <do_rand>:
    2478:	8f 92       	push	r8
    247a:	9f 92       	push	r9
    247c:	af 92       	push	r10
    247e:	bf 92       	push	r11
    2480:	cf 92       	push	r12
    2482:	df 92       	push	r13
    2484:	ef 92       	push	r14
    2486:	ff 92       	push	r15
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29
    248c:	ec 01       	movw	r28, r24
    248e:	68 81       	ld	r22, Y
    2490:	79 81       	ldd	r23, Y+1	; 0x01
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	9b 81       	ldd	r25, Y+3	; 0x03
    2496:	61 15       	cp	r22, r1
    2498:	71 05       	cpc	r23, r1
    249a:	81 05       	cpc	r24, r1
    249c:	91 05       	cpc	r25, r1
    249e:	21 f4       	brne	.+8      	; 0x24a8 <do_rand+0x30>
    24a0:	64 e2       	ldi	r22, 0x24	; 36
    24a2:	79 ed       	ldi	r23, 0xD9	; 217
    24a4:	8b e5       	ldi	r24, 0x5B	; 91
    24a6:	97 e0       	ldi	r25, 0x07	; 7
    24a8:	2d e1       	ldi	r18, 0x1D	; 29
    24aa:	33 ef       	ldi	r19, 0xF3	; 243
    24ac:	41 e0       	ldi	r20, 0x01	; 1
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__divmodsi4>
    24b4:	49 01       	movw	r8, r18
    24b6:	5a 01       	movw	r10, r20
    24b8:	9b 01       	movw	r18, r22
    24ba:	ac 01       	movw	r20, r24
    24bc:	a7 ea       	ldi	r26, 0xA7	; 167
    24be:	b1 e4       	ldi	r27, 0x41	; 65
    24c0:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__muluhisi3>
    24c4:	6b 01       	movw	r12, r22
    24c6:	7c 01       	movw	r14, r24
    24c8:	ac ee       	ldi	r26, 0xEC	; 236
    24ca:	b4 ef       	ldi	r27, 0xF4	; 244
    24cc:	a5 01       	movw	r20, r10
    24ce:	94 01       	movw	r18, r8
    24d0:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__mulohisi3>
    24d4:	c6 0e       	add	r12, r22
    24d6:	d7 1e       	adc	r13, r23
    24d8:	e8 1e       	adc	r14, r24
    24da:	f9 1e       	adc	r15, r25
    24dc:	f7 fe       	sbrs	r15, 7
    24de:	06 c0       	rjmp	.+12     	; 0x24ec <do_rand+0x74>
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	c8 1a       	sub	r12, r24
    24e4:	d1 08       	sbc	r13, r1
    24e6:	e1 08       	sbc	r14, r1
    24e8:	80 e8       	ldi	r24, 0x80	; 128
    24ea:	f8 0a       	sbc	r15, r24
    24ec:	c8 82       	st	Y, r12
    24ee:	d9 82       	std	Y+1, r13	; 0x01
    24f0:	ea 82       	std	Y+2, r14	; 0x02
    24f2:	fb 82       	std	Y+3, r15	; 0x03
    24f4:	c6 01       	movw	r24, r12
    24f6:	9f 77       	andi	r25, 0x7F	; 127
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	ff 90       	pop	r15
    24fe:	ef 90       	pop	r14
    2500:	df 90       	pop	r13
    2502:	cf 90       	pop	r12
    2504:	bf 90       	pop	r11
    2506:	af 90       	pop	r10
    2508:	9f 90       	pop	r9
    250a:	8f 90       	pop	r8
    250c:	08 95       	ret

0000250e <rand_r>:
    250e:	0e 94 3c 12 	call	0x2478	; 0x2478 <do_rand>
    2512:	08 95       	ret

00002514 <rand>:
    2514:	86 e6       	ldi	r24, 0x66	; 102
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0e 94 3c 12 	call	0x2478	; 0x2478 <do_rand>
    251c:	08 95       	ret

0000251e <srand>:
    251e:	a0 e0       	ldi	r26, 0x00	; 0
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	80 93 66 00 	sts	0x0066, r24
    2526:	90 93 67 00 	sts	0x0067, r25
    252a:	a0 93 68 00 	sts	0x0068, r26
    252e:	b0 93 69 00 	sts	0x0069, r27
    2532:	08 95       	ret

00002534 <strtol>:
    2534:	2f 92       	push	r2
    2536:	3f 92       	push	r3
    2538:	5f 92       	push	r5
    253a:	6f 92       	push	r6
    253c:	7f 92       	push	r7
    253e:	8f 92       	push	r8
    2540:	9f 92       	push	r9
    2542:	af 92       	push	r10
    2544:	bf 92       	push	r11
    2546:	cf 92       	push	r12
    2548:	df 92       	push	r13
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	8b 01       	movw	r16, r22
    2558:	ea 01       	movw	r28, r20
    255a:	61 15       	cp	r22, r1
    255c:	71 05       	cpc	r23, r1
    255e:	21 f0       	breq	.+8      	; 0x2568 <strtol+0x34>
    2560:	db 01       	movw	r26, r22
    2562:	8c 93       	st	X, r24
    2564:	11 96       	adiw	r26, 0x01	; 1
    2566:	9c 93       	st	X, r25
    2568:	20 97       	sbiw	r28, 0x00	; 0
    256a:	39 f0       	breq	.+14     	; 0x257a <strtol+0x46>
    256c:	9e 01       	movw	r18, r28
    256e:	22 50       	subi	r18, 0x02	; 2
    2570:	31 09       	sbc	r19, r1
    2572:	23 32       	cpi	r18, 0x23	; 35
    2574:	31 05       	cpc	r19, r1
    2576:	08 f0       	brcs	.+2      	; 0x257a <strtol+0x46>
    2578:	fb c0       	rjmp	.+502    	; 0x2770 <strtol+0x23c>
    257a:	7c 01       	movw	r14, r24
    257c:	67 01       	movw	r12, r14
    257e:	bf ef       	ldi	r27, 0xFF	; 255
    2580:	cb 1a       	sub	r12, r27
    2582:	db 0a       	sbc	r13, r27
    2584:	56 01       	movw	r10, r12
    2586:	f7 01       	movw	r30, r14
    2588:	60 80       	ld	r6, Z
    258a:	86 2d       	mov	r24, r6
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 ce 13 	call	0x279c	; 0x279c <isspace>
    2592:	89 2b       	or	r24, r25
    2594:	11 f0       	breq	.+4      	; 0x259a <strtol+0x66>
    2596:	76 01       	movw	r14, r12
    2598:	f1 cf       	rjmp	.-30     	; 0x257c <strtol+0x48>
    259a:	fd e2       	ldi	r31, 0x2D	; 45
    259c:	6f 12       	cpse	r6, r31
    259e:	0a c0       	rjmp	.+20     	; 0x25b4 <strtol+0x80>
    25a0:	57 01       	movw	r10, r14
    25a2:	82 e0       	ldi	r24, 0x02	; 2
    25a4:	a8 0e       	add	r10, r24
    25a6:	b1 1c       	adc	r11, r1
    25a8:	d7 01       	movw	r26, r14
    25aa:	11 96       	adiw	r26, 0x01	; 1
    25ac:	6c 90       	ld	r6, X
    25ae:	77 24       	eor	r7, r7
    25b0:	73 94       	inc	r7
    25b2:	0b c0       	rjmp	.+22     	; 0x25ca <strtol+0x96>
    25b4:	bb e2       	ldi	r27, 0x2B	; 43
    25b6:	6b 12       	cpse	r6, r27
    25b8:	07 c0       	rjmp	.+14     	; 0x25c8 <strtol+0x94>
    25ba:	57 01       	movw	r10, r14
    25bc:	e2 e0       	ldi	r30, 0x02	; 2
    25be:	ae 0e       	add	r10, r30
    25c0:	b1 1c       	adc	r11, r1
    25c2:	d7 01       	movw	r26, r14
    25c4:	11 96       	adiw	r26, 0x01	; 1
    25c6:	6c 90       	ld	r6, X
    25c8:	71 2c       	mov	r7, r1
    25ca:	ce 01       	movw	r24, r28
    25cc:	8f 7e       	andi	r24, 0xEF	; 239
    25ce:	89 2b       	or	r24, r25
    25d0:	89 f4       	brne	.+34     	; 0x25f4 <strtol+0xc0>
    25d2:	b0 e3       	ldi	r27, 0x30	; 48
    25d4:	6b 12       	cpse	r6, r27
    25d6:	22 c0       	rjmp	.+68     	; 0x261c <strtol+0xe8>
    25d8:	f5 01       	movw	r30, r10
    25da:	80 81       	ld	r24, Z
    25dc:	8f 7d       	andi	r24, 0xDF	; 223
    25de:	88 35       	cpi	r24, 0x58	; 88
    25e0:	41 f5       	brne	.+80     	; 0x2632 <strtol+0xfe>
    25e2:	61 80       	ldd	r6, Z+1	; 0x01
    25e4:	f2 e0       	ldi	r31, 0x02	; 2
    25e6:	af 0e       	add	r10, r31
    25e8:	b1 1c       	adc	r11, r1
    25ea:	87 2d       	mov	r24, r7
    25ec:	82 60       	ori	r24, 0x02	; 2
    25ee:	78 2e       	mov	r7, r24
    25f0:	c0 e1       	ldi	r28, 0x10	; 16
    25f2:	d0 e0       	ldi	r29, 0x00	; 0
    25f4:	c8 30       	cpi	r28, 0x08	; 8
    25f6:	d1 05       	cpc	r29, r1
    25f8:	f1 f0       	breq	.+60     	; 0x2636 <strtol+0x102>
    25fa:	4c f4       	brge	.+18     	; 0x260e <strtol+0xda>
    25fc:	c2 30       	cpi	r28, 0x02	; 2
    25fe:	d1 05       	cpc	r29, r1
    2600:	11 f5       	brne	.+68     	; 0x2646 <strtol+0x112>
    2602:	c1 2c       	mov	r12, r1
    2604:	d1 2c       	mov	r13, r1
    2606:	e1 2c       	mov	r14, r1
    2608:	b0 e4       	ldi	r27, 0x40	; 64
    260a:	fb 2e       	mov	r15, r27
    260c:	2f c0       	rjmp	.+94     	; 0x266c <strtol+0x138>
    260e:	ca 30       	cpi	r28, 0x0A	; 10
    2610:	d1 05       	cpc	r29, r1
    2612:	31 f0       	breq	.+12     	; 0x2620 <strtol+0xec>
    2614:	c0 31       	cpi	r28, 0x10	; 16
    2616:	d1 05       	cpc	r29, r1
    2618:	21 f1       	breq	.+72     	; 0x2662 <strtol+0x12e>
    261a:	15 c0       	rjmp	.+42     	; 0x2646 <strtol+0x112>
    261c:	20 97       	sbiw	r28, 0x00	; 0
    261e:	51 f7       	brne	.-44     	; 0x25f4 <strtol+0xc0>
    2620:	ca e0       	ldi	r28, 0x0A	; 10
    2622:	d0 e0       	ldi	r29, 0x00	; 0
    2624:	ac ec       	ldi	r26, 0xCC	; 204
    2626:	ca 2e       	mov	r12, r26
    2628:	dc 2c       	mov	r13, r12
    262a:	ec 2c       	mov	r14, r12
    262c:	ac e0       	ldi	r26, 0x0C	; 12
    262e:	fa 2e       	mov	r15, r26
    2630:	1d c0       	rjmp	.+58     	; 0x266c <strtol+0x138>
    2632:	20 97       	sbiw	r28, 0x00	; 0
    2634:	f9 f6       	brne	.-66     	; 0x25f4 <strtol+0xc0>
    2636:	c8 e0       	ldi	r28, 0x08	; 8
    2638:	d0 e0       	ldi	r29, 0x00	; 0
    263a:	c1 2c       	mov	r12, r1
    263c:	d1 2c       	mov	r13, r1
    263e:	e1 2c       	mov	r14, r1
    2640:	f0 e1       	ldi	r31, 0x10	; 16
    2642:	ff 2e       	mov	r15, r31
    2644:	13 c0       	rjmp	.+38     	; 0x266c <strtol+0x138>
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	70 e0       	ldi	r23, 0x00	; 0
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e8       	ldi	r25, 0x80	; 128
    264e:	9e 01       	movw	r18, r28
    2650:	44 27       	eor	r20, r20
    2652:	37 fd       	sbrc	r19, 7
    2654:	40 95       	com	r20
    2656:	54 2f       	mov	r21, r20
    2658:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__udivmodsi4>
    265c:	69 01       	movw	r12, r18
    265e:	7a 01       	movw	r14, r20
    2660:	05 c0       	rjmp	.+10     	; 0x266c <strtol+0x138>
    2662:	c1 2c       	mov	r12, r1
    2664:	d1 2c       	mov	r13, r1
    2666:	e1 2c       	mov	r14, r1
    2668:	e8 e0       	ldi	r30, 0x08	; 8
    266a:	fe 2e       	mov	r15, r30
    266c:	f5 01       	movw	r30, r10
    266e:	60 e0       	ldi	r22, 0x00	; 0
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	a9 01       	movw	r20, r18
    2676:	4e 01       	movw	r8, r28
    2678:	aa 24       	eor	r10, r10
    267a:	97 fc       	sbrc	r9, 7
    267c:	a0 94       	com	r10
    267e:	ba 2c       	mov	r11, r10
    2680:	1f 01       	movw	r2, r30
    2682:	70 ed       	ldi	r23, 0xD0	; 208
    2684:	57 2e       	mov	r5, r23
    2686:	56 0c       	add	r5, r6
    2688:	a9 e0       	ldi	r26, 0x09	; 9
    268a:	a5 15       	cp	r26, r5
    268c:	70 f4       	brcc	.+28     	; 0x26aa <strtol+0x176>
    268e:	8f eb       	ldi	r24, 0xBF	; 191
    2690:	86 0d       	add	r24, r6
    2692:	8a 31       	cpi	r24, 0x1A	; 26
    2694:	18 f4       	brcc	.+6      	; 0x269c <strtol+0x168>
    2696:	99 ec       	ldi	r25, 0xC9	; 201
    2698:	59 2e       	mov	r5, r25
    269a:	06 c0       	rjmp	.+12     	; 0x26a8 <strtol+0x174>
    269c:	8f e9       	ldi	r24, 0x9F	; 159
    269e:	86 0d       	add	r24, r6
    26a0:	8a 31       	cpi	r24, 0x1A	; 26
    26a2:	30 f5       	brcc	.+76     	; 0x26f0 <strtol+0x1bc>
    26a4:	89 ea       	ldi	r24, 0xA9	; 169
    26a6:	58 2e       	mov	r5, r24
    26a8:	56 0c       	add	r5, r6
    26aa:	85 2d       	mov	r24, r5
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	8c 17       	cp	r24, r28
    26b0:	9d 07       	cpc	r25, r29
    26b2:	f4 f4       	brge	.+60     	; 0x26f0 <strtol+0x1bc>
    26b4:	67 fd       	sbrc	r22, 7
    26b6:	18 c0       	rjmp	.+48     	; 0x26e8 <strtol+0x1b4>
    26b8:	c2 16       	cp	r12, r18
    26ba:	d3 06       	cpc	r13, r19
    26bc:	e4 06       	cpc	r14, r20
    26be:	f5 06       	cpc	r15, r21
    26c0:	80 f0       	brcs	.+32     	; 0x26e2 <strtol+0x1ae>
    26c2:	c5 01       	movw	r24, r10
    26c4:	b4 01       	movw	r22, r8
    26c6:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__mulsi3>
    26ca:	9b 01       	movw	r18, r22
    26cc:	ac 01       	movw	r20, r24
    26ce:	25 0d       	add	r18, r5
    26d0:	31 1d       	adc	r19, r1
    26d2:	41 1d       	adc	r20, r1
    26d4:	51 1d       	adc	r21, r1
    26d6:	21 30       	cpi	r18, 0x01	; 1
    26d8:	31 05       	cpc	r19, r1
    26da:	41 05       	cpc	r20, r1
    26dc:	b0 e8       	ldi	r27, 0x80	; 128
    26de:	5b 07       	cpc	r21, r27
    26e0:	10 f0       	brcs	.+4      	; 0x26e6 <strtol+0x1b2>
    26e2:	6f ef       	ldi	r22, 0xFF	; 255
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <strtol+0x1b4>
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	31 96       	adiw	r30, 0x01	; 1
    26ea:	d1 01       	movw	r26, r2
    26ec:	6c 90       	ld	r6, X
    26ee:	c8 cf       	rjmp	.-112    	; 0x2680 <strtol+0x14c>
    26f0:	87 2d       	mov	r24, r7
    26f2:	81 70       	andi	r24, 0x01	; 1
    26f4:	01 15       	cp	r16, r1
    26f6:	11 05       	cpc	r17, r1
    26f8:	71 f0       	breq	.+28     	; 0x2716 <strtol+0x1e2>
    26fa:	66 23       	and	r22, r22
    26fc:	29 f0       	breq	.+10     	; 0x2708 <strtol+0x1d4>
    26fe:	31 97       	sbiw	r30, 0x01	; 1
    2700:	d8 01       	movw	r26, r16
    2702:	ed 93       	st	X+, r30
    2704:	fc 93       	st	X, r31
    2706:	07 c0       	rjmp	.+14     	; 0x2716 <strtol+0x1e2>
    2708:	71 fe       	sbrs	r7, 1
    270a:	19 c0       	rjmp	.+50     	; 0x273e <strtol+0x20a>
    270c:	32 97       	sbiw	r30, 0x02	; 2
    270e:	d8 01       	movw	r26, r16
    2710:	ed 93       	st	X+, r30
    2712:	fc 93       	st	X, r31
    2714:	14 c0       	rjmp	.+40     	; 0x273e <strtol+0x20a>
    2716:	67 ff       	sbrs	r22, 7
    2718:	12 c0       	rjmp	.+36     	; 0x273e <strtol+0x20a>
    271a:	88 23       	and	r24, r24
    271c:	29 f0       	breq	.+10     	; 0x2728 <strtol+0x1f4>
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	50 e8       	ldi	r21, 0x80	; 128
    2726:	04 c0       	rjmp	.+8      	; 0x2730 <strtol+0x1fc>
    2728:	2f ef       	ldi	r18, 0xFF	; 255
    272a:	3f ef       	ldi	r19, 0xFF	; 255
    272c:	4f ef       	ldi	r20, 0xFF	; 255
    272e:	5f e7       	ldi	r21, 0x7F	; 127
    2730:	82 e2       	ldi	r24, 0x22	; 34
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	90 93 c7 00 	sts	0x00C7, r25
    2738:	80 93 c6 00 	sts	0x00C6, r24
    273c:	16 c0       	rjmp	.+44     	; 0x276a <strtol+0x236>
    273e:	88 23       	and	r24, r24
    2740:	41 f0       	breq	.+16     	; 0x2752 <strtol+0x21e>
    2742:	50 95       	com	r21
    2744:	40 95       	com	r20
    2746:	30 95       	com	r19
    2748:	21 95       	neg	r18
    274a:	3f 4f       	sbci	r19, 0xFF	; 255
    274c:	4f 4f       	sbci	r20, 0xFF	; 255
    274e:	5f 4f       	sbci	r21, 0xFF	; 255
    2750:	0c c0       	rjmp	.+24     	; 0x276a <strtol+0x236>
    2752:	57 ff       	sbrs	r21, 7
    2754:	0a c0       	rjmp	.+20     	; 0x276a <strtol+0x236>
    2756:	82 e2       	ldi	r24, 0x22	; 34
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	90 93 c7 00 	sts	0x00C7, r25
    275e:	80 93 c6 00 	sts	0x00C6, r24
    2762:	2f ef       	ldi	r18, 0xFF	; 255
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f ef       	ldi	r20, 0xFF	; 255
    2768:	5f e7       	ldi	r21, 0x7F	; 127
    276a:	b9 01       	movw	r22, r18
    276c:	ca 01       	movw	r24, r20
    276e:	04 c0       	rjmp	.+8      	; 0x2778 <strtol+0x244>
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	ff 90       	pop	r15
    2782:	ef 90       	pop	r14
    2784:	df 90       	pop	r13
    2786:	cf 90       	pop	r12
    2788:	bf 90       	pop	r11
    278a:	af 90       	pop	r10
    278c:	9f 90       	pop	r9
    278e:	8f 90       	pop	r8
    2790:	7f 90       	pop	r7
    2792:	6f 90       	pop	r6
    2794:	5f 90       	pop	r5
    2796:	3f 90       	pop	r3
    2798:	2f 90       	pop	r2
    279a:	08 95       	ret

0000279c <isspace>:
    279c:	91 11       	cpse	r25, r1
    279e:	fa c1       	rjmp	.+1012   	; 0x2b94 <__ctype_isfalse>
    27a0:	80 32       	cpi	r24, 0x20	; 32
    27a2:	19 f0       	breq	.+6      	; 0x27aa <isspace+0xe>
    27a4:	89 50       	subi	r24, 0x09	; 9
    27a6:	85 50       	subi	r24, 0x05	; 5
    27a8:	d0 f7       	brcc	.-12     	; 0x279e <isspace+0x2>
    27aa:	08 95       	ret

000027ac <sprintf>:
    27ac:	ae e0       	ldi	r26, 0x0E	; 14
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	ec ed       	ldi	r30, 0xDC	; 220
    27b2:	f3 e1       	ldi	r31, 0x13	; 19
    27b4:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__prologue_saves__+0x1c>
    27b8:	0d 89       	ldd	r16, Y+21	; 0x15
    27ba:	1e 89       	ldd	r17, Y+22	; 0x16
    27bc:	86 e0       	ldi	r24, 0x06	; 6
    27be:	8c 83       	std	Y+4, r24	; 0x04
    27c0:	1a 83       	std	Y+2, r17	; 0x02
    27c2:	09 83       	std	Y+1, r16	; 0x01
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	9f e7       	ldi	r25, 0x7F	; 127
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	ae 01       	movw	r20, r28
    27ce:	47 5e       	subi	r20, 0xE7	; 231
    27d0:	5f 4f       	sbci	r21, 0xFF	; 255
    27d2:	6f 89       	ldd	r22, Y+23	; 0x17
    27d4:	78 8d       	ldd	r23, Y+24	; 0x18
    27d6:	ce 01       	movw	r24, r28
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <vfprintf>
    27de:	ef 81       	ldd	r30, Y+7	; 0x07
    27e0:	f8 85       	ldd	r31, Y+8	; 0x08
    27e2:	e0 0f       	add	r30, r16
    27e4:	f1 1f       	adc	r31, r17
    27e6:	10 82       	st	Z, r1
    27e8:	2e 96       	adiw	r28, 0x0e	; 14
    27ea:	e4 e0       	ldi	r30, 0x04	; 4
    27ec:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__epilogue_restores__+0x1c>

000027f0 <vfprintf>:
    27f0:	ac e0       	ldi	r26, 0x0C	; 12
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	ee ef       	ldi	r30, 0xFE	; 254
    27f6:	f3 e1       	ldi	r31, 0x13	; 19
    27f8:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__prologue_saves__>
    27fc:	7c 01       	movw	r14, r24
    27fe:	6b 01       	movw	r12, r22
    2800:	8a 01       	movw	r16, r20
    2802:	fc 01       	movw	r30, r24
    2804:	17 82       	std	Z+7, r1	; 0x07
    2806:	16 82       	std	Z+6, r1	; 0x06
    2808:	83 81       	ldd	r24, Z+3	; 0x03
    280a:	81 ff       	sbrs	r24, 1
    280c:	bd c1       	rjmp	.+890    	; 0x2b88 <vfprintf+0x398>
    280e:	ce 01       	movw	r24, r28
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	4c 01       	movw	r8, r24
    2814:	f7 01       	movw	r30, r14
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	f6 01       	movw	r30, r12
    281a:	93 fd       	sbrc	r25, 3
    281c:	85 91       	lpm	r24, Z+
    281e:	93 ff       	sbrs	r25, 3
    2820:	81 91       	ld	r24, Z+
    2822:	6f 01       	movw	r12, r30
    2824:	88 23       	and	r24, r24
    2826:	09 f4       	brne	.+2      	; 0x282a <vfprintf+0x3a>
    2828:	ab c1       	rjmp	.+854    	; 0x2b80 <vfprintf+0x390>
    282a:	85 32       	cpi	r24, 0x25	; 37
    282c:	39 f4       	brne	.+14     	; 0x283c <vfprintf+0x4c>
    282e:	93 fd       	sbrc	r25, 3
    2830:	85 91       	lpm	r24, Z+
    2832:	93 ff       	sbrs	r25, 3
    2834:	81 91       	ld	r24, Z+
    2836:	6f 01       	movw	r12, r30
    2838:	85 32       	cpi	r24, 0x25	; 37
    283a:	29 f4       	brne	.+10     	; 0x2846 <vfprintf+0x56>
    283c:	b7 01       	movw	r22, r14
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <fputc>
    2844:	e7 cf       	rjmp	.-50     	; 0x2814 <vfprintf+0x24>
    2846:	51 2c       	mov	r5, r1
    2848:	31 2c       	mov	r3, r1
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	20 32       	cpi	r18, 0x20	; 32
    284e:	a0 f4       	brcc	.+40     	; 0x2878 <vfprintf+0x88>
    2850:	8b 32       	cpi	r24, 0x2B	; 43
    2852:	69 f0       	breq	.+26     	; 0x286e <vfprintf+0x7e>
    2854:	30 f4       	brcc	.+12     	; 0x2862 <vfprintf+0x72>
    2856:	80 32       	cpi	r24, 0x20	; 32
    2858:	59 f0       	breq	.+22     	; 0x2870 <vfprintf+0x80>
    285a:	83 32       	cpi	r24, 0x23	; 35
    285c:	69 f4       	brne	.+26     	; 0x2878 <vfprintf+0x88>
    285e:	20 61       	ori	r18, 0x10	; 16
    2860:	2c c0       	rjmp	.+88     	; 0x28ba <vfprintf+0xca>
    2862:	8d 32       	cpi	r24, 0x2D	; 45
    2864:	39 f0       	breq	.+14     	; 0x2874 <vfprintf+0x84>
    2866:	80 33       	cpi	r24, 0x30	; 48
    2868:	39 f4       	brne	.+14     	; 0x2878 <vfprintf+0x88>
    286a:	21 60       	ori	r18, 0x01	; 1
    286c:	26 c0       	rjmp	.+76     	; 0x28ba <vfprintf+0xca>
    286e:	22 60       	ori	r18, 0x02	; 2
    2870:	24 60       	ori	r18, 0x04	; 4
    2872:	23 c0       	rjmp	.+70     	; 0x28ba <vfprintf+0xca>
    2874:	28 60       	ori	r18, 0x08	; 8
    2876:	21 c0       	rjmp	.+66     	; 0x28ba <vfprintf+0xca>
    2878:	27 fd       	sbrc	r18, 7
    287a:	27 c0       	rjmp	.+78     	; 0x28ca <vfprintf+0xda>
    287c:	30 ed       	ldi	r19, 0xD0	; 208
    287e:	38 0f       	add	r19, r24
    2880:	3a 30       	cpi	r19, 0x0A	; 10
    2882:	78 f4       	brcc	.+30     	; 0x28a2 <vfprintf+0xb2>
    2884:	26 ff       	sbrs	r18, 6
    2886:	06 c0       	rjmp	.+12     	; 0x2894 <vfprintf+0xa4>
    2888:	fa e0       	ldi	r31, 0x0A	; 10
    288a:	5f 9e       	mul	r5, r31
    288c:	30 0d       	add	r19, r0
    288e:	11 24       	eor	r1, r1
    2890:	53 2e       	mov	r5, r19
    2892:	13 c0       	rjmp	.+38     	; 0x28ba <vfprintf+0xca>
    2894:	8a e0       	ldi	r24, 0x0A	; 10
    2896:	38 9e       	mul	r3, r24
    2898:	30 0d       	add	r19, r0
    289a:	11 24       	eor	r1, r1
    289c:	33 2e       	mov	r3, r19
    289e:	20 62       	ori	r18, 0x20	; 32
    28a0:	0c c0       	rjmp	.+24     	; 0x28ba <vfprintf+0xca>
    28a2:	8e 32       	cpi	r24, 0x2E	; 46
    28a4:	21 f4       	brne	.+8      	; 0x28ae <vfprintf+0xbe>
    28a6:	26 fd       	sbrc	r18, 6
    28a8:	6b c1       	rjmp	.+726    	; 0x2b80 <vfprintf+0x390>
    28aa:	20 64       	ori	r18, 0x40	; 64
    28ac:	06 c0       	rjmp	.+12     	; 0x28ba <vfprintf+0xca>
    28ae:	8c 36       	cpi	r24, 0x6C	; 108
    28b0:	11 f4       	brne	.+4      	; 0x28b6 <vfprintf+0xc6>
    28b2:	20 68       	ori	r18, 0x80	; 128
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <vfprintf+0xca>
    28b6:	88 36       	cpi	r24, 0x68	; 104
    28b8:	41 f4       	brne	.+16     	; 0x28ca <vfprintf+0xda>
    28ba:	f6 01       	movw	r30, r12
    28bc:	93 fd       	sbrc	r25, 3
    28be:	85 91       	lpm	r24, Z+
    28c0:	93 ff       	sbrs	r25, 3
    28c2:	81 91       	ld	r24, Z+
    28c4:	6f 01       	movw	r12, r30
    28c6:	81 11       	cpse	r24, r1
    28c8:	c1 cf       	rjmp	.-126    	; 0x284c <vfprintf+0x5c>
    28ca:	98 2f       	mov	r25, r24
    28cc:	9f 7d       	andi	r25, 0xDF	; 223
    28ce:	95 54       	subi	r25, 0x45	; 69
    28d0:	93 30       	cpi	r25, 0x03	; 3
    28d2:	28 f4       	brcc	.+10     	; 0x28de <vfprintf+0xee>
    28d4:	0c 5f       	subi	r16, 0xFC	; 252
    28d6:	1f 4f       	sbci	r17, 0xFF	; 255
    28d8:	ff e3       	ldi	r31, 0x3F	; 63
    28da:	f9 83       	std	Y+1, r31	; 0x01
    28dc:	0d c0       	rjmp	.+26     	; 0x28f8 <vfprintf+0x108>
    28de:	83 36       	cpi	r24, 0x63	; 99
    28e0:	31 f0       	breq	.+12     	; 0x28ee <vfprintf+0xfe>
    28e2:	83 37       	cpi	r24, 0x73	; 115
    28e4:	71 f0       	breq	.+28     	; 0x2902 <vfprintf+0x112>
    28e6:	83 35       	cpi	r24, 0x53	; 83
    28e8:	09 f0       	breq	.+2      	; 0x28ec <vfprintf+0xfc>
    28ea:	5b c0       	rjmp	.+182    	; 0x29a2 <vfprintf+0x1b2>
    28ec:	22 c0       	rjmp	.+68     	; 0x2932 <vfprintf+0x142>
    28ee:	f8 01       	movw	r30, r16
    28f0:	80 81       	ld	r24, Z
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	0e 5f       	subi	r16, 0xFE	; 254
    28f6:	1f 4f       	sbci	r17, 0xFF	; 255
    28f8:	44 24       	eor	r4, r4
    28fa:	43 94       	inc	r4
    28fc:	51 2c       	mov	r5, r1
    28fe:	54 01       	movw	r10, r8
    2900:	15 c0       	rjmp	.+42     	; 0x292c <vfprintf+0x13c>
    2902:	38 01       	movw	r6, r16
    2904:	f2 e0       	ldi	r31, 0x02	; 2
    2906:	6f 0e       	add	r6, r31
    2908:	71 1c       	adc	r7, r1
    290a:	f8 01       	movw	r30, r16
    290c:	a0 80       	ld	r10, Z
    290e:	b1 80       	ldd	r11, Z+1	; 0x01
    2910:	26 ff       	sbrs	r18, 6
    2912:	03 c0       	rjmp	.+6      	; 0x291a <vfprintf+0x12a>
    2914:	65 2d       	mov	r22, r5
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	02 c0       	rjmp	.+4      	; 0x291e <vfprintf+0x12e>
    291a:	6f ef       	ldi	r22, 0xFF	; 255
    291c:	7f ef       	ldi	r23, 0xFF	; 255
    291e:	c5 01       	movw	r24, r10
    2920:	2c 87       	std	Y+12, r18	; 0x0c
    2922:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <strnlen>
    2926:	2c 01       	movw	r4, r24
    2928:	83 01       	movw	r16, r6
    292a:	2c 85       	ldd	r18, Y+12	; 0x0c
    292c:	2f 77       	andi	r18, 0x7F	; 127
    292e:	22 2e       	mov	r2, r18
    2930:	17 c0       	rjmp	.+46     	; 0x2960 <vfprintf+0x170>
    2932:	38 01       	movw	r6, r16
    2934:	f2 e0       	ldi	r31, 0x02	; 2
    2936:	6f 0e       	add	r6, r31
    2938:	71 1c       	adc	r7, r1
    293a:	f8 01       	movw	r30, r16
    293c:	a0 80       	ld	r10, Z
    293e:	b1 80       	ldd	r11, Z+1	; 0x01
    2940:	26 ff       	sbrs	r18, 6
    2942:	03 c0       	rjmp	.+6      	; 0x294a <vfprintf+0x15a>
    2944:	65 2d       	mov	r22, r5
    2946:	70 e0       	ldi	r23, 0x00	; 0
    2948:	02 c0       	rjmp	.+4      	; 0x294e <vfprintf+0x15e>
    294a:	6f ef       	ldi	r22, 0xFF	; 255
    294c:	7f ef       	ldi	r23, 0xFF	; 255
    294e:	c5 01       	movw	r24, r10
    2950:	2c 87       	std	Y+12, r18	; 0x0c
    2952:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <strnlen_P>
    2956:	2c 01       	movw	r4, r24
    2958:	2c 85       	ldd	r18, Y+12	; 0x0c
    295a:	20 68       	ori	r18, 0x80	; 128
    295c:	22 2e       	mov	r2, r18
    295e:	83 01       	movw	r16, r6
    2960:	23 fc       	sbrc	r2, 3
    2962:	1b c0       	rjmp	.+54     	; 0x299a <vfprintf+0x1aa>
    2964:	83 2d       	mov	r24, r3
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	48 16       	cp	r4, r24
    296a:	59 06       	cpc	r5, r25
    296c:	b0 f4       	brcc	.+44     	; 0x299a <vfprintf+0x1aa>
    296e:	b7 01       	movw	r22, r14
    2970:	80 e2       	ldi	r24, 0x20	; 32
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <fputc>
    2978:	3a 94       	dec	r3
    297a:	f4 cf       	rjmp	.-24     	; 0x2964 <vfprintf+0x174>
    297c:	f5 01       	movw	r30, r10
    297e:	27 fc       	sbrc	r2, 7
    2980:	85 91       	lpm	r24, Z+
    2982:	27 fe       	sbrs	r2, 7
    2984:	81 91       	ld	r24, Z+
    2986:	5f 01       	movw	r10, r30
    2988:	b7 01       	movw	r22, r14
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <fputc>
    2990:	31 10       	cpse	r3, r1
    2992:	3a 94       	dec	r3
    2994:	f1 e0       	ldi	r31, 0x01	; 1
    2996:	4f 1a       	sub	r4, r31
    2998:	51 08       	sbc	r5, r1
    299a:	41 14       	cp	r4, r1
    299c:	51 04       	cpc	r5, r1
    299e:	71 f7       	brne	.-36     	; 0x297c <vfprintf+0x18c>
    29a0:	e5 c0       	rjmp	.+458    	; 0x2b6c <vfprintf+0x37c>
    29a2:	84 36       	cpi	r24, 0x64	; 100
    29a4:	11 f0       	breq	.+4      	; 0x29aa <vfprintf+0x1ba>
    29a6:	89 36       	cpi	r24, 0x69	; 105
    29a8:	39 f5       	brne	.+78     	; 0x29f8 <vfprintf+0x208>
    29aa:	f8 01       	movw	r30, r16
    29ac:	27 ff       	sbrs	r18, 7
    29ae:	07 c0       	rjmp	.+14     	; 0x29be <vfprintf+0x1ce>
    29b0:	60 81       	ld	r22, Z
    29b2:	71 81       	ldd	r23, Z+1	; 0x01
    29b4:	82 81       	ldd	r24, Z+2	; 0x02
    29b6:	93 81       	ldd	r25, Z+3	; 0x03
    29b8:	0c 5f       	subi	r16, 0xFC	; 252
    29ba:	1f 4f       	sbci	r17, 0xFF	; 255
    29bc:	08 c0       	rjmp	.+16     	; 0x29ce <vfprintf+0x1de>
    29be:	60 81       	ld	r22, Z
    29c0:	71 81       	ldd	r23, Z+1	; 0x01
    29c2:	88 27       	eor	r24, r24
    29c4:	77 fd       	sbrc	r23, 7
    29c6:	80 95       	com	r24
    29c8:	98 2f       	mov	r25, r24
    29ca:	0e 5f       	subi	r16, 0xFE	; 254
    29cc:	1f 4f       	sbci	r17, 0xFF	; 255
    29ce:	2f 76       	andi	r18, 0x6F	; 111
    29d0:	b2 2e       	mov	r11, r18
    29d2:	97 ff       	sbrs	r25, 7
    29d4:	09 c0       	rjmp	.+18     	; 0x29e8 <vfprintf+0x1f8>
    29d6:	90 95       	com	r25
    29d8:	80 95       	com	r24
    29da:	70 95       	com	r23
    29dc:	61 95       	neg	r22
    29de:	7f 4f       	sbci	r23, 0xFF	; 255
    29e0:	8f 4f       	sbci	r24, 0xFF	; 255
    29e2:	9f 4f       	sbci	r25, 0xFF	; 255
    29e4:	20 68       	ori	r18, 0x80	; 128
    29e6:	b2 2e       	mov	r11, r18
    29e8:	2a e0       	ldi	r18, 0x0A	; 10
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	a4 01       	movw	r20, r8
    29ee:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__ultoa_invert>
    29f2:	a8 2e       	mov	r10, r24
    29f4:	a8 18       	sub	r10, r8
    29f6:	44 c0       	rjmp	.+136    	; 0x2a80 <vfprintf+0x290>
    29f8:	85 37       	cpi	r24, 0x75	; 117
    29fa:	29 f4       	brne	.+10     	; 0x2a06 <vfprintf+0x216>
    29fc:	2f 7e       	andi	r18, 0xEF	; 239
    29fe:	b2 2e       	mov	r11, r18
    2a00:	2a e0       	ldi	r18, 0x0A	; 10
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	25 c0       	rjmp	.+74     	; 0x2a50 <vfprintf+0x260>
    2a06:	f2 2f       	mov	r31, r18
    2a08:	f9 7f       	andi	r31, 0xF9	; 249
    2a0a:	bf 2e       	mov	r11, r31
    2a0c:	8f 36       	cpi	r24, 0x6F	; 111
    2a0e:	c1 f0       	breq	.+48     	; 0x2a40 <vfprintf+0x250>
    2a10:	18 f4       	brcc	.+6      	; 0x2a18 <vfprintf+0x228>
    2a12:	88 35       	cpi	r24, 0x58	; 88
    2a14:	79 f0       	breq	.+30     	; 0x2a34 <vfprintf+0x244>
    2a16:	b4 c0       	rjmp	.+360    	; 0x2b80 <vfprintf+0x390>
    2a18:	80 37       	cpi	r24, 0x70	; 112
    2a1a:	19 f0       	breq	.+6      	; 0x2a22 <vfprintf+0x232>
    2a1c:	88 37       	cpi	r24, 0x78	; 120
    2a1e:	21 f0       	breq	.+8      	; 0x2a28 <vfprintf+0x238>
    2a20:	af c0       	rjmp	.+350    	; 0x2b80 <vfprintf+0x390>
    2a22:	2f 2f       	mov	r18, r31
    2a24:	20 61       	ori	r18, 0x10	; 16
    2a26:	b2 2e       	mov	r11, r18
    2a28:	b4 fe       	sbrs	r11, 4
    2a2a:	0d c0       	rjmp	.+26     	; 0x2a46 <vfprintf+0x256>
    2a2c:	8b 2d       	mov	r24, r11
    2a2e:	84 60       	ori	r24, 0x04	; 4
    2a30:	b8 2e       	mov	r11, r24
    2a32:	09 c0       	rjmp	.+18     	; 0x2a46 <vfprintf+0x256>
    2a34:	24 ff       	sbrs	r18, 4
    2a36:	0a c0       	rjmp	.+20     	; 0x2a4c <vfprintf+0x25c>
    2a38:	9f 2f       	mov	r25, r31
    2a3a:	96 60       	ori	r25, 0x06	; 6
    2a3c:	b9 2e       	mov	r11, r25
    2a3e:	06 c0       	rjmp	.+12     	; 0x2a4c <vfprintf+0x25c>
    2a40:	28 e0       	ldi	r18, 0x08	; 8
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	05 c0       	rjmp	.+10     	; 0x2a50 <vfprintf+0x260>
    2a46:	20 e1       	ldi	r18, 0x10	; 16
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <vfprintf+0x260>
    2a4c:	20 e1       	ldi	r18, 0x10	; 16
    2a4e:	32 e0       	ldi	r19, 0x02	; 2
    2a50:	f8 01       	movw	r30, r16
    2a52:	b7 fe       	sbrs	r11, 7
    2a54:	07 c0       	rjmp	.+14     	; 0x2a64 <vfprintf+0x274>
    2a56:	60 81       	ld	r22, Z
    2a58:	71 81       	ldd	r23, Z+1	; 0x01
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	93 81       	ldd	r25, Z+3	; 0x03
    2a5e:	0c 5f       	subi	r16, 0xFC	; 252
    2a60:	1f 4f       	sbci	r17, 0xFF	; 255
    2a62:	06 c0       	rjmp	.+12     	; 0x2a70 <vfprintf+0x280>
    2a64:	60 81       	ld	r22, Z
    2a66:	71 81       	ldd	r23, Z+1	; 0x01
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 5f       	subi	r16, 0xFE	; 254
    2a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a70:	a4 01       	movw	r20, r8
    2a72:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__ultoa_invert>
    2a76:	a8 2e       	mov	r10, r24
    2a78:	a8 18       	sub	r10, r8
    2a7a:	fb 2d       	mov	r31, r11
    2a7c:	ff 77       	andi	r31, 0x7F	; 127
    2a7e:	bf 2e       	mov	r11, r31
    2a80:	b6 fe       	sbrs	r11, 6
    2a82:	0b c0       	rjmp	.+22     	; 0x2a9a <vfprintf+0x2aa>
    2a84:	2b 2d       	mov	r18, r11
    2a86:	2e 7f       	andi	r18, 0xFE	; 254
    2a88:	a5 14       	cp	r10, r5
    2a8a:	50 f4       	brcc	.+20     	; 0x2aa0 <vfprintf+0x2b0>
    2a8c:	b4 fe       	sbrs	r11, 4
    2a8e:	0a c0       	rjmp	.+20     	; 0x2aa4 <vfprintf+0x2b4>
    2a90:	b2 fc       	sbrc	r11, 2
    2a92:	08 c0       	rjmp	.+16     	; 0x2aa4 <vfprintf+0x2b4>
    2a94:	2b 2d       	mov	r18, r11
    2a96:	2e 7e       	andi	r18, 0xEE	; 238
    2a98:	05 c0       	rjmp	.+10     	; 0x2aa4 <vfprintf+0x2b4>
    2a9a:	7a 2c       	mov	r7, r10
    2a9c:	2b 2d       	mov	r18, r11
    2a9e:	03 c0       	rjmp	.+6      	; 0x2aa6 <vfprintf+0x2b6>
    2aa0:	7a 2c       	mov	r7, r10
    2aa2:	01 c0       	rjmp	.+2      	; 0x2aa6 <vfprintf+0x2b6>
    2aa4:	75 2c       	mov	r7, r5
    2aa6:	24 ff       	sbrs	r18, 4
    2aa8:	0d c0       	rjmp	.+26     	; 0x2ac4 <vfprintf+0x2d4>
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ea 0d       	add	r30, r10
    2aae:	f1 1d       	adc	r31, r1
    2ab0:	80 81       	ld	r24, Z
    2ab2:	80 33       	cpi	r24, 0x30	; 48
    2ab4:	11 f4       	brne	.+4      	; 0x2aba <vfprintf+0x2ca>
    2ab6:	29 7e       	andi	r18, 0xE9	; 233
    2ab8:	09 c0       	rjmp	.+18     	; 0x2acc <vfprintf+0x2dc>
    2aba:	22 ff       	sbrs	r18, 2
    2abc:	06 c0       	rjmp	.+12     	; 0x2aca <vfprintf+0x2da>
    2abe:	73 94       	inc	r7
    2ac0:	73 94       	inc	r7
    2ac2:	04 c0       	rjmp	.+8      	; 0x2acc <vfprintf+0x2dc>
    2ac4:	82 2f       	mov	r24, r18
    2ac6:	86 78       	andi	r24, 0x86	; 134
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <vfprintf+0x2dc>
    2aca:	73 94       	inc	r7
    2acc:	23 fd       	sbrc	r18, 3
    2ace:	13 c0       	rjmp	.+38     	; 0x2af6 <vfprintf+0x306>
    2ad0:	20 ff       	sbrs	r18, 0
    2ad2:	06 c0       	rjmp	.+12     	; 0x2ae0 <vfprintf+0x2f0>
    2ad4:	5a 2c       	mov	r5, r10
    2ad6:	73 14       	cp	r7, r3
    2ad8:	18 f4       	brcc	.+6      	; 0x2ae0 <vfprintf+0x2f0>
    2ada:	53 0c       	add	r5, r3
    2adc:	57 18       	sub	r5, r7
    2ade:	73 2c       	mov	r7, r3
    2ae0:	73 14       	cp	r7, r3
    2ae2:	68 f4       	brcc	.+26     	; 0x2afe <vfprintf+0x30e>
    2ae4:	b7 01       	movw	r22, r14
    2ae6:	80 e2       	ldi	r24, 0x20	; 32
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	2c 87       	std	Y+12, r18	; 0x0c
    2aec:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <fputc>
    2af0:	73 94       	inc	r7
    2af2:	2c 85       	ldd	r18, Y+12	; 0x0c
    2af4:	f5 cf       	rjmp	.-22     	; 0x2ae0 <vfprintf+0x2f0>
    2af6:	73 14       	cp	r7, r3
    2af8:	10 f4       	brcc	.+4      	; 0x2afe <vfprintf+0x30e>
    2afa:	37 18       	sub	r3, r7
    2afc:	01 c0       	rjmp	.+2      	; 0x2b00 <vfprintf+0x310>
    2afe:	31 2c       	mov	r3, r1
    2b00:	24 ff       	sbrs	r18, 4
    2b02:	12 c0       	rjmp	.+36     	; 0x2b28 <vfprintf+0x338>
    2b04:	b7 01       	movw	r22, r14
    2b06:	80 e3       	ldi	r24, 0x30	; 48
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	2c 87       	std	Y+12, r18	; 0x0c
    2b0c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <fputc>
    2b10:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b12:	22 ff       	sbrs	r18, 2
    2b14:	17 c0       	rjmp	.+46     	; 0x2b44 <vfprintf+0x354>
    2b16:	21 ff       	sbrs	r18, 1
    2b18:	03 c0       	rjmp	.+6      	; 0x2b20 <vfprintf+0x330>
    2b1a:	88 e5       	ldi	r24, 0x58	; 88
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <vfprintf+0x334>
    2b20:	88 e7       	ldi	r24, 0x78	; 120
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	b7 01       	movw	r22, r14
    2b26:	0c c0       	rjmp	.+24     	; 0x2b40 <vfprintf+0x350>
    2b28:	82 2f       	mov	r24, r18
    2b2a:	86 78       	andi	r24, 0x86	; 134
    2b2c:	59 f0       	breq	.+22     	; 0x2b44 <vfprintf+0x354>
    2b2e:	21 fd       	sbrc	r18, 1
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <vfprintf+0x346>
    2b32:	80 e2       	ldi	r24, 0x20	; 32
    2b34:	01 c0       	rjmp	.+2      	; 0x2b38 <vfprintf+0x348>
    2b36:	8b e2       	ldi	r24, 0x2B	; 43
    2b38:	27 fd       	sbrc	r18, 7
    2b3a:	8d e2       	ldi	r24, 0x2D	; 45
    2b3c:	b7 01       	movw	r22, r14
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <fputc>
    2b44:	a5 14       	cp	r10, r5
    2b46:	38 f4       	brcc	.+14     	; 0x2b56 <vfprintf+0x366>
    2b48:	b7 01       	movw	r22, r14
    2b4a:	80 e3       	ldi	r24, 0x30	; 48
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <fputc>
    2b52:	5a 94       	dec	r5
    2b54:	f7 cf       	rjmp	.-18     	; 0x2b44 <vfprintf+0x354>
    2b56:	aa 94       	dec	r10
    2b58:	f4 01       	movw	r30, r8
    2b5a:	ea 0d       	add	r30, r10
    2b5c:	f1 1d       	adc	r31, r1
    2b5e:	80 81       	ld	r24, Z
    2b60:	b7 01       	movw	r22, r14
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <fputc>
    2b68:	a1 10       	cpse	r10, r1
    2b6a:	f5 cf       	rjmp	.-22     	; 0x2b56 <vfprintf+0x366>
    2b6c:	33 20       	and	r3, r3
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <vfprintf+0x382>
    2b70:	51 ce       	rjmp	.-862    	; 0x2814 <vfprintf+0x24>
    2b72:	b7 01       	movw	r22, r14
    2b74:	80 e2       	ldi	r24, 0x20	; 32
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <fputc>
    2b7c:	3a 94       	dec	r3
    2b7e:	f6 cf       	rjmp	.-20     	; 0x2b6c <vfprintf+0x37c>
    2b80:	f7 01       	movw	r30, r14
    2b82:	86 81       	ldd	r24, Z+6	; 0x06
    2b84:	97 81       	ldd	r25, Z+7	; 0x07
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <vfprintf+0x39c>
    2b88:	8f ef       	ldi	r24, 0xFF	; 255
    2b8a:	9f ef       	ldi	r25, 0xFF	; 255
    2b8c:	2c 96       	adiw	r28, 0x0c	; 12
    2b8e:	e2 e1       	ldi	r30, 0x12	; 18
    2b90:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__epilogue_restores__>

00002b94 <__ctype_isfalse>:
    2b94:	99 27       	eor	r25, r25
    2b96:	88 27       	eor	r24, r24

00002b98 <__ctype_istrue>:
    2b98:	08 95       	ret

00002b9a <strnlen_P>:
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	05 90       	lpm	r0, Z+
    2b9e:	61 50       	subi	r22, 0x01	; 1
    2ba0:	70 40       	sbci	r23, 0x00	; 0
    2ba2:	01 10       	cpse	r0, r1
    2ba4:	d8 f7       	brcc	.-10     	; 0x2b9c <strnlen_P+0x2>
    2ba6:	80 95       	com	r24
    2ba8:	90 95       	com	r25
    2baa:	8e 0f       	add	r24, r30
    2bac:	9f 1f       	adc	r25, r31
    2bae:	08 95       	ret

00002bb0 <strnlen>:
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	61 50       	subi	r22, 0x01	; 1
    2bb4:	70 40       	sbci	r23, 0x00	; 0
    2bb6:	01 90       	ld	r0, Z+
    2bb8:	01 10       	cpse	r0, r1
    2bba:	d8 f7       	brcc	.-10     	; 0x2bb2 <strnlen+0x2>
    2bbc:	80 95       	com	r24
    2bbe:	90 95       	com	r25
    2bc0:	8e 0f       	add	r24, r30
    2bc2:	9f 1f       	adc	r25, r31
    2bc4:	08 95       	ret

00002bc6 <fputc>:
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	18 2f       	mov	r17, r24
    2bd0:	09 2f       	mov	r16, r25
    2bd2:	eb 01       	movw	r28, r22
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	81 fd       	sbrc	r24, 1
    2bd8:	03 c0       	rjmp	.+6      	; 0x2be0 <fputc+0x1a>
    2bda:	8f ef       	ldi	r24, 0xFF	; 255
    2bdc:	9f ef       	ldi	r25, 0xFF	; 255
    2bde:	20 c0       	rjmp	.+64     	; 0x2c20 <fputc+0x5a>
    2be0:	82 ff       	sbrs	r24, 2
    2be2:	10 c0       	rjmp	.+32     	; 0x2c04 <fputc+0x3e>
    2be4:	4e 81       	ldd	r20, Y+6	; 0x06
    2be6:	5f 81       	ldd	r21, Y+7	; 0x07
    2be8:	2c 81       	ldd	r18, Y+4	; 0x04
    2bea:	3d 81       	ldd	r19, Y+5	; 0x05
    2bec:	42 17       	cp	r20, r18
    2bee:	53 07       	cpc	r21, r19
    2bf0:	7c f4       	brge	.+30     	; 0x2c10 <fputc+0x4a>
    2bf2:	e8 81       	ld	r30, Y
    2bf4:	f9 81       	ldd	r31, Y+1	; 0x01
    2bf6:	9f 01       	movw	r18, r30
    2bf8:	2f 5f       	subi	r18, 0xFF	; 255
    2bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfc:	39 83       	std	Y+1, r19	; 0x01
    2bfe:	28 83       	st	Y, r18
    2c00:	10 83       	st	Z, r17
    2c02:	06 c0       	rjmp	.+12     	; 0x2c10 <fputc+0x4a>
    2c04:	e8 85       	ldd	r30, Y+8	; 0x08
    2c06:	f9 85       	ldd	r31, Y+9	; 0x09
    2c08:	81 2f       	mov	r24, r17
    2c0a:	09 95       	icall
    2c0c:	89 2b       	or	r24, r25
    2c0e:	29 f7       	brne	.-54     	; 0x2bda <fputc+0x14>
    2c10:	2e 81       	ldd	r18, Y+6	; 0x06
    2c12:	3f 81       	ldd	r19, Y+7	; 0x07
    2c14:	2f 5f       	subi	r18, 0xFF	; 255
    2c16:	3f 4f       	sbci	r19, 0xFF	; 255
    2c18:	3f 83       	std	Y+7, r19	; 0x07
    2c1a:	2e 83       	std	Y+6, r18	; 0x06
    2c1c:	81 2f       	mov	r24, r17
    2c1e:	90 2f       	mov	r25, r16
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	1f 91       	pop	r17
    2c26:	0f 91       	pop	r16
    2c28:	08 95       	ret

00002c2a <__ultoa_invert>:
    2c2a:	fa 01       	movw	r30, r20
    2c2c:	aa 27       	eor	r26, r26
    2c2e:	28 30       	cpi	r18, 0x08	; 8
    2c30:	51 f1       	breq	.+84     	; 0x2c86 <__ultoa_invert+0x5c>
    2c32:	20 31       	cpi	r18, 0x10	; 16
    2c34:	81 f1       	breq	.+96     	; 0x2c96 <__ultoa_invert+0x6c>
    2c36:	e8 94       	clt
    2c38:	6f 93       	push	r22
    2c3a:	6e 7f       	andi	r22, 0xFE	; 254
    2c3c:	6e 5f       	subi	r22, 0xFE	; 254
    2c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c40:	8f 4f       	sbci	r24, 0xFF	; 255
    2c42:	9f 4f       	sbci	r25, 0xFF	; 255
    2c44:	af 4f       	sbci	r26, 0xFF	; 255
    2c46:	b1 e0       	ldi	r27, 0x01	; 1
    2c48:	3e d0       	rcall	.+124    	; 0x2cc6 <__ultoa_invert+0x9c>
    2c4a:	b4 e0       	ldi	r27, 0x04	; 4
    2c4c:	3c d0       	rcall	.+120    	; 0x2cc6 <__ultoa_invert+0x9c>
    2c4e:	67 0f       	add	r22, r23
    2c50:	78 1f       	adc	r23, r24
    2c52:	89 1f       	adc	r24, r25
    2c54:	9a 1f       	adc	r25, r26
    2c56:	a1 1d       	adc	r26, r1
    2c58:	68 0f       	add	r22, r24
    2c5a:	79 1f       	adc	r23, r25
    2c5c:	8a 1f       	adc	r24, r26
    2c5e:	91 1d       	adc	r25, r1
    2c60:	a1 1d       	adc	r26, r1
    2c62:	6a 0f       	add	r22, r26
    2c64:	71 1d       	adc	r23, r1
    2c66:	81 1d       	adc	r24, r1
    2c68:	91 1d       	adc	r25, r1
    2c6a:	a1 1d       	adc	r26, r1
    2c6c:	20 d0       	rcall	.+64     	; 0x2cae <__ultoa_invert+0x84>
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <__ultoa_invert+0x48>
    2c70:	68 94       	set
    2c72:	3f 91       	pop	r19
    2c74:	2a e0       	ldi	r18, 0x0A	; 10
    2c76:	26 9f       	mul	r18, r22
    2c78:	11 24       	eor	r1, r1
    2c7a:	30 19       	sub	r19, r0
    2c7c:	30 5d       	subi	r19, 0xD0	; 208
    2c7e:	31 93       	st	Z+, r19
    2c80:	de f6       	brtc	.-74     	; 0x2c38 <__ultoa_invert+0xe>
    2c82:	cf 01       	movw	r24, r30
    2c84:	08 95       	ret
    2c86:	46 2f       	mov	r20, r22
    2c88:	47 70       	andi	r20, 0x07	; 7
    2c8a:	40 5d       	subi	r20, 0xD0	; 208
    2c8c:	41 93       	st	Z+, r20
    2c8e:	b3 e0       	ldi	r27, 0x03	; 3
    2c90:	0f d0       	rcall	.+30     	; 0x2cb0 <__ultoa_invert+0x86>
    2c92:	c9 f7       	brne	.-14     	; 0x2c86 <__ultoa_invert+0x5c>
    2c94:	f6 cf       	rjmp	.-20     	; 0x2c82 <__ultoa_invert+0x58>
    2c96:	46 2f       	mov	r20, r22
    2c98:	4f 70       	andi	r20, 0x0F	; 15
    2c9a:	40 5d       	subi	r20, 0xD0	; 208
    2c9c:	4a 33       	cpi	r20, 0x3A	; 58
    2c9e:	18 f0       	brcs	.+6      	; 0x2ca6 <__ultoa_invert+0x7c>
    2ca0:	49 5d       	subi	r20, 0xD9	; 217
    2ca2:	31 fd       	sbrc	r19, 1
    2ca4:	40 52       	subi	r20, 0x20	; 32
    2ca6:	41 93       	st	Z+, r20
    2ca8:	02 d0       	rcall	.+4      	; 0x2cae <__ultoa_invert+0x84>
    2caa:	a9 f7       	brne	.-22     	; 0x2c96 <__ultoa_invert+0x6c>
    2cac:	ea cf       	rjmp	.-44     	; 0x2c82 <__ultoa_invert+0x58>
    2cae:	b4 e0       	ldi	r27, 0x04	; 4
    2cb0:	a6 95       	lsr	r26
    2cb2:	97 95       	ror	r25
    2cb4:	87 95       	ror	r24
    2cb6:	77 95       	ror	r23
    2cb8:	67 95       	ror	r22
    2cba:	ba 95       	dec	r27
    2cbc:	c9 f7       	brne	.-14     	; 0x2cb0 <__ultoa_invert+0x86>
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	61 05       	cpc	r22, r1
    2cc2:	71 05       	cpc	r23, r1
    2cc4:	08 95       	ret
    2cc6:	9b 01       	movw	r18, r22
    2cc8:	ac 01       	movw	r20, r24
    2cca:	0a 2e       	mov	r0, r26
    2ccc:	06 94       	lsr	r0
    2cce:	57 95       	ror	r21
    2cd0:	47 95       	ror	r20
    2cd2:	37 95       	ror	r19
    2cd4:	27 95       	ror	r18
    2cd6:	ba 95       	dec	r27
    2cd8:	c9 f7       	brne	.-14     	; 0x2ccc <__ultoa_invert+0xa2>
    2cda:	62 0f       	add	r22, r18
    2cdc:	73 1f       	adc	r23, r19
    2cde:	84 1f       	adc	r24, r20
    2ce0:	95 1f       	adc	r25, r21
    2ce2:	a0 1d       	adc	r26, r0
    2ce4:	08 95       	ret

00002ce6 <__mulsi3>:
    2ce6:	db 01       	movw	r26, r22
    2ce8:	8f 93       	push	r24
    2cea:	9f 93       	push	r25
    2cec:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__muluhisi3>
    2cf0:	bf 91       	pop	r27
    2cf2:	af 91       	pop	r26
    2cf4:	a2 9f       	mul	r26, r18
    2cf6:	80 0d       	add	r24, r0
    2cf8:	91 1d       	adc	r25, r1
    2cfa:	a3 9f       	mul	r26, r19
    2cfc:	90 0d       	add	r25, r0
    2cfe:	b2 9f       	mul	r27, r18
    2d00:	90 0d       	add	r25, r0
    2d02:	11 24       	eor	r1, r1
    2d04:	08 95       	ret

00002d06 <__udivmodsi4>:
    2d06:	a1 e2       	ldi	r26, 0x21	; 33
    2d08:	1a 2e       	mov	r1, r26
    2d0a:	aa 1b       	sub	r26, r26
    2d0c:	bb 1b       	sub	r27, r27
    2d0e:	fd 01       	movw	r30, r26
    2d10:	0d c0       	rjmp	.+26     	; 0x2d2c <__udivmodsi4_ep>

00002d12 <__udivmodsi4_loop>:
    2d12:	aa 1f       	adc	r26, r26
    2d14:	bb 1f       	adc	r27, r27
    2d16:	ee 1f       	adc	r30, r30
    2d18:	ff 1f       	adc	r31, r31
    2d1a:	a2 17       	cp	r26, r18
    2d1c:	b3 07       	cpc	r27, r19
    2d1e:	e4 07       	cpc	r30, r20
    2d20:	f5 07       	cpc	r31, r21
    2d22:	20 f0       	brcs	.+8      	; 0x2d2c <__udivmodsi4_ep>
    2d24:	a2 1b       	sub	r26, r18
    2d26:	b3 0b       	sbc	r27, r19
    2d28:	e4 0b       	sbc	r30, r20
    2d2a:	f5 0b       	sbc	r31, r21

00002d2c <__udivmodsi4_ep>:
    2d2c:	66 1f       	adc	r22, r22
    2d2e:	77 1f       	adc	r23, r23
    2d30:	88 1f       	adc	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	1a 94       	dec	r1
    2d36:	69 f7       	brne	.-38     	; 0x2d12 <__udivmodsi4_loop>
    2d38:	60 95       	com	r22
    2d3a:	70 95       	com	r23
    2d3c:	80 95       	com	r24
    2d3e:	90 95       	com	r25
    2d40:	9b 01       	movw	r18, r22
    2d42:	ac 01       	movw	r20, r24
    2d44:	bd 01       	movw	r22, r26
    2d46:	cf 01       	movw	r24, r30
    2d48:	08 95       	ret

00002d4a <__divmodsi4>:
    2d4a:	05 2e       	mov	r0, r21
    2d4c:	97 fb       	bst	r25, 7
    2d4e:	1e f4       	brtc	.+6      	; 0x2d56 <__divmodsi4+0xc>
    2d50:	00 94       	com	r0
    2d52:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <__negsi2>
    2d56:	57 fd       	sbrc	r21, 7
    2d58:	07 d0       	rcall	.+14     	; 0x2d68 <__divmodsi4_neg2>
    2d5a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__udivmodsi4>
    2d5e:	07 fc       	sbrc	r0, 7
    2d60:	03 d0       	rcall	.+6      	; 0x2d68 <__divmodsi4_neg2>
    2d62:	4e f4       	brtc	.+18     	; 0x2d76 <__divmodsi4_exit>
    2d64:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <__negsi2>

00002d68 <__divmodsi4_neg2>:
    2d68:	50 95       	com	r21
    2d6a:	40 95       	com	r20
    2d6c:	30 95       	com	r19
    2d6e:	21 95       	neg	r18
    2d70:	3f 4f       	sbci	r19, 0xFF	; 255
    2d72:	4f 4f       	sbci	r20, 0xFF	; 255
    2d74:	5f 4f       	sbci	r21, 0xFF	; 255

00002d76 <__divmodsi4_exit>:
    2d76:	08 95       	ret

00002d78 <__negsi2>:
    2d78:	90 95       	com	r25
    2d7a:	80 95       	com	r24
    2d7c:	70 95       	com	r23
    2d7e:	61 95       	neg	r22
    2d80:	7f 4f       	sbci	r23, 0xFF	; 255
    2d82:	8f 4f       	sbci	r24, 0xFF	; 255
    2d84:	9f 4f       	sbci	r25, 0xFF	; 255
    2d86:	08 95       	ret

00002d88 <__muluhisi3>:
    2d88:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__umulhisi3>
    2d8c:	a5 9f       	mul	r26, r21
    2d8e:	90 0d       	add	r25, r0
    2d90:	b4 9f       	mul	r27, r20
    2d92:	90 0d       	add	r25, r0
    2d94:	a4 9f       	mul	r26, r20
    2d96:	80 0d       	add	r24, r0
    2d98:	91 1d       	adc	r25, r1
    2d9a:	11 24       	eor	r1, r1
    2d9c:	08 95       	ret

00002d9e <__mulshisi3>:
    2d9e:	b7 ff       	sbrs	r27, 7
    2da0:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__muluhisi3>

00002da4 <__mulohisi3>:
    2da4:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__muluhisi3>
    2da8:	82 1b       	sub	r24, r18
    2daa:	93 0b       	sbc	r25, r19
    2dac:	08 95       	ret

00002dae <__prologue_saves__>:
    2dae:	2f 92       	push	r2
    2db0:	3f 92       	push	r3
    2db2:	4f 92       	push	r4
    2db4:	5f 92       	push	r5
    2db6:	6f 92       	push	r6
    2db8:	7f 92       	push	r7
    2dba:	8f 92       	push	r8
    2dbc:	9f 92       	push	r9
    2dbe:	af 92       	push	r10
    2dc0:	bf 92       	push	r11
    2dc2:	cf 92       	push	r12
    2dc4:	df 92       	push	r13
    2dc6:	ef 92       	push	r14
    2dc8:	ff 92       	push	r15
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	ca 1b       	sub	r28, r26
    2dd8:	db 0b       	sbc	r29, r27
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	09 94       	ijmp

00002de6 <__epilogue_restores__>:
    2de6:	2a 88       	ldd	r2, Y+18	; 0x12
    2de8:	39 88       	ldd	r3, Y+17	; 0x11
    2dea:	48 88       	ldd	r4, Y+16	; 0x10
    2dec:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dee:	6e 84       	ldd	r6, Y+14	; 0x0e
    2df0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2df2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2df4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2df6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2df8:	b9 84       	ldd	r11, Y+9	; 0x09
    2dfa:	c8 84       	ldd	r12, Y+8	; 0x08
    2dfc:	df 80       	ldd	r13, Y+7	; 0x07
    2dfe:	ee 80       	ldd	r14, Y+6	; 0x06
    2e00:	fd 80       	ldd	r15, Y+5	; 0x05
    2e02:	0c 81       	ldd	r16, Y+4	; 0x04
    2e04:	1b 81       	ldd	r17, Y+3	; 0x03
    2e06:	aa 81       	ldd	r26, Y+2	; 0x02
    2e08:	b9 81       	ldd	r27, Y+1	; 0x01
    2e0a:	ce 0f       	add	r28, r30
    2e0c:	d1 1d       	adc	r29, r1
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	ed 01       	movw	r28, r26
    2e1a:	08 95       	ret

00002e1c <__umulhisi3>:
    2e1c:	a2 9f       	mul	r26, r18
    2e1e:	b0 01       	movw	r22, r0
    2e20:	b3 9f       	mul	r27, r19
    2e22:	c0 01       	movw	r24, r0
    2e24:	a3 9f       	mul	r26, r19
    2e26:	70 0d       	add	r23, r0
    2e28:	81 1d       	adc	r24, r1
    2e2a:	11 24       	eor	r1, r1
    2e2c:	91 1d       	adc	r25, r1
    2e2e:	b2 9f       	mul	r27, r18
    2e30:	70 0d       	add	r23, r0
    2e32:	81 1d       	adc	r24, r1
    2e34:	11 24       	eor	r1, r1
    2e36:	91 1d       	adc	r25, r1
    2e38:	08 95       	ret

00002e3a <_exit>:
    2e3a:	f8 94       	cli

00002e3c <__stop_program>:
    2e3c:	ff cf       	rjmp	.-2      	; 0x2e3c <__stop_program>
