
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031a0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  000031a0  00003254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000da  008000da  000032ce  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000032ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  0000332c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e2f  00000000  00000000  000035ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa6  00000000  00000000  000093db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d85  00000000  00000000  0000a381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b6c  00000000  00000000  0000b108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab8  00000000  00000000  0000bc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035f1  00000000  00000000  0000c72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000fd1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      54:	39 0c       	add	r3, r9
      56:	54 0c       	add	r5, r4
      58:	7c 0d       	add	r23, r12
      5a:	7c 0d       	add	r23, r12
      5c:	7c 0d       	add	r23, r12
      5e:	7c 0d       	add	r23, r12
      60:	7c 0d       	add	r23, r12
      62:	7c 0d       	add	r23, r12
      64:	7c 0d       	add	r23, r12
      66:	5a 0c       	add	r5, r10
      68:	7c 0d       	add	r23, r12
      6a:	7c 0d       	add	r23, r12
      6c:	7c 0d       	add	r23, r12
      6e:	60 0c       	add	r6, r0
      70:	68 0c       	add	r6, r8
      72:	70 0c       	add	r7, r0
      74:	97 0c       	add	r9, r7
      76:	be 0c       	add	r11, r14
      78:	e5 0c       	add	r14, r5
      7a:	0c 0d       	add	r16, r12
      7c:	33 0d       	add	r19, r3
      7e:	5a 0d       	add	r21, r10
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfa>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef510>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x84>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d4>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef744>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b6>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f0>
      d4:	3f 05       	cpc	r19, r15
      d6:	a8 4c       	sbci	r26, 0xC8	; 200
      d8:	cd b2       	in	r12, 0x1d	; 29
      da:	d4 4e       	sbci	r29, 0xE4	; 228
      dc:	b9 38       	cpi	r27, 0x89	; 137
      de:	36 a9       	ldd	r19, Z+54	; 0x36
      e0:	02 0c       	add	r0, r2
      e2:	50 b9       	out	0x00, r21	; 0
      e4:	91 86       	std	Z+9, r9	; 0x09
      e6:	88 08       	sbc	r8, r8
      e8:	3c a6       	std	Y+44, r3	; 0x2c
      ea:	aa aa       	std	Y+50, r10	; 0x32
      ec:	2a be       	out	0x3a, r2	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 00       	.word	0x003f	; ????

000000f4 <__ctors_start>:
      f4:	6a 0a       	sbc	r6, r26

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf e5       	ldi	r28, 0x5F	; 95
      fc:	d4 e0       	ldi	r29, 0x04	; 4
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	10 e0       	ldi	r17, 0x00	; 0
     104:	a0 e6       	ldi	r26, 0x60	; 96
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e0 ea       	ldi	r30, 0xA0	; 160
     10a:	f1 e3       	ldi	r31, 0x31	; 49
     10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
     10e:	05 90       	lpm	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	aa 3d       	cpi	r26, 0xDA	; 218
     114:	b1 07       	cpc	r27, r17
     116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>

00000118 <__do_clear_bss>:
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	aa ed       	ldi	r26, 0xDA	; 218
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
     120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
     122:	a2 3e       	cpi	r26, 0xE2	; 226
     124:	b2 07       	cpc	r27, r18
     126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>

00000128 <__do_global_ctors>:
     128:	10 e0       	ldi	r17, 0x00	; 0
     12a:	c6 ef       	ldi	r28, 0xF6	; 246
     12c:	d0 e0       	ldi	r29, 0x00	; 0
     12e:	04 c0       	rjmp	.+8      	; 0x138 <__do_global_ctors+0x10>
     130:	22 97       	sbiw	r28, 0x02	; 2
     132:	fe 01       	movw	r30, r28
     134:	0e 94 86 12 	call	0x250c	; 0x250c <__tablejump__>
     138:	c4 3f       	cpi	r28, 0xF4	; 244
     13a:	d1 07       	cpc	r29, r17
     13c:	c9 f7       	brne	.-14     	; 0x130 <__do_global_ctors+0x8>
     13e:	0e 94 6f 0a 	call	0x14de	; 0x14de <main>
     142:	0c 94 ce 18 	jmp	0x319c	; 0x319c <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	fc 01       	movw	r30, r24
     150:	40 83       	st	Z, r20
     152:	51 83       	std	Z+1, r21	; 0x01
     154:	62 83       	std	Z+2, r22	; 0x02
     156:	73 83       	std	Z+3, r23	; 0x03
     158:	04 83       	std	Z+4, r16	; 0x04
     15a:	15 83       	std	Z+5, r17	; 0x05
     15c:	26 83       	std	Z+6, r18	; 0x06
     15e:	37 83       	std	Z+7, r19	; 0x07
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	08 95       	ret

00000166 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     166:	fc 01       	movw	r30, r24
     168:	10 82       	st	Z, r1
     16a:	11 82       	std	Z+1, r1	; 0x01
     16c:	12 82       	std	Z+2, r1	; 0x02
     16e:	13 82       	std	Z+3, r1	; 0x03
     170:	14 82       	std	Z+4, r1	; 0x04
     172:	15 82       	std	Z+5, r1	; 0x05
     174:	16 82       	std	Z+6, r1	; 0x06
     176:	17 82       	std	Z+7, r1	; 0x07
     178:	08 95       	ret

0000017a <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	68 97       	sbiw	r28, 0x18	; 24
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	5c 01       	movw	r10, r24
     1a0:	09 8b       	std	Y+17, r16	; 0x11
     1a2:	1a 8b       	std	Y+18, r17	; 0x12
     1a4:	2b 8b       	std	Y+19, r18	; 0x13
     1a6:	3c 8b       	std	Y+20, r19	; 0x14
     1a8:	4d 8b       	std	Y+21, r20	; 0x15
     1aa:	5e 8b       	std	Y+22, r21	; 0x16
     1ac:	6f 8b       	std	Y+23, r22	; 0x17
     1ae:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     1b0:	2d 89       	ldd	r18, Y+21	; 0x15
     1b2:	3e 89       	ldd	r19, Y+22	; 0x16
     1b4:	4f 89       	ldd	r20, Y+23	; 0x17
     1b6:	58 8d       	ldd	r21, Y+24	; 0x18
     1b8:	fc 01       	movw	r30, r24
     1ba:	64 81       	ldd	r22, Z+4	; 0x04
     1bc:	75 81       	ldd	r23, Z+5	; 0x05
     1be:	86 81       	ldd	r24, Z+6	; 0x06
     1c0:	97 81       	ldd	r25, Z+7	; 0x07
     1c2:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__addsf3>
     1c6:	6b 01       	movw	r12, r22
     1c8:	7c 01       	movw	r14, r24
     1ca:	29 89       	ldd	r18, Y+17	; 0x11
     1cc:	3a 89       	ldd	r19, Y+18	; 0x12
     1ce:	4b 89       	ldd	r20, Y+19	; 0x13
     1d0:	5c 89       	ldd	r21, Y+20	; 0x14
     1d2:	f5 01       	movw	r30, r10
     1d4:	60 81       	ld	r22, Z
     1d6:	71 81       	ldd	r23, Z+1	; 0x01
     1d8:	82 81       	ldd	r24, Z+2	; 0x02
     1da:	93 81       	ldd	r25, Z+3	; 0x03
     1dc:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__addsf3>
     1e0:	ab 01       	movw	r20, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	97 01       	movw	r18, r14
     1e6:	86 01       	movw	r16, r12
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     1f0:	88 e0       	ldi	r24, 0x08	; 8
     1f2:	fe 01       	movw	r30, r28
     1f4:	31 96       	adiw	r30, 0x01	; 1
     1f6:	de 01       	movw	r26, r28
     1f8:	19 96       	adiw	r26, 0x09	; 9
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	8a 95       	dec	r24
     200:	e1 f7       	brne	.-8      	; 0x1fa <_ZN7Complex3addES_+0x80>
     202:	29 85       	ldd	r18, Y+9	; 0x09
     204:	3a 85       	ldd	r19, Y+10	; 0x0a
     206:	4b 85       	ldd	r20, Y+11	; 0x0b
     208:	5c 85       	ldd	r21, Y+12	; 0x0c
     20a:	6d 85       	ldd	r22, Y+13	; 0x0d
     20c:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     20e:	8f 85       	ldd	r24, Y+15	; 0x0f
     210:	98 89       	ldd	r25, Y+16	; 0x10
     212:	68 96       	adiw	r28, 0x18	; 24
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	08 95       	ret

00000234 <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     234:	4f 92       	push	r4
     236:	5f 92       	push	r5
     238:	6f 92       	push	r6
     23a:	7f 92       	push	r7
     23c:	8f 92       	push	r8
     23e:	9f 92       	push	r9
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	a0 97       	sbiw	r28, 0x20	; 32
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	09 8b       	std	Y+17, r16	; 0x11
     266:	1a 8b       	std	Y+18, r17	; 0x12
     268:	2b 8b       	std	Y+19, r18	; 0x13
     26a:	3c 8b       	std	Y+20, r19	; 0x14
     26c:	4d 8b       	std	Y+21, r20	; 0x15
     26e:	5e 8b       	std	Y+22, r21	; 0x16
     270:	6f 8b       	std	Y+23, r22	; 0x17
     272:	78 8f       	std	Y+24, r23	; 0x18
     274:	89 88       	ldd	r8, Y+17	; 0x11
     276:	9a 88       	ldd	r9, Y+18	; 0x12
     278:	ab 88       	ldd	r10, Y+19	; 0x13
     27a:	bc 88       	ldd	r11, Y+20	; 0x14
     27c:	2d 89       	ldd	r18, Y+21	; 0x15
     27e:	3e 89       	ldd	r19, Y+22	; 0x16
     280:	4f 89       	ldd	r20, Y+23	; 0x17
     282:	58 8d       	ldd	r21, Y+24	; 0x18
     284:	2d 8f       	std	Y+29, r18	; 0x1d
     286:	3e 8f       	std	Y+30, r19	; 0x1e
     288:	4f 8f       	std	Y+31, r20	; 0x1f
     28a:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     28c:	fc 01       	movw	r30, r24
     28e:	c0 80       	ld	r12, Z
     290:	d1 80       	ldd	r13, Z+1	; 0x01
     292:	e2 80       	ldd	r14, Z+2	; 0x02
     294:	f3 80       	ldd	r15, Z+3	; 0x03
     296:	24 81       	ldd	r18, Z+4	; 0x04
     298:	35 81       	ldd	r19, Z+5	; 0x05
     29a:	46 81       	ldd	r20, Z+6	; 0x06
     29c:	57 81       	ldd	r21, Z+7	; 0x07
     29e:	29 8f       	std	Y+25, r18	; 0x19
     2a0:	3a 8f       	std	Y+26, r19	; 0x1a
     2a2:	4b 8f       	std	Y+27, r20	; 0x1b
     2a4:	5c 8f       	std	Y+28, r21	; 0x1c
     2a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2aa:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2ac:	58 a1       	ldd	r21, Y+32	; 0x20
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     2b6:	2b 01       	movw	r4, r22
     2b8:	3c 01       	movw	r6, r24
     2ba:	a5 01       	movw	r20, r10
     2bc:	94 01       	movw	r18, r8
     2be:	69 8d       	ldd	r22, Y+25	; 0x19
     2c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2c6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     2ca:	9b 01       	movw	r18, r22
     2cc:	ac 01       	movw	r20, r24
     2ce:	c3 01       	movw	r24, r6
     2d0:	b2 01       	movw	r22, r4
     2d2:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__addsf3>
     2d6:	2b 01       	movw	r4, r22
     2d8:	3c 01       	movw	r6, r24
     2da:	a5 01       	movw	r20, r10
     2dc:	94 01       	movw	r18, r8
     2de:	c7 01       	movw	r24, r14
     2e0:	b6 01       	movw	r22, r12
     2e2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     2e6:	6b 01       	movw	r12, r22
     2e8:	7c 01       	movw	r14, r24
     2ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2ee:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2f0:	58 a1       	ldd	r21, Y+32	; 0x20
     2f2:	69 8d       	ldd	r22, Y+25	; 0x19
     2f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2fa:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	c7 01       	movw	r24, r14
     304:	b6 01       	movw	r22, r12
     306:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <__subsf3>
     30a:	ab 01       	movw	r20, r22
     30c:	bc 01       	movw	r22, r24
     30e:	93 01       	movw	r18, r6
     310:	82 01       	movw	r16, r4
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	de 01       	movw	r26, r28
     322:	19 96       	adiw	r26, 0x09	; 9
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <_ZN7Complex3mulES_+0xf0>
     32c:	29 85       	ldd	r18, Y+9	; 0x09
     32e:	3a 85       	ldd	r19, Y+10	; 0x0a
     330:	4b 85       	ldd	r20, Y+11	; 0x0b
     332:	5c 85       	ldd	r21, Y+12	; 0x0c
     334:	6d 85       	ldd	r22, Y+13	; 0x0d
     336:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     338:	8f 85       	ldd	r24, Y+15	; 0x0f
     33a:	98 89       	ldd	r25, Y+16	; 0x10
     33c:	a0 96       	adiw	r28, 0x20	; 32
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	08 95       	ret

0000036a <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     36a:	fc 01       	movw	r30, r24
     36c:	20 81       	ld	r18, Z
     36e:	31 81       	ldd	r19, Z+1	; 0x01
     370:	42 81       	ldd	r20, Z+2	; 0x02
     372:	53 81       	ldd	r21, Z+3	; 0x03
     374:	64 81       	ldd	r22, Z+4	; 0x04
     376:	75 81       	ldd	r23, Z+5	; 0x05
     378:	86 81       	ldd	r24, Z+6	; 0x06
     37a:	97 81       	ldd	r25, Z+7	; 0x07
     37c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divsf3>
     380:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <atan>
     384:	08 95       	ret

00000386 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     386:	85 e0       	ldi	r24, 0x05	; 5
     388:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     38a:	81 b1       	in	r24, 0x01	; 1
     38c:	8c 7f       	andi	r24, 0xFC	; 252
     38e:	81 b9       	out	0x01, r24	; 1
     390:	08 95       	ret

00000392 <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     392:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     394:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     396:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     398:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     39a:	06 b6       	in	r0, 0x36	; 54
     39c:	07 fe       	sbrs	r0, 7
     39e:	fd cf       	rjmp	.-6      	; 0x39a <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     3a0:	81 b1       	in	r24, 0x01	; 1
     3a2:	88 7f       	andi	r24, 0xF8	; 248
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	09 f0       	breq	.+2      	; 0x3aa <_ZN6EEProm4readEj+0x18>
     3a8:	41 c0       	rjmp	.+130    	; 0x42c <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     3aa:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     3ac:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     3ae:	06 b6       	in	r0, 0x36	; 54
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     3b4:	81 b1       	in	r24, 0x01	; 1
     3b6:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     3b8:	88 31       	cpi	r24, 0x18	; 24
     3ba:	71 f7       	brne	.-36     	; 0x398 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     3bc:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3be:	84 e8       	ldi	r24, 0x84	; 132
     3c0:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3c2:	06 b6       	in	r0, 0x36	; 54
     3c4:	07 fe       	sbrs	r0, 7
     3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3c8:	81 b1       	in	r24, 0x01	; 1
     3ca:	88 7f       	andi	r24, 0xF8	; 248
     3cc:	88 32       	cpi	r24, 0x28	; 40
     3ce:	81 f5       	brne	.+96     	; 0x430 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     3d0:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3d2:	84 e8       	ldi	r24, 0x84	; 132
     3d4:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3d6:	06 b6       	in	r0, 0x36	; 54
     3d8:	07 fe       	sbrs	r0, 7
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3dc:	81 b1       	in	r24, 0x01	; 1
     3de:	88 7f       	andi	r24, 0xF8	; 248
     3e0:	88 32       	cpi	r24, 0x28	; 40
     3e2:	41 f5       	brne	.+80     	; 0x434 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3e4:	84 ea       	ldi	r24, 0xA4	; 164
     3e6:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3e8:	06 b6       	in	r0, 0x36	; 54
     3ea:	07 fe       	sbrs	r0, 7
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     3ee:	81 b1       	in	r24, 0x01	; 1
     3f0:	88 7f       	andi	r24, 0xF8	; 248
     3f2:	80 31       	cpi	r24, 0x10	; 16
     3f4:	09 f5       	brne	.+66     	; 0x438 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     3f6:	81 ea       	ldi	r24, 0xA1	; 161
     3f8:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3fa:	84 e8       	ldi	r24, 0x84	; 132
     3fc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3fe:	06 b6       	in	r0, 0x36	; 54
     400:	07 fe       	sbrs	r0, 7
     402:	fd cf       	rjmp	.-6      	; 0x3fe <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     404:	81 b1       	in	r24, 0x01	; 1
     406:	88 7f       	andi	r24, 0xF8	; 248
     408:	80 34       	cpi	r24, 0x40	; 64
     40a:	c1 f4       	brne	.+48     	; 0x43c <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     40c:	84 e8       	ldi	r24, 0x84	; 132
     40e:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     410:	06 b6       	in	r0, 0x36	; 54
     412:	07 fe       	sbrs	r0, 7
     414:	fd cf       	rjmp	.-6      	; 0x410 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     416:	81 b1       	in	r24, 0x01	; 1
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	88 35       	cpi	r24, 0x58	; 88
     41c:	89 f4       	brne	.+34     	; 0x440 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     41e:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     420:	94 e9       	ldi	r25, 0x94	; 148
     422:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     424:	06 b6       	in	r0, 0x36	; 54
     426:	04 fc       	sbrc	r0, 4
     428:	fd cf       	rjmp	.-6      	; 0x424 <_ZN6EEProm4readEj+0x92>
     42a:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     440:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     442:	08 95       	ret

00000444 <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	c4 56       	subi	r28, 0x64	; 100
     45a:	d1 09       	sbc	r29, r1
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	6c 01       	movw	r12, r24
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     472:	b8 01       	movw	r22, r16
     474:	c6 01       	movw	r24, r12
     476:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN6EEProm4readEj>
     47a:	f7 01       	movw	r30, r14
     47c:	81 93       	st	Z+, r24
     47e:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     480:	8f 3f       	cpi	r24, 0xFF	; 255
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	32 97       	sbiw	r30, 0x02	; 2
     486:	20 81       	ld	r18, Z
     488:	2f 3f       	cpi	r18, 0xFF	; 255
     48a:	61 f4       	brne	.+24     	; 0x4a4 <__stack+0x45>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	20 81       	ld	r18, Z
     490:	2f 3f       	cpi	r18, 0xFF	; 255
     492:	41 f4       	brne	.+16     	; 0x4a4 <__stack+0x45>
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	20 81       	ld	r18, Z
     498:	2f 3f       	cpi	r18, 0xFF	; 255
     49a:	21 f4       	brne	.+8      	; 0x4a4 <__stack+0x45>
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	8f 3f       	cpi	r24, 0xFF	; 255
     4a2:	19 f0       	breq	.+6      	; 0x4aa <__stack+0x4b>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4a4:	0f 5f       	subi	r16, 0xFF	; 255
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     4a8:	e4 cf       	rjmp	.-56     	; 0x472 <__stack+0x13>
	return eeprom_mem;
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	cc 59       	subi	r28, 0x9C	; 156
     4b0:	df 4f       	sbci	r29, 0xFF	; 255
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret

000004ce <_Z12print_statesiP7ComplexPc>:

Serial s;
QEPU::Utils u;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	7c 01       	movw	r14, r24
     4dc:	06 2f       	mov	r16, r22
     4de:	17 2f       	mov	r17, r23
	s.writestrln(message);
     4e0:	ba 01       	movw	r22, r20
     4e2:	8b ed       	ldi	r24, 0xDB	; 219
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<qb_count;i++){
     4ea:	1e 14       	cp	r1, r14
     4ec:	1f 04       	cpc	r1, r15
     4ee:	0c f0       	brlt	.+2      	; 0x4f2 <_Z12print_statesiP7ComplexPc+0x24>
     4f0:	47 c0       	rjmp	.+142    	; 0x580 <_Z12print_statesiP7ComplexPc+0xb2>
     4f2:	c0 2f       	mov	r28, r16
     4f4:	d1 2f       	mov	r29, r17
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
     4fa:	6a e6       	ldi	r22, 0x6A	; 106
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	8b ed       	ldi	r24, 0xDB	; 219
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	4a e7       	ldi	r20, 0x7A	; 122
     50c:	54 e4       	ldi	r21, 0x44	; 68
     50e:	68 81       	ld	r22, Y
     510:	79 81       	ldd	r23, Y+1	; 0x01
     512:	8a 81       	ldd	r24, Y+2	; 0x02
     514:	9b 81       	ldd	r25, Y+3	; 0x03
     516:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     51a:	0e 94 35 10 	call	0x206a	; 0x206a <__fixsfsi>
     51e:	8a ed       	ldi	r24, 0xDA	; 218
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN4QEPU5Utils7int2strEi>
     526:	bc 01       	movw	r22, r24
     528:	8b ed       	ldi	r24, 0xDB	; 219
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
     530:	6e e6       	ldi	r22, 0x6E	; 110
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	8b ed       	ldi	r24, 0xDB	; 219
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	4a e7       	ldi	r20, 0x7A	; 122
     542:	54 e4       	ldi	r21, 0x44	; 68
     544:	6c 81       	ldd	r22, Y+4	; 0x04
     546:	7d 81       	ldd	r23, Y+5	; 0x05
     548:	8e 81       	ldd	r24, Y+6	; 0x06
     54a:	9f 81       	ldd	r25, Y+7	; 0x07
     54c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     550:	0e 94 35 10 	call	0x206a	; 0x206a <__fixsfsi>
     554:	8a ed       	ldi	r24, 0xDA	; 218
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN4QEPU5Utils7int2strEi>
     55c:	bc 01       	movw	r22, r24
     55e:	8b ed       	ldi	r24, 0xDB	; 219
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
		s.writestrln("");
     566:	6a ec       	ldi	r22, 0xCA	; 202
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	8b ed       	ldi	r24, 0xDB	; 219
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_ZN6Serial10writestrlnEPc>
QEPU::Utils u;
uint16_t EEMEM randinit;

void print_states(int qb_count,Complex * vec,char* message){
	s.writestrln(message);
	for(int i=0;i<qb_count;i++){
     572:	0f 5f       	subi	r16, 0xFF	; 255
     574:	1f 4f       	sbci	r17, 0xFF	; 255
     576:	28 96       	adiw	r28, 0x08	; 8
     578:	0e 15       	cp	r16, r14
     57a:	1f 05       	cpc	r17, r15
     57c:	09 f0       	breq	.+2      	; 0x580 <_Z12print_statesiP7ComplexPc+0xb2>
     57e:	bd cf       	rjmp	.-134    	; 0x4fa <_Z12print_statesiP7ComplexPc+0x2c>
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
		s.writestrln("");
	}
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	08 95       	ret

0000058e <_ZN5Gates10setup_seedEv>:

void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__eerd_word_m16>
     596:	0e 94 18 14 	call	0x2830	; 0x2830 <srand>
	eeprom_write_word(&randinit,rand()%10000);
     59a:	0e 94 13 14 	call	0x2826	; 0x2826 <rand>
     59e:	60 e1       	ldi	r22, 0x10	; 16
     5a0:	77 e2       	ldi	r23, 0x27	; 39
     5a2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__divmodhi4>
     5a6:	bc 01       	movw	r22, r24
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__eewr_word_m16>
     5b0:	08 95       	ret

000005b2 <_ZN5GatesC1Ev>:
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}
     5b2:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN5Gates10setup_seedEv>
     5b6:	08 95       	ret

000005b8 <_ZN5Gates5touchEd>:
void Gates::setup_seed(){
	srand(eeprom_read_word(&randinit));
	eeprom_write_word(&randinit,rand()%10000);
}

int Gates::touch(double probability){
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	6a 01       	movw	r12, r20
     5c6:	7b 01       	movw	r14, r22
	return RAND_MAX*probability>=rand();
     5c8:	0e 94 13 14 	call	0x2826	; 0x2826 <rand>
     5cc:	ec 01       	movw	r28, r24
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	3e ef       	ldi	r19, 0xFE	; 254
     5d2:	4f ef       	ldi	r20, 0xFF	; 255
     5d4:	56 e4       	ldi	r21, 0x46	; 70
     5d6:	c7 01       	movw	r24, r14
     5d8:	b6 01       	movw	r22, r12
     5da:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     5de:	6b 01       	movw	r12, r22
     5e0:	7c 01       	movw	r14, r24
     5e2:	be 01       	movw	r22, r28
     5e4:	88 27       	eor	r24, r24
     5e6:	77 fd       	sbrc	r23, 7
     5e8:	80 95       	com	r24
     5ea:	98 2f       	mov	r25, r24
     5ec:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     5f0:	9b 01       	movw	r18, r22
     5f2:	ac 01       	movw	r20, r24
     5f4:	c1 e0       	ldi	r28, 0x01	; 1
     5f6:	d0 e0       	ldi	r29, 0x00	; 0
     5f8:	c7 01       	movw	r24, r14
     5fa:	b6 01       	movw	r22, r12
     5fc:	0e 94 6d 11 	call	0x22da	; 0x22da <__gesf2>
     600:	88 23       	and	r24, r24
     602:	14 f4       	brge	.+4      	; 0x608 <_ZN5Gates5touchEd+0x50>
     604:	c0 e0       	ldi	r28, 0x00	; 0
     606:	d0 e0       	ldi	r29, 0x00	; 0
}
     608:	ce 01       	movw	r24, r28
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	df 90       	pop	r13
     614:	cf 90       	pop	r12
     616:	08 95       	ret

00000618 <_ZN5Gates9kroneckerEP7Complexii>:
Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	s.writestr("REVERSING KRON");
	return kron;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
     618:	2f 92       	push	r2
     61a:	3f 92       	push	r3
     61c:	4f 92       	push	r4
     61e:	5f 92       	push	r5
     620:	6f 92       	push	r6
     622:	7f 92       	push	r7
     624:	8f 92       	push	r8
     626:	9f 92       	push	r9
     628:	af 92       	push	r10
     62a:	bf 92       	push	r11
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	28 97       	sbiw	r28, 0x08	; 8
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	7c 01       	movw	r14, r24
     64e:	5b 01       	movw	r10, r22
     650:	4a 01       	movw	r8, r20
     652:	3e 83       	std	Y+6, r19	; 0x06
     654:	2d 83       	std	Y+5, r18	; 0x05
	if(qb_count==1) return vec;
     656:	41 30       	cpi	r20, 0x01	; 1
     658:	51 05       	cpc	r21, r1
     65a:	09 f4       	brne	.+2      	; 0x65e <_ZN5Gates9kroneckerEP7Complexii+0x46>
     65c:	b8 c0       	rjmp	.+368    	; 0x7ce <_ZN5Gates9kroneckerEP7Complexii+0x1b6>
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     65e:	14 16       	cp	r1, r20
     660:	15 06       	cpc	r1, r21
     662:	0c f0       	brlt	.+2      	; 0x666 <_ZN5Gates9kroneckerEP7Complexii+0x4e>
     664:	b7 c0       	rjmp	.+366    	; 0x7d4 <_ZN5Gates9kroneckerEP7Complexii+0x1bc>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	01 e0       	ldi	r16, 0x01	; 1
     66c:	10 e0       	ldi	r17, 0x00	; 0
     66e:	00 0f       	add	r16, r16
     670:	11 1f       	adc	r17, r17
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	88 15       	cp	r24, r8
     676:	99 05       	cpc	r25, r9
     678:	d1 f7       	brne	.-12     	; 0x66e <_ZN5Gates9kroneckerEP7Complexii+0x56>
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     67a:	c8 01       	movw	r24, r16
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	9a 83       	std	Y+2, r25	; 0x02
	print_states(2*2,vec,"Before: ");
     690:	44 e8       	ldi	r20, 0x84	; 132
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	b5 01       	movw	r22, r10
     696:	84 e0       	ldi	r24, 0x04	; 4
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>
	*/
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     69e:	10 16       	cp	r1, r16
     6a0:	11 06       	cpc	r1, r17
     6a2:	0c f4       	brge	.+2      	; 0x6a6 <_ZN5Gates9kroneckerEP7Complexii+0x8e>
     6a4:	a6 c0       	rjmp	.+332    	; 0x7f2 <_ZN5Gates9kroneckerEP7Complexii+0x1da>
     6a6:	40 c0       	rjmp	.+128    	; 0x728 <_ZN5Gates9kroneckerEP7Complexii+0x110>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     6a8:	2e 16       	cp	r2, r30
     6aa:	3f 06       	cpc	r3, r31
     6ac:	29 f4       	brne	.+10     	; 0x6b8 <_ZN5Gates9kroneckerEP7Complexii+0xa0>
     6ae:	9f ef       	ldi	r25, 0xFF	; 255
     6b0:	49 1a       	sub	r4, r25
     6b2:	59 0a       	sbc	r5, r25
     6b4:	eb 81       	ldd	r30, Y+3	; 0x03
     6b6:	fc 81       	ldd	r31, Y+4	; 0x04
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     6b8:	7f 01       	movw	r14, r30
     6ba:	af ef       	ldi	r26, 0xFF	; 255
     6bc:	ea 1a       	sub	r14, r26
     6be:	fa 0a       	sbc	r15, r26
     6c0:	ee 0f       	add	r30, r30
     6c2:	ff 1f       	adc	r31, r31
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ea 0d       	add	r30, r10
     6ce:	fb 1d       	adc	r31, r11
     6d0:	00 81       	ld	r16, Z
     6d2:	11 81       	ldd	r17, Z+1	; 0x01
     6d4:	22 81       	ldd	r18, Z+2	; 0x02
     6d6:	33 81       	ldd	r19, Z+3	; 0x03
     6d8:	44 81       	ldd	r20, Z+4	; 0x04
     6da:	55 81       	ldd	r21, Z+5	; 0x05
     6dc:	66 81       	ldd	r22, Z+6	; 0x06
     6de:	77 81       	ldd	r23, Z+7	; 0x07
     6e0:	c2 01       	movw	r24, r4
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	8a 0d       	add	r24, r10
     6f0:	9b 1d       	adc	r25, r11
     6f2:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     6f6:	ef 81       	ldd	r30, Y+7	; 0x07
     6f8:	f8 85       	ldd	r31, Y+8	; 0x08
     6fa:	20 83       	st	Z, r18
     6fc:	31 83       	std	Z+1, r19	; 0x01
     6fe:	42 83       	std	Z+2, r20	; 0x02
     700:	53 83       	std	Z+3, r21	; 0x03
     702:	64 83       	std	Z+4, r22	; 0x04
     704:	75 83       	std	Z+5, r23	; 0x05
     706:	86 83       	std	Z+6, r24	; 0x06
     708:	97 83       	std	Z+7, r25	; 0x07
	*/
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
     70a:	ff ef       	ldi	r31, 0xFF	; 255
     70c:	6f 1a       	sub	r6, r31
     70e:	7f 0a       	sbc	r7, r31
     710:	8f 81       	ldd	r24, Y+7	; 0x07
     712:	98 85       	ldd	r25, Y+8	; 0x08
     714:	08 96       	adiw	r24, 0x08	; 8
     716:	98 87       	std	Y+8, r25	; 0x08
     718:	8f 83       	std	Y+7, r24	; 0x07
     71a:	6c 14       	cp	r6, r12
     71c:	7d 04       	cpc	r7, r13
     71e:	14 f4       	brge	.+4      	; 0x724 <_ZN5Gates9kroneckerEP7Complexii+0x10c>
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
		kronvec[i]=vec[vec1i].mul(vec[vec2i++]);
     720:	f7 01       	movw	r30, r14
     722:	c2 cf       	rjmp	.-124    	; 0x6a8 <_ZN5Gates9kroneckerEP7Complexii+0x90>
     724:	86 01       	movw	r16, r12
     726:	74 01       	movw	r14, r8
	}
	
	if(touch_enable){
     728:	ad 81       	ldd	r26, Y+5	; 0x05
     72a:	be 81       	ldd	r27, Y+6	; 0x06
     72c:	ab 2b       	or	r26, r27
     72e:	b1 f5       	brne	.+108    	; 0x79c <_ZN5Gates9kroneckerEP7Complexii+0x184>
     730:	44 c0       	rjmp	.+136    	; 0x7ba <_ZN5Gates9kroneckerEP7Complexii+0x1a2>
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
			if(touch(kronvec[i].re)==binary_touch){
     732:	58 01       	movw	r10, r16
     734:	f8 01       	movw	r30, r16
     736:	40 81       	ld	r20, Z
     738:	51 81       	ldd	r21, Z+1	; 0x01
     73a:	62 81       	ldd	r22, Z+2	; 0x02
     73c:	73 81       	ldd	r23, Z+3	; 0x03
     73e:	c7 01       	movw	r24, r14
     740:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN5Gates5touchEd>
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	09 f5       	brne	.+66     	; 0x78a <_ZN5Gates9kroneckerEP7Complexii+0x172>
     748:	84 01       	movw	r16, r8
     74a:	c8 01       	movw	r24, r16
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	86 0d       	add	r24, r6
     75a:	97 1d       	adc	r25, r7
     75c:	f3 01       	movw	r30, r6
				for(int j=0;j<kron_size;j++){kronvec[j].re=0; kronvec[j].im=0;}
     75e:	10 82       	st	Z, r1
     760:	11 82       	std	Z+1, r1	; 0x01
     762:	12 82       	std	Z+2, r1	; 0x02
     764:	13 82       	std	Z+3, r1	; 0x03
     766:	14 82       	std	Z+4, r1	; 0x04
     768:	15 82       	std	Z+5, r1	; 0x05
     76a:	16 82       	std	Z+6, r1	; 0x06
     76c:	17 82       	std	Z+7, r1	; 0x07
     76e:	38 96       	adiw	r30, 0x08	; 8
     770:	e8 17       	cp	r30, r24
     772:	f9 07       	cpc	r31, r25
     774:	a1 f7       	brne	.-24     	; 0x75e <_ZN5Gates9kroneckerEP7Complexii+0x146>
				kronvec[i].re=binary_touch;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e8       	ldi	r26, 0x80	; 128
     77c:	bf e3       	ldi	r27, 0x3F	; 63
     77e:	f5 01       	movw	r30, r10
     780:	80 83       	st	Z, r24
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	a2 83       	std	Z+2, r26	; 0x02
     786:	b3 83       	std	Z+3, r27	; 0x03
     788:	18 c0       	rjmp	.+48     	; 0x7ba <_ZN5Gates9kroneckerEP7Complexii+0x1a2>
	}
	
	if(touch_enable){
		//TOUCH THE ENTANGLED/SUPERPOSITIONED QUBIT BEFORE GIVING IT TO A MATRIX:
		int binary_touch=1;
		while(binary_touch)	for(int i=0;i<kron_size;i++)
     78a:	ff ef       	ldi	r31, 0xFF	; 255
     78c:	cf 1a       	sub	r12, r31
     78e:	df 0a       	sbc	r13, r31
     790:	08 5f       	subi	r16, 0xF8	; 248
     792:	1f 4f       	sbci	r17, 0xFF	; 255
     794:	c8 14       	cp	r12, r8
     796:	d9 04       	cpc	r13, r9
     798:	61 f6       	brne	.-104    	; 0x732 <_ZN5Gates9kroneckerEP7Complexii+0x11a>
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <_ZN5Gates9kroneckerEP7Complexii+0x18e>
     79c:	49 80       	ldd	r4, Y+1	; 0x01
     79e:	5a 80       	ldd	r5, Y+2	; 0x02
     7a0:	21 2c       	mov	r2, r1
     7a2:	31 2c       	mov	r3, r1
     7a4:	48 01       	movw	r8, r16
     7a6:	18 14       	cp	r1, r8
     7a8:	19 04       	cpc	r1, r9
     7aa:	ec f7       	brge	.-6      	; 0x7a6 <_ZN5Gates9kroneckerEP7Complexii+0x18e>
     7ac:	64 2c       	mov	r6, r4
     7ae:	75 2c       	mov	r7, r5
     7b0:	04 2d       	mov	r16, r4
     7b2:	15 2d       	mov	r17, r5
     7b4:	c2 2c       	mov	r12, r2
     7b6:	d3 2c       	mov	r13, r3
     7b8:	bc cf       	rjmp	.-136    	; 0x732 <_ZN5Gates9kroneckerEP7Complexii+0x11a>
				kronvec[i].re=binary_touch;
				binary_touch=0;
				break;
			}
	}
	print_states(kron_size,kronvec,"Kronecker: ");
     7ba:	4d e8       	ldi	r20, 0x8D	; 141
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	69 81       	ldd	r22, Y+1	; 0x01
     7c0:	7a 81       	ldd	r23, Y+2	; 0x02
     7c2:	c8 01       	movw	r24, r16
     7c4:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>

	return kronvec;
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	9a 81       	ldd	r25, Y+2	; 0x02
     7cc:	24 c0       	rjmp	.+72     	; 0x816 <_ZN5Gates9kroneckerEP7Complexii+0x1fe>
	s.writestr("REVERSING KRON");
	return kron;
}

Complex * Gates::kronecker(Complex * vec,int qb_count,int touch_enable){
	if(qb_count==1) return vec;
     7ce:	86 2f       	mov	r24, r22
     7d0:	9b 2d       	mov	r25, r11
     7d2:	21 c0       	rjmp	.+66     	; 0x816 <_ZN5Gates9kroneckerEP7Complexii+0x1fe>
	int kron_size=custom_pow(2,qb_count);
	Complex * kronvec=(Complex*)malloc(sizeof(Complex)*kron_size);
     7d4:	88 e0       	ldi	r24, 0x08	; 8
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
     7dc:	89 83       	std	Y+1, r24	; 0x01
     7de:	9a 83       	std	Y+2, r25	; 0x02
	print_states(2*2,vec,"Before: ");
     7e0:	44 e8       	ldi	r20, 0x84	; 132
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	b5 01       	movw	r22, r10
     7e6:	84 e0       	ldi	r24, 0x04	; 4
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>
     7ee:	01 e0       	ldi	r16, 0x01	; 1
     7f0:	10 e0       	ldi	r17, 0x00	; 0
	
	int vec1i=0;
	int vec2i_default=qb_count;
	int vec2i=vec2i_default;
	for(int i=0;i<kron_size;i++){
    	if(vec2i==qb_count*2){vec2i=vec2i_default;vec1i++;}
     7f2:	14 01       	movw	r2, r8
     7f4:	22 0c       	add	r2, r2
     7f6:	33 1c       	adc	r3, r3
     7f8:	c9 80       	ldd	r12, Y+1	; 0x01
     7fa:	da 80       	ldd	r13, Y+2	; 0x02
     7fc:	f4 01       	movw	r30, r8
     7fe:	61 2c       	mov	r6, r1
     800:	71 2c       	mov	r7, r1
     802:	41 2c       	mov	r4, r1
     804:	51 2c       	mov	r5, r1
     806:	8b 82       	std	Y+3, r8	; 0x03
     808:	9c 82       	std	Y+4, r9	; 0x04
     80a:	c6 01       	movw	r24, r12
     80c:	68 01       	movw	r12, r16
     80e:	47 01       	movw	r8, r14
     810:	98 87       	std	Y+8, r25	; 0x08
     812:	8f 83       	std	Y+7, r24	; 0x07
     814:	49 cf       	rjmp	.-366    	; 0x6a8 <_ZN5Gates9kroneckerEP7Complexii+0x90>
			}
	}
	print_states(kron_size,kronvec,"Kronecker: ");

	return kronvec;
}
     816:	28 96       	adiw	r28, 0x08	; 8
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	af 90       	pop	r10
     836:	9f 90       	pop	r9
     838:	8f 90       	pop	r8
     83a:	7f 90       	pop	r7
     83c:	6f 90       	pop	r6
     83e:	5f 90       	pop	r5
     840:	4f 90       	pop	r4
     842:	3f 90       	pop	r3
     844:	2f 90       	pop	r2
     846:	08 95       	ret

00000848 <_ZN5Gates8ampl2vecEiPiS0_>:

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     848:	2f 92       	push	r2
     84a:	3f 92       	push	r3
     84c:	4f 92       	push	r4
     84e:	5f 92       	push	r5
     850:	6f 92       	push	r6
     852:	7f 92       	push	r7
     854:	8f 92       	push	r8
     856:	9f 92       	push	r9
     858:	af 92       	push	r10
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	28 97       	sbiw	r28, 0x08	; 8
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	9e 83       	std	Y+6, r25	; 0x06
     87e:	8d 83       	std	Y+5, r24	; 0x05
     880:	7a 83       	std	Y+2, r23	; 0x02
     882:	69 83       	std	Y+1, r22	; 0x01
     884:	04 2f       	mov	r16, r20
     886:	15 2f       	mov	r17, r21
     888:	c2 2e       	mov	r12, r18
     88a:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     88c:	cb 01       	movw	r24, r22
     88e:	82 95       	swap	r24
     890:	92 95       	swap	r25
     892:	90 7f       	andi	r25, 0xF0	; 240
     894:	98 27       	eor	r25, r24
     896:	80 7f       	andi	r24, 0xF0	; 240
     898:	98 27       	eor	r25, r24
     89a:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
     89e:	8b 83       	std	Y+3, r24	; 0x03
     8a0:	9c 83       	std	Y+4, r25	; 0x04
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     8a2:	29 80       	ldd	r2, Y+1	; 0x01
     8a4:	3a 80       	ldd	r3, Y+2	; 0x02
     8a6:	22 0c       	add	r2, r2
     8a8:	33 1c       	adc	r3, r3
     8aa:	12 14       	cp	r1, r2
     8ac:	13 04       	cpc	r1, r3
     8ae:	0c f0       	brlt	.+2      	; 0x8b2 <_ZN5Gates8ampl2vecEiPiS0_+0x6a>
     8b0:	ac c0       	rjmp	.+344    	; 0xa0a <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     8b2:	a8 2e       	mov	r10, r24
     8b4:	b9 2e       	mov	r11, r25
     8b6:	e0 2e       	mov	r14, r16
     8b8:	f1 2e       	mov	r15, r17
     8ba:	0c 2d       	mov	r16, r12
     8bc:	1d 2d       	mov	r17, r13
     8be:	81 2c       	mov	r8, r1
     8c0:	91 2c       	mov	r9, r1
     8c2:	b8 86       	std	Y+8, r11	; 0x08
     8c4:	af 82       	std	Y+7, r10	; 0x07
     8c6:	67 01       	movw	r12, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     8c8:	f7 01       	movw	r30, r14
     8ca:	41 90       	ld	r4, Z+
     8cc:	51 90       	ld	r5, Z+
     8ce:	7f 01       	movw	r14, r30
     8d0:	66 24       	eor	r6, r6
     8d2:	57 fc       	sbrc	r5, 7
     8d4:	60 94       	com	r6
     8d6:	76 2c       	mov	r7, r6
     8d8:	c3 01       	movw	r24, r6
     8da:	b2 01       	movw	r22, r4
     8dc:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     8e0:	2b ed       	ldi	r18, 0xDB	; 219
     8e2:	3f e0       	ldi	r19, 0x0F	; 15
     8e4:	49 e4       	ldi	r20, 0x49	; 73
     8e6:	50 e4       	ldi	r21, 0x40	; 64
     8e8:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	44 eb       	ldi	r20, 0xB4	; 180
     8f2:	53 e4       	ldi	r21, 0x43	; 67
     8f4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divsf3>
     8f8:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <cos>
     8fc:	ef 81       	ldd	r30, Y+7	; 0x07
     8fe:	f8 85       	ldd	r31, Y+8	; 0x08
     900:	60 83       	st	Z, r22
     902:	71 83       	std	Z+1, r23	; 0x01
     904:	82 83       	std	Z+2, r24	; 0x02
     906:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     908:	c3 01       	movw	r24, r6
     90a:	b2 01       	movw	r22, r4
     90c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     910:	2b ed       	ldi	r18, 0xDB	; 219
     912:	3f e0       	ldi	r19, 0x0F	; 15
     914:	49 e4       	ldi	r20, 0x49	; 73
     916:	50 e4       	ldi	r21, 0x40	; 64
     918:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	44 eb       	ldi	r20, 0xB4	; 180
     922:	53 e4       	ldi	r21, 0x43	; 67
     924:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divsf3>
     928:	0e 94 db 11 	call	0x23b6	; 0x23b6 <sin>
     92c:	2b 01       	movw	r4, r22
     92e:	3c 01       	movw	r6, r24
     930:	58 01       	movw	r10, r16
     932:	f8 01       	movw	r30, r16
     934:	61 91       	ld	r22, Z+
     936:	71 91       	ld	r23, Z+
     938:	8f 01       	movw	r16, r30
     93a:	88 27       	eor	r24, r24
     93c:	77 fd       	sbrc	r23, 7
     93e:	80 95       	com	r24
     940:	98 2f       	mov	r25, r24
     942:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     946:	2b ed       	ldi	r18, 0xDB	; 219
     948:	3f e0       	ldi	r19, 0x0F	; 15
     94a:	49 e4       	ldi	r20, 0x49	; 73
     94c:	50 e4       	ldi	r21, 0x40	; 64
     94e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	44 e3       	ldi	r20, 0x34	; 52
     958:	53 e4       	ldi	r21, 0x43	; 67
     95a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divsf3>
     95e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <cos>
     962:	9b 01       	movw	r18, r22
     964:	ac 01       	movw	r20, r24
     966:	c3 01       	movw	r24, r6
     968:	b2 01       	movw	r22, r4
     96a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     96e:	ef 81       	ldd	r30, Y+7	; 0x07
     970:	f8 85       	ldd	r31, Y+8	; 0x08
     972:	60 87       	std	Z+8, r22	; 0x08
     974:	71 87       	std	Z+9, r23	; 0x09
     976:	82 87       	std	Z+10, r24	; 0x0a
     978:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     97a:	f6 01       	movw	r30, r12
     97c:	60 81       	ld	r22, Z
     97e:	71 81       	ldd	r23, Z+1	; 0x01
     980:	88 27       	eor	r24, r24
     982:	77 fd       	sbrc	r23, 7
     984:	80 95       	com	r24
     986:	98 2f       	mov	r25, r24
     988:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     98c:	2b ed       	ldi	r18, 0xDB	; 219
     98e:	3f e0       	ldi	r19, 0x0F	; 15
     990:	49 e4       	ldi	r20, 0x49	; 73
     992:	50 e4       	ldi	r21, 0x40	; 64
     994:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	44 eb       	ldi	r20, 0xB4	; 180
     99e:	53 e4       	ldi	r21, 0x43	; 67
     9a0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divsf3>
     9a4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <sin>
     9a8:	2b 01       	movw	r4, r22
     9aa:	3c 01       	movw	r6, r24
     9ac:	f5 01       	movw	r30, r10
     9ae:	60 81       	ld	r22, Z
     9b0:	71 81       	ldd	r23, Z+1	; 0x01
     9b2:	88 27       	eor	r24, r24
     9b4:	77 fd       	sbrc	r23, 7
     9b6:	80 95       	com	r24
     9b8:	98 2f       	mov	r25, r24
     9ba:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     9be:	2b ed       	ldi	r18, 0xDB	; 219
     9c0:	3f e0       	ldi	r19, 0x0F	; 15
     9c2:	49 e4       	ldi	r20, 0x49	; 73
     9c4:	50 e4       	ldi	r21, 0x40	; 64
     9c6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	44 e3       	ldi	r20, 0x34	; 52
     9d0:	53 e4       	ldi	r21, 0x43	; 67
     9d2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divsf3>
     9d6:	0e 94 db 11 	call	0x23b6	; 0x23b6 <sin>
     9da:	9b 01       	movw	r18, r22
     9dc:	ac 01       	movw	r20, r24
     9de:	c3 01       	movw	r24, r6
     9e0:	b2 01       	movw	r22, r4
     9e2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     9e6:	ef 81       	ldd	r30, Y+7	; 0x07
     9e8:	f8 85       	ldd	r31, Y+8	; 0x08
     9ea:	64 87       	std	Z+12, r22	; 0x0c
     9ec:	75 87       	std	Z+13, r23	; 0x0d
     9ee:	86 87       	std	Z+14, r24	; 0x0e
     9f0:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     9f2:	f2 e0       	ldi	r31, 0x02	; 2
     9f4:	8f 0e       	add	r8, r31
     9f6:	91 1c       	adc	r9, r1
     9f8:	8f 81       	ldd	r24, Y+7	; 0x07
     9fa:	98 85       	ldd	r25, Y+8	; 0x08
     9fc:	40 96       	adiw	r24, 0x10	; 16
     9fe:	98 87       	std	Y+8, r25	; 0x08
     a00:	8f 83       	std	Y+7, r24	; 0x07
     a02:	82 14       	cp	r8, r2
     a04:	93 04       	cpc	r9, r3
     a06:	0c f4       	brge	.+2      	; 0xa0a <_ZN5Gates8ampl2vecEiPiS0_+0x1c2>
     a08:	5e cf       	rjmp	.-324    	; 0x8c6 <_ZN5Gates8ampl2vecEiPiS0_+0x7e>
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
	}
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	49 81       	ldd	r20, Y+1	; 0x01
     a10:	5a 81       	ldd	r21, Y+2	; 0x02
     a12:	6b 81       	ldd	r22, Y+3	; 0x03
     a14:	7c 81       	ldd	r23, Y+4	; 0x04
     a16:	8d 81       	ldd	r24, Y+5	; 0x05
     a18:	9e 81       	ldd	r25, Y+6	; 0x06
     a1a:	0e 94 0c 03 	call	0x618	; 0x618 <_ZN5Gates9kroneckerEP7Complexii>
}
     a1e:	28 96       	adiw	r28, 0x08	; 8
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	bf 90       	pop	r11
     a3c:	af 90       	pop	r10
     a3e:	9f 90       	pop	r9
     a40:	8f 90       	pop	r8
     a42:	7f 90       	pop	r7
     a44:	6f 90       	pop	r6
     a46:	5f 90       	pop	r5
     a48:	4f 90       	pop	r4
     a4a:	3f 90       	pop	r3
     a4c:	2f 90       	pop	r2
     a4e:	08 95       	ret

00000a50 <_ZN5Gates8vec2amplEP7Complexi>:
int * Gates::vec2ampl(Complex * vec,int qb_count){
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	7b 01       	movw	r14, r22
     a5e:	ea 01       	movw	r28, r20
	if(qb_count>1) vec=reverse_kronecker(vec,custom_pow(2,qb_count));
     a60:	42 30       	cpi	r20, 0x02	; 2
     a62:	51 05       	cpc	r21, r1
     a64:	7c f0       	brlt	.+30     	; 0xa84 <_ZN5Gates8vec2amplEP7Complexi+0x34>
int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

int Gates::custom_pow(int base,int exp){
	int result=1; for(int i=0;i<exp;i++) result*=base;
     a66:	1c 16       	cp	r1, r28
     a68:	1d 06       	cpc	r1, r29
     a6a:	34 f4       	brge	.+12     	; 0xa78 <_ZN5Gates8vec2amplEP7Complexi+0x28>
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	8c 17       	cp	r24, r28
     a74:	9d 07       	cpc	r25, r29
     a76:	e1 f7       	brne	.-8      	; 0xa70 <_ZN5Gates8vec2amplEP7Complexi+0x20>
	return result;
}

Complex * Gates::reverse_kronecker(Complex * kron,int kron_size){
	s.writestr("REVERSING KRON");
     a78:	65 e7       	ldi	r22, 0x75	; 117
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	8b ed       	ldi	r24, 0xDB	; 219
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
	}
	return kronecker(vec,qb_count,true); // PUT VEC INTO KRONECKER AND RETURN THE RESULT
}
int * Gates::vec2ampl(Complex * vec,int qb_count){
	if(qb_count>1) vec=reverse_kronecker(vec,custom_pow(2,qb_count));
	int* newthephi=(int*)malloc(sizeof(int)*2);
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
     a8c:	8c 01       	movw	r16, r24
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
     a8e:	f7 01       	movw	r30, r14
     a90:	60 81       	ld	r22, Z
     a92:	71 81       	ldd	r23, Z+1	; 0x01
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	93 81       	ldd	r25, Z+3	; 0x03
     a98:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <acos>
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	44 eb       	ldi	r20, 0xB4	; 180
     aa2:	53 e4       	ldi	r21, 0x43	; 67
     aa4:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     aa8:	2b ed       	ldi	r18, 0xDB	; 219
     aaa:	3f e0       	ldi	r19, 0x0F	; 15
     aac:	49 e4       	ldi	r20, 0x49	; 73
     aae:	50 e4       	ldi	r21, 0x40	; 64
     ab0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divsf3>
     ab4:	0e 94 35 10 	call	0x206a	; 0x206a <__fixsfsi>
     ab8:	f8 01       	movw	r30, r16
     aba:	71 83       	std	Z+1, r23	; 0x01
     abc:	60 83       	st	Z, r22
	newthephi[1]=(180*vec[1].arg())/M_PI;
     abe:	c7 01       	movw	r24, r14
     ac0:	08 96       	adiw	r24, 0x08	; 8
     ac2:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN7Complex3argEv>
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	44 e3       	ldi	r20, 0x34	; 52
     acc:	53 e4       	ldi	r21, 0x43	; 67
     ace:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__mulsf3>
     ad2:	2b ed       	ldi	r18, 0xDB	; 219
     ad4:	3f e0       	ldi	r19, 0x0F	; 15
     ad6:	49 e4       	ldi	r20, 0x49	; 73
     ad8:	50 e4       	ldi	r21, 0x40	; 64
     ada:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divsf3>
     ade:	0e 94 35 10 	call	0x206a	; 0x206a <__fixsfsi>
     ae2:	f8 01       	movw	r30, r16
     ae4:	73 83       	std	Z+3, r23	; 0x03
     ae6:	62 83       	std	Z+2, r22	; 0x02
	
	print_states(qb_count*2,vec,"After: ");
     ae8:	49 e9       	ldi	r20, 0x99	; 153
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	b7 01       	movw	r22, r14
     aee:	ce 01       	movw	r24, r28
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z12print_statesiP7ComplexPc>
	return newthephi;
}
     af8:	c8 01       	movw	r24, r16
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	08 95       	ret

00000b08 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     b08:	2f 92       	push	r2
     b0a:	3f 92       	push	r3
     b0c:	4f 92       	push	r4
     b0e:	5f 92       	push	r5
     b10:	6f 92       	push	r6
     b12:	7f 92       	push	r7
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	60 97       	sbiw	r28, 0x10	; 16
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	4b 01       	movw	r8, r22
     b3e:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     b40:	80 e1       	ldi	r24, 0x10	; 16
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
     b48:	38 2e       	mov	r3, r24
     b4a:	29 2e       	mov	r2, r25
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     b50:	a1 2c       	mov	r10, r1
     b52:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     b54:	24 01       	movw	r4, r8
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	48 0e       	add	r4, r24
     b5a:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     b5c:	ce 01       	movw	r24, r28
     b5e:	09 96       	adiw	r24, 0x09	; 9
     b60:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     b64:	75 01       	movw	r14, r10
     b66:	ee 0c       	add	r14, r14
     b68:	ff 1c       	adc	r15, r15
     b6a:	ee 0c       	add	r14, r14
     b6c:	ff 1c       	adc	r15, r15
     b6e:	ee 0c       	add	r14, r14
     b70:	ff 1c       	adc	r15, r15
     b72:	e6 0c       	add	r14, r6
     b74:	f7 1c       	adc	r15, r7
     b76:	d7 01       	movw	r26, r14
     b78:	0c 91       	ld	r16, X
     b7a:	11 96       	adiw	r26, 0x01	; 1
     b7c:	1c 91       	ld	r17, X
     b7e:	11 97       	sbiw	r26, 0x01	; 1
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	2c 91       	ld	r18, X
     b84:	12 97       	sbiw	r26, 0x02	; 2
     b86:	13 96       	adiw	r26, 0x03	; 3
     b88:	3c 91       	ld	r19, X
     b8a:	13 97       	sbiw	r26, 0x03	; 3
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	4c 91       	ld	r20, X
     b90:	14 97       	sbiw	r26, 0x04	; 4
     b92:	15 96       	adiw	r26, 0x05	; 5
     b94:	5c 91       	ld	r21, X
     b96:	15 97       	sbiw	r26, 0x05	; 5
     b98:	16 96       	adiw	r26, 0x06	; 6
     b9a:	6c 91       	ld	r22, X
     b9c:	16 97       	sbiw	r26, 0x06	; 6
     b9e:	17 96       	adiw	r26, 0x07	; 7
     ba0:	7c 91       	ld	r23, X
     ba2:	c4 01       	movw	r24, r8
     ba4:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     ba8:	02 2f       	mov	r16, r18
     baa:	13 2f       	mov	r17, r19
     bac:	24 2f       	mov	r18, r20
     bae:	35 2f       	mov	r19, r21
     bb0:	46 2f       	mov	r20, r22
     bb2:	57 2f       	mov	r21, r23
     bb4:	68 2f       	mov	r22, r24
     bb6:	79 2f       	mov	r23, r25
     bb8:	ce 01       	movw	r24, r28
     bba:	09 96       	adiw	r24, 0x09	; 9
     bbc:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     bc0:	29 87       	std	Y+9, r18	; 0x09
     bc2:	3a 87       	std	Y+10, r19	; 0x0a
     bc4:	4b 87       	std	Y+11, r20	; 0x0b
     bc6:	5c 87       	std	Y+12, r21	; 0x0c
     bc8:	6d 87       	std	Y+13, r22	; 0x0d
     bca:	7e 87       	std	Y+14, r23	; 0x0e
     bcc:	8f 87       	std	Y+15, r24	; 0x0f
     bce:	98 8b       	std	Y+16, r25	; 0x10
     bd0:	f7 01       	movw	r30, r14
     bd2:	70 96       	adiw	r30, 0x10	; 16
     bd4:	d7 01       	movw	r26, r14
     bd6:	50 96       	adiw	r26, 0x10	; 16
     bd8:	0c 91       	ld	r16, X
     bda:	11 81       	ldd	r17, Z+1	; 0x01
     bdc:	22 81       	ldd	r18, Z+2	; 0x02
     bde:	33 81       	ldd	r19, Z+3	; 0x03
     be0:	44 81       	ldd	r20, Z+4	; 0x04
     be2:	55 81       	ldd	r21, Z+5	; 0x05
     be4:	66 81       	ldd	r22, Z+6	; 0x06
     be6:	77 81       	ldd	r23, Z+7	; 0x07
     be8:	c2 01       	movw	r24, r4
     bea:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     bee:	02 2f       	mov	r16, r18
     bf0:	13 2f       	mov	r17, r19
     bf2:	24 2f       	mov	r18, r20
     bf4:	35 2f       	mov	r19, r21
     bf6:	46 2f       	mov	r20, r22
     bf8:	57 2f       	mov	r21, r23
     bfa:	68 2f       	mov	r22, r24
     bfc:	79 2f       	mov	r23, r25
     bfe:	ce 01       	movw	r24, r28
     c00:	09 96       	adiw	r24, 0x09	; 9
     c02:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     c06:	29 87       	std	Y+9, r18	; 0x09
     c08:	3a 87       	std	Y+10, r19	; 0x0a
     c0a:	4b 87       	std	Y+11, r20	; 0x0b
     c0c:	5c 87       	std	Y+12, r21	; 0x0c
     c0e:	6d 87       	std	Y+13, r22	; 0x0d
     c10:	7e 87       	std	Y+14, r23	; 0x0e
     c12:	8f 87       	std	Y+15, r24	; 0x0f
     c14:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     c16:	89 85       	ldd	r24, Y+9	; 0x09
     c18:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1a:	ab 85       	ldd	r26, Y+11	; 0x0b
     c1c:	bc 85       	ldd	r27, Y+12	; 0x0c
     c1e:	f6 01       	movw	r30, r12
     c20:	80 83       	st	Z, r24
     c22:	91 83       	std	Z+1, r25	; 0x01
     c24:	a2 83       	std	Z+2, r26	; 0x02
     c26:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     c28:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c2c:	af 85       	ldd	r26, Y+15	; 0x0f
     c2e:	b8 89       	ldd	r27, Y+16	; 0x10
     c30:	84 83       	std	Z+4, r24	; 0x04
     c32:	95 83       	std	Z+5, r25	; 0x05
     c34:	a6 83       	std	Z+6, r26	; 0x06
     c36:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     c38:	ff ef       	ldi	r31, 0xFF	; 255
     c3a:	af 1a       	sub	r10, r31
     c3c:	bf 0a       	sbc	r11, r31
     c3e:	88 e0       	ldi	r24, 0x08	; 8
     c40:	c8 0e       	add	r12, r24
     c42:	d1 1c       	adc	r13, r1
     c44:	a2 e0       	ldi	r26, 0x02	; 2
     c46:	aa 16       	cp	r10, r26
     c48:	b1 04       	cpc	r11, r1
     c4a:	09 f0       	breq	.+2      	; 0xc4e <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     c4c:	87 cf       	rjmp	.-242    	; 0xb5c <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     c4e:	83 2d       	mov	r24, r3
     c50:	92 2d       	mov	r25, r2
     c52:	60 96       	adiw	r28, 0x10	; 16
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	bf 90       	pop	r11
     c70:	af 90       	pop	r10
     c72:	9f 90       	pop	r9
     c74:	8f 90       	pop	r8
     c76:	7f 90       	pop	r7
     c78:	6f 90       	pop	r6
     c7a:	5f 90       	pop	r5
     c7c:	4f 90       	pop	r4
     c7e:	3f 90       	pop	r3
     c80:	2f 90       	pop	r2
     c82:	08 95       	ret

00000c84 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     c84:	2f 92       	push	r2
     c86:	3f 92       	push	r3
     c88:	4f 92       	push	r4
     c8a:	5f 92       	push	r5
     c8c:	6f 92       	push	r6
     c8e:	7f 92       	push	r7
     c90:	8f 92       	push	r8
     c92:	9f 92       	push	r9
     c94:	af 92       	push	r10
     c96:	bf 92       	push	r11
     c98:	cf 92       	push	r12
     c9a:	df 92       	push	r13
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	64 97       	sbiw	r28, 0x14	; 20
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	3b 01       	movw	r6, r22
     cba:	e4 2e       	mov	r14, r20
     cbc:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     cbe:	80 e2       	ldi	r24, 0x20	; 32
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
     cc6:	8b 8b       	std	Y+19, r24	; 0x13
     cc8:	9c 8b       	std	Y+20, r25	; 0x14
     cca:	48 2e       	mov	r4, r24
     ccc:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     cce:	81 2c       	mov	r8, r1
     cd0:	91 2c       	mov	r9, r1
     cd2:	e9 8a       	std	Y+17, r14	; 0x11
     cd4:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     cd6:	21 2c       	mov	r2, r1
     cd8:	31 2c       	mov	r3, r1
     cda:	ce 01       	movw	r24, r28
     cdc:	09 96       	adiw	r24, 0x09	; 9
     cde:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
     ce2:	c9 88       	ldd	r12, Y+17	; 0x11
     ce4:	da 88       	ldd	r13, Y+18	; 0x12
     ce6:	e2 2c       	mov	r14, r2
     ce8:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     cea:	54 01       	movw	r10, r8
     cec:	aa 0c       	add	r10, r10
     cee:	bb 1c       	adc	r11, r11
     cf0:	aa 0c       	add	r10, r10
     cf2:	bb 1c       	adc	r11, r11
     cf4:	aa 0c       	add	r10, r10
     cf6:	bb 1c       	adc	r11, r11
     cf8:	f5 01       	movw	r30, r10
     cfa:	ec 0d       	add	r30, r12
     cfc:	fd 1d       	adc	r31, r13
     cfe:	00 81       	ld	r16, Z
     d00:	11 81       	ldd	r17, Z+1	; 0x01
     d02:	22 81       	ldd	r18, Z+2	; 0x02
     d04:	33 81       	ldd	r19, Z+3	; 0x03
     d06:	44 81       	ldd	r20, Z+4	; 0x04
     d08:	55 81       	ldd	r21, Z+5	; 0x05
     d0a:	66 81       	ldd	r22, Z+6	; 0x06
     d0c:	77 81       	ldd	r23, Z+7	; 0x07
     d0e:	c3 01       	movw	r24, r6
     d10:	8e 0d       	add	r24, r14
     d12:	9f 1d       	adc	r25, r15
     d14:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     d18:	29 83       	std	Y+1, r18	; 0x01
     d1a:	3a 83       	std	Y+2, r19	; 0x02
     d1c:	4b 83       	std	Y+3, r20	; 0x03
     d1e:	5c 83       	std	Y+4, r21	; 0x04
     d20:	6d 83       	std	Y+5, r22	; 0x05
     d22:	7e 83       	std	Y+6, r23	; 0x06
     d24:	8f 83       	std	Y+7, r24	; 0x07
     d26:	98 87       	std	Y+8, r25	; 0x08
     d28:	02 2f       	mov	r16, r18
     d2a:	13 2f       	mov	r17, r19
     d2c:	24 2f       	mov	r18, r20
     d2e:	35 2f       	mov	r19, r21
     d30:	46 2f       	mov	r20, r22
     d32:	57 2f       	mov	r21, r23
     d34:	68 2f       	mov	r22, r24
     d36:	79 2f       	mov	r23, r25
     d38:	ce 01       	movw	r24, r28
     d3a:	09 96       	adiw	r24, 0x09	; 9
     d3c:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     d40:	29 87       	std	Y+9, r18	; 0x09
     d42:	3a 87       	std	Y+10, r19	; 0x0a
     d44:	4b 87       	std	Y+11, r20	; 0x0b
     d46:	5c 87       	std	Y+12, r21	; 0x0c
     d48:	6d 87       	std	Y+13, r22	; 0x0d
     d4a:	7e 87       	std	Y+14, r23	; 0x0e
     d4c:	8f 87       	std	Y+15, r24	; 0x0f
     d4e:	98 8b       	std	Y+16, r25	; 0x10
     d50:	88 e0       	ldi	r24, 0x08	; 8
     d52:	e8 0e       	add	r14, r24
     d54:	f1 1c       	adc	r15, r1
     d56:	e0 e2       	ldi	r30, 0x20	; 32
     d58:	ce 0e       	add	r12, r30
     d5a:	d1 1c       	adc	r13, r1
     d5c:	f0 e2       	ldi	r31, 0x20	; 32
     d5e:	ef 16       	cp	r14, r31
     d60:	f1 04       	cpc	r15, r1
     d62:	51 f6       	brne	.-108    	; 0xcf8 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
     d64:	89 85       	ldd	r24, Y+9	; 0x09
     d66:	9a 85       	ldd	r25, Y+10	; 0x0a
     d68:	ab 85       	ldd	r26, Y+11	; 0x0b
     d6a:	bc 85       	ldd	r27, Y+12	; 0x0c
     d6c:	f2 01       	movw	r30, r4
     d6e:	80 83       	st	Z, r24
     d70:	91 83       	std	Z+1, r25	; 0x01
     d72:	a2 83       	std	Z+2, r26	; 0x02
     d74:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     d76:	8d 85       	ldd	r24, Y+13	; 0x0d
     d78:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7a:	af 85       	ldd	r26, Y+15	; 0x0f
     d7c:	b8 89       	ldd	r27, Y+16	; 0x10
     d7e:	84 83       	std	Z+4, r24	; 0x04
     d80:	95 83       	std	Z+5, r25	; 0x05
     d82:	a6 83       	std	Z+6, r26	; 0x06
     d84:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     d86:	ff ef       	ldi	r31, 0xFF	; 255
     d88:	8f 1a       	sub	r8, r31
     d8a:	9f 0a       	sbc	r9, r31
     d8c:	88 e0       	ldi	r24, 0x08	; 8
     d8e:	48 0e       	add	r4, r24
     d90:	51 1c       	adc	r5, r1
     d92:	e4 e0       	ldi	r30, 0x04	; 4
     d94:	8e 16       	cp	r8, r30
     d96:	91 04       	cpc	r9, r1
     d98:	09 f0       	breq	.+2      	; 0xd9c <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
     d9a:	9f cf       	rjmp	.-194    	; 0xcda <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     d9c:	8b 89       	ldd	r24, Y+19	; 0x13
     d9e:	9c 89       	ldd	r25, Y+20	; 0x14
     da0:	64 96       	adiw	r28, 0x14	; 20
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	9f 90       	pop	r9
     dc2:	8f 90       	pop	r8
     dc4:	7f 90       	pop	r7
     dc6:	6f 90       	pop	r6
     dc8:	5f 90       	pop	r5
     dca:	4f 90       	pop	r4
     dcc:	3f 90       	pop	r3
     dce:	2f 90       	pop	r2
     dd0:	08 95       	ret

00000dd2 <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	a4 97       	sbiw	r28, 0x24	; 36
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	7c 01       	movw	r14, r24
     df8:	5b 01       	movw	r10, r22
     dfa:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
     dfc:	00 e0       	ldi	r16, 0x00	; 0
     dfe:	10 e0       	ldi	r17, 0x00	; 0
     e00:	98 01       	movw	r18, r16
     e02:	b9 01       	movw	r22, r18
     e04:	a8 01       	movw	r20, r16
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e0e:	00 e0       	ldi	r16, 0x00	; 0
     e10:	10 e0       	ldi	r17, 0x00	; 0
     e12:	98 01       	movw	r18, r16
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	60 e8       	ldi	r22, 0x80	; 128
     e1a:	7f e3       	ldi	r23, 0x3F	; 63
     e1c:	ce 01       	movw	r24, r28
     e1e:	09 96       	adiw	r24, 0x09	; 9
     e20:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e24:	00 e0       	ldi	r16, 0x00	; 0
     e26:	10 e0       	ldi	r17, 0x00	; 0
     e28:	98 01       	movw	r18, r16
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	60 e8       	ldi	r22, 0x80	; 128
     e30:	7f e3       	ldi	r23, 0x3F	; 63
     e32:	ce 01       	movw	r24, r28
     e34:	41 96       	adiw	r24, 0x11	; 17
     e36:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e3a:	00 e0       	ldi	r16, 0x00	; 0
     e3c:	10 e0       	ldi	r17, 0x00	; 0
     e3e:	98 01       	movw	r18, r16
     e40:	b9 01       	movw	r22, r18
     e42:	a8 01       	movw	r20, r16
     e44:	ce 01       	movw	r24, r28
     e46:	49 96       	adiw	r24, 0x19	; 25
     e48:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     e4c:	bc a2       	std	Y+36, r11	; 0x24
     e4e:	ab a2       	std	Y+35, r10	; 0x23
     e50:	da a2       	std	Y+34, r13	; 0x22
     e52:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix),1);
     e54:	9e 01       	movw	r18, r28
     e56:	2f 5d       	subi	r18, 0xDF	; 223
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	ae 01       	movw	r20, r28
     e5c:	4d 5d       	subi	r20, 0xDD	; 221
     e5e:	5f 4f       	sbci	r21, 0xFF	; 255
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	c7 01       	movw	r24, r14
     e66:	0e 94 24 04 	call	0x848	; 0x848 <_ZN5Gates8ampl2vecEiPiS0_>
     e6a:	ae 01       	movw	r20, r28
     e6c:	4f 5f       	subi	r20, 0xFF	; 255
     e6e:	5f 4f       	sbci	r21, 0xFF	; 255
     e70:	bc 01       	movw	r22, r24
     e72:	c7 01       	movw	r24, r14
     e74:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     e78:	41 e0       	ldi	r20, 0x01	; 1
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	bc 01       	movw	r22, r24
     e7e:	c7 01       	movw	r24, r14
     e80:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN5Gates8vec2amplEP7Complexi>
}
     e84:	a4 96       	adiw	r28, 0x24	; 36
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	af 90       	pop	r10
     ea4:	08 95       	ret

00000ea6 <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	a4 97       	sbiw	r28, 0x24	; 36
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	7c 01       	movw	r14, r24
     ecc:	5b 01       	movw	r10, r22
     ece:	6a 01       	movw	r12, r20
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	10 e0       	ldi	r17, 0x00	; 0
     ed4:	98 01       	movw	r18, r16
     ed6:	b9 01       	movw	r22, r18
     ed8:	a8 01       	movw	r20, r16
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     ee2:	00 e0       	ldi	r16, 0x00	; 0
     ee4:	10 e0       	ldi	r17, 0x00	; 0
     ee6:	20 e8       	ldi	r18, 0x80	; 128
     ee8:	3f eb       	ldi	r19, 0xBF	; 191
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	ba 01       	movw	r22, r20
     ef0:	ce 01       	movw	r24, r28
     ef2:	09 96       	adiw	r24, 0x09	; 9
     ef4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     ef8:	00 e0       	ldi	r16, 0x00	; 0
     efa:	10 e0       	ldi	r17, 0x00	; 0
     efc:	20 e8       	ldi	r18, 0x80	; 128
     efe:	3f e3       	ldi	r19, 0x3F	; 63
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	ba 01       	movw	r22, r20
     f06:	ce 01       	movw	r24, r28
     f08:	41 96       	adiw	r24, 0x11	; 17
     f0a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f0e:	00 e0       	ldi	r16, 0x00	; 0
     f10:	10 e0       	ldi	r17, 0x00	; 0
     f12:	98 01       	movw	r18, r16
     f14:	b9 01       	movw	r22, r18
     f16:	a8 01       	movw	r20, r16
     f18:	ce 01       	movw	r24, r28
     f1a:	49 96       	adiw	r24, 0x19	; 25
     f1c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     f20:	bc a2       	std	Y+36, r11	; 0x24
     f22:	ab a2       	std	Y+35, r10	; 0x23
     f24:	da a2       	std	Y+34, r13	; 0x22
     f26:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),y_matrix),1);
     f28:	9e 01       	movw	r18, r28
     f2a:	2f 5d       	subi	r18, 0xDF	; 223
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	ae 01       	movw	r20, r28
     f30:	4d 5d       	subi	r20, 0xDD	; 221
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	c7 01       	movw	r24, r14
     f3a:	0e 94 24 04 	call	0x848	; 0x848 <_ZN5Gates8ampl2vecEiPiS0_>
     f3e:	ae 01       	movw	r20, r28
     f40:	4f 5f       	subi	r20, 0xFF	; 255
     f42:	5f 4f       	sbci	r21, 0xFF	; 255
     f44:	bc 01       	movw	r22, r24
     f46:	c7 01       	movw	r24, r14
     f48:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	bc 01       	movw	r22, r24
     f52:	c7 01       	movw	r24, r14
     f54:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN5Gates8vec2amplEP7Complexi>
}
     f58:	a4 96       	adiw	r28, 0x24	; 36
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	08 95       	ret

00000f7a <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
     f7a:	af 92       	push	r10
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	a4 97       	sbiw	r28, 0x24	; 36
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	7c 01       	movw	r14, r24
     fa0:	5b 01       	movw	r10, r22
     fa2:	6a 01       	movw	r12, r20
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
     fa4:	00 e0       	ldi	r16, 0x00	; 0
     fa6:	10 e0       	ldi	r17, 0x00	; 0
     fa8:	98 01       	movw	r18, r16
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	60 e8       	ldi	r22, 0x80	; 128
     fb0:	7f e3       	ldi	r23, 0x3F	; 63
     fb2:	ce 01       	movw	r24, r28
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fba:	00 e0       	ldi	r16, 0x00	; 0
     fbc:	10 e0       	ldi	r17, 0x00	; 0
     fbe:	98 01       	movw	r18, r16
     fc0:	b9 01       	movw	r22, r18
     fc2:	a8 01       	movw	r20, r16
     fc4:	ce 01       	movw	r24, r28
     fc6:	09 96       	adiw	r24, 0x09	; 9
     fc8:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fcc:	00 e0       	ldi	r16, 0x00	; 0
     fce:	10 e0       	ldi	r17, 0x00	; 0
     fd0:	98 01       	movw	r18, r16
     fd2:	b9 01       	movw	r22, r18
     fd4:	a8 01       	movw	r20, r16
     fd6:	ce 01       	movw	r24, r28
     fd8:	41 96       	adiw	r24, 0x11	; 17
     fda:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fde:	00 e0       	ldi	r16, 0x00	; 0
     fe0:	10 e0       	ldi	r17, 0x00	; 0
     fe2:	98 01       	movw	r18, r16
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	50 e0       	ldi	r21, 0x00	; 0
     fe8:	60 e8       	ldi	r22, 0x80	; 128
     fea:	7f eb       	ldi	r23, 0xBF	; 191
     fec:	ce 01       	movw	r24, r28
     fee:	49 96       	adiw	r24, 0x19	; 25
     ff0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     ff4:	bc a2       	std	Y+36, r11	; 0x24
     ff6:	ab a2       	std	Y+35, r10	; 0x23
     ff8:	da a2       	std	Y+34, r13	; 0x22
     ffa:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),z_matrix),1);
     ffc:	9e 01       	movw	r18, r28
     ffe:	2f 5d       	subi	r18, 0xDF	; 223
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	ae 01       	movw	r20, r28
    1004:	4d 5d       	subi	r20, 0xDD	; 221
    1006:	5f 4f       	sbci	r21, 0xFF	; 255
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	c7 01       	movw	r24, r14
    100e:	0e 94 24 04 	call	0x848	; 0x848 <_ZN5Gates8ampl2vecEiPiS0_>
    1012:	ae 01       	movw	r20, r28
    1014:	4f 5f       	subi	r20, 0xFF	; 255
    1016:	5f 4f       	sbci	r21, 0xFF	; 255
    1018:	bc 01       	movw	r22, r24
    101a:	c7 01       	movw	r24, r14
    101c:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    1020:	41 e0       	ldi	r20, 0x01	; 1
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	bc 01       	movw	r22, r24
    1026:	c7 01       	movw	r24, r14
    1028:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN5Gates8vec2amplEP7Complexi>
}
    102c:	a4 96       	adiw	r28, 0x24	; 36
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	ff 90       	pop	r15
    1042:	ef 90       	pop	r14
    1044:	df 90       	pop	r13
    1046:	cf 90       	pop	r12
    1048:	bf 90       	pop	r11
    104a:	af 90       	pop	r10
    104c:	08 95       	ret

0000104e <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	a4 97       	sbiw	r28, 0x24	; 36
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	7c 01       	movw	r14, r24
    1074:	5b 01       	movw	r10, r22
    1076:	6a 01       	movw	r12, r20
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
    1078:	00 e0       	ldi	r16, 0x00	; 0
    107a:	10 e0       	ldi	r17, 0x00	; 0
    107c:	98 01       	movw	r18, r16
    107e:	43 ef       	ldi	r20, 0xF3	; 243
    1080:	54 e0       	ldi	r21, 0x04	; 4
    1082:	65 e3       	ldi	r22, 0x35	; 53
    1084:	7f e3       	ldi	r23, 0x3F	; 63
    1086:	ce 01       	movw	r24, r28
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    108e:	00 e0       	ldi	r16, 0x00	; 0
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	98 01       	movw	r18, r16
    1094:	43 ef       	ldi	r20, 0xF3	; 243
    1096:	54 e0       	ldi	r21, 0x04	; 4
    1098:	65 e3       	ldi	r22, 0x35	; 53
    109a:	7f e3       	ldi	r23, 0x3F	; 63
    109c:	ce 01       	movw	r24, r28
    109e:	09 96       	adiw	r24, 0x09	; 9
    10a0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10a4:	00 e0       	ldi	r16, 0x00	; 0
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	98 01       	movw	r18, r16
    10aa:	43 ef       	ldi	r20, 0xF3	; 243
    10ac:	54 e0       	ldi	r21, 0x04	; 4
    10ae:	65 e3       	ldi	r22, 0x35	; 53
    10b0:	7f e3       	ldi	r23, 0x3F	; 63
    10b2:	ce 01       	movw	r24, r28
    10b4:	41 96       	adiw	r24, 0x11	; 17
    10b6:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    10ba:	00 e0       	ldi	r16, 0x00	; 0
    10bc:	10 e0       	ldi	r17, 0x00	; 0
    10be:	98 01       	movw	r18, r16
    10c0:	43 ef       	ldi	r20, 0xF3	; 243
    10c2:	54 e0       	ldi	r21, 0x04	; 4
    10c4:	65 e3       	ldi	r22, 0x35	; 53
    10c6:	7f eb       	ldi	r23, 0xBF	; 191
    10c8:	ce 01       	movw	r24, r28
    10ca:	49 96       	adiw	r24, 0x19	; 25
    10cc:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    10d0:	bc a2       	std	Y+36, r11	; 0x24
    10d2:	ab a2       	std	Y+35, r10	; 0x23
    10d4:	da a2       	std	Y+34, r13	; 0x22
    10d6:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),h_matrix),1);
    10d8:	9e 01       	movw	r18, r28
    10da:	2f 5d       	subi	r18, 0xDF	; 223
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	ae 01       	movw	r20, r28
    10e0:	4d 5d       	subi	r20, 0xDD	; 221
    10e2:	5f 4f       	sbci	r21, 0xFF	; 255
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	c7 01       	movw	r24, r14
    10ea:	0e 94 24 04 	call	0x848	; 0x848 <_ZN5Gates8ampl2vecEiPiS0_>
    10ee:	ae 01       	movw	r20, r28
    10f0:	4f 5f       	subi	r20, 0xFF	; 255
    10f2:	5f 4f       	sbci	r21, 0xFF	; 255
    10f4:	bc 01       	movw	r22, r24
    10f6:	c7 01       	movw	r24, r14
    10f8:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	bc 01       	movw	r22, r24
    1102:	c7 01       	movw	r24, r14
    1104:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN5Gates8vec2amplEP7Complexi>
}
    1108:	a4 96       	adiw	r28, 0x24	; 36
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	08 95       	ret

0000112a <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
    112a:	af 92       	push	r10
    112c:	bf 92       	push	r11
    112e:	cf 92       	push	r12
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	a4 97       	sbiw	r28, 0x24	; 36
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	7c 01       	movw	r14, r24
    1150:	5b 01       	movw	r10, r22
    1152:	6a 01       	movw	r12, r20
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
    1154:	00 e0       	ldi	r16, 0x00	; 0
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	98 01       	movw	r18, r16
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	60 e8       	ldi	r22, 0x80	; 128
    1160:	7f e3       	ldi	r23, 0x3F	; 63
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    116a:	00 e0       	ldi	r16, 0x00	; 0
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	98 01       	movw	r18, r16
    1170:	b9 01       	movw	r22, r18
    1172:	a8 01       	movw	r20, r16
    1174:	ce 01       	movw	r24, r28
    1176:	09 96       	adiw	r24, 0x09	; 9
    1178:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    117c:	00 e0       	ldi	r16, 0x00	; 0
    117e:	10 e0       	ldi	r17, 0x00	; 0
    1180:	98 01       	movw	r18, r16
    1182:	b9 01       	movw	r22, r18
    1184:	a8 01       	movw	r20, r16
    1186:	ce 01       	movw	r24, r28
    1188:	41 96       	adiw	r24, 0x11	; 17
    118a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    118e:	00 e0       	ldi	r16, 0x00	; 0
    1190:	10 e0       	ldi	r17, 0x00	; 0
    1192:	20 e8       	ldi	r18, 0x80	; 128
    1194:	3f e3       	ldi	r19, 0x3F	; 63
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	ba 01       	movw	r22, r20
    119c:	ce 01       	movw	r24, r28
    119e:	49 96       	adiw	r24, 0x19	; 25
    11a0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    11a4:	bc a2       	std	Y+36, r11	; 0x24
    11a6:	ab a2       	std	Y+35, r10	; 0x23
    11a8:	da a2       	std	Y+34, r13	; 0x22
    11aa:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),s_matrix),1);
    11ac:	9e 01       	movw	r18, r28
    11ae:	2f 5d       	subi	r18, 0xDF	; 223
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	ae 01       	movw	r20, r28
    11b4:	4d 5d       	subi	r20, 0xDD	; 221
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	c7 01       	movw	r24, r14
    11be:	0e 94 24 04 	call	0x848	; 0x848 <_ZN5Gates8ampl2vecEiPiS0_>
    11c2:	ae 01       	movw	r20, r28
    11c4:	4f 5f       	subi	r20, 0xFF	; 255
    11c6:	5f 4f       	sbci	r21, 0xFF	; 255
    11c8:	bc 01       	movw	r22, r24
    11ca:	c7 01       	movw	r24, r14
    11cc:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    11d0:	41 e0       	ldi	r20, 0x01	; 1
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	bc 01       	movw	r22, r24
    11d6:	c7 01       	movw	r24, r14
    11d8:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN5Gates8vec2amplEP7Complexi>
}
    11dc:	a4 96       	adiw	r28, 0x24	; 36
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	08 95       	ret

000011fe <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
    11fe:	af 92       	push	r10
    1200:	bf 92       	push	r11
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	a4 97       	sbiw	r28, 0x24	; 36
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	7c 01       	movw	r14, r24
    1224:	5b 01       	movw	r10, r22
    1226:	6a 01       	movw	r12, r20
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
    1228:	00 e0       	ldi	r16, 0x00	; 0
    122a:	10 e0       	ldi	r17, 0x00	; 0
    122c:	98 01       	movw	r18, r16
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	60 e8       	ldi	r22, 0x80	; 128
    1234:	7f e3       	ldi	r23, 0x3F	; 63
    1236:	ce 01       	movw	r24, r28
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    123e:	00 e0       	ldi	r16, 0x00	; 0
    1240:	10 e0       	ldi	r17, 0x00	; 0
    1242:	98 01       	movw	r18, r16
    1244:	b9 01       	movw	r22, r18
    1246:	a8 01       	movw	r20, r16
    1248:	ce 01       	movw	r24, r28
    124a:	09 96       	adiw	r24, 0x09	; 9
    124c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1250:	00 e0       	ldi	r16, 0x00	; 0
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	98 01       	movw	r18, r16
    1256:	b9 01       	movw	r22, r18
    1258:	a8 01       	movw	r20, r16
    125a:	ce 01       	movw	r24, r28
    125c:	41 96       	adiw	r24, 0x11	; 17
    125e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1262:	03 ef       	ldi	r16, 0xF3	; 243
    1264:	14 e0       	ldi	r17, 0x04	; 4
    1266:	25 e3       	ldi	r18, 0x35	; 53
    1268:	3f e3       	ldi	r19, 0x3F	; 63
    126a:	b9 01       	movw	r22, r18
    126c:	a8 01       	movw	r20, r16
    126e:	ce 01       	movw	r24, r28
    1270:	49 96       	adiw	r24, 0x19	; 25
    1272:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
    1276:	bc a2       	std	Y+36, r11	; 0x24
    1278:	ab a2       	std	Y+35, r10	; 0x23
    127a:	da a2       	std	Y+34, r13	; 0x22
    127c:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),t_matrix),1);
    127e:	9e 01       	movw	r18, r28
    1280:	2f 5d       	subi	r18, 0xDF	; 223
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	ae 01       	movw	r20, r28
    1286:	4d 5d       	subi	r20, 0xDD	; 221
    1288:	5f 4f       	sbci	r21, 0xFF	; 255
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	c7 01       	movw	r24, r14
    1290:	0e 94 24 04 	call	0x848	; 0x848 <_ZN5Gates8ampl2vecEiPiS0_>
    1294:	ae 01       	movw	r20, r28
    1296:	4f 5f       	subi	r20, 0xFF	; 255
    1298:	5f 4f       	sbci	r21, 0xFF	; 255
    129a:	bc 01       	movw	r22, r24
    129c:	c7 01       	movw	r24, r14
    129e:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
    12a2:	41 e0       	ldi	r20, 0x01	; 1
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	bc 01       	movw	r22, r24
    12a8:	c7 01       	movw	r24, r14
    12aa:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN5Gates8vec2amplEP7Complexi>
}
    12ae:	a4 96       	adiw	r28, 0x24	; 36
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	bf 90       	pop	r11
    12cc:	af 90       	pop	r10
    12ce:	08 95       	ret

000012d0 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
    12d0:	6f 92       	push	r6
    12d2:	7f 92       	push	r7
    12d4:	8f 92       	push	r8
    12d6:	9f 92       	push	r9
    12d8:	af 92       	push	r10
    12da:	bf 92       	push	r11
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	c8 58       	subi	r28, 0x88	; 136
    12f2:	d1 09       	sbc	r29, r1
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	7c 01       	movw	r14, r24
    1300:	3b 01       	movw	r6, r22
    1302:	5a 01       	movw	r10, r20
    1304:	49 01       	movw	r8, r18
    1306:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
    1308:	00 e0       	ldi	r16, 0x00	; 0
    130a:	10 e0       	ldi	r17, 0x00	; 0
    130c:	98 01       	movw	r18, r16
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	60 e8       	ldi	r22, 0x80	; 128
    1314:	7f e3       	ldi	r23, 0x3F	; 63
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    131e:	00 e0       	ldi	r16, 0x00	; 0
    1320:	10 e0       	ldi	r17, 0x00	; 0
    1322:	98 01       	movw	r18, r16
    1324:	b9 01       	movw	r22, r18
    1326:	a8 01       	movw	r20, r16
    1328:	ce 01       	movw	r24, r28
    132a:	09 96       	adiw	r24, 0x09	; 9
    132c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1330:	00 e0       	ldi	r16, 0x00	; 0
    1332:	10 e0       	ldi	r17, 0x00	; 0
    1334:	98 01       	movw	r18, r16
    1336:	b9 01       	movw	r22, r18
    1338:	a8 01       	movw	r20, r16
    133a:	ce 01       	movw	r24, r28
    133c:	41 96       	adiw	r24, 0x11	; 17
    133e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1342:	00 e0       	ldi	r16, 0x00	; 0
    1344:	10 e0       	ldi	r17, 0x00	; 0
    1346:	98 01       	movw	r18, r16
    1348:	b9 01       	movw	r22, r18
    134a:	a8 01       	movw	r20, r16
    134c:	ce 01       	movw	r24, r28
    134e:	49 96       	adiw	r24, 0x19	; 25
    1350:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1354:	00 e0       	ldi	r16, 0x00	; 0
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	98 01       	movw	r18, r16
    135a:	b9 01       	movw	r22, r18
    135c:	a8 01       	movw	r20, r16
    135e:	ce 01       	movw	r24, r28
    1360:	81 96       	adiw	r24, 0x21	; 33
    1362:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1366:	00 e0       	ldi	r16, 0x00	; 0
    1368:	10 e0       	ldi	r17, 0x00	; 0
    136a:	98 01       	movw	r18, r16
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	60 e8       	ldi	r22, 0x80	; 128
    1372:	7f e3       	ldi	r23, 0x3F	; 63
    1374:	ce 01       	movw	r24, r28
    1376:	89 96       	adiw	r24, 0x29	; 41
    1378:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    137c:	00 e0       	ldi	r16, 0x00	; 0
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	98 01       	movw	r18, r16
    1382:	b9 01       	movw	r22, r18
    1384:	a8 01       	movw	r20, r16
    1386:	ce 01       	movw	r24, r28
    1388:	c1 96       	adiw	r24, 0x31	; 49
    138a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    138e:	00 e0       	ldi	r16, 0x00	; 0
    1390:	10 e0       	ldi	r17, 0x00	; 0
    1392:	98 01       	movw	r18, r16
    1394:	b9 01       	movw	r22, r18
    1396:	a8 01       	movw	r20, r16
    1398:	ce 01       	movw	r24, r28
    139a:	c9 96       	adiw	r24, 0x39	; 57
    139c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    13a0:	00 e0       	ldi	r16, 0x00	; 0
    13a2:	10 e0       	ldi	r17, 0x00	; 0
    13a4:	98 01       	movw	r18, r16
    13a6:	b9 01       	movw	r22, r18
    13a8:	a8 01       	movw	r20, r16
    13aa:	ce 01       	movw	r24, r28
    13ac:	8f 5b       	subi	r24, 0xBF	; 191
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    13b4:	00 e0       	ldi	r16, 0x00	; 0
    13b6:	10 e0       	ldi	r17, 0x00	; 0
    13b8:	98 01       	movw	r18, r16
    13ba:	b9 01       	movw	r22, r18
    13bc:	a8 01       	movw	r20, r16
    13be:	ce 01       	movw	r24, r28
    13c0:	87 5b       	subi	r24, 0xB7	; 183
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    13c8:	00 e0       	ldi	r16, 0x00	; 0
    13ca:	10 e0       	ldi	r17, 0x00	; 0
    13cc:	98 01       	movw	r18, r16
    13ce:	b9 01       	movw	r22, r18
    13d0:	a8 01       	movw	r20, r16
    13d2:	ce 01       	movw	r24, r28
    13d4:	8f 5a       	subi	r24, 0xAF	; 175
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    13dc:	00 e0       	ldi	r16, 0x00	; 0
    13de:	10 e0       	ldi	r17, 0x00	; 0
    13e0:	98 01       	movw	r18, r16
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	60 e8       	ldi	r22, 0x80	; 128
    13e8:	7f e3       	ldi	r23, 0x3F	; 63
    13ea:	ce 01       	movw	r24, r28
    13ec:	87 5a       	subi	r24, 0xA7	; 167
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    13f4:	00 e0       	ldi	r16, 0x00	; 0
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	98 01       	movw	r18, r16
    13fa:	b9 01       	movw	r22, r18
    13fc:	a8 01       	movw	r20, r16
    13fe:	ce 01       	movw	r24, r28
    1400:	8f 59       	subi	r24, 0x9F	; 159
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1408:	00 e0       	ldi	r16, 0x00	; 0
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	98 01       	movw	r18, r16
    140e:	b9 01       	movw	r22, r18
    1410:	a8 01       	movw	r20, r16
    1412:	ce 01       	movw	r24, r28
    1414:	87 59       	subi	r24, 0x97	; 151
    1416:	9f 4f       	sbci	r25, 0xFF	; 255
    1418:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    141c:	00 e0       	ldi	r16, 0x00	; 0
    141e:	10 e0       	ldi	r17, 0x00	; 0
    1420:	98 01       	movw	r18, r16
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	60 e8       	ldi	r22, 0x80	; 128
    1428:	7f e3       	ldi	r23, 0x3F	; 63
    142a:	ce 01       	movw	r24, r28
    142c:	8f 58       	subi	r24, 0x8F	; 143
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1434:	00 e0       	ldi	r16, 0x00	; 0
    1436:	10 e0       	ldi	r17, 0x00	; 0
    1438:	98 01       	movw	r18, r16
    143a:	b9 01       	movw	r22, r18
    143c:	a8 01       	movw	r20, r16
    143e:	ce 01       	movw	r24, r28
    1440:	87 58       	subi	r24, 0x87	; 135
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
    1448:	cb 57       	subi	r28, 0x7B	; 123
    144a:	df 4f       	sbci	r29, 0xFF	; 255
    144c:	79 82       	std	Y+1, r7	; 0x01
    144e:	68 82       	st	Y, r6
    1450:	c5 58       	subi	r28, 0x85	; 133
    1452:	d0 40       	sbci	r29, 0x00	; 0
    1454:	c9 57       	subi	r28, 0x79	; 121
    1456:	df 4f       	sbci	r29, 0xFF	; 255
    1458:	99 82       	std	Y+1, r9	; 0x01
    145a:	88 82       	st	Y, r8
    145c:	c7 58       	subi	r28, 0x87	; 135
    145e:	d0 40       	sbci	r29, 0x00	; 0
    1460:	cf 57       	subi	r28, 0x7F	; 127
    1462:	df 4f       	sbci	r29, 0xFF	; 255
    1464:	b9 82       	std	Y+1, r11	; 0x01
    1466:	a8 82       	st	Y, r10
    1468:	c1 58       	subi	r28, 0x81	; 129
    146a:	d0 40       	sbci	r29, 0x00	; 0
    146c:	cd 57       	subi	r28, 0x7D	; 125
    146e:	df 4f       	sbci	r29, 0xFF	; 255
    1470:	d9 82       	std	Y+1, r13	; 0x01
    1472:	c8 82       	st	Y, r12
    1474:	c3 58       	subi	r28, 0x83	; 131
    1476:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix),2);
    1478:	9e 01       	movw	r18, r28
    147a:	2f 57       	subi	r18, 0x7F	; 127
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	ae 01       	movw	r20, r28
    1480:	4b 57       	subi	r20, 0x7B	; 123
    1482:	5f 4f       	sbci	r21, 0xFF	; 255
    1484:	62 e0       	ldi	r22, 0x02	; 2
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	c7 01       	movw	r24, r14
    148a:	0e 94 24 04 	call	0x848	; 0x848 <_ZN5Gates8ampl2vecEiPiS0_>
    148e:	ae 01       	movw	r20, r28
    1490:	4f 5f       	subi	r20, 0xFF	; 255
    1492:	5f 4f       	sbci	r21, 0xFF	; 255
    1494:	bc 01       	movw	r22, r24
    1496:	c7 01       	movw	r24, r14
    1498:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    149c:	42 e0       	ldi	r20, 0x02	; 2
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	bc 01       	movw	r22, r24
    14a2:	c7 01       	movw	r24, r14
    14a4:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN5Gates8vec2amplEP7Complexi>
}
    14a8:	c8 57       	subi	r28, 0x78	; 120
    14aa:	df 4f       	sbci	r29, 0xFF	; 255
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	df 90       	pop	r13
    14c4:	cf 90       	pop	r12
    14c6:	bf 90       	pop	r11
    14c8:	af 90       	pop	r10
    14ca:	9f 90       	pop	r9
    14cc:	8f 90       	pop	r8
    14ce:	7f 90       	pop	r7
    14d0:	6f 90       	pop	r6
    14d2:	08 95       	ret

000014d4 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include <stdarg.h>
#include <stdlib.h>
#include <avr/eeprom.h>
Gates::Gates(){setup_seed();}

Serial s;
    14d4:	8b ed       	ldi	r24, 0xDB	; 219
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6SerialC1Ev>
    14dc:	08 95       	ret

000014de <main>:
#include "qepu.h"
int main(void){
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <main+0x6>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <main+0x8>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <main+0xa>
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    14ec:	ce 01       	movw	r24, r28
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <_ZN4QEPUC1Ev>
	qepu.run();
    14f4:	ce 01       	movw	r24, r28
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN4QEPU3runEv>
    14fc:	ff cf       	rjmp	.-2      	; 0x14fc <main+0x1e>

000014fe <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	ec 01       	movw	r28, r24
    1504:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN6EEPromC1Ev>
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN6SerialC1Ev>
    1510:	ce 01       	movw	r24, r28
    1512:	05 96       	adiw	r24, 0x05	; 5
    1514:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN5GatesC1Ev>
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	8a bb       	out	0x1a, r24	; 26
    151c:	1c 82       	std	Y+4, r1	; 0x04
    151e:	1b 82       	std	Y+3, r1	; 0x03
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    1526:	7b b3       	in	r23, 0x1b	; 27
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	c9 01       	movw	r24, r18
    152e:	06 2e       	mov	r0, r22
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <_ZN4QEPU10setctrlpinEii+0x10>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <_ZN4QEPU10setctrlpinEii+0xc>
    153a:	80 95       	com	r24
    153c:	87 23       	and	r24, r23
    153e:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    1540:	8b b3       	in	r24, 0x1b	; 27
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <_ZN4QEPU10setctrlpinEii+0x22>
    1544:	44 0f       	add	r20, r20
    1546:	55 1f       	adc	r21, r21
    1548:	6a 95       	dec	r22
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <_ZN4QEPU10setctrlpinEii+0x1e>
    154c:	48 2b       	or	r20, r24
    154e:	4b bb       	out	0x1b, r20	; 27
    1550:	08 95       	ret

00001552 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    155c:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    155e:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    1560:	64 e0       	ldi	r22, 0x04	; 4
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	ce 01       	movw	r24, r28
    1566:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    156a:	41 e0       	ldi	r20, 0x01	; 1
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	66 e0       	ldi	r22, 0x06	; 6
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	ce 01       	movw	r24, r28
    1574:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	66 e0       	ldi	r22, 0x06	; 6
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	ce 01       	movw	r24, r28
    1582:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    1586:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	08 95       	ret

0000158e <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	ec 01       	movw	r28, r24
    1598:	8a 01       	movw	r16, r20
	DDRB=0x00;
    159a:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    159c:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    159e:	41 e0       	ldi	r20, 0x01	; 1
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	65 e0       	ldi	r22, 0x05	; 5
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    15aa:	a8 01       	movw	r20, r16
    15ac:	64 e0       	ldi	r22, 0x04	; 4
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	ce 01       	movw	r24, r28
    15b2:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    15b6:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    15b8:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    15ba:	9f ef       	ldi	r25, 0xFF	; 255
    15bc:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	08 95       	ret

000015ca <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    15ca:	6f 92       	push	r6
    15cc:	7f 92       	push	r7
    15ce:	8f 92       	push	r8
    15d0:	9f 92       	push	r9
    15d2:	af 92       	push	r10
    15d4:	bf 92       	push	r11
    15d6:	cf 92       	push	r12
    15d8:	df 92       	push	r13
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	6c 01       	movw	r12, r24
	serial.writestrln("");
    15e8:	8c 01       	movw	r16, r24
    15ea:	0f 5f       	subi	r16, 0xFF	; 255
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
    15ee:	6a ec       	ldi	r22, 0xCA	; 202
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	c8 01       	movw	r24, r16
    15f4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    15f8:	61 ea       	ldi	r22, 0xA1	; 161
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	c8 01       	movw	r24, r16
    15fe:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    1602:	c0 e0       	ldi	r28, 0x00	; 0
    1604:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    1606:	0f 2e       	mov	r0, r31
    1608:	fb eb       	ldi	r31, 0xBB	; 187
    160a:	ef 2e       	mov	r14, r31
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	ff 2e       	mov	r15, r31
    1610:	f0 2d       	mov	r31, r0
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
    161a:	88 2e       	mov	r8, r24
    161c:	99 2e       	mov	r9, r25
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	be 01       	movw	r22, r28
    1624:	c6 01       	movw	r24, r12
    1626:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    162a:	9f 93       	push	r25
    162c:	8f 93       	push	r24
    162e:	ff 92       	push	r15
    1630:	ef 92       	push	r14
    1632:	9f 92       	push	r9
    1634:	8f 92       	push	r8
    1636:	0e 94 5f 15 	call	0x2abe	; 0x2abe <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
    1642:	a8 2e       	mov	r10, r24
    1644:	b9 2e       	mov	r11, r25
    1646:	41 e0       	ldi	r20, 0x01	; 1
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	be 01       	movw	r22, r28
    164c:	c6 01       	movw	r24, r12
    164e:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1652:	9f 93       	push	r25
    1654:	8f 93       	push	r24
    1656:	ff 92       	push	r15
    1658:	ef 92       	push	r14
    165a:	bf 92       	push	r11
    165c:	af 92       	push	r10
    165e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
    166a:	68 2e       	mov	r6, r24
    166c:	79 2e       	mov	r7, r25
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	ff 92       	push	r15
    1674:	ef 92       	push	r14
    1676:	7f 92       	push	r7
    1678:	6f 92       	push	r6
    167a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    167e:	6e eb       	ldi	r22, 0xBE	; 190
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	c8 01       	movw	r24, r16
    1684:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
    1688:	66 2d       	mov	r22, r6
    168a:	77 2d       	mov	r23, r7
    168c:	c8 01       	movw	r24, r16
    168e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
    1692:	60 ec       	ldi	r22, 0xC0	; 192
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	c8 01       	movw	r24, r16
    1698:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    169c:	68 2d       	mov	r22, r8
    169e:	79 2d       	mov	r23, r9
    16a0:	c8 01       	movw	r24, r16
    16a2:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    16a6:	6b ec       	ldi	r22, 0xCB	; 203
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	c8 01       	movw	r24, r16
    16ac:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    16b0:	6a 2d       	mov	r22, r10
    16b2:	7b 2d       	mov	r23, r11
    16b4:	c8 01       	movw	r24, r16
    16b6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    16ba:	21 96       	adiw	r28, 0x01	; 1
    16bc:	8d b7       	in	r24, 0x3d	; 61
    16be:	9e b7       	in	r25, 0x3e	; 62
    16c0:	42 96       	adiw	r24, 0x12	; 18
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	9e bf       	out	0x3e, r25	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	8d bf       	out	0x3d, r24	; 61
    16cc:	c4 30       	cpi	r28, 0x04	; 4
    16ce:	d1 05       	cpc	r29, r1
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <_ZN4QEPU7dumpmemEv+0x10a>
    16d2:	9f cf       	rjmp	.-194    	; 0x1612 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	9f 90       	pop	r9
    16ea:	8f 90       	pop	r8
    16ec:	7f 90       	pop	r7
    16ee:	6f 90       	pop	r6
    16f0:	08 95       	ret

000016f2 <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    16f2:	cf 92       	push	r12
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	d6 2f       	mov	r29, r22
    1704:	c7 2f       	mov	r28, r23
    1706:	e6 2f       	mov	r30, r22
    1708:	f7 2f       	mov	r31, r23
	int c_length=0;
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    170e:	21 91       	ld	r18, Z+
    1710:	2f 3f       	cpi	r18, 0xFF	; 255
    1712:	89 f4       	brne	.+34     	; 0x1736 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1714:	df 01       	movw	r26, r30
    1716:	12 97       	sbiw	r26, 0x02	; 2
    1718:	4c 91       	ld	r20, X
    171a:	4f 3f       	cpi	r20, 0xFF	; 255
    171c:	61 f4       	brne	.+24     	; 0x1736 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    171e:	11 97       	sbiw	r26, 0x01	; 1
    1720:	4c 91       	ld	r20, X
    1722:	4f 3f       	cpi	r20, 0xFF	; 255
    1724:	41 f4       	brne	.+16     	; 0x1736 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1726:	11 97       	sbiw	r26, 0x01	; 1
    1728:	4c 91       	ld	r20, X
    172a:	4f 3f       	cpi	r20, 0xFF	; 255
    172c:	21 f4       	brne	.+8      	; 0x1736 <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    172e:	11 97       	sbiw	r26, 0x01	; 1
    1730:	2c 91       	ld	r18, X
    1732:	2f 3f       	cpi	r18, 0xFF	; 255
    1734:	11 f0       	breq	.+4      	; 0x173a <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	ea cf       	rjmp	.-44     	; 0x170e <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    173a:	8c 01       	movw	r16, r24
    173c:	04 50       	subi	r16, 0x04	; 4
    173e:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    1740:	6c 01       	movw	r12, r24
    1742:	2f ef       	ldi	r18, 0xFF	; 255
    1744:	c2 1a       	sub	r12, r18
    1746:	d2 0a       	sbc	r13, r18
    1748:	76 01       	movw	r14, r12
    174a:	ee 0c       	add	r14, r14
    174c:	ff 1c       	adc	r15, r15
    174e:	c7 01       	movw	r24, r14
    1750:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    1754:	10 16       	cp	r1, r16
    1756:	11 06       	cpc	r1, r17
    1758:	74 f4       	brge	.+28     	; 0x1776 <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    175a:	dc 01       	movw	r26, r24
    175c:	ed 2f       	mov	r30, r29
    175e:	fc 2f       	mov	r31, r28
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	41 91       	ld	r20, Z+
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	4d 93       	st	X+, r20
    176a:	5d 93       	st	X+, r21
    176c:	2f 5f       	subi	r18, 0xFF	; 255
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	20 17       	cp	r18, r16
    1772:	31 07       	cpc	r19, r17
    1774:	bc f3       	brlt	.-18     	; 0x1764 <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    1776:	0c 15       	cp	r16, r12
    1778:	1d 05       	cpc	r17, r13
    177a:	7c f4       	brge	.+30     	; 0x179a <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    177c:	f7 01       	movw	r30, r14
    177e:	3a 97       	sbiw	r30, 0x0a	; 10
    1780:	e8 0f       	add	r30, r24
    1782:	f9 1f       	adc	r31, r25
    1784:	25 e0       	ldi	r18, 0x05	; 5
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4f ef       	ldi	r20, 0xFF	; 255
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	41 93       	st	Z+, r20
    178e:	51 93       	st	Z+, r21
    1790:	21 50       	subi	r18, 0x01	; 1
    1792:	31 09       	sbc	r19, r1
    1794:	21 15       	cp	r18, r1
    1796:	31 05       	cpc	r19, r1
    1798:	c9 f7       	brne	.-14     	; 0x178c <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	08 95       	ret

000017ac <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	c4 56       	subi	r28, 0x64	; 100
    17ba:	d1 09       	sbc	r29, r1
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
	//char str[countdigits(dec)+1];
	char str[100];
	sprintf(str,"%d",dec);
    17c6:	7f 93       	push	r23
    17c8:	6f 93       	push	r22
    17ca:	8b eb       	ldi	r24, 0xBB	; 187
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9f 93       	push	r25
    17d0:	8f 93       	push	r24
    17d2:	8e 01       	movw	r16, r28
    17d4:	0f 5f       	subi	r16, 0xFF	; 255
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	1f 93       	push	r17
    17da:	0f 93       	push	r16
    17dc:	0e 94 5f 15 	call	0x2abe	; 0x2abe <sprintf>
	return str;
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
}
    17ec:	c8 01       	movw	r24, r16
    17ee:	cc 59       	subi	r28, 0x9C	; 156
    17f0:	df 4f       	sbci	r29, 0xFF	; 255
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	08 95       	ret

00001806 <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    1806:	61 15       	cp	r22, r1
    1808:	71 05       	cpc	r23, r1
    180a:	59 f0       	breq	.+22     	; 0x1822 <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    180c:	8f e9       	ldi	r24, 0x9F	; 159
    180e:	9f e0       	ldi	r25, 0x0F	; 15
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <_ZN4QEPU5Utils5delayEi+0xa>
    1814:	00 c0       	rjmp	.+0      	; 0x1816 <_ZN4QEPU5Utils5delayEi+0x10>
    1816:	00 00       	nop
    1818:	61 50       	subi	r22, 0x01	; 1
    181a:	71 09       	sbc	r23, r1
    181c:	61 15       	cp	r22, r1
    181e:	71 05       	cpc	r23, r1
    1820:	a9 f7       	brne	.-22     	; 0x180c <_ZN4QEPU5Utils5delayEi+0x6>
}
    1822:	08 95       	ret

00001824 <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    1824:	2f 92       	push	r2
    1826:	3f 92       	push	r3
    1828:	4f 92       	push	r4
    182a:	5f 92       	push	r5
    182c:	6f 92       	push	r6
    182e:	7f 92       	push	r7
    1830:	8f 92       	push	r8
    1832:	9f 92       	push	r9
    1834:	af 92       	push	r10
    1836:	bf 92       	push	r11
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	ec 01       	movw	r28, r24
    184a:	1b 01       	movw	r2, r22
    184c:	29 01       	movw	r4, r18
    184e:	3a 01       	movw	r6, r20
    1850:	47 01       	movw	r8, r14
    1852:	58 01       	movw	r10, r16
	int * newthephi=(int*)malloc(sizeof(int)*2);
    1854:	84 e0       	ldi	r24, 0x04	; 4
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 9e 12 	call	0x253c	; 0x253c <malloc>
    185c:	6c 01       	movw	r12, r24
	
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    185e:	f1 01       	movw	r30, r2
    1860:	31 97       	sbiw	r30, 0x01	; 1
    1862:	e6 31       	cpi	r30, 0x16	; 22
    1864:	f1 05       	cpc	r31, r1
    1866:	08 f0       	brcs	.+2      	; 0x186a <_ZN4QEPU7executeEill+0x46>
    1868:	47 c1       	rjmp	.+654    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
    186a:	e6 5d       	subi	r30, 0xD6	; 214
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	b7 01       	movw	r22, r14
    1878:	ce 01       	movw	r24, r28
    187a:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    187e:	9c 01       	movw	r18, r24
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	b2 01       	movw	r22, r4
    1886:	ce 01       	movw	r24, r28
    1888:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	b7 01       	movw	r22, r14
    1892:	ce 01       	movw	r24, r28
    1894:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1898:	9c 01       	movw	r18, r24
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	50 e0       	ldi	r21, 0x00	; 0
    189e:	b2 01       	movw	r22, r4
    18a0:	ce 01       	movw	r24, r28
    18a2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
		break;
    18a6:	28 c1       	rjmp	.+592    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	48 1a       	sub	r4, r24
    18ac:	51 08       	sbc	r5, r1
    18ae:	5c 82       	std	Y+4, r5	; 0x04
    18b0:	4b 82       	std	Y+3, r4	; 0x03
		break;
    18b2:	22 c1       	rjmp	.+580    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    18b4:	b2 01       	movw	r22, r4
    18b6:	ce 01       	movw	r24, r28
    18b8:	02 96       	adiw	r24, 0x02	; 2
    18ba:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN4QEPU5Utils5delayEi>
    18be:	1c c1       	rjmp	.+568    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    18c0:	97 01       	movw	r18, r14
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	b2 01       	movw	r22, r4
    18c8:	ce 01       	movw	r24, r28
    18ca:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
		break;
    18ce:	14 c1       	rjmp	.+552    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    18d0:	97 01       	movw	r18, r14
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	b2 01       	movw	r22, r4
    18d8:	ce 01       	movw	r24, r28
    18da:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
		break;
    18de:	0c c1       	rjmp	.+536    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    18e0:	41 e0       	ldi	r20, 0x01	; 1
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	b2 01       	movw	r22, r4
    18e6:	ce 01       	movw	r24, r28
    18e8:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    18ec:	8c 01       	movw	r16, r24
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	b2 01       	movw	r22, r4
    18f4:	ce 01       	movw	r24, r28
    18f6:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    18fa:	a8 01       	movw	r20, r16
    18fc:	bc 01       	movw	r22, r24
    18fe:	ce 01       	movw	r24, r28
    1900:	05 96       	adiw	r24, 0x05	; 5
    1902:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZN5Gates1XEii>
    1906:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1908:	fc 01       	movw	r30, r24
    190a:	20 81       	ld	r18, Z
    190c:	31 81       	ldd	r19, Z+1	; 0x01
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	b2 01       	movw	r22, r4
    1914:	ce 01       	movw	r24, r28
    1916:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
    191a:	f6 01       	movw	r30, r12
    191c:	22 81       	ldd	r18, Z+2	; 0x02
    191e:	33 81       	ldd	r19, Z+3	; 0x03
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	b2 01       	movw	r22, r4
    1926:	ce 01       	movw	r24, r28
    1928:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
		break;
    192c:	e5 c0       	rjmp	.+458    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	b2 01       	movw	r22, r4
    1934:	ce 01       	movw	r24, r28
    1936:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    193a:	8c 01       	movw	r16, r24
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	b2 01       	movw	r22, r4
    1942:	ce 01       	movw	r24, r28
    1944:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1948:	a8 01       	movw	r20, r16
    194a:	bc 01       	movw	r22, r24
    194c:	ce 01       	movw	r24, r28
    194e:	05 96       	adiw	r24, 0x05	; 5
    1950:	0e 94 53 07 	call	0xea6	; 0xea6 <_ZN5Gates1YEii>
    1954:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1956:	fc 01       	movw	r30, r24
    1958:	20 81       	ld	r18, Z
    195a:	31 81       	ldd	r19, Z+1	; 0x01
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	b2 01       	movw	r22, r4
    1962:	ce 01       	movw	r24, r28
    1964:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
    1968:	f6 01       	movw	r30, r12
    196a:	22 81       	ldd	r18, Z+2	; 0x02
    196c:	33 81       	ldd	r19, Z+3	; 0x03
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	b2 01       	movw	r22, r4
    1974:	ce 01       	movw	r24, r28
    1976:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
		break;
    197a:	be c0       	rjmp	.+380    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	b2 01       	movw	r22, r4
    1982:	ce 01       	movw	r24, r28
    1984:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1988:	8c 01       	movw	r16, r24
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	b2 01       	movw	r22, r4
    1990:	ce 01       	movw	r24, r28
    1992:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1996:	a8 01       	movw	r20, r16
    1998:	bc 01       	movw	r22, r24
    199a:	ce 01       	movw	r24, r28
    199c:	05 96       	adiw	r24, 0x05	; 5
    199e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN5Gates1ZEii>
    19a2:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    19a4:	fc 01       	movw	r30, r24
    19a6:	20 81       	ld	r18, Z
    19a8:	31 81       	ldd	r19, Z+1	; 0x01
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	b2 01       	movw	r22, r4
    19b0:	ce 01       	movw	r24, r28
    19b2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
    19b6:	f6 01       	movw	r30, r12
    19b8:	22 81       	ldd	r18, Z+2	; 0x02
    19ba:	33 81       	ldd	r19, Z+3	; 0x03
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	b2 01       	movw	r22, r4
    19c2:	ce 01       	movw	r24, r28
    19c4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
		break;
    19c8:	97 c0       	rjmp	.+302    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	50 e0       	ldi	r21, 0x00	; 0
    19ce:	b2 01       	movw	r22, r4
    19d0:	ce 01       	movw	r24, r28
    19d2:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    19d6:	8c 01       	movw	r16, r24
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	b2 01       	movw	r22, r4
    19de:	ce 01       	movw	r24, r28
    19e0:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    19e4:	a8 01       	movw	r20, r16
    19e6:	bc 01       	movw	r22, r24
    19e8:	ce 01       	movw	r24, r28
    19ea:	05 96       	adiw	r24, 0x05	; 5
    19ec:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN5Gates1HEii>
    19f0:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    19f2:	fc 01       	movw	r30, r24
    19f4:	20 81       	ld	r18, Z
    19f6:	31 81       	ldd	r19, Z+1	; 0x01
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	b2 01       	movw	r22, r4
    19fe:	ce 01       	movw	r24, r28
    1a00:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
    1a04:	f6 01       	movw	r30, r12
    1a06:	22 81       	ldd	r18, Z+2	; 0x02
    1a08:	33 81       	ldd	r19, Z+3	; 0x03
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	b2 01       	movw	r22, r4
    1a10:	ce 01       	movw	r24, r28
    1a12:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
		break;
    1a16:	70 c0       	rjmp	.+224    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    1a18:	41 e0       	ldi	r20, 0x01	; 1
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	b2 01       	movw	r22, r4
    1a1e:	ce 01       	movw	r24, r28
    1a20:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1a24:	8c 01       	movw	r16, r24
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	b2 01       	movw	r22, r4
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1a32:	a8 01       	movw	r20, r16
    1a34:	bc 01       	movw	r22, r24
    1a36:	ce 01       	movw	r24, r28
    1a38:	05 96       	adiw	r24, 0x05	; 5
    1a3a:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN5Gates1SEii>
    1a3e:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1a40:	fc 01       	movw	r30, r24
    1a42:	20 81       	ld	r18, Z
    1a44:	31 81       	ldd	r19, Z+1	; 0x01
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	b2 01       	movw	r22, r4
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
    1a52:	f6 01       	movw	r30, r12
    1a54:	22 81       	ldd	r18, Z+2	; 0x02
    1a56:	33 81       	ldd	r19, Z+3	; 0x03
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	b2 01       	movw	r22, r4
    1a5e:	ce 01       	movw	r24, r28
    1a60:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
		break;
    1a64:	49 c0       	rjmp	.+146    	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	b2 01       	movw	r22, r4
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1a72:	8c 01       	movw	r16, r24
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	b2 01       	movw	r22, r4
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1a80:	a8 01       	movw	r20, r16
    1a82:	bc 01       	movw	r22, r24
    1a84:	ce 01       	movw	r24, r28
    1a86:	05 96       	adiw	r24, 0x05	; 5
    1a88:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN5Gates1TEii>
    1a8c:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1a8e:	fc 01       	movw	r30, r24
    1a90:	20 81       	ld	r18, Z
    1a92:	31 81       	ldd	r19, Z+1	; 0x01
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	b2 01       	movw	r22, r4
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
    1aa0:	f6 01       	movw	r30, r12
    1aa2:	22 81       	ldd	r18, Z+2	; 0x02
    1aa4:	33 81       	ldd	r19, Z+3	; 0x03
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	b2 01       	movw	r22, r4
    1aac:	ce 01       	movw	r24, r28
    1aae:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN4QEPU5writeEiii>
		break;
    1ab2:	22 c0       	rjmp	.+68     	; 0x1af8 <_ZN4QEPU7executeEill+0x2d4>
		//2 QUBIT GATES -
		case 0x16: 
			gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	b7 01       	movw	r22, r14
    1aba:	ce 01       	movw	r24, r28
    1abc:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1ac0:	8c 01       	movw	r16, r24
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	b4 01       	movw	r22, r8
    1ac8:	ce 01       	movw	r24, r28
    1aca:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1ace:	5c 01       	movw	r10, r24
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	b2 01       	movw	r22, r4
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1adc:	7c 01       	movw	r14, r24
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	b2 01       	movw	r22, r4
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN4QEPU4readEii>
    1aea:	95 01       	movw	r18, r10
    1aec:	a7 01       	movw	r20, r14
    1aee:	bc 01       	movw	r22, r24
    1af0:	ce 01       	movw	r24, r28
    1af2:	05 96       	adiw	r24, 0x05	; 5
    1af4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_ZN5Gates3CNOEiiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    1af8:	c6 01       	movw	r24, r12
    1afa:	0e 94 36 13 	call	0x266c	; 0x266c <free>
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	df 90       	pop	r13
    1b0c:	cf 90       	pop	r12
    1b0e:	bf 90       	pop	r11
    1b10:	af 90       	pop	r10
    1b12:	9f 90       	pop	r9
    1b14:	8f 90       	pop	r8
    1b16:	7f 90       	pop	r7
    1b18:	6f 90       	pop	r6
    1b1a:	5f 90       	pop	r5
    1b1c:	4f 90       	pop	r4
    1b1e:	3f 90       	pop	r3
    1b20:	2f 90       	pop	r2
    1b22:	08 95       	ret

00001b24 <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    1b24:	2f 92       	push	r2
    1b26:	3f 92       	push	r3
    1b28:	4f 92       	push	r4
    1b2a:	5f 92       	push	r5
    1b2c:	6f 92       	push	r6
    1b2e:	7f 92       	push	r7
    1b30:	8f 92       	push	r8
    1b32:	9f 92       	push	r9
    1b34:	af 92       	push	r10
    1b36:	bf 92       	push	r11
    1b38:	cf 92       	push	r12
    1b3a:	df 92       	push	r13
    1b3c:	ef 92       	push	r14
    1b3e:	ff 92       	push	r15
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	c0 57       	subi	r28, 0x70	; 112
    1b4e:	d1 09       	sbc	r29, r1
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    1b5c:	0e 94 22 02 	call	0x444	; 0x444 <_ZN6EEProm7readallEv>
    1b60:	bc 01       	movw	r22, r24
    1b62:	c3 01       	movw	r24, r6
    1b64:	02 96       	adiw	r24, 0x02	; 2
    1b66:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN4QEPU5Utils10str2intarrEPc>
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    1b72:	40 85       	ldd	r20, Z+8	; 0x08
    1b74:	51 85       	ldd	r21, Z+9	; 0x09
    1b76:	4f 3f       	cpi	r20, 0xFF	; 255
    1b78:	51 05       	cpc	r21, r1
    1b7a:	a1 f4       	brne	.+40     	; 0x1ba4 <_ZN4QEPU3runEv+0x80>
    1b7c:	46 81       	ldd	r20, Z+6	; 0x06
    1b7e:	57 81       	ldd	r21, Z+7	; 0x07
    1b80:	4f 3f       	cpi	r20, 0xFF	; 255
    1b82:	51 05       	cpc	r21, r1
    1b84:	79 f4       	brne	.+30     	; 0x1ba4 <_ZN4QEPU3runEv+0x80>
    1b86:	44 81       	ldd	r20, Z+4	; 0x04
    1b88:	55 81       	ldd	r21, Z+5	; 0x05
    1b8a:	4f 3f       	cpi	r20, 0xFF	; 255
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	51 f4       	brne	.+20     	; 0x1ba4 <_ZN4QEPU3runEv+0x80>
    1b90:	42 81       	ldd	r20, Z+2	; 0x02
    1b92:	53 81       	ldd	r21, Z+3	; 0x03
    1b94:	4f 3f       	cpi	r20, 0xFF	; 255
    1b96:	51 05       	cpc	r21, r1
    1b98:	29 f4       	brne	.+10     	; 0x1ba4 <_ZN4QEPU3runEv+0x80>
    1b9a:	40 81       	ld	r20, Z
    1b9c:	51 81       	ldd	r21, Z+1	; 0x01
    1b9e:	4f 3f       	cpi	r20, 0xFF	; 255
    1ba0:	51 05       	cpc	r21, r1
    1ba2:	21 f0       	breq	.+8      	; 0x1bac <_ZN4QEPU3runEv+0x88>
    1ba4:	2f 5f       	subi	r18, 0xFF	; 255
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba8:	32 96       	adiw	r30, 0x02	; 2
    1baa:	e3 cf       	rjmp	.-58     	; 0x1b72 <_ZN4QEPU3runEv+0x4e>
    1bac:	a9 01       	movw	r20, r18
    1bae:	44 50       	subi	r20, 0x04	; 4
    1bb0:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1bb2:	14 16       	cp	r1, r20
    1bb4:	15 06       	cpc	r1, r21
    1bb6:	0c f0       	brlt	.+2      	; 0x1bba <_ZN4QEPU3runEv+0x96>
    1bb8:	07 c1       	rjmp	.+526    	; 0x1dc8 <_ZN4QEPU3runEv+0x2a4>
    1bba:	fc 01       	movw	r30, r24
    1bbc:	25 50       	subi	r18, 0x05	; 5
    1bbe:	31 09       	sbc	r19, r1
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	41 2c       	mov	r4, r1
    1bca:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    1bcc:	c1 2c       	mov	r12, r1
    1bce:	d1 2c       	mov	r13, r1
    1bd0:	0c c0       	rjmp	.+24     	; 0x1bea <_ZN4QEPU3runEv+0xc6>
    1bd2:	69 30       	cpi	r22, 0x09	; 9
    1bd4:	71 05       	cpc	r23, r1
    1bd6:	34 f0       	brlt	.+12     	; 0x1be4 <_ZN4QEPU3runEv+0xc0>
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	48 1a       	sub	r4, r24
    1bdc:	58 0a       	sbc	r5, r24
    1bde:	8c 2d       	mov	r24, r12
    1be0:	9d 2d       	mov	r25, r13
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    1be4:	cb 01       	movw	r24, r22
    1be6:	4f 5f       	subi	r20, 0xFF	; 255
    1be8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bea:	bc 01       	movw	r22, r24
    1bec:	6f 5f       	subi	r22, 0xFF	; 255
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	01 91       	ld	r16, Z+
    1bf2:	11 91       	ld	r17, Z+
    1bf4:	d2 01       	movw	r26, r4
    1bf6:	aa 0f       	add	r26, r26
    1bf8:	bb 1f       	adc	r27, r27
    1bfa:	aa 0f       	add	r26, r26
    1bfc:	bb 1f       	adc	r27, r27
    1bfe:	aa 0f       	add	r26, r26
    1c00:	bb 1f       	adc	r27, r27
    1c02:	a4 0d       	add	r26, r4
    1c04:	b5 1d       	adc	r27, r5
    1c06:	8a 0f       	add	r24, r26
    1c08:	9b 1f       	adc	r25, r27
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	aa 0f       	add	r26, r26
    1c0e:	bb 1f       	adc	r27, r27
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	8c 0f       	add	r24, r28
    1c16:	9d 1f       	adc	r25, r29
    1c18:	a8 0f       	add	r26, r24
    1c1a:	b9 1f       	adc	r27, r25
    1c1c:	0d 93       	st	X+, r16
    1c1e:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1c20:	42 17       	cp	r20, r18
    1c22:	53 07       	cpc	r21, r19
    1c24:	b1 f6       	brne	.-84     	; 0x1bd2 <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1c26:	f3 01       	movw	r30, r6
    1c28:	14 82       	std	Z+4, r1	; 0x04
    1c2a:	13 82       	std	Z+3, r1	; 0x03
    1c2c:	14 14       	cp	r1, r4
    1c2e:	15 04       	cpc	r1, r5
    1c30:	0c f0       	brlt	.+2      	; 0x1c34 <_ZN4QEPU3runEv+0x110>
    1c32:	c6 c0       	rjmp	.+396    	; 0x1dc0 <_ZN4QEPU3runEv+0x29c>
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1c38:	5e 01       	movw	r10, r28
    1c3a:	f2 e6       	ldi	r31, 0x62	; 98
    1c3c:	af 0e       	add	r10, r31
    1c3e:	b1 1c       	adc	r11, r1
    1c40:	6e 01       	movw	r12, r28
    1c42:	2b e5       	ldi	r18, 0x5B	; 91
    1c44:	c2 0e       	add	r12, r18
    1c46:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1c48:	0f 2e       	mov	r0, r31
    1c4a:	f5 ed       	ldi	r31, 0xD5	; 213
    1c4c:	8f 2e       	mov	r8, r31
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	9f 2e       	mov	r9, r31
    1c52:	f0 2d       	mov	r31, r0
    1c54:	ae 96       	adiw	r28, 0x2e	; 46
    1c56:	af ae       	std	Y+63, r10	; 0x3f
    1c58:	ae 97       	sbiw	r28, 0x2e	; 46
    1c5a:	af 96       	adiw	r28, 0x2f	; 47
    1c5c:	bf ae       	std	Y+63, r11	; 0x3f
    1c5e:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1c60:	e0 96       	adiw	r28, 0x30	; 48
    1c62:	cf ae       	std	Y+63, r12	; 0x3f
    1c64:	e0 97       	sbiw	r28, 0x30	; 48
    1c66:	e1 96       	adiw	r28, 0x31	; 49
    1c68:	df ae       	std	Y+63, r13	; 0x3f
    1c6a:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1c6c:	f5 01       	movw	r30, r10
    1c6e:	10 82       	st	Z, r1
    1c70:	11 82       	std	Z+1, r1	; 0x01
    1c72:	12 82       	std	Z+2, r1	; 0x02
    1c74:	13 82       	std	Z+3, r1	; 0x03
    1c76:	14 82       	std	Z+4, r1	; 0x04
    1c78:	15 82       	std	Z+5, r1	; 0x05
    1c7a:	16 82       	std	Z+6, r1	; 0x06
    1c7c:	f6 01       	movw	r30, r12
    1c7e:	10 82       	st	Z, r1
    1c80:	11 82       	std	Z+1, r1	; 0x01
    1c82:	12 82       	std	Z+2, r1	; 0x02
    1c84:	13 82       	std	Z+3, r1	; 0x03
    1c86:	14 82       	std	Z+4, r1	; 0x04
    1c88:	15 82       	std	Z+5, r1	; 0x05
    1c8a:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	fc 01       	movw	r30, r24
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	ee 0f       	add	r30, r30
    1c98:	ff 1f       	adc	r31, r31
    1c9a:	ee 0f       	add	r30, r30
    1c9c:	ff 1f       	adc	r31, r31
    1c9e:	8e 0f       	add	r24, r30
    1ca0:	9f 1f       	adc	r25, r31
    1ca2:	e1 e0       	ldi	r30, 0x01	; 1
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	ec 0f       	add	r30, r28
    1ca8:	fd 1f       	adc	r31, r29
    1caa:	e8 0f       	add	r30, r24
    1cac:	f9 1f       	adc	r31, r25
    1cae:	20 80       	ld	r2, Z
    1cb0:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1cb2:	00 e0       	ldi	r16, 0x00	; 0
    1cb4:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    1cb6:	0f 5f       	subi	r16, 0xFF	; 255
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	f3 01       	movw	r30, r6
    1cbc:	83 81       	ldd	r24, Z+3	; 0x03
    1cbe:	94 81       	ldd	r25, Z+4	; 0x04
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	ee 0f       	add	r30, r30
    1cc4:	ff 1f       	adc	r31, r31
    1cc6:	ee 0f       	add	r30, r30
    1cc8:	ff 1f       	adc	r31, r31
    1cca:	ee 0f       	add	r30, r30
    1ccc:	ff 1f       	adc	r31, r31
    1cce:	8e 0f       	add	r24, r30
    1cd0:	9f 1f       	adc	r25, r31
    1cd2:	80 0f       	add	r24, r16
    1cd4:	91 1f       	adc	r25, r17
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	8c 0f       	add	r24, r28
    1ce2:	9d 1f       	adc	r25, r29
    1ce4:	e8 0f       	add	r30, r24
    1ce6:	f9 1f       	adc	r31, r25
    1ce8:	81 81       	ldd	r24, Z+1	; 0x01
    1cea:	8f 93       	push	r24
    1cec:	80 81       	ld	r24, Z
    1cee:	8f 93       	push	r24
    1cf0:	bf 92       	push	r11
    1cf2:	af 92       	push	r10
    1cf4:	9f 92       	push	r9
    1cf6:	8f 92       	push	r8
    1cf8:	bf 92       	push	r11
    1cfa:	af 92       	push	r10
    1cfc:	0e 94 5f 15 	call	0x2abe	; 0x2abe <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1d00:	f3 01       	movw	r30, r6
    1d02:	83 81       	ldd	r24, Z+3	; 0x03
    1d04:	94 81       	ldd	r25, Z+4	; 0x04
    1d06:	fc 01       	movw	r30, r24
    1d08:	ee 0f       	add	r30, r30
    1d0a:	ff 1f       	adc	r31, r31
    1d0c:	ee 0f       	add	r30, r30
    1d0e:	ff 1f       	adc	r31, r31
    1d10:	ee 0f       	add	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	e8 0f       	add	r30, r24
    1d16:	f9 1f       	adc	r31, r25
    1d18:	e0 0f       	add	r30, r16
    1d1a:	f1 1f       	adc	r31, r17
    1d1c:	34 96       	adiw	r30, 0x04	; 4
    1d1e:	ee 0f       	add	r30, r30
    1d20:	ff 1f       	adc	r31, r31
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	8c 0f       	add	r24, r28
    1d28:	9d 1f       	adc	r25, r29
    1d2a:	e8 0f       	add	r30, r24
    1d2c:	f9 1f       	adc	r31, r25
    1d2e:	81 81       	ldd	r24, Z+1	; 0x01
    1d30:	8f 93       	push	r24
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 93       	push	r24
    1d36:	df 92       	push	r13
    1d38:	cf 92       	push	r12
    1d3a:	9f 92       	push	r9
    1d3c:	8f 92       	push	r8
    1d3e:	df 92       	push	r13
    1d40:	cf 92       	push	r12
    1d42:	0e 94 5f 15 	call	0x2abe	; 0x2abe <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	04 30       	cpi	r16, 0x04	; 4
    1d52:	11 05       	cpc	r17, r1
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <_ZN4QEPU3runEv+0x234>
    1d56:	af cf       	rjmp	.-162    	; 0x1cb6 <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    1d58:	40 e1       	ldi	r20, 0x10	; 16
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	e0 96       	adiw	r28, 0x30	; 48
    1d62:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d64:	e0 97       	sbiw	r28, 0x30	; 48
    1d66:	e1 96       	adiw	r28, 0x31	; 49
    1d68:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d6a:	e1 97       	sbiw	r28, 0x31	; 49
    1d6c:	0e 94 23 14 	call	0x2846	; 0x2846 <strtol>
    1d70:	ad 96       	adiw	r28, 0x2d	; 45
    1d72:	6c af       	std	Y+60, r22	; 0x3c
    1d74:	7d af       	std	Y+61, r23	; 0x3d
    1d76:	8e af       	std	Y+62, r24	; 0x3e
    1d78:	9f af       	std	Y+63, r25	; 0x3f
    1d7a:	ad 97       	sbiw	r28, 0x2d	; 45
    1d7c:	40 e1       	ldi	r20, 0x10	; 16
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	ae 96       	adiw	r28, 0x2e	; 46
    1d86:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d88:	ae 97       	sbiw	r28, 0x2e	; 46
    1d8a:	af 96       	adiw	r28, 0x2f	; 47
    1d8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d8e:	af 97       	sbiw	r28, 0x2f	; 47
    1d90:	0e 94 23 14 	call	0x2846	; 0x2846 <strtol>
    1d94:	9b 01       	movw	r18, r22
    1d96:	ac 01       	movw	r20, r24
    1d98:	ad 96       	adiw	r28, 0x2d	; 45
    1d9a:	ec ac       	ldd	r14, Y+60	; 0x3c
    1d9c:	fd ac       	ldd	r15, Y+61	; 0x3d
    1d9e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1da0:	1f ad       	ldd	r17, Y+63	; 0x3f
    1da2:	ad 97       	sbiw	r28, 0x2d	; 45
    1da4:	b1 01       	movw	r22, r2
    1da6:	c3 01       	movw	r24, r6
    1da8:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1dac:	f3 01       	movw	r30, r6
    1dae:	83 81       	ldd	r24, Z+3	; 0x03
    1db0:	94 81       	ldd	r25, Z+4	; 0x04
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	94 83       	std	Z+4, r25	; 0x04
    1db6:	83 83       	std	Z+3, r24	; 0x03
    1db8:	84 15       	cp	r24, r4
    1dba:	95 05       	cpc	r25, r5
    1dbc:	0c f4       	brge	.+2      	; 0x1dc0 <_ZN4QEPU3runEv+0x29c>
    1dbe:	56 cf       	rjmp	.-340    	; 0x1c6c <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    1dc0:	c3 01       	movw	r24, r6
    1dc2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <_ZN4QEPU7dumpmemEv>
    1dc6:	04 c0       	rjmp	.+8      	; 0x1dd0 <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    1dc8:	f3 01       	movw	r30, r6
    1dca:	14 82       	std	Z+4, r1	; 0x04
    1dcc:	13 82       	std	Z+3, r1	; 0x03
    1dce:	f8 cf       	rjmp	.-16     	; 0x1dc0 <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    1dd0:	c0 59       	subi	r28, 0x90	; 144
    1dd2:	df 4f       	sbci	r29, 0xFF	; 255
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	ff 90       	pop	r15
    1de8:	ef 90       	pop	r14
    1dea:	df 90       	pop	r13
    1dec:	cf 90       	pop	r12
    1dee:	bf 90       	pop	r11
    1df0:	af 90       	pop	r10
    1df2:	9f 90       	pop	r9
    1df4:	8f 90       	pop	r8
    1df6:	7f 90       	pop	r7
    1df8:	6f 90       	pop	r6
    1dfa:	5f 90       	pop	r5
    1dfc:	4f 90       	pop	r4
    1dfe:	3f 90       	pop	r3
    1e00:	2f 90       	pop	r2
    1e02:	08 95       	ret

00001e04 <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    1e04:	83 e3       	ldi	r24, 0x33	; 51
    1e06:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    1e08:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    1e0a:	86 e8       	ldi	r24, 0x86	; 134
    1e0c:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    1e0e:	88 e1       	ldi	r24, 0x18	; 24
    1e10:	8a b9       	out	0x0a, r24	; 10
    1e12:	08 95       	ret

00001e14 <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    1e14:	5d 9b       	sbis	0x0b, 5	; 11
    1e16:	fe cf       	rjmp	.-4      	; 0x1e14 <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    1e18:	6c b9       	out	0x0c, r22	; 12
    1e1a:	08 95       	ret

00001e1c <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	8c 01       	movw	r16, r24
    1e26:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    1e28:	68 81       	ld	r22, Y
    1e2a:	66 23       	and	r22, r22
    1e2c:	39 f0       	breq	.+14     	; 0x1e3c <_ZN6Serial8writestrEPc+0x20>
    1e2e:	21 96       	adiw	r28, 0x01	; 1
    1e30:	c8 01       	movw	r24, r16
    1e32:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6Serial5writeEc>
    1e36:	69 91       	ld	r22, Y+
    1e38:	61 11       	cpse	r22, r1
    1e3a:	fa cf       	rjmp	.-12     	; 0x1e30 <_ZN6Serial8writestrEPc+0x14>
}
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	08 95       	ret

00001e46 <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	ec 01       	movw	r28, r24
	writestr(data);
    1e4c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    1e50:	6d e0       	ldi	r22, 0x0D	; 13
    1e52:	ce 01       	movw	r24, r28
    1e54:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6Serial5writeEc>
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	08 95       	ret

00001e5e <acos>:
    1e5e:	9f 93       	push	r25
    1e60:	9f 77       	andi	r25, 0x7F	; 127
    1e62:	71 d1       	rcall	.+738    	; 0x2146 <__fp_arccos>
    1e64:	0f 90       	pop	r0
    1e66:	00 20       	and	r0, r0
    1e68:	3a f4       	brpl	.+14     	; 0x1e78 <acos+0x1a>
    1e6a:	90 58       	subi	r25, 0x80	; 128
    1e6c:	a2 ea       	ldi	r26, 0xA2	; 162
    1e6e:	2a ed       	ldi	r18, 0xDA	; 218
    1e70:	3f e0       	ldi	r19, 0x0F	; 15
    1e72:	49 e4       	ldi	r20, 0x49	; 73
    1e74:	50 e4       	ldi	r21, 0x40	; 64
    1e76:	13 d0       	rcall	.+38     	; 0x1e9e <__addsf3x>
    1e78:	e5 c1       	rjmp	.+970    	; 0x2244 <__fp_round>

00001e7a <__subsf3>:
    1e7a:	50 58       	subi	r21, 0x80	; 128

00001e7c <__addsf3>:
    1e7c:	bb 27       	eor	r27, r27
    1e7e:	aa 27       	eor	r26, r26
    1e80:	0e d0       	rcall	.+28     	; 0x1e9e <__addsf3x>
    1e82:	e0 c1       	rjmp	.+960    	; 0x2244 <__fp_round>
    1e84:	a9 d1       	rcall	.+850    	; 0x21d8 <__fp_pscA>
    1e86:	30 f0       	brcs	.+12     	; 0x1e94 <__addsf3+0x18>
    1e88:	ae d1       	rcall	.+860    	; 0x21e6 <__fp_pscB>
    1e8a:	20 f0       	brcs	.+8      	; 0x1e94 <__addsf3+0x18>
    1e8c:	31 f4       	brne	.+12     	; 0x1e9a <__addsf3+0x1e>
    1e8e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e90:	11 f4       	brne	.+4      	; 0x1e96 <__addsf3+0x1a>
    1e92:	1e f4       	brtc	.+6      	; 0x1e9a <__addsf3+0x1e>
    1e94:	79 c1       	rjmp	.+754    	; 0x2188 <__fp_nan>
    1e96:	0e f4       	brtc	.+2      	; 0x1e9a <__addsf3+0x1e>
    1e98:	e0 95       	com	r30
    1e9a:	e7 fb       	bst	r30, 7
    1e9c:	6f c1       	rjmp	.+734    	; 0x217c <__fp_inf>

00001e9e <__addsf3x>:
    1e9e:	e9 2f       	mov	r30, r25
    1ea0:	f3 d1       	rcall	.+998    	; 0x2288 <__fp_split3>
    1ea2:	80 f3       	brcs	.-32     	; 0x1e84 <__addsf3+0x8>
    1ea4:	ba 17       	cp	r27, r26
    1ea6:	62 07       	cpc	r22, r18
    1ea8:	73 07       	cpc	r23, r19
    1eaa:	84 07       	cpc	r24, r20
    1eac:	95 07       	cpc	r25, r21
    1eae:	18 f0       	brcs	.+6      	; 0x1eb6 <__addsf3x+0x18>
    1eb0:	71 f4       	brne	.+28     	; 0x1ece <__addsf3x+0x30>
    1eb2:	9e f5       	brtc	.+102    	; 0x1f1a <__addsf3x+0x7c>
    1eb4:	0b c2       	rjmp	.+1046   	; 0x22cc <__fp_zero>
    1eb6:	0e f4       	brtc	.+2      	; 0x1eba <__addsf3x+0x1c>
    1eb8:	e0 95       	com	r30
    1eba:	0b 2e       	mov	r0, r27
    1ebc:	ba 2f       	mov	r27, r26
    1ebe:	a0 2d       	mov	r26, r0
    1ec0:	0b 01       	movw	r0, r22
    1ec2:	b9 01       	movw	r22, r18
    1ec4:	90 01       	movw	r18, r0
    1ec6:	0c 01       	movw	r0, r24
    1ec8:	ca 01       	movw	r24, r20
    1eca:	a0 01       	movw	r20, r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	ff 27       	eor	r31, r31
    1ed0:	59 1b       	sub	r21, r25
    1ed2:	99 f0       	breq	.+38     	; 0x1efa <__addsf3x+0x5c>
    1ed4:	59 3f       	cpi	r21, 0xF9	; 249
    1ed6:	50 f4       	brcc	.+20     	; 0x1eec <__addsf3x+0x4e>
    1ed8:	50 3e       	cpi	r21, 0xE0	; 224
    1eda:	68 f1       	brcs	.+90     	; 0x1f36 <__addsf3x+0x98>
    1edc:	1a 16       	cp	r1, r26
    1ede:	f0 40       	sbci	r31, 0x00	; 0
    1ee0:	a2 2f       	mov	r26, r18
    1ee2:	23 2f       	mov	r18, r19
    1ee4:	34 2f       	mov	r19, r20
    1ee6:	44 27       	eor	r20, r20
    1ee8:	58 5f       	subi	r21, 0xF8	; 248
    1eea:	f3 cf       	rjmp	.-26     	; 0x1ed2 <__addsf3x+0x34>
    1eec:	46 95       	lsr	r20
    1eee:	37 95       	ror	r19
    1ef0:	27 95       	ror	r18
    1ef2:	a7 95       	ror	r26
    1ef4:	f0 40       	sbci	r31, 0x00	; 0
    1ef6:	53 95       	inc	r21
    1ef8:	c9 f7       	brne	.-14     	; 0x1eec <__addsf3x+0x4e>
    1efa:	7e f4       	brtc	.+30     	; 0x1f1a <__addsf3x+0x7c>
    1efc:	1f 16       	cp	r1, r31
    1efe:	ba 0b       	sbc	r27, r26
    1f00:	62 0b       	sbc	r22, r18
    1f02:	73 0b       	sbc	r23, r19
    1f04:	84 0b       	sbc	r24, r20
    1f06:	ba f0       	brmi	.+46     	; 0x1f36 <__addsf3x+0x98>
    1f08:	91 50       	subi	r25, 0x01	; 1
    1f0a:	a1 f0       	breq	.+40     	; 0x1f34 <__addsf3x+0x96>
    1f0c:	ff 0f       	add	r31, r31
    1f0e:	bb 1f       	adc	r27, r27
    1f10:	66 1f       	adc	r22, r22
    1f12:	77 1f       	adc	r23, r23
    1f14:	88 1f       	adc	r24, r24
    1f16:	c2 f7       	brpl	.-16     	; 0x1f08 <__addsf3x+0x6a>
    1f18:	0e c0       	rjmp	.+28     	; 0x1f36 <__addsf3x+0x98>
    1f1a:	ba 0f       	add	r27, r26
    1f1c:	62 1f       	adc	r22, r18
    1f1e:	73 1f       	adc	r23, r19
    1f20:	84 1f       	adc	r24, r20
    1f22:	48 f4       	brcc	.+18     	; 0x1f36 <__addsf3x+0x98>
    1f24:	87 95       	ror	r24
    1f26:	77 95       	ror	r23
    1f28:	67 95       	ror	r22
    1f2a:	b7 95       	ror	r27
    1f2c:	f7 95       	ror	r31
    1f2e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f30:	08 f0       	brcs	.+2      	; 0x1f34 <__addsf3x+0x96>
    1f32:	b3 cf       	rjmp	.-154    	; 0x1e9a <__addsf3+0x1e>
    1f34:	93 95       	inc	r25
    1f36:	88 0f       	add	r24, r24
    1f38:	08 f0       	brcs	.+2      	; 0x1f3c <__addsf3x+0x9e>
    1f3a:	99 27       	eor	r25, r25
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	97 95       	ror	r25
    1f40:	87 95       	ror	r24
    1f42:	08 95       	ret

00001f44 <atan>:
    1f44:	df 93       	push	r29
    1f46:	dd 27       	eor	r29, r29
    1f48:	b9 2f       	mov	r27, r25
    1f4a:	bf 77       	andi	r27, 0x7F	; 127
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	16 16       	cp	r1, r22
    1f52:	17 06       	cpc	r1, r23
    1f54:	48 07       	cpc	r20, r24
    1f56:	5b 07       	cpc	r21, r27
    1f58:	10 f4       	brcc	.+4      	; 0x1f5e <atan+0x1a>
    1f5a:	d9 2f       	mov	r29, r25
    1f5c:	c2 d1       	rcall	.+900    	; 0x22e2 <inverse>
    1f5e:	9f 93       	push	r25
    1f60:	8f 93       	push	r24
    1f62:	7f 93       	push	r23
    1f64:	6f 93       	push	r22
    1f66:	6f d2       	rcall	.+1246   	; 0x2446 <square>
    1f68:	e0 e8       	ldi	r30, 0x80	; 128
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	10 d1       	rcall	.+544    	; 0x218e <__fp_powser>
    1f6e:	6a d1       	rcall	.+724    	; 0x2244 <__fp_round>
    1f70:	2f 91       	pop	r18
    1f72:	3f 91       	pop	r19
    1f74:	4f 91       	pop	r20
    1f76:	5f 91       	pop	r21
    1f78:	c7 d1       	rcall	.+910    	; 0x2308 <__mulsf3x>
    1f7a:	dd 23       	and	r29, r29
    1f7c:	49 f0       	breq	.+18     	; 0x1f90 <atan+0x4c>
    1f7e:	90 58       	subi	r25, 0x80	; 128
    1f80:	a2 ea       	ldi	r26, 0xA2	; 162
    1f82:	2a ed       	ldi	r18, 0xDA	; 218
    1f84:	3f e0       	ldi	r19, 0x0F	; 15
    1f86:	49 ec       	ldi	r20, 0xC9	; 201
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	d0 78       	andi	r29, 0x80	; 128
    1f8c:	5d 27       	eor	r21, r29
    1f8e:	87 df       	rcall	.-242    	; 0x1e9e <__addsf3x>
    1f90:	df 91       	pop	r29
    1f92:	58 c1       	rjmp	.+688    	; 0x2244 <__fp_round>

00001f94 <cos>:
    1f94:	30 d1       	rcall	.+608    	; 0x21f6 <__fp_rempio2>
    1f96:	e3 95       	inc	r30
    1f98:	66 c1       	rjmp	.+716    	; 0x2266 <__fp_sinus>

00001f9a <__divsf3>:
    1f9a:	0c d0       	rcall	.+24     	; 0x1fb4 <__divsf3x>
    1f9c:	53 c1       	rjmp	.+678    	; 0x2244 <__fp_round>
    1f9e:	23 d1       	rcall	.+582    	; 0x21e6 <__fp_pscB>
    1fa0:	40 f0       	brcs	.+16     	; 0x1fb2 <__divsf3+0x18>
    1fa2:	1a d1       	rcall	.+564    	; 0x21d8 <__fp_pscA>
    1fa4:	30 f0       	brcs	.+12     	; 0x1fb2 <__divsf3+0x18>
    1fa6:	21 f4       	brne	.+8      	; 0x1fb0 <__divsf3+0x16>
    1fa8:	5f 3f       	cpi	r21, 0xFF	; 255
    1faa:	19 f0       	breq	.+6      	; 0x1fb2 <__divsf3+0x18>
    1fac:	e7 c0       	rjmp	.+462    	; 0x217c <__fp_inf>
    1fae:	51 11       	cpse	r21, r1
    1fb0:	8e c1       	rjmp	.+796    	; 0x22ce <__fp_szero>
    1fb2:	ea c0       	rjmp	.+468    	; 0x2188 <__fp_nan>

00001fb4 <__divsf3x>:
    1fb4:	69 d1       	rcall	.+722    	; 0x2288 <__fp_split3>
    1fb6:	98 f3       	brcs	.-26     	; 0x1f9e <__divsf3+0x4>

00001fb8 <__divsf3_pse>:
    1fb8:	99 23       	and	r25, r25
    1fba:	c9 f3       	breq	.-14     	; 0x1fae <__divsf3+0x14>
    1fbc:	55 23       	and	r21, r21
    1fbe:	b1 f3       	breq	.-20     	; 0x1fac <__divsf3+0x12>
    1fc0:	95 1b       	sub	r25, r21
    1fc2:	55 0b       	sbc	r21, r21
    1fc4:	bb 27       	eor	r27, r27
    1fc6:	aa 27       	eor	r26, r26
    1fc8:	62 17       	cp	r22, r18
    1fca:	73 07       	cpc	r23, r19
    1fcc:	84 07       	cpc	r24, r20
    1fce:	38 f0       	brcs	.+14     	; 0x1fde <__divsf3_pse+0x26>
    1fd0:	9f 5f       	subi	r25, 0xFF	; 255
    1fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd4:	22 0f       	add	r18, r18
    1fd6:	33 1f       	adc	r19, r19
    1fd8:	44 1f       	adc	r20, r20
    1fda:	aa 1f       	adc	r26, r26
    1fdc:	a9 f3       	breq	.-22     	; 0x1fc8 <__divsf3_pse+0x10>
    1fde:	33 d0       	rcall	.+102    	; 0x2046 <__divsf3_pse+0x8e>
    1fe0:	0e 2e       	mov	r0, r30
    1fe2:	3a f0       	brmi	.+14     	; 0x1ff2 <__divsf3_pse+0x3a>
    1fe4:	e0 e8       	ldi	r30, 0x80	; 128
    1fe6:	30 d0       	rcall	.+96     	; 0x2048 <__divsf3_pse+0x90>
    1fe8:	91 50       	subi	r25, 0x01	; 1
    1fea:	50 40       	sbci	r21, 0x00	; 0
    1fec:	e6 95       	lsr	r30
    1fee:	00 1c       	adc	r0, r0
    1ff0:	ca f7       	brpl	.-14     	; 0x1fe4 <__divsf3_pse+0x2c>
    1ff2:	29 d0       	rcall	.+82     	; 0x2046 <__divsf3_pse+0x8e>
    1ff4:	fe 2f       	mov	r31, r30
    1ff6:	27 d0       	rcall	.+78     	; 0x2046 <__divsf3_pse+0x8e>
    1ff8:	66 0f       	add	r22, r22
    1ffa:	77 1f       	adc	r23, r23
    1ffc:	88 1f       	adc	r24, r24
    1ffe:	bb 1f       	adc	r27, r27
    2000:	26 17       	cp	r18, r22
    2002:	37 07       	cpc	r19, r23
    2004:	48 07       	cpc	r20, r24
    2006:	ab 07       	cpc	r26, r27
    2008:	b0 e8       	ldi	r27, 0x80	; 128
    200a:	09 f0       	breq	.+2      	; 0x200e <__divsf3_pse+0x56>
    200c:	bb 0b       	sbc	r27, r27
    200e:	80 2d       	mov	r24, r0
    2010:	bf 01       	movw	r22, r30
    2012:	ff 27       	eor	r31, r31
    2014:	93 58       	subi	r25, 0x83	; 131
    2016:	5f 4f       	sbci	r21, 0xFF	; 255
    2018:	2a f0       	brmi	.+10     	; 0x2024 <__divsf3_pse+0x6c>
    201a:	9e 3f       	cpi	r25, 0xFE	; 254
    201c:	51 05       	cpc	r21, r1
    201e:	68 f0       	brcs	.+26     	; 0x203a <__divsf3_pse+0x82>
    2020:	ad c0       	rjmp	.+346    	; 0x217c <__fp_inf>
    2022:	55 c1       	rjmp	.+682    	; 0x22ce <__fp_szero>
    2024:	5f 3f       	cpi	r21, 0xFF	; 255
    2026:	ec f3       	brlt	.-6      	; 0x2022 <__divsf3_pse+0x6a>
    2028:	98 3e       	cpi	r25, 0xE8	; 232
    202a:	dc f3       	brlt	.-10     	; 0x2022 <__divsf3_pse+0x6a>
    202c:	86 95       	lsr	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	b7 95       	ror	r27
    2034:	f7 95       	ror	r31
    2036:	9f 5f       	subi	r25, 0xFF	; 255
    2038:	c9 f7       	brne	.-14     	; 0x202c <__divsf3_pse+0x74>
    203a:	88 0f       	add	r24, r24
    203c:	91 1d       	adc	r25, r1
    203e:	96 95       	lsr	r25
    2040:	87 95       	ror	r24
    2042:	97 f9       	bld	r25, 7
    2044:	08 95       	ret
    2046:	e1 e0       	ldi	r30, 0x01	; 1
    2048:	66 0f       	add	r22, r22
    204a:	77 1f       	adc	r23, r23
    204c:	88 1f       	adc	r24, r24
    204e:	bb 1f       	adc	r27, r27
    2050:	62 17       	cp	r22, r18
    2052:	73 07       	cpc	r23, r19
    2054:	84 07       	cpc	r24, r20
    2056:	ba 07       	cpc	r27, r26
    2058:	20 f0       	brcs	.+8      	; 0x2062 <__divsf3_pse+0xaa>
    205a:	62 1b       	sub	r22, r18
    205c:	73 0b       	sbc	r23, r19
    205e:	84 0b       	sbc	r24, r20
    2060:	ba 0b       	sbc	r27, r26
    2062:	ee 1f       	adc	r30, r30
    2064:	88 f7       	brcc	.-30     	; 0x2048 <__divsf3_pse+0x90>
    2066:	e0 95       	com	r30
    2068:	08 95       	ret

0000206a <__fixsfsi>:
    206a:	04 d0       	rcall	.+8      	; 0x2074 <__fixunssfsi>
    206c:	68 94       	set
    206e:	b1 11       	cpse	r27, r1
    2070:	2e c1       	rjmp	.+604    	; 0x22ce <__fp_szero>
    2072:	08 95       	ret

00002074 <__fixunssfsi>:
    2074:	11 d1       	rcall	.+546    	; 0x2298 <__fp_splitA>
    2076:	88 f0       	brcs	.+34     	; 0x209a <__fixunssfsi+0x26>
    2078:	9f 57       	subi	r25, 0x7F	; 127
    207a:	90 f0       	brcs	.+36     	; 0x20a0 <__fixunssfsi+0x2c>
    207c:	b9 2f       	mov	r27, r25
    207e:	99 27       	eor	r25, r25
    2080:	b7 51       	subi	r27, 0x17	; 23
    2082:	a0 f0       	brcs	.+40     	; 0x20ac <__fixunssfsi+0x38>
    2084:	d1 f0       	breq	.+52     	; 0x20ba <__fixunssfsi+0x46>
    2086:	66 0f       	add	r22, r22
    2088:	77 1f       	adc	r23, r23
    208a:	88 1f       	adc	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	1a f0       	brmi	.+6      	; 0x2096 <__fixunssfsi+0x22>
    2090:	ba 95       	dec	r27
    2092:	c9 f7       	brne	.-14     	; 0x2086 <__fixunssfsi+0x12>
    2094:	12 c0       	rjmp	.+36     	; 0x20ba <__fixunssfsi+0x46>
    2096:	b1 30       	cpi	r27, 0x01	; 1
    2098:	81 f0       	breq	.+32     	; 0x20ba <__fixunssfsi+0x46>
    209a:	18 d1       	rcall	.+560    	; 0x22cc <__fp_zero>
    209c:	b1 e0       	ldi	r27, 0x01	; 1
    209e:	08 95       	ret
    20a0:	15 c1       	rjmp	.+554    	; 0x22cc <__fp_zero>
    20a2:	67 2f       	mov	r22, r23
    20a4:	78 2f       	mov	r23, r24
    20a6:	88 27       	eor	r24, r24
    20a8:	b8 5f       	subi	r27, 0xF8	; 248
    20aa:	39 f0       	breq	.+14     	; 0x20ba <__fixunssfsi+0x46>
    20ac:	b9 3f       	cpi	r27, 0xF9	; 249
    20ae:	cc f3       	brlt	.-14     	; 0x20a2 <__fixunssfsi+0x2e>
    20b0:	86 95       	lsr	r24
    20b2:	77 95       	ror	r23
    20b4:	67 95       	ror	r22
    20b6:	b3 95       	inc	r27
    20b8:	d9 f7       	brne	.-10     	; 0x20b0 <__fixunssfsi+0x3c>
    20ba:	3e f4       	brtc	.+14     	; 0x20ca <__fixunssfsi+0x56>
    20bc:	90 95       	com	r25
    20be:	80 95       	com	r24
    20c0:	70 95       	com	r23
    20c2:	61 95       	neg	r22
    20c4:	7f 4f       	sbci	r23, 0xFF	; 255
    20c6:	8f 4f       	sbci	r24, 0xFF	; 255
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	08 95       	ret

000020cc <__floatunsisf>:
    20cc:	e8 94       	clt
    20ce:	09 c0       	rjmp	.+18     	; 0x20e2 <__floatsisf+0x12>

000020d0 <__floatsisf>:
    20d0:	97 fb       	bst	r25, 7
    20d2:	3e f4       	brtc	.+14     	; 0x20e2 <__floatsisf+0x12>
    20d4:	90 95       	com	r25
    20d6:	80 95       	com	r24
    20d8:	70 95       	com	r23
    20da:	61 95       	neg	r22
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	8f 4f       	sbci	r24, 0xFF	; 255
    20e0:	9f 4f       	sbci	r25, 0xFF	; 255
    20e2:	99 23       	and	r25, r25
    20e4:	a9 f0       	breq	.+42     	; 0x2110 <__floatsisf+0x40>
    20e6:	f9 2f       	mov	r31, r25
    20e8:	96 e9       	ldi	r25, 0x96	; 150
    20ea:	bb 27       	eor	r27, r27
    20ec:	93 95       	inc	r25
    20ee:	f6 95       	lsr	r31
    20f0:	87 95       	ror	r24
    20f2:	77 95       	ror	r23
    20f4:	67 95       	ror	r22
    20f6:	b7 95       	ror	r27
    20f8:	f1 11       	cpse	r31, r1
    20fa:	f8 cf       	rjmp	.-16     	; 0x20ec <__floatsisf+0x1c>
    20fc:	fa f4       	brpl	.+62     	; 0x213c <__floatsisf+0x6c>
    20fe:	bb 0f       	add	r27, r27
    2100:	11 f4       	brne	.+4      	; 0x2106 <__floatsisf+0x36>
    2102:	60 ff       	sbrs	r22, 0
    2104:	1b c0       	rjmp	.+54     	; 0x213c <__floatsisf+0x6c>
    2106:	6f 5f       	subi	r22, 0xFF	; 255
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	8f 4f       	sbci	r24, 0xFF	; 255
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	16 c0       	rjmp	.+44     	; 0x213c <__floatsisf+0x6c>
    2110:	88 23       	and	r24, r24
    2112:	11 f0       	breq	.+4      	; 0x2118 <__floatsisf+0x48>
    2114:	96 e9       	ldi	r25, 0x96	; 150
    2116:	11 c0       	rjmp	.+34     	; 0x213a <__floatsisf+0x6a>
    2118:	77 23       	and	r23, r23
    211a:	21 f0       	breq	.+8      	; 0x2124 <__floatsisf+0x54>
    211c:	9e e8       	ldi	r25, 0x8E	; 142
    211e:	87 2f       	mov	r24, r23
    2120:	76 2f       	mov	r23, r22
    2122:	05 c0       	rjmp	.+10     	; 0x212e <__floatsisf+0x5e>
    2124:	66 23       	and	r22, r22
    2126:	71 f0       	breq	.+28     	; 0x2144 <__floatsisf+0x74>
    2128:	96 e8       	ldi	r25, 0x86	; 134
    212a:	86 2f       	mov	r24, r22
    212c:	70 e0       	ldi	r23, 0x00	; 0
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	2a f0       	brmi	.+10     	; 0x213c <__floatsisf+0x6c>
    2132:	9a 95       	dec	r25
    2134:	66 0f       	add	r22, r22
    2136:	77 1f       	adc	r23, r23
    2138:	88 1f       	adc	r24, r24
    213a:	da f7       	brpl	.-10     	; 0x2132 <__floatsisf+0x62>
    213c:	88 0f       	add	r24, r24
    213e:	96 95       	lsr	r25
    2140:	87 95       	ror	r24
    2142:	97 f9       	bld	r25, 7
    2144:	08 95       	ret

00002146 <__fp_arccos>:
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	1f 93       	push	r17
    214c:	0f 93       	push	r16
    214e:	8b 01       	movw	r16, r22
    2150:	ec 01       	movw	r28, r24
    2152:	ed ea       	ldi	r30, 0xAD	; 173
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	1b d0       	rcall	.+54     	; 0x218e <__fp_powser>
    2158:	75 d0       	rcall	.+234    	; 0x2244 <__fp_round>
    215a:	98 01       	movw	r18, r16
    215c:	ae 01       	movw	r20, r28
    215e:	8b 01       	movw	r16, r22
    2160:	ec 01       	movw	r28, r24
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	80 e8       	ldi	r24, 0x80	; 128
    2168:	9f e3       	ldi	r25, 0x3F	; 63
    216a:	87 de       	rcall	.-754    	; 0x1e7a <__subsf3>
    216c:	2e d1       	rcall	.+604    	; 0x23ca <sqrt>
    216e:	98 01       	movw	r18, r16
    2170:	ae 01       	movw	r20, r28
    2172:	0f 91       	pop	r16
    2174:	1f 91       	pop	r17
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	c6 c0       	rjmp	.+396    	; 0x2308 <__mulsf3x>

0000217c <__fp_inf>:
    217c:	97 f9       	bld	r25, 7
    217e:	9f 67       	ori	r25, 0x7F	; 127
    2180:	80 e8       	ldi	r24, 0x80	; 128
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	08 95       	ret

00002188 <__fp_nan>:
    2188:	9f ef       	ldi	r25, 0xFF	; 255
    218a:	80 ec       	ldi	r24, 0xC0	; 192
    218c:	08 95       	ret

0000218e <__fp_powser>:
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	1f 93       	push	r17
    2194:	0f 93       	push	r16
    2196:	ff 92       	push	r15
    2198:	ef 92       	push	r14
    219a:	df 92       	push	r13
    219c:	7b 01       	movw	r14, r22
    219e:	8c 01       	movw	r16, r24
    21a0:	68 94       	set
    21a2:	05 c0       	rjmp	.+10     	; 0x21ae <__fp_powser+0x20>
    21a4:	da 2e       	mov	r13, r26
    21a6:	ef 01       	movw	r28, r30
    21a8:	af d0       	rcall	.+350    	; 0x2308 <__mulsf3x>
    21aa:	fe 01       	movw	r30, r28
    21ac:	e8 94       	clt
    21ae:	a5 91       	lpm	r26, Z+
    21b0:	25 91       	lpm	r18, Z+
    21b2:	35 91       	lpm	r19, Z+
    21b4:	45 91       	lpm	r20, Z+
    21b6:	55 91       	lpm	r21, Z+
    21b8:	ae f3       	brts	.-22     	; 0x21a4 <__fp_powser+0x16>
    21ba:	ef 01       	movw	r28, r30
    21bc:	70 de       	rcall	.-800    	; 0x1e9e <__addsf3x>
    21be:	fe 01       	movw	r30, r28
    21c0:	97 01       	movw	r18, r14
    21c2:	a8 01       	movw	r20, r16
    21c4:	da 94       	dec	r13
    21c6:	79 f7       	brne	.-34     	; 0x21a6 <__fp_powser+0x18>
    21c8:	df 90       	pop	r13
    21ca:	ef 90       	pop	r14
    21cc:	ff 90       	pop	r15
    21ce:	0f 91       	pop	r16
    21d0:	1f 91       	pop	r17
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <__fp_pscA>:
    21d8:	00 24       	eor	r0, r0
    21da:	0a 94       	dec	r0
    21dc:	16 16       	cp	r1, r22
    21de:	17 06       	cpc	r1, r23
    21e0:	18 06       	cpc	r1, r24
    21e2:	09 06       	cpc	r0, r25
    21e4:	08 95       	ret

000021e6 <__fp_pscB>:
    21e6:	00 24       	eor	r0, r0
    21e8:	0a 94       	dec	r0
    21ea:	12 16       	cp	r1, r18
    21ec:	13 06       	cpc	r1, r19
    21ee:	14 06       	cpc	r1, r20
    21f0:	05 06       	cpc	r0, r21
    21f2:	08 95       	ret
    21f4:	c9 cf       	rjmp	.-110    	; 0x2188 <__fp_nan>

000021f6 <__fp_rempio2>:
    21f6:	50 d0       	rcall	.+160    	; 0x2298 <__fp_splitA>
    21f8:	e8 f3       	brcs	.-6      	; 0x21f4 <__fp_pscB+0xe>
    21fa:	e8 94       	clt
    21fc:	e0 e0       	ldi	r30, 0x00	; 0
    21fe:	bb 27       	eor	r27, r27
    2200:	9f 57       	subi	r25, 0x7F	; 127
    2202:	f0 f0       	brcs	.+60     	; 0x2240 <__fp_rempio2+0x4a>
    2204:	2a ed       	ldi	r18, 0xDA	; 218
    2206:	3f e0       	ldi	r19, 0x0F	; 15
    2208:	49 ec       	ldi	r20, 0xC9	; 201
    220a:	06 c0       	rjmp	.+12     	; 0x2218 <__fp_rempio2+0x22>
    220c:	ee 0f       	add	r30, r30
    220e:	bb 0f       	add	r27, r27
    2210:	66 1f       	adc	r22, r22
    2212:	77 1f       	adc	r23, r23
    2214:	88 1f       	adc	r24, r24
    2216:	28 f0       	brcs	.+10     	; 0x2222 <__fp_rempio2+0x2c>
    2218:	b2 3a       	cpi	r27, 0xA2	; 162
    221a:	62 07       	cpc	r22, r18
    221c:	73 07       	cpc	r23, r19
    221e:	84 07       	cpc	r24, r20
    2220:	28 f0       	brcs	.+10     	; 0x222c <__fp_rempio2+0x36>
    2222:	b2 5a       	subi	r27, 0xA2	; 162
    2224:	62 0b       	sbc	r22, r18
    2226:	73 0b       	sbc	r23, r19
    2228:	84 0b       	sbc	r24, r20
    222a:	e3 95       	inc	r30
    222c:	9a 95       	dec	r25
    222e:	72 f7       	brpl	.-36     	; 0x220c <__fp_rempio2+0x16>
    2230:	80 38       	cpi	r24, 0x80	; 128
    2232:	30 f4       	brcc	.+12     	; 0x2240 <__fp_rempio2+0x4a>
    2234:	9a 95       	dec	r25
    2236:	bb 0f       	add	r27, r27
    2238:	66 1f       	adc	r22, r22
    223a:	77 1f       	adc	r23, r23
    223c:	88 1f       	adc	r24, r24
    223e:	d2 f7       	brpl	.-12     	; 0x2234 <__fp_rempio2+0x3e>
    2240:	90 48       	sbci	r25, 0x80	; 128
    2242:	2a c1       	rjmp	.+596    	; 0x2498 <__fp_mpack_finite>

00002244 <__fp_round>:
    2244:	09 2e       	mov	r0, r25
    2246:	03 94       	inc	r0
    2248:	00 0c       	add	r0, r0
    224a:	11 f4       	brne	.+4      	; 0x2250 <__fp_round+0xc>
    224c:	88 23       	and	r24, r24
    224e:	52 f0       	brmi	.+20     	; 0x2264 <__fp_round+0x20>
    2250:	bb 0f       	add	r27, r27
    2252:	40 f4       	brcc	.+16     	; 0x2264 <__fp_round+0x20>
    2254:	bf 2b       	or	r27, r31
    2256:	11 f4       	brne	.+4      	; 0x225c <__fp_round+0x18>
    2258:	60 ff       	sbrs	r22, 0
    225a:	04 c0       	rjmp	.+8      	; 0x2264 <__fp_round+0x20>
    225c:	6f 5f       	subi	r22, 0xFF	; 255
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	8f 4f       	sbci	r24, 0xFF	; 255
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	08 95       	ret

00002266 <__fp_sinus>:
    2266:	ef 93       	push	r30
    2268:	e0 ff       	sbrs	r30, 0
    226a:	06 c0       	rjmp	.+12     	; 0x2278 <__fp_sinus+0x12>
    226c:	a2 ea       	ldi	r26, 0xA2	; 162
    226e:	2a ed       	ldi	r18, 0xDA	; 218
    2270:	3f e0       	ldi	r19, 0x0F	; 15
    2272:	49 ec       	ldi	r20, 0xC9	; 201
    2274:	5f eb       	ldi	r21, 0xBF	; 191
    2276:	13 de       	rcall	.-986    	; 0x1e9e <__addsf3x>
    2278:	e5 df       	rcall	.-54     	; 0x2244 <__fp_round>
    227a:	0f 90       	pop	r0
    227c:	03 94       	inc	r0
    227e:	01 fc       	sbrc	r0, 1
    2280:	90 58       	subi	r25, 0x80	; 128
    2282:	e5 ed       	ldi	r30, 0xD5	; 213
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	1b c1       	rjmp	.+566    	; 0x24be <__fp_powsodd>

00002288 <__fp_split3>:
    2288:	57 fd       	sbrc	r21, 7
    228a:	90 58       	subi	r25, 0x80	; 128
    228c:	44 0f       	add	r20, r20
    228e:	55 1f       	adc	r21, r21
    2290:	59 f0       	breq	.+22     	; 0x22a8 <__fp_splitA+0x10>
    2292:	5f 3f       	cpi	r21, 0xFF	; 255
    2294:	71 f0       	breq	.+28     	; 0x22b2 <__fp_splitA+0x1a>
    2296:	47 95       	ror	r20

00002298 <__fp_splitA>:
    2298:	88 0f       	add	r24, r24
    229a:	97 fb       	bst	r25, 7
    229c:	99 1f       	adc	r25, r25
    229e:	61 f0       	breq	.+24     	; 0x22b8 <__fp_splitA+0x20>
    22a0:	9f 3f       	cpi	r25, 0xFF	; 255
    22a2:	79 f0       	breq	.+30     	; 0x22c2 <__fp_splitA+0x2a>
    22a4:	87 95       	ror	r24
    22a6:	08 95       	ret
    22a8:	12 16       	cp	r1, r18
    22aa:	13 06       	cpc	r1, r19
    22ac:	14 06       	cpc	r1, r20
    22ae:	55 1f       	adc	r21, r21
    22b0:	f2 cf       	rjmp	.-28     	; 0x2296 <__fp_split3+0xe>
    22b2:	46 95       	lsr	r20
    22b4:	f1 df       	rcall	.-30     	; 0x2298 <__fp_splitA>
    22b6:	08 c0       	rjmp	.+16     	; 0x22c8 <__fp_splitA+0x30>
    22b8:	16 16       	cp	r1, r22
    22ba:	17 06       	cpc	r1, r23
    22bc:	18 06       	cpc	r1, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	f1 cf       	rjmp	.-30     	; 0x22a4 <__fp_splitA+0xc>
    22c2:	86 95       	lsr	r24
    22c4:	71 05       	cpc	r23, r1
    22c6:	61 05       	cpc	r22, r1
    22c8:	08 94       	sec
    22ca:	08 95       	ret

000022cc <__fp_zero>:
    22cc:	e8 94       	clt

000022ce <__fp_szero>:
    22ce:	bb 27       	eor	r27, r27
    22d0:	66 27       	eor	r22, r22
    22d2:	77 27       	eor	r23, r23
    22d4:	cb 01       	movw	r24, r22
    22d6:	97 f9       	bld	r25, 7
    22d8:	08 95       	ret

000022da <__gesf2>:
    22da:	b8 d0       	rcall	.+368    	; 0x244c <__fp_cmp>
    22dc:	08 f4       	brcc	.+2      	; 0x22e0 <__gesf2+0x6>
    22de:	8f ef       	ldi	r24, 0xFF	; 255
    22e0:	08 95       	ret

000022e2 <inverse>:
    22e2:	9b 01       	movw	r18, r22
    22e4:	ac 01       	movw	r20, r24
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	80 e8       	ldi	r24, 0x80	; 128
    22ec:	9f e3       	ldi	r25, 0x3F	; 63
    22ee:	55 ce       	rjmp	.-854    	; 0x1f9a <__divsf3>

000022f0 <__mulsf3>:
    22f0:	0b d0       	rcall	.+22     	; 0x2308 <__mulsf3x>
    22f2:	a8 cf       	rjmp	.-176    	; 0x2244 <__fp_round>
    22f4:	71 df       	rcall	.-286    	; 0x21d8 <__fp_pscA>
    22f6:	28 f0       	brcs	.+10     	; 0x2302 <__mulsf3+0x12>
    22f8:	76 df       	rcall	.-276    	; 0x21e6 <__fp_pscB>
    22fa:	18 f0       	brcs	.+6      	; 0x2302 <__mulsf3+0x12>
    22fc:	95 23       	and	r25, r21
    22fe:	09 f0       	breq	.+2      	; 0x2302 <__mulsf3+0x12>
    2300:	3d cf       	rjmp	.-390    	; 0x217c <__fp_inf>
    2302:	42 cf       	rjmp	.-380    	; 0x2188 <__fp_nan>
    2304:	11 24       	eor	r1, r1
    2306:	e3 cf       	rjmp	.-58     	; 0x22ce <__fp_szero>

00002308 <__mulsf3x>:
    2308:	bf df       	rcall	.-130    	; 0x2288 <__fp_split3>
    230a:	a0 f3       	brcs	.-24     	; 0x22f4 <__mulsf3+0x4>

0000230c <__mulsf3_pse>:
    230c:	95 9f       	mul	r25, r21
    230e:	d1 f3       	breq	.-12     	; 0x2304 <__mulsf3+0x14>
    2310:	95 0f       	add	r25, r21
    2312:	50 e0       	ldi	r21, 0x00	; 0
    2314:	55 1f       	adc	r21, r21
    2316:	62 9f       	mul	r22, r18
    2318:	f0 01       	movw	r30, r0
    231a:	72 9f       	mul	r23, r18
    231c:	bb 27       	eor	r27, r27
    231e:	f0 0d       	add	r31, r0
    2320:	b1 1d       	adc	r27, r1
    2322:	63 9f       	mul	r22, r19
    2324:	aa 27       	eor	r26, r26
    2326:	f0 0d       	add	r31, r0
    2328:	b1 1d       	adc	r27, r1
    232a:	aa 1f       	adc	r26, r26
    232c:	64 9f       	mul	r22, r20
    232e:	66 27       	eor	r22, r22
    2330:	b0 0d       	add	r27, r0
    2332:	a1 1d       	adc	r26, r1
    2334:	66 1f       	adc	r22, r22
    2336:	82 9f       	mul	r24, r18
    2338:	22 27       	eor	r18, r18
    233a:	b0 0d       	add	r27, r0
    233c:	a1 1d       	adc	r26, r1
    233e:	62 1f       	adc	r22, r18
    2340:	73 9f       	mul	r23, r19
    2342:	b0 0d       	add	r27, r0
    2344:	a1 1d       	adc	r26, r1
    2346:	62 1f       	adc	r22, r18
    2348:	83 9f       	mul	r24, r19
    234a:	a0 0d       	add	r26, r0
    234c:	61 1d       	adc	r22, r1
    234e:	22 1f       	adc	r18, r18
    2350:	74 9f       	mul	r23, r20
    2352:	33 27       	eor	r19, r19
    2354:	a0 0d       	add	r26, r0
    2356:	61 1d       	adc	r22, r1
    2358:	23 1f       	adc	r18, r19
    235a:	84 9f       	mul	r24, r20
    235c:	60 0d       	add	r22, r0
    235e:	21 1d       	adc	r18, r1
    2360:	82 2f       	mov	r24, r18
    2362:	76 2f       	mov	r23, r22
    2364:	6a 2f       	mov	r22, r26
    2366:	11 24       	eor	r1, r1
    2368:	9f 57       	subi	r25, 0x7F	; 127
    236a:	50 40       	sbci	r21, 0x00	; 0
    236c:	8a f0       	brmi	.+34     	; 0x2390 <__mulsf3_pse+0x84>
    236e:	e1 f0       	breq	.+56     	; 0x23a8 <__mulsf3_pse+0x9c>
    2370:	88 23       	and	r24, r24
    2372:	4a f0       	brmi	.+18     	; 0x2386 <__mulsf3_pse+0x7a>
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	bb 1f       	adc	r27, r27
    237a:	66 1f       	adc	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	91 50       	subi	r25, 0x01	; 1
    2382:	50 40       	sbci	r21, 0x00	; 0
    2384:	a9 f7       	brne	.-22     	; 0x2370 <__mulsf3_pse+0x64>
    2386:	9e 3f       	cpi	r25, 0xFE	; 254
    2388:	51 05       	cpc	r21, r1
    238a:	70 f0       	brcs	.+28     	; 0x23a8 <__mulsf3_pse+0x9c>
    238c:	f7 ce       	rjmp	.-530    	; 0x217c <__fp_inf>
    238e:	9f cf       	rjmp	.-194    	; 0x22ce <__fp_szero>
    2390:	5f 3f       	cpi	r21, 0xFF	; 255
    2392:	ec f3       	brlt	.-6      	; 0x238e <__mulsf3_pse+0x82>
    2394:	98 3e       	cpi	r25, 0xE8	; 232
    2396:	dc f3       	brlt	.-10     	; 0x238e <__mulsf3_pse+0x82>
    2398:	86 95       	lsr	r24
    239a:	77 95       	ror	r23
    239c:	67 95       	ror	r22
    239e:	b7 95       	ror	r27
    23a0:	f7 95       	ror	r31
    23a2:	e7 95       	ror	r30
    23a4:	9f 5f       	subi	r25, 0xFF	; 255
    23a6:	c1 f7       	brne	.-16     	; 0x2398 <__mulsf3_pse+0x8c>
    23a8:	fe 2b       	or	r31, r30
    23aa:	88 0f       	add	r24, r24
    23ac:	91 1d       	adc	r25, r1
    23ae:	96 95       	lsr	r25
    23b0:	87 95       	ror	r24
    23b2:	97 f9       	bld	r25, 7
    23b4:	08 95       	ret

000023b6 <sin>:
    23b6:	9f 93       	push	r25
    23b8:	1e df       	rcall	.-452    	; 0x21f6 <__fp_rempio2>
    23ba:	0f 90       	pop	r0
    23bc:	07 fc       	sbrc	r0, 7
    23be:	ee 5f       	subi	r30, 0xFE	; 254
    23c0:	52 cf       	rjmp	.-348    	; 0x2266 <__fp_sinus>
    23c2:	11 f4       	brne	.+4      	; 0x23c8 <sin+0x12>
    23c4:	0e f4       	brtc	.+2      	; 0x23c8 <sin+0x12>
    23c6:	e0 ce       	rjmp	.-576    	; 0x2188 <__fp_nan>
    23c8:	65 c0       	rjmp	.+202    	; 0x2494 <__fp_mpack>

000023ca <sqrt>:
    23ca:	66 df       	rcall	.-308    	; 0x2298 <__fp_splitA>
    23cc:	d0 f3       	brcs	.-12     	; 0x23c2 <sin+0xc>
    23ce:	99 23       	and	r25, r25
    23d0:	d9 f3       	breq	.-10     	; 0x23c8 <sin+0x12>
    23d2:	ce f3       	brts	.-14     	; 0x23c6 <sin+0x10>
    23d4:	9f 57       	subi	r25, 0x7F	; 127
    23d6:	55 0b       	sbc	r21, r21
    23d8:	87 ff       	sbrs	r24, 7
    23da:	6a d0       	rcall	.+212    	; 0x24b0 <__fp_norm2>
    23dc:	00 24       	eor	r0, r0
    23de:	a0 e6       	ldi	r26, 0x60	; 96
    23e0:	40 ea       	ldi	r20, 0xA0	; 160
    23e2:	90 01       	movw	r18, r0
    23e4:	80 58       	subi	r24, 0x80	; 128
    23e6:	56 95       	lsr	r21
    23e8:	97 95       	ror	r25
    23ea:	28 f4       	brcc	.+10     	; 0x23f6 <sqrt+0x2c>
    23ec:	80 5c       	subi	r24, 0xC0	; 192
    23ee:	66 0f       	add	r22, r22
    23f0:	77 1f       	adc	r23, r23
    23f2:	88 1f       	adc	r24, r24
    23f4:	20 f0       	brcs	.+8      	; 0x23fe <sqrt+0x34>
    23f6:	26 17       	cp	r18, r22
    23f8:	37 07       	cpc	r19, r23
    23fa:	48 07       	cpc	r20, r24
    23fc:	30 f4       	brcc	.+12     	; 0x240a <sqrt+0x40>
    23fe:	62 1b       	sub	r22, r18
    2400:	73 0b       	sbc	r23, r19
    2402:	84 0b       	sbc	r24, r20
    2404:	20 29       	or	r18, r0
    2406:	31 29       	or	r19, r1
    2408:	4a 2b       	or	r20, r26
    240a:	a6 95       	lsr	r26
    240c:	17 94       	ror	r1
    240e:	07 94       	ror	r0
    2410:	20 25       	eor	r18, r0
    2412:	31 25       	eor	r19, r1
    2414:	4a 27       	eor	r20, r26
    2416:	58 f7       	brcc	.-42     	; 0x23ee <sqrt+0x24>
    2418:	66 0f       	add	r22, r22
    241a:	77 1f       	adc	r23, r23
    241c:	88 1f       	adc	r24, r24
    241e:	20 f0       	brcs	.+8      	; 0x2428 <sqrt+0x5e>
    2420:	26 17       	cp	r18, r22
    2422:	37 07       	cpc	r19, r23
    2424:	48 07       	cpc	r20, r24
    2426:	30 f4       	brcc	.+12     	; 0x2434 <sqrt+0x6a>
    2428:	62 0b       	sbc	r22, r18
    242a:	73 0b       	sbc	r23, r19
    242c:	84 0b       	sbc	r24, r20
    242e:	20 0d       	add	r18, r0
    2430:	31 1d       	adc	r19, r1
    2432:	41 1d       	adc	r20, r1
    2434:	a0 95       	com	r26
    2436:	81 f7       	brne	.-32     	; 0x2418 <sqrt+0x4e>
    2438:	b9 01       	movw	r22, r18
    243a:	84 2f       	mov	r24, r20
    243c:	91 58       	subi	r25, 0x81	; 129
    243e:	88 0f       	add	r24, r24
    2440:	96 95       	lsr	r25
    2442:	87 95       	ror	r24
    2444:	08 95       	ret

00002446 <square>:
    2446:	9b 01       	movw	r18, r22
    2448:	ac 01       	movw	r20, r24
    244a:	52 cf       	rjmp	.-348    	; 0x22f0 <__mulsf3>

0000244c <__fp_cmp>:
    244c:	99 0f       	add	r25, r25
    244e:	00 08       	sbc	r0, r0
    2450:	55 0f       	add	r21, r21
    2452:	aa 0b       	sbc	r26, r26
    2454:	e0 e8       	ldi	r30, 0x80	; 128
    2456:	fe ef       	ldi	r31, 0xFE	; 254
    2458:	16 16       	cp	r1, r22
    245a:	17 06       	cpc	r1, r23
    245c:	e8 07       	cpc	r30, r24
    245e:	f9 07       	cpc	r31, r25
    2460:	c0 f0       	brcs	.+48     	; 0x2492 <__fp_cmp+0x46>
    2462:	12 16       	cp	r1, r18
    2464:	13 06       	cpc	r1, r19
    2466:	e4 07       	cpc	r30, r20
    2468:	f5 07       	cpc	r31, r21
    246a:	98 f0       	brcs	.+38     	; 0x2492 <__fp_cmp+0x46>
    246c:	62 1b       	sub	r22, r18
    246e:	73 0b       	sbc	r23, r19
    2470:	84 0b       	sbc	r24, r20
    2472:	95 0b       	sbc	r25, r21
    2474:	39 f4       	brne	.+14     	; 0x2484 <__fp_cmp+0x38>
    2476:	0a 26       	eor	r0, r26
    2478:	61 f0       	breq	.+24     	; 0x2492 <__fp_cmp+0x46>
    247a:	23 2b       	or	r18, r19
    247c:	24 2b       	or	r18, r20
    247e:	25 2b       	or	r18, r21
    2480:	21 f4       	brne	.+8      	; 0x248a <__fp_cmp+0x3e>
    2482:	08 95       	ret
    2484:	0a 26       	eor	r0, r26
    2486:	09 f4       	brne	.+2      	; 0x248a <__fp_cmp+0x3e>
    2488:	a1 40       	sbci	r26, 0x01	; 1
    248a:	a6 95       	lsr	r26
    248c:	8f ef       	ldi	r24, 0xFF	; 255
    248e:	81 1d       	adc	r24, r1
    2490:	81 1d       	adc	r24, r1
    2492:	08 95       	ret

00002494 <__fp_mpack>:
    2494:	9f 3f       	cpi	r25, 0xFF	; 255
    2496:	31 f0       	breq	.+12     	; 0x24a4 <__fp_mpack_finite+0xc>

00002498 <__fp_mpack_finite>:
    2498:	91 50       	subi	r25, 0x01	; 1
    249a:	20 f4       	brcc	.+8      	; 0x24a4 <__fp_mpack_finite+0xc>
    249c:	87 95       	ror	r24
    249e:	77 95       	ror	r23
    24a0:	67 95       	ror	r22
    24a2:	b7 95       	ror	r27
    24a4:	88 0f       	add	r24, r24
    24a6:	91 1d       	adc	r25, r1
    24a8:	96 95       	lsr	r25
    24aa:	87 95       	ror	r24
    24ac:	97 f9       	bld	r25, 7
    24ae:	08 95       	ret

000024b0 <__fp_norm2>:
    24b0:	91 50       	subi	r25, 0x01	; 1
    24b2:	50 40       	sbci	r21, 0x00	; 0
    24b4:	66 0f       	add	r22, r22
    24b6:	77 1f       	adc	r23, r23
    24b8:	88 1f       	adc	r24, r24
    24ba:	d2 f7       	brpl	.-12     	; 0x24b0 <__fp_norm2>
    24bc:	08 95       	ret

000024be <__fp_powsodd>:
    24be:	9f 93       	push	r25
    24c0:	8f 93       	push	r24
    24c2:	7f 93       	push	r23
    24c4:	6f 93       	push	r22
    24c6:	ff 93       	push	r31
    24c8:	ef 93       	push	r30
    24ca:	9b 01       	movw	r18, r22
    24cc:	ac 01       	movw	r20, r24
    24ce:	10 df       	rcall	.-480    	; 0x22f0 <__mulsf3>
    24d0:	ef 91       	pop	r30
    24d2:	ff 91       	pop	r31
    24d4:	5c de       	rcall	.-840    	; 0x218e <__fp_powser>
    24d6:	2f 91       	pop	r18
    24d8:	3f 91       	pop	r19
    24da:	4f 91       	pop	r20
    24dc:	5f 91       	pop	r21
    24de:	08 cf       	rjmp	.-496    	; 0x22f0 <__mulsf3>

000024e0 <__divmodhi4>:
    24e0:	97 fb       	bst	r25, 7
    24e2:	07 2e       	mov	r0, r23
    24e4:	16 f4       	brtc	.+4      	; 0x24ea <__divmodhi4+0xa>
    24e6:	00 94       	com	r0
    24e8:	07 d0       	rcall	.+14     	; 0x24f8 <__divmodhi4_neg1>
    24ea:	77 fd       	sbrc	r23, 7
    24ec:	09 d0       	rcall	.+18     	; 0x2500 <__divmodhi4_neg2>
    24ee:	0e 94 8a 12 	call	0x2514	; 0x2514 <__udivmodhi4>
    24f2:	07 fc       	sbrc	r0, 7
    24f4:	05 d0       	rcall	.+10     	; 0x2500 <__divmodhi4_neg2>
    24f6:	3e f4       	brtc	.+14     	; 0x2506 <__divmodhi4_exit>

000024f8 <__divmodhi4_neg1>:
    24f8:	90 95       	com	r25
    24fa:	81 95       	neg	r24
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	08 95       	ret

00002500 <__divmodhi4_neg2>:
    2500:	70 95       	com	r23
    2502:	61 95       	neg	r22
    2504:	7f 4f       	sbci	r23, 0xFF	; 255

00002506 <__divmodhi4_exit>:
    2506:	08 95       	ret

00002508 <__tablejump2__>:
    2508:	ee 0f       	add	r30, r30
    250a:	ff 1f       	adc	r31, r31

0000250c <__tablejump__>:
    250c:	05 90       	lpm	r0, Z+
    250e:	f4 91       	lpm	r31, Z
    2510:	e0 2d       	mov	r30, r0
    2512:	09 94       	ijmp

00002514 <__udivmodhi4>:
    2514:	aa 1b       	sub	r26, r26
    2516:	bb 1b       	sub	r27, r27
    2518:	51 e1       	ldi	r21, 0x11	; 17
    251a:	07 c0       	rjmp	.+14     	; 0x252a <__udivmodhi4_ep>

0000251c <__udivmodhi4_loop>:
    251c:	aa 1f       	adc	r26, r26
    251e:	bb 1f       	adc	r27, r27
    2520:	a6 17       	cp	r26, r22
    2522:	b7 07       	cpc	r27, r23
    2524:	10 f0       	brcs	.+4      	; 0x252a <__udivmodhi4_ep>
    2526:	a6 1b       	sub	r26, r22
    2528:	b7 0b       	sbc	r27, r23

0000252a <__udivmodhi4_ep>:
    252a:	88 1f       	adc	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	5a 95       	dec	r21
    2530:	a9 f7       	brne	.-22     	; 0x251c <__udivmodhi4_loop>
    2532:	80 95       	com	r24
    2534:	90 95       	com	r25
    2536:	bc 01       	movw	r22, r24
    2538:	cd 01       	movw	r24, r26
    253a:	08 95       	ret

0000253c <malloc>:
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	82 30       	cpi	r24, 0x02	; 2
    2542:	91 05       	cpc	r25, r1
    2544:	10 f4       	brcc	.+4      	; 0x254a <malloc+0xe>
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	e0 91 de 00 	lds	r30, 0x00DE
    254e:	f0 91 df 00 	lds	r31, 0x00DF
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	a0 e0       	ldi	r26, 0x00	; 0
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	30 97       	sbiw	r30, 0x00	; 0
    255c:	39 f1       	breq	.+78     	; 0x25ac <malloc+0x70>
    255e:	40 81       	ld	r20, Z
    2560:	51 81       	ldd	r21, Z+1	; 0x01
    2562:	48 17       	cp	r20, r24
    2564:	59 07       	cpc	r21, r25
    2566:	b8 f0       	brcs	.+46     	; 0x2596 <malloc+0x5a>
    2568:	48 17       	cp	r20, r24
    256a:	59 07       	cpc	r21, r25
    256c:	71 f4       	brne	.+28     	; 0x258a <malloc+0x4e>
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	10 97       	sbiw	r26, 0x00	; 0
    2574:	29 f0       	breq	.+10     	; 0x2580 <malloc+0x44>
    2576:	13 96       	adiw	r26, 0x03	; 3
    2578:	9c 93       	st	X, r25
    257a:	8e 93       	st	-X, r24
    257c:	12 97       	sbiw	r26, 0x02	; 2
    257e:	2c c0       	rjmp	.+88     	; 0x25d8 <malloc+0x9c>
    2580:	90 93 df 00 	sts	0x00DF, r25
    2584:	80 93 de 00 	sts	0x00DE, r24
    2588:	27 c0       	rjmp	.+78     	; 0x25d8 <malloc+0x9c>
    258a:	21 15       	cp	r18, r1
    258c:	31 05       	cpc	r19, r1
    258e:	31 f0       	breq	.+12     	; 0x259c <malloc+0x60>
    2590:	42 17       	cp	r20, r18
    2592:	53 07       	cpc	r21, r19
    2594:	18 f0       	brcs	.+6      	; 0x259c <malloc+0x60>
    2596:	a9 01       	movw	r20, r18
    2598:	db 01       	movw	r26, r22
    259a:	01 c0       	rjmp	.+2      	; 0x259e <malloc+0x62>
    259c:	ef 01       	movw	r28, r30
    259e:	9a 01       	movw	r18, r20
    25a0:	bd 01       	movw	r22, r26
    25a2:	df 01       	movw	r26, r30
    25a4:	02 80       	ldd	r0, Z+2	; 0x02
    25a6:	f3 81       	ldd	r31, Z+3	; 0x03
    25a8:	e0 2d       	mov	r30, r0
    25aa:	d7 cf       	rjmp	.-82     	; 0x255a <malloc+0x1e>
    25ac:	21 15       	cp	r18, r1
    25ae:	31 05       	cpc	r19, r1
    25b0:	f9 f0       	breq	.+62     	; 0x25f0 <malloc+0xb4>
    25b2:	28 1b       	sub	r18, r24
    25b4:	39 0b       	sbc	r19, r25
    25b6:	24 30       	cpi	r18, 0x04	; 4
    25b8:	31 05       	cpc	r19, r1
    25ba:	80 f4       	brcc	.+32     	; 0x25dc <malloc+0xa0>
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	61 15       	cp	r22, r1
    25c2:	71 05       	cpc	r23, r1
    25c4:	21 f0       	breq	.+8      	; 0x25ce <malloc+0x92>
    25c6:	fb 01       	movw	r30, r22
    25c8:	93 83       	std	Z+3, r25	; 0x03
    25ca:	82 83       	std	Z+2, r24	; 0x02
    25cc:	04 c0       	rjmp	.+8      	; 0x25d6 <malloc+0x9a>
    25ce:	90 93 df 00 	sts	0x00DF, r25
    25d2:	80 93 de 00 	sts	0x00DE, r24
    25d6:	fe 01       	movw	r30, r28
    25d8:	32 96       	adiw	r30, 0x02	; 2
    25da:	44 c0       	rjmp	.+136    	; 0x2664 <malloc+0x128>
    25dc:	fe 01       	movw	r30, r28
    25de:	e2 0f       	add	r30, r18
    25e0:	f3 1f       	adc	r31, r19
    25e2:	81 93       	st	Z+, r24
    25e4:	91 93       	st	Z+, r25
    25e6:	22 50       	subi	r18, 0x02	; 2
    25e8:	31 09       	sbc	r19, r1
    25ea:	39 83       	std	Y+1, r19	; 0x01
    25ec:	28 83       	st	Y, r18
    25ee:	3a c0       	rjmp	.+116    	; 0x2664 <malloc+0x128>
    25f0:	20 91 dc 00 	lds	r18, 0x00DC
    25f4:	30 91 dd 00 	lds	r19, 0x00DD
    25f8:	23 2b       	or	r18, r19
    25fa:	41 f4       	brne	.+16     	; 0x260c <malloc+0xd0>
    25fc:	20 91 62 00 	lds	r18, 0x0062
    2600:	30 91 63 00 	lds	r19, 0x0063
    2604:	30 93 dd 00 	sts	0x00DD, r19
    2608:	20 93 dc 00 	sts	0x00DC, r18
    260c:	20 91 60 00 	lds	r18, 0x0060
    2610:	30 91 61 00 	lds	r19, 0x0061
    2614:	21 15       	cp	r18, r1
    2616:	31 05       	cpc	r19, r1
    2618:	41 f4       	brne	.+16     	; 0x262a <malloc+0xee>
    261a:	2d b7       	in	r18, 0x3d	; 61
    261c:	3e b7       	in	r19, 0x3e	; 62
    261e:	40 91 64 00 	lds	r20, 0x0064
    2622:	50 91 65 00 	lds	r21, 0x0065
    2626:	24 1b       	sub	r18, r20
    2628:	35 0b       	sbc	r19, r21
    262a:	e0 91 dc 00 	lds	r30, 0x00DC
    262e:	f0 91 dd 00 	lds	r31, 0x00DD
    2632:	e2 17       	cp	r30, r18
    2634:	f3 07       	cpc	r31, r19
    2636:	a0 f4       	brcc	.+40     	; 0x2660 <malloc+0x124>
    2638:	2e 1b       	sub	r18, r30
    263a:	3f 0b       	sbc	r19, r31
    263c:	28 17       	cp	r18, r24
    263e:	39 07       	cpc	r19, r25
    2640:	78 f0       	brcs	.+30     	; 0x2660 <malloc+0x124>
    2642:	ac 01       	movw	r20, r24
    2644:	4e 5f       	subi	r20, 0xFE	; 254
    2646:	5f 4f       	sbci	r21, 0xFF	; 255
    2648:	24 17       	cp	r18, r20
    264a:	35 07       	cpc	r19, r21
    264c:	48 f0       	brcs	.+18     	; 0x2660 <malloc+0x124>
    264e:	4e 0f       	add	r20, r30
    2650:	5f 1f       	adc	r21, r31
    2652:	50 93 dd 00 	sts	0x00DD, r21
    2656:	40 93 dc 00 	sts	0x00DC, r20
    265a:	81 93       	st	Z+, r24
    265c:	91 93       	st	Z+, r25
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <malloc+0x128>
    2660:	e0 e0       	ldi	r30, 0x00	; 0
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	cf 01       	movw	r24, r30
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	08 95       	ret

0000266c <free>:
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	09 f4       	brne	.+2      	; 0x2676 <free+0xa>
    2674:	87 c0       	rjmp	.+270    	; 0x2784 <free+0x118>
    2676:	fc 01       	movw	r30, r24
    2678:	32 97       	sbiw	r30, 0x02	; 2
    267a:	13 82       	std	Z+3, r1	; 0x03
    267c:	12 82       	std	Z+2, r1	; 0x02
    267e:	c0 91 de 00 	lds	r28, 0x00DE
    2682:	d0 91 df 00 	lds	r29, 0x00DF
    2686:	20 97       	sbiw	r28, 0x00	; 0
    2688:	81 f4       	brne	.+32     	; 0x26aa <free+0x3e>
    268a:	20 81       	ld	r18, Z
    268c:	31 81       	ldd	r19, Z+1	; 0x01
    268e:	28 0f       	add	r18, r24
    2690:	39 1f       	adc	r19, r25
    2692:	80 91 dc 00 	lds	r24, 0x00DC
    2696:	90 91 dd 00 	lds	r25, 0x00DD
    269a:	82 17       	cp	r24, r18
    269c:	93 07       	cpc	r25, r19
    269e:	79 f5       	brne	.+94     	; 0x26fe <free+0x92>
    26a0:	f0 93 dd 00 	sts	0x00DD, r31
    26a4:	e0 93 dc 00 	sts	0x00DC, r30
    26a8:	6d c0       	rjmp	.+218    	; 0x2784 <free+0x118>
    26aa:	de 01       	movw	r26, r28
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	ae 17       	cp	r26, r30
    26b2:	bf 07       	cpc	r27, r31
    26b4:	50 f4       	brcc	.+20     	; 0x26ca <free+0x5e>
    26b6:	12 96       	adiw	r26, 0x02	; 2
    26b8:	4d 91       	ld	r20, X+
    26ba:	5c 91       	ld	r21, X
    26bc:	13 97       	sbiw	r26, 0x03	; 3
    26be:	9d 01       	movw	r18, r26
    26c0:	41 15       	cp	r20, r1
    26c2:	51 05       	cpc	r21, r1
    26c4:	09 f1       	breq	.+66     	; 0x2708 <free+0x9c>
    26c6:	da 01       	movw	r26, r20
    26c8:	f3 cf       	rjmp	.-26     	; 0x26b0 <free+0x44>
    26ca:	b3 83       	std	Z+3, r27	; 0x03
    26cc:	a2 83       	std	Z+2, r26	; 0x02
    26ce:	40 81       	ld	r20, Z
    26d0:	51 81       	ldd	r21, Z+1	; 0x01
    26d2:	84 0f       	add	r24, r20
    26d4:	95 1f       	adc	r25, r21
    26d6:	8a 17       	cp	r24, r26
    26d8:	9b 07       	cpc	r25, r27
    26da:	71 f4       	brne	.+28     	; 0x26f8 <free+0x8c>
    26dc:	8d 91       	ld	r24, X+
    26de:	9c 91       	ld	r25, X
    26e0:	11 97       	sbiw	r26, 0x01	; 1
    26e2:	84 0f       	add	r24, r20
    26e4:	95 1f       	adc	r25, r21
    26e6:	02 96       	adiw	r24, 0x02	; 2
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
    26ec:	12 96       	adiw	r26, 0x02	; 2
    26ee:	8d 91       	ld	r24, X+
    26f0:	9c 91       	ld	r25, X
    26f2:	13 97       	sbiw	r26, 0x03	; 3
    26f4:	93 83       	std	Z+3, r25	; 0x03
    26f6:	82 83       	std	Z+2, r24	; 0x02
    26f8:	21 15       	cp	r18, r1
    26fa:	31 05       	cpc	r19, r1
    26fc:	29 f4       	brne	.+10     	; 0x2708 <free+0x9c>
    26fe:	f0 93 df 00 	sts	0x00DF, r31
    2702:	e0 93 de 00 	sts	0x00DE, r30
    2706:	3e c0       	rjmp	.+124    	; 0x2784 <free+0x118>
    2708:	d9 01       	movw	r26, r18
    270a:	13 96       	adiw	r26, 0x03	; 3
    270c:	fc 93       	st	X, r31
    270e:	ee 93       	st	-X, r30
    2710:	12 97       	sbiw	r26, 0x02	; 2
    2712:	4d 91       	ld	r20, X+
    2714:	5d 91       	ld	r21, X+
    2716:	a4 0f       	add	r26, r20
    2718:	b5 1f       	adc	r27, r21
    271a:	ea 17       	cp	r30, r26
    271c:	fb 07       	cpc	r31, r27
    271e:	79 f4       	brne	.+30     	; 0x273e <free+0xd2>
    2720:	80 81       	ld	r24, Z
    2722:	91 81       	ldd	r25, Z+1	; 0x01
    2724:	84 0f       	add	r24, r20
    2726:	95 1f       	adc	r25, r21
    2728:	02 96       	adiw	r24, 0x02	; 2
    272a:	d9 01       	movw	r26, r18
    272c:	11 96       	adiw	r26, 0x01	; 1
    272e:	9c 93       	st	X, r25
    2730:	8e 93       	st	-X, r24
    2732:	82 81       	ldd	r24, Z+2	; 0x02
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	13 96       	adiw	r26, 0x03	; 3
    2738:	9c 93       	st	X, r25
    273a:	8e 93       	st	-X, r24
    273c:	12 97       	sbiw	r26, 0x02	; 2
    273e:	e0 e0       	ldi	r30, 0x00	; 0
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	9b 81       	ldd	r25, Y+3	; 0x03
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	19 f0       	breq	.+6      	; 0x2750 <free+0xe4>
    274a:	fe 01       	movw	r30, r28
    274c:	ec 01       	movw	r28, r24
    274e:	f9 cf       	rjmp	.-14     	; 0x2742 <free+0xd6>
    2750:	ce 01       	movw	r24, r28
    2752:	02 96       	adiw	r24, 0x02	; 2
    2754:	28 81       	ld	r18, Y
    2756:	39 81       	ldd	r19, Y+1	; 0x01
    2758:	82 0f       	add	r24, r18
    275a:	93 1f       	adc	r25, r19
    275c:	20 91 dc 00 	lds	r18, 0x00DC
    2760:	30 91 dd 00 	lds	r19, 0x00DD
    2764:	28 17       	cp	r18, r24
    2766:	39 07       	cpc	r19, r25
    2768:	69 f4       	brne	.+26     	; 0x2784 <free+0x118>
    276a:	30 97       	sbiw	r30, 0x00	; 0
    276c:	29 f4       	brne	.+10     	; 0x2778 <free+0x10c>
    276e:	10 92 df 00 	sts	0x00DF, r1
    2772:	10 92 de 00 	sts	0x00DE, r1
    2776:	02 c0       	rjmp	.+4      	; 0x277c <free+0x110>
    2778:	13 82       	std	Z+3, r1	; 0x03
    277a:	12 82       	std	Z+2, r1	; 0x02
    277c:	d0 93 dd 00 	sts	0x00DD, r29
    2780:	c0 93 dc 00 	sts	0x00DC, r28
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	08 95       	ret

0000278a <do_rand>:
    278a:	8f 92       	push	r8
    278c:	9f 92       	push	r9
    278e:	af 92       	push	r10
    2790:	bf 92       	push	r11
    2792:	cf 92       	push	r12
    2794:	df 92       	push	r13
    2796:	ef 92       	push	r14
    2798:	ff 92       	push	r15
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	ec 01       	movw	r28, r24
    27a0:	68 81       	ld	r22, Y
    27a2:	79 81       	ldd	r23, Y+1	; 0x01
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	9b 81       	ldd	r25, Y+3	; 0x03
    27a8:	61 15       	cp	r22, r1
    27aa:	71 05       	cpc	r23, r1
    27ac:	81 05       	cpc	r24, r1
    27ae:	91 05       	cpc	r25, r1
    27b0:	21 f4       	brne	.+8      	; 0x27ba <do_rand+0x30>
    27b2:	64 e2       	ldi	r22, 0x24	; 36
    27b4:	79 ed       	ldi	r23, 0xD9	; 217
    27b6:	8b e5       	ldi	r24, 0x5B	; 91
    27b8:	97 e0       	ldi	r25, 0x07	; 7
    27ba:	2d e1       	ldi	r18, 0x1D	; 29
    27bc:	33 ef       	ldi	r19, 0xF3	; 243
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	50 e0       	ldi	r21, 0x00	; 0
    27c2:	0e 94 56 18 	call	0x30ac	; 0x30ac <__divmodsi4>
    27c6:	49 01       	movw	r8, r18
    27c8:	5a 01       	movw	r10, r20
    27ca:	9b 01       	movw	r18, r22
    27cc:	ac 01       	movw	r20, r24
    27ce:	a7 ea       	ldi	r26, 0xA7	; 167
    27d0:	b1 e4       	ldi	r27, 0x41	; 65
    27d2:	0e 94 75 18 	call	0x30ea	; 0x30ea <__muluhisi3>
    27d6:	6b 01       	movw	r12, r22
    27d8:	7c 01       	movw	r14, r24
    27da:	ac ee       	ldi	r26, 0xEC	; 236
    27dc:	b4 ef       	ldi	r27, 0xF4	; 244
    27de:	a5 01       	movw	r20, r10
    27e0:	94 01       	movw	r18, r8
    27e2:	0e 94 83 18 	call	0x3106	; 0x3106 <__mulohisi3>
    27e6:	c6 0e       	add	r12, r22
    27e8:	d7 1e       	adc	r13, r23
    27ea:	e8 1e       	adc	r14, r24
    27ec:	f9 1e       	adc	r15, r25
    27ee:	f7 fe       	sbrs	r15, 7
    27f0:	06 c0       	rjmp	.+12     	; 0x27fe <do_rand+0x74>
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	c8 1a       	sub	r12, r24
    27f6:	d1 08       	sbc	r13, r1
    27f8:	e1 08       	sbc	r14, r1
    27fa:	80 e8       	ldi	r24, 0x80	; 128
    27fc:	f8 0a       	sbc	r15, r24
    27fe:	c8 82       	st	Y, r12
    2800:	d9 82       	std	Y+1, r13	; 0x01
    2802:	ea 82       	std	Y+2, r14	; 0x02
    2804:	fb 82       	std	Y+3, r15	; 0x03
    2806:	c6 01       	movw	r24, r12
    2808:	9f 77       	andi	r25, 0x7F	; 127
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	ff 90       	pop	r15
    2810:	ef 90       	pop	r14
    2812:	df 90       	pop	r13
    2814:	cf 90       	pop	r12
    2816:	bf 90       	pop	r11
    2818:	af 90       	pop	r10
    281a:	9f 90       	pop	r9
    281c:	8f 90       	pop	r8
    281e:	08 95       	ret

00002820 <rand_r>:
    2820:	0e 94 c5 13 	call	0x278a	; 0x278a <do_rand>
    2824:	08 95       	ret

00002826 <rand>:
    2826:	86 e6       	ldi	r24, 0x66	; 102
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 c5 13 	call	0x278a	; 0x278a <do_rand>
    282e:	08 95       	ret

00002830 <srand>:
    2830:	a0 e0       	ldi	r26, 0x00	; 0
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	80 93 66 00 	sts	0x0066, r24
    2838:	90 93 67 00 	sts	0x0067, r25
    283c:	a0 93 68 00 	sts	0x0068, r26
    2840:	b0 93 69 00 	sts	0x0069, r27
    2844:	08 95       	ret

00002846 <strtol>:
    2846:	2f 92       	push	r2
    2848:	3f 92       	push	r3
    284a:	5f 92       	push	r5
    284c:	6f 92       	push	r6
    284e:	7f 92       	push	r7
    2850:	8f 92       	push	r8
    2852:	9f 92       	push	r9
    2854:	af 92       	push	r10
    2856:	bf 92       	push	r11
    2858:	cf 92       	push	r12
    285a:	df 92       	push	r13
    285c:	ef 92       	push	r14
    285e:	ff 92       	push	r15
    2860:	0f 93       	push	r16
    2862:	1f 93       	push	r17
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	8b 01       	movw	r16, r22
    286a:	ea 01       	movw	r28, r20
    286c:	61 15       	cp	r22, r1
    286e:	71 05       	cpc	r23, r1
    2870:	21 f0       	breq	.+8      	; 0x287a <strtol+0x34>
    2872:	db 01       	movw	r26, r22
    2874:	8c 93       	st	X, r24
    2876:	11 96       	adiw	r26, 0x01	; 1
    2878:	9c 93       	st	X, r25
    287a:	20 97       	sbiw	r28, 0x00	; 0
    287c:	39 f0       	breq	.+14     	; 0x288c <strtol+0x46>
    287e:	9e 01       	movw	r18, r28
    2880:	22 50       	subi	r18, 0x02	; 2
    2882:	31 09       	sbc	r19, r1
    2884:	23 32       	cpi	r18, 0x23	; 35
    2886:	31 05       	cpc	r19, r1
    2888:	08 f0       	brcs	.+2      	; 0x288c <strtol+0x46>
    288a:	fb c0       	rjmp	.+502    	; 0x2a82 <strtol+0x23c>
    288c:	7c 01       	movw	r14, r24
    288e:	67 01       	movw	r12, r14
    2890:	bf ef       	ldi	r27, 0xFF	; 255
    2892:	cb 1a       	sub	r12, r27
    2894:	db 0a       	sbc	r13, r27
    2896:	56 01       	movw	r10, r12
    2898:	f7 01       	movw	r30, r14
    289a:	60 80       	ld	r6, Z
    289c:	86 2d       	mov	r24, r6
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0e 94 57 15 	call	0x2aae	; 0x2aae <isspace>
    28a4:	89 2b       	or	r24, r25
    28a6:	11 f0       	breq	.+4      	; 0x28ac <strtol+0x66>
    28a8:	76 01       	movw	r14, r12
    28aa:	f1 cf       	rjmp	.-30     	; 0x288e <strtol+0x48>
    28ac:	fd e2       	ldi	r31, 0x2D	; 45
    28ae:	6f 12       	cpse	r6, r31
    28b0:	0a c0       	rjmp	.+20     	; 0x28c6 <strtol+0x80>
    28b2:	57 01       	movw	r10, r14
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	a8 0e       	add	r10, r24
    28b8:	b1 1c       	adc	r11, r1
    28ba:	d7 01       	movw	r26, r14
    28bc:	11 96       	adiw	r26, 0x01	; 1
    28be:	6c 90       	ld	r6, X
    28c0:	77 24       	eor	r7, r7
    28c2:	73 94       	inc	r7
    28c4:	0b c0       	rjmp	.+22     	; 0x28dc <strtol+0x96>
    28c6:	bb e2       	ldi	r27, 0x2B	; 43
    28c8:	6b 12       	cpse	r6, r27
    28ca:	07 c0       	rjmp	.+14     	; 0x28da <strtol+0x94>
    28cc:	57 01       	movw	r10, r14
    28ce:	e2 e0       	ldi	r30, 0x02	; 2
    28d0:	ae 0e       	add	r10, r30
    28d2:	b1 1c       	adc	r11, r1
    28d4:	d7 01       	movw	r26, r14
    28d6:	11 96       	adiw	r26, 0x01	; 1
    28d8:	6c 90       	ld	r6, X
    28da:	71 2c       	mov	r7, r1
    28dc:	ce 01       	movw	r24, r28
    28de:	8f 7e       	andi	r24, 0xEF	; 239
    28e0:	89 2b       	or	r24, r25
    28e2:	89 f4       	brne	.+34     	; 0x2906 <strtol+0xc0>
    28e4:	b0 e3       	ldi	r27, 0x30	; 48
    28e6:	6b 12       	cpse	r6, r27
    28e8:	22 c0       	rjmp	.+68     	; 0x292e <strtol+0xe8>
    28ea:	f5 01       	movw	r30, r10
    28ec:	80 81       	ld	r24, Z
    28ee:	8f 7d       	andi	r24, 0xDF	; 223
    28f0:	88 35       	cpi	r24, 0x58	; 88
    28f2:	41 f5       	brne	.+80     	; 0x2944 <strtol+0xfe>
    28f4:	61 80       	ldd	r6, Z+1	; 0x01
    28f6:	f2 e0       	ldi	r31, 0x02	; 2
    28f8:	af 0e       	add	r10, r31
    28fa:	b1 1c       	adc	r11, r1
    28fc:	87 2d       	mov	r24, r7
    28fe:	82 60       	ori	r24, 0x02	; 2
    2900:	78 2e       	mov	r7, r24
    2902:	c0 e1       	ldi	r28, 0x10	; 16
    2904:	d0 e0       	ldi	r29, 0x00	; 0
    2906:	c8 30       	cpi	r28, 0x08	; 8
    2908:	d1 05       	cpc	r29, r1
    290a:	f1 f0       	breq	.+60     	; 0x2948 <strtol+0x102>
    290c:	4c f4       	brge	.+18     	; 0x2920 <strtol+0xda>
    290e:	c2 30       	cpi	r28, 0x02	; 2
    2910:	d1 05       	cpc	r29, r1
    2912:	11 f5       	brne	.+68     	; 0x2958 <strtol+0x112>
    2914:	c1 2c       	mov	r12, r1
    2916:	d1 2c       	mov	r13, r1
    2918:	e1 2c       	mov	r14, r1
    291a:	b0 e4       	ldi	r27, 0x40	; 64
    291c:	fb 2e       	mov	r15, r27
    291e:	2f c0       	rjmp	.+94     	; 0x297e <strtol+0x138>
    2920:	ca 30       	cpi	r28, 0x0A	; 10
    2922:	d1 05       	cpc	r29, r1
    2924:	31 f0       	breq	.+12     	; 0x2932 <strtol+0xec>
    2926:	c0 31       	cpi	r28, 0x10	; 16
    2928:	d1 05       	cpc	r29, r1
    292a:	21 f1       	breq	.+72     	; 0x2974 <strtol+0x12e>
    292c:	15 c0       	rjmp	.+42     	; 0x2958 <strtol+0x112>
    292e:	20 97       	sbiw	r28, 0x00	; 0
    2930:	51 f7       	brne	.-44     	; 0x2906 <strtol+0xc0>
    2932:	ca e0       	ldi	r28, 0x0A	; 10
    2934:	d0 e0       	ldi	r29, 0x00	; 0
    2936:	ac ec       	ldi	r26, 0xCC	; 204
    2938:	ca 2e       	mov	r12, r26
    293a:	dc 2c       	mov	r13, r12
    293c:	ec 2c       	mov	r14, r12
    293e:	ac e0       	ldi	r26, 0x0C	; 12
    2940:	fa 2e       	mov	r15, r26
    2942:	1d c0       	rjmp	.+58     	; 0x297e <strtol+0x138>
    2944:	20 97       	sbiw	r28, 0x00	; 0
    2946:	f9 f6       	brne	.-66     	; 0x2906 <strtol+0xc0>
    2948:	c8 e0       	ldi	r28, 0x08	; 8
    294a:	d0 e0       	ldi	r29, 0x00	; 0
    294c:	c1 2c       	mov	r12, r1
    294e:	d1 2c       	mov	r13, r1
    2950:	e1 2c       	mov	r14, r1
    2952:	f0 e1       	ldi	r31, 0x10	; 16
    2954:	ff 2e       	mov	r15, r31
    2956:	13 c0       	rjmp	.+38     	; 0x297e <strtol+0x138>
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	70 e0       	ldi	r23, 0x00	; 0
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e8       	ldi	r25, 0x80	; 128
    2960:	9e 01       	movw	r18, r28
    2962:	44 27       	eor	r20, r20
    2964:	37 fd       	sbrc	r19, 7
    2966:	40 95       	com	r20
    2968:	54 2f       	mov	r21, r20
    296a:	0e 94 34 18 	call	0x3068	; 0x3068 <__udivmodsi4>
    296e:	69 01       	movw	r12, r18
    2970:	7a 01       	movw	r14, r20
    2972:	05 c0       	rjmp	.+10     	; 0x297e <strtol+0x138>
    2974:	c1 2c       	mov	r12, r1
    2976:	d1 2c       	mov	r13, r1
    2978:	e1 2c       	mov	r14, r1
    297a:	e8 e0       	ldi	r30, 0x08	; 8
    297c:	fe 2e       	mov	r15, r30
    297e:	f5 01       	movw	r30, r10
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	a9 01       	movw	r20, r18
    2988:	4e 01       	movw	r8, r28
    298a:	aa 24       	eor	r10, r10
    298c:	97 fc       	sbrc	r9, 7
    298e:	a0 94       	com	r10
    2990:	ba 2c       	mov	r11, r10
    2992:	1f 01       	movw	r2, r30
    2994:	70 ed       	ldi	r23, 0xD0	; 208
    2996:	57 2e       	mov	r5, r23
    2998:	56 0c       	add	r5, r6
    299a:	a9 e0       	ldi	r26, 0x09	; 9
    299c:	a5 15       	cp	r26, r5
    299e:	70 f4       	brcc	.+28     	; 0x29bc <strtol+0x176>
    29a0:	8f eb       	ldi	r24, 0xBF	; 191
    29a2:	86 0d       	add	r24, r6
    29a4:	8a 31       	cpi	r24, 0x1A	; 26
    29a6:	18 f4       	brcc	.+6      	; 0x29ae <strtol+0x168>
    29a8:	99 ec       	ldi	r25, 0xC9	; 201
    29aa:	59 2e       	mov	r5, r25
    29ac:	06 c0       	rjmp	.+12     	; 0x29ba <strtol+0x174>
    29ae:	8f e9       	ldi	r24, 0x9F	; 159
    29b0:	86 0d       	add	r24, r6
    29b2:	8a 31       	cpi	r24, 0x1A	; 26
    29b4:	30 f5       	brcc	.+76     	; 0x2a02 <strtol+0x1bc>
    29b6:	89 ea       	ldi	r24, 0xA9	; 169
    29b8:	58 2e       	mov	r5, r24
    29ba:	56 0c       	add	r5, r6
    29bc:	85 2d       	mov	r24, r5
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	8c 17       	cp	r24, r28
    29c2:	9d 07       	cpc	r25, r29
    29c4:	f4 f4       	brge	.+60     	; 0x2a02 <strtol+0x1bc>
    29c6:	67 fd       	sbrc	r22, 7
    29c8:	18 c0       	rjmp	.+48     	; 0x29fa <strtol+0x1b4>
    29ca:	c2 16       	cp	r12, r18
    29cc:	d3 06       	cpc	r13, r19
    29ce:	e4 06       	cpc	r14, r20
    29d0:	f5 06       	cpc	r15, r21
    29d2:	80 f0       	brcs	.+32     	; 0x29f4 <strtol+0x1ae>
    29d4:	c5 01       	movw	r24, r10
    29d6:	b4 01       	movw	r22, r8
    29d8:	0e 94 24 18 	call	0x3048	; 0x3048 <__mulsi3>
    29dc:	9b 01       	movw	r18, r22
    29de:	ac 01       	movw	r20, r24
    29e0:	25 0d       	add	r18, r5
    29e2:	31 1d       	adc	r19, r1
    29e4:	41 1d       	adc	r20, r1
    29e6:	51 1d       	adc	r21, r1
    29e8:	21 30       	cpi	r18, 0x01	; 1
    29ea:	31 05       	cpc	r19, r1
    29ec:	41 05       	cpc	r20, r1
    29ee:	b0 e8       	ldi	r27, 0x80	; 128
    29f0:	5b 07       	cpc	r21, r27
    29f2:	10 f0       	brcs	.+4      	; 0x29f8 <strtol+0x1b2>
    29f4:	6f ef       	ldi	r22, 0xFF	; 255
    29f6:	01 c0       	rjmp	.+2      	; 0x29fa <strtol+0x1b4>
    29f8:	61 e0       	ldi	r22, 0x01	; 1
    29fa:	31 96       	adiw	r30, 0x01	; 1
    29fc:	d1 01       	movw	r26, r2
    29fe:	6c 90       	ld	r6, X
    2a00:	c8 cf       	rjmp	.-112    	; 0x2992 <strtol+0x14c>
    2a02:	87 2d       	mov	r24, r7
    2a04:	81 70       	andi	r24, 0x01	; 1
    2a06:	01 15       	cp	r16, r1
    2a08:	11 05       	cpc	r17, r1
    2a0a:	71 f0       	breq	.+28     	; 0x2a28 <strtol+0x1e2>
    2a0c:	66 23       	and	r22, r22
    2a0e:	29 f0       	breq	.+10     	; 0x2a1a <strtol+0x1d4>
    2a10:	31 97       	sbiw	r30, 0x01	; 1
    2a12:	d8 01       	movw	r26, r16
    2a14:	ed 93       	st	X+, r30
    2a16:	fc 93       	st	X, r31
    2a18:	07 c0       	rjmp	.+14     	; 0x2a28 <strtol+0x1e2>
    2a1a:	71 fe       	sbrs	r7, 1
    2a1c:	19 c0       	rjmp	.+50     	; 0x2a50 <strtol+0x20a>
    2a1e:	32 97       	sbiw	r30, 0x02	; 2
    2a20:	d8 01       	movw	r26, r16
    2a22:	ed 93       	st	X+, r30
    2a24:	fc 93       	st	X, r31
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <strtol+0x20a>
    2a28:	67 ff       	sbrs	r22, 7
    2a2a:	12 c0       	rjmp	.+36     	; 0x2a50 <strtol+0x20a>
    2a2c:	88 23       	and	r24, r24
    2a2e:	29 f0       	breq	.+10     	; 0x2a3a <strtol+0x1f4>
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	50 e8       	ldi	r21, 0x80	; 128
    2a38:	04 c0       	rjmp	.+8      	; 0x2a42 <strtol+0x1fc>
    2a3a:	2f ef       	ldi	r18, 0xFF	; 255
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f ef       	ldi	r20, 0xFF	; 255
    2a40:	5f e7       	ldi	r21, 0x7F	; 127
    2a42:	82 e2       	ldi	r24, 0x22	; 34
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	90 93 e1 00 	sts	0x00E1, r25
    2a4a:	80 93 e0 00 	sts	0x00E0, r24
    2a4e:	16 c0       	rjmp	.+44     	; 0x2a7c <strtol+0x236>
    2a50:	88 23       	and	r24, r24
    2a52:	41 f0       	breq	.+16     	; 0x2a64 <strtol+0x21e>
    2a54:	50 95       	com	r21
    2a56:	40 95       	com	r20
    2a58:	30 95       	com	r19
    2a5a:	21 95       	neg	r18
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a60:	5f 4f       	sbci	r21, 0xFF	; 255
    2a62:	0c c0       	rjmp	.+24     	; 0x2a7c <strtol+0x236>
    2a64:	57 ff       	sbrs	r21, 7
    2a66:	0a c0       	rjmp	.+20     	; 0x2a7c <strtol+0x236>
    2a68:	82 e2       	ldi	r24, 0x22	; 34
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	90 93 e1 00 	sts	0x00E1, r25
    2a70:	80 93 e0 00 	sts	0x00E0, r24
    2a74:	2f ef       	ldi	r18, 0xFF	; 255
    2a76:	3f ef       	ldi	r19, 0xFF	; 255
    2a78:	4f ef       	ldi	r20, 0xFF	; 255
    2a7a:	5f e7       	ldi	r21, 0x7F	; 127
    2a7c:	b9 01       	movw	r22, r18
    2a7e:	ca 01       	movw	r24, r20
    2a80:	04 c0       	rjmp	.+8      	; 0x2a8a <strtol+0x244>
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	1f 91       	pop	r17
    2a90:	0f 91       	pop	r16
    2a92:	ff 90       	pop	r15
    2a94:	ef 90       	pop	r14
    2a96:	df 90       	pop	r13
    2a98:	cf 90       	pop	r12
    2a9a:	bf 90       	pop	r11
    2a9c:	af 90       	pop	r10
    2a9e:	9f 90       	pop	r9
    2aa0:	8f 90       	pop	r8
    2aa2:	7f 90       	pop	r7
    2aa4:	6f 90       	pop	r6
    2aa6:	5f 90       	pop	r5
    2aa8:	3f 90       	pop	r3
    2aaa:	2f 90       	pop	r2
    2aac:	08 95       	ret

00002aae <isspace>:
    2aae:	91 11       	cpse	r25, r1
    2ab0:	05 c2       	rjmp	.+1034   	; 0x2ebc <__ctype_isfalse>
    2ab2:	80 32       	cpi	r24, 0x20	; 32
    2ab4:	19 f0       	breq	.+6      	; 0x2abc <isspace+0xe>
    2ab6:	89 50       	subi	r24, 0x09	; 9
    2ab8:	85 50       	subi	r24, 0x05	; 5
    2aba:	d0 f7       	brcc	.-12     	; 0x2ab0 <isspace+0x2>
    2abc:	08 95       	ret

00002abe <sprintf>:
    2abe:	ae e0       	ldi	r26, 0x0E	; 14
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e5 e6       	ldi	r30, 0x65	; 101
    2ac4:	f5 e1       	ldi	r31, 0x15	; 21
    2ac6:	0c 94 96 18 	jmp	0x312c	; 0x312c <__prologue_saves__+0x1c>
    2aca:	0d 89       	ldd	r16, Y+21	; 0x15
    2acc:	1e 89       	ldd	r17, Y+22	; 0x16
    2ace:	86 e0       	ldi	r24, 0x06	; 6
    2ad0:	8c 83       	std	Y+4, r24	; 0x04
    2ad2:	1a 83       	std	Y+2, r17	; 0x02
    2ad4:	09 83       	std	Y+1, r16	; 0x01
    2ad6:	8f ef       	ldi	r24, 0xFF	; 255
    2ad8:	9f e7       	ldi	r25, 0x7F	; 127
    2ada:	9e 83       	std	Y+6, r25	; 0x06
    2adc:	8d 83       	std	Y+5, r24	; 0x05
    2ade:	ae 01       	movw	r20, r28
    2ae0:	47 5e       	subi	r20, 0xE7	; 231
    2ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae4:	6f 89       	ldd	r22, Y+23	; 0x17
    2ae6:	78 8d       	ldd	r23, Y+24	; 0x18
    2ae8:	ce 01       	movw	r24, r28
    2aea:	01 96       	adiw	r24, 0x01	; 1
    2aec:	0e 94 81 15 	call	0x2b02	; 0x2b02 <vfprintf>
    2af0:	ef 81       	ldd	r30, Y+7	; 0x07
    2af2:	f8 85       	ldd	r31, Y+8	; 0x08
    2af4:	e0 0f       	add	r30, r16
    2af6:	f1 1f       	adc	r31, r17
    2af8:	10 82       	st	Z, r1
    2afa:	2e 96       	adiw	r28, 0x0e	; 14
    2afc:	e4 e0       	ldi	r30, 0x04	; 4
    2afe:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__epilogue_restores__+0x1c>

00002b02 <vfprintf>:
    2b02:	ac e0       	ldi	r26, 0x0C	; 12
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e7 e8       	ldi	r30, 0x87	; 135
    2b08:	f5 e1       	ldi	r31, 0x15	; 21
    2b0a:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__prologue_saves__>
    2b0e:	7c 01       	movw	r14, r24
    2b10:	6b 01       	movw	r12, r22
    2b12:	8a 01       	movw	r16, r20
    2b14:	fc 01       	movw	r30, r24
    2b16:	17 82       	std	Z+7, r1	; 0x07
    2b18:	16 82       	std	Z+6, r1	; 0x06
    2b1a:	83 81       	ldd	r24, Z+3	; 0x03
    2b1c:	81 ff       	sbrs	r24, 1
    2b1e:	bd c1       	rjmp	.+890    	; 0x2e9a <vfprintf+0x398>
    2b20:	ce 01       	movw	r24, r28
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	4c 01       	movw	r8, r24
    2b26:	f7 01       	movw	r30, r14
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	f6 01       	movw	r30, r12
    2b2c:	93 fd       	sbrc	r25, 3
    2b2e:	85 91       	lpm	r24, Z+
    2b30:	93 ff       	sbrs	r25, 3
    2b32:	81 91       	ld	r24, Z+
    2b34:	6f 01       	movw	r12, r30
    2b36:	88 23       	and	r24, r24
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <vfprintf+0x3a>
    2b3a:	ab c1       	rjmp	.+854    	; 0x2e92 <vfprintf+0x390>
    2b3c:	85 32       	cpi	r24, 0x25	; 37
    2b3e:	39 f4       	brne	.+14     	; 0x2b4e <vfprintf+0x4c>
    2b40:	93 fd       	sbrc	r25, 3
    2b42:	85 91       	lpm	r24, Z+
    2b44:	93 ff       	sbrs	r25, 3
    2b46:	81 91       	ld	r24, Z+
    2b48:	6f 01       	movw	r12, r30
    2b4a:	85 32       	cpi	r24, 0x25	; 37
    2b4c:	29 f4       	brne	.+10     	; 0x2b58 <vfprintf+0x56>
    2b4e:	b7 01       	movw	r22, r14
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 77 17 	call	0x2eee	; 0x2eee <fputc>
    2b56:	e7 cf       	rjmp	.-50     	; 0x2b26 <vfprintf+0x24>
    2b58:	51 2c       	mov	r5, r1
    2b5a:	31 2c       	mov	r3, r1
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	20 32       	cpi	r18, 0x20	; 32
    2b60:	a0 f4       	brcc	.+40     	; 0x2b8a <vfprintf+0x88>
    2b62:	8b 32       	cpi	r24, 0x2B	; 43
    2b64:	69 f0       	breq	.+26     	; 0x2b80 <vfprintf+0x7e>
    2b66:	30 f4       	brcc	.+12     	; 0x2b74 <vfprintf+0x72>
    2b68:	80 32       	cpi	r24, 0x20	; 32
    2b6a:	59 f0       	breq	.+22     	; 0x2b82 <vfprintf+0x80>
    2b6c:	83 32       	cpi	r24, 0x23	; 35
    2b6e:	69 f4       	brne	.+26     	; 0x2b8a <vfprintf+0x88>
    2b70:	20 61       	ori	r18, 0x10	; 16
    2b72:	2c c0       	rjmp	.+88     	; 0x2bcc <vfprintf+0xca>
    2b74:	8d 32       	cpi	r24, 0x2D	; 45
    2b76:	39 f0       	breq	.+14     	; 0x2b86 <vfprintf+0x84>
    2b78:	80 33       	cpi	r24, 0x30	; 48
    2b7a:	39 f4       	brne	.+14     	; 0x2b8a <vfprintf+0x88>
    2b7c:	21 60       	ori	r18, 0x01	; 1
    2b7e:	26 c0       	rjmp	.+76     	; 0x2bcc <vfprintf+0xca>
    2b80:	22 60       	ori	r18, 0x02	; 2
    2b82:	24 60       	ori	r18, 0x04	; 4
    2b84:	23 c0       	rjmp	.+70     	; 0x2bcc <vfprintf+0xca>
    2b86:	28 60       	ori	r18, 0x08	; 8
    2b88:	21 c0       	rjmp	.+66     	; 0x2bcc <vfprintf+0xca>
    2b8a:	27 fd       	sbrc	r18, 7
    2b8c:	27 c0       	rjmp	.+78     	; 0x2bdc <vfprintf+0xda>
    2b8e:	30 ed       	ldi	r19, 0xD0	; 208
    2b90:	38 0f       	add	r19, r24
    2b92:	3a 30       	cpi	r19, 0x0A	; 10
    2b94:	78 f4       	brcc	.+30     	; 0x2bb4 <vfprintf+0xb2>
    2b96:	26 ff       	sbrs	r18, 6
    2b98:	06 c0       	rjmp	.+12     	; 0x2ba6 <vfprintf+0xa4>
    2b9a:	fa e0       	ldi	r31, 0x0A	; 10
    2b9c:	5f 9e       	mul	r5, r31
    2b9e:	30 0d       	add	r19, r0
    2ba0:	11 24       	eor	r1, r1
    2ba2:	53 2e       	mov	r5, r19
    2ba4:	13 c0       	rjmp	.+38     	; 0x2bcc <vfprintf+0xca>
    2ba6:	8a e0       	ldi	r24, 0x0A	; 10
    2ba8:	38 9e       	mul	r3, r24
    2baa:	30 0d       	add	r19, r0
    2bac:	11 24       	eor	r1, r1
    2bae:	33 2e       	mov	r3, r19
    2bb0:	20 62       	ori	r18, 0x20	; 32
    2bb2:	0c c0       	rjmp	.+24     	; 0x2bcc <vfprintf+0xca>
    2bb4:	8e 32       	cpi	r24, 0x2E	; 46
    2bb6:	21 f4       	brne	.+8      	; 0x2bc0 <vfprintf+0xbe>
    2bb8:	26 fd       	sbrc	r18, 6
    2bba:	6b c1       	rjmp	.+726    	; 0x2e92 <vfprintf+0x390>
    2bbc:	20 64       	ori	r18, 0x40	; 64
    2bbe:	06 c0       	rjmp	.+12     	; 0x2bcc <vfprintf+0xca>
    2bc0:	8c 36       	cpi	r24, 0x6C	; 108
    2bc2:	11 f4       	brne	.+4      	; 0x2bc8 <vfprintf+0xc6>
    2bc4:	20 68       	ori	r18, 0x80	; 128
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <vfprintf+0xca>
    2bc8:	88 36       	cpi	r24, 0x68	; 104
    2bca:	41 f4       	brne	.+16     	; 0x2bdc <vfprintf+0xda>
    2bcc:	f6 01       	movw	r30, r12
    2bce:	93 fd       	sbrc	r25, 3
    2bd0:	85 91       	lpm	r24, Z+
    2bd2:	93 ff       	sbrs	r25, 3
    2bd4:	81 91       	ld	r24, Z+
    2bd6:	6f 01       	movw	r12, r30
    2bd8:	81 11       	cpse	r24, r1
    2bda:	c1 cf       	rjmp	.-126    	; 0x2b5e <vfprintf+0x5c>
    2bdc:	98 2f       	mov	r25, r24
    2bde:	9f 7d       	andi	r25, 0xDF	; 223
    2be0:	95 54       	subi	r25, 0x45	; 69
    2be2:	93 30       	cpi	r25, 0x03	; 3
    2be4:	28 f4       	brcc	.+10     	; 0x2bf0 <vfprintf+0xee>
    2be6:	0c 5f       	subi	r16, 0xFC	; 252
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bea:	ff e3       	ldi	r31, 0x3F	; 63
    2bec:	f9 83       	std	Y+1, r31	; 0x01
    2bee:	0d c0       	rjmp	.+26     	; 0x2c0a <vfprintf+0x108>
    2bf0:	83 36       	cpi	r24, 0x63	; 99
    2bf2:	31 f0       	breq	.+12     	; 0x2c00 <vfprintf+0xfe>
    2bf4:	83 37       	cpi	r24, 0x73	; 115
    2bf6:	71 f0       	breq	.+28     	; 0x2c14 <vfprintf+0x112>
    2bf8:	83 35       	cpi	r24, 0x53	; 83
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <vfprintf+0xfc>
    2bfc:	5b c0       	rjmp	.+182    	; 0x2cb4 <vfprintf+0x1b2>
    2bfe:	22 c0       	rjmp	.+68     	; 0x2c44 <vfprintf+0x142>
    2c00:	f8 01       	movw	r30, r16
    2c02:	80 81       	ld	r24, Z
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	0e 5f       	subi	r16, 0xFE	; 254
    2c08:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0a:	44 24       	eor	r4, r4
    2c0c:	43 94       	inc	r4
    2c0e:	51 2c       	mov	r5, r1
    2c10:	54 01       	movw	r10, r8
    2c12:	15 c0       	rjmp	.+42     	; 0x2c3e <vfprintf+0x13c>
    2c14:	38 01       	movw	r6, r16
    2c16:	f2 e0       	ldi	r31, 0x02	; 2
    2c18:	6f 0e       	add	r6, r31
    2c1a:	71 1c       	adc	r7, r1
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	a0 80       	ld	r10, Z
    2c20:	b1 80       	ldd	r11, Z+1	; 0x01
    2c22:	26 ff       	sbrs	r18, 6
    2c24:	03 c0       	rjmp	.+6      	; 0x2c2c <vfprintf+0x12a>
    2c26:	65 2d       	mov	r22, r5
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	02 c0       	rjmp	.+4      	; 0x2c30 <vfprintf+0x12e>
    2c2c:	6f ef       	ldi	r22, 0xFF	; 255
    2c2e:	7f ef       	ldi	r23, 0xFF	; 255
    2c30:	c5 01       	movw	r24, r10
    2c32:	2c 87       	std	Y+12, r18	; 0x0c
    2c34:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <strnlen>
    2c38:	2c 01       	movw	r4, r24
    2c3a:	83 01       	movw	r16, r6
    2c3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c3e:	2f 77       	andi	r18, 0x7F	; 127
    2c40:	22 2e       	mov	r2, r18
    2c42:	17 c0       	rjmp	.+46     	; 0x2c72 <vfprintf+0x170>
    2c44:	38 01       	movw	r6, r16
    2c46:	f2 e0       	ldi	r31, 0x02	; 2
    2c48:	6f 0e       	add	r6, r31
    2c4a:	71 1c       	adc	r7, r1
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	a0 80       	ld	r10, Z
    2c50:	b1 80       	ldd	r11, Z+1	; 0x01
    2c52:	26 ff       	sbrs	r18, 6
    2c54:	03 c0       	rjmp	.+6      	; 0x2c5c <vfprintf+0x15a>
    2c56:	65 2d       	mov	r22, r5
    2c58:	70 e0       	ldi	r23, 0x00	; 0
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <vfprintf+0x15e>
    2c5c:	6f ef       	ldi	r22, 0xFF	; 255
    2c5e:	7f ef       	ldi	r23, 0xFF	; 255
    2c60:	c5 01       	movw	r24, r10
    2c62:	2c 87       	std	Y+12, r18	; 0x0c
    2c64:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <strnlen_P>
    2c68:	2c 01       	movw	r4, r24
    2c6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c6c:	20 68       	ori	r18, 0x80	; 128
    2c6e:	22 2e       	mov	r2, r18
    2c70:	83 01       	movw	r16, r6
    2c72:	23 fc       	sbrc	r2, 3
    2c74:	1b c0       	rjmp	.+54     	; 0x2cac <vfprintf+0x1aa>
    2c76:	83 2d       	mov	r24, r3
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	48 16       	cp	r4, r24
    2c7c:	59 06       	cpc	r5, r25
    2c7e:	b0 f4       	brcc	.+44     	; 0x2cac <vfprintf+0x1aa>
    2c80:	b7 01       	movw	r22, r14
    2c82:	80 e2       	ldi	r24, 0x20	; 32
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	0e 94 77 17 	call	0x2eee	; 0x2eee <fputc>
    2c8a:	3a 94       	dec	r3
    2c8c:	f4 cf       	rjmp	.-24     	; 0x2c76 <vfprintf+0x174>
    2c8e:	f5 01       	movw	r30, r10
    2c90:	27 fc       	sbrc	r2, 7
    2c92:	85 91       	lpm	r24, Z+
    2c94:	27 fe       	sbrs	r2, 7
    2c96:	81 91       	ld	r24, Z+
    2c98:	5f 01       	movw	r10, r30
    2c9a:	b7 01       	movw	r22, r14
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 77 17 	call	0x2eee	; 0x2eee <fputc>
    2ca2:	31 10       	cpse	r3, r1
    2ca4:	3a 94       	dec	r3
    2ca6:	f1 e0       	ldi	r31, 0x01	; 1
    2ca8:	4f 1a       	sub	r4, r31
    2caa:	51 08       	sbc	r5, r1
    2cac:	41 14       	cp	r4, r1
    2cae:	51 04       	cpc	r5, r1
    2cb0:	71 f7       	brne	.-36     	; 0x2c8e <vfprintf+0x18c>
    2cb2:	e5 c0       	rjmp	.+458    	; 0x2e7e <vfprintf+0x37c>
    2cb4:	84 36       	cpi	r24, 0x64	; 100
    2cb6:	11 f0       	breq	.+4      	; 0x2cbc <vfprintf+0x1ba>
    2cb8:	89 36       	cpi	r24, 0x69	; 105
    2cba:	39 f5       	brne	.+78     	; 0x2d0a <vfprintf+0x208>
    2cbc:	f8 01       	movw	r30, r16
    2cbe:	27 ff       	sbrs	r18, 7
    2cc0:	07 c0       	rjmp	.+14     	; 0x2cd0 <vfprintf+0x1ce>
    2cc2:	60 81       	ld	r22, Z
    2cc4:	71 81       	ldd	r23, Z+1	; 0x01
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	0c 5f       	subi	r16, 0xFC	; 252
    2ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cce:	08 c0       	rjmp	.+16     	; 0x2ce0 <vfprintf+0x1de>
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	88 27       	eor	r24, r24
    2cd6:	77 fd       	sbrc	r23, 7
    2cd8:	80 95       	com	r24
    2cda:	98 2f       	mov	r25, r24
    2cdc:	0e 5f       	subi	r16, 0xFE	; 254
    2cde:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce0:	2f 76       	andi	r18, 0x6F	; 111
    2ce2:	b2 2e       	mov	r11, r18
    2ce4:	97 ff       	sbrs	r25, 7
    2ce6:	09 c0       	rjmp	.+18     	; 0x2cfa <vfprintf+0x1f8>
    2ce8:	90 95       	com	r25
    2cea:	80 95       	com	r24
    2cec:	70 95       	com	r23
    2cee:	61 95       	neg	r22
    2cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf2:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf6:	20 68       	ori	r18, 0x80	; 128
    2cf8:	b2 2e       	mov	r11, r18
    2cfa:	2a e0       	ldi	r18, 0x0A	; 10
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	a4 01       	movw	r20, r8
    2d00:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__ultoa_invert>
    2d04:	a8 2e       	mov	r10, r24
    2d06:	a8 18       	sub	r10, r8
    2d08:	44 c0       	rjmp	.+136    	; 0x2d92 <vfprintf+0x290>
    2d0a:	85 37       	cpi	r24, 0x75	; 117
    2d0c:	29 f4       	brne	.+10     	; 0x2d18 <vfprintf+0x216>
    2d0e:	2f 7e       	andi	r18, 0xEF	; 239
    2d10:	b2 2e       	mov	r11, r18
    2d12:	2a e0       	ldi	r18, 0x0A	; 10
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	25 c0       	rjmp	.+74     	; 0x2d62 <vfprintf+0x260>
    2d18:	f2 2f       	mov	r31, r18
    2d1a:	f9 7f       	andi	r31, 0xF9	; 249
    2d1c:	bf 2e       	mov	r11, r31
    2d1e:	8f 36       	cpi	r24, 0x6F	; 111
    2d20:	c1 f0       	breq	.+48     	; 0x2d52 <vfprintf+0x250>
    2d22:	18 f4       	brcc	.+6      	; 0x2d2a <vfprintf+0x228>
    2d24:	88 35       	cpi	r24, 0x58	; 88
    2d26:	79 f0       	breq	.+30     	; 0x2d46 <vfprintf+0x244>
    2d28:	b4 c0       	rjmp	.+360    	; 0x2e92 <vfprintf+0x390>
    2d2a:	80 37       	cpi	r24, 0x70	; 112
    2d2c:	19 f0       	breq	.+6      	; 0x2d34 <vfprintf+0x232>
    2d2e:	88 37       	cpi	r24, 0x78	; 120
    2d30:	21 f0       	breq	.+8      	; 0x2d3a <vfprintf+0x238>
    2d32:	af c0       	rjmp	.+350    	; 0x2e92 <vfprintf+0x390>
    2d34:	2f 2f       	mov	r18, r31
    2d36:	20 61       	ori	r18, 0x10	; 16
    2d38:	b2 2e       	mov	r11, r18
    2d3a:	b4 fe       	sbrs	r11, 4
    2d3c:	0d c0       	rjmp	.+26     	; 0x2d58 <vfprintf+0x256>
    2d3e:	8b 2d       	mov	r24, r11
    2d40:	84 60       	ori	r24, 0x04	; 4
    2d42:	b8 2e       	mov	r11, r24
    2d44:	09 c0       	rjmp	.+18     	; 0x2d58 <vfprintf+0x256>
    2d46:	24 ff       	sbrs	r18, 4
    2d48:	0a c0       	rjmp	.+20     	; 0x2d5e <vfprintf+0x25c>
    2d4a:	9f 2f       	mov	r25, r31
    2d4c:	96 60       	ori	r25, 0x06	; 6
    2d4e:	b9 2e       	mov	r11, r25
    2d50:	06 c0       	rjmp	.+12     	; 0x2d5e <vfprintf+0x25c>
    2d52:	28 e0       	ldi	r18, 0x08	; 8
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	05 c0       	rjmp	.+10     	; 0x2d62 <vfprintf+0x260>
    2d58:	20 e1       	ldi	r18, 0x10	; 16
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <vfprintf+0x260>
    2d5e:	20 e1       	ldi	r18, 0x10	; 16
    2d60:	32 e0       	ldi	r19, 0x02	; 2
    2d62:	f8 01       	movw	r30, r16
    2d64:	b7 fe       	sbrs	r11, 7
    2d66:	07 c0       	rjmp	.+14     	; 0x2d76 <vfprintf+0x274>
    2d68:	60 81       	ld	r22, Z
    2d6a:	71 81       	ldd	r23, Z+1	; 0x01
    2d6c:	82 81       	ldd	r24, Z+2	; 0x02
    2d6e:	93 81       	ldd	r25, Z+3	; 0x03
    2d70:	0c 5f       	subi	r16, 0xFC	; 252
    2d72:	1f 4f       	sbci	r17, 0xFF	; 255
    2d74:	06 c0       	rjmp	.+12     	; 0x2d82 <vfprintf+0x280>
    2d76:	60 81       	ld	r22, Z
    2d78:	71 81       	ldd	r23, Z+1	; 0x01
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	0e 5f       	subi	r16, 0xFE	; 254
    2d80:	1f 4f       	sbci	r17, 0xFF	; 255
    2d82:	a4 01       	movw	r20, r8
    2d84:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <__ultoa_invert>
    2d88:	a8 2e       	mov	r10, r24
    2d8a:	a8 18       	sub	r10, r8
    2d8c:	fb 2d       	mov	r31, r11
    2d8e:	ff 77       	andi	r31, 0x7F	; 127
    2d90:	bf 2e       	mov	r11, r31
    2d92:	b6 fe       	sbrs	r11, 6
    2d94:	0b c0       	rjmp	.+22     	; 0x2dac <vfprintf+0x2aa>
    2d96:	2b 2d       	mov	r18, r11
    2d98:	2e 7f       	andi	r18, 0xFE	; 254
    2d9a:	a5 14       	cp	r10, r5
    2d9c:	50 f4       	brcc	.+20     	; 0x2db2 <vfprintf+0x2b0>
    2d9e:	b4 fe       	sbrs	r11, 4
    2da0:	0a c0       	rjmp	.+20     	; 0x2db6 <vfprintf+0x2b4>
    2da2:	b2 fc       	sbrc	r11, 2
    2da4:	08 c0       	rjmp	.+16     	; 0x2db6 <vfprintf+0x2b4>
    2da6:	2b 2d       	mov	r18, r11
    2da8:	2e 7e       	andi	r18, 0xEE	; 238
    2daa:	05 c0       	rjmp	.+10     	; 0x2db6 <vfprintf+0x2b4>
    2dac:	7a 2c       	mov	r7, r10
    2dae:	2b 2d       	mov	r18, r11
    2db0:	03 c0       	rjmp	.+6      	; 0x2db8 <vfprintf+0x2b6>
    2db2:	7a 2c       	mov	r7, r10
    2db4:	01 c0       	rjmp	.+2      	; 0x2db8 <vfprintf+0x2b6>
    2db6:	75 2c       	mov	r7, r5
    2db8:	24 ff       	sbrs	r18, 4
    2dba:	0d c0       	rjmp	.+26     	; 0x2dd6 <vfprintf+0x2d4>
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ea 0d       	add	r30, r10
    2dc0:	f1 1d       	adc	r31, r1
    2dc2:	80 81       	ld	r24, Z
    2dc4:	80 33       	cpi	r24, 0x30	; 48
    2dc6:	11 f4       	brne	.+4      	; 0x2dcc <vfprintf+0x2ca>
    2dc8:	29 7e       	andi	r18, 0xE9	; 233
    2dca:	09 c0       	rjmp	.+18     	; 0x2dde <vfprintf+0x2dc>
    2dcc:	22 ff       	sbrs	r18, 2
    2dce:	06 c0       	rjmp	.+12     	; 0x2ddc <vfprintf+0x2da>
    2dd0:	73 94       	inc	r7
    2dd2:	73 94       	inc	r7
    2dd4:	04 c0       	rjmp	.+8      	; 0x2dde <vfprintf+0x2dc>
    2dd6:	82 2f       	mov	r24, r18
    2dd8:	86 78       	andi	r24, 0x86	; 134
    2dda:	09 f0       	breq	.+2      	; 0x2dde <vfprintf+0x2dc>
    2ddc:	73 94       	inc	r7
    2dde:	23 fd       	sbrc	r18, 3
    2de0:	13 c0       	rjmp	.+38     	; 0x2e08 <vfprintf+0x306>
    2de2:	20 ff       	sbrs	r18, 0
    2de4:	06 c0       	rjmp	.+12     	; 0x2df2 <vfprintf+0x2f0>
    2de6:	5a 2c       	mov	r5, r10
    2de8:	73 14       	cp	r7, r3
    2dea:	18 f4       	brcc	.+6      	; 0x2df2 <vfprintf+0x2f0>
    2dec:	53 0c       	add	r5, r3
    2dee:	57 18       	sub	r5, r7
    2df0:	73 2c       	mov	r7, r3
    2df2:	73 14       	cp	r7, r3
    2df4:	68 f4       	brcc	.+26     	; 0x2e10 <vfprintf+0x30e>
    2df6:	b7 01       	movw	r22, r14
    2df8:	80 e2       	ldi	r24, 0x20	; 32
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	2c 87       	std	Y+12, r18	; 0x0c
    2dfe:	0e 94 77 17 	call	0x2eee	; 0x2eee <fputc>
    2e02:	73 94       	inc	r7
    2e04:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e06:	f5 cf       	rjmp	.-22     	; 0x2df2 <vfprintf+0x2f0>
    2e08:	73 14       	cp	r7, r3
    2e0a:	10 f4       	brcc	.+4      	; 0x2e10 <vfprintf+0x30e>
    2e0c:	37 18       	sub	r3, r7
    2e0e:	01 c0       	rjmp	.+2      	; 0x2e12 <vfprintf+0x310>
    2e10:	31 2c       	mov	r3, r1
    2e12:	24 ff       	sbrs	r18, 4
    2e14:	12 c0       	rjmp	.+36     	; 0x2e3a <vfprintf+0x338>
    2e16:	b7 01       	movw	r22, r14
    2e18:	80 e3       	ldi	r24, 0x30	; 48
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	2c 87       	std	Y+12, r18	; 0x0c
    2e1e:	0e 94 77 17 	call	0x2eee	; 0x2eee <fputc>
    2e22:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e24:	22 ff       	sbrs	r18, 2
    2e26:	17 c0       	rjmp	.+46     	; 0x2e56 <vfprintf+0x354>
    2e28:	21 ff       	sbrs	r18, 1
    2e2a:	03 c0       	rjmp	.+6      	; 0x2e32 <vfprintf+0x330>
    2e2c:	88 e5       	ldi	r24, 0x58	; 88
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <vfprintf+0x334>
    2e32:	88 e7       	ldi	r24, 0x78	; 120
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	b7 01       	movw	r22, r14
    2e38:	0c c0       	rjmp	.+24     	; 0x2e52 <vfprintf+0x350>
    2e3a:	82 2f       	mov	r24, r18
    2e3c:	86 78       	andi	r24, 0x86	; 134
    2e3e:	59 f0       	breq	.+22     	; 0x2e56 <vfprintf+0x354>
    2e40:	21 fd       	sbrc	r18, 1
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <vfprintf+0x346>
    2e44:	80 e2       	ldi	r24, 0x20	; 32
    2e46:	01 c0       	rjmp	.+2      	; 0x2e4a <vfprintf+0x348>
    2e48:	8b e2       	ldi	r24, 0x2B	; 43
    2e4a:	27 fd       	sbrc	r18, 7
    2e4c:	8d e2       	ldi	r24, 0x2D	; 45
    2e4e:	b7 01       	movw	r22, r14
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	0e 94 77 17 	call	0x2eee	; 0x2eee <fputc>
    2e56:	a5 14       	cp	r10, r5
    2e58:	38 f4       	brcc	.+14     	; 0x2e68 <vfprintf+0x366>
    2e5a:	b7 01       	movw	r22, r14
    2e5c:	80 e3       	ldi	r24, 0x30	; 48
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0e 94 77 17 	call	0x2eee	; 0x2eee <fputc>
    2e64:	5a 94       	dec	r5
    2e66:	f7 cf       	rjmp	.-18     	; 0x2e56 <vfprintf+0x354>
    2e68:	aa 94       	dec	r10
    2e6a:	f4 01       	movw	r30, r8
    2e6c:	ea 0d       	add	r30, r10
    2e6e:	f1 1d       	adc	r31, r1
    2e70:	80 81       	ld	r24, Z
    2e72:	b7 01       	movw	r22, r14
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	0e 94 77 17 	call	0x2eee	; 0x2eee <fputc>
    2e7a:	a1 10       	cpse	r10, r1
    2e7c:	f5 cf       	rjmp	.-22     	; 0x2e68 <vfprintf+0x366>
    2e7e:	33 20       	and	r3, r3
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <vfprintf+0x382>
    2e82:	51 ce       	rjmp	.-862    	; 0x2b26 <vfprintf+0x24>
    2e84:	b7 01       	movw	r22, r14
    2e86:	80 e2       	ldi	r24, 0x20	; 32
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	0e 94 77 17 	call	0x2eee	; 0x2eee <fputc>
    2e8e:	3a 94       	dec	r3
    2e90:	f6 cf       	rjmp	.-20     	; 0x2e7e <vfprintf+0x37c>
    2e92:	f7 01       	movw	r30, r14
    2e94:	86 81       	ldd	r24, Z+6	; 0x06
    2e96:	97 81       	ldd	r25, Z+7	; 0x07
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <vfprintf+0x39c>
    2e9a:	8f ef       	ldi	r24, 0xFF	; 255
    2e9c:	9f ef       	ldi	r25, 0xFF	; 255
    2e9e:	2c 96       	adiw	r28, 0x0c	; 12
    2ea0:	e2 e1       	ldi	r30, 0x12	; 18
    2ea2:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__epilogue_restores__>

00002ea6 <__eerd_word_m16>:
    2ea6:	a8 e1       	ldi	r26, 0x18	; 24
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	42 e0       	ldi	r20, 0x02	; 2
    2eac:	50 e0       	ldi	r21, 0x00	; 0
    2eae:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__eerd_blraw_m16>

00002eb2 <__eewr_word_m16>:
    2eb2:	0e 94 17 18 	call	0x302e	; 0x302e <__eewr_byte_m16>
    2eb6:	27 2f       	mov	r18, r23
    2eb8:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__eewr_r18_m16>

00002ebc <__ctype_isfalse>:
    2ebc:	99 27       	eor	r25, r25
    2ebe:	88 27       	eor	r24, r24

00002ec0 <__ctype_istrue>:
    2ec0:	08 95       	ret

00002ec2 <strnlen_P>:
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	05 90       	lpm	r0, Z+
    2ec6:	61 50       	subi	r22, 0x01	; 1
    2ec8:	70 40       	sbci	r23, 0x00	; 0
    2eca:	01 10       	cpse	r0, r1
    2ecc:	d8 f7       	brcc	.-10     	; 0x2ec4 <strnlen_P+0x2>
    2ece:	80 95       	com	r24
    2ed0:	90 95       	com	r25
    2ed2:	8e 0f       	add	r24, r30
    2ed4:	9f 1f       	adc	r25, r31
    2ed6:	08 95       	ret

00002ed8 <strnlen>:
    2ed8:	fc 01       	movw	r30, r24
    2eda:	61 50       	subi	r22, 0x01	; 1
    2edc:	70 40       	sbci	r23, 0x00	; 0
    2ede:	01 90       	ld	r0, Z+
    2ee0:	01 10       	cpse	r0, r1
    2ee2:	d8 f7       	brcc	.-10     	; 0x2eda <strnlen+0x2>
    2ee4:	80 95       	com	r24
    2ee6:	90 95       	com	r25
    2ee8:	8e 0f       	add	r24, r30
    2eea:	9f 1f       	adc	r25, r31
    2eec:	08 95       	ret

00002eee <fputc>:
    2eee:	0f 93       	push	r16
    2ef0:	1f 93       	push	r17
    2ef2:	cf 93       	push	r28
    2ef4:	df 93       	push	r29
    2ef6:	18 2f       	mov	r17, r24
    2ef8:	09 2f       	mov	r16, r25
    2efa:	eb 01       	movw	r28, r22
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	81 fd       	sbrc	r24, 1
    2f00:	03 c0       	rjmp	.+6      	; 0x2f08 <fputc+0x1a>
    2f02:	8f ef       	ldi	r24, 0xFF	; 255
    2f04:	9f ef       	ldi	r25, 0xFF	; 255
    2f06:	20 c0       	rjmp	.+64     	; 0x2f48 <fputc+0x5a>
    2f08:	82 ff       	sbrs	r24, 2
    2f0a:	10 c0       	rjmp	.+32     	; 0x2f2c <fputc+0x3e>
    2f0c:	4e 81       	ldd	r20, Y+6	; 0x06
    2f0e:	5f 81       	ldd	r21, Y+7	; 0x07
    2f10:	2c 81       	ldd	r18, Y+4	; 0x04
    2f12:	3d 81       	ldd	r19, Y+5	; 0x05
    2f14:	42 17       	cp	r20, r18
    2f16:	53 07       	cpc	r21, r19
    2f18:	7c f4       	brge	.+30     	; 0x2f38 <fputc+0x4a>
    2f1a:	e8 81       	ld	r30, Y
    2f1c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f1e:	9f 01       	movw	r18, r30
    2f20:	2f 5f       	subi	r18, 0xFF	; 255
    2f22:	3f 4f       	sbci	r19, 0xFF	; 255
    2f24:	39 83       	std	Y+1, r19	; 0x01
    2f26:	28 83       	st	Y, r18
    2f28:	10 83       	st	Z, r17
    2f2a:	06 c0       	rjmp	.+12     	; 0x2f38 <fputc+0x4a>
    2f2c:	e8 85       	ldd	r30, Y+8	; 0x08
    2f2e:	f9 85       	ldd	r31, Y+9	; 0x09
    2f30:	81 2f       	mov	r24, r17
    2f32:	09 95       	icall
    2f34:	89 2b       	or	r24, r25
    2f36:	29 f7       	brne	.-54     	; 0x2f02 <fputc+0x14>
    2f38:	2e 81       	ldd	r18, Y+6	; 0x06
    2f3a:	3f 81       	ldd	r19, Y+7	; 0x07
    2f3c:	2f 5f       	subi	r18, 0xFF	; 255
    2f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f40:	3f 83       	std	Y+7, r19	; 0x07
    2f42:	2e 83       	std	Y+6, r18	; 0x06
    2f44:	81 2f       	mov	r24, r17
    2f46:	90 2f       	mov	r25, r16
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	1f 91       	pop	r17
    2f4e:	0f 91       	pop	r16
    2f50:	08 95       	ret

00002f52 <__ultoa_invert>:
    2f52:	fa 01       	movw	r30, r20
    2f54:	aa 27       	eor	r26, r26
    2f56:	28 30       	cpi	r18, 0x08	; 8
    2f58:	51 f1       	breq	.+84     	; 0x2fae <__ultoa_invert+0x5c>
    2f5a:	20 31       	cpi	r18, 0x10	; 16
    2f5c:	81 f1       	breq	.+96     	; 0x2fbe <__ultoa_invert+0x6c>
    2f5e:	e8 94       	clt
    2f60:	6f 93       	push	r22
    2f62:	6e 7f       	andi	r22, 0xFE	; 254
    2f64:	6e 5f       	subi	r22, 0xFE	; 254
    2f66:	7f 4f       	sbci	r23, 0xFF	; 255
    2f68:	8f 4f       	sbci	r24, 0xFF	; 255
    2f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6c:	af 4f       	sbci	r26, 0xFF	; 255
    2f6e:	b1 e0       	ldi	r27, 0x01	; 1
    2f70:	3e d0       	rcall	.+124    	; 0x2fee <__ultoa_invert+0x9c>
    2f72:	b4 e0       	ldi	r27, 0x04	; 4
    2f74:	3c d0       	rcall	.+120    	; 0x2fee <__ultoa_invert+0x9c>
    2f76:	67 0f       	add	r22, r23
    2f78:	78 1f       	adc	r23, r24
    2f7a:	89 1f       	adc	r24, r25
    2f7c:	9a 1f       	adc	r25, r26
    2f7e:	a1 1d       	adc	r26, r1
    2f80:	68 0f       	add	r22, r24
    2f82:	79 1f       	adc	r23, r25
    2f84:	8a 1f       	adc	r24, r26
    2f86:	91 1d       	adc	r25, r1
    2f88:	a1 1d       	adc	r26, r1
    2f8a:	6a 0f       	add	r22, r26
    2f8c:	71 1d       	adc	r23, r1
    2f8e:	81 1d       	adc	r24, r1
    2f90:	91 1d       	adc	r25, r1
    2f92:	a1 1d       	adc	r26, r1
    2f94:	20 d0       	rcall	.+64     	; 0x2fd6 <__ultoa_invert+0x84>
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <__ultoa_invert+0x48>
    2f98:	68 94       	set
    2f9a:	3f 91       	pop	r19
    2f9c:	2a e0       	ldi	r18, 0x0A	; 10
    2f9e:	26 9f       	mul	r18, r22
    2fa0:	11 24       	eor	r1, r1
    2fa2:	30 19       	sub	r19, r0
    2fa4:	30 5d       	subi	r19, 0xD0	; 208
    2fa6:	31 93       	st	Z+, r19
    2fa8:	de f6       	brtc	.-74     	; 0x2f60 <__ultoa_invert+0xe>
    2faa:	cf 01       	movw	r24, r30
    2fac:	08 95       	ret
    2fae:	46 2f       	mov	r20, r22
    2fb0:	47 70       	andi	r20, 0x07	; 7
    2fb2:	40 5d       	subi	r20, 0xD0	; 208
    2fb4:	41 93       	st	Z+, r20
    2fb6:	b3 e0       	ldi	r27, 0x03	; 3
    2fb8:	0f d0       	rcall	.+30     	; 0x2fd8 <__ultoa_invert+0x86>
    2fba:	c9 f7       	brne	.-14     	; 0x2fae <__ultoa_invert+0x5c>
    2fbc:	f6 cf       	rjmp	.-20     	; 0x2faa <__ultoa_invert+0x58>
    2fbe:	46 2f       	mov	r20, r22
    2fc0:	4f 70       	andi	r20, 0x0F	; 15
    2fc2:	40 5d       	subi	r20, 0xD0	; 208
    2fc4:	4a 33       	cpi	r20, 0x3A	; 58
    2fc6:	18 f0       	brcs	.+6      	; 0x2fce <__ultoa_invert+0x7c>
    2fc8:	49 5d       	subi	r20, 0xD9	; 217
    2fca:	31 fd       	sbrc	r19, 1
    2fcc:	40 52       	subi	r20, 0x20	; 32
    2fce:	41 93       	st	Z+, r20
    2fd0:	02 d0       	rcall	.+4      	; 0x2fd6 <__ultoa_invert+0x84>
    2fd2:	a9 f7       	brne	.-22     	; 0x2fbe <__ultoa_invert+0x6c>
    2fd4:	ea cf       	rjmp	.-44     	; 0x2faa <__ultoa_invert+0x58>
    2fd6:	b4 e0       	ldi	r27, 0x04	; 4
    2fd8:	a6 95       	lsr	r26
    2fda:	97 95       	ror	r25
    2fdc:	87 95       	ror	r24
    2fde:	77 95       	ror	r23
    2fe0:	67 95       	ror	r22
    2fe2:	ba 95       	dec	r27
    2fe4:	c9 f7       	brne	.-14     	; 0x2fd8 <__ultoa_invert+0x86>
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	61 05       	cpc	r22, r1
    2fea:	71 05       	cpc	r23, r1
    2fec:	08 95       	ret
    2fee:	9b 01       	movw	r18, r22
    2ff0:	ac 01       	movw	r20, r24
    2ff2:	0a 2e       	mov	r0, r26
    2ff4:	06 94       	lsr	r0
    2ff6:	57 95       	ror	r21
    2ff8:	47 95       	ror	r20
    2ffa:	37 95       	ror	r19
    2ffc:	27 95       	ror	r18
    2ffe:	ba 95       	dec	r27
    3000:	c9 f7       	brne	.-14     	; 0x2ff4 <__ultoa_invert+0xa2>
    3002:	62 0f       	add	r22, r18
    3004:	73 1f       	adc	r23, r19
    3006:	84 1f       	adc	r24, r20
    3008:	95 1f       	adc	r25, r21
    300a:	a0 1d       	adc	r26, r0
    300c:	08 95       	ret

0000300e <__eerd_block_m16>:
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22

00003012 <__eerd_blraw_m16>:
    3012:	fc 01       	movw	r30, r24
    3014:	e1 99       	sbic	0x1c, 1	; 28
    3016:	fe cf       	rjmp	.-4      	; 0x3014 <__eerd_blraw_m16+0x2>
    3018:	06 c0       	rjmp	.+12     	; 0x3026 <__eerd_blraw_m16+0x14>
    301a:	ff bb       	out	0x1f, r31	; 31
    301c:	ee bb       	out	0x1e, r30	; 30
    301e:	e0 9a       	sbi	0x1c, 0	; 28
    3020:	31 96       	adiw	r30, 0x01	; 1
    3022:	0d b2       	in	r0, 0x1d	; 29
    3024:	0d 92       	st	X+, r0
    3026:	41 50       	subi	r20, 0x01	; 1
    3028:	50 40       	sbci	r21, 0x00	; 0
    302a:	b8 f7       	brcc	.-18     	; 0x301a <__eerd_blraw_m16+0x8>
    302c:	08 95       	ret

0000302e <__eewr_byte_m16>:
    302e:	26 2f       	mov	r18, r22

00003030 <__eewr_r18_m16>:
    3030:	e1 99       	sbic	0x1c, 1	; 28
    3032:	fe cf       	rjmp	.-4      	; 0x3030 <__eewr_r18_m16>
    3034:	9f bb       	out	0x1f, r25	; 31
    3036:	8e bb       	out	0x1e, r24	; 30
    3038:	2d bb       	out	0x1d, r18	; 29
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	e2 9a       	sbi	0x1c, 2	; 28
    3040:	e1 9a       	sbi	0x1c, 1	; 28
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	01 96       	adiw	r24, 0x01	; 1
    3046:	08 95       	ret

00003048 <__mulsi3>:
    3048:	db 01       	movw	r26, r22
    304a:	8f 93       	push	r24
    304c:	9f 93       	push	r25
    304e:	0e 94 75 18 	call	0x30ea	; 0x30ea <__muluhisi3>
    3052:	bf 91       	pop	r27
    3054:	af 91       	pop	r26
    3056:	a2 9f       	mul	r26, r18
    3058:	80 0d       	add	r24, r0
    305a:	91 1d       	adc	r25, r1
    305c:	a3 9f       	mul	r26, r19
    305e:	90 0d       	add	r25, r0
    3060:	b2 9f       	mul	r27, r18
    3062:	90 0d       	add	r25, r0
    3064:	11 24       	eor	r1, r1
    3066:	08 95       	ret

00003068 <__udivmodsi4>:
    3068:	a1 e2       	ldi	r26, 0x21	; 33
    306a:	1a 2e       	mov	r1, r26
    306c:	aa 1b       	sub	r26, r26
    306e:	bb 1b       	sub	r27, r27
    3070:	fd 01       	movw	r30, r26
    3072:	0d c0       	rjmp	.+26     	; 0x308e <__udivmodsi4_ep>

00003074 <__udivmodsi4_loop>:
    3074:	aa 1f       	adc	r26, r26
    3076:	bb 1f       	adc	r27, r27
    3078:	ee 1f       	adc	r30, r30
    307a:	ff 1f       	adc	r31, r31
    307c:	a2 17       	cp	r26, r18
    307e:	b3 07       	cpc	r27, r19
    3080:	e4 07       	cpc	r30, r20
    3082:	f5 07       	cpc	r31, r21
    3084:	20 f0       	brcs	.+8      	; 0x308e <__udivmodsi4_ep>
    3086:	a2 1b       	sub	r26, r18
    3088:	b3 0b       	sbc	r27, r19
    308a:	e4 0b       	sbc	r30, r20
    308c:	f5 0b       	sbc	r31, r21

0000308e <__udivmodsi4_ep>:
    308e:	66 1f       	adc	r22, r22
    3090:	77 1f       	adc	r23, r23
    3092:	88 1f       	adc	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	1a 94       	dec	r1
    3098:	69 f7       	brne	.-38     	; 0x3074 <__udivmodsi4_loop>
    309a:	60 95       	com	r22
    309c:	70 95       	com	r23
    309e:	80 95       	com	r24
    30a0:	90 95       	com	r25
    30a2:	9b 01       	movw	r18, r22
    30a4:	ac 01       	movw	r20, r24
    30a6:	bd 01       	movw	r22, r26
    30a8:	cf 01       	movw	r24, r30
    30aa:	08 95       	ret

000030ac <__divmodsi4>:
    30ac:	05 2e       	mov	r0, r21
    30ae:	97 fb       	bst	r25, 7
    30b0:	1e f4       	brtc	.+6      	; 0x30b8 <__divmodsi4+0xc>
    30b2:	00 94       	com	r0
    30b4:	0e 94 6d 18 	call	0x30da	; 0x30da <__negsi2>
    30b8:	57 fd       	sbrc	r21, 7
    30ba:	07 d0       	rcall	.+14     	; 0x30ca <__divmodsi4_neg2>
    30bc:	0e 94 34 18 	call	0x3068	; 0x3068 <__udivmodsi4>
    30c0:	07 fc       	sbrc	r0, 7
    30c2:	03 d0       	rcall	.+6      	; 0x30ca <__divmodsi4_neg2>
    30c4:	4e f4       	brtc	.+18     	; 0x30d8 <__divmodsi4_exit>
    30c6:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__negsi2>

000030ca <__divmodsi4_neg2>:
    30ca:	50 95       	com	r21
    30cc:	40 95       	com	r20
    30ce:	30 95       	com	r19
    30d0:	21 95       	neg	r18
    30d2:	3f 4f       	sbci	r19, 0xFF	; 255
    30d4:	4f 4f       	sbci	r20, 0xFF	; 255
    30d6:	5f 4f       	sbci	r21, 0xFF	; 255

000030d8 <__divmodsi4_exit>:
    30d8:	08 95       	ret

000030da <__negsi2>:
    30da:	90 95       	com	r25
    30dc:	80 95       	com	r24
    30de:	70 95       	com	r23
    30e0:	61 95       	neg	r22
    30e2:	7f 4f       	sbci	r23, 0xFF	; 255
    30e4:	8f 4f       	sbci	r24, 0xFF	; 255
    30e6:	9f 4f       	sbci	r25, 0xFF	; 255
    30e8:	08 95       	ret

000030ea <__muluhisi3>:
    30ea:	0e 94 bf 18 	call	0x317e	; 0x317e <__umulhisi3>
    30ee:	a5 9f       	mul	r26, r21
    30f0:	90 0d       	add	r25, r0
    30f2:	b4 9f       	mul	r27, r20
    30f4:	90 0d       	add	r25, r0
    30f6:	a4 9f       	mul	r26, r20
    30f8:	80 0d       	add	r24, r0
    30fa:	91 1d       	adc	r25, r1
    30fc:	11 24       	eor	r1, r1
    30fe:	08 95       	ret

00003100 <__mulshisi3>:
    3100:	b7 ff       	sbrs	r27, 7
    3102:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__muluhisi3>

00003106 <__mulohisi3>:
    3106:	0e 94 75 18 	call	0x30ea	; 0x30ea <__muluhisi3>
    310a:	82 1b       	sub	r24, r18
    310c:	93 0b       	sbc	r25, r19
    310e:	08 95       	ret

00003110 <__prologue_saves__>:
    3110:	2f 92       	push	r2
    3112:	3f 92       	push	r3
    3114:	4f 92       	push	r4
    3116:	5f 92       	push	r5
    3118:	6f 92       	push	r6
    311a:	7f 92       	push	r7
    311c:	8f 92       	push	r8
    311e:	9f 92       	push	r9
    3120:	af 92       	push	r10
    3122:	bf 92       	push	r11
    3124:	cf 92       	push	r12
    3126:	df 92       	push	r13
    3128:	ef 92       	push	r14
    312a:	ff 92       	push	r15
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	ca 1b       	sub	r28, r26
    313a:	db 0b       	sbc	r29, r27
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	09 94       	ijmp

00003148 <__epilogue_restores__>:
    3148:	2a 88       	ldd	r2, Y+18	; 0x12
    314a:	39 88       	ldd	r3, Y+17	; 0x11
    314c:	48 88       	ldd	r4, Y+16	; 0x10
    314e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3150:	6e 84       	ldd	r6, Y+14	; 0x0e
    3152:	7d 84       	ldd	r7, Y+13	; 0x0d
    3154:	8c 84       	ldd	r8, Y+12	; 0x0c
    3156:	9b 84       	ldd	r9, Y+11	; 0x0b
    3158:	aa 84       	ldd	r10, Y+10	; 0x0a
    315a:	b9 84       	ldd	r11, Y+9	; 0x09
    315c:	c8 84       	ldd	r12, Y+8	; 0x08
    315e:	df 80       	ldd	r13, Y+7	; 0x07
    3160:	ee 80       	ldd	r14, Y+6	; 0x06
    3162:	fd 80       	ldd	r15, Y+5	; 0x05
    3164:	0c 81       	ldd	r16, Y+4	; 0x04
    3166:	1b 81       	ldd	r17, Y+3	; 0x03
    3168:	aa 81       	ldd	r26, Y+2	; 0x02
    316a:	b9 81       	ldd	r27, Y+1	; 0x01
    316c:	ce 0f       	add	r28, r30
    316e:	d1 1d       	adc	r29, r1
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	ed 01       	movw	r28, r26
    317c:	08 95       	ret

0000317e <__umulhisi3>:
    317e:	a2 9f       	mul	r26, r18
    3180:	b0 01       	movw	r22, r0
    3182:	b3 9f       	mul	r27, r19
    3184:	c0 01       	movw	r24, r0
    3186:	a3 9f       	mul	r26, r19
    3188:	70 0d       	add	r23, r0
    318a:	81 1d       	adc	r24, r1
    318c:	11 24       	eor	r1, r1
    318e:	91 1d       	adc	r25, r1
    3190:	b2 9f       	mul	r27, r18
    3192:	70 0d       	add	r23, r0
    3194:	81 1d       	adc	r24, r1
    3196:	11 24       	eor	r1, r1
    3198:	91 1d       	adc	r25, r1
    319a:	08 95       	ret

0000319c <_exit>:
    319c:	f8 94       	cli

0000319e <__stop_program>:
    319e:	ff cf       	rjmp	.-2      	; 0x319e <__stop_program>
