
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002cb4  00002d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000c0  008000c0  00002da8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000260  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000575f  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000eb7  00000000  00000000  000087c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ca4  00000000  00000000  0000967a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a1c  00000000  00000000  0000a320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009e9  00000000  00000000  0000ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002e3a  00000000  00000000  0000b725  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  0000e55f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      54:	3b 0a       	sbc	r3, r27
      56:	56 0a       	sbc	r5, r22
      58:	7e 0b       	sbc	r23, r30
      5a:	7e 0b       	sbc	r23, r30
      5c:	7e 0b       	sbc	r23, r30
      5e:	7e 0b       	sbc	r23, r30
      60:	7e 0b       	sbc	r23, r30
      62:	7e 0b       	sbc	r23, r30
      64:	7e 0b       	sbc	r23, r30
      66:	5c 0a       	sbc	r5, r28
      68:	7e 0b       	sbc	r23, r30
      6a:	7e 0b       	sbc	r23, r30
      6c:	7e 0b       	sbc	r23, r30
      6e:	62 0a       	sbc	r6, r18
      70:	6a 0a       	sbc	r6, r26
      72:	72 0a       	sbc	r7, r18
      74:	99 0a       	sbc	r9, r25
      76:	c0 0a       	sbc	r12, r16
      78:	e7 0a       	sbc	r14, r23
      7a:	0e 0b       	sbc	r16, r30
      7c:	35 0b       	sbc	r19, r21
      7e:	5c 0b       	sbc	r21, r28
      80:	08 4a       	sbci	r16, 0xA8	; 168
      82:	d7 3b       	cpi	r29, 0xB7	; 183
      84:	3b ce       	rjmp	.-906    	; 0xfffffcfc <__eeprom_end+0xff7efcfc>
      86:	01 6e       	ori	r16, 0xE1	; 225
      88:	84 bc       	out	0x24, r8	; 36
      8a:	bf fd       	.word	0xfdbf	; ????
      8c:	c1 2f       	mov	r28, r17
      8e:	3d 6c       	ori	r19, 0xCD	; 205
      90:	74 31       	cpi	r23, 0x14	; 20
      92:	9a bd       	out	0x2a, r25	; 42
      94:	56 83       	std	Z+6, r21	; 0x06
      96:	3d da       	rcall	.-2950   	; 0xfffff512 <__eeprom_end+0xff7ef512>
      98:	3d 00       	.word	0x003d	; ????
      9a:	c7 7f       	andi	r28, 0xF7	; 247
      9c:	11 be       	out	0x31, r1	; 49
      9e:	d9 e4       	ldi	r29, 0x49	; 73
      a0:	bb 4c       	sbci	r27, 0xCB	; 203
      a2:	3e 91       	ld	r19, -X
      a4:	6b aa       	std	Y+51, r6	; 0x33
      a6:	aa be       	out	0x3a, r10	; 58
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	3f 07       	cpc	r19, r31
      ae:	2c 7a       	andi	r18, 0xAC	; 172
      b0:	a5 ba       	out	0x15, r10	; 21
      b2:	6c c5       	rjmp	.+2776   	; 0xb8c <_ZN5Gates1XEii>
      b4:	90 da       	rcall	.-2784   	; 0xfffff5d6 <__eeprom_end+0xff7ef5d6>
      b6:	3b 93       	.word	0x933b	; ????
      b8:	65 fc       	sbrc	r6, 5
      ba:	8b bc       	out	0x2b, r8	; 43
      bc:	53 f8       	bld	r5, 3
      be:	10 fd       	sbrc	r17, 0
      c0:	3c 56       	subi	r19, 0x6C	; 108
      c2:	92 83       	std	Z+2, r25	; 0x02
      c4:	4d bd       	out	0x2d, r20	; 45
      c6:	87 9d       	mul	r24, r7
      c8:	3a b6       	in	r3, 0x3a	; 58
      ca:	3d cb       	rjmp	.-2438   	; 0xfffff746 <__eeprom_end+0xff7ef746>
      cc:	c9 bf       	out	0x39, r28	; 57
      ce:	5b be       	out	0x3b, r5	; 59
      d0:	73 da       	rcall	.-2842   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b8>
      d2:	0f c9       	rjmp	.-3554   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
      d4:	3f 05       	cpc	r19, r15
      d6:	a8 4c       	sbci	r26, 0xC8	; 200
      d8:	cd b2       	in	r12, 0x1d	; 29
      da:	d4 4e       	sbci	r29, 0xE4	; 228
      dc:	b9 38       	cpi	r27, 0x89	; 137
      de:	36 a9       	ldd	r19, Z+54	; 0x36
      e0:	02 0c       	add	r0, r2
      e2:	50 b9       	out	0x00, r21	; 0
      e4:	91 86       	std	Z+9, r9	; 0x09
      e6:	88 08       	sbc	r8, r8
      e8:	3c a6       	std	Y+44, r3	; 0x2c
      ea:	aa aa       	std	Y+50, r10	; 0x32
      ec:	2a be       	out	0x3a, r2	; 58
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	3f 00       	.word	0x003f	; ????

000000f4 <__ctors_start>:
      f4:	6c 08       	sbc	r6, r12

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf e5       	ldi	r28, 0x5F	; 95
      fc:	d4 e0       	ldi	r29, 0x04	; 4
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	10 e0       	ldi	r17, 0x00	; 0
     104:	a0 e6       	ldi	r26, 0x60	; 96
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e4 eb       	ldi	r30, 0xB4	; 180
     10a:	fc e2       	ldi	r31, 0x2C	; 44
     10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
     10e:	05 90       	lpm	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	a0 3c       	cpi	r26, 0xC0	; 192
     114:	b1 07       	cpc	r27, r17
     116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>

00000118 <__do_clear_bss>:
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	a0 ec       	ldi	r26, 0xC0	; 192
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
     120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
     122:	a8 3c       	cpi	r26, 0xC8	; 200
     124:	b2 07       	cpc	r27, r18
     126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>

00000128 <__do_global_ctors>:
     128:	10 e0       	ldi	r17, 0x00	; 0
     12a:	c6 ef       	ldi	r28, 0xF6	; 246
     12c:	d0 e0       	ldi	r29, 0x00	; 0
     12e:	04 c0       	rjmp	.+8      	; 0x138 <__do_global_ctors+0x10>
     130:	22 97       	sbiw	r28, 0x02	; 2
     132:	fe 01       	movw	r30, r28
     134:	0e 94 4c 10 	call	0x2098	; 0x2098 <__tablejump__>
     138:	c4 3f       	cpi	r28, 0xF4	; 244
     13a:	d1 07       	cpc	r29, r17
     13c:	c9 f7       	brne	.-14     	; 0x130 <__do_global_ctors+0x8>
     13e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <main>
     142:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <_ZN7ComplexC1Eff>:
#include "complex.h"
Complex::Complex(float Re,float Im):re(Re),im(Im){}
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	fc 01       	movw	r30, r24
     150:	40 83       	st	Z, r20
     152:	51 83       	std	Z+1, r21	; 0x01
     154:	62 83       	std	Z+2, r22	; 0x02
     156:	73 83       	std	Z+3, r23	; 0x03
     158:	04 83       	std	Z+4, r16	; 0x04
     15a:	15 83       	std	Z+5, r17	; 0x05
     15c:	26 83       	std	Z+6, r18	; 0x06
     15e:	37 83       	std	Z+7, r19	; 0x07
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	08 95       	ret

00000166 <_ZN7ComplexC1Ev>:
Complex::Complex(void):re(0.0f),im(0.0f){}
     166:	fc 01       	movw	r30, r24
     168:	10 82       	st	Z, r1
     16a:	11 82       	std	Z+1, r1	; 0x01
     16c:	12 82       	std	Z+2, r1	; 0x02
     16e:	13 82       	std	Z+3, r1	; 0x03
     170:	14 82       	std	Z+4, r1	; 0x04
     172:	15 82       	std	Z+5, r1	; 0x05
     174:	16 82       	std	Z+6, r1	; 0x06
     176:	17 82       	std	Z+7, r1	; 0x07
     178:	08 95       	ret

0000017a <_ZN7Complex3addES_>:
	
Complex Complex::add(Complex c2){
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	68 97       	sbiw	r28, 0x18	; 24
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	5c 01       	movw	r10, r24
     1a0:	09 8b       	std	Y+17, r16	; 0x11
     1a2:	1a 8b       	std	Y+18, r17	; 0x12
     1a4:	2b 8b       	std	Y+19, r18	; 0x13
     1a6:	3c 8b       	std	Y+20, r19	; 0x14
     1a8:	4d 8b       	std	Y+21, r20	; 0x15
     1aa:	5e 8b       	std	Y+22, r21	; 0x16
     1ac:	6f 8b       	std	Y+23, r22	; 0x17
     1ae:	78 8f       	std	Y+24, r23	; 0x18
	return Complex(this->re+c2.re,this->im+c2.im);
     1b0:	2d 89       	ldd	r18, Y+21	; 0x15
     1b2:	3e 89       	ldd	r19, Y+22	; 0x16
     1b4:	4f 89       	ldd	r20, Y+23	; 0x17
     1b6:	58 8d       	ldd	r21, Y+24	; 0x18
     1b8:	fc 01       	movw	r30, r24
     1ba:	64 81       	ldd	r22, Z+4	; 0x04
     1bc:	75 81       	ldd	r23, Z+5	; 0x05
     1be:	86 81       	ldd	r24, Z+6	; 0x06
     1c0:	97 81       	ldd	r25, Z+7	; 0x07
     1c2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__addsf3>
     1c6:	6b 01       	movw	r12, r22
     1c8:	7c 01       	movw	r14, r24
     1ca:	29 89       	ldd	r18, Y+17	; 0x11
     1cc:	3a 89       	ldd	r19, Y+18	; 0x12
     1ce:	4b 89       	ldd	r20, Y+19	; 0x13
     1d0:	5c 89       	ldd	r21, Y+20	; 0x14
     1d2:	f5 01       	movw	r30, r10
     1d4:	60 81       	ld	r22, Z
     1d6:	71 81       	ldd	r23, Z+1	; 0x01
     1d8:	82 81       	ldd	r24, Z+2	; 0x02
     1da:	93 81       	ldd	r25, Z+3	; 0x03
     1dc:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__addsf3>
     1e0:	ab 01       	movw	r20, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	97 01       	movw	r18, r14
     1e6:	86 01       	movw	r16, r12
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     1f0:	88 e0       	ldi	r24, 0x08	; 8
     1f2:	fe 01       	movw	r30, r28
     1f4:	31 96       	adiw	r30, 0x01	; 1
     1f6:	de 01       	movw	r26, r28
     1f8:	19 96       	adiw	r26, 0x09	; 9
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	8a 95       	dec	r24
     200:	e1 f7       	brne	.-8      	; 0x1fa <_ZN7Complex3addES_+0x80>
     202:	29 85       	ldd	r18, Y+9	; 0x09
     204:	3a 85       	ldd	r19, Y+10	; 0x0a
     206:	4b 85       	ldd	r20, Y+11	; 0x0b
     208:	5c 85       	ldd	r21, Y+12	; 0x0c
     20a:	6d 85       	ldd	r22, Y+13	; 0x0d
     20c:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     20e:	8f 85       	ldd	r24, Y+15	; 0x0f
     210:	98 89       	ldd	r25, Y+16	; 0x10
     212:	68 96       	adiw	r28, 0x18	; 24
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	08 95       	ret

00000234 <_ZN7Complex3mulES_>:
Complex Complex::mul(Complex c2){
     234:	4f 92       	push	r4
     236:	5f 92       	push	r5
     238:	6f 92       	push	r6
     23a:	7f 92       	push	r7
     23c:	8f 92       	push	r8
     23e:	9f 92       	push	r9
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	a0 97       	sbiw	r28, 0x20	; 32
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	09 8b       	std	Y+17, r16	; 0x11
     266:	1a 8b       	std	Y+18, r17	; 0x12
     268:	2b 8b       	std	Y+19, r18	; 0x13
     26a:	3c 8b       	std	Y+20, r19	; 0x14
     26c:	4d 8b       	std	Y+21, r20	; 0x15
     26e:	5e 8b       	std	Y+22, r21	; 0x16
     270:	6f 8b       	std	Y+23, r22	; 0x17
     272:	78 8f       	std	Y+24, r23	; 0x18
     274:	89 88       	ldd	r8, Y+17	; 0x11
     276:	9a 88       	ldd	r9, Y+18	; 0x12
     278:	ab 88       	ldd	r10, Y+19	; 0x13
     27a:	bc 88       	ldd	r11, Y+20	; 0x14
     27c:	2d 89       	ldd	r18, Y+21	; 0x15
     27e:	3e 89       	ldd	r19, Y+22	; 0x16
     280:	4f 89       	ldd	r20, Y+23	; 0x17
     282:	58 8d       	ldd	r21, Y+24	; 0x18
     284:	2d 8f       	std	Y+29, r18	; 0x1d
     286:	3e 8f       	std	Y+30, r19	; 0x1e
     288:	4f 8f       	std	Y+31, r20	; 0x1f
     28a:	58 a3       	std	Y+32, r21	; 0x20
	return Complex((this->re*c2.re)-(this->im*c2.im),(this->re*c2.im)+(this->im*c2.re));
     28c:	fc 01       	movw	r30, r24
     28e:	c0 80       	ld	r12, Z
     290:	d1 80       	ldd	r13, Z+1	; 0x01
     292:	e2 80       	ldd	r14, Z+2	; 0x02
     294:	f3 80       	ldd	r15, Z+3	; 0x03
     296:	24 81       	ldd	r18, Z+4	; 0x04
     298:	35 81       	ldd	r19, Z+5	; 0x05
     29a:	46 81       	ldd	r20, Z+6	; 0x06
     29c:	57 81       	ldd	r21, Z+7	; 0x07
     29e:	29 8f       	std	Y+25, r18	; 0x19
     2a0:	3a 8f       	std	Y+26, r19	; 0x1a
     2a2:	4b 8f       	std	Y+27, r20	; 0x1b
     2a4:	5c 8f       	std	Y+28, r21	; 0x1c
     2a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2aa:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2ac:	58 a1       	ldd	r21, Y+32	; 0x20
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     2b6:	2b 01       	movw	r4, r22
     2b8:	3c 01       	movw	r6, r24
     2ba:	a5 01       	movw	r20, r10
     2bc:	94 01       	movw	r18, r8
     2be:	69 8d       	ldd	r22, Y+25	; 0x19
     2c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2c6:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     2ca:	9b 01       	movw	r18, r22
     2cc:	ac 01       	movw	r20, r24
     2ce:	c3 01       	movw	r24, r6
     2d0:	b2 01       	movw	r22, r4
     2d2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__addsf3>
     2d6:	2b 01       	movw	r4, r22
     2d8:	3c 01       	movw	r6, r24
     2da:	a5 01       	movw	r20, r10
     2dc:	94 01       	movw	r18, r8
     2de:	c7 01       	movw	r24, r14
     2e0:	b6 01       	movw	r22, r12
     2e2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     2e6:	6b 01       	movw	r12, r22
     2e8:	7c 01       	movw	r14, r24
     2ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2ee:	4f 8d       	ldd	r20, Y+31	; 0x1f
     2f0:	58 a1       	ldd	r21, Y+32	; 0x20
     2f2:	69 8d       	ldd	r22, Y+25	; 0x19
     2f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2fa:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	c7 01       	movw	r24, r14
     304:	b6 01       	movw	r22, r12
     306:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__subsf3>
     30a:	ab 01       	movw	r20, r22
     30c:	bc 01       	movw	r22, r24
     30e:	93 01       	movw	r18, r6
     310:	82 01       	movw	r16, r4
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	de 01       	movw	r26, r28
     322:	19 96       	adiw	r26, 0x09	; 9
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <_ZN7Complex3mulES_+0xf0>
     32c:	29 85       	ldd	r18, Y+9	; 0x09
     32e:	3a 85       	ldd	r19, Y+10	; 0x0a
     330:	4b 85       	ldd	r20, Y+11	; 0x0b
     332:	5c 85       	ldd	r21, Y+12	; 0x0c
     334:	6d 85       	ldd	r22, Y+13	; 0x0d
     336:	7e 85       	ldd	r23, Y+14	; 0x0e
}
     338:	8f 85       	ldd	r24, Y+15	; 0x0f
     33a:	98 89       	ldd	r25, Y+16	; 0x10
     33c:	a0 96       	adiw	r28, 0x20	; 32
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	08 95       	ret

0000036a <_ZN7Complex3argEv>:
float Complex::arg(){
	return atan(this->im/this->re);
     36a:	fc 01       	movw	r30, r24
     36c:	20 81       	ld	r18, Z
     36e:	31 81       	ldd	r19, Z+1	; 0x01
     370:	42 81       	ldd	r20, Z+2	; 0x02
     372:	53 81       	ldd	r21, Z+3	; 0x03
     374:	64 81       	ldd	r22, Z+4	; 0x04
     376:	75 81       	ldd	r23, Z+5	; 0x05
     378:	86 81       	ldd	r24, Z+6	; 0x06
     37a:	97 81       	ldd	r25, Z+7	; 0x07
     37c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__divsf3>
     380:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <atan>
     384:	08 95       	ret

00000386 <_ZN6EEPromC1Ev>:
#include <util/delay.h>
#include "eeprom.h"

EEProm::EEProm(){
	//Set up TWI Module
	TWBR = 5;
     386:	85 e0       	ldi	r24, 0x05	; 5
     388:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     38a:	81 b1       	in	r24, 0x01	; 1
     38c:	8c 7f       	andi	r24, 0xFC	; 252
     38e:	81 b9       	out	0x01, r24	; 1
     390:	08 95       	ret

00000392 <_ZN6EEProm4readEj>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     392:	94 ea       	ldi	r25, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     394:	30 ea       	ldi	r19, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     396:	24 e8       	ldi	r18, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     398:	96 bf       	out	0x36, r25	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     39a:	06 b6       	in	r0, 0x36	; 54
     39c:	07 fe       	sbrs	r0, 7
     39e:	fd cf       	rjmp	.-6      	; 0x39a <_ZN6EEProm4readEj+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     3a0:	81 b1       	in	r24, 0x01	; 1
     3a2:	88 7f       	andi	r24, 0xF8	; 248
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	09 f0       	breq	.+2      	; 0x3aa <_ZN6EEProm4readEj+0x18>
     3a8:	41 c0       	rjmp	.+130    	; 0x42c <_ZN6EEProm4readEj+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     3aa:	33 b9       	out	0x03, r19	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     3ac:	26 bf       	out	0x36, r18	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     3ae:	06 b6       	in	r0, 0x36	; 54
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <_ZN6EEProm4readEj+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     3b4:	81 b1       	in	r24, 0x01	; 1
     3b6:	88 7f       	andi	r24, 0xF8	; 248

uint8_t EEProm::read(uint16_t address){
	uint8_t data;

	//Initiate a Dummy Write Sequence to start Random Read
	do
     3b8:	88 31       	cpi	r24, 0x18	; 24
     3ba:	71 f7       	brne	.-36     	; 0x398 <_ZN6EEProm4readEj+0x6>
	
	}while((TWSR & 0xF8) != 0x18);
		

	//Now write ADDRH
	TWDR=(address>>8);
     3bc:	73 b9       	out	0x03, r23	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3be:	84 e8       	ldi	r24, 0x84	; 132
     3c0:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3c2:	06 b6       	in	r0, 0x36	; 54
     3c4:	07 fe       	sbrs	r0, 7
     3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <_ZN6EEProm4readEj+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3c8:	81 b1       	in	r24, 0x01	; 1
     3ca:	88 7f       	andi	r24, 0xF8	; 248
     3cc:	88 32       	cpi	r24, 0x28	; 40
     3ce:	81 f5       	brne	.+96     	; 0x430 <_ZN6EEProm4readEj+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     3d0:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3d2:	84 e8       	ldi	r24, 0x84	; 132
     3d4:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3d6:	06 b6       	in	r0, 0x36	; 54
     3d8:	07 fe       	sbrs	r0, 7
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <_ZN6EEProm4readEj+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     3dc:	81 b1       	in	r24, 0x01	; 1
     3de:	88 7f       	andi	r24, 0xF8	; 248
     3e0:	88 32       	cpi	r24, 0x28	; 40
     3e2:	41 f5       	brne	.+80     	; 0x434 <_ZN6EEProm4readEj+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3e4:	84 ea       	ldi	r24, 0xA4	; 164
     3e6:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3e8:	06 b6       	in	r0, 0x36	; 54
     3ea:	07 fe       	sbrs	r0, 7
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <_ZN6EEProm4readEj+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     3ee:	81 b1       	in	r24, 0x01	; 1
     3f0:	88 7f       	andi	r24, 0xF8	; 248
     3f2:	80 31       	cpi	r24, 0x10	; 16
     3f4:	09 f5       	brne	.+66     	; 0x438 <_ZN6EEProm4readEj+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     3f6:	81 ea       	ldi	r24, 0xA1	; 161
     3f8:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     3fa:	84 e8       	ldi	r24, 0x84	; 132
     3fc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     3fe:	06 b6       	in	r0, 0x36	; 54
     400:	07 fe       	sbrs	r0, 7
     402:	fd cf       	rjmp	.-6      	; 0x3fe <_ZN6EEProm4readEj+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     404:	81 b1       	in	r24, 0x01	; 1
     406:	88 7f       	andi	r24, 0xF8	; 248
     408:	80 34       	cpi	r24, 0x40	; 64
     40a:	c1 f4       	brne	.+48     	; 0x43c <_ZN6EEProm4readEj+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     40c:	84 e8       	ldi	r24, 0x84	; 132
     40e:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     410:	06 b6       	in	r0, 0x36	; 54
     412:	07 fe       	sbrs	r0, 7
     414:	fd cf       	rjmp	.-6      	; 0x410 <_ZN6EEProm4readEj+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     416:	81 b1       	in	r24, 0x01	; 1
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	88 35       	cpi	r24, 0x58	; 88
     41c:	89 f4       	brne	.+34     	; 0x440 <_ZN6EEProm4readEj+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
     41e:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     420:	94 e9       	ldi	r25, 0x94	; 148
     422:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     424:	06 b6       	in	r0, 0x36	; 54
     426:	04 fc       	sbrc	r0, 4
     428:	fd cf       	rjmp	.-6      	; 0x424 <_ZN6EEProm4readEj+0x92>
     42a:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     440:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     442:	08 95       	ret

00000444 <_ZN6EEProm7readallEv>:
char* EEProm::readall(){
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	c4 56       	subi	r28, 0x64	; 100
     45a:	d1 09       	sbc	r29, r1
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	6c 01       	movw	r12, r24
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	7c 01       	movw	r14, r24
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	10 e0       	ldi	r17, 0x00	; 0
		eeprom_mem[i]=read(i); 
     472:	b8 01       	movw	r22, r16
     474:	c6 01       	movw	r24, r12
     476:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN6EEProm4readEj>
     47a:	f7 01       	movw	r30, r14
     47c:	81 93       	st	Z+, r24
     47e:	7f 01       	movw	r14, r30
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
     480:	8f 3f       	cpi	r24, 0xFF	; 255
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	32 97       	sbiw	r30, 0x02	; 2
     486:	20 81       	ld	r18, Z
     488:	2f 3f       	cpi	r18, 0xFF	; 255
     48a:	61 f4       	brne	.+24     	; 0x4a4 <__stack+0x45>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	20 81       	ld	r18, Z
     490:	2f 3f       	cpi	r18, 0xFF	; 255
     492:	41 f4       	brne	.+16     	; 0x4a4 <__stack+0x45>
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	20 81       	ld	r18, Z
     498:	2f 3f       	cpi	r18, 0xFF	; 255
     49a:	21 f4       	brne	.+8      	; 0x4a4 <__stack+0x45>
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	8f 3f       	cpi	r24, 0xFF	; 255
     4a2:	19 f0       	breq	.+6      	; 0x4aa <__stack+0x4b>
	//Return TRUE
	return data;
}
char* EEProm::readall(){
	char eeprom_mem[MAX_MEM_SIZE];
	for(int i=0;MAX_MEM_SIZE;i++) {
     4a4:	0f 5f       	subi	r16, 0xFF	; 255
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
		eeprom_mem[i]=read(i); 
		if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break;
	}
     4a8:	e4 cf       	rjmp	.-56     	; 0x472 <__stack+0x13>
	return eeprom_mem;
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	cc 59       	subi	r28, 0x9C	; 156
     4b0:	df 4f       	sbci	r29, 0xFF	; 255
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret

000004ce <_ZN5Gates10setup_seedEv>:
Gates::Gates(){setup_seed();}

Serial s;
QEPU::Utils u;

void Gates::setup_seed(){
     4ce:	cf 93       	push	r28
	unsigned char oldADMUX = ADMUX;
     4d0:	c7 b1       	in	r28, 0x07	; 7
	ADMUX |=  _BV(MUX0); //choose ADC1 on PB2
     4d2:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA |= _BV(ADPS2) |_BV(ADPS1) |_BV(ADPS0); //set prescaler to max value, 128
     4d4:	86 b1       	in	r24, 0x06	; 6
     4d6:	87 60       	ori	r24, 0x07	; 7
     4d8:	86 b9       	out	0x06, r24	; 6

	ADCSRA |= _BV(ADEN); //enable the ADC
     4da:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= _BV(ADSC);//start conversion
     4dc:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & _BV(ADSC)); //wait until the hardware clears the flag. Note semicolon!
     4de:	36 99       	sbic	0x06, 6	; 6
     4e0:	fe cf       	rjmp	.-4      	; 0x4de <_ZN5Gates10setup_seedEv+0x10>

	unsigned char byte1 = ADCL;
     4e2:	24 b1       	in	r18, 0x04	; 4

	ADCSRA |= _BV(ADSC);//start conversion
     4e4:	36 9a       	sbi	0x06, 6	; 6

	while (ADCSRA & _BV(ADSC)); //wait again note semicolon!
     4e6:	36 99       	sbic	0x06, 6	; 6
     4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <_ZN5Gates10setup_seedEv+0x18>

	unsigned char byte2 = ADCL;
     4ea:	84 b1       	in	r24, 0x04	; 4

	unsigned int seed = byte1 << 8 | byte2;
     4ec:	90 e0       	ldi	r25, 0x00	; 0

	srand(seed);
     4ee:	92 2b       	or	r25, r18
     4f0:	0e 94 ca 11 	call	0x2394	; 0x2394 <srand>

	ADCSRA &= ~_BV(ADEN); //disable ADC
     4f4:	37 98       	cbi	0x06, 7	; 6

	ADMUX = oldADMUX;
     4f6:	c7 b9       	out	0x07, r28	; 7
}
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <_ZN5GatesC1Ev>:
#include "gates.h"
#include "uart.h"
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
Gates::Gates(){setup_seed();}
     4fc:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN5Gates10setup_seedEv>
     500:	08 95       	ret

00000502 <_ZN5Gates8ampl2vecEiPiS0_>:

int Gates::touch(double probability){
	return RAND_MAX*probability>=rand();
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
     502:	2f 92       	push	r2
     504:	3f 92       	push	r3
     506:	4f 92       	push	r4
     508:	5f 92       	push	r5
     50a:	6f 92       	push	r6
     50c:	7f 92       	push	r7
     50e:	8f 92       	push	r8
     510:	9f 92       	push	r9
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	00 d0       	rcall	.+0      	; 0x528 <_ZN5Gates8ampl2vecEiPiS0_+0x26>
     528:	00 d0       	rcall	.+0      	; 0x52a <_ZN5Gates8ampl2vecEiPiS0_+0x28>
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	5b 01       	movw	r10, r22
     530:	04 2f       	mov	r16, r20
     532:	15 2f       	mov	r17, r21
     534:	c2 2e       	mov	r12, r18
     536:	d3 2e       	mov	r13, r19
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
     538:	cb 01       	movw	r24, r22
     53a:	82 95       	swap	r24
     53c:	92 95       	swap	r25
     53e:	90 7f       	andi	r25, 0xF0	; 240
     540:	98 27       	eor	r25, r24
     542:	80 7f       	andi	r24, 0xF0	; 240
     544:	98 27       	eor	r25, r24
     546:	0e 94 50 10 	call	0x20a0	; 0x20a0 <malloc>
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	9a 83       	std	Y+2, r25	; 0x02
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     54e:	aa 0c       	add	r10, r10
     550:	bb 1c       	adc	r11, r11
     552:	1a 14       	cp	r1, r10
     554:	1b 04       	cpc	r1, r11
     556:	0c f0       	brlt	.+2      	; 0x55a <_ZN5Gates8ampl2vecEiPiS0_+0x58>
     558:	fe c0       	rjmp	.+508    	; 0x756 <_ZN5Gates8ampl2vecEiPiS0_+0x254>
     55a:	e0 2e       	mov	r14, r16
     55c:	f1 2e       	mov	r15, r17
     55e:	0c 2d       	mov	r16, r12
     560:	1d 2d       	mov	r17, r13
     562:	8b 83       	std	Y+3, r24	; 0x03
     564:	9c 83       	std	Y+4, r25	; 0x04
     566:	c1 2c       	mov	r12, r1
     568:	d1 2c       	mov	r13, r1
     56a:	47 01       	movw	r8, r14
		vec[i].re=cos(theta_list[thephi_index]*M_PI/360);												// ALPHA RE (IM=0)
     56c:	f7 01       	movw	r30, r14
     56e:	41 90       	ld	r4, Z+
     570:	51 90       	ld	r5, Z+
     572:	7f 01       	movw	r14, r30
     574:	66 24       	eor	r6, r6
     576:	57 fc       	sbrc	r5, 7
     578:	60 94       	com	r6
     57a:	76 2c       	mov	r7, r6
     57c:	c3 01       	movw	r24, r6
     57e:	b2 01       	movw	r22, r4
     580:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__floatsisf>
     584:	2b ed       	ldi	r18, 0xDB	; 219
     586:	3f e0       	ldi	r19, 0x0F	; 15
     588:	49 e4       	ldi	r20, 0x49	; 73
     58a:	50 e4       	ldi	r21, 0x40	; 64
     58c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	44 eb       	ldi	r20, 0xB4	; 180
     596:	53 e4       	ldi	r21, 0x43	; 67
     598:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__divsf3>
     59c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <cos>
     5a0:	eb 81       	ldd	r30, Y+3	; 0x03
     5a2:	fc 81       	ldd	r31, Y+4	; 0x04
     5a4:	60 83       	st	Z, r22
     5a6:	71 83       	std	Z+1, r23	; 0x01
     5a8:	82 83       	std	Z+2, r24	; 0x02
     5aa:	93 83       	std	Z+3, r25	; 0x03
		vec[i+1].re=sin((theta_list[thephi_index]*M_PI)/360)*cos((phi_list[thephi_index]*M_PI)/180);	// BETA RE
     5ac:	c3 01       	movw	r24, r6
     5ae:	b2 01       	movw	r22, r4
     5b0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__floatsisf>
     5b4:	2b ed       	ldi	r18, 0xDB	; 219
     5b6:	3f e0       	ldi	r19, 0x0F	; 15
     5b8:	49 e4       	ldi	r20, 0x49	; 73
     5ba:	50 e4       	ldi	r21, 0x40	; 64
     5bc:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	44 eb       	ldi	r20, 0xB4	; 180
     5c6:	53 e4       	ldi	r21, 0x43	; 67
     5c8:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__divsf3>
     5cc:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <sin>
     5d0:	2b 01       	movw	r4, r22
     5d2:	3c 01       	movw	r6, r24
     5d4:	18 01       	movw	r2, r16
     5d6:	f8 01       	movw	r30, r16
     5d8:	61 91       	ld	r22, Z+
     5da:	71 91       	ld	r23, Z+
     5dc:	8f 01       	movw	r16, r30
     5de:	88 27       	eor	r24, r24
     5e0:	77 fd       	sbrc	r23, 7
     5e2:	80 95       	com	r24
     5e4:	98 2f       	mov	r25, r24
     5e6:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__floatsisf>
     5ea:	2b ed       	ldi	r18, 0xDB	; 219
     5ec:	3f e0       	ldi	r19, 0x0F	; 15
     5ee:	49 e4       	ldi	r20, 0x49	; 73
     5f0:	50 e4       	ldi	r21, 0x40	; 64
     5f2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	44 e3       	ldi	r20, 0x34	; 52
     5fc:	53 e4       	ldi	r21, 0x43	; 67
     5fe:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__divsf3>
     602:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <cos>
     606:	9b 01       	movw	r18, r22
     608:	ac 01       	movw	r20, r24
     60a:	c3 01       	movw	r24, r6
     60c:	b2 01       	movw	r22, r4
     60e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     612:	eb 81       	ldd	r30, Y+3	; 0x03
     614:	fc 81       	ldd	r31, Y+4	; 0x04
     616:	60 87       	std	Z+8, r22	; 0x08
     618:	71 87       	std	Z+9, r23	; 0x09
     61a:	82 87       	std	Z+10, r24	; 0x0a
     61c:	93 87       	std	Z+11, r25	; 0x0b
		vec[i+1].im=sin((theta_list[thephi_index]*M_PI)/360)*sin((phi_list[thephi_index++]*M_PI)/180);  // BETA IM
     61e:	f4 01       	movw	r30, r8
     620:	60 81       	ld	r22, Z
     622:	71 81       	ldd	r23, Z+1	; 0x01
     624:	88 27       	eor	r24, r24
     626:	77 fd       	sbrc	r23, 7
     628:	80 95       	com	r24
     62a:	98 2f       	mov	r25, r24
     62c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__floatsisf>
     630:	2b ed       	ldi	r18, 0xDB	; 219
     632:	3f e0       	ldi	r19, 0x0F	; 15
     634:	49 e4       	ldi	r20, 0x49	; 73
     636:	50 e4       	ldi	r21, 0x40	; 64
     638:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	44 eb       	ldi	r20, 0xB4	; 180
     642:	53 e4       	ldi	r21, 0x43	; 67
     644:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__divsf3>
     648:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <sin>
     64c:	2b 01       	movw	r4, r22
     64e:	3c 01       	movw	r6, r24
     650:	f1 01       	movw	r30, r2
     652:	60 81       	ld	r22, Z
     654:	71 81       	ldd	r23, Z+1	; 0x01
     656:	88 27       	eor	r24, r24
     658:	77 fd       	sbrc	r23, 7
     65a:	80 95       	com	r24
     65c:	98 2f       	mov	r25, r24
     65e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__floatsisf>
     662:	2b ed       	ldi	r18, 0xDB	; 219
     664:	3f e0       	ldi	r19, 0x0F	; 15
     666:	49 e4       	ldi	r20, 0x49	; 73
     668:	50 e4       	ldi	r21, 0x40	; 64
     66a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	44 e3       	ldi	r20, 0x34	; 52
     674:	53 e4       	ldi	r21, 0x43	; 67
     676:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__divsf3>
     67a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <sin>
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	c3 01       	movw	r24, r6
     684:	b2 01       	movw	r22, r4
     686:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     68a:	eb 81       	ldd	r30, Y+3	; 0x03
     68c:	fc 81       	ldd	r31, Y+4	; 0x04
     68e:	64 87       	std	Z+12, r22	; 0x0c
     690:	75 87       	std	Z+13, r23	; 0x0d
     692:	86 87       	std	Z+14, r24	; 0x0e
     694:	97 87       	std	Z+15, r25	; 0x0f
}

Complex * Gates::ampl2vec(int qb_count,int theta_list[6],int phi_list[6]){
	Complex* vec=(Complex*)malloc(sizeof(Complex)*(qb_count*2));
	int thephi_index=0;
	for(int i=0;i<qb_count*2;i+=2){
     696:	f2 e0       	ldi	r31, 0x02	; 2
     698:	cf 0e       	add	r12, r31
     69a:	d1 1c       	adc	r13, r1
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	40 96       	adiw	r24, 0x10	; 16
     6a2:	9c 83       	std	Y+4, r25	; 0x04
     6a4:	8b 83       	std	Y+3, r24	; 0x03
     6a6:	ca 14       	cp	r12, r10
     6a8:	db 04       	cpc	r13, r11
     6aa:	0c f4       	brge	.+2      	; 0x6ae <_ZN5Gates8ampl2vecEiPiS0_+0x1ac>
     6ac:	5e cf       	rjmp	.-324    	; 0x56a <_ZN5Gates8ampl2vecEiPiS0_+0x68>
     6ae:	48 c0       	rjmp	.+144    	; 0x740 <_ZN5Gates8ampl2vecEiPiS0_+0x23e>
	vec[1].re=sin((theta*M_PI)/360)*cos((phi*M_PI)/180); // BETA RE
	vec[1].im=sin((theta*M_PI)/360)*sin((phi*M_PI)/180); // BETA IM*/
	
	s.writestrln("Before: ");
	for(int i=0;i<qb_count*2;i++){
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
     6b0:	6a e6       	ldi	r22, 0x6A	; 106
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	81 ec       	ldi	r24, 0xC1	; 193
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	4a e7       	ldi	r20, 0x7A	; 122
     6c2:	54 e4       	ldi	r21, 0x44	; 68
     6c4:	f7 01       	movw	r30, r14
     6c6:	60 81       	ld	r22, Z
     6c8:	71 81       	ldd	r23, Z+1	; 0x01
     6ca:	82 81       	ldd	r24, Z+2	; 0x02
     6cc:	93 81       	ldd	r25, Z+3	; 0x03
     6ce:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     6d2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixsfsi>
     6d6:	80 ec       	ldi	r24, 0xC0	; 192
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN4QEPU5Utils7int2strEi>
     6de:	bc 01       	movw	r22, r24
     6e0:	81 ec       	ldi	r24, 0xC1	; 193
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
     6e8:	6e e6       	ldi	r22, 0x6E	; 110
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	81 ec       	ldi	r24, 0xC1	; 193
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	4a e7       	ldi	r20, 0x7A	; 122
     6fa:	54 e4       	ldi	r21, 0x44	; 68
     6fc:	f7 01       	movw	r30, r14
     6fe:	64 81       	ldd	r22, Z+4	; 0x04
     700:	75 81       	ldd	r23, Z+5	; 0x05
     702:	86 81       	ldd	r24, Z+6	; 0x06
     704:	97 81       	ldd	r25, Z+7	; 0x07
     706:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     70a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixsfsi>
     70e:	80 ec       	ldi	r24, 0xC0	; 192
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN4QEPU5Utils7int2strEi>
     716:	bc 01       	movw	r22, r24
     718:	81 ec       	ldi	r24, 0xC1	; 193
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     720:	6f ea       	ldi	r22, 0xAF	; 175
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	81 ec       	ldi	r24, 0xC1	; 193
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6Serial10writestrlnEPc>
	/*vec[0].re=cos(theta*M_PI/360);						 // ALPHA RE (IM=0)
	vec[1].re=sin((theta*M_PI)/360)*cos((phi*M_PI)/180); // BETA RE
	vec[1].im=sin((theta*M_PI)/360)*sin((phi*M_PI)/180); // BETA IM*/
	
	s.writestrln("Before: ");
	for(int i=0;i<qb_count*2;i++){
     72c:	0f 5f       	subi	r16, 0xFF	; 255
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
     730:	f8 e0       	ldi	r31, 0x08	; 8
     732:	ef 0e       	add	r14, r31
     734:	f1 1c       	adc	r15, r1
     736:	0a 15       	cp	r16, r10
     738:	1b 05       	cpc	r17, r11
     73a:	09 f0       	breq	.+2      	; 0x73e <_ZN5Gates8ampl2vecEiPiS0_+0x23c>
     73c:	b9 cf       	rjmp	.-142    	; 0x6b0 <_ZN5Gates8ampl2vecEiPiS0_+0x1ae>
     73e:	11 c0       	rjmp	.+34     	; 0x762 <_ZN5Gates8ampl2vecEiPiS0_+0x260>
	}
	/*vec[0].re=cos(theta*M_PI/360);						 // ALPHA RE (IM=0)
	vec[1].re=sin((theta*M_PI)/360)*cos((phi*M_PI)/180); // BETA RE
	vec[1].im=sin((theta*M_PI)/360)*sin((phi*M_PI)/180); // BETA IM*/
	
	s.writestrln("Before: ");
     740:	65 e7       	ldi	r22, 0x75	; 117
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	81 ec       	ldi	r24, 0xC1	; 193
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6Serial10writestrlnEPc>
     74c:	e9 80       	ldd	r14, Y+1	; 0x01
     74e:	fa 80       	ldd	r15, Y+2	; 0x02
	for(int i=0;i<qb_count*2;i++){
     750:	00 e0       	ldi	r16, 0x00	; 0
     752:	10 e0       	ldi	r17, 0x00	; 0
     754:	ad cf       	rjmp	.-166    	; 0x6b0 <_ZN5Gates8ampl2vecEiPiS0_+0x1ae>
	}
	/*vec[0].re=cos(theta*M_PI/360);						 // ALPHA RE (IM=0)
	vec[1].re=sin((theta*M_PI)/360)*cos((phi*M_PI)/180); // BETA RE
	vec[1].im=sin((theta*M_PI)/360)*sin((phi*M_PI)/180); // BETA IM*/
	
	s.writestrln("Before: ");
     756:	65 e7       	ldi	r22, 0x75	; 117
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	81 ec       	ldi	r24, 0xC1	; 193
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6Serial10writestrlnEPc>
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
		s.writestrln("");
	}
	return vec;
}
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	bf 90       	pop	r11
     780:	af 90       	pop	r10
     782:	9f 90       	pop	r9
     784:	8f 90       	pop	r8
     786:	7f 90       	pop	r7
     788:	6f 90       	pop	r6
     78a:	5f 90       	pop	r5
     78c:	4f 90       	pop	r4
     78e:	3f 90       	pop	r3
     790:	2f 90       	pop	r2
     792:	08 95       	ret

00000794 <_ZN5Gates8vec2amplEP7Complex>:
int * Gates::vec2ampl(Complex * vec){
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	eb 01       	movw	r28, r22
	int* newthephi=(int*)malloc(sizeof(int)*2);
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 50 10 	call	0x20a0	; 0x20a0 <malloc>
     7aa:	7c 01       	movw	r14, r24
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
     7ac:	68 81       	ld	r22, Y
     7ae:	79 81       	ldd	r23, Y+1	; 0x01
     7b0:	8a 81       	ldd	r24, Y+2	; 0x02
     7b2:	9b 81       	ldd	r25, Y+3	; 0x03
     7b4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <acos>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	44 eb       	ldi	r20, 0xB4	; 180
     7be:	53 e4       	ldi	r21, 0x43	; 67
     7c0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     7c4:	2b ed       	ldi	r18, 0xDB	; 219
     7c6:	3f e0       	ldi	r19, 0x0F	; 15
     7c8:	49 e4       	ldi	r20, 0x49	; 73
     7ca:	50 e4       	ldi	r21, 0x40	; 64
     7cc:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__divsf3>
     7d0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixsfsi>
     7d4:	f7 01       	movw	r30, r14
     7d6:	71 83       	std	Z+1, r23	; 0x01
     7d8:	60 83       	st	Z, r22
	newthephi[1]=(180*vec[1].arg())/M_PI;
     7da:	ce 01       	movw	r24, r28
     7dc:	08 96       	adiw	r24, 0x08	; 8
     7de:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN7Complex3argEv>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	44 e3       	ldi	r20, 0x34	; 52
     7e8:	53 e4       	ldi	r21, 0x43	; 67
     7ea:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     7ee:	2b ed       	ldi	r18, 0xDB	; 219
     7f0:	3f e0       	ldi	r19, 0x0F	; 15
     7f2:	49 e4       	ldi	r20, 0x49	; 73
     7f4:	50 e4       	ldi	r21, 0x40	; 64
     7f6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__divsf3>
     7fa:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixsfsi>
     7fe:	f7 01       	movw	r30, r14
     800:	73 83       	std	Z+3, r23	; 0x03
     802:	62 83       	std	Z+2, r22	; 0x02
	
	s.writestrln(""); s.writestrln("After: ");
     804:	6f ea       	ldi	r22, 0xAF	; 175
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	81 ec       	ldi	r24, 0xC1	; 193
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6Serial10writestrlnEPc>
     810:	6e e7       	ldi	r22, 0x7E	; 126
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	81 ec       	ldi	r24, 0xC1	; 193
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<4;i++){
     81c:	00 e0       	ldi	r16, 0x00	; 0
     81e:	10 e0       	ldi	r17, 0x00	; 0
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
     820:	6a e6       	ldi	r22, 0x6A	; 106
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	81 ec       	ldi	r24, 0xC1	; 193
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	4a e7       	ldi	r20, 0x7A	; 122
     832:	54 e4       	ldi	r21, 0x44	; 68
     834:	68 81       	ld	r22, Y
     836:	79 81       	ldd	r23, Y+1	; 0x01
     838:	8a 81       	ldd	r24, Y+2	; 0x02
     83a:	9b 81       	ldd	r25, Y+3	; 0x03
     83c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     840:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixsfsi>
     844:	80 ec       	ldi	r24, 0xC0	; 192
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN4QEPU5Utils7int2strEi>
     84c:	bc 01       	movw	r22, r24
     84e:	81 ec       	ldi	r24, 0xC1	; 193
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
     856:	6e e6       	ldi	r22, 0x6E	; 110
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	81 ec       	ldi	r24, 0xC1	; 193
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	4a e7       	ldi	r20, 0x7A	; 122
     868:	54 e4       	ldi	r21, 0x44	; 68
     86a:	6c 81       	ldd	r22, Y+4	; 0x04
     86c:	7d 81       	ldd	r23, Y+5	; 0x05
     86e:	8e 81       	ldd	r24, Y+6	; 0x06
     870:	9f 81       	ldd	r25, Y+7	; 0x07
     872:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsf3>
     876:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fixsfsi>
     87a:	80 ec       	ldi	r24, 0xC0	; 192
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN4QEPU5Utils7int2strEi>
     882:	bc 01       	movw	r22, r24
     884:	81 ec       	ldi	r24, 0xC1	; 193
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
		s.writestrln("");
     88c:	6f ea       	ldi	r22, 0xAF	; 175
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	81 ec       	ldi	r24, 0xC1	; 193
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6Serial10writestrlnEPc>
	int* newthephi=(int*)malloc(sizeof(int)*2);
	newthephi[0]=(360*acos(vec[0].re))/M_PI;
	newthephi[1]=(180*vec[1].arg())/M_PI;
	
	s.writestrln(""); s.writestrln("After: ");
	for(int i=0;i<4;i++){
     898:	0f 5f       	subi	r16, 0xFF	; 255
     89a:	1f 4f       	sbci	r17, 0xFF	; 255
     89c:	28 96       	adiw	r28, 0x08	; 8
     89e:	04 30       	cpi	r16, 0x04	; 4
     8a0:	11 05       	cpc	r17, r1
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <_ZN5Gates8vec2amplEP7Complex+0x112>
     8a4:	bd cf       	rjmp	.-134    	; 0x820 <_ZN5Gates8vec2amplEP7Complex+0x8c>
		s.writestr("R: "); s.writestr(u.int2str(vec[i].re*1000));
		s.writestr(" . I: "); s.writestr(u.int2str(vec[i].im*1000));
		s.writestrln("");
	}
	s.writestrln("");
     8a6:	6f ea       	ldi	r22, 0xAF	; 175
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	81 ec       	ldi	r24, 0xC1	; 193
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6Serial10writestrlnEPc>
	return newthephi;
}
     8b2:	c7 01       	movw	r24, r14
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	08 95       	ret

000008c2 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>:

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
     8c2:	2f 92       	push	r2
     8c4:	3f 92       	push	r3
     8c6:	4f 92       	push	r4
     8c8:	5f 92       	push	r5
     8ca:	6f 92       	push	r6
     8cc:	7f 92       	push	r7
     8ce:	8f 92       	push	r8
     8d0:	9f 92       	push	r9
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	60 97       	sbiw	r28, 0x10	; 16
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	4b 01       	movw	r8, r22
     8f8:	3a 01       	movw	r6, r20
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     8fa:	80 e1       	ldi	r24, 0x10	; 16
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 50 10 	call	0x20a0	; 0x20a0 <malloc>
     902:	38 2e       	mov	r3, r24
     904:	29 2e       	mov	r2, r25
     906:	c8 2e       	mov	r12, r24
     908:	d9 2e       	mov	r13, r25
	for(int i=0;i<qb_size;i++){
     90a:	a1 2c       	mov	r10, r1
     90c:	b1 2c       	mov	r11, r1
		Complex tmp;
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     90e:	24 01       	movw	r4, r8
     910:	88 e0       	ldi	r24, 0x08	; 8
     912:	48 0e       	add	r4, r24
     914:	51 1c       	adc	r5, r1

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
		Complex tmp;
     916:	ce 01       	movw	r24, r28
     918:	09 96       	adiw	r24, 0x09	; 9
     91a:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     91e:	75 01       	movw	r14, r10
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	ee 0c       	add	r14, r14
     926:	ff 1c       	adc	r15, r15
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	e6 0c       	add	r14, r6
     92e:	f7 1c       	adc	r15, r7
     930:	d7 01       	movw	r26, r14
     932:	0c 91       	ld	r16, X
     934:	11 96       	adiw	r26, 0x01	; 1
     936:	1c 91       	ld	r17, X
     938:	11 97       	sbiw	r26, 0x01	; 1
     93a:	12 96       	adiw	r26, 0x02	; 2
     93c:	2c 91       	ld	r18, X
     93e:	12 97       	sbiw	r26, 0x02	; 2
     940:	13 96       	adiw	r26, 0x03	; 3
     942:	3c 91       	ld	r19, X
     944:	13 97       	sbiw	r26, 0x03	; 3
     946:	14 96       	adiw	r26, 0x04	; 4
     948:	4c 91       	ld	r20, X
     94a:	14 97       	sbiw	r26, 0x04	; 4
     94c:	15 96       	adiw	r26, 0x05	; 5
     94e:	5c 91       	ld	r21, X
     950:	15 97       	sbiw	r26, 0x05	; 5
     952:	16 96       	adiw	r26, 0x06	; 6
     954:	6c 91       	ld	r22, X
     956:	16 97       	sbiw	r26, 0x06	; 6
     958:	17 96       	adiw	r26, 0x07	; 7
     95a:	7c 91       	ld	r23, X
     95c:	c4 01       	movw	r24, r8
     95e:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     962:	02 2f       	mov	r16, r18
     964:	13 2f       	mov	r17, r19
     966:	24 2f       	mov	r18, r20
     968:	35 2f       	mov	r19, r21
     96a:	46 2f       	mov	r20, r22
     96c:	57 2f       	mov	r21, r23
     96e:	68 2f       	mov	r22, r24
     970:	79 2f       	mov	r23, r25
     972:	ce 01       	movw	r24, r28
     974:	09 96       	adiw	r24, 0x09	; 9
     976:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     97a:	29 87       	std	Y+9, r18	; 0x09
     97c:	3a 87       	std	Y+10, r19	; 0x0a
     97e:	4b 87       	std	Y+11, r20	; 0x0b
     980:	5c 87       	std	Y+12, r21	; 0x0c
     982:	6d 87       	std	Y+13, r22	; 0x0d
     984:	7e 87       	std	Y+14, r23	; 0x0e
     986:	8f 87       	std	Y+15, r24	; 0x0f
     988:	98 8b       	std	Y+16, r25	; 0x10
     98a:	f7 01       	movw	r30, r14
     98c:	70 96       	adiw	r30, 0x10	; 16
     98e:	d7 01       	movw	r26, r14
     990:	50 96       	adiw	r26, 0x10	; 16
     992:	0c 91       	ld	r16, X
     994:	11 81       	ldd	r17, Z+1	; 0x01
     996:	22 81       	ldd	r18, Z+2	; 0x02
     998:	33 81       	ldd	r19, Z+3	; 0x03
     99a:	44 81       	ldd	r20, Z+4	; 0x04
     99c:	55 81       	ldd	r21, Z+5	; 0x05
     99e:	66 81       	ldd	r22, Z+6	; 0x06
     9a0:	77 81       	ldd	r23, Z+7	; 0x07
     9a2:	c2 01       	movw	r24, r4
     9a4:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     9a8:	02 2f       	mov	r16, r18
     9aa:	13 2f       	mov	r17, r19
     9ac:	24 2f       	mov	r18, r20
     9ae:	35 2f       	mov	r19, r21
     9b0:	46 2f       	mov	r20, r22
     9b2:	57 2f       	mov	r21, r23
     9b4:	68 2f       	mov	r22, r24
     9b6:	79 2f       	mov	r23, r25
     9b8:	ce 01       	movw	r24, r28
     9ba:	09 96       	adiw	r24, 0x09	; 9
     9bc:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     9c0:	29 87       	std	Y+9, r18	; 0x09
     9c2:	3a 87       	std	Y+10, r19	; 0x0a
     9c4:	4b 87       	std	Y+11, r20	; 0x0b
     9c6:	5c 87       	std	Y+12, r21	; 0x0c
     9c8:	6d 87       	std	Y+13, r22	; 0x0d
     9ca:	7e 87       	std	Y+14, r23	; 0x0e
     9cc:	8f 87       	std	Y+15, r24	; 0x0f
     9ce:	98 8b       	std	Y+16, r25	; 0x10
		result[i].re=tmp.re;
     9d0:	89 85       	ldd	r24, Y+9	; 0x09
     9d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d4:	ab 85       	ldd	r26, Y+11	; 0x0b
     9d6:	bc 85       	ldd	r27, Y+12	; 0x0c
     9d8:	f6 01       	movw	r30, r12
     9da:	80 83       	st	Z, r24
     9dc:	91 83       	std	Z+1, r25	; 0x01
     9de:	a2 83       	std	Z+2, r26	; 0x02
     9e0:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     9e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     9e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     9e6:	af 85       	ldd	r26, Y+15	; 0x0f
     9e8:	b8 89       	ldd	r27, Y+16	; 0x10
     9ea:	84 83       	std	Z+4, r24	; 0x04
     9ec:	95 83       	std	Z+5, r25	; 0x05
     9ee:	a6 83       	std	Z+6, r26	; 0x06
     9f0:	b7 83       	std	Z+7, r27	; 0x07
}

Complex * Gates::multiply2x2(Complex *q,Complex matrix[2][2]){
	int qb_size=2;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     9f2:	ff ef       	ldi	r31, 0xFF	; 255
     9f4:	af 1a       	sub	r10, r31
     9f6:	bf 0a       	sbc	r11, r31
     9f8:	88 e0       	ldi	r24, 0x08	; 8
     9fa:	c8 0e       	add	r12, r24
     9fc:	d1 1c       	adc	r13, r1
     9fe:	a2 e0       	ldi	r26, 0x02	; 2
     a00:	aa 16       	cp	r10, r26
     a02:	b1 04       	cpc	r11, r1
     a04:	09 f0       	breq	.+2      	; 0xa08 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x146>
     a06:	87 cf       	rjmp	.-242    	; 0x916 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_+0x54>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     a08:	83 2d       	mov	r24, r3
     a0a:	92 2d       	mov	r25, r2
     a0c:	60 96       	adiw	r28, 0x10	; 16
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	bf 90       	pop	r11
     a2a:	af 90       	pop	r10
     a2c:	9f 90       	pop	r9
     a2e:	8f 90       	pop	r8
     a30:	7f 90       	pop	r7
     a32:	6f 90       	pop	r6
     a34:	5f 90       	pop	r5
     a36:	4f 90       	pop	r4
     a38:	3f 90       	pop	r3
     a3a:	2f 90       	pop	r2
     a3c:	08 95       	ret

00000a3e <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>:
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
     a3e:	2f 92       	push	r2
     a40:	3f 92       	push	r3
     a42:	4f 92       	push	r4
     a44:	5f 92       	push	r5
     a46:	6f 92       	push	r6
     a48:	7f 92       	push	r7
     a4a:	8f 92       	push	r8
     a4c:	9f 92       	push	r9
     a4e:	af 92       	push	r10
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	64 97       	sbiw	r28, 0x14	; 20
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
     a72:	3b 01       	movw	r6, r22
     a74:	e4 2e       	mov	r14, r20
     a76:	f5 2e       	mov	r15, r21
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
     a78:	80 e2       	ldi	r24, 0x20	; 32
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <malloc>
     a80:	8b 8b       	std	Y+19, r24	; 0x13
     a82:	9c 8b       	std	Y+20, r25	; 0x14
     a84:	48 2e       	mov	r4, r24
     a86:	59 2e       	mov	r5, r25
	for(int i=0;i<qb_size;i++){
     a88:	81 2c       	mov	r8, r1
     a8a:	91 2c       	mov	r9, r1
     a8c:	e9 8a       	std	Y+17, r14	; 0x11
     a8e:	fa 8a       	std	Y+18, r15	; 0x12
		Complex tmp;
     a90:	21 2c       	mov	r2, r1
     a92:	31 2c       	mov	r3, r1
     a94:	ce 01       	movw	r24, r28
     a96:	09 96       	adiw	r24, 0x09	; 9
     a98:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN7ComplexC1Ev>
     a9c:	c9 88       	ldd	r12, Y+17	; 0x11
     a9e:	da 88       	ldd	r13, Y+18	; 0x12
     aa0:	e2 2c       	mov	r14, r2
     aa2:	f3 2c       	mov	r15, r3
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
     aa4:	54 01       	movw	r10, r8
     aa6:	aa 0c       	add	r10, r10
     aa8:	bb 1c       	adc	r11, r11
     aaa:	aa 0c       	add	r10, r10
     aac:	bb 1c       	adc	r11, r11
     aae:	aa 0c       	add	r10, r10
     ab0:	bb 1c       	adc	r11, r11
     ab2:	f5 01       	movw	r30, r10
     ab4:	ec 0d       	add	r30, r12
     ab6:	fd 1d       	adc	r31, r13
     ab8:	00 81       	ld	r16, Z
     aba:	11 81       	ldd	r17, Z+1	; 0x01
     abc:	22 81       	ldd	r18, Z+2	; 0x02
     abe:	33 81       	ldd	r19, Z+3	; 0x03
     ac0:	44 81       	ldd	r20, Z+4	; 0x04
     ac2:	55 81       	ldd	r21, Z+5	; 0x05
     ac4:	66 81       	ldd	r22, Z+6	; 0x06
     ac6:	77 81       	ldd	r23, Z+7	; 0x07
     ac8:	c3 01       	movw	r24, r6
     aca:	8e 0d       	add	r24, r14
     acc:	9f 1d       	adc	r25, r15
     ace:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7Complex3mulES_>
     ad2:	29 83       	std	Y+1, r18	; 0x01
     ad4:	3a 83       	std	Y+2, r19	; 0x02
     ad6:	4b 83       	std	Y+3, r20	; 0x03
     ad8:	5c 83       	std	Y+4, r21	; 0x04
     ada:	6d 83       	std	Y+5, r22	; 0x05
     adc:	7e 83       	std	Y+6, r23	; 0x06
     ade:	8f 83       	std	Y+7, r24	; 0x07
     ae0:	98 87       	std	Y+8, r25	; 0x08
     ae2:	02 2f       	mov	r16, r18
     ae4:	13 2f       	mov	r17, r19
     ae6:	24 2f       	mov	r18, r20
     ae8:	35 2f       	mov	r19, r21
     aea:	46 2f       	mov	r20, r22
     aec:	57 2f       	mov	r21, r23
     aee:	68 2f       	mov	r22, r24
     af0:	79 2f       	mov	r23, r25
     af2:	ce 01       	movw	r24, r28
     af4:	09 96       	adiw	r24, 0x09	; 9
     af6:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7Complex3addES_>
     afa:	29 87       	std	Y+9, r18	; 0x09
     afc:	3a 87       	std	Y+10, r19	; 0x0a
     afe:	4b 87       	std	Y+11, r20	; 0x0b
     b00:	5c 87       	std	Y+12, r21	; 0x0c
     b02:	6d 87       	std	Y+13, r22	; 0x0d
     b04:	7e 87       	std	Y+14, r23	; 0x0e
     b06:	8f 87       	std	Y+15, r24	; 0x0f
     b08:	98 8b       	std	Y+16, r25	; 0x10
     b0a:	88 e0       	ldi	r24, 0x08	; 8
     b0c:	e8 0e       	add	r14, r24
     b0e:	f1 1c       	adc	r15, r1
     b10:	e0 e2       	ldi	r30, 0x20	; 32
     b12:	ce 0e       	add	r12, r30
     b14:	d1 1c       	adc	r13, r1
     b16:	f0 e2       	ldi	r31, 0x20	; 32
     b18:	ef 16       	cp	r14, r31
     b1a:	f1 04       	cpc	r15, r1
     b1c:	51 f6       	brne	.-108    	; 0xab2 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x74>
		result[i].re=tmp.re;
     b1e:	89 85       	ldd	r24, Y+9	; 0x09
     b20:	9a 85       	ldd	r25, Y+10	; 0x0a
     b22:	ab 85       	ldd	r26, Y+11	; 0x0b
     b24:	bc 85       	ldd	r27, Y+12	; 0x0c
     b26:	f2 01       	movw	r30, r4
     b28:	80 83       	st	Z, r24
     b2a:	91 83       	std	Z+1, r25	; 0x01
     b2c:	a2 83       	std	Z+2, r26	; 0x02
     b2e:	b3 83       	std	Z+3, r27	; 0x03
		result[i].im=tmp.im;
     b30:	8d 85       	ldd	r24, Y+13	; 0x0d
     b32:	9e 85       	ldd	r25, Y+14	; 0x0e
     b34:	af 85       	ldd	r26, Y+15	; 0x0f
     b36:	b8 89       	ldd	r27, Y+16	; 0x10
     b38:	84 83       	std	Z+4, r24	; 0x04
     b3a:	95 83       	std	Z+5, r25	; 0x05
     b3c:	a6 83       	std	Z+6, r26	; 0x06
     b3e:	b7 83       	std	Z+7, r27	; 0x07
	return result;
}
Complex * Gates::multiply4x4(Complex *q,Complex matrix[4][4]){
	int qb_size=4;
	Complex * result=(Complex*)malloc(sizeof(Complex)*qb_size);
	for(int i=0;i<qb_size;i++){
     b40:	ff ef       	ldi	r31, 0xFF	; 255
     b42:	8f 1a       	sub	r8, r31
     b44:	9f 0a       	sbc	r9, r31
     b46:	88 e0       	ldi	r24, 0x08	; 8
     b48:	48 0e       	add	r4, r24
     b4a:	51 1c       	adc	r5, r1
     b4c:	e4 e0       	ldi	r30, 0x04	; 4
     b4e:	8e 16       	cp	r8, r30
     b50:	91 04       	cpc	r9, r1
     b52:	09 f0       	breq	.+2      	; 0xb56 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x118>
     b54:	9f cf       	rjmp	.-194    	; 0xa94 <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_+0x56>
		for(int j=0;j<qb_size;j++) tmp=tmp.add(q[j].mul(matrix[j][i]));
		result[i].re=tmp.re;
		result[i].im=tmp.im;
	}
	return result;
}
     b56:	8b 89       	ldd	r24, Y+19	; 0x13
     b58:	9c 89       	ldd	r25, Y+20	; 0x14
     b5a:	64 96       	adiw	r28, 0x14	; 20
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	df 90       	pop	r13
     b74:	cf 90       	pop	r12
     b76:	bf 90       	pop	r11
     b78:	af 90       	pop	r10
     b7a:	9f 90       	pop	r9
     b7c:	8f 90       	pop	r8
     b7e:	7f 90       	pop	r7
     b80:	6f 90       	pop	r6
     b82:	5f 90       	pop	r5
     b84:	4f 90       	pop	r4
     b86:	3f 90       	pop	r3
     b88:	2f 90       	pop	r2
     b8a:	08 95       	ret

00000b8c <_ZN5Gates1XEii>:
		result[i].im=tmp.im;
	}
	return result;
}

int * Gates::X(int theta,int phi){
     b8c:	af 92       	push	r10
     b8e:	bf 92       	push	r11
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	a4 97       	sbiw	r28, 0x24	; 36
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	7c 01       	movw	r14, r24
     bb2:	5b 01       	movw	r10, r22
     bb4:	6a 01       	movw	r12, r20
	Complex x_matrix[2][2]{{Complex(0,0),Complex(1,0)},
						   {Complex(1,0),Complex(0,0)}};
     bb6:	00 e0       	ldi	r16, 0x00	; 0
     bb8:	10 e0       	ldi	r17, 0x00	; 0
     bba:	98 01       	movw	r18, r16
     bbc:	b9 01       	movw	r22, r18
     bbe:	a8 01       	movw	r20, r16
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     bc8:	00 e0       	ldi	r16, 0x00	; 0
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	98 01       	movw	r18, r16
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	60 e8       	ldi	r22, 0x80	; 128
     bd4:	7f e3       	ldi	r23, 0x3F	; 63
     bd6:	ce 01       	movw	r24, r28
     bd8:	09 96       	adiw	r24, 0x09	; 9
     bda:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     bde:	00 e0       	ldi	r16, 0x00	; 0
     be0:	10 e0       	ldi	r17, 0x00	; 0
     be2:	98 01       	movw	r18, r16
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	60 e8       	ldi	r22, 0x80	; 128
     bea:	7f e3       	ldi	r23, 0x3F	; 63
     bec:	ce 01       	movw	r24, r28
     bee:	41 96       	adiw	r24, 0x11	; 17
     bf0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     bf4:	00 e0       	ldi	r16, 0x00	; 0
     bf6:	10 e0       	ldi	r17, 0x00	; 0
     bf8:	98 01       	movw	r18, r16
     bfa:	b9 01       	movw	r22, r18
     bfc:	a8 01       	movw	r20, r16
     bfe:	ce 01       	movw	r24, r28
     c00:	49 96       	adiw	r24, 0x19	; 25
     c02:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[1]={theta}; int phi_list[1]={phi};
     c06:	bc a2       	std	Y+36, r11	; 0x24
     c08:	ab a2       	std	Y+35, r10	; 0x23
     c0a:	da a2       	std	Y+34, r13	; 0x22
     c0c:	c9 a2       	std	Y+33, r12	; 0x21
	return vec2ampl(multiply2x2(ampl2vec(1,theta_list,phi_list),x_matrix));
     c0e:	9e 01       	movw	r18, r28
     c10:	2f 5d       	subi	r18, 0xDF	; 223
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	ae 01       	movw	r20, r28
     c16:	4d 5d       	subi	r20, 0xDD	; 221
     c18:	5f 4f       	sbci	r21, 0xFF	; 255
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	c7 01       	movw	r24, r14
     c20:	0e 94 81 02 	call	0x502	; 0x502 <_ZN5Gates8ampl2vecEiPiS0_>
     c24:	ae 01       	movw	r20, r28
     c26:	4f 5f       	subi	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	bc 01       	movw	r22, r24
     c2c:	c7 01       	movw	r24, r14
     c2e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN5Gates11multiply2x2EP7ComplexPA2_S0_>
     c32:	bc 01       	movw	r22, r24
     c34:	c7 01       	movw	r24, r14
     c36:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5Gates8vec2amplEP7Complex>
}
     c3a:	a4 96       	adiw	r28, 0x24	; 36
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	08 95       	ret

00000c5c <_ZN5Gates1YEii>:
int * Gates::Y(int theta,int phi){
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	a0 97       	sbiw	r28, 0x20	; 32
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
	Complex y_matrix[2][2]{{Complex(0,0),Complex(0,-1)},
						   {Complex(0,1),Complex(0,0)}};
     c74:	00 e0       	ldi	r16, 0x00	; 0
     c76:	10 e0       	ldi	r17, 0x00	; 0
     c78:	98 01       	movw	r18, r16
     c7a:	b9 01       	movw	r22, r18
     c7c:	a8 01       	movw	r20, r16
     c7e:	ce 01       	movw	r24, r28
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     c86:	00 e0       	ldi	r16, 0x00	; 0
     c88:	10 e0       	ldi	r17, 0x00	; 0
     c8a:	20 e8       	ldi	r18, 0x80	; 128
     c8c:	3f eb       	ldi	r19, 0xBF	; 191
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	ba 01       	movw	r22, r20
     c94:	ce 01       	movw	r24, r28
     c96:	09 96       	adiw	r24, 0x09	; 9
     c98:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     c9c:	00 e0       	ldi	r16, 0x00	; 0
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	20 e8       	ldi	r18, 0x80	; 128
     ca2:	3f e3       	ldi	r19, 0x3F	; 63
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	ba 01       	movw	r22, r20
     caa:	ce 01       	movw	r24, r28
     cac:	41 96       	adiw	r24, 0x11	; 17
     cae:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     cb2:	00 e0       	ldi	r16, 0x00	; 0
     cb4:	10 e0       	ldi	r17, 0x00	; 0
     cb6:	98 01       	movw	r18, r16
     cb8:	b9 01       	movw	r22, r18
     cba:	a8 01       	movw	r20, r16
     cbc:	ce 01       	movw	r24, r28
     cbe:	49 96       	adiw	r24, 0x19	; 25
     cc0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	//return vec2ampl(multiply2x2(ampl2vec(2,theta,phi),y_matrix));
}
     cc4:	a0 96       	adiw	r28, 0x20	; 32
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	08 95       	ret

00000cda <_ZN5Gates1ZEii>:
int * Gates::Z(int theta,int phi){
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	a0 97       	sbiw	r28, 0x20	; 32
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
	Complex z_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(-1,0)}};
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	10 e0       	ldi	r17, 0x00	; 0
     cf6:	98 01       	movw	r18, r16
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	60 e8       	ldi	r22, 0x80	; 128
     cfe:	7f e3       	ldi	r23, 0x3F	; 63
     d00:	ce 01       	movw	r24, r28
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d08:	00 e0       	ldi	r16, 0x00	; 0
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	98 01       	movw	r18, r16
     d0e:	b9 01       	movw	r22, r18
     d10:	a8 01       	movw	r20, r16
     d12:	ce 01       	movw	r24, r28
     d14:	09 96       	adiw	r24, 0x09	; 9
     d16:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d1a:	00 e0       	ldi	r16, 0x00	; 0
     d1c:	10 e0       	ldi	r17, 0x00	; 0
     d1e:	98 01       	movw	r18, r16
     d20:	b9 01       	movw	r22, r18
     d22:	a8 01       	movw	r20, r16
     d24:	ce 01       	movw	r24, r28
     d26:	41 96       	adiw	r24, 0x11	; 17
     d28:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d2c:	00 e0       	ldi	r16, 0x00	; 0
     d2e:	10 e0       	ldi	r17, 0x00	; 0
     d30:	98 01       	movw	r18, r16
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	60 e8       	ldi	r22, 0x80	; 128
     d38:	7f eb       	ldi	r23, 0xBF	; 191
     d3a:	ce 01       	movw	r24, r28
     d3c:	49 96       	adiw	r24, 0x19	; 25
     d3e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	//return vec2ampl(multiply2x2(ampl2vec(2,theta,phi),z_matrix));
}
     d42:	a0 96       	adiw	r28, 0x20	; 32
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	08 95       	ret

00000d58 <_ZN5Gates1HEii>:
int * Gates::H(int theta,int phi){
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	a0 97       	sbiw	r28, 0x20	; 32
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
	Complex h_matrix[2][2]{{Complex(1/sqrt(2),0),Complex(1/sqrt(2),0)},
						   {Complex(1/sqrt(2),0),Complex(-1/sqrt(2),0)}};
     d70:	00 e0       	ldi	r16, 0x00	; 0
     d72:	10 e0       	ldi	r17, 0x00	; 0
     d74:	98 01       	movw	r18, r16
     d76:	43 ef       	ldi	r20, 0xF3	; 243
     d78:	54 e0       	ldi	r21, 0x04	; 4
     d7a:	65 e3       	ldi	r22, 0x35	; 53
     d7c:	7f e3       	ldi	r23, 0x3F	; 63
     d7e:	ce 01       	movw	r24, r28
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d86:	00 e0       	ldi	r16, 0x00	; 0
     d88:	10 e0       	ldi	r17, 0x00	; 0
     d8a:	98 01       	movw	r18, r16
     d8c:	43 ef       	ldi	r20, 0xF3	; 243
     d8e:	54 e0       	ldi	r21, 0x04	; 4
     d90:	65 e3       	ldi	r22, 0x35	; 53
     d92:	7f e3       	ldi	r23, 0x3F	; 63
     d94:	ce 01       	movw	r24, r28
     d96:	09 96       	adiw	r24, 0x09	; 9
     d98:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     d9c:	00 e0       	ldi	r16, 0x00	; 0
     d9e:	10 e0       	ldi	r17, 0x00	; 0
     da0:	98 01       	movw	r18, r16
     da2:	43 ef       	ldi	r20, 0xF3	; 243
     da4:	54 e0       	ldi	r21, 0x04	; 4
     da6:	65 e3       	ldi	r22, 0x35	; 53
     da8:	7f e3       	ldi	r23, 0x3F	; 63
     daa:	ce 01       	movw	r24, r28
     dac:	41 96       	adiw	r24, 0x11	; 17
     dae:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     db2:	00 e0       	ldi	r16, 0x00	; 0
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	98 01       	movw	r18, r16
     db8:	43 ef       	ldi	r20, 0xF3	; 243
     dba:	54 e0       	ldi	r21, 0x04	; 4
     dbc:	65 e3       	ldi	r22, 0x35	; 53
     dbe:	7f eb       	ldi	r23, 0xBF	; 191
     dc0:	ce 01       	movw	r24, r28
     dc2:	49 96       	adiw	r24, 0x19	; 25
     dc4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	//return vec2ampl(multiply2x2(ampl2vec(2,theta,phi),h_matrix));
}
     dc8:	a0 96       	adiw	r28, 0x20	; 32
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	08 95       	ret

00000dde <_ZN5Gates1SEii>:
int * Gates::S(int theta,int phi){
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	a0 97       	sbiw	r28, 0x20	; 32
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
	Complex s_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(0,1)}};
     df6:	00 e0       	ldi	r16, 0x00	; 0
     df8:	10 e0       	ldi	r17, 0x00	; 0
     dfa:	98 01       	movw	r18, r16
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	60 e8       	ldi	r22, 0x80	; 128
     e02:	7f e3       	ldi	r23, 0x3F	; 63
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e0c:	00 e0       	ldi	r16, 0x00	; 0
     e0e:	10 e0       	ldi	r17, 0x00	; 0
     e10:	98 01       	movw	r18, r16
     e12:	b9 01       	movw	r22, r18
     e14:	a8 01       	movw	r20, r16
     e16:	ce 01       	movw	r24, r28
     e18:	09 96       	adiw	r24, 0x09	; 9
     e1a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	98 01       	movw	r18, r16
     e24:	b9 01       	movw	r22, r18
     e26:	a8 01       	movw	r20, r16
     e28:	ce 01       	movw	r24, r28
     e2a:	41 96       	adiw	r24, 0x11	; 17
     e2c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	20 e8       	ldi	r18, 0x80	; 128
     e36:	3f e3       	ldi	r19, 0x3F	; 63
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	ba 01       	movw	r22, r20
     e3e:	ce 01       	movw	r24, r28
     e40:	49 96       	adiw	r24, 0x19	; 25
     e42:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	//return vec2ampl(multiply2x2(ampl2vec(2,theta,phi),s_matrix));
}
     e46:	a0 96       	adiw	r28, 0x20	; 32
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	08 95       	ret

00000e5c <_ZN5Gates1TEii>:
int * Gates::T(int theta,int phi){
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	a0 97       	sbiw	r28, 0x20	; 32
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
	Complex t_matrix[2][2]{{Complex(1,0),Complex(0,0)},
						   {Complex(0,0),Complex(1/sqrt(2),1/sqrt(2))}};
     e74:	00 e0       	ldi	r16, 0x00	; 0
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	98 01       	movw	r18, r16
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	60 e8       	ldi	r22, 0x80	; 128
     e80:	7f e3       	ldi	r23, 0x3F	; 63
     e82:	ce 01       	movw	r24, r28
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e8a:	00 e0       	ldi	r16, 0x00	; 0
     e8c:	10 e0       	ldi	r17, 0x00	; 0
     e8e:	98 01       	movw	r18, r16
     e90:	b9 01       	movw	r22, r18
     e92:	a8 01       	movw	r20, r16
     e94:	ce 01       	movw	r24, r28
     e96:	09 96       	adiw	r24, 0x09	; 9
     e98:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	98 01       	movw	r18, r16
     ea2:	b9 01       	movw	r22, r18
     ea4:	a8 01       	movw	r20, r16
     ea6:	ce 01       	movw	r24, r28
     ea8:	41 96       	adiw	r24, 0x11	; 17
     eaa:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     eae:	03 ef       	ldi	r16, 0xF3	; 243
     eb0:	14 e0       	ldi	r17, 0x04	; 4
     eb2:	25 e3       	ldi	r18, 0x35	; 53
     eb4:	3f e3       	ldi	r19, 0x3F	; 63
     eb6:	b9 01       	movw	r22, r18
     eb8:	a8 01       	movw	r20, r16
     eba:	ce 01       	movw	r24, r28
     ebc:	49 96       	adiw	r24, 0x19	; 25
     ebe:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	//return vec2ampl(multiply2x2(ampl2vec(2,theta,phi),t_matrix));
}
     ec2:	a0 96       	adiw	r28, 0x20	; 32
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret

00000ed8 <_ZN5Gates3CNOEiiii>:

int * Gates::CNO(int theta1, int phi1, int theta2,int phi2){
     ed8:	6f 92       	push	r6
     eda:	7f 92       	push	r7
     edc:	8f 92       	push	r8
     ede:	9f 92       	push	r9
     ee0:	af 92       	push	r10
     ee2:	bf 92       	push	r11
     ee4:	cf 92       	push	r12
     ee6:	df 92       	push	r13
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	c8 58       	subi	r28, 0x88	; 136
     efa:	d1 09       	sbc	r29, r1
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	7c 01       	movw	r14, r24
     f08:	3b 01       	movw	r6, r22
     f0a:	5a 01       	movw	r10, r20
     f0c:	49 01       	movw	r8, r18
     f0e:	68 01       	movw	r12, r16
	Complex cno_matrix[4][4]{{Complex(1,0),Complex(0,0),Complex(0,0),Complex(0,0)},
						     {Complex(0,0),Complex(1,0),Complex(0,0),Complex(0,0)},
							 {Complex(0,0),Complex(0,0),Complex(0,0),Complex(1,0)},
							 {Complex(0,0),Complex(0,0),Complex(1,0),Complex(0,0)}};
     f10:	00 e0       	ldi	r16, 0x00	; 0
     f12:	10 e0       	ldi	r17, 0x00	; 0
     f14:	98 01       	movw	r18, r16
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	60 e8       	ldi	r22, 0x80	; 128
     f1c:	7f e3       	ldi	r23, 0x3F	; 63
     f1e:	ce 01       	movw	r24, r28
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f26:	00 e0       	ldi	r16, 0x00	; 0
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	98 01       	movw	r18, r16
     f2c:	b9 01       	movw	r22, r18
     f2e:	a8 01       	movw	r20, r16
     f30:	ce 01       	movw	r24, r28
     f32:	09 96       	adiw	r24, 0x09	; 9
     f34:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f38:	00 e0       	ldi	r16, 0x00	; 0
     f3a:	10 e0       	ldi	r17, 0x00	; 0
     f3c:	98 01       	movw	r18, r16
     f3e:	b9 01       	movw	r22, r18
     f40:	a8 01       	movw	r20, r16
     f42:	ce 01       	movw	r24, r28
     f44:	41 96       	adiw	r24, 0x11	; 17
     f46:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f4a:	00 e0       	ldi	r16, 0x00	; 0
     f4c:	10 e0       	ldi	r17, 0x00	; 0
     f4e:	98 01       	movw	r18, r16
     f50:	b9 01       	movw	r22, r18
     f52:	a8 01       	movw	r20, r16
     f54:	ce 01       	movw	r24, r28
     f56:	49 96       	adiw	r24, 0x19	; 25
     f58:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f5c:	00 e0       	ldi	r16, 0x00	; 0
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	98 01       	movw	r18, r16
     f62:	b9 01       	movw	r22, r18
     f64:	a8 01       	movw	r20, r16
     f66:	ce 01       	movw	r24, r28
     f68:	81 96       	adiw	r24, 0x21	; 33
     f6a:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f6e:	00 e0       	ldi	r16, 0x00	; 0
     f70:	10 e0       	ldi	r17, 0x00	; 0
     f72:	98 01       	movw	r18, r16
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	60 e8       	ldi	r22, 0x80	; 128
     f7a:	7f e3       	ldi	r23, 0x3F	; 63
     f7c:	ce 01       	movw	r24, r28
     f7e:	89 96       	adiw	r24, 0x29	; 41
     f80:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f84:	00 e0       	ldi	r16, 0x00	; 0
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	98 01       	movw	r18, r16
     f8a:	b9 01       	movw	r22, r18
     f8c:	a8 01       	movw	r20, r16
     f8e:	ce 01       	movw	r24, r28
     f90:	c1 96       	adiw	r24, 0x31	; 49
     f92:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     f96:	00 e0       	ldi	r16, 0x00	; 0
     f98:	10 e0       	ldi	r17, 0x00	; 0
     f9a:	98 01       	movw	r18, r16
     f9c:	b9 01       	movw	r22, r18
     f9e:	a8 01       	movw	r20, r16
     fa0:	ce 01       	movw	r24, r28
     fa2:	c9 96       	adiw	r24, 0x39	; 57
     fa4:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fa8:	00 e0       	ldi	r16, 0x00	; 0
     faa:	10 e0       	ldi	r17, 0x00	; 0
     fac:	98 01       	movw	r18, r16
     fae:	b9 01       	movw	r22, r18
     fb0:	a8 01       	movw	r20, r16
     fb2:	ce 01       	movw	r24, r28
     fb4:	8f 5b       	subi	r24, 0xBF	; 191
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fbc:	00 e0       	ldi	r16, 0x00	; 0
     fbe:	10 e0       	ldi	r17, 0x00	; 0
     fc0:	98 01       	movw	r18, r16
     fc2:	b9 01       	movw	r22, r18
     fc4:	a8 01       	movw	r20, r16
     fc6:	ce 01       	movw	r24, r28
     fc8:	87 5b       	subi	r24, 0xB7	; 183
     fca:	9f 4f       	sbci	r25, 0xFF	; 255
     fcc:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fd0:	00 e0       	ldi	r16, 0x00	; 0
     fd2:	10 e0       	ldi	r17, 0x00	; 0
     fd4:	98 01       	movw	r18, r16
     fd6:	b9 01       	movw	r22, r18
     fd8:	a8 01       	movw	r20, r16
     fda:	ce 01       	movw	r24, r28
     fdc:	8f 5a       	subi	r24, 0xAF	; 175
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     fe4:	00 e0       	ldi	r16, 0x00	; 0
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	98 01       	movw	r18, r16
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	60 e8       	ldi	r22, 0x80	; 128
     ff0:	7f e3       	ldi	r23, 0x3F	; 63
     ff2:	ce 01       	movw	r24, r28
     ff4:	87 5a       	subi	r24, 0xA7	; 167
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
     ffc:	00 e0       	ldi	r16, 0x00	; 0
     ffe:	10 e0       	ldi	r17, 0x00	; 0
    1000:	98 01       	movw	r18, r16
    1002:	b9 01       	movw	r22, r18
    1004:	a8 01       	movw	r20, r16
    1006:	ce 01       	movw	r24, r28
    1008:	8f 59       	subi	r24, 0x9F	; 159
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1010:	00 e0       	ldi	r16, 0x00	; 0
    1012:	10 e0       	ldi	r17, 0x00	; 0
    1014:	98 01       	movw	r18, r16
    1016:	b9 01       	movw	r22, r18
    1018:	a8 01       	movw	r20, r16
    101a:	ce 01       	movw	r24, r28
    101c:	87 59       	subi	r24, 0x97	; 151
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    1024:	00 e0       	ldi	r16, 0x00	; 0
    1026:	10 e0       	ldi	r17, 0x00	; 0
    1028:	98 01       	movw	r18, r16
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	60 e8       	ldi	r22, 0x80	; 128
    1030:	7f e3       	ldi	r23, 0x3F	; 63
    1032:	ce 01       	movw	r24, r28
    1034:	8f 58       	subi	r24, 0x8F	; 143
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
    103c:	00 e0       	ldi	r16, 0x00	; 0
    103e:	10 e0       	ldi	r17, 0x00	; 0
    1040:	98 01       	movw	r18, r16
    1042:	b9 01       	movw	r22, r18
    1044:	a8 01       	movw	r20, r16
    1046:	ce 01       	movw	r24, r28
    1048:	87 58       	subi	r24, 0x87	; 135
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7ComplexC1Eff>
	int theta_list[2]={theta1,theta2}; int phi_list[2]={phi1,phi2};						
    1050:	cb 57       	subi	r28, 0x7B	; 123
    1052:	df 4f       	sbci	r29, 0xFF	; 255
    1054:	79 82       	std	Y+1, r7	; 0x01
    1056:	68 82       	st	Y, r6
    1058:	c5 58       	subi	r28, 0x85	; 133
    105a:	d0 40       	sbci	r29, 0x00	; 0
    105c:	c9 57       	subi	r28, 0x79	; 121
    105e:	df 4f       	sbci	r29, 0xFF	; 255
    1060:	99 82       	std	Y+1, r9	; 0x01
    1062:	88 82       	st	Y, r8
    1064:	c7 58       	subi	r28, 0x87	; 135
    1066:	d0 40       	sbci	r29, 0x00	; 0
    1068:	cf 57       	subi	r28, 0x7F	; 127
    106a:	df 4f       	sbci	r29, 0xFF	; 255
    106c:	b9 82       	std	Y+1, r11	; 0x01
    106e:	a8 82       	st	Y, r10
    1070:	c1 58       	subi	r28, 0x81	; 129
    1072:	d0 40       	sbci	r29, 0x00	; 0
    1074:	cd 57       	subi	r28, 0x7D	; 125
    1076:	df 4f       	sbci	r29, 0xFF	; 255
    1078:	d9 82       	std	Y+1, r13	; 0x01
    107a:	c8 82       	st	Y, r12
    107c:	c3 58       	subi	r28, 0x83	; 131
    107e:	d0 40       	sbci	r29, 0x00	; 0
	return vec2ampl(multiply4x4(ampl2vec(2,theta_list,phi_list),cno_matrix));
    1080:	9e 01       	movw	r18, r28
    1082:	2f 57       	subi	r18, 0x7F	; 127
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	ae 01       	movw	r20, r28
    1088:	4b 57       	subi	r20, 0x7B	; 123
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	62 e0       	ldi	r22, 0x02	; 2
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	c7 01       	movw	r24, r14
    1092:	0e 94 81 02 	call	0x502	; 0x502 <_ZN5Gates8ampl2vecEiPiS0_>
    1096:	ae 01       	movw	r20, r28
    1098:	4f 5f       	subi	r20, 0xFF	; 255
    109a:	5f 4f       	sbci	r21, 0xFF	; 255
    109c:	bc 01       	movw	r22, r24
    109e:	c7 01       	movw	r24, r14
    10a0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN5Gates11multiply4x4EP7ComplexPA4_S0_>
    10a4:	bc 01       	movw	r22, r24
    10a6:	c7 01       	movw	r24, r14
    10a8:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5Gates8vec2amplEP7Complex>
}
    10ac:	c8 57       	subi	r28, 0x78	; 120
    10ae:	df 4f       	sbci	r29, 0xFF	; 255
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	cf 90       	pop	r12
    10ca:	bf 90       	pop	r11
    10cc:	af 90       	pop	r10
    10ce:	9f 90       	pop	r9
    10d0:	8f 90       	pop	r8
    10d2:	7f 90       	pop	r7
    10d4:	6f 90       	pop	r6
    10d6:	08 95       	ret

000010d8 <_GLOBAL__sub_I__ZN5GatesC2Ev>:
#include "qepu.h"
#include <stdarg.h>
#include <stdlib.h>
Gates::Gates(){setup_seed();}

Serial s;
    10d8:	81 ec       	ldi	r24, 0xC1	; 193
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN6SerialC1Ev>
    10e0:	08 95       	ret

000010e2 <main>:
#include "qepu.h"
int main(void){
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <main+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <main+0x8>
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <main+0xa>
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	QEPU qepu; 
    10f0:	ce 01       	movw	r24, r28
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN4QEPUC1Ev>
	qepu.run();
    10f8:	ce 01       	movw	r24, r28
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN4QEPU3runEv>
    1100:	ff cf       	rjmp	.-2      	; 0x1100 <main+0x1e>

00001102 <_ZN4QEPUC1Ev>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	ec 01       	movw	r28, r24
    1108:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN6EEPromC1Ev>
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN6SerialC1Ev>
    1114:	ce 01       	movw	r24, r28
    1116:	05 96       	adiw	r24, 0x05	; 5
    1118:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN5GatesC1Ev>
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	8a bb       	out	0x1a, r24	; 26
    1120:	1c 82       	std	Y+4, r1	; 0x04
    1122:	1b 82       	std	Y+3, r1	; 0x03
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <_ZN4QEPU10setctrlpinEii>:
void QEPU::setdatapin(int pin,int state){
	PORTB&=~(1<<pin); // CLEAR PIN
	PORTB|=(state<<pin); // SET PIN
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
    112a:	7b b3       	in	r23, 0x1b	; 27
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	c9 01       	movw	r24, r18
    1132:	06 2e       	mov	r0, r22
    1134:	02 c0       	rjmp	.+4      	; 0x113a <_ZN4QEPU10setctrlpinEii+0x10>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <_ZN4QEPU10setctrlpinEii+0xc>
    113e:	80 95       	com	r24
    1140:	87 23       	and	r24, r23
    1142:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(state<<pin); // SET PIN
    1144:	8b b3       	in	r24, 0x1b	; 27
    1146:	02 c0       	rjmp	.+4      	; 0x114c <_ZN4QEPU10setctrlpinEii+0x22>
    1148:	44 0f       	add	r20, r20
    114a:	55 1f       	adc	r21, r21
    114c:	6a 95       	dec	r22
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <_ZN4QEPU10setctrlpinEii+0x1e>
    1150:	48 2b       	or	r20, r24
    1152:	4b bb       	out	0x1b, r20	; 27
    1154:	08 95       	ret

00001156 <_ZN4QEPU5writeEiii>:
#include "qepu.h"
QEPU::QEPU(){DDRA=0xFF;program_counter=0;}
void QEPU::write(int index,int dim,int deg){
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	ec 01       	movw	r28, r24
	DDRB=0xFF;
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	87 bb       	out	0x17, r24	; 23
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    1160:	28 bb       	out	0x18, r18	; 24
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    1162:	6b bb       	out	0x1b, r22	; 27
void QEPU::write(int index,int dim,int deg){
	DDRB=0xFF;
	
	setdata(deg);
	setctrl(index);
	setctrlpin(4,dim);
    1164:	64 e0       	ldi	r22, 0x04	; 4
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	ce 01       	movw	r24, r28
    116a:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,1); // CLOCK UP LOAD
    116e:	41 e0       	ldi	r20, 0x01	; 1
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	66 e0       	ldi	r22, 0x06	; 6
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	ce 01       	movw	r24, r28
    1178:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN4QEPU10setctrlpinEii>
	setctrlpin(6,0); // CLOCK DOWN LOAD
    117c:	40 e0       	ldi	r20, 0x00	; 0
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	66 e0       	ldi	r22, 0x06	; 6
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	ce 01       	movw	r24, r28
    1186:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN4QEPU10setctrlpinEii>
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
	return deg_read;
}
void QEPU::setdata(int bin){
	PORTB=bin;
    118a:	18 ba       	out	0x18, r1	; 24
	setctrl(index);
	setctrlpin(4,dim);
	setctrlpin(6,1); // CLOCK UP LOAD
	setctrlpin(6,0); // CLOCK DOWN LOAD
	setdata(0);
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <_ZN4QEPU4readEii>:
int QEPU::read(int index,int dim){
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	ec 01       	movw	r28, r24
    119c:	8a 01       	movw	r16, r20
	DDRB=0x00;
    119e:	17 ba       	out	0x17, r1	; 23
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    11a0:	6b bb       	out	0x1b, r22	; 27
}
int QEPU::read(int index,int dim){
	DDRB=0x00;
	setctrl(index);
	//OPEN ALL AND GATES
	setctrlpin(5,1); // CLOCK UP READ
    11a2:	41 e0       	ldi	r20, 0x01	; 1
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	65 e0       	ldi	r22, 0x05	; 5
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN4QEPU10setctrlpinEii>
	setctrlpin(4,dim);
    11ae:	a8 01       	movw	r20, r16
    11b0:	64 e0       	ldi	r22, 0x04	; 4
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	ce 01       	movw	r24, r28
    11b6:	0e 94 95 08 	call	0x112a	; 0x112a <_ZN4QEPU10setctrlpinEii>
	int deg_read=PINB; // READ INPUT
    11ba:	86 b3       	in	r24, 0x16	; 22
}
void QEPU::setdata(int bin){
	PORTB=bin;
}
void QEPU::setctrl(int bin){
	PORTA=bin;
    11bc:	1b ba       	out	0x1b, r1	; 27
	setctrlpin(5,1); // CLOCK UP READ
	setctrlpin(4,dim);
	int deg_read=PINB; // READ INPUT
	//CLOSE ALL AND GATES
	setctrl(0); // CLOSE ALL CONTROLS
	DDRB=0xFF;
    11be:	9f ef       	ldi	r25, 0xFF	; 255
    11c0:	97 bb       	out	0x17, r25	; 23
	return deg_read;
}
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	08 95       	ret

000011ce <_ZN4QEPU7dumpmemEv>:
}
void QEPU::setctrlpin(int pin,int state){
	PORTA&=~(1<<pin); // CLEAR PIN
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
    11ce:	6f 92       	push	r6
    11d0:	7f 92       	push	r7
    11d2:	8f 92       	push	r8
    11d4:	9f 92       	push	r9
    11d6:	af 92       	push	r10
    11d8:	bf 92       	push	r11
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	6c 01       	movw	r12, r24
	serial.writestrln("");
    11ec:	8c 01       	movw	r16, r24
    11ee:	0f 5f       	subi	r16, 0xFF	; 255
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	6f ea       	ldi	r22, 0xAF	; 175
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	c8 01       	movw	r24, r16
    11f8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6Serial10writestrlnEPc>
	serial.writestrln("** QUANTUM MEMORY DUMP **");
    11fc:	66 e8       	ldi	r22, 0x86	; 134
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	c8 01       	movw	r24, r16
    1202:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6Serial10writestrlnEPc>
	for(int i=0;i<QUBIT_COUNT;i++){
    1206:	c0 e0       	ldi	r28, 0x00	; 0
    1208:	d0 e0       	ldi	r29, 0x00	; 0
		char * thedim=(char*)malloc(sizeof(char)*3); sprintf(thedim,"%d",read(i,THE));
    120a:	0f 2e       	mov	r0, r31
    120c:	f0 ea       	ldi	r31, 0xA0	; 160
    120e:	ef 2e       	mov	r14, r31
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	ff 2e       	mov	r15, r31
    1214:	f0 2d       	mov	r31, r0
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <malloc>
    121e:	88 2e       	mov	r8, r24
    1220:	99 2e       	mov	r9, r25
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	be 01       	movw	r22, r28
    1228:	c6 01       	movw	r24, r12
    122a:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    122e:	9f 93       	push	r25
    1230:	8f 93       	push	r24
    1232:	ff 92       	push	r15
    1234:	ef 92       	push	r14
    1236:	9f 92       	push	r9
    1238:	8f 92       	push	r8
    123a:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
		char * phidim=(char*)malloc(sizeof(char)*3); sprintf(phidim,"%d",read(i,PHI));
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 50 10 	call	0x20a0	; 0x20a0 <malloc>
    1246:	a8 2e       	mov	r10, r24
    1248:	b9 2e       	mov	r11, r25
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	be 01       	movw	r22, r28
    1250:	c6 01       	movw	r24, r12
    1252:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    1256:	9f 93       	push	r25
    1258:	8f 93       	push	r24
    125a:	ff 92       	push	r15
    125c:	ef 92       	push	r14
    125e:	bf 92       	push	r11
    1260:	af 92       	push	r10
    1262:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
		char * qindex=(char*)malloc(sizeof(char));	 sprintf(qindex,"%d",i);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <malloc>
    126e:	68 2e       	mov	r6, r24
    1270:	79 2e       	mov	r7, r25
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	ff 92       	push	r15
    1278:	ef 92       	push	r14
    127a:	7f 92       	push	r7
    127c:	6f 92       	push	r6
    127e:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
    1282:	63 ea       	ldi	r22, 0xA3	; 163
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	c8 01       	movw	r24, r16
    1288:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
    128c:	66 2d       	mov	r22, r6
    128e:	77 2d       	mov	r23, r7
    1290:	c8 01       	movw	r24, r16
    1292:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
    1296:	65 ea       	ldi	r22, 0xA5	; 165
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	c8 01       	movw	r24, r16
    129c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
		serial.writestr(thedim);
    12a0:	68 2d       	mov	r22, r8
    12a2:	79 2d       	mov	r23, r9
    12a4:	c8 01       	movw	r24, r16
    12a6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
		serial.writestr(" , Phi - ");
    12aa:	60 eb       	ldi	r22, 0xB0	; 176
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	c8 01       	movw	r24, r16
    12b0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
		serial.writestrln(phidim);
    12b4:	6a 2d       	mov	r22, r10
    12b6:	7b 2d       	mov	r23, r11
    12b8:	c8 01       	movw	r24, r16
    12ba:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN6Serial10writestrlnEPc>
	PORTA|=(state<<pin); // SET PIN
}
void QEPU::dumpmem(){
	serial.writestrln("");
	serial.writestrln("** QUANTUM MEMORY DUMP **");
	for(int i=0;i<QUBIT_COUNT;i++){
    12be:	21 96       	adiw	r28, 0x01	; 1
    12c0:	8d b7       	in	r24, 0x3d	; 61
    12c2:	9e b7       	in	r25, 0x3e	; 62
    12c4:	42 96       	adiw	r24, 0x12	; 18
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	9e bf       	out	0x3e, r25	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	8d bf       	out	0x3d, r24	; 61
    12d0:	c4 30       	cpi	r28, 0x04	; 4
    12d2:	d1 05       	cpc	r29, r1
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <_ZN4QEPU7dumpmemEv+0x10a>
    12d6:	9f cf       	rjmp	.-194    	; 0x1216 <_ZN4QEPU7dumpmemEv+0x48>
		serial.writestr("Q"); serial.writestr(qindex); serial.writestr(": Theta - ");
		serial.writestr(thedim);
		serial.writestr(" , Phi - ");
		serial.writestrln(phidim);
	}
}
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	7f 90       	pop	r7
    12f2:	6f 90       	pop	r6
    12f4:	08 95       	ret

000012f6 <_ZN4QEPU5Utils10str2intarrEPc>:
char* QEPU::Utils::char2str(char c){
	char*str=(char*)malloc(sizeof(char));
	sprintf(str,"%d",c);
	return str;
}
int*  QEPU::Utils::str2intarr(char* c){
    12f6:	cf 92       	push	r12
    12f8:	df 92       	push	r13
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	d6 2f       	mov	r29, r22
    1308:	c7 2f       	mov	r28, r23
    130a:	e6 2f       	mov	r30, r22
    130c:	f7 2f       	mov	r31, r23
	int c_length=0;
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;true;i++) if(c[i]==0xFF && c[i-1]==0xFF && c[i-2]==0xFF && c[i-3]==0xFF && c[i-4]==0xFF) break; else c_length++; c_length-=4;
    1312:	21 91       	ld	r18, Z+
    1314:	2f 3f       	cpi	r18, 0xFF	; 255
    1316:	89 f4       	brne	.+34     	; 0x133a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1318:	df 01       	movw	r26, r30
    131a:	12 97       	sbiw	r26, 0x02	; 2
    131c:	4c 91       	ld	r20, X
    131e:	4f 3f       	cpi	r20, 0xFF	; 255
    1320:	61 f4       	brne	.+24     	; 0x133a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1322:	11 97       	sbiw	r26, 0x01	; 1
    1324:	4c 91       	ld	r20, X
    1326:	4f 3f       	cpi	r20, 0xFF	; 255
    1328:	41 f4       	brne	.+16     	; 0x133a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    132a:	11 97       	sbiw	r26, 0x01	; 1
    132c:	4c 91       	ld	r20, X
    132e:	4f 3f       	cpi	r20, 0xFF	; 255
    1330:	21 f4       	brne	.+8      	; 0x133a <_ZN4QEPU5Utils10str2intarrEPc+0x44>
    1332:	11 97       	sbiw	r26, 0x01	; 1
    1334:	2c 91       	ld	r18, X
    1336:	2f 3f       	cpi	r18, 0xFF	; 255
    1338:	11 f0       	breq	.+4      	; 0x133e <_ZN4QEPU5Utils10str2intarrEPc+0x48>
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	ea cf       	rjmp	.-44     	; 0x1312 <_ZN4QEPU5Utils10str2intarrEPc+0x1c>
    133e:	8c 01       	movw	r16, r24
    1340:	04 50       	subi	r16, 0x04	; 4
    1342:	11 09       	sbc	r17, r1
	
	int *intarr=(int*)malloc(sizeof(int)*(c_length+5));
    1344:	6c 01       	movw	r12, r24
    1346:	2f ef       	ldi	r18, 0xFF	; 255
    1348:	c2 1a       	sub	r12, r18
    134a:	d2 0a       	sbc	r13, r18
    134c:	76 01       	movw	r14, r12
    134e:	ee 0c       	add	r14, r14
    1350:	ff 1c       	adc	r15, r15
    1352:	c7 01       	movw	r24, r14
    1354:	0e 94 50 10 	call	0x20a0	; 0x20a0 <malloc>
	for(int i=0;i<c_length;i++) intarr[i]=(int)c[i];
    1358:	10 16       	cp	r1, r16
    135a:	11 06       	cpc	r1, r17
    135c:	74 f4       	brge	.+28     	; 0x137a <_ZN4QEPU5Utils10str2intarrEPc+0x84>
    135e:	dc 01       	movw	r26, r24
    1360:	ed 2f       	mov	r30, r29
    1362:	fc 2f       	mov	r31, r28
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	41 91       	ld	r20, Z+
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	4d 93       	st	X+, r20
    136e:	5d 93       	st	X+, r21
    1370:	2f 5f       	subi	r18, 0xFF	; 255
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	20 17       	cp	r18, r16
    1376:	31 07       	cpc	r19, r17
    1378:	bc f3       	brlt	.-18     	; 0x1368 <_ZN4QEPU5Utils10str2intarrEPc+0x72>
	for(int i=c_length;i<c_length+5;i++) intarr[i]=0xFF;
    137a:	0c 15       	cp	r16, r12
    137c:	1d 05       	cpc	r17, r13
    137e:	7c f4       	brge	.+30     	; 0x139e <_ZN4QEPU5Utils10str2intarrEPc+0xa8>
    1380:	f7 01       	movw	r30, r14
    1382:	3a 97       	sbiw	r30, 0x0a	; 10
    1384:	e8 0f       	add	r30, r24
    1386:	f9 1f       	adc	r31, r25
    1388:	25 e0       	ldi	r18, 0x05	; 5
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	4f ef       	ldi	r20, 0xFF	; 255
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	41 93       	st	Z+, r20
    1392:	51 93       	st	Z+, r21
    1394:	21 50       	subi	r18, 0x01	; 1
    1396:	31 09       	sbc	r19, r1
    1398:	21 15       	cp	r18, r1
    139a:	31 05       	cpc	r19, r1
    139c:	c9 f7       	brne	.-14     	; 0x1390 <_ZN4QEPU5Utils10str2intarrEPc+0x9a>
	return intarr;
}
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	08 95       	ret

000013b0 <_ZN4QEPU5Utils7int2strEi>:
		dec/=10;
		++counter;
	}
	return counter;
}
char* QEPU::Utils::int2str(int dec){
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	c4 56       	subi	r28, 0x64	; 100
    13be:	d1 09       	sbc	r29, r1
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
	//char str[countdigits(dec)+1];
	char str[100];
	sprintf(str,"%d",dec);
    13ca:	7f 93       	push	r23
    13cc:	6f 93       	push	r22
    13ce:	80 ea       	ldi	r24, 0xA0	; 160
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9f 93       	push	r25
    13d4:	8f 93       	push	r24
    13d6:	8e 01       	movw	r16, r28
    13d8:	0f 5f       	subi	r16, 0xFF	; 255
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	1f 93       	push	r17
    13de:	0f 93       	push	r16
    13e0:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
	return str;
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
}
    13f0:	c8 01       	movw	r24, r16
    13f2:	cc 59       	subi	r28, 0x9C	; 156
    13f4:	df 4f       	sbci	r29, 0xFF	; 255
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	08 95       	ret

0000140a <_ZN4QEPU5Utils5delayEi>:
	sprintf(str2,"%d",n2);
	strcat(str1,str2);
	return atoi(str1);
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
    140a:	61 15       	cp	r22, r1
    140c:	71 05       	cpc	r23, r1
    140e:	59 f0       	breq	.+22     	; 0x1426 <_ZN4QEPU5Utils5delayEi+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1410:	8f e9       	ldi	r24, 0x9F	; 159
    1412:	9f e0       	ldi	r25, 0x0F	; 15
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <_ZN4QEPU5Utils5delayEi+0xa>
    1418:	00 c0       	rjmp	.+0      	; 0x141a <_ZN4QEPU5Utils5delayEi+0x10>
    141a:	00 00       	nop
    141c:	61 50       	subi	r22, 0x01	; 1
    141e:	71 09       	sbc	r23, r1
    1420:	61 15       	cp	r22, r1
    1422:	71 05       	cpc	r23, r1
    1424:	a9 f7       	brne	.-22     	; 0x1410 <_ZN4QEPU5Utils5delayEi+0x6>
}
    1426:	08 95       	ret

00001428 <_ZN4QEPU7executeEill>:
	}
	dumpmem();
	#pragma endregion
}

void QEPU::execute(int func,int32_t op1,int32_t op2){
    1428:	2f 92       	push	r2
    142a:	3f 92       	push	r3
    142c:	4f 92       	push	r4
    142e:	5f 92       	push	r5
    1430:	6f 92       	push	r6
    1432:	7f 92       	push	r7
    1434:	8f 92       	push	r8
    1436:	9f 92       	push	r9
    1438:	af 92       	push	r10
    143a:	bf 92       	push	r11
    143c:	cf 92       	push	r12
    143e:	df 92       	push	r13
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	ec 01       	movw	r28, r24
    144e:	1b 01       	movw	r2, r22
    1450:	29 01       	movw	r4, r18
    1452:	3a 01       	movw	r6, r20
    1454:	47 01       	movw	r8, r14
    1456:	58 01       	movw	r10, r16
	int * newthephi=(int*)malloc(sizeof(int)*2);
    1458:	84 e0       	ldi	r24, 0x04	; 4
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <malloc>
    1460:	6c 01       	movw	r12, r24
	
	//TODO: MAKE A SWITCH ON THE FUNCTION
	switch(func){
    1462:	f1 01       	movw	r30, r2
    1464:	31 97       	sbiw	r30, 0x01	; 1
    1466:	e6 31       	cpi	r30, 0x16	; 22
    1468:	f1 05       	cpc	r31, r1
    146a:	08 f0       	brcs	.+2      	; 0x146e <_ZN4QEPU7executeEill+0x46>
    146c:	47 c1       	rjmp	.+654    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
    146e:	e6 5d       	subi	r30, 0xD6	; 214
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__tablejump2__>
		//DATA MOVEMENT AND PROGRAM CONTROL/FLUX/IO FUNCTIONS:
		case 0x01: /*MOV*/
			write(op1,THE,read(op2,THE));
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	b7 01       	movw	r22, r14
    147c:	ce 01       	movw	r24, r28
    147e:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    1482:	9c 01       	movw	r18, r24
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	b2 01       	movw	r22, r4
    148a:	ce 01       	movw	r24, r28
    148c:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
			write(op1,PHI,read(op2,PHI));
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	b7 01       	movw	r22, r14
    1496:	ce 01       	movw	r24, r28
    1498:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    149c:	9c 01       	movw	r18, r24
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	b2 01       	movw	r22, r4
    14a4:	ce 01       	movw	r24, r28
    14a6:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
		break;
    14aa:	28 c1       	rjmp	.+592    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		case 0x02: /*JMP(jump)*/ 
			program_counter=op1-1; 
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	48 1a       	sub	r4, r24
    14b0:	51 08       	sbc	r5, r1
    14b2:	5c 82       	std	Y+4, r5	; 0x04
    14b4:	4b 82       	std	Y+3, r4	; 0x03
		break;
    14b6:	22 c1       	rjmp	.+580    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		case 0x06: /*POP(pop)*/ break;
		case 0x07: /*PSH(push)*/ break;
		case 0x08: /*RET(return)*/ break;
		case 0x09: /*END(end)*/ break;
		case 0x0A: /*DLY(delay)*/ 
			utils.delay(op1);	break;
    14b8:	b2 01       	movw	r22, r4
    14ba:	ce 01       	movw	r24, r28
    14bc:	02 96       	adiw	r24, 0x02	; 2
    14be:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN4QEPU5Utils5delayEi>
    14c2:	1c c1       	rjmp	.+568    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		case 0x0B: /*NOP(nop)*/ break;
		case 0x0C: /*LOD(load)*/ break;
		case 0x0D: /*STR(store)*/ break;
		case 0x0E: /*CMT(constantmovtheta)*/ 
			write(op1,THE,op2);
    14c4:	97 01       	movw	r18, r14
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	b2 01       	movw	r22, r4
    14cc:	ce 01       	movw	r24, r28
    14ce:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
		break;
    14d2:	14 c1       	rjmp	.+552    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		case 0x0F: /*CMP(constantmovphi)*/
			write(op1,PHI,op2);
    14d4:	97 01       	movw	r18, r14
    14d6:	41 e0       	ldi	r20, 0x01	; 1
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	b2 01       	movw	r22, r4
    14dc:	ce 01       	movw	r24, r28
    14de:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
		break;
    14e2:	0c c1       	rjmp	.+536    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		//QUANTUM FUNCTIONS:
		//1 QUBIT GATES -
		case 0x10: // X GATE
			newthephi=gates.X(read(op1,THE),read(op1,PHI));
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	b2 01       	movw	r22, r4
    14ea:	ce 01       	movw	r24, r28
    14ec:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    14f0:	8c 01       	movw	r16, r24
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	b2 01       	movw	r22, r4
    14f8:	ce 01       	movw	r24, r28
    14fa:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    14fe:	a8 01       	movw	r20, r16
    1500:	bc 01       	movw	r22, r24
    1502:	ce 01       	movw	r24, r28
    1504:	05 96       	adiw	r24, 0x05	; 5
    1506:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN5Gates1XEii>
    150a:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    150c:	fc 01       	movw	r30, r24
    150e:	20 81       	ld	r18, Z
    1510:	31 81       	ldd	r19, Z+1	; 0x01
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	b2 01       	movw	r22, r4
    1518:	ce 01       	movw	r24, r28
    151a:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
    151e:	f6 01       	movw	r30, r12
    1520:	22 81       	ldd	r18, Z+2	; 0x02
    1522:	33 81       	ldd	r19, Z+3	; 0x03
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	b2 01       	movw	r22, r4
    152a:	ce 01       	movw	r24, r28
    152c:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
		break;
    1530:	e5 c0       	rjmp	.+458    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		case 0x11: // Y GATE
			newthephi=gates.Y(read(op1,THE),read(op1,PHI));
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	b2 01       	movw	r22, r4
    1538:	ce 01       	movw	r24, r28
    153a:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    153e:	8c 01       	movw	r16, r24
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	b2 01       	movw	r22, r4
    1546:	ce 01       	movw	r24, r28
    1548:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    154c:	a8 01       	movw	r20, r16
    154e:	bc 01       	movw	r22, r24
    1550:	ce 01       	movw	r24, r28
    1552:	05 96       	adiw	r24, 0x05	; 5
    1554:	0e 94 2e 06 	call	0xc5c	; 0xc5c <_ZN5Gates1YEii>
    1558:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    155a:	fc 01       	movw	r30, r24
    155c:	20 81       	ld	r18, Z
    155e:	31 81       	ldd	r19, Z+1	; 0x01
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	b2 01       	movw	r22, r4
    1566:	ce 01       	movw	r24, r28
    1568:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
    156c:	f6 01       	movw	r30, r12
    156e:	22 81       	ldd	r18, Z+2	; 0x02
    1570:	33 81       	ldd	r19, Z+3	; 0x03
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	b2 01       	movw	r22, r4
    1578:	ce 01       	movw	r24, r28
    157a:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
		break;
    157e:	be c0       	rjmp	.+380    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		case 0x12: // Z GATE
			newthephi=gates.Z(read(op1,THE),read(op1,PHI));
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	b2 01       	movw	r22, r4
    1586:	ce 01       	movw	r24, r28
    1588:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    158c:	8c 01       	movw	r16, r24
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	b2 01       	movw	r22, r4
    1594:	ce 01       	movw	r24, r28
    1596:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    159a:	a8 01       	movw	r20, r16
    159c:	bc 01       	movw	r22, r24
    159e:	ce 01       	movw	r24, r28
    15a0:	05 96       	adiw	r24, 0x05	; 5
    15a2:	0e 94 6d 06 	call	0xcda	; 0xcda <_ZN5Gates1ZEii>
    15a6:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 81       	ld	r18, Z
    15ac:	31 81       	ldd	r19, Z+1	; 0x01
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	b2 01       	movw	r22, r4
    15b4:	ce 01       	movw	r24, r28
    15b6:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
    15ba:	f6 01       	movw	r30, r12
    15bc:	22 81       	ldd	r18, Z+2	; 0x02
    15be:	33 81       	ldd	r19, Z+3	; 0x03
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	b2 01       	movw	r22, r4
    15c6:	ce 01       	movw	r24, r28
    15c8:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
		break;
    15cc:	97 c0       	rjmp	.+302    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		case 0x13: // H GATE
			newthephi=gates.H(read(op1,THE),read(op1,PHI));
    15ce:	41 e0       	ldi	r20, 0x01	; 1
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	b2 01       	movw	r22, r4
    15d4:	ce 01       	movw	r24, r28
    15d6:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    15da:	8c 01       	movw	r16, r24
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	b2 01       	movw	r22, r4
    15e2:	ce 01       	movw	r24, r28
    15e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    15e8:	a8 01       	movw	r20, r16
    15ea:	bc 01       	movw	r22, r24
    15ec:	ce 01       	movw	r24, r28
    15ee:	05 96       	adiw	r24, 0x05	; 5
    15f0:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Gates1HEii>
    15f4:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    15f6:	fc 01       	movw	r30, r24
    15f8:	20 81       	ld	r18, Z
    15fa:	31 81       	ldd	r19, Z+1	; 0x01
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	b2 01       	movw	r22, r4
    1602:	ce 01       	movw	r24, r28
    1604:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
    1608:	f6 01       	movw	r30, r12
    160a:	22 81       	ldd	r18, Z+2	; 0x02
    160c:	33 81       	ldd	r19, Z+3	; 0x03
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	b2 01       	movw	r22, r4
    1614:	ce 01       	movw	r24, r28
    1616:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
		break;
    161a:	70 c0       	rjmp	.+224    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		case 0x14: // S GATE
			newthephi=gates.S(read(op1,THE),read(op1,PHI));
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	b2 01       	movw	r22, r4
    1622:	ce 01       	movw	r24, r28
    1624:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    1628:	8c 01       	movw	r16, r24
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	b2 01       	movw	r22, r4
    1630:	ce 01       	movw	r24, r28
    1632:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    1636:	a8 01       	movw	r20, r16
    1638:	bc 01       	movw	r22, r24
    163a:	ce 01       	movw	r24, r28
    163c:	05 96       	adiw	r24, 0x05	; 5
    163e:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN5Gates1SEii>
    1642:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1644:	fc 01       	movw	r30, r24
    1646:	20 81       	ld	r18, Z
    1648:	31 81       	ldd	r19, Z+1	; 0x01
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	b2 01       	movw	r22, r4
    1650:	ce 01       	movw	r24, r28
    1652:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
    1656:	f6 01       	movw	r30, r12
    1658:	22 81       	ldd	r18, Z+2	; 0x02
    165a:	33 81       	ldd	r19, Z+3	; 0x03
    165c:	41 e0       	ldi	r20, 0x01	; 1
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	b2 01       	movw	r22, r4
    1662:	ce 01       	movw	r24, r28
    1664:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
		break;
    1668:	49 c0       	rjmp	.+146    	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		case 0x15: // T GATE
			newthephi=gates.T(read(op1,THE),read(op1,PHI));
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	b2 01       	movw	r22, r4
    1670:	ce 01       	movw	r24, r28
    1672:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    1676:	8c 01       	movw	r16, r24
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	b2 01       	movw	r22, r4
    167e:	ce 01       	movw	r24, r28
    1680:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    1684:	a8 01       	movw	r20, r16
    1686:	bc 01       	movw	r22, r24
    1688:	ce 01       	movw	r24, r28
    168a:	05 96       	adiw	r24, 0x05	; 5
    168c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZN5Gates1TEii>
    1690:	6c 01       	movw	r12, r24
			write(op1,THE,newthephi[0]);write(op1,PHI,newthephi[1]);
    1692:	fc 01       	movw	r30, r24
    1694:	20 81       	ld	r18, Z
    1696:	31 81       	ldd	r19, Z+1	; 0x01
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	b2 01       	movw	r22, r4
    169e:	ce 01       	movw	r24, r28
    16a0:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
    16a4:	f6 01       	movw	r30, r12
    16a6:	22 81       	ldd	r18, Z+2	; 0x02
    16a8:	33 81       	ldd	r19, Z+3	; 0x03
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	b2 01       	movw	r22, r4
    16b0:	ce 01       	movw	r24, r28
    16b2:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN4QEPU5writeEiii>
		break;
    16b6:	22 c0       	rjmp	.+68     	; 0x16fc <_ZN4QEPU7executeEill+0x2d4>
		//2 QUBIT GATES -
		case 0x16: 
			gates.CNO(read(op1,THE),read(op1,PHI),read(op2,THE),read(op2,PHI));
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	b7 01       	movw	r22, r14
    16be:	ce 01       	movw	r24, r28
    16c0:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    16c4:	8c 01       	movw	r16, r24
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	b4 01       	movw	r22, r8
    16cc:	ce 01       	movw	r24, r28
    16ce:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    16d2:	5c 01       	movw	r10, r24
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	b2 01       	movw	r22, r4
    16da:	ce 01       	movw	r24, r28
    16dc:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    16e0:	7c 01       	movw	r14, r24
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	b2 01       	movw	r22, r4
    16e8:	ce 01       	movw	r24, r28
    16ea:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN4QEPU4readEii>
    16ee:	95 01       	movw	r18, r10
    16f0:	a7 01       	movw	r20, r14
    16f2:	bc 01       	movw	r22, r24
    16f4:	ce 01       	movw	r24, r28
    16f6:	05 96       	adiw	r24, 0x05	; 5
    16f8:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN5Gates3CNOEiiii>
	/*serial.writestr("Function: "); serial.writestr(utils.int2str(func));
	serial.writestr(" , OP1: ");   serial.writestr(utils.int2str(op1));
	serial.writestr(" , OP2: ");   serial.writestr(utils.int2str(op2));
	serial.writestr(" PC: ");	   serial.writestrln(utils.int2str(program_counter));
	serial.writestrln("");*/
	free(newthephi);	
    16fc:	c6 01       	movw	r24, r12
    16fe:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <free>
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	bf 90       	pop	r11
    1714:	af 90       	pop	r10
    1716:	9f 90       	pop	r9
    1718:	8f 90       	pop	r8
    171a:	7f 90       	pop	r7
    171c:	6f 90       	pop	r6
    171e:	5f 90       	pop	r5
    1720:	4f 90       	pop	r4
    1722:	3f 90       	pop	r3
    1724:	2f 90       	pop	r2
    1726:	08 95       	ret

00001728 <_ZN4QEPU3runEv>:
}
int QEPU::Utils::delay(int ms){
	while(ms--) _delay_ms(1);
}

void QEPU::run(){
    1728:	2f 92       	push	r2
    172a:	3f 92       	push	r3
    172c:	4f 92       	push	r4
    172e:	5f 92       	push	r5
    1730:	6f 92       	push	r6
    1732:	7f 92       	push	r7
    1734:	8f 92       	push	r8
    1736:	9f 92       	push	r9
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	c0 57       	subi	r28, 0x70	; 112
    1752:	d1 09       	sbc	r29, r1
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	3c 01       	movw	r6, r24
	/*EEPROM FETCH*/
	#pragma region EEPROM_FETCH
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
    1760:	0e 94 22 02 	call	0x444	; 0x444 <_ZN6EEProm7readallEv>
    1764:	bc 01       	movw	r22, r24
    1766:	c3 01       	movw	r24, r6
    1768:	02 96       	adiw	r24, 0x02	; 2
    176a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <_ZN4QEPU5Utils10str2intarrEPc>
    176e:	fc 01       	movw	r30, r24
    1770:	38 97       	sbiw	r30, 0x08	; 8
	int eeprom_mem_length=0;
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
    1776:	40 85       	ldd	r20, Z+8	; 0x08
    1778:	51 85       	ldd	r21, Z+9	; 0x09
    177a:	4f 3f       	cpi	r20, 0xFF	; 255
    177c:	51 05       	cpc	r21, r1
    177e:	a1 f4       	brne	.+40     	; 0x17a8 <_ZN4QEPU3runEv+0x80>
    1780:	46 81       	ldd	r20, Z+6	; 0x06
    1782:	57 81       	ldd	r21, Z+7	; 0x07
    1784:	4f 3f       	cpi	r20, 0xFF	; 255
    1786:	51 05       	cpc	r21, r1
    1788:	79 f4       	brne	.+30     	; 0x17a8 <_ZN4QEPU3runEv+0x80>
    178a:	44 81       	ldd	r20, Z+4	; 0x04
    178c:	55 81       	ldd	r21, Z+5	; 0x05
    178e:	4f 3f       	cpi	r20, 0xFF	; 255
    1790:	51 05       	cpc	r21, r1
    1792:	51 f4       	brne	.+20     	; 0x17a8 <_ZN4QEPU3runEv+0x80>
    1794:	42 81       	ldd	r20, Z+2	; 0x02
    1796:	53 81       	ldd	r21, Z+3	; 0x03
    1798:	4f 3f       	cpi	r20, 0xFF	; 255
    179a:	51 05       	cpc	r21, r1
    179c:	29 f4       	brne	.+10     	; 0x17a8 <_ZN4QEPU3runEv+0x80>
    179e:	40 81       	ld	r20, Z
    17a0:	51 81       	ldd	r21, Z+1	; 0x01
    17a2:	4f 3f       	cpi	r20, 0xFF	; 255
    17a4:	51 05       	cpc	r21, r1
    17a6:	21 f0       	breq	.+8      	; 0x17b0 <_ZN4QEPU3runEv+0x88>
    17a8:	2f 5f       	subi	r18, 0xFF	; 255
    17aa:	3f 4f       	sbci	r19, 0xFF	; 255
    17ac:	32 96       	adiw	r30, 0x02	; 2
    17ae:	e3 cf       	rjmp	.-58     	; 0x1776 <_ZN4QEPU3runEv+0x4e>
    17b0:	a9 01       	movw	r20, r18
    17b2:	44 50       	subi	r20, 0x04	; 4
    17b4:	51 09       	sbc	r21, r1
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    17b6:	14 16       	cp	r1, r20
    17b8:	15 06       	cpc	r1, r21
    17ba:	0c f0       	brlt	.+2      	; 0x17be <_ZN4QEPU3runEv+0x96>
    17bc:	07 c1       	rjmp	.+526    	; 0x19cc <_ZN4QEPU3runEv+0x2a4>
    17be:	fc 01       	movw	r30, r24
    17c0:	25 50       	subi	r18, 0x05	; 5
    17c2:	31 09       	sbc	r19, r1
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	50 e0       	ldi	r21, 0x00	; 0
	int * eeprom_mem=utils.str2intarr(eeprom.readall()); //TODO: READ ALL EEPROM
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	41 2c       	mov	r4, r1
    17ce:	51 2c       	mov	r5, r1
	for(int i=0;i<eeprom_mem_length;i++){
		if(eeprom_splittedx>=INSTR_WIDTH) {line++;eeprom_splittedx=0;} 
    17d0:	c1 2c       	mov	r12, r1
    17d2:	d1 2c       	mov	r13, r1
    17d4:	0c c0       	rjmp	.+24     	; 0x17ee <_ZN4QEPU3runEv+0xc6>
    17d6:	69 30       	cpi	r22, 0x09	; 9
    17d8:	71 05       	cpc	r23, r1
    17da:	34 f0       	brlt	.+12     	; 0x17e8 <_ZN4QEPU3runEv+0xc0>
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	48 1a       	sub	r4, r24
    17e0:	58 0a       	sbc	r5, r24
    17e2:	8c 2d       	mov	r24, r12
    17e4:	9d 2d       	mov	r25, r13
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <_ZN4QEPU3runEv+0xc2>
		eeprom_splitted[line][eeprom_splittedx++]=eeprom_mem[i];
    17e8:	cb 01       	movw	r24, r22
    17ea:	4f 5f       	subi	r20, 0xFF	; 255
    17ec:	5f 4f       	sbci	r21, 0xFF	; 255
    17ee:	bc 01       	movw	r22, r24
    17f0:	6f 5f       	subi	r22, 0xFF	; 255
    17f2:	7f 4f       	sbci	r23, 0xFF	; 255
    17f4:	01 91       	ld	r16, Z+
    17f6:	11 91       	ld	r17, Z+
    17f8:	d2 01       	movw	r26, r4
    17fa:	aa 0f       	add	r26, r26
    17fc:	bb 1f       	adc	r27, r27
    17fe:	aa 0f       	add	r26, r26
    1800:	bb 1f       	adc	r27, r27
    1802:	aa 0f       	add	r26, r26
    1804:	bb 1f       	adc	r27, r27
    1806:	a4 0d       	add	r26, r4
    1808:	b5 1d       	adc	r27, r5
    180a:	8a 0f       	add	r24, r26
    180c:	9b 1f       	adc	r25, r27
    180e:	dc 01       	movw	r26, r24
    1810:	aa 0f       	add	r26, r26
    1812:	bb 1f       	adc	r27, r27
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	8c 0f       	add	r24, r28
    181a:	9d 1f       	adc	r25, r29
    181c:	a8 0f       	add	r26, r24
    181e:	b9 1f       	adc	r27, r25
    1820:	0d 93       	st	X+, r16
    1822:	1c 93       	st	X, r17
	int eeprom_mem_length=0;
	for(int i=0;true;i++) if(eeprom_mem[i]==0xFF && eeprom_mem[i-1]==0xFF && eeprom_mem[i-2]==0xFF && eeprom_mem[i-3]==0xFF && eeprom_mem[i-4]==0xFF) break; else eeprom_mem_length++; eeprom_mem_length-=4;
	//TODO: PUT ALL LINES FROM EEPROM INTO AN ARRAY OF INSTRUCTIONS
	int eeprom_splitted[INSTR_HEIGHT][INSTR_WIDTH];
	int line=0,eeprom_splittedx=0;
	for(int i=0;i<eeprom_mem_length;i++){
    1824:	42 17       	cp	r20, r18
    1826:	53 07       	cpc	r21, r19
    1828:	b1 f6       	brne	.-84     	; 0x17d6 <_ZN4QEPU3runEv+0xae>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    182a:	f3 01       	movw	r30, r6
    182c:	14 82       	std	Z+4, r1	; 0x04
    182e:	13 82       	std	Z+3, r1	; 0x03
    1830:	14 14       	cp	r1, r4
    1832:	15 04       	cpc	r1, r5
    1834:	0c f0       	brlt	.+2      	; 0x1838 <_ZN4QEPU3runEv+0x110>
    1836:	c6 c0       	rjmp	.+396    	; 0x19c4 <_ZN4QEPU3runEv+0x29c>
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    183c:	5e 01       	movw	r10, r28
    183e:	f2 e6       	ldi	r31, 0x62	; 98
    1840:	af 0e       	add	r10, r31
    1842:	b1 1c       	adc	r11, r1
    1844:	6e 01       	movw	r12, r28
    1846:	2b e5       	ldi	r18, 0x5B	; 91
    1848:	c2 0e       	add	r12, r18
    184a:	d1 1c       	adc	r13, r1
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    184c:	0f 2e       	mov	r0, r31
    184e:	fa eb       	ldi	r31, 0xBA	; 186
    1850:	8f 2e       	mov	r8, r31
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	9f 2e       	mov	r9, r31
    1856:	f0 2d       	mov	r31, r0
    1858:	ae 96       	adiw	r28, 0x2e	; 46
    185a:	af ae       	std	Y+63, r10	; 0x3f
    185c:	ae 97       	sbiw	r28, 0x2e	; 46
    185e:	af 96       	adiw	r28, 0x2f	; 47
    1860:	bf ae       	std	Y+63, r11	; 0x3f
    1862:	af 97       	sbiw	r28, 0x2f	; 47
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1864:	e0 96       	adiw	r28, 0x30	; 48
    1866:	cf ae       	std	Y+63, r12	; 0x3f
    1868:	e0 97       	sbiw	r28, 0x30	; 48
    186a:	e1 96       	adiw	r28, 0x31	; 49
    186c:	df ae       	std	Y+63, r13	; 0x3f
    186e:	e1 97       	sbiw	r28, 0x31	; 49
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
    1870:	f5 01       	movw	r30, r10
    1872:	10 82       	st	Z, r1
    1874:	11 82       	std	Z+1, r1	; 0x01
    1876:	12 82       	std	Z+2, r1	; 0x02
    1878:	13 82       	std	Z+3, r1	; 0x03
    187a:	14 82       	std	Z+4, r1	; 0x04
    187c:	15 82       	std	Z+5, r1	; 0x05
    187e:	16 82       	std	Z+6, r1	; 0x06
    1880:	f6 01       	movw	r30, r12
    1882:	10 82       	st	Z, r1
    1884:	11 82       	std	Z+1, r1	; 0x01
    1886:	12 82       	std	Z+2, r1	; 0x02
    1888:	13 82       	std	Z+3, r1	; 0x03
    188a:	14 82       	std	Z+4, r1	; 0x04
    188c:	15 82       	std	Z+5, r1	; 0x05
    188e:	16 82       	std	Z+6, r1	; 0x06
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	fc 01       	movw	r30, r24
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	8e 0f       	add	r24, r30
    18a4:	9f 1f       	adc	r25, r31
    18a6:	e1 e0       	ldi	r30, 0x01	; 1
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	ec 0f       	add	r30, r28
    18ac:	fd 1f       	adc	r31, r29
    18ae:	e8 0f       	add	r30, r24
    18b0:	f9 1f       	adc	r31, r25
    18b2:	20 80       	ld	r2, Z
    18b4:	31 80       	ldd	r3, Z+1	; 0x01
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    18b6:	00 e0       	ldi	r16, 0x00	; 0
    18b8:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(op1s,"%s%x",op1s,eeprom_splitted[program_counter][k+FIXED_OP1_OFFSET]); // HEX CONCAT TO STRING (OP1 FETCH)
    18ba:	0f 5f       	subi	r16, 0xFF	; 255
    18bc:	1f 4f       	sbci	r17, 0xFF	; 255
    18be:	f3 01       	movw	r30, r6
    18c0:	83 81       	ldd	r24, Z+3	; 0x03
    18c2:	94 81       	ldd	r25, Z+4	; 0x04
    18c4:	fc 01       	movw	r30, r24
    18c6:	ee 0f       	add	r30, r30
    18c8:	ff 1f       	adc	r31, r31
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	ee 0f       	add	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	8e 0f       	add	r24, r30
    18d4:	9f 1f       	adc	r25, r31
    18d6:	80 0f       	add	r24, r16
    18d8:	91 1f       	adc	r25, r17
    18da:	fc 01       	movw	r30, r24
    18dc:	ee 0f       	add	r30, r30
    18de:	ff 1f       	adc	r31, r31
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	8c 0f       	add	r24, r28
    18e6:	9d 1f       	adc	r25, r29
    18e8:	e8 0f       	add	r30, r24
    18ea:	f9 1f       	adc	r31, r25
    18ec:	81 81       	ldd	r24, Z+1	; 0x01
    18ee:	8f 93       	push	r24
    18f0:	80 81       	ld	r24, Z
    18f2:	8f 93       	push	r24
    18f4:	bf 92       	push	r11
    18f6:	af 92       	push	r10
    18f8:	9f 92       	push	r9
    18fa:	8f 92       	push	r8
    18fc:	bf 92       	push	r11
    18fe:	af 92       	push	r10
    1900:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
			sprintf(op2s,"%s%x",op2s,eeprom_splitted[program_counter][k+FIXED_OP2_OFFSET]); // HEX CONCAT TO STRING (OP2 FETCH)
    1904:	f3 01       	movw	r30, r6
    1906:	83 81       	ldd	r24, Z+3	; 0x03
    1908:	94 81       	ldd	r25, Z+4	; 0x04
    190a:	fc 01       	movw	r30, r24
    190c:	ee 0f       	add	r30, r30
    190e:	ff 1f       	adc	r31, r31
    1910:	ee 0f       	add	r30, r30
    1912:	ff 1f       	adc	r31, r31
    1914:	ee 0f       	add	r30, r30
    1916:	ff 1f       	adc	r31, r31
    1918:	e8 0f       	add	r30, r24
    191a:	f9 1f       	adc	r31, r25
    191c:	e0 0f       	add	r30, r16
    191e:	f1 1f       	adc	r31, r17
    1920:	34 96       	adiw	r30, 0x04	; 4
    1922:	ee 0f       	add	r30, r30
    1924:	ff 1f       	adc	r31, r31
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	8c 0f       	add	r24, r28
    192c:	9d 1f       	adc	r25, r29
    192e:	e8 0f       	add	r30, r24
    1930:	f9 1f       	adc	r31, r25
    1932:	81 81       	ldd	r24, Z+1	; 0x01
    1934:	8f 93       	push	r24
    1936:	80 81       	ld	r24, Z
    1938:	8f 93       	push	r24
    193a:	df 92       	push	r13
    193c:	cf 92       	push	r12
    193e:	9f 92       	push	r9
    1940:	8f 92       	push	r8
    1942:	df 92       	push	r13
    1944:	cf 92       	push	r12
    1946:	0e 94 11 13 	call	0x2622	; 0x2622 <sprintf>
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
		int func=0;	char op1s[OP1_WIDTH]=""; char op2s[OP2_WIDTH]="";		
		//FIXED WIDTH INSTRUCTION:
		func=eeprom_splitted[program_counter][FIXED_FUNC_OFFSET]; // FUNCTION FETCH
		for(int k=0;k<QUBIT_BYTE_SIZE;k++){
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	04 30       	cpi	r16, 0x04	; 4
    1956:	11 05       	cpc	r17, r1
    1958:	09 f0       	breq	.+2      	; 0x195c <_ZN4QEPU3runEv+0x234>
    195a:	af cf       	rjmp	.-162    	; 0x18ba <_ZN4QEPU3runEv+0x192>
						break;
					case 3:
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
    195c:	40 e1       	ldi	r20, 0x10	; 16
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	e0 96       	adiw	r28, 0x30	; 48
    1966:	8f ad       	ldd	r24, Y+63	; 0x3f
    1968:	e0 97       	sbiw	r28, 0x30	; 48
    196a:	e1 96       	adiw	r28, 0x31	; 49
    196c:	9f ad       	ldd	r25, Y+63	; 0x3f
    196e:	e1 97       	sbiw	r28, 0x31	; 49
    1970:	0e 94 d5 11 	call	0x23aa	; 0x23aa <strtol>
    1974:	ad 96       	adiw	r28, 0x2d	; 45
    1976:	6c af       	std	Y+60, r22	; 0x3c
    1978:	7d af       	std	Y+61, r23	; 0x3d
    197a:	8e af       	std	Y+62, r24	; 0x3e
    197c:	9f af       	std	Y+63, r25	; 0x3f
    197e:	ad 97       	sbiw	r28, 0x2d	; 45
    1980:	40 e1       	ldi	r20, 0x10	; 16
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	ae 96       	adiw	r28, 0x2e	; 46
    198a:	8f ad       	ldd	r24, Y+63	; 0x3f
    198c:	ae 97       	sbiw	r28, 0x2e	; 46
    198e:	af 96       	adiw	r28, 0x2f	; 47
    1990:	9f ad       	ldd	r25, Y+63	; 0x3f
    1992:	af 97       	sbiw	r28, 0x2f	; 47
    1994:	0e 94 d5 11 	call	0x23aa	; 0x23aa <strtol>
    1998:	9b 01       	movw	r18, r22
    199a:	ac 01       	movw	r20, r24
    199c:	ad 96       	adiw	r28, 0x2d	; 45
    199e:	ec ac       	ldd	r14, Y+60	; 0x3c
    19a0:	fd ac       	ldd	r15, Y+61	; 0x3d
    19a2:	0e ad       	ldd	r16, Y+62	; 0x3e
    19a4:	1f ad       	ldd	r17, Y+63	; 0x3f
    19a6:	ad 97       	sbiw	r28, 0x2d	; 45
    19a8:	b1 01       	movw	r22, r2
    19aa:	c3 01       	movw	r24, r6
    19ac:	0e 94 14 0a 	call	0x1428	; 0x1428 <_ZN4QEPU7executeEill>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    19b0:	f3 01       	movw	r30, r6
    19b2:	83 81       	ldd	r24, Z+3	; 0x03
    19b4:	94 81       	ldd	r25, Z+4	; 0x04
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	94 83       	std	Z+4, r25	; 0x04
    19ba:	83 83       	std	Z+3, r24	; 0x03
    19bc:	84 15       	cp	r24, r4
    19be:	95 05       	cpc	r25, r5
    19c0:	0c f4       	brge	.+2      	; 0x19c4 <_ZN4QEPU3runEv+0x29c>
    19c2:	56 cf       	rjmp	.-340    	; 0x1870 <_ZN4QEPU3runEv+0x148>
						for(int k=j+1;true;k++) if(eeprom_splitted[i][k]==0x2C) break; else op2[k-(j+1)]=eeprom_splitted[i][k];
						break;
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
    19c4:	c3 01       	movw	r24, r6
    19c6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN4QEPU7dumpmemEv>
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <_ZN4QEPU3runEv+0x2ac>
	}
	#pragma endregion
	/*INSTRUCTION FETCH*/
	#pragma region INSTRUCTION_FETCH
	//TODO: EXECUTE INSTRUCTIONS INSIDE THE ARRAY OF INSTRUCTIONS:
	for(program_counter=0;program_counter<line;program_counter++){
    19cc:	f3 01       	movw	r30, r6
    19ce:	14 82       	std	Z+4, r1	; 0x04
    19d0:	13 82       	std	Z+3, r1	; 0x03
    19d2:	f8 cf       	rjmp	.-16     	; 0x19c4 <_ZN4QEPU3runEv+0x29c>
				}*/
		execute(func,strtol(op1s,NULL,16),strtol(op2s,NULL,16)); //*INSTRUCTION DECODE AND EXECUTE*/
	}
	dumpmem();
	#pragma endregion
}
    19d4:	c0 59       	subi	r28, 0x90	; 144
    19d6:	df 4f       	sbci	r29, 0xFF	; 255
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	ff 90       	pop	r15
    19ec:	ef 90       	pop	r14
    19ee:	df 90       	pop	r13
    19f0:	cf 90       	pop	r12
    19f2:	bf 90       	pop	r11
    19f4:	af 90       	pop	r10
    19f6:	9f 90       	pop	r9
    19f8:	8f 90       	pop	r8
    19fa:	7f 90       	pop	r7
    19fc:	6f 90       	pop	r6
    19fe:	5f 90       	pop	r5
    1a00:	4f 90       	pop	r4
    1a02:	3f 90       	pop	r3
    1a04:	2f 90       	pop	r2
    1a06:	08 95       	ret

00001a08 <_ZN6SerialC1Ev>:
#include "uart.h"
Serial::Serial(){
	//Set Baud rate
	 //UBRRL = ubrr_value;
	 //UBRRH = (ubrr_value>>8);
	 UBRRL = 0x33;
    1a08:	83 e3       	ldi	r24, 0x33	; 51
    1a0a:	89 b9       	out	0x09, r24	; 9
	 UBRRH = 0x00;
    1a0c:	10 bc       	out	0x20, r1	; 32
	 /*Set Frame Format
	 >> Asynchronous mode
	 >> No Parity
	 >> 1 StopBit
	 >> char size 8 */
	 UCSRC=(1<<URSEL)|(3<<UCSZ0);
    1a0e:	86 e8       	ldi	r24, 0x86	; 134
    1a10:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable The receiver and transmitter
	 UCSRB=(1<<RXEN)|(1<<TXEN);
    1a12:	88 e1       	ldi	r24, 0x18	; 24
    1a14:	8a b9       	out	0x0a, r24	; 10
    1a16:	08 95       	ret

00001a18 <_ZN6Serial5writeEc>:
	 //and it is available in the buffer
	 return UDR;
}
void Serial::write(char data){
	 //Wait until the transmitter is ready
	 while(!(UCSRA & (1<<UDRE)));
    1a18:	5d 9b       	sbis	0x0b, 5	; 11
    1a1a:	fe cf       	rjmp	.-4      	; 0x1a18 <_ZN6Serial5writeEc>
	 //Now write the data to USART buffer
	 UDR=data;
    1a1c:	6c b9       	out	0x0c, r22	; 12
    1a1e:	08 95       	ret

00001a20 <_ZN6Serial8writestrEPc>:
}
void Serial::writestr(char * data){
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	8c 01       	movw	r16, r24
    1a2a:	eb 01       	movw	r28, r22
	for(int i=0;true;i++) if(data[i]=='\0') break; else write(data[i]);
    1a2c:	68 81       	ld	r22, Y
    1a2e:	66 23       	and	r22, r22
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <_ZN6Serial8writestrEPc+0x20>
    1a32:	21 96       	adiw	r28, 0x01	; 1
    1a34:	c8 01       	movw	r24, r16
    1a36:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_ZN6Serial5writeEc>
    1a3a:	69 91       	ld	r22, Y+
    1a3c:	61 11       	cpse	r22, r1
    1a3e:	fa cf       	rjmp	.-12     	; 0x1a34 <_ZN6Serial8writestrEPc+0x14>
}
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	08 95       	ret

00001a4a <_ZN6Serial10writestrlnEPc>:
void Serial::writeln(char data){
	write(data);
	write(13); //NEW LINE
}
void Serial::writestrln(char * data){
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	ec 01       	movw	r28, r24
	writestr(data);
    1a50:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN6Serial8writestrEPc>
	write(13); //NEW LINE
    1a54:	6d e0       	ldi	r22, 0x0D	; 13
    1a56:	ce 01       	movw	r24, r28
    1a58:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_ZN6Serial5writeEc>
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <acos>:
    1a62:	9f 93       	push	r25
    1a64:	9f 77       	andi	r25, 0x7F	; 127
    1a66:	71 d1       	rcall	.+738    	; 0x1d4a <__fp_arccos>
    1a68:	0f 90       	pop	r0
    1a6a:	00 20       	and	r0, r0
    1a6c:	3a f4       	brpl	.+14     	; 0x1a7c <acos+0x1a>
    1a6e:	90 58       	subi	r25, 0x80	; 128
    1a70:	a2 ea       	ldi	r26, 0xA2	; 162
    1a72:	2a ed       	ldi	r18, 0xDA	; 218
    1a74:	3f e0       	ldi	r19, 0x0F	; 15
    1a76:	49 e4       	ldi	r20, 0x49	; 73
    1a78:	50 e4       	ldi	r21, 0x40	; 64
    1a7a:	13 d0       	rcall	.+38     	; 0x1aa2 <__addsf3x>
    1a7c:	e5 c1       	rjmp	.+970    	; 0x1e48 <__fp_round>

00001a7e <__subsf3>:
    1a7e:	50 58       	subi	r21, 0x80	; 128

00001a80 <__addsf3>:
    1a80:	bb 27       	eor	r27, r27
    1a82:	aa 27       	eor	r26, r26
    1a84:	0e d0       	rcall	.+28     	; 0x1aa2 <__addsf3x>
    1a86:	e0 c1       	rjmp	.+960    	; 0x1e48 <__fp_round>
    1a88:	a9 d1       	rcall	.+850    	; 0x1ddc <__fp_pscA>
    1a8a:	30 f0       	brcs	.+12     	; 0x1a98 <__addsf3+0x18>
    1a8c:	ae d1       	rcall	.+860    	; 0x1dea <__fp_pscB>
    1a8e:	20 f0       	brcs	.+8      	; 0x1a98 <__addsf3+0x18>
    1a90:	31 f4       	brne	.+12     	; 0x1a9e <__addsf3+0x1e>
    1a92:	9f 3f       	cpi	r25, 0xFF	; 255
    1a94:	11 f4       	brne	.+4      	; 0x1a9a <__addsf3+0x1a>
    1a96:	1e f4       	brtc	.+6      	; 0x1a9e <__addsf3+0x1e>
    1a98:	79 c1       	rjmp	.+754    	; 0x1d8c <__fp_nan>
    1a9a:	0e f4       	brtc	.+2      	; 0x1a9e <__addsf3+0x1e>
    1a9c:	e0 95       	com	r30
    1a9e:	e7 fb       	bst	r30, 7
    1aa0:	6f c1       	rjmp	.+734    	; 0x1d80 <__fp_inf>

00001aa2 <__addsf3x>:
    1aa2:	e9 2f       	mov	r30, r25
    1aa4:	f3 d1       	rcall	.+998    	; 0x1e8c <__fp_split3>
    1aa6:	80 f3       	brcs	.-32     	; 0x1a88 <__addsf3+0x8>
    1aa8:	ba 17       	cp	r27, r26
    1aaa:	62 07       	cpc	r22, r18
    1aac:	73 07       	cpc	r23, r19
    1aae:	84 07       	cpc	r24, r20
    1ab0:	95 07       	cpc	r25, r21
    1ab2:	18 f0       	brcs	.+6      	; 0x1aba <__addsf3x+0x18>
    1ab4:	71 f4       	brne	.+28     	; 0x1ad2 <__addsf3x+0x30>
    1ab6:	9e f5       	brtc	.+102    	; 0x1b1e <__addsf3x+0x7c>
    1ab8:	0b c2       	rjmp	.+1046   	; 0x1ed0 <__fp_zero>
    1aba:	0e f4       	brtc	.+2      	; 0x1abe <__addsf3x+0x1c>
    1abc:	e0 95       	com	r30
    1abe:	0b 2e       	mov	r0, r27
    1ac0:	ba 2f       	mov	r27, r26
    1ac2:	a0 2d       	mov	r26, r0
    1ac4:	0b 01       	movw	r0, r22
    1ac6:	b9 01       	movw	r22, r18
    1ac8:	90 01       	movw	r18, r0
    1aca:	0c 01       	movw	r0, r24
    1acc:	ca 01       	movw	r24, r20
    1ace:	a0 01       	movw	r20, r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	ff 27       	eor	r31, r31
    1ad4:	59 1b       	sub	r21, r25
    1ad6:	99 f0       	breq	.+38     	; 0x1afe <__addsf3x+0x5c>
    1ad8:	59 3f       	cpi	r21, 0xF9	; 249
    1ada:	50 f4       	brcc	.+20     	; 0x1af0 <__addsf3x+0x4e>
    1adc:	50 3e       	cpi	r21, 0xE0	; 224
    1ade:	68 f1       	brcs	.+90     	; 0x1b3a <__addsf3x+0x98>
    1ae0:	1a 16       	cp	r1, r26
    1ae2:	f0 40       	sbci	r31, 0x00	; 0
    1ae4:	a2 2f       	mov	r26, r18
    1ae6:	23 2f       	mov	r18, r19
    1ae8:	34 2f       	mov	r19, r20
    1aea:	44 27       	eor	r20, r20
    1aec:	58 5f       	subi	r21, 0xF8	; 248
    1aee:	f3 cf       	rjmp	.-26     	; 0x1ad6 <__addsf3x+0x34>
    1af0:	46 95       	lsr	r20
    1af2:	37 95       	ror	r19
    1af4:	27 95       	ror	r18
    1af6:	a7 95       	ror	r26
    1af8:	f0 40       	sbci	r31, 0x00	; 0
    1afa:	53 95       	inc	r21
    1afc:	c9 f7       	brne	.-14     	; 0x1af0 <__addsf3x+0x4e>
    1afe:	7e f4       	brtc	.+30     	; 0x1b1e <__addsf3x+0x7c>
    1b00:	1f 16       	cp	r1, r31
    1b02:	ba 0b       	sbc	r27, r26
    1b04:	62 0b       	sbc	r22, r18
    1b06:	73 0b       	sbc	r23, r19
    1b08:	84 0b       	sbc	r24, r20
    1b0a:	ba f0       	brmi	.+46     	; 0x1b3a <__addsf3x+0x98>
    1b0c:	91 50       	subi	r25, 0x01	; 1
    1b0e:	a1 f0       	breq	.+40     	; 0x1b38 <__addsf3x+0x96>
    1b10:	ff 0f       	add	r31, r31
    1b12:	bb 1f       	adc	r27, r27
    1b14:	66 1f       	adc	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	c2 f7       	brpl	.-16     	; 0x1b0c <__addsf3x+0x6a>
    1b1c:	0e c0       	rjmp	.+28     	; 0x1b3a <__addsf3x+0x98>
    1b1e:	ba 0f       	add	r27, r26
    1b20:	62 1f       	adc	r22, r18
    1b22:	73 1f       	adc	r23, r19
    1b24:	84 1f       	adc	r24, r20
    1b26:	48 f4       	brcc	.+18     	; 0x1b3a <__addsf3x+0x98>
    1b28:	87 95       	ror	r24
    1b2a:	77 95       	ror	r23
    1b2c:	67 95       	ror	r22
    1b2e:	b7 95       	ror	r27
    1b30:	f7 95       	ror	r31
    1b32:	9e 3f       	cpi	r25, 0xFE	; 254
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <__addsf3x+0x96>
    1b36:	b3 cf       	rjmp	.-154    	; 0x1a9e <__addsf3+0x1e>
    1b38:	93 95       	inc	r25
    1b3a:	88 0f       	add	r24, r24
    1b3c:	08 f0       	brcs	.+2      	; 0x1b40 <__addsf3x+0x9e>
    1b3e:	99 27       	eor	r25, r25
    1b40:	ee 0f       	add	r30, r30
    1b42:	97 95       	ror	r25
    1b44:	87 95       	ror	r24
    1b46:	08 95       	ret

00001b48 <atan>:
    1b48:	df 93       	push	r29
    1b4a:	dd 27       	eor	r29, r29
    1b4c:	b9 2f       	mov	r27, r25
    1b4e:	bf 77       	andi	r27, 0x7F	; 127
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	16 16       	cp	r1, r22
    1b56:	17 06       	cpc	r1, r23
    1b58:	48 07       	cpc	r20, r24
    1b5a:	5b 07       	cpc	r21, r27
    1b5c:	10 f4       	brcc	.+4      	; 0x1b62 <atan+0x1a>
    1b5e:	d9 2f       	mov	r29, r25
    1b60:	be d1       	rcall	.+892    	; 0x1ede <inverse>
    1b62:	9f 93       	push	r25
    1b64:	8f 93       	push	r24
    1b66:	7f 93       	push	r23
    1b68:	6f 93       	push	r22
    1b6a:	6b d2       	rcall	.+1238   	; 0x2042 <square>
    1b6c:	e0 e8       	ldi	r30, 0x80	; 128
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	10 d1       	rcall	.+544    	; 0x1d92 <__fp_powser>
    1b72:	6a d1       	rcall	.+724    	; 0x1e48 <__fp_round>
    1b74:	2f 91       	pop	r18
    1b76:	3f 91       	pop	r19
    1b78:	4f 91       	pop	r20
    1b7a:	5f 91       	pop	r21
    1b7c:	c3 d1       	rcall	.+902    	; 0x1f04 <__mulsf3x>
    1b7e:	dd 23       	and	r29, r29
    1b80:	49 f0       	breq	.+18     	; 0x1b94 <atan+0x4c>
    1b82:	90 58       	subi	r25, 0x80	; 128
    1b84:	a2 ea       	ldi	r26, 0xA2	; 162
    1b86:	2a ed       	ldi	r18, 0xDA	; 218
    1b88:	3f e0       	ldi	r19, 0x0F	; 15
    1b8a:	49 ec       	ldi	r20, 0xC9	; 201
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	d0 78       	andi	r29, 0x80	; 128
    1b90:	5d 27       	eor	r21, r29
    1b92:	87 df       	rcall	.-242    	; 0x1aa2 <__addsf3x>
    1b94:	df 91       	pop	r29
    1b96:	58 c1       	rjmp	.+688    	; 0x1e48 <__fp_round>

00001b98 <cos>:
    1b98:	30 d1       	rcall	.+608    	; 0x1dfa <__fp_rempio2>
    1b9a:	e3 95       	inc	r30
    1b9c:	66 c1       	rjmp	.+716    	; 0x1e6a <__fp_sinus>

00001b9e <__divsf3>:
    1b9e:	0c d0       	rcall	.+24     	; 0x1bb8 <__divsf3x>
    1ba0:	53 c1       	rjmp	.+678    	; 0x1e48 <__fp_round>
    1ba2:	23 d1       	rcall	.+582    	; 0x1dea <__fp_pscB>
    1ba4:	40 f0       	brcs	.+16     	; 0x1bb6 <__divsf3+0x18>
    1ba6:	1a d1       	rcall	.+564    	; 0x1ddc <__fp_pscA>
    1ba8:	30 f0       	brcs	.+12     	; 0x1bb6 <__divsf3+0x18>
    1baa:	21 f4       	brne	.+8      	; 0x1bb4 <__divsf3+0x16>
    1bac:	5f 3f       	cpi	r21, 0xFF	; 255
    1bae:	19 f0       	breq	.+6      	; 0x1bb6 <__divsf3+0x18>
    1bb0:	e7 c0       	rjmp	.+462    	; 0x1d80 <__fp_inf>
    1bb2:	51 11       	cpse	r21, r1
    1bb4:	8e c1       	rjmp	.+796    	; 0x1ed2 <__fp_szero>
    1bb6:	ea c0       	rjmp	.+468    	; 0x1d8c <__fp_nan>

00001bb8 <__divsf3x>:
    1bb8:	69 d1       	rcall	.+722    	; 0x1e8c <__fp_split3>
    1bba:	98 f3       	brcs	.-26     	; 0x1ba2 <__divsf3+0x4>

00001bbc <__divsf3_pse>:
    1bbc:	99 23       	and	r25, r25
    1bbe:	c9 f3       	breq	.-14     	; 0x1bb2 <__divsf3+0x14>
    1bc0:	55 23       	and	r21, r21
    1bc2:	b1 f3       	breq	.-20     	; 0x1bb0 <__divsf3+0x12>
    1bc4:	95 1b       	sub	r25, r21
    1bc6:	55 0b       	sbc	r21, r21
    1bc8:	bb 27       	eor	r27, r27
    1bca:	aa 27       	eor	r26, r26
    1bcc:	62 17       	cp	r22, r18
    1bce:	73 07       	cpc	r23, r19
    1bd0:	84 07       	cpc	r24, r20
    1bd2:	38 f0       	brcs	.+14     	; 0x1be2 <__divsf3_pse+0x26>
    1bd4:	9f 5f       	subi	r25, 0xFF	; 255
    1bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd8:	22 0f       	add	r18, r18
    1bda:	33 1f       	adc	r19, r19
    1bdc:	44 1f       	adc	r20, r20
    1bde:	aa 1f       	adc	r26, r26
    1be0:	a9 f3       	breq	.-22     	; 0x1bcc <__divsf3_pse+0x10>
    1be2:	33 d0       	rcall	.+102    	; 0x1c4a <__divsf3_pse+0x8e>
    1be4:	0e 2e       	mov	r0, r30
    1be6:	3a f0       	brmi	.+14     	; 0x1bf6 <__divsf3_pse+0x3a>
    1be8:	e0 e8       	ldi	r30, 0x80	; 128
    1bea:	30 d0       	rcall	.+96     	; 0x1c4c <__divsf3_pse+0x90>
    1bec:	91 50       	subi	r25, 0x01	; 1
    1bee:	50 40       	sbci	r21, 0x00	; 0
    1bf0:	e6 95       	lsr	r30
    1bf2:	00 1c       	adc	r0, r0
    1bf4:	ca f7       	brpl	.-14     	; 0x1be8 <__divsf3_pse+0x2c>
    1bf6:	29 d0       	rcall	.+82     	; 0x1c4a <__divsf3_pse+0x8e>
    1bf8:	fe 2f       	mov	r31, r30
    1bfa:	27 d0       	rcall	.+78     	; 0x1c4a <__divsf3_pse+0x8e>
    1bfc:	66 0f       	add	r22, r22
    1bfe:	77 1f       	adc	r23, r23
    1c00:	88 1f       	adc	r24, r24
    1c02:	bb 1f       	adc	r27, r27
    1c04:	26 17       	cp	r18, r22
    1c06:	37 07       	cpc	r19, r23
    1c08:	48 07       	cpc	r20, r24
    1c0a:	ab 07       	cpc	r26, r27
    1c0c:	b0 e8       	ldi	r27, 0x80	; 128
    1c0e:	09 f0       	breq	.+2      	; 0x1c12 <__divsf3_pse+0x56>
    1c10:	bb 0b       	sbc	r27, r27
    1c12:	80 2d       	mov	r24, r0
    1c14:	bf 01       	movw	r22, r30
    1c16:	ff 27       	eor	r31, r31
    1c18:	93 58       	subi	r25, 0x83	; 131
    1c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1c:	2a f0       	brmi	.+10     	; 0x1c28 <__divsf3_pse+0x6c>
    1c1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c20:	51 05       	cpc	r21, r1
    1c22:	68 f0       	brcs	.+26     	; 0x1c3e <__divsf3_pse+0x82>
    1c24:	ad c0       	rjmp	.+346    	; 0x1d80 <__fp_inf>
    1c26:	55 c1       	rjmp	.+682    	; 0x1ed2 <__fp_szero>
    1c28:	5f 3f       	cpi	r21, 0xFF	; 255
    1c2a:	ec f3       	brlt	.-6      	; 0x1c26 <__divsf3_pse+0x6a>
    1c2c:	98 3e       	cpi	r25, 0xE8	; 232
    1c2e:	dc f3       	brlt	.-10     	; 0x1c26 <__divsf3_pse+0x6a>
    1c30:	86 95       	lsr	r24
    1c32:	77 95       	ror	r23
    1c34:	67 95       	ror	r22
    1c36:	b7 95       	ror	r27
    1c38:	f7 95       	ror	r31
    1c3a:	9f 5f       	subi	r25, 0xFF	; 255
    1c3c:	c9 f7       	brne	.-14     	; 0x1c30 <__divsf3_pse+0x74>
    1c3e:	88 0f       	add	r24, r24
    1c40:	91 1d       	adc	r25, r1
    1c42:	96 95       	lsr	r25
    1c44:	87 95       	ror	r24
    1c46:	97 f9       	bld	r25, 7
    1c48:	08 95       	ret
    1c4a:	e1 e0       	ldi	r30, 0x01	; 1
    1c4c:	66 0f       	add	r22, r22
    1c4e:	77 1f       	adc	r23, r23
    1c50:	88 1f       	adc	r24, r24
    1c52:	bb 1f       	adc	r27, r27
    1c54:	62 17       	cp	r22, r18
    1c56:	73 07       	cpc	r23, r19
    1c58:	84 07       	cpc	r24, r20
    1c5a:	ba 07       	cpc	r27, r26
    1c5c:	20 f0       	brcs	.+8      	; 0x1c66 <__divsf3_pse+0xaa>
    1c5e:	62 1b       	sub	r22, r18
    1c60:	73 0b       	sbc	r23, r19
    1c62:	84 0b       	sbc	r24, r20
    1c64:	ba 0b       	sbc	r27, r26
    1c66:	ee 1f       	adc	r30, r30
    1c68:	88 f7       	brcc	.-30     	; 0x1c4c <__divsf3_pse+0x90>
    1c6a:	e0 95       	com	r30
    1c6c:	08 95       	ret

00001c6e <__fixsfsi>:
    1c6e:	04 d0       	rcall	.+8      	; 0x1c78 <__fixunssfsi>
    1c70:	68 94       	set
    1c72:	b1 11       	cpse	r27, r1
    1c74:	2e c1       	rjmp	.+604    	; 0x1ed2 <__fp_szero>
    1c76:	08 95       	ret

00001c78 <__fixunssfsi>:
    1c78:	11 d1       	rcall	.+546    	; 0x1e9c <__fp_splitA>
    1c7a:	88 f0       	brcs	.+34     	; 0x1c9e <__fixunssfsi+0x26>
    1c7c:	9f 57       	subi	r25, 0x7F	; 127
    1c7e:	90 f0       	brcs	.+36     	; 0x1ca4 <__fixunssfsi+0x2c>
    1c80:	b9 2f       	mov	r27, r25
    1c82:	99 27       	eor	r25, r25
    1c84:	b7 51       	subi	r27, 0x17	; 23
    1c86:	a0 f0       	brcs	.+40     	; 0x1cb0 <__fixunssfsi+0x38>
    1c88:	d1 f0       	breq	.+52     	; 0x1cbe <__fixunssfsi+0x46>
    1c8a:	66 0f       	add	r22, r22
    1c8c:	77 1f       	adc	r23, r23
    1c8e:	88 1f       	adc	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	1a f0       	brmi	.+6      	; 0x1c9a <__fixunssfsi+0x22>
    1c94:	ba 95       	dec	r27
    1c96:	c9 f7       	brne	.-14     	; 0x1c8a <__fixunssfsi+0x12>
    1c98:	12 c0       	rjmp	.+36     	; 0x1cbe <__fixunssfsi+0x46>
    1c9a:	b1 30       	cpi	r27, 0x01	; 1
    1c9c:	81 f0       	breq	.+32     	; 0x1cbe <__fixunssfsi+0x46>
    1c9e:	18 d1       	rcall	.+560    	; 0x1ed0 <__fp_zero>
    1ca0:	b1 e0       	ldi	r27, 0x01	; 1
    1ca2:	08 95       	ret
    1ca4:	15 c1       	rjmp	.+554    	; 0x1ed0 <__fp_zero>
    1ca6:	67 2f       	mov	r22, r23
    1ca8:	78 2f       	mov	r23, r24
    1caa:	88 27       	eor	r24, r24
    1cac:	b8 5f       	subi	r27, 0xF8	; 248
    1cae:	39 f0       	breq	.+14     	; 0x1cbe <__fixunssfsi+0x46>
    1cb0:	b9 3f       	cpi	r27, 0xF9	; 249
    1cb2:	cc f3       	brlt	.-14     	; 0x1ca6 <__fixunssfsi+0x2e>
    1cb4:	86 95       	lsr	r24
    1cb6:	77 95       	ror	r23
    1cb8:	67 95       	ror	r22
    1cba:	b3 95       	inc	r27
    1cbc:	d9 f7       	brne	.-10     	; 0x1cb4 <__fixunssfsi+0x3c>
    1cbe:	3e f4       	brtc	.+14     	; 0x1cce <__fixunssfsi+0x56>
    1cc0:	90 95       	com	r25
    1cc2:	80 95       	com	r24
    1cc4:	70 95       	com	r23
    1cc6:	61 95       	neg	r22
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	08 95       	ret

00001cd0 <__floatunsisf>:
    1cd0:	e8 94       	clt
    1cd2:	09 c0       	rjmp	.+18     	; 0x1ce6 <__floatsisf+0x12>

00001cd4 <__floatsisf>:
    1cd4:	97 fb       	bst	r25, 7
    1cd6:	3e f4       	brtc	.+14     	; 0x1ce6 <__floatsisf+0x12>
    1cd8:	90 95       	com	r25
    1cda:	80 95       	com	r24
    1cdc:	70 95       	com	r23
    1cde:	61 95       	neg	r22
    1ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	99 23       	and	r25, r25
    1ce8:	a9 f0       	breq	.+42     	; 0x1d14 <__floatsisf+0x40>
    1cea:	f9 2f       	mov	r31, r25
    1cec:	96 e9       	ldi	r25, 0x96	; 150
    1cee:	bb 27       	eor	r27, r27
    1cf0:	93 95       	inc	r25
    1cf2:	f6 95       	lsr	r31
    1cf4:	87 95       	ror	r24
    1cf6:	77 95       	ror	r23
    1cf8:	67 95       	ror	r22
    1cfa:	b7 95       	ror	r27
    1cfc:	f1 11       	cpse	r31, r1
    1cfe:	f8 cf       	rjmp	.-16     	; 0x1cf0 <__floatsisf+0x1c>
    1d00:	fa f4       	brpl	.+62     	; 0x1d40 <__floatsisf+0x6c>
    1d02:	bb 0f       	add	r27, r27
    1d04:	11 f4       	brne	.+4      	; 0x1d0a <__floatsisf+0x36>
    1d06:	60 ff       	sbrs	r22, 0
    1d08:	1b c0       	rjmp	.+54     	; 0x1d40 <__floatsisf+0x6c>
    1d0a:	6f 5f       	subi	r22, 0xFF	; 255
    1d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d10:	9f 4f       	sbci	r25, 0xFF	; 255
    1d12:	16 c0       	rjmp	.+44     	; 0x1d40 <__floatsisf+0x6c>
    1d14:	88 23       	and	r24, r24
    1d16:	11 f0       	breq	.+4      	; 0x1d1c <__floatsisf+0x48>
    1d18:	96 e9       	ldi	r25, 0x96	; 150
    1d1a:	11 c0       	rjmp	.+34     	; 0x1d3e <__floatsisf+0x6a>
    1d1c:	77 23       	and	r23, r23
    1d1e:	21 f0       	breq	.+8      	; 0x1d28 <__floatsisf+0x54>
    1d20:	9e e8       	ldi	r25, 0x8E	; 142
    1d22:	87 2f       	mov	r24, r23
    1d24:	76 2f       	mov	r23, r22
    1d26:	05 c0       	rjmp	.+10     	; 0x1d32 <__floatsisf+0x5e>
    1d28:	66 23       	and	r22, r22
    1d2a:	71 f0       	breq	.+28     	; 0x1d48 <__floatsisf+0x74>
    1d2c:	96 e8       	ldi	r25, 0x86	; 134
    1d2e:	86 2f       	mov	r24, r22
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	2a f0       	brmi	.+10     	; 0x1d40 <__floatsisf+0x6c>
    1d36:	9a 95       	dec	r25
    1d38:	66 0f       	add	r22, r22
    1d3a:	77 1f       	adc	r23, r23
    1d3c:	88 1f       	adc	r24, r24
    1d3e:	da f7       	brpl	.-10     	; 0x1d36 <__floatsisf+0x62>
    1d40:	88 0f       	add	r24, r24
    1d42:	96 95       	lsr	r25
    1d44:	87 95       	ror	r24
    1d46:	97 f9       	bld	r25, 7
    1d48:	08 95       	ret

00001d4a <__fp_arccos>:
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	1f 93       	push	r17
    1d50:	0f 93       	push	r16
    1d52:	8b 01       	movw	r16, r22
    1d54:	ec 01       	movw	r28, r24
    1d56:	ed ea       	ldi	r30, 0xAD	; 173
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	1b d0       	rcall	.+54     	; 0x1d92 <__fp_powser>
    1d5c:	75 d0       	rcall	.+234    	; 0x1e48 <__fp_round>
    1d5e:	98 01       	movw	r18, r16
    1d60:	ae 01       	movw	r20, r28
    1d62:	8b 01       	movw	r16, r22
    1d64:	ec 01       	movw	r28, r24
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	80 e8       	ldi	r24, 0x80	; 128
    1d6c:	9f e3       	ldi	r25, 0x3F	; 63
    1d6e:	87 de       	rcall	.-754    	; 0x1a7e <__subsf3>
    1d70:	2a d1       	rcall	.+596    	; 0x1fc6 <sqrt>
    1d72:	98 01       	movw	r18, r16
    1d74:	ae 01       	movw	r20, r28
    1d76:	0f 91       	pop	r16
    1d78:	1f 91       	pop	r17
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	c2 c0       	rjmp	.+388    	; 0x1f04 <__mulsf3x>

00001d80 <__fp_inf>:
    1d80:	97 f9       	bld	r25, 7
    1d82:	9f 67       	ori	r25, 0x7F	; 127
    1d84:	80 e8       	ldi	r24, 0x80	; 128
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	08 95       	ret

00001d8c <__fp_nan>:
    1d8c:	9f ef       	ldi	r25, 0xFF	; 255
    1d8e:	80 ec       	ldi	r24, 0xC0	; 192
    1d90:	08 95       	ret

00001d92 <__fp_powser>:
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	1f 93       	push	r17
    1d98:	0f 93       	push	r16
    1d9a:	ff 92       	push	r15
    1d9c:	ef 92       	push	r14
    1d9e:	df 92       	push	r13
    1da0:	7b 01       	movw	r14, r22
    1da2:	8c 01       	movw	r16, r24
    1da4:	68 94       	set
    1da6:	05 c0       	rjmp	.+10     	; 0x1db2 <__fp_powser+0x20>
    1da8:	da 2e       	mov	r13, r26
    1daa:	ef 01       	movw	r28, r30
    1dac:	ab d0       	rcall	.+342    	; 0x1f04 <__mulsf3x>
    1dae:	fe 01       	movw	r30, r28
    1db0:	e8 94       	clt
    1db2:	a5 91       	lpm	r26, Z+
    1db4:	25 91       	lpm	r18, Z+
    1db6:	35 91       	lpm	r19, Z+
    1db8:	45 91       	lpm	r20, Z+
    1dba:	55 91       	lpm	r21, Z+
    1dbc:	ae f3       	brts	.-22     	; 0x1da8 <__fp_powser+0x16>
    1dbe:	ef 01       	movw	r28, r30
    1dc0:	70 de       	rcall	.-800    	; 0x1aa2 <__addsf3x>
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	97 01       	movw	r18, r14
    1dc6:	a8 01       	movw	r20, r16
    1dc8:	da 94       	dec	r13
    1dca:	79 f7       	brne	.-34     	; 0x1daa <__fp_powser+0x18>
    1dcc:	df 90       	pop	r13
    1dce:	ef 90       	pop	r14
    1dd0:	ff 90       	pop	r15
    1dd2:	0f 91       	pop	r16
    1dd4:	1f 91       	pop	r17
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <__fp_pscA>:
    1ddc:	00 24       	eor	r0, r0
    1dde:	0a 94       	dec	r0
    1de0:	16 16       	cp	r1, r22
    1de2:	17 06       	cpc	r1, r23
    1de4:	18 06       	cpc	r1, r24
    1de6:	09 06       	cpc	r0, r25
    1de8:	08 95       	ret

00001dea <__fp_pscB>:
    1dea:	00 24       	eor	r0, r0
    1dec:	0a 94       	dec	r0
    1dee:	12 16       	cp	r1, r18
    1df0:	13 06       	cpc	r1, r19
    1df2:	14 06       	cpc	r1, r20
    1df4:	05 06       	cpc	r0, r21
    1df6:	08 95       	ret
    1df8:	c9 cf       	rjmp	.-110    	; 0x1d8c <__fp_nan>

00001dfa <__fp_rempio2>:
    1dfa:	50 d0       	rcall	.+160    	; 0x1e9c <__fp_splitA>
    1dfc:	e8 f3       	brcs	.-6      	; 0x1df8 <__fp_pscB+0xe>
    1dfe:	e8 94       	clt
    1e00:	e0 e0       	ldi	r30, 0x00	; 0
    1e02:	bb 27       	eor	r27, r27
    1e04:	9f 57       	subi	r25, 0x7F	; 127
    1e06:	f0 f0       	brcs	.+60     	; 0x1e44 <__fp_rempio2+0x4a>
    1e08:	2a ed       	ldi	r18, 0xDA	; 218
    1e0a:	3f e0       	ldi	r19, 0x0F	; 15
    1e0c:	49 ec       	ldi	r20, 0xC9	; 201
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <__fp_rempio2+0x22>
    1e10:	ee 0f       	add	r30, r30
    1e12:	bb 0f       	add	r27, r27
    1e14:	66 1f       	adc	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	28 f0       	brcs	.+10     	; 0x1e26 <__fp_rempio2+0x2c>
    1e1c:	b2 3a       	cpi	r27, 0xA2	; 162
    1e1e:	62 07       	cpc	r22, r18
    1e20:	73 07       	cpc	r23, r19
    1e22:	84 07       	cpc	r24, r20
    1e24:	28 f0       	brcs	.+10     	; 0x1e30 <__fp_rempio2+0x36>
    1e26:	b2 5a       	subi	r27, 0xA2	; 162
    1e28:	62 0b       	sbc	r22, r18
    1e2a:	73 0b       	sbc	r23, r19
    1e2c:	84 0b       	sbc	r24, r20
    1e2e:	e3 95       	inc	r30
    1e30:	9a 95       	dec	r25
    1e32:	72 f7       	brpl	.-36     	; 0x1e10 <__fp_rempio2+0x16>
    1e34:	80 38       	cpi	r24, 0x80	; 128
    1e36:	30 f4       	brcc	.+12     	; 0x1e44 <__fp_rempio2+0x4a>
    1e38:	9a 95       	dec	r25
    1e3a:	bb 0f       	add	r27, r27
    1e3c:	66 1f       	adc	r22, r22
    1e3e:	77 1f       	adc	r23, r23
    1e40:	88 1f       	adc	r24, r24
    1e42:	d2 f7       	brpl	.-12     	; 0x1e38 <__fp_rempio2+0x3e>
    1e44:	90 48       	sbci	r25, 0x80	; 128
    1e46:	02 c1       	rjmp	.+516    	; 0x204c <__fp_mpack_finite>

00001e48 <__fp_round>:
    1e48:	09 2e       	mov	r0, r25
    1e4a:	03 94       	inc	r0
    1e4c:	00 0c       	add	r0, r0
    1e4e:	11 f4       	brne	.+4      	; 0x1e54 <__fp_round+0xc>
    1e50:	88 23       	and	r24, r24
    1e52:	52 f0       	brmi	.+20     	; 0x1e68 <__fp_round+0x20>
    1e54:	bb 0f       	add	r27, r27
    1e56:	40 f4       	brcc	.+16     	; 0x1e68 <__fp_round+0x20>
    1e58:	bf 2b       	or	r27, r31
    1e5a:	11 f4       	brne	.+4      	; 0x1e60 <__fp_round+0x18>
    1e5c:	60 ff       	sbrs	r22, 0
    1e5e:	04 c0       	rjmp	.+8      	; 0x1e68 <__fp_round+0x20>
    1e60:	6f 5f       	subi	r22, 0xFF	; 255
    1e62:	7f 4f       	sbci	r23, 0xFF	; 255
    1e64:	8f 4f       	sbci	r24, 0xFF	; 255
    1e66:	9f 4f       	sbci	r25, 0xFF	; 255
    1e68:	08 95       	ret

00001e6a <__fp_sinus>:
    1e6a:	ef 93       	push	r30
    1e6c:	e0 ff       	sbrs	r30, 0
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <__fp_sinus+0x12>
    1e70:	a2 ea       	ldi	r26, 0xA2	; 162
    1e72:	2a ed       	ldi	r18, 0xDA	; 218
    1e74:	3f e0       	ldi	r19, 0x0F	; 15
    1e76:	49 ec       	ldi	r20, 0xC9	; 201
    1e78:	5f eb       	ldi	r21, 0xBF	; 191
    1e7a:	13 de       	rcall	.-986    	; 0x1aa2 <__addsf3x>
    1e7c:	e5 df       	rcall	.-54     	; 0x1e48 <__fp_round>
    1e7e:	0f 90       	pop	r0
    1e80:	03 94       	inc	r0
    1e82:	01 fc       	sbrc	r0, 1
    1e84:	90 58       	subi	r25, 0x80	; 128
    1e86:	e5 ed       	ldi	r30, 0xD5	; 213
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	f3 c0       	rjmp	.+486    	; 0x2072 <__fp_powsodd>

00001e8c <__fp_split3>:
    1e8c:	57 fd       	sbrc	r21, 7
    1e8e:	90 58       	subi	r25, 0x80	; 128
    1e90:	44 0f       	add	r20, r20
    1e92:	55 1f       	adc	r21, r21
    1e94:	59 f0       	breq	.+22     	; 0x1eac <__fp_splitA+0x10>
    1e96:	5f 3f       	cpi	r21, 0xFF	; 255
    1e98:	71 f0       	breq	.+28     	; 0x1eb6 <__fp_splitA+0x1a>
    1e9a:	47 95       	ror	r20

00001e9c <__fp_splitA>:
    1e9c:	88 0f       	add	r24, r24
    1e9e:	97 fb       	bst	r25, 7
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	61 f0       	breq	.+24     	; 0x1ebc <__fp_splitA+0x20>
    1ea4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ea6:	79 f0       	breq	.+30     	; 0x1ec6 <__fp_splitA+0x2a>
    1ea8:	87 95       	ror	r24
    1eaa:	08 95       	ret
    1eac:	12 16       	cp	r1, r18
    1eae:	13 06       	cpc	r1, r19
    1eb0:	14 06       	cpc	r1, r20
    1eb2:	55 1f       	adc	r21, r21
    1eb4:	f2 cf       	rjmp	.-28     	; 0x1e9a <__fp_split3+0xe>
    1eb6:	46 95       	lsr	r20
    1eb8:	f1 df       	rcall	.-30     	; 0x1e9c <__fp_splitA>
    1eba:	08 c0       	rjmp	.+16     	; 0x1ecc <__fp_splitA+0x30>
    1ebc:	16 16       	cp	r1, r22
    1ebe:	17 06       	cpc	r1, r23
    1ec0:	18 06       	cpc	r1, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	f1 cf       	rjmp	.-30     	; 0x1ea8 <__fp_splitA+0xc>
    1ec6:	86 95       	lsr	r24
    1ec8:	71 05       	cpc	r23, r1
    1eca:	61 05       	cpc	r22, r1
    1ecc:	08 94       	sec
    1ece:	08 95       	ret

00001ed0 <__fp_zero>:
    1ed0:	e8 94       	clt

00001ed2 <__fp_szero>:
    1ed2:	bb 27       	eor	r27, r27
    1ed4:	66 27       	eor	r22, r22
    1ed6:	77 27       	eor	r23, r23
    1ed8:	cb 01       	movw	r24, r22
    1eda:	97 f9       	bld	r25, 7
    1edc:	08 95       	ret

00001ede <inverse>:
    1ede:	9b 01       	movw	r18, r22
    1ee0:	ac 01       	movw	r20, r24
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	80 e8       	ldi	r24, 0x80	; 128
    1ee8:	9f e3       	ldi	r25, 0x3F	; 63
    1eea:	59 ce       	rjmp	.-846    	; 0x1b9e <__divsf3>

00001eec <__mulsf3>:
    1eec:	0b d0       	rcall	.+22     	; 0x1f04 <__mulsf3x>
    1eee:	ac cf       	rjmp	.-168    	; 0x1e48 <__fp_round>
    1ef0:	75 df       	rcall	.-278    	; 0x1ddc <__fp_pscA>
    1ef2:	28 f0       	brcs	.+10     	; 0x1efe <__mulsf3+0x12>
    1ef4:	7a df       	rcall	.-268    	; 0x1dea <__fp_pscB>
    1ef6:	18 f0       	brcs	.+6      	; 0x1efe <__mulsf3+0x12>
    1ef8:	95 23       	and	r25, r21
    1efa:	09 f0       	breq	.+2      	; 0x1efe <__mulsf3+0x12>
    1efc:	41 cf       	rjmp	.-382    	; 0x1d80 <__fp_inf>
    1efe:	46 cf       	rjmp	.-372    	; 0x1d8c <__fp_nan>
    1f00:	11 24       	eor	r1, r1
    1f02:	e7 cf       	rjmp	.-50     	; 0x1ed2 <__fp_szero>

00001f04 <__mulsf3x>:
    1f04:	c3 df       	rcall	.-122    	; 0x1e8c <__fp_split3>
    1f06:	a0 f3       	brcs	.-24     	; 0x1ef0 <__mulsf3+0x4>

00001f08 <__mulsf3_pse>:
    1f08:	95 9f       	mul	r25, r21
    1f0a:	d1 f3       	breq	.-12     	; 0x1f00 <__mulsf3+0x14>
    1f0c:	95 0f       	add	r25, r21
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	55 1f       	adc	r21, r21
    1f12:	62 9f       	mul	r22, r18
    1f14:	f0 01       	movw	r30, r0
    1f16:	72 9f       	mul	r23, r18
    1f18:	bb 27       	eor	r27, r27
    1f1a:	f0 0d       	add	r31, r0
    1f1c:	b1 1d       	adc	r27, r1
    1f1e:	63 9f       	mul	r22, r19
    1f20:	aa 27       	eor	r26, r26
    1f22:	f0 0d       	add	r31, r0
    1f24:	b1 1d       	adc	r27, r1
    1f26:	aa 1f       	adc	r26, r26
    1f28:	64 9f       	mul	r22, r20
    1f2a:	66 27       	eor	r22, r22
    1f2c:	b0 0d       	add	r27, r0
    1f2e:	a1 1d       	adc	r26, r1
    1f30:	66 1f       	adc	r22, r22
    1f32:	82 9f       	mul	r24, r18
    1f34:	22 27       	eor	r18, r18
    1f36:	b0 0d       	add	r27, r0
    1f38:	a1 1d       	adc	r26, r1
    1f3a:	62 1f       	adc	r22, r18
    1f3c:	73 9f       	mul	r23, r19
    1f3e:	b0 0d       	add	r27, r0
    1f40:	a1 1d       	adc	r26, r1
    1f42:	62 1f       	adc	r22, r18
    1f44:	83 9f       	mul	r24, r19
    1f46:	a0 0d       	add	r26, r0
    1f48:	61 1d       	adc	r22, r1
    1f4a:	22 1f       	adc	r18, r18
    1f4c:	74 9f       	mul	r23, r20
    1f4e:	33 27       	eor	r19, r19
    1f50:	a0 0d       	add	r26, r0
    1f52:	61 1d       	adc	r22, r1
    1f54:	23 1f       	adc	r18, r19
    1f56:	84 9f       	mul	r24, r20
    1f58:	60 0d       	add	r22, r0
    1f5a:	21 1d       	adc	r18, r1
    1f5c:	82 2f       	mov	r24, r18
    1f5e:	76 2f       	mov	r23, r22
    1f60:	6a 2f       	mov	r22, r26
    1f62:	11 24       	eor	r1, r1
    1f64:	9f 57       	subi	r25, 0x7F	; 127
    1f66:	50 40       	sbci	r21, 0x00	; 0
    1f68:	8a f0       	brmi	.+34     	; 0x1f8c <__mulsf3_pse+0x84>
    1f6a:	e1 f0       	breq	.+56     	; 0x1fa4 <__mulsf3_pse+0x9c>
    1f6c:	88 23       	and	r24, r24
    1f6e:	4a f0       	brmi	.+18     	; 0x1f82 <__mulsf3_pse+0x7a>
    1f70:	ee 0f       	add	r30, r30
    1f72:	ff 1f       	adc	r31, r31
    1f74:	bb 1f       	adc	r27, r27
    1f76:	66 1f       	adc	r22, r22
    1f78:	77 1f       	adc	r23, r23
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	91 50       	subi	r25, 0x01	; 1
    1f7e:	50 40       	sbci	r21, 0x00	; 0
    1f80:	a9 f7       	brne	.-22     	; 0x1f6c <__mulsf3_pse+0x64>
    1f82:	9e 3f       	cpi	r25, 0xFE	; 254
    1f84:	51 05       	cpc	r21, r1
    1f86:	70 f0       	brcs	.+28     	; 0x1fa4 <__mulsf3_pse+0x9c>
    1f88:	fb ce       	rjmp	.-522    	; 0x1d80 <__fp_inf>
    1f8a:	a3 cf       	rjmp	.-186    	; 0x1ed2 <__fp_szero>
    1f8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f8e:	ec f3       	brlt	.-6      	; 0x1f8a <__mulsf3_pse+0x82>
    1f90:	98 3e       	cpi	r25, 0xE8	; 232
    1f92:	dc f3       	brlt	.-10     	; 0x1f8a <__mulsf3_pse+0x82>
    1f94:	86 95       	lsr	r24
    1f96:	77 95       	ror	r23
    1f98:	67 95       	ror	r22
    1f9a:	b7 95       	ror	r27
    1f9c:	f7 95       	ror	r31
    1f9e:	e7 95       	ror	r30
    1fa0:	9f 5f       	subi	r25, 0xFF	; 255
    1fa2:	c1 f7       	brne	.-16     	; 0x1f94 <__mulsf3_pse+0x8c>
    1fa4:	fe 2b       	or	r31, r30
    1fa6:	88 0f       	add	r24, r24
    1fa8:	91 1d       	adc	r25, r1
    1faa:	96 95       	lsr	r25
    1fac:	87 95       	ror	r24
    1fae:	97 f9       	bld	r25, 7
    1fb0:	08 95       	ret

00001fb2 <sin>:
    1fb2:	9f 93       	push	r25
    1fb4:	22 df       	rcall	.-444    	; 0x1dfa <__fp_rempio2>
    1fb6:	0f 90       	pop	r0
    1fb8:	07 fc       	sbrc	r0, 7
    1fba:	ee 5f       	subi	r30, 0xFE	; 254
    1fbc:	56 cf       	rjmp	.-340    	; 0x1e6a <__fp_sinus>
    1fbe:	11 f4       	brne	.+4      	; 0x1fc4 <sin+0x12>
    1fc0:	0e f4       	brtc	.+2      	; 0x1fc4 <sin+0x12>
    1fc2:	e4 ce       	rjmp	.-568    	; 0x1d8c <__fp_nan>
    1fc4:	41 c0       	rjmp	.+130    	; 0x2048 <__fp_mpack>

00001fc6 <sqrt>:
    1fc6:	6a df       	rcall	.-300    	; 0x1e9c <__fp_splitA>
    1fc8:	d0 f3       	brcs	.-12     	; 0x1fbe <sin+0xc>
    1fca:	99 23       	and	r25, r25
    1fcc:	d9 f3       	breq	.-10     	; 0x1fc4 <sin+0x12>
    1fce:	ce f3       	brts	.-14     	; 0x1fc2 <sin+0x10>
    1fd0:	9f 57       	subi	r25, 0x7F	; 127
    1fd2:	55 0b       	sbc	r21, r21
    1fd4:	87 ff       	sbrs	r24, 7
    1fd6:	46 d0       	rcall	.+140    	; 0x2064 <__fp_norm2>
    1fd8:	00 24       	eor	r0, r0
    1fda:	a0 e6       	ldi	r26, 0x60	; 96
    1fdc:	40 ea       	ldi	r20, 0xA0	; 160
    1fde:	90 01       	movw	r18, r0
    1fe0:	80 58       	subi	r24, 0x80	; 128
    1fe2:	56 95       	lsr	r21
    1fe4:	97 95       	ror	r25
    1fe6:	28 f4       	brcc	.+10     	; 0x1ff2 <sqrt+0x2c>
    1fe8:	80 5c       	subi	r24, 0xC0	; 192
    1fea:	66 0f       	add	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	88 1f       	adc	r24, r24
    1ff0:	20 f0       	brcs	.+8      	; 0x1ffa <sqrt+0x34>
    1ff2:	26 17       	cp	r18, r22
    1ff4:	37 07       	cpc	r19, r23
    1ff6:	48 07       	cpc	r20, r24
    1ff8:	30 f4       	brcc	.+12     	; 0x2006 <sqrt+0x40>
    1ffa:	62 1b       	sub	r22, r18
    1ffc:	73 0b       	sbc	r23, r19
    1ffe:	84 0b       	sbc	r24, r20
    2000:	20 29       	or	r18, r0
    2002:	31 29       	or	r19, r1
    2004:	4a 2b       	or	r20, r26
    2006:	a6 95       	lsr	r26
    2008:	17 94       	ror	r1
    200a:	07 94       	ror	r0
    200c:	20 25       	eor	r18, r0
    200e:	31 25       	eor	r19, r1
    2010:	4a 27       	eor	r20, r26
    2012:	58 f7       	brcc	.-42     	; 0x1fea <sqrt+0x24>
    2014:	66 0f       	add	r22, r22
    2016:	77 1f       	adc	r23, r23
    2018:	88 1f       	adc	r24, r24
    201a:	20 f0       	brcs	.+8      	; 0x2024 <sqrt+0x5e>
    201c:	26 17       	cp	r18, r22
    201e:	37 07       	cpc	r19, r23
    2020:	48 07       	cpc	r20, r24
    2022:	30 f4       	brcc	.+12     	; 0x2030 <sqrt+0x6a>
    2024:	62 0b       	sbc	r22, r18
    2026:	73 0b       	sbc	r23, r19
    2028:	84 0b       	sbc	r24, r20
    202a:	20 0d       	add	r18, r0
    202c:	31 1d       	adc	r19, r1
    202e:	41 1d       	adc	r20, r1
    2030:	a0 95       	com	r26
    2032:	81 f7       	brne	.-32     	; 0x2014 <sqrt+0x4e>
    2034:	b9 01       	movw	r22, r18
    2036:	84 2f       	mov	r24, r20
    2038:	91 58       	subi	r25, 0x81	; 129
    203a:	88 0f       	add	r24, r24
    203c:	96 95       	lsr	r25
    203e:	87 95       	ror	r24
    2040:	08 95       	ret

00002042 <square>:
    2042:	9b 01       	movw	r18, r22
    2044:	ac 01       	movw	r20, r24
    2046:	52 cf       	rjmp	.-348    	; 0x1eec <__mulsf3>

00002048 <__fp_mpack>:
    2048:	9f 3f       	cpi	r25, 0xFF	; 255
    204a:	31 f0       	breq	.+12     	; 0x2058 <__fp_mpack_finite+0xc>

0000204c <__fp_mpack_finite>:
    204c:	91 50       	subi	r25, 0x01	; 1
    204e:	20 f4       	brcc	.+8      	; 0x2058 <__fp_mpack_finite+0xc>
    2050:	87 95       	ror	r24
    2052:	77 95       	ror	r23
    2054:	67 95       	ror	r22
    2056:	b7 95       	ror	r27
    2058:	88 0f       	add	r24, r24
    205a:	91 1d       	adc	r25, r1
    205c:	96 95       	lsr	r25
    205e:	87 95       	ror	r24
    2060:	97 f9       	bld	r25, 7
    2062:	08 95       	ret

00002064 <__fp_norm2>:
    2064:	91 50       	subi	r25, 0x01	; 1
    2066:	50 40       	sbci	r21, 0x00	; 0
    2068:	66 0f       	add	r22, r22
    206a:	77 1f       	adc	r23, r23
    206c:	88 1f       	adc	r24, r24
    206e:	d2 f7       	brpl	.-12     	; 0x2064 <__fp_norm2>
    2070:	08 95       	ret

00002072 <__fp_powsodd>:
    2072:	9f 93       	push	r25
    2074:	8f 93       	push	r24
    2076:	7f 93       	push	r23
    2078:	6f 93       	push	r22
    207a:	ff 93       	push	r31
    207c:	ef 93       	push	r30
    207e:	9b 01       	movw	r18, r22
    2080:	ac 01       	movw	r20, r24
    2082:	34 df       	rcall	.-408    	; 0x1eec <__mulsf3>
    2084:	ef 91       	pop	r30
    2086:	ff 91       	pop	r31
    2088:	84 de       	rcall	.-760    	; 0x1d92 <__fp_powser>
    208a:	2f 91       	pop	r18
    208c:	3f 91       	pop	r19
    208e:	4f 91       	pop	r20
    2090:	5f 91       	pop	r21
    2092:	2c cf       	rjmp	.-424    	; 0x1eec <__mulsf3>

00002094 <__tablejump2__>:
    2094:	ee 0f       	add	r30, r30
    2096:	ff 1f       	adc	r31, r31

00002098 <__tablejump__>:
    2098:	05 90       	lpm	r0, Z+
    209a:	f4 91       	lpm	r31, Z
    209c:	e0 2d       	mov	r30, r0
    209e:	09 94       	ijmp

000020a0 <malloc>:
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	91 05       	cpc	r25, r1
    20a8:	10 f4       	brcc	.+4      	; 0x20ae <malloc+0xe>
    20aa:	82 e0       	ldi	r24, 0x02	; 2
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	e0 91 c4 00 	lds	r30, 0x00C4
    20b2:	f0 91 c5 00 	lds	r31, 0x00C5
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	a0 e0       	ldi	r26, 0x00	; 0
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	30 97       	sbiw	r30, 0x00	; 0
    20c0:	39 f1       	breq	.+78     	; 0x2110 <malloc+0x70>
    20c2:	40 81       	ld	r20, Z
    20c4:	51 81       	ldd	r21, Z+1	; 0x01
    20c6:	48 17       	cp	r20, r24
    20c8:	59 07       	cpc	r21, r25
    20ca:	b8 f0       	brcs	.+46     	; 0x20fa <malloc+0x5a>
    20cc:	48 17       	cp	r20, r24
    20ce:	59 07       	cpc	r21, r25
    20d0:	71 f4       	brne	.+28     	; 0x20ee <malloc+0x4e>
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	10 97       	sbiw	r26, 0x00	; 0
    20d8:	29 f0       	breq	.+10     	; 0x20e4 <malloc+0x44>
    20da:	13 96       	adiw	r26, 0x03	; 3
    20dc:	9c 93       	st	X, r25
    20de:	8e 93       	st	-X, r24
    20e0:	12 97       	sbiw	r26, 0x02	; 2
    20e2:	2c c0       	rjmp	.+88     	; 0x213c <malloc+0x9c>
    20e4:	90 93 c5 00 	sts	0x00C5, r25
    20e8:	80 93 c4 00 	sts	0x00C4, r24
    20ec:	27 c0       	rjmp	.+78     	; 0x213c <malloc+0x9c>
    20ee:	21 15       	cp	r18, r1
    20f0:	31 05       	cpc	r19, r1
    20f2:	31 f0       	breq	.+12     	; 0x2100 <malloc+0x60>
    20f4:	42 17       	cp	r20, r18
    20f6:	53 07       	cpc	r21, r19
    20f8:	18 f0       	brcs	.+6      	; 0x2100 <malloc+0x60>
    20fa:	a9 01       	movw	r20, r18
    20fc:	db 01       	movw	r26, r22
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <malloc+0x62>
    2100:	ef 01       	movw	r28, r30
    2102:	9a 01       	movw	r18, r20
    2104:	bd 01       	movw	r22, r26
    2106:	df 01       	movw	r26, r30
    2108:	02 80       	ldd	r0, Z+2	; 0x02
    210a:	f3 81       	ldd	r31, Z+3	; 0x03
    210c:	e0 2d       	mov	r30, r0
    210e:	d7 cf       	rjmp	.-82     	; 0x20be <malloc+0x1e>
    2110:	21 15       	cp	r18, r1
    2112:	31 05       	cpc	r19, r1
    2114:	f9 f0       	breq	.+62     	; 0x2154 <malloc+0xb4>
    2116:	28 1b       	sub	r18, r24
    2118:	39 0b       	sbc	r19, r25
    211a:	24 30       	cpi	r18, 0x04	; 4
    211c:	31 05       	cpc	r19, r1
    211e:	80 f4       	brcc	.+32     	; 0x2140 <malloc+0xa0>
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	9b 81       	ldd	r25, Y+3	; 0x03
    2124:	61 15       	cp	r22, r1
    2126:	71 05       	cpc	r23, r1
    2128:	21 f0       	breq	.+8      	; 0x2132 <malloc+0x92>
    212a:	fb 01       	movw	r30, r22
    212c:	93 83       	std	Z+3, r25	; 0x03
    212e:	82 83       	std	Z+2, r24	; 0x02
    2130:	04 c0       	rjmp	.+8      	; 0x213a <malloc+0x9a>
    2132:	90 93 c5 00 	sts	0x00C5, r25
    2136:	80 93 c4 00 	sts	0x00C4, r24
    213a:	fe 01       	movw	r30, r28
    213c:	32 96       	adiw	r30, 0x02	; 2
    213e:	44 c0       	rjmp	.+136    	; 0x21c8 <malloc+0x128>
    2140:	fe 01       	movw	r30, r28
    2142:	e2 0f       	add	r30, r18
    2144:	f3 1f       	adc	r31, r19
    2146:	81 93       	st	Z+, r24
    2148:	91 93       	st	Z+, r25
    214a:	22 50       	subi	r18, 0x02	; 2
    214c:	31 09       	sbc	r19, r1
    214e:	39 83       	std	Y+1, r19	; 0x01
    2150:	28 83       	st	Y, r18
    2152:	3a c0       	rjmp	.+116    	; 0x21c8 <malloc+0x128>
    2154:	20 91 c2 00 	lds	r18, 0x00C2
    2158:	30 91 c3 00 	lds	r19, 0x00C3
    215c:	23 2b       	or	r18, r19
    215e:	41 f4       	brne	.+16     	; 0x2170 <malloc+0xd0>
    2160:	20 91 62 00 	lds	r18, 0x0062
    2164:	30 91 63 00 	lds	r19, 0x0063
    2168:	30 93 c3 00 	sts	0x00C3, r19
    216c:	20 93 c2 00 	sts	0x00C2, r18
    2170:	20 91 60 00 	lds	r18, 0x0060
    2174:	30 91 61 00 	lds	r19, 0x0061
    2178:	21 15       	cp	r18, r1
    217a:	31 05       	cpc	r19, r1
    217c:	41 f4       	brne	.+16     	; 0x218e <malloc+0xee>
    217e:	2d b7       	in	r18, 0x3d	; 61
    2180:	3e b7       	in	r19, 0x3e	; 62
    2182:	40 91 64 00 	lds	r20, 0x0064
    2186:	50 91 65 00 	lds	r21, 0x0065
    218a:	24 1b       	sub	r18, r20
    218c:	35 0b       	sbc	r19, r21
    218e:	e0 91 c2 00 	lds	r30, 0x00C2
    2192:	f0 91 c3 00 	lds	r31, 0x00C3
    2196:	e2 17       	cp	r30, r18
    2198:	f3 07       	cpc	r31, r19
    219a:	a0 f4       	brcc	.+40     	; 0x21c4 <malloc+0x124>
    219c:	2e 1b       	sub	r18, r30
    219e:	3f 0b       	sbc	r19, r31
    21a0:	28 17       	cp	r18, r24
    21a2:	39 07       	cpc	r19, r25
    21a4:	78 f0       	brcs	.+30     	; 0x21c4 <malloc+0x124>
    21a6:	ac 01       	movw	r20, r24
    21a8:	4e 5f       	subi	r20, 0xFE	; 254
    21aa:	5f 4f       	sbci	r21, 0xFF	; 255
    21ac:	24 17       	cp	r18, r20
    21ae:	35 07       	cpc	r19, r21
    21b0:	48 f0       	brcs	.+18     	; 0x21c4 <malloc+0x124>
    21b2:	4e 0f       	add	r20, r30
    21b4:	5f 1f       	adc	r21, r31
    21b6:	50 93 c3 00 	sts	0x00C3, r21
    21ba:	40 93 c2 00 	sts	0x00C2, r20
    21be:	81 93       	st	Z+, r24
    21c0:	91 93       	st	Z+, r25
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <malloc+0x128>
    21c4:	e0 e0       	ldi	r30, 0x00	; 0
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	cf 01       	movw	r24, r30
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	08 95       	ret

000021d0 <free>:
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	09 f4       	brne	.+2      	; 0x21da <free+0xa>
    21d8:	87 c0       	rjmp	.+270    	; 0x22e8 <free+0x118>
    21da:	fc 01       	movw	r30, r24
    21dc:	32 97       	sbiw	r30, 0x02	; 2
    21de:	13 82       	std	Z+3, r1	; 0x03
    21e0:	12 82       	std	Z+2, r1	; 0x02
    21e2:	c0 91 c4 00 	lds	r28, 0x00C4
    21e6:	d0 91 c5 00 	lds	r29, 0x00C5
    21ea:	20 97       	sbiw	r28, 0x00	; 0
    21ec:	81 f4       	brne	.+32     	; 0x220e <free+0x3e>
    21ee:	20 81       	ld	r18, Z
    21f0:	31 81       	ldd	r19, Z+1	; 0x01
    21f2:	28 0f       	add	r18, r24
    21f4:	39 1f       	adc	r19, r25
    21f6:	80 91 c2 00 	lds	r24, 0x00C2
    21fa:	90 91 c3 00 	lds	r25, 0x00C3
    21fe:	82 17       	cp	r24, r18
    2200:	93 07       	cpc	r25, r19
    2202:	79 f5       	brne	.+94     	; 0x2262 <free+0x92>
    2204:	f0 93 c3 00 	sts	0x00C3, r31
    2208:	e0 93 c2 00 	sts	0x00C2, r30
    220c:	6d c0       	rjmp	.+218    	; 0x22e8 <free+0x118>
    220e:	de 01       	movw	r26, r28
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	ae 17       	cp	r26, r30
    2216:	bf 07       	cpc	r27, r31
    2218:	50 f4       	brcc	.+20     	; 0x222e <free+0x5e>
    221a:	12 96       	adiw	r26, 0x02	; 2
    221c:	4d 91       	ld	r20, X+
    221e:	5c 91       	ld	r21, X
    2220:	13 97       	sbiw	r26, 0x03	; 3
    2222:	9d 01       	movw	r18, r26
    2224:	41 15       	cp	r20, r1
    2226:	51 05       	cpc	r21, r1
    2228:	09 f1       	breq	.+66     	; 0x226c <free+0x9c>
    222a:	da 01       	movw	r26, r20
    222c:	f3 cf       	rjmp	.-26     	; 0x2214 <free+0x44>
    222e:	b3 83       	std	Z+3, r27	; 0x03
    2230:	a2 83       	std	Z+2, r26	; 0x02
    2232:	40 81       	ld	r20, Z
    2234:	51 81       	ldd	r21, Z+1	; 0x01
    2236:	84 0f       	add	r24, r20
    2238:	95 1f       	adc	r25, r21
    223a:	8a 17       	cp	r24, r26
    223c:	9b 07       	cpc	r25, r27
    223e:	71 f4       	brne	.+28     	; 0x225c <free+0x8c>
    2240:	8d 91       	ld	r24, X+
    2242:	9c 91       	ld	r25, X
    2244:	11 97       	sbiw	r26, 0x01	; 1
    2246:	84 0f       	add	r24, r20
    2248:	95 1f       	adc	r25, r21
    224a:	02 96       	adiw	r24, 0x02	; 2
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	80 83       	st	Z, r24
    2250:	12 96       	adiw	r26, 0x02	; 2
    2252:	8d 91       	ld	r24, X+
    2254:	9c 91       	ld	r25, X
    2256:	13 97       	sbiw	r26, 0x03	; 3
    2258:	93 83       	std	Z+3, r25	; 0x03
    225a:	82 83       	std	Z+2, r24	; 0x02
    225c:	21 15       	cp	r18, r1
    225e:	31 05       	cpc	r19, r1
    2260:	29 f4       	brne	.+10     	; 0x226c <free+0x9c>
    2262:	f0 93 c5 00 	sts	0x00C5, r31
    2266:	e0 93 c4 00 	sts	0x00C4, r30
    226a:	3e c0       	rjmp	.+124    	; 0x22e8 <free+0x118>
    226c:	d9 01       	movw	r26, r18
    226e:	13 96       	adiw	r26, 0x03	; 3
    2270:	fc 93       	st	X, r31
    2272:	ee 93       	st	-X, r30
    2274:	12 97       	sbiw	r26, 0x02	; 2
    2276:	4d 91       	ld	r20, X+
    2278:	5d 91       	ld	r21, X+
    227a:	a4 0f       	add	r26, r20
    227c:	b5 1f       	adc	r27, r21
    227e:	ea 17       	cp	r30, r26
    2280:	fb 07       	cpc	r31, r27
    2282:	79 f4       	brne	.+30     	; 0x22a2 <free+0xd2>
    2284:	80 81       	ld	r24, Z
    2286:	91 81       	ldd	r25, Z+1	; 0x01
    2288:	84 0f       	add	r24, r20
    228a:	95 1f       	adc	r25, r21
    228c:	02 96       	adiw	r24, 0x02	; 2
    228e:	d9 01       	movw	r26, r18
    2290:	11 96       	adiw	r26, 0x01	; 1
    2292:	9c 93       	st	X, r25
    2294:	8e 93       	st	-X, r24
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	13 96       	adiw	r26, 0x03	; 3
    229c:	9c 93       	st	X, r25
    229e:	8e 93       	st	-X, r24
    22a0:	12 97       	sbiw	r26, 0x02	; 2
    22a2:	e0 e0       	ldi	r30, 0x00	; 0
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	9b 81       	ldd	r25, Y+3	; 0x03
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	19 f0       	breq	.+6      	; 0x22b4 <free+0xe4>
    22ae:	fe 01       	movw	r30, r28
    22b0:	ec 01       	movw	r28, r24
    22b2:	f9 cf       	rjmp	.-14     	; 0x22a6 <free+0xd6>
    22b4:	ce 01       	movw	r24, r28
    22b6:	02 96       	adiw	r24, 0x02	; 2
    22b8:	28 81       	ld	r18, Y
    22ba:	39 81       	ldd	r19, Y+1	; 0x01
    22bc:	82 0f       	add	r24, r18
    22be:	93 1f       	adc	r25, r19
    22c0:	20 91 c2 00 	lds	r18, 0x00C2
    22c4:	30 91 c3 00 	lds	r19, 0x00C3
    22c8:	28 17       	cp	r18, r24
    22ca:	39 07       	cpc	r19, r25
    22cc:	69 f4       	brne	.+26     	; 0x22e8 <free+0x118>
    22ce:	30 97       	sbiw	r30, 0x00	; 0
    22d0:	29 f4       	brne	.+10     	; 0x22dc <free+0x10c>
    22d2:	10 92 c5 00 	sts	0x00C5, r1
    22d6:	10 92 c4 00 	sts	0x00C4, r1
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <free+0x110>
    22dc:	13 82       	std	Z+3, r1	; 0x03
    22de:	12 82       	std	Z+2, r1	; 0x02
    22e0:	d0 93 c3 00 	sts	0x00C3, r29
    22e4:	c0 93 c2 00 	sts	0x00C2, r28
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	08 95       	ret

000022ee <do_rand>:
    22ee:	8f 92       	push	r8
    22f0:	9f 92       	push	r9
    22f2:	af 92       	push	r10
    22f4:	bf 92       	push	r11
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	ec 01       	movw	r28, r24
    2304:	68 81       	ld	r22, Y
    2306:	79 81       	ldd	r23, Y+1	; 0x01
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	9b 81       	ldd	r25, Y+3	; 0x03
    230c:	61 15       	cp	r22, r1
    230e:	71 05       	cpc	r23, r1
    2310:	81 05       	cpc	r24, r1
    2312:	91 05       	cpc	r25, r1
    2314:	21 f4       	brne	.+8      	; 0x231e <do_rand+0x30>
    2316:	64 e2       	ldi	r22, 0x24	; 36
    2318:	79 ed       	ldi	r23, 0xD9	; 217
    231a:	8b e5       	ldi	r24, 0x5B	; 91
    231c:	97 e0       	ldi	r25, 0x07	; 7
    231e:	2d e1       	ldi	r18, 0x1D	; 29
    2320:	33 ef       	ldi	r19, 0xF3	; 243
    2322:	41 e0       	ldi	r20, 0x01	; 1
    2324:	50 e0       	ldi	r21, 0x00	; 0
    2326:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__divmodsi4>
    232a:	49 01       	movw	r8, r18
    232c:	5a 01       	movw	r10, r20
    232e:	9b 01       	movw	r18, r22
    2330:	ac 01       	movw	r20, r24
    2332:	a7 ea       	ldi	r26, 0xA7	; 167
    2334:	b1 e4       	ldi	r27, 0x41	; 65
    2336:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__muluhisi3>
    233a:	6b 01       	movw	r12, r22
    233c:	7c 01       	movw	r14, r24
    233e:	ac ee       	ldi	r26, 0xEC	; 236
    2340:	b4 ef       	ldi	r27, 0xF4	; 244
    2342:	a5 01       	movw	r20, r10
    2344:	94 01       	movw	r18, r8
    2346:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__mulohisi3>
    234a:	c6 0e       	add	r12, r22
    234c:	d7 1e       	adc	r13, r23
    234e:	e8 1e       	adc	r14, r24
    2350:	f9 1e       	adc	r15, r25
    2352:	f7 fe       	sbrs	r15, 7
    2354:	06 c0       	rjmp	.+12     	; 0x2362 <do_rand+0x74>
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	c8 1a       	sub	r12, r24
    235a:	d1 08       	sbc	r13, r1
    235c:	e1 08       	sbc	r14, r1
    235e:	80 e8       	ldi	r24, 0x80	; 128
    2360:	f8 0a       	sbc	r15, r24
    2362:	c8 82       	st	Y, r12
    2364:	d9 82       	std	Y+1, r13	; 0x01
    2366:	ea 82       	std	Y+2, r14	; 0x02
    2368:	fb 82       	std	Y+3, r15	; 0x03
    236a:	c6 01       	movw	r24, r12
    236c:	9f 77       	andi	r25, 0x7F	; 127
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	ff 90       	pop	r15
    2374:	ef 90       	pop	r14
    2376:	df 90       	pop	r13
    2378:	cf 90       	pop	r12
    237a:	bf 90       	pop	r11
    237c:	af 90       	pop	r10
    237e:	9f 90       	pop	r9
    2380:	8f 90       	pop	r8
    2382:	08 95       	ret

00002384 <rand_r>:
    2384:	0e 94 77 11 	call	0x22ee	; 0x22ee <do_rand>
    2388:	08 95       	ret

0000238a <rand>:
    238a:	86 e6       	ldi	r24, 0x66	; 102
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0e 94 77 11 	call	0x22ee	; 0x22ee <do_rand>
    2392:	08 95       	ret

00002394 <srand>:
    2394:	a0 e0       	ldi	r26, 0x00	; 0
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	80 93 66 00 	sts	0x0066, r24
    239c:	90 93 67 00 	sts	0x0067, r25
    23a0:	a0 93 68 00 	sts	0x0068, r26
    23a4:	b0 93 69 00 	sts	0x0069, r27
    23a8:	08 95       	ret

000023aa <strtol>:
    23aa:	2f 92       	push	r2
    23ac:	3f 92       	push	r3
    23ae:	5f 92       	push	r5
    23b0:	6f 92       	push	r6
    23b2:	7f 92       	push	r7
    23b4:	8f 92       	push	r8
    23b6:	9f 92       	push	r9
    23b8:	af 92       	push	r10
    23ba:	bf 92       	push	r11
    23bc:	cf 92       	push	r12
    23be:	df 92       	push	r13
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	8b 01       	movw	r16, r22
    23ce:	ea 01       	movw	r28, r20
    23d0:	61 15       	cp	r22, r1
    23d2:	71 05       	cpc	r23, r1
    23d4:	21 f0       	breq	.+8      	; 0x23de <strtol+0x34>
    23d6:	db 01       	movw	r26, r22
    23d8:	8c 93       	st	X, r24
    23da:	11 96       	adiw	r26, 0x01	; 1
    23dc:	9c 93       	st	X, r25
    23de:	20 97       	sbiw	r28, 0x00	; 0
    23e0:	39 f0       	breq	.+14     	; 0x23f0 <strtol+0x46>
    23e2:	9e 01       	movw	r18, r28
    23e4:	22 50       	subi	r18, 0x02	; 2
    23e6:	31 09       	sbc	r19, r1
    23e8:	23 32       	cpi	r18, 0x23	; 35
    23ea:	31 05       	cpc	r19, r1
    23ec:	08 f0       	brcs	.+2      	; 0x23f0 <strtol+0x46>
    23ee:	fb c0       	rjmp	.+502    	; 0x25e6 <strtol+0x23c>
    23f0:	7c 01       	movw	r14, r24
    23f2:	67 01       	movw	r12, r14
    23f4:	bf ef       	ldi	r27, 0xFF	; 255
    23f6:	cb 1a       	sub	r12, r27
    23f8:	db 0a       	sbc	r13, r27
    23fa:	56 01       	movw	r10, r12
    23fc:	f7 01       	movw	r30, r14
    23fe:	60 80       	ld	r6, Z
    2400:	86 2d       	mov	r24, r6
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 09 13 	call	0x2612	; 0x2612 <isspace>
    2408:	89 2b       	or	r24, r25
    240a:	11 f0       	breq	.+4      	; 0x2410 <strtol+0x66>
    240c:	76 01       	movw	r14, r12
    240e:	f1 cf       	rjmp	.-30     	; 0x23f2 <strtol+0x48>
    2410:	fd e2       	ldi	r31, 0x2D	; 45
    2412:	6f 12       	cpse	r6, r31
    2414:	0a c0       	rjmp	.+20     	; 0x242a <strtol+0x80>
    2416:	57 01       	movw	r10, r14
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	a8 0e       	add	r10, r24
    241c:	b1 1c       	adc	r11, r1
    241e:	d7 01       	movw	r26, r14
    2420:	11 96       	adiw	r26, 0x01	; 1
    2422:	6c 90       	ld	r6, X
    2424:	77 24       	eor	r7, r7
    2426:	73 94       	inc	r7
    2428:	0b c0       	rjmp	.+22     	; 0x2440 <strtol+0x96>
    242a:	bb e2       	ldi	r27, 0x2B	; 43
    242c:	6b 12       	cpse	r6, r27
    242e:	07 c0       	rjmp	.+14     	; 0x243e <strtol+0x94>
    2430:	57 01       	movw	r10, r14
    2432:	e2 e0       	ldi	r30, 0x02	; 2
    2434:	ae 0e       	add	r10, r30
    2436:	b1 1c       	adc	r11, r1
    2438:	d7 01       	movw	r26, r14
    243a:	11 96       	adiw	r26, 0x01	; 1
    243c:	6c 90       	ld	r6, X
    243e:	71 2c       	mov	r7, r1
    2440:	ce 01       	movw	r24, r28
    2442:	8f 7e       	andi	r24, 0xEF	; 239
    2444:	89 2b       	or	r24, r25
    2446:	89 f4       	brne	.+34     	; 0x246a <strtol+0xc0>
    2448:	b0 e3       	ldi	r27, 0x30	; 48
    244a:	6b 12       	cpse	r6, r27
    244c:	22 c0       	rjmp	.+68     	; 0x2492 <strtol+0xe8>
    244e:	f5 01       	movw	r30, r10
    2450:	80 81       	ld	r24, Z
    2452:	8f 7d       	andi	r24, 0xDF	; 223
    2454:	88 35       	cpi	r24, 0x58	; 88
    2456:	41 f5       	brne	.+80     	; 0x24a8 <strtol+0xfe>
    2458:	61 80       	ldd	r6, Z+1	; 0x01
    245a:	f2 e0       	ldi	r31, 0x02	; 2
    245c:	af 0e       	add	r10, r31
    245e:	b1 1c       	adc	r11, r1
    2460:	87 2d       	mov	r24, r7
    2462:	82 60       	ori	r24, 0x02	; 2
    2464:	78 2e       	mov	r7, r24
    2466:	c0 e1       	ldi	r28, 0x10	; 16
    2468:	d0 e0       	ldi	r29, 0x00	; 0
    246a:	c8 30       	cpi	r28, 0x08	; 8
    246c:	d1 05       	cpc	r29, r1
    246e:	f1 f0       	breq	.+60     	; 0x24ac <strtol+0x102>
    2470:	4c f4       	brge	.+18     	; 0x2484 <strtol+0xda>
    2472:	c2 30       	cpi	r28, 0x02	; 2
    2474:	d1 05       	cpc	r29, r1
    2476:	11 f5       	brne	.+68     	; 0x24bc <strtol+0x112>
    2478:	c1 2c       	mov	r12, r1
    247a:	d1 2c       	mov	r13, r1
    247c:	e1 2c       	mov	r14, r1
    247e:	b0 e4       	ldi	r27, 0x40	; 64
    2480:	fb 2e       	mov	r15, r27
    2482:	2f c0       	rjmp	.+94     	; 0x24e2 <strtol+0x138>
    2484:	ca 30       	cpi	r28, 0x0A	; 10
    2486:	d1 05       	cpc	r29, r1
    2488:	31 f0       	breq	.+12     	; 0x2496 <strtol+0xec>
    248a:	c0 31       	cpi	r28, 0x10	; 16
    248c:	d1 05       	cpc	r29, r1
    248e:	21 f1       	breq	.+72     	; 0x24d8 <strtol+0x12e>
    2490:	15 c0       	rjmp	.+42     	; 0x24bc <strtol+0x112>
    2492:	20 97       	sbiw	r28, 0x00	; 0
    2494:	51 f7       	brne	.-44     	; 0x246a <strtol+0xc0>
    2496:	ca e0       	ldi	r28, 0x0A	; 10
    2498:	d0 e0       	ldi	r29, 0x00	; 0
    249a:	ac ec       	ldi	r26, 0xCC	; 204
    249c:	ca 2e       	mov	r12, r26
    249e:	dc 2c       	mov	r13, r12
    24a0:	ec 2c       	mov	r14, r12
    24a2:	ac e0       	ldi	r26, 0x0C	; 12
    24a4:	fa 2e       	mov	r15, r26
    24a6:	1d c0       	rjmp	.+58     	; 0x24e2 <strtol+0x138>
    24a8:	20 97       	sbiw	r28, 0x00	; 0
    24aa:	f9 f6       	brne	.-66     	; 0x246a <strtol+0xc0>
    24ac:	c8 e0       	ldi	r28, 0x08	; 8
    24ae:	d0 e0       	ldi	r29, 0x00	; 0
    24b0:	c1 2c       	mov	r12, r1
    24b2:	d1 2c       	mov	r13, r1
    24b4:	e1 2c       	mov	r14, r1
    24b6:	f0 e1       	ldi	r31, 0x10	; 16
    24b8:	ff 2e       	mov	r15, r31
    24ba:	13 c0       	rjmp	.+38     	; 0x24e2 <strtol+0x138>
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	70 e0       	ldi	r23, 0x00	; 0
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e8       	ldi	r25, 0x80	; 128
    24c4:	9e 01       	movw	r18, r28
    24c6:	44 27       	eor	r20, r20
    24c8:	37 fd       	sbrc	r19, 7
    24ca:	40 95       	com	r20
    24cc:	54 2f       	mov	r21, r20
    24ce:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__udivmodsi4>
    24d2:	69 01       	movw	r12, r18
    24d4:	7a 01       	movw	r14, r20
    24d6:	05 c0       	rjmp	.+10     	; 0x24e2 <strtol+0x138>
    24d8:	c1 2c       	mov	r12, r1
    24da:	d1 2c       	mov	r13, r1
    24dc:	e1 2c       	mov	r14, r1
    24de:	e8 e0       	ldi	r30, 0x08	; 8
    24e0:	fe 2e       	mov	r15, r30
    24e2:	f5 01       	movw	r30, r10
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	a9 01       	movw	r20, r18
    24ec:	4e 01       	movw	r8, r28
    24ee:	aa 24       	eor	r10, r10
    24f0:	97 fc       	sbrc	r9, 7
    24f2:	a0 94       	com	r10
    24f4:	ba 2c       	mov	r11, r10
    24f6:	1f 01       	movw	r2, r30
    24f8:	70 ed       	ldi	r23, 0xD0	; 208
    24fa:	57 2e       	mov	r5, r23
    24fc:	56 0c       	add	r5, r6
    24fe:	a9 e0       	ldi	r26, 0x09	; 9
    2500:	a5 15       	cp	r26, r5
    2502:	70 f4       	brcc	.+28     	; 0x2520 <strtol+0x176>
    2504:	8f eb       	ldi	r24, 0xBF	; 191
    2506:	86 0d       	add	r24, r6
    2508:	8a 31       	cpi	r24, 0x1A	; 26
    250a:	18 f4       	brcc	.+6      	; 0x2512 <strtol+0x168>
    250c:	99 ec       	ldi	r25, 0xC9	; 201
    250e:	59 2e       	mov	r5, r25
    2510:	06 c0       	rjmp	.+12     	; 0x251e <strtol+0x174>
    2512:	8f e9       	ldi	r24, 0x9F	; 159
    2514:	86 0d       	add	r24, r6
    2516:	8a 31       	cpi	r24, 0x1A	; 26
    2518:	30 f5       	brcc	.+76     	; 0x2566 <strtol+0x1bc>
    251a:	89 ea       	ldi	r24, 0xA9	; 169
    251c:	58 2e       	mov	r5, r24
    251e:	56 0c       	add	r5, r6
    2520:	85 2d       	mov	r24, r5
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	8c 17       	cp	r24, r28
    2526:	9d 07       	cpc	r25, r29
    2528:	f4 f4       	brge	.+60     	; 0x2566 <strtol+0x1bc>
    252a:	67 fd       	sbrc	r22, 7
    252c:	18 c0       	rjmp	.+48     	; 0x255e <strtol+0x1b4>
    252e:	c2 16       	cp	r12, r18
    2530:	d3 06       	cpc	r13, r19
    2532:	e4 06       	cpc	r14, r20
    2534:	f5 06       	cpc	r15, r21
    2536:	80 f0       	brcs	.+32     	; 0x2558 <strtol+0x1ae>
    2538:	c5 01       	movw	r24, r10
    253a:	b4 01       	movw	r22, r8
    253c:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <__mulsi3>
    2540:	9b 01       	movw	r18, r22
    2542:	ac 01       	movw	r20, r24
    2544:	25 0d       	add	r18, r5
    2546:	31 1d       	adc	r19, r1
    2548:	41 1d       	adc	r20, r1
    254a:	51 1d       	adc	r21, r1
    254c:	21 30       	cpi	r18, 0x01	; 1
    254e:	31 05       	cpc	r19, r1
    2550:	41 05       	cpc	r20, r1
    2552:	b0 e8       	ldi	r27, 0x80	; 128
    2554:	5b 07       	cpc	r21, r27
    2556:	10 f0       	brcs	.+4      	; 0x255c <strtol+0x1b2>
    2558:	6f ef       	ldi	r22, 0xFF	; 255
    255a:	01 c0       	rjmp	.+2      	; 0x255e <strtol+0x1b4>
    255c:	61 e0       	ldi	r22, 0x01	; 1
    255e:	31 96       	adiw	r30, 0x01	; 1
    2560:	d1 01       	movw	r26, r2
    2562:	6c 90       	ld	r6, X
    2564:	c8 cf       	rjmp	.-112    	; 0x24f6 <strtol+0x14c>
    2566:	87 2d       	mov	r24, r7
    2568:	81 70       	andi	r24, 0x01	; 1
    256a:	01 15       	cp	r16, r1
    256c:	11 05       	cpc	r17, r1
    256e:	71 f0       	breq	.+28     	; 0x258c <strtol+0x1e2>
    2570:	66 23       	and	r22, r22
    2572:	29 f0       	breq	.+10     	; 0x257e <strtol+0x1d4>
    2574:	31 97       	sbiw	r30, 0x01	; 1
    2576:	d8 01       	movw	r26, r16
    2578:	ed 93       	st	X+, r30
    257a:	fc 93       	st	X, r31
    257c:	07 c0       	rjmp	.+14     	; 0x258c <strtol+0x1e2>
    257e:	71 fe       	sbrs	r7, 1
    2580:	19 c0       	rjmp	.+50     	; 0x25b4 <strtol+0x20a>
    2582:	32 97       	sbiw	r30, 0x02	; 2
    2584:	d8 01       	movw	r26, r16
    2586:	ed 93       	st	X+, r30
    2588:	fc 93       	st	X, r31
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <strtol+0x20a>
    258c:	67 ff       	sbrs	r22, 7
    258e:	12 c0       	rjmp	.+36     	; 0x25b4 <strtol+0x20a>
    2590:	88 23       	and	r24, r24
    2592:	29 f0       	breq	.+10     	; 0x259e <strtol+0x1f4>
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	50 e8       	ldi	r21, 0x80	; 128
    259c:	04 c0       	rjmp	.+8      	; 0x25a6 <strtol+0x1fc>
    259e:	2f ef       	ldi	r18, 0xFF	; 255
    25a0:	3f ef       	ldi	r19, 0xFF	; 255
    25a2:	4f ef       	ldi	r20, 0xFF	; 255
    25a4:	5f e7       	ldi	r21, 0x7F	; 127
    25a6:	82 e2       	ldi	r24, 0x22	; 34
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	90 93 c7 00 	sts	0x00C7, r25
    25ae:	80 93 c6 00 	sts	0x00C6, r24
    25b2:	16 c0       	rjmp	.+44     	; 0x25e0 <strtol+0x236>
    25b4:	88 23       	and	r24, r24
    25b6:	41 f0       	breq	.+16     	; 0x25c8 <strtol+0x21e>
    25b8:	50 95       	com	r21
    25ba:	40 95       	com	r20
    25bc:	30 95       	com	r19
    25be:	21 95       	neg	r18
    25c0:	3f 4f       	sbci	r19, 0xFF	; 255
    25c2:	4f 4f       	sbci	r20, 0xFF	; 255
    25c4:	5f 4f       	sbci	r21, 0xFF	; 255
    25c6:	0c c0       	rjmp	.+24     	; 0x25e0 <strtol+0x236>
    25c8:	57 ff       	sbrs	r21, 7
    25ca:	0a c0       	rjmp	.+20     	; 0x25e0 <strtol+0x236>
    25cc:	82 e2       	ldi	r24, 0x22	; 34
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	90 93 c7 00 	sts	0x00C7, r25
    25d4:	80 93 c6 00 	sts	0x00C6, r24
    25d8:	2f ef       	ldi	r18, 0xFF	; 255
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	4f ef       	ldi	r20, 0xFF	; 255
    25de:	5f e7       	ldi	r21, 0x7F	; 127
    25e0:	b9 01       	movw	r22, r18
    25e2:	ca 01       	movw	r24, r20
    25e4:	04 c0       	rjmp	.+8      	; 0x25ee <strtol+0x244>
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	ff 90       	pop	r15
    25f8:	ef 90       	pop	r14
    25fa:	df 90       	pop	r13
    25fc:	cf 90       	pop	r12
    25fe:	bf 90       	pop	r11
    2600:	af 90       	pop	r10
    2602:	9f 90       	pop	r9
    2604:	8f 90       	pop	r8
    2606:	7f 90       	pop	r7
    2608:	6f 90       	pop	r6
    260a:	5f 90       	pop	r5
    260c:	3f 90       	pop	r3
    260e:	2f 90       	pop	r2
    2610:	08 95       	ret

00002612 <isspace>:
    2612:	91 11       	cpse	r25, r1
    2614:	fa c1       	rjmp	.+1012   	; 0x2a0a <__ctype_isfalse>
    2616:	80 32       	cpi	r24, 0x20	; 32
    2618:	19 f0       	breq	.+6      	; 0x2620 <isspace+0xe>
    261a:	89 50       	subi	r24, 0x09	; 9
    261c:	85 50       	subi	r24, 0x05	; 5
    261e:	d0 f7       	brcc	.-12     	; 0x2614 <isspace+0x2>
    2620:	08 95       	ret

00002622 <sprintf>:
    2622:	ae e0       	ldi	r26, 0x0E	; 14
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e7 e1       	ldi	r30, 0x17	; 23
    2628:	f3 e1       	ldi	r31, 0x13	; 19
    262a:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x1c>
    262e:	0d 89       	ldd	r16, Y+21	; 0x15
    2630:	1e 89       	ldd	r17, Y+22	; 0x16
    2632:	86 e0       	ldi	r24, 0x06	; 6
    2634:	8c 83       	std	Y+4, r24	; 0x04
    2636:	1a 83       	std	Y+2, r17	; 0x02
    2638:	09 83       	std	Y+1, r16	; 0x01
    263a:	8f ef       	ldi	r24, 0xFF	; 255
    263c:	9f e7       	ldi	r25, 0x7F	; 127
    263e:	9e 83       	std	Y+6, r25	; 0x06
    2640:	8d 83       	std	Y+5, r24	; 0x05
    2642:	ae 01       	movw	r20, r28
    2644:	47 5e       	subi	r20, 0xE7	; 231
    2646:	5f 4f       	sbci	r21, 0xFF	; 255
    2648:	6f 89       	ldd	r22, Y+23	; 0x17
    264a:	78 8d       	ldd	r23, Y+24	; 0x18
    264c:	ce 01       	movw	r24, r28
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	0e 94 33 13 	call	0x2666	; 0x2666 <vfprintf>
    2654:	ef 81       	ldd	r30, Y+7	; 0x07
    2656:	f8 85       	ldd	r31, Y+8	; 0x08
    2658:	e0 0f       	add	r30, r16
    265a:	f1 1f       	adc	r31, r17
    265c:	10 82       	st	Z, r1
    265e:	2e 96       	adiw	r28, 0x0e	; 14
    2660:	e4 e0       	ldi	r30, 0x04	; 4
    2662:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x1c>

00002666 <vfprintf>:
    2666:	ac e0       	ldi	r26, 0x0C	; 12
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e9 e3       	ldi	r30, 0x39	; 57
    266c:	f3 e1       	ldi	r31, 0x13	; 19
    266e:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__>
    2672:	7c 01       	movw	r14, r24
    2674:	6b 01       	movw	r12, r22
    2676:	8a 01       	movw	r16, r20
    2678:	fc 01       	movw	r30, r24
    267a:	17 82       	std	Z+7, r1	; 0x07
    267c:	16 82       	std	Z+6, r1	; 0x06
    267e:	83 81       	ldd	r24, Z+3	; 0x03
    2680:	81 ff       	sbrs	r24, 1
    2682:	bd c1       	rjmp	.+890    	; 0x29fe <vfprintf+0x398>
    2684:	ce 01       	movw	r24, r28
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	4c 01       	movw	r8, r24
    268a:	f7 01       	movw	r30, r14
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	f6 01       	movw	r30, r12
    2690:	93 fd       	sbrc	r25, 3
    2692:	85 91       	lpm	r24, Z+
    2694:	93 ff       	sbrs	r25, 3
    2696:	81 91       	ld	r24, Z+
    2698:	6f 01       	movw	r12, r30
    269a:	88 23       	and	r24, r24
    269c:	09 f4       	brne	.+2      	; 0x26a0 <vfprintf+0x3a>
    269e:	ab c1       	rjmp	.+854    	; 0x29f6 <vfprintf+0x390>
    26a0:	85 32       	cpi	r24, 0x25	; 37
    26a2:	39 f4       	brne	.+14     	; 0x26b2 <vfprintf+0x4c>
    26a4:	93 fd       	sbrc	r25, 3
    26a6:	85 91       	lpm	r24, Z+
    26a8:	93 ff       	sbrs	r25, 3
    26aa:	81 91       	ld	r24, Z+
    26ac:	6f 01       	movw	r12, r30
    26ae:	85 32       	cpi	r24, 0x25	; 37
    26b0:	29 f4       	brne	.+10     	; 0x26bc <vfprintf+0x56>
    26b2:	b7 01       	movw	r22, r14
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <fputc>
    26ba:	e7 cf       	rjmp	.-50     	; 0x268a <vfprintf+0x24>
    26bc:	51 2c       	mov	r5, r1
    26be:	31 2c       	mov	r3, r1
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	20 32       	cpi	r18, 0x20	; 32
    26c4:	a0 f4       	brcc	.+40     	; 0x26ee <vfprintf+0x88>
    26c6:	8b 32       	cpi	r24, 0x2B	; 43
    26c8:	69 f0       	breq	.+26     	; 0x26e4 <vfprintf+0x7e>
    26ca:	30 f4       	brcc	.+12     	; 0x26d8 <vfprintf+0x72>
    26cc:	80 32       	cpi	r24, 0x20	; 32
    26ce:	59 f0       	breq	.+22     	; 0x26e6 <vfprintf+0x80>
    26d0:	83 32       	cpi	r24, 0x23	; 35
    26d2:	69 f4       	brne	.+26     	; 0x26ee <vfprintf+0x88>
    26d4:	20 61       	ori	r18, 0x10	; 16
    26d6:	2c c0       	rjmp	.+88     	; 0x2730 <vfprintf+0xca>
    26d8:	8d 32       	cpi	r24, 0x2D	; 45
    26da:	39 f0       	breq	.+14     	; 0x26ea <vfprintf+0x84>
    26dc:	80 33       	cpi	r24, 0x30	; 48
    26de:	39 f4       	brne	.+14     	; 0x26ee <vfprintf+0x88>
    26e0:	21 60       	ori	r18, 0x01	; 1
    26e2:	26 c0       	rjmp	.+76     	; 0x2730 <vfprintf+0xca>
    26e4:	22 60       	ori	r18, 0x02	; 2
    26e6:	24 60       	ori	r18, 0x04	; 4
    26e8:	23 c0       	rjmp	.+70     	; 0x2730 <vfprintf+0xca>
    26ea:	28 60       	ori	r18, 0x08	; 8
    26ec:	21 c0       	rjmp	.+66     	; 0x2730 <vfprintf+0xca>
    26ee:	27 fd       	sbrc	r18, 7
    26f0:	27 c0       	rjmp	.+78     	; 0x2740 <vfprintf+0xda>
    26f2:	30 ed       	ldi	r19, 0xD0	; 208
    26f4:	38 0f       	add	r19, r24
    26f6:	3a 30       	cpi	r19, 0x0A	; 10
    26f8:	78 f4       	brcc	.+30     	; 0x2718 <vfprintf+0xb2>
    26fa:	26 ff       	sbrs	r18, 6
    26fc:	06 c0       	rjmp	.+12     	; 0x270a <vfprintf+0xa4>
    26fe:	fa e0       	ldi	r31, 0x0A	; 10
    2700:	5f 9e       	mul	r5, r31
    2702:	30 0d       	add	r19, r0
    2704:	11 24       	eor	r1, r1
    2706:	53 2e       	mov	r5, r19
    2708:	13 c0       	rjmp	.+38     	; 0x2730 <vfprintf+0xca>
    270a:	8a e0       	ldi	r24, 0x0A	; 10
    270c:	38 9e       	mul	r3, r24
    270e:	30 0d       	add	r19, r0
    2710:	11 24       	eor	r1, r1
    2712:	33 2e       	mov	r3, r19
    2714:	20 62       	ori	r18, 0x20	; 32
    2716:	0c c0       	rjmp	.+24     	; 0x2730 <vfprintf+0xca>
    2718:	8e 32       	cpi	r24, 0x2E	; 46
    271a:	21 f4       	brne	.+8      	; 0x2724 <vfprintf+0xbe>
    271c:	26 fd       	sbrc	r18, 6
    271e:	6b c1       	rjmp	.+726    	; 0x29f6 <vfprintf+0x390>
    2720:	20 64       	ori	r18, 0x40	; 64
    2722:	06 c0       	rjmp	.+12     	; 0x2730 <vfprintf+0xca>
    2724:	8c 36       	cpi	r24, 0x6C	; 108
    2726:	11 f4       	brne	.+4      	; 0x272c <vfprintf+0xc6>
    2728:	20 68       	ori	r18, 0x80	; 128
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <vfprintf+0xca>
    272c:	88 36       	cpi	r24, 0x68	; 104
    272e:	41 f4       	brne	.+16     	; 0x2740 <vfprintf+0xda>
    2730:	f6 01       	movw	r30, r12
    2732:	93 fd       	sbrc	r25, 3
    2734:	85 91       	lpm	r24, Z+
    2736:	93 ff       	sbrs	r25, 3
    2738:	81 91       	ld	r24, Z+
    273a:	6f 01       	movw	r12, r30
    273c:	81 11       	cpse	r24, r1
    273e:	c1 cf       	rjmp	.-126    	; 0x26c2 <vfprintf+0x5c>
    2740:	98 2f       	mov	r25, r24
    2742:	9f 7d       	andi	r25, 0xDF	; 223
    2744:	95 54       	subi	r25, 0x45	; 69
    2746:	93 30       	cpi	r25, 0x03	; 3
    2748:	28 f4       	brcc	.+10     	; 0x2754 <vfprintf+0xee>
    274a:	0c 5f       	subi	r16, 0xFC	; 252
    274c:	1f 4f       	sbci	r17, 0xFF	; 255
    274e:	ff e3       	ldi	r31, 0x3F	; 63
    2750:	f9 83       	std	Y+1, r31	; 0x01
    2752:	0d c0       	rjmp	.+26     	; 0x276e <vfprintf+0x108>
    2754:	83 36       	cpi	r24, 0x63	; 99
    2756:	31 f0       	breq	.+12     	; 0x2764 <vfprintf+0xfe>
    2758:	83 37       	cpi	r24, 0x73	; 115
    275a:	71 f0       	breq	.+28     	; 0x2778 <vfprintf+0x112>
    275c:	83 35       	cpi	r24, 0x53	; 83
    275e:	09 f0       	breq	.+2      	; 0x2762 <vfprintf+0xfc>
    2760:	5b c0       	rjmp	.+182    	; 0x2818 <vfprintf+0x1b2>
    2762:	22 c0       	rjmp	.+68     	; 0x27a8 <vfprintf+0x142>
    2764:	f8 01       	movw	r30, r16
    2766:	80 81       	ld	r24, Z
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	0e 5f       	subi	r16, 0xFE	; 254
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	44 24       	eor	r4, r4
    2770:	43 94       	inc	r4
    2772:	51 2c       	mov	r5, r1
    2774:	54 01       	movw	r10, r8
    2776:	15 c0       	rjmp	.+42     	; 0x27a2 <vfprintf+0x13c>
    2778:	38 01       	movw	r6, r16
    277a:	f2 e0       	ldi	r31, 0x02	; 2
    277c:	6f 0e       	add	r6, r31
    277e:	71 1c       	adc	r7, r1
    2780:	f8 01       	movw	r30, r16
    2782:	a0 80       	ld	r10, Z
    2784:	b1 80       	ldd	r11, Z+1	; 0x01
    2786:	26 ff       	sbrs	r18, 6
    2788:	03 c0       	rjmp	.+6      	; 0x2790 <vfprintf+0x12a>
    278a:	65 2d       	mov	r22, r5
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <vfprintf+0x12e>
    2790:	6f ef       	ldi	r22, 0xFF	; 255
    2792:	7f ef       	ldi	r23, 0xFF	; 255
    2794:	c5 01       	movw	r24, r10
    2796:	2c 87       	std	Y+12, r18	; 0x0c
    2798:	0e 94 13 15 	call	0x2a26	; 0x2a26 <strnlen>
    279c:	2c 01       	movw	r4, r24
    279e:	83 01       	movw	r16, r6
    27a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    27a2:	2f 77       	andi	r18, 0x7F	; 127
    27a4:	22 2e       	mov	r2, r18
    27a6:	17 c0       	rjmp	.+46     	; 0x27d6 <vfprintf+0x170>
    27a8:	38 01       	movw	r6, r16
    27aa:	f2 e0       	ldi	r31, 0x02	; 2
    27ac:	6f 0e       	add	r6, r31
    27ae:	71 1c       	adc	r7, r1
    27b0:	f8 01       	movw	r30, r16
    27b2:	a0 80       	ld	r10, Z
    27b4:	b1 80       	ldd	r11, Z+1	; 0x01
    27b6:	26 ff       	sbrs	r18, 6
    27b8:	03 c0       	rjmp	.+6      	; 0x27c0 <vfprintf+0x15a>
    27ba:	65 2d       	mov	r22, r5
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	02 c0       	rjmp	.+4      	; 0x27c4 <vfprintf+0x15e>
    27c0:	6f ef       	ldi	r22, 0xFF	; 255
    27c2:	7f ef       	ldi	r23, 0xFF	; 255
    27c4:	c5 01       	movw	r24, r10
    27c6:	2c 87       	std	Y+12, r18	; 0x0c
    27c8:	0e 94 08 15 	call	0x2a10	; 0x2a10 <strnlen_P>
    27cc:	2c 01       	movw	r4, r24
    27ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    27d0:	20 68       	ori	r18, 0x80	; 128
    27d2:	22 2e       	mov	r2, r18
    27d4:	83 01       	movw	r16, r6
    27d6:	23 fc       	sbrc	r2, 3
    27d8:	1b c0       	rjmp	.+54     	; 0x2810 <vfprintf+0x1aa>
    27da:	83 2d       	mov	r24, r3
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	48 16       	cp	r4, r24
    27e0:	59 06       	cpc	r5, r25
    27e2:	b0 f4       	brcc	.+44     	; 0x2810 <vfprintf+0x1aa>
    27e4:	b7 01       	movw	r22, r14
    27e6:	80 e2       	ldi	r24, 0x20	; 32
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <fputc>
    27ee:	3a 94       	dec	r3
    27f0:	f4 cf       	rjmp	.-24     	; 0x27da <vfprintf+0x174>
    27f2:	f5 01       	movw	r30, r10
    27f4:	27 fc       	sbrc	r2, 7
    27f6:	85 91       	lpm	r24, Z+
    27f8:	27 fe       	sbrs	r2, 7
    27fa:	81 91       	ld	r24, Z+
    27fc:	5f 01       	movw	r10, r30
    27fe:	b7 01       	movw	r22, r14
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <fputc>
    2806:	31 10       	cpse	r3, r1
    2808:	3a 94       	dec	r3
    280a:	f1 e0       	ldi	r31, 0x01	; 1
    280c:	4f 1a       	sub	r4, r31
    280e:	51 08       	sbc	r5, r1
    2810:	41 14       	cp	r4, r1
    2812:	51 04       	cpc	r5, r1
    2814:	71 f7       	brne	.-36     	; 0x27f2 <vfprintf+0x18c>
    2816:	e5 c0       	rjmp	.+458    	; 0x29e2 <vfprintf+0x37c>
    2818:	84 36       	cpi	r24, 0x64	; 100
    281a:	11 f0       	breq	.+4      	; 0x2820 <vfprintf+0x1ba>
    281c:	89 36       	cpi	r24, 0x69	; 105
    281e:	39 f5       	brne	.+78     	; 0x286e <vfprintf+0x208>
    2820:	f8 01       	movw	r30, r16
    2822:	27 ff       	sbrs	r18, 7
    2824:	07 c0       	rjmp	.+14     	; 0x2834 <vfprintf+0x1ce>
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	0c 5f       	subi	r16, 0xFC	; 252
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	08 c0       	rjmp	.+16     	; 0x2844 <vfprintf+0x1de>
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	88 27       	eor	r24, r24
    283a:	77 fd       	sbrc	r23, 7
    283c:	80 95       	com	r24
    283e:	98 2f       	mov	r25, r24
    2840:	0e 5f       	subi	r16, 0xFE	; 254
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	2f 76       	andi	r18, 0x6F	; 111
    2846:	b2 2e       	mov	r11, r18
    2848:	97 ff       	sbrs	r25, 7
    284a:	09 c0       	rjmp	.+18     	; 0x285e <vfprintf+0x1f8>
    284c:	90 95       	com	r25
    284e:	80 95       	com	r24
    2850:	70 95       	com	r23
    2852:	61 95       	neg	r22
    2854:	7f 4f       	sbci	r23, 0xFF	; 255
    2856:	8f 4f       	sbci	r24, 0xFF	; 255
    2858:	9f 4f       	sbci	r25, 0xFF	; 255
    285a:	20 68       	ori	r18, 0x80	; 128
    285c:	b2 2e       	mov	r11, r18
    285e:	2a e0       	ldi	r18, 0x0A	; 10
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	a4 01       	movw	r20, r8
    2864:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__ultoa_invert>
    2868:	a8 2e       	mov	r10, r24
    286a:	a8 18       	sub	r10, r8
    286c:	44 c0       	rjmp	.+136    	; 0x28f6 <vfprintf+0x290>
    286e:	85 37       	cpi	r24, 0x75	; 117
    2870:	29 f4       	brne	.+10     	; 0x287c <vfprintf+0x216>
    2872:	2f 7e       	andi	r18, 0xEF	; 239
    2874:	b2 2e       	mov	r11, r18
    2876:	2a e0       	ldi	r18, 0x0A	; 10
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	25 c0       	rjmp	.+74     	; 0x28c6 <vfprintf+0x260>
    287c:	f2 2f       	mov	r31, r18
    287e:	f9 7f       	andi	r31, 0xF9	; 249
    2880:	bf 2e       	mov	r11, r31
    2882:	8f 36       	cpi	r24, 0x6F	; 111
    2884:	c1 f0       	breq	.+48     	; 0x28b6 <vfprintf+0x250>
    2886:	18 f4       	brcc	.+6      	; 0x288e <vfprintf+0x228>
    2888:	88 35       	cpi	r24, 0x58	; 88
    288a:	79 f0       	breq	.+30     	; 0x28aa <vfprintf+0x244>
    288c:	b4 c0       	rjmp	.+360    	; 0x29f6 <vfprintf+0x390>
    288e:	80 37       	cpi	r24, 0x70	; 112
    2890:	19 f0       	breq	.+6      	; 0x2898 <vfprintf+0x232>
    2892:	88 37       	cpi	r24, 0x78	; 120
    2894:	21 f0       	breq	.+8      	; 0x289e <vfprintf+0x238>
    2896:	af c0       	rjmp	.+350    	; 0x29f6 <vfprintf+0x390>
    2898:	2f 2f       	mov	r18, r31
    289a:	20 61       	ori	r18, 0x10	; 16
    289c:	b2 2e       	mov	r11, r18
    289e:	b4 fe       	sbrs	r11, 4
    28a0:	0d c0       	rjmp	.+26     	; 0x28bc <vfprintf+0x256>
    28a2:	8b 2d       	mov	r24, r11
    28a4:	84 60       	ori	r24, 0x04	; 4
    28a6:	b8 2e       	mov	r11, r24
    28a8:	09 c0       	rjmp	.+18     	; 0x28bc <vfprintf+0x256>
    28aa:	24 ff       	sbrs	r18, 4
    28ac:	0a c0       	rjmp	.+20     	; 0x28c2 <vfprintf+0x25c>
    28ae:	9f 2f       	mov	r25, r31
    28b0:	96 60       	ori	r25, 0x06	; 6
    28b2:	b9 2e       	mov	r11, r25
    28b4:	06 c0       	rjmp	.+12     	; 0x28c2 <vfprintf+0x25c>
    28b6:	28 e0       	ldi	r18, 0x08	; 8
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	05 c0       	rjmp	.+10     	; 0x28c6 <vfprintf+0x260>
    28bc:	20 e1       	ldi	r18, 0x10	; 16
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <vfprintf+0x260>
    28c2:	20 e1       	ldi	r18, 0x10	; 16
    28c4:	32 e0       	ldi	r19, 0x02	; 2
    28c6:	f8 01       	movw	r30, r16
    28c8:	b7 fe       	sbrs	r11, 7
    28ca:	07 c0       	rjmp	.+14     	; 0x28da <vfprintf+0x274>
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	0c 5f       	subi	r16, 0xFC	; 252
    28d6:	1f 4f       	sbci	r17, 0xFF	; 255
    28d8:	06 c0       	rjmp	.+12     	; 0x28e6 <vfprintf+0x280>
    28da:	60 81       	ld	r22, Z
    28dc:	71 81       	ldd	r23, Z+1	; 0x01
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	0e 5f       	subi	r16, 0xFE	; 254
    28e4:	1f 4f       	sbci	r17, 0xFF	; 255
    28e6:	a4 01       	movw	r20, r8
    28e8:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__ultoa_invert>
    28ec:	a8 2e       	mov	r10, r24
    28ee:	a8 18       	sub	r10, r8
    28f0:	fb 2d       	mov	r31, r11
    28f2:	ff 77       	andi	r31, 0x7F	; 127
    28f4:	bf 2e       	mov	r11, r31
    28f6:	b6 fe       	sbrs	r11, 6
    28f8:	0b c0       	rjmp	.+22     	; 0x2910 <vfprintf+0x2aa>
    28fa:	2b 2d       	mov	r18, r11
    28fc:	2e 7f       	andi	r18, 0xFE	; 254
    28fe:	a5 14       	cp	r10, r5
    2900:	50 f4       	brcc	.+20     	; 0x2916 <vfprintf+0x2b0>
    2902:	b4 fe       	sbrs	r11, 4
    2904:	0a c0       	rjmp	.+20     	; 0x291a <vfprintf+0x2b4>
    2906:	b2 fc       	sbrc	r11, 2
    2908:	08 c0       	rjmp	.+16     	; 0x291a <vfprintf+0x2b4>
    290a:	2b 2d       	mov	r18, r11
    290c:	2e 7e       	andi	r18, 0xEE	; 238
    290e:	05 c0       	rjmp	.+10     	; 0x291a <vfprintf+0x2b4>
    2910:	7a 2c       	mov	r7, r10
    2912:	2b 2d       	mov	r18, r11
    2914:	03 c0       	rjmp	.+6      	; 0x291c <vfprintf+0x2b6>
    2916:	7a 2c       	mov	r7, r10
    2918:	01 c0       	rjmp	.+2      	; 0x291c <vfprintf+0x2b6>
    291a:	75 2c       	mov	r7, r5
    291c:	24 ff       	sbrs	r18, 4
    291e:	0d c0       	rjmp	.+26     	; 0x293a <vfprintf+0x2d4>
    2920:	fe 01       	movw	r30, r28
    2922:	ea 0d       	add	r30, r10
    2924:	f1 1d       	adc	r31, r1
    2926:	80 81       	ld	r24, Z
    2928:	80 33       	cpi	r24, 0x30	; 48
    292a:	11 f4       	brne	.+4      	; 0x2930 <vfprintf+0x2ca>
    292c:	29 7e       	andi	r18, 0xE9	; 233
    292e:	09 c0       	rjmp	.+18     	; 0x2942 <vfprintf+0x2dc>
    2930:	22 ff       	sbrs	r18, 2
    2932:	06 c0       	rjmp	.+12     	; 0x2940 <vfprintf+0x2da>
    2934:	73 94       	inc	r7
    2936:	73 94       	inc	r7
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <vfprintf+0x2dc>
    293a:	82 2f       	mov	r24, r18
    293c:	86 78       	andi	r24, 0x86	; 134
    293e:	09 f0       	breq	.+2      	; 0x2942 <vfprintf+0x2dc>
    2940:	73 94       	inc	r7
    2942:	23 fd       	sbrc	r18, 3
    2944:	13 c0       	rjmp	.+38     	; 0x296c <vfprintf+0x306>
    2946:	20 ff       	sbrs	r18, 0
    2948:	06 c0       	rjmp	.+12     	; 0x2956 <vfprintf+0x2f0>
    294a:	5a 2c       	mov	r5, r10
    294c:	73 14       	cp	r7, r3
    294e:	18 f4       	brcc	.+6      	; 0x2956 <vfprintf+0x2f0>
    2950:	53 0c       	add	r5, r3
    2952:	57 18       	sub	r5, r7
    2954:	73 2c       	mov	r7, r3
    2956:	73 14       	cp	r7, r3
    2958:	68 f4       	brcc	.+26     	; 0x2974 <vfprintf+0x30e>
    295a:	b7 01       	movw	r22, r14
    295c:	80 e2       	ldi	r24, 0x20	; 32
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	2c 87       	std	Y+12, r18	; 0x0c
    2962:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <fputc>
    2966:	73 94       	inc	r7
    2968:	2c 85       	ldd	r18, Y+12	; 0x0c
    296a:	f5 cf       	rjmp	.-22     	; 0x2956 <vfprintf+0x2f0>
    296c:	73 14       	cp	r7, r3
    296e:	10 f4       	brcc	.+4      	; 0x2974 <vfprintf+0x30e>
    2970:	37 18       	sub	r3, r7
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <vfprintf+0x310>
    2974:	31 2c       	mov	r3, r1
    2976:	24 ff       	sbrs	r18, 4
    2978:	12 c0       	rjmp	.+36     	; 0x299e <vfprintf+0x338>
    297a:	b7 01       	movw	r22, r14
    297c:	80 e3       	ldi	r24, 0x30	; 48
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	2c 87       	std	Y+12, r18	; 0x0c
    2982:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <fputc>
    2986:	2c 85       	ldd	r18, Y+12	; 0x0c
    2988:	22 ff       	sbrs	r18, 2
    298a:	17 c0       	rjmp	.+46     	; 0x29ba <vfprintf+0x354>
    298c:	21 ff       	sbrs	r18, 1
    298e:	03 c0       	rjmp	.+6      	; 0x2996 <vfprintf+0x330>
    2990:	88 e5       	ldi	r24, 0x58	; 88
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	02 c0       	rjmp	.+4      	; 0x299a <vfprintf+0x334>
    2996:	88 e7       	ldi	r24, 0x78	; 120
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	b7 01       	movw	r22, r14
    299c:	0c c0       	rjmp	.+24     	; 0x29b6 <vfprintf+0x350>
    299e:	82 2f       	mov	r24, r18
    29a0:	86 78       	andi	r24, 0x86	; 134
    29a2:	59 f0       	breq	.+22     	; 0x29ba <vfprintf+0x354>
    29a4:	21 fd       	sbrc	r18, 1
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <vfprintf+0x346>
    29a8:	80 e2       	ldi	r24, 0x20	; 32
    29aa:	01 c0       	rjmp	.+2      	; 0x29ae <vfprintf+0x348>
    29ac:	8b e2       	ldi	r24, 0x2B	; 43
    29ae:	27 fd       	sbrc	r18, 7
    29b0:	8d e2       	ldi	r24, 0x2D	; 45
    29b2:	b7 01       	movw	r22, r14
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <fputc>
    29ba:	a5 14       	cp	r10, r5
    29bc:	38 f4       	brcc	.+14     	; 0x29cc <vfprintf+0x366>
    29be:	b7 01       	movw	r22, r14
    29c0:	80 e3       	ldi	r24, 0x30	; 48
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <fputc>
    29c8:	5a 94       	dec	r5
    29ca:	f7 cf       	rjmp	.-18     	; 0x29ba <vfprintf+0x354>
    29cc:	aa 94       	dec	r10
    29ce:	f4 01       	movw	r30, r8
    29d0:	ea 0d       	add	r30, r10
    29d2:	f1 1d       	adc	r31, r1
    29d4:	80 81       	ld	r24, Z
    29d6:	b7 01       	movw	r22, r14
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <fputc>
    29de:	a1 10       	cpse	r10, r1
    29e0:	f5 cf       	rjmp	.-22     	; 0x29cc <vfprintf+0x366>
    29e2:	33 20       	and	r3, r3
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <vfprintf+0x382>
    29e6:	51 ce       	rjmp	.-862    	; 0x268a <vfprintf+0x24>
    29e8:	b7 01       	movw	r22, r14
    29ea:	80 e2       	ldi	r24, 0x20	; 32
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <fputc>
    29f2:	3a 94       	dec	r3
    29f4:	f6 cf       	rjmp	.-20     	; 0x29e2 <vfprintf+0x37c>
    29f6:	f7 01       	movw	r30, r14
    29f8:	86 81       	ldd	r24, Z+6	; 0x06
    29fa:	97 81       	ldd	r25, Z+7	; 0x07
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <vfprintf+0x39c>
    29fe:	8f ef       	ldi	r24, 0xFF	; 255
    2a00:	9f ef       	ldi	r25, 0xFF	; 255
    2a02:	2c 96       	adiw	r28, 0x0c	; 12
    2a04:	e2 e1       	ldi	r30, 0x12	; 18
    2a06:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__epilogue_restores__>

00002a0a <__ctype_isfalse>:
    2a0a:	99 27       	eor	r25, r25
    2a0c:	88 27       	eor	r24, r24

00002a0e <__ctype_istrue>:
    2a0e:	08 95       	ret

00002a10 <strnlen_P>:
    2a10:	fc 01       	movw	r30, r24
    2a12:	05 90       	lpm	r0, Z+
    2a14:	61 50       	subi	r22, 0x01	; 1
    2a16:	70 40       	sbci	r23, 0x00	; 0
    2a18:	01 10       	cpse	r0, r1
    2a1a:	d8 f7       	brcc	.-10     	; 0x2a12 <strnlen_P+0x2>
    2a1c:	80 95       	com	r24
    2a1e:	90 95       	com	r25
    2a20:	8e 0f       	add	r24, r30
    2a22:	9f 1f       	adc	r25, r31
    2a24:	08 95       	ret

00002a26 <strnlen>:
    2a26:	fc 01       	movw	r30, r24
    2a28:	61 50       	subi	r22, 0x01	; 1
    2a2a:	70 40       	sbci	r23, 0x00	; 0
    2a2c:	01 90       	ld	r0, Z+
    2a2e:	01 10       	cpse	r0, r1
    2a30:	d8 f7       	brcc	.-10     	; 0x2a28 <strnlen+0x2>
    2a32:	80 95       	com	r24
    2a34:	90 95       	com	r25
    2a36:	8e 0f       	add	r24, r30
    2a38:	9f 1f       	adc	r25, r31
    2a3a:	08 95       	ret

00002a3c <fputc>:
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	18 2f       	mov	r17, r24
    2a46:	09 2f       	mov	r16, r25
    2a48:	eb 01       	movw	r28, r22
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	81 fd       	sbrc	r24, 1
    2a4e:	03 c0       	rjmp	.+6      	; 0x2a56 <fputc+0x1a>
    2a50:	8f ef       	ldi	r24, 0xFF	; 255
    2a52:	9f ef       	ldi	r25, 0xFF	; 255
    2a54:	20 c0       	rjmp	.+64     	; 0x2a96 <fputc+0x5a>
    2a56:	82 ff       	sbrs	r24, 2
    2a58:	10 c0       	rjmp	.+32     	; 0x2a7a <fputc+0x3e>
    2a5a:	4e 81       	ldd	r20, Y+6	; 0x06
    2a5c:	5f 81       	ldd	r21, Y+7	; 0x07
    2a5e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a60:	3d 81       	ldd	r19, Y+5	; 0x05
    2a62:	42 17       	cp	r20, r18
    2a64:	53 07       	cpc	r21, r19
    2a66:	7c f4       	brge	.+30     	; 0x2a86 <fputc+0x4a>
    2a68:	e8 81       	ld	r30, Y
    2a6a:	f9 81       	ldd	r31, Y+1	; 0x01
    2a6c:	9f 01       	movw	r18, r30
    2a6e:	2f 5f       	subi	r18, 0xFF	; 255
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	39 83       	std	Y+1, r19	; 0x01
    2a74:	28 83       	st	Y, r18
    2a76:	10 83       	st	Z, r17
    2a78:	06 c0       	rjmp	.+12     	; 0x2a86 <fputc+0x4a>
    2a7a:	e8 85       	ldd	r30, Y+8	; 0x08
    2a7c:	f9 85       	ldd	r31, Y+9	; 0x09
    2a7e:	81 2f       	mov	r24, r17
    2a80:	09 95       	icall
    2a82:	89 2b       	or	r24, r25
    2a84:	29 f7       	brne	.-54     	; 0x2a50 <fputc+0x14>
    2a86:	2e 81       	ldd	r18, Y+6	; 0x06
    2a88:	3f 81       	ldd	r19, Y+7	; 0x07
    2a8a:	2f 5f       	subi	r18, 0xFF	; 255
    2a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8e:	3f 83       	std	Y+7, r19	; 0x07
    2a90:	2e 83       	std	Y+6, r18	; 0x06
    2a92:	81 2f       	mov	r24, r17
    2a94:	90 2f       	mov	r25, r16
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	1f 91       	pop	r17
    2a9c:	0f 91       	pop	r16
    2a9e:	08 95       	ret

00002aa0 <__ultoa_invert>:
    2aa0:	fa 01       	movw	r30, r20
    2aa2:	aa 27       	eor	r26, r26
    2aa4:	28 30       	cpi	r18, 0x08	; 8
    2aa6:	51 f1       	breq	.+84     	; 0x2afc <__ultoa_invert+0x5c>
    2aa8:	20 31       	cpi	r18, 0x10	; 16
    2aaa:	81 f1       	breq	.+96     	; 0x2b0c <__ultoa_invert+0x6c>
    2aac:	e8 94       	clt
    2aae:	6f 93       	push	r22
    2ab0:	6e 7f       	andi	r22, 0xFE	; 254
    2ab2:	6e 5f       	subi	r22, 0xFE	; 254
    2ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aba:	af 4f       	sbci	r26, 0xFF	; 255
    2abc:	b1 e0       	ldi	r27, 0x01	; 1
    2abe:	3e d0       	rcall	.+124    	; 0x2b3c <__ultoa_invert+0x9c>
    2ac0:	b4 e0       	ldi	r27, 0x04	; 4
    2ac2:	3c d0       	rcall	.+120    	; 0x2b3c <__ultoa_invert+0x9c>
    2ac4:	67 0f       	add	r22, r23
    2ac6:	78 1f       	adc	r23, r24
    2ac8:	89 1f       	adc	r24, r25
    2aca:	9a 1f       	adc	r25, r26
    2acc:	a1 1d       	adc	r26, r1
    2ace:	68 0f       	add	r22, r24
    2ad0:	79 1f       	adc	r23, r25
    2ad2:	8a 1f       	adc	r24, r26
    2ad4:	91 1d       	adc	r25, r1
    2ad6:	a1 1d       	adc	r26, r1
    2ad8:	6a 0f       	add	r22, r26
    2ada:	71 1d       	adc	r23, r1
    2adc:	81 1d       	adc	r24, r1
    2ade:	91 1d       	adc	r25, r1
    2ae0:	a1 1d       	adc	r26, r1
    2ae2:	20 d0       	rcall	.+64     	; 0x2b24 <__ultoa_invert+0x84>
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <__ultoa_invert+0x48>
    2ae6:	68 94       	set
    2ae8:	3f 91       	pop	r19
    2aea:	2a e0       	ldi	r18, 0x0A	; 10
    2aec:	26 9f       	mul	r18, r22
    2aee:	11 24       	eor	r1, r1
    2af0:	30 19       	sub	r19, r0
    2af2:	30 5d       	subi	r19, 0xD0	; 208
    2af4:	31 93       	st	Z+, r19
    2af6:	de f6       	brtc	.-74     	; 0x2aae <__ultoa_invert+0xe>
    2af8:	cf 01       	movw	r24, r30
    2afa:	08 95       	ret
    2afc:	46 2f       	mov	r20, r22
    2afe:	47 70       	andi	r20, 0x07	; 7
    2b00:	40 5d       	subi	r20, 0xD0	; 208
    2b02:	41 93       	st	Z+, r20
    2b04:	b3 e0       	ldi	r27, 0x03	; 3
    2b06:	0f d0       	rcall	.+30     	; 0x2b26 <__ultoa_invert+0x86>
    2b08:	c9 f7       	brne	.-14     	; 0x2afc <__ultoa_invert+0x5c>
    2b0a:	f6 cf       	rjmp	.-20     	; 0x2af8 <__ultoa_invert+0x58>
    2b0c:	46 2f       	mov	r20, r22
    2b0e:	4f 70       	andi	r20, 0x0F	; 15
    2b10:	40 5d       	subi	r20, 0xD0	; 208
    2b12:	4a 33       	cpi	r20, 0x3A	; 58
    2b14:	18 f0       	brcs	.+6      	; 0x2b1c <__ultoa_invert+0x7c>
    2b16:	49 5d       	subi	r20, 0xD9	; 217
    2b18:	31 fd       	sbrc	r19, 1
    2b1a:	40 52       	subi	r20, 0x20	; 32
    2b1c:	41 93       	st	Z+, r20
    2b1e:	02 d0       	rcall	.+4      	; 0x2b24 <__ultoa_invert+0x84>
    2b20:	a9 f7       	brne	.-22     	; 0x2b0c <__ultoa_invert+0x6c>
    2b22:	ea cf       	rjmp	.-44     	; 0x2af8 <__ultoa_invert+0x58>
    2b24:	b4 e0       	ldi	r27, 0x04	; 4
    2b26:	a6 95       	lsr	r26
    2b28:	97 95       	ror	r25
    2b2a:	87 95       	ror	r24
    2b2c:	77 95       	ror	r23
    2b2e:	67 95       	ror	r22
    2b30:	ba 95       	dec	r27
    2b32:	c9 f7       	brne	.-14     	; 0x2b26 <__ultoa_invert+0x86>
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	61 05       	cpc	r22, r1
    2b38:	71 05       	cpc	r23, r1
    2b3a:	08 95       	ret
    2b3c:	9b 01       	movw	r18, r22
    2b3e:	ac 01       	movw	r20, r24
    2b40:	0a 2e       	mov	r0, r26
    2b42:	06 94       	lsr	r0
    2b44:	57 95       	ror	r21
    2b46:	47 95       	ror	r20
    2b48:	37 95       	ror	r19
    2b4a:	27 95       	ror	r18
    2b4c:	ba 95       	dec	r27
    2b4e:	c9 f7       	brne	.-14     	; 0x2b42 <__ultoa_invert+0xa2>
    2b50:	62 0f       	add	r22, r18
    2b52:	73 1f       	adc	r23, r19
    2b54:	84 1f       	adc	r24, r20
    2b56:	95 1f       	adc	r25, r21
    2b58:	a0 1d       	adc	r26, r0
    2b5a:	08 95       	ret

00002b5c <__mulsi3>:
    2b5c:	db 01       	movw	r26, r22
    2b5e:	8f 93       	push	r24
    2b60:	9f 93       	push	r25
    2b62:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__muluhisi3>
    2b66:	bf 91       	pop	r27
    2b68:	af 91       	pop	r26
    2b6a:	a2 9f       	mul	r26, r18
    2b6c:	80 0d       	add	r24, r0
    2b6e:	91 1d       	adc	r25, r1
    2b70:	a3 9f       	mul	r26, r19
    2b72:	90 0d       	add	r25, r0
    2b74:	b2 9f       	mul	r27, r18
    2b76:	90 0d       	add	r25, r0
    2b78:	11 24       	eor	r1, r1
    2b7a:	08 95       	ret

00002b7c <__udivmodsi4>:
    2b7c:	a1 e2       	ldi	r26, 0x21	; 33
    2b7e:	1a 2e       	mov	r1, r26
    2b80:	aa 1b       	sub	r26, r26
    2b82:	bb 1b       	sub	r27, r27
    2b84:	fd 01       	movw	r30, r26
    2b86:	0d c0       	rjmp	.+26     	; 0x2ba2 <__udivmodsi4_ep>

00002b88 <__udivmodsi4_loop>:
    2b88:	aa 1f       	adc	r26, r26
    2b8a:	bb 1f       	adc	r27, r27
    2b8c:	ee 1f       	adc	r30, r30
    2b8e:	ff 1f       	adc	r31, r31
    2b90:	a2 17       	cp	r26, r18
    2b92:	b3 07       	cpc	r27, r19
    2b94:	e4 07       	cpc	r30, r20
    2b96:	f5 07       	cpc	r31, r21
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <__udivmodsi4_ep>
    2b9a:	a2 1b       	sub	r26, r18
    2b9c:	b3 0b       	sbc	r27, r19
    2b9e:	e4 0b       	sbc	r30, r20
    2ba0:	f5 0b       	sbc	r31, r21

00002ba2 <__udivmodsi4_ep>:
    2ba2:	66 1f       	adc	r22, r22
    2ba4:	77 1f       	adc	r23, r23
    2ba6:	88 1f       	adc	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	1a 94       	dec	r1
    2bac:	69 f7       	brne	.-38     	; 0x2b88 <__udivmodsi4_loop>
    2bae:	60 95       	com	r22
    2bb0:	70 95       	com	r23
    2bb2:	80 95       	com	r24
    2bb4:	90 95       	com	r25
    2bb6:	9b 01       	movw	r18, r22
    2bb8:	ac 01       	movw	r20, r24
    2bba:	bd 01       	movw	r22, r26
    2bbc:	cf 01       	movw	r24, r30
    2bbe:	08 95       	ret

00002bc0 <__divmodsi4>:
    2bc0:	05 2e       	mov	r0, r21
    2bc2:	97 fb       	bst	r25, 7
    2bc4:	1e f4       	brtc	.+6      	; 0x2bcc <__divmodsi4+0xc>
    2bc6:	00 94       	com	r0
    2bc8:	0e 94 f7 15 	call	0x2bee	; 0x2bee <__negsi2>
    2bcc:	57 fd       	sbrc	r21, 7
    2bce:	07 d0       	rcall	.+14     	; 0x2bde <__divmodsi4_neg2>
    2bd0:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__udivmodsi4>
    2bd4:	07 fc       	sbrc	r0, 7
    2bd6:	03 d0       	rcall	.+6      	; 0x2bde <__divmodsi4_neg2>
    2bd8:	4e f4       	brtc	.+18     	; 0x2bec <__divmodsi4_exit>
    2bda:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__negsi2>

00002bde <__divmodsi4_neg2>:
    2bde:	50 95       	com	r21
    2be0:	40 95       	com	r20
    2be2:	30 95       	com	r19
    2be4:	21 95       	neg	r18
    2be6:	3f 4f       	sbci	r19, 0xFF	; 255
    2be8:	4f 4f       	sbci	r20, 0xFF	; 255
    2bea:	5f 4f       	sbci	r21, 0xFF	; 255

00002bec <__divmodsi4_exit>:
    2bec:	08 95       	ret

00002bee <__negsi2>:
    2bee:	90 95       	com	r25
    2bf0:	80 95       	com	r24
    2bf2:	70 95       	com	r23
    2bf4:	61 95       	neg	r22
    2bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfc:	08 95       	ret

00002bfe <__muluhisi3>:
    2bfe:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__umulhisi3>
    2c02:	a5 9f       	mul	r26, r21
    2c04:	90 0d       	add	r25, r0
    2c06:	b4 9f       	mul	r27, r20
    2c08:	90 0d       	add	r25, r0
    2c0a:	a4 9f       	mul	r26, r20
    2c0c:	80 0d       	add	r24, r0
    2c0e:	91 1d       	adc	r25, r1
    2c10:	11 24       	eor	r1, r1
    2c12:	08 95       	ret

00002c14 <__mulshisi3>:
    2c14:	b7 ff       	sbrs	r27, 7
    2c16:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__muluhisi3>

00002c1a <__mulohisi3>:
    2c1a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__muluhisi3>
    2c1e:	82 1b       	sub	r24, r18
    2c20:	93 0b       	sbc	r25, r19
    2c22:	08 95       	ret

00002c24 <__prologue_saves__>:
    2c24:	2f 92       	push	r2
    2c26:	3f 92       	push	r3
    2c28:	4f 92       	push	r4
    2c2a:	5f 92       	push	r5
    2c2c:	6f 92       	push	r6
    2c2e:	7f 92       	push	r7
    2c30:	8f 92       	push	r8
    2c32:	9f 92       	push	r9
    2c34:	af 92       	push	r10
    2c36:	bf 92       	push	r11
    2c38:	cf 92       	push	r12
    2c3a:	df 92       	push	r13
    2c3c:	ef 92       	push	r14
    2c3e:	ff 92       	push	r15
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	ca 1b       	sub	r28, r26
    2c4e:	db 0b       	sbc	r29, r27
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	09 94       	ijmp

00002c5c <__epilogue_restores__>:
    2c5c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c5e:	39 88       	ldd	r3, Y+17	; 0x11
    2c60:	48 88       	ldd	r4, Y+16	; 0x10
    2c62:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c64:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c66:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c68:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c6e:	b9 84       	ldd	r11, Y+9	; 0x09
    2c70:	c8 84       	ldd	r12, Y+8	; 0x08
    2c72:	df 80       	ldd	r13, Y+7	; 0x07
    2c74:	ee 80       	ldd	r14, Y+6	; 0x06
    2c76:	fd 80       	ldd	r15, Y+5	; 0x05
    2c78:	0c 81       	ldd	r16, Y+4	; 0x04
    2c7a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c7c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c7e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c80:	ce 0f       	add	r28, r30
    2c82:	d1 1d       	adc	r29, r1
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	ed 01       	movw	r28, r26
    2c90:	08 95       	ret

00002c92 <__umulhisi3>:
    2c92:	a2 9f       	mul	r26, r18
    2c94:	b0 01       	movw	r22, r0
    2c96:	b3 9f       	mul	r27, r19
    2c98:	c0 01       	movw	r24, r0
    2c9a:	a3 9f       	mul	r26, r19
    2c9c:	70 0d       	add	r23, r0
    2c9e:	81 1d       	adc	r24, r1
    2ca0:	11 24       	eor	r1, r1
    2ca2:	91 1d       	adc	r25, r1
    2ca4:	b2 9f       	mul	r27, r18
    2ca6:	70 0d       	add	r23, r0
    2ca8:	81 1d       	adc	r24, r1
    2caa:	11 24       	eor	r1, r1
    2cac:	91 1d       	adc	r25, r1
    2cae:	08 95       	ret

00002cb0 <_exit>:
    2cb0:	f8 94       	cli

00002cb2 <__stop_program>:
    2cb2:	ff cf       	rjmp	.-2      	; 0x2cb2 <__stop_program>
